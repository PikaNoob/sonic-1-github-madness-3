00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            		include "MapMacros.asm"
00000000 =00000001                  SonicMappingsVer = 1
00000000 =00000001                  SonicDplcVer = 1
00000000                            
00000000                            ; macro to declare a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTable macro
00000000                            ;@current_mappings_table = *
00000000                            ;	endm
00000000                            
00000000 =00000005                  MappingSize		= 5
00000000 =00000001                  MappingHeaderSize	= 1
00000000                            
00000000                            ; macro to declare an entry in a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTableEntry macro ptr
00000000                            ;	dc.ATTRIBUTE ptr-.current_mappings_table
00000000                            ;	endm
00000000                            
00000000                            ;spriteHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicMappingsVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	elseif SonicMappingsVer=4
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / MappingSize)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            spritePiece macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(((tile)>>1)|((tile)&$8000))
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            spritePiece2P macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri,tile2,xflip2,yflip2,pal2,pri2
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri2&1)<<15)|((pal2&3)<<13)|((yflip2&1)<<12)|((xflip2&1)<<11))+(tile2)
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ;dplcHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicDplcVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	elseif SonicDplcVer=3
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / 2)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            dplcEntry macro tiles,offset
00000000                            	if SonicDplcVer=3
00000000                            	dc.w	((offset&$FFF)<<4)|((tiles-1)&$F)
00000000                            	elseif SonicDplcVer=4
00000000                            	dc.w	(((tiles-1)&$F)<<12)|((offset&$FFF)<<4)
00000000                            	else
00000000                            	dc.w	(((tiles-1)&$F)<<12)|(offset&$FFF)
00000000                            	endif
00000000                            	endm
00000000                            	endm
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow1size+8
00000000                            lswifi: equ lsrow1size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            ; options menu
00000000                            optamm: equ ((OMTEnd-OptionMenuText)/16)-1
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 50FF FE00 0000 0000 0000+  Vectors:	dc.l 'P'<<24|$FFFE00,		'O'<<24|EntryPoint,	'Y'<<24|BusError,	'S'<<24|AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l 'U'<<24|IllegalInstr,	'F'<<24|ZeroDivide,	'O'<<24|ChkInstr,	'K'<<24|TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l 'L'<<24|PrivilegeViol,	'F'<<24|Trace,		'U'<<24|Line1010Emu,	'I'<<24|Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l 'L'<<24|ErrorExcept,	' '<<24|ErrorExcept,	'R'<<24|ErrorExcept,	'N'<<24|ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ' '<<24|ErrorExcept,	' '<<24|ErrorExcept,	' '<<24|ErrorExcept,	' '<<24|'H'<<24|ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l 'B'<<24|ErrorExcept,	'O'<<24|ErrorExcept,	'I'<<24|ErrorExcept,	'L'<<24|ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l 'H'<<24|ErrorExcept,	'I'<<24|ErrorTrap,	'M'<<24|ErrorTrap,	' '<<24|ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l ' '<<24|PalToCRAM,		PalToCRAM,		' '<<24|vBlankRoutine,	vBlankRoutine
00000080 5768 6174 2069 7320 6120+  		dc.b 'What is a hex editor? A miserable little detector of secrets!   But enough talk,fuck off you!'
000000DD 2020 2020 2020 2020 2020+  		dcb.b $100-*,' '
00000100 2053 4547 4141 4141 4141+  Console:	dc.b ' SEGAAAAAAAAAAAA' ; NOTE: " SEGA" is valid for the TMSS, but not for some other stuff, namely the game genie
00000110 4141 4141 4141 4141 4141+  Date:		dc.b 'AAAAAAAAAAAAAAAA'
00000120 4966 2079 6F75 2063 616E+  Title_Local:	dc.b 'If you can see this, your emulator is homoerotic' ; Domestic name
00000150                            		dcb.b $150-*,' '
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood'
0000017E 2020                       		dcb.b $180-*,' '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'	; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A4A 4A4A 4A4A 4A4A 4A4A+  		dcb.b $1A0-*,'J'	; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 6964 6B20 6920 7370 656E+  Notes:		dc.b 'idk i spent all my  mental budget on the other stuff'
000001F0                            		dcb.b $1F0-*,' '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            	even
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320                            ;		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000320                            ;		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000320                            ;		move.l	(a1),d0
00000320                            ;		moveq	#0,d1
00000320                            ;
00000320                            ;loc_32C:
00000320                            ;		add.w	(a0)+,d1
00000320                            ;		cmp.l	a0,d0
00000320                            ;		bcc.s	loc_32C
00000320                            ;		movea.l	#Checksum,a1	; read the checksum
00000320                            ;		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
00000320                            ;		bne.w	CheckSumError	; if they don't match, branch
00000320 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000324 7E00                       		moveq	#0,d7
00000326 3C3C 007F                  		move.w	#$7F,d6
0000032A                            
0000032A                            loc_348:
0000032A 2CC7                       		move.l	d7,(a6)+
0000032C 51CE FFFC                  		dbf	d6,loc_348
00000330 1039 00A1 0001             		move.b	($A10001).l,d0
00000336 0200 00C0                  		andi.b	#$C0,d0
0000033A 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000033E                            GameInit:
0000033E 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000344 7E00                       		moveq	#0,d7
00000346 3C3C 3F7F                  		move.w	#$3F7F,d6
0000034A                            
0000034A                            GameClrRAM:
0000034A 2CC7                       		move.l	d7,(a6)+
0000034C 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000350                            
00000350 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
00000356 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
0000035E                            
0000035E 6100 0000                  		bsr.w	VDPSetupGame
00000362 6100 0000                  		bsr.w	SoundDriverLoad
00000366 6100 0000                  		bsr.w	JoypadInit
0000036A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000370                            
00000370 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w	; has checksum routine already run?
00000378 6700 0000                  		beq.w	@nosplashscreens	; if yes, branch
0000037C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w	; set flag so checksum won't be run again
00000384 1039 00A1 0001             		move.b	($A10001).l,d0
0000038A 0240 000F                  		and.w	#$F,d0
0000038E 6700                       		beq.s	@notmss
00000390 4EB9 0000 0000             		jsr	GM_AntiTMSS
00000396                            @notmss:
00000396                            @nosplashscreens:
00000396                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000396 4EB9 0000 0000                             jsr     MegaPCM_LoadDriver
0000039C 41F9 0000 0000                             lea     SampleTable, a0
000003A2 4EB9 0000 0000                             jsr     MegaPCM_LoadSampleTable
000003A8 4A40                                       tst.w   d0                      ; was sample table loaded successfully?
000003AA 6700                                       beq.s   @SampleTableOk          ; if yes, branch
000003AC 708C                                       moveq   #$FFFFFF8C, d0          ; request SEGA PCM sample
000003AE 4EB9 0000 0000                             jsr     MegaPCM_PlaySample
000003B4 60FE                                       bra.s   *                       ; FREEZE, BECAUSE IT'S A TEST
000003B6                            @SampleTableOk:
000003B6                            MainGameLoop:
000003B6 707E                       		moveq	#$7E,d0
000003B8 C038 F600                  		and.b	($FFFFF600).w,d0 ; load	Game Mode
000003BC 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
000003C0 60F4                       		bra.s	MainGameLoop
000003C2                            ; ===========================================================================
000003C2                            ; ---------------------------------------------------------------------------
000003C2                            ; Main game mode array
000003C2                            ; ---------------------------------------------------------------------------
000003C2                            
000003C2                            GameModeArray:
000003C2 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
000003C6                            ; ===========================================================================
000003C6 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
000003CA                            ; ===========================================================================
000003CA 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003CE                            ; ===========================================================================
000003CE 6000 0000                  		bra.w	Level	; Normal Level ($0C)
000003D2                            ; ===========================================================================
000003D2 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003D6                            ; ===========================================================================
000003D6 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003DA                            ; ===========================================================================
000003DA 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003DE                            ; ===========================================================================
000003DE 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003E2                            ; ===========================================================================
000003E2 6000 0000                  		bra.w	jmpto_Minecraft	; Minecraft ($20)
000003E6                            ; ===========================================================================
000003E6 6000 0000                  		bra.w	jmpto_BeeBush   ; BeeBush ($24)	
000003EA                            ; ===========================================================================
000003EA                            ; uuuuuuuuuuuuuuuuuuuuuuuuuuuuu
000003EA                            
000003EA                            jmpto_Minecraft:
000003EA 4EF9 0000 0000             		jmp     Minecraft
000003F0                            
000003F0                            jmpto_BeeBush:
000003F0 4EF9 0000 0000             		jmp     GM_BEEBUSH
000003F6                            
000003F6                            
000003F6                            CheckSumError:
000003F6 6100 0000                  		bsr.w	VDPSetupGame
000003FA 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00000404 7E3F                       		moveq	#$3F,d7
00000406                            
00000406                            CheckSum_Red:
00000406 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
0000040E 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
00000412                            
00000412                            CheckSum_Loop:
00000412 60FE                       		bra.s	CheckSum_Loop
00000414                            ; ===========================================================================
00000414                            
00000414                            BusError:
00000414 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
0000041A 6000                       		bra.s	loc_43A
0000041C                            ; ===========================================================================
0000041C                            
0000041C                            AddressError:
0000041C 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
00000422 6000                       		bra.s	loc_43A
00000424                            ; ===========================================================================
00000424                            
00000424                            IllegalInstr:
00000424 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
0000042A 54AF 0002                  		addq.l	#2,2(sp)
0000042E 6000                       		bra.s	loc_462
00000430                            ; ===========================================================================
00000430                            
00000430                            ZeroDivide:
00000430 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
00000436 6000                       		bra.s	loc_462
00000438                            ; ===========================================================================
00000438                            
00000438                            ChkInstr:
00000438 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
0000043E 6000                       		bra.s	loc_462
00000440                            ; ===========================================================================
00000440                            
00000440                            TrapvInstr:
00000440 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000446 6000                       		bra.s	loc_462
00000448                            ; ===========================================================================
00000448                            
00000448                            PrivilegeViol:
00000448 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
0000044E 6000                       		bra.s	loc_462
00000450                            ; ===========================================================================
00000450                            
00000450                            Trace:
00000450 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000456 6000                       		bra.s	loc_462
00000458                            ; ===========================================================================
00000458                            
00000458                            Line1010Emu:
00000458 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
0000045E 54AF 0002                  		addq.l	#2,2(sp)
00000462 6000                       		bra.s	loc_462
00000464                            ; ===========================================================================
00000464                            
00000464                            Line1111Emu:
00000464 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000046A 54AF 0002                  		addq.l	#2,2(sp)
0000046E 6000                       		bra.s	loc_462
00000470                            ; ===========================================================================
00000470                            
00000470                            ErrorExcept:
00000470 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000476 6000                       		bra.s	loc_462
00000478                            ; ===========================================================================
00000478                            
00000478                            loc_43A:
00000478 46FC 2700                  		move	#$2700,sr
0000047C 544F                       		addq.w	#2,sp
0000047E 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000482 544F                       		addq.w	#2,sp
00000484 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000048A 6100 0000                  		bsr.w	ShowErrorMsg
0000048E 202F 0002                  		move.l	2(sp),d0
00000492 6100 0000                  		bsr.w	sub_5BA
00000496 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000049A 6100 0000                  		bsr.w	sub_5BA
0000049E 6000                       		bra.s	loc_478
000004A0                            ; ===========================================================================
000004A0                            
000004A0                            loc_462:
000004A0 46FC 2700                  		move	#$2700,sr
000004A4 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000004AA 6100 0000                  		bsr.w	ShowErrorMsg
000004AE 202F 0002                  		move.l	2(sp),d0
000004B2 6100 0000                  		bsr.w	sub_5BA
000004B6                            
000004B6                            loc_478:
000004B6 6100 0000                  		bsr.w	ErrorWaitForC
000004BA 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
000004C0 46FC 2300                  		move	#$2300,sr
000004C4 4E73                       		rte	
000004C6                            
000004C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000004C6                            
000004C6                            
000004C6                            ShowErrorMsg:				; XREF: loc_43A; loc_462
000004C6 4DF9 00C0 0000             		lea	($C00000).l,a6
000004CC 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000004D6 41F9 0000 0000             		lea	(Art_ErrText).l,a0
000004DC 323C 027F                  		move.w	#$27F,d1
000004E0                            
000004E0                            Error_LoadGfx:
000004E0 3C98                       		move.w	(a0)+,(a6)
000004E2 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004E6 7000                       		moveq	#0,d0		; clear	d0
000004E8 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004EC 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004F0 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004F4 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004FE 7212                       		moveq	#$12,d1		; number of characters
00000500                            
00000500                            Error_LoopChars:
00000500 7000                       		moveq	#0,d0
00000502 1018                       		move.b	(a0)+,d0
00000504 0640 0790                  		addi.w	#$790,d0
00000508 3C80                       		move.w	d0,(a6)
0000050A 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
0000050E 4E75                       		rts	
00000510                            ; End of function ShowErrorMsg
00000510                            
00000510                            ; ===========================================================================
00000510 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000514 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
00000518 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
0000051C 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000520 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000524 0000                       		dc.w asc_5A6-ErrorText
00000526 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000539 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000054C 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
0000055F 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000572 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000585 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
00000598 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
000005AB 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
000005BE 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000005D1 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005E4 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005F8 00                         		even
000005F8                            
000005F8                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005F8                            
000005F8                            
000005F8                            sub_5BA:				; XREF: loc_43A; loc_462
000005F8 3CBC 07CA                  		move.w	#$7CA,(a6)
000005FC 7407                       		moveq	#7,d2
000005FE                            
000005FE                            loc_5C0:
000005FE E998                       		rol.l	#4,d0
00000600 6100                       		bsr.s	sub_5CA
00000602 51CA FFFA                  		dbf	d2,loc_5C0
00000606 4E75                       		rts	
00000608                            ; End of function sub_5BA
00000608                            
00000608                            
00000608                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000608                            
00000608                            
00000608                            sub_5CA:				; XREF: sub_5BA
00000608 3200                       		move.w	d0,d1
0000060A 0241 000F                  		andi.w	#$F,d1
0000060E 0C41 000A                  		cmpi.w	#$A,d1
00000612 6500                       		bcs.s	loc_5D8
00000614 5E41                       		addq.w	#7,d1
00000616                            
00000616                            loc_5D8:
00000616 0641 07C0                  		addi.w	#$7C0,d1
0000061A 3C81                       		move.w	d1,(a6)
0000061C 4E75                       		rts	
0000061E                            ; End of function sub_5CA
0000061E                            
0000061E                            
0000061E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000061E                            
0000061E                            
0000061E                            ErrorWaitForC:				; XREF: loc_478
0000061E 6100 0000                  		bsr.w	ReadJoypads
00000622 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000628 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000062C 4E75                       		rts	
0000062E                            ; End of function ErrorWaitForC
0000062E                            
0000062E                            ; ===========================================================================
0000062E                            Art_ErrText:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D6E                            Art_ErrText_end:		even
00000D6E                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
000014AE                            Art_Text_end:		even
000014AE                            
000014AE                            ; ===========================================================================
000014AE                            ;VBlank
000014AE                            loc_B10:				; XREF: Vectors
000014AE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000014B2 4A38 F62A                  		tst.b	($FFFFF62A).w
000014B6 6700                       		beq.s	loc_B88
000014B8 3039 00C0 0004             		move.w	($C00004).l,d0
000014BE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000014C8 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000014D0                            ;		btst	#6,($FFFFFFF8).w
000014D0                            ;		beq.s	loc_B42
000014D0                            ;		move.w	#$700,d0
000014D0                            ;
000014D0                            ;loc_B3E:
000014D0                            ;		dbf	d0,loc_B3E
000014D0                            
000014D0                            ;loc_B42:
000014D0 1038 F62A                  		move.b	($FFFFF62A).w,d0
000014D4 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
000014DA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
000014E0 0240 003E                  		andi.w	#$3E,d0
000014E4 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
000014E8 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
000014EC                            
000014EC                            loc_B5E:				; XREF: loc_B88
000014EC 4EB9 0000 0000             		jsr	sub_71B4C
000014F2                            
000014F2                            loc_B64:				; XREF: loc_D50
000014F2 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
000014F6 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000014FA 4E73                       		rte	
000014FC                            ; ===========================================================================
000014FC                            ; THIS SUCKS
000014FC =0000001A                  VBLNO_BEEBUSH        EQU         13*2
000014FC =0000001C                  VBLNO_BEEBUSHSCR     EQU         14*2
000014FC                            
000014FC 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00001500 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00001504 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00001508 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
0000150C 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00001510 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00001514 0000                       		dc.w loc_E72-off_B6E
00001516 0000                       		dc.w jmpto_VBLANK_BEEBUSH-off_B6E
00001518 0000                       		dc.w jmpto_VBLANK_BEEBUSHSCR-off_B6E
0000151A                            
0000151A                            ; ===========================================================================
0000151A                            
0000151A                            loc_B88:				; XREF: loc_B10; off_B6E
0000151A 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00001520 6700                       		beq.s	loc_B9A
00001522 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00001528 6600 FFC2                  		bne.w	loc_B5E
0000152C                            
0000152C                            loc_B9A:
0000152C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00001532 6600 FFB8                  		bne.w	loc_B5E		; if not, branch
00001536 3039 00C0 0004             		move.w	($C00004).l,d0
0000153C                            ;		btst	#6,($FFFFFFF8).w
0000153C                            ;		beq.s	loc_BBA
0000153C                            ;		move.w	#$700,d0
0000153C                            ;
0000153C                            ;loc_BB6:
0000153C                            ;		dbf	d0,loc_BB6
0000153C                            ;
0000153C                            ;loc_BBA:
0000153C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00001542 4A38 F64E                  		tst.b	($FFFFF64E).w
00001546 6600                       		bne.s	loc_BFE
00001548 4BF9 00C0 0004             		lea	($C00004).l,a5
0000154E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001554 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000155A 3ABC 977F                  		move.w	#$977F,(a5)
0000155E 3ABC C000                  		move.w	#$C000,(a5)
00001562 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001568 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000156C 6000                       		bra.s	loc_C22
0000156E                            ; ===========================================================================
0000156E                            
0000156E                            loc_BFE:				; XREF: loc_BC8
0000156E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001574 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000157A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00001580 3ABC 977F                  		move.w	#$977F,(a5)
00001584 3ABC C000                  		move.w	#$C000,(a5)
00001588 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000158E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001592                            
00001592                            loc_C22:				; XREF: loc_BC8
00001592 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001596 6000 FF54                  		bra.w	loc_B5E
0000159A                            ; ===========================================================================
0000159A                            
0000159A                            loc_C32:				; XREF: off_B6E
0000159A 6100 0000                  		bsr.w	sub_106E
0000159E                            
0000159E                            loc_C36:				; XREF: off_B6E
0000159E 4A78 F614                  		tst.w	($FFFFF614).w
000015A2 6700 0000                  		beq.w	locret_C42
000015A6 5378 F614                  		subq.w	#1,($FFFFF614).w
000015AA                            
000015AA                            locret_C42:
000015AA 4E75                       		rts	
000015AC                            ; ===========================================================================
000015AC                            
000015AC                            loc_C44:				; XREF: off_B6E
000015AC 6100 0000                  		bsr.w	sub_106E
000015B0 6100 0000                  		bsr.w	sub_6886
000015B4 6100 0000                  		bsr.w	sub_1642
000015B8 4A78 F614                  		tst.w	($FFFFF614).w
000015BC 6700 0000                  		beq.w	locret_C5C
000015C0 5378 F614                  		subq.w	#1,($FFFFF614).w
000015C4                            
000015C4                            locret_C5C:
000015C4 4E75                       		rts	
000015C6                            
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            ; SOOOO GROSS!!!
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            jmpto_VBLANK_BEEBUSH:
000015C6 4EF9 0000 0000             	jmp VBLANK_BEEBUSH
000015CC                            
000015CC                            jmpto_VBLANK_BEEBUSHSCR:
000015CC 4EF9 0000 0000             	jmp VBLANK_BEEBUSHSCR
000015D2                            
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            
000015D2                            ; ===========================================================================
000015D2                            
000015D2                            loc_C5E:				; XREF: off_B6E
000015D2 6100 0000                  		bsr.w	sub_106E
000015D6 4E75                       		rts	
000015D8                            ; ===========================================================================
000015D8                            
000015D8                            loc_C64:				; XREF: off_B6E
000015D8 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
000015DE 6700 0000                  		beq.w	loc_DA6		; if yes, branch
000015E2                            
000015E2                            loc_C6E:				; XREF: off_B6E
000015E2 6100 0000                  		bsr.w	ReadJoypads
000015E6 4A38 F64E                  		tst.b	($FFFFF64E).w
000015EA 6600                       		bne.s	loc_CB0
000015EC 4BF9 00C0 0004             		lea	($C00004).l,a5
000015F2 2ABC 9400 9340             		move.l	#$94009340,(a5)
000015F8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000015FE 3ABC 977F                  		move.w	#$977F,(a5)
00001602 3ABC C000                  		move.w	#$C000,(a5)
00001606 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000160C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001610 6000                       		bra.s	loc_CD4
00001612                            ; ===========================================================================
00001612                            
00001612                            loc_CB0:				; XREF: loc_C76
00001612 4BF9 00C0 0004             		lea	($C00004).l,a5
00001618 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000161E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00001624 3ABC 977F                  		move.w	#$977F,(a5)
00001628 3ABC C000                  		move.w	#$C000,(a5)
0000162C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001632 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001636                            
00001636                            loc_CD4:				; XREF: loc_C76
00001636 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
0000163A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001640 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001646 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000164C 3ABC 977F                  		move.w	#$977F,(a5)
00001650 3ABC 7C00                  		move.w	#$7C00,(a5)
00001654 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000165A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000165E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001664 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000166A 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001670 3ABC 977F                  		move.w	#$977F,(a5)
00001674 3ABC 7800                  		move.w	#$7800,(a5)
00001678 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000167E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001682 4A38 F767                  		tst.b	($FFFFF767).w
00001686 6700                       		beq.s	loc_D50
00001688 4BF9 00C0 0004             		lea	($C00004).l,a5
0000168E 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001694 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000169A 3ABC 977F                  		move.w	#$977F,(a5)
0000169E 3ABC 7000                  		move.w	#$7000,(a5)
000016A2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000016A8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000016AC 11FC 0000 F767             		move.b	#0,($FFFFF767).w
000016B2                            
000016B2                            loc_D50:
000016B2 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
000016B8 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
000016BE 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
000016C4 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
000016CA 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
000016D0 6400                       		bcc.s	Demo_Time
000016D2 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
000016D8 588F                       		addq.l	#4,sp
000016DA 6000 FE16                  		bra.w	loc_B64
000016DE                            
000016DE                            ; ---------------------------------------------------------------------------
000016DE                            ; Subroutine to	run a demo for an amount of time
000016DE                            ; ---------------------------------------------------------------------------
000016DE                            
000016DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016DE                            
000016DE                            
000016DE                            Demo_Time:				; XREF: loc_D50; PalToCRAM
000016DE 6100 0000                  		bsr.w	LoadTilesAsYouMove
000016E2 4EB9 0000 0000             		jsr	AniArt_Load
000016E8 4EB9 0000 0000             		jsr	HudUpdate
000016EE 6100 0000                  		bsr.w	sub_165E
000016F2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000016F6 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
000016FA 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
000016FE                            
000016FE                            Demo_TimeEnd:
000016FE 4E75                       		rts	
00001700                            ; End of function Demo_Time
00001700                            
00001700                            ; ===========================================================================
00001700                            
00001700                            loc_DA6:				; XREF: off_B6E
00001700 6100 0000                  		bsr.w	ReadJoypads
00001704 4BF9 00C0 0004             		lea	($C00004).l,a5
0000170A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001710 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001716 3ABC 977F                  		move.w	#$977F,(a5)
0000171A 3ABC C000                  		move.w	#$C000,(a5)
0000171E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001724 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001728 4BF9 00C0 0004             		lea	($C00004).l,a5
0000172E 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001734 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000173A 3ABC 977F                  		move.w	#$977F,(a5)
0000173E 3ABC 7800                  		move.w	#$7800,(a5)
00001742 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001748 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000174C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001752 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001758 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000175E 3ABC 977F                  		move.w	#$977F,(a5)
00001762 3ABC 7C00                  		move.w	#$7C00,(a5)
00001766 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000176C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001770 6100 0000                  		bsr.w	PalCycle_SS
00001774 4A38 F767                  		tst.b	($FFFFF767).w
00001778 6700                       		beq.s	loc_E64
0000177A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001780 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001786 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000178C 3ABC 977F                  		move.w	#$977F,(a5)
00001790 3ABC 7000                  		move.w	#$7000,(a5)
00001794 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000179A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000179E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
000017A4                            
000017A4                            loc_E64:
000017A4 4A78 F614                  		tst.w	($FFFFF614).w
000017A8 6700 0000                  		beq.w	locret_E70
000017AC 5378 F614                  		subq.w	#1,($FFFFF614).w
000017B0                            
000017B0                            locret_E70:
000017B0 4E75                       		rts	
000017B2                            ; ===========================================================================
000017B2                            
000017B2                            loc_E72:				; XREF: off_B6E
000017B2 6100 0000                  		bsr.w	ReadJoypads
000017B6 4A38 F64E                  		tst.b	($FFFFF64E).w
000017BA 6600                       		bne.s	loc_EB4
000017BC 4BF9 00C0 0004             		lea	($C00004).l,a5
000017C2 2ABC 9400 9340             		move.l	#$94009340,(a5)
000017C8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000017CE 3ABC 977F                  		move.w	#$977F,(a5)
000017D2 3ABC C000                  		move.w	#$C000,(a5)
000017D6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000017DC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000017E0 6000                       		bra.s	loc_ED8
000017E2                            ; ===========================================================================
000017E2                            
000017E2                            loc_EB4:				; XREF: loc_E7A
000017E2 4BF9 00C0 0004             		lea	($C00004).l,a5
000017E8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000017EE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000017F4 3ABC 977F                  		move.w	#$977F,(a5)
000017F8 3ABC C000                  		move.w	#$C000,(a5)
000017FC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001802 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001806                            
00001806                            loc_ED8:				; XREF: loc_E7A
00001806 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
0000180A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001810 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001816 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000181C                            
0000181C                            loc_EEE:
0000181C 3ABC 977F                  		move.w	#$977F,(a5)
00001820 3ABC 7C00                  		move.w	#$7C00,(a5)
00001824 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000182A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000182E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001834 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000183A 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001840 3ABC 977F                  		move.w	#$977F,(a5)
00001844 3ABC 7800                  		move.w	#$7800,(a5)
00001848 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000184E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001852 4A38 F767                  		tst.b	($FFFFF767).w
00001856 6700                       		beq.s	loc_F54
00001858 4BF9 00C0 0004             		lea	($C00004).l,a5
0000185E 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001864 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000186A 3ABC 977F                  		move.w	#$977F,(a5)
0000186E 3ABC 7000                  		move.w	#$7000,(a5)
00001872 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001878 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000187C 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001882                            
00001882                            loc_F54:
00001882 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001888 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000188E 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001894 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
0000189A 6100 0000                  		bsr.w	LoadTilesAsYouMove
0000189E 4EB9 0000 0000             		jsr	AniArt_Load
000018A4 4EB9 0000 0000             		jsr	HudUpdate
000018AA 6100 0000                  		bsr.w	sub_1642
000018AE 4E75                       		rts	
000018B0                            ; ===========================================================================
000018B0                            
000018B0                            loc_F8A:				; XREF: off_B6E
000018B0 6100 0000                  		bsr.w	sub_106E
000018B4 5238 F628                  		addq.b	#1,($FFFFF628).w
000018B8 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000018BE 4E75                       		rts	
000018C0                            ; ===========================================================================
000018C0                            
000018C0                            loc_F9A:				; XREF: off_B6E
000018C0 6100 0000                  		bsr.w	sub_106E
000018C4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000018C8 6000 0000                  		bra.w	sub_1642
000018CC                            ; ===========================================================================
000018CC                            
000018CC                            loc_FA6:				; XREF: off_B6E
000018CC 6100 0000                  		bsr.w	ReadJoypads
000018D0 4BF9 00C0 0004             		lea	($C00004).l,a5
000018D6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000018DC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000018E2 3ABC 977F                  		move.w	#$977F,(a5)
000018E6 3ABC C000                  		move.w	#$C000,(a5)
000018EA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000018F0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000018F4 4BF9 00C0 0004             		lea	($C00004).l,a5
000018FA 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001900 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001906 3ABC 977F                  		move.w	#$977F,(a5)
0000190A 3ABC 7800                  		move.w	#$7800,(a5)
0000190E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001914 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001918 4BF9 00C0 0004             		lea	($C00004).l,a5
0000191E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001924 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000192A 3ABC 977F                  		move.w	#$977F,(a5)
0000192E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001932 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001938 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000193C 4A38 F767                  		tst.b	($FFFFF767).w
00001940 6700                       		beq.s	loc_1060
00001942 4BF9 00C0 0004             		lea	($C00004).l,a5
00001948 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000194E 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001954 3ABC 977F                  		move.w	#$977F,(a5)
00001958 3ABC 7000                  		move.w	#$7000,(a5)
0000195C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001962 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001966 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000196C                            
0000196C                            loc_1060:
0000196C 4A78 F614                  		tst.w	($FFFFF614).w
00001970 6700 0000                  		beq.w	locret_106C
00001974 5378 F614                  		subq.w	#1,($FFFFF614).w
00001978                            
00001978                            locret_106C:
00001978 4E75                       		rts	
0000197A                            
0000197A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000197A                            
0000197A                            
0000197A                            sub_106E:				; XREF: loc_C32; et al
0000197A 6100 0000                  		bsr.w	ReadJoypads
0000197E 4A38 F64E                  		tst.b	($FFFFF64E).w
00001982 6600                       		bne.s	loc_10B0
00001984 4BF9 00C0 0004             		lea	($C00004).l,a5
0000198A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001990 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001996 3ABC 977F                  		move.w	#$977F,(a5)
0000199A 3ABC C000                  		move.w	#$C000,(a5)
0000199E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000019A4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000019A8 6000                       		bra.s	loc_10D4
000019AA                            ; ===========================================================================
000019AA                            
000019AA                            loc_10B0:				; XREF: sub_106E
000019AA 4BF9 00C0 0004             		lea	($C00004).l,a5
000019B0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000019B6 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000019BC 3ABC 977F                  		move.w	#$977F,(a5)
000019C0 3ABC C000                  		move.w	#$C000,(a5)
000019C4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000019CA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000019CE                            
000019CE                            loc_10D4:				; XREF: sub_106E
000019CE 4BF9 00C0 0004             		lea	($C00004).l,a5
000019D4 2ABC 9401 9340             		move.l	#$94019340,(a5)
000019DA 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000019E0 3ABC 977F                  		move.w	#$977F,(a5)
000019E4 3ABC 7800                  		move.w	#$7800,(a5)
000019E8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000019EE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000019F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000019F8 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000019FE 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001A04 3ABC 977F                  		move.w	#$977F,(a5)
00001A08 3ABC 7C00                  		move.w	#$7C00,(a5)
00001A0C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001A12 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001A16 4E75                       		rts	
00001A18                            ; End of function sub_106E
00001A18                            
00001A18                            ; ---------------------------------------------------------------------------
00001A18                            ; Subroutine to	move pallets from the RAM to CRAM
00001A18                            ; ---------------------------------------------------------------------------
00001A18                            
00001A18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A18                            
00001A18                            
00001A18                            PalToCRAM:
00001A18 46FC 2700                  		move	#$2700,sr
00001A1C 4A78 F644                  		tst.w	($FFFFF644).w
00001A20 6700                       		beq.s	locret_119C
00001A22 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001A28 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001A2C 43F9 00C0 0000             		lea	($C00000).l,a1
00001A32 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001A36 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001A3E 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001A40 2298                       		move.l	(a0)+,(a1)
00001A42 2298                       		move.l	(a0)+,(a1)
00001A44 2298                       		move.l	(a0)+,(a1)
00001A46 2298                       		move.l	(a0)+,(a1)
00001A48 2298                       		move.l	(a0)+,(a1)
00001A4A 2298                       		move.l	(a0)+,(a1)
00001A4C 2298                       		move.l	(a0)+,(a1)
00001A4E 2298                       		move.l	(a0)+,(a1)
00001A50 2298                       		move.l	(a0)+,(a1)
00001A52 2298                       		move.l	(a0)+,(a1)
00001A54 2298                       		move.l	(a0)+,(a1)
00001A56 2298                       		move.l	(a0)+,(a1)
00001A58 2298                       		move.l	(a0)+,(a1)
00001A5A 2298                       		move.l	(a0)+,(a1)
00001A5C 2298                       		move.l	(a0)+,(a1)
00001A5E 2298                       		move.l	(a0)+,(a1)
00001A60 2298                       		move.l	(a0)+,(a1)
00001A62 2298                       		move.l	(a0)+,(a1)
00001A64 2298                       		move.l	(a0)+,(a1)
00001A66 2298                       		move.l	(a0)+,(a1)
00001A68 2298                       		move.l	(a0)+,(a1)
00001A6A 2298                       		move.l	(a0)+,(a1)
00001A6C 2298                       		move.l	(a0)+,(a1)
00001A6E 2298                       		move.l	(a0)+,(a1)
00001A70 2298                       		move.l	(a0)+,(a1)
00001A72 2298                       		move.l	(a0)+,(a1)
00001A74 2298                       		move.l	(a0)+,(a1)
00001A76 2298                       		move.l	(a0)+,(a1)
00001A78 2298                       		move.l	(a0)+,(a1)
00001A7A 2298                       		move.l	(a0)+,(a1)
00001A7C 2298                       		move.l	(a0)+,(a1)
00001A7E 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001A84 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001A88 4A38 F64F                  		tst.b	($FFFFF64F).w
00001A8C 6600                       		bne.s	loc_119E
00001A8E                            
00001A8E                            locret_119C:
00001A8E 4E73                       		rte	
00001A90                            ; ===========================================================================
00001A90                            
00001A90                            loc_119E:				; XREF: PalToCRAM
00001A90 4238 F64F                  		clr.b	($FFFFF64F).w
00001A94 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001A98 6100 FC44                  		bsr.w	Demo_Time
00001A9C 4EB9 0000 0000             		jsr	sub_71B4C
00001AA2 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001AA6 4E73                       		rte	
00001AA8                            ; End of function PalToCRAM
00001AA8                            
00001AA8                            ; ---------------------------------------------------------------------------
00001AA8                            ; Subroutine to	initialise joypads
00001AA8                            ; ---------------------------------------------------------------------------
00001AA8                            
00001AA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AA8                            
00001AA8                            
00001AA8                            JoypadInit:				; XREF: GameClrRAM
00001AA8 7040                       		moveq	#$40,d0
00001AAA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001AB0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001AB6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001ABC 4E75                       		rts	
00001ABE                            ; End of function JoypadInit
00001ABE                            
00001ABE                            ; ---------------------------------------------------------------------------
00001ABE                            ; Subroutine to	read joypad input, and send it to the RAM
00001ABE                            ; ---------------------------------------------------------------------------
00001ABE                            
00001ABE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ABE                            
00001ABE                            
00001ABE                            ReadJoypads:
00001ABE 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00001AC2 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001AC8 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001ACA 5449                       		addq.w	#2,a1		; do the second	joypad
00001ACC                            
00001ACC                            Joypad_Read:
00001ACC 12BC 0000                  		move.b	#0,(a1)
00001AD0 4E71                       		nop	
00001AD2 4E71                       		nop	
00001AD4 1011                       		move.b	(a1),d0
00001AD6 E508                       		lsl.b	#2,d0
00001AD8 0200 00C0                  		andi.b	#$C0,d0
00001ADC 12BC 0040                  		move.b	#$40,(a1)
00001AE0 4E71                       		nop	
00001AE2 4E71                       		nop	
00001AE4 1211                       		move.b	(a1),d1
00001AE6 0201 003F                  		andi.b	#$3F,d1
00001AEA 8001                       		or.b	d1,d0
00001AEC 4600                       		not.b	d0
00001AEE 1210                       		move.b	(a0),d1
00001AF0 B101                       		eor.b	d0,d1
00001AF2 10C0                       		move.b	d0,(a0)+
00001AF4 C200                       		and.b	d0,d1
00001AF6 10C1                       		move.b	d1,(a0)+
00001AF8 4E75                       		rts	
00001AFA                            ; End of function ReadJoypads
00001AFA                            
00001AFA                            
00001AFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AFA                            
00001AFA                            
00001AFA                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001AFA 41F9 00C0 0004             		lea	($C00004).l,a0
00001B00 43F9 00C0 0000             		lea	($C00000).l,a1
00001B06 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001B0C 7E12                       		moveq	#$12,d7
00001B0E                            
00001B0E                            VDP_Loop:
00001B0E 309A                       		move.w	(a2)+,(a0)
00001B10 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001B14                            
00001B14 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001B1A 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; Is this a PAL console?
00001B20 6700                       		beq.s	.UseV28			; If not, skip
00001B22 08C0 0003                  		bset	#3,d0			; set v30 and pretend nothing happened
00001B26                            .UseV28:
00001B26 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001B2A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001B30 7000                       		moveq	#0,d0
00001B32 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001B3C 3E3C 003F                  		move.w	#$3F,d7
00001B40                            
00001B40                            VDP_ClrCRAM:
00001B40 3280                       		move.w	d0,(a1)
00001B42 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001B46                            
00001B46 42B8 F616                  		clr.l	($FFFFF616).w
00001B4A 42B8 F61A                  		clr.l	($FFFFF61A).w
00001B4E 2F01                       		move.l	d1,-(sp)
00001B50 4BF9 00C0 0004             		lea	($C00004).l,a5
00001B56 3ABC 8F01                  		move.w	#$8F01,(a5)
00001B5A 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001B60 3ABC 9780                  		move.w	#$9780,(a5)
00001B64 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001B6A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
00001B72                            
00001B72                            loc_128E:
00001B72 3215                       		move.w	(a5),d1
00001B74 0801 0001                  		btst	#1,d1
00001B78 66F8                       		bne.s	loc_128E
00001B7A                            
00001B7A 3ABC 8F02                  		move.w	#$8F02,(a5)
00001B7E 221F                       		move.l	(sp)+,d1
00001B80 4E75                       		rts	
00001B82                            ; End of function VDPSetupGame
00001B82                            
00001B82                            ; ===========================================================================
00001B82 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
00001B8A 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
00001B92 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
00001B9A 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
00001BA2 9001 9100 9200             		dc.w $9001, $9100, $9200
00001BA8                            
00001BA8                            ; ---------------------------------------------------------------------------
00001BA8                            ; Subroutine to	clear the screen
00001BA8                            ; ---------------------------------------------------------------------------
00001BA8                            
00001BA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BA8                            
00001BA8                            InitScreen:
00001BA8                            ClearScreen:
00001BA8 4BF9 00C0 0004             		lea	($C00004).l,a5
00001BAE 3ABC 8F01                  		move.w	#$8F01,(a5)
00001BB2 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001BB8 3ABC 9780                  		move.w	#$9780,(a5)
00001BBC 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001BC2 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001BCA                            
00001BCA                            loc_12E6:
00001BCA 3215                       		move.w	(a5),d1
00001BCC 0801 0001                  		btst	#1,d1
00001BD0 66F8                       		bne.s	loc_12E6
00001BD2                            
00001BD2 3ABC 8F02                  		move.w	#$8F02,(a5)
00001BD6 4BF9 00C0 0004             		lea	($C00004).l,a5
00001BDC 3ABC 8F01                  		move.w	#$8F01,(a5)
00001BE0 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001BE6 3ABC 9780                  		move.w	#$9780,(a5)
00001BEA 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001BF0 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001BF8                            
00001BF8                            loc_1314:
00001BF8 3215                       		move.w	(a5),d1
00001BFA 0801 0001                  		btst	#1,d1
00001BFE 66F8                       		bne.s	loc_1314
00001C00                            
00001C00 3ABC 8F02                  		move.w	#$8F02,(a5)
00001C04 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001C0C 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001C14 43F8 F800                  		lea	($FFFFF800).w,a1
00001C18 7000                       		moveq	#0,d0
00001C1A 323C 009F                  		move.w	#$9F,d1
00001C1E                            
00001C1E                            loc_133A:
00001C1E 22C0                       		move.l	d0,(a1)+
00001C20 51C9 FFFC                  		dbf	d1,loc_133A
00001C24                            
00001C24 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001C28 7000                       		moveq	#0,d0
00001C2A 323C 00FF                  		move.w	#$FF,d1
00001C2E                            
00001C2E                            loc_134A:
00001C2E 22C0                       		move.l	d0,(a1)+
00001C30 51C9 FFFC                  		dbf	d1,loc_134A
00001C34 4E75                       		rts	
00001C36                            ; End of function ClearScreen
00001C36                            
00001C36                            ; ---------------------------------------------------------------------------
00001C36                            ; Subroutine to	load the sound driver
00001C36                            ; ---------------------------------------------------------------------------
00001C36                            
00001C36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C36                            
00001C36                            
00001C36                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001C36 4E75                       		rts
00001C38                            
00001C38                            ; work around this if you need to, other stops are redundant anyway
00001C38                            
00001C38 4E71                       		nop	
00001C3A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001C42 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001C4A 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00001C50 43F9 00A0 0000             		lea	($A00000).l,a1
00001C56 6100 0000                  		bsr.w	KosDec		; decompress
00001C5A 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
00001C62 4E71                       		nop	
00001C64 4E71                       		nop	
00001C66 4E71                       		nop	
00001C68 4E71                       		nop	
00001C6A 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001C72 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001C7A 4E75                       		rts	
00001C7C                            ; End of function SoundDriverLoad
00001C7C                            
00001C7C                            ; ---------------------------------------------------------------------------
00001C7C                            ; Subroutine to	play a sound or	music track
00001C7C                            ; ---------------------------------------------------------------------------
00001C7C                            
00001C7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C7C                            
00001C7C                            
00001C7C                            PlaySound:
00001C7C 11C0 F00A                  		move.b	d0,($FFFFF00A).w
00001C80 4E75                       		rts	
00001C82                            ; End of function PlaySound
00001C82                            
00001C82                            ; ---------------------------------------------------------------------------
00001C82                            ; Subroutine to	play a special sound/music (E0-E4)
00001C82                            ;
00001C82                            ; E0 - Fade out
00001C82                            ; E1 - Sega
00001C82                            ; E2 - Speed up
00001C82                            ; E3 - Normal speed
00001C82                            ; E4 - Stop
00001C82                            ; ---------------------------------------------------------------------------
00001C82                            
00001C82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C82                            
00001C82                            
00001C82                            PlaySound_Special:
00001C82 11C0 F00B                  		move.b	d0,($FFFFF00B).w
00001C86 4E75                       		rts	
00001C88                            ; End of function PlaySound_Special
00001C88                            
00001C88                            ; ===========================================================================
00001C88                            ; ---------------------------------------------------------------------------
00001C88                            ; Unused sound/music subroutine
00001C88                            ; ---------------------------------------------------------------------------
00001C88                            
00001C88                            PlaySound_Unk:
00001C88 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001C8C 4E75                       		rts	
00001C8E                            
00001C8E                            ; ---------------------------------------------------------------------------
00001C8E                            ; Subroutine to	pause the game
00001C8E                            ; ---------------------------------------------------------------------------
00001C8E                            
00001C8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C8E                            
00001C8E                            
00001C8E                            PauseGame:				; XREF: Level_MainLoop; et al
00001C8E 4E71                       		nop	
00001C90 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001C94 6700                       		beq.s	Unpause		; if not, branch
00001C96 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
00001C9A 6600                       		bne.s	loc_13BE	; if yes, branch
00001C9C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001CA2 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001CA4                            
00001CA4                            loc_13BE:
00001CA4 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
00001CAA 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001CB0                            
00001CB0                            loc_13CA:
00001CB0 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001CB6 6100 0000                  		bsr.w	DelayProgram
00001CBA 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001CBE 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001CC0 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001CC6 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001CC8 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001CCE 4E71                       		nop	
00001CD0 6000                       		bra.s	loc_1404
00001CD2                            ; ===========================================================================
00001CD2                            
00001CD2                            Pause_ChkBC:				; XREF: PauseGame
00001CD2 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001CD8 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001CDA 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001CE0 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001CE2                            
00001CE2                            Pause_ChkStart:				; XREF: PauseGame
00001CE2 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001CE8 67C6                       		beq.s	loc_13CA	; if not, branch
00001CEA                            
00001CEA                            loc_1404:				; XREF: PauseGame
00001CEA 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001CF0                            
00001CF0                            Unpause:				; XREF: PauseGame
00001CF0 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001CF6                            
00001CF6                            Pause_DoNothing:			; XREF: PauseGame
00001CF6 4E75                       		rts	
00001CF8                            ; ===========================================================================
00001CF8                            
00001CF8                            Pause_SlowMo:				; XREF: PauseGame
00001CF8 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001CFE 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001D04 4E75                       		rts	
00001D06                            ; End of function PauseGame
00001D06                            
00001D06                            ; ---------------------------------------------------------------------------
00001D06                            ; Subroutine to	display	patterns via the VDP
00001D06                            ; ---------------------------------------------------------------------------
00001D06                            
00001D06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D06                            
00001D06                            DrawTileMap:
00001D06                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001D06 4DF9 00C0 0000             		lea	($C00000).l,a6
00001D0C 283C 0080 0000             		move.l	#$800000,d4
00001D12                            
00001D12                            loc_142C:
00001D12 2D40 0004                  		move.l	d0,4(a6)
00001D16 3601                       		move.w	d1,d3
00001D18                            
00001D18                            loc_1432:
00001D18 3C99                       		move.w	(a1)+,(a6)
00001D1A 51CB FFFC                  		dbf	d3,loc_1432
00001D1E D084                       		add.l	d4,d0
00001D20 51CA FFF0                  		dbf	d2,loc_142C
00001D24 4E75                       		rts	
00001D26                            ; End of function ShowVDPGraphics
00001D26                            
00001D26                            ; ---------------------------------------------------------------------------
00001D26                            ; Nemesis decompression	algorithm
00001D26                            ; ---------------------------------------------------------------------------
00001D26                            
00001D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D26                            
00001D26                            
00001D26                            NemDec:
00001D26 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001D2A 47F9 0000 0000             		lea	(loc_1502).l,a3
00001D30 49F9 00C0 0000             		lea	($C00000).l,a4
00001D36 6000                       		bra.s	loc_145C
00001D38                            ; ===========================================================================
00001D38 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001D3C 47F9 0000 0000             		lea	(loc_1518).l,a3
00001D42                            
00001D42                            loc_145C:				; XREF: NemDec
00001D42 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001D46 3418                       		move.w	(a0)+,d2
00001D48 E34A                       		lsl.w	#1,d2
00001D4A 6400                       		bcc.s	loc_146A
00001D4C D6FC 000A                  		adda.w	#$A,a3
00001D50                            
00001D50                            loc_146A:
00001D50 E54A                       		lsl.w	#2,d2
00001D52 3A42                       		movea.w	d2,a5
00001D54 7608                       		moveq	#8,d3
00001D56 7400                       		moveq	#0,d2
00001D58 7800                       		moveq	#0,d4
00001D5A 6100 0000                  		bsr.w	NemDec4
00001D5E 1A18                       		move.b	(a0)+,d5
00001D60 E145                       		asl.w	#8,d5
00001D62 1A18                       		move.b	(a0)+,d5
00001D64 3C3C 0010                  		move.w	#$10,d6
00001D68 6100                       		bsr.s	NemDec2
00001D6A 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001D6E 4E75                       		rts	
00001D70                            ; End of function NemDec
00001D70                            
00001D70                            
00001D70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D70                            
00001D70                            
00001D70                            NemDec2:				; XREF: NemDec
00001D70 3E06                       		move.w	d6,d7
00001D72 5147                       		subq.w	#8,d7
00001D74 3205                       		move.w	d5,d1
00001D76 EE69                       		lsr.w	d7,d1
00001D78 0C01 00FC                  		cmpi.b	#-4,d1
00001D7C 6400                       		bcc.s	loc_14D6
00001D7E 0241 00FF                  		andi.w	#$FF,d1
00001D82 D241                       		add.w	d1,d1
00001D84 1031 1000                  		move.b	(a1,d1.w),d0
00001D88 4880                       		ext.w	d0
00001D8A 9C40                       		sub.w	d0,d6
00001D8C 0C46 0009                  		cmpi.w	#9,d6
00001D90 6400                       		bcc.s	loc_14B2
00001D92 5046                       		addq.w	#8,d6
00001D94 E145                       		asl.w	#8,d5
00001D96 1A18                       		move.b	(a0)+,d5
00001D98                            
00001D98                            loc_14B2:
00001D98 1231 1001                  		move.b	1(a1,d1.w),d1
00001D9C 3001                       		move.w	d1,d0
00001D9E 0241 000F                  		andi.w	#$F,d1
00001DA2 0240 00F0                  		andi.w	#$F0,d0
00001DA6                            
00001DA6                            loc_14C0:				; XREF: NemDec3
00001DA6 E848                       		lsr.w	#4,d0
00001DA8                            
00001DA8                            loc_14C2:				; XREF: NemDec3
00001DA8 E98C                       		lsl.l	#4,d4
00001DAA 8801                       		or.b	d1,d4
00001DAC 5343                       		subq.w	#1,d3
00001DAE 6600                       		bne.s	loc_14D0
00001DB0 4ED3                       		jmp	(a3)
00001DB2                            ; End of function NemDec2
00001DB2                            
00001DB2                            
00001DB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DB2                            
00001DB2                            
00001DB2                            NemDec3:				; XREF: loc_1502
00001DB2 7800                       		moveq	#0,d4
00001DB4 7608                       		moveq	#8,d3
00001DB6                            
00001DB6                            loc_14D0:				; XREF: NemDec2
00001DB6 51C8 FFF0                  		dbf	d0,loc_14C2
00001DBA 60B4                       		bra.s	NemDec2
00001DBC                            ; ===========================================================================
00001DBC                            
00001DBC                            loc_14D6:				; XREF: NemDec2
00001DBC 5D46                       		subq.w	#6,d6
00001DBE 0C46 0009                  		cmpi.w	#9,d6
00001DC2 6400                       		bcc.s	loc_14E4
00001DC4 5046                       		addq.w	#8,d6
00001DC6 E145                       		asl.w	#8,d5
00001DC8 1A18                       		move.b	(a0)+,d5
00001DCA                            
00001DCA                            loc_14E4:				; XREF: NemDec3
00001DCA 5F46                       		subq.w	#7,d6
00001DCC 3205                       		move.w	d5,d1
00001DCE EC69                       		lsr.w	d6,d1
00001DD0 3001                       		move.w	d1,d0
00001DD2 0241 000F                  		andi.w	#$F,d1
00001DD6 0240 0070                  		andi.w	#$70,d0
00001DDA 0C46 0009                  		cmpi.w	#9,d6
00001DDE 64C6                       		bcc.s	loc_14C0
00001DE0 5046                       		addq.w	#8,d6
00001DE2 E145                       		asl.w	#8,d5
00001DE4 1A18                       		move.b	(a0)+,d5
00001DE6 60BE                       		bra.s	loc_14C0
00001DE8                            ; End of function NemDec3
00001DE8                            
00001DE8                            ; ===========================================================================
00001DE8                            
00001DE8                            loc_1502:				; XREF: NemDec
00001DE8 2884                       		move.l	d4,(a4)
00001DEA 534D                       		subq.w	#1,a5
00001DEC 380D                       		move.w	a5,d4
00001DEE 66C2                       		bne.s	NemDec3
00001DF0 4E75                       		rts	
00001DF2                            ; ===========================================================================
00001DF2 B982                       		eor.l	d4,d2
00001DF4 2882                       		move.l	d2,(a4)
00001DF6 534D                       		subq.w	#1,a5
00001DF8 380D                       		move.w	a5,d4
00001DFA 66B6                       		bne.s	NemDec3
00001DFC 4E75                       		rts	
00001DFE                            ; ===========================================================================
00001DFE                            
00001DFE                            loc_1518:				; XREF: NemDec
00001DFE 28C4                       		move.l	d4,(a4)+
00001E00 534D                       		subq.w	#1,a5
00001E02 380D                       		move.w	a5,d4
00001E04 66AC                       		bne.s	NemDec3
00001E06 4E75                       		rts	
00001E08                            ; ===========================================================================
00001E08 B982                       		eor.l	d4,d2
00001E0A 28C2                       		move.l	d2,(a4)+
00001E0C 534D                       		subq.w	#1,a5
00001E0E 380D                       		move.w	a5,d4
00001E10 66A0                       		bne.s	NemDec3
00001E12 4E75                       		rts	
00001E14                            
00001E14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E14                            
00001E14                            
00001E14                            NemDec4:				; XREF: NemDec
00001E14 1018                       		move.b	(a0)+,d0
00001E16                            
00001E16                            loc_1530:
00001E16 0C00 00FF                  		cmpi.b	#-1,d0
00001E1A 6600                       		bne.s	loc_1538
00001E1C 4E75                       		rts	
00001E1E                            ; ===========================================================================
00001E1E                            
00001E1E                            loc_1538:				; XREF: NemDec4
00001E1E 3E00                       		move.w	d0,d7
00001E20                            
00001E20                            loc_153A:
00001E20 1018                       		move.b	(a0)+,d0
00001E22 0C00 0080                  		cmpi.b	#$80,d0
00001E26 64EE                       		bcc.s	loc_1530
00001E28 1200                       		move.b	d0,d1
00001E2A 0247 000F                  		andi.w	#$F,d7
00001E2E 0241 0070                  		andi.w	#$70,d1
00001E32 8E41                       		or.w	d1,d7
00001E34 0240 000F                  		andi.w	#$F,d0
00001E38 1200                       		move.b	d0,d1
00001E3A E149                       		lsl.w	#8,d1
00001E3C 8E41                       		or.w	d1,d7
00001E3E 7208                       		moveq	#8,d1
00001E40 9240                       		sub.w	d0,d1
00001E42 6600                       		bne.s	loc_1568
00001E44 1018                       		move.b	(a0)+,d0
00001E46 D040                       		add.w	d0,d0
00001E48 3387 0000                  		move.w	d7,(a1,d0.w)
00001E4C 60D2                       		bra.s	loc_153A
00001E4E                            ; ===========================================================================
00001E4E                            
00001E4E                            loc_1568:				; XREF: NemDec4
00001E4E 1018                       		move.b	(a0)+,d0
00001E50 E368                       		lsl.w	d1,d0
00001E52 D040                       		add.w	d0,d0
00001E54 7A01                       		moveq	#1,d5
00001E56 E36D                       		lsl.w	d1,d5
00001E58 5345                       		subq.w	#1,d5
00001E5A                            
00001E5A                            loc_1574:
00001E5A 3387 0000                  		move.w	d7,(a1,d0.w)
00001E5E 5440                       		addq.w	#2,d0
00001E60 51CD FFF8                  		dbf	d5,loc_1574
00001E64 60BA                       		bra.s	loc_153A
00001E66                            ; End of function NemDec4
00001E66                            
00001E66                            ; ---------------------------------------------------------------------------
00001E66                            ; Subroutine to	load pattern load cues
00001E66                            ; ---------------------------------------------------------------------------
00001E66                            
00001E66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E66                            
00001E66                            LoadArtList: 
00001E66                            LoadPLC:
00001E66 48E7 0060                  		movem.l	a1-a2,-(sp)
00001E6A 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001E70 D040                       		add.w	d0,d0
00001E72 3031 0000                  		move.w	(a1,d0.w),d0
00001E76 43F1 0000                  		lea	(a1,d0.w),a1
00001E7A 45F8 F680                  		lea	($FFFFF680).w,a2
00001E7E                            
00001E7E                            loc_1598:
00001E7E 4A92                       		tst.l	(a2)
00001E80 6700                       		beq.s	loc_15A0
00001E82 5C4A                       		addq.w	#6,a2
00001E84 60F8                       		bra.s	loc_1598
00001E86                            ; ===========================================================================
00001E86                            
00001E86                            loc_15A0:				; XREF: LoadPLC
00001E86 3019                       		move.w	(a1)+,d0
00001E88 6B00                       		bmi.s	loc_15AC
00001E8A                            
00001E8A                            loc_15A4:
00001E8A 24D9                       		move.l	(a1)+,(a2)+
00001E8C 34D9                       		move.w	(a1)+,(a2)+
00001E8E 51C8 FFFA                  		dbf	d0,loc_15A4
00001E92                            
00001E92                            loc_15AC:
00001E92 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001E96 4E75                       		rts	
00001E98                            ; End of function LoadPLC
00001E98                            
00001E98                            
00001E98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E98                            
00001E98                            InitArtList: 
00001E98                            LoadPLC2:
00001E98 48E7 0060                  		movem.l	a1-a2,-(sp)
00001E9C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001EA2 D040                       		add.w	d0,d0
00001EA4 3031 0000                  		move.w	(a1,d0.w),d0
00001EA8 43F1 0000                  		lea	(a1,d0.w),a1
00001EAC 6100                       		bsr.s	ClearPLC
00001EAE 45F8 F680                  		lea	($FFFFF680).w,a2
00001EB2 3019                       		move.w	(a1)+,d0
00001EB4 6B00                       		bmi.s	loc_15D8
00001EB6                            
00001EB6                            loc_15D0:
00001EB6 24D9                       		move.l	(a1)+,(a2)+
00001EB8 34D9                       		move.w	(a1)+,(a2)+
00001EBA 51C8 FFFA                  		dbf	d0,loc_15D0
00001EBE                            
00001EBE                            loc_15D8:
00001EBE 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001EC2 4E75                       		rts	
00001EC4                            ; End of function LoadPLC2
00001EC4                            
00001EC4                            ; ---------------------------------------------------------------------------
00001EC4                            ; Subroutine to	clear the pattern load cues
00001EC4                            ; ---------------------------------------------------------------------------
00001EC4                            
00001EC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EC4                            
00001EC4                            ClearArtListQueue:
00001EC4                            ClearPLC:				; XREF: LoadPLC2
00001EC4 45F8 F680                  		lea	($FFFFF680).w,a2
00001EC8 701F                       		moveq	#$1F,d0
00001ECA                            
00001ECA                            ClearPLC_Loop:
00001ECA 429A                       		clr.l	(a2)+
00001ECC 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001ED0 4E75                       		rts	
00001ED2                            ; End of function ClearPLC
00001ED2                            
00001ED2                            ; ---------------------------------------------------------------------------
00001ED2                            ; Subroutine to	use graphics listed in a pattern load cue
00001ED2                            ; ---------------------------------------------------------------------------
00001ED2                            
00001ED2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ED2                            
00001ED2                            ProcessArtLoading: 
00001ED2                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001ED2 4AB8 F680                  		tst.l	($FFFFF680).w
00001ED6 6700                       		beq.s	locret_1640
00001ED8 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001EDC 6600                       		bne.s	locret_1640
00001EDE 2078 F680                  		movea.l	($FFFFF680).w,a0
00001EE2 47F9 0000 1DE8             		lea	(loc_1502).l,a3
00001EE8 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001EEC 3418                       		move.w	(a0)+,d2
00001EEE 6A00                       		bpl.s	loc_160E
00001EF0 D6FC 000A                  		adda.w	#$A,a3
00001EF4                            
00001EF4                            loc_160E:
00001EF4 0242 7FFF                  		andi.w	#$7FFF,d2
00001EF8 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001EFC 6100 FF16                  		bsr.w	NemDec4
00001F00 1A18                       		move.b	(a0)+,d5
00001F02 E145                       		asl.w	#8,d5
00001F04 1A18                       		move.b	(a0)+,d5
00001F06 7C10                       		moveq	#$10,d6
00001F08 7000                       		moveq	#0,d0
00001F0A 21C8 F680                  		move.l	a0,($FFFFF680).w
00001F0E 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001F12 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001F16 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001F1A 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001F1E 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001F22 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001F26                            
00001F26                            locret_1640:
00001F26 4E75                       		rts	
00001F28                            ; End of function RunPLC_RAM
00001F28                            
00001F28                            
00001F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F28                            
00001F28                            
00001F28                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001F28 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001F2C 6700 0000                  		beq.w	locret_16DA
00001F30 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001F36 7000                       		moveq	#0,d0
00001F38 3038 F684                  		move.w	($FFFFF684).w,d0
00001F3C 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001F42 6000                       		bra.s	loc_1676
00001F44                            ; End of function sub_1642
00001F44                            
00001F44                            
00001F44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F44                            
00001F44                            
00001F44                            sub_165E:				; XREF: Demo_Time
00001F44 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001F48 6700                       		beq.s	locret_16DA
00001F4A 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001F50 7000                       		moveq	#0,d0
00001F52 3038 F684                  		move.w	($FFFFF684).w,d0
00001F56 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001F5C                            
00001F5C                            loc_1676:				; XREF: sub_1642
00001F5C 49F9 00C0 0004             		lea	($C00004).l,a4
00001F62 E588                       		lsl.l	#2,d0
00001F64 E448                       		lsr.w	#2,d0
00001F66 0040 4000                  		ori.w	#$4000,d0
00001F6A 4840                       		swap	d0
00001F6C 2880                       		move.l	d0,(a4)
00001F6E 594C                       		subq.w	#4,a4
00001F70 2078 F680                  		movea.l	($FFFFF680).w,a0
00001F74 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001F78 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001F7C 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001F80 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001F84 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001F88 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001F8C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001F90                            
00001F90                            loc_16AA:				; XREF: sub_165E
00001F90 3A7C 0008                  		movea.w	#8,a5
00001F94 6100 FE1C                  		bsr.w	NemDec3
00001F98 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001F9C 6700                       		beq.s	loc_16DC
00001F9E 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001FA2 66EC                       		bne.s	loc_16AA
00001FA4 21C8 F680                  		move.l	a0,($FFFFF680).w
00001FA8 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001FAC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001FB0 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001FB4 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001FB8 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001FBC 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001FC0                            
00001FC0                            locret_16DA:				; XREF: sub_1642
00001FC0 4E75                       		rts	
00001FC2                            ; ===========================================================================
00001FC2                            
00001FC2                            loc_16DC:				; XREF: sub_165E
00001FC2 41F8 F680                  		lea	($FFFFF680).w,a0
00001FC6 7015                       		moveq	#$15,d0
00001FC8                            
00001FC8                            loc_16E2:				; XREF: sub_165E
00001FC8 20E8 0006                  		move.l	6(a0),(a0)+
00001FCC 51C8 FFFA                  		dbf	d0,loc_16E2
00001FD0 4E75                       		rts	
00001FD2                            ; End of function sub_165E
00001FD2                            
00001FD2                            ; ---------------------------------------------------------------------------
00001FD2                            ; Subroutine to	execute	the pattern load cue
00001FD2                            ; ---------------------------------------------------------------------------
00001FD2                            
00001FD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FD2                            
00001FD2                            
00001FD2                            RunPLC_ROM:
00001FD2 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001FD8 D040                       		add.w	d0,d0
00001FDA 3031 0000                  		move.w	(a1,d0.w),d0
00001FDE 43F1 0000                  		lea	(a1,d0.w),a1
00001FE2 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001FE4                            
00001FE4                            RunPLC_Loop:
00001FE4 2059                       		movea.l	(a1)+,a0	; get art pointer
00001FE6 7000                       		moveq	#0,d0
00001FE8 3019                       		move.w	(a1)+,d0	; get VRAM address
00001FEA E588                       		lsl.l	#2,d0		; divide address by $20
00001FEC E448                       		lsr.w	#2,d0
00001FEE 0040 4000                  		ori.w	#$4000,d0
00001FF2 4840                       		swap	d0
00001FF4 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001FFA 6100 FD2A                  		bsr.w	NemDec		; decompress
00001FFE 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00002002 4E75                       		rts	
00002004                            ; End of function RunPLC_ROM
00002004                            
00002004                            ; ---------------------------------------------------------------------------
00002004                            ; Enigma decompression algorithm
00002004                            ; ---------------------------------------------------------------------------
00002004                            
00002004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002004                            
00002004                            
00002004                            EniDec:
00002004 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00002008 3640                       		movea.w	d0,a3
0000200A 1018                       		move.b	(a0)+,d0
0000200C 4880                       		ext.w	d0
0000200E 3A40                       		movea.w	d0,a5
00002010 1818                       		move.b	(a0)+,d4
00002012 E70C                       		lsl.b	#3,d4
00002014 3458                       		movea.w	(a0)+,a2
00002016 D4CB                       		adda.w	a3,a2
00002018 3858                       		movea.w	(a0)+,a4
0000201A D8CB                       		adda.w	a3,a4
0000201C 1A18                       		move.b	(a0)+,d5
0000201E E145                       		asl.w	#8,d5
00002020 1A18                       		move.b	(a0)+,d5
00002022 7C10                       		moveq	#$10,d6
00002024                            
00002024                            loc_173E:				; XREF: loc_1768
00002024 7007                       		moveq	#7,d0
00002026 3E06                       		move.w	d6,d7
00002028 9E40                       		sub.w	d0,d7
0000202A 3205                       		move.w	d5,d1
0000202C EE69                       		lsr.w	d7,d1
0000202E 0241 007F                  		andi.w	#$7F,d1
00002032 3401                       		move.w	d1,d2
00002034 0C41 0040                  		cmpi.w	#$40,d1
00002038 6400                       		bcc.s	loc_1758
0000203A 7006                       		moveq	#6,d0
0000203C E24A                       		lsr.w	#1,d2
0000203E                            
0000203E                            loc_1758:
0000203E 6100 0000                  		bsr.w	sub_188C
00002042 0242 000F                  		andi.w	#$F,d2
00002046 E849                       		lsr.w	#4,d1
00002048 D241                       		add.w	d1,d1
0000204A 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000204E                            ; End of function EniDec
0000204E                            
0000204E                            ; ===========================================================================
0000204E                            
0000204E                            loc_1768:				; XREF: loc_17B4
0000204E 32CA                       		move.w	a2,(a1)+
00002050 524A                       		addq.w	#1,a2
00002052 51CA FFFA                  		dbf	d2,loc_1768
00002056 60CC                       		bra.s	loc_173E
00002058                            ; ===========================================================================
00002058                            
00002058                            loc_1772:				; XREF: loc_17B4
00002058 32CC                       		move.w	a4,(a1)+
0000205A 51CA FFFC                  		dbf	d2,loc_1772
0000205E 60C4                       		bra.s	loc_173E
00002060                            ; ===========================================================================
00002060                            
00002060                            loc_177A:				; XREF: loc_17B4
00002060 6100 0000                  		bsr.w	loc_17DC
00002064                            
00002064                            loc_177E:
00002064 32C1                       		move.w	d1,(a1)+
00002066 51CA FFFC                  		dbf	d2,loc_177E
0000206A 60B8                       		bra.s	loc_173E
0000206C                            ; ===========================================================================
0000206C                            
0000206C                            loc_1786:				; XREF: loc_17B4
0000206C 6100 0000                  		bsr.w	loc_17DC
00002070                            
00002070                            loc_178A:
00002070 32C1                       		move.w	d1,(a1)+
00002072 5241                       		addq.w	#1,d1
00002074 51CA FFFA                  		dbf	d2,loc_178A
00002078 60AA                       		bra.s	loc_173E
0000207A                            ; ===========================================================================
0000207A                            
0000207A                            loc_1794:				; XREF: loc_17B4
0000207A 6100 0000                  		bsr.w	loc_17DC
0000207E                            
0000207E                            loc_1798:
0000207E 32C1                       		move.w	d1,(a1)+
00002080 5341                       		subq.w	#1,d1
00002082 51CA FFFA                  		dbf	d2,loc_1798
00002086 609C                       		bra.s	loc_173E
00002088                            ; ===========================================================================
00002088                            
00002088                            loc_17A2:				; XREF: loc_17B4
00002088 0C42 000F                  		cmpi.w	#$F,d2
0000208C 6700                       		beq.s	loc_17C4
0000208E                            
0000208E                            loc_17A8:
0000208E 6100 0000                  		bsr.w	loc_17DC
00002092 32C1                       		move.w	d1,(a1)+
00002094 51CA FFF8                  		dbf	d2,loc_17A8
00002098 608A                       		bra.s	loc_173E
0000209A                            ; ===========================================================================
0000209A                            
0000209A                            loc_17B4:				; XREF: EniDec
0000209A 60B2                       		bra.s	loc_1768
0000209C                            ; ===========================================================================
0000209C 60B0                       		bra.s	loc_1768
0000209E                            ; ===========================================================================
0000209E 60B8                       		bra.s	loc_1772
000020A0                            ; ===========================================================================
000020A0 60B6                       		bra.s	loc_1772
000020A2                            ; ===========================================================================
000020A2 60BC                       		bra.s	loc_177A
000020A4                            ; ===========================================================================
000020A4 60C6                       		bra.s	loc_1786
000020A6                            ; ===========================================================================
000020A6 60D2                       		bra.s	loc_1794
000020A8                            ; ===========================================================================
000020A8 60DE                       		bra.s	loc_17A2
000020AA                            ; ===========================================================================
000020AA                            
000020AA                            loc_17C4:				; XREF: loc_17A2
000020AA 5348                       		subq.w	#1,a0
000020AC 0C46 0010                  		cmpi.w	#$10,d6
000020B0 6600                       		bne.s	loc_17CE
000020B2 5348                       		subq.w	#1,a0
000020B4                            
000020B4                            loc_17CE:
000020B4 3008                       		move.w	a0,d0
000020B6 E248                       		lsr.w	#1,d0
000020B8 6400                       		bcc.s	loc_17D6
000020BA 5248                       		addq.w	#1,a0
000020BC                            
000020BC                            loc_17D6:
000020BC 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000020C0 4E75                       		rts	
000020C2                            ; ===========================================================================
000020C2                            
000020C2                            loc_17DC:				; XREF: loc_17A2
000020C2 360B                       		move.w	a3,d3
000020C4 1204                       		move.b	d4,d1
000020C6 D201                       		add.b	d1,d1
000020C8 6400                       		bcc.s	loc_17EE
000020CA 5346                       		subq.w	#1,d6
000020CC 0D05                       		btst	d6,d5
000020CE 6700                       		beq.s	loc_17EE
000020D0 0043 8000                  		ori.w	#-$8000,d3
000020D4                            
000020D4                            loc_17EE:
000020D4 D201                       		add.b	d1,d1
000020D6 6400                       		bcc.s	loc_17FC
000020D8 5346                       		subq.w	#1,d6
000020DA 0D05                       		btst	d6,d5
000020DC 6700                       		beq.s	loc_17FC
000020DE 0643 4000                  		addi.w	#$4000,d3
000020E2                            
000020E2                            loc_17FC:
000020E2 D201                       		add.b	d1,d1
000020E4 6400                       		bcc.s	loc_180A
000020E6 5346                       		subq.w	#1,d6
000020E8 0D05                       		btst	d6,d5
000020EA 6700                       		beq.s	loc_180A
000020EC 0643 2000                  		addi.w	#$2000,d3
000020F0                            
000020F0                            loc_180A:
000020F0 D201                       		add.b	d1,d1
000020F2 6400                       		bcc.s	loc_1818
000020F4 5346                       		subq.w	#1,d6
000020F6 0D05                       		btst	d6,d5
000020F8 6700                       		beq.s	loc_1818
000020FA 0043 1000                  		ori.w	#$1000,d3
000020FE                            
000020FE                            loc_1818:
000020FE D201                       		add.b	d1,d1
00002100 6400                       		bcc.s	loc_1826
00002102 5346                       		subq.w	#1,d6
00002104 0D05                       		btst	d6,d5
00002106 6700                       		beq.s	loc_1826
00002108 0043 0800                  		ori.w	#$800,d3
0000210C                            
0000210C                            loc_1826:
0000210C 3205                       		move.w	d5,d1
0000210E 3E06                       		move.w	d6,d7
00002110 9E4D                       		sub.w	a5,d7
00002112 6400                       		bcc.s	loc_1856
00002114 3C07                       		move.w	d7,d6
00002116 0646 0010                  		addi.w	#$10,d6
0000211A 4447                       		neg.w	d7
0000211C EF69                       		lsl.w	d7,d1
0000211E 1A10                       		move.b	(a0),d5
00002120 EF3D                       		rol.b	d7,d5
00002122 DE47                       		add.w	d7,d7
00002124 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00002128 D245                       		add.w	d5,d1
0000212A                            
0000212A                            loc_1844:				; XREF: loc_1868
0000212A 300D                       		move.w	a5,d0
0000212C D040                       		add.w	d0,d0
0000212E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00002132 D243                       		add.w	d3,d1
00002134 1A18                       		move.b	(a0)+,d5
00002136 E14D                       		lsl.w	#8,d5
00002138 1A18                       		move.b	(a0)+,d5
0000213A 4E75                       		rts	
0000213C                            ; ===========================================================================
0000213C                            
0000213C                            loc_1856:				; XREF: loc_1826
0000213C 6700                       		beq.s	loc_1868
0000213E EE69                       		lsr.w	d7,d1
00002140 300D                       		move.w	a5,d0
00002142 D040                       		add.w	d0,d0
00002144 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00002148 D243                       		add.w	d3,d1
0000214A 300D                       		move.w	a5,d0
0000214C 6000                       		bra.s	sub_188C
0000214E                            ; ===========================================================================
0000214E                            
0000214E                            loc_1868:				; XREF: loc_1856
0000214E 7C10                       		moveq	#$10,d6
00002150                            
00002150                            loc_186A:
00002150 60D8                       		bra.s	loc_1844
00002152                            ; ===========================================================================
00002152 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00002168 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00002172                            
00002172                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002172                            
00002172                            
00002172                            sub_188C:				; XREF: EniDec
00002172 9C40                       		sub.w	d0,d6
00002174 0C46 0009                  		cmpi.w	#9,d6
00002178 6400                       		bcc.s	locret_189A
0000217A 5046                       		addq.w	#8,d6
0000217C E145                       		asl.w	#8,d5
0000217E 1A18                       		move.b	(a0)+,d5
00002180                            
00002180                            locret_189A:
00002180 4E75                       		rts	
00002182                            ; End of function sub_188C
00002182                            
00002182                            ; ---------------------------------------------------------------------------
00002182                            ; Kosinski decompression algorithm
00002182                            ; ---------------------------------------------------------------------------
00002182                            
00002182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002182                            
00002182                            
00002182                            KosDec:
00002182                            
00002182 =FFFFFFFE                  var_2		= -2
00002182 =FFFFFFFF                  var_1		= -1
00002182                            
00002182 558F                       		subq.l	#2,sp
00002184 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00002188 1E98                       		move.b	(a0)+,(sp)
0000218A 3A17                       		move.w	(sp),d5
0000218C 780F                       		moveq	#$F,d4
0000218E                            
0000218E                            loc_18A8:
0000218E E24D                       		lsr.w	#1,d5
00002190 40C6                       		move	sr,d6
00002192 51CC 0000                  		dbf	d4,loc_18BA
00002196 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
0000219A 1E98                       		move.b	(a0)+,(sp)
0000219C 3A17                       		move.w	(sp),d5
0000219E 780F                       		moveq	#$F,d4
000021A0                            
000021A0                            loc_18BA:
000021A0 44C6                       		move	d6,ccr
000021A2 6400                       		bcc.s	loc_18C2
000021A4 12D8                       		move.b	(a0)+,(a1)+
000021A6 60E6                       		bra.s	loc_18A8
000021A8                            ; ===========================================================================
000021A8                            
000021A8                            loc_18C2:				; XREF: KosDec
000021A8 7600                       		moveq	#0,d3
000021AA E24D                       		lsr.w	#1,d5
000021AC 40C6                       		move	sr,d6
000021AE 51CC 0000                  		dbf	d4,loc_18D6
000021B2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000021B6 1E98                       		move.b	(a0)+,(sp)
000021B8 3A17                       		move.w	(sp),d5
000021BA 780F                       		moveq	#$F,d4
000021BC                            
000021BC                            loc_18D6:
000021BC 44C6                       		move	d6,ccr
000021BE 6500                       		bcs.s	loc_1906
000021C0 E24D                       		lsr.w	#1,d5
000021C2 51CC 0000                  		dbf	d4,loc_18EA
000021C6 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000021CA 1E98                       		move.b	(a0)+,(sp)
000021CC 3A17                       		move.w	(sp),d5
000021CE 780F                       		moveq	#$F,d4
000021D0                            
000021D0                            loc_18EA:
000021D0 E353                       		roxl.w	#1,d3
000021D2 E24D                       		lsr.w	#1,d5
000021D4 51CC 0000                  		dbf	d4,loc_18FC
000021D8 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000021DC 1E98                       		move.b	(a0)+,(sp)
000021DE 3A17                       		move.w	(sp),d5
000021E0 780F                       		moveq	#$F,d4
000021E2                            
000021E2                            loc_18FC:
000021E2 E353                       		roxl.w	#1,d3
000021E4 5243                       		addq.w	#1,d3
000021E6 74FF                       		moveq	#-1,d2
000021E8 1418                       		move.b	(a0)+,d2
000021EA 6000                       		bra.s	loc_191C
000021EC                            ; ===========================================================================
000021EC                            
000021EC                            loc_1906:				; XREF: loc_18C2
000021EC 1018                       		move.b	(a0)+,d0
000021EE 1218                       		move.b	(a0)+,d1
000021F0 74FF                       		moveq	#-1,d2
000021F2 1401                       		move.b	d1,d2
000021F4 EB4A                       		lsl.w	#5,d2
000021F6 1400                       		move.b	d0,d2
000021F8 0241 0007                  		andi.w	#7,d1
000021FC 6700                       		beq.s	loc_1928
000021FE 1601                       		move.b	d1,d3
00002200 5243                       		addq.w	#1,d3
00002202                            
00002202                            loc_191C:
00002202 1031 2000                  		move.b	(a1,d2.w),d0
00002206 12C0                       		move.b	d0,(a1)+
00002208 51CB FFF8                  		dbf	d3,loc_191C
0000220C 6080                       		bra.s	loc_18A8
0000220E                            ; ===========================================================================
0000220E                            
0000220E                            loc_1928:				; XREF: loc_1906
0000220E 1218                       		move.b	(a0)+,d1
00002210 6700                       		beq.s	loc_1938
00002212 0C01 0001                  		cmpi.b	#1,d1
00002216 6700 FF76                  		beq.w	loc_18A8
0000221A 1601                       		move.b	d1,d3
0000221C 60E4                       		bra.s	loc_191C
0000221E                            ; ===========================================================================
0000221E                            
0000221E                            loc_1938:				; XREF: loc_1928
0000221E 548F                       		addq.l	#2,sp
00002220 4E75                       		rts	
00002222                            ; End of function KosDec
00002222                            
00002222                            ; ---------------------------------------------------------------------------
00002222                            ; Pallet cycling routine loading subroutine
00002222                            ; ---------------------------------------------------------------------------
00002222                            
00002222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002222                            
00002222                            
00002222                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00002222 7400                       		moveq	#0,d2
00002224 7000                       		moveq	#0,d0
00002226 4A38 FFF9                  		tst.b	($FFFFFFF9).w	; GMZ: Is truth nuke flag set?
0000222A 6600                       		bne.s	PalCycle_Stop	; GMZ: If yes, branch
0000222C 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00002230 D040                       		add.w	d0,d0		; multiply by 2
00002232 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00002236 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
0000223A                            
0000223A                            PalCycle_Stop:
0000223A 4E75                       		rts
0000223C                            ; End of function PalCycle_Load
0000223C                            
0000223C                            ; ===========================================================================
0000223C                            ; ---------------------------------------------------------------------------
0000223C                            ; Pallet cycling routines
0000223C                            ; ---------------------------------------------------------------------------
0000223C 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
0000223E 0000                       		dc.w PalCycle_LZ-PalCycle
00002240 0000                       		dc.w PalCycle_MZ-PalCycle
00002242 0000                       		dc.w PalCycle_SLZ-PalCycle
00002244 0000                       		dc.w PalCycle_SYZ-PalCycle
00002246 0000                       		dc.w PalCycle_SBZ-PalCycle
00002248 0000                       		dc.w PalCycle_GHZ-PalCycle
0000224A 0000                       		dc.w PalCycle_GHZ-PalCycle
0000224C                            
0000224C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000224C                            
0000224C                            
0000224C                            PalCycle_Title:				; XREF: TitleScreen
0000224C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00002252 6000                       		bra.s	loc_196A
00002254                            ; ===========================================================================
00002254                            
00002254                            PalCycle_GHZ:				; XREF: PalCycle
00002254 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
0000225A                            
0000225A                            loc_196A:				; XREF: PalCycle_Title
0000225A 5378 F634                  		subq.w	#1,($FFFFF634).w
0000225E 6A00                       		bpl.s	locret_1990
00002260 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00002266 3038 F632                  		move.w	($FFFFF632).w,d0
0000226A 5278 F632                  		addq.w	#1,($FFFFF632).w
0000226E 0240 0003                  		andi.w	#3,d0
00002272 E748                       		lsl.w	#3,d0
00002274 43F8 FB50                  		lea	($FFFFFB50).w,a1
00002278 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000227C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00002280                            
00002280                            locret_1990:
00002280 4E75                       		rts	
00002282                            ; End of function PalCycle_Title
00002282                            
00002282                            
00002282                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002282                            
00002282                            
00002282                            PalCycle_LZ:				; XREF: PalCycle
00002282 5378 F634                  		subq.w	#1,($FFFFF634).w
00002286 6A00                       		bpl.s	loc_19D8
00002288 31FC 0002 F634             		move.w	#2,($FFFFF634).w
0000228E 3038 F632                  		move.w	($FFFFF632).w,d0
00002292 5278 F632                  		addq.w	#1,($FFFFF632).w
00002296 0240 0003                  		andi.w	#3,d0
0000229A E748                       		lsl.w	#3,d0
0000229C 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
000022A2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
000022A8 6600                       		bne.s	loc_19C0
000022AA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000022B0                            
000022B0                            loc_19C0:
000022B0 43F8 FB56                  		lea	($FFFFFB56).w,a1
000022B4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000022B8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000022BC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
000022C0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000022C4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000022C8                            
000022C8                            loc_19D8:
000022C8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000022CC 0240 0007                  		andi.w	#7,d0
000022D0 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
000022D4 6700                       		beq.s	locret_1A3A
000022D6 7201                       		moveq	#1,d1
000022D8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000022DC 6700                       		beq.s	loc_19F0
000022DE 4441                       		neg.w	d1
000022E0                            
000022E0                            loc_19F0:
000022E0 3038 F650                  		move.w	($FFFFF650).w,d0
000022E4 0240 0003                  		andi.w	#3,d0
000022E8 D041                       		add.w	d1,d0
000022EA 0C40 0003                  		cmpi.w	#3,d0
000022EE 6500                       		bcs.s	loc_1A0A
000022F0 3200                       		move.w	d0,d1
000022F2 7000                       		moveq	#0,d0
000022F4 4A41                       		tst.w	d1
000022F6 6A00                       		bpl.s	loc_1A0A
000022F8 7002                       		moveq	#2,d0
000022FA                            
000022FA                            loc_1A0A:
000022FA 31C0 F650                  		move.w	d0,($FFFFF650).w
000022FE D040                       		add.w	d0,d0
00002300 3200                       		move.w	d0,d1
00002302 D040                       		add.w	d0,d0
00002304 D041                       		add.w	d1,d0
00002306 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
0000230C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00002310 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00002314 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00002318 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
0000231E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00002322 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00002326 32B0 0004                  		move.w	4(a0,d0.w),(a1)
0000232A                            
0000232A                            locret_1A3A:
0000232A 4E75                       		rts	
0000232C                            ; End of function PalCycle_LZ
0000232C                            
0000232C                            ; ===========================================================================
0000232C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00002334                            ; ===========================================================================
00002334                            
00002334                            PalCycle_MZ:				; XREF: PalCycle
00002334 4E75                       		rts	
00002336                            
00002336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002336                            
00002336                            
00002336                            PalCycle_SLZ:				; XREF: PalCycle
00002336 4E75                       		rts	
00002338                            ; End of function PalCycle_SLZ
00002338                            
00002338                            
00002338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002338                            
00002338                            
00002338                            PalCycle_SYZ:				; XREF: PalCycle
00002338 5378 F634                  		subq.w	#1,($FFFFF634).w
0000233C 6A00                       		bpl.s	locret_1AC6
0000233E 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00002344 3038 F632                  		move.w	($FFFFF632).w,d0
00002348 5278 F632                  		addq.w	#1,($FFFFF632).w
0000234C 0240 0003                  		andi.w	#3,d0
00002350 E548                       		lsl.w	#2,d0
00002352 3200                       		move.w	d0,d1
00002354 D040                       		add.w	d0,d0
00002356 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
0000235C 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00002360 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00002364 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00002368 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
0000236E 43F8 FB76                  		lea	($FFFFFB76).w,a1
00002372 32B0 1000                  		move.w	(a0,d1.w),(a1)
00002376 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
0000237C                            
0000237C                            locret_1AC6:
0000237C 4E75                       		rts	
0000237E                            ; End of function PalCycle_SYZ
0000237E                            
0000237E                            
0000237E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000237E                            
0000237E                            
0000237E                            PalCycle_SBZ:				; XREF: PalCycle
0000237E 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00002384 4A38 FE11                  		tst.b	($FFFFFE11).w
00002388 6700                       		beq.s	loc_1ADA
0000238A 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00002390                            
00002390                            loc_1ADA:
00002390 43F8 F650                  		lea	($FFFFF650).w,a1
00002394 321A                       		move.w	(a2)+,d1
00002396                            
00002396                            loc_1AE0:
00002396 5311                       		subq.b	#1,(a1)
00002398 6B00                       		bmi.s	loc_1AEA
0000239A 5489                       		addq.l	#2,a1
0000239C 5C8A                       		addq.l	#6,a2
0000239E 6000                       		bra.s	loc_1B06
000023A0                            ; ===========================================================================
000023A0                            
000023A0                            loc_1AEA:				; XREF: PalCycle_SBZ
000023A0 12DA                       		move.b	(a2)+,(a1)+
000023A2 1011                       		move.b	(a1),d0
000023A4 5200                       		addq.b	#1,d0
000023A6 B01A                       		cmp.b	(a2)+,d0
000023A8 6500                       		bcs.s	loc_1AF6
000023AA 7000                       		moveq	#0,d0
000023AC                            
000023AC                            loc_1AF6:
000023AC 12C0                       		move.b	d0,(a1)+
000023AE 0240 000F                  		andi.w	#$F,d0
000023B2 D040                       		add.w	d0,d0
000023B4 305A                       		movea.w	(a2)+,a0
000023B6 365A                       		movea.w	(a2)+,a3
000023B8 36B0 0000                  		move.w	(a0,d0.w),(a3)
000023BC                            
000023BC                            loc_1B06:				; XREF: PalCycle_SBZ
000023BC 51C9 FFD8                  		dbf	d1,loc_1AE0
000023C0 5378 F634                  		subq.w	#1,($FFFFF634).w
000023C4 6A00                       		bpl.s	locret_1B64
000023C6 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
000023CC 31FC 0001 F634             		move.w	#1,($FFFFF634).w
000023D2 4A38 FE11                  		tst.b	($FFFFFE11).w
000023D6 6700                       		beq.s	loc_1B2E
000023D8 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
000023DE 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000023E4                            
000023E4                            loc_1B2E:
000023E4 72FF                       		moveq	#-1,d1
000023E6 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000023EA 6700                       		beq.s	loc_1B38
000023EC 4441                       		neg.w	d1
000023EE                            
000023EE                            loc_1B38:
000023EE 3038 F632                  		move.w	($FFFFF632).w,d0
000023F2 0240 0003                  		andi.w	#3,d0
000023F6 D041                       		add.w	d1,d0
000023F8 0C40 0003                  		cmpi.w	#3,d0
000023FC 6500                       		bcs.s	loc_1B52
000023FE 3200                       		move.w	d0,d1
00002400 7000                       		moveq	#0,d0
00002402 4A41                       		tst.w	d1
00002404 6A00                       		bpl.s	loc_1B52
00002406 7002                       		moveq	#2,d0
00002408                            
00002408                            loc_1B52:
00002408 31C0 F632                  		move.w	d0,($FFFFF632).w
0000240C D040                       		add.w	d0,d0
0000240E 43F8 FB58                  		lea	($FFFFFB58).w,a1
00002412 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00002416 32B0 0004                  		move.w	4(a0,d0.w),(a1)
0000241A                            
0000241A                            locret_1B64:
0000241A 4E75                       		rts	
0000241C                            ; End of function PalCycle_SBZ
0000241C                            
0000241C                            ; ===========================================================================
0000241C                            Pal_TitleCyc:	incbin	pallet\c_title.bin
0000243C                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
0000245C                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
0000247C                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
0000248E                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
000024A0                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00002508                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
0000252C                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
0000254C                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
0000255C                            
0000255C                            Pal_SBZCycList:
0000255C                            	include "_inc\SBZ pallet script 1.asm"
0000255C                            ; ---------------------------------------------------------------------------
0000255C                            ; Scrap Brain Zone 1 pallet cycling script
0000255C                            ; ---------------------------------------------------------------------------
0000255C 0008                       	dc.w 8			; number of entries - 1
0000255E 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00002560 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00002562 FB50                       	dc.w $FB50		; RAM address
00002564 0D08                       	dc.b $D, 8
00002566 0000                       	dc.w Pal_SBZCyc2
00002568 FB52                       	dc.w $FB52
0000256A 0E08                       	dc.b $E, 8
0000256C 0000                       	dc.w Pal_SBZCyc3
0000256E FB6E                       	dc.w $FB6E
00002570 0B08                       	dc.b $B, 8
00002572 0000                       	dc.w Pal_SBZCyc5
00002574 FB70                       	dc.w $FB70
00002576 0708                       	dc.b 7,	8
00002578 0000                       	dc.w Pal_SBZCyc6
0000257A FB72                       	dc.w $FB72
0000257C 1C10                       	dc.b $1C, $10
0000257E 0000                       	dc.w Pal_SBZCyc7
00002580 FB7E                       	dc.w $FB7E
00002582 0303                       	dc.b 3,	3
00002584 0000                       	dc.w Pal_SBZCyc8
00002586 FB78                       	dc.w $FB78
00002588 0303                       	dc.b 3,	3
0000258A 0000                       	dc.w Pal_SBZCyc8+2
0000258C FB7A                       	dc.w $FB7A
0000258E 0303                       	dc.b 3,	3
00002590 0000                       	dc.w Pal_SBZCyc8+4
00002592 FB7C                       	dc.w $FB7C
00002594                            	even
00002594                            	even
00002594                            
00002594                            Pal_SBZCycList2:
00002594                            	include "_inc\SBZ pallet script 2.asm"
00002594                            ; ---------------------------------------------------------------------------
00002594                            ; Scrap Brain Zone 2 pallet cycling script
00002594                            ; ---------------------------------------------------------------------------
00002594 0006                       	dc.w 6
00002596 0708                       	dc.b 7,	8
00002598 0000                       	dc.w Pal_SBZCyc1
0000259A FB50                       	dc.w $FB50
0000259C 0D08                       	dc.b $D, 8
0000259E 0000                       	dc.w Pal_SBZCyc2
000025A0 FB52                       	dc.w $FB52
000025A2 0908                       	dc.b 9,	8
000025A4 0000                       	dc.w Pal_SBZCyc9
000025A6 FB70                       	dc.w $FB70
000025A8 0708                       	dc.b 7,	8
000025AA 0000                       	dc.w Pal_SBZCyc6
000025AC FB72                       	dc.w $FB72
000025AE 0303                       	dc.b 3,	3
000025B0 0000                       	dc.w Pal_SBZCyc8
000025B2 FB78                       	dc.w $FB78
000025B4 0303                       	dc.b 3,	3
000025B6 0000                       	dc.w Pal_SBZCyc8+2
000025B8 FB7A                       	dc.w $FB7A
000025BA 0303                       	dc.b 3,	3
000025BC 0000                       	dc.w Pal_SBZCyc8+4
000025BE FB7C                       	dc.w $FB7C
000025C0                            	even
000025C0                            	even
000025C0                            
000025C0                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
000025D0                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
000025E0                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
000025F0                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
000025FC                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
0000260C                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
0000261C                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
0000263C                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00002646                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00002656                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00002662                            ; ---------------------------------------------------------------------------
00002662                            ; Subroutine to	fade out and fade in
00002662                            ; ---------------------------------------------------------------------------
00002662                            
00002662                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002662                            
00002662                            
00002662                            Pal_FadeTo:
00002662 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002668                            
00002668                            Pal_FadeTo2:
00002668 7000                       		moveq	#0,d0
0000266A 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000266E 1038 F626                  		move.b	($FFFFF626).w,d0
00002672 D0C0                       		adda.w	d0,a0
00002674 7200                       		moveq	#0,d1
00002676 1038 F627                  		move.b	($FFFFF627).w,d0
0000267A                            
0000267A                            Pal_ToBlack:
0000267A 30C1                       		move.w	d1,(a0)+
0000267C 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00002680                            
00002680 383C 0015                  		move.w	#$15,d4
00002684 1A3C 0009                  		move.b	#9,d5
00002688                            
00002688                            loc_1DCE:
00002688 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000268E 6100 0000                  		bsr.w	DelayProgram
00002692 6100                       		bsr.s	Pal_FadeIn
00002694 6100 F83C                  		bsr.w	RunPLC_RAM
00002698 51CC FFEE                  		dbf	d4,loc_1DCE
0000269C 4E75                       		rts	
0000269E                            ; End of function Pal_FadeTo
0000269E                            
0000269E                            ; ---------------------------------------------------------------------------
0000269E                            ; Pallet fade-in subroutine
0000269E                            ; ---------------------------------------------------------------------------
0000269E                            
0000269E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000269E                            
0000269E                            
0000269E                            Pal_FadeIn:				; XREF: Pal_FadeTo
0000269E 7000                       		moveq	#0,d0
000026A0 41F8 FB00                  		lea	($FFFFFB00).w,a0
000026A4 43F8 FB80                  		lea	($FFFFFB80).w,a1
000026A8 1038 F626                  		move.b	($FFFFF626).w,d0
000026AC D0C0                       		adda.w	d0,a0
000026AE D2C0                       		adda.w	d0,a1
000026B0 1038 F627                  		move.b	($FFFFF627).w,d0
000026B4                            
000026B4                            loc_1DFA:
000026B4 6100                       		bsr.s	Pal_AddColor
000026B6 51C8 FFFC                  		dbf	d0,loc_1DFA
000026BA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000026C0 6600                       		bne.s	locret_1E24
000026C2 7000                       		moveq	#0,d0
000026C4 41F8 FA80                  		lea	($FFFFFA80).w,a0
000026C8 43F8 FA00                  		lea	($FFFFFA00).w,a1
000026CC 1038 F626                  		move.b	($FFFFF626).w,d0
000026D0 D0C0                       		adda.w	d0,a0
000026D2 D2C0                       		adda.w	d0,a1
000026D4 1038 F627                  		move.b	($FFFFF627).w,d0
000026D8                            
000026D8                            loc_1E1E:
000026D8 6100                       		bsr.s	Pal_AddColor
000026DA 51C8 FFFC                  		dbf	d0,loc_1E1E
000026DE                            
000026DE                            locret_1E24:
000026DE 4E75                       		rts	
000026E0                            ; End of function Pal_FadeIn
000026E0                            
000026E0                            
000026E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000026E0                            
000026E0                            
000026E0                            Pal_AddColor:				; XREF: Pal_FadeIn
000026E0 3419                       		move.w	(a1)+,d2
000026E2 3610                       		move.w	(a0),d3
000026E4 B642                       		cmp.w	d2,d3
000026E6 6700                       		beq.s	loc_1E4E
000026E8 3203                       		move.w	d3,d1
000026EA 0641 0200                  		addi.w	#$200,d1	; increase blue	value
000026EE B242                       		cmp.w	d2,d1		; has blue reached threshold level?
000026F0 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
000026F2 30C1                       		move.w	d1,(a0)+	; update pallet
000026F4 4E75                       		rts	
000026F6                            ; ===========================================================================
000026F6                            
000026F6                            Pal_AddGreen:				; XREF: Pal_AddColor
000026F6 3203                       		move.w	d3,d1
000026F8 0641 0020                  		addi.w	#$20,d1		; increase green value
000026FC B242                       		cmp.w	d2,d1
000026FE 6200                       		bhi.s	Pal_AddRed
00002700 30C1                       		move.w	d1,(a0)+	; update pallet
00002702 4E75                       		rts	
00002704                            ; ===========================================================================
00002704                            
00002704                            Pal_AddRed:				; XREF: Pal_AddGreen
00002704 5458                       		addq.w	#2,(a0)+	; increase red value
00002706 4E75                       		rts	
00002708                            ; ===========================================================================
00002708                            
00002708                            loc_1E4E:				; XREF: Pal_AddColor
00002708 5448                       		addq.w	#2,a0
0000270A 4E75                       		rts	
0000270C                            ; End of function Pal_AddColor
0000270C                            
0000270C                            
0000270C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000270C                            
0000270C                            PalFadeOut:
0000270C                            Pal_FadeFrom:
0000270C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002712 383C 0015                  		move.w	#$15,d4
00002716                            loc_1E5C:
00002716 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000271C 6100 0000                  		bsr.w	DelayProgram
00002720 6100                       		bsr.s	Pal_FadeOut
00002722 6100 F7AE                  		bsr.w	RunPLC_RAM
00002726 51CC FFEE                  		dbf	d4,loc_1E5C
0000272A 4E75                       		rts	
0000272C                            ; End of function Pal_FadeFrom
0000272C                            
0000272C                            ; ---------------------------------------------------------------------------
0000272C                            ; Pallet fade-out subroutine
0000272C                            ; ---------------------------------------------------------------------------
0000272C                            
0000272C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000272C                            
0000272C                            
0000272C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000272C 7000                       		moveq	#0,d0
0000272E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002732 1038 F626                  		move.b	($FFFFF626).w,d0
00002736 D0C0                       		adda.w	d0,a0
00002738 1038 F627                  		move.b	($FFFFF627).w,d0
0000273C                            
0000273C                            loc_1E82:
0000273C 6100                       		bsr.s	Pal_DecColor
0000273E 51C8 FFFC                  		dbf	d0,loc_1E82
00002742                            
00002742 7000                       		moveq	#0,d0
00002744 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002748 1038 F626                  		move.b	($FFFFF626).w,d0
0000274C D0C0                       		adda.w	d0,a0
0000274E 1038 F627                  		move.b	($FFFFF627).w,d0
00002752                            
00002752                            loc_1E98:
00002752 6100                       		bsr.s	Pal_DecColor
00002754 51C8 FFFC                  		dbf	d0,loc_1E98
00002758 4E75                       		rts	
0000275A                            ; End of function Pal_FadeOut
0000275A                            
0000275A                            
0000275A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000275A                            
0000275A                            
0000275A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000275A 3410                       		move.w	(a0),d2
0000275C 6700                       		beq.s	loc_1ECC
0000275E 3202                       		move.w	d2,d1
00002760 0241 000E                  		andi.w	#$E,d1
00002764 6700                       		beq.s	Pal_DecGreen
00002766 5558                       		subq.w	#2,(a0)+	; decrease red value
00002768 4E75                       		rts	
0000276A                            ; ===========================================================================
0000276A                            
0000276A                            Pal_DecGreen:				; XREF: Pal_DecColor
0000276A 3202                       		move.w	d2,d1
0000276C 0241 00E0                  		andi.w	#$E0,d1
00002770 6700                       		beq.s	Pal_DecBlue
00002772 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00002776 4E75                       		rts	
00002778                            ; ===========================================================================
00002778                            
00002778                            Pal_DecBlue:				; XREF: Pal_DecGreen
00002778 3202                       		move.w	d2,d1
0000277A 0241 0E00                  		andi.w	#$E00,d1
0000277E 6700                       		beq.s	loc_1ECC
00002780 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00002784 4E75                       		rts	
00002786                            ; ===========================================================================
00002786                            
00002786                            loc_1ECC:				; XREF: Pal_DecColor
00002786 5448                       		addq.w	#2,a0
00002788 4E75                       		rts	
0000278A                            ; End of function Pal_DecColor
0000278A                            
0000278A                            ; ---------------------------------------------------------------------------
0000278A                            ; Subroutine to	fill the pallet	with white (special stage)
0000278A                            ; ---------------------------------------------------------------------------
0000278A                            
0000278A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000278A                            
0000278A                            
0000278A                            Pal_MakeWhite:				; XREF: SpecialStage
0000278A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002790 7000                       		moveq	#0,d0
00002792 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002796 1038 F626                  		move.b	($FFFFF626).w,d0
0000279A D0C0                       		adda.w	d0,a0
0000279C 323C 0EEE                  		move.w	#$EEE,d1
000027A0 1038 F627                  		move.b	($FFFFF627).w,d0
000027A4                            
000027A4                            PalWhite_Loop:
000027A4 30C1                       		move.w	d1,(a0)+
000027A6 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000027AA 383C 0015                  		move.w	#$15,d4
000027AE                            
000027AE                            loc_1EF4:
000027AE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000027B4 6100 0000                  		bsr.w	DelayProgram
000027B8 6100                       		bsr.s	Pal_WhiteToBlack
000027BA 6100 F716                  		bsr.w	RunPLC_RAM
000027BE 51CC FFEE                  		dbf	d4,loc_1EF4
000027C2 4E75                       		rts	
000027C4                            ; End of function Pal_MakeWhite
000027C4                            
000027C4                            
000027C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000027C4                            
000027C4                            
000027C4                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000027C4 7000                       		moveq	#0,d0
000027C6 41F8 FB00                  		lea	($FFFFFB00).w,a0
000027CA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000027CE 1038 F626                  		move.b	($FFFFF626).w,d0
000027D2 D0C0                       		adda.w	d0,a0
000027D4 D2C0                       		adda.w	d0,a1
000027D6 1038 F627                  		move.b	($FFFFF627).w,d0
000027DA                            
000027DA                            loc_1F20:
000027DA 6100                       		bsr.s	Pal_DecColor2
000027DC 51C8 FFFC                  		dbf	d0,loc_1F20
000027E0                            
000027E0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000027E6 6600                       		bne.s	locret_1F4A
000027E8 7000                       		moveq	#0,d0
000027EA 41F8 FA80                  		lea	($FFFFFA80).w,a0
000027EE 43F8 FA00                  		lea	($FFFFFA00).w,a1
000027F2 1038 F626                  		move.b	($FFFFF626).w,d0
000027F6 D0C0                       		adda.w	d0,a0
000027F8 D2C0                       		adda.w	d0,a1
000027FA 1038 F627                  		move.b	($FFFFF627).w,d0
000027FE                            
000027FE                            loc_1F44:
000027FE 6100                       		bsr.s	Pal_DecColor2
00002800 51C8 FFFC                  		dbf	d0,loc_1F44
00002804                            
00002804                            locret_1F4A:
00002804 4E75                       		rts	
00002806                            ; End of function Pal_WhiteToBlack
00002806                            
00002806                            
00002806                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002806                            
00002806                            
00002806                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002806 3419                       		move.w	(a1)+,d2
00002808 3610                       		move.w	(a0),d3
0000280A B642                       		cmp.w	d2,d3
0000280C 6700                       		beq.s	loc_1F78
0000280E 3203                       		move.w	d3,d1
00002810 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002814 6500                       		bcs.s	loc_1F64
00002816 B242                       		cmp.w	d2,d1
00002818 6500                       		bcs.s	loc_1F64
0000281A 30C1                       		move.w	d1,(a0)+
0000281C 4E75                       		rts	
0000281E                            ; ===========================================================================
0000281E                            
0000281E                            loc_1F64:				; XREF: Pal_DecColor2
0000281E 3203                       		move.w	d3,d1
00002820 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002824 6500                       		bcs.s	loc_1F74
00002826 B242                       		cmp.w	d2,d1
00002828 6500                       		bcs.s	loc_1F74
0000282A 30C1                       		move.w	d1,(a0)+
0000282C 4E75                       		rts	
0000282E                            ; ===========================================================================
0000282E                            
0000282E                            loc_1F74:				; XREF: loc_1F64
0000282E 5558                       		subq.w	#2,(a0)+	; decrease red value
00002830 4E75                       		rts	
00002832                            ; ===========================================================================
00002832                            
00002832                            loc_1F78:				; XREF: Pal_DecColor2
00002832 5448                       		addq.w	#2,a0
00002834 4E75                       		rts	
00002836                            ; End of function Pal_DecColor2
00002836                            
00002836                            ; ---------------------------------------------------------------------------
00002836                            ; Subroutine to	make a white flash when	you enter a special stage
00002836                            ; ---------------------------------------------------------------------------
00002836                            
00002836                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002836                            
00002836                            
00002836                            Pal_MakeFlash:				; XREF: SpecialStage
00002836 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000283C 383C 0015                  		move.w	#$15,d4
00002840                            
00002840                            loc_1F86:
00002840 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002846 6100 0000                  		bsr.w	DelayProgram
0000284A 6100                       		bsr.s	Pal_ToWhite
0000284C 6100 F684                  		bsr.w	RunPLC_RAM
00002850 51CC FFEE                  		dbf	d4,loc_1F86
00002854 4E75                       		rts	
00002856                            ; End of function Pal_MakeFlash
00002856                            
00002856                            
00002856                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002856                            
00002856                            
00002856                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002856 7000                       		moveq	#0,d0
00002858 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000285C 1038 F626                  		move.b	($FFFFF626).w,d0
00002860 D0C0                       		adda.w	d0,a0
00002862 1038 F627                  		move.b	($FFFFF627).w,d0
00002866                            
00002866                            loc_1FAC:
00002866 6100                       		bsr.s	Pal_AddColor2
00002868 51C8 FFFC                  		dbf	d0,loc_1FAC
0000286C 7000                       		moveq	#0,d0
0000286E 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002872 1038 F626                  		move.b	($FFFFF626).w,d0
00002876 D0C0                       		adda.w	d0,a0
00002878 1038 F627                  		move.b	($FFFFF627).w,d0
0000287C                            
0000287C                            loc_1FC2:
0000287C 6100                       		bsr.s	Pal_AddColor2
0000287E 51C8 FFFC                  		dbf	d0,loc_1FC2
00002882 4E75                       		rts	
00002884                            ; End of function Pal_ToWhite
00002884                            
00002884                            
00002884                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002884                            
00002884                            
00002884                            Pal_AddColor2:				; XREF: Pal_ToWhite
00002884 3410                       		move.w	(a0),d2
00002886 0C42 0EEE                  		cmpi.w	#$EEE,d2
0000288A 6700                       		beq.s	loc_2006
0000288C 3202                       		move.w	d2,d1
0000288E 0241 000E                  		andi.w	#$E,d1
00002892 0C41 000E                  		cmpi.w	#$E,d1
00002896 6700                       		beq.s	loc_1FE2
00002898 5458                       		addq.w	#2,(a0)+	; increase red value
0000289A 4E75                       		rts	
0000289C                            ; ===========================================================================
0000289C                            
0000289C                            loc_1FE2:				; XREF: Pal_AddColor2
0000289C 3202                       		move.w	d2,d1
0000289E 0241 00E0                  		andi.w	#$E0,d1
000028A2 0C41 00E0                  		cmpi.w	#$E0,d1
000028A6 6700                       		beq.s	loc_1FF4
000028A8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000028AC 4E75                       		rts	
000028AE                            ; ===========================================================================
000028AE                            
000028AE                            loc_1FF4:				; XREF: loc_1FE2
000028AE 3202                       		move.w	d2,d1
000028B0 0241 0E00                  		andi.w	#$E00,d1
000028B4 0C41 0E00                  		cmpi.w	#$E00,d1
000028B8 6700                       		beq.s	loc_2006
000028BA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000028BE 4E75                       		rts	
000028C0                            ; ===========================================================================
000028C0                            
000028C0                            loc_2006:				; XREF: Pal_AddColor2
000028C0 5448                       		addq.w	#2,a0
000028C2 4E75                       		rts	
000028C4                            ; End of function Pal_AddColor2
000028C4                            
000028C4                            ; ---------------------------------------------------------------------------
000028C4                            ; Pallet cycling routine - Sega	logo
000028C4                            ; ---------------------------------------------------------------------------
000028C4                            
000028C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000028C4                            
000028C4                            
000028C4                            PalCycle_Sega:				; XREF: SegaScreen
000028C4 4A38 F635                  		tst.b	($FFFFF635).w
000028C8 6600                       		bne.s	loc_206A
000028CA 43F8 FB20                  		lea	($FFFFFB20).w,a1
000028CE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000028D4 7205                       		moveq	#5,d1
000028D6 3038 F632                  		move.w	($FFFFF632).w,d0
000028DA                            
000028DA                            loc_2020:
000028DA 6A00                       		bpl.s	loc_202A
000028DC 5448                       		addq.w	#2,a0
000028DE 5341                       		subq.w	#1,d1
000028E0 5440                       		addq.w	#2,d0
000028E2 60F6                       		bra.s	loc_2020
000028E4                            ; ===========================================================================
000028E4                            
000028E4                            loc_202A:				; XREF: PalCycle_Sega
000028E4 3400                       		move.w	d0,d2
000028E6 0242 001E                  		andi.w	#$1E,d2
000028EA 6600                       		bne.s	loc_2034
000028EC 5440                       		addq.w	#2,d0
000028EE                            
000028EE                            loc_2034:
000028EE 0C40 0060                  		cmpi.w	#$60,d0
000028F2 6400                       		bcc.s	loc_203E
000028F4 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000028F8                            
000028F8                            loc_203E:
000028F8 5440                       		addq.w	#2,d0
000028FA 51C9 FFE8                  		dbf	d1,loc_202A
000028FE 3038 F632                  		move.w	($FFFFF632).w,d0
00002902 5440                       		addq.w	#2,d0
00002904 3400                       		move.w	d0,d2
00002906 0242 001E                  		andi.w	#$1E,d2
0000290A 6600                       		bne.s	loc_2054
0000290C 5440                       		addq.w	#2,d0
0000290E                            
0000290E                            loc_2054:
0000290E 0C40 0064                  		cmpi.w	#$64,d0
00002912 6D00                       		blt.s	loc_2062
00002914 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000291A 70F4                       		moveq	#-$C,d0
0000291C                            
0000291C                            loc_2062:
0000291C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002920 7001                       		moveq	#1,d0
00002922 4E75                       		rts	
00002924                            ; ===========================================================================
00002924                            
00002924                            loc_206A:				; XREF: loc_202A
00002924 5338 F634                  		subq.b	#1,($FFFFF634).w
00002928 6A00                       		bpl.s	loc_20BC
0000292A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002930 3038 F632                  		move.w	($FFFFF632).w,d0
00002934 0640 000C                  		addi.w	#$C,d0
00002938 0C40 0030                  		cmpi.w	#$30,d0
0000293C 6500                       		bcs.s	loc_2088
0000293E 7000                       		moveq	#0,d0
00002940 4E75                       		rts	
00002942                            ; ===========================================================================
00002942                            
00002942                            loc_2088:				; XREF: loc_206A
00002942 31C0 F632                  		move.w	d0,($FFFFF632).w
00002946 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000294C 41F0 0000                  		lea	(a0,d0.w),a0
00002950 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002954 22D8                       		move.l	(a0)+,(a1)+
00002956 22D8                       		move.l	(a0)+,(a1)+
00002958 3298                       		move.w	(a0)+,(a1)
0000295A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000295E 7000                       		moveq	#0,d0
00002960 722C                       		moveq	#$2C,d1
00002962                            
00002962                            loc_20A8:
00002962 3400                       		move.w	d0,d2
00002964 0242 001E                  		andi.w	#$1E,d2
00002968 6600                       		bne.s	loc_20B2
0000296A 5440                       		addq.w	#2,d0
0000296C                            
0000296C                            loc_20B2:
0000296C 3390 0000                  		move.w	(a0),(a1,d0.w)
00002970 5440                       		addq.w	#2,d0
00002972 51C9 FFEE                  		dbf	d1,loc_20A8
00002976                            
00002976                            loc_20BC:
00002976 7001                       		moveq	#1,d0
00002978 4E75                       		rts	
0000297A                            ; End of function PalCycle_Sega
0000297A                            
0000297A                            ; ===========================================================================
0000297A                            
0000297A                            Pal_Sega1:	incbin	pallet\sega1.bin
00002986                            Pal_Sega2:	incbin	pallet\sega2.bin
000029B6                            
000029B6                            ; ---------------------------------------------------------------------------
000029B6                            ; Subroutines to load pallets
000029B6                            ; ---------------------------------------------------------------------------
000029B6                            
000029B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029B6                            
000029B6                            
000029B6                            PalLoad1:
000029B6 43F9 0000 0000             		lea	(PalPointers).l,a1
000029BC E748                       		lsl.w	#3,d0
000029BE D2C0                       		adda.w	d0,a1
000029C0 2459                       		movea.l	(a1)+,a2
000029C2 3659                       		movea.w	(a1)+,a3
000029C4 D6FC 0080                  		adda.w	#$80,a3
000029C8 3E19                       		move.w	(a1)+,d7
000029CA                            
000029CA                            loc_2110:
000029CA 26DA                       		move.l	(a2)+,(a3)+
000029CC 51CF FFFC                  		dbf	d7,loc_2110
000029D0 4E75                       		rts	
000029D2                            ; End of function PalLoad1
000029D2                            
000029D2                            
000029D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029D2                            
000029D2                            
000029D2                            PalLoad2:
000029D2 43F9 0000 0000             		lea	(PalPointers).l,a1
000029D8 E748                       		lsl.w	#3,d0
000029DA D2C0                       		adda.w	d0,a1
000029DC 2459                       		movea.l	(a1)+,a2
000029DE 3659                       		movea.w	(a1)+,a3
000029E0 3E19                       		move.w	(a1)+,d7
000029E2                            
000029E2                            loc_2128:
000029E2 26DA                       		move.l	(a2)+,(a3)+
000029E4 51CF FFFC                  		dbf	d7,loc_2128
000029E8 4E75                       		rts	
000029EA                            ; End of function PalLoad2
000029EA                            
000029EA                            ; ---------------------------------------------------------------------------
000029EA                            ; Underwater pallet loading subroutine
000029EA                            ; ---------------------------------------------------------------------------
000029EA                            
000029EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029EA                            
000029EA                            
000029EA                            PalLoad3_Water:
000029EA 43F9 0000 0000             		lea	(PalPointers).l,a1
000029F0 E748                       		lsl.w	#3,d0
000029F2 D2C0                       		adda.w	d0,a1
000029F4 2459                       		movea.l	(a1)+,a2
000029F6 3659                       		movea.w	(a1)+,a3
000029F8 96FC 0080                  		suba.w	#$80,a3
000029FC 3E19                       		move.w	(a1)+,d7
000029FE                            
000029FE                            loc_2144:
000029FE 26DA                       		move.l	(a2)+,(a3)+
00002A00 51CF FFFC                  		dbf	d7,loc_2144
00002A04 4E75                       		rts	
00002A06                            ; End of function PalLoad3_Water
00002A06                            
00002A06                            
00002A06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002A06                            
00002A06                            
00002A06                            PalLoad4_Water:
00002A06 43F9 0000 0000             		lea	(PalPointers).l,a1
00002A0C E748                       		lsl.w	#3,d0
00002A0E D2C0                       		adda.w	d0,a1
00002A10 2459                       		movea.l	(a1)+,a2
00002A12 3659                       		movea.w	(a1)+,a3
00002A14 96FC 0100                  		suba.w	#$100,a3
00002A18 3E19                       		move.w	(a1)+,d7
00002A1A                            
00002A1A                            loc_2160:
00002A1A 26DA                       		move.l	(a2)+,(a3)+
00002A1C 51CF FFFC                  		dbf	d7,loc_2160
00002A20 4E75                       		rts	
00002A22                            ; End of function PalLoad4_Water
00002A22                            
00002A22                            ; ===========================================================================
00002A22                            ; ---------------------------------------------------------------------------
00002A22                            ; Pallet pointers
00002A22                            ; ---------------------------------------------------------------------------
00002A22                            PalPointers:
00002A22                            	include "_inc\Pallet pointers.asm"
00002A22                            ; ---------------------------------------------------------------------------
00002A22                            ; Pallet pointers
00002A22                            ; ---------------------------------------------------------------------------
00002A22 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002A26 FB00                       	dc.w $FB00		; RAM address
00002A28 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002A2A 0000 0000                  	dc.l Pal_Title
00002A2E FB00                       	dc.w $FB00
00002A30 001F                       	dc.w $1F
00002A32 0000 0000                  	dc.l Pal_LevelSel
00002A36 FB00                       	dc.w $FB00
00002A38 001F                       	dc.w $1F
00002A3A 0000 0000                  	dc.l Pal_Sonic
00002A3E FB00                       	dc.w $FB00
00002A40 0007                       	dc.w 7
00002A42 0000 0000                  	dc.l Pal_GHZ
00002A46 FB20                       	dc.w $FB20
00002A48 0017                       	dc.w $17
00002A4A 0000 0000                  	dc.l Pal_LZ
00002A4E FB20                       	dc.w $FB20
00002A50 0017                       	dc.w $17
00002A52 0000 0000                  	dc.l Pal_MZ
00002A56 FB20                       	dc.w $FB20
00002A58 0017                       	dc.w $17
00002A5A 0000 0000                  	dc.l Pal_SLZ
00002A5E FB20                       	dc.w $FB20
00002A60 0017                       	dc.w $17
00002A62 0000 0000                  	dc.l Pal_SYZ
00002A66 FB20                       	dc.w $FB20
00002A68 0017                       	dc.w $17
00002A6A 0000 0000                  	dc.l Pal_SBZ1
00002A6E FB20                       	dc.w $FB20
00002A70 0017                       	dc.w $17
00002A72 0000 0000                  	dc.l Pal_Special
00002A76 FB00                       	dc.w $FB00
00002A78 001F                       	dc.w $1F
00002A7A 0000 0000                  	dc.l Pal_LZWater
00002A7E FB00                       	dc.w $FB00
00002A80 001F                       	dc.w $1F
00002A82 0000 0000                  	dc.l Pal_SBZ3
00002A86 FB20                       	dc.w $FB20
00002A88 0017                       	dc.w $17
00002A8A 0000 0000                  	dc.l Pal_SBZ3Water
00002A8E FB00                       	dc.w $FB00
00002A90 001F                       	dc.w $1F
00002A92 0000 0000                  	dc.l Pal_SBZ2
00002A96 FB20                       	dc.w $FB20
00002A98 0017                       	dc.w $17
00002A9A 0000 0000                  	dc.l Pal_LZSonWater
00002A9E FB00                       	dc.w $FB00
00002AA0 0007                       	dc.w 7
00002AA2 0000 0000                  	dc.l Pal_SBZ3SonWat
00002AA6 FB00                       	dc.w $FB00
00002AA8 0007                       	dc.w 7
00002AAA 0000 0000                  	dc.l Pal_SpeResult
00002AAE FB00                       	dc.w $FB00
00002AB0 001F                       	dc.w $1F
00002AB2 0000 0000                  	dc.l Pal_SpeContinue
00002AB6 FB00                       	dc.w $FB00
00002AB8 000F                       	dc.w $F
00002ABA 0000 0000                  	dc.l Pal_Ending
00002ABE FB00                       	dc.w $FB00
00002AC0 001F                       	dc.w $1F
00002AC2 0000 0000                  	dc.l Pal_Idiot
00002AC6 FB20                       	dc.w $FB20
00002AC8 0007                       	dc.w 7
00002ACA 0000 0000                  	dc.l Pal_BHZ
00002ACE FB20                       	dc.w $FB20
00002AD0 0017                       	dc.w $17
00002AD2 0000 0000                  	dc.l Pal_Gronic
00002AD6 FB00                       	dc.w $FB00
00002AD8 0007                       	dc.w 7
00002ADA 0000 0000                  	dc.l Pal_LZGroWater
00002ADE FB00                       	dc.w $FB00
00002AE0 0007                       	dc.w 7
00002AE2 0000 0000                  	dc.l Pal_SBZ3GroWat
00002AE6 FB00                       	dc.w $FB00
00002AE8 0007                       	dc.w 7
00002AEA 0000 0000                  	dc.l Pal_Anakama
00002AEE FB00                       	dc.w $FB00
00002AF0 0007                       	dc.w 7
00002AF0 0007                       	dc.w 7
00002AF2                            
00002AF2                            ; ---------------------------------------------------------------------------
00002AF2                            ; Pallet data
00002AF2                            ; ---------------------------------------------------------------------------
00002AF2                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002B72                            Pal_Title:	incbin	pallet\title.bin
00002BF2                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002C72                            Pal_Sonic:	incbin	pallet\sonic.bin
00002C92                            Pal_GHZ:	incbin	pallet\ghz.bin
00002CF2                            Pal_LZ:		incbin	pallet\lz.bin
00002D52                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002DD2                            Pal_MZ:		incbin	pallet\mz.bin
00002E32                            Pal_SLZ:	incbin	pallet\slz.bin
00002E92                            Pal_SYZ:	incbin	pallet\syz.bin
00002EF2                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002F52                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00002FB2                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00003032                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00003092                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00003112                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00003132                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00003152                            Pal_BHZ:	incbin	pallet\bhz.bin
000031B2                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00003232                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00003272                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000032F2                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00003312                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00003332                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00003352                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00003372                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
000033F2                            
000033F2                            ; ---------------------------------------------------------------------------
000033F2                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000033F2                            ; ---------------------------------------------------------------------------
000033F2                            
000033F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033F2                            
000033F2                            VSync:
000033F2                            DelayProgram:				; XREF: PauseGame
000033F2 46FC 2300                  		move	#$2300,sr
000033F6                            
000033F6                            loc_29AC:
000033F6 4A38 F62A                  		tst.b	($FFFFF62A).w
000033FA 66FA                       		bne.s	loc_29AC
000033FC 4E75                       		rts	
000033FE                            ; End of function DelayProgram
000033FE                            
000033FE                            ; ---------------------------------------------------------------------------
000033FE                            ; Subroutine to	generate a pseudo-random number	in d0
000033FE                            ; ---------------------------------------------------------------------------
000033FE                            
000033FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033FE                            
000033FE                            CalcRandom: 
000033FE                            RandomNumber:
000033FE 2238 F636                  		move.l	($FFFFF636).w,d1
00003402 6600                       		bne.s	loc_29C0
00003404 223C 2A6D 365A             		move.l	#$2A6D365A,d1
0000340A                            
0000340A                            loc_29C0:
0000340A 2001                       		move.l	d1,d0
0000340C E581                       		asl.l	#2,d1
0000340E D280                       		add.l	d0,d1
00003410 E781                       		asl.l	#3,d1
00003412 D280                       		add.l	d0,d1
00003414 3001                       		move.w	d1,d0
00003416 4841                       		swap	d1
00003418 D041                       		add.w	d1,d0
0000341A 3200                       		move.w	d0,d1
0000341C 4841                       		swap	d1
0000341E 21C1 F636                  		move.l	d1,($FFFFF636).w
00003422 4E75                       		rts	
00003424                            ; End of function RandomNumber
00003424                            
00003424                            
00003424                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003424                            
00003424                            CalcSinCos:
00003424                            CalcSine:				; XREF: SS_BGAnimate; et al
00003424 0240 00FF                  		andi.w	#$FF,d0
00003428 D040                       		add.w	d0,d0
0000342A 0640 0080                  		addi.w	#$80,d0
0000342E 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00003432 0440 0080                  		subi.w	#$80,d0
00003436 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
0000343A 4E75                       		rts	
0000343C                            ; End of function CalcSine
0000343C                            
0000343C                            ; ===========================================================================
0000343C                            
0000343C                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
000036BC                            
000036BC                            ; ===========================================================================
000036BC 48E7 6000                  		movem.l	d1-d2,-(sp)
000036C0 3200                       		move.w	d0,d1
000036C2 4841                       		swap	d1
000036C4 7000                       		moveq	#0,d0
000036C6 3200                       		move.w	d0,d1
000036C8 7407                       		moveq	#7,d2
000036CA                            
000036CA                            loc_2C80:
000036CA E599                       		rol.l	#2,d1
000036CC D040                       		add.w	d0,d0
000036CE 5240                       		addq.w	#1,d0
000036D0 9240                       		sub.w	d0,d1
000036D2 6400                       		bcc.s	loc_2C9A
000036D4 D240                       		add.w	d0,d1
000036D6 5340                       		subq.w	#1,d0
000036D8 51CA FFF0                  		dbf	d2,loc_2C80
000036DC E248                       		lsr.w	#1,d0
000036DE 4CDF 0006                  		movem.l	(sp)+,d1-d2
000036E2 4E75                       		rts	
000036E4                            ; ===========================================================================
000036E4                            
000036E4                            loc_2C9A:
000036E4 5240                       		addq.w	#1,d0
000036E6 51CA FFE2                  		dbf	d2,loc_2C80
000036EA E248                       		lsr.w	#1,d0
000036EC 4CDF 0006                  		movem.l	(sp)+,d1-d2
000036F0 4E75                       		rts	
000036F2                            
000036F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000036F2                            
000036F2                            
000036F2                            CalcAngle:
000036F2 48E7 1800                  		movem.l	d3-d4,-(sp)
000036F6 7600                       		moveq	#0,d3
000036F8 7800                       		moveq	#0,d4
000036FA 3601                       		move.w	d1,d3
000036FC 3802                       		move.w	d2,d4
000036FE 8843                       		or.w	d3,d4
00003700 6700                       		beq.s	loc_2D04
00003702 3802                       		move.w	d2,d4
00003704 4A43                       		tst.w	d3
00003706 6A00 0000                  		bpl.w	loc_2CC2
0000370A 4443                       		neg.w	d3
0000370C                            
0000370C                            loc_2CC2:
0000370C 4A44                       		tst.w	d4
0000370E 6A00 0000                  		bpl.w	loc_2CCA
00003712 4444                       		neg.w	d4
00003714                            
00003714                            loc_2CCA:
00003714 B843                       		cmp.w	d3,d4
00003716 6400 0000                  		bcc.w	loc_2CDC
0000371A E18C                       		lsl.l	#8,d4
0000371C 88C3                       		divu.w	d3,d4
0000371E 7000                       		moveq	#0,d0
00003720 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003724 6000                       		bra.s	loc_2CE6
00003726                            ; ===========================================================================
00003726                            
00003726                            loc_2CDC:				; XREF: CalcAngle
00003726 E18B                       		lsl.l	#8,d3
00003728 86C4                       		divu.w	d4,d3
0000372A 7040                       		moveq	#$40,d0
0000372C 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003730                            
00003730                            loc_2CE6:
00003730 4A41                       		tst.w	d1
00003732 6A00 0000                  		bpl.w	loc_2CF2
00003736 4440                       		neg.w	d0
00003738 0640 0080                  		addi.w	#$80,d0
0000373C                            
0000373C                            loc_2CF2:
0000373C 4A42                       		tst.w	d2
0000373E 6A00 0000                  		bpl.w	loc_2CFE
00003742 4440                       		neg.w	d0
00003744 0640 0100                  		addi.w	#$100,d0
00003748                            
00003748                            loc_2CFE:
00003748 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000374C 4E75                       		rts	
0000374E                            ; ===========================================================================
0000374E                            
0000374E                            loc_2D04:				; XREF: CalcAngle
0000374E 303C 0040                  		move.w	#$40,d0
00003752 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003756 4E75                       		rts	
00003758                            ; End of function CalcAngle
00003758                            
00003758                            ; ===========================================================================
00003758                            
00003758                            Angle_Data:	incbin	misc\angles.bin
0000385A                            
0000385A                            ; ===========================================================================
0000385A                            
0000385A                            ; ---------------------------------------------------------------------------
0000385A                            ; Sega screen
0000385A                            ; ---------------------------------------------------------------------------
0000385A                            
0000385A                            SegaScreen:				; XREF: GameModeArray
0000385A 103C 00E4                  		move.b	#$E4,d0
0000385E 6100 E422                  		bsr.w	PlaySound_Special ; stop music
00003862 6100 E660                  		bsr.w	ClearPLC
00003866 6100 EEA4                  		bsr.w	Pal_FadeFrom
0000386A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003870 3CBC 8004                  		move.w	#$8004,(a6)
00003874 3CBC 8230                  		move.w	#$8230,(a6)
00003878 3CBC 8407                  		move.w	#$8407,(a6)
0000387C 3CBC 8700                  		move.w	#$8700,(a6)
00003880 3CBC 8B00                  		move.w	#$8B00,(a6)
00003884 3CBC 8C81                  		move.w	#$8C81,(a6)
00003888 4238 F64E                  		clr.b	($FFFFF64E).w
0000388C 46FC 2700                  		move	#$2700,sr
00003890 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003894 0200 00BF                  		andi.b	#$BF,d0
00003898 33C0 00C0 0004             		move.w	d0,($C00004).l
0000389E 6100 E308                  		bsr.w	ClearScreen
000038A2 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000038AC 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000038B2 6100 E472                  		bsr.w	NemDec
000038B6 43F9 00FF 0000             		lea	($FF0000).l,a1
000038BC 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000038C2 303C 0000                  		move.w	#0,d0
000038C6 6100 E73C                  		bsr.w	EniDec
000038CA 43F9 00FF 0000             		lea	($FF0000).l,a1
000038D0 203C 6510 0003             		move.l	#$65100003,d0
000038D6 7217                       		moveq	#$17,d1
000038D8 7407                       		moveq	#7,d2
000038DA 6100 E42A                  		bsr.w	ShowVDPGraphics
000038DE 43F9 00FF 0180             		lea	($FF0180).l,a1
000038E4 203C 4000 0003             		move.l	#$40000003,d0
000038EA 7227                       		moveq	#$27,d1
000038EC 741B                       		moveq	#$1B,d2
000038EE 6100 E416                  		bsr.w	ShowVDPGraphics
000038F2 7000                       		moveq	#0,d0
000038F4 6100 F0DC                  		bsr.w	PalLoad2	; load Sega logo pallet
000038F8 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000038FE 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003904 31FC 0000 F662             		move.w	#0,($FFFFF662).w
0000390A 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00003910 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003914 0000 0040                  		ori.b	#$40,d0
00003918 33C0 00C0 0004             		move.w	d0,($C00004).l
0000391E                            
0000391E                            Sega_WaitPallet:
0000391E 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003924 6100 FACC                  		bsr.w	DelayProgram
00003928 6100 EF9A                  		bsr.w	PalCycle_Sega
0000392C 66F0                       		bne.s	Sega_WaitPallet
0000392E                            
0000392E 103C 00E1                  		move.b	#$E1,d0
00003932 6100 E34E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003936 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
0000393C 6100 FAB4                  		bsr.w	DelayProgram
00003940 31FC 01C2 F614                             move.w  #$1E+7*60,($FFFFF614).w         ; was $1E
00003946                            
00003946                            Sega_WaitEnd:
00003946 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000394C 6100 FAA4                  		bsr.w	DelayProgram
00003950 4A78 F614                  		tst.w	($FFFFF614).w
00003954 6700                       		beq.s	Sega_GotoTitle
00003956 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000395C 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000395E                            
0000395E                            Sega_GotoTitle:
0000395E 11FC 0004 F600             		move.b	#$4,($FFFFF600).w ; go to title screen
00003964 4E75                       		rts	
00003966                            ; ===========================================================================
00003966                            
00003966                            ; ---------------------------------------------------------------------------
00003966                            ; Title	screen
00003966                            ; ---------------------------------------------------------------------------
00003966                            
00003966                            TitleScreen:				; XREF: GameModeArray
00003966 103C 00E4                  		move.b	#$E4,d0
0000396A 6100 E316                  		bsr.w	PlaySound_Special ; stop music
0000396E 6100 ED9C                  		bsr.w	Pal_FadeFrom
00003972 6100 E550                  		bsr.w	ClearPLC
00003976 46FC 2700                  		move	#$2700,sr
0000397A 6100 E2BA                  		bsr.w	SoundDriverLoad
0000397E 4DF9 00C0 0004             		lea	($C00004).l,a6
00003984 3CBC 8004                  		move.w	#$8004,(a6)
00003988 3CBC 8230                  		move.w	#$8230,(a6)
0000398C 3CBC 8407                  		move.w	#$8407,(a6)
00003990 3CBC 9001                  		move.w	#$9001,(a6)
00003994 3CBC 9200                  		move.w	#$9200,(a6)
00003998 3CBC 8B03                  		move.w	#$8B03,(a6)
0000399C 3CBC 8720                  		move.w	#$8720,(a6)
000039A0 4238 F64E                  		clr.b	($FFFFF64E).w
000039A4 6100 E202                  		bsr.w	ClearScreen
000039A8 43F8 D000                  		lea	($FFFFD000).w,a1
000039AC 7000                       		moveq	#0,d0
000039AE 323C 07FF                  		move.w	#$7FF,d1
000039B2                            
000039B2                            Title_ClrObjRam:
000039B2 22C0                       		move.l	d0,(a1)+
000039B4 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000039B8                            
000039B8                            ; gomer
000039B8 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000039C2 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
000039C8 6100 E35C                  		bsr.w	NemDec
000039CC 7003                       		moveq	#3,d0		; load Sonic's pallet
000039CE 6100 EFE6                  		bsr.w	PalLoad1
000039D2                            
000039D2 43F9 00FF 0000             		lea	($FF0000).l,a1
000039D8 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
000039DE 303C 0000                  		move.w	#0,d0
000039E2 6100 E620                  		bsr.w	EniDec
000039E6                            ; help how the fuck can i do this IT SHOWS NOTHING
000039E6 6100 EC7A                  		bsr.w	Pal_FadeTo
000039EA 43F9 00FF 0000             		lea	($FF0000).l,a1
000039F0 203C 4000 0003             		move.l	#$40000003,d0
000039F6 7227                       		moveq	#$27,d1
000039F8 741B                       		moveq	#$1B,d2
000039FA 6100 E30A                  		bsr.w	ShowVDPGraphics
000039FE                            
000039FE                            
000039FE 43F9 00FF 0000             		lea	($FF0000).l,a1
00003A04 203C 6000 0003             		move.l	#$60000003,d0
00003A0A 7227                       		moveq	#$27,d1
00003A0C 741B                       		moveq	#$1B,d2
00003A0E                            
00003A0E 6100 ECFC                  		bsr.w	Pal_FadeFrom
00003A12                            
00003A12                            
00003A12 6100 E194                  		bsr.w	ClearScreen
00003A16 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003A20 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003A26 6100 E2FE                  		bsr.w	NemDec
00003A2A 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003A34 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003A3A 6100 E2EA                  		bsr.w	NemDec
00003A3E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003A44 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003A4A 303C 0000                  		move.w	#0,d0
00003A4E 6100 E5B4                  		bsr.w	EniDec
00003A52 43F9 00FF 0000             		lea	($FF0000).l,a1
00003A58 203C 4000 0003             		move.l	#$40000003,d0
00003A5E 7227                       		moveq	#$27,d1
00003A60 741B                       		moveq	#$1B,d2
00003A62 6100 E2A2                  		bsr.w	ShowVDPGraphics
00003A66 6100 ECA4                  		bsr.w	Pal_FadeFrom
00003A6A 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003A6E 7000                       		moveq	#0,d0
00003A70 323C 001F                  		move.w	#$1F,d1
00003A74                            
00003A74                            
00003A74                            Title_ClrPallet:
00003A74 22C0                       		move.l	d0,(a1)+
00003A76 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003A7A                            
00003A7A 7003                       		moveq	#3,d0		; load Sonic's pallet
00003A7C 6100 EF38                  		bsr.w	PalLoad1
00003A80 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003A86 4EB9 0000 0000             		jsr	ObjectsLoad
00003A8C 4EB9 0000 0000             		jsr	BuildSprites
00003A92 6100 EBCE                  		bsr.w	Pal_FadeTo
00003A96 46FC 2700                  		move	#$2700,sr
00003A9A 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003AA4 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003AAA 6100 E27A                  		bsr.w	NemDec
00003AAE 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003AB8 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003ABE 6100 E266                  		bsr.w	NemDec
00003AC2 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003ACC 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003AD2 6100 E252                  		bsr.w	NemDec
00003AD6 4DF9 00C0 0000             		lea	($C00000).l,a6
00003ADC 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003AE4 4BF9 0000 0D6E             		lea	(Art_Text).l,a5
00003AEA 323C 1152                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003AEE                            
00003AEE                            Title_LoadText:
00003AEE 2C9D                       		move.l	(a5)+,(a6)
00003AF0 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003AF4                            
00003AF4 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003AFA 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003B00 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003B06 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003B0C 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003B12 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003B18 6100 0000                  		bsr.w	LevelSizeLoad
00003B1C 6100 0000                  		bsr.w	DeformBgLayer
00003B20                            
00003B20 43F8 B000                  		lea	($FFFFB000).w,a1
00003B24 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003B2A 303C 0000                  		move.w	#0,d0
00003B2E 6100 E4D4                  		bsr.w	EniDec
00003B32 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003B38 43F9 00FF 0000             		lea	($FF0000).l,a1
00003B3E 6100 E642                  		bsr.w	KosDec
00003B42 6100 0000                  		bsr.w	LevelLayoutLoad
00003B46                            
00003B46 46FC 2700                  		move	#$2700,sr
00003B4A 6100 E05C                  		bsr.w	ClearScreen
00003B4E 4BF9 00C0 0004             		lea	($C00004).l,a5
00003B54 4DF9 00C0 0000             		lea	($C00000).l,a6
00003B5A 47F8 F708                  		lea	($FFFFF708).w,a3
00003B5E 49F8 A440                  		lea	($FFFFA440).w,a4
00003B62 343C 6000                  		move.w	#$6000,d2
00003B66 6100 0000                  		bsr.w	LoadTilesFromStart2
00003B6A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003B70 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003B76 303C 0000                  		move.w	#0,d0
00003B7A 6100 E488                  		bsr.w	EniDec
00003B7E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003B84 203C 4206 0003             		move.l	#$42060003,d0
00003B8A 7221                       		moveq	#$21,d1
00003B8C 7415                       		moveq	#$15,d2
00003B8E 6100 E176                  		bsr.w	ShowVDPGraphics
00003B92 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003B9C 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003BA2 6100 E182                  		bsr.w	NemDec
00003BA6 7001                       		moveq	#1,d0		; load title screen pallet
00003BA8 6100 EE0C                  		bsr.w	PalLoad1
00003BAC 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003BB0 6100 E0D0                  		bsr.w	PlaySound_Special
00003BB4 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003BBA 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003BC0 43F8 D080                  		lea	($FFFFD080).w,a1
00003BC4 7000                       		moveq	#0,d0
00003BC6 323C 000F                  		move.w	#$F,d1
00003BCA                            
00003BCA                            Title_ClrObjRam2:
00003BCA 22C0                       		move.l	d0,(a1)+
00003BCC 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003BD0                            
00003BD0 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003BD6 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003BDC 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003BE2 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003BE8 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003BEE 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003BF4 4EB9 0000 0000             		jsr	ObjectsLoad
00003BFA 6100 0000                  		bsr.w	DeformBgLayer
00003BFE 4EB9 0000 0000             		jsr	BuildSprites
00003C04 7000                       		moveq	#0,d0
00003C06 6100 E290                  		bsr.w	LoadPLC2
00003C0A 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003C10 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003C16 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003C1A 0000 0040                  		ori.b	#$40,d0
00003C1E 33C0 00C0 0004             		move.w	d0,($C00004).l
00003C24 6100 EA3C                  		bsr.w	Pal_FadeTo
00003C28                            
00003C28                            loc_317C:
00003C28 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003C2E 6100 F7C2                  		bsr.w	DelayProgram
00003C32 4EB9 0000 0000             		jsr	ObjectsLoad
00003C38 6100 0000                  		bsr.w	DeformBgLayer
00003C3C 4EB9 0000 0000             		jsr	BuildSprites
00003C42 6100 E608                  		bsr.w	PalCycle_Title
00003C46 6100 E28A                  		bsr.w	RunPLC_RAM
00003C4A 3038 D008                  		move.w	($FFFFD008).w,d0
00003C4E 5440                       		addq.w	#2,d0
00003C50 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003C54 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003C58 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003C5A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003C60 4E75                       		rts	
00003C62                            ; ===========================================================================
00003C62                            
00003C62                            Title_ChkRegion:
00003C62 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003C66 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003C68 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003C6E 6000                       		bra.s	Title_EnterCheat
00003C70                            ; ===========================================================================
00003C70                            
00003C70                            Title_RegionJ:				; XREF: Title_ChkRegion
00003C70 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003C76                            
00003C76                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003C76 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003C7A D0C0                       		adda.w	d0,a0
00003C7C 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003C80 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003C84 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003C86 6600                       		bne.s	loc_3210	; if not, branch
00003C88 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003C8C 4A00                       		tst.b	d0
00003C8E 6600                       		bne.s	Title_CountC
00003C90 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003C94 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003C98 E249                       		lsr.w	#1,d1
00003C9A 0241 0003                  		andi.w	#3,d1
00003C9E 6700                       		beq.s	Title_PlayRing
00003CA0 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003CA4 6A00                       		bpl.s	Title_PlayRing
00003CA6 7201                       		moveq	#1,d1
00003CA8 1181 1001                  		move.b	d1,1(a0,d1.w)
00003CAC                            
00003CAC                            Title_PlayRing:
00003CAC 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003CB2 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003CB6 6100 DFCA                  		bsr.w	PlaySound_Special
00003CBA 6000                       		bra.s	Title_CountC
00003CBC                            ; ===========================================================================
00003CBC                            
00003CBC                            loc_3210:				; XREF: Title_EnterCheat
00003CBC 4A00                       		tst.b	d0
00003CBE 6700                       		beq.s	Title_CountC
00003CC0 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003CC6 6700                       		beq.s	Title_CountC
00003CC8 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003CCE                            
00003CCE                            Title_CountC:
00003CCE 1038 F605                  		move.b	($FFFFF605).w,d0
00003CD2 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003CD6 6700                       		beq.s	loc_3230	; if not, branch
00003CD8 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003CDC                            
00003CDC                            loc_3230:
00003CDC 4A78 F614                  		tst.w	($FFFFF614).w
00003CE0 6700 0000                  		beq.w	Demo
00003CE4                            		; (temporary until we have an actual options screen)
00003CE4 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
00003CEA 6700                       		beq.s	@notc
00003CEC                            
00003CEC 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
00003CF0 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
00003CF6 6D00                       		blt.s	@notoverflow
00003CF8 11FC 0000 FFE8             		move.b	#0,(v_character).w
00003CFE                            	@notoverflow:
00003CFE 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003D02 6100 DF7E                  		bsr.w	PlaySound_Special
00003D06                            	@notc:
00003D06 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003D0C 6700 FF1A                  		beq.w	loc_317C	; if not, branch
00003D10                            
00003D10                            Title_ChkLevSel:
00003D10 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003D16 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003D1A                            		
00003D1A                            		
00003D1A 7002                       		moveq	#2,d0
00003D1C 6100 ECB4                  		bsr.w	PalLoad2	; load level select pallet
00003D20 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003D24 7000                       		moveq	#0,d0
00003D26 323C 00DF                  		move.w	#$DF,d1
00003D2A                            
00003D2A                            Title_ClrScroll:
00003D2A 22C0                       		move.l	d0,(a1)+
00003D2C 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003D30                            
00003D30 21C0 F616                  		move.l	d0,($FFFFF616).w
00003D34 46FC 2700                  		move	#$2700,sr
00003D38 4DF9 00C0 0000             		lea	($C00000).l,a6
00003D3E 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003D48 323C 03FF                  		move.w	#$3FF,d1
00003D4C                            
00003D4C                            Title_ClrVram:
00003D4C 2C80                       		move.l	d0,(a6)
00003D4E 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003D52                            
00003D52 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003D56 6700 0000                  		beq.w	GotoOptions	; if not, play level
00003D5A                            
00003D5A 6100 0000                  		bsr.w	LevSelTextLoad
00003D5E                            		
00003D5E                            		; sound test fix
00003D5E 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003D62 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
00003D68                            		
00003D68 363C C65F                  		move.w	#$C680-$21,d3 ; selected
00003D6C 0C46 0014                  		cmpi.w	#$14,d6
00003D70 6700                       		beq.s	@issndtst
00003D72 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
00003D76                            	@issndtst:
00003D76 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
00003D7A 31C6 FF82                  		move.w	d6,($FFFFFF82).w
00003D7E                            		
00003D7E 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003D82 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003D8A                            		
00003D8A 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003D90 6700                       		beq.s	@issndtst2
00003D92                            		
00003D92 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
00003D98 6100 0000                  		bsr.w	CStringSlop
00003D9C 6000                       		bra.s	LevelSelect
00003D9E                            	@issndtst2:
00003D9E 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003DA4 6100 0000                  		bsr.w	CStringSlop
00003DA8                            		
00003DA8                            ; ---------------------------------------------------------------------------
00003DA8                            ; Level	Select
00003DA8                            ; ---------------------------------------------------------------------------
00003DA8                            LevelSelect:
00003DA8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003DAE 6100 F642                  		bsr.w	DelayProgram
00003DB2 6100 0000                  		bsr.w	LevSelControls
00003DB6 6100 E11A                  		bsr.w	RunPLC_RAM
00003DBA 4AB8 F680                  		tst.l	($FFFFF680).w
00003DBE 66E8                       		bne.s	LevelSelect
00003DC0 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003DC6 67E0                       		beq.s	LevelSelect	; if not, branch
00003DC8 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003DCC 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
00003DD0 6600                       		bne.s	@dont	; if not, dont blow this place up
00003DD2                            			
00003DD2 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
00003DD8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003DDE 6100 F612                  		bsr.w	DelayProgram
00003DE2                            	@dont:
00003DE2 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
00003DE6 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003DE8                            		
00003DE8 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
00003DEE 67B8                       		beq.s	LevelSelect	; if not, branch
00003DF0                            		
00003DF0 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
00003DF6 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
00003DF8                            		
00003DF8 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003DFC 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003E00                            		
00003E00 4EB9 0000 0000             		jsr		ShowNow_Playing
00003E06 60A0                       		bra.s	LevelSelect
00003E08                            ; ===========================================================================
00003E08                            
00003E08                            LevSel_SEGA:				; XREF: LevelSelect
00003E08 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
00003E0E 4E75                       		rts	
00003E10                            ; ===========================================================================
00003E10                            
00003E10                            LevSel_Ending:				; XREF: LevelSelect
00003E10 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003E16 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003E1C 4E75                       		rts	
00003E1E                            ; ===========================================================================
00003E1E                            
00003E1E                            LevSel_Credits:				; XREF: LevelSelect
00003E1E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003E24 103C 0091                  		move.b	#$91,d0
00003E28 6100 DE58                  		bsr.w	PlaySound_Special ; play credits music
00003E2C 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003E32 4E75                       		rts	
00003E34                            ; ===========================================================================
00003E34                            
00003E34                            LevSel_Level_SS:			; XREF: LevelSelect
00003E34 D040                       		add.w	d0,d0
00003E36 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003E3A 6B00 FF6C                  		bmi.w	LevelSelect
00003E3E 0C40 FFFF                  		cmpi.w	#$FFFF,d0	; check	if level is 0700 (Special Stage)
00003E42 6600                       		bne.s	LevSel_Level	; if not, branch
00003E44 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003E4A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003E4E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003E54 7000                       		moveq	#0,d0
00003E56 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E5A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E5E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003E62 4E75                       		rts	
00003E64                            ; ===========================================================================
00003E64                            
00003E64                            LevSel_Level:				; XREF: LevSel_Level_SS
00003E64 0240 3FFF                  		andi.w	#$3FFF,d0
00003E68 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003E6C                            
00003E6C                            PlayLevel:				; XREF: ROM:00003246j ...
00003E6C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003E72 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003E78 7000                       		moveq	#0,d0
00003E7A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E7E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E82 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003E86 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003E8A 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003E8E 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003E92 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003E96 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003E9A 103C 00E0                  		move.b	#$E0,d0
00003E9E 6100 DDE2                  		bsr.w	PlaySound_Special ; fade out music
00003EA2 4E75                       		rts	
00003EA4                            ; ===========================================================================
00003EA4                            ; ---------------------------------------------------------------------------
00003EA4                            ; Level	select - level pointers
00003EA4                            ; ---------------------------------------------------------------------------
00003EA4                            LSelectPointers:
00003EA4 0000                       		dc.w $0000 ; crz
00003EA6 0001                       		dc.w $0001
00003EA8 0002                       		dc.w $0002
00003EAA 0100                       		dc.w $0100 ; ilfez
00003EAC 0101                       		dc.w $0101
00003EAE 0102                       		dc.w $0102
00003EB0 0200                       		dc.w $0200 ; mz
00003EB2 0201                       		dc.w $0201
00003EB4 0202                       		dc.w $0202
00003EB6 0300                       		dc.w $0300 ; dgrotz
00003EB8 0301                       		dc.w $0301 
00003EBA 0302                       		dc.w $0302 
00003EBC 0700                       		dc.w $0700 ; the other mz...
00003EBE 0701                       		dc.w $0701 
00003EC0 0702                       		dc.w $0702 
00003EC2 0400                       		dc.w $0400 ; tpfbz
00003EC4 0401                       		dc.w $0401
00003EC6 0402                       		dc.w $0402
00003EC8 0500                       		dc.w $0500 ; zzzzz
00003ECA 0501                       		dc.w $0501 
00003ECC 0103                       		dc.w $0103 
00003ECE 0502                       		dc.w $0502 ; fz
00003ED0 FFFF                       		dc.w $FFFF ; special
00003ED2 8000                       		dc.w $8000 ; sound test
00003ED4                            		even
00003ED4                            ; --------------------------------------
00003ED4                            ; ---------------------------------------------------------------------------
00003ED4                            ; Level	select codes
00003ED4                            ; ---------------------------------------------------------------------------
00003ED4                            LevelSelectCode_J:
00003ED4                            		incbin	misc\ls_jcode.bin
00003EDA                            		even
00003EDA                            
00003EDA                            LevelSelectCode_US:
00003EDA                            		incbin	misc\ls_ucode.bin
00003EE0                            		even
00003EE0                            ; ===========================================================================
00003EE0                            
00003EE0                            ; ---------------------------------------------------------------------------
00003EE0                            ; Demo mode
00003EE0                            ; ---------------------------------------------------------------------------
00003EE0                            
00003EE0                            Demo:					; XREF: TitleScreen
00003EE0 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003EE6                            
00003EE6                            loc_33B6:				; XREF: loc_33E4
00003EE6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003EEC 6100 F504                  		bsr.w	DelayProgram
00003EF0 6100 0000                  		bsr.w	DeformBgLayer
00003EF4 6100 E32C                  		bsr.w	PalCycle_Load
00003EF8 6100 DFD8                  		bsr.w	RunPLC_RAM
00003EFC 3038 D008                  		move.w	($FFFFD008).w,d0
00003F00 5440                       		addq.w	#2,d0
00003F02 31C0 D008                  		move.w	d0,($FFFFD008).w
00003F06 0C40 1C00                  		cmpi.w	#$1C00,d0
00003F0A 6500                       		bcs.s	loc_33E4
00003F0C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003F12 4E75                       		rts	
00003F14                            ; ===========================================================================
00003F14                            
00003F14                            loc_33E4:				; XREF: Demo
00003F14 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003F1A 6600 FDF4                  		bne.w	Title_ChkLevSel	; if yes, branch
00003F1E 4A78 F614                  		tst.w	($FFFFF614).w
00003F22 6600 FFC2                  		bne.w	loc_33B6
00003F26 103C 00E0                  		move.b	#$E0,d0
00003F2A 6100 DD56                  		bsr.w	PlaySound_Special ; fade out music
00003F2E 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003F32 0240 0007                  		andi.w	#7,d0
00003F36 D040                       		add.w	d0,d0
00003F38 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003F3C 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003F40 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003F44 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003F4A 6500                       		bcs.s	loc_3422	; if yes, branch
00003F4C 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003F52                            
00003F52                            loc_3422:
00003F52 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003F58 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003F5E 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003F62 6600                       		bne.s	Demo_Level	; if not, branch
00003F64 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003F6A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003F6E 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003F72                            
00003F72                            Demo_Level:
00003F72 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003F78 7000                       		moveq	#0,d0
00003F7A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003F7E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003F82 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003F86 4E75                       		rts	
00003F88                            ; ===========================================================================
00003F88                            ; ---------------------------------------------------------------------------
00003F88                            ; Levels used in demos
00003F88                            ; ---------------------------------------------------------------------------
00003F88                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003F90                            		even
00003F90                            
00003F90                            ; ---------------------------------------------------------------------------
00003F90                            ; Subroutine to	change what you're selecting in the level select
00003F90                            ; ---------------------------------------------------------------------------
00003F90                            
00003F90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F90                            
00003F90                            
00003F90                            LevSelControls:				; XREF: LevelSelect
00003F90 1238 F605                  		move.b	($FFFFF605).w,d1
00003F94 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003F98 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003F9A 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003F9E 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
00003FA2                            
00003FA2                            LevSel_UpDown:
00003FA2 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003FA8 1238 F604                  		move.b	($FFFFF604).w,d1
00003FAC 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003FB0 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
00003FB4 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003FB8 0801 0000                  		btst	#0,d1		; is up	pressed?
00003FBC 6700                       		beq.s	LevSel_Down	; if not, branch
00003FBE 5346                       		subq.w	#1,d6		; move up 1 selection
00003FC0 6400                       		bcc.s	LevSel_Down
00003FC2 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003FC4                            
00003FC4                            LevSel_Down:
00003FC4 0801 0001                  		btst	#1,d1		; is down pressed?
00003FC8 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003FCA 5246                       		addq.w	#1,d6		; move down 1 selection
00003FCC 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003FD0 6500                       		bcs.s	LevSel_Refresh
00003FD2 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003FD4 6000                       		bra.s	LevSel_Refresh
00003FD6                            		
00003FD6                            LevSel_LR:
00003FD6 0801 0002                  		btst	#2,d1		; is left pressed?
00003FDA 6700                       		beq.s	LevSel_Right	; if not, branch
00003FDC 0446 0000                  		sub.w	#lsrow2size,d6
00003FE0 64E2                       		bcc.s	LevSel_Down
00003FE2 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
00003FE6                            LevSel_Right:
00003FE6 0801 0003                  		btst	#3,d1		; is right pressed?
00003FEA 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003FEC 0646 0000                  		add.w	#lsrow1size,d6
00003FF0 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003FF4 6500                       		bcs.s	LevSel_Refresh
00003FF6 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003FFA                            ; ===========================================================================
00003FFA                            LevSel_Refresh:
00003FFA                            		
00003FFA 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003FFE 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00004002                            		
00004002 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00004008 6600                       		bne.s	@exitsndtest
0000400A                            		
0000400A 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
0000400E 43F9 0000 0000             		lea	(Controls_Normal).l,a1
00004014 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000401C 6100 0000                  		bsr.w	CStringSlop
00004020                            	@exitsndtest:
00004020                            	
00004020 363C C65F                  		move.w	#$C680-$21,d3
00004024 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00004028 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000402C                            		
0000402C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
00004032 6600                       		bne.s	@entersndtest
00004034                            		
00004034 363C C65F                  		move.w	#$C680-$21,d3
00004038 43F9 0000 0000             		lea	(Controls_SND).l,a1
0000403E 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00004046 6100 0000                  		bsr.w	CStringSlop
0000404A                            	@entersndtest:
0000404A 4E75                       		rts	
0000404C                            		
0000404C                            LevSel_SndTest:				; XREF: LevSelControls
0000404C 1238 F605                  		move.b	($FFFFF605).w,d1
00004050 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
00004054 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004056 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
0000405C 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
00004060                            		
00004060 1038 FF84                  		move.b	($FFFFFF84).w,d0
00004064 0801 0002                  		btst	#2,d1		; is left pressed?
00004068 6700                       		beq.s	SndTest_Right	; if not, branch
0000406A 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
0000406C                            		; no need the fact it's a byte does the trick
0000406C                            
0000406C                            SndTest_Right:
0000406C 0801 0003                  		btst	#3,d1		; is right pressed?
00004070 6700                       		beq.s	SndTest_A	; if not, branch
00004072 5200                       		addq.b	#1,d0		; add 1	to sound test
00004074                            		; same here
00004074                            		
00004074                            SndTest_A:
00004074 0801 0006                  		btst	#6,d1		; is A pressed?
00004078 6700                       		beq.s	SndTest_B	; if not, branch
0000407A 5100                       		subq.b	#8,d0		; subtract $10 to sound test
0000407C 5100                       		subq.b	#8,d0
0000407E                            		
0000407E                            SndTest_B:
0000407E 0801 0004                  		btst	#4,d1		; is B pressed?
00004082 6700                       		beq.s	SndTest_Refresh	; if not, branch
00004084 5000                       		addq.b	#8,d0		; add $10 to sound test
00004086 5000                       		addq.b	#8,d0
00004088                            
00004088                            SndTest_Refresh:
00004088 363C C65F                  		move.w	#$C680-$21,d3
0000408C 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
00004090 6000 0000                  		bra.w	LevSelSndTest	; refresh text
00004094                            
00004094                            LevSel_NoMove:
00004094 4E75                       		rts	
00004096                            ; End of function LevSelControls
00004096                            
00004096                            ; ---------------------------------------------------------------------------
00004096                            ; Subroutine to load level select text
00004096                            ; ---------------------------------------------------------------------------
00004096                            
00004096                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004096                            
00004096                            LevSelTextLoad_loop:
00004096 2D44 0004                  		move.l	d4,4(a6)
0000409A 6100 0000                  		bsr.w	LevSel_ChgLine
0000409E 0684 0080 0000             		addi.l	#$800000,d4
000040A4 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000040A8 4E75                       		rts
000040AA                            LevSelTextLoad:				; XREF: TitleScreen
000040AA 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000040B0 4DF9 00C0 0000             		lea	($C00000).l,a6
000040B6 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000040BA 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000040C0                            		
000040C0 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000040C4 61D0                       		bsr.s	LevSelTextLoad_loop
000040C6                            		
000040C6                            		
000040C6 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
000040CC 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
000040D0 61C4                       		bsr.s	LevSelTextLoad_loop
000040D2 363C C65F                  		move.w	#$C680-$21,d3
000040D6                            		
000040D6                            LevSelHighlightCode:
000040D6 4DF9 00C0 0000             		lea	($C00000).l,a6
000040DC 7000                       		moveq	#0,d0
000040DE 3038 FF82                  		move.w	($FFFFFF82).w,d0
000040E2 3200                       		move.w	d0,d1
000040E4 283C 6086 0003             		move.l	#lsscrpos,d4
000040EA                            		
000040EA 0C40 0000                  		cmpi.w	#lsrow1size,d0
000040EE 6D00                       		blt.s	@notsecond
000040F0                            		
000040F0 0440 0000                  		sub.w	#lsrow1size,d0
000040F4 0684 0024 0000             		addi.l	#lsoff,d4
000040FA                            	@notsecond:
000040FA EF48                       		lsl.w	#7,d0
000040FC 4840                       		swap	d0
000040FE D880                       		add.l	d0,d4
00004100 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004106 E749                       		lsl.w	#3,d1
00004108 D241                       		add.w	d1,d1
0000410A D2C1                       		adda.w	d1,a1
0000410C 2D44 0004                  		move.l	d4,4(a6)
00004110 6100 0000                  		bsr.w	LevSel_ChgLine
00004114 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
0000411A 6700                       		beq.s	LevSelSndTest
0000411C 4E75                       		rts
0000411E                            
0000411E                            LevSelSndTest:
0000411E 0643 0030                  		add.w	#$30,d3
00004122 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
0000412C 1038 FF84                  		move.b	($FFFFFF84).w,d0
00004130 1400                       		move.b	d0,d2
00004132 E808                       		lsr.b	#4,d0
00004134 6100 0000                  		bsr.w	LevSel_ChgSnd
00004138 1002                       		move.b	d2,d0
0000413A 6100 0000                  		bsr.w	LevSel_ChgSnd
0000413E 4E75                       		rts	
00004140                            ; End of function LevSelTextLoad
00004140                            
00004140                            
00004140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004140                            
00004140                            
00004140                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00004140 0240 000F                  		andi.w	#$F,d0
00004144 0C00 000A                  		cmpi.b	#$A,d0
00004148 6500                       		bcs.s	loc_3580
0000414A 5E00                       		addi.b	#7,d0
0000414C                            
0000414C                            loc_3580:
0000414C D043                       		add.w	d3,d0
0000414E 3C80                       		move.w	d0,(a6)
00004150 4E75                       		rts	
00004152                            ; End of function LevSel_ChgSnd
00004152                            
00004152                            
00004152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004152                            
00004152                            
00004152                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00004152 740F                       		moveq	#$10-1,d2		; number of characters per line
00004154                            
00004154                            @loop:
00004154 7000                       		moveq	#0,d0
00004156 1019                       		move.b	(a1)+,d0
00004158 0C00 0020                  		cmpi.b	#$20,d0
0000415C 6E00                       		bgt.s	@draw
0000415E 3CBC 0000                  		move.w	#0,(a6)
00004162 51CA FFF0                  		dbf	d2,@loop
00004166 4E75                       		rts	
00004168                            ; ===========================================================================
00004168                            
00004168                            @draw:				; XREF: LevSel_ChgLine
00004168 D043                       		add.w	d3,d0
0000416A 3C80                       		move.w	d0,(a6)
0000416C 51CA FFE6                  		dbf	d2,@loop
00004170 4E75                       		rts	
00004172                            ; End of function LevSel_ChgLine
00004172                            		
00004172                            CStringSlop_draw:
00004172 D043                       		add.w	d3,d0
00004174 3C80                       		move.w	d0,(a6)
00004176                            CStringSlop:				; XREF: LevSelTextLoad
00004176 7000                       		moveq	#0,d0
00004178 1019                       		move.b	(a1)+,d0
0000417A 0C00 0020                  		cmpi.b	#$20,d0
0000417E 6EF2                       		bgt.s	CStringSlop_draw
00004180                            		
00004180 0C00 0001                  		cmpi.b	#1,d0
00004184 6700                       		beq.s	@InsertSpaces
00004186 6500                       		blo.s	@end
00004188                            		
00004188 3CBC 0000                  		move.w	#0,(a6)
0000418C 60E8                       		bra.s	CStringSlop
0000418E                            	@end:
0000418E 4E75                       		rts
00004190                            	@InsertSpaces:
00004190 7000                       		moveq	#0,d0
00004192 1019                       		move.b	(a1)+,d0
00004194                            		
00004194                            	@insert:
00004194 3CBC 0000                  		move.w	#0,(a6)
00004198 51C8 FFFA                  		dbf.w	d0,@insert
0000419C 60D8                       		bra.s	CStringSlop
0000419E                            ; End of function LevSel_ChgLine
0000419E                            
0000419E                            ; ===========================================================================
0000419E                            ; ---------------------------------------------------------------------------
0000419E                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
0000419E                            ; ---------------------------------------------------------------------------
0000419E                            LevelMenuText:	
0000419E 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
000041AE 2020 2020 2020 2020 2020+          dc.b    "               2"
000041BE 2020 2020 2020 2020 2020+          dc.b    "               3"
000041CE 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
000041DE 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
000041EE 2020 2020 2020 2020 2020+          dc.b    "               3"
000041FE 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
0000420E 2020 2020 2020 2020 2020+          dc.b    "               2"
0000421E 2020 2020 2020 2020 2020+          dc.b    "               3"
0000422E 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
0000423E 2020 2020 2020 2020 2020+          dc.b    "               2"
0000424E 2020 2020 2020 2020 2020+          dc.b    "               3"
0000425E 4D41 4B4F 544F 2020 2020+          dc.b    "MAKOTO         1"
0000426E 2020 2020 2020 2020 2020+          dc.b    "               2"
0000427E 2020 2020 2020 2020 2020+          dc.b    "               3"
0000428E                            LMTSecondRow:
0000428E 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
0000429E 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
000042AE 2020 2020 2020 2020 2020+          dc.b    "               3"
000042BE 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
000042CE 2020 2020 2020 2020 2020+          dc.b    "               2"
000042DE 2020 2020 2020 2020 2020+          dc.b    "               3"
000042EE 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
000042FE 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
0000430E 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
0000431E 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
0000432E 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
0000433E                            LMTSelectableEnd:
0000433E 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
0000434E                            LMTEnd:
0000434E                            
0000434E                            Now_Playing:
0000434E 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
0000435E                            		even
0000435E                            NP_Track:
0000435E 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00004366                            		even
00004366                            NP_SFX:
00004366 534F 554E 4420 2400        		dc.b	"SOUND $",0
0000436E                            		even
0000436E                            
0000436E                            ShowNow_Playing:
0000436E 1C00                       		move.b	d0,d6
00004370 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00004374 43FA FFD8                  		lea	Now_Playing(pc),a1
00004378 4DF9 00C0 0000             		lea		($C00000).l,a6
0000437E 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00004386 6100 FDEE                  		bsr.w	CStringSlop
0000438A                            		
0000438A 43FA FFD2                  		lea	NP_Track(pc),a1
0000438E 0C06 00A0                  		cmpi.b	#$A0,d6
00004392 6D00                       		blt.s	@track
00004394                            		
00004394 43FA FFD0                  		lea	NP_SFX(pc),a1
00004398                            	@track:
00004398 6100 FDDC                  		bsr.w	CStringSlop
0000439C                            		
0000439C 0643 0030                  		add.w	#$30,d3
000043A0 1006                       		move.b	d6,d0
000043A2 1400                       		move.b	d0,d2
000043A4 E808                       		lsr.b	#4,d0
000043A6 6100 FD98                  		bsr.w	LevSel_ChgSnd
000043AA 1002                       		move.b	d2,d0
000043AC 6100 FD92                  		bsr.w	LevSel_ChgSnd
000043B0 4E75                       		rts	
000043B2                            
000043B2                            ; 1 is insert spaces btw
000043B2                            Controls_Normal:
000043B2 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
000043BE                            		even		
000043BE                            Controls_SND:
000043BE 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
000043E4 00                         		even
000043E4                            		
000043E4                            OptionMenuText:	
000043E4 504C 4159 2054 4845 2047+  		dc.b    "PLAY THE GAME!!!"
000043F4 4348 4152 4143 5445 5220+          dc.b    "CHARACTER       "
00004404                            OMTEnd:
00004404                            		
00004404                            ; ---------------------------------------------------------------------------
00004404                            ; Level	Select
00004404                            ; ---------------------------------------------------------------------------
00004404                            GotoOptions:
00004404 43F9 0000 43E4             		lea	(OptionMenuText).l,a1
0000440A 4DF9 00C0 0000             		lea	($C00000).l,a6
00004410 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00004414 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
0000441A                            		
0000441A 323C 0000                  		move.w	#optamm-1,d1		; number of lines of text (first row)
0000441E 6100 FC76                  		bsr.w	LevSelTextLoad_loop
00004422                            
00004422                            OptionsMenu:
00004422 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00004428 6100 EFC8                  		bsr.w	DelayProgram
0000442C 6100 0000                  		bsr.w	OptControls
00004430 6100 DAA0                  		bsr.w	RunPLC_RAM
00004434 4AB8 F680                  		tst.l	($FFFFF680).w
00004438 66E8                       		bne.s	OptionsMenu
0000443A 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00004440 67E0                       		beq.s	OptionsMenu	; if not, branch
00004442 4E71                       		nop
00004444 60DC                       		bra.s	OptionsMenu
00004446                            		
00004446                            OptReturn:
00004446 4E75                       		rts
00004448                            OptControls:				; XREF: LevelSelect
00004448 1238 F605                  		move.b	($FFFFF605).w,d1
0000444C 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00004450 6600                       		bne.s	Opt_UpDown	; if yes, branch
00004452 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00004456 6AEE                       		bpl.s	OptReturn	; if time remains, branch
00004458                            Opt_UpDown:
00004458 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
0000445E 1238 F604                  		move.b	($FFFFF604).w,d1
00004462 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00004466 0801 0000                  		btst	#0,d1		; is up	pressed?
0000446A 6700                       		beq.s	Opt_Down	; if not, branch
0000446C 5346                       		subq.w	#1,d6		; move up 1 selection
0000446E 6400                       		bcc.s	Opt_Down
00004470 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00004472                            
00004472                            Opt_Down:
00004472 0801 0001                  		btst	#1,d1		; is down pressed?
00004476 6700                       		beq.s	Opt_Refresh	; if not, branch
00004478 5246                       		addq.w	#1,d6		; move down 1 selection
0000447A 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000447E 6500                       		bcs.s	Opt_Refresh
00004480 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00004482                            Opt_Refresh:
00004482                            		
00004482                            ; ---------------------------------------------------------------------------
00004482                            ; Music	playlist
00004482                            ; ---------------------------------------------------------------------------
00004482                            MusicList1:	incbin	misc\muslist1.bin
0000448A                            		even
0000448A                            MusicList2:	incbin	misc\muslist2.bin
00004492                            		even
00004492                            MusicList3:	incbin	misc\muslist3.bin
0000449A                            		even
0000449A                            MusicList4:	incbin	misc\muslist4.bin
000044A2                            		even
000044A2                            ; ===========================================================================
000044A2                            
000044A2                            ; ---------------------------------------------------------------------------
000044A2                            ; Level
000044A2                            ; ---------------------------------------------------------------------------
000044A2                            
000044A2                            Level:					; XREF: GameModeArray
000044A2 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
000044A8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044AC 6B00                       		bmi.s	loc_37B6
000044AE 103C 00E0                  		move.b	#$E0,d0
000044B2 6100 D7CE                  		bsr.w	PlaySound_Special ; fade out music
000044B6                            
000044B6                            loc_37B6:
000044B6 6100 DA0C                  		bsr.w	ClearPLC
000044BA 6100 E250                  		bsr.w	Pal_FadeFrom
000044BE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044C2 6B00                       		bmi.s	Level_ClrRam
000044C4 46FC 2700                  		move	#$2700,sr
000044C8 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000044D2 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000044D8 6100 D84C                  		bsr.w	NemDec
000044DC 46FC 2300                  		move	#$2300,sr
000044E0 7000                       		moveq	#0,d0
000044E2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000044E6 E948                       		lsl.w	#4,d0
000044E8 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000044EE 45F2 0000                  		lea	(a2,d0.w),a2
000044F2 7000                       		moveq	#0,d0
000044F4 1012                       		move.b	(a2),d0
000044F6 6700                       		beq.s	loc_37FC
000044F8 6100 D96C                  		bsr.w	LoadPLC		; load level patterns
000044FC                            
000044FC                            loc_37FC:
000044FC 7001                       		moveq	#1,d0
000044FE 6100 D966                  		bsr.w	LoadPLC		; load standard	patterns
00004502                            
00004502                            Level_ClrRam:
00004502 43F8 D000                  		lea	($FFFFD000).w,a1
00004506 7000                       		moveq	#0,d0
00004508 323C 07FF                  		move.w	#$7FF,d1
0000450C                            
0000450C                            Level_ClrObjRam:
0000450C 22C0                       		move.l	d0,(a1)+
0000450E 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004512                            
00004512 43F8 F628                  		lea	($FFFFF628).w,a1
00004516 7000                       		moveq	#0,d0
00004518 323C 0015                  		move.w	#$15,d1
0000451C                            
0000451C                            Level_ClrVars:
0000451C 22C0                       		move.l	d0,(a1)+
0000451E 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00004522                            
00004522 43F8 F700                  		lea	($FFFFF700).w,a1
00004526 7000                       		moveq	#0,d0
00004528 323C 003F                  		move.w	#$3F,d1
0000452C                            
0000452C                            Level_ClrVars2:
0000452C 22C0                       		move.l	d0,(a1)+
0000452E 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004532                            
00004532 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004536 7000                       		moveq	#0,d0
00004538 323C 0047                  		move.w	#$47,d1
0000453C                            
0000453C                            Level_ClrVars3:
0000453C 22C0                       		move.l	d0,(a1)+
0000453E 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004542                            
00004542 46FC 2700                  		move	#$2700,sr
00004546 6100 D660                  		bsr.w	ClearScreen
0000454A 4DF9 00C0 0004             		lea	($C00004).l,a6
00004550 3CBC 8B03                  		move.w	#$8B03,(a6)
00004554 3CBC 8230                  		move.w	#$8230,(a6)
00004558 3CBC 8407                  		move.w	#$8407,(a6)
0000455C 3CBC 857C                  		move.w	#$857C,(a6)
00004560 3CBC 9001                  		move.w	#$9001,(a6)
00004564 3CBC 8004                  		move.w	#$8004,(a6)
00004568 3CBC 8720                  		move.w	#$8720,(a6)
0000456C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00004572 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00004576 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000457C 6600                       		bne.s	Level_LoadPal	; if not, branch
0000457E 3CBC 8014                  		move.w	#$8014,(a6)
00004582 7000                       		moveq	#0,d0
00004584 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004588 D040                       		add.w	d0,d0
0000458A 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00004590 3031 0000                  		move.w	(a1,d0.w),d0
00004594 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00004598 31C0 F648                  		move.w	d0,($FFFFF648).w
0000459C 31C0 F64A                  		move.w	d0,($FFFFF64A).w
000045A0 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
000045A4 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
000045A8 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000045AE 6000 0000                  		bra.w	Level_LoadPal
000045B2                            Player_Palette:
000045B2                            		; normal, lz, sbz, blank
000045B2 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
000045BA                            		
000045BA 0016 0017 0018 0000        		dc.w	22,23,24,0 ; Pal_Gronic 
000045C2 0019 0017 0018 0000        		dc.w	25,23,24,0 ; Pal_Anakama 
000045CA 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
000045D2                            
000045D2                            		; add more player palettes
000045D2                            Level_LoadPal:
000045D2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000045D8 46FC 2300                  		move	#$2300,sr
000045DC                            
000045DC 7200                       		moveq	#0,d1
000045DE 1238 FFE8                  		move.b	(v_character),d1
000045E2 D241                       		add.w	d1,d1
000045E4 D241                       		add.w	d1,d1
000045E6 D241                       		add.w	d1,d1
000045E8 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
000045EC                            		
000045EC 6100 E3E4                  		bsr.w	PalLoad2	; load Sonic's pallet line
000045F0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000045F6 6600                       		bne.s	Level_GetBgm	; if not, branch
000045F8 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
000045FC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00004602 6600                       		bne.s	Level_WaterPal	; if not, branch
00004604 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00004608                            
00004608                            Level_WaterPal:
00004608 6100 E3E0                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
0000460C 4A38 FE30                  		tst.b	($FFFFFE30).w
00004610 6700                       		beq.s	Level_GetBgm
00004612 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00004618                            
00004618                            ; NineKode begins here - How to play different songs on different acts
00004618                             
00004618                            Level_GetBgm:
00004618 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000461C 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00004620 7000                       		moveq	#0,d0
00004622 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004626                             
00004626 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0000462C 6600                       		bne.s	Level_GetBgm2	; if not, branch
0000462E 43F9 0000 4482             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00004634 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004636                             
00004636                            Level_GetBgm2:
00004636 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0000463C 6600                       		bne.s	Level_GetBgm3	; if not, branch
0000463E 43F9 0000 448A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00004644 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004646                             
00004646                            Level_GetBgm3:
00004646 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0000464C 6600                       		bne.s	Level_GetBgm4	; if not, branch
0000464E 43F9 0000 4492             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00004654 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004656                             
00004656                            Level_GetBgm4:
00004656 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0000465C 6600                       		bne.s	Level_PlayBgm	; if not, branch
0000465E 43F9 0000 449A             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00004664                             
00004664                            Level_PlayBgm:
00004664 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00004668 6100 D612                  		bsr.w	PlaySound	; play music
0000466C 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00004672                             
00004672                            ; NineKode ends here
00004672                            
00004672                            Level_TtlCard:
00004672 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004678 6100 ED78                  		bsr.w	DelayProgram
0000467C 4EB9 0000 0000             		jsr	ObjectsLoad
00004682 4EB9 0000 0000             		jsr	BuildSprites
00004688 6100 D848                  		bsr.w	RunPLC_RAM
0000468C 3038 D108                  		move.w	($FFFFD108).w,d0
00004690 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00004694 66DC                       		bne.s	Level_TtlCard	; if not, branch
00004696 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
0000469A 66D6                       		bne.s	Level_TtlCard	; if yes, branch
0000469C 4EB9 0000 0000             		jsr	Hud_Base
000046A2                            
000046A2                            loc_3946:
000046A2 7003                       		moveq	#3,d0
000046A4 6100 E310                  		bsr.w	PalLoad1	; load Sonic's pallet line
000046A8 6100 0000                  		bsr.w	LevelSizeLoad
000046AC 6100 0000                  		bsr.w	DeformBgLayer
000046B0 08F8 0002 F754             		bset	#2,($FFFFF754).w
000046B6 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
000046BA 6100 0000                  		bsr.w	LoadTilesFromStart
000046BE 4EB9 0000 0000             		jsr	FloorLog_Unk
000046C4 6100 0000                  		bsr.w	ColIndexLoad
000046C8 6100 0000                  		bsr.w	LZWaterEffects
000046CC 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000046D2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000046D6 6B00                       		bmi.s	Level_ChkDebug
000046D8 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000046DE                            
000046DE                            Level_ChkDebug:
000046DE 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000046E2 6700                       		beq.s	Level_ChkWater	; if not, branch
000046E4 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000046EA 6700                       		beq.s	Level_ChkWater	; if not, branch
000046EC 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000046F2                            
000046F2                            Level_ChkWater:
000046F2 31FC 0000 F602             		move.w	#0,($FFFFF602).w
000046F8 31FC 0000 F604             		move.w	#0,($FFFFF604).w
000046FE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004704 6600                       		bne.s	Level_LoadObj	; if not, branch
00004706 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
0000470C 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00004712 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00004718 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
0000471E                            
0000471E                            Level_LoadObj:
0000471E 4EB9 0000 0000             		jsr	ObjPosLoad
00004724 4EB9 0000 0000             		jsr	ObjectsLoad
0000472A 4EB9 0000 0000             		jsr	BuildSprites
00004730 7000                       		moveq	#0,d0
00004732 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00004736 6600                       		bne.s	loc_39E8	; if yes, branch
00004738 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000473C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004740 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00004744                            
00004744                            loc_39E8:
00004744 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00004748 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
0000474C 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00004750 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00004754                            		; move.b	d0,($FFFFFE2F).w
00004754 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
0000475A 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000475E 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00004762 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00004766 11C0 FFF9                  		move.b	d0,($FFFFFFF9).w	; GMZ: Clear truth nuke flag
0000476A 6100 0000                  		bsr.w	OscillateNumInit
0000476E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004774 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
0000477A 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00004780 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004786 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
0000478C 7000                       		moveq	#0,d0
0000478E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004792 E548                       		lsl.w	#2,d0
00004794 2271 0000                  		movea.l	(a1,d0.w),a1
00004798 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000479C 6A00                       		bpl.s	Level_Demo	; if yes, branch
0000479E 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000047A4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000047A8 5340                       		subq.w	#1,d0
000047AA E548                       		lsl.w	#2,d0
000047AC 2271 0000                  		movea.l	(a1,d0.w),a1
000047B0                            
000047B0                            Level_Demo:
000047B0 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000047B6 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000047BA 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000047C0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000047C4 6A00                       		bpl.s	Level_ChkWaterPal
000047C6 31FC 021C F614             		move.w	#540,($FFFFF614).w
000047CC 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000047D2 6600                       		bne.s	Level_ChkWaterPal
000047D4 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000047DA                            
000047DA                            Level_ChkWaterPal:
000047DA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000047E0 6600                       		bne.s	Level_Delay	; if not, branch
000047E2 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
000047E4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000047EA 6600                       		bne.s	Level_WaterPal2	; if not, branch
000047EC 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
000047EE                            
000047EE                            Level_WaterPal2:
000047EE 6100 E216                  		bsr.w	PalLoad4_Water
000047F2                            
000047F2                            Level_Delay:
000047F2 323C 0003                  		move.w	#3,d1
000047F6                            
000047F6                            Level_DelayLoop:
000047F6 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000047FC 6100 EBF4                  		bsr.w	DelayProgram
00004800 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004804                            
00004804 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000480A 6100 DE5C                  		bsr.w	Pal_FadeTo2
0000480E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004812 6B00                       		bmi.s	Level_ClrCardArt
00004814 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00004818 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
0000481C 5838 D124                  		addq.b	#4,($FFFFD124).w
00004820 5838 D164                  		addq.b	#4,($FFFFD164).w
00004824 6000                       		bra.s	Level_StartGame
00004826                            ; ===========================================================================
00004826                            
00004826                            Level_ClrCardArt:
00004826 7002                       		moveq	#2,d0
00004828 4EB9 0000 1E66             		jsr	(LoadPLC).l	; load explosion patterns
0000482E 7000                       		moveq	#0,d0
00004830 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004834 0640 0015                  		addi.w	#$15,d0
00004838 4EB9 0000 1E66             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
0000483E                            
0000483E                            Level_StartGame:
0000483E 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00004844                            
00004844                            ; ---------------------------------------------------------------------------
00004844                            ; Main level loop (when	all title card and loading sequences are finished)
00004844                            ; ---------------------------------------------------------------------------
00004844                            
00004844                            Level_MainLoop:
00004844 6100 D448                  		bsr.w	PauseGame
00004848 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000484E 6100 EBA2                  		bsr.w	DelayProgram
00004852 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00004856 6100 0000                  		bsr.w	MoveSonicInDemo
0000485A 6100 0000                  		bsr.w	LZWaterEffects
0000485E 4EB9 0000 0000             		jsr	ObjectsLoad
00004864 4A78 FE08                  		tst.w	($FFFFFE08).w
00004868 6600                       		bne.s	loc_3B10
0000486A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004870 6400                       		bcc.s	loc_3B14
00004872                            
00004872                            loc_3B10:
00004872 6100 0000                  		bsr.w	DeformBgLayer
00004876                            
00004876                            loc_3B14:
00004876 4EB9 0000 0000             		jsr	BuildSprites
0000487C 4EB9 0000 0000             		jsr	ObjPosLoad
00004882 6100 D99E                  		bsr.w	PalCycle_Load
00004886 6100 D64A                  		bsr.w	RunPLC_RAM
0000488A 6100 0000                  		bsr.w	OscillateNumDo
0000488E 6100 0000                  		bsr.w	ChangeRingFrame
00004892 6100 0000                  		bsr.w	SignpostArtLoad
00004896 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000489C 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
0000489E 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000048A2 6600 FBFE                  		bne.w	Level		; if yes, branch
000048A6 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000048AC 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000048B0 4E75                       		rts	
000048B2                            ; ===========================================================================
000048B2                            
000048B2                            Level_ChkDemo:				; XREF: Level_MainLoop
000048B2 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000048B6 6600                       		bne.s	Level_EndDemo	; if yes, branch
000048B8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000048BC 6700                       		beq.s	Level_EndDemo	; if not, branch
000048BE 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000048C4 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000048C8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000048CE 4E75                       		rts	
000048D0                            ; ===========================================================================
000048D0                            
000048D0                            Level_EndDemo:				; XREF: Level_ChkDemo
000048D0 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000048D6 6600                       		bne.s	loc_3B88	; if not, branch
000048D8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000048DE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000048E2 6A00                       		bpl.s	loc_3B88	; if yes, branch
000048E4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000048EA                            
000048EA                            loc_3B88:
000048EA 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000048F0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000048F6 4278 F794                  		clr.w	($FFFFF794).w
000048FA                            
000048FA                            loc_3B98:
000048FA 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004900 6100 EAF0                  		bsr.w	DelayProgram
00004904 6100 0000                  		bsr.w	MoveSonicInDemo
00004908 4EB9 0000 0000             		jsr	ObjectsLoad
0000490E 4EB9 0000 0000             		jsr	BuildSprites
00004914 4EB9 0000 0000             		jsr	ObjPosLoad
0000491A 5378 F794                  		subq.w	#1,($FFFFF794).w
0000491E 6A00                       		bpl.s	loc_3BC8
00004920 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004926 6100 DE04                  		bsr.w	Pal_FadeOut
0000492A                            
0000492A                            loc_3BC8:
0000492A 4A78 F614                  		tst.w	($FFFFF614).w
0000492E 66CA                       		bne.s	loc_3B98
00004930 4E75                       		rts	
00004932                            ; ===========================================================================
00004932                            ; ---------------------------------------------------------------------------
00004932                            ; Subroutine to	do special water effects in Labyrinth Zone
00004932                            ; ---------------------------------------------------------------------------
00004932                            
00004932                            LZWaterEffects:				; XREF: Level
00004932 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004938 6600                       		bne.s	locret_3C28	; if not, branch
0000493A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004940 6400                       		bcc.s	LZMoveWater
00004942 6100 0000                  		bsr.w	LZWindTunnels
00004946 6100 0000                  		bsr.w	LZWaterSlides
0000494A 6100 0000                  		bsr.w	LZDynamicWater
0000494E                            
0000494E                            LZMoveWater:
0000494E 4238 F64E                  		clr.b	($FFFFF64E).w
00004952 7000                       		moveq	#0,d0
00004954 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004958 E248                       		lsr.w	#1,d0
0000495A D078 F648                  		add.w	($FFFFF648).w,d0
0000495E 31C0 F646                  		move.w	d0,($FFFFF646).w
00004962 3038 F646                  		move.w	($FFFFF646).w,d0
00004966 9078 F704                  		sub.w	($FFFFF704).w,d0
0000496A 6400                       		bcc.s	loc_3C1A
0000496C 4A40                       		tst.w	d0
0000496E 6A00                       		bpl.s	loc_3C1A
00004970 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00004976 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
0000497C                            
0000497C                            loc_3C1A:
0000497C 0C40 00DF                  		cmpi.w	#$DF,d0
00004980 6500                       		bcs.s	loc_3C24
00004982 303C 00DF                  		move.w	#$DF,d0
00004986                            
00004986                            loc_3C24:
00004986 11C0 F625                  		move.b	d0,($FFFFF625).w
0000498A                            
0000498A                            locret_3C28:
0000498A 4E75                       		rts	
0000498C                            ; ===========================================================================
0000498C                            ; ---------------------------------------------------------------------------
0000498C                            ; Labyrinth default water heights
0000498C                            ; ---------------------------------------------------------------------------
0000498C                            WaterHeight:	incbin	misc\lz_heigh.bin
00004994                            		even
00004994                            ; ===========================================================================
00004994                            
00004994                            ; ---------------------------------------------------------------------------
00004994                            ; Labyrinth dynamic water routines
00004994                            ; ---------------------------------------------------------------------------
00004994                            
00004994                            LZDynamicWater:				; XREF: LZWaterEffects
00004994 7000                       		moveq	#0,d0
00004996 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000499A D040                       		add.w	d0,d0
0000499C 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000049A0 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000049A4 7200                       		moveq	#0,d1
000049A6 1238 F64C                  		move.b	($FFFFF64C).w,d1
000049AA 3038 F64A                  		move.w	($FFFFF64A).w,d0
000049AE 9078 F648                  		sub.w	($FFFFF648).w,d0
000049B2 6700                       		beq.s	locret_3C5A
000049B4 6400                       		bcc.s	loc_3C56
000049B6 4441                       		neg.w	d1
000049B8                            
000049B8                            loc_3C56:
000049B8 D378 F648                  		add.w	d1,($FFFFF648).w
000049BC                            
000049BC                            locret_3C5A:
000049BC 4E75                       		rts	
000049BE                            ; ===========================================================================
000049BE 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000049C0 0000                       		dc.w DynWater_LZ2-DynWater_Index
000049C2 0000                       		dc.w DynWater_LZ3-DynWater_Index
000049C4 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000049C6                            ; ===========================================================================
000049C6                            
000049C6                            DynWater_LZ1:				; XREF: DynWater_Index
000049C6 3038 F700                  		move.w	($FFFFF700).w,d0
000049CA 1438 F64D                  		move.b	($FFFFF64D).w,d2
000049CE 6600                       		bne.s	loc_3CD0
000049D0 323C 00B8                  		move.w	#$B8,d1
000049D4 0C40 0600                  		cmpi.w	#$600,d0
000049D8 6500                       		bcs.s	loc_3CB4
000049DA 323C 0108                  		move.w	#$108,d1
000049DE 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000049E4 6500                       		bcs.s	loc_3CBA
000049E6 0C40 0C00                  		cmpi.w	#$C00,d0
000049EA 6500                       		bcs.s	loc_3CB4
000049EC 323C 0318                  		move.w	#$318,d1
000049F0 0C40 1080                  		cmpi.w	#$1080,d0
000049F4 6500                       		bcs.s	loc_3CB4
000049F6 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
000049FC 323C 05C8                  		move.w	#$5C8,d1
00004A00 0C40 1380                  		cmpi.w	#$1380,d0
00004A04 6500                       		bcs.s	loc_3CB4
00004A06 323C 03A8                  		move.w	#$3A8,d1
00004A0A B278 F648                  		cmp.w	($FFFFF648).w,d1
00004A0E 6600                       		bne.s	loc_3CB4
00004A10 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004A16                            
00004A16                            loc_3CB4:
00004A16 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004A1A 4E75                       		rts	
00004A1C                            ; ===========================================================================
00004A1C                            
00004A1C                            loc_3CBA:				; XREF: DynWater_LZ1
00004A1C 0C40 0C80                  		cmpi.w	#$C80,d0
00004A20 65F4                       		bcs.s	loc_3CB4
00004A22 323C 00E8                  		move.w	#$E8,d1
00004A26 0C40 1500                  		cmpi.w	#$1500,d0
00004A2A 65EA                       		bcs.s	loc_3CB4
00004A2C 323C 0108                  		move.w	#$108,d1
00004A30 60E4                       		bra.s	loc_3CB4
00004A32                            ; ===========================================================================
00004A32                            
00004A32                            loc_3CD0:				; XREF: DynWater_LZ1
00004A32 5302                       		subq.b	#1,d2
00004A34 6600                       		bne.s	locret_3CF4
00004A36 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004A3C 6400                       		bcc.s	locret_3CF4
00004A3E 323C 03A8                  		move.w	#$3A8,d1
00004A42 0C40 1300                  		cmpi.w	#$1300,d0
00004A46 6500                       		bcs.s	loc_3CF0
00004A48 323C 0108                  		move.w	#$108,d1
00004A4C 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004A52                            
00004A52                            loc_3CF0:
00004A52 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004A56                            
00004A56                            locret_3CF4:
00004A56 4E75                       		rts	
00004A58                            ; ===========================================================================
00004A58                            
00004A58                            DynWater_LZ2:				; XREF: DynWater_Index
00004A58 3038 F700                  		move.w	($FFFFF700).w,d0
00004A5C 323C 0328                  		move.w	#$328,d1
00004A60 0C40 0500                  		cmpi.w	#$500,d0
00004A64 6500                       		bcs.s	loc_3D12
00004A66 323C 03C8                  		move.w	#$3C8,d1
00004A6A 0C40 0B00                  		cmpi.w	#$B00,d0
00004A6E 6500                       		bcs.s	loc_3D12
00004A70 323C 0428                  		move.w	#$428,d1
00004A74                            
00004A74                            loc_3D12:
00004A74 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004A78 4E75                       		rts	
00004A7A                            ; ===========================================================================
00004A7A                            
00004A7A                            DynWater_LZ3:				; XREF: DynWater_Index
00004A7A 3038 F700                  		move.w	($FFFFF700).w,d0
00004A7E 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004A82 6600                       		bne.s	loc_3D5E
00004A84 323C 0500                  		move.w	#$500,d1
00004A88 0C40 0600                  		cmpi.w	#$600,d0
00004A8C 6500                       		bcs.s	loc_3D54
00004A8E 0C40 1B00                  		cmpi.w	#$1B00,d0
00004A92 6500                       		bcs.s	loc_3D54
00004A94 323C 0850                  		move.w	#$850,d1
00004A98                            
00004A98                            loc_3D54:
00004A98 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004A9C 31C1 F648                  		move.w	d1,($FFFFF648).w
00004AA0 4E75                       		rts	
00004AA2                            ; ===========================================================================
00004AA2                            
00004AA2                            loc_3D5E:				; XREF: DynWater_LZ3
00004AA2 5302                       		subq.b	#1,d2
00004AA4 6600                       		bne.s	loc_3DA8
00004AA6 323C 04C8                  		move.w	#$4C8,d1
00004AAA 0C40 0770                  		cmpi.w	#$770,d0
00004AAE 6500                       		bcs.s	loc_3DA2
00004AB0 323C 0308                  		move.w	#$308,d1
00004AB4 0C40 1400                  		cmpi.w	#$1400,d0
00004AB8 6500                       		bcs.s	loc_3DA2
00004ABA 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00004AC0 6700                       		beq.s	loc_3D8E
00004AC2 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004AC8 6400                       		bcc.s	loc_3D8E
00004ACA 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004AD0 6400                       		bcc.s	loc_3DA2
00004AD2                            
00004AD2                            loc_3D8E:
00004AD2 323C 0508                  		move.w	#$508,d1
00004AD6 31C1 F648                  		move.w	d1,($FFFFF648).w
00004ADA 0C40 1770                  		cmpi.w	#$1770,d0
00004ADE 6500                       		bcs.s	loc_3DA2
00004AE0 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004AE6                            
00004AE6                            loc_3DA2:
00004AE6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004AEA 4E75                       		rts	
00004AEC                            ; ===========================================================================
00004AEC                            
00004AEC                            loc_3DA8:
00004AEC 5302                       		subq.b	#1,d2
00004AEE 6600                       		bne.s	loc_3DD2
00004AF0 323C 0508                  		move.w	#$508,d1
00004AF4 0C40 1860                  		cmpi.w	#$1860,d0
00004AF8 6500                       		bcs.s	loc_3DCC
00004AFA 323C 0188                  		move.w	#$188,d1
00004AFE 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004B02 6400                       		bcc.s	loc_3DC6
00004B04 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004B08 6600                       		bne.s	loc_3DCC
00004B0A                            
00004B0A                            loc_3DC6:
00004B0A 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004B10                            
00004B10                            loc_3DCC:
00004B10 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004B14 4E75                       		rts	
00004B16                            ; ===========================================================================
00004B16                            
00004B16                            loc_3DD2:
00004B16 5302                       		subq.b	#1,d2
00004B18 6600                       		bne.s	loc_3E0E
00004B1A 323C 0188                  		move.w	#$188,d1
00004B1E 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004B22 6500                       		bcs.s	loc_3E04
00004B24 323C 0900                  		move.w	#$900,d1
00004B28 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004B2C 6500                       		bcs.s	loc_3E04
00004B2E 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004B34 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004B3A 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004B40 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004B46 4E75                       		rts	
00004B48                            ; ===========================================================================
00004B48                            
00004B48                            loc_3E04:
00004B48 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004B4C 31C1 F648                  		move.w	d1,($FFFFF648).w
00004B50 4E75                       		rts	
00004B52                            ; ===========================================================================
00004B52                            
00004B52                            loc_3E0E:
00004B52 0C40 1E00                  		cmpi.w	#$1E00,d0
00004B56 6500                       		bcs.s	locret_3E1A
00004B58 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004B5E                            
00004B5E                            locret_3E1A:
00004B5E 4E75                       		rts	
00004B60                            ; ===========================================================================
00004B60                            
00004B60                            DynWater_SBZ3:				; XREF: DynWater_Index
00004B60 323C 0228                  		move.w	#$228,d1
00004B64 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004B6A 6500                       		bcs.s	loc_3E2C
00004B6C 323C 04C8                  		move.w	#$4C8,d1
00004B70                            
00004B70                            loc_3E2C:
00004B70 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004B74 4E75                       		rts
00004B76                            
00004B76                            ; ---------------------------------------------------------------------------
00004B76                            ; Labyrinth Zone "wind tunnels"	subroutine
00004B76                            ; ---------------------------------------------------------------------------
00004B76                            
00004B76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B76                            
00004B76                            
00004B76                            LZWindTunnels:				; XREF: LZWaterEffects
00004B76 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004B7A 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004B7E 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004B84 7000                       		moveq	#0,d0
00004B86 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004B8A E748                       		lsl.w	#3,d0
00004B8C D4C0                       		adda.w	d0,a2
00004B8E 7200                       		moveq	#0,d1
00004B90 4A38 FE11                  		tst.b	($FFFFFE11).w
00004B94 6600                       		bne.s	loc_3E56
00004B96 7201                       		moveq	#1,d1
00004B98 514A                       		subq.w	#8,a2
00004B9A                            
00004B9A                            loc_3E56:
00004B9A 43F8 D000                  		lea	($FFFFD000).w,a1
00004B9E                            
00004B9E                            LZWind_Loop:
00004B9E 3029 0008                  		move.w	8(a1),d0
00004BA2 B052                       		cmp.w	(a2),d0
00004BA4 6500 0000                  		bcs.w	loc_3EF4
00004BA8 B06A 0004                  		cmp.w	4(a2),d0
00004BAC 6400 0000                  		bcc.w	loc_3EF4
00004BB0 3429 000C                  		move.w	$C(a1),d2
00004BB4 B46A 0002                  		cmp.w	2(a2),d2
00004BB8 6500                       		bcs.s	loc_3EF4
00004BBA B46A 0006                  		cmp.w	6(a2),d2
00004BBE 6400                       		bcc.s	loc_3EF4
00004BC0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004BC4 0200 003F                  		andi.b	#$3F,d0
00004BC8 6600                       		bne.s	loc_3E90
00004BCA 303C 00D0                  		move.w	#$D0,d0
00004BCE 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004BD4                            
00004BD4                            loc_3E90:
00004BD4 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00004BD8 6600 0000                  		bne.w	locret_3F0A
00004BDC 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004BE2 6400                       		bcc.s	loc_3F06
00004BE4 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00004BEA 0440 0080                  		subi.w	#$80,d0
00004BEE B052                       		cmp.w	(a2),d0
00004BF0 6400                       		bcc.s	LZWind_Move
00004BF2 7002                       		moveq	#2,d0
00004BF4 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004BFA 6600                       		bne.s	loc_3EBA
00004BFC 4440                       		neg.w	d0
00004BFE                            
00004BFE                            loc_3EBA:
00004BFE D169 000C                  		add.w	d0,$C(a1)
00004C02                            
00004C02                            LZWind_Move:
00004C02 5869 0008                  		addq.w	#4,8(a1)
00004C06 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004C0C 337C 0000 0012             		move.w	#0,$12(a1)
00004C12 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004C18 08E9 0001 0022             		bset	#1,$22(a1)
00004C1E 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004C24 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004C26 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004C2A                            
00004C2A                            LZWind_MoveDown:
00004C2A 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004C30 6700                       		beq.s	locret_3EF2	; if not, branch
00004C32 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004C36                            
00004C36                            locret_3EF2:
00004C36 4E75                       		rts	
00004C38                            ; ===========================================================================
00004C38                            
00004C38                            loc_3EF4:				; XREF: LZWindTunnels
00004C38 504A                       		addq.w	#8,a2
00004C3A 51C9 FF62                  		dbf	d1,LZWind_Loop
00004C3E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004C42 6700                       		beq.s	locret_3F0A
00004C44 137C 0000 001C             		move.b	#0,$1C(a1)
00004C4A                            
00004C4A                            loc_3F06:
00004C4A 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004C4E                            
00004C4E                            locret_3F0A:
00004C4E 4E75                       		rts	
00004C50                            ; End of function LZWindTunnels
00004C50                            
00004C50                            ; ===========================================================================
00004C50 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004C58 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004C6A 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004C78                            					; XREF: LZWindTunnels
00004C78                            		even
00004C78                            
00004C78                            ; ---------------------------------------------------------------------------
00004C78                            ; Labyrinth Zone water slide subroutine
00004C78                            ; ---------------------------------------------------------------------------
00004C78                            
00004C78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C78                            
00004C78                            
00004C78                            LZWaterSlides:				; XREF: LZWaterEffects
00004C78 43F8 D000                  		lea	($FFFFD000).w,a1
00004C7C 0829 0001 0022             		btst	#1,$22(a1)
00004C82 6600                       		bne.s	loc_3F6A
00004C84 3029 000C                  		move.w	$C(a1),d0
00004C88 E248                       		lsr.w	#1,d0
00004C8A 0240 0380                  		andi.w	#$380,d0
00004C8E 1229 0008                  		move.b	8(a1),d1
00004C92 0241 007F                  		andi.w	#$7F,d1
00004C96 D041                       		add.w	d1,d0
00004C98 45F8 A400                  		lea	($FFFFA400).w,a2
00004C9C 1032 0000                  		move.b	(a2,d0.w),d0
00004CA0 45FA 0000                  		lea	byte_3FCF(pc),a2
00004CA4 7206                       		moveq	#6,d1
00004CA6                            
00004CA6                            loc_3F62:
00004CA6 B022                       		cmp.b	-(a2),d0
00004CA8 57C9 FFFC                  		dbeq	d1,loc_3F62
00004CAC 6700                       		beq.s	LZSlide_Move
00004CAE                            
00004CAE                            loc_3F6A:
00004CAE 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004CB2 6700                       		beq.s	locret_3F7A
00004CB4 337C 0005 003E             		move.w	#5,$3E(a1)
00004CBA 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004CBE                            
00004CBE                            locret_3F7A:
00004CBE 4E75                       		rts	
00004CC0                            ; ===========================================================================
00004CC0                            
00004CC0                            LZSlide_Move:				; XREF: LZWaterSlides
00004CC0 0C41 0003                  		cmpi.w	#3,d1
00004CC4 6400                       		bcc.s	loc_3F84
00004CC6 4E71                       		nop	
00004CC8                            
00004CC8                            loc_3F84:
00004CC8 08A9 0000 0022             		bclr	#0,$22(a1)
00004CCE 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004CD2 1340 0014                  		move.b	d0,$14(a1)
00004CD6 6A00                       		bpl.s	loc_3F9A
00004CD8 08E9 0000 0022             		bset	#0,$22(a1)
00004CDE                            
00004CDE                            loc_3F9A:
00004CDE 4229 0015                  		clr.b	$15(a1)
00004CE2 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004CE8 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004CEE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004CF2 0200 001F                  		andi.b	#$1F,d0
00004CF6 6600                       		bne.s	locret_3FBE
00004CF8 303C 00D0                  		move.w	#$D0,d0
00004CFC 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play water sound
00004D02                            
00004D02                            locret_3FBE:
00004D02 4E75                       		rts	
00004D04                            ; End of function LZWaterSlides
00004D04                            
00004D04                            ; ===========================================================================
00004D04 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004D13 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004D14                            		even
00004D14                            
00004D14                            ; ---------------------------------------------------------------------------
00004D14                            ; Subroutine to	move Sonic in demo mode
00004D14                            ; ---------------------------------------------------------------------------
00004D14                            
00004D14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D14                            
00004D14                            
00004D14                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004D14 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004D18 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004D1A 4E75                       		rts	
00004D1C                            ; ===========================================================================
00004D1C                            
00004D1C                            ; This is an unused subroutine for recording a demo
00004D1C                            
00004D1C                            MoveDemo_Record:
00004D1C 43F9 0008 0000             		lea	($80000).l,a1
00004D22 3038 F790                  		move.w	($FFFFF790).w,d0
00004D26 D2C0                       		adda.w	d0,a1
00004D28 1038 F604                  		move.b	($FFFFF604).w,d0
00004D2C B011                       		cmp.b	(a1),d0
00004D2E 6600                       		bne.s	loc_3FFA
00004D30 5229 0001                  		addq.b	#1,1(a1)
00004D34 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004D3A 6700                       		beq.s	loc_3FFA
00004D3C 4E75                       		rts	
00004D3E                            ; ===========================================================================
00004D3E                            
00004D3E                            loc_3FFA:				; XREF: MoveDemo_Record
00004D3E 1340 0002                  		move.b	d0,2(a1)
00004D42 137C 0000 0003             		move.b	#0,3(a1)
00004D48 5478 F790                  		addq.w	#2,($FFFFF790).w
00004D4C 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004D52 4E75                       		rts	
00004D54                            ; ===========================================================================
00004D54                            
00004D54                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004D54 4A38 F604                  		tst.b	($FFFFF604).w
00004D58 6A00                       		bpl.s	loc_4022
00004D5A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004D5E 6B00                       		bmi.s	loc_4022
00004D60 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004D66                            
00004D66                            loc_4022:
00004D66 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004D6C 7000                       		moveq	#0,d0
00004D6E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004D72 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004D78 6600                       		bne.s	loc_4038
00004D7A 7006                       		moveq	#6,d0
00004D7C                            
00004D7C                            loc_4038:
00004D7C E548                       		lsl.w	#2,d0
00004D7E 2271 0000                  		movea.l	(a1,d0.w),a1
00004D82 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004D86 6A00                       		bpl.s	loc_4056
00004D88 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004D8E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004D92 5340                       		subq.w	#1,d0
00004D94 E548                       		lsl.w	#2,d0
00004D96 2271 0000                  		movea.l	(a1,d0.w),a1
00004D9A                            
00004D9A                            loc_4056:
00004D9A 3038 F790                  		move.w	($FFFFF790).w,d0
00004D9E D2C0                       		adda.w	d0,a1
00004DA0 1011                       		move.b	(a1),d0
00004DA2 41F8 F604                  		lea	($FFFFF604).w,a0
00004DA6 1200                       		move.b	d0,d1
00004DA8 1410                       		move.b	(a0),d2
00004DAA B500                       		eor.b	d2,d0
00004DAC 10C1                       		move.b	d1,(a0)+
00004DAE C001                       		and.b	d1,d0
00004DB0 10C0                       		move.b	d0,(a0)+
00004DB2 5338 F792                  		subq.b	#1,($FFFFF792).w
00004DB6 6400                       		bcc.s	locret_407E
00004DB8 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004DBE 5478 F790                  		addq.w	#2,($FFFFF790).w
00004DC2                            
00004DC2                            locret_407E:
00004DC2 4E75                       		rts	
00004DC4                            ; End of function MoveSonicInDemo
00004DC4                            
00004DC4                            ; ===========================================================================
00004DC4                            ; ---------------------------------------------------------------------------
00004DC4                            ; Demo sequence	pointers
00004DC4                            ; ---------------------------------------------------------------------------
00004DC4                            Demo_Index:
00004DC4                            	include "_inc\Demo pointers for intro.asm"
00004DC4                            ; ---------------------------------------------------------------------------
00004DC4                            ; Demo sequence	pointers
00004DC4                            ; ---------------------------------------------------------------------------
00004DC4 0000 0000                  	dc.l Demo_GHZ
00004DC8 0000 0000                  	dc.l Demo_GHZ
00004DCC 0000 0000                  	dc.l Demo_MZ
00004DD0 0000 0000                  	dc.l Demo_MZ
00004DD4 0000 0000                  	dc.l Demo_SYZ
00004DD8 0000 0000                  	dc.l Demo_SYZ
00004DDC 0000 0000                  	dc.l Demo_SS
00004DE0 0000 0000                  	dc.l Demo_SS
00004DE0 0000 0000                  	dc.l Demo_SS
00004DE4                            
00004DE4                            Demo_EndIndex:
00004DE4                            	include "_inc\Demo pointers for ending.asm"
00004DE4                            ; ---------------------------------------------------------------------------
00004DE4                            ; Demo (ending) sequence pointers
00004DE4                            ; ---------------------------------------------------------------------------
00004DE4 0000 0000                  	dc.l Demo_EndGHZ1
00004DE8 0000 0000                  	dc.l Demo_EndMZ
00004DEC 0000 0000                  	dc.l Demo_EndSYZ
00004DF0 0000 0000                  	dc.l Demo_EndLZ
00004DF4 0000 0000                  	dc.l Demo_EndSLZ
00004DF8 0000 0000                  	dc.l Demo_EndSBZ1
00004DFC 0000 0000                  	dc.l Demo_EndSBZ2
00004E00 0000 0000                  	dc.l Demo_EndGHZ2
00004E00 0000 0000                  	dc.l Demo_EndGHZ2
00004E04                            
00004E04 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004E14 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004E24 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004E34                            		even
00004E34                            
00004E34                            ; ---------------------------------------------------------------------------
00004E34                            ; Collision index loading subroutine
00004E34                            ; ---------------------------------------------------------------------------
00004E34                            
00004E34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E34                            
00004E34                            
00004E34                            ColIndexLoad:				; XREF: Level
00004E34 7000                       		moveq	#0,d0
00004E36 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004E3A E548                       		lsl.w	#2,d0
00004E3C 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004E42 4E75                       		rts	
00004E44                            ; End of function ColIndexLoad
00004E44                            
00004E44                            ; ===========================================================================
00004E44                            ; ---------------------------------------------------------------------------
00004E44                            ; Collision index pointers
00004E44                            ; ---------------------------------------------------------------------------
00004E44                            ColPointers:
00004E44                            	include "_inc\Collision index pointers.asm"
00004E44                            ; ---------------------------------------------------------------------------
00004E44                            ; Collision index pointers
00004E44                            ; ---------------------------------------------------------------------------
00004E44 0000 0000                  	dc.l Col_GHZ
00004E48 0000 0000                  	dc.l Col_LZ
00004E4C 0000 0000                  	dc.l Col_MZ
00004E50 0000 0000                  	dc.l Col_SLZ
00004E54 0000 0000                  	dc.l Col_SYZ
00004E58 0000 0000                  	dc.l Col_SBZ
00004E5C 0000 0000                  	dc.l Col_GHZ ; this is the ending just so it does not fuck up
00004E60 0000 0000                  	dc.l Col_BHZ
00004E60 0000 0000                  	dc.l Col_BHZ
00004E64                            
00004E64                            ; ---------------------------------------------------------------------------
00004E64                            ; Oscillating number subroutine
00004E64                            ; ---------------------------------------------------------------------------
00004E64                            
00004E64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E64                            
00004E64                            
00004E64                            OscillateNumInit:			; XREF: Level
00004E64 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004E68 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004E6E 7220                       		moveq	#$20,d1
00004E70                            
00004E70                            Osc_Loop:
00004E70 32DA                       		move.w	(a2)+,(a1)+
00004E72 51C9 FFFC                  		dbf	d1,Osc_Loop
00004E76 4E75                       		rts	
00004E78                            ; End of function OscillateNumInit
00004E78                            
00004E78                            ; ===========================================================================
00004E78 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004E7C 0000 0080                  		dc.w 0,	$80
00004E80 0000 0080                  		dc.w 0,	$80
00004E84 0000 0080                  		dc.w 0,	$80
00004E88 0000 0080                  		dc.w 0,	$80
00004E8C 0000 0080                  		dc.w 0,	$80
00004E90 0000 0080                  		dc.w 0,	$80
00004E94 0000 0080                  		dc.w 0,	$80
00004E98 0000 0080                  		dc.w 0,	$80
00004E9C 0000 50F0                  		dc.w 0,	$50F0
00004EA0 011E 2080                  		dc.w $11E, $2080
00004EA4 00B4 3080                  		dc.w $B4, $3080
00004EA8 010E 5080                  		dc.w $10E, $5080
00004EAC 01C2 7080                  		dc.w $1C2, $7080
00004EB0 0276 0080                  		dc.w $276, $80
00004EB4 0000 0080                  		dc.w 0,	$80
00004EB8 0000                       		dc.w 0
00004EBA                            		even
00004EBA                            
00004EBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EBA                            
00004EBA                            
00004EBA                            OscillateNumDo:				; XREF: Level
00004EBA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004EC0 6400                       		bcc.s	locret_41C4
00004EC2 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004EC6 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004ECC 3619                       		move.w	(a1)+,d3
00004ECE 720F                       		moveq	#$F,d1
00004ED0                            
00004ED0                            loc_4184:
00004ED0 341A                       		move.w	(a2)+,d2
00004ED2 381A                       		move.w	(a2)+,d4
00004ED4 0303                       		btst	d1,d3
00004ED6 6600                       		bne.s	loc_41A4
00004ED8 3029 0002                  		move.w	2(a1),d0
00004EDC D042                       		add.w	d2,d0
00004EDE 3340 0002                  		move.w	d0,2(a1)
00004EE2 D151                       		add.w	d0,0(a1)
00004EE4 B811                       		cmp.b	0(a1),d4
00004EE6 6200                       		bhi.s	loc_41BA
00004EE8 03C3                       		bset	d1,d3
00004EEA 6000                       		bra.s	loc_41BA
00004EEC                            ; ===========================================================================
00004EEC                            
00004EEC                            loc_41A4:				; XREF: OscillateNumDo
00004EEC 3029 0002                  		move.w	2(a1),d0
00004EF0 9042                       		sub.w	d2,d0
00004EF2 3340 0002                  		move.w	d0,2(a1)
00004EF6 D151                       		add.w	d0,0(a1)
00004EF8 B811                       		cmp.b	0(a1),d4
00004EFA 6300                       		bls.s	loc_41BA
00004EFC 0383                       		bclr	d1,d3
00004EFE                            
00004EFE                            loc_41BA:
00004EFE 5849                       		addq.w	#4,a1
00004F00 51C9 FFCE                  		dbf	d1,loc_4184
00004F04 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004F08                            
00004F08                            locret_41C4:
00004F08 4E75                       		rts	
00004F0A                            ; End of function OscillateNumDo
00004F0A                            
00004F0A                            ; ===========================================================================
00004F0A 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004F0E 0002 0018                  		dc.w 2,	$18
00004F12 0002 0020                  		dc.w 2,	$20
00004F16 0002 0030                  		dc.w 2,	$30
00004F1A 0004 0020                  		dc.w 4,	$20
00004F1E 0008 0008                  		dc.w 8,	8
00004F22 0008 0040                  		dc.w 8,	$40
00004F26 0004 0040                  		dc.w 4,	$40
00004F2A 0002 0050                  		dc.w 2,	$50
00004F2E 0002 0050                  		dc.w 2,	$50
00004F32 0002 0020                  		dc.w 2,	$20
00004F36 0003 0030                  		dc.w 3,	$30
00004F3A 0005 0050                  		dc.w 5,	$50
00004F3E 0007 0070                  		dc.w 7,	$70
00004F42 0002 0010                  		dc.w 2,	$10
00004F46 0002 0010                  		dc.w 2,	$10
00004F4A                            		even
00004F4A                            
00004F4A                            ; ---------------------------------------------------------------------------
00004F4A                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004F4A                            ; ---------------------------------------------------------------------------
00004F4A                            
00004F4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F4A                            
00004F4A                            
00004F4A                            ChangeRingFrame:			; XREF: Level
00004F4A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004F4E 6A00                       		bpl.s	loc_421C
00004F50 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004F56 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004F5A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004F60                            
00004F60                            loc_421C:
00004F60 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004F64 6A00                       		bpl.s	loc_4232
00004F66 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004F6C 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004F70 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004F76                            
00004F76                            loc_4232:
00004F76 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004F7A 6A00                       		bpl.s	loc_4250
00004F7C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004F82 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004F86 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004F8C 6500                       		bcs.s	loc_4250
00004F8E 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004F94                            
00004F94                            loc_4250:
00004F94 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004F98 6700                       		beq.s	locret_4272
00004F9A 7000                       		moveq	#0,d0
00004F9C 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004FA0 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004FA4 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004FA8 EF58                       		rol.w	#7,d0
00004FAA 0240 0003                  		andi.w	#3,d0
00004FAE 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004FB2 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004FB6                            
00004FB6                            locret_4272:
00004FB6 4E75                       		rts	
00004FB8                            ; End of function ChangeRingFrame
00004FB8                            
00004FB8                            ; ---------------------------------------------------------------------------
00004FB8                            ; End-of-act signpost pattern loading subroutine
00004FB8                            ; ---------------------------------------------------------------------------
00004FB8                            
00004FB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FB8                            
00004FB8                            
00004FB8                            SignpostArtLoad:			; XREF: Level
00004FB8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004FBC 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004FC0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004FC6 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004FC8 3038 F700                  		move.w	($FFFFF700).w,d0
00004FCC 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004FD0 0441 0100                  		subi.w	#$100,d1
00004FD4 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004FD6 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004FD8 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004FDC 6700                       		beq.s	Signpost_Exit
00004FDE B278 F728                  		cmp.w	($FFFFF728).w,d1
00004FE2 6700                       		beq.s	Signpost_Exit
00004FE4 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004FE8 7012                       		moveq	#$12,d0
00004FEA 6000 CEAC                  		bra.w	LoadPLC2	; load signpost	patterns
00004FEE                            ; ===========================================================================
00004FEE                            
00004FEE                            Signpost_Exit:
00004FEE 4E75                       		rts	
00004FF0                            ; End of function SignpostArtLoad
00004FF0                            
00004FF0                            ; ===========================================================================
00004FF0                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00005070                            Demo_MZ:	incbin	demodata\i_mz.bin
000051A0                            Demo_SYZ:	incbin	demodata\i_syz.bin
00005220                            Demo_SS:	incbin	demodata\i_ss.bin
00005320                            ; ===========================================================================
00005320                            
00005320                            ; ---------------------------------------------------------------------------
00005320                            ; Special Stage
00005320                            ; ---------------------------------------------------------------------------
00005320                            
00005320                            SpecialStage:				; XREF: GameModeArray
00005320 303C 00CA                  		move.w	#$CA,d0
00005324 6100 C95C                  		bsr.w	PlaySound_Special ; play special stage entry sound
00005328 6100 D50C                  		bsr.w	Pal_MakeFlash
0000532C 46FC 2700                  		move	#$2700,sr
00005330 4DF9 00C0 0004             		lea	($C00004).l,a6
00005336 3CBC 8B03                  		move.w	#$8B03,(a6)
0000533A 3CBC 8004                  		move.w	#$8004,(a6)
0000533E 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00005344 3CBC 9011                  		move.w	#$9011,(a6)
00005348 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000534C 0200 00BF                  		andi.b	#$BF,d0
00005350 33C0 00C0 0004             		move.w	d0,($C00004).l
00005356 6100 C850                  		bsr.w	ClearScreen
0000535A 46FC 2300                  		move	#$2300,sr
0000535E 4BF9 00C0 0004             		lea	($C00004).l,a5
00005364 3ABC 8F01                  		move.w	#$8F01,(a5)
00005368 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000536E 3ABC 9780                  		move.w	#$9780,(a5)
00005372 2ABC 5000 0081             		move.l	#$50000081,(a5)
00005378 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00005380                            
00005380                            loc_463C:
00005380 3215                       		move.w	(a5),d1
00005382 0801 0001                  		btst	#1,d1
00005386 66F8                       		bne.s	loc_463C
00005388 3ABC 8F02                  		move.w	#$8F02,(a5)
0000538C 6100 0000                  		bsr.w	SS_BGLoad
00005390 7014                       		moveq	#$14,d0
00005392 6100 CC3E                  		bsr.w	RunPLC_ROM	; load special stage patterns
00005396 43F8 D000                  		lea	($FFFFD000).w,a1
0000539A 7000                       		moveq	#0,d0
0000539C 323C 07FF                  		move.w	#$7FF,d1
000053A0                            
000053A0                            SS_ClrObjRam:
000053A0 22C0                       		move.l	d0,(a1)+
000053A2 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000053A6                            
000053A6 43F8 F700                  		lea	($FFFFF700).w,a1
000053AA 7000                       		moveq	#0,d0
000053AC 323C 003F                  		move.w	#$3F,d1
000053B0                            
000053B0                            SS_ClrRam:
000053B0 22C0                       		move.l	d0,(a1)+
000053B2 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000053B6                            
000053B6 43F8 FE60                  		lea	($FFFFFE60).w,a1
000053BA 7000                       		moveq	#0,d0
000053BC 323C 0027                  		move.w	#$27,d1
000053C0                            
000053C0                            SS_ClrRam2:
000053C0 22C0                       		move.l	d0,(a1)+
000053C2 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000053C6                            
000053C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000053CA 7000                       		moveq	#0,d0
000053CC 323C 007F                  		move.w	#$7F,d1
000053D0                            
000053D0                            SS_ClrNemRam:
000053D0 22C0                       		move.l	d0,(a1)+
000053D2 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000053D6                            
000053D6 4238 F64E                  		clr.b	($FFFFF64E).w
000053DA 4278 FE02                  		clr.w	($FFFFFE02).w
000053DE 700A                       		moveq	#$A,d0
000053E0 6100 D5D4                  		bsr.w	PalLoad1	; load special stage pallet
000053E4 4EB9 0000 0000             		jsr	SS_Load
000053EA 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000053F2 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000053FA 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00005400 6100 0000                  		bsr.w	PalCycle_SS
00005404 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00005408 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
0000540C 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00005412 303C 0089                  		move.w	#$89,d0
00005416 6100 C864                  		bsr.w	PlaySound	; play special stage BG	music
0000541A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00005420 43F9 0000 4DC4             		lea	(Demo_Index).l,a1
00005426 7006                       		moveq	#6,d0
00005428 E548                       		lsl.w	#2,d0
0000542A 2271 0000                  		movea.l	(a1,d0.w),a1
0000542E 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00005434 5338 F792                  		subq.b	#1,($FFFFF792).w
00005438 4278 FE20                  		clr.w	($FFFFFE20).w
0000543C 4238 FE1B                  		clr.b	($FFFFFE1B).w
00005440 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00005446 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000544C                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
0000544C                            ;		beq.s	SS_NoDebug	; if not, branch
0000544C                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
0000544C                            ;		beq.s	SS_NoDebug	; if not, branch
0000544C                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000544C                            
0000544C                            SS_NoDebug:
0000544C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005450 0000 0040                  		ori.b	#$40,d0
00005454 33C0 00C0 0004             		move.w	d0,($C00004).l
0000545A 6100 D32E                  		bsr.w	Pal_MakeWhite
0000545E                            
0000545E                            ; ---------------------------------------------------------------------------
0000545E                            ; Main Special Stage loop
0000545E                            ; ---------------------------------------------------------------------------
0000545E                            
0000545E                            SS_MainLoop:
0000545E 6100 C82E                  		bsr.w	PauseGame
00005462 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00005468 6100 DF88                  		bsr.w	DelayProgram
0000546C 4A78 F784                          tst.w   ($FFFFF784).w
00005470 6700                               beq.s   SS_NotReversed
00005472 5378 F784                          subi.w  #1,($FFFFF784).w
00005476                            
00005476                            SS_NotReversed:
00005476 6100 F89C                  		bsr.w	MoveSonicInDemo
0000547A 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00005480 4EB9 0000 0000             		jsr	ObjectsLoad
00005486 4EB9 0000 0000             		jsr	BuildSprites
0000548C 4EB9 0000 0000             		jsr	SS_ShowLayout
00005492 6100 0000                  		bsr.w	SS_BGAnimate
00005496 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000549A 6700                       		beq.s	SS_ChkEnd	; if not, branch
0000549C 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000054A0 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
000054A4                            
000054A4                            SS_ChkEnd:
000054A4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
000054AA 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
000054AE                            
000054AE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000054B2 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
000054B6 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000054BC 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
000054C2 6500                       		bcs.s	SS_End		; if not, branch
000054C4 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
000054C8                            
000054C8                            SS_End:
000054C8 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
000054CE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000054D4 4278 F794                  		clr.w	($FFFFF794).w
000054D8                            
000054D8                            SS_EndLoop:
000054D8 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000054DE 6100 DF12                  		bsr.w	DelayProgram
000054E2 6100 F830                  		bsr.w	MoveSonicInDemo
000054E6 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000054EC 4EB9 0000 0000             		jsr	ObjectsLoad
000054F2 4EB9 0000 0000             		jsr	BuildSprites
000054F8 4EB9 0000 0000             		jsr	SS_ShowLayout
000054FE 6100 0000                  		bsr.w	SS_BGAnimate
00005502 5378 F794                  		subq.w	#1,($FFFFF794).w
00005506 6A00                       		bpl.s	loc_47D4
00005508 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000550E 6100 D346                  		bsr.w	Pal_ToWhite
00005512                            
00005512                            loc_47D4:
00005512 4A78 F614                  		tst.w	($FFFFF614).w
00005516 66C0                       		bne.s	SS_EndLoop
00005518                            
00005518 46FC 2700                  		move	#$2700,sr
0000551C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005522 3CBC 8230                  		move.w	#$8230,(a6)
00005526 3CBC 8407                  		move.w	#$8407,(a6)
0000552A 3CBC 9001                  		move.w	#$9001,(a6)
0000552E 6100 C678                  		bsr.w	ClearScreen
00005532 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000553C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005542 6100 C7E2                  		bsr.w	NemDec
00005546 4EB9 0000 0000             		jsr	Hud_Base
0000554C 46FC 2300                  		move	#$2300,sr
00005550 7011                       		moveq	#$11,d0
00005552 6100 D47E                  		bsr.w	PalLoad2	; load results screen pallet
00005556 7000                       		moveq	#0,d0
00005558 6100 C93E                  		bsr.w	LoadPLC2
0000555C 701B                       		moveq	#$1B,d0
0000555E 6100 C906                  		bsr.w	LoadPLC		; load results screen patterns
00005562 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00005568 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
0000556E 3038 FE20                  		move.w	($FFFFFE20).w,d0
00005572 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005576 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
0000557A 303C 008E                  		move.w	#$8E,d0
0000557E 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play end-of-level music
00005584 43F8 D000                  		lea	($FFFFD000).w,a1
00005588 7000                       		moveq	#0,d0
0000558A 323C 07FF                  		move.w	#$7FF,d1
0000558E                            
0000558E                            SS_EndClrObjRam:
0000558E 22C0                       		move.l	d0,(a1)+
00005590 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005594                            
00005594 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
0000559A                            
0000559A                            SS_NormalExit:
0000559A 6100 C6F2                  		bsr.w	PauseGame
0000559E 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000055A4 6100 DE4C                  		bsr.w	DelayProgram
000055A8 4EB9 0000 0000             		jsr	ObjectsLoad
000055AE 4EB9 0000 0000             		jsr	BuildSprites
000055B4 6100 C91C                  		bsr.w	RunPLC_RAM
000055B8 4A78 FE02                  		tst.w	($FFFFFE02).w
000055BC 67DC                       		beq.s	SS_NormalExit
000055BE 4AB8 F680                  		tst.l	($FFFFF680).w
000055C2 66D6                       		bne.s	SS_NormalExit
000055C4 303C 00CA                  		move.w	#$CA,d0
000055C8 6100 C6B8                  		bsr.w	PlaySound_Special ; play special stage exit sound
000055CC 6100 D268                  		bsr.w	Pal_MakeFlash
000055D0 4E75                       		rts	
000055D2                            ; ===========================================================================
000055D2                            
000055D2                            SS_ToSegaScreen:
000055D2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
000055D8 4E75                       		rts
000055DA                            
000055DA                            ; ---------------------------------------------------------------------------
000055DA                            ; Special stage	background loading subroutine
000055DA                            ; ---------------------------------------------------------------------------
000055DA                            
000055DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000055DA                            
000055DA                            
000055DA                            SS_BGLoad:				; XREF: SpecialStage
000055DA 43F9 00FF 0000             		lea	($FF0000).l,a1
000055E0 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000055E6 303C 4051                  		move.w	#$4051,d0
000055EA 6100 CA18                  		bsr.w	EniDec
000055EE 263C 5000 0001             		move.l	#$50000001,d3
000055F4 45F9 00FF 0080             		lea	($FF0080).l,a2
000055FA 7E06                       		moveq	#6,d7
000055FC                            
000055FC                            loc_48BE:
000055FC 2003                       		move.l	d3,d0
000055FE 7C03                       		moveq	#3,d6
00005600 7800                       		moveq	#0,d4
00005602 0C47 0003                  		cmpi.w	#3,d7
00005606 6400                       		bcc.s	loc_48CC
00005608 7801                       		moveq	#1,d4
0000560A                            
0000560A                            loc_48CC:
0000560A 7A07                       		moveq	#7,d5
0000560C                            
0000560C                            loc_48CE:
0000560C 224A                       		movea.l	a2,a1
0000560E 0A04 0001                  		eori.b	#1,d4
00005612 6600                       		bne.s	loc_48E2
00005614 0C47 0006                  		cmpi.w	#6,d7
00005618 6600                       		bne.s	loc_48F2
0000561A 43F9 00FF 0000             		lea	($FF0000).l,a1
00005620                            
00005620                            loc_48E2:
00005620 48E7 F800                  		movem.l	d0-d4,-(sp)
00005624 7207                       		moveq	#7,d1
00005626 7407                       		moveq	#7,d2
00005628 6100 C6DC                  		bsr.w	ShowVDPGraphics
0000562C 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005630                            
00005630                            loc_48F2:
00005630 0680 0010 0000             		addi.l	#$100000,d0
00005636 51CD FFD4                  		dbf	d5,loc_48CE
0000563A 0680 0380 0000             		addi.l	#$3800000,d0
00005640 0A04 0001                  		eori.b	#1,d4
00005644 51CE FFC4                  		dbf	d6,loc_48CC
00005648 0683 1000 0000             		addi.l	#$10000000,d3
0000564E 6A00                       		bpl.s	loc_491C
00005650 4843                       		swap	d3
00005652 0683 0000 C000             		addi.l	#$C000,d3
00005658 4843                       		swap	d3
0000565A                            
0000565A                            loc_491C:
0000565A D4FC 0080                  		adda.w	#$80,a2
0000565E 51CF FF9C                  		dbf	d7,loc_48BE
00005662 43F9 00FF 0000             		lea	($FF0000).l,a1
00005668 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
0000566E 303C 4000                  		move.w	#$4000,d0
00005672 6100 C990                  		bsr.w	EniDec
00005676 43F9 00FF 0000             		lea	($FF0000).l,a1
0000567C 203C 4000 0003             		move.l	#$40000003,d0
00005682 723F                       		moveq	#$3F,d1
00005684 741F                       		moveq	#$1F,d2
00005686 6100 C67E                  		bsr.w	ShowVDPGraphics
0000568A 43F9 00FF 0000             		lea	($FF0000).l,a1
00005690 203C 5000 0003             		move.l	#$50000003,d0
00005696 723F                       		moveq	#$3F,d1
00005698 743F                       		moveq	#$3F,d2
0000569A 6100 C66A                  		bsr.w	ShowVDPGraphics
0000569E 4E75                       		rts	
000056A0                            ; End of function SS_BGLoad
000056A0                            
000056A0                            ; ---------------------------------------------------------------------------
000056A0                            ; Pallet cycling routine - special stage
000056A0                            ; ---------------------------------------------------------------------------
000056A0                            
000056A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000056A0                            
000056A0                            
000056A0                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
000056A0 4A78 F63A                  		tst.w	($FFFFF63A).w
000056A4 6600                       		bne.s	locret_49E6
000056A6 5378 F79C                  		subq.w	#1,($FFFFF79C).w
000056AA 6A00                       		bpl.s	locret_49E6
000056AC 4DF9 00C0 0004             		lea	($C00004).l,a6
000056B2 3038 F79A                  		move.w	($FFFFF79A).w,d0
000056B6 5278 F79A                  		addq.w	#1,($FFFFF79A).w
000056BA 0240 001F                  		andi.w	#$1F,d0
000056BE E548                       		lsl.w	#2,d0
000056C0 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000056C6 D0C0                       		adda.w	d0,a0
000056C8 1018                       		move.b	(a0)+,d0
000056CA 6A00                       		bpl.s	loc_4992
000056CC 303C 01FF                  		move.w	#$1FF,d0
000056D0                            
000056D0                            loc_4992:
000056D0 31C0 F79C                  		move.w	d0,($FFFFF79C).w
000056D4 7000                       		moveq	#0,d0
000056D6 1018                       		move.b	(a0)+,d0
000056D8 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
000056DC 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000056E2 43F1 0000                  		lea	(a1,d0.w),a1
000056E6 303C 8200                  		move.w	#-$7E00,d0
000056EA 1019                       		move.b	(a1)+,d0
000056EC 3C80                       		move.w	d0,(a6)
000056EE 11D1 F616                  		move.b	(a1),($FFFFF616).w
000056F2 303C 8400                  		move.w	#-$7C00,d0
000056F6 1018                       		move.b	(a0)+,d0
000056F8 3C80                       		move.w	d0,(a6)
000056FA 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00005704 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
0000570C 7000                       		moveq	#0,d0
0000570E 1018                       		move.b	(a0)+,d0
00005710 6B00                       		bmi.s	loc_49E8
00005712 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005718 D2C0                       		adda.w	d0,a1
0000571A 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
0000571E 24D9                       		move.l	(a1)+,(a2)+
00005720 24D9                       		move.l	(a1)+,(a2)+
00005722 24D9                       		move.l	(a1)+,(a2)+
00005724                            
00005724                            locret_49E6:
00005724 4E75                       		rts	
00005726                            ; ===========================================================================
00005726                            
00005726                            loc_49E8:				; XREF: PalCycle_SS
00005726 3238 F79E                  		move.w	($FFFFF79E).w,d1
0000572A 0C40 008A                  		cmpi.w	#$8A,d0
0000572E 6500                       		bcs.s	loc_49F4
00005730 5241                       		addq.w	#1,d1
00005732                            
00005732                            loc_49F4:
00005732 C2FC 002A                  		mulu.w	#$2A,d1
00005736 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
0000573C D2C1                       		adda.w	d1,a1
0000573E 0240 007F                  		andi.w	#$7F,d0
00005742 0880 0000                  		bclr	#0,d0
00005746 6700                       		beq.s	loc_4A18
00005748 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
0000574C 24D1                       		move.l	(a1),(a2)+
0000574E 24E9 0004                  		move.l	4(a1),(a2)+
00005752 24E9 0008                  		move.l	8(a1),(a2)+
00005756                            
00005756                            loc_4A18:
00005756 D2FC 000C                  		adda.w	#$C,a1
0000575A 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
0000575E 0C40 000A                  		cmpi.w	#$A,d0
00005762 6500                       		bcs.s	loc_4A2E
00005764 0440 000A                  		subi.w	#$A,d0
00005768 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
0000576C                            
0000576C                            loc_4A2E:
0000576C 3200                       		move.w	d0,d1
0000576E D040                       		add.w	d0,d0
00005770 D041                       		add.w	d1,d0
00005772 D2C0                       		adda.w	d0,a1
00005774 24D9                       		move.l	(a1)+,(a2)+
00005776 34D9                       		move.w	(a1)+,(a2)+
00005778 4E75                       		rts	
0000577A                            ; End of function PalCycle_SS
0000577A                            
0000577A                            ; ===========================================================================
0000577A 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
0000578A                            					; XREF: PalCycle_SS
0000578A 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
0000579A 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000057AA FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
000057BA 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
000057CA 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
000057DA 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
000057EA FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
000057FA                            		even
000057FA 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005808                            					; XREF: PalCycle_SS
00005808                            		even
00005808                            
00005808                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00005850                            		even
00005850                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005922                            		even
00005922                            
00005922                            ; ---------------------------------------------------------------------------
00005922                            ; Subroutine to	make the special stage background animated
00005922                            ; ---------------------------------------------------------------------------
00005922                            
00005922                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005922                            
00005922                            
00005922                            SS_BGAnimate:				; XREF: SpecialStage
00005922 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005926 6600                       		bne.s	loc_4BF6
00005928 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000592E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005934                            
00005934                            loc_4BF6:
00005934 0C40 0008                  		cmpi.w	#8,d0
00005938 6400                       		bcc.s	loc_4C4E
0000593A 0C40 0006                  		cmpi.w	#6,d0
0000593E 6600                       		bne.s	loc_4C10
00005940 5278 F718                  		addq.w	#1,($FFFFF718).w
00005944 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005948 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000594E                            
0000594E                            loc_4C10:
0000594E 7000                       		moveq	#0,d0
00005950 3038 F708                  		move.w	($FFFFF708).w,d0
00005954 4440                       		neg.w	d0
00005956 4840                       		swap	d0
00005958 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000595E 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005962 7609                       		moveq	#9,d3
00005964                            
00005964                            loc_4C26:
00005964 302B 0002                  		move.w	2(a3),d0
00005968 6100 DABA                  		bsr.w	CalcSine
0000596C 7400                       		moveq	#0,d2
0000596E 1419                       		move.b	(a1)+,d2
00005970 C1C2                       		muls.w	d2,d0
00005972 E080                       		asr.l	#8,d0
00005974 36C0                       		move.w	d0,(a3)+
00005976 1419                       		move.b	(a1)+,d2
00005978 4882                       		ext.w	d2
0000597A D55B                       		add.w	d2,(a3)+
0000597C 51CB FFE6                  		dbf	d3,loc_4C26
00005980 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005984 45F9 0000 0000             		lea	(byte_4CB8).l,a2
0000598A 6000                       		bra.s	loc_4C7E
0000598C                            ; ===========================================================================
0000598C                            
0000598C                            loc_4C4E:				; XREF: SS_BGAnimate
0000598C 0C40 000C                  		cmpi.w	#$C,d0
00005990 6600                       		bne.s	loc_4C74
00005992 5378 F718                  		subq.w	#1,($FFFFF718).w
00005996 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000599A 243C 0001 8000             		move.l	#$18000,d2
000059A0 7206                       		moveq	#6,d1
000059A2                            
000059A2                            loc_4C64:
000059A2 2013                       		move.l	(a3),d0
000059A4 9082                       		sub.l	d2,d0
000059A6 26C0                       		move.l	d0,(a3)+
000059A8 0482 0000 2000             		subi.l	#$2000,d2
000059AE 51C9 FFF2                  		dbf	d1,loc_4C64
000059B2                            
000059B2                            loc_4C74:
000059B2 47F8 AB00                  		lea	($FFFFAB00).w,a3
000059B6 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000059BC                            
000059BC                            loc_4C7E:
000059BC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000059C0 3038 F718                  		move.w	($FFFFF718).w,d0
000059C4 4440                       		neg.w	d0
000059C6 4840                       		swap	d0
000059C8 7600                       		moveq	#0,d3
000059CA 161A                       		move.b	(a2)+,d3
000059CC 3438 F70C                  		move.w	($FFFFF70C).w,d2
000059D0 4442                       		neg.w	d2
000059D2 0242 00FF                  		andi.w	#$FF,d2
000059D6 E54A                       		lsl.w	#2,d2
000059D8                            
000059D8                            loc_4C9A:
000059D8 301B                       		move.w	(a3)+,d0
000059DA 544B                       		addq.w	#2,a3
000059DC 7200                       		moveq	#0,d1
000059DE 121A                       		move.b	(a2)+,d1
000059E0 5341                       		subq.w	#1,d1
000059E2                            
000059E2                            loc_4CA4:
000059E2 2380 2000                  		move.l	d0,(a1,d2.w)
000059E6 5842                       		addq.w	#4,d2
000059E8 0242 03FC                  		andi.w	#$3FC,d2
000059EC 51C9 FFF4                  		dbf	d1,loc_4CA4
000059F0 51CB FFE6                  		dbf	d3,loc_4C9A
000059F4 4E75                       		rts	
000059F6                            ; End of function SS_BGAnimate
000059F6                            
000059F6                            ; ===========================================================================
000059F6 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005A02                            		even
00005A02 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005A0A                            		even
00005A0A 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005A1E                            		even
00005A1E                            					; XREF: SS_BGAnimate
00005A1E                            ; ===========================================================================
00005A1E                            
00005A1E                            ; ---------------------------------------------------------------------------
00005A1E                            ; Continue screen
00005A1E                            ; ---------------------------------------------------------------------------
00005A1E                            
00005A1E                            ContinueScreen:				; XREF: GameModeArray
00005A1E 6100 CCEC                  		bsr.w	Pal_FadeFrom
00005A22 46FC 2700                  		move	#$2700,sr
00005A26 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005A2A 0200 00BF                  		andi.b	#$BF,d0
00005A2E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005A34 4DF9 00C0 0004             		lea	($C00004).l,a6
00005A3A 3CBC 8004                  		move.w	#$8004,(a6)
00005A3E 3CBC 8700                  		move.w	#$8700,(a6)
00005A42 6100 C164                  		bsr.w	ClearScreen
00005A46 43F8 D000                  		lea	($FFFFD000).w,a1
00005A4A 7000                       		moveq	#0,d0
00005A4C 323C 07FF                  		move.w	#$7FF,d1
00005A50                            
00005A50                            Cont_ClrObjRam:
00005A50 22C0                       		move.l	d0,(a1)+
00005A52 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005A56                            
00005A56 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005A60 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005A66 6100 C2BE                  		bsr.w	NemDec
00005A6A 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00005A74 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005A7A 6100 C2AA                  		bsr.w	NemDec
00005A7E 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005A88 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005A8E 6100 C296                  		bsr.w	NemDec
00005A92 720A                       		moveq	#10,d1
00005A94 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00005A9A 7012                       		moveq	#$12,d0
00005A9C 6100 CF18                  		bsr.w	PalLoad1	; load continue	screen pallet
00005AA0 103C 0090                  		move.b	#$90,d0
00005AA4 6100 C1D6                  		bsr.w	PlaySound	; play continue	music
00005AA8 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00005AAE 42B8 F700                  		clr.l	($FFFFF700).w
00005AB2 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00005ABA 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00005AC0 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005AC6 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00005ACC 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00005AD2 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005AD8 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00005ADE 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005AE4 4EB9 0000 0000             		jsr	ObjectsLoad
00005AEA 4EB9 0000 0000             		jsr	BuildSprites
00005AF0 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005AF4 0000 0040                  		ori.b	#$40,d0
00005AF8 33C0 00C0 0004             		move.w	d0,($C00004).l
00005AFE 6100 CB62                  		bsr.w	Pal_FadeTo
00005B02                            
00005B02                            ; ---------------------------------------------------------------------------
00005B02                            ; Continue screen main loop
00005B02                            ; ---------------------------------------------------------------------------
00005B02                            
00005B02                            Cont_MainLoop:
00005B02 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005B08 6100 D8E8                  		bsr.w	DelayProgram
00005B0C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005B12 6400                       		bcc.s	loc_4DF2
00005B14 46FC 2700                  		move	#$2700,sr
00005B18 3238 F614                  		move.w	($FFFFF614).w,d1
00005B1C 82FC 003C                  		divu.w	#$3C,d1
00005B20 0281 0000 000F             		andi.l	#$F,d1
00005B26 4EB9 0000 0000             		jsr	ContScrCounter
00005B2C 46FC 2300                  		move	#$2300,sr
00005B30                            
00005B30                            loc_4DF2:
00005B30 4EB9 0000 0000             		jsr	ObjectsLoad
00005B36 4EB9 0000 0000             		jsr	BuildSprites
00005B3C 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005B42 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005B44 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005B4A 64B6                       		bcc.s	Cont_MainLoop
00005B4C 4A78 F614                  		tst.w	($FFFFF614).w
00005B50 6600 FFB0                  		bne.w	Cont_MainLoop
00005B54 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005B5A 4E75                       		rts	
00005B5C                            ; ===========================================================================
00005B5C                            
00005B5C                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005B5C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005B62 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005B68 7000                       		moveq	#0,d0
00005B6A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005B6E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005B72 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005B76 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005B7A 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005B7E 4E75                       		rts	
00005B80                            ; ===========================================================================
00005B80                            
00005B80                            ; ---------------------------------------------------------------------------
00005B80                            ; Object 80 - Continue screen elements
00005B80                            ; ---------------------------------------------------------------------------
00005B80                            
00005B80                            Obj80:					; XREF: Obj_Index
00005B80 7000                       		moveq	#0,d0
00005B82 1028 0024                  		move.b	$24(a0),d0
00005B86 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005B8A 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005B8E                            ; ===========================================================================
00005B8E 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005B90 0000                       		dc.w Obj80_Display-Obj80_Index
00005B92 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005B94 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005B96                            ; ===========================================================================
00005B96                            
00005B96                            Obj80_Main:				; XREF: Obj80_Index
00005B96 5428 0024                  		addq.b	#2,$24(a0)
00005B9A 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005BA2 317C 8500 0002             		move.w	#$8500,2(a0)
00005BA8 117C 0000 0001             		move.b	#0,1(a0)
00005BAE 117C 003C 0019             		move.b	#$3C,$19(a0)
00005BB4 317C 0120 0008             		move.w	#$120,8(a0)
00005BBA 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005BC0 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005BC6                            
00005BC6                            Obj80_Display:				; XREF: Obj80_Index
00005BC6 4EF9 0000 0000             		jmp	DisplaySprite
00005BCC                            ; ===========================================================================
00005BCC                            Obj80_MiniSonicPos:
00005BCC 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005BDE 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005BEA                            ; ===========================================================================
00005BEA                            
00005BEA                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00005BEA 2248                       		movea.l	a0,a1
00005BEC 45F9 0000 5BCC             		lea	(Obj80_MiniSonicPos).l,a2
00005BF2 7200                       		moveq	#0,d1
00005BF4 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005BF8 5501                       		subq.b	#2,d1
00005BFA 6400                       		bcc.s	loc_4EC4
00005BFC 4EF9 0000 0000             		jmp	DeleteObject
00005C02                            ; ===========================================================================
00005C02                            
00005C02                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005C02 7601                       		moveq	#1,d3
00005C04 0C01 000E                  		cmpi.b	#$E,d1
00005C08 6500                       		bcs.s	loc_4ED0
00005C0A 7600                       		moveq	#0,d3
00005C0C 720E                       		moveq	#$E,d1
00005C0E                            
00005C0E                            loc_4ED0:
00005C0E 1401                       		move.b	d1,d2
00005C10 0202 0001                  		andi.b	#1,d2
00005C14                            
00005C14                            Obj80_MiniSonLoop:
00005C14 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005C18 335A 0008                  		move.w	(a2)+,8(a1)
00005C1C 4A02                       		tst.b	d2
00005C1E 6700                       		beq.s	loc_4EEA
00005C20 0469 000A 0008             		subi.w	#$A,8(a1)
00005C26                            
00005C26                            loc_4EEA:
00005C26 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005C2C 137C 0006 001A             		move.b	#6,$1A(a1)
00005C32 137C 0006 0024             		move.b	#6,$24(a1)
00005C38 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005C40 337C 8551 0002             		move.w	#$8551,2(a1)
00005C46 137C 0000 0001             		move.b	#0,1(a1)
00005C4C 43E9 0040                  		lea	$40(a1),a1
00005C50 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005C54 43E9 FFC0                  		lea	-$40(a1),a1
00005C58 1343 0028                  		move.b	d3,$28(a1)
00005C5C                            
00005C5C                            Obj80_ChkType:				; XREF: Obj80_Index
00005C5C 4A28 0028                  		tst.b	$28(a0)
00005C60 6700                       		beq.s	loc_4F40
00005C62 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005C68 6500                       		bcs.s	loc_4F40
00005C6A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005C6E 0200 0001                  		andi.b	#1,d0
00005C72 6600                       		bne.s	loc_4F40
00005C74 4A78 D010                  		tst.w	($FFFFD010).w
00005C78 6600                       		bne.s	Obj80_Delete
00005C7A 4E75                       		rts	
00005C7C                            ; ===========================================================================
00005C7C                            
00005C7C                            loc_4F40:				; XREF: Obj80_ChkType
00005C7C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005C80 0200 000F                  		andi.b	#$F,d0
00005C84 6600                       		bne.s	Obj80_Display2
00005C86 0868 0000 001A             		bchg	#0,$1A(a0)
00005C8C                            
00005C8C                            Obj80_Display2:
00005C8C 4EF9 0000 0000             		jmp	DisplaySprite
00005C92                            ; ===========================================================================
00005C92                            
00005C92                            Obj80_Delete:				; XREF: Obj80_ChkType
00005C92 4EF9 0000 0000             		jmp	DeleteObject
00005C98                            ; ===========================================================================
00005C98                            
00005C98                            ; ---------------------------------------------------------------------------
00005C98                            ; Object 81 - Sonic on the continue screen
00005C98                            ; ---------------------------------------------------------------------------
00005C98                            
00005C98                            Obj81:					; XREF: Obj_Index
00005C98 7000                       		moveq	#0,d0
00005C9A 1028 0024                  		move.b	$24(a0),d0
00005C9E 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00005CA2 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005CA6 4EF9 0000 0000             		jmp	DisplaySprite
00005CAC                            ; ===========================================================================
00005CAC 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00005CAE 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00005CB0 0000                       		dc.w Obj81_Animate-Obj81_Index
00005CB2 0000                       		dc.w Obj81_Run-Obj81_Index
00005CB4                            ; ===========================================================================
00005CB4                            
00005CB4                            Obj81_Main:				; XREF: Obj81_Index
00005CB4 5428 0024                  		addq.b	#2,$24(a0)
00005CB8 317C 00A0 0008             		move.w	#$A0,8(a0)
00005CBE 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005CC4 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005CCC 317C 0780 0002             		move.w	#$780,2(a0)
00005CD2 117C 0004 0001             		move.b	#4,1(a0)
00005CD8 117C 0002 0018             		move.b	#2,$18(a0)
00005CDE 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005CE4 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005CEA                            
00005CEA                            Obj81_ChkLand:				; XREF: Obj81_Index
00005CEA 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005CF0 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005CF2 5428 0024                  		addq.b	#2,$24(a0)
00005CF6 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005CFA 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005D02 317C 8500 0002             		move.w	#$8500,2(a0)
00005D08 117C 0000 001C             		move.b	#0,$1C(a0)
00005D0E 6000                       		bra.s	Obj81_Animate
00005D10                            ; ===========================================================================
00005D10                            
00005D10                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005D10 4EB9 0000 0000             		jsr	SpeedToPos
00005D16 4EB9 0000 0000             		jsr	Sonic_Animate
00005D1C 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005D22                            ; ===========================================================================
00005D22                            
00005D22                            Obj81_Animate:				; XREF: Obj81_Index
00005D22 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005D26 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005D28 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005D2E 4EF9 0000 0000             		jmp	AnimateSprite
00005D34                            ; ===========================================================================
00005D34                            
00005D34                            Obj81_GetUp:				; XREF: Obj81_Animate
00005D34 5428 0024                  		addq.b	#2,$24(a0)
00005D38 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005D40 317C 0780 0002             		move.w	#$780,2(a0)
00005D46 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005D4C 4268 0014                  		clr.w	$14(a0)
00005D50 5168 000C                  		subq.w	#8,$C(a0)
00005D54 103C 00E0                  		move.b	#$E0,d0
00005D58 6100 BF28                  		bsr.w	PlaySound_Special ; fade out music
00005D5C                            
00005D5C                            Obj81_Run:				; XREF: Obj81_Index
00005D5C 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005D62 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005D64 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005D6A 6000                       		bra.s	Obj81_ShowRun
00005D6C                            ; ===========================================================================
00005D6C                            
00005D6C                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005D6C 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005D72                            
00005D72                            Obj81_ShowRun:				; XREF: Obj81_Run
00005D72 4EB9 0000 0000             		jsr	SpeedToPos
00005D78 4EB9 0000 0000             		jsr	Sonic_Animate
00005D7E 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005D84                            ; ===========================================================================
00005D84                            Ani_obj81:
00005D84                            	include "_anim\obj81.asm"
00005D84                            ; ---------------------------------------------------------------------------
00005D84                            ; Animation script - Sonic on the continue screen
00005D84                            ; ---------------------------------------------------------------------------
00005D84 0000                       		dc.w byte_504A-Ani_obj81
00005D86 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005D92 00                         		even
00005D92 00                         		even
00005D92                            
00005D92                            ; ---------------------------------------------------------------------------
00005D92                            ; Sprite mappings - Continue screen
00005D92                            ; ---------------------------------------------------------------------------
00005D92                            Map_obj80:
00005D92                            	include "_maps\obj80.asm"
00005D92                            ; ---------------------------------------------------------------------------
00005D92                            ; Sprite mappings - Continue screen
00005D92                            ; ---------------------------------------------------------------------------
00005D92 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005D96 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005D9A 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005D9E 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005DA2 0B                         byte_5066:	dc.b $B
00005DA3 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005DA8 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005DAD F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005DB2 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005DB7 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005DBC F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005DC1 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005DC6 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005DCB 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005DD0 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005DD5 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005DDA 03                         byte_509E:	dc.b 3
00005DDB 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005DE0 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005DE5 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005DEA 03                         byte_50AE:	dc.b 3
00005DEB 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005DF0 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005DF5 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005DFA 03                         byte_50BE:	dc.b 3
00005DFB 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005E00 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005E05 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005E0A 02                         byte_50CE:	dc.b 2
00005E0B 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005E10 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005E15 01                         byte_50D9:	dc.b 1
00005E16 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005E1B 01                         byte_50DF:	dc.b 1
00005E1C 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005E22 00                         		even
00005E22 00                         		even
00005E22                            
00005E22                            ; ===========================================================================
00005E22                            ; ---------------------------------------------------------------------------
00005E22                            ; Ending sequence in Green Hill	Zone
00005E22                            ; ---------------------------------------------------------------------------
00005E22                            
00005E22                            EndingSequence:				; XREF: GameModeArray
00005E22 103C 00E4                  		move.b	#$E4,d0
00005E26 6100 BE5A                  		bsr.w	PlaySound_Special ; stop music
00005E2A 6100 C8E0                  		bsr.w	Pal_FadeFrom
00005E2E 43F8 D000                  		lea	($FFFFD000).w,a1
00005E32 7000                       		moveq	#0,d0
00005E34 323C 07FF                  		move.w	#$7FF,d1
00005E38                            
00005E38                            End_ClrObjRam:
00005E38 22C0                       		move.l	d0,(a1)+
00005E3A 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005E3E                            
00005E3E 43F8 F628                  		lea	($FFFFF628).w,a1
00005E42 7000                       		moveq	#0,d0
00005E44 323C 0015                  		move.w	#$15,d1
00005E48                            
00005E48                            End_ClrRam:
00005E48 22C0                       		move.l	d0,(a1)+
00005E4A 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005E4E                            
00005E4E 43F8 F700                  		lea	($FFFFF700).w,a1
00005E52 7000                       		moveq	#0,d0
00005E54 323C 003F                  		move.w	#$3F,d1
00005E58                            
00005E58                            End_ClrRam2:
00005E58 22C0                       		move.l	d0,(a1)+
00005E5A 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005E5E                            
00005E5E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005E62 7000                       		moveq	#0,d0
00005E64 323C 0047                  		move.w	#$47,d1
00005E68                            
00005E68                            End_ClrRam3:
00005E68 22C0                       		move.l	d0,(a1)+
00005E6A 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005E6E                            
00005E6E 46FC 2700                  		move	#$2700,sr
00005E72 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005E76 0200 00BF                  		andi.b	#$BF,d0
00005E7A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005E80 6100 BD26                  		bsr.w	ClearScreen
00005E84 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E8A 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E8E 3CBC 8230                  		move.w	#$8230,(a6)
00005E92 3CBC 8407                  		move.w	#$8407,(a6)
00005E96 3CBC 857C                  		move.w	#$857C,(a6)
00005E9A 3CBC 9001                  		move.w	#$9001,(a6)
00005E9E 3CBC 8004                  		move.w	#$8004,(a6)
00005EA2 3CBC 8720                  		move.w	#$8720,(a6)
00005EA6 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005EAC 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005EB0 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005EB6 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005EBC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005EC2 6700                       		beq.s	End_LoadData	; if yes, branch
00005EC4 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005ECA                            
00005ECA                            End_LoadData:
00005ECA 701C                       		moveq	#$1C,d0
00005ECC 6100 C104                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005ED0 4EB9 0000 0000             		jsr	Hud_Base
00005ED6 6100 0000                  		bsr.w	LevelSizeLoad
00005EDA 6100 0000                  		bsr.w	DeformBgLayer
00005EDE 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005EE4 6100 0000                  		bsr.w	MainLoadBlockLoad
00005EE8 6100 0000                  		bsr.w	LoadTilesFromStart
00005EEC 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005EF4 46FC 2300                  		move	#$2300,sr
00005EF8 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005EFE 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005F02 6100 C27E                  		bsr.w	KosDec
00005F06 7003                       		moveq	#3,d0
00005F08 6100 CAAC                  		bsr.w	PalLoad1	; load Sonic's pallet
00005F0C 303C 008B                  		move.w	#$8B,d0
00005F10 6100 BD6A                  		bsr.w	PlaySound	; play ending sequence music
00005F14 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005F1A 6700                       		beq.s	End_LoadSonic	; if not, branch
00005F1C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005F22                            
00005F22                            End_LoadSonic:
00005F22 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005F28 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005F2E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005F34 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005F3A 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005F40 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005F46 4EB9 0000 0000             		jsr	ObjPosLoad
00005F4C 4EB9 0000 0000             		jsr	ObjectsLoad
00005F52 4EB9 0000 0000             		jsr	BuildSprites
00005F58 7000                       		moveq	#0,d0
00005F5A 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005F5E 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005F62 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005F66 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005F6A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005F6E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005F72 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005F76 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005F7A 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005F7E 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005F82 6100 EEE0                  		bsr.w	OscillateNumInit
00005F86 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005F8C 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005F92 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005F98 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005F9E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005FA4 6100 D44C                  		bsr.w	DelayProgram
00005FA8 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005FAC 0000 0040                  		ori.b	#$40,d0
00005FB0 33C0 00C0 0004             		move.w	d0,($C00004).l
00005FB6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005FBC 6100 C6A4                  		bsr.w	Pal_FadeTo
00005FC0                            
00005FC0                            ; ---------------------------------------------------------------------------
00005FC0                            ; Main ending sequence loop
00005FC0                            ; ---------------------------------------------------------------------------
00005FC0                            
00005FC0                            End_MainLoop:
00005FC0 6100 BCCC                  		bsr.w	PauseGame
00005FC4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005FCA 6100 D426                  		bsr.w	DelayProgram
00005FCE 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005FD2 6100 0000                  		bsr.w	End_MoveSonic
00005FD6 4EB9 0000 0000             		jsr	ObjectsLoad
00005FDC 6100 0000                  		bsr.w	DeformBgLayer
00005FE0 4EB9 0000 0000             		jsr	BuildSprites
00005FE6 4EB9 0000 0000             		jsr	ObjPosLoad
00005FEC 6100 C234                  		bsr.w	PalCycle_Load
00005FF0 6100 EEC8                  		bsr.w	OscillateNumDo
00005FF4 6100 EF54                  		bsr.w	ChangeRingFrame
00005FF8 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005FFE 6700                       		beq.s	loc_52DA	; if yes, branch
00006000 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00006006 103C 0091                  		move.b	#$91,d0
0000600A 6100 BC76                  		bsr.w	PlaySound_Special ; play credits music
0000600E 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00006014 4E75                       		rts	
00006016                            ; ===========================================================================
00006016                            
00006016                            loc_52DA:
00006016 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000601A 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000601E                            
0000601E 4278 FE02                  		clr.w	($FFFFFE02).w
00006022 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006028 4278 F794                  		clr.w	($FFFFF794).w
0000602C                            
0000602C                            End_AllEmlds:				; XREF: loc_5334
0000602C 6100 BC60                  		bsr.w	PauseGame
00006030 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006036 6100 D3BA                  		bsr.w	DelayProgram
0000603A 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000603E 6100 0000                  		bsr.w	End_MoveSonic
00006042 4EB9 0000 0000             		jsr	ObjectsLoad
00006048 6100 0000                  		bsr.w	DeformBgLayer
0000604C 4EB9 0000 0000             		jsr	BuildSprites
00006052 4EB9 0000 0000             		jsr	ObjPosLoad
00006058 6100 EE60                  		bsr.w	OscillateNumDo
0000605C 6100 EEEC                  		bsr.w	ChangeRingFrame
00006060 5378 F794                  		subq.w	#1,($FFFFF794).w
00006064 6A00                       		bpl.s	loc_5334
00006066 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000606C 6100 C7E8                  		bsr.w	Pal_ToWhite
00006070                            
00006070                            loc_5334:
00006070 4A78 FE02                  		tst.w	($FFFFFE02).w
00006074 6700 FFB6                  		beq.w	End_AllEmlds
00006078 4278 FE02                  		clr.w	($FFFFFE02).w
0000607C 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00006082 4BF9 00C0 0004             		lea	($C00004).l,a5
00006088 4DF9 00C0 0000             		lea	($C00000).l,a6
0000608E 47F8 F700                  		lea	($FFFFF700).w,a3
00006092 49F8 A400                  		lea	($FFFFA400).w,a4
00006096 343C 4000                  		move.w	#$4000,d2
0000609A 6100 0000                  		bsr.w	LoadTilesFromStart2
0000609E 7013                       		moveq	#$13,d0
000060A0 6100 C914                  		bsr.w	PalLoad1	; load ending pallet
000060A4 6100 C6E4                  		bsr.w	Pal_MakeWhite
000060A8 6000 FF16                  		bra.w	End_MainLoop
000060AC                            
000060AC                            ; ---------------------------------------------------------------------------
000060AC                            ; Subroutine controlling Sonic on the ending sequence
000060AC                            ; ---------------------------------------------------------------------------
000060AC                            
000060AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000060AC                            
000060AC                            
000060AC                            End_MoveSonic:				; XREF: End_MainLoop
000060AC 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000060B0 6600                       		bne.s	End_MoveSonic2
000060B2 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000060B8 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000060BA 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000060BE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000060C4 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000060CA 4E75                       		rts	
000060CC                            ; ===========================================================================
000060CC                            
000060CC                            End_MoveSonic2:				; XREF: End_MoveSonic
000060CC 5500                       		subq.b	#2,d0
000060CE 6600                       		bne.s	End_MoveSonic3
000060D0 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000060D6 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000060D8 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000060DC 7000                       		moveq	#0,d0
000060DE 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000060E2 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000060E6 31C0 D014                  		move.w	d0,($FFFFD014).w
000060EA 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000060F0 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000060F6 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000060FC 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00006102 4E75                       		rts	
00006104                            ; ===========================================================================
00006104                            
00006104                            End_MoveSonic3:				; XREF: End_MoveSonic
00006104 5500                       		subq.b	#2,d0
00006106 6600                       		bne.s	End_MoveSonExit
00006108 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000610C 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00006112 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00006118 4278 D024                  		clr.w	($FFFFD024).w
0000611C                            
0000611C                            End_MoveSonExit:
0000611C 4E75                       		rts	
0000611E                            ; End of function End_MoveSonic
0000611E                            
0000611E                            ; ===========================================================================
0000611E                            ; ---------------------------------------------------------------------------
0000611E                            ; Object 87 - Sonic on ending sequence
0000611E                            ; ---------------------------------------------------------------------------
0000611E                            
0000611E                            Obj87:					; XREF: Obj_Index
0000611E 7000                       		moveq	#0,d0
00006120 1028 0025                  		move.b	$25(a0),d0
00006124 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00006128 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
0000612C 4EF9 0000 0000             		jmp	DisplaySprite
00006132                            ; ===========================================================================
00006132 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00006136 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
0000613A 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
0000613E 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00006142 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00006146                            ; ===========================================================================
00006146                            
00006146                            Obj87_Main:				; XREF: Obj87_Index
00006146 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000614C 6700                       		beq.s	Obj87_Main2	; if yes, branch
0000614E 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00006154 317C 00D8 0030             		move.w	#$D8,$30(a0)
0000615A 4E75                       		rts	
0000615C                            ; ===========================================================================
0000615C                            
0000615C                            Obj87_Main2:				; XREF: Obj87_Main
0000615C 5428 0025                  		addq.b	#2,$25(a0)
00006160 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006168 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000616E 117C 0004 0001             		move.b	#4,1(a0)
00006174 4228 0022                  		clr.b	$22(a0)
00006178 117C 0002 0018             		move.b	#2,$18(a0)
0000617E 117C 0000 001A             		move.b	#0,$1A(a0)
00006184 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
0000618A                            
0000618A                            Obj87_MakeEmlds:			; XREF: Obj87_Index
0000618A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000618E 6600                       		bne.s	Obj87_Wait
00006190 5428 0025                  		addq.b	#2,$25(a0)
00006194 317C 0001 001C             		move.w	#1,$1C(a0)
0000619A 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000061A0                            
000061A0                            Obj87_Wait:
000061A0 4E75                       		rts	
000061A2                            ; ===========================================================================
000061A2                            
000061A2                            Obj87_LookUp:				; XREF: Obj87_Index
000061A2 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000061AA 6600                       		bne.s	locret_5480
000061AC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000061B2 317C 005A 0030             		move.w	#$5A,$30(a0)
000061B8 5428 0025                  		addq.b	#2,$25(a0)
000061BC                            
000061BC                            locret_5480:
000061BC 4E75                       		rts	
000061BE                            ; ===========================================================================
000061BE                            
000061BE                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000061BE 5368 0030                  		subq.w	#1,$30(a0)
000061C2 6600                       		bne.s	Obj87_Wait2
000061C4 43F8 D400                  		lea	($FFFFD400).w,a1
000061C8 323C 00FF                  		move.w	#$FF,d1
000061CC                            
000061CC                            Obj87_ClrLoop:
000061CC 4299                       		clr.l	(a1)+
000061CE 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000061D2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000061D8 5428 0025                  		addq.b	#2,$25(a0)
000061DC 117C 0001 001C             		move.b	#1,$1C(a0)
000061E2 317C 003C 0030             		move.w	#$3C,$30(a0)
000061E8                            
000061E8                            Obj87_Wait2:
000061E8 4E75                       		rts	
000061EA                            ; ===========================================================================
000061EA                            
000061EA                            Obj87_MakeLogo:				; XREF: Obj87_Index
000061EA 5368 0030                  		subq.w	#1,$30(a0)
000061EE 6600                       		bne.s	Obj87_Wait3
000061F0 5428 0025                  		addq.b	#2,$25(a0)
000061F4 317C 00B4 0030             		move.w	#$B4,$30(a0)
000061FA 117C 0002 001C             		move.b	#2,$1C(a0)
00006200 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00006206                            
00006206                            Obj87_Wait3:
00006206 4E75                       		rts	
00006208                            ; ===========================================================================
00006208                            
00006208                            Obj87_Animate:				; XREF: Obj87_Index
00006208 43F9 0000 0000             		lea	(Ani_obj87).l,a1
0000620E 4EF9 0000 0000             		jmp	AnimateSprite
00006214                            ; ===========================================================================
00006214                            
00006214                            Obj87_Leap:				; XREF: Obj87_Index
00006214 5368 0030                  		subq.w	#1,$30(a0)
00006218 6600                       		bne.s	Obj87_Wait4
0000621A 5428 0025                  		addq.b	#2,$25(a0)
0000621E 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006226 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000622C 117C 0004 0001             		move.b	#4,1(a0)
00006232 4228 0022                  		clr.b	$22(a0)
00006236 117C 0002 0018             		move.b	#2,$18(a0)
0000623C 117C 0005 001A             		move.b	#5,$1A(a0)
00006242 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00006248 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000624E 60B8                       		bra.s	Obj87_Animate
00006250                            ; ===========================================================================
00006250                            
00006250                            Obj87_Wait4:				; XREF: Obj87_Leap
00006250 4E75                       		rts	
00006252                            ; ===========================================================================
00006252                            Ani_obj87:
00006252                            	include "_anim\obj87.asm"
00006252                            ; ---------------------------------------------------------------------------
00006252                            ; Animation script - Sonic on the ending sequence
00006252                            ; ---------------------------------------------------------------------------
00006252 0000                       		dc.w byte_551C-Ani_obj87
00006254 0000                       		dc.w byte_552A-Ani_obj87
00006256 0000                       		dc.w byte_5534-Ani_obj87
00006258 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006266 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00006270 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006278                            		even
00006278                            		even
00006278                            
00006278                            ; ===========================================================================
00006278                            ; ---------------------------------------------------------------------------
00006278                            ; Object 88 - chaos emeralds on	the ending sequence
00006278                            ; ---------------------------------------------------------------------------
00006278                            
00006278                            Obj88:					; XREF: Obj_Index
00006278 7000                       		moveq	#0,d0
0000627A 1028 0024                  		move.b	$24(a0),d0
0000627E 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00006282 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00006286 4EF9 0000 0000             		jmp	DisplaySprite
0000628C                            ; ===========================================================================
0000628C 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
0000628E 0000                       		dc.w Obj88_Move-Obj88_Index
00006290                            ; ===========================================================================
00006290                            
00006290                            Obj88_Main:				; XREF: Obj88_Index
00006290 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00006296 6700                       		beq.s	Obj88_Main2
00006298 588F                       		addq.l	#4,sp
0000629A 4E75                       		rts	
0000629C                            ; ===========================================================================
0000629C                            
0000629C                            Obj88_Main2:				; XREF: Obj88_Main
0000629C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000062A2 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
000062A8 2248                       		movea.l	a0,a1
000062AA 7600                       		moveq	#0,d3
000062AC 7401                       		moveq	#1,d2
000062AE 7205                       		moveq	#5,d1
000062B0                            
000062B0                            Obj88_MainLoop:
000062B0 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000062B4 5429 0024                  		addq.b	#2,$24(a1)
000062B8 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000062C0 337C 03C5 0002             		move.w	#$3C5,2(a1)
000062C6 137C 0004 0001             		move.b	#4,1(a1)
000062CC 137C 0001 0018             		move.b	#1,$18(a1)
000062D2 3368 0008 0038             		move.w	8(a0),$38(a1)
000062D8 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000062DE 1342 001C                  		move.b	d2,$1C(a1)
000062E2 1342 001A                  		move.b	d2,$1A(a1)
000062E6 5202                       		addq.b	#1,d2
000062E8 1343 0026                  		move.b	d3,$26(a1)
000062EC 0603 002A                  		addi.b	#$2A,d3
000062F0 43E9 0040                  		lea	$40(a1),a1
000062F4 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000062F8                            
000062F8                            Obj88_Move:				; XREF: Obj88_Index
000062F8 3028 003E                  		move.w	$3E(a0),d0
000062FC D168 0026                  		add.w	d0,$26(a0)
00006300 1028 0026                  		move.b	$26(a0),d0
00006304 4EB9 0000 3424             		jsr	(CalcSine).l
0000630A 7800                       		moveq	#0,d4
0000630C 1828 003C                  		move.b	$3C(a0),d4
00006310 C3C4                       		muls.w	d4,d1
00006312 E081                       		asr.l	#8,d1
00006314 C1C4                       		muls.w	d4,d0
00006316 E080                       		asr.l	#8,d0
00006318 D268 0038                  		add.w	$38(a0),d1
0000631C D068 003A                  		add.w	$3A(a0),d0
00006320 3141 0008                  		move.w	d1,8(a0)
00006324 3140 000C                  		move.w	d0,$C(a0)
00006328 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
0000632E 6700                       		beq.s	loc_55FA
00006330 0668 0020 003C             		addi.w	#$20,$3C(a0)
00006336                            
00006336                            loc_55FA:
00006336 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
0000633C 6700                       		beq.s	loc_5608
0000633E 0668 0020 003E             		addi.w	#$20,$3E(a0)
00006344                            
00006344                            loc_5608:
00006344 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
0000634A 6700                       		beq.s	locret_5614
0000634C 5368 003A                  		subq.w	#1,$3A(a0)
00006350                            
00006350                            locret_5614:
00006350 4E75                       		rts	
00006352                            ; ===========================================================================
00006352                            ; ---------------------------------------------------------------------------
00006352                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006352                            ; ---------------------------------------------------------------------------
00006352                            
00006352                            Obj89:					; XREF: Obj_Index
00006352 7000                       		moveq	#0,d0
00006354 1028 0024                  		move.b	$24(a0),d0
00006358 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
0000635C 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00006360                            ; ===========================================================================
00006360 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00006362 0000                       		dc.w Obj89_Move-Obj89_Index
00006364 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00006366                            ; ===========================================================================
00006366                            
00006366                            Obj89_Main:				; XREF: Obj89_Index
00006366 5428 0024                  		addq.b	#2,$24(a0)
0000636A 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00006370 317C 00D8 000A             		move.w	#$D8,$A(a0)
00006376 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
0000637E 317C 05C5 0002             		move.w	#$5C5,2(a0)
00006384 117C 0000 0001             		move.b	#0,1(a0)
0000638A 117C 0000 0018             		move.b	#0,$18(a0)
00006390                            
00006390                            Obj89_Move:				; XREF: Obj89_Index
00006390 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00006396 6700                       		beq.s	Obj89_Delay	; if yes, branch
00006398 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
0000639E 4EB9 0000 0000             		jsr	DisplaySprite
000063A4                            ; ===========================================================================
000063A4                            
000063A4                            Obj89_Delay:				; XREF: Obj89_Move
000063A4 5428 0024                  		addq.b	#2,$24(a0)
000063A8 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000063AE                            
000063AE                            Obj89_GotoCredits:			; XREF: Obj89_Index
000063AE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000063B2 6A00                       		bpl.s	Obj89_Display
000063B4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000063BA                            
000063BA                            Obj89_Display:
000063BA 4EB9 0000 0000             		jsr	DisplaySprite
000063C0                            ; ===========================================================================
000063C0                            ; ---------------------------------------------------------------------------
000063C0                            ; Sprite mappings - Sonic on the ending	sequence
000063C0                            ; ---------------------------------------------------------------------------
000063C0                            Map_obj87:
000063C0                            	include "_maps\obj87.asm"
000063C0                            ; ---------------------------------------------------------------------------
000063C0                            ; Sprite mappings - Sonic on the ending	sequence
000063C0                            ; ---------------------------------------------------------------------------
000063C0 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000063C4 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000063C8 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000063CC 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000063D0 02                         byte_5690:	dc.b 2
000063D1 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000063D6 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000063DB 03                         byte_569B:	dc.b 3
000063DC FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000063E1 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000063E6 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000063EB 02                         byte_56AB:	dc.b 2
000063EC EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000063F1 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000063F6 02                         byte_56B6:	dc.b 2
000063F7 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000063FC FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00006401 02                         byte_56C1:	dc.b 2
00006402 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00006407 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
0000640C 03                         byte_56CC:	dc.b 3
0000640D EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00006412 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00006417 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
0000641C 07                         byte_56DC:	dc.b 7
0000641D B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00006422 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00006427 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
0000642C CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00006431 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00006436 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
0000643B EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00006440 18                         byte_5700:	dc.b $18
00006441 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00006446 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
0000644B 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00006450 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00006455 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
0000645A 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000645F 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00006464 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00006469 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000646E B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00006473 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00006478 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
0000647D C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00006482 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00006487 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
0000648C D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00006491 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00006496 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
0000649B E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
000064A0 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
000064A5 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
000064AA E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
000064AF F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
000064B4 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000064BA 00                         		even
000064BA 00                         		even
000064BA                            
000064BA                            ; ---------------------------------------------------------------------------
000064BA                            ; Sprite mappings - chaos emeralds on the ending sequence
000064BA                            ; ---------------------------------------------------------------------------
000064BA                            Map_obj88:
000064BA                            	include "_maps\obj88.asm"
000064BA                            ; ---------------------------------------------------------------------------
000064BA                            ; Sprite mappings - chaos emeralds on the ending sequence
000064BA                            ; ---------------------------------------------------------------------------
000064BA 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
000064BE 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
000064C2 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
000064C6 0000                       		dc.w byte_57AC-Map_obj88
000064C8 01                         byte_5788:	dc.b 1
000064C9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000064CE 01                         byte_578E:	dc.b 1
000064CF F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000064D4 01                         byte_5794:	dc.b 1
000064D5 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
000064DA 01                         byte_579A:	dc.b 1
000064DB F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
000064E0 01                         byte_57A0:	dc.b 1
000064E1 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000064E6 01                         byte_57A6:	dc.b 1
000064E7 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000064EC 01                         byte_57AC:	dc.b 1
000064ED F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000064F2                            		even
000064F2                            		even
000064F2                            
000064F2                            ; ---------------------------------------------------------------------------
000064F2                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000064F2                            ; ---------------------------------------------------------------------------
000064F2                            Map_obj89:
000064F2                            	include "_maps\obj89.asm"
000064F2                            ; ---------------------------------------------------------------------------
000064F2                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000064F2                            ; ---------------------------------------------------------------------------
000064F2 0000                       		dc.w byte_57B4-Map_obj89
000064F4 03                         byte_57B4:	dc.b 3
000064F5 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000064FA F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000064FF F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00006504                            		even
00006504                            		even
00006504                            
00006504                            ; ===========================================================================
00006504                            ; ---------------------------------------------------------------------------
00006504                            ; Credits ending sequence
00006504                            ; ---------------------------------------------------------------------------
00006504                            
00006504                            Credits:				; XREF: GameModeArray
00006504 6100 B9BE                  		bsr.w	ClearPLC
00006508 6100 C202                  		bsr.w	Pal_FadeFrom
0000650C 4DF9 00C0 0004             		lea	($C00004).l,a6
00006512 3CBC 8004                  		move.w	#$8004,(a6)
00006516 3CBC 8230                  		move.w	#$8230,(a6)
0000651A 3CBC 8407                  		move.w	#$8407,(a6)
0000651E 3CBC 9001                  		move.w	#$9001,(a6)
00006522 3CBC 9200                  		move.w	#$9200,(a6)
00006526 3CBC 8B03                  		move.w	#$8B03,(a6)
0000652A 3CBC 8720                  		move.w	#$8720,(a6)
0000652E 4238 F64E                  		clr.b	($FFFFF64E).w
00006532 6100 B674                  		bsr.w	ClearScreen
00006536 43F8 D000                  		lea	($FFFFD000).w,a1
0000653A 7000                       		moveq	#0,d0
0000653C 323C 07FF                  		move.w	#$7FF,d1
00006540                            
00006540                            Cred_ClrObjRam:
00006540 22C0                       		move.l	d0,(a1)+
00006542 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00006546                            
00006546 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00006550 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00006556 6100 B7CE                  		bsr.w	NemDec
0000655A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000655E 7000                       		moveq	#0,d0
00006560 323C 001F                  		move.w	#$1F,d1
00006564                            
00006564                            Cred_ClrPallet:
00006564 22C0                       		move.l	d0,(a1)+
00006566 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
0000656A                            
0000656A 7003                       		moveq	#3,d0
0000656C 6100 C448                  		bsr.w	PalLoad1	; load Sonic's pallet
00006570 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00006576 4EB9 0000 0000             		jsr	ObjectsLoad
0000657C 4EB9 0000 0000             		jsr	BuildSprites
00006582 6100 0000                  		bsr.w	EndingDemoLoad
00006586 7000                       		moveq	#0,d0
00006588 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000658C E948                       		lsl.w	#4,d0
0000658E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00006594 45F2 0000                  		lea	(a2,d0.w),a2
00006598 7000                       		moveq	#0,d0
0000659A 1012                       		move.b	(a2),d0
0000659C 6700                       		beq.s	loc_5862
0000659E 6100 B8C6                  		bsr.w	LoadPLC		; load level patterns
000065A2                            
000065A2                            loc_5862:
000065A2 7001                       		moveq	#1,d0
000065A4 6100 B8C0                  		bsr.w	LoadPLC		; load standard	level patterns
000065A8 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
000065AE 6100 C0B2                  		bsr.w	Pal_FadeTo
000065B2                            
000065B2                            Cred_WaitLoop:
000065B2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000065B8 6100 CE38                  		bsr.w	DelayProgram
000065BC 6100 B914                  		bsr.w	RunPLC_RAM
000065C0 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
000065C4 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
000065C6 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
000065CA 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
000065CC 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
000065D2 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
000065D6 4E75                       		rts	
000065D8                            
000065D8                            ; ---------------------------------------------------------------------------
000065D8                            ; Ending sequence demo loading subroutine
000065D8                            ; ---------------------------------------------------------------------------
000065D8                            
000065D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065D8                            
000065D8                            
000065D8                            EndingDemoLoad:				; XREF: Credits
000065D8 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000065DC 0240 000F                  		andi.w	#$F,d0
000065E0 D040                       		add.w	d0,d0
000065E2 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000065E6 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000065EA 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000065EE 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
000065F4 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
000065F6 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
000065FC 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00006602 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00006608 7000                       		moveq	#0,d0
0000660A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000660E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00006612 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00006616 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
0000661A 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00006620 6600                       		bne.s	EndDemo_Exit	; if not, branch
00006622 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00006628 45F8 FE30                  		lea	($FFFFFE30).w,a2
0000662C 303C 0008                  		move.w	#8,d0
00006630                            
00006630                            EndDemo_LampLoad:
00006630 24D9                       		move.l	(a1)+,(a2)+
00006632 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00006636                            
00006636                            EndDemo_Exit:
00006636 4E75                       		rts	
00006638                            ; End of function EndingDemoLoad
00006638                            
00006638                            ; ===========================================================================
00006638                            ; ---------------------------------------------------------------------------
00006638                            ; Levels used in the end sequence demos
00006638                            ; ---------------------------------------------------------------------------
00006638                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00006648                            
00006648                            ; ---------------------------------------------------------------------------
00006648                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00006648                            ; ---------------------------------------------------------------------------
00006648                            EndDemo_LampVar:
00006648 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
0000664A 0A00 062C 000D             		dc.w $A00, $62C, $D
00006650 0000 0000                  		dc.l 0
00006654 0000                       		dc.b 0,	0
00006656 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
0000666A 0101                       		dc.b 1,	1
0000666C                            ; ===========================================================================
0000666C                            ; ---------------------------------------------------------------------------
0000666C                            ; "TRY AGAIN" and "END"	screens
0000666C                            ; ---------------------------------------------------------------------------
0000666C                            
0000666C                            TryAgainEnd:				; XREF: Credits
0000666C 6100 B856                  		bsr.w	ClearPLC
00006670 6100 C09A                  		bsr.w	Pal_FadeFrom
00006674 4DF9 00C0 0004             		lea	($C00004).l,a6
0000667A 3CBC 8004                  		move.w	#$8004,(a6)
0000667E 3CBC 8230                  		move.w	#$8230,(a6)
00006682 3CBC 8407                  		move.w	#$8407,(a6)
00006686 3CBC 9001                  		move.w	#$9001,(a6)
0000668A 3CBC 9200                  		move.w	#$9200,(a6)
0000668E 3CBC 8B03                  		move.w	#$8B03,(a6)
00006692 3CBC 8720                  		move.w	#$8720,(a6)
00006696 4238 F64E                  		clr.b	($FFFFF64E).w
0000669A 6100 B50C                  		bsr.w	ClearScreen
0000669E 43F8 D000                  		lea	($FFFFD000).w,a1
000066A2 7000                       		moveq	#0,d0
000066A4 323C 07FF                  		move.w	#$7FF,d1
000066A8                            
000066A8                            TryAg_ClrObjRam:
000066A8 22C0                       		move.l	d0,(a1)+
000066AA 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000066AE                            
000066AE 701D                       		moveq	#$1D,d0
000066B0 6100 B920                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
000066B4 43F8 FB80                  		lea	($FFFFFB80).w,a1
000066B8 7000                       		moveq	#0,d0
000066BA 323C 001F                  		move.w	#$1F,d1
000066BE                            
000066BE                            TryAg_ClrPallet:
000066BE 22C0                       		move.l	d0,(a1)+
000066C0 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
000066C4                            
000066C4 7013                       		moveq	#$13,d0
000066C6 6100 C2EE                  		bsr.w	PalLoad1	; load ending pallet
000066CA 4278 FBC0                  		clr.w	($FFFFFBC0).w
000066CE 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
000066D4 4EB9 0000 0000             		jsr	ObjectsLoad
000066DA 4EB9 0000 0000             		jsr	BuildSprites
000066E0 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000066E6 6100 BF7A                  		bsr.w	Pal_FadeTo
000066EA                            
000066EA                            ; ---------------------------------------------------------------------------
000066EA                            ; "TRY AGAIN" and "END"	screen main loop
000066EA                            ; ---------------------------------------------------------------------------
000066EA                            TryAg_MainLoop:
000066EA 6100 B5A2                  		bsr.w	PauseGame
000066EE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000066F4 6100 CCFC                  		bsr.w	DelayProgram
000066F8 4EB9 0000 0000             		jsr	ObjectsLoad
000066FE 4EB9 0000 0000             		jsr	BuildSprites
00006704 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000670A 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000670C 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00006710 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006712 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00006718 67D0                       		beq.s	TryAg_MainLoop
0000671A                            
0000671A                            TryAg_Exit:
0000671A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006720 4E75                       		rts	
00006722                            
00006722                            ; ===========================================================================
00006722                            ; ---------------------------------------------------------------------------
00006722                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006722                            ; ---------------------------------------------------------------------------
00006722                            
00006722                            Obj8B:					; XREF: Obj_Index
00006722 7000                       		moveq	#0,d0
00006724 1028 0024                  		move.b	$24(a0),d0
00006728 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
0000672C 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00006730 4EF9 0000 0000             		jmp	DisplaySprite
00006736                            ; ===========================================================================
00006736 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00006738 0000                       		dc.w Obj8B_Animate-Obj8B_Index
0000673A 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
0000673C 0000                       		dc.w loc_5A8E-Obj8B_Index
0000673E                            ; ===========================================================================
0000673E                            
0000673E                            Obj8B_Main:				; XREF: Obj8B_Index
0000673E 5428 0024                  		addq.b	#2,$24(a0)
00006742 317C 0120 0008             		move.w	#$120,8(a0)
00006748 317C 00F4 000A             		move.w	#$F4,$A(a0)
0000674E 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00006756 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000675C 117C 0000 0001             		move.b	#0,1(a0)
00006762 117C 0002 0018             		move.b	#2,$18(a0)
00006768 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
0000676E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006774 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00006776 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
0000677C 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00006782 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00006788 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
0000678E                            
0000678E                            Obj8B_Animate:				; XREF: Obj8B_Index
0000678E 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00006794 4EF9 0000 0000             		jmp	AnimateSprite
0000679A                            ; ===========================================================================
0000679A                            
0000679A                            Obj8B_Juggle:				; XREF: Obj8B_Index
0000679A 5428 0024                  		addq.b	#2,$24(a0)
0000679E 7002                       		moveq	#2,d0
000067A0 0828 0000 001C             		btst	#0,$1C(a0)
000067A6 6700                       		beq.s	loc_5A6A
000067A8 4440                       		neg.w	d0
000067AA                            
000067AA                            loc_5A6A:
000067AA 43F8 D800                  		lea	($FFFFD800).w,a1
000067AE 7205                       		moveq	#5,d1
000067B0                            
000067B0                            loc_5A70:
000067B0 1340 003E                  		move.b	d0,$3E(a1)
000067B4 3400                       		move.w	d0,d2
000067B6 E742                       		asl.w	#3,d2
000067B8 D529 0026                  		add.b	d2,$26(a1)
000067BC 43E9 0040                  		lea	$40(a1),a1
000067C0 51C9 FFEE                  		dbf	d1,loc_5A70
000067C4 5228 001A                  		addq.b	#1,$1A(a0)
000067C8 317C 0070 0030             		move.w	#112,$30(a0)
000067CE                            
000067CE                            loc_5A8E:				; XREF: Obj8B_Index
000067CE 5368 0030                  		subq.w	#1,$30(a0)
000067D2 6A00                       		bpl.s	locret_5AA0
000067D4 0868 0000 001C             		bchg	#0,$1C(a0)
000067DA 117C 0002 0024             		move.b	#2,$24(a0)
000067E0                            
000067E0                            locret_5AA0:
000067E0 4E75                       		rts	
000067E2                            ; ===========================================================================
000067E2                            Ani_obj8B:
000067E2                            	include "_anim\obj8B.asm"
000067E2                            ; ---------------------------------------------------------------------------
000067E2                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000067E2                            ; ---------------------------------------------------------------------------
000067E2 0000                       		dc.w byte_5AA8-Ani_obj8B
000067E4 0000                       		dc.w byte_5AAC-Ani_obj8B
000067E6 0000                       		dc.w byte_5AB0-Ani_obj8B
000067E8 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000067EC 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000067F0 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00006802                            		even
00006802                            		even
00006802                            
00006802                            ; ===========================================================================
00006802                            ; ---------------------------------------------------------------------------
00006802                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006802                            ; ---------------------------------------------------------------------------
00006802                            
00006802                            Obj8C:					; XREF: Obj_Index
00006802 7000                       		moveq	#0,d0
00006804 1028 0024                  		move.b	$24(a0),d0
00006808 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
0000680C 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006810 4EF9 0000 0000             		jmp	DisplaySprite
00006816                            ; ===========================================================================
00006816 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00006818 0000                       		dc.w Obj8C_Move-Obj8C_Index
0000681A                            ; ===========================================================================
0000681A                            
0000681A                            Obj8C_Main:				; XREF: Obj8C_Index
0000681A 2248                       		movea.l	a0,a1
0000681C 7400                       		moveq	#0,d2
0000681E 7600                       		moveq	#0,d3
00006820 7205                       		moveq	#5,d1
00006822 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00006826                            
00006826                            Obj8C_MakeEms:				; XREF: loc_5B42
00006826 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
0000682A 5429 0024                  		addq.b	#2,$24(a1)
0000682E 237C 0000 64BA 0004        		move.l	#Map_obj88,4(a1)
00006836 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000683C 137C 0000 0001             		move.b	#0,1(a1)
00006842 137C 0001 0018             		move.b	#1,$18(a1)
00006848 337C 0104 0008             		move.w	#$104,8(a1)
0000684E 337C 0120 0038             		move.w	#$120,$38(a1)
00006854 337C 00EC 000A             		move.w	#$EC,$A(a1)
0000685A 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00006860 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006866 47F8 FE58                  		lea	($FFFFFE58).w,a3
0000686A                            
0000686A                            Obj8C_ChkEms:
0000686A 7000                       		moveq	#0,d0
0000686C 1038 FE57                  		move.b	($FFFFFE57).w,d0
00006870 5340                       		subq.w	#1,d0
00006872 6500                       		bcs.s	loc_5B42
00006874                            
00006874                            Obj8C_ChkEmLoop:
00006874 B433 0000                  		cmp.b	(a3,d0.w),d2
00006878 6600                       		bne.s	loc_5B3E
0000687A 5202                       		addq.b	#1,d2
0000687C 60EC                       		bra.s	Obj8C_ChkEms
0000687E                            ; ===========================================================================
0000687E                            
0000687E                            loc_5B3E:
0000687E 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00006882                            
00006882                            loc_5B42:
00006882 1342 001A                  		move.b	d2,$1A(a1)
00006886 5229 001A                  		addq.b	#1,$1A(a1)
0000688A 5202                       		addq.b	#1,d2
0000688C 137C 0080 0026             		move.b	#$80,$26(a1)
00006892 1343 001E                  		move.b	d3,$1E(a1)
00006896 1343 001F                  		move.b	d3,$1F(a1)
0000689A 0643 000A                  		addi.w	#$A,d3
0000689E 43E9 0040                  		lea	$40(a1),a1
000068A2 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000068A6                            
000068A6                            Obj8C_Move:				; XREF: Obj8C_Index
000068A6 4A68 003E                  		tst.w	$3E(a0)
000068AA 6700                       		beq.s	locret_5BBA
000068AC 4A28 001E                  		tst.b	$1E(a0)
000068B0 6700                       		beq.s	loc_5B78
000068B2 5328 001E                  		subq.b	#1,$1E(a0)
000068B6 6600                       		bne.s	loc_5B80
000068B8                            
000068B8                            loc_5B78:
000068B8 3028 003E                  		move.w	$3E(a0),d0
000068BC D168 0026                  		add.w	d0,$26(a0)
000068C0                            
000068C0                            loc_5B80:
000068C0 1028 0026                  		move.b	$26(a0),d0
000068C4 6700                       		beq.s	loc_5B8C
000068C6 0C00 0080                  		cmpi.b	#$80,d0
000068CA 6600                       		bne.s	loc_5B96
000068CC                            
000068CC                            loc_5B8C:
000068CC 4268 003E                  		clr.w	$3E(a0)
000068D0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000068D6                            
000068D6                            loc_5B96:
000068D6 4EB9 0000 3424             		jsr	(CalcSine).l
000068DC 7800                       		moveq	#0,d4
000068DE 1828 003C                  		move.b	$3C(a0),d4
000068E2 C3C4                       		muls.w	d4,d1
000068E4 E081                       		asr.l	#8,d1
000068E6 C1C4                       		muls.w	d4,d0
000068E8 E080                       		asr.l	#8,d0
000068EA D268 0038                  		add.w	$38(a0),d1
000068EE D068 003A                  		add.w	$3A(a0),d0
000068F2 3141 0008                  		move.w	d1,8(a0)
000068F6 3140 000A                  		move.w	d0,$A(a0)
000068FA                            
000068FA                            locret_5BBA:
000068FA 4E75                       		rts	
000068FC                            ; ===========================================================================
000068FC                            ; ---------------------------------------------------------------------------
000068FC                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
000068FC                            ; ---------------------------------------------------------------------------
000068FC                            Map_obj8B:
000068FC                            	include "_maps\obj8B.asm"
000068FC                            ; ---------------------------------------------------------------------------
000068FC                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000068FC                            ; ---------------------------------------------------------------------------
000068FC 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006900 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006904 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006908 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
0000690C 08                         byte_5BCC:	dc.b 8
0000690D E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006912 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006917 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000691C F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006921 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006926 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000692B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006930 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006935 08                         byte_5BF5:	dc.b 8
00006936 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000693B F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006940 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006945 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000694A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000694F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006954 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006959 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000695E 08                         byte_5C1E:	dc.b 8
0000695F E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006964 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006969 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000696E F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006973 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006978 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000697D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006982 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006987 08                         byte_5C47:	dc.b 8
00006988 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
0000698D F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006992 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006997 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
0000699C 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000069A1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000069A6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000069AB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000069B0 0C                         byte_5C70:	dc.b $C
000069B1 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000069B6 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000069BB 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000069C0 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000069C5 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000069CA F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000069CF 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000069D4 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000069D9 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000069DE 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000069E3 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000069E8 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000069ED 0A                         byte_5CAD:	dc.b $A
000069EE D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000069F3 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000069F8 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000069FD D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006A02 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006A07 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006A0C 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006A11 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006A16 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006A1B 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006A20 0A                         byte_5CE0:	dc.b $A
00006A21 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006A26 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006A2B EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006A30 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006A35 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006A3A EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006A3F 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006A44 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006A49 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006A4E 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006A53 0C                         byte_5D13:	dc.b $C
00006A54 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006A59 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006A5E 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006A63 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006A68 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006A6D FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006A72 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006A77 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006A7C 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006A81 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006A86 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006A8B 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006A90                            		even
00006A90                            		even
00006A90                            
00006A90                            ; ---------------------------------------------------------------------------
00006A90                            ; Ending sequence demos
00006A90                            ; ---------------------------------------------------------------------------
00006A90                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00006ABE                            		even
00006ABE                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006AFE                            		even
00006AFE                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006B2E                            		even
00006B2E                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006B5E                            		even
00006B5E                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006B7E                            		even
00006B7E                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00006B9E                            		even
00006B9E                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006BCE                            		even
00006BCE                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006BFE                            		even
00006BFE                            
00006BFE                            ; ---------------------------------------------------------------------------
00006BFE                            ; Subroutine to	load level boundaries and start	locations
00006BFE                            ; ---------------------------------------------------------------------------
00006BFE                            
00006BFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BFE                            
00006BFE                            
00006BFE                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006BFE 7000                       		moveq	#0,d0
00006C00 11C0 F740                  		move.b	d0,($FFFFF740).w
00006C04 11C0 F741                  		move.b	d0,($FFFFF741).w
00006C08 11C0 F746                  		move.b	d0,($FFFFF746).w
00006C0C 11C0 F748                  		move.b	d0,($FFFFF748).w
00006C10 11C0 F742                  		move.b	d0,($FFFFF742).w
00006C14 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006C18 ED08                       		lsl.b	#6,d0
00006C1A E848                       		lsr.w	#4,d0
00006C1C 3200                       		move.w	d0,d1
00006C1E D040                       		add.w	d0,d0
00006C20 D041                       		add.w	d1,d0
00006C22 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006C26 3018                       		move.w	(a0)+,d0
00006C28 31C0 F730                  		move.w	d0,($FFFFF730).w
00006C2C 2018                       		move.l	(a0)+,d0
00006C2E 21C0 F728                  		move.l	d0,($FFFFF728).w
00006C32 21C0 F720                  		move.l	d0,($FFFFF720).w
00006C36 2018                       		move.l	(a0)+,d0
00006C38 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006C3C 21C0 F724                  		move.l	d0,($FFFFF724).w
00006C40 3038 F728                  		move.w	($FFFFF728).w,d0
00006C44 0640 0240                  		addi.w	#$240,d0
00006C48 31C0 F732                  		move.w	d0,($FFFFF732).w
00006C4C 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006C52 3018                       		move.w	(a0)+,d0
00006C54 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006C58 6000 0000                  		bra.w	LevSz_ChkLamp
00006C5C                            ; ===========================================================================
00006C5C                            ; ---------------------------------------------------------------------------
00006C5C                            ; Level size array and ending start location array
00006C5C                            ; ---------------------------------------------------------------------------
00006C5C                            LevelSizeArray:        ; GHZ
00006C5C 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006C68 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006C74 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006C80 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006C8C                                    ; LZ
00006C8C 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
00006C98 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
00006CA4 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
00006CB0 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
00006CBC                                    ; MZ
00006CBC 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
00006CC8 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
00006CD4 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
00006CE0 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
00006CEC                                    ; SLZ
00006CEC 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00006CF8 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
00006D04 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00006D10 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006D1C                                    ; SYZ
00006D1C 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006D28 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00006D34 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00006D40 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
00006D4C                                    ; SBZ
00006D4C 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006D58 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
00006D64 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
00006D70 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006D7C                                    ; Ending
00006D7C 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
00006D88 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
00006D94 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
00006DA0 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
00006DAC                                    ; BHZ
00006DAC 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006DB8 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006DC4 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006DD0 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006DDC                                    even
00006DDC                            
00006DDC                            ; ===========================================================================
00006DDC                            
00006DDC                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006DDC 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006DE0 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006DE2 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006DE8 3238 D008                  		move.w	($FFFFD008).w,d1
00006DEC 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006DF0 6000 0000                  		bra.w	loc_60D0
00006DF4                            ; ===========================================================================
00006DF4                            
00006DF4                            
00006DF4                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006DF4 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006DF8 ED08                       		lsl.b	#6,d0
00006DFA E848                       		lsr.w	#4,d0
00006DFC 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006E00 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006E04 6A00 0000                  		bpl.w	LevSz_SonicPos	; if not, branch
00006E08 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006E0C 5340                       		subq.w	#1,d0
00006E0E E548                       		lsl.w	#2,d0
00006E10 43FB 0000                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006E14 6000 0000                  		bra.w	LevSz_SonicPos
00006E18                            
00006E18                            EndingStLocArray:
00006E18                            		incbin	misc\sloc_end.bin
00006E38                            		even
00006E38                            		
00006E38                            ; ===========================================================================
00006E38                            ; ---------------------------------------------------------------------------
00006E38                            ; Sonic	start location array
00006E38                            ; ---------------------------------------------------------------------------
00006E38                            StartLocArray:	incbin	misc\sloc_lev.bin
00006EB8                            		even
00006EB8                            
00006EB8                            LevSz_SonicPos:
00006EB8 7200                       		moveq	#0,d1
00006EBA 3219                       		move.w	(a1)+,d1
00006EBC 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006EC0 7000                       		moveq	#0,d0
00006EC2 3011                       		move.w	(a1),d0
00006EC4 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006EC8                            
00006EC8                            loc_60D0:				; XREF: LevSz_ChkLamp
00006EC8 0441 00A0                  		subi.w	#$A0,d1
00006ECC 6400                       		bcc.s	loc_60D8
00006ECE 7200                       		moveq	#0,d1
00006ED0                            
00006ED0                            loc_60D8:
00006ED0 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006ED4 B242                       		cmp.w	d2,d1
00006ED6 6500                       		bcs.s	loc_60E2
00006ED8 3202                       		move.w	d2,d1
00006EDA                            
00006EDA                            loc_60E2:
00006EDA 31C1 F700                  		move.w	d1,($FFFFF700).w
00006EDE 0440 0060                  		subi.w	#$60,d0
00006EE2 6400                       		bcc.s	loc_60EE
00006EE4 7000                       		moveq	#0,d0
00006EE6                            
00006EE6                            loc_60EE:
00006EE6 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006EEA 6D00                       		blt.s	loc_60F8
00006EEC 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006EF0                            
00006EF0                            loc_60F8:
00006EF0 31C0 F704                  		move.w	d0,($FFFFF704).w
00006EF4 6100 0000                  		bsr.w	BgScrollSpeed
00006EF8 7000                       		moveq	#0,d0
00006EFA 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006EFE E508                       		lsl.b	#2,d0
00006F00 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006F06 6000 0000                  		bra.w	LevSz_Unk
00006F0A                            
00006F0A                            ; ---------------------------------------------------------------------------
00006F0A                            ; Which	256x256	tiles contain loops or roll-tunnels
00006F0A                            ; ---------------------------------------------------------------------------
00006F0A                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006F0A                            ; loop,	loop, tunnel, tunnel
00006F0A                            ; ---------------------------------------------------------------------------
00006F0A                            LoopTileNums:	incbin	misc\loopnums.bin
00006F2A                            		even
00006F2A                            ; this is from the cwa source code i will share kaito x gakupo mpreg if this does not work i swear t ogod if this does not
00006F2A                            ; ITS GONJE HELP
00006F2A                            ; ===========================================================================
00006F2A                            
00006F2A                            LevSz_Unk:				; XREF: LevelSizeLoad
00006F2A 7000                       		moveq	#0,d0
00006F2C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006F30 E748                       		lsl.w	#3,d0
00006F32 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006F36 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006F3A 24D9                       		move.l	(a1)+,(a2)+
00006F3C 24D9                       		move.l	(a1)+,(a2)+
00006F3E 4E75                       		rts	
00006F40                            ; End of function LevelSizeLoad
00006F40                            
00006F40                            ; ===========================================================================
00006F40 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006F48 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006F50 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006F58 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006F60 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006F68 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006F70 0070 0100 0100 0100        		dc.l $700100, $1000100
00006F78                            
00006F78                            ; ---------------------------------------------------------------------------
00006F78                            ; Subroutine to	set scroll speed of some backgrounds
00006F78                            ; ---------------------------------------------------------------------------
00006F78                            
00006F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F78                            
00006F78                            
00006F78                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006F78 4A38 FE30                  		tst.b	($FFFFFE30).w
00006F7C 6600                       		bne.s	loc_6206
00006F7E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006F82 31C0 F714                  		move.w	d0,($FFFFF714).w
00006F86 31C1 F708                  		move.w	d1,($FFFFF708).w
00006F8A 31C1 F710                  		move.w	d1,($FFFFF710).w
00006F8E 31C1 F718                  		move.w	d1,($FFFFF718).w
00006F92                            
00006F92                            loc_6206:
00006F92 7400                       		moveq	#0,d2
00006F94 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006F98 D442                       		add.w	d2,d2
00006F9A 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006F9E 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006FA2                            ; End of function BgScrollSpeed
00006FA2                            
00006FA2                            ; ===========================================================================
00006FA2 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006FA6 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006FAA 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006FAE 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_MZ-BgScroll_Index ; MAKOTO
00006FB2                            ; ===========================================================================
00006FB2                            
00006FB2                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006FB2 6000 0000                  		bra.w	Deform_GHZ
00006FB6                            ; ===========================================================================
00006FB6                            
00006FB6                            BgScroll_LZ:				; XREF: BgScroll_Index
00006FB6 E280                       		asr.l	#1,d0
00006FB8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006FBC 4E75                       		rts	
00006FBE                            ; ===========================================================================
00006FBE                            
00006FBE                            BgScroll_MZ:				; XREF: BgScroll_Index
00006FBE 4E75                       		rts	
00006FC0                            ; ===========================================================================
00006FC0                            
00006FC0                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006FC0 E280                       		asr.l	#1,d0
00006FC2 0640 00C0                  		addi.w	#$C0,d0
00006FC6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006FCA 4E75                       		rts	
00006FCC                            ; ===========================================================================
00006FCC                            
00006FCC                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006FCC E980                       		asl.l	#4,d0
00006FCE 2400                       		move.l	d0,d2
00006FD0 E380                       		asl.l	#1,d0
00006FD2 D082                       		add.l	d2,d0
00006FD4 E080                       		asr.l	#8,d0
00006FD6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006FDA 31C0 F714                  		move.w	d0,($FFFFF714).w
00006FDE 4E75                       		rts	
00006FE0                            ; ===========================================================================
00006FE0                            
00006FE0                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006FE0 E980                       		asl.l	#4,d0
00006FE2 E380                       		asl.l	#1,d0
00006FE4 E080                       		asr.l	#8,d0
00006FE6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006FEA 4E75                       		rts	
00006FEC                            ; ===========================================================================
00006FEC                            
00006FEC                            BgScroll_End:				; XREF: BgScroll_Index
00006FEC 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006FF2 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006FF8 4E75                       		rts	
00006FFA                            ; ===========================================================================
00006FFA 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00007000 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00007006 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000700C 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00007012 4E75                       		rts
00007014                            
00007014                            ; ---------------------------------------------------------------------------
00007014                            ; Background layer deformation subroutines
00007014                            ; ---------------------------------------------------------------------------
00007014                            
00007014                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007014                            
00007014                            
00007014                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00007014 4A38 F744                  		tst.b	($FFFFF744).w
00007018 6700                       		beq.s	loc_628E
0000701A 4E75                       		rts	
0000701C                            ; ===========================================================================
0000701C                            
0000701C                            loc_628E:
0000701C 4278 F754                  		clr.w	($FFFFF754).w
00007020 4278 F756                  		clr.w	($FFFFF756).w
00007024 4278 F758                  		clr.w	($FFFFF758).w
00007028 4278 F75A                  		clr.w	($FFFFF75A).w
0000702C 6100 0000                  		bsr.w	ScrollHoriz
00007030 6100 0000                  		bsr.w	ScrollVertical
00007034 6100 0000                  		bsr.w	DynScrResizeLoad
00007038 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
0000703E 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00007044 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
0000704A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007050 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00007056 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
0000705C 7000                       		moveq	#0,d0
0000705E 4A38 FFF9                  		tst.b	($FFFFFFF9).w	; GMZ
00007062 6700                       		beq.s	GetDeformRoutine	; GMZ
00007064 4EF9 0000 0000             		jmp	Deform_LZ	; GMZ
0000706A                            
0000706A                            GetDeformRoutine:	; GMZ
0000706A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000706E D040                       		add.w	d0,d0
00007070 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007074 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00007078                            ; End of function DeformBgLayer
00007078                            
00007078                            ; ===========================================================================
00007078                            ; ---------------------------------------------------------------------------
00007078                            ; Offset index for background layer deformation	code
00007078                            ; ---------------------------------------------------------------------------
00007078 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000707C 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007080 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007084 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_BHZ-Deform_Index ; MAKOTO
00007088                            ; ---------------------------------------------------------------------------
00007088                            ; Green	Hill Zone background layer deformation code
00007088                            ; ---------------------------------------------------------------------------
00007088                            
00007088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007088                            
00007088                            
00007088                            Deform_GHZ:				; XREF: Deform_Index
00007088 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000708C 48C4                       		ext.l	d4
0000708E EB84                       		asl.l	#5,d4
00007090 2204                       		move.l	d4,d1
00007092 E384                       		asl.l	#1,d4
00007094 D881                       		add.l	d1,d4
00007096 7A00                       		moveq	#0,d5
00007098 6100 0000                  		bsr.w	ScrollBlock1
0000709C 6100 0000                  		bsr.w	ScrollBlock4
000070A0 43F8 CC00                  		lea	($FFFFCC00).w,a1
000070A4 3038 F704                  		move.w	($FFFFF704).w,d0
000070A8 0240 07FF                  		andi.w	#$7FF,d0
000070AC EA48                       		lsr.w	#5,d0
000070AE 4440                       		neg.w	d0
000070B0 0640 0026                  		addi.w	#$26,d0
000070B4 31C0 F714                  		move.w	d0,($FFFFF714).w
000070B8 3800                       		move.w	d0,d4
000070BA 6100 0000                  		bsr.w	ScrollBlock3
000070BE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000070C4 323C 006F                  		move.w	#$6F,d1
000070C8 9244                       		sub.w	d4,d1
000070CA 3038 F700                  		move.w	($FFFFF700).w,d0
000070CE 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000070D4 6600                       		bne.s	loc_633C
000070D6 7000                       		moveq	#0,d0
000070D8                            
000070D8                            loc_633C:
000070D8 4440                       		neg.w	d0
000070DA 4840                       		swap	d0
000070DC 3038 F708                  		move.w	($FFFFF708).w,d0
000070E0 4440                       		neg.w	d0
000070E2                            
000070E2                            loc_6346:
000070E2 22C0                       		move.l	d0,(a1)+
000070E4 51C9 FFFC                  		dbf	d1,loc_6346
000070E8 323C 0027                  		move.w	#$27,d1
000070EC 3038 F710                  		move.w	($FFFFF710).w,d0
000070F0 4440                       		neg.w	d0
000070F2                            
000070F2                            loc_6356:
000070F2 22C0                       		move.l	d0,(a1)+
000070F4 51C9 FFFC                  		dbf	d1,loc_6356
000070F8 3038 F710                  		move.w	($FFFFF710).w,d0
000070FC 0640 0000                  		addi.w	#0,d0
00007100 3438 F700                  		move.w	($FFFFF700).w,d2
00007104 0642 FE00                  		addi.w	#-$200,d2
00007108 9440                       		sub.w	d0,d2
0000710A 48C2                       		ext.l	d2
0000710C E182                       		asl.l	#8,d2
0000710E 85FC 0068                  		divs.w	#$68,d2
00007112 48C2                       		ext.l	d2
00007114 E182                       		asl.l	#8,d2
00007116 7600                       		moveq	#0,d3
00007118 3600                       		move.w	d0,d3
0000711A 323C 0047                  		move.w	#$47,d1
0000711E D244                       		add.w	d4,d1
00007120                            
00007120                            loc_6384:
00007120 3003                       		move.w	d3,d0
00007122 4440                       		neg.w	d0
00007124 22C0                       		move.l	d0,(a1)+
00007126 4843                       		swap	d3
00007128 D682                       		add.l	d2,d3
0000712A 4843                       		swap	d3
0000712C 51C9 FFF2                  		dbf	d1,loc_6384
00007130 4E75                       		rts	
00007132                            ; End of function Deform_GHZ
00007132                            
00007132                            ; ---------------------------------------------------------------------------
00007132                            ; Labyrinth Zone background layer deformation code
00007132                            ; ---------------------------------------------------------------------------
00007132                            
00007132                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007132                            
00007132                            
00007132                            Deform_LZ:				; XREF: Deform_Index
00007132 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007136 48C4                       		ext.l	d4
00007138 EF84                       		asl.l	#7,d4
0000713A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000713E 48C5                       		ext.l	d5
00007140 EF85                       		asl.l	#7,d5
00007142 6100 0000                  		bsr.w	ScrollBlock1
00007146 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000714C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007150 323C 00DF                  		move.w	#$DF,d1
00007154 3038 F700                  		move.w	($FFFFF700).w,d0
00007158 4440                       		neg.w	d0
0000715A 4840                       		swap	d0
0000715C 3038 F708                  		move.w	($FFFFF708).w,d0
00007160 4440                       		neg.w	d0
00007162                            
00007162                            loc_63C6:
00007162 22C0                       		move.l	d0,(a1)+
00007164 51C9 FFFC                  		dbf	d1,loc_63C6
00007168 3038 F646                  		move.w	($FFFFF646).w,d0
0000716C 9078 F704                  		sub.w	($FFFFF704).w,d0
00007170 4E75                       		rts	
00007172                            ; End of function Deform_LZ
00007172                            
00007172                            ; ---------------------------------------------------------------------------
00007172                            ; Marble Zone background layer deformation code
00007172                            ; ---------------------------------------------------------------------------
00007172                            
00007172                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007172                            
00007172                            
00007172                            Deform_MZ:				; XREF: Deform_Index
00007172 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007176 48C4                       		ext.l	d4
00007178 ED84                       		asl.l	#6,d4
0000717A 2204                       		move.l	d4,d1
0000717C E384                       		asl.l	#1,d4
0000717E D881                       		add.l	d1,d4
00007180 7A00                       		moveq	#0,d5
00007182 6100 0000                  		bsr.w	ScrollBlock1
00007186 303C 0200                  		move.w	#$200,d0
0000718A 3238 F704                  		move.w	($FFFFF704).w,d1
0000718E 0441 01C8                  		subi.w	#$1C8,d1
00007192 6500                       		bcs.s	loc_6402
00007194 3401                       		move.w	d1,d2
00007196 D241                       		add.w	d1,d1
00007198 D242                       		add.w	d2,d1
0000719A E441                       		asr.w	#2,d1
0000719C D041                       		add.w	d1,d0
0000719E                            
0000719E                            loc_6402:
0000719E 31C0 F714                  		move.w	d0,($FFFFF714).w
000071A2 6100 0000                  		bsr.w	ScrollBlock3
000071A6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000071AC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000071B0 323C 00DF                  		move.w	#$DF,d1
000071B4 3038 F700                  		move.w	($FFFFF700).w,d0
000071B8 4440                       		neg.w	d0
000071BA 4840                       		swap	d0
000071BC 3038 F708                  		move.w	($FFFFF708).w,d0
000071C0 4440                       		neg.w	d0
000071C2                            
000071C2                            loc_6426:
000071C2 22C0                       		move.l	d0,(a1)+
000071C4 51C9 FFFC                  		dbf	d1,loc_6426
000071C8 4E75                       		rts	
000071CA                            ; End of function Deform_MZ
000071CA                            
000071CA                            ; ---------------------------------------------------------------------------
000071CA                            ; Star Light Zone background layer deformation code
000071CA                            ; ---------------------------------------------------------------------------
000071CA                            
000071CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071CA                            
000071CA                            
000071CA                            Deform_SLZ:				; XREF: Deform_Index
000071CA 3838 F73A                  		move.w	($FFFFF73A).w,d4
000071CE 48C4                       		ext.l	d4
000071D0 EB84                       		asl.l	#5,d4
000071D2 2204                       		move.l	d4,d1
000071D4 E384                       		asl.l	#1,d4
000071D6 D881                       		add.l	d1,d4
000071D8 7A00                       		moveq	#0,d5
000071DA 6100 0000                  		bsr.w	ScrollBlock1
000071DE 6100 0000                  		bsr.w	ScrollBlock3
000071E2 43F8 CC00                  		lea	($FFFFCC00).w,a1
000071E6                            	;	move.w	($FFFFF704).w,d0
000071E6                            	;	andi.w	#$7FF,d0
000071E6 EA48                       		lsr.w	#5,d0
000071E8 4440                       		neg.w	d0
000071EA 0640 0026                  		addi.w	#$26,d0
000071EE 31C0 F714                  		move.w	d0,($FFFFF714).w
000071F2 3800                       		move.w	d0,d4
000071F4                            	;	bsr.w	ScrollBlock3
000071F4 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
000071FA 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
000071FE                            
000071FE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007202 4440                       		neg.w	d0			; negate (positive to negative)
00007204 4840                       		swap	d0			; send to the left side of d0
00007206 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000720A 45F8 A800                  		lea	($FFFFA800).w,a2
0000720E 069A 0000 5000             		addi.l	#$5000,(a2)+
00007214 069A 0000 C000             		addi.l	#$C000,(a2)+
0000721A 3038 A800                  		move.w	($FFFFA800).w,d0
0000721E 4440                       		neg.w	d0			; negate (positive to negative)
00007220 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00007222 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007226                            slz_DeformLoop_1:
00007226 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007228 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
0000722C                            
0000722C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007230 4440                       		neg.w	d0			; negate (positive to negative)
00007232 4840                       		swap	d0			; send to the left side of d0
00007234 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007238 45F8 A800                  		lea	($FFFFA800).w,a2
0000723C 069A 0000 5000             		addi.l	#$5000,(a2)+
00007242 069A 0000 C000             		addi.l	#$C000,(a2)+
00007248 3038 A800                  		move.w	($FFFFA800).w,d0
0000724C 4440                       		neg.w	d0			; negate (positive to negative)
0000724E E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00007250 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007254                            slz_DeformLoop_2:
00007254 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007256 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
0000725A                            
0000725A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000725E 4440                       		neg.w	d0			; negate (positive to negative)
00007260 4840                       		swap	d0			; send to the left side of d0
00007262 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007266 45F8 A800                  		lea	($FFFFA800).w,a2
0000726A 069A 0000 5000             		addi.l	#$5000,(a2)+
00007270 069A 0000 C000             		addi.l	#$C000,(a2)+
00007276 3038 A800                  		move.w	($FFFFA800).w,d0
0000727A 4440                       		neg.w	d0			; negate (positive to negative)
0000727C E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
0000727E 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007282                            slz_DeformLoop_3:
00007282 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007284 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00007288                            
00007288 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000728C 4440                       		neg.w	d0			; negate (positive to negative)
0000728E 4840                       		swap	d0			; send to the left side of d0
00007290 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007294 45F8 A800                  		lea	($FFFFA800).w,a2
00007298 069A 0000 5000             		addi.l	#$5000,(a2)+
0000729E 069A 0000 C000             		addi.l	#$C000,(a2)+
000072A4 3038 A800                  		move.w	($FFFFA800).w,d0
000072A8 4440                       		neg.w	d0			; negate (positive to negative)
000072AA E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000072AC 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000072B0                            slz_DeformLoop_4:
000072B0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000072B2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
000072B6                            
000072B6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000072BA 4440                       		neg.w	d0			; negate (positive to negative)
000072BC 4840                       		swap	d0			; send to the left side of d0
000072BE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000072C2 45F8 A800                  		lea	($FFFFA800).w,a2
000072C6 069A 0000 5000             		addi.l	#$5000,(a2)+
000072CC 069A 0000 C000             		addi.l	#$C000,(a2)+
000072D2 3038 A800                  		move.w	($FFFFA800).w,d0
000072D6 4440                       		neg.w	d0			; negate (positive to negative)
000072D8 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000072DA 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000072DE                            slz_DeformLoop_5:
000072DE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000072E0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
000072E4                            
000072E4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000072E8 4440                       		neg.w	d0			; negate (positive to negative)
000072EA 4840                       		swap	d0			; send to the left side of d0
000072EC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000072F0 4440                       		neg.w	d0			; negate (positive to negative)
000072F2 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000072F4 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000072F8                            slz_DeformLoop_6:
000072F8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000072FA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
000072FE                            
000072FE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007302 4440                       		neg.w	d0			; negate (positive to negative)
00007304 4840                       		swap	d0			; send to the left side of d0
00007306 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000730A 4440                       		neg.w	d0			; negate (positive to negative)
0000730C EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
0000730E 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007312                            slz_DeformLoop_7:
00007312 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007314 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00007318                            
00007318 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000731C 4440                       		neg.w	d0			; negate (positive to negative)
0000731E 4840                       		swap	d0			; send to the left side of d0
00007320 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007324 4440                       		neg.w	d0			; negate (positive to negative)
00007326 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00007328 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000732C                            slz_DeformLoop_8:
0000732C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000732E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00007332                            
00007332 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007336 4440                       		neg.w	d0			; negate (positive to negative)
00007338 4840                       		swap	d0			; send to the left side of d0
0000733A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000733E 4440                       		neg.w	d0			; negate (positive to negative)
00007340 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00007342 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007346                            slz_DeformLoop_9:
00007346 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007348 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
0000734C                            
0000734C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007350 4440                       		neg.w	d0			; negate (positive to negative)
00007352 4840                       		swap	d0			; send to the left side of d0
00007354 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007358 4440                       		neg.w	d0			; negate (positive to negative)
0000735A E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
0000735C 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007360                            slz_DeformLoop_10:
00007360 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007362 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00007366                            
00007366 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000736A 4440                       		neg.w	d0			; negate (positive to negative)
0000736C 4840                       		swap	d0			; send to the left side of d0
0000736E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007372 4440                       		neg.w	d0			; negate (positive to negative)
00007374 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00007376 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000737A                            slz_DeformLoop_11:
0000737A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000737C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00007380                            
00007380 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007384 4440                       		neg.w	d0			; negate (positive to negative)
00007386 4840                       		swap	d0			; send to the left side of d0
00007388 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000738C 4440                       		neg.w	d0			; negate (positive to negative)
0000738E E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00007390 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007394                            slz_DeformLoop_12:
00007394 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007396 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
0000739A                            
0000739A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000739E 4440                       		neg.w	d0			; negate (positive to negative)
000073A0 4840                       		swap	d0			; send to the left side of d0
000073A2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000073A6 4440                       		neg.w	d0			; negate (positive to negative)
000073A8 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000073AA 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000073AE                            slz_DeformLoop_13:
000073AE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000073B0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
000073B4 4E75                       		rts	
000073B6                            ; End of function Deform_SLZ
000073B6 4E75                       		rts	
000073B8                            ; End of function Deform_SLZ_2
000073B8                            
000073B8                            ; ---------------------------------------------------------------------------
000073B8                            ; Spring Yard Zone background layer deformation	code
000073B8                            ; ---------------------------------------------------------------------------
000073B8                            
000073B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073B8                            
000073B8                            
000073B8                            Deform_SYZ:				; XREF: Deform_Index
000073B8 3838 F73A                  		move.w	($FFFFF73A).w,d4
000073BC 48C4                       		ext.l	d4
000073BE ED84                       		asl.l	#6,d4
000073C0 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000073C4 48C5                       		ext.l	d5
000073C6 E985                       		asl.l	#4,d5
000073C8 2205                       		move.l	d5,d1
000073CA E385                       		asl.l	#1,d5
000073CC DA81                       		add.l	d1,d5
000073CE 6100 0000                  		bsr.w	ScrollBlock1
000073D2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000073D8 43F8 CC00                  		lea	($FFFFCC00).w,a1
000073DC 323C 00DF                  		move.w	#$DF,d1
000073E0 3038 F700                  		move.w	($FFFFF700).w,d0
000073E4 4440                       		neg.w	d0
000073E6 4840                       		swap	d0
000073E8 3038 F708                  		move.w	($FFFFF708).w,d0
000073EC 4440                       		neg.w	d0
000073EE                            
000073EE                            loc_653C:
000073EE 22C0                       		move.l	d0,(a1)+
000073F0 51C9 FFFC                  		dbf	d1,loc_653C
000073F4 4E75                       		rts	
000073F6                            ; End of function Deform_SYZ
000073F6                            
000073F6                            ; ---------------------------------------------------------------------------
000073F6                            ; Scrap	Brain Zone background layer deformation	code
000073F6                            ; ---------------------------------------------------------------------------
000073F6                            
000073F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073F6                            
000073F6                            
000073F6                            Deform_SBZ:				; XREF: Deform_Index
000073F6 3838 F73A                  		move.w	($FFFFF73A).w,d4
000073FA 48C4                       		ext.l	d4
000073FC ED84                       		asl.l	#6,d4
000073FE 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007402 48C5                       		ext.l	d5
00007404 E985                       		asl.l	#4,d5
00007406 E385                       		asl.l	#1,d5
00007408 6100 0000                  		bsr.w	ScrollBlock1
0000740C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007412 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007416 323C 00DF                  		move.w	#$DF,d1
0000741A 3038 F700                  		move.w	($FFFFF700).w,d0
0000741E 4440                       		neg.w	d0
00007420 4840                       		swap	d0
00007422 3038 F708                  		move.w	($FFFFF708).w,d0
00007426 4440                       		neg.w	d0
00007428                            
00007428                            loc_6576:
00007428 22C0                       		move.l	d0,(a1)+
0000742A 51C9 FFFC                  		dbf	d1,loc_6576
0000742E 4E75                       		rts	
00007430                            ; End of function Deform_SBZ
00007430                            ; ---------------------------------------------------------------------------
00007430                            ; Makoto Zone background layer deformation code
00007430                            ; ---------------------------------------------------------------------------
00007430                            
00007430                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007430                            
00007430                            
00007430                            Deform_BHZ:				; XREF: Deform_Index
00007430 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007434 48C4                       		ext.l	d4
00007436 E984                       		asl.l	#4,d4
00007438 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000743C 48C5                       		ext.l	d5
0000743E E985                       		asl.l	#4,d5
00007440 7A00                       		moveq	#0,d5	; reset bg position in title screen
00007442 6100 0000                  		bsr.w	ScrollBlock1
00007446 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000744C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007450 323C 00DF                  		move.w	#$DF,d1
00007454 3038 F700                  		move.w	($FFFFF700).w,d0
00007458 4440                       		neg.w	d0
0000745A 4840                       		swap	d0
0000745C 3038 F708                  		move.w	($FFFFF708).w,d0
00007460 4440                       		neg.w	d0
00007462                            
00007462                            loc_63COCK6:
00007462 22C0                       		move.l	d0,(a1)+
00007464 51C9 FFFC                  		dbf	d1,loc_63COCK6
00007468 3038 F646                  		move.w	($FFFFF646).w,d0
0000746C 9078 F704                  		sub.w	($FFFFF704).w,d0
00007470 4E75                       		rts	
00007472                            ; End of function Deform_BHZ
00007472                            ; ---------------------------------------------------------------------------
00007472                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007472                            ; ---------------------------------------------------------------------------
00007472                            
00007472                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007472                            
00007472                            
00007472                            ScrollHoriz:				; XREF: DeformBgLayer
00007472 3838 F700                  		move.w	($FFFFF700).w,d4
00007476 6100                       		bsr.s	ScrollHoriz2
00007478 3038 F700                  		move.w	($FFFFF700).w,d0
0000747C 0240 0010                  		andi.w	#$10,d0
00007480 1238 F74A                  		move.b	($FFFFF74A).w,d1
00007484 B300                       		eor.b	d1,d0
00007486 6600                       		bne.s	locret_65B0
00007488 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
0000748E 3038 F700                  		move.w	($FFFFF700).w,d0
00007492 9044                       		sub.w	d4,d0
00007494 6A00                       		bpl.s	loc_65AA
00007496 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000749C 4E75                       		rts	
0000749E                            ; ===========================================================================
0000749E                            
0000749E                            loc_65AA:
0000749E 08F8 0003 F754             		bset	#3,($FFFFF754).w
000074A4                            
000074A4                            locret_65B0:
000074A4 4E75                       		rts	
000074A6                            ; End of function ScrollHoriz
000074A6                            
000074A6                            
000074A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074A6                            
000074A6                            
000074A6                            ScrollHoriz2:				; XREF: ScrollHoriz
000074A6 3038 D008                  		move.w	($FFFFD008).w,d0
000074AA 9078 F700                  		sub.w	($FFFFF700).w,d0
000074AE 0440 0090                  		subi.w	#$90,d0
000074B2 6500                       		bcs.s	loc_65F6
000074B4 0440 0010                  		subi.w	#$10,d0
000074B8 6400                       		bcc.s	loc_65CC
000074BA 4278 F73A                  		clr.w	($FFFFF73A).w
000074BE 4E75                       		rts	
000074C0                            ; ===========================================================================
000074C0                            
000074C0                            loc_65CC:
000074C0 0C40 0010                  		cmpi.w	#$10,d0
000074C4 6500                       		bcs.s	loc_65D6
000074C6 303C 0010                  		move.w	#$10,d0
000074CA                            
000074CA                            loc_65D6:
000074CA D078 F700                  		add.w	($FFFFF700).w,d0
000074CE B078 F72A                  		cmp.w	($FFFFF72A).w,d0
000074D2 6D00                       		blt.s	loc_65E4
000074D4 3038 F72A                  		move.w	($FFFFF72A).w,d0
000074D8                            
000074D8                            loc_65E4:
000074D8 3200                       		move.w	d0,d1
000074DA 9278 F700                  		sub.w	($FFFFF700).w,d1
000074DE E141                       		asl.w	#8,d1
000074E0 31C0 F700                  		move.w	d0,($FFFFF700).w
000074E4 31C1 F73A                  		move.w	d1,($FFFFF73A).w
000074E8 4E75                       		rts	
000074EA                            ; ===========================================================================
000074EA                            
000074EA                            loc_65F6:				; XREF: ScrollHoriz2
000074EA D078 F700                  		add.w	($FFFFF700).w,d0
000074EE B078 F728                  		cmp.w	($FFFFF728).w,d0
000074F2 6EE4                       		bgt.s	loc_65E4
000074F4 3038 F728                  		move.w	($FFFFF728).w,d0
000074F8 60DE                       		bra.s	loc_65E4
000074FA                            ; End of function ScrollHoriz2
000074FA                            
000074FA                            ; ===========================================================================
000074FA 4A40                       		tst.w	d0
000074FC 6A00                       		bpl.s	loc_6610
000074FE 303C FFFE                  		move.w	#-2,d0
00007502 60E6                       		bra.s	loc_65F6
00007504                            ; ===========================================================================
00007504                            
00007504                            loc_6610:
00007504 303C 0002                  		move.w	#2,d0
00007508 60B6                       		bra.s	loc_65CC
0000750A                            
0000750A                            ; ---------------------------------------------------------------------------
0000750A                            ; Subroutine to	scroll the level vertically as Sonic moves
0000750A                            ; ---------------------------------------------------------------------------
0000750A                            
0000750A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000750A                            
0000750A                            
0000750A                            ScrollVertical:				; XREF: DeformBgLayer
0000750A 7200                       		moveq	#0,d1
0000750C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00007510 9078 F704                  		sub.w	($FFFFF704).w,d0
00007514 0838 0002 D022             		btst	#2,($FFFFD022).w
0000751A 6700                       		beq.s	loc_662A
0000751C 5B40                       		subq.w	#5,d0
0000751E                            
0000751E                            loc_662A:
0000751E 0838 0001 D022             		btst	#1,($FFFFD022).w
00007524 6700                       		beq.s	loc_664A
00007526 0640 0020                  		addi.w	#$20,d0
0000752A 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000752E 6500                       		bcs.s	loc_6696
00007530 0440 0040                  		subi.w	#$40,d0
00007534 6400                       		bcc.s	loc_6696
00007536 4A38 F75C                  		tst.b	($FFFFF75C).w
0000753A 6600                       		bne.s	loc_66A8
0000753C 6000                       		bra.s	loc_6656
0000753E                            ; ===========================================================================
0000753E                            
0000753E                            loc_664A:
0000753E 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00007542 6600                       		bne.s	loc_665C
00007544 4A38 F75C                  		tst.b	($FFFFF75C).w
00007548 6600                       		bne.s	loc_66A8
0000754A                            
0000754A                            loc_6656:
0000754A 4278 F73C                  		clr.w	($FFFFF73C).w
0000754E 4E75                       		rts	
00007550                            ; ===========================================================================
00007550                            
00007550                            loc_665C:
00007550 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00007556 6600                       		bne.s	loc_6684
00007558 3238 D014                  		move.w	($FFFFD014).w,d1
0000755C 6A00                       		bpl.s	loc_666C
0000755E 4441                       		neg.w	d1
00007560                            
00007560                            loc_666C:
00007560 0C41 0800                  		cmpi.w	#$800,d1
00007564 6400                       		bcc.s	loc_6696
00007566 323C 0600                  		move.w	#$600,d1
0000756A 0C40 0006                  		cmpi.w	#6,d0
0000756E 6E00                       		bgt.s	loc_66F6
00007570 0C40 FFFA                  		cmpi.w	#-6,d0
00007574 6D00                       		blt.s	loc_66C0
00007576 6000                       		bra.s	loc_66AE
00007578                            ; ===========================================================================
00007578                            
00007578                            loc_6684:
00007578 323C 0200                  		move.w	#$200,d1
0000757C 0C40 0002                  		cmpi.w	#2,d0
00007580 6E00                       		bgt.s	loc_66F6
00007582 0C40 FFFE                  		cmpi.w	#-2,d0
00007586 6D00                       		blt.s	loc_66C0
00007588 6000                       		bra.s	loc_66AE
0000758A                            ; ===========================================================================
0000758A                            
0000758A                            loc_6696:
0000758A 323C 1000                  		move.w	#$1000,d1
0000758E 0C40 0010                  		cmpi.w	#$10,d0
00007592 6E00                       		bgt.s	loc_66F6
00007594 0C40 FFF0                  		cmpi.w	#-$10,d0
00007598 6D00                       		blt.s	loc_66C0
0000759A 6000                       		bra.s	loc_66AE
0000759C                            ; ===========================================================================
0000759C                            
0000759C                            loc_66A8:
0000759C 7000                       		moveq	#0,d0
0000759E 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000075A2                            
000075A2                            loc_66AE:
000075A2 7200                       		moveq	#0,d1
000075A4 3200                       		move.w	d0,d1
000075A6 D278 F704                  		add.w	($FFFFF704).w,d1
000075AA 4A40                       		tst.w	d0
000075AC 6A00 0000                  		bpl.w	loc_6700
000075B0 6000 0000                  		bra.w	loc_66CC
000075B4                            ; ===========================================================================
000075B4                            
000075B4                            loc_66C0:
000075B4 4441                       		neg.w	d1
000075B6 48C1                       		ext.l	d1
000075B8 E181                       		asl.l	#8,d1
000075BA D2B8 F704                  		add.l	($FFFFF704).w,d1
000075BE 4841                       		swap	d1
000075C0                            
000075C0                            loc_66CC:
000075C0 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
000075C4 6E00                       		bgt.s	loc_6724
000075C6 0C41 FF00                  		cmpi.w	#-$100,d1
000075CA 6E00                       		bgt.s	loc_66F0
000075CC 0241 07FF                  		andi.w	#$7FF,d1
000075D0 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000075D6 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000075DC 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000075E2 6000                       		bra.s	loc_6724
000075E4                            ; ===========================================================================
000075E4                            
000075E4                            loc_66F0:
000075E4 3238 F72C                  		move.w	($FFFFF72C).w,d1
000075E8 6000                       		bra.s	loc_6724
000075EA                            ; ===========================================================================
000075EA                            
000075EA                            loc_66F6:
000075EA 48C1                       		ext.l	d1
000075EC E181                       		asl.l	#8,d1
000075EE D2B8 F704                  		add.l	($FFFFF704).w,d1
000075F2 4841                       		swap	d1
000075F4                            
000075F4                            loc_6700:
000075F4 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
000075F8 6D00                       		blt.s	loc_6724
000075FA 0441 0800                  		subi.w	#$800,d1
000075FE 6500                       		bcs.s	loc_6720
00007600 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007606 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
0000760C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00007612 6000                       		bra.s	loc_6724
00007614                            ; ===========================================================================
00007614                            
00007614                            loc_6720:
00007614 3238 F72E                  		move.w	($FFFFF72E).w,d1
00007618                            
00007618                            loc_6724:
00007618 3838 F704                  		move.w	($FFFFF704).w,d4
0000761C 4841                       		swap	d1
0000761E 2601                       		move.l	d1,d3
00007620 96B8 F704                  		sub.l	($FFFFF704).w,d3
00007624 E09B                       		ror.l	#8,d3
00007626 31C3 F73C                  		move.w	d3,($FFFFF73C).w
0000762A 21C1 F704                  		move.l	d1,($FFFFF704).w
0000762E 3038 F704                  		move.w	($FFFFF704).w,d0
00007632 0240 0010                  		andi.w	#$10,d0
00007636 1238 F74B                  		move.b	($FFFFF74B).w,d1
0000763A B300                       		eor.b	d1,d0
0000763C 6600                       		bne.s	locret_6766
0000763E 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00007644 3038 F704                  		move.w	($FFFFF704).w,d0
00007648 9044                       		sub.w	d4,d0
0000764A 6A00                       		bpl.s	loc_6760
0000764C 08F8 0000 F754             		bset	#0,($FFFFF754).w
00007652 4E75                       		rts	
00007654                            ; ===========================================================================
00007654                            
00007654                            loc_6760:
00007654 08F8 0001 F754             		bset	#1,($FFFFF754).w
0000765A                            
0000765A                            locret_6766:
0000765A 4E75                       		rts	
0000765C                            ; End of function ScrollVertical
0000765C                            
0000765C                            
0000765C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000765C                            
0000765C                            
0000765C                            ScrollBlock1:				; XREF: Deform_GHZ; et al
0000765C 2438 F708                  		move.l	($FFFFF708).w,d2
00007660 2002                       		move.l	d2,d0
00007662 D084                       		add.l	d4,d0
00007664 21C0 F708                  		move.l	d0,($FFFFF708).w
00007668 2200                       		move.l	d0,d1
0000766A 4841                       		swap	d1
0000766C 0241 0010                  		andi.w	#$10,d1
00007670 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007674 B701                       		eor.b	d3,d1
00007676 6600                       		bne.s	loc_679C
00007678 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000767E 9082                       		sub.l	d2,d0
00007680 6A00                       		bpl.s	loc_6796
00007682 08F8 0002 F756             		bset	#2,($FFFFF756).w
00007688 6000                       		bra.s	loc_679C
0000768A                            ; ===========================================================================
0000768A                            
0000768A                            loc_6796:
0000768A 08F8 0003 F756             		bset	#3,($FFFFF756).w
00007690                            
00007690                            loc_679C:
00007690 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007694 2003                       		move.l	d3,d0
00007696 D085                       		add.l	d5,d0
00007698 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000769C 2200                       		move.l	d0,d1
0000769E 4841                       		swap	d1
000076A0 0241 0010                  		andi.w	#$10,d1
000076A4 1438 F74D                  		move.b	($FFFFF74D).w,d2
000076A8 B501                       		eor.b	d2,d1
000076AA 6600                       		bne.s	locret_67D0
000076AC 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000076B2 9083                       		sub.l	d3,d0
000076B4 6A00                       		bpl.s	loc_67CA
000076B6 08F8 0000 F756             		bset	#0,($FFFFF756).w
000076BC 4E75                       		rts	
000076BE                            ; ===========================================================================
000076BE                            
000076BE                            loc_67CA:
000076BE 08F8 0001 F756             		bset	#1,($FFFFF756).w
000076C4                            
000076C4                            locret_67D0:
000076C4 4E75                       		rts	
000076C6                            ; End of function ScrollBlock1
000076C6                            
000076C6                            
000076C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076C6                            
000076C6                            
000076C6                            ScrollBlock2:				; XREF: Deform_SLZ
000076C6 2438 F708                  		move.l	($FFFFF708).w,d2
000076CA 2002                       		move.l	d2,d0
000076CC D084                       		add.l	d4,d0
000076CE 21C0 F708                  		move.l	d0,($FFFFF708).w
000076D2 2638 F70C                  		move.l	($FFFFF70C).w,d3
000076D6 2003                       		move.l	d3,d0
000076D8 D085                       		add.l	d5,d0
000076DA 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000076DE 2200                       		move.l	d0,d1
000076E0 4841                       		swap	d1
000076E2 0241 0010                  		andi.w	#$10,d1
000076E6 1438 F74D                  		move.b	($FFFFF74D).w,d2
000076EA B501                       		eor.b	d2,d1
000076EC 6600                       		bne.s	locret_6812
000076EE 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000076F4 9083                       		sub.l	d3,d0
000076F6 6A00                       		bpl.s	loc_680C
000076F8 08F8 0000 F756             		bset	#0,($FFFFF756).w
000076FE 4E75                       		rts	
00007700                            ; ===========================================================================
00007700                            
00007700                            loc_680C:
00007700 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007706                            
00007706                            locret_6812:
00007706 4E75                       		rts	
00007708                            ; End of function ScrollBlock2
00007708                            
00007708                            
00007708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007708                            
00007708                            
00007708                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00007708 3638 F70C                  		move.w	($FFFFF70C).w,d3
0000770C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007710 3200                       		move.w	d0,d1
00007712 0241 0010                  		andi.w	#$10,d1
00007716 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000771A B501                       		eor.b	d2,d1
0000771C 6600                       		bne.s	locret_6842
0000771E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007724 9043                       		sub.w	d3,d0
00007726 6A00                       		bpl.s	loc_683C
00007728 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000772E 4E75                       		rts	
00007730                            ; ===========================================================================
00007730                            
00007730                            loc_683C:
00007730 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007736                            
00007736                            locret_6842:
00007736 4E75                       		rts	
00007738                            ; End of function ScrollBlock3
00007738                            
00007738                            
00007738                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007738                            
00007738                            
00007738                            ScrollBlock4:				; XREF: Deform_GHZ
00007738 3438 F710                  		move.w	($FFFFF710).w,d2
0000773C 3638 F714                  		move.w	($FFFFF714).w,d3
00007740 3038 F73A                  		move.w	($FFFFF73A).w,d0
00007744 48C0                       		ext.l	d0
00007746 EF80                       		asl.l	#7,d0
00007748 D1B8 F710                  		add.l	d0,($FFFFF710).w
0000774C 3038 F710                  		move.w	($FFFFF710).w,d0
00007750 0240 0010                  		andi.w	#$10,d0
00007754 1238 F74E                  		move.b	($FFFFF74E).w,d1
00007758 B300                       		eor.b	d1,d0
0000775A 6600                       		bne.s	locret_6884
0000775C 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00007762 3038 F710                  		move.w	($FFFFF710).w,d0
00007766 9042                       		sub.w	d2,d0
00007768 6A00                       		bpl.s	loc_687E
0000776A 08F8 0002 F758             		bset	#2,($FFFFF758).w
00007770 6000                       		bra.s	locret_6884
00007772                            ; ===========================================================================
00007772                            
00007772                            loc_687E:
00007772 08F8 0003 F758             		bset	#3,($FFFFF758).w
00007778                            
00007778                            locret_6884:
00007778 4E75                       		rts	
0000777A                            ; End of function ScrollBlock4
0000777A                            
0000777A                            
0000777A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000777A                            
0000777A                            
0000777A                            sub_6886:				; XREF: loc_C44
0000777A 4BF9 00C0 0004             		lea	($C00004).l,a5
00007780 4DF9 00C0 0000             		lea	($C00000).l,a6
00007786 45F8 F756                  		lea	($FFFFF756).w,a2
0000778A 47F8 F708                  		lea	($FFFFF708).w,a3
0000778E 49F8 A440                  		lea	($FFFFA440).w,a4
00007792 343C 6000                  		move.w	#$6000,d2
00007796 6100 0000                  		bsr.w	sub_6954
0000779A 45F8 F758                  		lea	($FFFFF758).w,a2
0000779E 47F8 F710                  		lea	($FFFFF710).w,a3
000077A2 6000 0000                  		bra.w	sub_69F4
000077A6                            ; End of function sub_6886
000077A6                            
000077A6                            ; ---------------------------------------------------------------------------
000077A6                            ; Subroutine to	display	correct	tiles as you move
000077A6                            ; ---------------------------------------------------------------------------
000077A6                            
000077A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077A6                            
000077A6                            
000077A6                            LoadTilesAsYouMove:			; XREF: Demo_Time
000077A6 4BF9 00C0 0004             		lea	($C00004).l,a5
000077AC 4DF9 00C0 0000             		lea	($C00000).l,a6
000077B2 45F8 FF32                  		lea	($FFFFFF32).w,a2
000077B6 47F8 FF18                  		lea	($FFFFFF18).w,a3
000077BA 49F8 A440                  		lea	($FFFFA440).w,a4
000077BE 343C 6000                  		move.w	#$6000,d2
000077C2 6100 0000                  		bsr.w	sub_6954
000077C6 45F8 FF34                  		lea	($FFFFFF34).w,a2
000077CA 47F8 FF20                  		lea	($FFFFFF20).w,a3
000077CE 6100 0000                  		bsr.w	sub_69F4
000077D2 45F8 FF30                  		lea	($FFFFFF30).w,a2
000077D6 47F8 FF10                  		lea	($FFFFFF10).w,a3
000077DA 49F8 A400                  		lea	($FFFFA400).w,a4
000077DE 343C 4000                  		move.w	#$4000,d2
000077E2 4A12                       		tst.b	(a2)
000077E4 6700                       		beq.s	locret_6952
000077E6 0892 0000                  		bclr	#0,(a2)
000077EA 6700                       		beq.s	loc_6908
000077EC 78F0                       		moveq	#-$10,d4
000077EE 7AF0                       		moveq	#-$10,d5
000077F0 6100 0000                  		bsr.w	sub_6C20
000077F4 78F0                       		moveq	#-$10,d4
000077F6 7AF0                       		moveq	#-$10,d5
000077F8 6100 0000                  		bsr.w	sub_6AD8
000077FC                            
000077FC                            loc_6908:
000077FC 0892 0001                  		bclr	#1,(a2)
00007800 6700                       		beq.s	loc_6922
00007802 383C 00E0                  		move.w	#$E0,d4
00007806 7AF0                       		moveq	#-$10,d5
00007808 6100 0000                  		bsr.w	sub_6C20
0000780C 383C 00E0                  		move.w	#$E0,d4
00007810 7AF0                       		moveq	#-$10,d5
00007812 6100 0000                  		bsr.w	sub_6AD8
00007816                            
00007816                            loc_6922:
00007816 0892 0002                  		bclr	#2,(a2)
0000781A 6700                       		beq.s	loc_6938
0000781C 78F0                       		moveq	#-$10,d4
0000781E 7AF0                       		moveq	#-$10,d5
00007820 6100 0000                  		bsr.w	sub_6C20
00007824 78F0                       		moveq	#-$10,d4
00007826 7AF0                       		moveq	#-$10,d5
00007828 6100 0000                  		bsr.w	sub_6B04
0000782C                            
0000782C                            loc_6938:
0000782C 0892 0003                  		bclr	#3,(a2)
00007830 6700                       		beq.s	locret_6952
00007832 78F0                       		moveq	#-$10,d4
00007834 3A3C 0140                  		move.w	#$140,d5
00007838 6100 0000                  		bsr.w	sub_6C20
0000783C 78F0                       		moveq	#-$10,d4
0000783E 3A3C 0140                  		move.w	#$140,d5
00007842 6100 0000                  		bsr.w	sub_6B04
00007846                            
00007846                            locret_6952:
00007846 4E75                       		rts	
00007848                            ; End of function LoadTilesAsYouMove
00007848                            
00007848                            
00007848                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007848                            
00007848                            
00007848                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00007848 4A12                       		tst.b	(a2)
0000784A 6700 0000                  		beq.w	locret_69F2
0000784E 0892 0000                  		bclr	#0,(a2)
00007852 6700                       		beq.s	loc_6972
00007854 78F0                       		moveq	#-$10,d4
00007856 7AF0                       		moveq	#-$10,d5
00007858 6100 0000                  		bsr.w	sub_6C20
0000785C 78F0                       		moveq	#-$10,d4
0000785E 7AF0                       		moveq	#-$10,d5
00007860 7C1F                       		moveq	#$1F,d6
00007862 6100 0000                  		bsr.w	sub_6ADA
00007866                            
00007866                            loc_6972:
00007866 0892 0001                  		bclr	#1,(a2)
0000786A 6700                       		beq.s	loc_698E
0000786C 383C 00E0                  		move.w	#$E0,d4
00007870 7AF0                       		moveq	#-$10,d5
00007872 6100 0000                  		bsr.w	sub_6C20
00007876 383C 00E0                  		move.w	#$E0,d4
0000787A 7AF0                       		moveq	#-$10,d5
0000787C 7C1F                       		moveq	#$1F,d6
0000787E 6100 0000                  		bsr.w	sub_6ADA
00007882                            
00007882                            loc_698E:
00007882 0892 0002                  		bclr	#2,(a2)
00007886 6700                       		beq.s	loc_69BE
00007888 78F0                       		moveq	#-$10,d4
0000788A 7AF0                       		moveq	#-$10,d5
0000788C 6100 0000                  		bsr.w	sub_6C20
00007890 78F0                       		moveq	#-$10,d4
00007892 7AF0                       		moveq	#-$10,d5
00007894 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007898 322B 0004                  		move.w	4(a3),d1
0000789C 0241 FFF0                  		andi.w	#-$10,d1
000078A0 9C41                       		sub.w	d1,d6
000078A2 6D00                       		blt.s	loc_69BE
000078A4 E84E                       		lsr.w	#4,d6
000078A6 0C46 000F                  		cmpi.w	#$F,d6
000078AA 6500                       		bcs.s	loc_69BA
000078AC 7C0F                       		moveq	#$F,d6
000078AE                            
000078AE                            loc_69BA:
000078AE 6100 0000                  		bsr.w	sub_6B06
000078B2                            
000078B2                            loc_69BE:
000078B2 0892 0003                  		bclr	#3,(a2)
000078B6 6700                       		beq.s	locret_69F2
000078B8 78F0                       		moveq	#-$10,d4
000078BA 3A3C 0140                  		move.w	#$140,d5
000078BE 6100 0000                  		bsr.w	sub_6C20
000078C2 78F0                       		moveq	#-$10,d4
000078C4 3A3C 0140                  		move.w	#$140,d5
000078C8 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000078CC 322B 0004                  		move.w	4(a3),d1
000078D0 0241 FFF0                  		andi.w	#-$10,d1
000078D4 9C41                       		sub.w	d1,d6
000078D6 6D00                       		blt.s	locret_69F2
000078D8 E84E                       		lsr.w	#4,d6
000078DA 0C46 000F                  		cmpi.w	#$F,d6
000078DE 6500                       		bcs.s	loc_69EE
000078E0 7C0F                       		moveq	#$F,d6
000078E2                            
000078E2                            loc_69EE:
000078E2 6100 0000                  		bsr.w	sub_6B06
000078E6                            
000078E6                            locret_69F2:
000078E6 4E75                       		rts	
000078E8                            ; End of function sub_6954
000078E8                            
000078E8                            
000078E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078E8                            
000078E8                            
000078E8                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
000078E8 4A12                       		tst.b	(a2)
000078EA 6700 0000                  		beq.w	locret_6A80
000078EE 0892 0002                  		bclr	#2,(a2)
000078F2 6700                       		beq.s	loc_6A3E
000078F4 0C53 0010                  		cmpi.w	#$10,(a3)
000078F8 6500                       		bcs.s	loc_6A3E
000078FA 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000078FE 322B 0004                  		move.w	4(a3),d1
00007902 0241 FFF0                  		andi.w	#-$10,d1
00007906 9841                       		sub.w	d1,d4
00007908 3F04                       		move.w	d4,-(sp)
0000790A 7AF0                       		moveq	#-$10,d5
0000790C 6100 0000                  		bsr.w	sub_6C20
00007910 381F                       		move.w	(sp)+,d4
00007912 7AF0                       		moveq	#-$10,d5
00007914 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007918 322B 0004                  		move.w	4(a3),d1
0000791C 0241 FFF0                  		andi.w	#-$10,d1
00007920 9C41                       		sub.w	d1,d6
00007922 6D00                       		blt.s	loc_6A3E
00007924 E84E                       		lsr.w	#4,d6
00007926 0446 000E                  		subi.w	#$E,d6
0000792A 6400                       		bcc.s	loc_6A3E
0000792C 4446                       		neg.w	d6
0000792E 6100 0000                  		bsr.w	sub_6B06
00007932                            
00007932                            loc_6A3E:
00007932 0892 0003                  		bclr	#3,(a2)
00007936 6700                       		beq.s	locret_6A80
00007938 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000793C 322B 0004                  		move.w	4(a3),d1
00007940 0241 FFF0                  		andi.w	#-$10,d1
00007944 9841                       		sub.w	d1,d4
00007946 3F04                       		move.w	d4,-(sp)
00007948 3A3C 0140                  		move.w	#$140,d5
0000794C 6100 0000                  		bsr.w	sub_6C20
00007950 381F                       		move.w	(sp)+,d4
00007952 3A3C 0140                  		move.w	#$140,d5
00007956 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000795A 322B 0004                  		move.w	4(a3),d1
0000795E 0241 FFF0                  		andi.w	#-$10,d1
00007962 9C41                       		sub.w	d1,d6
00007964 6D00                       		blt.s	locret_6A80
00007966 E84E                       		lsr.w	#4,d6
00007968 0446 000E                  		subi.w	#$E,d6
0000796C 6400                       		bcc.s	locret_6A80
0000796E 4446                       		neg.w	d6
00007970 6100 0000                  		bsr.w	sub_6B06
00007974                            
00007974                            locret_6A80:
00007974 4E75                       		rts	
00007976                            ; End of function sub_69F4
00007976                            
00007976                            ; ===========================================================================
00007976 4A12                       		tst.b	(a2)
00007978 6700                       		beq.s	locret_6AD6
0000797A 0892 0002                  		bclr	#2,(a2)
0000797E 6700                       		beq.s	loc_6AAC
00007980 383C 00D0                  		move.w	#$D0,d4
00007984 322B 0004                  		move.w	4(a3),d1
00007988 0241 FFF0                  		andi.w	#-$10,d1
0000798C 9841                       		sub.w	d1,d4
0000798E 3F04                       		move.w	d4,-(sp)
00007990 7AF0                       		moveq	#-$10,d5
00007992 6100 0000                  		bsr.w	sub_6C3C
00007996 381F                       		move.w	(sp)+,d4
00007998 7AF0                       		moveq	#-$10,d5
0000799A 7C02                       		moveq	#2,d6
0000799C 6100 0000                  		bsr.w	sub_6B06
000079A0                            
000079A0                            loc_6AAC:
000079A0 0892 0003                  		bclr	#3,(a2)
000079A4 6700                       		beq.s	locret_6AD6
000079A6 383C 00D0                  		move.w	#$D0,d4
000079AA 322B 0004                  		move.w	4(a3),d1
000079AE 0241 FFF0                  		andi.w	#-$10,d1
000079B2 9841                       		sub.w	d1,d4
000079B4 3F04                       		move.w	d4,-(sp)
000079B6 3A3C 0140                  		move.w	#$140,d5
000079BA 6100 0000                  		bsr.w	sub_6C3C
000079BE 381F                       		move.w	(sp)+,d4
000079C0 3A3C 0140                  		move.w	#$140,d5
000079C4 7C02                       		moveq	#2,d6
000079C6 6100 0000                  		bsr.w	sub_6B06
000079CA                            
000079CA                            locret_6AD6:
000079CA 4E75                       		rts	
000079CC                            
000079CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079CC                            
000079CC                            
000079CC                            sub_6AD8:				; XREF: LoadTilesAsYouMove
000079CC 7C15                       		moveq	#$15,d6
000079CE                            ; End of function sub_6AD8
000079CE                            
000079CE                            
000079CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079CE                            
000079CE                            
000079CE                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
000079CE 2E3C 0080 0000             		move.l	#$800000,d7
000079D4 2200                       		move.l	d0,d1
000079D6                            
000079D6                            loc_6AE2:
000079D6 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079DA 6100 0000                  		bsr.w	sub_6BD6
000079DE 2001                       		move.l	d1,d0
000079E0 6100 0000                  		bsr.w	sub_6B32
000079E4 5801                       		addq.b	#4,d1
000079E6 0201 007F                  		andi.b	#$7F,d1
000079EA 4CDF 0030                  		movem.l	(sp)+,d4-d5
000079EE 0645 0010                  		addi.w	#$10,d5
000079F2 51CE FFE2                  		dbf	d6,loc_6AE2
000079F6 4E75                       		rts	
000079F8                            ; End of function sub_6ADA
000079F8                            
000079F8                            
000079F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079F8                            
000079F8                            
000079F8                            sub_6B04:				; XREF: LoadTilesAsYouMove
000079F8 7C0F                       		moveq	#$F,d6
000079FA                            ; End of function sub_6B04
000079FA                            
000079FA                            
000079FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079FA                            
000079FA                            
000079FA                            sub_6B06:				; XREF: sub_6954
000079FA 2E3C 0080 0000             		move.l	#$800000,d7
00007A00 2200                       		move.l	d0,d1
00007A02                            
00007A02                            loc_6B0E:
00007A02 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A06 6100 0000                  		bsr.w	sub_6BD6
00007A0A 2001                       		move.l	d1,d0
00007A0C 6100 0000                  		bsr.w	sub_6B32
00007A10 0641 0100                  		addi.w	#$100,d1
00007A14 0241 0FFF                  		andi.w	#$FFF,d1
00007A18 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A1C 0644 0010                  		addi.w	#$10,d4
00007A20 51CE FFE0                  		dbf	d6,loc_6B0E
00007A24 4E75                       		rts	
00007A26                            ; End of function sub_6B06
00007A26                            
00007A26                            
00007A26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A26                            
00007A26                            
00007A26                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007A26 8042                       		or.w	d2,d0
00007A28 4840                       		swap	d0
00007A2A 0810 0004                  		btst	#4,(a0)
00007A2E 6600                       		bne.s	loc_6B6E
00007A30 0810 0003                  		btst	#3,(a0)
00007A34 6600                       		bne.s	loc_6B4E
00007A36 2A80                       		move.l	d0,(a5)
00007A38 2C99                       		move.l	(a1)+,(a6)
00007A3A D087                       		add.l	d7,d0
00007A3C 2A80                       		move.l	d0,(a5)
00007A3E 2C99                       		move.l	(a1)+,(a6)
00007A40 4E75                       		rts	
00007A42                            ; ===========================================================================
00007A42                            
00007A42                            loc_6B4E:
00007A42 2A80                       		move.l	d0,(a5)
00007A44 2819                       		move.l	(a1)+,d4
00007A46 0A84 0800 0800             		eori.l	#$8000800,d4
00007A4C 4844                       		swap	d4
00007A4E 2C84                       		move.l	d4,(a6)
00007A50 D087                       		add.l	d7,d0
00007A52 2A80                       		move.l	d0,(a5)
00007A54 2819                       		move.l	(a1)+,d4
00007A56 0A84 0800 0800             		eori.l	#$8000800,d4
00007A5C 4844                       		swap	d4
00007A5E 2C84                       		move.l	d4,(a6)
00007A60 4E75                       		rts	
00007A62                            ; ===========================================================================
00007A62                            
00007A62                            loc_6B6E:
00007A62 0810 0003                  		btst	#3,(a0)
00007A66 6600                       		bne.s	loc_6B90
00007A68 2A80                       		move.l	d0,(a5)
00007A6A 2A19                       		move.l	(a1)+,d5
00007A6C 2819                       		move.l	(a1)+,d4
00007A6E 0A84 1000 1000             		eori.l	#$10001000,d4
00007A74 2C84                       		move.l	d4,(a6)
00007A76 D087                       		add.l	d7,d0
00007A78 2A80                       		move.l	d0,(a5)
00007A7A 0A85 1000 1000             		eori.l	#$10001000,d5
00007A80 2C85                       		move.l	d5,(a6)
00007A82 4E75                       		rts	
00007A84                            ; ===========================================================================
00007A84                            
00007A84                            loc_6B90:
00007A84 2A80                       		move.l	d0,(a5)
00007A86 2A19                       		move.l	(a1)+,d5
00007A88 2819                       		move.l	(a1)+,d4
00007A8A 0A84 1800 1800             		eori.l	#$18001800,d4
00007A90 4844                       		swap	d4
00007A92 2C84                       		move.l	d4,(a6)
00007A94 D087                       		add.l	d7,d0
00007A96 2A80                       		move.l	d0,(a5)
00007A98 0A85 1800 1800             		eori.l	#$18001800,d5
00007A9E 4845                       		swap	d5
00007AA0 2C85                       		move.l	d5,(a6)
00007AA2 4E75                       		rts	
00007AA4                            ; End of function sub_6B32
00007AA4                            
00007AA4                            ; ===========================================================================
00007AA4 4E75                       		rts	
00007AA6                            ; ===========================================================================
00007AA6 2A80                       		move.l	d0,(a5)
00007AA8 3A3C 2000                  		move.w	#$2000,d5
00007AAC 3819                       		move.w	(a1)+,d4
00007AAE D845                       		add.w	d5,d4
00007AB0 3C84                       		move.w	d4,(a6)
00007AB2 3819                       		move.w	(a1)+,d4
00007AB4 D845                       		add.w	d5,d4
00007AB6 3C84                       		move.w	d4,(a6)
00007AB8 D087                       		add.l	d7,d0
00007ABA 2A80                       		move.l	d0,(a5)
00007ABC 3819                       		move.w	(a1)+,d4
00007ABE D845                       		add.w	d5,d4
00007AC0 3C84                       		move.w	d4,(a6)
00007AC2 3819                       		move.w	(a1)+,d4
00007AC4 D845                       		add.w	d5,d4
00007AC6 3C84                       		move.w	d4,(a6)
00007AC8 4E75                       		rts	
00007ACA                            
00007ACA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ACA                            
00007ACA                            
00007ACA                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007ACA 43F8 B000                  		lea	($FFFFB000).w,a1
00007ACE D86B 0004                  		add.w	4(a3),d4
00007AD2 DA53                       		add.w	(a3),d5
00007AD4 3604                       		move.w	d4,d3
00007AD6 E24B                       		lsr.w	#1,d3
00007AD8 0243 0380                  		andi.w	#$380,d3
00007ADC E64D                       		lsr.w	#3,d5
00007ADE 3005                       		move.w	d5,d0
00007AE0 EA48                       		lsr.w	#5,d0
00007AE2 0240 007F                  		andi.w	#$7F,d0
00007AE6 D043                       		add.w	d3,d0
00007AE8 76FF                       		moveq	#-1,d3
00007AEA 1634 0000                  		move.b	(a4,d0.w),d3
00007AEE 6700                       		beq.s	locret_6C1E
00007AF0 5303                       		subq.b	#1,d3
00007AF2 0243 007F                  		andi.w	#$7F,d3
00007AF6 EE5B                       		ror.w	#7,d3
00007AF8 D844                       		add.w	d4,d4
00007AFA 0244 01E0                  		andi.w	#$1E0,d4
00007AFE 0245 001E                  		andi.w	#$1E,d5
00007B02 D644                       		add.w	d4,d3
00007B04 D645                       		add.w	d5,d3
00007B06 2043                       		movea.l	d3,a0
00007B08 3610                       		move.w	(a0),d3
00007B0A 0243 03FF                  		andi.w	#$3FF,d3
00007B0E E74B                       		lsl.w	#3,d3
00007B10 D2C3                       		adda.w	d3,a1
00007B12                            
00007B12                            locret_6C1E:
00007B12 4E75                       		rts	
00007B14                            ; End of function sub_6BD6
00007B14                            
00007B14                            
00007B14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B14                            
00007B14                            
00007B14                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007B14 D86B 0004                  		add.w	4(a3),d4
00007B18 DA53                       		add.w	(a3),d5
00007B1A 0244 00F0                  		andi.w	#$F0,d4
00007B1E 0245 01F0                  		andi.w	#$1F0,d5
00007B22 E94C                       		lsl.w	#4,d4
00007B24 E44D                       		lsr.w	#2,d5
00007B26 D845                       		add.w	d5,d4
00007B28 7003                       		moveq	#3,d0
00007B2A 4840                       		swap	d0
00007B2C 3004                       		move.w	d4,d0
00007B2E 4E75                       		rts	
00007B30                            ; End of function sub_6C20
00007B30                            
00007B30                            
00007B30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B30                            ; not used
00007B30                            
00007B30                            
00007B30                            sub_6C3C:
00007B30 D86B 0004                  		add.w	4(a3),d4
00007B34 DA53                       		add.w	(a3),d5
00007B36 0244 00F0                  		andi.w	#$F0,d4
00007B3A 0245 01F0                  		andi.w	#$1F0,d5
00007B3E E94C                       		lsl.w	#4,d4
00007B40 E44D                       		lsr.w	#2,d5
00007B42 D845                       		add.w	d5,d4
00007B44 7002                       		moveq	#2,d0
00007B46 4840                       		swap	d0
00007B48 3004                       		move.w	d4,d0
00007B4A 4E75                       		rts	
00007B4C                            ; End of function sub_6C3C
00007B4C                            
00007B4C                            ; ---------------------------------------------------------------------------
00007B4C                            ; Subroutine to	load tiles as soon as the level	appears
00007B4C                            ; ---------------------------------------------------------------------------
00007B4C                            
00007B4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B4C                            
00007B4C                            
00007B4C                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007B4C 4BF9 00C0 0004             		lea	($C00004).l,a5
00007B52 4DF9 00C0 0000             		lea	($C00000).l,a6
00007B58 47F8 F700                  		lea	($FFFFF700).w,a3
00007B5C 49F8 A400                  		lea	($FFFFA400).w,a4
00007B60 343C 4000                  		move.w	#$4000,d2
00007B64 6100                       		bsr.s	LoadTilesFromStart2
00007B66 47F8 F708                  		lea	($FFFFF708).w,a3
00007B6A 49F8 A440                  		lea	($FFFFA440).w,a4
00007B6E 343C 6000                  		move.w	#$6000,d2
00007B72                            ; End of function LoadTilesFromStart
00007B72                            
00007B72                            
00007B72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B72                            
00007B72                            
00007B72                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007B72 78F0                       		moveq	#-$10,d4
00007B74 7C0F                       		moveq	#$F,d6
00007B76                            
00007B76                            loc_6C82:
00007B76 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007B7A 7A00                       		moveq	#0,d5
00007B7C 3204                       		move.w	d4,d1
00007B7E 6100 FF94                  		bsr.w	sub_6C20
00007B82 3801                       		move.w	d1,d4
00007B84 7A00                       		moveq	#0,d5
00007B86 7C1F                       		moveq	#$1F,d6
00007B88 6100 FE44                  		bsr.w	sub_6ADA
00007B8C 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007B90 0644 0010                  		addi.w	#$10,d4
00007B94 51CE FFE0                  		dbf	d6,loc_6C82
00007B98 4E75                       		rts	
00007B9A                            ; End of function LoadTilesFromStart2
00007B9A                            
00007B9A                            ; ---------------------------------------------------------------------------
00007B9A                            ; Main Load Block loading subroutine
00007B9A                            ; ---------------------------------------------------------------------------
00007B9A                            
00007B9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B9A                            
00007B9A                            
00007B9A                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007B9A 7000                       		moveq	#0,d0
00007B9C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007BA0 E948                       		lsl.w	#4,d0
00007BA2 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007BA8 45F2 0000                  		lea	(a2,d0.w),a2
00007BAC 2F0A                       		move.l	a2,-(sp)
00007BAE 588A                       		addq.l	#4,a2
00007BB0 205A                       		movea.l	(a2)+,a0
00007BB2 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007BB6 303C 0000                  		move.w	#0,d0
00007BBA 6100 A448                  		bsr.w	EniDec
00007BBE 205A                       		movea.l	(a2)+,a0
00007BC0 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007BC6 6100 A5BA                  		bsr.w	KosDec
00007BCA 6100 0000                  		bsr.w	LevelLayoutLoad
00007BCE 301A                       		move.w	(a2)+,d0
00007BD0 3012                       		move.w	(a2),d0
00007BD2 0240 00FF                  		andi.w	#$FF,d0
00007BD6 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007BDC 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007BDE 700C                       		moveq	#$C,d0		; use SB3 pallet
00007BE0                            
00007BE0                            MLB_ChkSBZPal:
00007BE0 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007BE6 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007BE8 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007BEE 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007BF0                            
00007BF0                            MLB_UsePal0E:
00007BF0 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007BF2                            
00007BF2                            MLB_NormalPal:
00007BF2 6100 ADC2                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007BF6 245F                       		movea.l	(sp)+,a2
00007BF8 584A                       		addq.w	#4,a2
00007BFA 7000                       		moveq	#0,d0
00007BFC 1012                       		move.b	(a2),d0
00007BFE 6700                       		beq.s	locret_6D10
00007C00 6100 A264                  		bsr.w	LoadPLC		; load pattern load cues
00007C04                            
00007C04                            locret_6D10:
00007C04 4E75                       		rts	
00007C06                            ; End of function MainLoadBlockLoad
00007C06                            
00007C06                            ; ---------------------------------------------------------------------------
00007C06                            ; Level	layout loading subroutine
00007C06                            ; ---------------------------------------------------------------------------
00007C06                            
00007C06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C06                            
00007C06                            
00007C06                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007C06 47F8 A400                  		lea	($FFFFA400).w,a3
00007C0A 323C 01FF                  		move.w	#$1FF,d1
00007C0E 7000                       		moveq	#0,d0
00007C10                            
00007C10                            LevLoad_ClrRam:
00007C10 26C0                       		move.l	d0,(a3)+
00007C12 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007C16                            
00007C16 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007C1A 7200                       		moveq	#0,d1
00007C1C 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007C20 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007C24 7202                       		moveq	#2,d1
00007C26                            ; End of function LevelLayoutLoad
00007C26                            
00007C26                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007C26                            
00007C26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C26                            
00007C26                            
00007C26                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007C26 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007C2A ED08                       		lsl.b	#6,d0
00007C2C EA48                       		lsr.w	#5,d0
00007C2E 3400                       		move.w	d0,d2
00007C30 D040                       		add.w	d0,d0
00007C32 D042                       		add.w	d2,d0
00007C34 D041                       		add.w	d1,d0
00007C36 43F9 0000 0000             		lea	(Level_Index).l,a1
00007C3C 3031 0000                  		move.w	(a1,d0.w),d0
00007C40 43F1 0000                  		lea	(a1,d0.w),a1
00007C44 7200                       		moveq	#0,d1
00007C46 3401                       		move.w	d1,d2
00007C48 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007C4A 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007C4C                            
00007C4C                            LevLoad_NumRows:
00007C4C 3001                       		move.w	d1,d0
00007C4E 204B                       		movea.l	a3,a0
00007C50                            
00007C50                            LevLoad_Row:
00007C50 10D9                       		move.b	(a1)+,(a0)+
00007C52 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007C56 47EB 0080                  		lea	$80(a3),a3	; do next row
00007C5A 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007C5E 4E75                       		rts	
00007C60                            ; End of function LevelLayoutLoad2
00007C60                            
00007C60                            ; ---------------------------------------------------------------------------
00007C60                            ; Dynamic screen resize	loading	subroutine
00007C60                            ; ---------------------------------------------------------------------------
00007C60                            
00007C60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C60                            
00007C60                            
00007C60                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007C60 7000                       		moveq	#0,d0
00007C62 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007C66 D040                       		add.w	d0,d0
00007C68 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007C6C 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007C70 7202                       		moveq	#2,d1
00007C72 3038 F726                  		move.w	($FFFFF726).w,d0
00007C76 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007C7A 6700                       		beq.s	locret_6DAA
00007C7C 6400                       		bcc.s	loc_6DAC
00007C7E 4441                       		neg.w	d1
00007C80 3038 F704                  		move.w	($FFFFF704).w,d0
00007C84 B078 F726                  		cmp.w	($FFFFF726).w,d0
00007C88 6300                       		bls.s	loc_6DA0
00007C8A 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007C8E 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007C94                            
00007C94                            loc_6DA0:
00007C94 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007C98 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007C9E                            
00007C9E                            locret_6DAA:
00007C9E 4E75                       		rts	
00007CA0                            ; ===========================================================================
00007CA0                            
00007CA0                            loc_6DAC:				; XREF: DynScrResizeLoad
00007CA0 3038 F704                  		move.w	($FFFFF704).w,d0
00007CA4 5040                       		addq.w	#8,d0
00007CA6 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007CAA 6500                       		bcs.s	loc_6DC4
00007CAC 0838 0001 D022             		btst	#1,($FFFFD022).w
00007CB2 6700                       		beq.s	loc_6DC4
00007CB4 D241                       		add.w	d1,d1
00007CB6 D241                       		add.w	d1,d1
00007CB8                            
00007CB8                            loc_6DC4:
00007CB8 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007CBC 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007CC2 4E75                       		rts	
00007CC4                            ; End of function DynScrResizeLoad
00007CC4                            
00007CC4                            ; ===========================================================================
00007CC4                            ; ---------------------------------------------------------------------------
00007CC4                            ; Offset index for dynamic screen resizing
00007CC4                            ; ---------------------------------------------------------------------------
00007CC4 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007CC8 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007CCC 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007CD0 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_GHZ-Resize_Index
00007CD4                            ; ===========================================================================
00007CD4                            ; ---------------------------------------------------------------------------
00007CD4                            ; Green	Hill Zone dynamic screen resizing
00007CD4                            ; ---------------------------------------------------------------------------
00007CD4                            
00007CD4                            Resize_GHZ:				; XREF: Resize_Index
00007CD4 7000                       		moveq	#0,d0
00007CD6 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007CDA D040                       		add.w	d0,d0
00007CDC 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007CE0 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007CE4                            ; ===========================================================================
00007CE4 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007CE6 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007CE8 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007CEA                            ; ===========================================================================
00007CEA                            
00007CEA                            Resize_GHZ1:
00007CEA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007CF0 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007CF6 6500                       		bcs.s	locret_6E08	; if not, branch
00007CF8 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007CFE                            
00007CFE                            locret_6E08:
00007CFE 4E75                       		rts	
00007D00                            ; ===========================================================================
00007D00                            
00007D00                            Resize_GHZ2:
00007D00 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007D06 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007D0C 6500                       		bcs.s	locret_6E3A
00007D0E 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007D14 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007D1A 6500                       		bcs.s	locret_6E3A
00007D1C 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007D22 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
00007D28 6500                       		bcs.s	locret_6E3A
00007D2A 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
00007D30 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
00007D36 6500                       		bcs.s	locret_6E3A
00007D38 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
00007D3E                            		
00007D3E                            locret_6E3A:
00007D3E 4E75                       		rts	
00007D40                            ; ===========================================================================
00007D40                            
00007D40                            Resize_GHZ3:
00007D40 7000                       		moveq	#0,d0
00007D42 1038 F742                  		move.b	($FFFFF742).w,d0
00007D46 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007D4A 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007D4E                            ; ===========================================================================
00007D4E 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007D50 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007D52 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007D54                            ; ===========================================================================
00007D54                            
00007D54                            Resize_GHZ3main:
00007D54 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007D5A 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007D60 6500                       		bcs.s	locret_6E96
00007D62 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007D68 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007D6E 6500                       		bcs.s	locret_6E96
00007D70 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007D76 6500                       		bcs.s	loc_6E98
00007D78 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007D7E 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007D84 6400                       		bcc.s	loc_6E8E
00007D86 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007D8C 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007D92                            
00007D92                            loc_6E8E:
00007D92 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007D98 6400                       		bcc.s	loc_6E98
00007D9A                            
00007D9A                            locret_6E96:
00007D9A 4E75                       		rts	
00007D9C                            ; ===========================================================================
00007D9C                            
00007D9C                            loc_6E98:
00007D9C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007DA2 5438 F742                  		addq.b	#2,($FFFFF742).w
00007DA6 4E75                       		rts	
00007DA8                            ; ===========================================================================
00007DA8                            
00007DA8                            Resize_GHZ3boss:
00007DA8 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007DAE 6400                       		bcc.s	loc_6EB0
00007DB0 5538 F742                  		subq.b	#2,($FFFFF742).w
00007DB4                            
00007DB4                            loc_6EB0:
00007DB4 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007DBA 6500                       		bcs.s	locret_6EE8
00007DBC 6100 0000                  		bsr.w	SingleObjLoad
00007DC0 6600                       		bne.s	loc_6ED0
00007DC2 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007DC6 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007DCC 337C 0280 000C             		move.w	#$280,$C(a1)
00007DD2                            
00007DD2                            loc_6ED0:
00007DD2 303C 008C                  		move.w	#$8C,d0
00007DD6 6100 9EA4                  		bsr.w	PlaySound	; play boss music
00007DDA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007DE0 5438 F742                  		addq.b	#2,($FFFFF742).w
00007DE4 7011                       		moveq	#$11,d0
00007DE6 6000 A07E                  		bra.w	LoadPLC		; load boss patterns
00007DEA                            ; ===========================================================================
00007DEA                            
00007DEA                            locret_6EE8:
00007DEA 4E75                       		rts	
00007DEC                            ; ===========================================================================
00007DEC                            
00007DEC                            Resize_GHZ3end:
00007DEC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007DF2 4E75                       		rts	
00007DF4                            ; ===========================================================================
00007DF4                            ; ---------------------------------------------------------------------------
00007DF4                            ; Labyrinth Zone dynamic screen	resizing
00007DF4                            ; ---------------------------------------------------------------------------
00007DF4                            
00007DF4                            Resize_LZ:				; XREF: Resize_Index
00007DF4 7000                       		moveq	#0,d0
00007DF6 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007DFA D040                       		add.w	d0,d0
00007DFC 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007E00 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007E04                            ; ===========================================================================
00007E04 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007E06 0000                       		dc.w Resize_LZ12-Resize_LZx
00007E08 0000                       		dc.w Resize_LZ3-Resize_LZx
00007E0A 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007E0C                            ; ===========================================================================
00007E0C                            
00007E0C                            Resize_LZ12:
00007E0C 4E75                       		rts	
00007E0E                            ; ===========================================================================
00007E0E                            
00007E0E                            Resize_LZ3:
00007E0E 7000                       		moveq	#0,d0
00007E10 1038 F742                  		move.b	($FFFFF742).w,d0
00007E14 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
00007E18 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
00007E1C                            ; ===========================================================================
00007E1C                            off_6E4A2:	
00007E1C 0000                       		dc.w Resize_LZ3boss-off_6E4A2
00007E1E 0000                       		dc.w Resize_LZ3end-off_6E4A2
00007E20                            ; ===========================================================================
00007E20                            Resize_LZ3boss:
00007E20 4A38 F742                  		tst.b	($FFFFF742).w
00007E24 6600                       		bne.s	locret_6F62
00007E26 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007E2C 6500                       		bcs.s	locret_6F62
00007E2E 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
00007E34 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00007E3A                            
00007E3A 6100 0000                  		bsr.w	SingleObjLoad
00007E3E 6600                       		bne.s	loc_6F4A
00007E40 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007E44 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
00007E4A 337C 06E0 000C             		move.w	#$6E0,$C(a1)
00007E50                            loc_6F4A:
00007E50 303C 008C                  		move.w	#$8C,d0
00007E54 6100 9E26                  		bsr.w	PlaySound	; play boss music
00007E58 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007E5E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007E62 7022                       		moveq	#$22,d0
00007E64 6000 A000                  		bra.w	LoadPLC		; load boss patterns
00007E68                            ; ===========================================================================
00007E68                            
00007E68                            locret_6F62:
00007E68 4E75                       		rts	
00007E6A                            ; ===========================================================================
00007E6A                            
00007E6A                            Resize_LZ3end:
00007E6A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007E70 4E75                       		rts	
00007E72                            ; ===========================================================================
00007E72                            
00007E72                            Resize_SBZ3:
00007E72 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007E78 6500                       		bcs.s	locret_6F8C
00007E7A 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007E80 6400                       		bcc.s	locret_6F8C	; if not, branch
00007E82 4238 FE30                  		clr.b	($FFFFFE30).w
00007E86 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007E8C 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007E92 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007E98                            
00007E98                            locret_6F8C:
00007E98 4E75                       		rts	
00007E9A                            ; ===========================================================================
00007E9A                            ; ---------------------------------------------------------------------------
00007E9A                            ; Marble Zone dynamic screen resizing
00007E9A                            ; ---------------------------------------------------------------------------
00007E9A                            
00007E9A                            Resize_MZ:				; XREF: Resize_Index
00007E9A 7000                       		moveq	#0,d0
00007E9C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007EA0 D040                       		add.w	d0,d0
00007EA2 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007EA6 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007EAA                            ; ===========================================================================
00007EAA 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007EAC 0000                       		dc.w Resize_MZ2-Resize_MZx
00007EAE 0000                       		dc.w Resize_MZ3-Resize_MZx
00007EB0                            ; ===========================================================================
00007EB0                            
00007EB0                            Resize_MZ1:
00007EB0 7000                       		moveq	#0,d0
00007EB2 1038 F742                  		move.b	($FFFFF742).w,d0
00007EB6 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007EBA 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007EBE                            ; ===========================================================================
00007EBE 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007EC0 0000                       		dc.w loc_6FEA-off_6FB2
00007EC2 0000                       		dc.w loc_702E-off_6FB2
00007EC4 0000                       		dc.w loc_7050-off_6FB2
00007EC6                            ; ===========================================================================
00007EC6                            
00007EC6                            loc_6FBA:
00007EC6 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007ECC 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007ED2 6500                       		bcs.s	locret_6FE8
00007ED4 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007EDA 0C78 09A0 F700             		cmpi.w	#$9A0,($FFFFF700).w
00007EE0 6500                       		bcs.s	locret_6FE8
00007EE2 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007EE8 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007EEE 6500                       		bcs.s	locret_6FE8
00007EF0 5438 F742                  		addq.b	#2,($FFFFF742).w
00007EF4                            
00007EF4                            locret_6FE8:
00007EF4 4E75                       		rts	
00007EF6                            ; ===========================================================================
00007EF6                            
00007EF6                            loc_6FEA:
00007EF6 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007EFC 6400                       		bcc.s	loc_6FF8
00007EFE 5538 F742                  		subq.b	#2,($FFFFF742).w
00007F02 4E75                       		rts	
00007F04                            ; ===========================================================================
00007F04                            
00007F04                            loc_6FF8:
00007F04 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007F0A 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007F10 6400                       		bcc.s	locret_702C
00007F12 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007F18 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007F1E 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007F24 6400                       		bcc.s	locret_702C
00007F26 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007F2C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007F32 6500                       		bcs.s	locret_702C
00007F34 5438 F742                  		addq.b	#2,($FFFFF742).w
00007F38                            
00007F38                            locret_702C:
00007F38 4E75                       		rts	
00007F3A                            ; ===========================================================================
00007F3A                            
00007F3A                            loc_702E:
00007F3A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007F40 6400                       		bcc.s	loc_703C
00007F42 5538 F742                  		subq.b	#2,($FFFFF742).w
00007F46 4E75                       		rts	
00007F48                            ; ===========================================================================
00007F48                            
00007F48                            loc_703C:
00007F48 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007F4E 6500                       		bcs.s	locret_704E
00007F50 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007F56 5438 F742                  		addq.b	#2,($FFFFF742).w
00007F5A                            
00007F5A                            locret_704E:
00007F5A 4E75                       		rts	
00007F5C                            ; ===========================================================================
00007F5C                            
00007F5C                            loc_7050:
00007F5C 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007F62 6500                       		bcs.s	locret_7072
00007F64 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007F6A 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007F70 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007F76 6500                       		bcs.s	locret_7072
00007F78 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007F7E                            
00007F7E                            locret_7072:
00007F7E 4E75                       		rts	
00007F80                            ; ===========================================================================
00007F80                            
00007F80                            Resize_MZ2:
00007F80 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007F86 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007F8C 6500                       		bcs.s	locret_7088
00007F8E 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007F94                            
00007F94                            locret_7088:
00007F94 4E75                       		rts	
00007F96                            ; ===========================================================================
00007F96                            
00007F96                            Resize_MZ3:
00007F96 7000                       		moveq	#0,d0
00007F98 1038 F742                  		move.b	($FFFFF742).w,d0
00007F9C 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007FA0 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007FA4                            ; ===========================================================================
00007FA4 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007FA6 0000                       		dc.w Resize_MZ3end-off_7098
00007FA8                            ; ===========================================================================
00007FA8                            
00007FA8                            Resize_MZ3boss:
00007FA8 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007FAE 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007FB4 6500                       		bcs.s	locret_70E8
00007FB6 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007FBC 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007FC2 6500                       		bcs.s	locret_70E8
00007FC4 6100 0000                  		bsr.w	SingleObjLoad
00007FC8 6600                       		bne.s	loc_70D0
00007FCA 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007FCE 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007FD4 337C 022C 000C             		move.w	#$22C,$C(a1)
00007FDA                            
00007FDA                            loc_70D0:
00007FDA 303C 008C                  		move.w	#$8C,d0
00007FDE 6100 9C9C                  		bsr.w	PlaySound	; play boss music
00007FE2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007FE8 5438 F742                  		addq.b	#2,($FFFFF742).w
00007FEC 7011                       		moveq	#$11,d0
00007FEE 6000 9E76                  		bra.w	LoadPLC		; load boss patterns
00007FF2                            ; ===========================================================================
00007FF2                            
00007FF2                            locret_70E8:
00007FF2 4E75                       		rts	
00007FF4                            ; ===========================================================================
00007FF4                            
00007FF4                            Resize_MZ3end:
00007FF4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007FFA 4E75                       		rts	
00007FFC                            ; ===========================================================================
00007FFC                            ; ---------------------------------------------------------------------------
00007FFC                            ; Star Light Zone dynamic screen resizing
00007FFC                            ; ---------------------------------------------------------------------------
00007FFC                            
00007FFC                            Resize_SLZ:				; XREF: Resize_Index
00007FFC 7000                       		moveq	#0,d0
00007FFE 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008002 D040                       		add.w	d0,d0
00008004 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00008008 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000800C                            ; ===========================================================================
0000800C 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
0000800E 0000                       		dc.w Resize_SLZ2-Resize_SLZx
00008010 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00008012                            ; ===========================================================================
00008012                            
00008012                            Resize_SLZ1:
00008012 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
00008018 4E75                       		rts	
0000801A                            
0000801A                            Resize_SLZ2:
0000801A 4E75                       		rts	
0000801C                            ; ===========================================================================
0000801C                            
0000801C                            Resize_SLZ3:
0000801C 7000                       		moveq	#0,d0
0000801E 1038 F742                  		move.b	($FFFFF742).w,d0
00008022 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008026 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000802A                            ; ===========================================================================
0000802A 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000802C 0000                       		dc.w Resize_SLZ3boss-off_7118
0000802E 0000                       		dc.w Resize_SLZ3end-off_7118
00008030                            ; ===========================================================================
00008030                            
00008030                            Resize_SLZ3main:
00008030 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00008036 6500                       		bcs.s	locret_7130
00008038 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000803E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008042                            
00008042                            locret_7130:
00008042 4E75                       		rts	
00008044                            ; ===========================================================================
00008044                            
00008044                            Resize_SLZ3boss:
00008044 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000804A 6500                       		bcs.s	locret_715C
0000804C 6100 0000                  		bsr.w	SingleObjLoad
00008050 6600                       		bne.s	loc_7144
00008052 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00008056                            
00008056                            loc_7144:
00008056 303C 008C                  		move.w	#$8C,d0
0000805A 6100 9C20                  		bsr.w	PlaySound	; play boss music
0000805E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008064 5438 F742                  		addq.b	#2,($FFFFF742).w
00008068 7011                       		moveq	#$11,d0
0000806A 6000 9DFA                  		bra.w	LoadPLC		; load boss patterns
0000806E                            ; ===========================================================================
0000806E                            
0000806E                            locret_715C:
0000806E 4E75                       		rts	
00008070                            ; ===========================================================================
00008070                            
00008070                            Resize_SLZ3end:
00008070 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008076 4E75                       		rts
00008078 4E75                       		rts
0000807A                            ; ===========================================================================
0000807A                            ; ---------------------------------------------------------------------------
0000807A                            ; Spring Yard Zone dynamic screen resizing
0000807A                            ; ---------------------------------------------------------------------------
0000807A                            
0000807A                            Resize_SYZ:				; XREF: Resize_Index
0000807A 7000                       		moveq	#0,d0
0000807C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008080 D040                       		add.w	d0,d0
00008082 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00008086 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000808A                            ; ===========================================================================
0000808A 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000808C 0000                       		dc.w Resize_SYZ2-Resize_SYZx
0000808E 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00008090                            ; ===========================================================================
00008090                            
00008090                            Resize_SYZ1:
00008090 4E75                       		rts	
00008092                            ; ===========================================================================
00008092                            
00008092                            Resize_SYZ2:
00008092 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008098 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
0000809E 6500                       		bcs.s	locret_71A2
000080A0 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000080A6 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000080AC 6500                       		bcs.s	locret_71A2
000080AE 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000080B4                            
000080B4                            locret_71A2:
000080B4 4E75                       		rts	
000080B6                            ; ===========================================================================
000080B6                            
000080B6                            Resize_SYZ3:
000080B6 7000                       		moveq	#0,d0
000080B8 1038 F742                  		move.b	($FFFFF742).w,d0
000080BC 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000080C0 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000080C4                            ; ===========================================================================
000080C4 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000080C6 0000                       		dc.w Resize_SYZ3boss-off_71B2
000080C8 0000                       		dc.w Resize_SYZ3end-off_71B2
000080CA                            ; ===========================================================================
000080CA                            
000080CA                            Resize_SYZ3main:
000080CA 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000080D0 6500                       		bcs.s	locret_71CE
000080D2 6100 0000                  		bsr.w	SingleObjLoad
000080D6 6600                       		bne.s	locret_71CE
000080D8 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000080DC 5438 F742                  		addq.b	#2,($FFFFF742).w
000080E0                            
000080E0                            locret_71CE:
000080E0 4E75                       		rts	
000080E2                            ; ===========================================================================
000080E2                            
000080E2                            Resize_SYZ3boss:
000080E2 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000080E8 6500                       		bcs.s	locret_7200
000080EA 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000080F0 6100 0000                  		bsr.w	SingleObjLoad
000080F4 6600                       		bne.s	loc_71EC
000080F6 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000080FA 5438 F742                  		addq.b	#2,($FFFFF742).w
000080FE                            
000080FE                            loc_71EC:
000080FE 303C 008C                  		move.w	#$8C,d0
00008102 6100 9B78                  		bsr.w	PlaySound	; play boss music
00008106 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000810C 7011                       		moveq	#$11,d0
0000810E 6000 9D56                  		bra.w	LoadPLC		; load boss patterns
00008112                            ; ===========================================================================
00008112                            
00008112                            locret_7200:
00008112 4E75                       		rts	
00008114                            ; ===========================================================================
00008114                            
00008114                            Resize_SYZ3end:
00008114 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000811A 4E75                       		rts	
0000811C                            ; ===========================================================================
0000811C                            ; ---------------------------------------------------------------------------
0000811C                            ; Scrap	Brain Zone dynamic screen resizing
0000811C                            ; ---------------------------------------------------------------------------
0000811C                            
0000811C                            Resize_SBZ:				; XREF: Resize_Index
0000811C 7000                       		moveq	#0,d0
0000811E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008122 D040                       		add.w	d0,d0
00008124 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00008128 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000812C                            ; ===========================================================================
0000812C 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
0000812E 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00008130 0000                       		dc.w Resize_FZ-Resize_SBZx
00008132                            ; ===========================================================================
00008132                            
00008132                            Resize_SBZ1:
00008132 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00008138 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000813E 6500                       		bcs.s	locret_7242
00008140 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00008146 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000814C 6500                       		bcs.s	locret_7242
0000814E 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00008154                            
00008154                            locret_7242:
00008154 4E75                       		rts	
00008156                            ; ===========================================================================
00008156                            
00008156                            Resize_SBZ2:
00008156 7000                       		moveq	#0,d0
00008158 1038 F742                  		move.b	($FFFFF742).w,d0
0000815C 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008160 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008164                            ; ===========================================================================
00008164 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00008166 0000                       		dc.w Resize_SBZ2boss-off_7252
00008168 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000816A 0000                       		dc.w Resize_SBZ2end-off_7252
0000816C                            ; ===========================================================================
0000816C                            
0000816C                            Resize_SBZ2main:
0000816C 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00008172 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00008178 6500                       		bcs.s	locret_727A
0000817A 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00008180 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00008186 6500                       		bcs.s	locret_727A
00008188 5438 F742                  		addq.b	#2,($FFFFF742).w
0000818C                            
0000818C                            locret_727A:
0000818C 4E75                       		rts	
0000818E                            ; ===========================================================================
0000818E                            
0000818E                            Resize_SBZ2boss:
0000818E 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00008194 6500                       		bcs.s	locret_7298
00008196 6100 0000                  		bsr.w	SingleObjLoad
0000819A 6600                       		bne.s	locret_7298
0000819C 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000081A0 5438 F742                  		addq.b	#2,($FFFFF742).w
000081A4 701E                       		moveq	#$1E,d0
000081A6 6000 9CBE                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000081AA                            ; ===========================================================================
000081AA                            
000081AA                            locret_7298:
000081AA 4E75                       		rts	
000081AC                            ; ===========================================================================
000081AC                            
000081AC                            Resize_SBZ2boss2:
000081AC 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000081B2 6500                       		bcs.s	loc_72B6
000081B4 6100 0000                  		bsr.w	SingleObjLoad
000081B8 6600                       		bne.s	loc_72B0
000081BA 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000081BE 5438 F742                  		addq.b	#2,($FFFFF742).w
000081C2                            
000081C2                            loc_72B0:
000081C2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000081C8                            
000081C8                            loc_72B6:
000081C8 6000                       		bra.s	loc_72C2
000081CA                            ; ===========================================================================
000081CA                            
000081CA                            Resize_SBZ2end:
000081CA 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000081D0 6500                       		bcs.s	loc_72C2
000081D2 4E75                       		rts	
000081D4                            ; ===========================================================================
000081D4                            
000081D4                            loc_72C2:
000081D4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000081DA 4E75                       		rts	
000081DC                            ; ===========================================================================
000081DC                            
000081DC                            Resize_FZ:
000081DC 7000                       		moveq	#0,d0
000081DE 1038 F742                  		move.b	($FFFFF742).w,d0
000081E2 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000081E6 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000081EA                            ; ===========================================================================
000081EA 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000081EE 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000081F2 0000                       		dc.w Resize_FZend2-off_72D8
000081F4                            ; ===========================================================================
000081F4                            
000081F4                            Resize_FZmain:
000081F4 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000081FA 6500                       		bcs.s	loc_72F4
000081FC 5438 F742                  		addq.b	#2,($FFFFF742).w
00008200 701F                       		moveq	#$1F,d0
00008202 6100 9C62                  		bsr.w	LoadPLC		; load FZ boss patterns
00008206                            
00008206                            loc_72F4:
00008206 60CC                       		bra.s	loc_72C2
00008208                            ; ===========================================================================
00008208                            
00008208                            Resize_FZboss:
00008208 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
0000820E 6500                       		bcs.s	loc_7312
00008210 6100 0000                  		bsr.w	SingleObjLoad
00008214 6600                       		bne.s	loc_7312
00008216 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000821A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000821E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008224                            
00008224                            loc_7312:
00008224 60AE                       		bra.s	loc_72C2
00008226                            ; ===========================================================================
00008226                            
00008226                            Resize_FZend:
00008226 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0000822C 6500                       		bcs.s	loc_7320
0000822E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008232                            
00008232                            loc_7320:
00008232 60A0                       		bra.s	loc_72C2
00008234                            ; ===========================================================================
00008234                            
00008234                            locret_7322:
00008234 4E75                       		rts	
00008236                            ; ===========================================================================
00008236                            
00008236                            Resize_FZend2:
00008236 609C                       		bra.s	loc_72C2
00008238                            ; ===========================================================================
00008238                            ; ---------------------------------------------------------------------------
00008238                            ; Ending sequence dynamic screen resizing (empty)
00008238                            ; ---------------------------------------------------------------------------
00008238                            
00008238                            Resize_Ending:				; XREF: Resize_Index
00008238 4E75                       		rts	
0000823A                            ; ===========================================================================
0000823A                            ; ---------------------------------------------------------------------------
0000823A                            ; Object 11 - GHZ bridge
0000823A                            ; ---------------------------------------------------------------------------
0000823A                            
0000823A                            Obj11:					; XREF: Obj_Index
0000823A 7000                       		moveq	#0,d0
0000823C 1028 0024                  		move.b	$24(a0),d0
00008240 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00008244 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00008248                            ; ===========================================================================
00008248 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
0000824C 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00008250 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00008254                            ; ===========================================================================
00008254                            
00008254                            Obj11_Main:				; XREF: Obj11_Index
00008254 5428 0024                  		addq.b	#2,$24(a0)
00008258 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00008260 317C 438E 0002             		move.w	#$438E,2(a0)
00008266 117C 0004 0001             		move.b	#4,1(a0)
0000826C 117C 0003 0018             		move.b	#3,$18(a0)
00008272 117C 0080 0019             		move.b	#$80,$19(a0)
00008278 3428 000C                  		move.w	$C(a0),d2
0000827C 3628 0008                  		move.w	8(a0),d3
00008280 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008282 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00008286 7200                       		moveq	#0,d1
00008288 1212                       		move.b	(a2),d1		; copy a2 to d1
0000828A 14FC 0000                  		move.b	#0,(a2)+
0000828E 3001                       		move.w	d1,d0
00008290 E248                       		lsr.w	#1,d0
00008292 E948                       		lsl.w	#4,d0
00008294 9640                       		sub.w	d0,d3
00008296 5501                       		subq.b	#2,d1
00008298 6500                       		bcs.s	Obj11_Action
0000829A                            
0000829A                            Obj11_MakeBdg:
0000829A 6100 0000                  		bsr.w	SingleObjLoad
0000829E 6600                       		bne.s	Obj11_Action
000082A0 5228 0028                  		addq.b	#1,$28(a0)
000082A4 B668 0008                  		cmp.w	8(a0),d3
000082A8 6600                       		bne.s	loc_73B8
000082AA 0643 0010                  		addi.w	#$10,d3
000082AE 3142 000C                  		move.w	d2,$C(a0)
000082B2 3142 003C                  		move.w	d2,$3C(a0)
000082B6 3A08                       		move.w	a0,d5
000082B8 0445 D000                  		subi.w	#-$3000,d5
000082BC EC4D                       		lsr.w	#6,d5
000082BE 0245 007F                  		andi.w	#$7F,d5
000082C2 14C5                       		move.b	d5,(a2)+
000082C4 5228 0028                  		addq.b	#1,$28(a0)
000082C8                            
000082C8                            loc_73B8:				; XREF: ROM:00007398j
000082C8 3A09                       		move.w	a1,d5
000082CA 0445 D000                  		subi.w	#-$3000,d5
000082CE EC4D                       		lsr.w	#6,d5
000082D0 0245 007F                  		andi.w	#$7F,d5
000082D4 14C5                       		move.b	d5,(a2)+
000082D6 137C 000A 0024             		move.b	#$A,$24(a1)
000082DC 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000082DE 3342 000C                  		move.w	d2,$C(a1)
000082E2 3342 003C                  		move.w	d2,$3C(a1)
000082E6 3343 0008                  		move.w	d3,8(a1)
000082EA 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000082F2 337C 438E 0002             		move.w	#$438E,2(a1)
000082F8 137C 0004 0001             		move.b	#4,1(a1)
000082FE 137C 0003 0018             		move.b	#3,$18(a1)
00008304 137C 0008 0019             		move.b	#8,$19(a1)
0000830A 0643 0010                  		addi.w	#$10,d3
0000830E 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00008312                            
00008312                            Obj11_Action:				; XREF: Obj11_Index
00008312 6100                       		bsr.s	Obj11_Solid
00008314 4A28 003E                  		tst.b	$3E(a0)
00008318 6700                       		beq.s	Obj11_Display
0000831A 5928 003E                  		subq.b	#4,$3E(a0)
0000831E 6100 0000                  		bsr.w	Obj11_Bend
00008322                            
00008322                            Obj11_Display:
00008322 6100 0000                  		bsr.w	DisplaySprite
00008326 6000 0000                  		bra.w	Obj11_ChkDel
0000832A                            
0000832A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000832A                            
0000832A                            
0000832A                            Obj11_Solid:				; XREF: Obj11_Action
0000832A 7200                       		moveq	#0,d1
0000832C 1228 0028                  		move.b	$28(a0),d1
00008330 E749                       		lsl.w	#3,d1
00008332 3401                       		move.w	d1,d2
00008334 5041                       		addq.w	#8,d1
00008336 D442                       		add.w	d2,d2
00008338 43F8 D000                  		lea	($FFFFD000).w,a1
0000833C 4A69 0012                  		tst.w	$12(a1)
00008340 6B00 0000                  		bmi.w	locret_751E
00008344 3029 0008                  		move.w	8(a1),d0
00008348 9068 0008                  		sub.w	8(a0),d0
0000834C D041                       		add.w	d1,d0
0000834E 6B00 0000                  		bmi.w	locret_751E
00008352 B042                       		cmp.w	d2,d0
00008354 6400 0000                  		bcc.w	locret_751E
00008358 6000                       		bra.s	Platform2
0000835A                            ; End of function Obj11_Solid
0000835A                            
0000835A                            ; ---------------------------------------------------------------------------
0000835A                            ; Platform subroutine
0000835A                            ; ---------------------------------------------------------------------------
0000835A                            
0000835A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000835A                            
0000835A                            
0000835A                            PlatformObject:
0000835A 43F8 D000                  		lea	($FFFFD000).w,a1
0000835E 4A69 0012                  		tst.w	$12(a1)
00008362 6B00 0000                  		bmi.w	locret_751E
00008366 3029 0008                  		move.w	8(a1),d0
0000836A 9068 0008                  		sub.w	8(a0),d0
0000836E D041                       		add.w	d1,d0
00008370 6B00 0000                  		bmi.w	locret_751E
00008374 D241                       		add.w	d1,d1
00008376 B041                       		cmp.w	d1,d0
00008378 6400 0000                  		bcc.w	locret_751E
0000837C                            
0000837C                            Platform2:
0000837C 3028 000C                  		move.w	$C(a0),d0
00008380 5140                       		subq.w	#8,d0
00008382                            
00008382                            Platform3:
00008382 3429 000C                  		move.w	$C(a1),d2
00008386 1229 0016                  		move.b	$16(a1),d1
0000838A 4881                       		ext.w	d1
0000838C D242                       		add.w	d2,d1
0000838E 5841                       		addq.w	#4,d1
00008390 9041                       		sub.w	d1,d0
00008392 6200 0000                  		bhi.w	locret_751E
00008396 0C40 FFF0                  		cmpi.w	#-$10,d0
0000839A 6500 0000                  		bcs.w	locret_751E
0000839E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000083A2 6B00 0000                  		bmi.w	locret_751E
000083A6 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000083AC 6400 0000                  		bcc.w	locret_751E
000083B0 D440                       		add.w	d0,d2
000083B2 5642                       		addq.w	#3,d2
000083B4 3342 000C                  		move.w	d2,$C(a1)
000083B8 5428 0024                  		addq.b	#2,$24(a0)
000083BC                            
000083BC                            loc_74AE:
000083BC 0829 0003 0022             		btst	#3,$22(a1)
000083C2 6700                       		beq.s	loc_74DC
000083C4 7000                       		moveq	#0,d0
000083C6 1029 003D                  		move.b	$3D(a1),d0
000083CA ED48                       		lsl.w	#6,d0
000083CC 0680 00FF D000             		addi.l	#$FFD000,d0
000083D2 2440                       		movea.l	d0,a2
000083D4 08AA 0003 0022             		bclr	#3,$22(a2)
000083DA 422A 0025                  		clr.b	$25(a2)
000083DE 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000083E4 6600                       		bne.s	loc_74DC
000083E6 552A 0024                  		subq.b	#2,$24(a2)
000083EA                            
000083EA                            loc_74DC:
000083EA 3008                       		move.w	a0,d0
000083EC 0440 D000                  		subi.w	#-$3000,d0
000083F0 EC48                       		lsr.w	#6,d0
000083F2 0240 007F                  		andi.w	#$7F,d0
000083F6 1340 003D                  		move.b	d0,$3D(a1)
000083FA 137C 0000 0026             		move.b	#0,$26(a1)
00008400 337C 0000 0012             		move.w	#0,$12(a1)
00008406 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000840C 0829 0001 0022             		btst	#1,$22(a1)
00008412 6700                       		beq.s	loc_7512
00008414 2F08                       		move.l	a0,-(sp)
00008416 2049                       		movea.l	a1,a0
00008418 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000841E 205F                       		movea.l	(sp)+,a0
00008420                            
00008420                            loc_7512:
00008420 08E9 0003 0022             		bset	#3,$22(a1)
00008426 08E8 0003 0022             		bset	#3,$22(a0)
0000842C                            
0000842C                            locret_751E:
0000842C 4E75                       		rts	
0000842E                            ; End of function PlatformObject
0000842E                            
0000842E                            ; ---------------------------------------------------------------------------
0000842E                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000842E                            ; ---------------------------------------------------------------------------
0000842E                            
0000842E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000842E                            
0000842E                            
0000842E                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
0000842E 43F8 D000                  		lea	($FFFFD000).w,a1
00008432 4A69 0012                  		tst.w	$12(a1)
00008436 6B00 FFF4                  		bmi.w	locret_751E
0000843A 3029 0008                  		move.w	8(a1),d0
0000843E 9068 0008                  		sub.w	8(a0),d0
00008442 D041                       		add.w	d1,d0
00008444 6BE6                       		bmi.s	locret_751E
00008446 D241                       		add.w	d1,d1
00008448 B041                       		cmp.w	d1,d0
0000844A 64E0                       		bcc.s	locret_751E
0000844C 0828 0000 0001             		btst	#0,1(a0)
00008452 6700                       		beq.s	loc_754A
00008454 4640                       		not.w	d0
00008456 D041                       		add.w	d1,d0
00008458                            
00008458                            loc_754A:
00008458 E248                       		lsr.w	#1,d0
0000845A 7600                       		moveq	#0,d3
0000845C 1632 0000                  		move.b	(a2,d0.w),d3
00008460 3028 000C                  		move.w	$C(a0),d0
00008464 9043                       		sub.w	d3,d0
00008466 6000 FF1A                  		bra.w	Platform3
0000846A                            ; End of function SlopeObject
0000846A                            
0000846A                            
0000846A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000846A                            
0000846A                            
0000846A                            Obj15_Solid:				; XREF: Obj15_SetSolid
0000846A 43F8 D000                  		lea	($FFFFD000).w,a1
0000846E 4A69 0012                  		tst.w	$12(a1)
00008472 6B00 FFB8                  		bmi.w	locret_751E
00008476 3029 0008                  		move.w	8(a1),d0
0000847A 9068 0008                  		sub.w	8(a0),d0
0000847E D041                       		add.w	d1,d0
00008480 6B00 FFAA                  		bmi.w	locret_751E
00008484 D241                       		add.w	d1,d1
00008486 B041                       		cmp.w	d1,d0
00008488 6400 FFA2                  		bcc.w	locret_751E
0000848C 3028 000C                  		move.w	$C(a0),d0
00008490 9043                       		sub.w	d3,d0
00008492 6000 FEEE                  		bra.w	Platform3
00008496                            ; End of function Obj15_Solid
00008496                            
00008496                            ; ===========================================================================
00008496                            
00008496                            Obj11_Action2:				; XREF: Obj11_Index
00008496 6100                       		bsr.s	Obj11_WalkOff
00008498 6100 0000                  		bsr.w	DisplaySprite
0000849C 6000 0000                  		bra.w	Obj11_ChkDel
000084A0                            
000084A0                            ; ---------------------------------------------------------------------------
000084A0                            ; Subroutine allowing Sonic to walk off a bridge
000084A0                            ; ---------------------------------------------------------------------------
000084A0                            
000084A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084A0                            
000084A0                            
000084A0                            Obj11_WalkOff:				; XREF: Obj11_Action2
000084A0 7200                       		moveq	#0,d1
000084A2 1228 0028                  		move.b	$28(a0),d1
000084A6 E749                       		lsl.w	#3,d1
000084A8 3401                       		move.w	d1,d2
000084AA 5041                       		addq.w	#8,d1
000084AC 6100                       		bsr.s	ExitPlatform2
000084AE 6400                       		bcc.s	locret_75BE
000084B0 E848                       		lsr.w	#4,d0
000084B2 1140 003F                  		move.b	d0,$3F(a0)
000084B6 1028 003E                  		move.b	$3E(a0),d0
000084BA 0C00 0040                  		cmpi.b	#$40,d0
000084BE 6700                       		beq.s	loc_75B6
000084C0 5828 003E                  		addq.b	#4,$3E(a0)
000084C4                            
000084C4                            loc_75B6:
000084C4 6100 0000                  		bsr.w	Obj11_Bend
000084C8 6100 0000                  		bsr.w	Obj11_MoveSonic
000084CC                            
000084CC                            locret_75BE:
000084CC 4E75                       		rts	
000084CE                            ; End of function Obj11_WalkOff
000084CE                            
000084CE                            ; ---------------------------------------------------------------------------
000084CE                            ; Subroutine allowing Sonic to walk or jump off	a platform
000084CE                            ; ---------------------------------------------------------------------------
000084CE                            
000084CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084CE                            
000084CE                            
000084CE                            ExitPlatform:
000084CE 3401                       		move.w	d1,d2
000084D0                            
000084D0                            ExitPlatform2:
000084D0 D442                       		add.w	d2,d2
000084D2 43F8 D000                  		lea	($FFFFD000).w,a1
000084D6 0829 0001 0022             		btst	#1,$22(a1)
000084DC 6600                       		bne.s	loc_75E0
000084DE 3029 0008                  		move.w	8(a1),d0
000084E2 9068 0008                  		sub.w	8(a0),d0
000084E6 D041                       		add.w	d1,d0
000084E8 6B00                       		bmi.s	loc_75E0
000084EA B042                       		cmp.w	d2,d0
000084EC 6500                       		bcs.s	locret_75F2
000084EE                            
000084EE                            loc_75E0:
000084EE 08A9 0003 0022             		bclr	#3,$22(a1)
000084F4 117C 0002 0024             		move.b	#2,$24(a0)
000084FA 08A8 0003 0022             		bclr	#3,$22(a0)
00008500                            
00008500                            locret_75F2:
00008500 4E75                       		rts	
00008502                            ; End of function ExitPlatform
00008502                            
00008502                            
00008502                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008502                            
00008502                            
00008502                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00008502 7000                       		moveq	#0,d0
00008504 1028 003F                  		move.b	$3F(a0),d0
00008508 1030 0029                  		move.b	$29(a0,d0.w),d0
0000850C ED48                       		lsl.w	#6,d0
0000850E 0680 00FF D000             		addi.l	#$FFD000,d0
00008514 2440                       		movea.l	d0,a2
00008516 43F8 D000                  		lea	($FFFFD000).w,a1
0000851A 302A 000C                  		move.w	$C(a2),d0
0000851E 5140                       		subq.w	#8,d0
00008520 7200                       		moveq	#0,d1
00008522 1229 0016                  		move.b	$16(a1),d1
00008526 9041                       		sub.w	d1,d0
00008528 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
0000852C 4E75                       		rts	
0000852E                            ; End of function Obj11_MoveSonic
0000852E                            
0000852E                            
0000852E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000852E                            
0000852E                            
0000852E                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
0000852E 1028 003E                  		move.b	$3E(a0),d0
00008532 6100 AEF0                  		bsr.w	CalcSine
00008536 3800                       		move.w	d0,d4
00008538 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
0000853E 7000                       		moveq	#0,d0
00008540 1028 0028                  		move.b	$28(a0),d0
00008544 E948                       		lsl.w	#4,d0
00008546 7600                       		moveq	#0,d3
00008548 1628 003F                  		move.b	$3F(a0),d3
0000854C 3403                       		move.w	d3,d2
0000854E D640                       		add.w	d0,d3
00008550 7A00                       		moveq	#0,d5
00008552 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00008558 1A35 3000                  		move.b	(a5,d3.w),d5
0000855C 0243 000F                  		andi.w	#$F,d3
00008560 E94B                       		lsl.w	#4,d3
00008562 47F4 3000                  		lea	(a4,d3.w),a3
00008566 45E8 0029                  		lea	$29(a0),a2
0000856A                            
0000856A                            loc_765C:
0000856A 7000                       		moveq	#0,d0
0000856C 101A                       		move.b	(a2)+,d0
0000856E ED48                       		lsl.w	#6,d0
00008570 0680 00FF D000             		addi.l	#$FFD000,d0
00008576 2240                       		movea.l	d0,a1
00008578 7000                       		moveq	#0,d0
0000857A 101B                       		move.b	(a3)+,d0
0000857C 5240                       		addq.w	#1,d0
0000857E C0C5                       		mulu.w	d5,d0
00008580 C0C4                       		mulu.w	d4,d0
00008582 4840                       		swap	d0
00008584 D069 003C                  		add.w	$3C(a1),d0
00008588 3340 000C                  		move.w	d0,$C(a1)
0000858C 51CA FFDC                  		dbf	d2,loc_765C
00008590 7000                       		moveq	#0,d0
00008592 1028 0028                  		move.b	$28(a0),d0
00008596 7600                       		moveq	#0,d3
00008598 1628 003F                  		move.b	$3F(a0),d3
0000859C 5203                       		addq.b	#1,d3
0000859E 9600                       		sub.b	d0,d3
000085A0 4403                       		neg.b	d3
000085A2 6B00                       		bmi.s	locret_76CA
000085A4 3403                       		move.w	d3,d2
000085A6 E94B                       		lsl.w	#4,d3
000085A8 47F4 3000                  		lea	(a4,d3.w),a3
000085AC D6C2                       		adda.w	d2,a3
000085AE 5342                       		subq.w	#1,d2
000085B0 6500                       		bcs.s	locret_76CA
000085B2                            
000085B2                            loc_76A4:
000085B2 7000                       		moveq	#0,d0
000085B4 101A                       		move.b	(a2)+,d0
000085B6 ED48                       		lsl.w	#6,d0
000085B8 0680 00FF D000             		addi.l	#$FFD000,d0
000085BE 2240                       		movea.l	d0,a1
000085C0 7000                       		moveq	#0,d0
000085C2 1023                       		move.b	-(a3),d0
000085C4 5240                       		addq.w	#1,d0
000085C6 C0C5                       		mulu.w	d5,d0
000085C8 C0C4                       		mulu.w	d4,d0
000085CA 4840                       		swap	d0
000085CC D069 003C                  		add.w	$3C(a1),d0
000085D0 3340 000C                  		move.w	d0,$C(a1)
000085D4 51CA FFDC                  		dbf	d2,loc_76A4
000085D8                            
000085D8                            locret_76CA:
000085D8 4E75                       		rts	
000085DA                            ; End of function Obj11_Bend
000085DA                            
000085DA                            ; ===========================================================================
000085DA                            ; ---------------------------------------------------------------------------
000085DA                            ; GHZ bridge-bending data
000085DA                            ; (Defines how the bridge bends	when Sonic walks across	it)
000085DA                            ; ---------------------------------------------------------------------------
000085DA                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000086EA                            		even
000086EA                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000087EA                            		even
000087EA                            
000087EA                            ; ===========================================================================
000087EA                            
000087EA                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000087EA 3028 0008                  		move.w	8(a0),d0
000087EE 0240 FF80                  		andi.w	#$FF80,d0
000087F2 3238 F700                  		move.w	($FFFFF700).w,d1
000087F6 0441 0080                  		subi.w	#$80,d1
000087FA 0241 FF80                  		andi.w	#$FF80,d1
000087FE 9041                       		sub.w	d1,d0
00008800 0C40 0280                  		cmpi.w	#$280,d0
00008804 6200 0000                  		bhi.w	Obj11_DelAll
00008808 4E75                       		rts	
0000880A                            ; ===========================================================================
0000880A                            
0000880A                            Obj11_DelAll:				; XREF: Obj11_ChkDel
0000880A 7400                       		moveq	#0,d2
0000880C 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00008810 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00008812 5302                       		subq.b	#1,d2		; subtract 1
00008814 6500                       		bcs.s	Obj11_Delete
00008816                            
00008816                            Obj11_DelLoop:
00008816 7000                       		moveq	#0,d0
00008818 101A                       		move.b	(a2)+,d0
0000881A ED48                       		lsl.w	#6,d0
0000881C 0680 00FF D000             		addi.l	#$FFD000,d0
00008822 2240                       		movea.l	d0,a1
00008824 B048                       		cmp.w	a0,d0
00008826 6700                       		beq.s	loc_791E
00008828 6100 0000                  		bsr.w	DeleteObject2
0000882C                            
0000882C                            loc_791E:
0000882C 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00008830                            
00008830                            Obj11_Delete:
00008830 6100 0000                  		bsr.w	DeleteObject
00008834 4E75                       		rts	
00008836                            ; ===========================================================================
00008836                            
00008836                            Obj11_Delete2:				; XREF: Obj11_Index
00008836 6100 0000                  		bsr.w	DeleteObject
0000883A 4E75                       		rts	
0000883C                            ; ===========================================================================
0000883C                            
0000883C                            Obj11_Display2:				; XREF: Obj11_Index
0000883C 6100 0000                  		bsr.w	DisplaySprite
00008840 4E75                       		rts	
00008842                            ; ===========================================================================
00008842                            ; ---------------------------------------------------------------------------
00008842                            ; Sprite mappings - GHZ	bridge
00008842                            ; ---------------------------------------------------------------------------
00008842                            Map_obj11:
00008842                            	include "_maps\obj11.asm"
00008842                            ; ---------------------------------------------------------------------------
00008842                            ; Sprite mappings - GHZ	bridge
00008842                            ; ---------------------------------------------------------------------------
00008842 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00008846 0000                       		dc.w byte_794B-Map_obj11
00008848 01                         byte_793A:	dc.b 1
00008849 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000884E 02                         byte_7940:	dc.b 2
0000884F F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00008854 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008859 01                         byte_794B:	dc.b 1
0000885A FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00008860 00                         		even
00008860 00                         		even
00008860                            
00008860                            ; ===========================================================================
00008860                            ; ---------------------------------------------------------------------------
00008860                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008860                            ;	    - spiked ball on a chain (SBZ)
00008860                            ; ---------------------------------------------------------------------------
00008860                            
00008860                            Obj15:					; XREF: Obj_Index
00008860 7000                       		moveq	#0,d0
00008862 1028 0024                  		move.b	$24(a0),d0
00008866 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
0000886A 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
0000886E                            ; ===========================================================================
0000886E 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008872 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008876 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
0000887A 0000                       		dc.w Obj15_Action-Obj15_Index
0000887C                            ; ===========================================================================
0000887C                            
0000887C                            Obj15_Main:				; XREF: Obj15_Index
0000887C 5428 0024                  		addq.b	#2,$24(a0)
00008880 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008888 317C 4380 0002             		move.w	#$4380,2(a0)
0000888E 117C 0004 0001             		move.b	#4,1(a0)
00008894 117C 0003 0018             		move.b	#3,$18(a0)
0000889A 117C 0018 0019             		move.b	#$18,$19(a0)
000088A0 117C 0008 0016             		move.b	#8,$16(a0)
000088A6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000088AC 3168 0008 003A             		move.w	8(a0),$3A(a0)
000088B2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000088B8 6600                       		bne.s	Obj15_NotSLZ
000088BA 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
000088C2 317C 43DC 0002             		move.w	#$43DC,2(a0)
000088C8 117C 0020 0019             		move.b	#$20,$19(a0)
000088CE 117C 0010 0016             		move.b	#$10,$16(a0)
000088D4 117C 0099 0020             		move.b	#$99,$20(a0)
000088DA                            
000088DA                            Obj15_NotSLZ:
000088DA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000088E0 6600                       		bne.s	Obj15_SetLength
000088E2 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
000088EA 317C 0391 0002             		move.w	#$391,2(a0)
000088F0 117C 0018 0019             		move.b	#$18,$19(a0)
000088F6 117C 0018 0016             		move.b	#$18,$16(a0)
000088FC 117C 0086 0020             		move.b	#$86,$20(a0)
00008902 117C 000C 0024             		move.b	#$C,$24(a0)
00008908                            
00008908                            Obj15_SetLength:
00008908 1810                       		move.b	0(a0),d4
0000890A 7200                       		moveq	#0,d1
0000890C 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008910 1212                       		move.b	(a2),d1		; move a2 to d1
00008912 3F01                       		move.w	d1,-(sp)
00008914 0241 000F                  		andi.w	#$F,d1
00008918 14FC 0000                  		move.b	#0,(a2)+
0000891C 3601                       		move.w	d1,d3
0000891E E94B                       		lsl.w	#4,d3
00008920 5003                       		addq.b	#8,d3
00008922 1143 003C                  		move.b	d3,$3C(a0)
00008926 5103                       		subq.b	#8,d3
00008928 4A28 001A                  		tst.b	$1A(a0)
0000892C 6700                       		beq.s	Obj15_MakeChain
0000892E 5003                       		addq.b	#8,d3
00008930 5341                       		subq.w	#1,d1
00008932                            
00008932                            Obj15_MakeChain:
00008932 6100 0000                  		bsr.w	SingleObjLoad
00008936 6600                       		bne.s	loc_7A92
00008938 5228 0028                  		addq.b	#1,$28(a0)
0000893C 3A09                       		move.w	a1,d5
0000893E 0445 D000                  		subi.w	#-$3000,d5
00008942 EC4D                       		lsr.w	#6,d5
00008944 0245 007F                  		andi.w	#$7F,d5
00008948 14C5                       		move.b	d5,(a2)+
0000894A 137C 000A 0024             		move.b	#$A,$24(a1)
00008950 1284                       		move.b	d4,0(a1)	; load swinging	object
00008952 2368 0004 0004             		move.l	4(a0),4(a1)
00008958 3368 0002 0002             		move.w	2(a0),2(a1)
0000895E 08A9 0006 0002             		bclr	#6,2(a1)
00008964 137C 0004 0001             		move.b	#4,1(a1)
0000896A 137C 0004 0018             		move.b	#4,$18(a1)
00008970 137C 0008 0019             		move.b	#8,$19(a1)
00008976 137C 0001 001A             		move.b	#1,$1A(a1)
0000897C 1343 003C                  		move.b	d3,$3C(a1)
00008980 0403 0010                  		subi.b	#$10,d3
00008984 6400                       		bcc.s	loc_7A8E
00008986 137C 0002 001A             		move.b	#2,$1A(a1)
0000898C 137C 0003 0018             		move.b	#3,$18(a1)
00008992 08E9 0006 0002             		bset	#6,2(a1)
00008998                            
00008998                            loc_7A8E:
00008998 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000899C                            
0000899C                            loc_7A92:
0000899C 3A08                       		move.w	a0,d5
0000899E 0445 D000                  		subi.w	#-$3000,d5
000089A2 EC4D                       		lsr.w	#6,d5
000089A4 0245 007F                  		andi.w	#$7F,d5
000089A8 14C5                       		move.b	d5,(a2)+
000089AA 317C 4080 0026             		move.w	#$4080,$26(a0)
000089B0 317C FE00 003E             		move.w	#-$200,$3E(a0)
000089B6 321F                       		move.w	(sp)+,d1
000089B8 0801 0004                  		btst	#4,d1		; is object type $8X ?
000089BC 6700                       		beq.s	loc_7AD4	; if not, branch
000089BE 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000089C6 317C 43AA 0002             		move.w	#$43AA,2(a0)
000089CC 117C 0001 001A             		move.b	#1,$1A(a0)
000089D2 117C 0002 0018             		move.b	#2,$18(a0)
000089D8 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
000089DE                            
000089DE                            loc_7AD4:
000089DE 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
000089E4 6700                       		beq.s	Obj15_Action	; if yes, branch
000089E6                            
000089E6                            Obj15_SetSolid:				; XREF: Obj15_Index
000089E6 7200                       		moveq	#0,d1
000089E8 1228 0019                  		move.b	$19(a0),d1
000089EC 7600                       		moveq	#0,d3
000089EE 1628 0016                  		move.b	$16(a0),d3
000089F2 6100 FA76                  		bsr.w	Obj15_Solid
000089F6                            
000089F6                            Obj15_Action:				; XREF: Obj15_Index
000089F6 6100 0000                  		bsr.w	Obj15_Move
000089FA 6100 0000                  		bsr.w	DisplaySprite
000089FE 6000 0000                  		bra.w	Obj15_ChkDel
00008A02                            ; ===========================================================================
00008A02                            
00008A02                            Obj15_Action2:				; XREF: Obj15_Index
00008A02 7200                       		moveq	#0,d1
00008A04 1228 0019                  		move.b	$19(a0),d1
00008A08 6100 FAC4                  		bsr.w	ExitPlatform
00008A0C 3F28 0008                  		move.w	8(a0),-(sp)
00008A10 6100 0000                  		bsr.w	Obj15_Move
00008A14 341F                       		move.w	(sp)+,d2
00008A16 7600                       		moveq	#0,d3
00008A18 1628 0016                  		move.b	$16(a0),d3
00008A1C 5203                       		addq.b	#1,d3
00008A1E 6100 0000                  		bsr.w	MvSonicOnPtfm
00008A22 6100 0000                  		bsr.w	DisplaySprite
00008A26 6000 0000                  		bra.w	Obj15_ChkDel
00008A2A                            
00008A2A 4E75                       		rts
00008A2C                            
00008A2C                            ; ---------------------------------------------------------------------------
00008A2C                            ; Subroutine to	change Sonic's position with a platform
00008A2C                            ; ---------------------------------------------------------------------------
00008A2C                            
00008A2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A2C                            
00008A2C                            
00008A2C                            MvSonicOnPtfm:
00008A2C 43F8 D000                  		lea	($FFFFD000).w,a1
00008A30 3028 000C                  		move.w	$C(a0),d0
00008A34 9043                       		sub.w	d3,d0
00008A36 6000                       		bra.s	MvSonic2
00008A38                            ; End of function MvSonicOnPtfm
00008A38                            
00008A38                            ; ---------------------------------------------------------------------------
00008A38                            ; Subroutine to	change Sonic's position with a platform
00008A38                            ; ---------------------------------------------------------------------------
00008A38                            
00008A38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A38                            
00008A38                            
00008A38                            MvSonicOnPtfm2:
00008A38 43F8 D000                  		lea	($FFFFD000).w,a1
00008A3C 3028 000C                  		move.w	$C(a0),d0
00008A40 0440 0009                  		subi.w	#9,d0
00008A44                            
00008A44                            MvSonic2:
00008A44 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008A48 6B00                       		bmi.s	locret_7B62
00008A4A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008A50 6400                       		bcc.s	locret_7B62
00008A52 4A78 FE08                  		tst.w	($FFFFFE08).w
00008A56 6600                       		bne.s	locret_7B62
00008A58 7200                       		moveq	#0,d1
00008A5A 1229 0016                  		move.b	$16(a1),d1
00008A5E 9041                       		sub.w	d1,d0
00008A60 3340 000C                  		move.w	d0,$C(a1)
00008A64 9468 0008                  		sub.w	8(a0),d2
00008A68 9569 0008                  		sub.w	d2,8(a1)
00008A6C                            
00008A6C                            locret_7B62:
00008A6C 4E75                       		rts	
00008A6E                            ; End of function MvSonicOnPtfm2
00008A6E                            
00008A6E                            
00008A6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A6E                            
00008A6E                            
00008A6E                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008A6E 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008A72 323C 0080                  		move.w	#$80,d1
00008A76 0828 0000 0022             		btst	#0,$22(a0)
00008A7C 6700                       		beq.s	loc_7B78
00008A7E 4440                       		neg.w	d0
00008A80 D041                       		add.w	d1,d0
00008A82                            
00008A82                            loc_7B78:
00008A82 6000                       		bra.s	Obj15_Move2
00008A84                            ; End of function Obj15_Move
00008A84                            
00008A84                            
00008A84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A84                            
00008A84                            
00008A84                            Obj48_Move:				; XREF: Obj48_Display2
00008A84 4A28 003D                  		tst.b	$3D(a0)
00008A88 6600                       		bne.s	loc_7B9C
00008A8A 3028 003E                  		move.w	$3E(a0),d0
00008A8E 5040                       		addq.w	#8,d0
00008A90 3140 003E                  		move.w	d0,$3E(a0)
00008A94 D168 0026                  		add.w	d0,$26(a0)
00008A98 0C40 0200                  		cmpi.w	#$200,d0
00008A9C 6600                       		bne.s	loc_7BB6
00008A9E 117C 0001 003D             		move.b	#1,$3D(a0)
00008AA4 6000                       		bra.s	loc_7BB6
00008AA6                            ; ===========================================================================
00008AA6                            
00008AA6                            loc_7B9C:
00008AA6 3028 003E                  		move.w	$3E(a0),d0
00008AAA 5140                       		subq.w	#8,d0
00008AAC 3140 003E                  		move.w	d0,$3E(a0)
00008AB0 D168 0026                  		add.w	d0,$26(a0)
00008AB4 0C40 FE00                  		cmpi.w	#-$200,d0
00008AB8 6600                       		bne.s	loc_7BB6
00008ABA 117C 0000 003D             		move.b	#0,$3D(a0)
00008AC0                            
00008AC0                            loc_7BB6:
00008AC0 1028 0026                  		move.b	$26(a0),d0
00008AC4                            ; End of function Obj48_Move
00008AC4                            
00008AC4                            
00008AC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AC4                            
00008AC4                            
00008AC4                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008AC4 6100 A95E                  		bsr.w	CalcSine
00008AC8 3428 0038                  		move.w	$38(a0),d2
00008ACC 3628 003A                  		move.w	$3A(a0),d3
00008AD0 45E8 0028                  		lea	$28(a0),a2
00008AD4 7C00                       		moveq	#0,d6
00008AD6 1C1A                       		move.b	(a2)+,d6
00008AD8                            
00008AD8                            loc_7BCE:
00008AD8 7800                       		moveq	#0,d4
00008ADA 181A                       		move.b	(a2)+,d4
00008ADC ED4C                       		lsl.w	#6,d4
00008ADE 0684 00FF D000             		addi.l	#$FFD000,d4
00008AE4 2244                       		movea.l	d4,a1
00008AE6 7800                       		moveq	#0,d4
00008AE8 1829 003C                  		move.b	$3C(a1),d4
00008AEC 2A04                       		move.l	d4,d5
00008AEE C9C0                       		muls.w	d0,d4
00008AF0 E084                       		asr.l	#8,d4
00008AF2 CBC1                       		muls.w	d1,d5
00008AF4 E085                       		asr.l	#8,d5
00008AF6 D842                       		add.w	d2,d4
00008AF8 DA43                       		add.w	d3,d5
00008AFA 3344 000C                  		move.w	d4,$C(a1)
00008AFE 3345 0008                  		move.w	d5,8(a1)
00008B02 51CE FFD4                  		dbf	d6,loc_7BCE
00008B06 4E75                       		rts	
00008B08                            ; End of function Obj15_Move2
00008B08                            
00008B08                            ; ===========================================================================
00008B08                            
00008B08                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008B08 3028 003A                  		move.w	$3A(a0),d0
00008B0C 0240 FF80                  		andi.w	#$FF80,d0
00008B10 3238 F700                  		move.w	($FFFFF700).w,d1
00008B14 0441 0080                  		subi.w	#$80,d1
00008B18 0241 FF80                  		andi.w	#$FF80,d1
00008B1C 9041                       		sub.w	d1,d0
00008B1E 0C40 0280                  		cmpi.w	#$280,d0
00008B22 6200 0000                  		bhi.w	Obj15_DelAll
00008B26 4E75                       		rts	
00008B28                            ; ===========================================================================
00008B28                            
00008B28                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008B28 7400                       		moveq	#0,d2
00008B2A 45E8 0028                  		lea	$28(a0),a2
00008B2E 141A                       		move.b	(a2)+,d2
00008B30                            
00008B30                            Obj15_DelLoop:
00008B30 7000                       		moveq	#0,d0
00008B32 101A                       		move.b	(a2)+,d0
00008B34 ED48                       		lsl.w	#6,d0
00008B36 0680 00FF D000             		addi.l	#$FFD000,d0
00008B3C 2240                       		movea.l	d0,a1
00008B3E 6100 0000                  		bsr.w	DeleteObject2
00008B42 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008B46 4E75                       		rts	
00008B48                            ; ===========================================================================
00008B48                            
00008B48                            Obj15_Delete:				; XREF: Obj15_Index
00008B48 6100 0000                  		bsr.w	DeleteObject
00008B4C 4E75                       		rts	
00008B4E                            ; ===========================================================================
00008B4E                            
00008B4E                            Obj15_Display:				; XREF: Obj15_Index
00008B4E 6000 0000                  		bra.w	DisplaySprite
00008B52                            ; ===========================================================================
00008B52                            ; ---------------------------------------------------------------------------
00008B52                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008B52                            ; ---------------------------------------------------------------------------
00008B52                            Map_obj15:
00008B52                            	include "_maps\obj15ghz.asm"
00008B52                            ; ---------------------------------------------------------------------------
00008B52                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008B52                            ; ---------------------------------------------------------------------------
00008B52 0000                       		dc.w byte_7C4E-Map_obj15
00008B54 0000                       		dc.w byte_7C59-Map_obj15
00008B56 0000                       		dc.w byte_7C5F-Map_obj15
00008B58 02                         byte_7C4E:	dc.b 2
00008B59 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008B5E F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008B63 01                         byte_7C59:	dc.b 1
00008B64 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008B69 01                         byte_7C5F:	dc.b 1
00008B6A F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008B70 00                         		even
00008B70 00                         		even
00008B70                            
00008B70                            ; ---------------------------------------------------------------------------
00008B70                            ; Sprite mappings - SLZ	swinging platforms
00008B70                            ; ---------------------------------------------------------------------------
00008B70                            Map_obj15a:
00008B70                            	include "_maps\obj15slz.asm"
00008B70                            ; ---------------------------------------------------------------------------
00008B70                            ; Sprite mappings - SLZ	swinging platforms
00008B70                            ; ---------------------------------------------------------------------------
00008B70 0000                       		dc.w byte_7C6C-Map_obj15a
00008B72 0000                       		dc.w byte_7C95-Map_obj15a
00008B74 0000                       		dc.w byte_7C9B-Map_obj15a
00008B76 08                         byte_7C6C:	dc.b 8
00008B77 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008B7C F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008B81 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008B86 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008B8B 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008B90 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008B95 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008B9A 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008B9F 01                         byte_7C95:	dc.b 1
00008BA0 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008BA5 01                         byte_7C9B:	dc.b 1
00008BA6 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008BAC 00                         		even
00008BAC 00                         		even
00008BAC                            
00008BAC                            ; ===========================================================================
00008BAC                            ; ---------------------------------------------------------------------------
00008BAC                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008BAC                            ; ---------------------------------------------------------------------------
00008BAC                            
00008BAC                            Obj17:					; XREF: Obj_Index
00008BAC 7000                       		moveq	#0,d0
00008BAE 1028 0024                  		move.b	$24(a0),d0
00008BB2 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008BB6 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008BBA                            ; ===========================================================================
00008BBA 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008BBC 0000                       		dc.w Obj17_Action-Obj17_Index
00008BBE 0000                       		dc.w Obj17_Action-Obj17_Index
00008BC0 0000                       		dc.w Obj17_Delete-Obj17_Index
00008BC2 0000                       		dc.w Obj17_Display-Obj17_Index
00008BC4                            ; ===========================================================================
00008BC4                            
00008BC4                            Obj17_Main:				; XREF: Obj17_Index
00008BC4 5428 0024                  		addq.b	#2,$24(a0)
00008BC8 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008BD0 317C 4398 0002             		move.w	#$4398,2(a0)
00008BD6 117C 0007 0022             		move.b	#7,$22(a0)
00008BDC 117C 0004 0001             		move.b	#4,1(a0)
00008BE2 117C 0003 0018             		move.b	#3,$18(a0)
00008BE8 117C 0008 0019             		move.b	#8,$19(a0)
00008BEE 3428 000C                  		move.w	$C(a0),d2
00008BF2 3628 0008                  		move.w	8(a0),d3
00008BF6 1810                       		move.b	0(a0),d4
00008BF8 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008BFC 7200                       		moveq	#0,d1
00008BFE 1212                       		move.b	(a2),d1		; move a2 to d1
00008C00 14FC 0000                  		move.b	#0,(a2)+
00008C04 3001                       		move.w	d1,d0
00008C06 E248                       		lsr.w	#1,d0
00008C08 E948                       		lsl.w	#4,d0
00008C0A 9640                       		sub.w	d0,d3
00008C0C 5501                       		subq.b	#2,d1
00008C0E 6500                       		bcs.s	Obj17_Action
00008C10 7C00                       		moveq	#0,d6
00008C12                            
00008C12                            Obj17_MakeHelix:
00008C12 6100 0000                  		bsr.w	SingleObjLoad
00008C16 6600                       		bne.s	Obj17_Action
00008C18 5228 0028                  		addq.b	#1,$28(a0)
00008C1C 3A09                       		move.w	a1,d5
00008C1E 0445 D000                  		subi.w	#$D000,d5
00008C22 EC4D                       		lsr.w	#6,d5
00008C24 0245 007F                  		andi.w	#$7F,d5
00008C28 14C5                       		move.b	d5,(a2)+
00008C2A 137C 0008 0024             		move.b	#8,$24(a1)
00008C30 1284                       		move.b	d4,0(a1)
00008C32 3342 000C                  		move.w	d2,$C(a1)
00008C36 3343 0008                  		move.w	d3,8(a1)
00008C3A 2368 0004 0004             		move.l	4(a0),4(a1)
00008C40 337C 4398 0002             		move.w	#$4398,2(a1)
00008C46 137C 0004 0001             		move.b	#4,1(a1)
00008C4C 137C 0003 0018             		move.b	#3,$18(a1)
00008C52 137C 0008 0019             		move.b	#8,$19(a1)
00008C58 1346 003E                  		move.b	d6,$3E(a1)
00008C5C 5206                       		addq.b	#1,d6
00008C5E 0206 0007                  		andi.b	#7,d6
00008C62 0643 0010                  		addi.w	#$10,d3
00008C66 B668 0008                  		cmp.w	8(a0),d3
00008C6A 6600                       		bne.s	loc_7D78
00008C6C 1146 003E                  		move.b	d6,$3E(a0)
00008C70 5206                       		addq.b	#1,d6
00008C72 0206 0007                  		andi.b	#7,d6
00008C76 0643 0010                  		addi.w	#$10,d3
00008C7A 5228 0028                  		addq.b	#1,$28(a0)
00008C7E                            
00008C7E                            loc_7D78:
00008C7E 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008C82                            
00008C82                            Obj17_Action:				; XREF: Obj17_Index
00008C82 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008C86 6100 0000                  		bsr.w	DisplaySprite
00008C8A 6000 0000                  		bra.w	Obj17_ChkDel
00008C8E                            
00008C8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C8E                            
00008C8E                            
00008C8E                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008C8E 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008C92 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008C98 D028 003E                  		add.b	$3E(a0),d0
00008C9C 0200 0007                  		andi.b	#7,d0
00008CA0 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008CA4 6600                       		bne.s	locret_7DA6
00008CA6 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008CAC                            
00008CAC                            locret_7DA6:
00008CAC 4E75                       		rts	
00008CAE                            ; End of function Obj17_RotateSpikes
00008CAE                            
00008CAE                            ; ===========================================================================
00008CAE                            
00008CAE                            Obj17_ChkDel:				; XREF: Obj17_Action
00008CAE 3028 0008                  		move.w	8(a0),d0
00008CB2 0240 FF80                  		andi.w	#$FF80,d0
00008CB6 3238 F700                  		move.w	($FFFFF700).w,d1
00008CBA 0441 0080                  		subi.w	#$80,d1
00008CBE 0241 FF80                  		andi.w	#$FF80,d1
00008CC2 9041                       		sub.w	d1,d0
00008CC4 0C40 0280                  		cmpi.w	#$280,d0
00008CC8 6200 0000                  		bhi.w	Obj17_DelAll
00008CCC 4E75                       		rts	
00008CCE                            ; ===========================================================================
00008CCE                            
00008CCE                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008CCE 7400                       		moveq	#0,d2
00008CD0 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008CD4 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008CD6 5502                       		subq.b	#2,d2
00008CD8 6500                       		bcs.s	Obj17_Delete
00008CDA                            
00008CDA                            Obj17_DelLoop:
00008CDA 7000                       		moveq	#0,d0
00008CDC 101A                       		move.b	(a2)+,d0
00008CDE ED48                       		lsl.w	#6,d0
00008CE0 0680 00FF D000             		addi.l	#$FFD000,d0
00008CE6 2240                       		movea.l	d0,a1
00008CE8 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008CEC 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008CF0                            
00008CF0                            Obj17_Delete:				; XREF: Obj17_Index
00008CF0 6100 0000                  		bsr.w	DeleteObject
00008CF4 4E75                       		rts	
00008CF6                            ; ===========================================================================
00008CF6                            
00008CF6                            Obj17_Display:				; XREF: Obj17_Index
00008CF6 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008CFA 6000 0000                  		bra.w	DisplaySprite
00008CFE                            ; ===========================================================================
00008CFE                            ; ---------------------------------------------------------------------------
00008CFE                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008CFE                            ; ---------------------------------------------------------------------------
00008CFE                            Map_obj17:
00008CFE                            	include "_maps\obj17.asm"
00008CFE                            ; ---------------------------------------------------------------------------
00008CFE                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008CFE                            ; ---------------------------------------------------------------------------
00008CFE 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008D02 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008D06 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008D0A 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008D0E 01                         byte_7E08:	dc.b 1
00008D0F F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008D14 01                         byte_7E0E:	dc.b 1
00008D15 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008D1A 01                         byte_7E14:	dc.b 1
00008D1B F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008D20 01                         byte_7E1A:	dc.b 1
00008D21 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008D26 01                         byte_7E20:	dc.b 1
00008D27 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008D2C 01                         byte_7E26:	dc.b 1
00008D2D 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008D32 01                         byte_7E2C:	dc.b 1
00008D33 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008D38                            		even
00008D38                            		even
00008D38                            
00008D38                            ; ===========================================================================
00008D38                            ; ---------------------------------------------------------------------------
00008D38                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008D38                            ; ---------------------------------------------------------------------------
00008D38                            
00008D38                            Obj18:					; XREF: Obj_Index
00008D38 7000                       		moveq	#0,d0
00008D3A 1028 0024                  		move.b	$24(a0),d0
00008D3E 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008D42 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008D46                            ; ===========================================================================
00008D46 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008D48 0000                       		dc.w Obj18_Solid-Obj18_Index
00008D4A 0000                       		dc.w Obj18_Action2-Obj18_Index
00008D4C 0000                       		dc.w Obj18_Delete-Obj18_Index
00008D4E 0000                       		dc.w Obj18_Action-Obj18_Index
00008D50                            ; ===========================================================================
00008D50                            
00008D50                            Obj18_Main:				; XREF: Obj18_Index
00008D50 5428 0024                  		addq.b	#2,$24(a0)
00008D54 317C 4000 0002             		move.w	#$4000,2(a0)
00008D5A 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008D62 117C 0020 0019             		move.b	#$20,$19(a0)
00008D68 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008D6E 6600                       		bne.s	Obj18_NotSYZ
00008D70 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008D78 117C 0020 0019             		move.b	#$20,$19(a0)
00008D7E                            
00008D7E                            Obj18_NotSYZ:
00008D7E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008D84 6600                       		bne.s	Obj18_NotSLZ
00008D86 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008D8E 117C 0020 0019             		move.b	#$20,$19(a0)
00008D94 317C 4000 0002             		move.w	#$4000,2(a0)
00008D9A 117C 0003 0028             		move.b	#3,$28(a0)
00008DA0                            
00008DA0                            Obj18_NotSLZ:
00008DA0 117C 0004 0001             		move.b	#4,1(a0)
00008DA6 117C 0004 0018             		move.b	#4,$18(a0)
00008DAC 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008DB2 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008DB8 3168 0008 0032             		move.w	8(a0),$32(a0)
00008DBE 317C 0080 0026             		move.w	#$80,$26(a0)
00008DC4 7200                       		moveq	#0,d1
00008DC6 1028 0028                  		move.b	$28(a0),d0
00008DCA 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008DCE 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008DD0 5201                       		addq.b	#1,d1		; use frame #1
00008DD2 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008DD8                            
00008DD8                            Obj18_SetFrame:
00008DD8 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008DDC                            
00008DDC                            Obj18_Solid:				; XREF: Obj18_Index
00008DDC 4A28 0038                  		tst.b	$38(a0)
00008DE0 6700                       		beq.s	loc_7EE0
00008DE2 5928 0038                  		subq.b	#4,$38(a0)
00008DE6                            
00008DE6                            loc_7EE0:
00008DE6 7200                       		moveq	#0,d1
00008DE8 1228 0019                  		move.b	$19(a0),d1
00008DEC 6100 F56C                  		bsr.w	PlatformObject
00008DF0                            
00008DF0                            Obj18_Action:				; XREF: Obj18_Index
00008DF0 6100 0000                  		bsr.w	Obj18_Move
00008DF4 6100 0000                  		bsr.w	Obj18_Nudge
00008DF8 6100 0000                  		bsr.w	DisplaySprite
00008DFC 6000 0000                  		bra.w	Obj18_ChkDel
00008E00                            ; ===========================================================================
00008E00                            
00008E00                            Obj18_Action2:				; XREF: Obj18_Index
00008E00 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008E06 6700                       		beq.s	loc_7F06
00008E08 5828 0038                  		addq.b	#4,$38(a0)
00008E0C                            
00008E0C                            loc_7F06:
00008E0C 7200                       		moveq	#0,d1
00008E0E 1228 0019                  		move.b	$19(a0),d1
00008E12 6100 F6BA                  		bsr.w	ExitPlatform
00008E16 3F28 0008                  		move.w	8(a0),-(sp)
00008E1A 6100 0000                  		bsr.w	Obj18_Move
00008E1E 6100 0000                  		bsr.w	Obj18_Nudge
00008E22 341F                       		move.w	(sp)+,d2
00008E24 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008E28 6100 0000                  		bsr.w	DisplaySprite
00008E2C 6000 0000                  		bra.w	Obj18_ChkDel
00008E30                            
00008E30 4E75                       		rts
00008E32                            
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            ; Subroutine to	move platform slightly when you	stand on it
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            
00008E32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E32                            
00008E32                            
00008E32                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008E32 1028 0038                  		move.b	$38(a0),d0
00008E36 6100 A5EC                  		bsr.w	CalcSine
00008E3A 323C 0400                  		move.w	#$400,d1
00008E3E C1C1                       		muls.w	d1,d0
00008E40 4840                       		swap	d0
00008E42 D068 002C                  		add.w	$2C(a0),d0
00008E46 3140 000C                  		move.w	d0,$C(a0)
00008E4A 4E75                       		rts	
00008E4C                            ; End of function Obj18_Nudge
00008E4C                            
00008E4C                            ; ---------------------------------------------------------------------------
00008E4C                            ; Subroutine to	move platforms
00008E4C                            ; ---------------------------------------------------------------------------
00008E4C                            
00008E4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E4C                            
00008E4C                            
00008E4C                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008E4C 7000                       		moveq	#0,d0
00008E4E 1028 0028                  		move.b	$28(a0),d0
00008E52 0240 000F                  		andi.w	#$F,d0
00008E56 D040                       		add.w	d0,d0
00008E58 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008E5C 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008E60                            ; End of function Obj18_Move
00008E60                            
00008E60                            ; ===========================================================================
00008E60 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008E64 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008E68 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008E6C 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008E70 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008E74 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008E78 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008E7A                            ; ===========================================================================
00008E7A                            
00008E7A                            Obj18_Type00:
00008E7A 4E75                       		rts			; platform 00 doesn't move
00008E7C                            ; ===========================================================================
00008E7C                            
00008E7C                            Obj18_Type05:
00008E7C 3028 0032                  		move.w	$32(a0),d0
00008E80 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008E84 4401                       		neg.b	d1		; reverse platform-motion
00008E86 0601 0040                  		addi.b	#$40,d1
00008E8A 6000                       		bra.s	Obj18_01_Move
00008E8C                            ; ===========================================================================
00008E8C                            
00008E8C                            Obj18_Type01:
00008E8C 3028 0032                  		move.w	$32(a0),d0
00008E90 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008E94 0401 0040                  		subi.b	#$40,d1
00008E98                            
00008E98                            Obj18_01_Move:
00008E98 4881                       		ext.w	d1
00008E9A D041                       		add.w	d1,d0
00008E9C 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008EA0 6000 0000                  		bra.w	Obj18_ChgMotion
00008EA4                            ; ===========================================================================
00008EA4                            
00008EA4                            Obj18_Type0C:
00008EA4 3028 0034                  		move.w	$34(a0),d0
00008EA8 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008EAC 4401                       		neg.b	d1		; reverse platform-motion
00008EAE 0601 0030                  		addi.b	#$30,d1
00008EB2 6000                       		bra.s	Obj18_02_Move
00008EB4                            ; ===========================================================================
00008EB4                            
00008EB4                            Obj18_Type0B:
00008EB4 3028 0034                  		move.w	$34(a0),d0
00008EB8 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008EBC 0401 0030                  		subi.b	#$30,d1
00008EC0 6000                       		bra.s	Obj18_02_Move
00008EC2                            ; ===========================================================================
00008EC2                            
00008EC2                            Obj18_Type06:
00008EC2 3028 0034                  		move.w	$34(a0),d0
00008EC6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008ECA 4401                       		neg.b	d1		; reverse platform-motion
00008ECC 0601 0040                  		addi.b	#$40,d1
00008ED0 6000                       		bra.s	Obj18_02_Move
00008ED2                            ; ===========================================================================
00008ED2                            
00008ED2                            Obj18_Type02:
00008ED2 3028 0034                  		move.w	$34(a0),d0
00008ED6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008EDA 0401 0040                  		subi.b	#$40,d1
00008EDE                            
00008EDE                            Obj18_02_Move:
00008EDE 4881                       		ext.w	d1
00008EE0 D041                       		add.w	d1,d0
00008EE2 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008EE6 6000 0000                  		bra.w	Obj18_ChgMotion
00008EEA                            ; ===========================================================================
00008EEA                            
00008EEA                            Obj18_Type03:
00008EEA 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008EEE 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008EF0 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008EF6 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008EF8 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008EFE                            
00008EFE                            Obj18_03_NoMove:
00008EFE 4E75                       		rts	
00008F00                            ; ===========================================================================
00008F00                            
00008F00                            Obj18_03_Wait:
00008F00 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008F04 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008F06 317C 0020 003A             		move.w	#32,$3A(a0)
00008F0C 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008F10 4E75                       		rts	
00008F12                            ; ===========================================================================
00008F12                            
00008F12                            Obj18_Type04:
00008F12 4A68 003A                  		tst.w	$3A(a0)
00008F16 6700                       		beq.s	loc_8048
00008F18 5368 003A                  		subq.w	#1,$3A(a0)
00008F1C 6600                       		bne.s	loc_8048
00008F1E 0828 0003 0022             		btst	#3,$22(a0)
00008F24 6700                       		beq.s	loc_8042
00008F26 08E9 0001 0022             		bset	#1,$22(a1)
00008F2C 08A9 0003 0022             		bclr	#3,$22(a1)
00008F32 137C 0002 0024             		move.b	#2,$24(a1)
00008F38 08A8 0003 0022             		bclr	#3,$22(a0)
00008F3E 4228 0025                  		clr.b	$25(a0)
00008F42 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008F48                            
00008F48                            loc_8042:
00008F48 117C 0008 0024             		move.b	#8,$24(a0)
00008F4E                            
00008F4E                            loc_8048:
00008F4E 2628 002C                  		move.l	$2C(a0),d3
00008F52 3028 0012                  		move.w	$12(a0),d0
00008F56 48C0                       		ext.l	d0
00008F58 E180                       		asl.l	#8,d0
00008F5A D680                       		add.l	d0,d3
00008F5C 2143 002C                  		move.l	d3,$2C(a0)
00008F60 0668 0038 0012             		addi.w	#$38,$12(a0)
00008F66 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008F6A 0640 00E0                  		addi.w	#$E0,d0
00008F6E B068 002C                  		cmp.w	$2C(a0),d0
00008F72 6400                       		bcc.s	locret_8074
00008F74 117C 0006 0024             		move.b	#6,$24(a0)
00008F7A                            
00008F7A                            locret_8074:
00008F7A 4E75                       		rts	
00008F7C                            ; ===========================================================================
00008F7C                            
00008F7C                            Obj18_Type07:
00008F7C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008F80 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008F82 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008F86 7000                       		moveq	#0,d0
00008F88 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008F8C E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008F8E 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008F92 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008F94 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008F9A                            
00008F9A                            Obj18_07_NoMove:
00008F9A 4E75                       		rts	
00008F9C                            ; ===========================================================================
00008F9C                            
00008F9C                            Obj18_07_Wait:
00008F9C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008FA0 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008FA2 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008FA6 4E75                       		rts	
00008FA8                            ; ===========================================================================
00008FA8                            
00008FA8                            Obj18_Type08:
00008FA8 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008FAC 3028 0034                  		move.w	$34(a0),d0
00008FB0 0440 0200                  		subi.w	#$200,d0
00008FB4 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008FB8 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008FBA 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008FBE                            
00008FBE                            Obj18_08_NoStop:
00008FBE 4E75                       		rts	
00008FC0                            ; ===========================================================================
00008FC0                            
00008FC0                            Obj18_Type0A:
00008FC0 3028 0034                  		move.w	$34(a0),d0
00008FC4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008FC8 0401 0040                  		subi.b	#$40,d1
00008FCC 4881                       		ext.w	d1
00008FCE E241                       		asr.w	#1,d1
00008FD0 D041                       		add.w	d1,d0
00008FD2 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008FD6                            
00008FD6                            Obj18_ChgMotion:
00008FD6 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008FDC 4E75                       		rts	
00008FDE                            ; ===========================================================================
00008FDE                            
00008FDE                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008FDE 3028 0032                  		move.w	$32(a0),d0
00008FE2 0240 FF80                  		andi.w	#$FF80,d0
00008FE6 3238 F700                  		move.w	($FFFFF700).w,d1
00008FEA 0441 0080                  		subi.w	#$80,d1
00008FEE 0241 FF80                  		andi.w	#$FF80,d1
00008FF2 9041                       		sub.w	d1,d0
00008FF4 0C40 0280                  		cmpi.w	#$280,d0
00008FF8 6200                       		bhi.s	Obj18_Delete
00008FFA 4E75                       		rts	
00008FFC                            ; ===========================================================================
00008FFC                            
00008FFC                            Obj18_Delete:				; XREF: Obj18_Index
00008FFC 6000 0000                  		bra.w	DeleteObject
00009000                            ; ===========================================================================
00009000                            ; ---------------------------------------------------------------------------
00009000                            ; Sprite mappings - unused
00009000                            ; ---------------------------------------------------------------------------
00009000                            Map_obj18x:
00009000                            	include "_maps\obj18x.asm"
00009000                            ; ---------------------------------------------------------------------------
00009000                            ; Sprite mappings - unused
00009000                            ; ---------------------------------------------------------------------------
00009000 0000                       		dc.w byte_80FE-Map_obj18x
00009002 0000                       		dc.w byte_8109-Map_obj18x
00009004 02                         byte_80FE:	dc.b 2
00009005 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000900A F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000900F 0A                         byte_8109:	dc.b $A
00009010 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009015 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000901A 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000901F 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009024 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009029 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000902E 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009033 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009038 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000903D 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009042                            		even
00009042                            		even
00009042                            
00009042                            ; ---------------------------------------------------------------------------
00009042                            ; Sprite mappings - GHZ	platforms
00009042                            ; ---------------------------------------------------------------------------
00009042                            Map_obj18:
00009042                            	include "_maps\obj18ghz.asm"
00009042                            ; ---------------------------------------------------------------------------
00009042                            ; Sprite mappings - GHZ	platforms
00009042                            ; ---------------------------------------------------------------------------
00009042 0000                       		dc.w byte_8140-Map_obj18
00009044 0000                       		dc.w byte_8155-Map_obj18
00009046 04                         byte_8140:	dc.b 4
00009047 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000904C F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009051 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009056 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000905B 0A                         byte_8155:	dc.b $A
0000905C F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009061 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009066 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000906B 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009070 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009075 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000907A 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
0000907F 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009084 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009089 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
0000908E                            		even
0000908E                            		even
0000908E                            
0000908E                            ; ---------------------------------------------------------------------------
0000908E                            ; Sprite mappings - SYZ	platforms
0000908E                            ; ---------------------------------------------------------------------------
0000908E                            Map_obj18a:
0000908E                            	include "_maps\obj18syz.asm"
0000908E                            ; ---------------------------------------------------------------------------
0000908E                            ; Sprite mappings - SYZ	platforms
0000908E                            ; ---------------------------------------------------------------------------
0000908E 0000                       		dc.w byte_818A-Map_obj18a
00009090 03                         byte_818A:	dc.b 3
00009091 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009096 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000909B F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000090A0                            		even
000090A0                            		even
000090A0                            
000090A0                            ; ---------------------------------------------------------------------------
000090A0                            ; Sprite mappings - SLZ	platforms
000090A0                            ; ---------------------------------------------------------------------------
000090A0                            Map_obj18b:
000090A0                            	include "_maps\obj18slz.asm"
000090A0                            ; ---------------------------------------------------------------------------
000090A0                            ; Sprite mappings - SLZ	platforms
000090A0                            ; ---------------------------------------------------------------------------
000090A0 0000                       		dc.w byte_819C-Map_obj18b
000090A2 02                         byte_819C:	dc.b 2
000090A3 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000090A8 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000090AE 00                         		even
000090AE 00                         		even
000090AE                            
000090AE                            ; ===========================================================================
000090AE                            ; ---------------------------------------------------------------------------
000090AE                            ; Object 19 - Pearto bombs
000090AE                            ; ---------------------------------------------------------------------------
000090AE                            Obj19:					; XREF: Obj_Index
000090AE 7000                       		moveq	#0,d0
000090B0 1028 0024                  		move.b	$24(a0),d0
000090B4 323B 0000                  		move.w	off_7070(pc,d0.w),d1
000090B8 4EFB 1000                  		jmp	off_7070(pc,d1.w)
000090BC                            ; ---------------------------------------------------------------------------
000090BC                            
000090BC 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
000090C2                            ; ---------------------------------------------------------------------------
000090C2                            
000090C2                            loc_7076:
000090C2 5428 0024                  		addq.b	#2,$24(a0)
000090C6 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
000090CE 317C 0480 0002             		move.w	#($9000/$20),2(a0)
000090D4 117C 0004 0001             		move.b	#4,1(a0)
000090DA 117C 0003 0019             		move.b	#3,$19(a0)
000090E0 117C 0087 0020             		move.b	#$87,$20(a0)
000090E6 117C 0008 0018             		move.b	#8,$18(a0)
000090EC 317C 0018 0030             		move.w	#$18,$30(a0)
000090F2                            
000090F2                            loc_70A6:
000090F2 0828 0007 0022             		btst	#7,$22(a0)
000090F8 6600                       		bne.s	loc_70C2
000090FA 4A68 0030                  		tst.w	$30(a0)
000090FE 6600                       		bne.s	loc_70D2
00009100 4EB9 0000 0000             		jsr	ObjHitFloor
00009106 4A41                       		tst.w	d1
00009108 6A00                       		bpl.s	loc_70D6
0000910A D368 000C                  		add.w	d1,$C(a0)
0000910E                            
0000910E                            loc_70C2:
0000910E 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
00009112 117C 0000 0024             		move.b	#0,$24(a0)
00009118                            ; ---------------------------------------------------------------------------
00009118                            
00009118                            loc_70D2:
00009118 5368 0030                  		subq.w	#1,$30(a0)
0000911C                            
0000911C                            loc_70D6:
0000911C 6100 0000                  		bsr.w	ObjectFall
00009120 6100 0000                  		bsr.w	DisplaySprite
00009124 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009128 0640 00E0                  		addi.w	#$E0,d0
0000912C B068 000C                  		cmp.w	$C(a0),d0
00009130 6500                       		bcs.s	loc_70EE
00009132 4E75                       		rts
00009134                            ; ---------------------------------------------------------------------------
00009134                            
00009134                            loc_70EE:
00009134 6100 0000                  		bsr.w	DeleteObject
00009138 4E75                       		rts
0000913A                            		
0000913A                            Map_obj19:
0000913A                            	include "_maps\obj19.asm"
0000913A                            Map_02b4:
0000913A 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
0000913C 01                         Map_02b4_2: 	dc.b $1
0000913D F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
00009142                            	even
00009142                            	even
00009142                            ; ===========================================================================
00009142                            ; ---------------------------------------------------------------------------
00009142                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009142                            ; ---------------------------------------------------------------------------
00009142                            Map_obj48:
00009142                            	include "_maps\obj48.asm"
00009142                            ; ---------------------------------------------------------------------------
00009142                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009142                            ; ---------------------------------------------------------------------------
00009142 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00009146 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000914A 06                         byte_81B2:	dc.b 6
0000914B F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009150 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009155 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000915A E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0000915F 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009164 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009169 04                         byte_81D1:	dc.b 4
0000916A E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000916F E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009174 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009179 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000917E 04                         byte_81E6:	dc.b 4
0000917F E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009184 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009189 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000918E 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009193 04                         byte_81FB:	dc.b 4
00009194 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009199 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0000919E 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000091A3 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000091A8                            		even
000091A8                            		even
000091A8                            
000091A8                            ; ===========================================================================
000091A8                            ; ---------------------------------------------------------------------------
000091A8                            ; Object 1A - GHZ collapsing ledge
000091A8                            ; ---------------------------------------------------------------------------
000091A8                            
000091A8                            Obj1A:					; XREF: Obj_Index
000091A8 7000                       		moveq	#0,d0
000091AA 1028 0024                  		move.b	$24(a0),d0
000091AE 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000091B2 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000091B6                            ; ===========================================================================
000091B6 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000091BA 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000091BE 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000091C2                            ; ===========================================================================
000091C2                            
000091C2                            Obj1A_Main:				; XREF: Obj1A_Index
000091C2 5428 0024                  		addq.b	#2,$24(a0)
000091C6 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
000091CE 317C 4000 0002             		move.w	#$4000,2(a0)
000091D4 0028 0004 0001             		ori.b	#4,1(a0)
000091DA 117C 0004 0018             		move.b	#4,$18(a0)
000091E0 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
000091E6 117C 0064 0019             		move.b	#$64,$19(a0)
000091EC 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000091F2 117C 0038 0016             		move.b	#$38,$16(a0)
000091F8 08E8 0004 0001             		bset	#4,1(a0)
000091FE                            
000091FE                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000091FE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00009202 6700                       		beq.s	Obj1A_Slope	; if not, branch
00009204 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00009208 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000920C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009210                            
00009210                            Obj1A_Slope:
00009210 323C 0030                  		move.w	#$30,d1
00009214 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000921A 6100 F212                  		bsr.w	SlopeObject
0000921E 6000 0000                  		bra.w	MarkObjGone
00009222                            ; ===========================================================================
00009222                            
00009222                            Obj1A_Touch:				; XREF: Obj1A_Index
00009222 4A28 0038                  		tst.b	$38(a0)
00009226 6700 0000                  		beq.w	loc_847A
0000922A 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009230 5328 0038                  		subq.b	#1,$38(a0)
00009234                            
00009234                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009234                            
00009234                            
00009234                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00009234 323C 0030                  		move.w	#$30,d1
00009238 6100 F294                  		bsr.w	ExitPlatform
0000923C 323C 0030                  		move.w	#$30,d1
00009240 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00009246 3428 0008                  		move.w	8(a0),d2
0000924A 6100 0000                  		bsr.w	SlopeObject2
0000924E 6000 0000                  		bra.w	MarkObjGone
00009252                            ; End of function Obj1A_WalkOff
00009252                            
00009252                            ; ===========================================================================
00009252                            
00009252                            Obj1A_Display:				; XREF: Obj1A_Index
00009252 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009256 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00009258 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000925C 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009260 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009264 6000 0000                  		bra.w	DisplaySprite
00009268                            ; ===========================================================================
00009268                            
00009268                            loc_82D0:				; XREF: Obj1A_Display
00009268 5328 0038                  		subq.b	#1,$38(a0)
0000926C 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00009270 43F8 D000                  		lea	($FFFFD000).w,a1
00009274 0829 0003 0022             		btst	#3,$22(a1)
0000927A 6700                       		beq.s	loc_82FC
0000927C 4A28 0038                  		tst.b	$38(a0)
00009280 6600                       		bne.s	locret_8308
00009282 08A9 0003 0022             		bclr	#3,$22(a1)
00009288 08A9 0005 0022             		bclr	#5,$22(a1)
0000928E 137C 0001 001D             		move.b	#1,$1D(a1)
00009294                            
00009294                            loc_82FC:
00009294 117C 0000 003A             		move.b	#0,$3A(a0)
0000929A 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000092A0                            
000092A0                            locret_8308:
000092A0 4E75                       		rts	
000092A2                            ; ===========================================================================
000092A2                            
000092A2                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000092A2 6100 0000                  		bsr.w	ObjectFall
000092A6 6100 0000                  		bsr.w	DisplaySprite
000092AA 4A28 0001                  		tst.b	1(a0)
000092AE 6A00                       		bpl.s	Obj1A_Delete
000092B0 4E75                       		rts	
000092B2                            ; ===========================================================================
000092B2                            
000092B2                            Obj1A_Delete:				; XREF: Obj1A_Index
000092B2 6100 0000                  		bsr.w	DeleteObject
000092B6 4E75                       		rts	
000092B8                            ; ===========================================================================
000092B8                            ; ---------------------------------------------------------------------------
000092B8                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000092B8                            ; ---------------------------------------------------------------------------
000092B8                            
000092B8                            Obj53:					; XREF: Obj_Index
000092B8 7000                       		moveq	#0,d0
000092BA 1028 0024                  		move.b	$24(a0),d0
000092BE 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000092C2 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000092C6                            ; ===========================================================================
000092C6 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000092CA 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
000092CE 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
000092D2                            ; ===========================================================================
000092D2                            
000092D2                            Obj53_Main:				; XREF: Obj53_Index
000092D2 5428 0024                  		addq.b	#2,$24(a0)
000092D6 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
000092DE 317C 42B8 0002             		move.w	#$42B8,2(a0)
000092E4 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000092EA 6600                       		bne.s	Obj53_NotSLZ
000092EC 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
000092F2 5428 001A                  		addq.b	#2,$1A(a0)
000092F6                            
000092F6                            Obj53_NotSLZ:
000092F6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000092FC 6600                       		bne.s	Obj53_NotSBZ
000092FE 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00009304                            
00009304                            Obj53_NotSBZ:
00009304 0028 0004 0001             		ori.b	#4,1(a0)
0000930A 117C 0004 0018             		move.b	#4,$18(a0)
00009310 117C 0007 0038             		move.b	#7,$38(a0)
00009316 117C 0044 0019             		move.b	#$44,$19(a0)
0000931C                            
0000931C                            Obj53_ChkTouch:				; XREF: Obj53_Index
0000931C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009320 6700                       		beq.s	Obj53_Solid	; if not, branch
00009322 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009326 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
0000932A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000932E                            
0000932E                            Obj53_Solid:
0000932E 323C 0020                  		move.w	#$20,d1
00009332 6100 F026                  		bsr.w	PlatformObject
00009336 4A28 0028                  		tst.b	$28(a0)
0000933A 6A00                       		bpl.s	Obj53_MarkAsGone
0000933C 0829 0003 0022             		btst	#3,$22(a1)
00009342 6700                       		beq.s	Obj53_MarkAsGone
00009344 08A8 0000 0001             		bclr	#0,1(a0)
0000934A 3029 0008                  		move.w	8(a1),d0
0000934E 9068 0008                  		sub.w	8(a0),d0
00009352 6400                       		bcc.s	Obj53_MarkAsGone
00009354 08E8 0000 0001             		bset	#0,1(a0)
0000935A                            
0000935A                            Obj53_MarkAsGone:
0000935A 6000 0000                  		bra.w	MarkObjGone
0000935E                            ; ===========================================================================
0000935E                            
0000935E                            Obj53_Touch:				; XREF: Obj53_Index
0000935E 4A28 0038                  		tst.b	$38(a0)
00009362 6700 0000                  		beq.w	loc_8458
00009366 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000936C 5328 0038                  		subq.b	#1,$38(a0)
00009370                            
00009370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009370                            
00009370                            
00009370                            Obj53_WalkOff:				; XREF: Obj53_Index
00009370 323C 0020                  		move.w	#$20,d1
00009374 6100 F158                  		bsr.w	ExitPlatform
00009378 3428 0008                  		move.w	8(a0),d2
0000937C 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00009380 6000 0000                  		bra.w	MarkObjGone
00009384                            ; End of function Obj53_WalkOff
00009384                            
00009384                            ; ===========================================================================
00009384                            
00009384                            Obj53_Display:				; XREF: Obj53_Index
00009384 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009388 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000938A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000938E 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009392 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009396 6000 0000                  		bra.w	DisplaySprite
0000939A                            ; ===========================================================================
0000939A                            
0000939A                            loc_8402:
0000939A 5328 0038                  		subq.b	#1,$38(a0)
0000939E 6100 FFD0                  		bsr.w	Obj53_WalkOff
000093A2 43F8 D000                  		lea	($FFFFD000).w,a1
000093A6 0829 0003 0022             		btst	#3,$22(a1)
000093AC 6700                       		beq.s	loc_842E
000093AE 4A28 0038                  		tst.b	$38(a0)
000093B2 6600                       		bne.s	locret_843A
000093B4 08A9 0003 0022             		bclr	#3,$22(a1)
000093BA 08A9 0005 0022             		bclr	#5,$22(a1)
000093C0 137C 0001 001D             		move.b	#1,$1D(a1)
000093C6                            
000093C6                            loc_842E:
000093C6 117C 0000 003A             		move.b	#0,$3A(a0)
000093CC 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
000093D2                            
000093D2                            locret_843A:
000093D2 4E75                       		rts	
000093D4                            ; ===========================================================================
000093D4                            
000093D4                            Obj53_TimeZero:				; XREF: Obj53_Display
000093D4 6100 0000                  		bsr.w	ObjectFall
000093D8 6100 0000                  		bsr.w	DisplaySprite
000093DC 4A28 0001                  		tst.b	1(a0)
000093E0 6A00                       		bpl.s	Obj53_Delete
000093E2 4E75                       		rts	
000093E4                            ; ===========================================================================
000093E4                            
000093E4                            Obj53_Delete:				; XREF: Obj53_Index
000093E4 6100 0000                  		bsr.w	DeleteObject
000093E8 4E75                       		rts	
000093EA                            ; ===========================================================================
000093EA                            
000093EA                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
000093EA 117C 0000 003A             		move.b	#0,$3A(a0)
000093F0                            
000093F0                            loc_8458:				; XREF: Obj53_Touch
000093F0 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
000093F6 0828 0000 0028             		btst	#0,$28(a0)
000093FC 6700                       		beq.s	loc_846C
000093FE 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00009404                            
00009404                            loc_846C:
00009404 7207                       		moveq	#7,d1
00009406 5228 001A                  		addq.b	#1,$1A(a0)
0000940A 6000                       		bra.s	loc_8486
0000940C                            ; ===========================================================================
0000940C                            
0000940C                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
0000940C 117C 0000 003A             		move.b	#0,$3A(a0)
00009412                            
00009412                            loc_847A:				; XREF: Obj1A_Touch
00009412 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00009418 7218                       		moveq	#$18,d1
0000941A 5428 001A                  		addq.b	#2,$1A(a0)
0000941E                            
0000941E                            loc_8486:				; XREF: Obj53_Collapse
0000941E 7000                       		moveq	#0,d0
00009420 1028 001A                  		move.b	$1A(a0),d0
00009424 D040                       		add.w	d0,d0
00009426 2668 0004                  		movea.l	4(a0),a3
0000942A D6F3 0000                  		adda.w	(a3,d0.w),a3
0000942E 524B                       		addq.w	#1,a3
00009430 08E8 0005 0001             		bset	#5,1(a0)
00009436 1810                       		move.b	0(a0),d4
00009438 1A28 0001                  		move.b	1(a0),d5
0000943C 2248                       		movea.l	a0,a1
0000943E 6000                       		bra.s	loc_84B2
00009440                            ; ===========================================================================
00009440                            
00009440                            loc_84AA:
00009440 6100 0000                  		bsr.w	SingleObjLoad
00009444 6600                       		bne.s	loc_84F2
00009446 5A4B                       		addq.w	#5,a3
00009448                            
00009448                            loc_84B2:
00009448 137C 0006 0024             		move.b	#6,$24(a1)
0000944E 1284                       		move.b	d4,0(a1)
00009450 234B 0004                  		move.l	a3,4(a1)
00009454 1345 0001                  		move.b	d5,1(a1)
00009458 3368 0008 0008             		move.w	8(a0),8(a1)
0000945E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009464 3368 0002 0002             		move.w	2(a0),2(a1)
0000946A 1368 0018 0018             		move.b	$18(a0),$18(a1)
00009470 1368 0019 0019             		move.b	$19(a0),$19(a1)
00009476 135C 0038                  		move.b	(a4)+,$38(a1)
0000947A B3C8                       		cmpa.l	a0,a1
0000947C 6400                       		bcc.s	loc_84EE
0000947E 6100 0000                  		bsr.w	DisplaySprite2
00009482                            
00009482                            loc_84EE:
00009482 51C9 FFBC                  		dbf	d1,loc_84AA
00009486                            
00009486                            loc_84F2:
00009486 6100 0000                  		bsr.w	DisplaySprite
0000948A 303C 00B9                  		move.w	#$B9,d0
0000948E 4EF9 0000 1C82             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00009494                            ; ===========================================================================
00009494                            ; ---------------------------------------------------------------------------
00009494                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009494                            ; ---------------------------------------------------------------------------
00009494 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
000094A4 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
000094AE 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
000094B6 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
000094BE                            
000094BE                            ; ---------------------------------------------------------------------------
000094BE                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
000094BE                            ; ---------------------------------------------------------------------------
000094BE                            
000094BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094BE                            
000094BE                            
000094BE                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
000094BE 43F8 D000                  		lea	($FFFFD000).w,a1
000094C2 0829 0003 0022             		btst	#3,$22(a1)
000094C8 6700                       		beq.s	locret_856E
000094CA 3029 0008                  		move.w	8(a1),d0
000094CE 9068 0008                  		sub.w	8(a0),d0
000094D2 D041                       		add.w	d1,d0
000094D4 E248                       		lsr.w	#1,d0
000094D6 0828 0000 0001             		btst	#0,1(a0)
000094DC 6700                       		beq.s	loc_854E
000094DE 4640                       		not.w	d0
000094E0 D041                       		add.w	d1,d0
000094E2                            
000094E2                            loc_854E:
000094E2 7200                       		moveq	#0,d1
000094E4 1232 0000                  		move.b	(a2,d0.w),d1
000094E8 3028 000C                  		move.w	$C(a0),d0
000094EC 9041                       		sub.w	d1,d0
000094EE 7200                       		moveq	#0,d1
000094F0 1229 0016                  		move.b	$16(a1),d1
000094F4 9041                       		sub.w	d1,d0
000094F6 3340 000C                  		move.w	d0,$C(a1)
000094FA 9468 0008                  		sub.w	8(a0),d2
000094FE 9569 0008                  		sub.w	d2,8(a1)
00009502                            
00009502                            locret_856E:
00009502 4E75                       		rts	
00009504                            ; End of function SlopeObject2
00009504                            
00009504                            ; ===========================================================================
00009504                            ; ---------------------------------------------------------------------------
00009504                            ; Collision data for GHZ collapsing ledge
00009504                            ; ---------------------------------------------------------------------------
00009504                            Obj1A_SlopeData:
00009504                            		incbin	misc\ghzledge.bin
00009534                            		even
00009534                            
00009534                            ; ---------------------------------------------------------------------------
00009534                            ; Sprite mappings - GHZ	collapsing ledge
00009534                            ; ---------------------------------------------------------------------------
00009534                            Map_obj1A:
00009534                            	include "_maps\obj1A.asm"
00009534                            ; ---------------------------------------------------------------------------
00009534                            ; Sprite mappings - GHZ	collapsing ledge
00009534                            ; ---------------------------------------------------------------------------
00009534 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00009538 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
0000953C 10                         byte_85A8:	dc.b $10
0000953D C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009542 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009547 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000954C E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009551 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009556 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000955B F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009560 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009565 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000956A F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000956F 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009574 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009579 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000957E 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009583 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009588 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000958D 10                         byte_85F9:	dc.b $10
0000958E C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009593 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009598 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000959D E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000095A2 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000095A7 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000095AC F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000095B1 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000095B6 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000095BB F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000095C0 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000095C5 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000095CA 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000095CF 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000095D4 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000095D9 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000095DE 19                         byte_864A:	dc.b $19
000095DF C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
000095E4 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000095E9 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000095EE D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000095F3 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000095F8 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000095FD E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009602 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009607 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000960C D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009611 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009616 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000961B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009620 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009625 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000962A F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000962F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009634 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009639 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000963E 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009643 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009648 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000964D 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009652 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009657 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000965C 19                         byte_86C8:	dc.b $19
0000965D C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009662 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009667 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000966C D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009671 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009676 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000967B E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009680 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009685 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000968A D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000968F F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009694 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009699 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000969E F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000096A3 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000096A8 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000096AD 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000096B2 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000096B7 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000096BC 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000096C1 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000096C6 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000096CB 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000096D0 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000096D5 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000096DA                            		even
000096DA                            		even
000096DA                            
000096DA                            ; ---------------------------------------------------------------------------
000096DA                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000096DA                            ; ---------------------------------------------------------------------------
000096DA                            Map_obj53:
000096DA                            	include "_maps\obj53.asm"
000096DA                            ; ---------------------------------------------------------------------------
000096DA                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000096DA                            ; ---------------------------------------------------------------------------
000096DA 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
000096DE 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
000096E2 04                         byte_874E:	dc.b 4
000096E3 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
000096E8 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
000096ED F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000096F2 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
000096F7 08                         byte_8763:	dc.b 8
000096F8 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000096FD F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00009702 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009707 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000970C 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00009711 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00009716 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000971B 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00009720 04                         byte_878C:	dc.b 4
00009721 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00009726 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000972B F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009730 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00009735 08                         byte_87A1:	dc.b 8
00009736 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000973B F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00009740 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009745 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000974A 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000974F 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00009754 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00009759 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000975E                            		even
0000975E                            		even
0000975E                            
0000975E                            ; ===========================================================================
0000975E                            ; ---------------------------------------------------------------------------
0000975E                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000975E                            ; ---------------------------------------------------------------------------
0000975E                            
0000975E                            Obj1C:					; XREF: Obj_Index
0000975E 7000                       		moveq	#0,d0
00009760 1028 0024                  		move.b	$24(a0),d0
00009764 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00009768 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000976C                            ; ===========================================================================
0000976C 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000976E 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00009770                            ; ===========================================================================
00009770                            
00009770                            Obj1C_Main:				; XREF: Obj1C_Index
00009770 5428 0024                  		addq.b	#2,$24(a0)
00009774 7000                       		moveq	#0,d0
00009776 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000977A C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000977E 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00009782 2159 0004                  		move.l	(a1)+,4(a0)
00009786 3159 0002                  		move.w	(a1)+,2(a0)
0000978A 0028 0004 0001             		ori.b	#4,1(a0)
00009790 1159 001A                  		move.b	(a1)+,$1A(a0)
00009794 1159 0019                  		move.b	(a1)+,$19(a0)
00009798 1159 0018                  		move.b	(a1)+,$18(a0)
0000979C 1159 0020                  		move.b	(a1)+,$20(a0)
000097A0                            
000097A0                            Obj1C_ChkDel:				; XREF: Obj1C_Index
000097A0 3028 0008                  		move.w	8(a0),d0
000097A4 0240 FF80                  		andi.w	#$FF80,d0
000097A8 3238 F700                  		move.w	($FFFFF700).w,d1
000097AC 0441 0080                  		subi.w	#$80,d1
000097B0 0241 FF80                  		andi.w	#$FF80,d1
000097B4 9041                       		sub.w	d1,d0
000097B6 0C40 0280                  		cmpi.w	#$280,d0
000097BA 6200 0000                  		bhi.w	DeleteObject
000097BE 6000 0000                  		bra.w	DisplaySprite
000097C2                            ; ===========================================================================
000097C2                            ; ---------------------------------------------------------------------------
000097C2                            ; Variables for	object $1C are stored in an array
000097C2                            ; ---------------------------------------------------------------------------
000097C2 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000097C6 44D8                       		dc.w $44D8		; VRAM setting
000097C8 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000097CC 0000 0000                  		dc.l Map_obj1C
000097D0 44D8                       		dc.w $44D8
000097D2 0008 0200                  		dc.b 0,	8, 2, 0
000097D6 0000 0000                  		dc.l Map_obj1C
000097DA 44D8                       		dc.w $44D8
000097DC 0008 0200                  		dc.b 0,	8, 2, 0
000097E0 0000 8842                  		dc.l Map_obj11
000097E4 438E                       		dc.w $438E
000097E6 0110 0100                  		dc.b 1,	$10, 1,	0
000097EA                            ; ---------------------------------------------------------------------------
000097EA                            ; Sprite mappings - SLZ	lava thrower
000097EA                            ; ---------------------------------------------------------------------------
000097EA                            Map_obj1C:
000097EA                            	include "_maps\obj1C.asm"
000097EA                            ; ---------------------------------------------------------------------------
000097EA                            ; Sprite mappings - SLZ	lava thrower
000097EA                            ; ---------------------------------------------------------------------------
000097EA 0000                       		dc.w byte_8858-Map_obj1C
000097EC 01                         byte_8858:	dc.b 1
000097ED F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000097F2                            		even
000097F2                            		even
000097F2                            
000097F2                            ; ===========================================================================
000097F2                            ; ---------------------------------------------------------------------------
000097F2                            ; Object 1D - switch that activates when Sonic touches it
000097F2                            ; (this	is not used anywhere in	the game)
000097F2                            ; ---------------------------------------------------------------------------
000097F2                            
000097F2                            Obj1D:					; XREF: Obj_Index
000097F2 7000                       		moveq	#0,d0
000097F4 1028 0024                  		move.b	$24(a0),d0
000097F8 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
000097FC 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00009800                            ; ===========================================================================
00009800 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00009802 0000                       		dc.w Obj1D_Action-Obj1D_Index
00009804 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00009806                            ; ===========================================================================
00009806                            
00009806                            Obj1D_Main:				; XREF: Obj1D_Index
00009806 5428 0024                  		addq.b	#2,$24(a0)
0000980A 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00009812 317C 4000 0002             		move.w	#$4000,2(a0)
00009818 117C 0004 0001             		move.b	#4,1(a0)
0000981E 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009824 117C 0010 0019             		move.b	#$10,$19(a0)
0000982A 117C 0005 0018             		move.b	#5,$18(a0)
00009830                            
00009830                            Obj1D_Action:				; XREF: Obj1D_Index
00009830 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009836 323C 0010                  		move.w	#$10,d1
0000983A 6100 0000                  		bsr.w	Obj1D_ChkTouch
0000983E 6700                       		beq.s	Obj1D_ChkDel
00009840 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00009844 7001                       		moveq	#1,d0
00009846 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000984A                            
0000984A                            Obj1D_ChkDel:
0000984A 6100 0000                  		bsr.w	DisplaySprite
0000984E 3028 0008                  		move.w	8(a0),d0
00009852 0240 FF80                  		andi.w	#$FF80,d0
00009856 3238 F700                  		move.w	($FFFFF700).w,d1
0000985A 0441 0080                  		subi.w	#$80,d1
0000985E 0241 FF80                  		andi.w	#$FF80,d1
00009862 9041                       		sub.w	d1,d0
00009864 0C40 0280                  		cmpi.w	#$280,d0
00009868 6200 0000                  		bhi.w	Obj1D_Delete
0000986C 4E75                       		rts	
0000986E                            ; ===========================================================================
0000986E                            
0000986E                            Obj1D_Delete:				; XREF: Obj1D_Index
0000986E 6100 0000                  		bsr.w	DeleteObject
00009872 4E75                       		rts	
00009874                            ; ---------------------------------------------------------------------------
00009874                            ; Subroutine to	check if Sonic touches the object
00009874                            ; ---------------------------------------------------------------------------
00009874                            
00009874                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009874                            
00009874                            
00009874                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009874 43F8 D000                  		lea	($FFFFD000).w,a1
00009878 3029 0008                  		move.w	8(a1),d0
0000987C 9068 0008                  		sub.w	8(a0),d0
00009880 D041                       		add.w	d1,d0
00009882 6B00                       		bmi.s	loc_8918
00009884 D241                       		add.w	d1,d1
00009886 B041                       		cmp.w	d1,d0
00009888 6400                       		bcc.s	loc_8918
0000988A 3429 000C                  		move.w	$C(a1),d2
0000988E 1229 0016                  		move.b	$16(a1),d1
00009892 4881                       		ext.w	d1
00009894 D242                       		add.w	d2,d1
00009896 3028 000C                  		move.w	$C(a0),d0
0000989A 0440 0010                  		subi.w	#$10,d0
0000989E 9041                       		sub.w	d1,d0
000098A0 6200                       		bhi.s	loc_8918
000098A2 0C40 FFF0                  		cmpi.w	#-$10,d0
000098A6 6500                       		bcs.s	loc_8918
000098A8 70FF                       		moveq	#-1,d0
000098AA 4E75                       		rts	
000098AC                            ; ===========================================================================
000098AC                            
000098AC                            loc_8918:
000098AC 7000                       		moveq	#0,d0
000098AE 4E75                       		rts	
000098B0                            ; End of function Obj1D_ChkTouch
000098B0                            
000098B0                            ; ===========================================================================
000098B0                            ; ---------------------------------------------------------------------------
000098B0                            ; Sprite mappings - object 1D
000098B0                            ; ---------------------------------------------------------------------------
000098B0                            Map_obj1D:
000098B0                            	include "_maps\obj1D.asm"
000098B0                            ; ---------------------------------------------------------------------------
000098B0                            ; Sprite mappings - object 1D
000098B0                            ; ---------------------------------------------------------------------------
000098B0 0000                       		dc.w byte_891E-Map_obj1D
000098B2 04                         byte_891E:	dc.b 4
000098B3 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
000098B8 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
000098BD E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
000098C2 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
000098C8 00                         		even
000098C8 00                         		even
000098C8                            
000098C8                            ; ===========================================================================
000098C8                            ; ---------------------------------------------------------------------------
000098C8                            ; Object 2A - doors (SBZ)
000098C8                            ; ---------------------------------------------------------------------------
000098C8                            
000098C8                            Obj2A:					; XREF: Obj_Index
000098C8 7000                       		moveq	#0,d0
000098CA 1028 0024                  		move.b	$24(a0),d0
000098CE 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
000098D2 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
000098D6                            ; ===========================================================================
000098D6 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
000098D8 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
000098DA                            ; ===========================================================================
000098DA                            
000098DA                            Obj2A_Main:				; XREF: Obj2A_Index
000098DA 5428 0024                  		addq.b	#2,$24(a0)
000098DE 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
000098E6 317C 42E8 0002             		move.w	#$42E8,2(a0)
000098EC 0028 0004 0001             		ori.b	#4,1(a0)
000098F2 117C 0008 0019             		move.b	#8,$19(a0)
000098F8 117C 0004 0018             		move.b	#4,$18(a0)
000098FE                            
000098FE                            Obj2A_OpenShut:				; XREF: Obj2A_Index
000098FE 323C 0040                  		move.w	#$40,d1
00009902 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009906 3038 D008                  		move.w	($FFFFD008).w,d0
0000990A D041                       		add.w	d1,d0
0000990C B068 0008                  		cmp.w	8(a0),d0
00009910 6500                       		bcs.s	Obj2A_Animate
00009912 9041                       		sub.w	d1,d0
00009914 9041                       		sub.w	d1,d0
00009916 B068 0008                  		cmp.w	8(a0),d0
0000991A 6400                       		bcc.s	Obj2A_Animate
0000991C D041                       		add.w	d1,d0
0000991E B068 0008                  		cmp.w	8(a0),d0
00009922 6400                       		bcc.s	loc_899A
00009924 0828 0000 0022             		btst	#0,$22(a0)
0000992A 6600                       		bne.s	Obj2A_Animate
0000992C 6000                       		bra.s	Obj2A_Open
0000992E                            ; ===========================================================================
0000992E                            
0000992E                            loc_899A:				; XREF: Obj2A_OpenShut
0000992E 0828 0000 0022             		btst	#0,$22(a0)
00009934 6700                       		beq.s	Obj2A_Animate
00009936                            
00009936                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009936 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000993C                            
0000993C                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000993C 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009942 6100 0000                  		bsr.w	AnimateSprite
00009946 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000994A 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000994C 323C 0011                  		move.w	#$11,d1
00009950 343C 0020                  		move.w	#$20,d2
00009954 3602                       		move.w	d2,d3
00009956 5243                       		addq.w	#1,d3
00009958 3828 0008                  		move.w	8(a0),d4
0000995C 6100 0000                  		bsr.w	SolidObject
00009960                            
00009960                            Obj2A_MarkAsUsed:
00009960 6000 0000                  		bra.w	MarkObjGone
00009964                            ; ===========================================================================
00009964                            Ani_obj2A:
00009964                            	include "_anim\obj2A.asm"
00009964                            ; ---------------------------------------------------------------------------
00009964                            ; Animation script - doors (SBZ)
00009964                            ; ---------------------------------------------------------------------------
00009964 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009966 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009968 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009974 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009980                            		even
00009980                            		even
00009980                            
00009980                            ; ---------------------------------------------------------------------------
00009980                            ; Sprite mappings - doors (SBZ)
00009980                            ; ---------------------------------------------------------------------------
00009980                            Map_obj2A:
00009980                            	include "_maps\obj2A.asm"
00009980                            ; ---------------------------------------------------------------------------
00009980                            ; Sprite mappings - doors (SBZ)
00009980                            ; ---------------------------------------------------------------------------
00009980 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009984 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009988 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000998C 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009990 0000                       		dc.w byte_8A56-Map_obj2A
00009992 02                         byte_89FE:	dc.b 2
00009993 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009998 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000999D 02                         byte_8A09:	dc.b 2
0000999E DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
000099A3 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000099A8 02                         byte_8A14:	dc.b 2
000099A9 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000099AE 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000099B3 02                         byte_8A1F:	dc.b 2
000099B4 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000099B9 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000099BE 02                         byte_8A2A:	dc.b 2
000099BF D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000099C4 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000099C9 02                         byte_8A35:	dc.b 2
000099CA CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000099CF 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000099D4 02                         byte_8A40:	dc.b 2
000099D5 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
000099DA 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
000099DF 02                         byte_8A4B:	dc.b 2
000099E0 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
000099E5 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
000099EA 02                         byte_8A56:	dc.b 2
000099EB C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
000099F0 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
000099F6 00                         		even
000099F6 00                         		even
000099F6                            
000099F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000099F6                            
000099F6                            
000099F6                            Obj44_SolidWall:			; XREF: Obj44_Solid
000099F6 6100 0000                  		bsr.w	Obj44_SolidWall2
000099FA 6700                       		beq.s	loc_8AA8
000099FC 6B00 0000                  		bmi.w	loc_8AC4
00009A00 4A40                       		tst.w	d0
00009A02 6700 0000                  		beq.w	loc_8A92
00009A06 6B00                       		bmi.s	loc_8A7C
00009A08 4A69 0010                  		tst.w	$10(a1)
00009A0C 6B00                       		bmi.s	loc_8A92
00009A0E 6000                       		bra.s	loc_8A82
00009A10                            ; ===========================================================================
00009A10                            
00009A10                            loc_8A7C:
00009A10 4A69 0010                  		tst.w	$10(a1)
00009A14 6A00                       		bpl.s	loc_8A92
00009A16                            
00009A16                            loc_8A82:
00009A16 9169 0008                  		sub.w	d0,8(a1)
00009A1A 337C 0000 0014             		move.w	#0,$14(a1)
00009A20 337C 0000 0010             		move.w	#0,$10(a1)
00009A26                            
00009A26                            loc_8A92:
00009A26 0829 0001 0022             		btst	#1,$22(a1)
00009A2C 6600                       		bne.s	loc_8AB6
00009A2E 08E9 0005 0022             		bset	#5,$22(a1)
00009A34 08E8 0005 0022             		bset	#5,$22(a0)
00009A3A 4E75                       		rts	
00009A3C                            ; ===========================================================================
00009A3C                            
00009A3C                            loc_8AA8:
00009A3C 0828 0005 0022             		btst	#5,$22(a0)
00009A42 6700                       		beq.s	locret_8AC2
00009A44 337C 0001 001C             		move.w	#1,$1C(a1)
00009A4A                            
00009A4A                            loc_8AB6:
00009A4A 08A8 0005 0022             		bclr	#5,$22(a0)
00009A50 08A9 0005 0022             		bclr	#5,$22(a1)
00009A56                            
00009A56                            locret_8AC2:
00009A56 4E75                       		rts	
00009A58                            ; ===========================================================================
00009A58                            
00009A58                            loc_8AC4:
00009A58 4A69 0012                  		tst.w	$12(a1)
00009A5C 6A00                       		bpl.s	locret_8AD8
00009A5E 4A43                       		tst.w	d3
00009A60 6A00                       		bpl.s	locret_8AD8
00009A62 9769 000C                  		sub.w	d3,$C(a1)
00009A66 337C 0000 0012             		move.w	#0,$12(a1)
00009A6C                            
00009A6C                            locret_8AD8:
00009A6C 4E75                       		rts	
00009A6E                            ; End of function Obj44_SolidWall
00009A6E                            
00009A6E                            
00009A6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A6E                            
00009A6E                            
00009A6E                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009A6E 43F8 D000                  		lea	($FFFFD000).w,a1
00009A72 3029 0008                  		move.w	8(a1),d0
00009A76 9068 0008                  		sub.w	8(a0),d0
00009A7A D041                       		add.w	d1,d0
00009A7C 6B00                       		bmi.s	loc_8B48
00009A7E 3601                       		move.w	d1,d3
00009A80 D643                       		add.w	d3,d3
00009A82 B043                       		cmp.w	d3,d0
00009A84 6200                       		bhi.s	loc_8B48
00009A86 1629 0016                  		move.b	$16(a1),d3
00009A8A 4883                       		ext.w	d3
00009A8C D443                       		add.w	d3,d2
00009A8E 3629 000C                  		move.w	$C(a1),d3
00009A92 9668 000C                  		sub.w	$C(a0),d3
00009A96 D642                       		add.w	d2,d3
00009A98 6B00                       		bmi.s	loc_8B48
00009A9A 3802                       		move.w	d2,d4
00009A9C D844                       		add.w	d4,d4
00009A9E B644                       		cmp.w	d4,d3
00009AA0 6400                       		bcc.s	loc_8B48
00009AA2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009AA6 6B00                       		bmi.s	loc_8B48
00009AA8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009AAE 6400                       		bcc.s	loc_8B48
00009AB0 4A78 FE08                  		tst.w	($FFFFFE08).w
00009AB4 6600                       		bne.s	loc_8B48
00009AB6 3A00                       		move.w	d0,d5
00009AB8 B240                       		cmp.w	d0,d1
00009ABA 6400                       		bcc.s	loc_8B30
00009ABC D241                       		add.w	d1,d1
00009ABE 9041                       		sub.w	d1,d0
00009AC0 3A00                       		move.w	d0,d5
00009AC2 4445                       		neg.w	d5
00009AC4                            
00009AC4                            loc_8B30:
00009AC4 3203                       		move.w	d3,d1
00009AC6 B443                       		cmp.w	d3,d2
00009AC8 6400                       		bcc.s	loc_8B3C
00009ACA 9644                       		sub.w	d4,d3
00009ACC 3203                       		move.w	d3,d1
00009ACE 4441                       		neg.w	d1
00009AD0                            
00009AD0                            loc_8B3C:
00009AD0 BA41                       		cmp.w	d1,d5
00009AD2 6200                       		bhi.s	loc_8B44
00009AD4 7801                       		moveq	#1,d4
00009AD6 4E75                       		rts	
00009AD8                            ; ===========================================================================
00009AD8                            
00009AD8                            loc_8B44:
00009AD8 78FF                       		moveq	#-1,d4
00009ADA 4E75                       		rts	
00009ADC                            ; ===========================================================================
00009ADC                            
00009ADC                            loc_8B48:
00009ADC 7800                       		moveq	#0,d4
00009ADE 4E75                       		rts	
00009AE0                            ; End of function Obj44_SolidWall2
00009AE0                            
00009AE0                            ; ===========================================================================
00009AE0                            ; ---------------------------------------------------------------------------
00009AE0                            ; Object 1E - Ball Hog enemy (SBZ)
00009AE0                            ; ---------------------------------------------------------------------------
00009AE0                            
00009AE0                            Obj1E:					; XREF: Obj_Index
00009AE0 7000                       		moveq	#0,d0
00009AE2 1028 0024                  		move.b	$24(a0),d0
00009AE6 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009AEA 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009AEE                            ; ===========================================================================
00009AEE 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009AF0 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009AF2                            ; ===========================================================================
00009AF2                            
00009AF2                            Obj1E_Main:				; XREF: Obj1E_Index
00009AF2 117C 0013 0016             		move.b	#$13,$16(a0)
00009AF8 117C 0008 0017             		move.b	#8,$17(a0)
00009AFE 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009B06 317C 2302 0002             		move.w	#$2302,2(a0)
00009B0C 117C 0004 0001             		move.b	#4,1(a0)
00009B12 117C 0004 0018             		move.b	#4,$18(a0)
00009B18 117C 0005 0020             		move.b	#5,$20(a0)
00009B1E 117C 000C 0019             		move.b	#$C,$19(a0)
00009B24 6100 0000                  		bsr.w	ObjectFall
00009B28 4EB9 0000 0000             		jsr	ObjHitFloor
00009B2E 4A41                       		tst.w	d1
00009B30 6A00                       		bpl.s	locret_8BAC
00009B32 D368 000C                  		add.w	d1,$C(a0)
00009B36 317C 0000 0012             		move.w	#0,$12(a0)
00009B3C 5428 0024                  		addq.b	#2,$24(a0)
00009B40                            
00009B40                            locret_8BAC:
00009B40 4E75                       		rts	
00009B42                            ; ===========================================================================
00009B42                            
00009B42                            Obj1E_Action:				; XREF: Obj1E_Index
00009B42 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009B48 6100 0000                  		bsr.w	AnimateSprite
00009B4C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009B52 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009B54 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009B58 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009B5A 6000                       		bra.s	Obj1E_MarkAsGone
00009B5C                            ; ===========================================================================
00009B5C                            
00009B5C                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009B5C 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009B60                            
00009B60                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009B60 6000 0000                  		bra.w	MarkObjGone
00009B64                            ; ===========================================================================
00009B64                            
00009B64                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009B64 117C 0001 0032             		move.b	#1,$32(a0)
00009B6A 6100 0000                  		bsr.w	SingleObjLoad
00009B6E 6600                       		bne.s	loc_8C1A
00009B70 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009B74 3368 0008 0008             		move.w	8(a0),8(a1)
00009B7A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009B80 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009B86 337C 0000 0012             		move.w	#0,$12(a1)
00009B8C 70FC                       		moveq	#-4,d0
00009B8E 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009B94 6700                       		beq.s	loc_8C0A	; if not, branch
00009B96 4440                       		neg.w	d0
00009B98 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009B9C                            
00009B9C                            loc_8C0A:
00009B9C D169 0008                  		add.w	d0,8(a1)
00009BA0 0669 000C 000C             		addi.w	#$C,$C(a1)
00009BA6 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009BAC                            
00009BAC                            loc_8C1A:
00009BAC 60B2                       		bra.s	Obj1E_MarkAsGone
00009BAE                            ; ===========================================================================
00009BAE                            ; ---------------------------------------------------------------------------
00009BAE                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009BAE                            ; ---------------------------------------------------------------------------
00009BAE                            
00009BAE                            Obj20:					; XREF: Obj_Index
00009BAE 7000                       		moveq	#0,d0
00009BB0 1028 0024                  		move.b	$24(a0),d0
00009BB4 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009BB8 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009BBC                            ; ===========================================================================
00009BBC 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009BBE 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009BC0                            ; ===========================================================================
00009BC0                            
00009BC0                            Obj20_Main:				; XREF: Obj20_Index
00009BC0 5428 0024                  		addq.b	#2,$24(a0)
00009BC4 117C 0007 0016             		move.b	#7,$16(a0)
00009BCA 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009BD2 317C 2302 0002             		move.w	#$2302,2(a0)
00009BD8 117C 0004 0001             		move.b	#4,1(a0)
00009BDE 117C 0003 0018             		move.b	#3,$18(a0)
00009BE4 117C 0087 0020             		move.b	#$87,$20(a0)
00009BEA 117C 0008 0019             		move.b	#8,$19(a0)
00009BF0 7000                       		moveq	#0,d0
00009BF2 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009BF6 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009BFA 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009BFE 117C 0004 001A             		move.b	#4,$1A(a0)
00009C04                            
00009C04                            Obj20_Bounce:				; XREF: Obj20_Index
00009C04 4EB9 0000 0000             		jsr	ObjectFall
00009C0A 4A68 0012                  		tst.w	$12(a0)
00009C0E 6B00                       		bmi.s	Obj20_ChkExplode
00009C10 4EB9 0000 0000             		jsr	ObjHitFloor
00009C16 4A41                       		tst.w	d1
00009C18 6A00                       		bpl.s	Obj20_ChkExplode
00009C1A D368 000C                  		add.w	d1,$C(a0)
00009C1E 317C FD00 0012             		move.w	#-$300,$12(a0)
00009C24 4A03                       		tst.b	d3
00009C26 6700                       		beq.s	Obj20_ChkExplode
00009C28 6B00                       		bmi.s	loc_8CA4
00009C2A 4A68 0010                  		tst.w	$10(a0)
00009C2E 6A00                       		bpl.s	Obj20_ChkExplode
00009C30 4468 0010                  		neg.w	$10(a0)
00009C34 6000                       		bra.s	Obj20_ChkExplode
00009C36                            ; ===========================================================================
00009C36                            
00009C36                            loc_8CA4:				; XREF: Obj20_Bounce
00009C36 4A68 0010                  		tst.w	$10(a0)
00009C3A 6B00                       		bmi.s	Obj20_ChkExplode
00009C3C 4468 0010                  		neg.w	$10(a0)
00009C40                            
00009C40                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009C40 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009C44 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009C46 10BC 0024                  		move.b	#$24,0(a0)
00009C4A 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009C4E 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009C54 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009C58                            ; ===========================================================================
00009C58                            
00009C58                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009C58 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009C5C 6A00                       		bpl.s	Obj20_Display
00009C5E 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009C64 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009C6A                            
00009C6A                            Obj20_Display:
00009C6A 6100 0000                  		bsr.w	DisplaySprite
00009C6E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009C72 0640 00E0                  		addi.w	#$E0,d0
00009C76 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009C7A 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009C7E 4E75                       		rts	
00009C80                            ; ===========================================================================
00009C80                            ; ---------------------------------------------------------------------------
00009C80                            ; Object 24 - explosion	from a destroyed monitor
00009C80                            ; ---------------------------------------------------------------------------
00009C80                            
00009C80                            Obj24:					; XREF: Obj_Index
00009C80 7000                       		moveq	#0,d0
00009C82 1028 0024                  		move.b	$24(a0),d0
00009C86 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009C8A 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009C8E                            ; ===========================================================================
00009C8E 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009C90 0000                       		dc.w Obj24_Animate-Obj24_Index
00009C92                            ; ===========================================================================
00009C92                            
00009C92                            Obj24_Main:				; XREF: Obj24_Index
00009C92 5428 0024                  		addq.b	#2,$24(a0)
00009C96 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009C9E 317C 041C 0002             		move.w	#$41C,2(a0)
00009CA4 117C 0004 0001             		move.b	#4,1(a0)
00009CAA 117C 0001 0018             		move.b	#1,$18(a0)
00009CB0 117C 0000 0020             		move.b	#0,$20(a0)
00009CB6 117C 000C 0019             		move.b	#$C,$19(a0)
00009CBC 117C 0009 001E             		move.b	#9,$1E(a0)
00009CC2 117C 0000 001A             		move.b	#0,$1A(a0)
00009CC8 303C 00A5                  		move.w	#$A5,d0
00009CCC 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play explosion sound
00009CD2                            
00009CD2                            Obj24_Animate:				; XREF: Obj24_Index
00009CD2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009CD6 6A00                       		bpl.s	Obj24_Display
00009CD8 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009CDE 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009CE2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009CE8 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009CEC                            
00009CEC                            Obj24_Display:
00009CEC 6000 0000                  		bra.w	DisplaySprite
00009CF0                            ; ===========================================================================
00009CF0                            ; ---------------------------------------------------------------------------
00009CF0                            ; Object 27 - explosion	from a destroyed enemy
00009CF0                            ; ---------------------------------------------------------------------------
00009CF0                            
00009CF0                            Obj27:					; XREF: Obj_Index
00009CF0 7000                       		moveq	#0,d0
00009CF2 1028 0024                  		move.b	$24(a0),d0
00009CF6 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009CFA 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009CFE                            ; ===========================================================================
00009CFE 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009D00 0000                       		dc.w Obj27_Main-Obj27_Index
00009D02 0000                       		dc.w Obj27_Animate-Obj27_Index
00009D04                            ; ===========================================================================
00009D04                            
00009D04                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009D04 5428 0024                  		addq.b	#2,$24(a0)
00009D08 6100 0000                  		bsr.w	SingleObjLoad
00009D0C 6600                       		bne.s	Obj27_Main
00009D0E 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009D12 3368 0008 0008             		move.w	8(a0),8(a1)
00009D18 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D1E 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009D24                            
00009D24                            Obj27_Main:				; XREF: Obj27_Index
00009D24 5428 0024                  		addq.b	#2,$24(a0)
00009D28 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009D30 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009D36 117C 0004 0001             		move.b	#4,1(a0)
00009D3C 117C 0001 0018             		move.b	#1,$18(a0)
00009D42 117C 0000 0020             		move.b	#0,$20(a0)
00009D48 117C 000C 0019             		move.b	#$C,$19(a0)
00009D4E                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009D4E 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009D54 117C 0000 001A             		move.b	#0,$1A(a0)
00009D5A 303C 00C1                  		move.w	#$C1,d0
00009D5E 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009D64                            
00009D64 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
00009D6A 1028 0028                  		move.b	$28(a0),d0
00009D6E 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009D74 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
00009D7A                            
00009D7A                            Obj27_Animate:				; XREF: Obj27_Index
00009D7A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009D7E 6A00                       		bpl.s	Obj27_Display
00009D80                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009D80 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009D86 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009D8A 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009D90 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009D94                            
00009D94                            Obj27_Display:
00009D94 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
00009D9A 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009DA0 6000 0000                  		bra.w	DisplaySprite
00009DA4                            ; ===========================================================================
00009DA4                            ; ---------------------------------------------------------------------------
00009DA4                            Obj27_ExplosionXYSpd:
00009DA4                            		; dc.w	-$350, -$300	; Left
00009DA4                            		; dc.w	-$200, -$450	; Near middle (left)
00009DA4                            		; dc.w	0, -$500	; Middle
00009DA4                            		; dc.w	$200, -$450	; Near middle (right)
00009DA4                            		; dc.w	$350, -$300	; Right
00009DA4                            
00009DA4 FEB0 FC00                  		dc.w	-$150, -$400	; Left
00009DA8 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
00009DAC 0000 FA00                  		dc.w	0, -$600	; Middle
00009DB0 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009DB4 0150 FC00                  		dc.w	$150, -$400	; Right
00009DB8                            
00009DB8 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009DD2                            ; ---------------------------------------------------------------------------
00009DD2                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009DD2                            ; ---------------------------------------------------------------------------
00009DD2                            
00009DD2                            Obj3F:					; XREF: Obj_Index
00009DD2 7000                       		moveq	#0,d0
00009DD4 1028 0024                  		move.b	$24(a0),d0
00009DD8 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009DDC 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009DE0                            ; ===========================================================================
00009DE0 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009DE2 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009DE4                            ; ===========================================================================
00009DE4                            
00009DE4                            Obj3F_Main:				; XREF: Obj3F_Index
00009DE4 5428 0024                  		addq.b	#2,$24(a0)
00009DE8 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009DF0 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009DF6 117C 0004 0001             		move.b	#4,1(a0)
00009DFC 117C 0001 0018             		move.b	#1,$18(a0)
00009E02 117C 0000 0020             		move.b	#0,$20(a0)
00009E08 117C 000C 0019             		move.b	#$C,$19(a0)
00009E0E 117C 0007 001E             		move.b	#7,$1E(a0)
00009E14 117C 0000 001A             		move.b	#0,$1A(a0)
00009E1A 303C 00C4                  		move.w	#$C4,d0
00009E1E 4EF9 0000 1C82             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009E24                            ; ===========================================================================
00009E24                            Ani_obj1E:
00009E24                            	include "_anim\obj1E.asm"
00009E24                            ; ---------------------------------------------------------------------------
00009E24                            ; Animation script - doors (SBZ)
00009E24                            ; ---------------------------------------------------------------------------
00009E24 0000                       		dc.w byte_8E4A-Ani_obj1E
00009E26 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009E3E 00                         		even
00009E3E 00                         		even
00009E3E                            
00009E3E                            ; ---------------------------------------------------------------------------
00009E3E                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009E3E                            ; ---------------------------------------------------------------------------
00009E3E                            Map_obj1E:
00009E3E                            	include "_maps\obj1E.asm"
00009E3E                            Map_a7ad:
00009E3E 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
00009E40 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
00009E42 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
00009E44 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
00009E46 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
00009E48 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
00009E4A 02                         Map_a7ad_C: 	dc.b $2
00009E4B EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009E50 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009E55 02                         Map_a7ad_17: 	dc.b $2
00009E56 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009E5B FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009E60 02                         Map_a7ad_22: 	dc.b $2
00009E61 F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
00009E66 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
00009E6B 02                         Map_a7ad_2D: 	dc.b $2
00009E6C E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
00009E71 F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
00009E76 02                         Map_a7ad_38: 	dc.b $2
00009E77 F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
00009E7C E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
00009E81 02                         Map_a7ad_43: 	dc.b $2
00009E82 F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
00009E87 E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
00009E8C                            	even
00009E8C                            	even
00009E8C                            
00009E8C                            ; ---------------------------------------------------------------------------
00009E8C                            ; Sprite mappings - explosion
00009E8C                            ; ---------------------------------------------------------------------------
00009E8C                            Map_obj24:
00009E8C                            	include "_maps\obj24.asm"
00009E8C                            ; ---------------------------------------------------------------------------
00009E8C                            ; Sprite mappings - explosion
00009E8C                            ; ---------------------------------------------------------------------------
00009E8C 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009E90 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009E94 01                         byte_8EAE:	dc.b 1
00009E95 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009E9A 01                         byte_8EB4:	dc.b 1
00009E9B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009EA0 01                         byte_8EBA:	dc.b 1
00009EA1 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009EA6 01                         byte_8EC0:	dc.b 1
00009EA7 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009EAC                            		even
00009EAC                            		even
00009EAC                            
00009EAC                            ; ---------------------------------------------------------------------------
00009EAC                            ; Sprite mappings - explosion
00009EAC                            ; ---------------------------------------------------------------------------
00009EAC 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009EB0 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00009EB4 0000                       		dc.w byte_8EF7-Map_obj27
00009EB6 01                         byte_8ED0:	dc.b 1
00009EB7 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009EBC 01                         byte_8ED6:	dc.b 1
00009EBD F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009EC2 01                         byte_8EDC:	dc.b 1
00009EC3 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009EC8 04                         byte_8EE2:	dc.b 4
00009EC9 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009ECE EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009ED3 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009ED8 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009EDD 04                         byte_8EF7:	dc.b 4
00009EDE EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009EE3 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009EE8 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009EED FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009EF2                            		even
00009EF2                            ; ---------------------------------------------------------------------------
00009EF2                            ; Sprite mappings - explosion from when	a boss is destroyed
00009EF2                            ; ---------------------------------------------------------------------------
00009EF2 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009EF4 0000                       		dc.w byte_8F16-Map_obj3F
00009EF6 0000                       		dc.w byte_8F1C-Map_obj3F
00009EF8 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009EFA FFEB                       		dc.w byte_8EF7-Map_obj3F
00009EFC 01                         byte_8F16:	dc.b 1
00009EFD F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009F02 01                         byte_8F1C:	dc.b 1
00009F03 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009F08                            		even
00009F08                            ; ===========================================================================
00009F08                            ; ---------------------------------------------------------------------------
00009F08                            ; Object 28 - animals
00009F08                            ; ---------------------------------------------------------------------------
00009F08                            
00009F08                            Obj28:					; XREF: Obj_Index
00009F08 7000                       		moveq	#0,d0
00009F0A 1028 0024                  		move.b	$24(a0),d0
00009F0E 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009F12 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009F16                            ; ===========================================================================
00009F16 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009F1A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009F1E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009F22 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009F26 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009F2A 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009F2E 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009F32 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009F36 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009F3A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009F3E 0000                       		dc.w loc_92D6-Obj28_Index
00009F40                            
00009F40 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1, 0,	5, 0,	5
00009F50                            
00009F50 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009F54 0000 0000                  		dc.l Map_obj28
00009F58 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009F5C 0000 0000                  		dc.l Map_obj28a		; mappings address
00009F60 FE80 FD00                  		dc.w $FE80, $FD00
00009F64 0000 0000                  		dc.l Map_obj28
00009F68 FEC0 FE80                  		dc.w $FEC0, $FE80
00009F6C 0000 0000                  		dc.l Map_obj28a
00009F70 FE40 FD00                  		dc.w $FE40, $FD00
00009F74 0000 0000                  		dc.l Map_obj28b
00009F78 FD00 FC00                  		dc.w $FD00, $FC00
00009F7C 0000 0000                  		dc.l Map_obj28a
00009F80 FD80 FC80                  		dc.w $FD80, $FC80
00009F84 0000 0000                  		dc.l Map_obj28b
00009F88                            
00009F88 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009F98 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009FA8 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009FB4                            
00009FB4 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009FC8 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009FDC 0000 0000                  		dc.l Map_obj28b
00009FE0                            
00009FE0 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009FF2 0565 05B3                  		dc.w $565, $5B3
00009FF6                            ; ===========================================================================
00009FF6                            
00009FF6                            Obj28_Ending:				; XREF: Obj28_Index
00009FF6 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009FFA 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009FFE 7000                       		moveq	#0,d0
0000A000 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A004 D040                       		add.w	d0,d0		; multiply d0 by 2
0000A006 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000A00A 0440 0014                  		subi.w	#$14,d0
0000A00E 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000A014 D040                       		add.w	d0,d0
0000A016 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000A01C 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000A020 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000A026 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000A02C 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000A032 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000A038 117C 000C 0016             		move.b	#$C,$16(a0)
0000A03E 117C 0004 0001             		move.b	#4,1(a0)
0000A044 08E8 0000 0001             		bset	#0,1(a0)
0000A04A 117C 0006 0018             		move.b	#6,$18(a0)
0000A050 117C 0008 0019             		move.b	#8,$19(a0)
0000A056 117C 0007 001E             		move.b	#7,$1E(a0)
0000A05C 6000 0000                  		bra.w	DisplaySprite
0000A060                            ; ===========================================================================
0000A060                            
0000A060                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000A060 5428 0024                  		addq.b	#2,$24(a0)
0000A064 6100 9398                  		bsr.w	RandomNumber
0000A068 0240 0001                  		andi.w	#1,d0
0000A06C 7200                       		moveq	#0,d1
0000A06E 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000A072 D241                       		add.w	d1,d1
0000A074 D240                       		add.w	d0,d1
0000A076 43FA FEC8                  		lea	Obj28_VarIndex(pc),a1
0000A07A 1031 1000                  		move.b	(a1,d1.w),d0
0000A07E 1140 0030                  		move.b	d0,$30(a0)
0000A082 E748                       		lsl.w	#3,d0
0000A084 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000A088 D2C0                       		adda.w	d0,a1
0000A08A 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000A08E 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000A092 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000A096 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000A09C 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000A0A2 6700                       		beq.s	loc_90C0	; if yes, branch
0000A0A4 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000A0AA                            
0000A0AA                            loc_90C0:
0000A0AA 117C 000C 0016             		move.b	#$C,$16(a0)
0000A0B0 117C 0004 0001             		move.b	#4,1(a0)
0000A0B6 08E8 0000 0001             		bset	#0,1(a0)
0000A0BC 117C 0006 0018             		move.b	#6,$18(a0)
0000A0C2 117C 0008 0019             		move.b	#8,$19(a0)
0000A0C8 117C 0007 001E             		move.b	#7,$1E(a0)
0000A0CE 117C 0002 001A             		move.b	#2,$1A(a0)
0000A0D4 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A0DA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A0DE 6600                       		bne.s	loc_911C
0000A0E0 6100 0000                  		bsr.w	SingleObjLoad
0000A0E4 6600                       		bne.s	Obj28_Display
0000A0E6 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000A0EA 3368 0008 0008             		move.w	8(a0),8(a1)
0000A0F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A0F6 3028 003E                  		move.w	$3E(a0),d0
0000A0FA E248                       		lsr.w	#1,d0
0000A0FC 1340 001A                  		move.b	d0,$1A(a1)
0000A100                            
0000A100                            Obj28_Display:
0000A100 6000 0000                  		bra.w	DisplaySprite
0000A104                            ; ===========================================================================
0000A104                            
0000A104                            loc_911C:
0000A104 117C 0012 0024             		move.b	#$12,$24(a0)
0000A10A 4268 0010                  		clr.w	$10(a0)
0000A10E 6000 0000                  		bra.w	DisplaySprite
0000A112                            ; ===========================================================================
0000A112                            
0000A112                            loc_912A:				; XREF: Obj28_Index
0000A112 4A28 0001                  		tst.b	1(a0)
0000A116 6A00 0000                  		bpl.w	DeleteObject
0000A11A 6100 0000                  		bsr.w	ObjectFall
0000A11E 4A68 0012                  		tst.w	$12(a0)
0000A122 6B00                       		bmi.s	loc_9180
0000A124 4EB9 0000 0000             		jsr	ObjHitFloor
0000A12A 4A41                       		tst.w	d1
0000A12C 6A00                       		bpl.s	loc_9180
0000A12E D368 000C                  		add.w	d1,$C(a0)
0000A132 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A138 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A13E 117C 0001 001A             		move.b	#1,$1A(a0)
0000A144 1028 0030                  		move.b	$30(a0),d0
0000A148 D000                       		add.b	d0,d0
0000A14A 5800                       		addq.b	#4,d0
0000A14C 1140 0024                  		move.b	d0,$24(a0)
0000A150 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A154 6700                       		beq.s	loc_9180
0000A156 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000A15C 6700                       		beq.s	loc_9180
0000A15E 4468 0010                  		neg.w	$10(a0)
0000A162 0868 0000 0001             		bchg	#0,1(a0)
0000A168                            
0000A168                            loc_9180:
0000A168 6000 0000                  		bra.w	DisplaySprite
0000A16C                            ; ===========================================================================
0000A16C                            
0000A16C                            loc_9184:				; XREF: Obj28_Index
0000A16C 6100 0000                  		bsr.w	ObjectFall
0000A170 117C 0001 001A             		move.b	#1,$1A(a0)
0000A176 4A68 0012                  		tst.w	$12(a0)
0000A17A 6B00                       		bmi.s	loc_91AE
0000A17C 117C 0000 001A             		move.b	#0,$1A(a0)
0000A182 4EB9 0000 0000             		jsr	ObjHitFloor
0000A188 4A41                       		tst.w	d1
0000A18A 6A00                       		bpl.s	loc_91AE
0000A18C D368 000C                  		add.w	d1,$C(a0)
0000A190 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A196                            
0000A196                            loc_91AE:
0000A196 4A28 0028                  		tst.b	$28(a0)
0000A19A 6600                       		bne.s	loc_9224
0000A19C 4A28 0001                  		tst.b	1(a0)
0000A1A0 6A00 0000                  		bpl.w	DeleteObject
0000A1A4 6000 0000                  		bra.w	DisplaySprite
0000A1A8                            ; ===========================================================================
0000A1A8                            
0000A1A8                            loc_91C0:				; XREF: Obj28_Index
0000A1A8 6100 0000                  		bsr.w	SpeedToPos
0000A1AC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A1B2 4A68 0012                  		tst.w	$12(a0)
0000A1B6 6B00                       		bmi.s	loc_91FC
0000A1B8 4EB9 0000 0000             		jsr	ObjHitFloor
0000A1BE 4A41                       		tst.w	d1
0000A1C0 6A00                       		bpl.s	loc_91FC
0000A1C2 D368 000C                  		add.w	d1,$C(a0)
0000A1C6 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A1CC 4A28 0028                  		tst.b	$28(a0)
0000A1D0 6700                       		beq.s	loc_91FC
0000A1D2 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000A1D8 6700                       		beq.s	loc_91FC
0000A1DA 4468 0010                  		neg.w	$10(a0)
0000A1DE 0868 0000 0001             		bchg	#0,1(a0)
0000A1E4                            
0000A1E4                            loc_91FC:
0000A1E4 5328 001E                  		subq.b	#1,$1E(a0)
0000A1E8 6A00                       		bpl.s	loc_9212
0000A1EA 117C 0001 001E             		move.b	#1,$1E(a0)
0000A1F0 5228 001A                  		addq.b	#1,$1A(a0)
0000A1F4 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A1FA                            
0000A1FA                            loc_9212:
0000A1FA 4A28 0028                  		tst.b	$28(a0)
0000A1FE 6600                       		bne.s	loc_9224
0000A200 4A28 0001                  		tst.b	1(a0)
0000A204 6A00 0000                  		bpl.w	DeleteObject
0000A208 6000 0000                  		bra.w	DisplaySprite
0000A20C                            ; ===========================================================================
0000A20C                            
0000A20C                            loc_9224:				; XREF: Obj28_Index
0000A20C 3028 0008                  		move.w	8(a0),d0
0000A210 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A214 6500                       		bcs.s	loc_923C
0000A216 0440 0180                  		subi.w	#$180,d0
0000A21A 6A00                       		bpl.s	loc_923C
0000A21C 4A28 0001                  		tst.b	1(a0)
0000A220 6A00 0000                  		bpl.w	DeleteObject
0000A224                            
0000A224                            loc_923C:
0000A224 6000 0000                  		bra.w	DisplaySprite
0000A228                            ; ===========================================================================
0000A228                            
0000A228                            loc_9240:				; XREF: Obj28_Index
0000A228 4A28 0001                  		tst.b	1(a0)
0000A22C 6A00 0000                  		bpl.w	DeleteObject
0000A230 5368 0036                  		subq.w	#1,$36(a0)
0000A234 6600 0000                  		bne.w	loc_925C
0000A238 117C 0002 0024             		move.b	#2,$24(a0)
0000A23E 117C 0003 0018             		move.b	#3,$18(a0)
0000A244                            
0000A244                            loc_925C:
0000A244 6000 0000                  		bra.w	DisplaySprite
0000A248                            ; ===========================================================================
0000A248                            
0000A248                            loc_9260:				; XREF: Obj28_Index
0000A248 6100 0000                  		bsr.w	sub_9404
0000A24C 6400                       		bcc.s	loc_927C
0000A24E 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A254 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A25A 117C 000E 0024             		move.b	#$E,$24(a0)
0000A260 6000 FF46                  		bra.w	loc_91C0
0000A264                            ; ===========================================================================
0000A264                            
0000A264                            loc_927C:
0000A264 6000 FFA6                  		bra.w	loc_9224
0000A268                            ; ===========================================================================
0000A268                            
0000A268                            loc_9280:				; XREF: Obj28_Index
0000A268 6100 0000                  		bsr.w	sub_9404
0000A26C 6A00                       		bpl.s	loc_92B6
0000A26E 4268 0010                  		clr.w	$10(a0)
0000A272 4268 0032                  		clr.w	$32(a0)
0000A276 6100 0000                  		bsr.w	SpeedToPos
0000A27A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A280 6100 0000                  		bsr.w	loc_93C4
0000A284 6100 0000                  		bsr.w	loc_93EC
0000A288 5328 001E                  		subq.b	#1,$1E(a0)
0000A28C 6A00                       		bpl.s	loc_92B6
0000A28E 117C 0001 001E             		move.b	#1,$1E(a0)
0000A294 5228 001A                  		addq.b	#1,$1A(a0)
0000A298 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A29E                            
0000A29E                            loc_92B6:
0000A29E 6000 FF6C                  		bra.w	loc_9224
0000A2A2                            ; ===========================================================================
0000A2A2                            
0000A2A2                            loc_92BA:				; XREF: Obj28_Index
0000A2A2 6100 0000                  		bsr.w	sub_9404
0000A2A6 6A00                       		bpl.s	loc_9310
0000A2A8 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A2AE 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A2B4 117C 0004 0024             		move.b	#4,$24(a0)
0000A2BA 6000 FEB0                  		bra.w	loc_9184
0000A2BE                            ; ===========================================================================
0000A2BE                            
0000A2BE                            loc_92D6:				; XREF: Obj28_Index
0000A2BE 6100 0000                  		bsr.w	ObjectFall
0000A2C2 117C 0001 001A             		move.b	#1,$1A(a0)
0000A2C8 4A68 0012                  		tst.w	$12(a0)
0000A2CC 6B00                       		bmi.s	loc_9310
0000A2CE 117C 0000 001A             		move.b	#0,$1A(a0)
0000A2D4 4EB9 0000 0000             		jsr	ObjHitFloor
0000A2DA 4A41                       		tst.w	d1
0000A2DC 6A00                       		bpl.s	loc_9310
0000A2DE 4628 0029                  		not.b	$29(a0)
0000A2E2 6600                       		bne.s	loc_9306
0000A2E4 4468 0010                  		neg.w	$10(a0)
0000A2E8 0868 0000 0001             		bchg	#0,1(a0)
0000A2EE                            
0000A2EE                            loc_9306:
0000A2EE D368 000C                  		add.w	d1,$C(a0)
0000A2F2 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A2F8                            
0000A2F8                            loc_9310:
0000A2F8 6000 FF12                  		bra.w	loc_9224
0000A2FC                            ; ===========================================================================
0000A2FC                            
0000A2FC                            loc_9314:				; XREF: Obj28_Index
0000A2FC 6100 0000                  		bsr.w	sub_9404
0000A300 6A00                       		bpl.s	loc_932E
0000A302 4268 0010                  		clr.w	$10(a0)
0000A306 4268 0032                  		clr.w	$32(a0)
0000A30A 6100 0000                  		bsr.w	ObjectFall
0000A30E 6100 0000                  		bsr.w	loc_93C4
0000A312 6100 0000                  		bsr.w	loc_93EC
0000A316                            
0000A316                            loc_932E:
0000A316 6000 FEF4                  		bra.w	loc_9224
0000A31A                            ; ===========================================================================
0000A31A                            
0000A31A                            loc_9332:				; XREF: Obj28_Index
0000A31A 6100 0000                  		bsr.w	sub_9404
0000A31E 6A00                       		bpl.s	loc_936C
0000A320 6100 0000                  		bsr.w	ObjectFall
0000A324 117C 0001 001A             		move.b	#1,$1A(a0)
0000A32A 4A68 0012                  		tst.w	$12(a0)
0000A32E 6B00                       		bmi.s	loc_936C
0000A330 117C 0000 001A             		move.b	#0,$1A(a0)
0000A336 4EB9 0000 0000             		jsr	ObjHitFloor
0000A33C 4A41                       		tst.w	d1
0000A33E 6A00                       		bpl.s	loc_936C
0000A340 4468 0010                  		neg.w	$10(a0)
0000A344 0868 0000 0001             		bchg	#0,1(a0)
0000A34A D368 000C                  		add.w	d1,$C(a0)
0000A34E 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A354                            
0000A354                            loc_936C:
0000A354 6000 FEB6                  		bra.w	loc_9224
0000A358                            ; ===========================================================================
0000A358                            
0000A358                            loc_9370:				; XREF: Obj28_Index
0000A358 6100 0000                  		bsr.w	sub_9404
0000A35C 6A00                       		bpl.s	loc_93C0
0000A35E 6100 0000                  		bsr.w	SpeedToPos
0000A362 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A368 4A68 0012                  		tst.w	$12(a0)
0000A36C 6B00                       		bmi.s	loc_93AA
0000A36E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A374 4A41                       		tst.w	d1
0000A376 6A00                       		bpl.s	loc_93AA
0000A378 4628 0029                  		not.b	$29(a0)
0000A37C 6600                       		bne.s	loc_93A0
0000A37E 4468 0010                  		neg.w	$10(a0)
0000A382 0868 0000 0001             		bchg	#0,1(a0)
0000A388                            
0000A388                            loc_93A0:
0000A388 D368 000C                  		add.w	d1,$C(a0)
0000A38C 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A392                            
0000A392                            loc_93AA:
0000A392 5328 001E                  		subq.b	#1,$1E(a0)
0000A396 6A00                       		bpl.s	loc_93C0
0000A398 117C 0001 001E             		move.b	#1,$1E(a0)
0000A39E 5228 001A                  		addq.b	#1,$1A(a0)
0000A3A2 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A3A8                            
0000A3A8                            loc_93C0:
0000A3A8 6000 FE62                  		bra.w	loc_9224
0000A3AC                            ; ===========================================================================
0000A3AC                            
0000A3AC                            loc_93C4:
0000A3AC 117C 0001 001A             		move.b	#1,$1A(a0)
0000A3B2 4A68 0012                  		tst.w	$12(a0)
0000A3B6 6B00                       		bmi.s	locret_93EA
0000A3B8 117C 0000 001A             		move.b	#0,$1A(a0)
0000A3BE 4EB9 0000 0000             		jsr	ObjHitFloor
0000A3C4 4A41                       		tst.w	d1
0000A3C6 6A00                       		bpl.s	locret_93EA
0000A3C8 D368 000C                  		add.w	d1,$C(a0)
0000A3CC 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A3D2                            
0000A3D2                            locret_93EA:
0000A3D2 4E75                       		rts	
0000A3D4                            ; ===========================================================================
0000A3D4                            
0000A3D4                            loc_93EC:
0000A3D4 08E8 0000 0001             		bset	#0,1(a0)
0000A3DA 3028 0008                  		move.w	8(a0),d0
0000A3DE 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A3E2 6400                       		bcc.s	locret_9402
0000A3E4 08A8 0000 0001             		bclr	#0,1(a0)
0000A3EA                            
0000A3EA                            locret_9402:
0000A3EA 4E75                       		rts	
0000A3EC                            
0000A3EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A3EC                            
0000A3EC                            
0000A3EC                            sub_9404:
0000A3EC 3038 D008                  		move.w	($FFFFD008).w,d0
0000A3F0 9068 0008                  		sub.w	8(a0),d0
0000A3F4 0440 00B8                  		subi.w	#$B8,d0
0000A3F8 4E75                       		rts	
0000A3FA                            ; End of function sub_9404
0000A3FA                            
0000A3FA                            ; ===========================================================================
0000A3FA                            ; ---------------------------------------------------------------------------
0000A3FA                            ; Object 29 - points that appear when you destroy something
0000A3FA                            ; ---------------------------------------------------------------------------
0000A3FA                            
0000A3FA                            Obj29:					; XREF: Obj_Index
0000A3FA 7000                       		moveq	#0,d0
0000A3FC 1028 0024                  		move.b	$24(a0),d0
0000A400 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000A404 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000A408 6000 0000                  		bra.w	DisplaySprite
0000A40C                            ; ===========================================================================
0000A40C 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000A40E 0000                       		dc.w Obj29_Slower-Obj29_Index
0000A410                            ; ===========================================================================
0000A410                            
0000A410                            Obj29_Main:				; XREF: Obj29_Index
0000A410 5428 0024                  		addq.b	#2,$24(a0)
0000A414 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000A41C 317C 2797 0002             		move.w	#$2797,2(a0)
0000A422 117C 0004 0001             		move.b	#4,1(a0)
0000A428 117C 0001 0018             		move.b	#1,$18(a0)
0000A42E 117C 0008 0019             		move.b	#8,$19(a0)
0000A434 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000A43A                            
0000A43A                            Obj29_Slower:				; XREF: Obj29_Index
0000A43A 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A43E 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000A442 6100 0000                  		bsr.w	SpeedToPos
0000A446 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A44C 4E75                       		rts	
0000A44E                            ; ===========================================================================
0000A44E                            ; ---------------------------------------------------------------------------
0000A44E                            ; Sprite mappings - animals
0000A44E                            ; ---------------------------------------------------------------------------
0000A44E                            Map_obj28:
0000A44E                            	include "_maps\obj28.asm"
0000A44E                            ; ---------------------------------------------------------------------------
0000A44E                            ; Sprite mappings - animals
0000A44E                            ; ---------------------------------------------------------------------------
0000A44E 0000                       		dc.w byte_9472-Map_obj28
0000A450 0000                       		dc.w byte_9478-Map_obj28
0000A452 0000                       		dc.w byte_946C-Map_obj28
0000A454 01                         byte_946C:	dc.b 1
0000A455 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A45A 01                         byte_9472:	dc.b 1
0000A45B F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000A460 01                         byte_9478:	dc.b 1
0000A461 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000A466                            		even
0000A466                            		even
0000A466                            
0000A466                            Map_obj28a:
0000A466                            	include "_maps\obj28a.asm"
0000A466                            ; ---------------------------------------------------------------------------
0000A466                            ; Sprite mappings - animals
0000A466                            ; ---------------------------------------------------------------------------
0000A466 0000                       		dc.w byte_948A-Map_obj28a
0000A468 0000                       		dc.w byte_9490-Map_obj28a
0000A46A 0000                       		dc.w byte_9484-Map_obj28a
0000A46C 01                         byte_9484:	dc.b 1
0000A46D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A472 01                         byte_948A:	dc.b 1
0000A473 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000A478 01                         byte_9490:	dc.b 1
0000A479 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000A47E                            		even
0000A47E                            		even
0000A47E                            
0000A47E                            Map_obj28b:
0000A47E                            	include "_maps\obj28b.asm"
0000A47E                            ; ---------------------------------------------------------------------------
0000A47E                            ; Sprite mappings - animals
0000A47E                            ; ---------------------------------------------------------------------------
0000A47E 0000                       		dc.w byte_94A2-Map_obj28b
0000A480 0000                       		dc.w byte_94A8-Map_obj28b
0000A482 0000                       		dc.w byte_949C-Map_obj28b
0000A484 01                         byte_949C:	dc.b 1
0000A485 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A48A 01                         byte_94A2:	dc.b 1
0000A48B FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000A490 01                         byte_94A8:	dc.b 1
0000A491 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000A496                            		even
0000A496                            		even
0000A496                            
0000A496                            ; ---------------------------------------------------------------------------
0000A496                            ; Sprite mappings - points that	appear when you	destroy	something
0000A496                            ; ---------------------------------------------------------------------------
0000A496                            Map_obj29:
0000A496                            	include "_maps\obj29.asm"
0000A496                            ; ---------------------------------------------------------------------------
0000A496                            ; Sprite mappings - points that	appear when you	destroy	something
0000A496                            ; ---------------------------------------------------------------------------
0000A496 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000A49A 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000A49E 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000A4A2 0000                       		dc.w byte_94E5-Map_obj29
0000A4A4 01                         byte_94BC:	dc.b 1
0000A4A5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000A4AA 01                         byte_94C2:	dc.b 1
0000A4AB FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000A4B0 01                         byte_94C8:	dc.b 1
0000A4B1 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000A4B6 01                         byte_94CE:	dc.b 1
0000A4B7 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000A4BC 01                         byte_94D4:	dc.b 1
0000A4BD FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000A4C2 02                         byte_94DA:	dc.b 2
0000A4C3 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000A4C8 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000A4CD 02                         byte_94E5:	dc.b 2
0000A4CE FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000A4D3 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000A4D8                            		even
0000A4D8                            		even
0000A4D8                            
0000A4D8                            ; ===========================================================================
0000A4D8                            ; ---------------------------------------------------------------------------
0000A4D8                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000A4D8                            ; ---------------------------------------------------------------------------
0000A4D8                            
0000A4D8                            Obj1F:					; XREF: Obj_Index
0000A4D8 7000                       		moveq	#0,d0
0000A4DA 1028 0024                  		move.b	$24(a0),d0
0000A4DE 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000A4E2 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000A4E6                            ; ===========================================================================
0000A4E6 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000A4E8 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000A4EA 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000A4EC 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000A4EE 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000A4F0                            ; ===========================================================================
0000A4F0                            
0000A4F0                            Obj1F_Main:				; XREF: Obj1F_Index
0000A4F0 117C 0010 0016             		move.b	#$10,$16(a0)
0000A4F6 117C 0008 0017             		move.b	#8,$17(a0)
0000A4FC 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A504 317C 0400 0002             		move.w	#$400,2(a0)
0000A50A 117C 0004 0001             		move.b	#4,1(a0)
0000A510 117C 0003 0018             		move.b	#3,$18(a0)
0000A516 117C 0006 0020             		move.b	#6,$20(a0)
0000A51C 117C 0015 0019             		move.b	#$15,$19(a0)
0000A522 6100 0000                  		bsr.w	ObjectFall
0000A526 4EB9 0000 0000             		jsr	ObjHitFloor
0000A52C 4A41                       		tst.w	d1
0000A52E 6A00                       		bpl.s	locret_955A
0000A530 D368 000C                  		add.w	d1,$C(a0)
0000A534 1143 0026                  		move.b	d3,$26(a0)
0000A538 317C 0000 0012             		move.w	#0,$12(a0)
0000A53E 5428 0024                  		addq.b	#2,$24(a0)
0000A542                            
0000A542                            locret_955A:
0000A542 4E75                       		rts	
0000A544                            ; ===========================================================================
0000A544                            
0000A544                            Obj1F_Action:				; XREF: Obj1F_Index
0000A544 7000                       		moveq	#0,d0
0000A546 1028 0025                  		move.b	$25(a0),d0
0000A54A 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000A54E 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000A552 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A558 6100 0000                  		bsr.w	AnimateSprite
0000A55C 6000 0000                  		bra.w	MarkObjGone
0000A560                            ; ===========================================================================
0000A560 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000A562 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000A564                            ; ===========================================================================
0000A564                            
0000A564                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000A564 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000A568 6A00                       		bpl.s	locret_95B6
0000A56A 4A28 0001                  		tst.b	1(a0)
0000A56E 6A00                       		bpl.s	Obj1F_Move
0000A570 0868 0001 0032             		bchg	#1,$32(a0)
0000A576 6600                       		bne.s	Obj1F_MakeFire
0000A578                            
0000A578                            Obj1F_Move:
0000A578 5428 0025                  		addq.b	#2,$25(a0)
0000A57C 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A582 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A588 6100 0000                  		bsr.w	Obj1F_SetAni
0000A58C 5600                       		addq.b	#3,d0
0000A58E 1140 001C                  		move.b	d0,$1C(a0)
0000A592 0868 0000 0022             		bchg	#0,$22(a0)
0000A598 6600                       		bne.s	locret_95B6
0000A59A 4468 0010                  		neg.w	$10(a0)		; change direction
0000A59E                            
0000A59E                            locret_95B6:
0000A59E 4E75                       		rts	
0000A5A0                            ; ===========================================================================
0000A5A0                            
0000A5A0                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A5A0 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A5A6 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A5AC 6100 0000                  		bsr.w	SingleObjLoad
0000A5B0 6600                       		bne.s	Obj1F_MakeFire2
0000A5B2 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A5B6 137C 0006 0024             		move.b	#6,$24(a1)
0000A5BC 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5C2 0469 0010 0008             		subi.w	#$10,8(a1)
0000A5C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A5CE 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A5D4                            
0000A5D4                            Obj1F_MakeFire2:
0000A5D4 6100 0000                  		bsr.w	SingleObjLoad
0000A5D8 6600                       		bne.s	locret_9618
0000A5DA 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A5DE 137C 0006 0024             		move.b	#6,$24(a1)
0000A5E4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5EA 0669 0010 0008             		addi.w	#$10,8(a1)
0000A5F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A5F6 337C 0100 0010             		move.w	#$100,$10(a1)
0000A5FC                            
0000A5FC                            locret_9618:
0000A5FC 4E75                       		rts	
0000A5FE                            ; ===========================================================================
0000A5FE                            
0000A5FE                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A5FE 5368 0030                  		subq.w	#1,$30(a0)
0000A602 6B00                       		bmi.s	loc_966E
0000A604 6100 0000                  		bsr.w	SpeedToPos
0000A608 0868 0000 0032             		bchg	#0,$32(a0)
0000A60E 6600                       		bne.s	loc_9654
0000A610 3628 0008                  		move.w	8(a0),d3
0000A614 0643 0010                  		addi.w	#$10,d3
0000A618 0828 0000 0022             		btst	#0,$22(a0)
0000A61E 6700                       		beq.s	loc_9640
0000A620 0443 0020                  		subi.w	#$20,d3
0000A624                            
0000A624                            loc_9640:
0000A624 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A62A 0C41 FFF8                  		cmpi.w	#-8,d1
0000A62E 6D00                       		blt.s	loc_966E
0000A630 0C41 000C                  		cmpi.w	#$C,d1
0000A634 6C00                       		bge.s	loc_966E
0000A636 4E75                       		rts	
0000A638                            ; ===========================================================================
0000A638                            
0000A638                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A638 4EB9 0000 0000             		jsr	ObjHitFloor
0000A63E D368 000C                  		add.w	d1,$C(a0)
0000A642 1143 0026                  		move.b	d3,$26(a0)
0000A646 6100 0000                  		bsr.w	Obj1F_SetAni
0000A64A 5600                       		addq.b	#3,d0
0000A64C 1140 001C                  		move.b	d0,$1C(a0)
0000A650 4E75                       		rts	
0000A652                            ; ===========================================================================
0000A652                            
0000A652                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A652 5528 0025                  		subq.b	#2,$25(a0)
0000A656 317C 003B 0030             		move.w	#59,$30(a0)
0000A65C 317C 0000 0010             		move.w	#0,$10(a0)
0000A662 6100 0000                  		bsr.w	Obj1F_SetAni
0000A666 1140 001C                  		move.b	d0,$1C(a0)
0000A66A 4E75                       		rts	
0000A66C                            ; ---------------------------------------------------------------------------
0000A66C                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A66C                            ; ---------------------------------------------------------------------------
0000A66C                            
0000A66C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A66C                            
0000A66C                            
0000A66C                            Obj1F_SetAni:				; XREF: loc_966E
0000A66C 7000                       		moveq	#0,d0
0000A66E 1628 0026                  		move.b	$26(a0),d3
0000A672 6B00                       		bmi.s	loc_96A4
0000A674 0C03 0006                  		cmpi.b	#6,d3
0000A678 6500                       		bcs.s	locret_96A2
0000A67A 7001                       		moveq	#1,d0
0000A67C 0828 0000 0022             		btst	#0,$22(a0)
0000A682 6600                       		bne.s	locret_96A2
0000A684 7002                       		moveq	#2,d0
0000A686                            
0000A686                            locret_96A2:
0000A686 4E75                       		rts	
0000A688                            ; ===========================================================================
0000A688                            
0000A688                            loc_96A4:				; XREF: Obj1F_SetAni
0000A688 0C03 00FA                  		cmpi.b	#-6,d3
0000A68C 6200                       		bhi.s	locret_96B6
0000A68E 7002                       		moveq	#2,d0
0000A690 0828 0000 0022             		btst	#0,$22(a0)
0000A696 6600                       		bne.s	locret_96B6
0000A698 7001                       		moveq	#1,d0
0000A69A                            
0000A69A                            locret_96B6:
0000A69A 4E75                       		rts	
0000A69C                            ; End of function Obj1F_SetAni
0000A69C                            
0000A69C                            ; ===========================================================================
0000A69C                            
0000A69C                            Obj1F_Delete:				; XREF: Obj1F_Index
0000A69C 6100 0000                  		bsr.w	DeleteObject
0000A6A0 4E75                       		rts	
0000A6A2                            ; ===========================================================================
0000A6A2                            ; ---------------------------------------------------------------------------
0000A6A2                            ; Sub-object - missile that the	Crabmeat throws
0000A6A2                            ; ---------------------------------------------------------------------------
0000A6A2                            
0000A6A2                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000A6A2 5428 0024                  		addq.b	#2,$24(a0)
0000A6A6 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A6AE 317C 0400 0002             		move.w	#$400,2(a0)
0000A6B4 117C 0004 0001             		move.b	#4,1(a0)
0000A6BA 117C 0003 0018             		move.b	#3,$18(a0)
0000A6C0 117C 0087 0020             		move.b	#$87,$20(a0)
0000A6C6 117C 0008 0019             		move.b	#8,$19(a0)
0000A6CC 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A6D2 117C 0007 001C             		move.b	#7,$1C(a0)
0000A6D8                            
0000A6D8                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000A6D8 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A6DE 6100 0000                  		bsr.w	AnimateSprite
0000A6E2 6100 0000                  		bsr.w	ObjectFall
0000A6E6 6100 0000                  		bsr.w	DisplaySprite
0000A6EA 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A6EE 0640 00E0                  		addi.w	#$E0,d0
0000A6F2 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A6F6 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000A6F8 4E75                       		rts	
0000A6FA                            ; ===========================================================================
0000A6FA                            
0000A6FA                            Obj1F_Delete2:
0000A6FA 6000 0000                  		bra.w	DeleteObject
0000A6FE                            ; ===========================================================================
0000A6FE                            Ani_obj1F:
0000A6FE                            	include "_anim\obj1F.asm"
0000A6FE                            ; ---------------------------------------------------------------------------
0000A6FE                            ; Animation script - Crabmeat enemy
0000A6FE                            ; ---------------------------------------------------------------------------
0000A6FE 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000A704 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000A70A 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A70E 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A712 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A716 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A71A 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A720 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A726 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A72C 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A730 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A734                            		even
0000A734                            		even
0000A734                            
0000A734                            ; ---------------------------------------------------------------------------
0000A734                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A734                            ; ---------------------------------------------------------------------------
0000A734                            Map_obj1F:
0000A734                            	include "_maps\obj1F.asm"
0000A734                            Map_1514:
0000A734 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
0000A736 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
0000A738 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
0000A73A 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
0000A73C 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
0000A73E 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
0000A740 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
0000A742 03                         Map_1514_E: 	dc.b $3
0000A743 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A748 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A74D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A752 03                         Map_1514_1E: 	dc.b $3
0000A753 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A758 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A75D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A762 03                         Map_1514_2E: 	dc.b $3
0000A763 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A768 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A76D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A772 03                         Map_1514_3E: 	dc.b $3
0000A773 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A778 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A77D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A782 03                         Map_1514_4E: 	dc.b $3
0000A783 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A788 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A78D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A792 01                         Map_1514_5E: 	dc.b $1
0000A793 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
0000A798 01                         Map_1514_64: 	dc.b $1
0000A799 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
0000A79E                            	even
0000A79E                            	even
0000A79E                            
0000A79E                            ; ===========================================================================
0000A79E                            ; ---------------------------------------------------------------------------
0000A79E                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A79E                            ; ---------------------------------------------------------------------------
0000A79E                            
0000A79E                            Obj22:					; XREF: Obj_Index
0000A79E 7000                       		moveq	#0,d0
0000A7A0 1028 0024                  		move.b	$24(a0),d0
0000A7A4 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A7A8 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A7AC                            ; ===========================================================================
0000A7AC 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A7AE 0000                       		dc.w Obj22_Action-Obj22_Index
0000A7B0 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A7B2                            ; ===========================================================================
0000A7B2                            
0000A7B2                            Obj22_Main:				; XREF: Obj22_Index
0000A7B2 5428 0024                  		addq.b	#2,$24(a0)
0000A7B6 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A7BE 317C 0444 0002             		move.w	#$444,2(a0)
0000A7C4 117C 0004 0001             		move.b	#4,1(a0)
0000A7CA 117C 0003 0018             		move.b	#3,$18(a0)
0000A7D0 117C 0008 0020             		move.b	#8,$20(a0)
0000A7D6 117C 0018 0019             		move.b	#$18,$19(a0)
0000A7DC                            
0000A7DC                            Obj22_Action:				; XREF: Obj22_Index
0000A7DC 7000                       		moveq	#0,d0
0000A7DE 1028 0025                  		move.b	$25(a0),d0
0000A7E2 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A7E6 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A7EA 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A7F0 6100 0000                  		bsr.w	AnimateSprite
0000A7F4 6000 0000                  		bra.w	MarkObjGone
0000A7F8                            ; ===========================================================================
0000A7F8 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A7FA 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A7FC                            ; ===========================================================================
0000A7FC                            
0000A7FC                            Obj22_Move:				; XREF: Obj22_Index2
0000A7FC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A800 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A802 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A808 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A80A 5428 0025                  		addq.b	#2,$25(a0)
0000A80E 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A814 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A81A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A820 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A826 6600                       		bne.s	locret_986C	; if not, branch
0000A828 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A82C                            
0000A82C                            locret_986C:
0000A82C 4E75                       		rts	
0000A82E                            ; ===========================================================================
0000A82E                            
0000A82E                            Obj22_Fire:				; XREF: Obj22_Move
0000A82E 6100 0000                  		bsr.w	SingleObjLoad
0000A832 6600                       		bne.s	locret_98D0
0000A834 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A838 3368 0008 0008             		move.w	8(a0),8(a1)
0000A83E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A844 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A84A 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A850 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A856 303C 0018                  		move.w	#$18,d0
0000A85A 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A860 6600                       		bne.s	loc_98AA	; if not, branch
0000A862 4440                       		neg.w	d0
0000A864 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A868                            
0000A868                            loc_98AA:
0000A868 D169 0008                  		add.w	d0,8(a1)
0000A86C 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A872 337C 000E 0032             		move.w	#$E,$32(a1)
0000A878 2348 003C                  		move.l	a0,$3C(a1)
0000A87C 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A882 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A888 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A88E                            
0000A88E                            locret_98D0:
0000A88E 4E75                       		rts	
0000A890                            ; ===========================================================================
0000A890                            
0000A890                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A890 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A894 6B00                       		bmi.s	Obj22_ChgDir
0000A896 6100 0000                  		bsr.w	SpeedToPos
0000A89A 4A28 0034                  		tst.b	$34(a0)
0000A89E 6600                       		bne.s	locret_992A
0000A8A0 3038 D008                  		move.w	($FFFFD008).w,d0
0000A8A4 9068 0008                  		sub.w	8(a0),d0
0000A8A8 6A00                       		bpl.s	Obj22_SetNrSonic
0000A8AA 4440                       		neg.w	d0
0000A8AC                            
0000A8AC                            Obj22_SetNrSonic:
0000A8AC 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A8B0 6400                       		bcc.s	locret_992A	; if not, branch
0000A8B2 4A28 0001                  		tst.b	1(a0)
0000A8B6 6A00                       		bpl.s	locret_992A
0000A8B8 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A8BE 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A8C4 6000                       		bra.s	Obj22_Stop
0000A8C6                            ; ===========================================================================
0000A8C6                            
0000A8C6                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A8C6 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A8CC 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A8D2 317C 003B 0032             		move.w	#59,$32(a0)
0000A8D8                            
0000A8D8                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A8D8 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A8DC 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A8E2 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A8E8                            
0000A8E8                            locret_992A:
0000A8E8 4E75                       		rts	
0000A8EA                            ; ===========================================================================
0000A8EA                            
0000A8EA                            Obj22_Delete:				; XREF: Obj22_Index
0000A8EA 6100 0000                  		bsr.w	DeleteObject
0000A8EE 4E75                       		rts	
0000A8F0                            ; ===========================================================================
0000A8F0                            ; ---------------------------------------------------------------------------
0000A8F0                            ; Object 23 - missile that Buzz	Bomber throws
0000A8F0                            ; ---------------------------------------------------------------------------
0000A8F0                            
0000A8F0                            Obj23:					; XREF: Obj_Index
0000A8F0 7000                       		moveq	#0,d0
0000A8F2 1028 0024                  		move.b	$24(a0),d0
0000A8F6 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A8FA 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A8FE                            ; ===========================================================================
0000A8FE 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A900 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A902 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A904 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A906 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A908                            ; ===========================================================================
0000A908                            
0000A908                            Obj23_Main:				; XREF: Obj23_Index
0000A908 5368 0032                  		subq.w	#1,$32(a0)
0000A90C 6A00                       		bpl.s	Obj23_ChkCancel
0000A90E 5428 0024                  		addq.b	#2,$24(a0)
0000A912 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A91A 317C 2444 0002             		move.w	#$2444,2(a0)
0000A920 117C 0004 0001             		move.b	#4,1(a0)
0000A926 117C 0003 0018             		move.b	#3,$18(a0)
0000A92C 117C 0008 0019             		move.b	#8,$19(a0)
0000A932 0228 0003 0022             		andi.b	#3,$22(a0)
0000A938 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A93C 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A93E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A944 117C 0087 0020             		move.b	#$87,$20(a0)
0000A94A 117C 0001 001C             		move.b	#1,$1C(a0)
0000A950 6000                       		bra.s	Obj23_Animate2
0000A952                            ; ===========================================================================
0000A952                            
0000A952                            Obj23_Animate:				; XREF: Obj23_Index
0000A952 6100                       		bsr.s	Obj23_ChkCancel
0000A954 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A95A 6100 0000                  		bsr.w	AnimateSprite
0000A95E 6000 0000                  		bra.w	DisplaySprite
0000A962                            ; ---------------------------------------------------------------------------
0000A962                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A962                            ; destroyed, and if it has, then cancel	the missile
0000A962                            ; ---------------------------------------------------------------------------
0000A962                            
0000A962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A962                            
0000A962                            
0000A962                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A962 2268 003C                  		movea.l	$3C(a0),a1
0000A966 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A96A 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A96C 4E75                       		rts	
0000A96E                            ; End of function Obj23_ChkCancel
0000A96E                            
0000A96E                            ; ===========================================================================
0000A96E                            
0000A96E                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A96E 0828 0007 0022             		btst	#7,$22(a0)
0000A974 6600                       		bne.s	Obj23_Explode
0000A976 117C 0087 0020             		move.b	#$87,$20(a0)
0000A97C 117C 0001 001C             		move.b	#1,$1C(a0)
0000A982 6100 0000                  		bsr.w	SpeedToPos
0000A986 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A98C 6100 0000                  		bsr.w	AnimateSprite
0000A990 6100 0000                  		bsr.w	DisplaySprite
0000A994 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A998 0640 00E0                  		addi.w	#$E0,d0
0000A99C B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A9A0 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A9A2 4E75                       		rts	
0000A9A4                            ; ===========================================================================
0000A9A4                            
0000A9A4                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A9A4 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A9A8 117C 0000 0024             		move.b	#0,$24(a0)
0000A9AE 6000 F2D0                  		bra.w	Obj24
0000A9B2                            ; ===========================================================================
0000A9B2                            
0000A9B2                            Obj23_Delete:				; XREF: Obj23_Index
0000A9B2 6100 0000                  		bsr.w	DeleteObject
0000A9B6 4E75                       		rts	
0000A9B8                            ; ===========================================================================
0000A9B8                            
0000A9B8                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A9B8 4A28 0001                  		tst.b	1(a0)
0000A9BC 6AF4                       		bpl.s	Obj23_Delete
0000A9BE 6100 0000                  		bsr.w	SpeedToPos
0000A9C2                            
0000A9C2                            Obj23_Animate2:				; XREF: Obj23_Main
0000A9C2 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A9C8 6100 0000                  		bsr.w	AnimateSprite
0000A9CC 6100 0000                  		bsr.w	DisplaySprite
0000A9D0 4E75                       		rts	
0000A9D2                            ; ===========================================================================
0000A9D2                            Ani_obj22:
0000A9D2                            	include "_anim\obj22.asm"
0000A9D2                            ; ---------------------------------------------------------------------------
0000A9D2                            ; Animation script - Buzz Bomber enemy
0000A9D2                            ; ---------------------------------------------------------------------------
0000A9D2 0000                       		dc.w byte_9A1E-Ani_obj22
0000A9D4 0000                       		dc.w byte_9A22-Ani_obj22
0000A9D6 0000                       		dc.w byte_9A26-Ani_obj22
0000A9D8 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A9DC 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A9E0 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A9E4                            		even
0000A9E4                            		even
0000A9E4                            
0000A9E4                            Ani_obj23:
0000A9E4                            	include "_anim\obj23.asm"
0000A9E4                            ; ---------------------------------------------------------------------------
0000A9E4                            ; Animation script - missile that Buzz Bomber throws
0000A9E4                            ; ---------------------------------------------------------------------------
0000A9E4 0000                       		dc.w byte_9A2E-Ani_obj23
0000A9E6 0000                       		dc.w byte_9A32-Ani_obj23
0000A9E8 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A9EC 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A9F0                            		even
0000A9F0                            		even
0000A9F0                            
0000A9F0                            ; ---------------------------------------------------------------------------
0000A9F0                            ; Sprite mappings - Buzz Bomber	enemy
0000A9F0                            ; ---------------------------------------------------------------------------
0000A9F0                            Map_obj22:
0000A9F0                            	include "_maps\obj22.asm"
0000A9F0                            Map_e97a:
0000A9F0 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A9F2 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A9F4 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A9F6 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A9F8 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A9FA 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A9FC 06                         Map_e97a_C: 	dc.b $6
0000A9FD F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000AA02 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000AA07 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000AA0C 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000AA11 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000AA16 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000AA1B 06                         Map_e97a_2B: 	dc.b $6
0000AA1C F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000AA21 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000AA26 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000AA2B 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000AA30 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000AA35 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000AA3A 07                         Map_e97a_4A: 	dc.b $7
0000AA3B 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000AA40 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000AA45 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000AA4A 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000AA4F 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000AA54 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000AA59 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000AA5E 07                         Map_e97a_6E: 	dc.b $7
0000AA5F 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000AA64 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000AA69 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000AA6E 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000AA73 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000AA78 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000AA7D F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000AA82 06                         Map_e97a_92: 	dc.b $6
0000AA83 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000AA88 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000AA8D 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000AA92 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000AA97 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000AA9C F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000AAA1 04                         Map_e97a_B1: 	dc.b $4
0000AAA2 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000AAA7 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000AAAC 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000AAB1 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000AAB6                            	even
0000AAB6                            	even
0000AAB6                            
0000AAB6                            ; ---------------------------------------------------------------------------
0000AAB6                            ; Sprite mappings - missile that Buzz Bomber throws
0000AAB6                            ; ---------------------------------------------------------------------------
0000AAB6                            Map_obj23:
0000AAB6                            	include "_maps\obj23.asm"
0000AAB6                            ; ---------------------------------------------------------------------------
0000AAB6                            ; Sprite mappings - missile that Buzz Bomber throws
0000AAB6                            ; ---------------------------------------------------------------------------
0000AAB6 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000AABA 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000AABE 01                         byte_9B0E:	dc.b 1
0000AABF F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000AAC4 01                         byte_9B14:	dc.b 1
0000AAC5 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000AACA 01                         byte_9B1A:	dc.b 1
0000AACB F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000AAD0 01                         byte_9B20:	dc.b 1
0000AAD1 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000AAD6                            		even
0000AAD6                            		even
0000AAD6                            
0000AAD6                            ; ===========================================================================
0000AAD6                            ; ---------------------------------------------------------------------------
0000AAD6                            ; Object 25 - rings
0000AAD6                            ; ---------------------------------------------------------------------------
0000AAD6                            
0000AAD6                            Obj25:					; XREF: Obj_Index
0000AAD6 7000                       		moveq	#0,d0
0000AAD8 1028 0024                  		move.b	$24(a0),d0
0000AADC 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000AAE0 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000AAE4                            ; ===========================================================================
0000AAE4 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000AAE6 0000                       		dc.w Obj25_Animate-Obj25_Index
0000AAE8 0000                       		dc.w Obj25_Collect-Obj25_Index
0000AAEA 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000AAEC 0000                       		dc.w Obj25_Delete-Obj25_Index
0000AAEE                            ; ---------------------------------------------------------------------------
0000AAEE                            ; Distances between rings (format: horizontal, vertical)
0000AAEE                            ; ---------------------------------------------------------------------------
0000AAEE 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000AAF0 1800                       		dc.b $18, 0		; horizontal normal
0000AAF2 2000                       		dc.b $20, 0		; horizontal wide
0000AAF4 0010                       		dc.b 0,	$10		; vertical tight
0000AAF6 0018                       		dc.b 0,	$18		; vertical normal
0000AAF8 0020                       		dc.b 0,	$20		; vertical wide
0000AAFA 1010                       		dc.b $10, $10		; diagonal
0000AAFC 1818                       		dc.b $18, $18
0000AAFE 2020                       		dc.b $20, $20
0000AB00 F010                       		dc.b $F0, $10
0000AB02 E818                       		dc.b $E8, $18
0000AB04 E020                       		dc.b $E0, $20
0000AB06 1008                       		dc.b $10, 8
0000AB08 1810                       		dc.b $18, $10
0000AB0A F008                       		dc.b $F0, 8
0000AB0C E810                       		dc.b $E8, $10
0000AB0E                            ; ===========================================================================
0000AB0E                            
0000AB0E                            Obj25_Main:				; XREF: Obj25_Index
0000AB0E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AB12 7000                       		moveq	#0,d0
0000AB14 1028 0023                  		move.b	$23(a0),d0
0000AB18 45F2 0002                  		lea	2(a2,d0.w),a2
0000AB1C 1812                       		move.b	(a2),d4
0000AB1E 1228 0028                  		move.b	$28(a0),d1
0000AB22 1001                       		move.b	d1,d0
0000AB24 0241 0007                  		andi.w	#7,d1
0000AB28 0C41 0007                  		cmpi.w	#7,d1
0000AB2C 6600                       		bne.s	loc_9B80
0000AB2E 7206                       		moveq	#6,d1
0000AB30                            
0000AB30                            loc_9B80:
0000AB30 4841                       		swap	d1
0000AB32 323C 0000                  		move.w	#0,d1
0000AB36 E808                       		lsr.b	#4,d0
0000AB38 D040                       		add.w	d0,d0
0000AB3A 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000AB3E 4885                       		ext.w	d5
0000AB40 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000AB44 4886                       		ext.w	d6
0000AB46 2248                       		movea.l	a0,a1
0000AB48 3428 0008                  		move.w	8(a0),d2
0000AB4C 3628 000C                  		move.w	$C(a0),d3
0000AB50 E20C                       		lsr.b	#1,d4
0000AB52 6500                       		bcs.s	loc_9C02
0000AB54 0892 0007                  		bclr	#7,(a2)
0000AB58 6000                       		bra.s	loc_9BBA
0000AB5A                            ; ===========================================================================
0000AB5A                            
0000AB5A                            Obj25_MakeRings:
0000AB5A 4841                       		swap	d1
0000AB5C E20C                       		lsr.b	#1,d4
0000AB5E 6500                       		bcs.s	loc_9C02
0000AB60 0892 0007                  		bclr	#7,(a2)
0000AB64 6100 0000                  		bsr.w	SingleObjLoad
0000AB68 6600                       		bne.s	loc_9C0E
0000AB6A                            
0000AB6A                            loc_9BBA:				; XREF: Obj25_Main
0000AB6A 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000AB6E 5429 0024                  		addq.b	#2,$24(a1)
0000AB72 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000AB76 3368 0008 0032             		move.w	8(a0),$32(a1)
0000AB7C 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000AB80 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000AB88 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000AB8E 137C 0004 0001             		move.b	#4,1(a1)
0000AB94 137C 0002 0018             		move.b	#2,$18(a1)
0000AB9A 137C 0047 0020             		move.b	#$47,$20(a1)
0000ABA0 137C 0008 0019             		move.b	#8,$19(a1)
0000ABA6 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000ABAC 1341 0034                  		move.b	d1,$34(a1)
0000ABB0                            
0000ABB0                            loc_9C02:
0000ABB0 5241                       		addq.w	#1,d1
0000ABB2 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000ABB4 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000ABB6 4841                       		swap	d1
0000ABB8 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000ABBC                            
0000ABBC                            loc_9C0E:
0000ABBC 0812 0000                  		btst	#0,(a2)
0000ABC0 6600 0000                  		bne.w	DeleteObject
0000ABC4                            
0000ABC4                            Obj25_Animate:				; XREF: Obj25_Index
0000ABC4 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000ABCA 6100 0000                  		bsr.w	DisplaySprite
0000ABCE 3028 0032                  		move.w	$32(a0),d0
0000ABD2 0240 FF80                  		andi.w	#$FF80,d0
0000ABD6 3238 F700                  		move.w	($FFFFF700).w,d1
0000ABDA 0441 0080                  		subi.w	#$80,d1
0000ABDE 0241 FF80                  		andi.w	#$FF80,d1
0000ABE2 9041                       		sub.w	d1,d0
0000ABE4 0C40 0280                  		cmpi.w	#$280,d0
0000ABE8 6200                       		bhi.s	Obj25_Delete
0000ABEA 4E75                       		rts	
0000ABEC                            ; ===========================================================================
0000ABEC                            
0000ABEC                            Obj25_Collect:				; XREF: Obj25_Index
0000ABEC 5428 0024                  		addq.b	#2,$24(a0)
0000ABF0 117C 0000 0020             		move.b	#0,$20(a0)
0000ABF6 117C 0001 0018             		move.b	#1,$18(a0)
0000ABFC 6100 0000                  		bsr.w	CollectRing
0000AC00 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AC04 7000                       		moveq	#0,d0
0000AC06 1028 0023                  		move.b	$23(a0),d0
0000AC0A 1228 0034                  		move.b	$34(a0),d1
0000AC0E 03F2 0002                  		bset	d1,2(a2,d0.w)
0000AC12                            
0000AC12                            Obj25_Sparkle:				; XREF: Obj25_Index
0000AC12 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000AC18 6100 0000                  		bsr.w	AnimateSprite
0000AC1C 6000 0000                  		bra.w	DisplaySprite
0000AC20                            ; ===========================================================================
0000AC20                            
0000AC20                            Obj25_Delete:				; XREF: Obj25_Index
0000AC20 6000 0000                  		bra.w	DeleteObject
0000AC24                            
0000AC24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AC24                            
0000AC24                            
0000AC24                            CollectRing:				; XREF: Obj25_Collect
0000AC24 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000AC28 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000AC2E 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000AC32 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000AC38 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000AC3A 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000AC40 6700                       		beq.s	loc_9CA4
0000AC42 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000AC48 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000AC4A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000AC50 6600                       		bne.s	Obj25_PlaySnd
0000AC52                            
0000AC52                            loc_9CA4:
0000AC52 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AC56 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AC5A 303C 0088                  		move.w	#$88,d0		; play extra life music
0000AC5E                            
0000AC5E                            Obj25_PlaySnd:
0000AC5E 4EF9 0000 1C82             		jmp	(PlaySound_Special).l
0000AC64                            ; End of function CollectRing
0000AC64                            
0000AC64                            ; ===========================================================================
0000AC64                            ; ---------------------------------------------------------------------------
0000AC64                            ; Object 37 - rings flying out of Sonic	when he's hit
0000AC64                            ; ---------------------------------------------------------------------------
0000AC64                            
0000AC64                            Obj37:					; XREF: Obj_Index
0000AC64 7000                       		moveq	#0,d0
0000AC66 1028 0024                  		move.b	$24(a0),d0
0000AC6A 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000AC6E 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000AC72                            ; ===========================================================================
0000AC72 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000AC74 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000AC76 0000                       		dc.w Obj37_Collect-Obj37_Index
0000AC78 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000AC7A 0000                       		dc.w Obj37_Delete-Obj37_Index
0000AC7C                            ; ===========================================================================
0000AC7C                            
0000AC7C                            Obj37_CountRings:			; XREF: Obj37_Index
0000AC7C 2248                       		movea.l	a0,a1
0000AC7E 7A00                       		moveq	#0,d5
0000AC80 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000AC84 7020                       		moveq	#32,d0
0000AC86 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000AC88 6500                       		bcs.s	loc_9CDE	; if not, branch
0000AC8A 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000AC8C                            
0000AC8C                            loc_9CDE:
0000AC8C 5345                       		subq.w	#1,d5
0000AC8E 383C 0288                  		move.w	#$288,d4
0000AC92 6000                       		bra.s	Obj37_MakeRings
0000AC94                            ; ===========================================================================
0000AC94                            
0000AC94                            Obj37_Loop:
0000AC94 6100 0000                  		bsr.w	SingleObjLoad
0000AC98 6600 0000                  		bne.w	Obj37_ResetCounter
0000AC9C                            
0000AC9C                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000AC9C 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000ACA0 5429 0024                  		addq.b	#2,$24(a1)
0000ACA4 137C 0008 0016             		move.b	#8,$16(a1)
0000ACAA 137C 0008 0017             		move.b	#8,$17(a1)
0000ACB0 3368 0008 0008             		move.w	8(a0),8(a1)
0000ACB6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ACBC 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000ACC4 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000ACCA 137C 0004 0001             		move.b	#4,1(a1)
0000ACD0 137C 0003 0018             		move.b	#3,$18(a1)
0000ACD6 137C 0047 0020             		move.b	#$47,$20(a1)
0000ACDC 137C 0008 0019             		move.b	#8,$19(a1)
0000ACE2 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000ACE8 4A44                       		tst.w	d4
0000ACEA 6B00                       		bmi.s	loc_9D62
0000ACEC 3004                       		move.w	d4,d0
0000ACEE 6100 8734                  		bsr.w	CalcSine
0000ACF2 3404                       		move.w	d4,d2
0000ACF4 E04A                       		lsr.w	#8,d2
0000ACF6 E560                       		asl.w	d2,d0
0000ACF8 E561                       		asl.w	d2,d1
0000ACFA 3400                       		move.w	d0,d2
0000ACFC 3601                       		move.w	d1,d3
0000ACFE 0604 0010                  		addi.b	#$10,d4
0000AD02 6400                       		bcc.s	loc_9D62
0000AD04 0444 0080                  		subi.w	#$80,d4
0000AD08 6400                       		bcc.s	loc_9D62
0000AD0A 383C 0288                  		move.w	#$288,d4
0000AD0E                            
0000AD0E                            loc_9D62:
0000AD0E 3342 0010                  		move.w	d2,$10(a1)
0000AD12 3343 0012                  		move.w	d3,$12(a1)
0000AD16 4442                       		neg.w	d2
0000AD18 4444                       		neg.w	d4
0000AD1A 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000AD1E                            
0000AD1E                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000AD1E 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000AD24 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000AD2A 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000AD30 303C 00C6                  		move.w	#$C6,d0
0000AD34 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000AD3A                            
0000AD3A                            Obj37_Bounce:				; XREF: Obj37_Index
0000AD3A 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000AD40 6100 0000                  		bsr.w	SpeedToPos
0000AD44 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AD4A 6B00                       		bmi.s	Obj37_ChkDel
0000AD4C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000AD50 D007                       		add.b	d7,d0
0000AD52 0200 0003                  		andi.b	#3,d0
0000AD56 6600                       		bne.s	Obj37_ChkDel
0000AD58 4EB9 0000 0000             		jsr	ObjHitFloor
0000AD5E 4A41                       		tst.w	d1
0000AD60 6A00                       		bpl.s	Obj37_ChkDel
0000AD62 D368 000C                  		add.w	d1,$C(a0)
0000AD66 3028 0012                  		move.w	$12(a0),d0
0000AD6A E440                       		asr.w	#2,d0
0000AD6C 9168 0012                  		sub.w	d0,$12(a0)
0000AD70 4468 0012                  		neg.w	$12(a0)
0000AD74                            
0000AD74                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000AD74 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000AD78 6700                       		beq.s	Obj37_Delete
0000AD7A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AD7E 0640 00E0                  		addi.w	#$E0,d0
0000AD82 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000AD86 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000AD88 6000 0000                  		bra.w	DisplaySprite
0000AD8C                            ; ===========================================================================
0000AD8C                            
0000AD8C                            Obj37_Collect:				; XREF: Obj37_Index
0000AD8C 5428 0024                  		addq.b	#2,$24(a0)
0000AD90 117C 0000 0020             		move.b	#0,$20(a0)
0000AD96 117C 0001 0018             		move.b	#1,$18(a0)
0000AD9C 6100 FE86                  		bsr.w	CollectRing
0000ADA0                            
0000ADA0                            Obj37_Sparkle:				; XREF: Obj37_Index
0000ADA0 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000ADA6 6100 0000                  		bsr.w	AnimateSprite
0000ADAA 6000 0000                  		bra.w	DisplaySprite
0000ADAE                            ; ===========================================================================
0000ADAE                            
0000ADAE                            Obj37_Delete:				; XREF: Obj37_Index
0000ADAE 6000 0000                  		bra.w	DeleteObject
0000ADB2                            ; ===========================================================================
0000ADB2                            ; ---------------------------------------------------------------------------
0000ADB2                            ; Object 4B - giant ring for entry to special stage
0000ADB2                            ; ---------------------------------------------------------------------------
0000ADB2                            
0000ADB2                            Obj4B:					; XREF: Obj_Index
0000ADB2 7000                       		moveq	#0,d0
0000ADB4 1028 0024                  		move.b	$24(a0),d0
0000ADB8 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000ADBC 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000ADC0                            ; ===========================================================================
0000ADC0 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000ADC2 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000ADC4 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000ADC6 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000ADC8                            ; ===========================================================================
0000ADC8                            
0000ADC8                            Obj4B_Main:				; XREF: Obj4B_Index
0000ADC8 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000ADD0 317C 2400 0002             		move.w	#$2400,2(a0)
0000ADD6 0028 0004 0001             		ori.b	#4,1(a0)
0000ADDC 117C 0040 0019             		move.b	#$40,$19(a0)
0000ADE2 4A28 0001                  		tst.b	1(a0)
0000ADE6 6A00                       		bpl.s	Obj4B_Animate
0000ADE8 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000ADEE 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000ADF2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000ADF8 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000ADFA 4E75                       		rts	
0000ADFC                            ; ===========================================================================
0000ADFC                            
0000ADFC                            Obj4B_Okay:				; XREF: Obj4B_Main
0000ADFC 5428 0024                  		addq.b	#2,$24(a0)
0000AE00 117C 0002 0018             		move.b	#2,$18(a0)
0000AE06 117C 0052 0020             		move.b	#$52,$20(a0)
0000AE0C 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000AE12                            
0000AE12                            Obj4B_Animate:				; XREF: Obj4B_Index
0000AE12 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000AE18 3028 0008                  		move.w	8(a0),d0
0000AE1C 0240 FF80                  		andi.w	#$FF80,d0
0000AE20 3238 F700                  		move.w	($FFFFF700).w,d1
0000AE24 0441 0080                  		subi.w	#$80,d1
0000AE28 0241 FF80                  		andi.w	#$FF80,d1
0000AE2C 9041                       		sub.w	d1,d0
0000AE2E 0C40 0280                  		cmpi.w	#$280,d0
0000AE32 6200 0000                  		bhi.w	DeleteObject
0000AE36 6000 0000                  		bra.w	DisplaySprite
0000AE3A                            ; ===========================================================================
0000AE3A                            
0000AE3A                            Obj4B_Collect:				; XREF: Obj4B_Index
0000AE3A 5528 0024                  		subq.b	#2,$24(a0)
0000AE3E 117C 0000 0020             		move.b	#0,$20(a0)
0000AE44 6100 0000                  		bsr.w	SingleObjLoad
0000AE48 6600 0000                  		bne.w	Obj4B_PlaySnd
0000AE4C 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000AE50 3368 0008 0008             		move.w	8(a0),8(a1)
0000AE56 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AE5C 2348 003C                  		move.l	a0,$3C(a1)
0000AE60 3038 D008                  		move.w	($FFFFD008).w,d0
0000AE64 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000AE68 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000AE6A 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000AE70                            
0000AE70                            Obj4B_PlaySnd:
0000AE70 303C 00C3                  		move.w	#$C3,d0
0000AE74 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000AE7A 6096                       		bra.s	Obj4B_Animate
0000AE7C                            ; ===========================================================================
0000AE7C                            
0000AE7C                            Obj4B_Delete:				; XREF: Obj4B_Index
0000AE7C 6000 0000                  		bra.w	DeleteObject
0000AE80                            ; ===========================================================================
0000AE80                            ; ---------------------------------------------------------------------------
0000AE80                            ; Object 7C - flash effect when	you collect the	giant ring
0000AE80                            ; ---------------------------------------------------------------------------
0000AE80                            
0000AE80                            Obj7C:					; XREF: Obj_Index
0000AE80 7000                       		moveq	#0,d0
0000AE82 1028 0024                  		move.b	$24(a0),d0
0000AE86 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000AE8A 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000AE8E                            ; ===========================================================================
0000AE8E 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000AE90 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000AE92 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000AE94                            ; ===========================================================================
0000AE94                            
0000AE94                            Obj7C_Main:				; XREF: Obj7C_Index
0000AE94 5428 0024                  		addq.b	#2,$24(a0)
0000AE98 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000AEA0 317C 2462 0002             		move.w	#$2462,2(a0)
0000AEA6 0028 0004 0001             		ori.b	#4,1(a0)
0000AEAC 117C 0000 0018             		move.b	#0,$18(a0)
0000AEB2 117C 0020 0019             		move.b	#$20,$19(a0)
0000AEB8 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000AEBE                            
0000AEBE                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000AEBE 6100                       		bsr.s	Obj7C_Collect
0000AEC0 3028 0008                  		move.w	8(a0),d0
0000AEC4 0240 FF80                  		andi.w	#$FF80,d0
0000AEC8 3238 F700                  		move.w	($FFFFF700).w,d1
0000AECC 0441 0080                  		subi.w	#$80,d1
0000AED0 0241 FF80                  		andi.w	#$FF80,d1
0000AED4 9041                       		sub.w	d1,d0
0000AED6 0C40 0280                  		cmpi.w	#$280,d0
0000AEDA 6200 0000                  		bhi.w	DeleteObject
0000AEDE 6000 0000                  		bra.w	DisplaySprite
0000AEE2                            
0000AEE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEE2                            
0000AEE2                            
0000AEE2                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000AEE2 5328 001E                  		subq.b	#1,$1E(a0)
0000AEE6 6A00                       		bpl.s	locret_9F76
0000AEE8 117C 0001 001E             		move.b	#1,$1E(a0)
0000AEEE 5228 001A                  		addq.b	#1,$1A(a0)
0000AEF2 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000AEF8 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000AEFA 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000AF00 6600                       		bne.s	locret_9F76	; if not, branch
0000AF02 2268 003C                  		movea.l	$3C(a0),a1
0000AF06 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000AF0C 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000AF12 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000AF18 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000AF1C 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000AF20                            
0000AF20                            locret_9F76:
0000AF20 4E75                       		rts	
0000AF22                            ; ===========================================================================
0000AF22                            
0000AF22                            Obj7C_End:				; XREF: Obj7C_Collect
0000AF22 5428 0024                  		addq.b	#2,$24(a0)
0000AF26 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000AF2C 588F                       		addq.l	#4,sp
0000AF2E 4E75                       		rts	
0000AF30                            ; End of function Obj7C_Collect
0000AF30                            
0000AF30                            ; ===========================================================================
0000AF30                            
0000AF30                            Obj7C_Delete:				; XREF: Obj7C_Index
0000AF30 6000 0000                  		bra.w	DeleteObject
0000AF34                            ; ===========================================================================
0000AF34                            Ani_obj25:
0000AF34                            	include "_anim\obj25.asm"
0000AF34                            ; ---------------------------------------------------------------------------
0000AF34                            ; Animation script - ring
0000AF34                            ; ---------------------------------------------------------------------------
0000AF34 0000                       		dc.w byte_9F8C-Ani_obj25
0000AF36 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000AF3C                            		even
0000AF3C                            		even
0000AF3C                            
0000AF3C                            ; ---------------------------------------------------------------------------
0000AF3C                            ; Sprite mappings - rings
0000AF3C                            ; ---------------------------------------------------------------------------
0000AF3C                            Map_obj25:
0000AF3C                            	include "_maps\obj25.asm"
0000AF3C                            ; ---------------------------------------------------------------------------
0000AF3C                            ; Sprite mappings - rings
0000AF3C                            ; ---------------------------------------------------------------------------
0000AF3C 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000AF40 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000AF44 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000AF48 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000AF4C 01                         byte_9FA2:	dc.b 1
0000AF4D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000AF52 01                         byte_9FA8:	dc.b 1
0000AF53 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000AF58 01                         byte_9FAE:	dc.b 1
0000AF59 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000AF5E 01                         byte_9FB4:	dc.b 1
0000AF5F F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000AF64 01                         byte_9FBA:	dc.b 1
0000AF65 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000AF6A 01                         byte_9FC0:	dc.b 1
0000AF6B F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000AF70 01                         byte_9FC6:	dc.b 1
0000AF71 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000AF76 01                         byte_9FCC:	dc.b 1
0000AF77 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000AF7C                            		even
0000AF7C                            		even
0000AF7C                            
0000AF7C                            ; ---------------------------------------------------------------------------
0000AF7C                            ; Sprite mappings - giant ring
0000AF7C                            ; ---------------------------------------------------------------------------
0000AF7C                            Map_obj4B:
0000AF7C                            	include "_maps\obj4B.asm"
0000AF7C                            ; ---------------------------------------------------------------------------
0000AF7C                            ; Sprite mappings - giant ring
0000AF7C                            ; ---------------------------------------------------------------------------
0000AF7C 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000AF80 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000AF84 0A                         byte_9FDA:	dc.b $A
0000AF85 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000AF8A E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000AF8F E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000AF94 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000AF99 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000AF9E F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000AFA3 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000AFA8 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000AFAD 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000AFB2 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000AFB7 08                         byte_A00D:	dc.b 8
0000AFB8 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000AFBD E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000AFC2 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000AFC7 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000AFCC F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000AFD1 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000AFD6 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000AFDB 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000AFE0 04                         byte_A036:	dc.b 4
0000AFE1 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000AFE6 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000AFEB 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000AFF0 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000AFF5 08                         byte_A04B:	dc.b 8
0000AFF6 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000AFFB E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000B000 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000B005 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000B00A F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000B00F 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000B014 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000B019 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000B01E                            		even
0000B01E                            		even
0000B01E                            
0000B01E                            ; ---------------------------------------------------------------------------
0000B01E                            ; Sprite mappings - flash effect when you collect the giant ring
0000B01E                            ; ---------------------------------------------------------------------------
0000B01E                            Map_obj7C:
0000B01E                            	include "_maps\obj7C.asm"
0000B01E                            ; ---------------------------------------------------------------------------
0000B01E                            ; Sprite mappings - flash effect when you collect the giant ring
0000B01E                            ; ---------------------------------------------------------------------------
0000B01E 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000B022 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000B026 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000B02A 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000B02E 02                         byte_A084:	dc.b 2
0000B02F E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000B034 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000B039 04                         byte_A08F:	dc.b 4
0000B03A E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000B03F E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000B044 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000B049 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000B04E 04                         byte_A0A4:	dc.b 4
0000B04F E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000B054 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000B059 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000B05E 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000B063 04                         byte_A0B9:	dc.b 4
0000B064 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000B069 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000B06E 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000B073 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000B078 04                         byte_A0CE:	dc.b 4
0000B079 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000B07E E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000B083 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000B088 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000B08D 04                         byte_A0E3:	dc.b 4
0000B08E E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000B093 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000B098 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000B09D 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000B0A2 02                         byte_A0F8:	dc.b 2
0000B0A3 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000B0A8 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000B0AD 04                         byte_A103:	dc.b 4
0000B0AE E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000B0B3 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000B0B8 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000B0BD 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000B0C2                            		even
0000B0C2                            		even
0000B0C2                            
0000B0C2                            ; ===========================================================================
0000B0C2                            ; ---------------------------------------------------------------------------
0000B0C2                            ; Object 26 - monitors
0000B0C2                            ; ---------------------------------------------------------------------------
0000B0C2                            
0000B0C2                            Obj26:					; XREF: Obj_Index
0000B0C2 7000                       		moveq	#0,d0
0000B0C4 1028 0024                  		move.b	$24(a0),d0
0000B0C8 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000B0CC 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000B0D0                            ; ===========================================================================
0000B0D0 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000B0D2 0000                       		dc.w Obj26_Solid-Obj26_Index
0000B0D4 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000B0D6 0000                       		dc.w Obj26_Animate-Obj26_Index
0000B0D8 0000                       		dc.w Obj26_Display-Obj26_Index
0000B0DA                            ; ===========================================================================
0000B0DA                            
0000B0DA                            Obj26_Main:				; XREF: Obj26_Index
0000B0DA 5428 0024                  		addq.b	#2,$24(a0)
0000B0DE 117C 000E 0016             		move.b	#$E,$16(a0)
0000B0E4 117C 000E 0017             		move.b	#$E,$17(a0)
0000B0EA 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000B0F2 317C 0680 0002             		move.w	#$680,2(a0)
0000B0F8 117C 0004 0001             		move.b	#4,1(a0)
0000B0FE 117C 0003 0018             		move.b	#3,$18(a0)
0000B104 117C 000F 0019             		move.b	#$F,$19(a0)
0000B10A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B10E 7000                       		moveq	#0,d0
0000B110 1028 0023                  		move.b	$23(a0),d0
0000B114 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000B11A 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000B120 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000B122 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000B128 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000B12E 4E75                       		rts	
0000B130                            ; ===========================================================================
0000B130                            
0000B130                            Obj26_NotBroken:			; XREF: Obj26_Main
0000B130 117C 0046 0020             		move.b	#$46,$20(a0)
0000B136 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000B13C                            
0000B13C                            Obj26_Solid:				; XREF: Obj26_Index
0000B13C 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000B140 6700                       		beq.s	loc_A1EC	; if not, branch
0000B142 5500                       		subq.b	#2,d0
0000B144 6600                       		bne.s	Obj26_Fall
0000B146 7200                       		moveq	#0,d1
0000B148 1228 0019                  		move.b	$19(a0),d1
0000B14C 0641 000B                  		addi.w	#$B,d1
0000B150 6100 D37C                  		bsr.w	ExitPlatform
0000B154 0829 0003 0022             		btst	#3,$22(a1)
0000B15A 6600 0000                  		bne.w	loc_A1BC
0000B15E 4228 0025                  		clr.b	$25(a0)
0000B162 6000 0000                  		bra.w	Obj26_Animate
0000B166                            ; ===========================================================================
0000B166                            
0000B166                            loc_A1BC:				; XREF: Obj26_Solid
0000B166 363C 0010                  		move.w	#$10,d3
0000B16A 3428 0008                  		move.w	8(a0),d2
0000B16E 6100 D8BC                  		bsr.w	MvSonicOnPtfm
0000B172 6000 0000                  		bra.w	Obj26_Animate
0000B176                            ; ===========================================================================
0000B176                            
0000B176                            Obj26_Fall:				; XREF: Obj26_Solid
0000B176 6100 0000                  		bsr.w	ObjectFall
0000B17A 4EB9 0000 0000             		jsr	ObjHitFloor
0000B180 4A41                       		tst.w	d1
0000B182 6A00 0000                  		bpl.w	Obj26_Animate
0000B186 D368 000C                  		add.w	d1,$C(a0)
0000B18A 4268 0012                  		clr.w	$12(a0)
0000B18E 4228 0025                  		clr.b	$25(a0)
0000B192 6000 0000                  		bra.w	Obj26_Animate
0000B196                            ; ===========================================================================
0000B196                            
0000B196                            loc_A1EC:				; XREF: Obj26_Solid
0000B196 323C 001A                  		move.w	#$1A,d1
0000B19A 343C 000F                  		move.w	#$F,d2
0000B19E 6100 0000                  		bsr.w	Obj26_SolidSides
0000B1A2 6700 0000                  		beq.w	loc_A25C
0000B1A6 4A69 0012                  		tst.w	$12(a1)
0000B1AA 6B00                       		bmi.s	loc_A20A
0000B1AC 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000B1B2 6700                       		beq.s	loc_A25C	; if yes, branch
0000B1B4                            
0000B1B4                            loc_A20A:
0000B1B4 4A41                       		tst.w	d1
0000B1B6 6A00                       		bpl.s	loc_A220
0000B1B8 9769 000C                  		sub.w	d3,$C(a1)
0000B1BC 6100 D1FE                  		bsr.w	loc_74AE
0000B1C0 117C 0002 0025             		move.b	#2,$25(a0)
0000B1C6 6000 0000                  		bra.w	Obj26_Animate
0000B1CA                            ; ===========================================================================
0000B1CA                            
0000B1CA                            loc_A220:
0000B1CA 4A40                       		tst.w	d0
0000B1CC 6700 0000                  		beq.w	loc_A246
0000B1D0 6B00                       		bmi.s	loc_A230
0000B1D2 4A69 0010                  		tst.w	$10(a1)
0000B1D6 6B00                       		bmi.s	loc_A246
0000B1D8 6000                       		bra.s	loc_A236
0000B1DA                            ; ===========================================================================
0000B1DA                            
0000B1DA                            loc_A230:
0000B1DA 4A69 0010                  		tst.w	$10(a1)
0000B1DE 6A00                       		bpl.s	loc_A246
0000B1E0                            
0000B1E0                            loc_A236:
0000B1E0 9169 0008                  		sub.w	d0,8(a1)
0000B1E4 337C 0000 0014             		move.w	#0,$14(a1)
0000B1EA 337C 0000 0010             		move.w	#0,$10(a1)
0000B1F0                            
0000B1F0                            loc_A246:
0000B1F0 0829 0001 0022             		btst	#1,$22(a1)
0000B1F6 6600                       		bne.s	loc_A26A
0000B1F8 08E9 0005 0022             		bset	#5,$22(a1)
0000B1FE 08E8 0005 0022             		bset	#5,$22(a0)
0000B204 6000                       		bra.s	Obj26_Animate
0000B206                            ; ===========================================================================
0000B206                            
0000B206                            loc_A25C:
0000B206 0828 0005 0022             		btst	#5,$22(a0)
0000B20C 6700                       		beq.s	Obj26_Animate
0000B20E 337C 0001 001C             		move.w	#1,$1C(a1)
0000B214                            
0000B214                            loc_A26A:
0000B214 08A8 0005 0022             		bclr	#5,$22(a0)
0000B21A 08A9 0005 0022             		bclr	#5,$22(a1)
0000B220                            
0000B220                            Obj26_Animate:				; XREF: Obj26_Index
0000B220 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000B226 6100 0000                  		bsr.w	AnimateSprite
0000B22A                            
0000B22A                            Obj26_Display:				; XREF: Obj26_Index
0000B22A 6100 0000                  		bsr.w	DisplaySprite
0000B22E 3028 0008                  		move.w	8(a0),d0
0000B232 0240 FF80                  		andi.w	#$FF80,d0
0000B236 3238 F700                  		move.w	($FFFFF700).w,d1
0000B23A 0441 0080                  		subi.w	#$80,d1
0000B23E 0241 FF80                  		andi.w	#$FF80,d1
0000B242 9041                       		sub.w	d1,d0
0000B244 0C40 0280                  		cmpi.w	#$280,d0
0000B248 6200 0000                  		bhi.w	DeleteObject
0000B24C 4E75                       		rts	
0000B24E                            ; ===========================================================================
0000B24E                            
0000B24E                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000B24E 5428 0024                  		addq.b	#2,$24(a0)
0000B252 117C 0000 0020             		move.b	#0,$20(a0)
0000B258 6100 0000                  		bsr.w	SingleObjLoad
0000B25C 6600                       		bne.s	Obj26_Explode
0000B25E 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000B262 3368 0008 0008             		move.w	8(a0),8(a1)
0000B268 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B26E 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000B274 7400                       		moveq	#0,d2	; GMZ
0000B276 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000B278                            
0000B278                            Obj26_Explode:
0000B278 6100 0000                  		bsr.w	SingleObjLoad
0000B27C 6600                       		bne.s	Obj26_SetBroken
0000B27E 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000B282 5429 0024                  		addq.b	#2,$24(a1)
0000B286 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000B28A 3368 0008 0008             		move.w	8(a0),8(a1)
0000B290 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B296                            
0000B296                            Obj26_NextExplosion:
0000B296 5802                       		addq.b	#4,d2
0000B298 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000B29C                            
0000B29C                            Obj26_SetBroken:
0000B29C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B2A0 7000                       		moveq	#0,d0
0000B2A2 1028 0023                  		move.b	$23(a0),d0
0000B2A6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000B2AC 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000B2B2 6000 0000                  		bra.w	DisplaySprite
0000B2B6                            ; ===========================================================================
0000B2B6                            ; ---------------------------------------------------------------------------
0000B2B6                            ; Object 2E - contents of monitors
0000B2B6                            ; ---------------------------------------------------------------------------
0000B2B6                            
0000B2B6                            Obj2E:					; XREF: Obj_Index
0000B2B6 7000                       		moveq	#0,d0
0000B2B8 1028 0024                  		move.b	$24(a0),d0
0000B2BC 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000B2C0 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000B2C4 6000 0000                  		bra.w	DisplaySprite
0000B2C8                            ; ===========================================================================
0000B2C8 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000B2CA 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000B2CC 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000B2CE                            ; ===========================================================================
0000B2CE                            
0000B2CE                            Obj2E_Main:				; XREF: Obj2E_Index
0000B2CE 5428 0024                  		addq.b	#2,$24(a0)
0000B2D2 317C 0680 0002             		move.w	#$680,2(a0)
0000B2D8 117C 0024 0001             		move.b	#$24,1(a0)
0000B2DE 117C 0003 0018             		move.b	#3,$18(a0)
0000B2E4 117C 0008 0019             		move.b	#8,$19(a0)
0000B2EA 317C FD00 0012             		move.w	#-$300,$12(a0)
0000B2F0 7000                       		moveq	#0,d0
0000B2F2 1028 001C                  		move.b	$1C(a0),d0
0000B2F6 5400                       		addq.b	#2,d0
0000B2F8 1140 001A                  		move.b	d0,$1A(a0)
0000B2FC 227C 0000 0000             		movea.l	#Map_obj26,a1
0000B302 D000                       		add.b	d0,d0
0000B304 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000B308 5249                       		addq.w	#1,a1
0000B30A 2149 0004                  		move.l	a1,4(a0)
0000B30E                            
0000B30E                            Obj2E_Move:				; XREF: Obj2E_Index
0000B30E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000B312 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000B316 6100 0000                  		bsr.w	SpeedToPos
0000B31A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000B320 4E75                       		rts	
0000B322                            ; ===========================================================================
0000B322                            
0000B322                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000B322 5428 0024                  		addq.b	#2,$24(a0)
0000B326 317C 001D 001E             		move.w	#29,$1E(a0)
0000B32C 1028 001C                  		move.b	$1C(a0),d0
0000B330 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000B334 6600                       		bne.s	Obj2E_ChkSonic
0000B336 4E75                       		rts			; Eggman monitor does nothing
0000B338                            ; ===========================================================================
0000B338                            
0000B338                            Obj2E_ChkSonic:
0000B338 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000B33C 6600                       		bne.s	Obj2E_ChkShoes
0000B33E                            
0000B33E                            ExtraLife:
0000B33E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B342 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B346 303C 0088                  		move.w	#$88,d0
0000B34A 4EF9 0000 1C7C             		jmp	(PlaySound).l	; play extra life music
0000B350                            ; ===========================================================================
0000B350                            
0000B350                            Obj2E_ChkShoes:
0000B350 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000B354 6600                       		bne.s	Obj2E_ChkShield
0000B356 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000B35C 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000B362 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000B368 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000B36E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000B374 303C 00E2                  		move.w	#$E2,d0
0000B378 4EF9 0000 1C7C             		jmp	(PlaySound).l	; Speed	up the music
0000B37E                            ; ===========================================================================
0000B37E                            
0000B37E                            Obj2E_ChkShield:
0000B37E 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000B382 6600                       		bne.s	Obj2E_ChkInvinc
0000B384 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000B38A 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000B390 303C 00AF                  		move.w	#$AF,d0
0000B394 4EF9 0000 1C7C             		jmp	(PlaySound).l	; play shield sound
0000B39A                            ; ===========================================================================
0000B39A                            
0000B39A                            Obj2E_ChkInvinc:
0000B39A 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000B39E 6600                       		bne.s	Obj2E_ChkRings
0000B3A0 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000B3A6 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000B3AC 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000B3B2 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000B3B8 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000B3BE 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000B3C4 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000B3CA 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000B3D0 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000B3D6 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000B3DC 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000B3E0 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000B3E2 303C 0087                  		move.w	#$87,d0
0000B3E6 4EF9 0000 1C7C             		jmp	(PlaySound).l	; play invincibility music
0000B3EC                            ; ===========================================================================
0000B3EC                            
0000B3EC                            Obj2E_NoMusic:
0000B3EC 4E75                       		rts	
0000B3EE                            ; ===========================================================================
0000B3EE                            
0000B3EE                            Obj2E_ChkRings:
0000B3EE 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000B3F2 6600                       		bne.s	Obj2E_ChkS
0000B3F4 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000B3FA 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000B400 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000B406 6500                       		bcs.s	Obj2E_RingSound
0000B408 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000B40E 6700 FF2E                  		beq.w	ExtraLife
0000B412 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000B418 6500                       		bcs.s	Obj2E_RingSound
0000B41A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000B420 6700 FF1C                  		beq.w	ExtraLife
0000B424                            
0000B424                            Obj2E_RingSound:
0000B424 303C 00B5                  		move.w	#$B5,d0
0000B428 4EF9 0000 1C7C             		jmp	(PlaySound).l	; play ring sound
0000B42E                            ; ===========================================================================
0000B42E                            
0000B42E                            Obj2E_ChkS:
0000B42E 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000B432 6600                       		bne.s	Obj2E_ChkEnd
0000B434                            		; nop	
0000B434 7201                       		moveq	#1,d1
0000B436 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000B43A                            
0000B43A                            Obj2E_ChkEnd:
0000B43A 4E75                       		rts			; 'S' and goggles monitors do nothing
0000B43C                            ; ===========================================================================
0000B43C                            
0000B43C                            Obj2E_Delete:				; XREF: Obj2E_Index
0000B43C 5368 001E                  		subq.w	#1,$1E(a0)
0000B440 6B00 0000                  		bmi.w	DeleteObject
0000B444 4E75                       		rts	
0000B446                            ; ---------------------------------------------------------------------------
0000B446                            ; Subroutine to	make the sides of a monitor solid
0000B446                            ; ---------------------------------------------------------------------------
0000B446                            
0000B446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B446                            
0000B446                            
0000B446                            Obj26_SolidSides:			; XREF: loc_A1EC
0000B446 43F8 D000                  		lea	($FFFFD000).w,a1
0000B44A 3029 0008                  		move.w	8(a1),d0
0000B44E 9068 0008                  		sub.w	8(a0),d0
0000B452 D041                       		add.w	d1,d0
0000B454 6B00                       		bmi.s	loc_A4E6
0000B456 3601                       		move.w	d1,d3
0000B458 D643                       		add.w	d3,d3
0000B45A B043                       		cmp.w	d3,d0
0000B45C 6200                       		bhi.s	loc_A4E6
0000B45E 1629 0016                  		move.b	$16(a1),d3
0000B462 4883                       		ext.w	d3
0000B464 D443                       		add.w	d3,d2
0000B466 3629 000C                  		move.w	$C(a1),d3
0000B46A 9668 000C                  		sub.w	$C(a0),d3
0000B46E D642                       		add.w	d2,d3
0000B470 6B00                       		bmi.s	loc_A4E6
0000B472 D442                       		add.w	d2,d2
0000B474 B642                       		cmp.w	d2,d3
0000B476 6400                       		bcc.s	loc_A4E6
0000B478 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000B47C 6B00                       		bmi.s	loc_A4E6
0000B47E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000B484 6400                       		bcc.s	loc_A4E6
0000B486 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B48A 6600                       		bne.s	loc_A4E6
0000B48C B240                       		cmp.w	d0,d1
0000B48E 6400                       		bcc.s	loc_A4DC
0000B490 D241                       		add.w	d1,d1
0000B492 9041                       		sub.w	d1,d0
0000B494                            
0000B494                            loc_A4DC:
0000B494 0C43 0010                  		cmpi.w	#$10,d3
0000B498 6500                       		bcs.s	loc_A4EA
0000B49A                            
0000B49A                            loc_A4E2:
0000B49A 7201                       		moveq	#1,d1
0000B49C 4E75                       		rts	
0000B49E                            ; ===========================================================================
0000B49E                            
0000B49E                            loc_A4E6:
0000B49E 7200                       		moveq	#0,d1
0000B4A0 4E75                       		rts	
0000B4A2                            ; ===========================================================================
0000B4A2                            
0000B4A2                            loc_A4EA:
0000B4A2 7200                       		moveq	#0,d1
0000B4A4 1228 0019                  		move.b	$19(a0),d1
0000B4A8 5841                       		addq.w	#4,d1
0000B4AA 3401                       		move.w	d1,d2
0000B4AC D442                       		add.w	d2,d2
0000B4AE D269 0008                  		add.w	8(a1),d1
0000B4B2 9268 0008                  		sub.w	8(a0),d1
0000B4B6 6BE2                       		bmi.s	loc_A4E2
0000B4B8 B242                       		cmp.w	d2,d1
0000B4BA 64DE                       		bcc.s	loc_A4E2
0000B4BC 72FF                       		moveq	#-1,d1
0000B4BE 4E75                       		rts	
0000B4C0                            ; End of function Obj26_SolidSides
0000B4C0                            
0000B4C0                            ; ===========================================================================
0000B4C0                            Ani_obj26:
0000B4C0                            	include "_anim\obj26.asm"
0000B4C0                            ; ---------------------------------------------------------------------------
0000B4C0                            ; Animation script - monitors
0000B4C0                            ; ---------------------------------------------------------------------------
0000B4C0 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000B4C6 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000B4CC 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000B4D2 0000                       		dc.w byte_A582-Ani_obj26
0000B4D4 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B4DA 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B4E6 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B4F2 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B4FE 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B50A 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B516 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B522 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B52E 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B53A 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B542                            		even
0000B542                            		even
0000B542                            
0000B542                            ; ---------------------------------------------------------------------------
0000B542                            ; Sprite mappings - monitors
0000B542                            ; ---------------------------------------------------------------------------
0000B542                            Map_obj26:
0000B542                            	include "_maps\obj26.asm"
0000B542                            ; ================================================================================
0000B542                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000B542                            ; ================================================================================
0000B542                            
0000B542                            DATAY1U343IF3L:
0000B542 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000B546 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000B54A 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000B54E 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000B552 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000B556 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000B55A 05                         DATAY1U343IF3L_0: dc.b $5
0000B55B E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B560 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B565 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B56A 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B56F 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B574 06                         DATAY1U343IF3L_1: dc.b $6
0000B575 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000B57A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B57F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B584 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B589 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B58E 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B593 05                         DATAY1U343IF3L_2: dc.b $5
0000B594 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B599 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B59E E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B5A3 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B5A8 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B5AD 05                         DATAY1U343IF3L_3: dc.b $5
0000B5AE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B5B3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B5B8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B5BD 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B5C2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B5C7 06                         DATAY1U343IF3L_4: dc.b $6
0000B5C8 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000B5CD E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B5D2 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B5D7 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B5DC 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B5E1 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B5E6 06                         DATAY1U343IF3L_5: dc.b $6
0000B5E7 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000B5EC E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B5F1 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B5F6 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B5FB 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B600 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B605 06                         DATAY1U343IF3L_6: dc.b $6
0000B606 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000B60B E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B610 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B615 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B61A 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B61F 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B624 06                         DATAY1U343IF3L_7: dc.b $6
0000B625 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000B62A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B62F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B634 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B639 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B63E 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B643 06                         DATAY1U343IF3L_8: dc.b $6
0000B644 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000B649 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B64E 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B653 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B658 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B65D 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B662 06                         DATAY1U343IF3L_9: dc.b $6
0000B663 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000B668 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B66D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B672 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B677 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B67C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B681 05                         DATAY1U343IF3L_A: dc.b $5
0000B682 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B687 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B68C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B691 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B696 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B69B 01                         DATAY1U343IF3L_B: dc.b $1
0000B69C FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000B6A2 00                         	even
0000B6A2 00                         	even
0000B6A2                            
0000B6A2                            ; ===========================================================================
0000B6A2                            ; ---------------------------------------------------------------------------
0000B6A2                            ; Object 0E - Sonic on the title screen
0000B6A2                            ; ---------------------------------------------------------------------------
0000B6A2                            
0000B6A2                            Obj0E:					; XREF: Obj_Index
0000B6A2 7000                       		moveq	#0,d0
0000B6A4 1028 0024                  		move.b	$24(a0),d0
0000B6A8 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B6AC 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B6B0                            ; ===========================================================================
0000B6B0 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B6B2 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B6B4 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B6B6 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B6B8                            ; ===========================================================================
0000B6B8                            
0000B6B8                            Obj0E_Main:				; XREF: Obj0E_Index
0000B6B8 5428 0024                  		addq.b	#2,$24(a0)
0000B6BC 317C 00F0 0008             		move.w	#$F0,8(a0)
0000B6C2 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B6C8 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B6D0 317C 2300 0002             		move.w	#$2300,2(a0)
0000B6D6 117C 0001 0018             		move.b	#1,$18(a0)
0000B6DC 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B6E2 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B6E8 6100 0000                  		bsr.w	AnimateSprite
0000B6EC                            
0000B6EC                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B6EC 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B6F0 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B6F2 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B6F6 6000 0000                  		bra.w	DisplaySprite
0000B6FA                            ; ===========================================================================
0000B6FA                            
0000B6FA                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B6FA 4E75                       		rts	
0000B6FC                            ; ===========================================================================
0000B6FC                            
0000B6FC                            Obj0E_Move:				; XREF: Obj0E_Index
0000B6FC 5168 000A                  		subq.w	#8,$A(a0)
0000B700 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B706 6600                       		bne.s	Obj0E_Display
0000B708 5428 0024                  		addq.b	#2,$24(a0)
0000B70C                            
0000B70C                            Obj0E_Display:
0000B70C 6000 0000                  		bra.w	DisplaySprite
0000B710                            ; ===========================================================================
0000B710 4E75                       		rts	
0000B712                            ; ===========================================================================
0000B712                            
0000B712                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B712 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B718 6100 0000                  		bsr.w	AnimateSprite
0000B71C 6000 0000                  		bra.w	DisplaySprite
0000B720                            ; ===========================================================================
0000B720 4E75                       		rts	
0000B722                            ; ===========================================================================
0000B722                            ; ---------------------------------------------------------------------------
0000B722                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B722                            ; ---------------------------------------------------------------------------
0000B722                            
0000B722                            Obj0F:					; XREF: Obj_Index
0000B722 7000                       		moveq	#0,d0
0000B724 1028 0024                  		move.b	$24(a0),d0
0000B728 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B72C 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B730 6000 0000                  		bra.w	DisplaySprite
0000B734                            ; ===========================================================================
0000B734 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B736 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B738 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B73A                            ; ===========================================================================
0000B73A                            
0000B73A                            Obj0F_Main:				; XREF: Obj0F_Index
0000B73A 5428 0024                  		addq.b	#2,$24(a0)
0000B73E 317C 00D0 0008             		move.w	#$D0,8(a0)
0000B744 317C 0130 000A             		move.w	#$130,$A(a0)
0000B74A 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B752 317C 0200 0002             		move.w	#$200,2(a0)
0000B758 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B75E 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B760 5428 0024                  		addq.b	#2,$24(a0)
0000B764 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B76A 6600                       		bne.s	locret_A6F8	; if not, branch
0000B76C 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B772 317C 0170 0008             		move.w	#$170,8(a0)
0000B778 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B77E                            
0000B77E                            locret_A6F8:				; XREF: Obj0F_Index
0000B77E 4E75                       		rts	
0000B780                            ; ===========================================================================
0000B780                            
0000B780                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B780 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B786 6000 0000                  		bra.w	AnimateSprite
0000B78A                            ; ===========================================================================
0000B78A                            Ani_obj0E:
0000B78A                            	include "_anim\obj0E.asm"
0000B78A                            ; ---------------------------------------------------------------------------
0000B78A                            ; Animation script - Sonic on the title screen
0000B78A                            ; ---------------------------------------------------------------------------
0000B78A 0000                       		dc.w byte_A706-Ani_obj0E
0000B78C 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B798                            		even
0000B798                            		even
0000B798                            
0000B798                            Ani_obj0F:
0000B798                            	include "_anim\obj0F.asm"
0000B798                            ; ---------------------------------------------------------------------------
0000B798                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B798                            ; ---------------------------------------------------------------------------
0000B798 0000                       		dc.w byte_A714-Ani_obj0F
0000B79A 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B79E                            		even
0000B79E                            		even
0000B79E                            
0000B79E                            ; ---------------------------------------------------------------------------
0000B79E                            ; Subroutine to	animate	a sprite using an animation script
0000B79E                            ; ---------------------------------------------------------------------------
0000B79E                            
0000B79E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B79E                            
0000B79E                            
0000B79E                            AnimateSprite:
0000B79E 7000                       		moveq	#0,d0
0000B7A0 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B7A4 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B7A8 6700                       		beq.s	Anim_Run	; if not, branch
0000B7AA 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B7AE 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B7B4 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B7BA                            
0000B7BA                            Anim_Run:
0000B7BA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B7BE 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B7C0 D040                       		add.w	d0,d0
0000B7C2 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B7C6 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B7CA 7200                       		moveq	#0,d1
0000B7CC 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B7D0 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B7D4 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B7D6                            
0000B7D6                            Anim_Next:
0000B7D6 1200                       		move.b	d0,d1
0000B7D8 0200 001F                  		andi.b	#$1F,d0
0000B7DC 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B7E0 1028 0022                  		move.b	$22(a0),d0
0000B7E4 E719                       		rol.b	#3,d1
0000B7E6 B101                       		eor.b	d0,d1
0000B7E8 0201 0003                  		andi.b	#3,d1
0000B7EC 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B7F2 8328 0001                  		or.b	d1,1(a0)
0000B7F6 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B7FA                            
0000B7FA                            Anim_Wait:
0000B7FA 4E75                       		rts	
0000B7FC                            ; ===========================================================================
0000B7FC                            
0000B7FC                            Anim_End_FF:
0000B7FC 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B7FE 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B800 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B806 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B80A 60CA                       		bra.s	Anim_Next
0000B80C                            ; ===========================================================================
0000B80C                            
0000B80C                            Anim_End_FE:
0000B80C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B80E 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B810 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B814 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B818 9200                       		sub.b	d0,d1
0000B81A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B81E 60B6                       		bra.s	Anim_Next
0000B820                            ; ===========================================================================
0000B820                            
0000B820                            Anim_End_FD:
0000B820 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B822 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B824 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B82A                            
0000B82A                            Anim_End_FC:
0000B82A 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B82C 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B82E 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B832                            
0000B832                            Anim_End_FB:
0000B832 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B834 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B836 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B83C 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B840                            
0000B840                            Anim_End_FA:
0000B840 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B842 6600                       		bne.s	Anim_End	; if not, branch
0000B844 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B848                            
0000B848                            Anim_End:
0000B848 4E75                       		rts	
0000B84A                            ; End of function AnimateSprite
0000B84A                            
0000B84A                            ; ===========================================================================
0000B84A                            ; ---------------------------------------------------------------------------
0000B84A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B84A                            ; ---------------------------------------------------------------------------
0000B84A                            Map_obj0F:
0000B84A                            	include "_maps\obj0F.asm"
0000B84A                            ; ---------------------------------------------------------------------------
0000B84A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B84A                            ; ---------------------------------------------------------------------------
0000B84A 0000                       		dc.w byte_A7CD-Map_obj0F
0000B84C 0000                       		dc.w byte_A7CC-Map_obj0F
0000B84E 0000                       		dc.w byte_A7EB-Map_obj0F
0000B850 0000                       		dc.w byte_A882-Map_obj0F
0000B852 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B853 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B858 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B85D 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B862 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B867 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B86C 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B871 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B872 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B877 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B87C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B881 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B886 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B88B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B890 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B895 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B89A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B89F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B8A4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8A9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8AE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8B3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8B8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8BD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8C2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8C7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8CC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8D1 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8D6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8DB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8E0 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8E5 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8EA F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8EF F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8F4 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8F9 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8FE F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B903 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B908 01                         byte_A882:	dc.b 1			; "TM"
0000B909 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B90E                            		even
0000B90E                            		even
0000B90E                            
0000B90E                            ; ---------------------------------------------------------------------------
0000B90E                            ; Sprite mappings - Sonic on the title screen
0000B90E                            ; ---------------------------------------------------------------------------
0000B90E                            Map_obj0E:
0000B90E                            	include "_maps\obj0E.asm"
0000B90E                            ; ================================================================================
0000B90E                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B90E                            ; ================================================================================
0000B90E                            
0000B90E                            DATAGKI0HYDQBXP:
0000B90E 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B912 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B916 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B91A 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B91E 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B91F 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B924 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B929 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B92E 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B933 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B938 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B93D 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B942 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B947 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B948 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B94D 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B952 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B957 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B95C 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B961 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B966 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B96B 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B970 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B975 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B97A 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B97F 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B980 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B985 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B98A F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B98F 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B994 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B999 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B99E 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B9A3 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B9A8 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B9AD 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B9B2 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B9B7 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B9B8 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B9BD F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B9C2 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B9C7 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B9CC 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B9D1 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B9D6 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B9DB 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B9E0 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B9E5 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B9EA 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B9EB F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B9F0 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B9F5 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B9FA 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B9FF 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000BA04 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000BA09 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000BA0E 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000BA13 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000BA18 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000BA1D 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000BA22 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000BA27 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000BA2C 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000BA31 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000BA36 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000BA3B 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000BA3C 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000BA41 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000BA46 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000BA4B 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000BA50 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000BA55 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000BA5A 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000BA5F EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000BA64 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000BA69 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000BA6E 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000BA73 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000BA74 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000BA79 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000BA7E 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000BA83 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000BA88 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000BA8D 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000BA92 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000BA97 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000BA9C 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000BAA1 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000BAA6 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000BAAB 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000BAB0 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000BAB5 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000BABA 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000BABF 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000BAC0 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000BAC5 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000BACA 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000BACF EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000BAD4 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000BAD9 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000BADE EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000BAE3 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000BAE8 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000BAED EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000BAF2 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000BAF7 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000BAFC EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000BB01 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000BB06 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000BB0C 00                         	even
0000BB0C 00                         	even
0000BB0C                            
0000BB0C                            ; ===========================================================================
0000BB0C                            ; ---------------------------------------------------------------------------
0000BB0C                            ; Object 2B - Chopper enemy (GHZ)
0000BB0C                            ; ---------------------------------------------------------------------------
0000BB0C                            
0000BB0C                            Obj2B:					; XREF: Obj_Index
0000BB0C 7000                       		moveq	#0,d0
0000BB0E 1028 0024                  		move.b	$24(a0),d0
0000BB12 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000BB16 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000BB1A 6000 0000                  		bra.w	MarkObjGone
0000BB1E                            ; ===========================================================================
0000BB1E 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000BB20 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000BB22                            ; ===========================================================================
0000BB22                            
0000BB22                            Obj2B_Main:				; XREF: Obj2B_Index
0000BB22 5428 0024                  		addq.b	#2,$24(a0)
0000BB26 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000BB2E 317C 047B 0002             		move.w	#$47B,2(a0)
0000BB34 117C 0004 0001             		move.b	#4,1(a0)
0000BB3A 117C 0004 0018             		move.b	#4,$18(a0)
0000BB40 117C 0009 0020             		move.b	#9,$20(a0)
0000BB46 117C 0010 0019             		move.b	#$10,$19(a0)
0000BB4C 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BB52 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000BB58                            
0000BB58                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000BB58 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000BB5E 6100 FC3E                  		bsr.w	AnimateSprite
0000BB62 6100 0000                  		bsr.w	SpeedToPos
0000BB66 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000BB6C 3028 0030                  		move.w	$30(a0),d0
0000BB70 B068 000C                  		cmp.w	$C(a0),d0
0000BB74 6400                       		bcc.s	Obj2B_ChgAni
0000BB76 3140 000C                  		move.w	d0,$C(a0)
0000BB7A 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BB80                            
0000BB80                            Obj2B_ChgAni:
0000BB80 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000BB86 0440 00C0                  		subi.w	#$C0,d0
0000BB8A B068 000C                  		cmp.w	$C(a0),d0
0000BB8E 6400                       		bcc.s	locret_ABB6
0000BB90 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000BB96 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000BB9A 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000BB9C 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000BBA2                            
0000BBA2                            locret_ABB6:
0000BBA2 4E75                       		rts	
0000BBA4                            ; ===========================================================================
0000BBA4                            Ani_obj2B:
0000BBA4                            	include "_anim\obj2B.asm"
0000BBA4                            ; ---------------------------------------------------------------------------
0000BBA4                            ; Animation script - Chopper enemy
0000BBA4                            ; ---------------------------------------------------------------------------
0000BBA4 0000                       		dc.w byte_ABBE-Ani_obj2B
0000BBA6 0000                       		dc.w byte_ABC2-Ani_obj2B
0000BBA8 0000                       		dc.w byte_ABC6-Ani_obj2B
0000BBAA 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000BBAE 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000BBB2 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000BBB6 00                         		even
0000BBB6 00                         		even
0000BBB6                            
0000BBB6                            ; ---------------------------------------------------------------------------
0000BBB6                            ; Sprite mappings - Chopper enemy (GHZ)
0000BBB6                            ; ---------------------------------------------------------------------------
0000BBB6                            Map_obj2B:
0000BBB6                            	include "_maps\obj2B.asm"
0000BBB6                            Map_1ff1:
0000BBB6 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000BBB8 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000BBBA 02                         Map_1ff1_4: 	dc.b $2
0000BBBB E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000BBC0 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000BBC5 02                         Map_1ff1_F: 	dc.b $2
0000BBC6 E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000BBCB 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000BBD0                            	even
0000BBD0                            	even
0000BBD0                            
0000BBD0                            ; ===========================================================================
0000BBD0                            ; ---------------------------------------------------------------------------
0000BBD0                            ; Object 2C - Jaws enemy (LZ)
0000BBD0                            ; ---------------------------------------------------------------------------
0000BBD0                            
0000BBD0                            Obj2C:					; XREF: Obj_Index
0000BBD0 7000                       		moveq	#0,d0
0000BBD2 1028 0024                  		move.b	$24(a0),d0
0000BBD6 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000BBDA 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000BBDE                            ; ===========================================================================
0000BBDE 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000BBE0 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000BBE2                            ; ===========================================================================
0000BBE2                            
0000BBE2                            Obj2C_Main:				; XREF: Obj2C_Index
0000BBE2 5428 0024                  		addq.b	#2,$24(a0)
0000BBE6 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000BBEE 317C 2486 0002             		move.w	#$2486,2(a0)
0000BBF4 0028 0004 0001             		ori.b	#4,1(a0)
0000BBFA 117C 000A 0020             		move.b	#$A,$20(a0)
0000BC00 117C 0004 0018             		move.b	#4,$18(a0)
0000BC06 117C 0010 0019             		move.b	#$10,$19(a0)
0000BC0C 7000                       		moveq	#0,d0
0000BC0E 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000BC12 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000BC14 5340                       		subq.w	#1,d0
0000BC16 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000BC1A 3140 0032                  		move.w	d0,$32(a0)
0000BC1E 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000BC24 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000BC2A 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000BC2C 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000BC30                            
0000BC30                            Obj2C_Turn:				; XREF: Obj2C_Index
0000BC30 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000BC34 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000BC36 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000BC3C 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000BC40 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000BC46 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000BC4C                            
0000BC4C                            Obj2C_Animate:
0000BC4C 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000BC52 6100 FB4A                  		bsr.w	AnimateSprite
0000BC56 6100 0000                  		bsr.w	SpeedToPos
0000BC5A 6000 0000                  		bra.w	MarkObjGone
0000BC5E                            ; ===========================================================================
0000BC5E                            Ani_obj2C:
0000BC5E                            	include "_anim\obj2C.asm"
0000BC5E                            ; ---------------------------------------------------------------------------
0000BC5E                            ; Animation script - Jaws enemy
0000BC5E                            ; ---------------------------------------------------------------------------
0000BC5E 0000                       		dc.w byte_AC6A-Ani_obj2C
0000BC60 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000BC66                            		even
0000BC66                            		even
0000BC66                            
0000BC66                            ; ---------------------------------------------------------------------------
0000BC66                            ; Sprite mappings - Jaws enemy (LZ)
0000BC66                            ; ---------------------------------------------------------------------------
0000BC66                            Map_obj2C:
0000BC66                            	include "_maps\obj2C.asm"
0000BC66                            ; ---------------------------------------------------------------------------
0000BC66                            ; Sprite mappings - Jaws enemy (LZ)
0000BC66                            ; ---------------------------------------------------------------------------
0000BC66 0000                       		dc.w byte_AC78-Map_obj2C
0000BC68 0000                       		dc.w byte_AC83-Map_obj2C
0000BC6A 0000                       		dc.w byte_AC8E-Map_obj2C
0000BC6C 0000                       		dc.w byte_AC99-Map_obj2C
0000BC6E 02                         byte_AC78:	dc.b 2
0000BC6F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000BC74 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000BC79 02                         byte_AC83:	dc.b 2
0000BC7A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000BC7F F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000BC84 02                         byte_AC8E:	dc.b 2
0000BC85 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000BC8A F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000BC8F 02                         byte_AC99:	dc.b 2
0000BC90 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000BC95 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000BC9A                            		even
0000BC9A                            		even
0000BC9A                            
0000BC9A                            ; ===========================================================================
0000BC9A                            ; ---------------------------------------------------------------------------
0000BC9A                            ; Object 2D - Burrobot enemy (LZ)
0000BC9A                            ; ---------------------------------------------------------------------------
0000BC9A                            
0000BC9A                            Obj2D:					; XREF: Obj_Index
0000BC9A 7000                       		moveq	#0,d0
0000BC9C 1028 0024                  		move.b	$24(a0),d0
0000BCA0 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000BCA4 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000BCA8                            ; ===========================================================================
0000BCA8 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000BCAA 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000BCAC                            ; ===========================================================================
0000BCAC                            
0000BCAC                            Obj2D_Main:				; XREF: Obj2D_Index
0000BCAC 5428 0024                  		addq.b	#2,$24(a0)
0000BCB0 117C 0013 0016             		move.b	#$13,$16(a0)
0000BCB6 117C 0008 0017             		move.b	#8,$17(a0)
0000BCBC 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000BCC4 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000BCCA 0028 0004 0001             		ori.b	#4,1(a0)
0000BCD0 117C 0004 0018             		move.b	#4,$18(a0)
0000BCD6 117C 0005 0020             		move.b	#5,$20(a0)
0000BCDC 117C 000C 0019             		move.b	#$C,$19(a0)
0000BCE2 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000BCE6 117C 0002 001C             		move.b	#2,$1C(a0)
0000BCEC                            
0000BCEC                            Obj2D_Action:				; XREF: Obj2D_Index
0000BCEC 7000                       		moveq	#0,d0
0000BCEE 1028 0025                  		move.b	$25(a0),d0
0000BCF2 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000BCF6 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000BCFA 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000BD00 6100 FA9C                  		bsr.w	AnimateSprite
0000BD04 6000 0000                  		bra.w	MarkObjGone
0000BD08                            ; ===========================================================================
0000BD08 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000BD0A 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000BD0C 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000BD0E 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000BD10                            ; ===========================================================================
0000BD10                            
0000BD10                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000BD10 5368 0030                  		subq.w	#1,$30(a0)
0000BD14 6A00                       		bpl.s	locret_AD42
0000BD16 5428 0025                  		addq.b	#2,$25(a0)
0000BD1A 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000BD20 317C 0080 0010             		move.w	#$80,$10(a0)
0000BD26 117C 0001 001C             		move.b	#1,$1C(a0)
0000BD2C 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000BD32 6700                       		beq.s	locret_AD42
0000BD34 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000BD38                            
0000BD38                            locret_AD42:
0000BD38 4E75                       		rts	
0000BD3A                            ; ===========================================================================
0000BD3A                            
0000BD3A                            Obj2D_Move:				; XREF: Obj2D_Index2
0000BD3A 5368 0030                  		subq.w	#1,$30(a0)
0000BD3E 6B00                       		bmi.s	loc_AD84
0000BD40 6100 0000                  		bsr.w	SpeedToPos
0000BD44 0868 0000 0032             		bchg	#0,$32(a0)
0000BD4A 6600                       		bne.s	loc_AD78
0000BD4C 3628 0008                  		move.w	8(a0),d3
0000BD50 0643 000C                  		addi.w	#$C,d3
0000BD54 0828 0000 0022             		btst	#0,$22(a0)
0000BD5A 6600                       		bne.s	loc_AD6A
0000BD5C 0443 0018                  		subi.w	#$18,d3
0000BD60                            
0000BD60                            loc_AD6A:
0000BD60 4EB9 0000 0000             		jsr	ObjHitFloor2
0000BD66 0C41 000C                  		cmpi.w	#$C,d1
0000BD6A 6C00                       		bge.s	loc_AD84
0000BD6C 4E75                       		rts	
0000BD6E                            ; ===========================================================================
0000BD6E                            
0000BD6E                            loc_AD78:				; XREF: Obj2D_Move
0000BD6E 4EB9 0000 0000             		jsr	ObjHitFloor
0000BD74 D368 000C                  		add.w	d1,$C(a0)
0000BD78 4E75                       		rts	
0000BD7A                            ; ===========================================================================
0000BD7A                            
0000BD7A                            loc_AD84:				; XREF: Obj2D_Move
0000BD7A 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000BD80 6700                       		beq.s	loc_ADA4
0000BD82 5528 0025                  		subq.b	#2,$25(a0)
0000BD86 317C 003B 0030             		move.w	#$3B,$30(a0)
0000BD8C 317C 0000 0010             		move.w	#0,$10(a0)
0000BD92 117C 0000 001C             		move.b	#0,$1C(a0)
0000BD98 4E75                       		rts	
0000BD9A                            ; ===========================================================================
0000BD9A                            
0000BD9A                            loc_ADA4:
0000BD9A 5428 0025                  		addq.b	#2,$25(a0)
0000BD9E 317C FC00 0012             		move.w	#-$400,$12(a0)
0000BDA4 117C 0002 001C             		move.b	#2,$1C(a0)
0000BDAA 4E75                       		rts	
0000BDAC                            ; ===========================================================================
0000BDAC                            
0000BDAC                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000BDAC 6100 0000                  		bsr.w	SpeedToPos
0000BDB0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000BDB6 6B00                       		bmi.s	locret_ADF0
0000BDB8 117C 0003 001C             		move.b	#3,$1C(a0)
0000BDBE 4EB9 0000 0000             		jsr	ObjHitFloor
0000BDC4 4A41                       		tst.w	d1
0000BDC6 6A00                       		bpl.s	locret_ADF0
0000BDC8 D368 000C                  		add.w	d1,$C(a0)
0000BDCC 317C 0000 0012             		move.w	#0,$12(a0)
0000BDD2 117C 0001 001C             		move.b	#1,$1C(a0)
0000BDD8 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000BDDE 5528 0025                  		subq.b	#2,$25(a0)
0000BDE2 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000BDE6                            
0000BDE6                            locret_ADF0:
0000BDE6 4E75                       		rts	
0000BDE8                            ; ===========================================================================
0000BDE8                            
0000BDE8                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000BDE8 343C 0060                  		move.w	#$60,d2
0000BDEC 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000BDF0 6400                       		bcc.s	locret_AE20
0000BDF2 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000BDF6 9068 000C                  		sub.w	$C(a0),d0
0000BDFA 6400                       		bcc.s	locret_AE20
0000BDFC 0C40 FF80                  		cmpi.w	#-$80,d0
0000BE00 6500                       		bcs.s	locret_AE20
0000BE02 4A78 FE08                  		tst.w	($FFFFFE08).w
0000BE06 6600                       		bne.s	locret_AE20
0000BE08 5528 0025                  		subq.b	#2,$25(a0)
0000BE0C 3141 0010                  		move.w	d1,$10(a0)
0000BE10 317C FC00 0012             		move.w	#-$400,$12(a0)
0000BE16                            
0000BE16                            locret_AE20:
0000BE16 4E75                       		rts	
0000BE18                            
0000BE18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BE18                            
0000BE18                            
0000BE18                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000BE18 323C 0080                  		move.w	#$80,d1
0000BE1C 08E8 0000 0022             		bset	#0,$22(a0)
0000BE22 3038 D008                  		move.w	($FFFFD008).w,d0
0000BE26 9068 0008                  		sub.w	8(a0),d0
0000BE2A 6400                       		bcc.s	loc_AE40
0000BE2C 4440                       		neg.w	d0
0000BE2E 4441                       		neg.w	d1
0000BE30 08A8 0000 0022             		bclr	#0,$22(a0)
0000BE36                            
0000BE36                            loc_AE40:
0000BE36 B042                       		cmp.w	d2,d0
0000BE38 4E75                       		rts	
0000BE3A                            ; End of function Obj2D_ChkSonic2
0000BE3A                            
0000BE3A                            ; ===========================================================================
0000BE3A                            Ani_obj2D:
0000BE3A                            	include "_anim\obj2D.asm"
0000BE3A                            ; ---------------------------------------------------------------------------
0000BE3A                            ; Animation script - Burrobot enemy but craig
0000BE3A                            ; ---------------------------------------------------------------------------
0000BE3A 0000                       		dc.w byte_AE4C-Ani_obj2D
0000BE3C 0000                       		dc.w byte_AE50-Ani_obj2D
0000BE3E 0000                       		dc.w byte_AE54-Ani_obj2D
0000BE40 0000                       		dc.w byte_AE58-Ani_obj2D
0000BE42 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000BE45 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000BE49 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000BE57 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000BE5A                            		even
0000BE5A                            		even
0000BE5A                            
0000BE5A                            ; ---------------------------------------------------------------------------
0000BE5A                            ; Sprite mappings - Burrobot enemy (LZ)
0000BE5A                            ; ---------------------------------------------------------------------------
0000BE5A                            Map_obj2D:
0000BE5A                            	include "_maps\obj2D.asm"
0000BE5A                            Map_e3a3:
0000BE5A 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000BE5C 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000BE5E 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000BE60 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000BE62 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000BE64 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000BE66 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000BE68 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000BE6A 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000BE6C 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000BE6E 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000BE70 02                         Map_e3a3_16: 	dc.b $2
0000BE71 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000BE76 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000BE7B 02                         Map_e3a3_21: 	dc.b $2
0000BE7C EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000BE81 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000BE86 02                         Map_e3a3_2C: 	dc.b $2
0000BE87 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000BE8C 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000BE91 02                         Map_e3a3_37: 	dc.b $2
0000BE92 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000BE97 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000BE9C 02                         Map_e3a3_42: 	dc.b $2
0000BE9D EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000BEA2 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000BEA7 02                         Map_e3a3_4D: 	dc.b $2
0000BEA8 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000BEAD FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000BEB2 02                         Map_e3a3_58: 	dc.b $2
0000BEB3 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000BEB8 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000BEBD 02                         Map_e3a3_63: 	dc.b $2
0000BEBE EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000BEC3 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000BEC8 02                         Map_e3a3_6E: 	dc.b $2
0000BEC9 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000BECE FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000BED3 02                         Map_e3a3_79: 	dc.b $2
0000BED4 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000BED9 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000BEDE 02                         Map_e3a3_84: 	dc.b $2
0000BEDF EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000BEE4 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000BEEA 00                         	even
0000BEEA 00                         	even
0000BEEA                            
0000BEEA                            ; ===========================================================================
0000BEEA                            ; ---------------------------------------------------------------------------
0000BEEA                            ; Object 2F - large moving platforms (MZ)
0000BEEA                            ; ---------------------------------------------------------------------------
0000BEEA                            
0000BEEA                            Obj2F:					; XREF: Obj_Index
0000BEEA 7000                       		moveq	#0,d0
0000BEEC 1028 0024                  		move.b	$24(a0),d0
0000BEF0 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000BEF4 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000BEF8                            ; ===========================================================================
0000BEF8 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000BEFA 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000BEFC                            
0000BEFC 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000BEFE 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000BF00 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000BF02 0140                       		dc.b 1,	$40
0000BF04 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000BF06 0220                       		dc.b 2,	$20
0000BF08                            ; ===========================================================================
0000BF08                            
0000BF08                            Obj2F_Main:				; XREF: Obj2F_Index
0000BF08 5428 0024                  		addq.b	#2,$24(a0)
0000BF0C 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000BF14 317C C000 0002             		move.w	#$C000,2(a0)
0000BF1A 117C 0004 0001             		move.b	#4,1(a0)
0000BF20 117C 0005 0018             		move.b	#5,$18(a0)
0000BF26 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000BF2C 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BF32 7000                       		moveq	#0,d0
0000BF34 1028 0028                  		move.b	$28(a0),d0
0000BF38 E448                       		lsr.w	#2,d0
0000BF3A 0240 001C                  		andi.w	#$1C,d0
0000BF3E 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000BF42 3019                       		move.w	(a1)+,d0
0000BF44 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000BF48 214A 0030                  		move.l	a2,$30(a0)
0000BF4C 1159 001A                  		move.b	(a1)+,$1A(a0)
0000BF50 1151 0019                  		move.b	(a1),$19(a0)
0000BF54 0228 000F 0028             		andi.b	#$F,$28(a0)
0000BF5A 117C 0040 0016             		move.b	#$40,$16(a0)
0000BF60 08E8 0004 0001             		bset	#4,1(a0)
0000BF66                            
0000BF66                            Obj2F_Action:				; XREF: Obj2F_Index
0000BF66 6100 0000                  		bsr.w	Obj2F_Types
0000BF6A 4A28 0025                  		tst.b	$25(a0)
0000BF6E 6700                       		beq.s	Obj2F_Solid
0000BF70 7200                       		moveq	#0,d1
0000BF72 1228 0019                  		move.b	$19(a0),d1
0000BF76 0641 000B                  		addi.w	#$B,d1
0000BF7A 6100 C552                  		bsr.w	ExitPlatform
0000BF7E 0829 0003 0022             		btst	#3,$22(a1)
0000BF84 6600 0000                  		bne.w	Obj2F_Slope
0000BF88 4228 0025                  		clr.b	$25(a0)
0000BF8C 6000                       		bra.s	Obj2F_Display
0000BF8E                            ; ===========================================================================
0000BF8E                            
0000BF8E                            Obj2F_Slope:				; XREF: Obj2F_Action
0000BF8E 7200                       		moveq	#0,d1
0000BF90 1228 0019                  		move.b	$19(a0),d1
0000BF94 0641 000B                  		addi.w	#$B,d1
0000BF98 2468 0030                  		movea.l	$30(a0),a2
0000BF9C 3428 0008                  		move.w	8(a0),d2
0000BFA0 6100 D51C                  		bsr.w	SlopeObject2
0000BFA4 6000                       		bra.s	Obj2F_Display
0000BFA6                            ; ===========================================================================
0000BFA6                            
0000BFA6                            Obj2F_Solid:				; XREF: Obj2F_Action
0000BFA6 7200                       		moveq	#0,d1
0000BFA8 1228 0019                  		move.b	$19(a0),d1
0000BFAC 0641 000B                  		addi.w	#$B,d1
0000BFB0 343C 0020                  		move.w	#$20,d2
0000BFB4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000BFBA 6600                       		bne.s	loc_AF8E
0000BFBC 343C 0030                  		move.w	#$30,d2
0000BFC0                            
0000BFC0                            loc_AF8E:
0000BFC0 2468 0030                  		movea.l	$30(a0),a2
0000BFC4 6100 0000                  		bsr.w	SolidObject2F
0000BFC8                            
0000BFC8                            Obj2F_Display:				; XREF: Obj2F_Action
0000BFC8 6100 0000                  		bsr.w	DisplaySprite
0000BFCC 6000 0000                  		bra.w	Obj2F_ChkDel
0000BFD0                            
0000BFD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BFD0                            
0000BFD0                            
0000BFD0                            Obj2F_Types:				; XREF: Obj2F_Action
0000BFD0 7000                       		moveq	#0,d0
0000BFD2 1028 0028                  		move.b	$28(a0),d0
0000BFD6 0240 0007                  		andi.w	#7,d0
0000BFDA D040                       		add.w	d0,d0
0000BFDC 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000BFE0 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000BFE4                            ; End of function Obj2F_Types
0000BFE4                            
0000BFE4                            ; ===========================================================================
0000BFE4 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000BFE6 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000BFE8 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000BFEA 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000BFEC 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000BFEE 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000BFF0                            ; ===========================================================================
0000BFF0                            
0000BFF0                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000BFF0 4E75                       		rts			; type 00 platform doesn't move
0000BFF2                            ; ===========================================================================
0000BFF2                            
0000BFF2                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000BFF2 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000BFF6 323C 0020                  		move.w	#$20,d1
0000BFFA 6000                       		bra.s	Obj2F_Move
0000BFFC                            ; ===========================================================================
0000BFFC                            
0000BFFC                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000BFFC 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000C000 323C 0030                  		move.w	#$30,d1
0000C004 6000                       		bra.s	Obj2F_Move
0000C006                            ; ===========================================================================
0000C006                            
0000C006                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000C006 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000C00A 323C 0040                  		move.w	#$40,d1
0000C00E 6000                       		bra.s	Obj2F_Move
0000C010                            ; ===========================================================================
0000C010                            
0000C010                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000C010 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000C014 323C 0060                  		move.w	#$60,d1
0000C018                            
0000C018                            Obj2F_Move:
0000C018 0828 0003 0028             		btst	#3,$28(a0)
0000C01E 6700                       		beq.s	loc_AFF2
0000C020 4440                       		neg.w	d0
0000C022 D041                       		add.w	d1,d0
0000C024                            
0000C024                            loc_AFF2:
0000C024 3228 002C                  		move.w	$2C(a0),d1
0000C028 9240                       		sub.w	d0,d1
0000C02A 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000C02E 4E75                       		rts	
0000C030                            ; ===========================================================================
0000C030                            
0000C030                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000C030 1028 0034                  		move.b	$34(a0),d0
0000C034 4A28 0025                  		tst.b	$25(a0)
0000C038 6600                       		bne.s	loc_B010
0000C03A 5500                       		subq.b	#2,d0
0000C03C 6400                       		bcc.s	loc_B01C
0000C03E 7000                       		moveq	#0,d0
0000C040 6000                       		bra.s	loc_B01C
0000C042                            ; ===========================================================================
0000C042                            
0000C042                            loc_B010:
0000C042 5800                       		addq.b	#4,d0
0000C044 0C00 0040                  		cmpi.b	#$40,d0
0000C048 6500                       		bcs.s	loc_B01C
0000C04A 103C 0040                  		move.b	#$40,d0
0000C04E                            
0000C04E                            loc_B01C:
0000C04E 1140 0034                  		move.b	d0,$34(a0)
0000C052 4EB9 0000 3424             		jsr	(CalcSine).l
0000C058 E848                       		lsr.w	#4,d0
0000C05A 3200                       		move.w	d0,d1
0000C05C D068 002C                  		add.w	$2C(a0),d0
0000C060 3140 000C                  		move.w	d0,$C(a0)
0000C064 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000C06A 6600                       		bne.s	loc_B07A
0000C06C 4A28 0035                  		tst.b	$35(a0)
0000C070 6600                       		bne.s	loc_B07A
0000C072 117C 0001 0035             		move.b	#1,$35(a0)
0000C078 6100 0000                  		bsr.w	SingleObjLoad2
0000C07C 6600                       		bne.s	loc_B07A
0000C07E 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000C082 3368 0008 0008             		move.w	8(a0),8(a1)
0000C088 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000C08E 5069 002C                  		addq.w	#8,$2C(a1)
0000C092 5769 002C                  		subq.w	#3,$2C(a1)
0000C096 0469 0040 0008             		subi.w	#$40,8(a1)
0000C09C 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000C0A2 2348 0038                  		move.l	a0,$38(a1)
0000C0A6 2448                       		movea.l	a0,a2
0000C0A8 6100                       		bsr.s	sub_B09C
0000C0AA                            
0000C0AA                            loc_B07A:
0000C0AA 7400                       		moveq	#0,d2
0000C0AC 45E8 0036                  		lea	$36(a0),a2
0000C0B0 141A                       		move.b	(a2)+,d2
0000C0B2 5302                       		subq.b	#1,d2
0000C0B4 6500                       		bcs.s	locret_B09A
0000C0B6                            
0000C0B6                            loc_B086:
0000C0B6 7000                       		moveq	#0,d0
0000C0B8 101A                       		move.b	(a2)+,d0
0000C0BA ED48                       		lsl.w	#6,d0
0000C0BC 0640 D000                  		addi.w	#-$3000,d0
0000C0C0 3240                       		movea.w	d0,a1
0000C0C2 3341 003C                  		move.w	d1,$3C(a1)
0000C0C6 51CA FFEE                  		dbf	d2,loc_B086
0000C0CA                            
0000C0CA                            locret_B09A:
0000C0CA 4E75                       		rts	
0000C0CC                            
0000C0CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C0CC                            
0000C0CC                            
0000C0CC                            sub_B09C:
0000C0CC 45EA 0036                  		lea	$36(a2),a2
0000C0D0 7000                       		moveq	#0,d0
0000C0D2 1012                       		move.b	(a2),d0
0000C0D4 5212                       		addq.b	#1,(a2)
0000C0D6 45F2 0001                  		lea	1(a2,d0.w),a2
0000C0DA 3009                       		move.w	a1,d0
0000C0DC 0440 D000                  		subi.w	#-$3000,d0
0000C0E0 EC48                       		lsr.w	#6,d0
0000C0E2 0240 007F                  		andi.w	#$7F,d0
0000C0E6 1480                       		move.b	d0,(a2)
0000C0E8 4E75                       		rts	
0000C0EA                            ; End of function sub_B09C
0000C0EA                            
0000C0EA                            ; ===========================================================================
0000C0EA                            
0000C0EA                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000C0EA 4A28 0035                  		tst.b	$35(a0)
0000C0EE 6700                       		beq.s	loc_B0C6
0000C0F0 4A28 0001                  		tst.b	1(a0)
0000C0F4 6A00                       		bpl.s	Obj2F_DelFlames
0000C0F6                            
0000C0F6                            loc_B0C6:
0000C0F6 3028 002A                  		move.w	$2A(a0),d0
0000C0FA 0240 FF80                  		andi.w	#$FF80,d0
0000C0FE 3238 F700                  		move.w	($FFFFF700).w,d1
0000C102 0441 0080                  		subi.w	#$80,d1
0000C106 0241 FF80                  		andi.w	#$FF80,d1
0000C10A 9041                       		sub.w	d1,d0
0000C10C 0C40 0280                  		cmpi.w	#$280,d0
0000C110 6200 0000                  		bhi.w	DeleteObject
0000C114 4E75                       		rts	
0000C116                            ; ===========================================================================
0000C116                            
0000C116                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000C116 7400                       		moveq	#0,d2
0000C118                            
0000C118                            loc_B0E8:
0000C118 45E8 0036                  		lea	$36(a0),a2
0000C11C 1412                       		move.b	(a2),d2
0000C11E 421A                       		clr.b	(a2)+
0000C120 5302                       		subq.b	#1,d2
0000C122 6500                       		bcs.s	locret_B116
0000C124                            
0000C124                            loc_B0F4:
0000C124 7000                       		moveq	#0,d0
0000C126 1012                       		move.b	(a2),d0
0000C128 421A                       		clr.b	(a2)+
0000C12A ED48                       		lsl.w	#6,d0
0000C12C 0640 D000                  		addi.w	#-$3000,d0
0000C130 3240                       		movea.w	d0,a1
0000C132 6100 0000                  		bsr.w	DeleteObject2
0000C136 51CA FFEC                  		dbf	d2,loc_B0F4
0000C13A 117C 0000 0035             		move.b	#0,$35(a0)
0000C140 117C 0000 0034             		move.b	#0,$34(a0)
0000C146                            
0000C146                            locret_B116:
0000C146 4E75                       		rts	
0000C148                            ; ===========================================================================
0000C148                            ; ---------------------------------------------------------------------------
0000C148                            ; Collision data for large moving platforms (MZ)
0000C148                            ; ---------------------------------------------------------------------------
0000C148                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000C194                            		even
0000C194                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000C1C0                            		even
0000C1C0                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000C20C                            		even
0000C20C                            ; ===========================================================================
0000C20C                            ; ---------------------------------------------------------------------------
0000C20C                            ; Object 35 - fireball that sits on the	floor (MZ)
0000C20C                            ; (appears when	you walk on sinking platforms)
0000C20C                            ; ---------------------------------------------------------------------------
0000C20C                            
0000C20C                            Obj35:					; XREF: Obj_Index
0000C20C 7000                       		moveq	#0,d0
0000C20E 1028 0024                  		move.b	$24(a0),d0
0000C212 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000C216 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000C21A                            ; ===========================================================================
0000C21A 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000C21C 0000                       		dc.w loc_B238-Obj35_Index
0000C21E 0000                       		dc.w Obj35_Move-Obj35_Index
0000C220                            ; ===========================================================================
0000C220                            
0000C220                            Obj35_Main:				; XREF: Obj35_Index
0000C220 5428 0024                  		addq.b	#2,$24(a0)
0000C224 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000C22C 317C 0345 0002             		move.w	#$345,2(a0)
0000C232 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C238 117C 0004 0001             		move.b	#4,1(a0)
0000C23E 117C 0001 0018             		move.b	#1,$18(a0)
0000C244 117C 008B 0020             		move.b	#$8B,$20(a0)
0000C24A 117C 0008 0019             		move.b	#8,$19(a0)
0000C250 303C 00C8                  		move.w	#$C8,d0
0000C254 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play flame sound
0000C25A 4A28 0028                  		tst.b	$28(a0)
0000C25E 6700                       		beq.s	loc_B238
0000C260 5428 0024                  		addq.b	#2,$24(a0)
0000C264 6000 0000                  		bra.w	Obj35_Move
0000C268                            ; ===========================================================================
0000C268                            
0000C268                            loc_B238:				; XREF: Obj35_Index
0000C268 2268 0030                  		movea.l	$30(a0),a1
0000C26C 3228 0008                  		move.w	8(a0),d1
0000C270 9268 002A                  		sub.w	$2A(a0),d1
0000C274 0641 000C                  		addi.w	#$C,d1
0000C278 3001                       		move.w	d1,d0
0000C27A E248                       		lsr.w	#1,d0
0000C27C 1031 0000                  		move.b	(a1,d0.w),d0
0000C280 4440                       		neg.w	d0
0000C282 D068 002C                  		add.w	$2C(a0),d0
0000C286 3400                       		move.w	d0,d2
0000C288 D068 003C                  		add.w	$3C(a0),d0
0000C28C 3140 000C                  		move.w	d0,$C(a0)
0000C290 0C41 0084                  		cmpi.w	#$84,d1
0000C294 6400                       		bcc.s	loc_B2B0
0000C296 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C29E 0C41 0080                  		cmpi.w	#$80,d1
0000C2A2 6400                       		bcc.s	loc_B2B0
0000C2A4 2028 0008                  		move.l	8(a0),d0
0000C2A8 0680 0008 0000             		addi.l	#$80000,d0
0000C2AE 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000C2B4 6600                       		bne.s	loc_B2B0
0000C2B6 6100 0000                  		bsr.w	SingleObjLoad2
0000C2BA 6600                       		bne.s	loc_B2B0
0000C2BC 12BC 0035                  		move.b	#$35,0(a1)
0000C2C0 3368 0008 0008             		move.w	8(a0),8(a1)
0000C2C6 3342 002C                  		move.w	d2,$2C(a1)
0000C2CA 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000C2D0 137C 0001 0028             		move.b	#1,$28(a1)
0000C2D6 2468 0038                  		movea.l	$38(a0),a2
0000C2DA 6100 FDF0                  		bsr.w	sub_B09C
0000C2DE                            
0000C2DE                            loc_B2B0:
0000C2DE 6000                       		bra.s	Obj35_Animate
0000C2E0                            ; ===========================================================================
0000C2E0                            
0000C2E0                            Obj35_Move:				; XREF: Obj35_Index
0000C2E0 3028 002C                  		move.w	$2C(a0),d0
0000C2E4 D068 003C                  		add.w	$3C(a0),d0
0000C2E8 3140 000C                  		move.w	d0,$C(a0)
0000C2EC                            
0000C2EC                            Obj35_Animate:				; XREF: loc_B238
0000C2EC 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000C2F2 6100 F4AA                  		bsr.w	AnimateSprite
0000C2F6 6000 0000                  		bra.w	DisplaySprite
0000C2FA                            ; ===========================================================================
0000C2FA                            Ani_obj35:
0000C2FA                            	include "_anim\obj35.asm"
0000C2FA                            ; ---------------------------------------------------------------------------
0000C2FA                            ; Animation script - fireball that sits on the	floor (MZ)
0000C2FA                            ; ---------------------------------------------------------------------------
0000C2FA 0000                       		dc.w byte_B2CE-Ani_obj35
0000C2FC 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000C302                            		even
0000C302                            		even
0000C302                            
0000C302                            ; ---------------------------------------------------------------------------
0000C302                            ; Sprite mappings - large moving platforms (MZ)
0000C302                            ; ---------------------------------------------------------------------------
0000C302                            Map_obj2F:
0000C302                            	include "_maps\obj2F.asm"
0000C302                            ; ---------------------------------------------------------------------------
0000C302                            ; Sprite mappings - large moving platforms (MZ)
0000C302                            ; ---------------------------------------------------------------------------
0000C302 0000                       		dc.w byte_B2DA-Map_obj2F
0000C304 0000                       		dc.w byte_B31C-Map_obj2F
0000C306 0000                       		dc.w byte_B34F-Map_obj2F
0000C308 0D                         byte_B2DA:	dc.b $D
0000C309 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000C30E F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000C313 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C318 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000C31D F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000C322 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C327 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000C32C D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000C331 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000C336 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C33B 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000C340 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000C345 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000C34A 0A                         byte_B31C:	dc.b $A
0000C34B D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000C350 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000C355 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C35A C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000C35F E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000C364 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C369 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000C36E E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000C373 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000C378 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000C37D 06                         byte_B34F:	dc.b 6
0000C37E D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000C383 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C388 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000C38D D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000C392 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C397 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000C39C                            		even
0000C39C                            		even
0000C39C                            
0000C39C                            ; ---------------------------------------------------------------------------
0000C39C                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C39C                            ; ---------------------------------------------------------------------------
0000C39C                            Map_obj14:
0000C39C                            	include "_maps\obj14.asm"
0000C39C                            ; --------------------------------------------------------------------------------
0000C39C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C39C                            ; --------------------------------------------------------------------------------
0000C39C                            
0000C39C                            SME_C6wT7:	
0000C39C 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000C3A0 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000C3A4 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000C3A8 01                         SME_C6wT7_C:	dc.b 1	
0000C3A9 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000C3AE 01                         SME_C6wT7_12:	dc.b 1	
0000C3AF E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000C3B4 02                         SME_C6wT7_18:	dc.b 2	
0000C3B5 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000C3BA E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000C3BF 01                         SME_C6wT7_23:	dc.b 1	
0000C3C0 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000C3C5 01                         SME_C6wT7_29:	dc.b 1	
0000C3C6 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000C3CB 01                         SME_C6wT7_2F:	dc.b 1	
0000C3CC F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000C3D2 00                         		even
0000C3D2 00                         		even
0000C3D2                            
0000C3D2                            ; ===========================================================================
0000C3D2                            ; ---------------------------------------------------------------------------
0000C3D2                            ; Object 30 - large green glassy blocks	(MZ)
0000C3D2                            ; ---------------------------------------------------------------------------
0000C3D2                            
0000C3D2                            Obj30:					; XREF: Obj_Index
0000C3D2 7000                       		moveq	#0,d0
0000C3D4 1028 0024                  		move.b	$24(a0),d0
0000C3D8 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000C3DC 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000C3E0 3028 0008                  		move.w	8(a0),d0
0000C3E4 0240 FF80                  		andi.w	#$FF80,d0
0000C3E8 3238 F700                  		move.w	($FFFFF700).w,d1
0000C3EC 0441 0080                  		subi.w	#$80,d1
0000C3F0 0241 FF80                  		andi.w	#$FF80,d1
0000C3F4 9041                       		sub.w	d1,d0
0000C3F6 0C40 0280                  		cmpi.w	#$280,d0
0000C3FA 6200 0000                  		bhi.w	Obj30_Delete
0000C3FE 6000 0000                  		bra.w	DisplaySprite
0000C402                            ; ===========================================================================
0000C402                            
0000C402                            Obj30_Delete:
0000C402 6000 0000                  		bra.w	DeleteObject
0000C406                            ; ===========================================================================
0000C406 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000C408 0000                       		dc.w Obj30_Block012-Obj30_Index
0000C40A 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000C40C 0000                       		dc.w Obj30_Block34-Obj30_Index
0000C40E 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000C410                            
0000C410 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000C413 0400 01                    		dc.b 4,	0, 1
0000C416 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000C419 0800 01                    		dc.b 8,	0, 1
0000C41C                            ; ===========================================================================
0000C41C                            
0000C41C                            Obj30_Main:				; XREF: Obj30_Index
0000C41C 45F9 0000 C410             		lea	(Obj30_Vars1).l,a2
0000C422 7201                       		moveq	#1,d1
0000C424 117C 0048 0016             		move.b	#$48,$16(a0)
0000C42A 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000C430 6500                       		bcs.s	loc_B40C	; if yes, branch
0000C432 45F9 0000 C416             		lea	(Obj30_Vars2).l,a2
0000C438 7201                       		moveq	#1,d1
0000C43A 117C 0038 0016             		move.b	#$38,$16(a0)
0000C440                            
0000C440                            loc_B40C:
0000C440 2248                       		movea.l	a0,a1
0000C442 6000                       		bra.s	Obj30_Load	; load main object
0000C444                            ; ===========================================================================
0000C444                            
0000C444                            Obj30_Loop:
0000C444 6100 0000                  		bsr.w	SingleObjLoad2
0000C448 6600                       		bne.s	loc_B480
0000C44A                            
0000C44A                            Obj30_Load:				; XREF: Obj30_Main
0000C44A 135A 0024                  		move.b	(a2)+,$24(a1)
0000C44E 12BC 0030                  		move.b	#$30,0(a1)
0000C452 3368 0008 0008             		move.w	8(a0),8(a1)
0000C458 101A                       		move.b	(a2)+,d0
0000C45A 4880                       		ext.w	d0
0000C45C D068 000C                  		add.w	$C(a0),d0
0000C460 3340 000C                  		move.w	d0,$C(a1)
0000C464 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000C46C 337C C38E 0002             		move.w	#$C38E,2(a1)
0000C472 137C 0004 0001             		move.b	#4,1(a1)
0000C478 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C47E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C484 137C 0020 0019             		move.b	#$20,$19(a1)
0000C48A 137C 0004 0018             		move.b	#4,$18(a1)
0000C490 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C494 2348 003C                  		move.l	a0,$3C(a1)
0000C498 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000C49C                            
0000C49C 137C 0010 0019             		move.b	#$10,$19(a1)
0000C4A2 137C 0003 0018             		move.b	#3,$18(a1)
0000C4A8 5029 0028                  		addq.b	#8,$28(a1)
0000C4AC 0229 000F 0028             		andi.b	#$F,$28(a1)
0000C4B2                            
0000C4B2                            loc_B480:
0000C4B2 317C 0090 0032             		move.w	#$90,$32(a0)
0000C4B8 08E8 0004 0001             		bset	#4,1(a0)
0000C4BE                            
0000C4BE                            Obj30_Block012:				; XREF: Obj30_Index
0000C4BE 6100 0000                  		bsr.w	Obj30_Types
0000C4C2 323C 002B                  		move.w	#$2B,d1
0000C4C6 343C 0048                  		move.w	#$48,d2
0000C4CA 363C 0049                  		move.w	#$49,d3
0000C4CE 3828 0008                  		move.w	8(a0),d4
0000C4D2 6000 0000                  		bra.w	SolidObject
0000C4D6                            ; ===========================================================================
0000C4D6                            
0000C4D6                            Obj30_Reflect012:			; XREF: Obj30_Index
0000C4D6 2268 003C                  		movea.l	$3C(a0),a1
0000C4DA 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C4E0 6000 0000                  		bra.w	Obj30_Types
0000C4E4                            ; ===========================================================================
0000C4E4                            
0000C4E4                            Obj30_Block34:				; XREF: Obj30_Index
0000C4E4 6100 0000                  		bsr.w	Obj30_Types
0000C4E8 323C 002B                  		move.w	#$2B,d1
0000C4EC 343C 0038                  		move.w	#$38,d2
0000C4F0 363C 0039                  		move.w	#$39,d3
0000C4F4 3828 0008                  		move.w	8(a0),d4
0000C4F8 6000 0000                  		bra.w	SolidObject
0000C4FC                            ; ===========================================================================
0000C4FC                            
0000C4FC                            Obj30_Reflect34:			; XREF: Obj30_Index
0000C4FC 2268 003C                  		movea.l	$3C(a0),a1
0000C500 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C506 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000C50C 6000 0002                  		bra.w	*+4
0000C510                            
0000C510                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C510                            
0000C510                            
0000C510                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000C510 7000                       		moveq	#0,d0
0000C512 1028 0028                  		move.b	$28(a0),d0
0000C516 0240 0007                  		andi.w	#7,d0
0000C51A D040                       		add.w	d0,d0
0000C51C 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000C520 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000C524                            ; End of function Obj30_Types
0000C524                            
0000C524                            ; ===========================================================================
0000C524 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000C526 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000C528 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000C52A 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000C52C 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000C52E                            ; ===========================================================================
0000C52E                            
0000C52E                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000C52E 4E75                       		rts	
0000C530                            ; ===========================================================================
0000C530                            
0000C530                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000C530 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C534 323C 0040                  		move.w	#$40,d1
0000C538 6000                       		bra.s	loc_B514
0000C53A                            ; ===========================================================================
0000C53A                            
0000C53A                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000C53A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C53E 323C 0040                  		move.w	#$40,d1
0000C542 4440                       		neg.w	d0
0000C544 D041                       		add.w	d1,d0
0000C546                            
0000C546                            loc_B514:				; XREF: Obj30_Type01
0000C546 0828 0003 0028             		btst	#3,$28(a0)
0000C54C 6700                       		beq.s	loc_B526
0000C54E 4440                       		neg.w	d0
0000C550 D041                       		add.w	d1,d0
0000C552 E208                       		lsr.b	#1,d0
0000C554 0640 0020                  		addi.w	#$20,d0
0000C558                            
0000C558                            loc_B526:
0000C558 6000 0000                  		bra.w	loc_B5EE
0000C55C                            ; ===========================================================================
0000C55C                            
0000C55C                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C55C 0828 0003 0028             		btst	#3,$28(a0)
0000C562 6700                       		beq.s	loc_B53E
0000C564 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C568 0440 0010                  		subi.w	#$10,d0
0000C56C 6000 0000                  		bra.w	loc_B5EE
0000C570                            ; ===========================================================================
0000C570                            
0000C570                            loc_B53E:
0000C570 0828 0003 0022             		btst	#3,$22(a0)
0000C576 6600                       		bne.s	loc_B54E
0000C578 08A8 0000 0034             		bclr	#0,$34(a0)
0000C57E 6000                       		bra.s	loc_B582
0000C580                            ; ===========================================================================
0000C580                            
0000C580                            loc_B54E:
0000C580 4A28 0034                  		tst.b	$34(a0)
0000C584 6600                       		bne.s	loc_B582
0000C586 117C 0001 0034             		move.b	#1,$34(a0)
0000C58C 08E8 0000 0035             		bset	#0,$35(a0)
0000C592 6700                       		beq.s	loc_B582
0000C594 08E8 0007 0034             		bset	#7,$34(a0)
0000C59A 317C 0010 0036             		move.w	#$10,$36(a0)
0000C5A0 117C 000A 0038             		move.b	#$A,$38(a0)
0000C5A6 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C5AC 6600                       		bne.s	loc_B582
0000C5AE 317C 0040 0036             		move.w	#$40,$36(a0)
0000C5B4                            
0000C5B4                            loc_B582:
0000C5B4 4A28 0034                  		tst.b	$34(a0)
0000C5B8 6A00                       		bpl.s	loc_B5AA
0000C5BA 4A28 0038                  		tst.b	$38(a0)
0000C5BE 6700                       		beq.s	loc_B594
0000C5C0 5328 0038                  		subq.b	#1,$38(a0)
0000C5C4 6600                       		bne.s	loc_B5AA
0000C5C6                            
0000C5C6                            loc_B594:
0000C5C6 4A68 0032                  		tst.w	$32(a0)
0000C5CA 6700                       		beq.s	loc_B5A4
0000C5CC 5368 0032                  		subq.w	#1,$32(a0)
0000C5D0 5368 0036                  		subq.w	#1,$36(a0)
0000C5D4 6600                       		bne.s	loc_B5AA
0000C5D6                            
0000C5D6                            loc_B5A4:
0000C5D6 08A8 0007 0034             		bclr	#7,$34(a0)
0000C5DC                            
0000C5DC                            loc_B5AA:
0000C5DC 3028 0032                  		move.w	$32(a0),d0
0000C5E0 6000                       		bra.s	loc_B5EE
0000C5E2                            ; ===========================================================================
0000C5E2                            
0000C5E2                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C5E2 0828 0003 0028             		btst	#3,$28(a0)
0000C5E8 6700                       		beq.s	Obj30_ChkSwitch
0000C5EA 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C5EE 0440 0010                  		subi.w	#$10,d0
0000C5F2 6000                       		bra.s	loc_B5EE
0000C5F4                            ; ===========================================================================
0000C5F4                            
0000C5F4                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C5F4 4A28 0034                  		tst.b	$34(a0)
0000C5F8 6600                       		bne.s	loc_B5E0
0000C5FA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C5FE 7000                       		moveq	#0,d0
0000C600 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C604 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C606 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C60A 6700                       		beq.s	loc_B5EA	; if not, branch
0000C60C 117C 0001 0034             		move.b	#1,$34(a0)
0000C612                            
0000C612                            loc_B5E0:
0000C612 4A68 0032                  		tst.w	$32(a0)
0000C616 6700                       		beq.s	loc_B5EA
0000C618 5568 0032                  		subq.w	#2,$32(a0)
0000C61C                            
0000C61C                            loc_B5EA:
0000C61C 3028 0032                  		move.w	$32(a0),d0
0000C620                            
0000C620                            loc_B5EE:
0000C620 3228 0030                  		move.w	$30(a0),d1
0000C624 9240                       		sub.w	d0,d1
0000C626 3141 000C                  		move.w	d1,$C(a0)
0000C62A 4E75                       		rts	
0000C62C                            ; ===========================================================================
0000C62C                            ; ---------------------------------------------------------------------------
0000C62C                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C62C                            ; ---------------------------------------------------------------------------
0000C62C                            Map_obj30:
0000C62C                            	include "_maps\obj30.asm"
0000C62C                            ; ---------------------------------------------------------------------------
0000C62C                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C62C                            ; ---------------------------------------------------------------------------
0000C62C 0000                       		dc.w byte_B600-Map_obj30
0000C62E 0000                       		dc.w byte_B63D-Map_obj30
0000C630 0000                       		dc.w byte_B648-Map_obj30
0000C632 0C                         byte_B600:	dc.b $C
0000C633 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C638 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C63D C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C642 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C647 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C64C E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C651 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C656 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C65B 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C660 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C665 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C66A 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C66F 02                         byte_B63D:	dc.b 2
0000C670 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C675 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C67A 0A                         byte_B648:	dc.b $A
0000C67B C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C680 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C685 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C68A D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C68F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C694 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C699 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C69E 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C6A3 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C6A8 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C6AE 00                         		even
0000C6AE 00                         		even
0000C6AE                            
0000C6AE                            ; ===========================================================================
0000C6AE                            ; ---------------------------------------------------------------------------
0000C6AE                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C6AE                            ; ---------------------------------------------------------------------------
0000C6AE                            
0000C6AE                            Obj31:					; XREF: Obj_Index
0000C6AE 7000                       		moveq	#0,d0
0000C6B0 1028 0024                  		move.b	$24(a0),d0
0000C6B4 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C6B8 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C6BC                            ; ===========================================================================
0000C6BC 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C6BE 0000                       		dc.w loc_B798-Obj31_Index
0000C6C0 0000                       		dc.w loc_B7FE-Obj31_Index
0000C6C2 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C6C4 0000                       		dc.w loc_B7E2-Obj31_Index
0000C6C6                            
0000C6C6 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C6C8 0100                       		dc.b 1,	0
0000C6CA                            
0000C6CA 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C6CD 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C6D0 08CC 03                    		dc.b 8,	$CC, 3
0000C6D3 06F0 02                    		dc.b 6,	$F0, 2
0000C6D6                            
0000C6D6 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C6DA 5000 7800                  		dc.w $5000, $7800
0000C6DE 3800 5800                  		dc.w $3800, $5800
0000C6E2 B800                       		dc.w $B800
0000C6E4                            ; ===========================================================================
0000C6E4                            
0000C6E4                            Obj31_Main:				; XREF: Obj31_Index
0000C6E4 7000                       		moveq	#0,d0
0000C6E6 1028 0028                  		move.b	$28(a0),d0
0000C6EA 6A00                       		bpl.s	loc_B6CE
0000C6EC 0240 007F                  		andi.w	#$7F,d0
0000C6F0 D040                       		add.w	d0,d0
0000C6F2 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C6F6 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C6FA 101A                       		move.b	(a2)+,d0
0000C6FC 1140 0028                  		move.b	d0,$28(a0)
0000C700                            
0000C700                            loc_B6CE:
0000C700 0200 000F                  		andi.b	#$F,d0
0000C704 D040                       		add.w	d0,d0
0000C706 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C70A 4A40                       		tst.w	d0
0000C70C 6600                       		bne.s	loc_B6E0
0000C70E 3142 0032                  		move.w	d2,$32(a0)
0000C712                            
0000C712                            loc_B6E0:
0000C712 45F9 0000 C6CA             		lea	(Obj31_Var).l,a2
0000C718 2248                       		movea.l	a0,a1
0000C71A 7203                       		moveq	#3,d1
0000C71C 6000                       		bra.s	Obj31_MakeStomper
0000C71E                            ; ===========================================================================
0000C71E                            
0000C71E                            Obj31_Loop:
0000C71E 6100 0000                  		bsr.w	SingleObjLoad2
0000C722 6600 0000                  		bne.w	Obj31_SetSize
0000C726                            
0000C726                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C726 135A 0024                  		move.b	(a2)+,$24(a1)
0000C72A 12BC 0031                  		move.b	#$31,0(a1)
0000C72E 3368 0008 0008             		move.w	8(a0),8(a1)
0000C734 101A                       		move.b	(a2)+,d0
0000C736 4880                       		ext.w	d0
0000C738 D068 000C                  		add.w	$C(a0),d0
0000C73C 3340 000C                  		move.w	d0,$C(a1)
0000C740 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C748 337C 0300 0002             		move.w	#$300,2(a1)
0000C74E 137C 0004 0001             		move.b	#4,1(a1)
0000C754 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C75A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C760 137C 0010 0019             		move.b	#$10,$19(a1)
0000C766 3342 0034                  		move.w	d2,$34(a1)
0000C76A 137C 0004 0018             		move.b	#4,$18(a1)
0000C770 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C774 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C77A 6600                       		bne.s	loc_B76A
0000C77C 5341                       		subq.w	#1,d1
0000C77E 1028 0028                  		move.b	$28(a0),d0
0000C782 0240 00F0                  		andi.w	#$F0,d0
0000C786 0C40 0020                  		cmpi.w	#$20,d0
0000C78A 679A                       		beq.s	Obj31_MakeStomper
0000C78C 137C 0038 0019             		move.b	#$38,$19(a1)
0000C792 137C 0090 0020             		move.b	#$90,$20(a1)
0000C798 5241                       		addq.w	#1,d1
0000C79A                            
0000C79A                            loc_B76A:
0000C79A 2348 003C                  		move.l	a0,$3C(a1)
0000C79E 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C7A2                            
0000C7A2 137C 0003 0018             		move.b	#3,$18(a1)
0000C7A8                            
0000C7A8                            Obj31_SetSize:
0000C7A8 7000                       		moveq	#0,d0
0000C7AA 1028 0028                  		move.b	$28(a0),d0
0000C7AE E648                       		lsr.w	#3,d0
0000C7B0 0200 000E                  		andi.b	#$E,d0
0000C7B4 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C7B8 115A 0019                  		move.b	(a2)+,$19(a0)
0000C7BC 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C7C0 6000                       		bra.s	loc_B798
0000C7C2                            ; ===========================================================================
0000C7C2 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C7C4 3009                       		dc.b $30, 9
0000C7C6 100A                       		dc.b $10, $A
0000C7C8                            ; ===========================================================================
0000C7C8                            
0000C7C8                            loc_B798:				; XREF: Obj31_Index
0000C7C8 6100 0000                  		bsr.w	Obj31_Types
0000C7CC 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C7D2 7200                       		moveq	#0,d1
0000C7D4 1228 0019                  		move.b	$19(a0),d1
0000C7D8 0641 000B                  		addi.w	#$B,d1
0000C7DC 343C 000C                  		move.w	#$C,d2
0000C7E0 363C 000D                  		move.w	#$D,d3
0000C7E4 3828 0008                  		move.w	8(a0),d4
0000C7E8 6100 0000                  		bsr.w	SolidObject
0000C7EC 0828 0003 0022             		btst	#3,$22(a0)
0000C7F2 6700                       		beq.s	Obj31_Display
0000C7F4 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C7FA 6400                       		bcc.s	Obj31_Display
0000C7FC 2448                       		movea.l	a0,a2
0000C7FE 41F8 D000                  		lea	($FFFFD000).w,a0
0000C802 4EB9 0000 0000             		jsr	KillSonic
0000C808 204A                       		movea.l	a2,a0
0000C80A                            
0000C80A                            Obj31_Display:
0000C80A 6100 0000                  		bsr.w	DisplaySprite
0000C80E 6000 0000                  		bra.w	Obj31_ChkDel
0000C812                            ; ===========================================================================
0000C812                            
0000C812                            loc_B7E2:				; XREF: Obj31_Index
0000C812 117C 0080 0016             		move.b	#$80,$16(a0)
0000C818 08E8 0004 0001             		bset	#4,1(a0)
0000C81E 2268 003C                  		movea.l	$3C(a0),a1
0000C822 1029 0032                  		move.b	$32(a1),d0
0000C826 EA08                       		lsr.b	#5,d0
0000C828 5600                       		addq.b	#3,d0
0000C82A 1140 001A                  		move.b	d0,$1A(a0)
0000C82E                            
0000C82E                            loc_B7FE:				; XREF: Obj31_Index
0000C82E 2268 003C                  		movea.l	$3C(a0),a1
0000C832 7000                       		moveq	#0,d0
0000C834 1029 0032                  		move.b	$32(a1),d0
0000C838 D068 0030                  		add.w	$30(a0),d0
0000C83C 3140 000C                  		move.w	d0,$C(a0)
0000C840                            
0000C840                            Obj31_Display2:				; XREF: Obj31_Index
0000C840 6100 0000                  		bsr.w	DisplaySprite
0000C844                            
0000C844                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C844 3028 0008                  		move.w	8(a0),d0
0000C848 0240 FF80                  		andi.w	#$FF80,d0
0000C84C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C850 0441 0080                  		subi.w	#$80,d1
0000C854 0241 FF80                  		andi.w	#$FF80,d1
0000C858 9041                       		sub.w	d1,d0
0000C85A 0C40 0280                  		cmpi.w	#$280,d0
0000C85E 6200 0000                  		bhi.w	DeleteObject
0000C862 4E75                       		rts	
0000C864                            ; ===========================================================================
0000C864                            
0000C864                            Obj31_Types:				; XREF: loc_B798
0000C864 1028 0028                  		move.b	$28(a0),d0
0000C868 0240 000F                  		andi.w	#$F,d0
0000C86C D040                       		add.w	d0,d0
0000C86E 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C872 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C876                            ; ===========================================================================
0000C876 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C878 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C87A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C87C 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C87E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C880 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C882 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C884                            ; ===========================================================================
0000C884                            
0000C884                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C884 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C888 7000                       		moveq	#0,d0
0000C88A 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C88E 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C892 6700                       		beq.s	loc_B8A8	; if not, branch
0000C894 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C898 6A00                       		bpl.s	loc_B872
0000C89A 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C8A0 6700                       		beq.s	loc_B8A0
0000C8A2                            
0000C8A2                            loc_B872:
0000C8A2 4A68 0032                  		tst.w	$32(a0)
0000C8A6 6700                       		beq.s	loc_B8A0
0000C8A8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C8AC 0200 000F                  		andi.b	#$F,d0
0000C8B0 6600                       		bne.s	loc_B892
0000C8B2 4A28 0001                  		tst.b	1(a0)
0000C8B6 6A00                       		bpl.s	loc_B892
0000C8B8 303C 00C7                  		move.w	#$C7,d0
0000C8BC 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C8C2                            
0000C8C2                            loc_B892:
0000C8C2 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C8C8 6400                       		bcc.s	Obj31_Restart
0000C8CA 317C 0000 0032             		move.w	#0,$32(a0)
0000C8D0                            
0000C8D0                            loc_B8A0:
0000C8D0 317C 0000 0012             		move.w	#0,$12(a0)
0000C8D6 6000                       		bra.s	Obj31_Restart
0000C8D8                            ; ===========================================================================
0000C8D8                            
0000C8D8                            loc_B8A8:				; XREF: Obj31_Type00
0000C8D8 3228 0034                  		move.w	$34(a0),d1
0000C8DC B268 0032                  		cmp.w	$32(a0),d1
0000C8E0 6700                       		beq.s	Obj31_Restart
0000C8E2 3028 0012                  		move.w	$12(a0),d0
0000C8E6 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C8EC D168 0032                  		add.w	d0,$32(a0)
0000C8F0 B268 0032                  		cmp.w	$32(a0),d1
0000C8F4 6200                       		bhi.s	Obj31_Restart
0000C8F6 3141 0032                  		move.w	d1,$32(a0)
0000C8FA 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C900 4A28 0001                  		tst.b	1(a0)
0000C904 6A00                       		bpl.s	Obj31_Restart
0000C906 303C 00BD                  		move.w	#$BD,d0
0000C90A 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C910                            
0000C910                            Obj31_Restart:
0000C910 7000                       		moveq	#0,d0
0000C912 1028 0032                  		move.b	$32(a0),d0
0000C916 D068 0030                  		add.w	$30(a0),d0
0000C91A 3140 000C                  		move.w	d0,$C(a0)
0000C91E 4E75                       		rts	
0000C920                            ; ===========================================================================
0000C920                            
0000C920                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C920 4A68 0036                  		tst.w	$36(a0)
0000C924 6700                       		beq.s	loc_B938
0000C926 4A68 0038                  		tst.w	$38(a0)
0000C92A 6700                       		beq.s	loc_B902
0000C92C 5368 0038                  		subq.w	#1,$38(a0)
0000C930 6000                       		bra.s	loc_B97C
0000C932                            ; ===========================================================================
0000C932                            
0000C932                            loc_B902:
0000C932 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C936 0200 000F                  		andi.b	#$F,d0
0000C93A 6600                       		bne.s	loc_B91C
0000C93C 4A28 0001                  		tst.b	1(a0)
0000C940 6A00                       		bpl.s	loc_B91C
0000C942 303C 00C7                  		move.w	#$C7,d0
0000C946 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C94C                            
0000C94C                            loc_B91C:
0000C94C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C952 6400                       		bcc.s	loc_B97C
0000C954 317C 0000 0032             		move.w	#0,$32(a0)
0000C95A 317C 0000 0012             		move.w	#0,$12(a0)
0000C960 317C 0000 0036             		move.w	#0,$36(a0)
0000C966 6000                       		bra.s	loc_B97C
0000C968                            ; ===========================================================================
0000C968                            
0000C968                            loc_B938:				; XREF: Obj31_Type01
0000C968 3228 0034                  		move.w	$34(a0),d1
0000C96C B268 0032                  		cmp.w	$32(a0),d1
0000C970 6700                       		beq.s	loc_B97C
0000C972 3028 0012                  		move.w	$12(a0),d0
0000C976 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C97C D168 0032                  		add.w	d0,$32(a0)
0000C980 B268 0032                  		cmp.w	$32(a0),d1
0000C984 6200                       		bhi.s	loc_B97C
0000C986 3141 0032                  		move.w	d1,$32(a0)
0000C98A 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C990 317C 0001 0036             		move.w	#1,$36(a0)
0000C996 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C99C 4A28 0001                  		tst.b	1(a0)
0000C9A0 6A00                       		bpl.s	loc_B97C
0000C9A2 303C 00BD                  		move.w	#$BD,d0
0000C9A6 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C9AC                            
0000C9AC                            loc_B97C:
0000C9AC 6000 FF62                  		bra.w	Obj31_Restart
0000C9B0                            ; ===========================================================================
0000C9B0                            
0000C9B0                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C9B0 3038 D008                  		move.w	($FFFFD008).w,d0
0000C9B4 9068 0008                  		sub.w	8(a0),d0
0000C9B8 6400                       		bcc.s	loc_B98C
0000C9BA 4440                       		neg.w	d0
0000C9BC                            
0000C9BC                            loc_B98C:
0000C9BC 0C40 0090                  		cmpi.w	#$90,d0
0000C9C0 6400                       		bcc.s	loc_B996
0000C9C2 5228 0028                  		addq.b	#1,$28(a0)
0000C9C6                            
0000C9C6                            loc_B996:
0000C9C6 6000 FF48                  		bra.w	Obj31_Restart
0000C9CA                            ; ===========================================================================
0000C9CA                            ; ---------------------------------------------------------------------------
0000C9CA                            ; Object 45 - spiked metal block from beta version (MZ)
0000C9CA                            ; ---------------------------------------------------------------------------
0000C9CA                            
0000C9CA                            Obj45:					; XREF: Obj_Index
0000C9CA 7000                       		moveq	#0,d0
0000C9CC 1028 0024                  		move.b	$24(a0),d0
0000C9D0 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C9D4 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C9D8                            ; ===========================================================================
0000C9D8 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C9DA 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C9DC 0000                       		dc.w loc_BA8E-Obj45_Index
0000C9DE 0000                       		dc.w Obj45_Display-Obj45_Index
0000C9E0 0000                       		dc.w loc_BA7A-Obj45_Index
0000C9E2                            
0000C9E2 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C9E5 04E4 01                    		dc.b	4, $E4,	  1
0000C9E8 0834 03                    		dc.b	8, $34,	  3
0000C9EB 0628 02                    		dc.b	6, $28,	  2
0000C9EE                            
0000C9EE 3800                       word_B9BE:	dc.w $3800
0000C9F0 A000                       		dc.w -$6000
0000C9F2 5000                       		dc.w $5000
0000C9F4                            ; ===========================================================================
0000C9F4                            
0000C9F4                            Obj45_Main:				; XREF: Obj45_Index
0000C9F4 7000                       		moveq	#0,d0
0000C9F6 1028 0028                  		move.b	$28(a0),d0
0000C9FA D040                       		add.w	d0,d0
0000C9FC 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000CA00 45F9 0000 C9E2             		lea	(Obj45_Var).l,a2
0000CA06 2248                       		movea.l	a0,a1
0000CA08 7203                       		moveq	#3,d1
0000CA0A 6000                       		bra.s	Obj45_Load
0000CA0C                            ; ===========================================================================
0000CA0C                            
0000CA0C                            Obj45_Loop:
0000CA0C 6100 0000                  		bsr.w	SingleObjLoad2
0000CA10 6600                       		bne.s	loc_BA52
0000CA12                            
0000CA12                            Obj45_Load:				; XREF: Obj45_Main
0000CA12 135A 0024                  		move.b	(a2)+,$24(a1)
0000CA16 12BC 0045                  		move.b	#$45,0(a1)
0000CA1A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CA20 101A                       		move.b	(a2)+,d0
0000CA22 4880                       		ext.w	d0
0000CA24 D068 0008                  		add.w	8(a0),d0
0000CA28 3340 0008                  		move.w	d0,8(a1)
0000CA2C 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000CA34 337C 0300 0002             		move.w	#$300,2(a1)
0000CA3A 137C 0004 0001             		move.b	#4,1(a1)
0000CA40 3369 0008 0030             		move.w	8(a1),$30(a1)
0000CA46 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000CA4C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CA52 137C 0020 0019             		move.b	#$20,$19(a1)
0000CA58 3342 0034                  		move.w	d2,$34(a1)
0000CA5C 137C 0004 0018             		move.b	#4,$18(a1)
0000CA62 0C12 0001                  		cmpi.b	#1,(a2)
0000CA66 6600                       		bne.s	loc_BA40
0000CA68 137C 0091 0020             		move.b	#$91,$20(a1)
0000CA6E                            
0000CA6E                            loc_BA40:
0000CA6E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CA72 2348 003C                  		move.l	a0,$3C(a1)
0000CA76 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000CA7A                            
0000CA7A 137C 0003 0018             		move.b	#3,$18(a1)
0000CA80                            
0000CA80                            loc_BA52:
0000CA80 117C 0010 0019             		move.b	#$10,$19(a0)
0000CA86                            
0000CA86                            Obj45_Solid:				; XREF: Obj45_Index
0000CA86 3F28 0008                  		move.w	8(a0),-(sp)
0000CA8A 6100 0000                  		bsr.w	Obj45_Move
0000CA8E 323C 0017                  		move.w	#$17,d1
0000CA92 343C 0020                  		move.w	#$20,d2
0000CA96 363C 0020                  		move.w	#$20,d3
0000CA9A 381F                       		move.w	(sp)+,d4
0000CA9C 6100 0000                  		bsr.w	SolidObject
0000CAA0 6100 0000                  		bsr.w	DisplaySprite
0000CAA4 6000 0000                  		bra.w	Obj45_ChkDel
0000CAA8                            ; ===========================================================================
0000CAA8                            
0000CAA8                            loc_BA7A:				; XREF: Obj45_Index
0000CAA8 2268 003C                  		movea.l	$3C(a0),a1
0000CAAC 1029 0032                  		move.b	$32(a1),d0
0000CAB0 0600 0010                  		addi.b	#$10,d0
0000CAB4 EA08                       		lsr.b	#5,d0
0000CAB6 5600                       		addq.b	#3,d0
0000CAB8 1140 001A                  		move.b	d0,$1A(a0)
0000CABC                            
0000CABC                            loc_BA8E:				; XREF: Obj45_Index
0000CABC 2268 003C                  		movea.l	$3C(a0),a1
0000CAC0 7000                       		moveq	#0,d0
0000CAC2 1029 0032                  		move.b	$32(a1),d0
0000CAC6 4440                       		neg.w	d0
0000CAC8 D068 0030                  		add.w	$30(a0),d0
0000CACC 3140 0008                  		move.w	d0,8(a0)
0000CAD0                            
0000CAD0                            Obj45_Display:				; XREF: Obj45_Index
0000CAD0 6100 0000                  		bsr.w	DisplaySprite
0000CAD4                            
0000CAD4                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000CAD4 3028 003A                  		move.w	$3A(a0),d0
0000CAD8 0240 FF80                  		andi.w	#$FF80,d0
0000CADC 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAE0 0441 0080                  		subi.w	#$80,d1
0000CAE4 0241 FF80                  		andi.w	#$FF80,d1
0000CAE8 9041                       		sub.w	d1,d0
0000CAEA 0C40 0280                  		cmpi.w	#$280,d0
0000CAEE 6200 0000                  		bhi.w	DeleteObject
0000CAF2 4E75                       		rts	
0000CAF4                            
0000CAF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CAF4                            
0000CAF4                            
0000CAF4                            Obj45_Move:				; XREF: Obj45_Solid
0000CAF4 7000                       		moveq	#0,d0
0000CAF6 1028 0028                  		move.b	$28(a0),d0
0000CAFA D040                       		add.w	d0,d0
0000CAFC 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000CB00 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000CB04                            ; End of function Obj45_Move
0000CB04                            
0000CB04                            ; ===========================================================================
0000CB04 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000CB06 0000                       		dc.w loc_BADA-off_BAD6
0000CB08                            ; ===========================================================================
0000CB08                            
0000CB08                            loc_BADA:				; XREF: off_BAD6
0000CB08 4A68 0036                  		tst.w	$36(a0)
0000CB0C 6700                       		beq.s	loc_BB08
0000CB0E 4A68 0038                  		tst.w	$38(a0)
0000CB12 6700                       		beq.s	loc_BAEC
0000CB14 5368 0038                  		subq.w	#1,$38(a0)
0000CB18 6000                       		bra.s	loc_BB3C
0000CB1A                            ; ===========================================================================
0000CB1A                            
0000CB1A                            loc_BAEC:
0000CB1A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CB20 6400                       		bcc.s	loc_BB3C
0000CB22 317C 0000 0032             		move.w	#0,$32(a0)
0000CB28 317C 0000 0010             		move.w	#0,$10(a0)
0000CB2E 317C 0000 0036             		move.w	#0,$36(a0)
0000CB34 6000                       		bra.s	loc_BB3C
0000CB36                            ; ===========================================================================
0000CB36                            
0000CB36                            loc_BB08:				; XREF: loc_BADA
0000CB36 3228 0034                  		move.w	$34(a0),d1
0000CB3A B268 0032                  		cmp.w	$32(a0),d1
0000CB3E 6700                       		beq.s	loc_BB3C
0000CB40 3028 0010                  		move.w	$10(a0),d0
0000CB44 0668 0070 0010             		addi.w	#$70,$10(a0)
0000CB4A D168 0032                  		add.w	d0,$32(a0)
0000CB4E B268 0032                  		cmp.w	$32(a0),d1
0000CB52 6200                       		bhi.s	loc_BB3C
0000CB54 3141 0032                  		move.w	d1,$32(a0)
0000CB58 317C 0000 0010             		move.w	#0,$10(a0)
0000CB5E 317C 0001 0036             		move.w	#1,$36(a0)
0000CB64 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CB6A                            
0000CB6A                            loc_BB3C:
0000CB6A 7000                       		moveq	#0,d0
0000CB6C 1028 0032                  		move.b	$32(a0),d0
0000CB70 4440                       		neg.w	d0
0000CB72 D068 0030                  		add.w	$30(a0),d0
0000CB76 3140 0008                  		move.w	d0,8(a0)
0000CB7A 4E75                       		rts	
0000CB7C                            ; ===========================================================================
0000CB7C                            ; ---------------------------------------------------------------------------
0000CB7C                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CB7C                            ; ---------------------------------------------------------------------------
0000CB7C                            Map_obj31:
0000CB7C                            	include "_maps\obj31.asm"
0000CB7C                            ; ---------------------------------------------------------------------------
0000CB7C                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CB7C                            ; ---------------------------------------------------------------------------
0000CB7C 0000                       		dc.w byte_BB64-Map_obj31
0000CB7E 0000                       		dc.w byte_BB7E-Map_obj31
0000CB80 0000                       		dc.w byte_BB98-Map_obj31
0000CB82 0000                       		dc.w byte_BB9E-Map_obj31
0000CB84 0000                       		dc.w byte_BBA9-Map_obj31
0000CB86 0000                       		dc.w byte_BBBE-Map_obj31
0000CB88 0000                       		dc.w byte_BBDD-Map_obj31
0000CB8A 0000                       		dc.w byte_BC06-Map_obj31
0000CB8C 0000                       		dc.w byte_BC06-Map_obj31
0000CB8E 0000                       		dc.w byte_BC39-Map_obj31
0000CB90 0000                       		dc.w byte_BC53-Map_obj31
0000CB92 05                         byte_BB64:	dc.b 5
0000CB93 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000CB98 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000CB9D EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CBA2 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000CBA7 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000CBAC 05                         byte_BB7E:	dc.b 5
0000CBAD F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000CBB2 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000CBB7 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000CBBC F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000CBC1 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000CBC6 01                         byte_BB98:	dc.b 1
0000CBC7 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000CBCC 02                         byte_BB9E:	dc.b 2
0000CBCD 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CBD2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CBD7 04                         byte_BBA9:	dc.b 4
0000CBD8 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CBDD F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CBE2 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CBE7 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CBEC 06                         byte_BBBE:	dc.b 6
0000CBED C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CBF2 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CBF7 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CBFC F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CC01 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CC06 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CC0B 08                         byte_BBDD:	dc.b 8
0000CC0C A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CC11 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CC16 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CC1B D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CC20 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CC25 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CC2A 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CC2F 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CC34 0A                         byte_BC06:	dc.b $A
0000CC35 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000CC3A 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000CC3F A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CC44 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CC49 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CC4E D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CC53 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CC58 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CC5D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CC62 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CC67 05                         byte_BC39:	dc.b 5
0000CC68 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000CC6D F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000CC72 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000CC77 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000CC7C EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CC81 01                         byte_BC53:	dc.b 1
0000CC82 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000CC88 00                         		even
0000CC88 00                         		even
0000CC88                            
0000CC88                            ; ---------------------------------------------------------------------------
0000CC88                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CC88                            ; ---------------------------------------------------------------------------
0000CC88                            Map_obj45:
0000CC88                            	include "_maps\obj45.asm"
0000CC88                            ; ---------------------------------------------------------------------------
0000CC88                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CC88                            ; ---------------------------------------------------------------------------
0000CC88 0000                       		dc.w byte_BC6C-Map_obj45
0000CC8A 0000                       		dc.w byte_BC7C-Map_obj45
0000CC8C 0000                       		dc.w byte_BC8C-Map_obj45
0000CC8E 0000                       		dc.w byte_BC92-Map_obj45
0000CC90 0000                       		dc.w byte_BC9D-Map_obj45
0000CC92 0000                       		dc.w byte_BCB2-Map_obj45
0000CC94 0000                       		dc.w byte_BCD1-Map_obj45
0000CC96 0000                       		dc.w byte_BCFA-Map_obj45
0000CC98 0000                       		dc.w byte_BCFA-Map_obj45
0000CC9A 03                         byte_BC6C:	dc.b 3
0000CC9B E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000CCA0 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000CCA5 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000CCAA 03                         byte_BC7C:	dc.b 3
0000CCAB E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000CCB0 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000CCB5 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000CCBA 01                         byte_BC8C:	dc.b 1
0000CCBB F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000CCC0 02                         byte_BC92:	dc.b 2
0000CCC1 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CCC6 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CCCB 04                         byte_BC9D:	dc.b 4
0000CCCC F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CCD1 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CCD6 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CCDB F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CCE0 06                         byte_BCB2:	dc.b 6
0000CCE1 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CCE6 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CCEB F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CCF0 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CCF5 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CCFA F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CCFF 08                         byte_BCD1:	dc.b 8
0000CD00 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CD05 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CD0A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CD0F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CD14 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CD19 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CD1E F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000CD23 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000CD28 08                         byte_BCFA:	dc.b 8
0000CD29 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CD2E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CD33 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CD38 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CD3D F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CD42 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CD47 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000CD4C F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000CD51 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000CD56 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000CD5C 00                         		even
0000CD5C 00                         		even
0000CD5C                            
0000CD5C                            ; ===========================================================================
0000CD5C                            ; ---------------------------------------------------------------------------
0000CD5C                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000CD5C                            ; ---------------------------------------------------------------------------
0000CD5C                            
0000CD5C                            Obj32:					; XREF: Obj_Index
0000CD5C 7000                       		moveq	#0,d0
0000CD5E 1028 0024                  		move.b	$24(a0),d0
0000CD62 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000CD66 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000CD6A                            ; ===========================================================================
0000CD6A 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000CD6C 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000CD6E                            ; ===========================================================================
0000CD6E                            
0000CD6E                            Obj32_Main:				; XREF: Obj32_Index
0000CD6E 5428 0024                  		addq.b	#2,$24(a0)
0000CD72 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000CD7A 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000CD80 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000CD86 6700                       		beq.s	loc_BD60
0000CD88 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000CD8E                            
0000CD8E                            loc_BD60:
0000CD8E 117C 0004 0001             		move.b	#4,1(a0)
0000CD94 117C 0010 0019             		move.b	#$10,$19(a0)
0000CD9A 117C 0004 0018             		move.b	#4,$18(a0)
0000CDA0 5668 000C                  		addq.w	#3,$C(a0)
0000CDA4                            
0000CDA4                            Obj32_Pressed:				; XREF: Obj32_Index
0000CDA4 4A28 0001                  		tst.b	1(a0)
0000CDA8 6A00                       		bpl.s	Obj32_Display
0000CDAA 323C 001B                  		move.w	#$1B,d1
0000CDAE 343C 0005                  		move.w	#5,d2
0000CDB2 363C 0005                  		move.w	#5,d3
0000CDB6 3828 0008                  		move.w	8(a0),d4
0000CDBA 6100 0000                  		bsr.w	SolidObject
0000CDBE 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000CDC4 1028 0028                  		move.b	$28(a0),d0
0000CDC8 0240 000F                  		andi.w	#$F,d0
0000CDCC 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000CDD0 47F3 0000                  		lea	(a3,d0.w),a3
0000CDD4 7600                       		moveq	#0,d3
0000CDD6 0828 0006 0028             		btst	#6,$28(a0)
0000CDDC 6700                       		beq.s	loc_BDB2
0000CDDE 7607                       		moveq	#7,d3
0000CDE0                            
0000CDE0                            loc_BDB2:
0000CDE0 4A28 0028                  		tst.b	$28(a0)
0000CDE4 6A00                       		bpl.s	loc_BDBE
0000CDE6 6100 0000                  		bsr.w	Obj32_MZBlock
0000CDEA 6600                       		bne.s	loc_BDC8
0000CDEC                            
0000CDEC                            loc_BDBE:
0000CDEC 4A28 0025                  		tst.b	$25(a0)
0000CDF0 6600                       		bne.s	loc_BDC8
0000CDF2 0793                       		bclr	d3,(a3)
0000CDF4 6000                       		bra.s	loc_BDDE
0000CDF6                            ; ===========================================================================
0000CDF6                            
0000CDF6                            loc_BDC8:
0000CDF6 4A13                       		tst.b	(a3)
0000CDF8 6600                       		bne.s	loc_BDD6
0000CDFA 303C 00CD                  		move.w	#$CD,d0
0000CDFE 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play switch sound
0000CE04                            
0000CE04                            loc_BDD6:
0000CE04 07D3                       		bset	d3,(a3)
0000CE06 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000CE0C                            
0000CE0C                            loc_BDDE:
0000CE0C 0828 0005 0028             		btst	#5,$28(a0)
0000CE12 6700                       		beq.s	Obj32_Display
0000CE14 5328 001E                  		subq.b	#1,$1E(a0)
0000CE18 6A00                       		bpl.s	Obj32_Display
0000CE1A 117C 0007 001E             		move.b	#7,$1E(a0)
0000CE20 0868 0001 001A             		bchg	#1,$1A(a0)
0000CE26                            
0000CE26                            Obj32_Display:
0000CE26 6100 0000                  		bsr.w	DisplaySprite
0000CE2A 3028 0008                  		move.w	8(a0),d0
0000CE2E 0240 FF80                  		andi.w	#$FF80,d0
0000CE32 3238 F700                  		move.w	($FFFFF700).w,d1
0000CE36 0441 0080                  		subi.w	#$80,d1
0000CE3A 0241 FF80                  		andi.w	#$FF80,d1
0000CE3E 9041                       		sub.w	d1,d0
0000CE40 0C40 0280                  		cmpi.w	#$280,d0
0000CE44 6200 0000                  		bhi.w	Obj32_Delete
0000CE48 4E75                       		rts	
0000CE4A                            ; ===========================================================================
0000CE4A                            
0000CE4A                            Obj32_Delete:
0000CE4A 6100 0000                  		bsr.w	DeleteObject
0000CE4E 4E75                       		rts	
0000CE50                            
0000CE50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CE50                            
0000CE50                            
0000CE50                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000CE50 3F03                       		move.w	d3,-(sp)
0000CE52 3428 0008                  		move.w	8(a0),d2
0000CE56 3628 000C                  		move.w	$C(a0),d3
0000CE5A 0442 0010                  		subi.w	#$10,d2
0000CE5E 5143                       		subq.w	#8,d3
0000CE60 383C 0020                  		move.w	#$20,d4
0000CE64 3A3C 0010                  		move.w	#$10,d5
0000CE68 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000CE6C 3C3C 005F                  		move.w	#$5F,d6
0000CE70                            
0000CE70                            Obj32_MZLoop:
0000CE70 4A29 0001                  		tst.b	1(a1)
0000CE74 6A00                       		bpl.s	loc_BE4E
0000CE76 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000CE7A 6700                       		beq.s	loc_BE5E	; if yes, branch
0000CE7C                            
0000CE7C                            loc_BE4E:
0000CE7C 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000CE80 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000CE84                            
0000CE84 361F                       		move.w	(sp)+,d3
0000CE86 7000                       		moveq	#0,d0
0000CE88                            
0000CE88                            locret_BE5A:
0000CE88 4E75                       		rts	
0000CE8A                            ; ===========================================================================
0000CE8A 1010                       Obj32_MZData:	dc.b $10, $10
0000CE8C                            ; ===========================================================================
0000CE8C                            
0000CE8C                            loc_BE5E:				; XREF: Obj32_MZBlock
0000CE8C 7001                       		moveq	#1,d0
0000CE8E 0240 003F                  		andi.w	#$3F,d0
0000CE92 D040                       		add.w	d0,d0
0000CE94 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000CE98 121A                       		move.b	(a2)+,d1
0000CE9A 4881                       		ext.w	d1
0000CE9C 3029 0008                  		move.w	8(a1),d0
0000CEA0 9041                       		sub.w	d1,d0
0000CEA2 9042                       		sub.w	d2,d0
0000CEA4 6400                       		bcc.s	loc_BE80
0000CEA6 D241                       		add.w	d1,d1
0000CEA8 D041                       		add.w	d1,d0
0000CEAA 6500                       		bcs.s	loc_BE84
0000CEAC 60CE                       		bra.s	loc_BE4E
0000CEAE                            ; ===========================================================================
0000CEAE                            
0000CEAE                            loc_BE80:
0000CEAE B044                       		cmp.w	d4,d0
0000CEB0 62CA                       		bhi.s	loc_BE4E
0000CEB2                            
0000CEB2                            loc_BE84:
0000CEB2 121A                       		move.b	(a2)+,d1
0000CEB4 4881                       		ext.w	d1
0000CEB6 3029 000C                  		move.w	$C(a1),d0
0000CEBA 9041                       		sub.w	d1,d0
0000CEBC 9043                       		sub.w	d3,d0
0000CEBE 6400                       		bcc.s	loc_BE9A
0000CEC0 D241                       		add.w	d1,d1
0000CEC2 D041                       		add.w	d1,d0
0000CEC4 6500                       		bcs.s	loc_BE9E
0000CEC6 60B4                       		bra.s	loc_BE4E
0000CEC8                            ; ===========================================================================
0000CEC8                            
0000CEC8                            loc_BE9A:
0000CEC8 B045                       		cmp.w	d5,d0
0000CECA 62B0                       		bhi.s	loc_BE4E
0000CECC                            
0000CECC                            loc_BE9E:
0000CECC 361F                       		move.w	(sp)+,d3
0000CECE 7001                       		moveq	#1,d0
0000CED0 4E75                       		rts	
0000CED2                            ; End of function Obj32_MZBlock
0000CED2                            
0000CED2                            ; ===========================================================================
0000CED2                            ; ---------------------------------------------------------------------------
0000CED2                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000CED2                            ; ---------------------------------------------------------------------------
0000CED2                            Map_obj32:
0000CED2                            	include "_maps\obj32.asm"
0000CED2                            ; ---------------------------------------------------------------------------
0000CED2                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000CED2                            ; ---------------------------------------------------------------------------
0000CED2 0000                       		dc.w byte_BEAC-Map_obj32
0000CED4 0000                       		dc.w byte_BEB7-Map_obj32
0000CED6 0000                       		dc.w byte_BEC2-Map_obj32
0000CED8 0000                       		dc.w byte_BEB7-Map_obj32
0000CEDA 02                         byte_BEAC:	dc.b 2
0000CEDB F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000CEE0 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000CEE5 02                         byte_BEB7:	dc.b 2
0000CEE6 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000CEEB F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000CEF0 02                         byte_BEC2:	dc.b 2
0000CEF1 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000CEF6 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000CEFB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000CF00                            		even
0000CF00                            		even
0000CF00                            
0000CF00                            ; ===========================================================================
0000CF00                            ; ---------------------------------------------------------------------------
0000CF00                            ; Object 33 - pushable blocks (MZ, LZ)
0000CF00                            ; ---------------------------------------------------------------------------
0000CF00                            
0000CF00                            Obj33:					; XREF: Obj_Index
0000CF00 7000                       		moveq	#0,d0
0000CF02 1028 0024                  		move.b	$24(a0),d0
0000CF06 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000CF0A 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000CF0E                            ; ===========================================================================
0000CF0E 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000CF10 0000                       		dc.w loc_BF6E-Obj33_Index
0000CF12 0000                       		dc.w loc_C02C-Obj33_Index
0000CF14                            
0000CF14 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000CF16 4001                       		dc.b $40, 1
0000CF18                            ; ===========================================================================
0000CF18                            
0000CF18                            Obj33_Main:				; XREF: Obj33_Index
0000CF18 5428 0024                  		addq.b	#2,$24(a0)
0000CF1C 117C 000F 0016             		move.b	#$F,$16(a0)
0000CF22 117C 000F 0017             		move.b	#$F,$17(a0)
0000CF28 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000CF30 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000CF36 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000CF3C 6600                       		bne.s	loc_BF16
0000CF3E 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000CF44                            
0000CF44                            loc_BF16:
0000CF44 117C 0004 0001             		move.b	#4,1(a0)
0000CF4A 117C 0003 0018             		move.b	#3,$18(a0)
0000CF50 3168 0008 0034             		move.w	8(a0),$34(a0)
0000CF56 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000CF5C 7000                       		moveq	#0,d0
0000CF5E 1028 0028                  		move.b	$28(a0),d0
0000CF62 D040                       		add.w	d0,d0
0000CF64 0240 000E                  		andi.w	#$E,d0
0000CF68 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000CF6C 115A 0019                  		move.b	(a2)+,$19(a0)
0000CF70 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CF74 4A28 0028                  		tst.b	$28(a0)
0000CF78 6700                       		beq.s	Obj33_ChkGone
0000CF7A 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000CF80                            
0000CF80                            Obj33_ChkGone:
0000CF80 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CF84 7000                       		moveq	#0,d0
0000CF86 1028 0023                  		move.b	$23(a0),d0
0000CF8A 6700                       		beq.s	loc_BF6E
0000CF8C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000CF92 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000CF98 6600 0000                  		bne.w	DeleteObject
0000CF9C                            
0000CF9C                            loc_BF6E:				; XREF: Obj33_Index
0000CF9C 4A28 0032                  		tst.b	$32(a0)
0000CFA0 6600 0000                  		bne.w	loc_C046
0000CFA4 7200                       		moveq	#0,d1
0000CFA6 1228 0019                  		move.b	$19(a0),d1
0000CFAA 0641 000B                  		addi.w	#$B,d1
0000CFAE 343C 0010                  		move.w	#$10,d2
0000CFB2 363C 0011                  		move.w	#$11,d3
0000CFB6 3828 0008                  		move.w	8(a0),d4
0000CFBA 6100 0000                  		bsr.w	loc_C186
0000CFBE 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000CFC4 6600                       		bne.s	loc_BFC6	; if not, branch
0000CFC6 08A8 0007 0028             		bclr	#7,$28(a0)
0000CFCC 3028 0008                  		move.w	8(a0),d0
0000CFD0 0C40 0A20                  		cmpi.w	#$A20,d0
0000CFD4 6500                       		bcs.s	loc_BFC6
0000CFD6 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000CFDA 6400                       		bcc.s	loc_BFC6
0000CFDC 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000CFE0 0440 001C                  		subi.w	#$1C,d0
0000CFE4 3140 000C                  		move.w	d0,$C(a0)
0000CFE8 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000CFEE 08E8 0007 0028             		bset	#7,$28(a0)
0000CFF4                            
0000CFF4                            loc_BFC6:
0000CFF4 3028 0008                  		move.w	8(a0),d0
0000CFF8 0240 FF80                  		andi.w	#$FF80,d0
0000CFFC 3238 F700                  		move.w	($FFFFF700).w,d1
0000D000 0441 0080                  		subi.w	#$80,d1
0000D004 0241 FF80                  		andi.w	#$FF80,d1
0000D008 9041                       		sub.w	d1,d0
0000D00A 0C40 0280                  		cmpi.w	#$280,d0
0000D00E 6200                       		bhi.s	loc_BFE6
0000D010 6000 0000                  		bra.w	DisplaySprite
0000D014                            ; ===========================================================================
0000D014                            
0000D014                            loc_BFE6:
0000D014 3028 0034                  		move.w	$34(a0),d0
0000D018 0240 FF80                  		andi.w	#$FF80,d0
0000D01C 3238 F700                  		move.w	($FFFFF700).w,d1
0000D020 0441 0080                  		subi.w	#$80,d1
0000D024 0241 FF80                  		andi.w	#$FF80,d1
0000D028 9041                       		sub.w	d1,d0
0000D02A 0C40 0280                  		cmpi.w	#$280,d0
0000D02E 6200                       		bhi.s	loc_C016
0000D030 3168 0034 0008             		move.w	$34(a0),8(a0)
0000D036 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000D03C 117C 0004 0024             		move.b	#4,$24(a0)
0000D042 6000                       		bra.s	loc_C02C
0000D044                            ; ===========================================================================
0000D044                            
0000D044                            loc_C016:
0000D044 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D048 7000                       		moveq	#0,d0
0000D04A 1028 0023                  		move.b	$23(a0),d0
0000D04E 6700                       		beq.s	loc_C028
0000D050 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000D056                            
0000D056                            loc_C028:
0000D056 6000 0000                  		bra.w	DeleteObject
0000D05A                            ; ===========================================================================
0000D05A                            
0000D05A                            loc_C02C:				; XREF: Obj33_Index
0000D05A 6100 0000                  		bsr.w	ChkObjOnScreen2
0000D05E 6700                       		beq.s	locret_C044
0000D060 117C 0002 0024             		move.b	#2,$24(a0)
0000D066 4228 0032                  		clr.b	$32(a0)
0000D06A 4268 0010                  		clr.w	$10(a0)
0000D06E 4268 0012                  		clr.w	$12(a0)
0000D072                            
0000D072                            locret_C044:
0000D072 4E75                       		rts	
0000D074                            ; ===========================================================================
0000D074                            
0000D074                            loc_C046:				; XREF: loc_BF6E
0000D074 3F28 0008                  		move.w	8(a0),-(sp)
0000D078 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000D07E 6400                       		bcc.s	loc_C056
0000D080 6100 0000                  		bsr.w	SpeedToPos
0000D084                            
0000D084                            loc_C056:
0000D084 0828 0001 0022             		btst	#1,$22(a0)
0000D08A 6700                       		beq.s	loc_C0A0
0000D08C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D092 4EB9 0000 0000             		jsr	ObjHitFloor
0000D098 4A41                       		tst.w	d1
0000D09A 6A00 0000                  		bpl.w	loc_C09E
0000D09E D368 000C                  		add.w	d1,$C(a0)
0000D0A2 4268 0012                  		clr.w	$12(a0)
0000D0A6 08A8 0001 0022             		bclr	#1,$22(a0)
0000D0AC 3011                       		move.w	(a1),d0
0000D0AE 0240 03FF                  		andi.w	#$3FF,d0
0000D0B2 0C40 016A                  		cmpi.w	#$16A,d0
0000D0B6 6500                       		bcs.s	loc_C09E
0000D0B8 3028 0030                  		move.w	$30(a0),d0
0000D0BC E640                       		asr.w	#3,d0
0000D0BE 3140 0010                  		move.w	d0,$10(a0)
0000D0C2 117C 0001 0032             		move.b	#1,$32(a0)
0000D0C8 4268 000E                  		clr.w	$E(a0)
0000D0CC                            
0000D0CC                            loc_C09E:
0000D0CC 6000                       		bra.s	loc_C0E6
0000D0CE                            ; ===========================================================================
0000D0CE                            
0000D0CE                            loc_C0A0:
0000D0CE 4A68 0010                  		tst.w	$10(a0)
0000D0D2 6700 0000                  		beq.w	loc_C0D6
0000D0D6 6B00                       		bmi.s	loc_C0BC
0000D0D8 7600                       		moveq	#0,d3
0000D0DA 1628 0019                  		move.b	$19(a0),d3
0000D0DE 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D0E4 4A41                       		tst.w	d1		; has block touched a wall?
0000D0E6 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D0E8 6000                       		bra.s	loc_C0E6
0000D0EA                            ; ===========================================================================
0000D0EA                            
0000D0EA                            loc_C0BC:
0000D0EA 7600                       		moveq	#0,d3
0000D0EC 1628 0019                  		move.b	$19(a0),d3
0000D0F0 4643                       		not.w	d3
0000D0F2 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D0F8 4A41                       		tst.w	d1		; has block touched a wall?
0000D0FA 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D0FC 6000                       		bra.s	loc_C0E6
0000D0FE                            ; ===========================================================================
0000D0FE                            
0000D0FE                            Obj33_StopPush:
0000D0FE 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000D102 6000                       		bra.s	loc_C0E6
0000D104                            ; ===========================================================================
0000D104                            
0000D104                            loc_C0D6:
0000D104 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000D10C 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000D112 6400                       		bcc.s	loc_C104
0000D114                            
0000D114                            loc_C0E6:
0000D114 7200                       		moveq	#0,d1
0000D116 1228 0019                  		move.b	$19(a0),d1
0000D11A 0641 000B                  		addi.w	#$B,d1
0000D11E 343C 0010                  		move.w	#$10,d2
0000D122 363C 0011                  		move.w	#$11,d3
0000D126 381F                       		move.w	(sp)+,d4
0000D128 6100 0000                  		bsr.w	loc_C186
0000D12C 6100                       		bsr.s	Obj33_ChkLava
0000D12E 6000 FEC4                  		bra.w	loc_BFC6
0000D132                            ; ===========================================================================
0000D132                            
0000D132                            loc_C104:
0000D132 381F                       		move.w	(sp)+,d4
0000D134 43F8 D000                  		lea	($FFFFD000).w,a1
0000D138 08A9 0003 0022             		bclr	#3,$22(a1)
0000D13E 08A8 0003 0022             		bclr	#3,$22(a0)
0000D144 6000 FECE                  		bra.w	loc_BFE6
0000D148                            ; ===========================================================================
0000D148                            
0000D148                            Obj33_ChkLava:
0000D148 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000D14E 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000D150 343C FFE0                  		move.w	#-$20,d2
0000D154 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000D15A 6700                       		beq.s	Obj33_LoadLava
0000D15C 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000D162 6700                       		beq.s	Obj33_LoadLava
0000D164 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000D16A 6700                       		beq.s	Obj33_LoadLava
0000D16C 4E75                       		rts	
0000D16E                            ; ===========================================================================
0000D16E                            
0000D16E                            Obj33_ChkLava2:
0000D16E 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000D174 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000D176 343C 0020                  		move.w	#$20,d2
0000D17A 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000D180 6700                       		beq.s	Obj33_LoadLava
0000D182 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000D188 6700                       		beq.s	Obj33_LoadLava
0000D18A                            
0000D18A                            Obj33_NoLava:
0000D18A 4E75                       		rts	
0000D18C                            ; ===========================================================================
0000D18C                            
0000D18C                            Obj33_LoadLava:
0000D18C 6100 0000                  		bsr.w	SingleObjLoad
0000D190 6600                       		bne.s	locret_C184
0000D192 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000D196 3368 0008 0008             		move.w	8(a0),8(a1)
0000D19C D569 0008                  		add.w	d2,8(a1)
0000D1A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D1A6 0669 0010 000C             		addi.w	#$10,$C(a1)
0000D1AC 2348 003C                  		move.l	a0,$3C(a1)
0000D1B0                            
0000D1B0                            locret_C184:
0000D1B0 4E75                       		rts	
0000D1B2                            ; ===========================================================================
0000D1B2                            
0000D1B2                            loc_C186:				; XREF: loc_BF6E
0000D1B2 1028 0025                  		move.b	$25(a0),d0
0000D1B6 6700 0000                  		beq.w	loc_C218
0000D1BA 5500                       		subq.b	#2,d0
0000D1BC 6600                       		bne.s	loc_C1AA
0000D1BE 6100 B30E                  		bsr.w	ExitPlatform
0000D1C2 0829 0003 0022             		btst	#3,$22(a1)
0000D1C8 6600                       		bne.s	loc_C1A4
0000D1CA 4228 0025                  		clr.b	$25(a0)
0000D1CE 4E75                       		rts	
0000D1D0                            ; ===========================================================================
0000D1D0                            
0000D1D0                            loc_C1A4:
0000D1D0 3404                       		move.w	d4,d2
0000D1D2 6000 B858                  		bra.w	MvSonicOnPtfm
0000D1D6                            ; ===========================================================================
0000D1D6                            
0000D1D6                            loc_C1AA:
0000D1D6 5500                       		subq.b	#2,d0
0000D1D8 6600                       		bne.s	loc_C1F2
0000D1DA 6100 0000                  		bsr.w	SpeedToPos
0000D1DE 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D1E4 4EB9 0000 0000             		jsr	ObjHitFloor
0000D1EA 4A41                       		tst.w	d1
0000D1EC 6A00 0000                  		bpl.w	locret_C1F0
0000D1F0 D368 000C                  		add.w	d1,$C(a0)
0000D1F4 4268 0012                  		clr.w	$12(a0)
0000D1F8 4228 0025                  		clr.b	$25(a0)
0000D1FC 3011                       		move.w	(a1),d0
0000D1FE 0240 03FF                  		andi.w	#$3FF,d0
0000D202 0C40 016A                  		cmpi.w	#$16A,d0
0000D206 6500                       		bcs.s	locret_C1F0
0000D208 3028 0030                  		move.w	$30(a0),d0
0000D20C E640                       		asr.w	#3,d0
0000D20E 3140 0010                  		move.w	d0,$10(a0)
0000D212 117C 0001 0032             		move.b	#1,$32(a0)
0000D218 4268 000E                  		clr.w	$E(a0)
0000D21C                            
0000D21C                            locret_C1F0:
0000D21C 4E75                       		rts	
0000D21E                            ; ===========================================================================
0000D21E                            
0000D21E                            loc_C1F2:
0000D21E 6100 0000                  		bsr.w	SpeedToPos
0000D222 3028 0008                  		move.w	8(a0),d0
0000D226 0240 000C                  		andi.w	#$C,d0
0000D22A 6600 0000                  		bne.w	locret_C2E4
0000D22E 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000D234 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000D23A 4268 0010                  		clr.w	$10(a0)
0000D23E 5528 0025                  		subq.b	#2,$25(a0)
0000D242 4E75                       		rts	
0000D244                            ; ===========================================================================
0000D244                            
0000D244                            loc_C218:
0000D244 6100 0000                  		bsr.w	loc_FAC8
0000D248 4A44                       		tst.w	d4
0000D24A 6700 0000                  		beq.w	locret_C2E4
0000D24E 6B00 0000                  		bmi.w	locret_C2E4
0000D252 4A28 0032                  		tst.b	$32(a0)
0000D256 6700                       		beq.s	loc_C230
0000D258 6000 0000                  		bra.w	locret_C2E4
0000D25C                            ; ===========================================================================
0000D25C                            
0000D25C                            loc_C230:
0000D25C 4A40                       		tst.w	d0
0000D25E 6700 0000                  		beq.w	locret_C2E4
0000D262 6B00                       		bmi.s	loc_C268
0000D264 0829 0000 0022             		btst	#0,$22(a1)
0000D26A 6600 0000                  		bne.w	locret_C2E4
0000D26E 3F00                       		move.w	d0,-(sp)
0000D270 7600                       		moveq	#0,d3
0000D272 1628 0019                  		move.b	$19(a0),d3
0000D276 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D27C 301F                       		move.w	(sp)+,d0
0000D27E 4A41                       		tst.w	d1
0000D280 6B00 0000                  		bmi.w	locret_C2E4
0000D284 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000D28C 7001                       		moveq	#1,d0
0000D28E 323C 0040                  		move.w	#$40,d1
0000D292 6000                       		bra.s	loc_C294
0000D294                            ; ===========================================================================
0000D294                            
0000D294                            loc_C268:
0000D294 0829 0000 0022             		btst	#0,$22(a1)
0000D29A 6700                       		beq.s	locret_C2E4
0000D29C 3F00                       		move.w	d0,-(sp)
0000D29E 7600                       		moveq	#0,d3
0000D2A0 1628 0019                  		move.b	$19(a0),d3
0000D2A4 4643                       		not.w	d3
0000D2A6 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D2AC 301F                       		move.w	(sp)+,d0
0000D2AE 4A41                       		tst.w	d1
0000D2B0 6B00                       		bmi.s	locret_C2E4
0000D2B2 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000D2BA 70FF                       		moveq	#-1,d0
0000D2BC 323C FFC0                  		move.w	#-$40,d1
0000D2C0                            
0000D2C0                            loc_C294:
0000D2C0 43F8 D000                  		lea	($FFFFD000).w,a1
0000D2C4 D169 0008                  		add.w	d0,8(a1)
0000D2C8 3341 0014                  		move.w	d1,$14(a1)
0000D2CC 337C 0000 0010             		move.w	#0,$10(a1)
0000D2D2 3F00                       		move.w	d0,-(sp)
0000D2D4 303C 00A7                  		move.w	#$A7,d0
0000D2D8 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play pushing sound
0000D2DE 301F                       		move.w	(sp)+,d0
0000D2E0 4A28 0028                  		tst.b	$28(a0)
0000D2E4 6B00                       		bmi.s	locret_C2E4
0000D2E6 3F00                       		move.w	d0,-(sp)
0000D2E8 4EB9 0000 0000             		jsr	ObjHitFloor
0000D2EE 301F                       		move.w	(sp)+,d0
0000D2F0 0C41 0004                  		cmpi.w	#4,d1
0000D2F4 6F00                       		ble.s	loc_C2E0
0000D2F6 317C 0400 0010             		move.w	#$400,$10(a0)
0000D2FC 4A40                       		tst.w	d0
0000D2FE 6A00                       		bpl.s	loc_C2D8
0000D300 4468 0010                  		neg.w	$10(a0)
0000D304                            
0000D304                            loc_C2D8:
0000D304 117C 0006 0025             		move.b	#6,$25(a0)
0000D30A 6000                       		bra.s	locret_C2E4
0000D30C                            ; ===========================================================================
0000D30C                            
0000D30C                            loc_C2E0:
0000D30C D368 000C                  		add.w	d1,$C(a0)
0000D310                            
0000D310                            locret_C2E4:
0000D310 4E75                       		rts	
0000D312                            ; ===========================================================================
0000D312                            ; ---------------------------------------------------------------------------
0000D312                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D312                            ; ---------------------------------------------------------------------------
0000D312                            Map_obj33:
0000D312                            	include "_maps\obj33.asm"
0000D312                            ; ---------------------------------------------------------------------------
0000D312                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D312                            ; ---------------------------------------------------------------------------
0000D312 0000                       		dc.w byte_C2EA-Map_obj33
0000D314 0000                       		dc.w byte_C2F0-Map_obj33
0000D316 01                         byte_C2EA:	dc.b 1
0000D317 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000D31C 04                         byte_C2F0:	dc.b 4
0000D31D F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000D322 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000D327 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000D32C F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000D332 00                         		even
0000D332 00                         		even
0000D332                            
0000D332                            ; ===========================================================================
0000D332                            ; ---------------------------------------------------------------------------
0000D332                            ; Object 34 - zone title cards
0000D332                            ; ---------------------------------------------------------------------------
0000D332                            Obj34:					; XREF: Obj_Index
0000D332 7000                       		moveq	#0,d0
0000D334 1028 0024                  		move.b	$24(a0),d0
0000D338 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000D33C 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000D340                            ; ===========================================================================
0000D340 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000D342 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000D344 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D346 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D348                            ; ===========================================================================
0000D348                            
0000D348                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000D348 2248                       		movea.l	a0,a1
0000D34A 7000                       		moveq	#0,d0
0000D34C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D350 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000D356 6600                       		bne.s	Obj34_CheckFZ
0000D358 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000D35A                            
0000D35A                            Obj34_CheckFZ:
0000D35A 3400                       		move.w	d0,d2
0000D35C 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000D362 6600                       		bne.s	Obj34_LoadConfig
0000D364 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000D366 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000D368                            
0000D368                            Obj34_LoadConfig:
0000D368 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000D36E E948                       		lsl.w	#4,d0
0000D370 D6C0                       		adda.w	d0,a3
0000D372 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000D378 7203                       		moveq	#3,d1
0000D37A                            
0000D37A                            Obj34_Loop:
0000D37A 12BC 0034                  		move.b	#$34,0(a1)
0000D37E 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000D382 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000D386 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000D38A 335A 000A                  		move.w	(a2)+,$A(a1)
0000D38E 135A 0024                  		move.b	(a2)+,$24(a1)
0000D392 101A                       		move.b	(a2)+,d0
0000D394 6600                       		bne.s	Obj34_ActNumber
0000D396 1002                       		move.b	d2,d0
0000D398                            
0000D398                            Obj34_ActNumber:
0000D398 0C00 0007                  		cmpi.b	#7,d0
0000D39C 6600                       		bne.s	Obj34_MakeSprite
0000D39E D038 FE11                  		add.b	($FFFFFE11).w,d0
0000D3A2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000D3A8 6600                       		bne.s	Obj34_MakeSprite
0000D3AA 5300                       		subq.b	#1,d0
0000D3AC                            
0000D3AC                            Obj34_MakeSprite:
0000D3AC 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000D3B0 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000D3B8 337C 8580 0002             		move.w	#$8580,2(a1)
0000D3BE 137C 0078 0019             		move.b	#$78,$19(a1)
0000D3C4 137C 0000 0001             		move.b	#0,1(a1)
0000D3CA 137C 0000 0018             		move.b	#0,$18(a1)
0000D3D0 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000D3D6 43E9 0040                  		lea	$40(a1),a1	; next object
0000D3DA 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000D3DE                            
0000D3DE                            Obj34_ChkPos:				; XREF: Obj34_Index
0000D3DE 7210                       		moveq	#$10,d1		; set horizontal speed
0000D3E0 3028 0030                  		move.w	$30(a0),d0
0000D3E4 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000D3E8 6700                       		beq.s	loc_C3C8	; if yes, branch
0000D3EA 6C00                       		bge.s	Obj34_Move
0000D3EC 4441                       		neg.w	d1
0000D3EE                            
0000D3EE                            Obj34_Move:
0000D3EE D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D3F2                            
0000D3F2                            loc_C3C8:
0000D3F2 3028 0008                  		move.w	8(a0),d0
0000D3F6 6B00                       		bmi.s	locret_C3D8
0000D3F8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D3FC 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000D3FE 6000 0000                  		bra.w	DisplaySprite
0000D402                            ; ===========================================================================
0000D402                            
0000D402                            locret_C3D8:
0000D402 4E75                       		rts	
0000D404                            ; ===========================================================================
0000D404                            
0000D404                            Obj34_Wait:				; XREF: Obj34_Index
0000D404 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000D408 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000D40A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000D40E 6000 0000                  		bra.w	DisplaySprite
0000D412                            ; ===========================================================================
0000D412                            
0000D412                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000D412 4A28 0001                  		tst.b	1(a0)
0000D416 6A00                       		bpl.s	Obj34_ChangeArt
0000D418 7220                       		moveq	#$20,d1
0000D41A 3028 0032                  		move.w	$32(a0),d0
0000D41E B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000D422 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000D424 6C00                       		bge.s	Obj34_Move2
0000D426 4441                       		neg.w	d1
0000D428                            
0000D428                            Obj34_Move2:
0000D428 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D42C 3028 0008                  		move.w	8(a0),d0
0000D430 6B00                       		bmi.s	locret_C412
0000D432 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D436 6400                       		bcc.s	locret_C412	; if yes, branch
0000D438 6000 0000                  		bra.w	DisplaySprite
0000D43C                            ; ===========================================================================
0000D43C                            
0000D43C                            locret_C412:
0000D43C 4E75                       		rts	
0000D43E                            ; ===========================================================================
0000D43E                            
0000D43E                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000D43E 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D444 6600                       		bne.s	Obj34_Delete
0000D446 7002                       		moveq	#2,d0
0000D448 4EB9 0000 1E66             		jsr	(LoadPLC).l	; load explosion patterns
0000D44E 7000                       		moveq	#0,d0
0000D450 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D454 103B 0000                  		move.b	Obj34_AnimalPLC(pc,d0.w),d0
0000D458 4EB9 0000 1E66             		jsr	(LoadPLC).l	; load animal patterns
0000D45E                            
0000D45E                            Obj34_Delete:
0000D45E 6000 0000                  		bra.w	DeleteObject
0000D462                            
0000D462                            ; ===========================================================================
0000D462                            Obj34_AnimalPLC:
0000D462 15                         		dc.b $15	; "GHZ"
0000D463 16                         		dc.b $16
0000D464 17                         		dc.b $17
0000D465 18                         		dc.b $18
0000D466 19                         		dc.b $19
0000D467 1A                         		dc.b $1A	; "SBZ"
0000D468 15                         		dc.b $15	; Ending (placeholder?
0000D469 1A                         		dc.b $1A	; MAKOTO
0000D46A                            	even
0000D46A 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000D46C 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000D46E 00E4                       		dc.w $E4
0000D470 0206                       		dc.b 2,	6
0000D472 00EA                       		dc.w $EA
0000D474 0207                       		dc.b 2,	7
0000D476 00E0                       		dc.w $E0
0000D478 020A                       		dc.b 2,	$A
0000D47A                            ; ---------------------------------------------------------------------------
0000D47A                            ; Title	card configuration data
0000D47A                            ; Format:
0000D47A                            ; 4 bytes per item (YYYY XXXX)
0000D47A                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000D47A                            ; ---------------------------------------------------------------------------
0000D47A 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D48A 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000D49A 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000D4AA 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000D4BA 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000D4CA 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000D4DA 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000D4EA 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D4FA 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D50A                            ; ===========================================================================
0000D50A                            ; ---------------------------------------------------------------------------
0000D50A                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000D50A                            ; ---------------------------------------------------------------------------
0000D50A                            
0000D50A                            Obj39:					; XREF: Obj_Index
0000D50A 7000                       		moveq	#0,d0
0000D50C 1028 0024                  		move.b	$24(a0),d0
0000D510 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000D514 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000D518                            ; ===========================================================================
0000D518 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000D51A 0000                       		dc.w loc_C50C-Obj39_Index
0000D51C 0000                       		dc.w Obj39_Wait-Obj39_Index
0000D51E                            ; ===========================================================================
0000D51E                            
0000D51E                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000D51E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D522 6700                       		beq.s	Obj39_Main	; if yes, branch
0000D524 4E75                       		rts	
0000D526                            ; ===========================================================================
0000D526                            
0000D526                            Obj39_Main:
0000D526 5428 0024                  		addq.b	#2,$24(a0)
0000D52A 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000D530 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000D536 6700                       		beq.s	loc_C4EC	; if not, branch
0000D538 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000D53E                            
0000D53E                            loc_C4EC:
0000D53E 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000D544 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000D54C 317C 855E 0002             		move.w	#$855E,2(a0)
0000D552 117C 0000 0001             		move.b	#0,1(a0)
0000D558 117C 0000 0018             		move.b	#0,$18(a0)
0000D55E                            
0000D55E                            loc_C50C:				; XREF: Obj39_Index
0000D55E 7210                       		moveq	#$10,d1		; set horizontal speed
0000D560 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000D566 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000D568 6500                       		bcs.s	Obj39_Move
0000D56A 4441                       		neg.w	d1
0000D56C                            
0000D56C                            Obj39_Move:
0000D56C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D570 6000 0000                  		bra.w	DisplaySprite
0000D574                            ; ===========================================================================
0000D574                            
0000D574                            Obj39_SetWait:				; XREF: Obj39_Main
0000D574 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000D57A 5428 0024                  		addq.b	#2,$24(a0)
0000D57E 4E75                       		rts	
0000D580                            ; ===========================================================================
0000D580                            
0000D580                            Obj39_Wait:				; XREF: Obj39_Index
0000D580 1038 F605                  		move.b	($FFFFF605).w,d0
0000D584 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D588 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D58A 0828 0000 001A             		btst	#0,$1A(a0)
0000D590 6600                       		bne.s	Obj39_Display
0000D592 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D596 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D598 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D59C 6000 0000                  		bra.w	DisplaySprite
0000D5A0                            ; ===========================================================================
0000D5A0                            
0000D5A0                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D5A0 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D5A4 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D5A6 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D5AC 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D5B0 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D5B2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D5B8 6000                       		bra.s	Obj39_Display
0000D5BA                            ; ===========================================================================
0000D5BA                            
0000D5BA                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D5BA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D5C0                            
0000D5C0                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D5C0 6000 0000                  		bra.w	DisplaySprite
0000D5C4                            ; ===========================================================================
0000D5C4                            ; ---------------------------------------------------------------------------
0000D5C4                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D5C4                            ; ---------------------------------------------------------------------------
0000D5C4                            
0000D5C4                            Obj3A:					; XREF: Obj_Index
0000D5C4 7000                       		moveq	#0,d0
0000D5C6 1028 0024                  		move.b	$24(a0),d0
0000D5CA 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D5CE 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D5D2                            ; ===========================================================================
0000D5D2 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D5D4 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D5D6 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D5D8 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D5DA 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D5DC 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D5DE 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D5E0 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D5E2 0000                       		dc.w loc_C766-Obj3A_Index
0000D5E4                            ; ===========================================================================
0000D5E4                            
0000D5E4                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D5E4 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D5E8 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D5EA 4E75                       		rts	
0000D5EC                            ; ===========================================================================
0000D5EC                            
0000D5EC                            Obj3A_Main:
0000D5EC 2248                       		movea.l	a0,a1
0000D5EE 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D5F4 7206                       		moveq	#6,d1
0000D5F6                            
0000D5F6                            Obj3A_Loop:
0000D5F6 12BC 003A                  		move.b	#$3A,0(a1)
0000D5FA 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D5FE 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D602 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D606 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D60A 135A 0024                  		move.b	(a2)+,$24(a1)
0000D60E 101A                       		move.b	(a2)+,d0
0000D610 0C00 0006                  		cmpi.b	#6,d0
0000D614 6600                       		bne.s	loc_C5CA
0000D616 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D61A                            
0000D61A                            loc_C5CA:
0000D61A 1340 001A                  		move.b	d0,$1A(a1)
0000D61E 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D626 337C 8580 0002             		move.w	#$8580,2(a1)
0000D62C 137C 0000 0001             		move.b	#0,1(a1)
0000D632 43E9 0040                  		lea	$40(a1),a1
0000D636 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D63A                            
0000D63A                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D63A 7210                       		moveq	#$10,d1		; set horizontal speed
0000D63C 3028 0030                  		move.w	$30(a0),d0
0000D640 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D644 6700                       		beq.s	loc_C61A	; if yes, branch
0000D646 6C00                       		bge.s	Obj3A_Move
0000D648 4441                       		neg.w	d1
0000D64A                            
0000D64A                            Obj3A_Move:
0000D64A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D64E                            
0000D64E                            loc_C5FE:				; XREF: loc_C61A
0000D64E 3028 0008                  		move.w	8(a0),d0
0000D652 6B00                       		bmi.s	locret_C60E
0000D654 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D658 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D65A 6000 0000                  		bra.w	DisplaySprite
0000D65E                            ; ===========================================================================
0000D65E                            
0000D65E                            locret_C60E:
0000D65E 4E75                       		rts	
0000D660                            ; ===========================================================================
0000D660                            
0000D660                            loc_C610:				; XREF: loc_C61A
0000D660 117C 000E 0024             		move.b	#$E,$24(a0)
0000D666 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D66A                            ; ===========================================================================
0000D66A                            
0000D66A                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D66A 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D670 67EE                       		beq.s	loc_C610
0000D672 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D678 66D4                       		bne.s	loc_C5FE
0000D67A 5428 0024                  		addq.b	#2,$24(a0)
0000D67E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D684                            
0000D684                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D684 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D688 6600                       		bne.s	Obj3A_Display
0000D68A 5428 0024                  		addq.b	#2,$24(a0)
0000D68E                            
0000D68E                            Obj3A_Display:
0000D68E 6000 0000                  		bra.w	DisplaySprite
0000D692                            ; ===========================================================================
0000D692                            
0000D692                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D692 6100 0000                  		bsr.w	DisplaySprite
0000D696 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D69C 7000                       		moveq	#0,d0
0000D69E 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D6A2 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D6A4 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D6A8 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D6AE                            
0000D6AE                            Obj3A_RingBonus:
0000D6AE 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D6B2 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D6B4 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D6B8 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D6BE                            
0000D6BE                            Obj3A_ChkBonus:
0000D6BE 4A40                       		tst.w	d0		; is there any bonus?
0000D6C0 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D6C2 303C 00C5                  		move.w	#$C5,d0
0000D6C6 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D6CC 5428 0024                  		addq.b	#2,$24(a0)
0000D6D0 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D6D6 6600                       		bne.s	Obj3A_SetDelay
0000D6D8 5828 0024                  		addq.b	#4,$24(a0)
0000D6DC                            
0000D6DC                            Obj3A_SetDelay:
0000D6DC 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D6E2                            
0000D6E2                            locret_C692:
0000D6E2 4E75                       		rts	
0000D6E4                            ; ===========================================================================
0000D6E4                            
0000D6E4                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D6E4 4EB9 0000 0000             		jsr	AddPoints
0000D6EA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D6EE 0200 0003                  		andi.b	#3,d0
0000D6F2 66EE                       		bne.s	locret_C692
0000D6F4 303C 00CD                  		move.w	#$CD,d0
0000D6F8 4EF9 0000 1C82             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D6FE                            ; ===========================================================================
0000D6FE                            
0000D6FE                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D6FE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D702 0240 0007                  		andi.w	#7,d0
0000D706 E748                       		lsl.w	#3,d0
0000D708 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D70C 0241 0003                  		andi.w	#3,d1
0000D710 D241                       		add.w	d1,d1
0000D712 D041                       		add.w	d1,d0
0000D714 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D718 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D71C 4A40                       		tst.w	d0
0000D71E 6600                       		bne.s	Obj3A_ChkSS
0000D720 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000D726 6000                       		bra.s	Obj3A_Display2
0000D728                            ; ===========================================================================
0000D728                            
0000D728                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D728 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D72C 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D730 6700                       		beq.s	loc_C6EA	; if not, branch
0000D732 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D738 6000                       		bra.s	Obj3A_Display2
0000D73A                            ; ===========================================================================
0000D73A                            
0000D73A                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D73A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D740                            
0000D740                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D740 6000 0000                  		bra.w	DisplaySprite
0000D744                            ; ===========================================================================
0000D744                            ; ---------------------------------------------------------------------------
0000D744                            ; Level	order array
0000D744                            ; ---------------------------------------------------------------------------
0000D744                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D784                            		even
0000D784                            ; ===========================================================================
0000D784                            
0000D784                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D784 7220                       		moveq	#$20,d1		; set horizontal speed
0000D786 3028 0032                  		move.w	$32(a0),d0
0000D78A B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D78E 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D790 6C00                       		bge.s	Obj3A_Move2
0000D792 4441                       		neg.w	d1
0000D794                            
0000D794                            Obj3A_Move2:
0000D794 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D798 3028 0008                  		move.w	8(a0),d0
0000D79C 6B00                       		bmi.s	locret_C748
0000D79E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D7A2 6400                       		bcc.s	locret_C748	; if yes, branch
0000D7A4 6000 0000                  		bra.w	DisplaySprite
0000D7A8                            ; ===========================================================================
0000D7A8                            
0000D7A8                            locret_C748:
0000D7A8 4E75                       		rts	
0000D7AA                            ; ===========================================================================
0000D7AA                            
0000D7AA                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D7AA 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D7B0 6600 0000                  		bne.w	DeleteObject
0000D7B4 5428 0024                  		addq.b	#2,$24(a0)
0000D7B8 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D7BC 303C 008D                  		move.w	#$8D,d0
0000D7C0 4EF9 0000 1C7C             		jmp	(PlaySound).l	; play FZ music
0000D7C6                            ; ===========================================================================
0000D7C6                            
0000D7C6                            loc_C766:				; XREF: Obj3A_Index
0000D7C6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D7CA 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D7D0 6700 0000                  		beq.w	DeleteObject
0000D7D4 4E75                       		rts	
0000D7D6                            ; ===========================================================================
0000D7D6 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D7DC 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D7DE FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D7E4 0201                       		dc.b 2,	1
0000D7E6 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D7EC 0206                       		dc.b 2,	6
0000D7EE 0520 0120 00EC             		dc.w $520, $120, $EC
0000D7F4 0202                       		dc.b 2,	2
0000D7F6 0540 0120 00FC             		dc.w $540, $120, $FC
0000D7FC 0203                       		dc.b 2,	3
0000D7FE 0560 0120 010C             		dc.w $560, $120, $10C
0000D804 0204                       		dc.b 2,	4
0000D806 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D80C 0205                       		dc.b 2,	5
0000D80E                            ; ===========================================================================
0000D80E                            ; ---------------------------------------------------------------------------
0000D80E                            ; Object 7E - special stage results screen
0000D80E                            ; ---------------------------------------------------------------------------
0000D80E                            
0000D80E                            Obj7E:					; XREF: Obj_Index
0000D80E 7000                       		moveq	#0,d0
0000D810 1028 0024                  		move.b	$24(a0),d0
0000D814 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D818 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D81C                            ; ===========================================================================
0000D81C 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D81E 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D820 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D822 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D824 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D826 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D828 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D82A 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D82C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D82E 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D830 0000                       		dc.w loc_C91A-Obj7E_Index
0000D832                            ; ===========================================================================
0000D832                            
0000D832                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D832 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D836 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D838 4E75                       		rts	
0000D83A                            ; ===========================================================================
0000D83A                            
0000D83A                            Obj7E_Main:
0000D83A 2248                       		movea.l	a0,a1
0000D83C 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D842 7203                       		moveq	#3,d1
0000D844 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D84A 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D84C 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D84E                            
0000D84E                            Obj7E_Loop:
0000D84E 12BC 007E                  		move.b	#$7E,0(a1)
0000D852 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D856 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D85A 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D85E 135A 0024                  		move.b	(a2)+,$24(a1)
0000D862 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D866 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D86E 337C 8580 0002             		move.w	#$8580,2(a1)
0000D874 137C 0000 0001             		move.b	#0,1(a1)
0000D87A 43E9 0040                  		lea	$40(a1),a1
0000D87E 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D882                            
0000D882 7007                       		moveq	#7,d0
0000D884 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D888 6700                       		beq.s	loc_C842
0000D88A 7000                       		moveq	#0,d0
0000D88C 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D890 6600                       		bne.s	loc_C842	; if not, branch
0000D892 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D894 317C 0018 0008             		move.w	#$18,8(a0)
0000D89A 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D8A0                            
0000D8A0                            loc_C842:
0000D8A0 1140 001A                  		move.b	d0,$1A(a0)
0000D8A4                            
0000D8A4                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D8A4 7210                       		moveq	#$10,d1		; set horizontal speed
0000D8A6 3028 0030                  		move.w	$30(a0),d0
0000D8AA B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D8AE 6700                       		beq.s	loc_C86C	; if yes, branch
0000D8B0 6C00                       		bge.s	Obj7E_Move
0000D8B2 4441                       		neg.w	d1
0000D8B4                            
0000D8B4                            Obj7E_Move:
0000D8B4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D8B8                            
0000D8B8                            loc_C85A:				; XREF: loc_C86C
0000D8B8 3028 0008                  		move.w	8(a0),d0
0000D8BC 6B00                       		bmi.s	locret_C86A
0000D8BE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D8C2 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D8C4 6000 0000                  		bra.w	DisplaySprite
0000D8C8                            ; ===========================================================================
0000D8C8                            
0000D8C8                            locret_C86A:
0000D8C8 4E75                       		rts	
0000D8CA                            ; ===========================================================================
0000D8CA                            
0000D8CA                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D8CA 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D8D0 66E6                       		bne.s	loc_C85A
0000D8D2 5428 0024                  		addq.b	#2,$24(a0)
0000D8D6 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D8DC 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D8E2                            
0000D8E2                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D8E2 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D8E6 6600                       		bne.s	Obj7E_Display
0000D8E8 5428 0024                  		addq.b	#2,$24(a0)
0000D8EC                            
0000D8EC                            Obj7E_Display:
0000D8EC 6000 0000                  		bra.w	DisplaySprite
0000D8F0                            ; ===========================================================================
0000D8F0                            
0000D8F0                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D8F0 6100 0000                  		bsr.w	DisplaySprite
0000D8F4 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D8FA 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D8FE 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D900 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D906 700A                       		moveq	#10,d0		; add 10 to score
0000D908 4EB9 0000 0000             		jsr	AddPoints
0000D90E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D912 0200 0003                  		andi.b	#3,d0
0000D916 6600                       		bne.s	locret_C8EA
0000D918 303C 00CD                  		move.w	#$CD,d0
0000D91C 4EF9 0000 1C82             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D922                            ; ===========================================================================
0000D922                            
0000D922                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D922 303C 00C5                  		move.w	#$C5,d0
0000D926 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D92C 5428 0024                  		addq.b	#2,$24(a0)
0000D930 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D936 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D93C 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D93E 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D944 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D948                            
0000D948                            locret_C8EA:
0000D948 4E75                       		rts	
0000D94A                            ; ===========================================================================
0000D94A                            
0000D94A                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D94A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D950 6000 0000                  		bra.w	DisplaySprite
0000D954                            ; ===========================================================================
0000D954                            
0000D954                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D954 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D95A 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D960 303C 00BF                  		move.w	#$BF,d0
0000D964 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play continues music
0000D96A 5428 0024                  		addq.b	#2,$24(a0)
0000D96E 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D974 6000 0000                  		bra.w	DisplaySprite
0000D978                            ; ===========================================================================
0000D978                            
0000D978                            loc_C91A:				; XREF: Obj7E_Index
0000D978 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D97C 0200 000F                  		andi.b	#$F,d0
0000D980 6600                       		bne.s	Obj7E_Display2
0000D982 0868 0000 001A             		bchg	#0,$1A(a0)
0000D988                            
0000D988                            Obj7E_Display2:
0000D988 6000 0000                  		bra.w	DisplaySprite
0000D98C                            ; ===========================================================================
0000D98C 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D992 0200                       		dc.b 2,	0		; rountine number, frame number
0000D994 0320 0120 0118             		dc.w $320, $120, $118
0000D99A 0201                       		dc.b 2,	1
0000D99C 0360 0120 0128             		dc.w $360, $120, $128
0000D9A2 0202                       		dc.b 2,	2
0000D9A4 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D9AA 0203                       		dc.b 2,	3
0000D9AC 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D9B2 0206                       		dc.b 2,	6
0000D9B4                            ; ===========================================================================
0000D9B4                            ; ---------------------------------------------------------------------------
0000D9B4                            ; Object 7F - chaos emeralds from the special stage results screen
0000D9B4                            ; ---------------------------------------------------------------------------
0000D9B4                            
0000D9B4                            Obj7F:					; XREF: Obj_Index
0000D9B4 7000                       		moveq	#0,d0
0000D9B6 1028 0024                  		move.b	$24(a0),d0
0000D9BA 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D9BE 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D9C2                            ; ===========================================================================
0000D9C2 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D9C4 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D9C6                            
0000D9C6                            ; ---------------------------------------------------------------------------
0000D9C6                            ; X-axis positions for chaos emeralds
0000D9C6                            ; ---------------------------------------------------------------------------
0000D9C6 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D9D2                            ; ===========================================================================
0000D9D2                            
0000D9D2                            Obj7F_Main:				; XREF: Obj7F_Index
0000D9D2 2248                       		movea.l	a0,a1
0000D9D4 45F9 0000 D9C6             		lea	(Obj7F_PosData).l,a2
0000D9DA 7400                       		moveq	#0,d2
0000D9DC 7200                       		moveq	#0,d1
0000D9DE 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D9E2 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D9E4 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D9E8                            
0000D9E8                            Obj7F_Loop:
0000D9E8 12BC 007F                  		move.b	#$7F,0(a1)
0000D9EC 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D9F0 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D9F6 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D9FA 1633 2000                  		move.b	(a3,d2.w),d3
0000D9FE 1343 001A                  		move.b	d3,$1A(a1)
0000DA02 1343 001C                  		move.b	d3,$1C(a1)
0000DA06 5202                       		addq.b	#1,d2
0000DA08 5429 0024                  		addq.b	#2,$24(a1)
0000DA0C 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000DA14 337C 8541 0002             		move.w	#$8541,2(a1)
0000DA1A 137C 0000 0001             		move.b	#0,1(a1)
0000DA20 43E9 0040                  		lea	$40(a1),a1	; next object
0000DA24 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000DA28                            
0000DA28                            Obj7F_Flash:				; XREF: Obj7F_Index
0000DA28 1028 001A                  		move.b	$1A(a0),d0
0000DA2C 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000DA32 0C00 0006                  		cmpi.b	#6,d0
0000DA36 6600                       		bne.s	Obj7F_Display
0000DA38 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000DA3E                            
0000DA3E                            Obj7F_Display:
0000DA3E 6000 0000                  		bra.w	DisplaySprite
0000DA42                            ; ===========================================================================
0000DA42                            ; ---------------------------------------------------------------------------
0000DA42                            ; Sprite mappings - zone title cards
0000DA42                            ; ---------------------------------------------------------------------------
0000DA42                            Map_obj34:
0000DA42                                    include "_maps\obj34.asm"
0000DA42                            Map_c5df:
0000DA42 0000                       Map_c5df_0: 	dc.w Map_c5df_18-Map_c5df
0000DA44 0000                       Map_c5df_2: 	dc.w Map_c5df_55-Map_c5df
0000DA46 0000                       Map_c5df_4: 	dc.w Map_c5df_C4-Map_c5df
0000DA48 0000                       Map_c5df_6: 	dc.w Map_c5df_DE-Map_c5df
0000DA4A 0000                       Map_c5df_8: 	dc.w Map_c5df_134-Map_c5df
0000DA4C 0000                       Map_c5df_A: 	dc.w Map_c5df_19E-Map_c5df
0000DA4E 0000                       Map_c5df_C: 	dc.w Map_c5df_1C2-Map_c5df
0000DA50 0000                       Map_c5df_E: 	dc.w Map_c5df_1D7-Map_c5df
0000DA52 0000                       Map_c5df_10: 	dc.w Map_c5df_1E2-Map_c5df
0000DA54 0000                       Map_c5df_12: 	dc.w Map_c5df_1ED-Map_c5df
0000DA56 0000                       Map_c5df_14: 	dc.w Map_c5df_1F8-Map_c5df
0000DA58 0000                       Map_c5df_16: 	dc.w Map_c5df_23A-Map_c5df
0000DA5A 0C                         Map_c5df_18: 	dc.b $C
0000DA5B F805 0008 80               	dc.b $F8, $5, $0, $8, $80
0000DA60 F805 003A 90               	dc.b $F8, $5, $0, $3A, $90
0000DA65 F805 0046 A0               	dc.b $F8, $5, $0, $46, $A0
0000DA6A F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0000DA6F F805 0008 C0               	dc.b $F8, $5, $0, $8, $C0
0000DA74 F805 001C D0               	dc.b $F8, $5, $0, $1C, $D0
0000DA79 F805 004A E0               	dc.b $F8, $5, $0, $4A, $E0
0000DA7E F800 0056 F0               	dc.b $F8, $0, $0, $56, $F0
0000DA83 F805 003A 00               	dc.b $F8, $5, $0, $3A, $0
0000DA88 F805 0032 10               	dc.b $F8, $5, $0, $32, $10
0000DA8D F805 0026 20               	dc.b $F8, $5, $0, $26, $20
0000DA92 F805 0026 30               	dc.b $F8, $5, $0, $26, $30
0000DA97 16                         Map_c5df_55: 	dc.b $16
0000DA98 F801 0020 80               	dc.b $F8, $1, $0, $20, $80
0000DA9D F800 0056 88               	dc.b $F8, $0, $0, $56, $88
0000DAA2 F805 0026 98               	dc.b $F8, $5, $0, $26, $98
0000DAA7 F801 0020 A8               	dc.b $F8, $1, $0, $20, $A8
0000DAAC F805 0022 B0               	dc.b $F8, $5, $0, $22, $B0
0000DAB1 F805 0010 C0               	dc.b $F8, $5, $0, $10, $C0
0000DAB6 F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000DABB F805 0014 E0               	dc.b $F8, $5, $0, $14, $E0
0000DAC0 F801 0020 F0               	dc.b $F8, $1, $0, $20, $F0
0000DAC5 F805 0026 F8               	dc.b $F8, $5, $0, $26, $F8
0000DACA F805 0010 08               	dc.b $F8, $5, $0, $10, $8
0000DACF F800 0056 18               	dc.b $F8, $0, $0, $56, $18
0000DAD4 F805 0010 28               	dc.b $F8, $5, $0, $10, $28
0000DAD9 F805 0018 38               	dc.b $F8, $5, $0, $18, $38
0000DADE F805 0018 48               	dc.b $F8, $5, $0, $18, $48
0000DAE3 F805 003E 58               	dc.b $F8, $5, $0, $3E, $58
0000DAE8 F805 0036 68               	dc.b $F8, $5, $0, $36, $68
0000DAED F805 0026 78               	dc.b $F8, $5, $0, $26, $78
0000DAF2 F805 0032 88               	dc.b $F8, $5, $0, $32, $88
0000DAF7 F805 003A 98               	dc.b $F8, $5, $0, $3A, $98
0000DAFC F805 0010 A8               	dc.b $F8, $5, $0, $10, $A8
0000DB01 F805 003A B8               	dc.b $F8, $5, $0, $3A, $B8
0000DB06 05                         Map_c5df_C4: 	dc.b $5
0000DB07 F805 002A 80               	dc.b $F8, $5, $0, $2A, $80
0000DB0C F805 0000 90               	dc.b $F8, $5, $0, $0, $90
0000DB11 F805 003A A0               	dc.b $F8, $5, $0, $3A, $A0
0000DB16 F805 0004 B0               	dc.b $F8, $5, $0, $4, $B0
0000DB1B F805 0026 C0               	dc.b $F8, $5, $0, $26, $C0
0000DB20 11                         Map_c5df_DE: 	dc.b $11
0000DB21 F805 000C 80               	dc.b $F8, $5, $0, $C, $80
0000DB26 F805 0032 90               	dc.b $F8, $5, $0, $32, $90
0000DB2B F805 002E A0               	dc.b $F8, $5, $0, $2E, $A0
0000DB30 F805 0042 B0               	dc.b $F8, $5, $0, $42, $B0
0000DB35 F800 0056 C0               	dc.b $F8, $0, $0, $56, $C0
0000DB3A F805 0018 D0               	dc.b $F8, $5, $0, $18, $D0
0000DB3F F805 0010 E0               	dc.b $F8, $5, $0, $10, $E0
0000DB44 F805 0042 F0               	dc.b $F8, $5, $0, $42, $F0
0000DB49 F800 0056 00               	dc.b $F8, $0, $0, $56, $0
0000DB4E F805 003A 10               	dc.b $F8, $5, $0, $3A, $10
0000DB53 F801 0020 20               	dc.b $F8, $1, $0, $20, $20
0000DB58 F805 000C 28               	dc.b $F8, $5, $0, $C, $28
0000DB5D F805 0032 38               	dc.b $F8, $5, $0, $32, $38
0000DB62 F805 0042 48               	dc.b $F8, $5, $0, $42, $48
0000DB67 F805 001C 58               	dc.b $F8, $5, $0, $1C, $58
0000DB6C F801 0020 68               	dc.b $F8, $1, $0, $20, $68
0000DB71 F805 003E 70               	dc.b $F8, $5, $0, $3E, $70
0000DB76 15                         Map_c5df_134: 	dc.b $15
0000DB77 F805 0042 80               	dc.b $F8, $5, $0, $42, $80
0000DB7C F805 001C 90               	dc.b $F8, $5, $0, $1C, $90
0000DB81 F805 0010 A0               	dc.b $F8, $5, $0, $10, $A0
0000DB86 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000DB8B F805 0036 C0               	dc.b $F8, $5, $0, $36, $C0
0000DB90 F801 0020 D0               	dc.b $F8, $1, $0, $20, $D0
0000DB95 F805 0018 D8               	dc.b $F8, $5, $0, $18, $D8
0000DB9A F800 0056 E8               	dc.b $F8, $0, $0, $56, $E8
0000DB9F F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
0000DBA4 F805 003A 08               	dc.b $F8, $5, $0, $3A, $8
0000DBA9 F805 0032 18               	dc.b $F8, $5, $0, $32, $18
0000DBAE F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0000DBB3 F800 0056 38               	dc.b $F8, $0, $0, $56, $38
0000DBB8 F805 0004 48               	dc.b $F8, $5, $0, $4, $48
0000DBBD F805 0000 58               	dc.b $F8, $5, $0, $0, $58
0000DBC2 F805 003A 68               	dc.b $F8, $5, $0, $3A, $68
0000DBC7 F805 002E 78               	dc.b $F8, $5, $0, $2E, $78
0000DBCC F805 004A 88               	dc.b $F8, $5, $0, $4A, $88
0000DBD1 F805 0000 98               	dc.b $F8, $5, $0, $0, $98
0000DBD6 F805 003A A8               	dc.b $F8, $5, $0, $3A, $A8
0000DBDB F805 000C B8               	dc.b $F8, $5, $0, $C, $B8
0000DBE0 07                         Map_c5df_19E: 	dc.b $7
0000DBE1 F805 004E 80               	dc.b $F8, $5, $0, $4E, $80
0000DBE6 F800 0056 90               	dc.b $F8, $0, $0, $56, $90
0000DBEB F805 004E A0               	dc.b $F8, $5, $0, $4E, $A0
0000DBF0 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000DBF5 F805 004E C0               	dc.b $F8, $5, $0, $4E, $C0
0000DBFA F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000DBFF F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000DC04 04                         Map_c5df_1C2: 	dc.b $4
0000DC05 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000DC0A F805 0032 F0               	dc.b $F8, $5, $0, $32, $F0
0000DC0F F805 002E 00               	dc.b $F8, $5, $0, $2E, $0
0000DC14 F805 0010 10               	dc.b $F8, $5, $0, $10, $10
0000DC19 02                         Map_c5df_1D7: 	dc.b $2
0000DC1A 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000DC1F F402 0057 0C               	dc.b $F4, $2, $0, $57, $C
0000DC24 02                         Map_c5df_1E2: 	dc.b $2
0000DC25 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000DC2A F406 005A 08               	dc.b $F4, $6, $0, $5A, $8
0000DC2F 02                         Map_c5df_1ED: 	dc.b $2
0000DC30 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000DC35 F406 0060 08               	dc.b $F4, $6, $0, $60, $8
0000DC3A 0D                         Map_c5df_1F8: 	dc.b $D
0000DC3B E40C 0070 F4               	dc.b $E4, $C, $0, $70, $F4
0000DC40 E402 0074 14               	dc.b $E4, $2, $0, $74, $14
0000DC45 EC04 0077 EC               	dc.b $EC, $4, $0, $77, $EC
0000DC4A F405 0079 E4               	dc.b $F4, $5, $0, $79, $E4
0000DC4F 140C 1870 EC               	dc.b $14, $C, $18, $70, $EC
0000DC54 0402 1874 E4               	dc.b $4, $2, $18, $74, $E4
0000DC59 0C04 1877 04               	dc.b $C, $4, $18, $77, $4
0000DC5E FC05 1879 0C               	dc.b $FC, $5, $18, $79, $C
0000DC63 EC08 007D FC               	dc.b $EC, $8, $0, $7D, $FC
0000DC68 F40C 007C F4               	dc.b $F4, $C, $0, $7C, $F4
0000DC6D FC08 007C F4               	dc.b $FC, $8, $0, $7C, $F4
0000DC72 040C 007C EC               	dc.b $4, $C, $0, $7C, $EC
0000DC77 0C08 007C EC               	dc.b $C, $8, $0, $7C, $EC
0000DC7C 05                         Map_c5df_23A: 	dc.b $5
0000DC7D F805 0014 DC               	dc.b $F8, $5, $0, $14, $DC
0000DC82 F801 0020 EC               	dc.b $F8, $1, $0, $20, $EC
0000DC87 F805 002E F4               	dc.b $F8, $5, $0, $2E, $F4
0000DC8C F805 0000 04               	dc.b $F8, $5, $0, $0, $4
0000DC91 F805 0026 14               	dc.b $F8, $5, $0, $26, $14
0000DC96                            	even
0000DC96                            	even
0000DC96                            ; ---------------------------------------------------------------------------
0000DC96                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DC96                            ; ---------------------------------------------------------------------------
0000DC96                            Map_obj39:
0000DC96                            	include "_maps\obj39.asm"
0000DC96                            ; ---------------------------------------------------------------------------
0000DC96                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DC96                            ; ---------------------------------------------------------------------------
0000DC96 0000                       		dc.w byte_CBAC-Map_obj39
0000DC98 0000                       		dc.w byte_CBB7-Map_obj39
0000DC9A 0000                       		dc.w byte_CBC2-Map_obj39
0000DC9C 0000                       		dc.w byte_CBCD-Map_obj39
0000DC9E 02                         byte_CBAC:	dc.b 2
0000DC9F F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000DCA4 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000DCA9 02                         byte_CBB7:	dc.b 2
0000DCAA F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000DCAF F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000DCB4 02                         byte_CBC2:	dc.b 2
0000DCB5 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000DCBA F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000DCBF 02                         byte_CBCD:	dc.b 2
0000DCC0 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000DCC5 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000DCCA                            		even
0000DCCA                            		even
0000DCCA                            
0000DCCA                            ; ---------------------------------------------------------------------------
0000DCCA                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000DCCA                            ; ---------------------------------------------------------------------------
0000DCCA 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000DCCC 0000                       		dc.w byte_CC13-Map_obj3A
0000DCCE 0000                       		dc.w byte_CC32-Map_obj3A
0000DCD0 0000                       		dc.w byte_CC51-Map_obj3A
0000DCD2 0000                       		dc.w byte_CC75-Map_obj3A
0000DCD4                            		;dc.w byte_CB47-Map_obj3A
0000DCD4                            		;dc.w byte_CB26-Map_obj3A
0000DCD4                            		;dc.w byte_CB31-Map_obj3A
0000DCD4                            		;dc.w byte_CB3C-Map_obj3A
0000DCD4 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000DCD5 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000DCDA F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000DCDF F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000DCE4 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000DCE9 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000DCEE F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000DCF3 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000DCF8 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000DCFD F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000DD02 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000DD07 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000DD0C F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000DD11 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000DD16 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000DD1B F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000DD20 06                         byte_CC13:	dc.b 6			; PASSED
0000DD21 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000DD26 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DD2B F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000DD30 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000DD35 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DD3A F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000DD3F 06                         byte_CC32:	dc.b 6			; SCORE
0000DD40 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DD45 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DD4A F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DD4F F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DD54 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DD59 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DD5E 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000DD5F F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000DD64 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DD69 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DD6E F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DD73 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DD78 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000DD7D F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DD82 07                         byte_CC75:	dc.b 7			; RING BONUS
0000DD83 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DD88 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DD8D F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DD92 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DD97 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DD9C F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000DDA1 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DDA6                            		even
0000DDA6                            ; ---------------------------------------------------------------------------
0000DDA6                            ; Sprite mappings - special stage results screen
0000DDA6                            ; ---------------------------------------------------------------------------
0000DDA6 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000DDA8 0000                       		dc.w byte_CCEE-Map_obj7E
0000DDAA 0000                       		dc.w byte_CD0D-Map_obj7E
0000DDAC                            		;dc.w byte_CB47-Map_obj7E
0000DDAC 0000                       		dc.w byte_CD31-Map_obj7E
0000DDAE 0000                       		dc.w byte_CD46-Map_obj7E
0000DDB0 0000                       		dc.w byte_CD5B-Map_obj7E
0000DDB2 0000                       		dc.w byte_CD6B-Map_obj7E
0000DDB4 0000                       		dc.w byte_CDA8-Map_obj7E
0000DDB6 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000DDB7 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000DDBC F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000DDC1 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000DDC6 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000DDCB F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000DDD0 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000DDD5 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000DDDA F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DDDF F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000DDE4 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000DDE9 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000DDEE F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000DDF3 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000DDF8 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000DDF9 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DDFE F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DE03 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DE08 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DE0D F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DE12 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DE17 07                         byte_CD0D:	dc.b 7
0000DE18 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DE1D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DE22 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DE27 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DE2C FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DE31 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000DE36 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DE3B 04                         byte_CD31:	dc.b 4
0000DE3C F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000DE41 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000DE46 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000DE4B F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000DE50 04                         byte_CD46:	dc.b 4
0000DE51 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000DE56 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000DE5B F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000DE60 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000DE65 03                         byte_CD5B:	dc.b 3
0000DE66 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000DE6B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000DE70 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000DE75 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000DE76 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000DE7B F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000DE80 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000DE85 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000DE8A F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000DE8F F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000DE94 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000DE99 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000DE9E F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000DEA3 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000DEA8 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000DEAD F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000DEB2 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000DEB3 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000DEB8 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000DEBD F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000DEC2 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000DEC7 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000DECC F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000DED1 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000DED6 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000DEDB F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000DEE0 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000DEE5 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000DEEA F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000DEEF F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000DEF4 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000DEF9 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000DEFE                            		even
0000DEFE                            ; ---------------------------------------------------------------------------
0000DEFE                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000DEFE                            ; ---------------------------------------------------------------------------
0000DEFE                            Map_obj7F:
0000DEFE                            	include "_maps\obj7F.asm"
0000DEFE                            ; ---------------------------------------------------------------------------
0000DEFE                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000DEFE                            ; ---------------------------------------------------------------------------
0000DEFE 0000                       		dc.w byte_CE02-Map_obj7F
0000DF00 0000                       		dc.w byte_CE08-Map_obj7F
0000DF02 0000                       		dc.w byte_CE0E-Map_obj7F
0000DF04 0000                       		dc.w byte_CE14-Map_obj7F
0000DF06 0000                       		dc.w byte_CE1A-Map_obj7F
0000DF08 0000                       		dc.w byte_CE20-Map_obj7F
0000DF0A 0000                       		dc.w byte_CE26-Map_obj7F
0000DF0C 01                         byte_CE02:	dc.b 1
0000DF0D F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000DF12 01                         byte_CE08:	dc.b 1
0000DF13 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000DF18 01                         byte_CE0E:	dc.b 1
0000DF19 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000DF1E 01                         byte_CE14:	dc.b 1
0000DF1F F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000DF24 01                         byte_CE1A:	dc.b 1
0000DF25 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000DF2A 01                         byte_CE20:	dc.b 1
0000DF2B F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000DF30 00                         byte_CE26:	dc.b 0			; Blank frame
0000DF32 00                         		even
0000DF32 00                         		even
0000DF32                            
0000DF32                            ; ===========================================================================
0000DF32                            ; ---------------------------------------------------------------------------
0000DF32                            ; Object 36 - spikes
0000DF32                            ; ---------------------------------------------------------------------------
0000DF32                            
0000DF32                            Obj36:					; XREF: Obj_Index
0000DF32 7000                       		moveq	#0,d0
0000DF34 1028 0024                  		move.b	$24(a0),d0
0000DF38 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000DF3C 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000DF40                            ; ===========================================================================
0000DF40 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000DF42 0000                       		dc.w Obj36_Solid-Obj36_Index
0000DF44                            
0000DF44 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000DF46 0110                       		dc.b 1,	$10
0000DF48 0204                       		dc.b 2,	4
0000DF4A 031C                       		dc.b 3,	$1C
0000DF4C 0440                       		dc.b 4,	$40
0000DF4E 0510                       		dc.b 5,	$10
0000DF50                            ; ===========================================================================
0000DF50                            
0000DF50                            Obj36_Main:				; XREF: Obj36_Index
0000DF50 5428 0024                  		addq.b	#2,$24(a0)
0000DF54 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000DF5C 317C 051B 0002             		move.w	#$51B,2(a0)
0000DF62 0028 0004 0001             		ori.b	#4,1(a0)
0000DF68 117C 0004 0018             		move.b	#4,$18(a0)
0000DF6E 1028 0028                  		move.b	$28(a0),d0
0000DF72 0228 000F 0028             		andi.b	#$F,$28(a0)
0000DF78 0240 00F0                  		andi.w	#$F0,d0
0000DF7C 43F9 0000 DF44             		lea	(Obj36_Var).l,a1
0000DF82 E648                       		lsr.w	#3,d0
0000DF84 D2C0                       		adda.w	d0,a1
0000DF86 1159 001A                  		move.b	(a1)+,$1A(a0)
0000DF8A 1159 0019                  		move.b	(a1)+,$19(a0)
0000DF8E 3168 0008 0030             		move.w	8(a0),$30(a0)
0000DF94 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000DF9A                            
0000DF9A                            Obj36_Solid:				; XREF: Obj36_Index
0000DF9A 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000DF9E 343C 0004                  		move.w	#4,d2
0000DFA2 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000DFA8 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000DFAA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000DFB0 6600                       		bne.s	Obj36_Upright	; if not, branch
0000DFB2 343C 0014                  		move.w	#$14,d2
0000DFB6                            
0000DFB6                            ; Spikes types $1x and $5x face	sideways
0000DFB6                            
0000DFB6                            Obj36_SideWays:				; XREF: Obj36_Solid
0000DFB6 323C 001B                  		move.w	#$1B,d1
0000DFBA 3602                       		move.w	d2,d3
0000DFBC 5243                       		addq.w	#1,d3
0000DFBE 3828 0008                  		move.w	8(a0),d4
0000DFC2 6100 0000                  		bsr.w	SolidObject
0000DFC6 0828 0003 0022             		btst	#3,$22(a0)
0000DFCC 6600                       		bne.s	Obj36_Display
0000DFCE 0C44 0001                  		cmpi.w	#1,d4
0000DFD2 6700                       		beq.s	Obj36_Hurt
0000DFD4 6000                       		bra.s	Obj36_Display
0000DFD6                            ; ===========================================================================
0000DFD6                            
0000DFD6                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000DFD6                            
0000DFD6                            Obj36_Upright:				; XREF: Obj36_Solid
0000DFD6 7200                       		moveq	#0,d1
0000DFD8 1228 0019                  		move.b	$19(a0),d1
0000DFDC 0641 000B                  		addi.w	#$B,d1
0000DFE0 343C 0010                  		move.w	#$10,d2
0000DFE4 363C 0011                  		move.w	#$11,d3
0000DFE8 3828 0008                  		move.w	8(a0),d4
0000DFEC 6100 0000                  		bsr.w	SolidObject
0000DFF0 0828 0003 0022             		btst	#3,$22(a0)
0000DFF6 6600                       		bne.s	Obj36_Hurt
0000DFF8 4A44                       		tst.w	d4
0000DFFA 6A00                       		bpl.s	Obj36_Display
0000DFFC                            
0000DFFC                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000DFFC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000E000 6600                       		bne.s	Obj36_Display	; if yes, branch
0000E002 2F08                       		move.l	a0,-(sp)
0000E004 2448                       		movea.l	a0,a2
0000E006 41F8 D000                  		lea	($FFFFD000).w,a0
0000E00A 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000E010 6400                       		bcc.s	loc_CF20
0000E012 2628 000C                  		move.l	$C(a0),d3
0000E016 3028 0012                  		move.w	$12(a0),d0
0000E01A 48C0                       		ext.l	d0
0000E01C E180                       		asl.l	#8,d0
0000E01E 9680                       		sub.l	d0,d3
0000E020 2143 000C                  		move.l	d3,$C(a0)
0000E024 4EB9 0000 0000             		jsr	HurtSonic
0000E02A                            
0000E02A                            loc_CF20:
0000E02A 205F                       		movea.l	(sp)+,a0
0000E02C                            
0000E02C                            Obj36_Display:
0000E02C 6100 0000                  		bsr.w	DisplaySprite
0000E030 3028 0030                  		move.w	$30(a0),d0
0000E034 0240 FF80                  		andi.w	#$FF80,d0
0000E038 3238 F700                  		move.w	($FFFFF700).w,d1
0000E03C 0441 0080                  		subi.w	#$80,d1
0000E040 0241 FF80                  		andi.w	#$FF80,d1
0000E044 9041                       		sub.w	d1,d0
0000E046 0C40 0280                  		cmpi.w	#$280,d0
0000E04A 6200 0000                  		bhi.w	DeleteObject
0000E04E 4E75                       		rts	
0000E050                            ; ===========================================================================
0000E050                            
0000E050                            Obj36_Type0x:				; XREF: Obj36_Solid
0000E050 7000                       		moveq	#0,d0
0000E052 1028 0028                  		move.b	$28(a0),d0
0000E056 D040                       		add.w	d0,d0
0000E058 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000E05C 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000E060                            ; ===========================================================================
0000E060 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000E062 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000E064 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000E066                            ; ===========================================================================
0000E066                            
0000E066                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000E066 4E75                       		rts			; don't move the object
0000E068                            ; ===========================================================================
0000E068                            
0000E068                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000E068 6100 0000                  		bsr.w	Obj36_Wait
0000E06C 7000                       		moveq	#0,d0
0000E06E 1028 0034                  		move.b	$34(a0),d0
0000E072 D068 0032                  		add.w	$32(a0),d0
0000E076 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000E07A 4E75                       		rts	
0000E07C                            ; ===========================================================================
0000E07C                            
0000E07C                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000E07C 6100 0000                  		bsr.w	Obj36_Wait
0000E080 7000                       		moveq	#0,d0
0000E082 1028 0034                  		move.b	$34(a0),d0
0000E086 D068 0030                  		add.w	$30(a0),d0
0000E08A 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000E08E 4E75                       		rts	
0000E090                            ; ===========================================================================
0000E090                            
0000E090                            Obj36_Wait:
0000E090 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000E094 6700                       		beq.s	loc_CFA4	; if yes, branch
0000E096 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000E09A 6600                       		bne.s	locret_CFE6
0000E09C 4A28 0001                  		tst.b	1(a0)
0000E0A0 6A00                       		bpl.s	locret_CFE6
0000E0A2 303C 00B6                  		move.w	#$B6,d0
0000E0A6 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000E0AC 6000                       		bra.s	locret_CFE6
0000E0AE                            ; ===========================================================================
0000E0AE                            
0000E0AE                            loc_CFA4:
0000E0AE 4A68 0036                  		tst.w	$36(a0)
0000E0B2 6700                       		beq.s	loc_CFC6
0000E0B4 0468 0800 0034             		subi.w	#$800,$34(a0)
0000E0BA 6400                       		bcc.s	locret_CFE6
0000E0BC 317C 0000 0034             		move.w	#0,$34(a0)
0000E0C2 317C 0000 0036             		move.w	#0,$36(a0)
0000E0C8 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E0CE 6000                       		bra.s	locret_CFE6
0000E0D0                            ; ===========================================================================
0000E0D0                            
0000E0D0                            loc_CFC6:
0000E0D0 0668 0800 0034             		addi.w	#$800,$34(a0)
0000E0D6 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000E0DC 6500                       		bcs.s	locret_CFE6
0000E0DE 317C 2000 0034             		move.w	#$2000,$34(a0)
0000E0E4 317C 0001 0036             		move.w	#1,$36(a0)
0000E0EA 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E0F0                            
0000E0F0                            locret_CFE6:
0000E0F0 4E75                       		rts	
0000E0F2                            ; ===========================================================================
0000E0F2                            ; ---------------------------------------------------------------------------
0000E0F2                            ; Sprite mappings - spikes
0000E0F2                            ; ---------------------------------------------------------------------------
0000E0F2                            Map_obj36:
0000E0F2                            	include "_maps\obj36.asm"
0000E0F2                            Map_obj36_inner:
0000E0F2 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000E0F4 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000E0F6 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000E0F8 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000E0FA 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000E0FC 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000E0FE 03                         Map_obj36_inner_C: 	dc.b $3
0000E0FF F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000E104 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000E109 F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000E10E 03                         Map_obj36_inner_1C: 	dc.b $3
0000E10F EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000E114 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000E119 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000E11E 01                         Map_obj36_inner_2C: 	dc.b $1
0000E11F F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000E124 03                         Map_obj36_inner_32: 	dc.b $3
0000E125 F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000E12A F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000E12F F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000E134 06                         Map_obj36_inner_42: 	dc.b $6
0000E135 F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000E13A F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000E13F F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000E144 F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000E149 F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000E14E F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000E153 01                         Map_obj36_inner_61: 	dc.b $1
0000E154 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000E15A 00                         	even
0000E15A 00                         	even
0000E15A                            
0000E15A                            ; ===========================================================================
0000E15A                            ; ---------------------------------------------------------------------------
0000E15A                            ; Object 3B - purple rock (GHZ)
0000E15A                            ; ---------------------------------------------------------------------------
0000E15A                            
0000E15A                            Obj3B:					; XREF: Obj_Index
0000E15A 7000                       		moveq	#0,d0
0000E15C 1028 0024                  		move.b	$24(a0),d0
0000E160 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000E164 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000E168                            ; ===========================================================================
0000E168 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000E16A 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000E16C                            ; ===========================================================================
0000E16C                            
0000E16C                            Obj3B_Main:				; XREF: Obj3B_Index
0000E16C 5428 0024                  		addq.b	#2,$24(a0)
0000E170 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000E178 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000E17E 117C 0004 0001             		move.b	#4,1(a0)
0000E184 117C 0013 0019             		move.b	#$13,$19(a0)
0000E18A 117C 0004 0018             		move.b	#4,$18(a0)
0000E190                            
0000E190                            Obj3B_Solid:				; XREF: Obj3B_Index
0000E190 323C 001B                  		move.w	#$1B,d1
0000E194 343C 0010                  		move.w	#$10,d2
0000E198 363C 0010                  		move.w	#$10,d3
0000E19C 3828 0008                  		move.w	8(a0),d4
0000E1A0 6100 0000                  		bsr.w	SolidObject
0000E1A4 6100 0000                  		bsr.w	DisplaySprite
0000E1A8 3028 0008                  		move.w	8(a0),d0
0000E1AC 0240 FF80                  		andi.w	#$FF80,d0
0000E1B0 3238 F700                  		move.w	($FFFFF700).w,d1
0000E1B4 0441 0080                  		subi.w	#$80,d1
0000E1B8 0241 FF80                  		andi.w	#$FF80,d1
0000E1BC 9041                       		sub.w	d1,d0
0000E1BE 0C40 0280                  		cmpi.w	#$280,d0
0000E1C2 6200 0000                  		bhi.w	DeleteObject
0000E1C6 4E75                       		rts	
0000E1C8                            ; ===========================================================================
0000E1C8                            ; ---------------------------------------------------------------------------
0000E1C8                            ; Object 49 - waterfall	sound effect (GHZ)
0000E1C8                            ; ---------------------------------------------------------------------------
0000E1C8                            
0000E1C8                            Obj49:					; XREF: Obj_Index
0000E1C8 7000                       		moveq	#0,d0
0000E1CA 1028 0024                  		move.b	$24(a0),d0
0000E1CE 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000E1D2 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000E1D6                            ; ===========================================================================
0000E1D6 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000E1D8 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000E1DA                            ; ===========================================================================
0000E1DA                            
0000E1DA                            Obj49_Main:				; XREF: Obj49_Index
0000E1DA 5428 0024                  		addq.b	#2,$24(a0)
0000E1DE 117C 0004 0001             		move.b	#4,1(a0)
0000E1E4                            
0000E1E4                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000E1E4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E1E8 0200 003F                  		andi.b	#$3F,d0
0000E1EC 6600                       		bne.s	Obj49_ChkDel
0000E1EE 303C 00D0                  		move.w	#$D0,d0
0000E1F2 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000E1F8                            
0000E1F8                            Obj49_ChkDel:
0000E1F8 3028 0008                  		move.w	8(a0),d0
0000E1FC 0240 FF80                  		andi.w	#$FF80,d0
0000E200 3238 F700                  		move.w	($FFFFF700).w,d1
0000E204 0441 0080                  		subi.w	#$80,d1
0000E208 0241 FF80                  		andi.w	#$FF80,d1
0000E20C 9041                       		sub.w	d1,d0
0000E20E 0C40 0280                  		cmpi.w	#$280,d0
0000E212 6200 0000                  		bhi.w	DeleteObject
0000E216 4E75                       		rts	
0000E218                            ; ===========================================================================
0000E218                            ; ---------------------------------------------------------------------------
0000E218                            ; Sprite mappings - purple rock	(GHZ)
0000E218                            ; ---------------------------------------------------------------------------
0000E218                            Map_obj3B:
0000E218                            	include "_maps\obj3B.asm"
0000E218                            ; ---------------------------------------------------------------------------
0000E218                            ; Sprite mappings - purple rock	(GHZ)
0000E218                            ; ---------------------------------------------------------------------------
0000E218 0000                       		dc.w byte_D110-Map_obj3B
0000E21A 02                         byte_D110:	dc.b 2
0000E21B F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000E220 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000E226 00                         		even
0000E226 00                         		even
0000E226                            
0000E226                            ; ===========================================================================
0000E226                            ; ---------------------------------------------------------------------------
0000E226                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000E226                            ; ---------------------------------------------------------------------------
0000E226                            
0000E226                            Obj3C:					; XREF: Obj_Index
0000E226 7000                       		moveq	#0,d0
0000E228 1028 0024                  		move.b	$24(a0),d0
0000E22C 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000E230 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000E234 6000 0000                  		bra.w	MarkObjGone
0000E238                            ; ===========================================================================
0000E238 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000E23A 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000E23C 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000E23E                            ; ===========================================================================
0000E23E                            
0000E23E                            Obj3C_Main:				; XREF: Obj3C_Index
0000E23E 5428 0024                  		addq.b	#2,$24(a0)
0000E242 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000E24A 317C 450F 0002             		move.w	#$450F,2(a0)
0000E250 117C 0004 0001             		move.b	#4,1(a0)
0000E256 117C 0010 0019             		move.b	#$10,$19(a0)
0000E25C 117C 0004 0018             		move.b	#4,$18(a0)
0000E262 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000E268                            
0000E268                            Obj3C_Solid:				; XREF: Obj3C_Index
0000E268 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000E26E 323C 001B                  		move.w	#$1B,d1
0000E272 343C 0020                  		move.w	#$20,d2
0000E276 363C 0020                  		move.w	#$20,d3
0000E27A 3828 0008                  		move.w	8(a0),d4
0000E27E 6100 0000                  		bsr.w	SolidObject
0000E282 0828 0005 0022             		btst	#5,$22(a0)
0000E288 6600                       		bne.s	Obj3C_ChkRoll
0000E28A                            
0000E28A                            locret_D180:
0000E28A 4E75                       		rts	
0000E28C                            ; ===========================================================================
0000E28C                            
0000E28C                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000E28C 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000E292 66F6                       		bne.s	locret_D180	; if not, branch
0000E294 3028 0030                  		move.w	$30(a0),d0
0000E298 6A00                       		bpl.s	Obj3C_ChkSpeed
0000E29A 4440                       		neg.w	d0
0000E29C                            
0000E29C                            Obj3C_ChkSpeed:
0000E29C 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000E2A0 65E8                       		bcs.s	locret_D180	; if not, branch
0000E2A2 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000E2A8 5869 0008                  		addq.w	#4,8(a1)
0000E2AC 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000E2B2 3028 0008                  		move.w	8(a0),d0
0000E2B6 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000E2BA 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000E2BC 5169 0008                  		subq.w	#8,8(a1)
0000E2C0 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000E2C6                            
0000E2C6                            Obj3C_Smash:
0000E2C6 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E2CC 08A8 0005 0022             		bclr	#5,$22(a0)
0000E2D2 08A9 0005 0022             		bclr	#5,$22(a1)
0000E2D8 7207                       		moveq	#7,d1		; load 8 fragments
0000E2DA 343C 0070                  		move.w	#$70,d2
0000E2DE 6100                       		bsr.s	SmashObject
0000E2E0                            
0000E2E0                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000E2E0 6100 0000                  		bsr.w	SpeedToPos
0000E2E4 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000E2EA 6100 0000                  		bsr.w	DisplaySprite
0000E2EE 4A28 0001                  		tst.b	1(a0)
0000E2F2 6A00 0000                  		bpl.w	DeleteObject
0000E2F6 4E75                       		rts	
0000E2F8                            
0000E2F8                            ; ---------------------------------------------------------------------------
0000E2F8                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000E2F8                            ; ---------------------------------------------------------------------------
0000E2F8                            
0000E2F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2F8                            
0000E2F8                            
0000E2F8                            SmashObject:				; XREF: Obj3C_Smash
0000E2F8 7000                       		moveq	#0,d0
0000E2FA 1028 001A                  		move.b	$1A(a0),d0
0000E2FE D040                       		add.w	d0,d0
0000E300 2668 0004                  		movea.l	4(a0),a3
0000E304 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000E308 524B                       		addq.w	#1,a3
0000E30A 08E8 0005 0001             		bset	#5,1(a0)
0000E310 1810                       		move.b	0(a0),d4
0000E312 1A28 0001                  		move.b	1(a0),d5
0000E316 2248                       		movea.l	a0,a1
0000E318 6000                       		bra.s	Smash_LoadFrag
0000E31A                            ; ===========================================================================
0000E31A                            
0000E31A                            Smash_Loop:
0000E31A 6100 0000                  		bsr.w	SingleObjLoad
0000E31E 6600                       		bne.s	Smash_PlaySnd
0000E320 5A4B                       		addq.w	#5,a3
0000E322                            
0000E322                            Smash_LoadFrag:				; XREF: SmashObject
0000E322 137C 0004 0024             		move.b	#4,$24(a1)
0000E328 1284                       		move.b	d4,0(a1)
0000E32A 234B 0004                  		move.l	a3,4(a1)
0000E32E 1345 0001                  		move.b	d5,1(a1)
0000E332 3368 0008 0008             		move.w	8(a0),8(a1)
0000E338 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E33E 3368 0002 0002             		move.w	2(a0),2(a1)
0000E344 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000E34A 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000E350 335C 0010                  		move.w	(a4)+,$10(a1)
0000E354 335C 0012                  		move.w	(a4)+,$12(a1)
0000E358 B3C8                       		cmpa.l	a0,a1
0000E35A 6400                       		bcc.s	loc_D268
0000E35C 2F08                       		move.l	a0,-(sp)
0000E35E 2049                       		movea.l	a1,a0
0000E360 6100 0000                  		bsr.w	SpeedToPos
0000E364 D568 0012                  		add.w	d2,$12(a0)
0000E368 205F                       		movea.l	(sp)+,a0
0000E36A 6100 0000                  		bsr.w	DisplaySprite2
0000E36E                            
0000E36E                            loc_D268:
0000E36E 51C9 FFAA                  		dbf	d1,Smash_Loop
0000E372                            
0000E372                            Smash_PlaySnd:
0000E372 303C 00CB                  		move.w	#$CB,d0
0000E376 4EF9 0000 1C82             		jmp	(PlaySound_Special).l ;	play smashing sound
0000E37C                            ; End of function SmashObject
0000E37C                            
0000E37C                            ; ===========================================================================
0000E37C                            ; Smashed block	fragment speeds
0000E37C                            ;
0000E37C 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000E380 0600 FF00                  		dc.w $600, $FF00
0000E384 0600 0100                  		dc.w $600, $100
0000E388 0400 0500                  		dc.w $400, $500
0000E38C 0600 FA00                  		dc.w $600, $FA00
0000E390 0800 FE00                  		dc.w $800, $FE00
0000E394 0800 0200                  		dc.w $800, $200
0000E398 0600 0600                  		dc.w $600, $600
0000E39C                            
0000E39C FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000E3A0 F800 FE00                  		dc.w $F800, $FE00
0000E3A4 F800 0200                  		dc.w $F800, $200
0000E3A8 FA00 0600                  		dc.w $FA00, $600
0000E3AC FC00 FB00                  		dc.w $FC00, $FB00
0000E3B0 FA00 FF00                  		dc.w $FA00, $FF00
0000E3B4 FA00 0100                  		dc.w $FA00, $100
0000E3B8 FC00 0500                  		dc.w $FC00, $500
0000E3BC                            ; ---------------------------------------------------------------------------
0000E3BC                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E3BC                            ; ---------------------------------------------------------------------------
0000E3BC                            Map_obj3C:
0000E3BC                            	include "_maps\obj3C.asm"
0000E3BC                            ; ---------------------------------------------------------------------------
0000E3BC                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E3BC                            ; ---------------------------------------------------------------------------
0000E3BC 0000                       		dc.w byte_D2BC-Map_obj3C
0000E3BE 0000                       		dc.w byte_D2E5-Map_obj3C
0000E3C0 0000                       		dc.w byte_D30E-Map_obj3C
0000E3C2 08                         byte_D2BC:	dc.b 8
0000E3C3 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000E3C8 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000E3CD 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000E3D2 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000E3D7 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E3DC F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E3E1 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E3E6 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E3EB 08                         byte_D2E5:	dc.b 8
0000E3EC E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E3F1 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E3F6 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E3FB 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E400 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E405 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E40A 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E40F 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E414 08                         byte_D30E:	dc.b 8
0000E415 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E41A F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E41F 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E424 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E429 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000E42E F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000E433 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000E438 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000E43E 00                         		even
0000E43E 00                         		even
0000E43E                            
0000E43E                            ; ---------------------------------------------------------------------------
0000E43E                            ; Object code loading subroutine
0000E43E                            ; ---------------------------------------------------------------------------
0000E43E                            
0000E43E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E43E                            
0000E43E                            
0000E43E                            ObjectsLoad:				; XREF: TitleScreen; et al
0000E43E 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000E442 7E7F                       		moveq	#$7F,d7
0000E444 7000                       		moveq	#0,d0
0000E446 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000E44C 6400                       		bcc.s	loc_D362
0000E44E                            
0000E44E                            loc_D348:
0000E44E 1010                       		move.b	(a0),d0		; load object number from RAM
0000E450 6700                       		beq.s	loc_D358
0000E452 D040                       		add.w	d0,d0
0000E454 D040                       		add.w	d0,d0
0000E456 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000E45A 4E91                       		jsr	(a1)		; run the object's code
0000E45C 7000                       		moveq	#0,d0
0000E45E                            
0000E45E                            loc_D358:
0000E45E 41E8 0040                  		lea	$40(a0),a0	; next object
0000E462 51CF FFEA                  		dbf	d7,loc_D348
0000E466 4E75                       		rts	
0000E468                            ; ===========================================================================
0000E468                            
0000E468                            loc_D362:
0000E468 7E1F                       		moveq	#$1F,d7
0000E46A 61E2                       		bsr.s	loc_D348
0000E46C 7E5F                       		moveq	#$5F,d7
0000E46E                            
0000E46E                            loc_D368:
0000E46E 7000                       		moveq	#0,d0
0000E470 1010                       		move.b	(a0),d0
0000E472 6700                       		beq.s	loc_D378
0000E474 4A28 0001                  		tst.b	1(a0)
0000E478 6A00                       		bpl.s	loc_D378
0000E47A 6100 0000                  		bsr.w	DisplaySprite
0000E47E                            
0000E47E                            loc_D378:
0000E47E 41E8 0040                  		lea	$40(a0),a0
0000E482                            
0000E482                            loc_D37C:
0000E482 51CF FFEA                  		dbf	d7,loc_D368
0000E486 4E75                       		rts	
0000E488                            ; End of function ObjectsLoad
0000E488                            
0000E488                            ; ===========================================================================
0000E488                            ; ---------------------------------------------------------------------------
0000E488                            ; Object pointers
0000E488                            ; ---------------------------------------------------------------------------
0000E488                            Obj_Index:
0000E488                            	include "_inc\Object pointers.asm"
0000E488                            ; ---------------------------------------------------------------------------
0000E488                            ; Object pointers
0000E488                            ; ---------------------------------------------------------------------------
0000E488 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000E498 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000E4A8 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000E4B8 0000 0000 0000 B6A2 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000E4C8 0000 823A 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000E4D8 0000 8860 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000E4E8 0000 90AE 0000 91A8 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000E4F8 0000 97F2 0000 9AE0 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000E508 0000 0000 0000 A79E 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000E518 0000 AAD6 0000 B0C2 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000E528 0000 A3FA 0000 98C8 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000E538 0000 BC9A 0000 B2B6 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000E548 0000 C6AE 0000 CD5C 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000E558 0000 C20C 0000 DF32 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000E568 0000 D50A 0000 D5C4 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000E578 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000E588 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000E598 0000 C9CA 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000E5A8 0000 E1C8 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000E5B8 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000E5C8 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000E5D8 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000E5E8 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000E5F8 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000E608 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000E618 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000E628 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E638 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E648 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E658 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E668 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E678 0000 0000 0000 D80E 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E688 0000 5C98 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E698 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E6A8 0000 6352 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E6A8 0000 6352 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E6B8                            
0000E6B8                            ; ---------------------------------------------------------------------------
0000E6B8                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E6B8                            ; ---------------------------------------------------------------------------
0000E6B8                            
0000E6B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E6B8                            
0000E6B8                            _objectFall: 
0000E6B8                            ObjectFall:
0000E6B8 2428 0008                  		move.l	8(a0),d2
0000E6BC 2628 000C                  		move.l	$C(a0),d3
0000E6C0 3028 0010                  		move.w	$10(a0),d0
0000E6C4 48C0                       		ext.l	d0
0000E6C6 E180                       		asl.l	#8,d0
0000E6C8 D480                       		add.l	d0,d2
0000E6CA 3028 0012                  		move.w	$12(a0),d0
0000E6CE 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000E6D4 48C0                       		ext.l	d0
0000E6D6 E180                       		asl.l	#8,d0
0000E6D8 D680                       		add.l	d0,d3
0000E6DA 2142 0008                  		move.l	d2,8(a0)
0000E6DE 2143 000C                  		move.l	d3,$C(a0)
0000E6E2 4E75                       		rts	
0000E6E4                            ; End of function ObjectFall
0000E6E4                            
0000E6E4                            ; ---------------------------------------------------------------------------
0000E6E4                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E6E4                            ; ---------------------------------------------------------------------------
0000E6E4                            
0000E6E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E6E4                            
0000E6E4                            
0000E6E4                            ObjectFallNoJump:
0000E6E4 2428 0008                  		move.l	8(a0),d2
0000E6E8 2628 000C                  		move.l	$C(a0),d3
0000E6EC 3028 0010                  		move.w	$10(a0),d0
0000E6F0 48C0                       		ext.l	d0
0000E6F2 E180                       		asl.l	#8,d0
0000E6F4 D480                       		add.l	d0,d2
0000E6F6                            ;		cmpi.b	#1,obID(a0)
0000E6F6                            ;		beq.s	ObjectFallSonic
0000E6F6 3028 000C                  		move.w	$C(a0),d0
0000E6FA 5868 000C                  		addi.w	#4,$C(a0)	; increase vertical speed
0000E6FE                            ;		ext.l	d0
0000E6FE                            ;		asl.l	#8,d0
0000E6FE                            ;		add.l	d0,d3
0000E6FE 2142 0008                  		move.l	d2,$8(a0)
0000E702                            ;		move.l	d3,obY(a0)
0000E702 4E75                       		rts	
0000E704                            
0000E704                            ; End of function ObjectFall
0000E704                            
0000E704                            JumpFallSonic:
0000E704 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000E70A                                    
0000E70A E180                               asl.l    #8,d0                ; Apply X speed
0000E70C D1A8 0008                          add.l    d0,$8(a0)
0000E710                                    
0000E710 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000E714 4A41                               tst.w    d1                ; Are we falling?
0000E716 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000E718 4440                               neg.w    d0                ; Make Y movement go up
0000E71A                                    
0000E71A                            .SetYSpeed:
0000E71A 48C0                               ext.l    d0                ; Apply Y speed
0000E71C E180                               asl.l    #8,d0
0000E71E D1A8 000C                          add.l    d0,$C(a0)
0000E722 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000E728 4E75                               rts
0000E72A                            
0000E72A                            ; ---------------------------------------------------------------------------
0000E72A                            ; Subroutine translating object	speed to update	object position
0000E72A                            ; ---------------------------------------------------------------------------
0000E72A                            
0000E72A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E72A                            
0000E72A                            _objectSetSpeed:
0000E72A                            SpeedToPos:
0000E72A 2428 0008                  		move.l	8(a0),d2
0000E72E 2628 000C                  		move.l	$C(a0),d3
0000E732 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E736 48C0                       		ext.l	d0
0000E738 E180                       		asl.l	#8,d0		; multiply speed by $100
0000E73A D480                       		add.l	d0,d2		; add to x-axis	position
0000E73C 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E740 48C0                       		ext.l	d0
0000E742 E180                       		asl.l	#8,d0		; multiply by $100
0000E744 D680                       		add.l	d0,d3		; add to y-axis	position
0000E746 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000E74A 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000E74E 4E75                       		rts	
0000E750                            ; End of function SpeedToPos
0000E750                            
0000E750                            ; ---------------------------------------------------------------------------
0000E750                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E750                            ; ---------------------------------------------------------------------------
0000E750                            
0000E750                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E750                            
0000E750                            _objectDraw:
0000E750                            DisplaySprite:
0000E750 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E754 3028 0018                  		move.w	$18(a0),d0
0000E758 E248                       		lsr.w	#1,d0
0000E75A 0240 0380                  		andi.w	#$380,d0
0000E75E D2C0                       		adda.w	d0,a1
0000E760 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E764 6400                       		bcc.s	locret_D620
0000E766 5451                       		addq.w	#2,(a1)
0000E768 D2D1                       		adda.w	(a1),a1
0000E76A 3288                       		move.w	a0,(a1)
0000E76C                            
0000E76C                            locret_D620:
0000E76C 4E75                       		rts	
0000E76E                            ; End of function DisplaySprite
0000E76E                            
0000E76E                            ; ---------------------------------------------------------------------------
0000E76E                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E76E                            ; ---------------------------------------------------------------------------
0000E76E                            
0000E76E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E76E                            
0000E76E                            _objectDrawChild: 
0000E76E                            DisplaySprite2:
0000E76E 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E772 3029 0018                  		move.w	$18(a1),d0
0000E776 E248                       		lsr.w	#1,d0
0000E778 0240 0380                  		andi.w	#$380,d0
0000E77C D4C0                       		adda.w	d0,a2
0000E77E 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E782 6400                       		bcc.s	locret_D63E
0000E784 5452                       		addq.w	#2,(a2)
0000E786 D4D2                       		adda.w	(a2),a2
0000E788 3489                       		move.w	a1,(a2)
0000E78A                            
0000E78A                            locret_D63E:
0000E78A 4E75                       		rts	
0000E78C                            ; End of function DisplaySprite2
0000E78C                            
0000E78C                            ; ---------------------------------------------------------------------------
0000E78C                            ; Subroutine to	delete an object
0000E78C                            ; ---------------------------------------------------------------------------
0000E78C                            
0000E78C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E78C                            
0000E78C                            _objectDelete: 
0000E78C                            DeleteObject:
0000E78C 2248                       		movea.l	a0,a1
0000E78E                            
0000E78E                            DeleteObject2:
0000E78E 7200                       		moveq	#0,d1
0000E790 700F                       		moveq	#$F,d0
0000E792                            
0000E792                            loc_D646:
0000E792 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E794 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E798 4E75                       		rts	
0000E79A                            ; End of function DeleteObject
0000E79A                            
0000E79A                            ; ===========================================================================
0000E79A 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E79E 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E7A2 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E7A6 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E7AA                            ; ---------------------------------------------------------------------------
0000E7AA                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E7AA                            ; ---------------------------------------------------------------------------
0000E7AA                            
0000E7AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E7AA                            
0000E7AA                            DrawObjects:
0000E7AA                            BuildSprites:				; XREF: TitleScreen; et al
0000E7AA 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E7AE 7A00                       		moveq	#0,d5
0000E7B0 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E7B4 7E07                       		moveq	#7,d7
0000E7B6                            
0000E7B6                            loc_D66A:
0000E7B6 4A54                       		tst.w	(a4)
0000E7B8 6700 0000                  		beq.w	loc_D72E
0000E7BC 7C02                       		moveq	#2,d6
0000E7BE                            
0000E7BE                            loc_D672:
0000E7BE 3074 6000                  		movea.w	(a4,d6.w),a0
0000E7C2 4A10                       		tst.b	(a0)
0000E7C4 6700 0000                  		beq.w	loc_D726
0000E7C8 08A8 0007 0001             		bclr	#7,1(a0)
0000E7CE 1028 0001                  		move.b	1(a0),d0
0000E7D2 1800                       		move.b	d0,d4
0000E7D4 0240 000C                  		andi.w	#$C,d0
0000E7D8 6700                       		beq.s	loc_D6DE
0000E7DA 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E7DE 7000                       		moveq	#0,d0
0000E7E0 1028 0019                  		move.b	$19(a0),d0
0000E7E4 3628 0008                  		move.w	8(a0),d3
0000E7E8 9651                       		sub.w	(a1),d3
0000E7EA 3203                       		move.w	d3,d1
0000E7EC D240                       		add.w	d0,d1
0000E7EE 6B00 0000                  		bmi.w	loc_D726
0000E7F2 3203                       		move.w	d3,d1
0000E7F4 9240                       		sub.w	d0,d1
0000E7F6 0C41 0140                  		cmpi.w	#$140,d1
0000E7FA 6C00                       		bge.s	loc_D726
0000E7FC 0643 0080                  		addi.w	#$80,d3
0000E800 0804 0004                  		btst	#4,d4
0000E804 6700                       		beq.s	loc_D6E8
0000E806 7000                       		moveq	#0,d0
0000E808 1028 0016                  		move.b	$16(a0),d0
0000E80C 3428 000C                  		move.w	$C(a0),d2
0000E810 9469 0004                  		sub.w	4(a1),d2
0000E814 3202                       		move.w	d2,d1
0000E816 D240                       		add.w	d0,d1
0000E818 6B00                       		bmi.s	loc_D726
0000E81A 3202                       		move.w	d2,d1
0000E81C 9240                       		sub.w	d0,d1
0000E81E 0C41 00E0                  		cmpi.w	#$E0,d1
0000E822 6C00                       		bge.s	loc_D726
0000E824 0642 0080                  		addi.w	#$80,d2
0000E828 6000                       		bra.s	loc_D700
0000E82A                            ; ===========================================================================
0000E82A                            
0000E82A                            loc_D6DE:
0000E82A 3428 000A                  		move.w	$A(a0),d2
0000E82E 3628 0008                  		move.w	8(a0),d3
0000E832 6000                       		bra.s	loc_D700
0000E834                            ; ===========================================================================
0000E834                            
0000E834                            loc_D6E8:
0000E834 3428 000C                  		move.w	$C(a0),d2
0000E838 9469 0004                  		sub.w	4(a1),d2
0000E83C 0642 0080                  		addi.w	#$80,d2
0000E840 0C42 0060                  		cmpi.w	#$60,d2
0000E844 6500                       		bcs.s	loc_D726
0000E846 0C42 0180                  		cmpi.w	#$180,d2
0000E84A 6400                       		bcc.s	loc_D726
0000E84C                            
0000E84C                            loc_D700:
0000E84C 2268 0004                  		movea.l	4(a0),a1
0000E850 7200                       		moveq	#0,d1
0000E852 0804 0005                  		btst	#5,d4
0000E856 6600                       		bne.s	loc_D71C
0000E858 1228 001A                  		move.b	$1A(a0),d1
0000E85C D201                       		add.b	d1,d1
0000E85E D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E862 1219                       		move.b	(a1)+,d1
0000E864 5301                       		subq.b	#1,d1
0000E866 6B00                       		bmi.s	loc_D720
0000E868                            
0000E868                            loc_D71C:
0000E868 6100 0000                  		bsr.w	sub_D750
0000E86C                            
0000E86C                            loc_D720:
0000E86C 08E8 0007 0001             		bset	#7,1(a0)
0000E872                            
0000E872                            loc_D726:
0000E872 5446                       		addq.w	#2,d6
0000E874 5554                       		subq.w	#2,(a4)
0000E876 6600 FF46                  		bne.w	loc_D672
0000E87A                            
0000E87A                            loc_D72E:
0000E87A 49EC 0080                  		lea	$80(a4),a4
0000E87E 51CF FF36                  		dbf	d7,loc_D66A
0000E882 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E886 0C05 0050                  		cmpi.b	#$50,d5
0000E88A 6700                       		beq.s	loc_D748
0000E88C 24BC 0000 0000             		move.l	#0,(a2)
0000E892 4E75                       		rts	
0000E894                            ; ===========================================================================
0000E894                            
0000E894                            loc_D748:
0000E894 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E89A 4E75                       		rts	
0000E89C                            ; End of function BuildSprites
0000E89C                            
0000E89C                            
0000E89C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E89C                            
0000E89C                            
0000E89C                            sub_D750:				; XREF: BuildSprites
0000E89C 3668 0002                  		movea.w	2(a0),a3
0000E8A0 0804 0000                  		btst	#0,d4
0000E8A4 6600                       		bne.s	loc_D796
0000E8A6 0804 0001                  		btst	#1,d4
0000E8AA 6600 0000                  		bne.w	loc_D7E4
0000E8AE                            ; End of function sub_D750
0000E8AE                            
0000E8AE                            
0000E8AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E8AE                            
0000E8AE                            
0000E8AE                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E8AE 0C05 0050                  		cmpi.b	#$50,d5
0000E8B2 6700                       		beq.s	locret_D794
0000E8B4 1019                       		move.b	(a1)+,d0
0000E8B6 4880                       		ext.w	d0
0000E8B8 D042                       		add.w	d2,d0
0000E8BA 34C0                       		move.w	d0,(a2)+
0000E8BC 14D9                       		move.b	(a1)+,(a2)+
0000E8BE 5205                       		addq.b	#1,d5
0000E8C0 14C5                       		move.b	d5,(a2)+
0000E8C2 1019                       		move.b	(a1)+,d0
0000E8C4 E148                       		lsl.w	#8,d0
0000E8C6 1019                       		move.b	(a1)+,d0
0000E8C8 D04B                       		add.w	a3,d0
0000E8CA 34C0                       		move.w	d0,(a2)+
0000E8CC 1019                       		move.b	(a1)+,d0
0000E8CE 4880                       		ext.w	d0
0000E8D0 D043                       		add.w	d3,d0
0000E8D2 0240 01FF                  		andi.w	#$1FF,d0
0000E8D6 6600                       		bne.s	loc_D78E
0000E8D8 5240                       		addq.w	#1,d0
0000E8DA                            
0000E8DA                            loc_D78E:
0000E8DA 34C0                       		move.w	d0,(a2)+
0000E8DC 51C9 FFD0                  		dbf	d1,sub_D762
0000E8E0                            
0000E8E0                            locret_D794:
0000E8E0 4E75                       		rts	
0000E8E2                            ; End of function sub_D762
0000E8E2                            
0000E8E2                            ; ===========================================================================
0000E8E2                            
0000E8E2                            loc_D796:
0000E8E2 0804 0001                  		btst	#1,d4
0000E8E6 6600 0000                  		bne.w	loc_D82A
0000E8EA                            
0000E8EA                            loc_D79E:
0000E8EA 0C05 0050                  		cmpi.b	#$50,d5
0000E8EE 6700                       		beq.s	locret_D7E2
0000E8F0 1019                       		move.b	(a1)+,d0
0000E8F2 4880                       		ext.w	d0
0000E8F4 D042                       		add.w	d2,d0
0000E8F6 34C0                       		move.w	d0,(a2)+
0000E8F8 1819                       		move.b	(a1)+,d4
0000E8FA 14C4                       		move.b	d4,(a2)+
0000E8FC 5205                       		addq.b	#1,d5
0000E8FE 14C5                       		move.b	d5,(a2)+
0000E900 1019                       		move.b	(a1)+,d0
0000E902 E148                       		lsl.w	#8,d0
0000E904 1019                       		move.b	(a1)+,d0
0000E906 D04B                       		add.w	a3,d0
0000E908 0A40 0800                  		eori.w	#$800,d0
0000E90C 34C0                       		move.w	d0,(a2)+
0000E90E 1019                       		move.b	(a1)+,d0
0000E910 4880                       		ext.w	d0
0000E912 4440                       		neg.w	d0
0000E914 D804                       		add.b	d4,d4
0000E916 0244 0018                  		andi.w	#$18,d4
0000E91A 5044                       		addq.w	#8,d4
0000E91C 9044                       		sub.w	d4,d0
0000E91E D043                       		add.w	d3,d0
0000E920 0240 01FF                  		andi.w	#$1FF,d0
0000E924 6600                       		bne.s	loc_D7DC
0000E926 5240                       		addq.w	#1,d0
0000E928                            
0000E928                            loc_D7DC:
0000E928 34C0                       		move.w	d0,(a2)+
0000E92A 51C9 FFBE                  		dbf	d1,loc_D79E
0000E92E                            
0000E92E                            locret_D7E2:
0000E92E 4E75                       		rts	
0000E930                            ; ===========================================================================
0000E930                            
0000E930                            loc_D7E4:				; XREF: sub_D750
0000E930 0C05 0050                  		cmpi.b	#$50,d5
0000E934 6700                       		beq.s	locret_D828
0000E936 1019                       		move.b	(a1)+,d0
0000E938 1811                       		move.b	(a1),d4
0000E93A 4880                       		ext.w	d0
0000E93C 4440                       		neg.w	d0
0000E93E E70C                       		lsl.b	#3,d4
0000E940 0244 0018                  		andi.w	#$18,d4
0000E944 5044                       		addq.w	#8,d4
0000E946 9044                       		sub.w	d4,d0
0000E948 D042                       		add.w	d2,d0
0000E94A 34C0                       		move.w	d0,(a2)+
0000E94C 14D9                       		move.b	(a1)+,(a2)+
0000E94E 5205                       		addq.b	#1,d5
0000E950 14C5                       		move.b	d5,(a2)+
0000E952 1019                       		move.b	(a1)+,d0
0000E954 E148                       		lsl.w	#8,d0
0000E956 1019                       		move.b	(a1)+,d0
0000E958 D04B                       		add.w	a3,d0
0000E95A 0A40 1000                  		eori.w	#$1000,d0
0000E95E 34C0                       		move.w	d0,(a2)+
0000E960 1019                       		move.b	(a1)+,d0
0000E962 4880                       		ext.w	d0
0000E964 D043                       		add.w	d3,d0
0000E966 0240 01FF                  		andi.w	#$1FF,d0
0000E96A 6600                       		bne.s	loc_D822
0000E96C 5240                       		addq.w	#1,d0
0000E96E                            
0000E96E                            loc_D822:
0000E96E 34C0                       		move.w	d0,(a2)+
0000E970 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E974                            
0000E974                            locret_D828:
0000E974 4E75                       		rts	
0000E976                            ; ===========================================================================
0000E976                            
0000E976                            loc_D82A:
0000E976 0C05 0050                  		cmpi.b	#$50,d5
0000E97A 6700                       		beq.s	locret_D87C
0000E97C 1019                       		move.b	(a1)+,d0
0000E97E 1811                       		move.b	(a1),d4
0000E980 4880                       		ext.w	d0
0000E982 4440                       		neg.w	d0
0000E984 E70C                       		lsl.b	#3,d4
0000E986 0244 0018                  		andi.w	#$18,d4
0000E98A 5044                       		addq.w	#8,d4
0000E98C 9044                       		sub.w	d4,d0
0000E98E D042                       		add.w	d2,d0
0000E990 34C0                       		move.w	d0,(a2)+
0000E992 1819                       		move.b	(a1)+,d4
0000E994 14C4                       		move.b	d4,(a2)+
0000E996 5205                       		addq.b	#1,d5
0000E998 14C5                       		move.b	d5,(a2)+
0000E99A 1019                       		move.b	(a1)+,d0
0000E99C E148                       		lsl.w	#8,d0
0000E99E 1019                       		move.b	(a1)+,d0
0000E9A0 D04B                       		add.w	a3,d0
0000E9A2 0A40 1800                  		eori.w	#$1800,d0
0000E9A6 34C0                       		move.w	d0,(a2)+
0000E9A8 1019                       		move.b	(a1)+,d0
0000E9AA 4880                       		ext.w	d0
0000E9AC 4440                       		neg.w	d0
0000E9AE D804                       		add.b	d4,d4
0000E9B0 0244 0018                  		andi.w	#$18,d4
0000E9B4 5044                       		addq.w	#8,d4
0000E9B6 9044                       		sub.w	d4,d0
0000E9B8 D043                       		add.w	d3,d0
0000E9BA 0240 01FF                  		andi.w	#$1FF,d0
0000E9BE 6600                       		bne.s	loc_D876
0000E9C0 5240                       		addq.w	#1,d0
0000E9C2                            
0000E9C2                            loc_D876:
0000E9C2 34C0                       		move.w	d0,(a2)+
0000E9C4 51C9 FFB0                  		dbf	d1,loc_D82A
0000E9C8                            
0000E9C8                            locret_D87C:
0000E9C8 4E75                       		rts	
0000E9CA                            ; ---------------------------------------------------------------------------
0000E9CA                            ; Subroutine to	check if an object is on the screen
0000E9CA                            ; ---------------------------------------------------------------------------
0000E9CA                            
0000E9CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E9CA                            
0000E9CA                            
0000E9CA                            ChkObjOnScreen:
0000E9CA 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E9CE 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E9D2 6B00                       		bmi.s	NotOnScreen
0000E9D4 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E9D8 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E9DA                            
0000E9DA 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E9DE 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E9E2 6B00                       		bmi.s	NotOnScreen
0000E9E4 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E9E8 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E9EA                            
0000E9EA 7000                       		moveq	#0,d0		; set flag to 0
0000E9EC 4E75                       		rts	
0000E9EE                            ; ===========================================================================
0000E9EE                            
0000E9EE                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E9EE 7001                       		moveq	#1,d0		; set flag to 1
0000E9F0 4E75                       		rts	
0000E9F2                            ; End of function ChkObjOnScreen
0000E9F2                            
0000E9F2                            
0000E9F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E9F2                            
0000E9F2                            
0000E9F2                            ChkObjOnScreen2:
0000E9F2 7200                       		moveq	#0,d1
0000E9F4 1228 0019                  		move.b	$19(a0),d1
0000E9F8 3028 0008                  		move.w	8(a0),d0
0000E9FC 9078 F700                  		sub.w	($FFFFF700).w,d0
0000EA00 D041                       		add.w	d1,d0
0000EA02 6B00                       		bmi.s	NotOnScreen2
0000EA04 D241                       		add.w	d1,d1
0000EA06 9041                       		sub.w	d1,d0
0000EA08 0C40 0140                  		cmpi.w	#320,d0
0000EA0C 6C00                       		bge.s	NotOnScreen2
0000EA0E                            
0000EA0E 3228 000C                  		move.w	$C(a0),d1
0000EA12 9278 F704                  		sub.w	($FFFFF704).w,d1
0000EA16 6B00                       		bmi.s	NotOnScreen2
0000EA18 0C41 00E0                  		cmpi.w	#224,d1
0000EA1C 6C00                       		bge.s	NotOnScreen2
0000EA1E                            
0000EA1E 7000                       		moveq	#0,d0
0000EA20 4E75                       		rts	
0000EA22                            ; ===========================================================================
0000EA22                            
0000EA22                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000EA22 7001                       		moveq	#1,d0
0000EA24 4E75                       		rts	
0000EA26                            ; End of function ChkObjOnScreen2
0000EA26                            
0000EA26                            ; ---------------------------------------------------------------------------
0000EA26                            ; Subroutine to	load a level's objects
0000EA26                            ; ---------------------------------------------------------------------------
0000EA26                            
0000EA26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EA26                            
0000EA26                            
0000EA26                            ObjPosLoad:				; XREF: Level; et al
0000EA26 7000                       		moveq	#0,d0
0000EA28 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000EA2C 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000EA30 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000EA34                            ; End of function ObjPosLoad
0000EA34                            
0000EA34                            ; ===========================================================================
0000EA34 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000EA36 0000                       		dc.w OPL_Next-OPL_Index
0000EA38                            ; ===========================================================================
0000EA38                            
0000EA38                            OPL_Main:				; XREF: OPL_Index
0000EA38 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000EA3C 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000EA40 ED08                       		lsl.b	#6,d0
0000EA42 E848                       		lsr.w	#4,d0
0000EA44 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000EA4A 2248                       		movea.l	a0,a1
0000EA4C D0F0 0000                  		adda.w	(a0,d0.w),a0
0000EA50 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EA54 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EA58 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000EA5C 21C9 F778                  		move.l	a1,($FFFFF778).w
0000EA60 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000EA64 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EA68 34FC 0101                  		move.w	#$101,(a2)+
0000EA6C 303C 005E                  		move.w	#$5E,d0
0000EA70                            
0000EA70                            OPL_ClrList:
0000EA70 429A                       		clr.l	(a2)+
0000EA72 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000EA76                            
0000EA76 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EA7A 7400                       		moveq	#0,d2
0000EA7C 3C38 F700                  		move.w	($FFFFF700).w,d6
0000EA80 0446 0080                  		subi.w	#$80,d6
0000EA84 6400                       		bcc.s	loc_D93C
0000EA86 7C00                       		moveq	#0,d6
0000EA88                            
0000EA88                            loc_D93C:
0000EA88 0246 FF80                  		andi.w	#$FF80,d6
0000EA8C 2078 F770                  		movea.l	($FFFFF770).w,a0
0000EA90                            
0000EA90                            loc_D944:
0000EA90 BC50                       		cmp.w	(a0),d6
0000EA92 6300                       		bls.s	loc_D956
0000EA94 4A28 0004                  		tst.b	4(a0)
0000EA98 6A00                       		bpl.s	loc_D952
0000EA9A 1412                       		move.b	(a2),d2
0000EA9C 5212                       		addq.b	#1,(a2)
0000EA9E                            
0000EA9E                            loc_D952:
0000EA9E 5C48                       		addq.w	#6,a0
0000EAA0 60EE                       		bra.s	loc_D944
0000EAA2                            ; ===========================================================================
0000EAA2                            
0000EAA2                            loc_D956:
0000EAA2 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EAA6 2078 F774                  		movea.l	($FFFFF774).w,a0
0000EAAA 0446 0080                  		subi.w	#$80,d6
0000EAAE 6500                       		bcs.s	loc_D976
0000EAB0                            
0000EAB0                            loc_D964:
0000EAB0 BC50                       		cmp.w	(a0),d6
0000EAB2 6300                       		bls.s	loc_D976
0000EAB4 4A28 0004                  		tst.b	4(a0)
0000EAB8 6A00                       		bpl.s	loc_D972
0000EABA 522A 0001                  		addq.b	#1,1(a2)
0000EABE                            
0000EABE                            loc_D972:
0000EABE 5C48                       		addq.w	#6,a0
0000EAC0 60EE                       		bra.s	loc_D964
0000EAC2                            ; ===========================================================================
0000EAC2                            
0000EAC2                            loc_D976:
0000EAC2 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EAC6 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000EACC                            
0000EACC                            OPL_Next:				; XREF: OPL_Index
0000EACC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EAD0 7400                       		moveq	#0,d2
0000EAD2 3C38 F700                  		move.w	($FFFFF700).w,d6
0000EAD6 0246 FF80                  		andi.w	#$FF80,d6
0000EADA BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000EADE 6700 0000                  		beq.w	locret_DA3A
0000EAE2 6C00                       		bge.s	loc_D9F6
0000EAE4 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000EAE8 2078 F774                  		movea.l	($FFFFF774).w,a0
0000EAEC 0446 0080                  		subi.w	#$80,d6
0000EAF0 6500                       		bcs.s	loc_D9D2
0000EAF2                            
0000EAF2                            loc_D9A6:
0000EAF2 BC68 FFFA                  		cmp.w	-6(a0),d6
0000EAF6 6C00                       		bge.s	loc_D9D2
0000EAF8 5D48                       		subq.w	#6,a0
0000EAFA 4A28 0004                  		tst.b	4(a0)
0000EAFE 6A00                       		bpl.s	loc_D9BC
0000EB00 532A 0001                  		subq.b	#1,1(a2)
0000EB04 142A 0001                  		move.b	1(a2),d2
0000EB08                            
0000EB08                            loc_D9BC:
0000EB08 6100 0000                  		bsr.w	loc_DA3C
0000EB0C 6600                       		bne.s	loc_D9C6
0000EB0E 5D48                       		subq.w	#6,a0
0000EB10 60E0                       		bra.s	loc_D9A6
0000EB12                            ; ===========================================================================
0000EB12                            
0000EB12                            loc_D9C6:
0000EB12 4A28 0004                  		tst.b	4(a0)
0000EB16 6A00                       		bpl.s	loc_D9D0
0000EB18 522A 0001                  		addq.b	#1,1(a2)
0000EB1C                            
0000EB1C                            loc_D9D0:
0000EB1C 5C48                       		addq.w	#6,a0
0000EB1E                            
0000EB1E                            loc_D9D2:
0000EB1E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EB22 2078 F770                  		movea.l	($FFFFF770).w,a0
0000EB26 0646 0300                  		addi.w	#$300,d6
0000EB2A                            
0000EB2A                            loc_D9DE:
0000EB2A BC68 FFFA                  		cmp.w	-6(a0),d6
0000EB2E 6E00                       		bgt.s	loc_D9F0
0000EB30 4A28 FFFE                  		tst.b	-2(a0)
0000EB34 6A00                       		bpl.s	loc_D9EC
0000EB36 5312                       		subq.b	#1,(a2)
0000EB38                            
0000EB38                            loc_D9EC:
0000EB38 5D48                       		subq.w	#6,a0
0000EB3A 60EE                       		bra.s	loc_D9DE
0000EB3C                            ; ===========================================================================
0000EB3C                            
0000EB3C                            loc_D9F0:
0000EB3C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EB40 4E75                       		rts	
0000EB42                            ; ===========================================================================
0000EB42                            
0000EB42                            loc_D9F6:
0000EB42 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000EB46 2078 F770                  		movea.l	($FFFFF770).w,a0
0000EB4A 0646 0280                  		addi.w	#$280,d6
0000EB4E                            
0000EB4E                            loc_DA02:
0000EB4E BC50                       		cmp.w	(a0),d6
0000EB50 6300                       		bls.s	loc_DA16
0000EB52 4A28 0004                  		tst.b	4(a0)
0000EB56 6A00                       		bpl.s	loc_DA10
0000EB58 1412                       		move.b	(a2),d2
0000EB5A 5212                       		addq.b	#1,(a2)
0000EB5C                            
0000EB5C                            loc_DA10:
0000EB5C 6100 0000                  		bsr.w	loc_DA3C
0000EB60 67EC                       		beq.s	loc_DA02
0000EB62                            
0000EB62                            loc_DA16:
0000EB62 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EB66 2078 F774                  		movea.l	($FFFFF774).w,a0
0000EB6A 0446 0300                  		subi.w	#$300,d6
0000EB6E 6500                       		bcs.s	loc_DA36
0000EB70                            
0000EB70                            loc_DA24:
0000EB70 BC50                       		cmp.w	(a0),d6
0000EB72 6300                       		bls.s	loc_DA36
0000EB74 4A28 0004                  		tst.b	4(a0)
0000EB78 6A00                       		bpl.s	loc_DA32
0000EB7A 522A 0001                  		addq.b	#1,1(a2)
0000EB7E                            
0000EB7E                            loc_DA32:
0000EB7E 5C48                       		addq.w	#6,a0
0000EB80 60EE                       		bra.s	loc_DA24
0000EB82                            ; ===========================================================================
0000EB82                            
0000EB82                            loc_DA36:
0000EB82 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EB86                            
0000EB86                            locret_DA3A:
0000EB86 4E75                       		rts	
0000EB88                            ; ===========================================================================
0000EB88                            
0000EB88                            loc_DA3C:
0000EB88 4A28 0004                  		tst.b	4(a0)
0000EB8C 6A00                       		bpl.s	OPL_MakeItem
0000EB8E 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000EB94 6700                       		beq.s	OPL_MakeItem
0000EB96 5C48                       		addq.w	#6,a0
0000EB98 7000                       		moveq	#0,d0
0000EB9A 4E75                       		rts	
0000EB9C                            ; ===========================================================================
0000EB9C                            
0000EB9C                            OPL_MakeItem:
0000EB9C 6100 0000                  		bsr.w	SingleObjLoad
0000EBA0 6600                       		bne.s	locret_DA8A
0000EBA2 3358 0008                  		move.w	(a0)+,8(a1)
0000EBA6 3018                       		move.w	(a0)+,d0
0000EBA8 3200                       		move.w	d0,d1
0000EBAA 0240 0FFF                  		andi.w	#$FFF,d0
0000EBAE 3340 000C                  		move.w	d0,$C(a1)
0000EBB2 E559                       		rol.w	#2,d1
0000EBB4 0201 0003                  		andi.b	#3,d1
0000EBB8 1341 0001                  		move.b	d1,1(a1)
0000EBBC 1341 0022                  		move.b	d1,$22(a1)
0000EBC0 1018                       		move.b	(a0)+,d0
0000EBC2 6A00                       		bpl.s	loc_DA80
0000EBC4 0200 007F                  		andi.b	#$7F,d0
0000EBC8 1342 0023                  		move.b	d2,$23(a1)
0000EBCC                            
0000EBCC                            loc_DA80:
0000EBCC 1280                       		move.b	d0,0(a1)
0000EBCE 1358 0028                  		move.b	(a0)+,$28(a1)
0000EBD2 7000                       		moveq	#0,d0
0000EBD4                            
0000EBD4                            locret_DA8A:
0000EBD4 4E75                       		rts	
0000EBD6                            ; ---------------------------------------------------------------------------
0000EBD6                            ; Single object	loading	subroutine
0000EBD6                            ; ---------------------------------------------------------------------------
0000EBD6                            
0000EBD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBD6                            
0000EBD6                            
0000EBD6                            SingleObjLoad:
0000EBD6 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000EBDA 303C 005F                  		move.w	#$5F,d0
0000EBDE                            
0000EBDE                            loc_DA94:
0000EBDE 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000EBE0 6700                       		beq.s	locret_DAA0	; if yes, branch
0000EBE2 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000EBE6 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000EBEA                            
0000EBEA                            locret_DAA0:
0000EBEA 4E75                       		rts	
0000EBEC                            ; End of function SingleObjLoad
0000EBEC                            
0000EBEC                            
0000EBEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBEC                            
0000EBEC                            
0000EBEC                            SingleObjLoad2:
0000EBEC 2248                       		movea.l	a0,a1
0000EBEE 303C F000                  		move.w	#-$1000,d0
0000EBF2 9048                       		sub.w	a0,d0
0000EBF4 EC48                       		lsr.w	#6,d0
0000EBF6 5340                       		subq.w	#1,d0
0000EBF8 6500                       		bcs.s	locret_DABC
0000EBFA                            
0000EBFA                            loc_DAB0:
0000EBFA 4A11                       		tst.b	(a1)
0000EBFC 6700                       		beq.s	locret_DABC
0000EBFE 43E9 0040                  		lea	$40(a1),a1
0000EC02 51C8 FFF6                  		dbf	d0,loc_DAB0
0000EC06                            
0000EC06                            locret_DABC:
0000EC06 4E75                       		rts	
0000EC08                            ; End of function SingleObjLoad2
0000EC08                            
0000EC08                            ; ===========================================================================
0000EC08                            ; ---------------------------------------------------------------------------
0000EC08                            ; Object 41 - springs
0000EC08                            ; ---------------------------------------------------------------------------
0000EC08                            
0000EC08                            Obj41:					; XREF: Obj_Index
0000EC08 7000                       		moveq	#0,d0
0000EC0A 1028 0024                  		move.b	$24(a0),d0
0000EC0E 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000EC12 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000EC16 6100 FB38                  		bsr.w	DisplaySprite
0000EC1A 3028 0008                  		move.w	8(a0),d0
0000EC1E 0240 FF80                  		andi.w	#$FF80,d0
0000EC22 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC26 0441 0080                  		subi.w	#$80,d1
0000EC2A 0241 FF80                  		andi.w	#$FF80,d1
0000EC2E 9041                       		sub.w	d1,d0
0000EC30 0C40 0280                  		cmpi.w	#$280,d0
0000EC34 6200 FB56                  		bhi.w	DeleteObject
0000EC38 4E75                       		rts	
0000EC3A                            ; ===========================================================================
0000EC3A 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000EC3C 0000                       		dc.w Obj41_Up-Obj41_Index
0000EC3E 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000EC40 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000EC42 0000                       		dc.w Obj41_LR-Obj41_Index
0000EC44 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000EC46 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000EC48 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000EC4A 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000EC4C 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000EC4E                            
0000EC4E F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000EC50 F600                       		dc.w -$A00		; power	of yellow spring
0000EC52                            ; ===========================================================================
0000EC52                            
0000EC52                            Obj41_Main:				; XREF: Obj41_Index
0000EC52 5428 0024                  		addq.b	#2,$24(a0)
0000EC56 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000EC5E 317C 0523 0002             		move.w	#$523,2(a0)
0000EC64 0028 0004 0001             		ori.b	#4,1(a0)
0000EC6A 117C 0010 0019             		move.b	#$10,$19(a0)
0000EC70 117C 0004 0018             		move.b	#4,$18(a0)
0000EC76 1028 0028                  		move.b	$28(a0),d0
0000EC7A 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000EC7E 6700                       		beq.s	loc_DB54	; if not, branch
0000EC80 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000EC86 117C 0001 001C             		move.b	#1,$1C(a0)
0000EC8C 117C 0003 001A             		move.b	#3,$1A(a0)
0000EC92 317C 0533 0002             		move.w	#$533,2(a0)
0000EC98 117C 0008 0019             		move.b	#8,$19(a0)
0000EC9E                            
0000EC9E                            loc_DB54:
0000EC9E 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000ECA2 6700                       		beq.s	loc_DB66	; if not, branch
0000ECA4 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000ECAA 08E8 0001 0022             		bset	#1,$22(a0)
0000ECB0                            
0000ECB0                            loc_DB66:
0000ECB0 0800 0001                  		btst	#1,d0
0000ECB4 6700                       		beq.s	loc_DB72
0000ECB6 08E8 0005 0002             		bset	#5,2(a0)
0000ECBC                            
0000ECBC                            loc_DB72:
0000ECBC 0240 000F                  		andi.w	#$F,d0
0000ECC0 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000ECC6 4E75                       		rts	
0000ECC8                            ; ===========================================================================
0000ECC8                            
0000ECC8                            Obj41_Up:				; XREF: Obj41_Index
0000ECC8 323C 001B                  		move.w	#$1B,d1
0000ECCC 343C 0008                  		move.w	#8,d2
0000ECD0 363C 0010                  		move.w	#$10,d3
0000ECD4 3828 0008                  		move.w	8(a0),d4
0000ECD8 6100 0000                  		bsr.w	SolidObject
0000ECDC 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000ECE0 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000ECE2 4E75                       		rts	
0000ECE4                            ; ===========================================================================
0000ECE4                            
0000ECE4                            Obj41_BounceUp:				; XREF: Obj41_Up
0000ECE4 5428 0024                  		addq.b	#2,$24(a0)
0000ECE8 5069 000C                  		addq.w	#8,$C(a1)
0000ECEC 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000ECF2 08E9 0001 0022             		bset	#1,$22(a1)
0000ECF8 08A9 0003 0022             		bclr	#3,$22(a1)
0000ECFE 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000ED04 137C 0002 0024             		move.b	#2,$24(a1)
0000ED0A 08A8 0003 0022             		bclr	#3,$22(a0)
0000ED10 4228 0025                  		clr.b	$25(a0)
0000ED14 303C 00CC                  		move.w	#$CC,d0
0000ED18 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play spring sound
0000ED1E                            
0000ED1E                            Obj41_AniUp:				; XREF: Obj41_Index
0000ED1E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000ED24 6000 CA78                  		bra.w	AnimateSprite
0000ED28                            ; ===========================================================================
0000ED28                            
0000ED28                            Obj41_ResetUp:				; XREF: Obj41_Index
0000ED28 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000ED2E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000ED32 4E75                       		rts	
0000ED34                            ; ===========================================================================
0000ED34                            
0000ED34                            Obj41_LR:				; XREF: Obj41_Index
0000ED34 323C 0013                  		move.w	#$13,d1
0000ED38 343C 000E                  		move.w	#$E,d2
0000ED3C 363C 000F                  		move.w	#$F,d3
0000ED40 3828 0008                  		move.w	8(a0),d4
0000ED44 6100 0000                  		bsr.w	SolidObject
0000ED48 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000ED4E 6600                       		bne.s	loc_DC0C
0000ED50 117C 0008 0024             		move.b	#8,$24(a0)
0000ED56                            
0000ED56                            loc_DC0C:
0000ED56 0828 0005 0022             		btst	#5,$22(a0)
0000ED5C 6600                       		bne.s	Obj41_BounceLR
0000ED5E 4E75                       		rts	
0000ED60                            ; ===========================================================================
0000ED60                            
0000ED60                            Obj41_BounceLR:				; XREF: Obj41_LR
0000ED60 5428 0024                  		addq.b	#2,$24(a0)
0000ED64 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000ED6A 5069 0008                  		addq.w	#8,8(a1)
0000ED6E 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000ED74 6600                       		bne.s	loc_DC36	; if yes, branch
0000ED76 0469 0010 0008             		subi.w	#$10,8(a1)
0000ED7C 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000ED80                            
0000ED80                            loc_DC36:
0000ED80 337C 000F 003E             		move.w	#$F,$3E(a1)
0000ED86 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000ED8C 0869 0000 0022             		bchg	#0,$22(a1)
0000ED92 0829 0002 0022             		btst	#2,$22(a1)
0000ED98 6600                       		bne.s	loc_DC56
0000ED9A 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000EDA0                            
0000EDA0                            loc_DC56:
0000EDA0 08A8 0005 0022             		bclr	#5,$22(a0)
0000EDA6 08A9 0005 0022             		bclr	#5,$22(a1)
0000EDAC 303C 00CC                  		move.w	#$CC,d0
0000EDB0 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play spring sound
0000EDB6                            
0000EDB6                            Obj41_AniLR:				; XREF: Obj41_Index
0000EDB6 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000EDBC 6000 C9E0                  		bra.w	AnimateSprite
0000EDC0                            ; ===========================================================================
0000EDC0                            
0000EDC0                            Obj41_ResetLR:				; XREF: Obj41_Index
0000EDC0 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000EDC6 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000EDCA 4E75                       		rts	
0000EDCC                            ; ===========================================================================
0000EDCC                            
0000EDCC                            Obj41_Dwn:				; XREF: Obj41_Index
0000EDCC 323C 001B                  		move.w	#$1B,d1
0000EDD0 343C 0008                  		move.w	#8,d2
0000EDD4 363C 0010                  		move.w	#$10,d3
0000EDD8 3828 0008                  		move.w	8(a0),d4
0000EDDC 6100 0000                  		bsr.w	SolidObject
0000EDE0 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000EDE6 6600                       		bne.s	loc_DCA4
0000EDE8 117C 000E 0024             		move.b	#$E,$24(a0)
0000EDEE                            
0000EDEE                            loc_DCA4:
0000EDEE 4A28 0025                  		tst.b	$25(a0)
0000EDF2 6600                       		bne.s	locret_DCAE
0000EDF4 4A44                       		tst.w	d4
0000EDF6 6B00                       		bmi.s	Obj41_BounceDwn
0000EDF8                            
0000EDF8                            locret_DCAE:
0000EDF8 4E75                       		rts	
0000EDFA                            ; ===========================================================================
0000EDFA                            
0000EDFA                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000EDFA 5428 0024                  		addq.b	#2,$24(a0)
0000EDFE 5169 000C                  		subq.w	#8,$C(a1)
0000EE02 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000EE08 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000EE0C 08E9 0001 0022             		bset	#1,$22(a1)
0000EE12 08A9 0003 0022             		bclr	#3,$22(a1)
0000EE18 137C 0002 0024             		move.b	#2,$24(a1)
0000EE1E 08A8 0003 0022             		bclr	#3,$22(a0)
0000EE24 4228 0025                  		clr.b	$25(a0)
0000EE28 303C 00CC                  		move.w	#$CC,d0
0000EE2C 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play spring sound
0000EE32                            
0000EE32                            Obj41_AniDwn:				; XREF: Obj41_Index
0000EE32 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000EE38 6000 C964                  		bra.w	AnimateSprite
0000EE3C                            ; ===========================================================================
0000EE3C                            
0000EE3C                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000EE3C 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000EE42 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000EE46 4E75                       		rts	
0000EE48                            ; ===========================================================================
0000EE48                            Ani_obj41:
0000EE48                            	include "_anim\obj41.asm"
0000EE48                            ; ---------------------------------------------------------------------------
0000EE48                            ; Animation script - springs
0000EE48                            ; ---------------------------------------------------------------------------
0000EE48 0000                       		dc.w byte_DD02-Ani_obj41
0000EE4A 0000                       		dc.w byte_DD0E-Ani_obj41
0000EE4C 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000EE58 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000EE64                            		even
0000EE64                            		even
0000EE64                            
0000EE64                            ; ---------------------------------------------------------------------------
0000EE64                            ; Sprite mappings - springs
0000EE64                            ; ---------------------------------------------------------------------------
0000EE64                            Map_obj41:
0000EE64                            	include "_maps\obj41.asm"
0000EE64                            ; ---------------------------------------------------------------------------
0000EE64                            ; Sprite mappings - springs
0000EE64                            ; ---------------------------------------------------------------------------
0000EE64 0000                       		dc.w byte_DD26-Map_obj41
0000EE66 0000                       		dc.w byte_DD31-Map_obj41
0000EE68 0000                       		dc.w byte_DD37-Map_obj41
0000EE6A 0000                       		dc.w byte_DD47-Map_obj41
0000EE6C 0000                       		dc.w byte_DD4D-Map_obj41
0000EE6E 0000                       		dc.w byte_DD53-Map_obj41
0000EE70 02                         byte_DD26:	dc.b 2
0000EE71 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000EE76 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000EE7B 01                         byte_DD31:	dc.b 1
0000EE7C 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000EE81 03                         byte_DD37:	dc.b 3
0000EE82 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000EE87 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EE8C 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000EE91 01                         byte_DD47:	dc.b 1
0000EE92 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000EE97 01                         byte_DD4D:	dc.b 1
0000EE98 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000EE9D 04                         byte_DD53:	dc.b 4
0000EE9E F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000EEA3 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000EEA8 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000EEAD 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000EEB2                            		even
0000EEB2                            		even
0000EEB2                            
0000EEB2                            ; ===========================================================================
0000EEB2                            ; ---------------------------------------------------------------------------
0000EEB2                            ; Object 42 - Newtron enemy (GHZ)
0000EEB2                            ; ---------------------------------------------------------------------------
0000EEB2                            
0000EEB2                            Obj42:					; XREF: Obj_Index
0000EEB2 7000                       		moveq	#0,d0
0000EEB4 1028 0024                  		move.b	$24(a0),d0
0000EEB8 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000EEBC 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000EEC0                            ; ===========================================================================
0000EEC0 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000EEC2 0000                       		dc.w Obj42_Action-Obj42_Index
0000EEC4 0000                       		dc.w Obj42_Delete-Obj42_Index
0000EEC6                            ; ===========================================================================
0000EEC6                            
0000EEC6                            Obj42_Main:				; XREF: Obj42_Index
0000EEC6 5428 0024                  		addq.b	#2,$24(a0)
0000EECA 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000EED2 317C 049B 0002             		move.w	#$49B,2(a0)
0000EED8 117C 0004 0001             		move.b	#4,1(a0)
0000EEDE 117C 0004 0018             		move.b	#4,$18(a0)
0000EEE4 117C 0014 0019             		move.b	#$14,$19(a0)
0000EEEA 117C 0010 0016             		move.b	#$10,$16(a0)
0000EEF0 117C 0008 0017             		move.b	#8,$17(a0)
0000EEF6                            
0000EEF6                            Obj42_Action:				; XREF: Obj42_Index
0000EEF6 7000                       		moveq	#0,d0
0000EEF8 1028 0025                  		move.b	$25(a0),d0
0000EEFC 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000EF00 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000EF04 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000EF0A 6100 C892                  		bsr.w	AnimateSprite
0000EF0E 6000 0000                  		bra.w	MarkObjGone
0000EF12                            ; ===========================================================================
0000EF12 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000EF14 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000EF16 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000EF18 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000EF1A 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000EF1C                            ; ===========================================================================
0000EF1C                            
0000EF1C                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000EF1C 08E8 0000 0022             		bset	#0,$22(a0)
0000EF22 3038 D008                  		move.w	($FFFFD008).w,d0
0000EF26 9068 0008                  		sub.w	8(a0),d0
0000EF2A 6400                       		bcc.s	loc_DDEA
0000EF2C 4440                       		neg.w	d0
0000EF2E 08A8 0000 0022             		bclr	#0,$22(a0)
0000EF34                            
0000EF34                            loc_DDEA:
0000EF34 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000EF38 6400                       		bcc.s	locret_DE12	; if not, branch
0000EF3A 5428 0025                  		addq.b	#2,$25(a0)
0000EF3E 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF44 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000EF48 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000EF4A 317C 249B 0002             		move.w	#$249B,2(a0)
0000EF50 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000EF56 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000EF5C                            
0000EF5C                            locret_DE12:
0000EF5C 4E75                       		rts	
0000EF5E                            ; ===========================================================================
0000EF5E                            
0000EF5E                            Obj42_Type00:				; XREF: Obj42_Index2
0000EF5E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000EF64 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000EF66 08E8 0000 0022             		bset	#0,$22(a0)
0000EF6C 3038 D008                  		move.w	($FFFFD008).w,d0
0000EF70 9068 0008                  		sub.w	8(a0),d0
0000EF74 6400                       		bcc.s	locret_DE32
0000EF76 08A8 0000 0022             		bclr	#0,$22(a0)
0000EF7C                            
0000EF7C                            locret_DE32:
0000EF7C 4E75                       		rts	
0000EF7E                            ; ===========================================================================
0000EF7E                            
0000EF7E                            Obj42_Fall:				; XREF: Obj42_Type00
0000EF7E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000EF84 6600                       		bne.s	loc_DE42
0000EF86 117C 000C 0020             		move.b	#$C,$20(a0)
0000EF8C                            
0000EF8C                            loc_DE42:
0000EF8C 6100 F72A                  		bsr.w	ObjectFall
0000EF90 6100 0000                  		bsr.w	ObjHitFloor
0000EF94 4A41                       		tst.w	d1		; has newtron hit the floor?
0000EF96 6A00                       		bpl.s	locret_DE86	; if not, branch
0000EF98 D368 000C                  		add.w	d1,$C(a0)
0000EF9C 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000EFA2 5428 0025                  		addq.b	#2,$25(a0)
0000EFA6 117C 0002 001C             		move.b	#2,$1C(a0)
0000EFAC 0828 0005 0002             		btst	#5,2(a0)
0000EFB2 6700                       		beq.s	Obj42_Move
0000EFB4 5228 001C                  		addq.b	#1,$1C(a0)
0000EFB8                            
0000EFB8                            Obj42_Move:
0000EFB8 117C 000D 0020             		move.b	#$D,$20(a0)
0000EFBE 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000EFC4 0828 0000 0022             		btst	#0,$22(a0)
0000EFCA 6600                       		bne.s	locret_DE86
0000EFCC 4468 0010                  		neg.w	$10(a0)
0000EFD0                            
0000EFD0                            locret_DE86:
0000EFD0 4E75                       		rts	
0000EFD2                            ; ===========================================================================
0000EFD2                            
0000EFD2                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000EFD2 6100 F756                  		bsr.w	SpeedToPos
0000EFD6 6100 0000                  		bsr.w	ObjHitFloor
0000EFDA 0C41 FFF8                  		cmpi.w	#-8,d1
0000EFDE 6D00                       		blt.s	loc_DEA2
0000EFE0 0C41 000C                  		cmpi.w	#$C,d1
0000EFE4 6C00                       		bge.s	loc_DEA2
0000EFE6 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000EFEA 4E75                       		rts	
0000EFEC                            ; ===========================================================================
0000EFEC                            
0000EFEC                            loc_DEA2:
0000EFEC 5428 0025                  		addq.b	#2,$25(a0)
0000EFF0 4E75                       		rts	
0000EFF2                            ; ===========================================================================
0000EFF2                            
0000EFF2                            Obj42_Speed:				; XREF: Obj42_Index2
0000EFF2 6100 F736                  		bsr.w	SpeedToPos
0000EFF6 4E75                       		rts	
0000EFF8                            ; ===========================================================================
0000EFF8                            
0000EFF8                            Obj42_Type01:				; XREF: Obj42_Index2
0000EFF8 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000EFFE 6600                       		bne.s	Obj42_FireMissile
0000F000 117C 000C 0020             		move.b	#$C,$20(a0)
0000F006                            
0000F006                            Obj42_FireMissile:
0000F006 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000F00C 6600                       		bne.s	locret_DF14
0000F00E 4A28 0032                  		tst.b	$32(a0)
0000F012 6600                       		bne.s	locret_DF14
0000F014 117C 0001 0032             		move.b	#1,$32(a0)
0000F01A 6100 FBBA                  		bsr.w	SingleObjLoad
0000F01E 6600                       		bne.s	locret_DF14
0000F020 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000F024 3368 0008 0008             		move.w	8(a0),8(a1)
0000F02A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F030 5169 000C                  		subq.w	#8,$C(a1)
0000F034 337C 0200 0010             		move.w	#$200,$10(a1)
0000F03A 303C 0014                  		move.w	#$14,d0
0000F03E 0828 0000 0022             		btst	#0,$22(a0)
0000F044 6600                       		bne.s	loc_DF04
0000F046 4440                       		neg.w	d0
0000F048 4469 0010                  		neg.w	$10(a1)
0000F04C                            
0000F04C                            loc_DF04:
0000F04C D169 0008                  		add.w	d0,8(a1)
0000F050 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F056 137C 0001 0028             		move.b	#1,$28(a1)
0000F05C                            
0000F05C                            locret_DF14:
0000F05C 4E75                       		rts	
0000F05E                            ; ===========================================================================
0000F05E                            
0000F05E                            Obj42_Delete:				; XREF: Obj42_Index
0000F05E 6000 F72C                  		bra.w	DeleteObject
0000F062                            ; ===========================================================================
0000F062                            Ani_obj42:
0000F062                            	include "_anim\obj42.asm"
0000F062                            ; ---------------------------------------------------------------------------
0000F062                            ; Animation script - Newtron enemy
0000F062                            ; ---------------------------------------------------------------------------
0000F062 0000                       		dc.w byte_DF24-Ani_obj42
0000F064 0000                       		dc.w byte_DF28-Ani_obj42
0000F066 0000                       		dc.w byte_DF30-Ani_obj42
0000F068 0000                       		dc.w byte_DF34-Ani_obj42
0000F06A 0000                       		dc.w byte_DF38-Ani_obj42
0000F06C 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000F070 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000F078 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000F07C 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000F080 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000F08A                            		even
0000F08A                            		even
0000F08A                            
0000F08A                            ; ---------------------------------------------------------------------------
0000F08A                            ; Sprite mappings - Newtron enemy (GHZ)
0000F08A                            ; ---------------------------------------------------------------------------
0000F08A                            Map_obj42:
0000F08A                            	include "_maps\obj42.asm"
0000F08A                            ; ---------------------------------------------------------------------------
0000F08A                            ; Sprite mappings - Newtron enemy (GHZ)
0000F08A                            ; ---------------------------------------------------------------------------
0000F08A 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000F08E 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000F092 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000F096 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000F09A 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000F09E 0000                       		dc.w byte_DFF8-Map_obj42
0000F0A0 03                         byte_DF58:	dc.b 3
0000F0A1 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000F0A6 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000F0AB FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000F0B0 03                         byte_DF68:	dc.b 3
0000F0B1 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000F0B6 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F0BB FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F0C0 03                         byte_DF78:	dc.b 3
0000F0C1 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000F0C6 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F0CB FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F0D0 04                         byte_DF88:	dc.b 4
0000F0D1 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000F0D6 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F0DB FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000F0E0 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000F0E5 03                         byte_DF9D:	dc.b 3
0000F0E6 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000F0EB FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000F0F0 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000F0F5 02                         byte_DFAD:	dc.b 2
0000F0F6 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F0FB F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F100 03                         byte_DFB8:	dc.b 3
0000F101 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F106 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F10B FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000F110 03                         byte_DFC8:	dc.b 3
0000F111 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F116 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F11B FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000F120 03                         byte_DFD8:	dc.b 3
0000F121 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F126 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F12B FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000F130 03                         byte_DFE8:	dc.b 3
0000F131 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F136 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F13B FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000F140 00                         byte_DFF8:	dc.b 0
0000F142 00                         		even
0000F142 00                         		even
0000F142                            
0000F142                            ; ===========================================================================
0000F142                            ; ---------------------------------------------------------------------------
0000F142                            ; Object 43 - Roller enemy (SYZ)
0000F142                            ; ---------------------------------------------------------------------------
0000F142                            
0000F142                            Obj43:					; XREF: Obj_Index
0000F142 7000                       		moveq	#0,d0
0000F144 1028 0024                  		move.b	$24(a0),d0
0000F148 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000F14C 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000F150                            ; ===========================================================================
0000F150 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000F152 0000                       		dc.w Obj43_Action-Obj43_Index
0000F154                            ; ===========================================================================
0000F154                            
0000F154                            Obj43_Main:				; XREF: Obj43_Index
0000F154 117C 000E 0016             		move.b	#$E,$16(a0)
0000F15A 117C 0008 0017             		move.b	#8,$17(a0)
0000F160 6100 F556                  		bsr.w	ObjectFall
0000F164 6100 0000                  		bsr.w	ObjHitFloor
0000F168 4A41                       		tst.w	d1
0000F16A 6A00                       		bpl.s	locret_E052
0000F16C D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000F170 317C 0000 0012             		move.w	#0,$12(a0)
0000F176 5428 0024                  		addq.b	#2,$24(a0)
0000F17A 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000F182 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000F188 117C 0004 0001             		move.b	#4,1(a0)
0000F18E 117C 0004 0018             		move.b	#4,$18(a0)
0000F194 117C 0010 0019             		move.b	#$10,$19(a0)
0000F19A                            
0000F19A                            locret_E052:
0000F19A 4E75                       		rts	
0000F19C                            ; ===========================================================================
0000F19C                            
0000F19C                            Obj43_Action:				; XREF: Obj43_Index
0000F19C 7000                       		moveq	#0,d0
0000F19E 1028 0025                  		move.b	$25(a0),d0
0000F1A2 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000F1A6 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000F1AA 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000F1B0 6100 C5EC                  		bsr.w	AnimateSprite
0000F1B4 3028 0008                  		move.w	8(a0),d0
0000F1B8 0240 FF80                  		andi.w	#$FF80,d0
0000F1BC 3238 F700                  		move.w	($FFFFF700).w,d1
0000F1C0 0441 0080                  		subi.w	#$80,d1
0000F1C4 0241 FF80                  		andi.w	#$FF80,d1
0000F1C8 9041                       		sub.w	d1,d0
0000F1CA 0C40 0280                  		cmpi.w	#$280,d0
0000F1CE 6E00 0000                  		bgt.w	Obj43_ChkGone
0000F1D2 6000 F57C                  		bra.w	DisplaySprite
0000F1D6                            ; ===========================================================================
0000F1D6                            
0000F1D6                            Obj43_ChkGone:				; XREF: Obj43_Action
0000F1D6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F1DA 7000                       		moveq	#0,d0
0000F1DC 1028 0023                  		move.b	$23(a0),d0
0000F1E0 6700                       		beq.s	Obj43_Delete
0000F1E2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F1E8                            
0000F1E8                            Obj43_Delete:
0000F1E8 6000 F5A2                  		bra.w	DeleteObject
0000F1EC                            ; ===========================================================================
0000F1EC 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000F1EE 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000F1F0 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000F1F2 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000F1F4                            ; ===========================================================================
0000F1F4                            
0000F1F4                            Obj43_RollChk:				; XREF: Obj43_Index2
0000F1F4 3038 D008                  		move.w	($FFFFD008).w,d0
0000F1F8 0440 0100                  		subi.w	#$100,d0
0000F1FC 6500                       		bcs.s	loc_E0D2
0000F1FE 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000F202 6500                       		bcs.s	loc_E0D2
0000F204 5828 0025                  		addq.b	#4,$25(a0)
0000F208 117C 0002 001C             		move.b	#2,$1C(a0)
0000F20E 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000F214 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000F21A                            
0000F21A                            loc_E0D2:
0000F21A 588F                       		addq.l	#4,sp
0000F21C 4E75                       		rts	
0000F21E                            ; ===========================================================================
0000F21E                            
0000F21E                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000F21E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000F224 6700                       		beq.s	loc_E0F8
0000F226 5368 0030                  		subq.w	#1,$30(a0)
0000F22A 6A00                       		bpl.s	locret_E0F6
0000F22C 117C 0001 001C             		move.b	#1,$1C(a0)
0000F232 317C 0700 0010             		move.w	#$700,$10(a0)
0000F238 117C 008E 0020             		move.b	#$8E,$20(a0)
0000F23E                            
0000F23E                            locret_E0F6:
0000F23E 4E75                       		rts	
0000F240                            ; ===========================================================================
0000F240                            
0000F240                            loc_E0F8:
0000F240 5428 0025                  		addq.b	#2,$25(a0)
0000F244 4E75                       		rts	
0000F246                            ; ===========================================================================
0000F246                            
0000F246                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000F246 6100 0000                  		bsr.w	Obj43_Stop
0000F24A 6100 F4DE                  		bsr.w	SpeedToPos
0000F24E 6100 0000                  		bsr.w	ObjHitFloor
0000F252 0C41 FFF8                  		cmpi.w	#-8,d1
0000F256 6D00                       		blt.s	Obj43_Jump
0000F258 0C41 000C                  		cmpi.w	#$C,d1
0000F25C 6C00                       		bge.s	Obj43_Jump
0000F25E D368 000C                  		add.w	d1,$C(a0)
0000F262 4E75                       		rts	
0000F264                            ; ===========================================================================
0000F264                            
0000F264                            Obj43_Jump:
0000F264 5428 0025                  		addq.b	#2,$25(a0)
0000F268 08E8 0000 0032             		bset	#0,$32(a0)
0000F26E 6700                       		beq.s	locret_E12E
0000F270 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000F276                            
0000F276                            locret_E12E:
0000F276 4E75                       		rts	
0000F278                            ; ===========================================================================
0000F278                            
0000F278                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000F278 6100 F43E                  		bsr.w	ObjectFall
0000F27C 4A68 0012                  		tst.w	$12(a0)
0000F280 6B00                       		bmi.s	locret_E150
0000F282 6100 0000                  		bsr.w	ObjHitFloor
0000F286 4A41                       		tst.w	d1
0000F288 6A00                       		bpl.s	locret_E150
0000F28A D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000F28E 5528 0025                  		subq.b	#2,$25(a0)
0000F292 317C 0000 0012             		move.w	#0,$12(a0)
0000F298                            
0000F298                            locret_E150:
0000F298 4E75                       		rts	
0000F29A                            
0000F29A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F29A                            
0000F29A                            
0000F29A                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000F29A 4A28 0032                  		tst.b	$32(a0)
0000F29E 6B00                       		bmi.s	locret_E188
0000F2A0 3038 D008                  		move.w	($FFFFD008).w,d0
0000F2A4 0440 0030                  		subi.w	#$30,d0
0000F2A8 9068 0008                  		sub.w	8(a0),d0
0000F2AC 6400                       		bcc.s	locret_E188
0000F2AE 117C 0000 001C             		move.b	#0,$1C(a0)
0000F2B4 117C 000E 0020             		move.b	#$E,$20(a0)
0000F2BA 4268 0010                  		clr.w	$10(a0)
0000F2BE 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000F2C4 117C 0002 0025             		move.b	#2,$25(a0)
0000F2CA 08E8 0007 0032             		bset	#7,$32(a0)
0000F2D0                            
0000F2D0                            locret_E188:
0000F2D0 4E75                       		rts	
0000F2D2                            ; End of function Obj43_Stop
0000F2D2                            
0000F2D2                            ; ===========================================================================
0000F2D2                            Ani_obj43:
0000F2D2                            	include "_anim\obj43.asm"
0000F2D2                            ; ---------------------------------------------------------------------------
0000F2D2                            ; Animation script - Roller enemy
0000F2D2                            ; ---------------------------------------------------------------------------
0000F2D2 0000                       		dc.w byte_E190-Ani_obj43
0000F2D4 0000                       		dc.w byte_E196-Ani_obj43
0000F2D6 0000                       		dc.w byte_E19C-Ani_obj43
0000F2D8 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000F2DE 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000F2E4 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000F2EA 00                         		even
0000F2EA 00                         		even
0000F2EA                            
0000F2EA                            ; ---------------------------------------------------------------------------
0000F2EA                            ; Sprite mappings - Roller enemy (SYZ)
0000F2EA                            ; ---------------------------------------------------------------------------
0000F2EA                            Map_obj43:
0000F2EA                            	include "_maps\obj43.asm"
0000F2EA                            Map_61da:
0000F2EA 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000F2EC 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000F2EE 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000F2F0 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000F2F2 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000F2F4 02                         Map_61da_A: 	dc.b $2
0000F2F5 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000F2FA F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000F2FF 02                         Map_61da_15: 	dc.b $2
0000F300 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000F305 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000F30A 01                         Map_61da_20: 	dc.b $1
0000F30B F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000F310 01                         Map_61da_26: 	dc.b $1
0000F311 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000F316 01                         Map_61da_2C: 	dc.b $1
0000F317 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000F31C                            	even
0000F31C                            	even
0000F31C                            
0000F31C                            ; ===========================================================================
0000F31C                            ; ---------------------------------------------------------------------------
0000F31C                            ; Object 44 - walls (GHZ)
0000F31C                            ; ---------------------------------------------------------------------------
0000F31C                            
0000F31C                            Obj44:					; XREF: Obj_Index
0000F31C 7000                       		moveq	#0,d0
0000F31E 1028 0024                  		move.b	$24(a0),d0
0000F322 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000F326 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000F32A                            ; ===========================================================================
0000F32A 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000F32C 0000                       		dc.w Obj44_Solid-Obj44_Index
0000F32E 0000                       		dc.w Obj44_Display-Obj44_Index
0000F330                            ; ===========================================================================
0000F330                            
0000F330                            Obj44_Main:				; XREF: Obj44_Index
0000F330 5428 0024                  		addq.b	#2,$24(a0)
0000F334 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000F33C 317C 434C 0002             		move.w	#$434C,2(a0)
0000F342 0028 0004 0001             		ori.b	#4,1(a0)
0000F348 117C 0008 0019             		move.b	#8,$19(a0)
0000F34E 117C 0006 0018             		move.b	#6,$18(a0)
0000F354 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000F35A 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000F360 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000F362 5428 0024                  		addq.b	#2,$24(a0)
0000F366 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000F368                            ; ===========================================================================
0000F368                            
0000F368                            Obj44_Solid:				; XREF: Obj44_Index
0000F368 323C 0013                  		move.w	#$13,d1
0000F36C 343C 0028                  		move.w	#$28,d2
0000F370 6100 A684                  		bsr.w	Obj44_SolidWall
0000F374                            
0000F374                            Obj44_Display:				; XREF: Obj44_Index
0000F374 6100 F3DA                  		bsr.w	DisplaySprite
0000F378 3028 0008                  		move.w	8(a0),d0
0000F37C 0240 FF80                  		andi.w	#$FF80,d0
0000F380 3238 F700                  		move.w	($FFFFF700).w,d1
0000F384 0441 0080                  		subi.w	#$80,d1
0000F388 0241 FF80                  		andi.w	#$FF80,d1
0000F38C 9041                       		sub.w	d1,d0
0000F38E 0C40 0280                  		cmpi.w	#$280,d0
0000F392 6200 F3F8                  		bhi.w	DeleteObject
0000F396 4E75                       		rts	
0000F398                            ; ===========================================================================
0000F398                            ; ---------------------------------------------------------------------------
0000F398                            ; Sprite mappings - walls (GHZ)
0000F398                            ; ---------------------------------------------------------------------------
0000F398                            Map_obj44:
0000F398                            	include "_maps\obj44.asm"
0000F398                            ; ---------------------------------------------------------------------------
0000F398                            ; Sprite mappings - walls (GHZ)
0000F398                            ; ---------------------------------------------------------------------------
0000F398 0000                       		dc.w byte_E256-Map_obj44
0000F39A 0000                       		dc.w byte_E26B-Map_obj44
0000F39C 0000                       		dc.w byte_E280-Map_obj44
0000F39E 04                         byte_E256:	dc.b 4
0000F39F E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000F3A4 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F3A9 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000F3AE 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000F3B3 04                         byte_E26B:	dc.b 4
0000F3B4 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000F3B9 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F3BE 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000F3C3 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000F3C8 04                         byte_E280:	dc.b 4
0000F3C9 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000F3CE F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000F3D3 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000F3D8 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000F3DE 00                         		even
0000F3DE 00                         		even
0000F3DE                            
0000F3DE                            ; ===========================================================================
0000F3DE                            ; ---------------------------------------------------------------------------
0000F3DE                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000F3DE                            ; ---------------------------------------------------------------------------
0000F3DE                            
0000F3DE                            Obj13:					; XREF: Obj_Index
0000F3DE 7000                       		moveq	#0,d0
0000F3E0 1028 0024                  		move.b	$24(a0),d0
0000F3E4 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000F3E8 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000F3EC 6000 0000                  		bra.w	Obj14_ChkDel
0000F3F0                            ; ===========================================================================
0000F3F0 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000F3F2 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000F3F4                            ; ---------------------------------------------------------------------------
0000F3F4                            ;
0000F3F4                            ; Lava ball production rates
0000F3F4                            ;
0000F3F4 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000F3FA                            ; ===========================================================================
0000F3FA                            
0000F3FA                            Obj13_Main:				; XREF: Obj13_Index
0000F3FA 5428 0024                  		addq.b	#2,$24(a0)
0000F3FE 1028 0028                  		move.b	$28(a0),d0
0000F402 E848                       		lsr.w	#4,d0
0000F404 0240 000F                  		andi.w	#$F,d0
0000F408 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000F40E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000F414 0228 000F 0028             		andi.b	#$F,$28(a0)
0000F41A                            
0000F41A                            Obj13_MakeLava:				; XREF: Obj13_Index
0000F41A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000F41E 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000F420 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000F426 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000F42A 6600                       		bne.s	locret_E302
0000F42C 6100 F7A8                  		bsr.w	SingleObjLoad
0000F430 6600                       		bne.s	locret_E302
0000F432 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000F436 3368 0008 0008             		move.w	8(a0),8(a1)
0000F43C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F442 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F448                            
0000F448                            locret_E302:
0000F448 4E75                       		rts	
0000F44A                            ; ===========================================================================
0000F44A                            ; ---------------------------------------------------------------------------
0000F44A                            ; Object 14 - lava balls (MZ, SLZ)
0000F44A                            ; ---------------------------------------------------------------------------
0000F44A                            
0000F44A                            Obj14:					; XREF: Obj_Index
0000F44A 7000                       		moveq	#0,d0
0000F44C 1028 0024                  		move.b	$24(a0),d0
0000F450 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000F454 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000F458 6000 F2F6                  		bra.w	DisplaySprite
0000F45C                            ; ===========================================================================
0000F45C 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000F45E 0000                       		dc.w Obj14_Action-Obj14_Index
0000F460 0000                       		dc.w Obj14_Delete-Obj14_Index
0000F462                            
0000F462 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000F46C 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000F474                            ; ===========================================================================
0000F474                            
0000F474                            Obj14_Main:				; XREF: Obj14_Index
0000F474 5428 0024                  		addq.b	#2,$24(a0)
0000F478 117C 0008 0016             		move.b	#8,$16(a0)
0000F47E 117C 0008 0017             		move.b	#8,$17(a0)
0000F484 217C 0000 C39C 0004        		move.l	#Map_obj14,4(a0)
0000F48C 317C 0345 0002             		move.w	#$345,2(a0)
0000F492 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000F498 6600                       		bne.s	loc_E35A
0000F49A 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000F4A0                            
0000F4A0                            loc_E35A:
0000F4A0 117C 0004 0001             		move.b	#4,1(a0)
0000F4A6 117C 0003 0018             		move.b	#3,$18(a0)
0000F4AC 117C 008B 0020             		move.b	#$8B,$20(a0)
0000F4B2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F4B8 4A28 0029                  		tst.b	$29(a0)
0000F4BC 6700                       		beq.s	Obj14_SetSpeed
0000F4BE 5428 0018                  		addq.b	#2,$18(a0)
0000F4C2                            
0000F4C2                            Obj14_SetSpeed:
0000F4C2 7000                       		moveq	#0,d0
0000F4C4 1028 0028                  		move.b	$28(a0),d0
0000F4C8 D040                       		add.w	d0,d0
0000F4CA 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000F4D0 117C 0008 0019             		move.b	#8,$19(a0)
0000F4D6 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000F4DC 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000F4DE 117C 0010 0019             		move.b	#$10,$19(a0)
0000F4E4 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000F4EA 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000F4F0 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000F4F6                            
0000F4F6                            Obj14_PlaySnd:
0000F4F6 303C 00AE                  		move.w	#$AE,d0
0000F4FA 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000F500                            
0000F500                            Obj14_Action:				; XREF: Obj14_Index
0000F500 7000                       		moveq	#0,d0
0000F502 1028 0028                  		move.b	$28(a0),d0
0000F506 D040                       		add.w	d0,d0
0000F508 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000F50C 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000F510 6100 F218                  		bsr.w	SpeedToPos
0000F514 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000F51A 6100 C282                  		bsr.w	AnimateSprite
0000F51E                            
0000F51E                            Obj14_ChkDel:				; XREF: Obj13
0000F51E 3028 0008                  		move.w	8(a0),d0
0000F522 0240 FF80                  		andi.w	#$FF80,d0
0000F526 3238 F700                  		move.w	($FFFFF700).w,d1
0000F52A 0441 0080                  		subi.w	#$80,d1
0000F52E 0241 FF80                  		andi.w	#$FF80,d1
0000F532 9041                       		sub.w	d1,d0
0000F534 0C40 0280                  		cmpi.w	#$280,d0
0000F538 6200 F252                  		bhi.w	DeleteObject
0000F53C 4E75                       		rts	
0000F53E                            ; ===========================================================================
0000F53E 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000F542 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000F546 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000F54A 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000F54E 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000F550                            ; ===========================================================================
0000F550                            ; lavaball types 00-03 fly up and fall back down
0000F550                            
0000F550                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000F550 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000F556 3028 0030                  		move.w	$30(a0),d0
0000F55A B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000F55E 6400                       		bcc.s	loc_E41E	; if not, branch
0000F560 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000F564                            
0000F564                            loc_E41E:
0000F564 08A8 0001 0022             		bclr	#1,$22(a0)
0000F56A 4A68 0012                  		tst.w	$12(a0)
0000F56E 6A00                       		bpl.s	locret_E430
0000F570 08E8 0001 0022             		bset	#1,$22(a0)
0000F576                            
0000F576                            locret_E430:
0000F576 4E75                       		rts	
0000F578                            ; ===========================================================================
0000F578                            ; lavaball type	04 flies up until it hits the ceiling
0000F578                            
0000F578                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000F578 08E8 0001 0022             		bset	#1,$22(a0)
0000F57E 6100 0000                  		bsr.w	ObjHitCeiling
0000F582 4A41                       		tst.w	d1
0000F584 6A00                       		bpl.s	locret_E452
0000F586 117C 0008 0028             		move.b	#8,$28(a0)
0000F58C 117C 0001 001C             		move.b	#1,$1C(a0)
0000F592 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000F598                            
0000F598                            locret_E452:
0000F598 4E75                       		rts	
0000F59A                            ; ===========================================================================
0000F59A                            ; lavaball type	05 falls down until it hits the	floor
0000F59A                            
0000F59A                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000F59A 08A8 0001 0022             		bclr	#1,$22(a0)
0000F5A0 6100 0000                  		bsr.w	ObjHitFloor
0000F5A4 4A41                       		tst.w	d1
0000F5A6 6A00                       		bpl.s	locret_E474
0000F5A8 117C 0008 0028             		move.b	#8,$28(a0)
0000F5AE 117C 0001 001C             		move.b	#1,$1C(a0)
0000F5B4 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000F5BA                            
0000F5BA                            locret_E474:
0000F5BA 4E75                       		rts	
0000F5BC                            ; ===========================================================================
0000F5BC                            ; lavaball types 06-07 move sideways
0000F5BC                            
0000F5BC                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000F5BC 08E8 0000 0022             		bset	#0,$22(a0)
0000F5C2 76F8                       		moveq	#-8,d3
0000F5C4 6100 0000                  		bsr.w	ObjHitWallLeft
0000F5C8 4A41                       		tst.w	d1
0000F5CA 6A00                       		bpl.s	locret_E498
0000F5CC 117C 0008 0028             		move.b	#8,$28(a0)
0000F5D2 117C 0003 001C             		move.b	#3,$1C(a0)
0000F5D8 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000F5DE                            
0000F5DE                            locret_E498:
0000F5DE 4E75                       		rts	
0000F5E0                            ; ===========================================================================
0000F5E0                            
0000F5E0                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000F5E0 08A8 0000 0022             		bclr	#0,$22(a0)
0000F5E6 7608                       		moveq	#8,d3
0000F5E8 6100 0000                  		bsr.w	ObjHitWallRight
0000F5EC 4A41                       		tst.w	d1
0000F5EE 6A00                       		bpl.s	locret_E4BC
0000F5F0 117C 0008 0028             		move.b	#8,$28(a0)
0000F5F6 117C 0003 001C             		move.b	#3,$1C(a0)
0000F5FC 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000F602                            
0000F602                            locret_E4BC:
0000F602 4E75                       		rts	
0000F604                            ; ===========================================================================
0000F604                            
0000F604                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000F604 4E75                       		rts	
0000F606                            ; ===========================================================================
0000F606                            
0000F606                            Obj14_Delete:				; XREF: Obj14_Index
0000F606 6000 F184                  		bra.w	DeleteObject
0000F60A                            ; ===========================================================================
0000F60A                            Ani_obj14:
0000F60A                            	include "_anim\obj14.asm"
0000F60A                            ; ---------------------------------------------------------------------------
0000F60A                            ; Animation script - lava balls
0000F60A                            ; ---------------------------------------------------------------------------
0000F60A 0000                       		dc.w byte_E4CC-Ani_obj14
0000F60C 0000                       		dc.w byte_E4D2-Ani_obj14
0000F60E 0000                       		dc.w byte_E4D6-Ani_obj14
0000F610 0000                       		dc.w byte_E4DC-Ani_obj14
0000F612 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000F618 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000F61C 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000F622 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000F626                            		even
0000F626                            		even
0000F626                            
0000F626                            ; ===========================================================================
0000F626                            ; ---------------------------------------------------------------------------
0000F626                            ; Object 6D - flame thrower (SBZ)
0000F626                            ; ---------------------------------------------------------------------------
0000F626                            
0000F626                            Obj6D:					; XREF: Obj_Index
0000F626 7000                       		moveq	#0,d0
0000F628 1028 0024                  		move.b	$24(a0),d0
0000F62C 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000F630 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000F634                            ; ===========================================================================
0000F634 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000F636 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000F638                            ; ===========================================================================
0000F638                            
0000F638                            Obj6D_Main:				; XREF: Obj6D_Index
0000F638 5428 0024                  		addq.b	#2,$24(a0)
0000F63C 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000F644 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000F64A 0028 0004 0001             		ori.b	#4,1(a0)
0000F650 117C 0001 0018             		move.b	#1,$18(a0)
0000F656 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F65C 117C 000C 0019             		move.b	#$C,$19(a0)
0000F662 1028 0028                  		move.b	$28(a0),d0
0000F666 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000F66A D040                       		add.w	d0,d0		; multiply by 2
0000F66C 3140 0030                  		move.w	d0,$30(a0)
0000F670 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000F674 1028 0028                  		move.b	$28(a0),d0
0000F678 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000F67C EB48                       		lsl.w	#5,d0		; multiply by $20
0000F67E 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000F682 117C 000A 0036             		move.b	#$A,$36(a0)
0000F688 0828 0001 0022             		btst	#1,$22(a0)
0000F68E 6700                       		beq.s	Obj6D_Action
0000F690 117C 0002 001C             		move.b	#2,$1C(a0)
0000F696 117C 0015 0036             		move.b	#$15,$36(a0)
0000F69C                            
0000F69C                            Obj6D_Action:				; XREF: Obj6D_Index
0000F69C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000F6A0 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000F6A2 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000F6A8 0868 0000 001C             		bchg	#0,$1C(a0)
0000F6AE 6700                       		beq.s	loc_E57A
0000F6B0 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000F6B6 303C 00B3                  		move.w	#$B3,d0
0000F6BA 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play flame sound
0000F6C0                            
0000F6C0                            loc_E57A:
0000F6C0 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000F6C6 6100 C0D6                  		bsr.w	AnimateSprite
0000F6CA 117C 0000 0020             		move.b	#0,$20(a0)
0000F6D0 1028 0036                  		move.b	$36(a0),d0
0000F6D4 B028 001A                  		cmp.b	$1A(a0),d0
0000F6D8 6600                       		bne.s	Obj6D_ChkDel
0000F6DA 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000F6E0                            
0000F6E0                            Obj6D_ChkDel:
0000F6E0 3028 0008                  		move.w	8(a0),d0
0000F6E4 0240 FF80                  		andi.w	#$FF80,d0
0000F6E8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F6EC 0441 0080                  		subi.w	#$80,d1
0000F6F0 0241 FF80                  		andi.w	#$FF80,d1
0000F6F4 9041                       		sub.w	d1,d0
0000F6F6 0C40 0280                  		cmpi.w	#$280,d0
0000F6FA 6200 F090                  		bhi.w	DeleteObject
0000F6FE 6000 F050                  		bra.w	DisplaySprite
0000F702                            ; ===========================================================================
0000F702                            Ani_obj6D:
0000F702                            	include "_anim\obj6D.asm"
0000F702                            ; ---------------------------------------------------------------------------
0000F702                            ; Animation script - flamethrower (SBZ)
0000F702                            ; ---------------------------------------------------------------------------
0000F702 0000                       		dc.w byte_E5C4-Ani_obj6D
0000F704 0000                       		dc.w byte_E5D2-Ani_obj6D
0000F706 0000                       		dc.w byte_E5DC-Ani_obj6D
0000F708 0000                       		dc.w byte_E5EA-Ani_obj6D
0000F70A 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000F718 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000F722 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000F730 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000F73A                            		even
0000F73A                            		even
0000F73A                            
0000F73A                            ; ---------------------------------------------------------------------------
0000F73A                            ; Sprite mappings - flame thrower (SBZ)
0000F73A                            ; ---------------------------------------------------------------------------
0000F73A                            Map_obj6D:
0000F73A                            	include "_maps\obj6D.asm"
0000F73A                            ; ---------------------------------------------------------------------------
0000F73A                            ; Sprite mappings - flame thrower (SBZ)
0000F73A                            ; ---------------------------------------------------------------------------
0000F73A 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000F73E 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000F742 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000F746 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000F74A 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F74E 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F752 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F756 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F75A 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F75E 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F762 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F766 01                         byte_E620:	dc.b 1
0000F767 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F76C 02                         byte_E626:	dc.b 2
0000F76D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F772 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F777 02                         byte_E631:	dc.b 2
0000F778 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F77D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F782 03                         byte_E63C:	dc.b 3
0000F783 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F788 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F78D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F792 03                         byte_E64C:	dc.b 3
0000F793 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F798 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F79D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F7A2 04                         byte_E65C:	dc.b 4
0000F7A3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F7A8 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F7AD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F7B2 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F7B7 04                         byte_E671:	dc.b 4
0000F7B8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F7BD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F7C2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F7C7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F7CC 05                         byte_E686:	dc.b 5
0000F7CD F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F7D2 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F7D7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F7DC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F7E1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F7E6 05                         byte_E6A0:	dc.b 5
0000F7E7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F7EC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F7F1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F7F6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F7FB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F800 06                         byte_E6BA:	dc.b 6
0000F801 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F806 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F80B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F810 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F815 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F81A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F81F 06                         byte_E6D9:	dc.b 6
0000F820 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F825 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F82A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F82F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F834 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F839 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F83E 01                         byte_E6F8:	dc.b 1
0000F83F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F844 02                         byte_E6FE:	dc.b 2
0000F845 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F84A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F84F 02                         byte_E709:	dc.b 2
0000F850 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F855 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F85A 03                         byte_E714:	dc.b 3
0000F85B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F860 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F865 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F86A 03                         byte_E724:	dc.b 3
0000F86B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F870 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F875 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F87A 04                         byte_E734:	dc.b 4
0000F87B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F880 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F885 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F88A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F88F 04                         byte_E749:	dc.b 4
0000F890 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F895 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F89A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F89F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F8A4 05                         byte_E75E:	dc.b 5
0000F8A5 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F8AA 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F8AF 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F8B4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F8B9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F8BE 05                         byte_E778:	dc.b 5
0000F8BF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F8C4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F8C9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F8CE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F8D3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F8D8 06                         byte_E792:	dc.b 6
0000F8D9 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F8DE F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F8E3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F8E8 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F8ED 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F8F2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F8F7 06                         byte_E7B1:	dc.b 6
0000F8F8 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F8FD F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F902 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F907 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F90C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F911 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F916                            		even
0000F916                            		even
0000F916                            
0000F916                            ; ===========================================================================
0000F916                            ; ---------------------------------------------------------------------------
0000F916                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F916                            ; ---------------------------------------------------------------------------
0000F916                            
0000F916                            Obj46:					; XREF: Obj_Index
0000F916 7000                       		moveq	#0,d0
0000F918 1028 0024                  		move.b	$24(a0),d0
0000F91C 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F920 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F924                            ; ===========================================================================
0000F924 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F926 0000                       		dc.w Obj46_Action-Obj46_Index
0000F928                            ; ===========================================================================
0000F928                            
0000F928                            Obj46_Main:				; XREF: Obj46_Index
0000F928 5428 0024                  		addq.b	#2,$24(a0)
0000F92C 117C 000F 0016             		move.b	#$F,$16(a0)
0000F932 117C 000F 0017             		move.b	#$F,$17(a0)
0000F938 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F940 317C 4000 0002             		move.w	#$4000,2(a0)
0000F946 117C 0004 0001             		move.b	#4,1(a0)
0000F94C 117C 0003 0018             		move.b	#3,$18(a0)
0000F952 117C 0010 0019             		move.b	#$10,$19(a0)
0000F958 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F95E 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F964                            
0000F964                            Obj46_Action:				; XREF: Obj46_Index
0000F964 4A28 0001                  		tst.b	1(a0)
0000F968 6A00                       		bpl.s	Obj46_ChkDel
0000F96A 7000                       		moveq	#0,d0
0000F96C 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F970 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F974 D040                       		add.w	d0,d0
0000F976 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F97A 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F97E 323C 001B                  		move.w	#$1B,d1
0000F982 343C 0010                  		move.w	#$10,d2
0000F986 363C 0011                  		move.w	#$11,d3
0000F98A 3828 0008                  		move.w	8(a0),d4
0000F98E 6100 0000                  		bsr.w	SolidObject
0000F992                            
0000F992                            Obj46_ChkDel:
0000F992 6100 EDBC                  		bsr.w	DisplaySprite
0000F996 3028 0008                  		move.w	8(a0),d0
0000F99A 0240 FF80                  		andi.w	#$FF80,d0
0000F99E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F9A2 0441 0080                  		subi.w	#$80,d1
0000F9A6 0241 FF80                  		andi.w	#$FF80,d1
0000F9AA 9041                       		sub.w	d1,d0
0000F9AC 0C40 0280                  		cmpi.w	#$280,d0
0000F9B0 6200 EDDA                  		bhi.w	DeleteObject
0000F9B4 4E75                       		rts	
0000F9B6                            ; ===========================================================================
0000F9B6 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F9B8 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F9BA 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F9BC 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F9BE 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F9C0                            ; ===========================================================================
0000F9C0                            
0000F9C0                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F9C0 4E75                       		rts	
0000F9C2                            ; ===========================================================================
0000F9C2                            
0000F9C2                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F9C2 3038 D008                  		move.w	($FFFFD008).w,d0
0000F9C6 9068 0008                  		sub.w	8(a0),d0
0000F9CA 6400                       		bcc.s	loc_E888
0000F9CC 4440                       		neg.w	d0
0000F9CE                            
0000F9CE                            loc_E888:
0000F9CE 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F9D2 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F9D4 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F9DA                            
0000F9DA                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F9DA 7000                       		moveq	#0,d0
0000F9DC 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F9E0 0828 0003 0028             		btst	#3,$28(a0)
0000F9E6 6700                       		beq.s	loc_E8A8
0000F9E8 4440                       		neg.w	d0
0000F9EA 0640 0010                  		addi.w	#$10,d0
0000F9EE                            
0000F9EE                            loc_E8A8:
0000F9EE 3228 0030                  		move.w	$30(a0),d1
0000F9F2 9240                       		sub.w	d0,d1
0000F9F4 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F9F8 4E75                       		rts	
0000F9FA                            ; ===========================================================================
0000F9FA                            
0000F9FA                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F9FA 6100 ED2E                  		bsr.w	SpeedToPos
0000F9FE 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000FA04 6100 0000                  		bsr.w	ObjHitFloor
0000FA08 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000FA0A 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000FA0E D368 000C                  		add.w	d1,$C(a0)
0000FA12 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000FA16 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FA1C 117C 0004 0028             		move.b	#4,$28(a0)
0000FA22 3011                       		move.w	(a1),d0
0000FA24 0240 03FF                  		andi.w	#$3FF,d0
0000FA28 0C40 02E8                  		cmpi.w	#$2E8,d0
0000FA2C 6400                       		bcc.s	locret_E8EE
0000FA2E 117C 0000 0028             		move.b	#0,$28(a0)
0000FA34                            
0000FA34                            locret_E8EE:
0000FA34 4E75                       		rts	
0000FA36                            ; ===========================================================================
0000FA36                            
0000FA36                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000FA36 7000                       		moveq	#0,d0
0000FA38 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000FA3C E648                       		lsr.w	#3,d0
0000FA3E 3228 0030                  		move.w	$30(a0),d1
0000FA42 9240                       		sub.w	d0,d1
0000FA44 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000FA48 4E75                       		rts	
0000FA4A                            ; ===========================================================================
0000FA4A                            ; ---------------------------------------------------------------------------
0000FA4A                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000FA4A                            ; ---------------------------------------------------------------------------
0000FA4A                            Map_obj46:
0000FA4A                            	include "_maps\obj46.asm"
0000FA4A                            ; ---------------------------------------------------------------------------
0000FA4A                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000FA4A                            ; ---------------------------------------------------------------------------
0000FA4A 0000                       		dc.w byte_E906-Map_obj46
0000FA4C 01                         byte_E906:	dc.b 1
0000FA4D F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000FA52                            		even
0000FA52                            		even
0000FA52                            
0000FA52                            ; ===========================================================================
0000FA52                            ; ---------------------------------------------------------------------------
0000FA52                            ; Object 12 - lamp (SYZ)
0000FA52                            ; ---------------------------------------------------------------------------
0000FA52                            
0000FA52                            Obj12:					; XREF: Obj_Index
0000FA52 7000                       		moveq	#0,d0
0000FA54 1028 0024                  		move.b	$24(a0),d0
0000FA58 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000FA5C 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000FA60                            ; ===========================================================================
0000FA60 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000FA62 0000                       		dc.w Obj12_Animate-Obj12_Index
0000FA64                            ; ===========================================================================
0000FA64                            
0000FA64                            Obj12_Main:				; XREF: Obj12_Index
0000FA64 5428 0024                  		addq.b	#2,$24(a0)
0000FA68 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000FA70 317C 0000 0002             		move.w	#0,2(a0)
0000FA76 117C 0004 0001             		move.b	#4,1(a0)
0000FA7C 117C 0010 0019             		move.b	#$10,$19(a0)
0000FA82 117C 0006 0018             		move.b	#6,$18(a0)
0000FA88                            
0000FA88                            Obj12_Animate:				; XREF: Obj12_Index
0000FA88 5328 001E                  		subq.b	#1,$1E(a0)
0000FA8C 6A00                       		bpl.s	Obj12_ChkDel
0000FA8E 117C 0007 001E             		move.b	#7,$1E(a0)
0000FA94 5228 001A                  		addq.b	#1,$1A(a0)
0000FA98 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000FA9E 6500                       		bcs.s	Obj12_ChkDel
0000FAA0 117C 0000 001A             		move.b	#0,$1A(a0)
0000FAA6                            
0000FAA6                            Obj12_ChkDel:
0000FAA6 3028 0008                  		move.w	8(a0),d0
0000FAAA 0240 FF80                  		andi.w	#$FF80,d0
0000FAAE 3238 F700                  		move.w	($FFFFF700).w,d1
0000FAB2 0441 0080                  		subi.w	#$80,d1
0000FAB6 0241 FF80                  		andi.w	#$FF80,d1
0000FABA 9041                       		sub.w	d1,d0
0000FABC 0C40 0280                  		cmpi.w	#$280,d0
0000FAC0 6200 ECCA                  		bhi.w	DeleteObject
0000FAC4 6000 EC8A                  		bra.w	DisplaySprite
0000FAC8                            ; ===========================================================================
0000FAC8                            ; ---------------------------------------------------------------------------
0000FAC8                            ; Sprite mappings - lamp (SYZ)
0000FAC8                            ; ---------------------------------------------------------------------------
0000FAC8                            Map_obj12:
0000FAC8                            	include "_maps\obj12.asm"
0000FAC8                            ; ---------------------------------------------------------------------------
0000FAC8                            ; Sprite mappings - lamp (SYZ)
0000FAC8                            ; ---------------------------------------------------------------------------
0000FAC8 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000FACC 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000FAD0 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000FAD4 02                         byte_E98E:	dc.b 2
0000FAD5 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000FADA 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000FADF 02                         byte_E999:	dc.b 2
0000FAE0 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000FAE5 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000FAEA 02                         byte_E9A4:	dc.b 2
0000FAEB F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000FAF0 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000FAF5 02                         byte_E9AF:	dc.b 2
0000FAF6 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000FAFB 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000FB00 02                         byte_E9BA:	dc.b 2
0000FB01 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000FB06 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000FB0B 02                         byte_E9C5:	dc.b 2
0000FB0C F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000FB11 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000FB16                            		even
0000FB16                            		even
0000FB16                            
0000FB16                            ; ===========================================================================
0000FB16                            ; ---------------------------------------------------------------------------
0000FB16                            ; Object 47 - pinball bumper (SYZ)
0000FB16                            ; ---------------------------------------------------------------------------
0000FB16                            
0000FB16                            Obj47:					; XREF: Obj_Index
0000FB16 7000                       		moveq	#0,d0
0000FB18 1028 0024                  		move.b	$24(a0),d0
0000FB1C 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000FB20 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000FB24                            ; ===========================================================================
0000FB24 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000FB26 0000                       		dc.w Obj47_Hit-Obj47_Index
0000FB28                            ; ===========================================================================
0000FB28                            
0000FB28                            Obj47_Main:				; XREF: Obj47_Index
0000FB28 5428 0024                  		addq.b	#2,$24(a0)
0000FB2C 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000FB34 317C 0380 0002             		move.w	#$380,2(a0)
0000FB3A 117C 0004 0001             		move.b	#4,1(a0)
0000FB40 117C 0010 0019             		move.b	#$10,$19(a0)
0000FB46 117C 0001 0018             		move.b	#1,$18(a0)
0000FB4C 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000FB52                            
0000FB52                            Obj47_Hit:				; XREF: Obj47_Index
0000FB52 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000FB56 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000FB5A 4228 0021                  		clr.b	$21(a0)
0000FB5E 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB62 3228 0008                  		move.w	8(a0),d1
0000FB66 3428 000C                  		move.w	$C(a0),d2
0000FB6A 9269 0008                  		sub.w	8(a1),d1
0000FB6E 9469 000C                  		sub.w	$C(a1),d2
0000FB72 4EB9 0000 36F2             		jsr	(CalcAngle).l
0000FB78 4EB9 0000 3424             		jsr	(CalcSine).l
0000FB7E C3FC F900                  		muls.w	#-$700,d1
0000FB82 E081                       		asr.l	#8,d1
0000FB84 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000FB88 C1FC F900                  		muls.w	#-$700,d0
0000FB8C E080                       		asr.l	#8,d0
0000FB8E 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000FB92 08E9 0001 0022             		bset	#1,$22(a1)
0000FB98 08A9 0004 0022             		bclr	#4,$22(a1)
0000FB9E 08A9 0005 0022             		bclr	#5,$22(a1)
0000FBA4 4229 003C                  		clr.b	$3C(a1)
0000FBA8 117C 0001 001C             		move.b	#1,$1C(a0)
0000FBAE 303C 00B4                  		move.w	#$B4,d0
0000FBB2 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play bumper sound
0000FBB8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FBBC 7000                       		moveq	#0,d0
0000FBBE 1028 0023                  		move.b	$23(a0),d0
0000FBC2 6700                       		beq.s	Obj47_Score
0000FBC4 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000FBCA 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000FBCC 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000FBD0                            
0000FBD0                            Obj47_Score:
0000FBD0 7001                       		moveq	#1,d0
0000FBD2 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000FBD8 6100 EFFC                  		bsr.w	SingleObjLoad
0000FBDC 6600                       		bne.s	Obj47_Display
0000FBDE 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000FBE2 3368 0008 0008             		move.w	8(a0),8(a1)
0000FBE8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FBEE 137C 0004 001A             		move.b	#4,$1A(a1)
0000FBF4                            
0000FBF4                            Obj47_Display:
0000FBF4 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000FBFA 6100 BBA2                  		bsr.w	AnimateSprite
0000FBFE 3028 0008                  		move.w	8(a0),d0
0000FC02 0240 FF80                  		andi.w	#$FF80,d0
0000FC06 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC0A 0441 0080                  		subi.w	#$80,d1
0000FC0E 0241 FF80                  		andi.w	#$FF80,d1
0000FC12 9041                       		sub.w	d1,d0
0000FC14 0C40 0280                  		cmpi.w	#$280,d0
0000FC18 6200                       		bhi.s	Obj47_ChkHit
0000FC1A 6000 EB34                  		bra.w	DisplaySprite
0000FC1E                            ; ===========================================================================
0000FC1E                            
0000FC1E                            Obj47_ChkHit:				; XREF: Obj47_Display
0000FC1E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FC22 7000                       		moveq	#0,d0
0000FC24 1028 0023                  		move.b	$23(a0),d0
0000FC28 6700                       		beq.s	Obj47_Delete
0000FC2A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FC30                            
0000FC30                            Obj47_Delete:
0000FC30 6000 EB5A                  		bra.w	DeleteObject
0000FC34                            ; ===========================================================================
0000FC34                            Ani_obj47:
0000FC34                            	include "_anim\obj47.asm"
0000FC34                            ; ---------------------------------------------------------------------------
0000FC34                            ; Animation script - flamethrower (SBZ)
0000FC34                            ; ---------------------------------------------------------------------------
0000FC34 0000                       		dc.w byte_EAF4-Ani_obj47
0000FC36 0000                       		dc.w byte_EAF8-Ani_obj47
0000FC38 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000FC3C 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000FC44                            		even
0000FC44                            		even
0000FC44                            
0000FC44                            ; ---------------------------------------------------------------------------
0000FC44                            ; Sprite mappings - pinball bumper (SYZ)
0000FC44                            ; ---------------------------------------------------------------------------
0000FC44                            Map_obj47:
0000FC44                            	include "_maps\obj47.asm"
0000FC44                            ; ---------------------------------------------------------------------------
0000FC44                            ; Sprite mappings - pinball bumper (SYZ)
0000FC44                            ; ---------------------------------------------------------------------------
0000FC44 0000                       		dc.w byte_EB06-Map_obj47
0000FC46 0000                       		dc.w byte_EB11-Map_obj47
0000FC48 0000                       		dc.w byte_EB1C-Map_obj47
0000FC4A 02                         byte_EB06:	dc.b 2
0000FC4B F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000FC50 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000FC55 02                         byte_EB11:	dc.b 2
0000FC56 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000FC5B F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000FC60 02                         byte_EB1C:	dc.b 2
0000FC61 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000FC66 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000FC6C 00                         		even
0000FC6C 00                         		even
0000FC6C                            
0000FC6C                            ; ===========================================================================
0000FC6C                            ; ---------------------------------------------------------------------------
0000FC6C                            ; Object 0D - signpost at the end of a level
0000FC6C                            ; ---------------------------------------------------------------------------
0000FC6C                            
0000FC6C                            Obj0D:					; XREF: Obj_Index
0000FC6C 7000                       		moveq	#0,d0
0000FC6E 1028 0024                  		move.b	$24(a0),d0
0000FC72 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000FC76 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000FC7A 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000FC80 6100 BB1C                  		bsr.w	AnimateSprite
0000FC84 6100 EACA                  		bsr.w	DisplaySprite
0000FC88 3028 0008                  		move.w	8(a0),d0
0000FC8C 0240 FF80                  		andi.w	#$FF80,d0
0000FC90 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC94 0441 0080                  		subi.w	#$80,d1
0000FC98 0241 FF80                  		andi.w	#$FF80,d1
0000FC9C 9041                       		sub.w	d1,d0
0000FC9E 0C40 0280                  		cmpi.w	#$280,d0
0000FCA2 6200 EAE8                  		bhi.w	DeleteObject
0000FCA6 4E75                       		rts	
0000FCA8                            ; ===========================================================================
0000FCA8 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000FCAA 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000FCAC 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000FCAE 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000FCB0 0000                       		dc.w locret_ED1A-Obj0D_Index
0000FCB2                            ; ===========================================================================
0000FCB2                            
0000FCB2                            Obj0D_Main:				; XREF: Obj0D_Index
0000FCB2 5428 0024                  		addq.b	#2,$24(a0)
0000FCB6 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000FCBE 317C 0680 0002             		move.w	#$680,2(a0)
0000FCC4 117C 0004 0001             		move.b	#4,1(a0)
0000FCCA 117C 0018 0019             		move.b	#$18,$19(a0)
0000FCD0 117C 0004 0018             		move.b	#4,$18(a0)
0000FCD6                            
0000FCD6                            Obj0D_Touch:				; XREF: Obj0D_Index
0000FCD6 3038 D008                  		move.w	($FFFFD008).w,d0
0000FCDA 9068 0008                  		sub.w	8(a0),d0
0000FCDE 6500                       		bcs.s	locret_EBBA
0000FCE0 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000FCE4 6400                       		bcc.s	locret_EBBA	; if not, branch
0000FCE6 303C 00CF                  		move.w	#$CF,d0
0000FCEA 4EB9 0000 1C7C             		jsr	(PlaySound).l	; play signpost	sound
0000FCF0 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000FCF4 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000FCFA 5428 0024                  		addq.b	#2,$24(a0)
0000FCFE                            
0000FCFE                            locret_EBBA:
0000FCFE 4E75                       		rts	
0000FD00                            ; ===========================================================================
0000FD00                            
0000FD00                            Obj0D_Spin:				; XREF: Obj0D_Index
0000FD00 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000FD04 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000FD06 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000FD0C 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000FD10 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000FD16 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000FD18 5428 0024                  		addq.b	#2,$24(a0)
0000FD1C                            
0000FD1C                            Obj0D_Sparkle:
0000FD1C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000FD20 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000FD22 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000FD28 7000                       		moveq	#0,d0
0000FD2A 1028 0034                  		move.b	$34(a0),d0
0000FD2E 5428 0034                  		addq.b	#2,$34(a0)
0000FD32 0228 000E 0034             		andi.b	#$E,$34(a0)
0000FD38 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000FD3C 6100 EE98                  		bsr.w	SingleObjLoad
0000FD40 6600                       		bne.s	locret_EC42
0000FD42 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000FD46 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000FD4C 101A                       		move.b	(a2)+,d0
0000FD4E 4880                       		ext.w	d0
0000FD50 D068 0008                  		add.w	8(a0),d0
0000FD54 3340 0008                  		move.w	d0,8(a1)
0000FD58 101A                       		move.b	(a2)+,d0
0000FD5A 4880                       		ext.w	d0
0000FD5C D068 000C                  		add.w	$C(a0),d0
0000FD60 3340 000C                  		move.w	d0,$C(a1)
0000FD64 237C 0000 AF3C 0004        		move.l	#Map_obj25,4(a1)
0000FD6C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000FD72 137C 0004 0001             		move.b	#4,1(a1)
0000FD78 137C 0002 0018             		move.b	#2,$18(a1)
0000FD7E 137C 0008 0019             		move.b	#8,$19(a1)
0000FD84                            
0000FD84                            locret_EC42:
0000FD84 4E75                       		rts	
0000FD86                            ; ===========================================================================
0000FD86 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000FD88 0808                       		dc.b	8,   8
0000FD8A F000                       		dc.b -$10,   0
0000FD8C 18F8                       		dc.b  $18,  -8
0000FD8E 00F8                       		dc.b	0,  -8
0000FD90 1000                       		dc.b  $10,   0
0000FD92 E808                       		dc.b -$18,   8
0000FD94 1810                       		dc.b  $18, $10
0000FD96                            ; ===========================================================================
0000FD96                            
0000FD96                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000FD96 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000FD9A 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000FD9E 0838 0001 D022             		btst	#1,($FFFFD022).w
0000FDA4 6600                       		bne.s	loc_EC70
0000FDA6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000FDAC 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000FDB2 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000FDB4 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000FDBA 6000                       		bra.s	loc_EC70
0000FDBC                            
0000FDBC                            Obj0D_MoveLeft:
0000FDBC 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000FDC2                            
0000FDC2                            loc_EC70:
0000FDC2 4A38 D000                  		tst.b	($FFFFD000).w
0000FDC6 6700                       		beq.s	loc_EC86
0000FDC8 3038 D008                  		move.w	($FFFFD008).w,d0
0000FDCC 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000FDD0 0641 0128                  		addi.w	#$128,d1
0000FDD4 B041                       		cmp.w	d1,d0
0000FDD6 6500                       		bcs.s	locret_ECEE
0000FDD8                            
0000FDD8                            loc_EC86:
0000FDD8 5428 0024                  		addq.b	#2,$24(a0)
0000FDDC                            
0000FDDC                            ; ---------------------------------------------------------------------------
0000FDDC                            ; Subroutine to	set up bonuses at the end of an	act
0000FDDC                            ; ---------------------------------------------------------------------------
0000FDDC                            
0000FDDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FDDC                            
0000FDDC                            
0000FDDC                            GotThroughAct:				; XREF: Obj3E_EndAct
0000FDDC 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000FDE0 6600                       		bne.s	locret_ECEE
0000FDE2 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000FDE8 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000FDEC 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000FDF0 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000FDF6 7010                       		moveq	#$10,d0
0000FDF8 4EB9 0000 1E98             		jsr	(LoadPLC2).l	; load title card patterns
0000FDFE 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000FE04 7000                       		moveq	#0,d0
0000FE06 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000FE0A C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000FE0E 7200                       		moveq	#0,d1
0000FE10 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000FE14 D041                       		add.w	d1,d0		; add up your time
0000FE16 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000FE1A 7214                       		moveq	#$14,d1
0000FE1C B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000FE1E 6500                       		bcs.s	loc_ECD0	; if not, branch
0000FE20 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000FE22                            
0000FE22                            loc_ECD0:
0000FE22 D040                       		add.w	d0,d0
0000FE24 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000FE2A 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000FE2E C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000FE32 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000FE36 303C 008E                  		move.w	#$8E,d0
0000FE3A 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000FE40                            
0000FE40                            locret_ECEE:
0000FE40 4E75                       		rts	
0000FE42                            ; End of function GotThroughAct
0000FE42                            
0000FE42                            ; ===========================================================================
0000FE42 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000FE56 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000FE6C                            ; ===========================================================================
0000FE6C                            
0000FE6C                            locret_ED1A:				; XREF: Obj0D_Index
0000FE6C 4E75                       		rts	
0000FE6E                            ; ===========================================================================
0000FE6E                            Ani_obj0D:
0000FE6E                            	include "_anim\obj0D.asm"
0000FE6E                            ; ---------------------------------------------------------------------------
0000FE6E                            ; Animation script - signpost
0000FE6E                            ; ---------------------------------------------------------------------------
0000FE6E 0000                       		dc.w byte_ED24-Ani_obj0D
0000FE70 0000                       		dc.w byte_ED28-Ani_obj0D
0000FE72 0000                       		dc.w byte_ED2E-Ani_obj0D
0000FE74 0000                       		dc.w byte_ED34-Ani_obj0D
0000FE76 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000FE7A 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000FE80 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000FE86 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000FE8A 00                         		even
0000FE8A 00                         		even
0000FE8A                            
0000FE8A                            ; ---------------------------------------------------------------------------
0000FE8A                            ; Sprite mappings - signpost
0000FE8A                            ; ---------------------------------------------------------------------------
0000FE8A                            Map_obj0D:
0000FE8A                            	include "_maps\obj0D.asm"
0000FE8A                            ; ---------------------------------------------------------------------------
0000FE8A                            ; Sprite mappings - signpost
0000FE8A                            ; ---------------------------------------------------------------------------
0000FE8A 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000FE8E 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000FE92 0000                       		dc.w byte_ED73-Map_obj0D
0000FE94 03                         byte_ED42:	dc.b 3
0000FE95 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000FE9A F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000FE9F 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FEA4 02                         byte_ED52:	dc.b 2
0000FEA5 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000FEAA 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FEAF 02                         byte_ED5D:	dc.b 2
0000FEB0 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000FEB5 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000FEBA 02                         byte_ED68:	dc.b 2
0000FEBB F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000FEC0 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000FEC5 03                         byte_ED73:	dc.b 3
0000FEC6 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000FECB F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000FED0 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FED6 00                         		even
0000FED6 00                         		even
0000FED6                            
0000FED6                            ; ===========================================================================
0000FED6                            ; ---------------------------------------------------------------------------
0000FED6                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000FED6                            ; ---------------------------------------------------------------------------
0000FED6                            
0000FED6                            Obj4C:					; XREF: Obj_Index
0000FED6 7000                       		moveq	#0,d0
0000FED8 1028 0024                  		move.b	$24(a0),d0
0000FEDC 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000FEE0 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000FEE4 6000 0000                  		bra.w	Obj4D_ChkDel
0000FEE8                            ; ===========================================================================
0000FEE8 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000FEEA 0000                       		dc.w loc_EDCC-Obj4C_Index
0000FEEC 0000                       		dc.w loc_EE3E-Obj4C_Index
0000FEEE 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000FEF0 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000FEF2 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000FEF4                            ; ===========================================================================
0000FEF4                            
0000FEF4                            Obj4C_Main:				; XREF: Obj4C_Index
0000FEF4 5428 0024                  		addq.b	#2,$24(a0)
0000FEF8 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000FF00 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000FF06 117C 0004 0001             		move.b	#4,1(a0)
0000FF0C 117C 0001 0018             		move.b	#1,$18(a0)
0000FF12 117C 0038 0019             		move.b	#$38,$19(a0)
0000FF18 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000FF1E                            
0000FF1E                            loc_EDCC:				; XREF: Obj4C_Index
0000FF1E 5368 0032                  		subq.w	#1,$32(a0)
0000FF22 6A00                       		bpl.s	locret_EDF0
0000FF24 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000FF2A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FF2E 3228 000C                  		move.w	$C(a0),d1
0000FF32 B041                       		cmp.w	d1,d0
0000FF34 6400                       		bcc.s	locret_EDF0
0000FF36 0441 0170                  		subi.w	#$170,d1
0000FF3A B041                       		cmp.w	d1,d0
0000FF3C 6500                       		bcs.s	locret_EDF0
0000FF3E 5428 0024                  		addq.b	#2,$24(a0)
0000FF42                            
0000FF42                            locret_EDF0:
0000FF42 4E75                       		rts	
0000FF44                            ; ===========================================================================
0000FF44                            
0000FF44                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000FF44 5428 0024                  		addq.b	#2,$24(a0)
0000FF48 6100 ECA2                  		bsr.w	SingleObjLoad2
0000FF4C 6600                       		bne.s	loc_EE18
0000FF4E 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000FF52 3368 0008 0008             		move.w	8(a0),8(a1)
0000FF58 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FF5E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FF64 2348 003C                  		move.l	a0,$3C(a1)
0000FF68                            
0000FF68                            loc_EE18:
0000FF68 117C 0001 001C             		move.b	#1,$1C(a0)
0000FF6E 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000FF72 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000FF74 117C 0004 001C             		move.b	#4,$1C(a0)
0000FF7A 6000                       		bra.s	Obj4C_Display
0000FF7C                            ; ===========================================================================
0000FF7C                            
0000FF7C                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000FF7C 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000FF80 08E9 0001 0022             		bset	#1,$22(a1)
0000FF86 337C FA80 0012             		move.w	#-$580,$12(a1)
0000FF8C 6000                       		bra.s	Obj4C_Display
0000FF8E                            ; ===========================================================================
0000FF8E                            
0000FF8E                            loc_EE3E:				; XREF: Obj4C_Index
0000FF8E 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000FF92 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000FF94 5428 0024                  		addq.b	#2,$24(a0)
0000FF98 4E75                       		rts	
0000FF9A                            ; ===========================================================================
0000FF9A                            
0000FF9A                            Obj4C_Display:				; XREF: Obj4C_Index
0000FF9A 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000FFA0 6100 B7FC                  		bsr.w	AnimateSprite
0000FFA4 6100 E7AA                  		bsr.w	DisplaySprite
0000FFA8 4E75                       		rts	
0000FFAA                            ; ===========================================================================
0000FFAA                            
0000FFAA                            Obj4C_Delete:				; XREF: Obj4C_Index
0000FFAA 117C 0000 001C             		move.b	#0,$1C(a0)
0000FFB0 117C 0002 0024             		move.b	#2,$24(a0)
0000FFB6 4A28 0028                  		tst.b	$28(a0)
0000FFBA 6700 E7D0                  		beq.w	DeleteObject
0000FFBE 4E75                       		rts	
0000FFC0                            ; ===========================================================================
0000FFC0                            ; ---------------------------------------------------------------------------
0000FFC0                            ; Object 4D - lava geyser / lavafall (MZ)
0000FFC0                            ; ---------------------------------------------------------------------------
0000FFC0                            
0000FFC0                            Obj4D:					; XREF: Obj_Index
0000FFC0 7000                       		moveq	#0,d0
0000FFC2 1028 0024                  		move.b	$24(a0),d0
0000FFC6 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000FFCA 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000FFCE 6000 E780                  		bra.w	DisplaySprite
0000FFD2                            ; ===========================================================================
0000FFD2 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000FFD4 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000FFD6 0000                       		dc.w loc_EFFC-Obj4D_Index
0000FFD8 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000FFDA                            
0000FFDA FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000FFDE                            ; ===========================================================================
0000FFDE                            
0000FFDE                            Obj4D_Main:				; XREF: Obj4D_Index
0000FFDE 5428 0024                  		addq.b	#2,$24(a0)
0000FFE2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FFE8 4A28 0028                  		tst.b	$28(a0)
0000FFEC 6700                       		beq.s	loc_EEA4
0000FFEE 0468 0250 000C             		subi.w	#$250,$C(a0)
0000FFF4                            
0000FFF4                            loc_EEA4:
0000FFF4 7000                       		moveq	#0,d0
0000FFF6 1028 0028                  		move.b	$28(a0),d0
0000FFFA D040                       		add.w	d0,d0
0000FFFC 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
00010002 2248                       		movea.l	a0,a1
00010004 7201                       		moveq	#1,d1
00010006 6100                       		bsr.s	Obj4D_MakeLava
00010008 6000                       		bra.s	loc_EF10
0001000A                            ; ===========================================================================
0001000A                            
0001000A                            Obj4D_Loop:
0001000A 6100 EBE0                  		bsr.w	SingleObjLoad2
0001000E 6600                       		bne.s	loc_EF0A
00010010                            
00010010                            Obj4D_MakeLava:				; XREF: Obj4D_Main
00010010 12BC 004D                  		move.b	#$4D,0(a1)
00010014 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0001001C 337C 63A8 0002             		move.w	#$63A8,2(a1)
00010022 137C 0004 0001             		move.b	#4,1(a1)
00010028 137C 0020 0019             		move.b	#$20,$19(a1)
0001002E 3368 0008 0008             		move.w	8(a0),8(a1)
00010034 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001003A 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010040 137C 0001 0018             		move.b	#1,$18(a1)
00010046 137C 0005 001C             		move.b	#5,$1C(a1)
0001004C 4A28 0028                  		tst.b	$28(a0)
00010050 6700                       		beq.s	loc_EF0A
00010052 137C 0002 001C             		move.b	#2,$1C(a1)
00010058                            
00010058                            loc_EF0A:
00010058 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0001005C 4E75                       		rts	
0001005E                            ; ===========================================================================
0001005E                            
0001005E                            loc_EF10:				; XREF: Obj4D_Main
0001005E 0669 0060 000C             		addi.w	#$60,$C(a1)
00010064 3368 0030 0030             		move.w	$30(a0),$30(a1)
0001006A 0669 0060 0030             		addi.w	#$60,$30(a1)
00010070 137C 0093 0020             		move.b	#$93,$20(a1)
00010076 137C 0080 0016             		move.b	#$80,$16(a1)
0001007C 08E9 0004 0001             		bset	#4,1(a1)
00010082 5829 0024                  		addq.b	#4,$24(a1)
00010086 2348 003C                  		move.l	a0,$3C(a1)
0001008A 4A28 0028                  		tst.b	$28(a0)
0001008E 6700                       		beq.s	Obj4D_PlaySnd
00010090 7200                       		moveq	#0,d1
00010092 6100 FF76                  		bsr.w	Obj4D_Loop
00010096 5429 0024                  		addq.b	#2,$24(a1)
0001009A 08E9 0004 0002             		bset	#4,2(a1)
000100A0 0669 0100 000C             		addi.w	#$100,$C(a1)
000100A6 137C 0000 0018             		move.b	#0,$18(a1)
000100AC 3368 0030 0030             		move.w	$30(a0),$30(a1)
000100B2 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
000100B8 117C 0000 0028             		move.b	#0,$28(a0)
000100BE                            
000100BE                            Obj4D_PlaySnd:
000100BE 303C 00C8                  		move.w	#$C8,d0
000100C2 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play flame sound
000100C8                            
000100C8                            Obj4D_Action:				; XREF: Obj4D_Index
000100C8 7000                       		moveq	#0,d0
000100CA 1028 0028                  		move.b	$28(a0),d0
000100CE D040                       		add.w	d0,d0
000100D0 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
000100D4 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
000100D8 6100 E650                  		bsr.w	SpeedToPos
000100DC 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
000100E2 6100 B6BA                  		bsr.w	AnimateSprite
000100E6                            
000100E6                            Obj4D_ChkDel:				; XREF: Obj4C
000100E6 3028 0008                  		move.w	8(a0),d0
000100EA 0240 FF80                  		andi.w	#$FF80,d0
000100EE 3238 F700                  		move.w	($FFFFF700).w,d1
000100F2 0441 0080                  		subi.w	#$80,d1
000100F6 0241 FF80                  		andi.w	#$FF80,d1
000100FA 9041                       		sub.w	d1,d0
000100FC 0C40 0280                  		cmpi.w	#$280,d0
00010100 6200 E68A                  		bhi.w	DeleteObject
00010104 4E75                       		rts	
00010106                            ; ===========================================================================
00010106 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
00010108 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0001010A                            ; ===========================================================================
0001010A                            
0001010A                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0001010A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010110 3028 0030                  		move.w	$30(a0),d0
00010114 B068 000C                  		cmp.w	$C(a0),d0
00010118 6400                       		bcc.s	locret_EFDA
0001011A 5828 0024                  		addq.b	#4,$24(a0)
0001011E 2268 003C                  		movea.l	$3C(a0),a1
00010122 137C 0003 001C             		move.b	#3,$1C(a1)
00010128                            
00010128                            locret_EFDA:
00010128 4E75                       		rts	
0001012A                            ; ===========================================================================
0001012A                            
0001012A                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0001012A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010130 3028 0030                  		move.w	$30(a0),d0
00010134 B068 000C                  		cmp.w	$C(a0),d0
00010138 6400                       		bcc.s	locret_EFFA
0001013A 5828 0024                  		addq.b	#4,$24(a0)
0001013E 2268 003C                  		movea.l	$3C(a0),a1
00010142 137C 0001 001C             		move.b	#1,$1C(a1)
00010148                            
00010148                            locret_EFFA:
00010148 4E75                       		rts	
0001014A                            ; ===========================================================================
0001014A                            
0001014A                            loc_EFFC:				; XREF: Obj4D_Index
0001014A 2268 003C                  		movea.l	$3C(a0),a1
0001014E 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00010154 6700 0000                  		beq.w	Obj4D_Delete
00010158 3029 000C                  		move.w	$C(a1),d0
0001015C 0640 0060                  		addi.w	#$60,d0
00010160 3140 000C                  		move.w	d0,$C(a0)
00010164 9068 0030                  		sub.w	$30(a0),d0
00010168 4440                       		neg.w	d0
0001016A 7208                       		moveq	#8,d1
0001016C 0C40 0040                  		cmpi.w	#$40,d0
00010170 6C00                       		bge.s	loc_F026
00010172 720B                       		moveq	#$B,d1
00010174                            
00010174                            loc_F026:
00010174 0C40 0080                  		cmpi.w	#$80,d0
00010178 6F00                       		ble.s	loc_F02E
0001017A 720E                       		moveq	#$E,d1
0001017C                            
0001017C                            loc_F02E:
0001017C 5328 001E                  		subq.b	#1,$1E(a0)
00010180 6A00                       		bpl.s	loc_F04C
00010182 117C 0007 001E             		move.b	#7,$1E(a0)
00010188 5228 001B                  		addq.b	#1,$1B(a0)
0001018C 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
00010192 6500                       		bcs.s	loc_F04C
00010194 117C 0000 001B             		move.b	#0,$1B(a0)
0001019A                            
0001019A                            loc_F04C:
0001019A 1028 001B                  		move.b	$1B(a0),d0
0001019E D001                       		add.b	d1,d0
000101A0 1140 001A                  		move.b	d0,$1A(a0)
000101A4 6000 FF40                  		bra.w	Obj4D_ChkDel
000101A8                            ; ===========================================================================
000101A8                            
000101A8                            Obj4D_Delete:				; XREF: Obj4D_Index
000101A8 6000 E5E2                  		bra.w	DeleteObject
000101AC                            ; ===========================================================================
000101AC                            ; ---------------------------------------------------------------------------
000101AC                            ; Object 4E - advancing	wall of	lava (MZ)
000101AC                            ; ---------------------------------------------------------------------------
000101AC                            
000101AC                            Obj4E:					; XREF: Obj_Index
000101AC 7000                       		moveq	#0,d0
000101AE 1028 0024                  		move.b	$24(a0),d0
000101B2 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
000101B6 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
000101BA                            ; ===========================================================================
000101BA 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
000101BC 0000                       		dc.w Obj4E_Solid-Obj4E_Index
000101BE 0000                       		dc.w Obj4E_Action-Obj4E_Index
000101C0 0000                       		dc.w Obj4E_Move2-Obj4E_Index
000101C2 0000                       		dc.w Obj4E_Delete-Obj4E_Index
000101C4                            ; ===========================================================================
000101C4                            
000101C4                            Obj4E_Main:				; XREF: Obj4E_Index
000101C4 5828 0024                  		addq.b	#4,$24(a0)
000101C8 2248                       		movea.l	a0,a1
000101CA 7201                       		moveq	#1,d1
000101CC 6000                       		bra.s	Obj4E_Main2
000101CE                            ; ===========================================================================
000101CE                            
000101CE                            Obj4E_Loop:
000101CE 6100 EA1C                  		bsr.w	SingleObjLoad2
000101D2 6600                       		bne.s	loc_F0C8
000101D4                            
000101D4                            Obj4E_Main2:				; XREF: Obj4E_Main
000101D4 12BC 004E                  		move.b	#$4E,0(a1)	; load object
000101D8 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
000101E0 337C 63A8 0002             		move.w	#$63A8,2(a1)
000101E6 137C 0004 0001             		move.b	#4,1(a1)
000101EC 137C 0050 0019             		move.b	#$50,$19(a1)
000101F2 3368 0008 0008             		move.w	8(a0),8(a1)
000101F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000101FE 137C 0001 0018             		move.b	#1,$18(a1)
00010204 137C 0000 001C             		move.b	#0,$1C(a1)
0001020A 137C 0094 0020             		move.b	#$94,$20(a1)
00010210 2348 003C                  		move.l	a0,$3C(a1)
00010214                            
00010214                            loc_F0C8:
00010214 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
00010218                            
00010218 5C29 0024                  		addq.b	#6,$24(a1)
0001021C 137C 0004 001A             		move.b	#4,$1A(a1)
00010222                            
00010222                            Obj4E_Action:				; XREF: Obj4E_Index
00010222 3038 D008                  		move.w	($FFFFD008).w,d0
00010226 9068 0008                  		sub.w	8(a0),d0
0001022A 6400                       		bcc.s	Obj4E_ChkSonic
0001022C 4440                       		neg.w	d0
0001022E                            
0001022E                            Obj4E_ChkSonic:
0001022E 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
00010232 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010234 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010238 9068 000C                  		sub.w	$C(a0),d0
0001023C 6400                       		bcc.s	loc_F0F4
0001023E 4440                       		neg.w	d0
00010240                            
00010240                            loc_F0F4:
00010240 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
00010244 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010246 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0001024C 6000                       		bra.s	Obj4E_Solid
0001024E                            ; ===========================================================================
0001024E                            
0001024E                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0001024E 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
00010252 6700                       		beq.s	Obj4E_Solid	; if not, branch
00010254 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0001025A 5528 0024                  		subq.b	#2,$24(a0)
0001025E                            
0001025E                            Obj4E_Solid:				; XREF: Obj4E_Index
0001025E 323C 002B                  		move.w	#$2B,d1
00010262 343C 0018                  		move.w	#$18,d2
00010266 3602                       		move.w	d2,d3
00010268 5243                       		addq.w	#1,d3
0001026A 3828 0008                  		move.w	8(a0),d4
0001026E 1028 0024                  		move.b	$24(a0),d0
00010272 3F00                       		move.w	d0,-(sp)
00010274 6100 0000                  		bsr.w	SolidObject
00010278 301F                       		move.w	(sp)+,d0
0001027A 1140 0024                  		move.b	d0,$24(a0)
0001027E 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
00010284 6600                       		bne.s	Obj4E_Animate	; if not, branch
00010286 4268 0010                  		clr.w	$10(a0)		; stop object moving
0001028A 4228 0036                  		clr.b	$36(a0)
0001028E                            
0001028E                            Obj4E_Animate:
0001028E 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
00010294 6100 B508                  		bsr.w	AnimateSprite
00010298 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001029E 6400                       		bcc.s	Obj4E_ChkDel
000102A0 6100 E488                  		bsr.w	SpeedToPos
000102A4                            
000102A4                            Obj4E_ChkDel:
000102A4 6100 E4AA                  		bsr.w	DisplaySprite
000102A8 4A28 0036                  		tst.b	$36(a0)
000102AC 6600                       		bne.s	locret_F17E
000102AE 3028 0008                  		move.w	8(a0),d0
000102B2 0240 FF80                  		andi.w	#$FF80,d0
000102B6 3238 F700                  		move.w	($FFFFF700).w,d1
000102BA 0441 0080                  		subi.w	#$80,d1
000102BE 0241 FF80                  		andi.w	#$FF80,d1
000102C2 9041                       		sub.w	d1,d0
000102C4 0C40 0280                  		cmpi.w	#$280,d0
000102C8 6200                       		bhi.s	Obj4E_ChkGone
000102CA                            
000102CA                            locret_F17E:
000102CA 4E75                       		rts	
000102CC                            ; ===========================================================================
000102CC                            
000102CC                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
000102CC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000102D0 7000                       		moveq	#0,d0
000102D2 1028 0023                  		move.b	$23(a0),d0
000102D6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000102DC 117C 0008 0024             		move.b	#8,$24(a0)
000102E2 4E75                       		rts	
000102E4                            ; ===========================================================================
000102E4                            
000102E4                            Obj4E_Move2:				; XREF: Obj4E_Index
000102E4 2268 003C                  		movea.l	$3C(a0),a1
000102E8 0C29 0008 0024             		cmpi.b	#8,$24(a1)
000102EE 6700                       		beq.s	Obj4E_Delete
000102F0 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
000102F6 0468 0080 0008             		subi.w	#$80,8(a0)
000102FC 6000 E452                  		bra.w	DisplaySprite
00010300                            ; ===========================================================================
00010300                            
00010300                            Obj4E_Delete:				; XREF: Obj4E_Index
00010300 6000 E48A                  		bra.w	DeleteObject
00010304                            ; ===========================================================================
00010304                            ; ---------------------------------------------------------------------------
00010304                            ; Object 54 - invisible	lava tag (MZ)
00010304                            ; ---------------------------------------------------------------------------
00010304                            
00010304                            Obj54:					; XREF: Obj_Index
00010304 7000                       		moveq	#0,d0
00010306 1028 0024                  		move.b	$24(a0),d0
0001030A 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0001030E 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
00010312                            ; ===========================================================================
00010312 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
00010314 0000                       		dc.w Obj54_ChkDel-Obj54_Index
00010316                            
00010316 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0001031A                            ; ===========================================================================
0001031A                            
0001031A                            Obj54_Main:				; XREF: Obj54_Index
0001031A 5428 0024                  		addq.b	#2,$24(a0)
0001031E 7000                       		moveq	#0,d0
00010320 1028 0028                  		move.b	$28(a0),d0
00010324 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0001032A 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00010332 117C 0084 0001             		move.b	#$84,1(a0)
00010338                            
00010338                            Obj54_ChkDel:				; XREF: Obj54_Index
00010338 3028 0008                  		move.w	8(a0),d0
0001033C 0240 FF80                  		andi.w	#$FF80,d0
00010340 3238 F700                  		move.w	($FFFFF700).w,d1
00010344 0441 0080                  		subi.w	#$80,d1
00010348 0241 FF80                  		andi.w	#$FF80,d1
0001034C 9041                       		sub.w	d1,d0
0001034E 6B00 E43C                  		bmi.w	DeleteObject
00010352 0C40 0280                  		cmpi.w	#$280,d0
00010356 6200 E434                  		bhi.w	DeleteObject
0001035A 4E75                       		rts	
0001035C                            ; ===========================================================================
0001035C                            ; ---------------------------------------------------------------------------
0001035C                            ; Sprite mappings - invisible lava tag (MZ)
0001035C                            ; ---------------------------------------------------------------------------
0001035C                            Map_obj54:
0001035C                            	include "_maps\obj54.asm"
0001035C                            ; ---------------------------------------------------------------------------
0001035C                            ; Sprite mappings - invisible lava tag (MZ)
0001035C                            ; ---------------------------------------------------------------------------
0001035C 0000                       		dc.w byte_F212-Map_obj54
0001035E 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00010360 00                         		even
00010360 00                         		even
00010360                            
00010360                            Ani_obj4C:
00010360                            	include "_anim\obj4C.asm"
00010360                            ; ---------------------------------------------------------------------------
00010360                            ; Animation script - geyser of lava (MZ)
00010360                            ; ---------------------------------------------------------------------------
00010360 0000                       		dc.w byte_F220-Ani_obj4C
00010362 0000                       		dc.w byte_F22A-Ani_obj4C
00010364 0000                       		dc.w byte_F22E-Ani_obj4C
00010366 0000                       		dc.w byte_F232-Ani_obj4C
00010368 0000                       		dc.w byte_F23A-Ani_obj4C
0001036A 0000                       		dc.w byte_F23E-Ani_obj4C
0001036C 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
00010376 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0001037A 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0001037E 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
00010386 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0001038A 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0001038E                            		even
0001038E                            		even
0001038E                            
0001038E                            Ani_obj4E:
0001038E                            	include "_anim\obj4E.asm"
0001038E                            ; ---------------------------------------------------------------------------
0001038E                            ; Animation script - advancing wall of lava (MZ)
0001038E                            ; ---------------------------------------------------------------------------
0001038E 0000                       		dc.w byte_F244-Ani_obj4E
00010390 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
00010396                            		even
00010396                            		even
00010396                            
00010396                            ; ---------------------------------------------------------------------------
00010396                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010396                            ; ---------------------------------------------------------------------------
00010396                            Map_obj4C:
00010396                            	include "_maps\obj4C.asm"
00010396                            ; ---------------------------------------------------------------------------
00010396                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010396                            ; ---------------------------------------------------------------------------
00010396 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0001039A 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0001039E 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
000103A2 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
000103A6 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
000103AA 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
000103AE 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
000103B2 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
000103B6 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
000103BA 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
000103BE 02                         byte_F272:	dc.b 2
000103BF EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
000103C4 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
000103C9 02                         byte_F27D:	dc.b 2
000103CA EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
000103CF EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
000103D4 04                         byte_F288:	dc.b 4
000103D5 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000103DA F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000103DF F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000103E4 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000103E9 04                         byte_F29D:	dc.b 4
000103EA EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000103EF F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000103F4 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000103F9 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000103FE 06                         byte_F2B2:	dc.b 6
000103FF EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010404 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010409 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0001040E EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010413 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00010418 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0001041D 06                         byte_F2D1:	dc.b 6
0001041E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010423 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010428 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0001042D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010432 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00010437 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0001043C 02                         byte_F2F0:	dc.b 2
0001043D E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00010442 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00010447 02                         byte_F2FB:	dc.b 2
00010448 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0001044D E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00010452 0A                         byte_F306:	dc.b $A
00010453 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010458 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001045D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010462 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010467 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001046C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010471 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010476 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0001047B 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010480 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010485 0A                         byte_F339:	dc.b $A
00010486 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001048B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010490 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010495 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001049A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001049F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000104A4 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000104A9 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000104AE 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000104B3 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000104B8 0A                         byte_F36C:	dc.b $A
000104B9 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000104BE 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000104C3 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000104C8 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000104CD D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000104D2 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000104D7 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000104DC F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000104E1 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000104E6 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000104EB 06                         byte_F39F:	dc.b 6
000104EC 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000104F1 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000104F6 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000104FB B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010500 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010505 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001050A 06                         byte_F3BE:	dc.b 6
0001050B 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010510 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010515 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001051A B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001051F D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010524 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010529 06                         byte_F3DD:	dc.b 6
0001052A 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0001052F 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010534 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010539 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0001053E D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010543 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010548 10                         byte_F3FC:	dc.b $10
00010549 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001054E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010553 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010558 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001055D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010562 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010567 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001056C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010571 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010576 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001057B 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00010580 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00010585 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0001058A 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0001058F 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00010594 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00010599 10                         byte_F44D:	dc.b $10
0001059A 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001059F 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000105A4 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000105A9 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000105AE D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000105B3 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000105B8 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000105BD F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000105C2 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000105C7 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000105CC 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
000105D1 300F 0850 00               		dc.b $30, $F, 8, $50, 0
000105D6 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
000105DB 500F 0850 00               		dc.b $50, $F, 8, $50, 0
000105E0 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
000105E5 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000105EA 10                         byte_F49E:	dc.b $10
000105EB 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000105F0 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000105F5 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000105FA B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000105FF D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010604 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010609 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0001060E F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010613 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010618 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001061D 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00010622 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00010627 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0001062C 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010631 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00010636 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0001063B 06                         byte_F4EF:	dc.b 6
0001063C E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010641 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00010646 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0001064B E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00010650 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00010655 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0001065A 06                         byte_F50E:	dc.b 6
0001065B E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010660 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00010665 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0001066A E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0001066F D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00010674 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00010679 00                         byte_F52D:	dc.b 0
0001067A                            		even
0001067A                            		even
0001067A                            
0001067A                            ; ---------------------------------------------------------------------------
0001067A                            ; Sprite mappings - advancing wall of lava (MZ)
0001067A                            ; ---------------------------------------------------------------------------
0001067A                            Map_obj4E:
0001067A                            	include "_maps\obj4E.asm"
0001067A                            ; ---------------------------------------------------------------------------
0001067A                            ; Sprite mappings - advancing wall of lava (MZ)
0001067A                            ; ---------------------------------------------------------------------------
0001067A 0000                       		dc.w byte_F538-Map_obj4E
0001067C 0000                       		dc.w byte_F566-Map_obj4E
0001067E 0000                       		dc.w byte_F594-Map_obj4E
00010680 0000                       		dc.w byte_F5C2-Map_obj4E
00010682 0000                       		dc.w byte_F5F0-Map_obj4E
00010684 09                         byte_F538:	dc.b 9
00010685 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0001068A 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0001068F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010694 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010699 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001069E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000106A3 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000106A8 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000106AD 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000106B2 09                         byte_F566:	dc.b 9
000106B3 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000106B8 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
000106BD 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000106C2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000106C7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000106CC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000106D1 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000106D6 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000106DB 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000106E0 09                         byte_F594:	dc.b 9
000106E1 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
000106E6 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
000106EB 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000106F0 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000106F5 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000106FA E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000106FF 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010704 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010709 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001070E 09                         byte_F5C2:	dc.b 9
0001070F E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010714 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
00010719 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001071E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010723 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010728 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001072D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010732 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010737 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001073C 08                         byte_F5F0:	dc.b 8
0001073D E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010742 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010747 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001074C 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010751 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010756 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001075B E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010760 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010766 00                         		even
00010766 00                         		even
00010766                            
00010766                            ; ===========================================================================
00010766                            ; ---------------------------------------------------------------------------
00010766                            ; Object 40 - Moto Bug enemy (GHZ)
00010766                            ; ---------------------------------------------------------------------------
00010766                            
00010766                            Obj40:					; XREF: Obj_Index
00010766 7000                       		moveq	#0,d0
00010768 1028 0024                  		move.b	$24(a0),d0
0001076C 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010770 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010774                            ; ===========================================================================
00010774 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010776 0000                       		dc.w Obj40_Action-Obj40_Index
00010778 0000                       		dc.w Obj40_Animate-Obj40_Index
0001077A 0000                       		dc.w Obj40_Delete-Obj40_Index
0001077C                            ; ===========================================================================
0001077C                            
0001077C                            Obj40_Main:				; XREF: Obj40_Index
0001077C 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010784 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001078A 117C 0004 0001             		move.b	#4,1(a0)
00010790 117C 0004 0018             		move.b	#4,$18(a0)
00010796 117C 0014 0019             		move.b	#$14,$19(a0)
0001079C 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
000107A0 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
000107A2 117C 000E 0016             		move.b	#$E,$16(a0)
000107A8 117C 0008 0017             		move.b	#8,$17(a0)
000107AE 117C 000C 0020             		move.b	#$C,$20(a0)
000107B4 6100 DF02                  		bsr.w	ObjectFall
000107B8 4EB9 0000 0000             		jsr	ObjHitFloor
000107BE 4A41                       		tst.w	d1
000107C0 6A00                       		bpl.s	locret_F68A
000107C2 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000107C6 317C 0000 0012             		move.w	#0,$12(a0)
000107CC 5428 0024                  		addq.b	#2,$24(a0)
000107D0 0868 0000 0022             		bchg	#0,$22(a0)
000107D6                            
000107D6                            locret_F68A:
000107D6 4E75                       		rts	
000107D8                            ; ===========================================================================
000107D8                            
000107D8                            Obj40_SetSmoke:				; XREF: Obj40_Main
000107D8 5828 0024                  		addq.b	#4,$24(a0)
000107DC 6000 0000                  		bra.w	Obj40_Animate
000107E0                            ; ===========================================================================
000107E0                            
000107E0                            Obj40_Action:				; XREF: Obj40_Index
000107E0 7000                       		moveq	#0,d0
000107E2 1028 0025                  		move.b	$25(a0),d0
000107E6 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
000107EA 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
000107EE 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000107F4 6100 AFA8                  		bsr.w	AnimateSprite
000107F8                            
000107F8                            ; ---------------------------------------------------------------------------
000107F8                            ; Routine to mark an enemy/monitor/ring	as destroyed
000107F8                            ; ---------------------------------------------------------------------------
000107F8                            
000107F8                            MarkObjGone:
000107F8 3028 0008                  		move.w	8(a0),d0
000107FC 0240 FF80                  		andi.w	#$FF80,d0
00010800 3238 F700                  		move.w	($FFFFF700).w,d1
00010804 0441 0080                  		subi.w	#$80,d1
00010808 0241 FF80                  		andi.w	#$FF80,d1
0001080C 9041                       		sub.w	d1,d0
0001080E 0C40 0280                  		cmpi.w	#$280,d0
00010812 6200 0000                  		bhi.w	Mark_ChkGone
00010816 6000 DF38                  		bra.w	DisplaySprite
0001081A                            ; ===========================================================================
0001081A                            
0001081A                            Mark_ChkGone:
0001081A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001081E 7000                       		moveq	#0,d0
00010820 1028 0023                  		move.b	$23(a0),d0
00010824 6700                       		beq.s	Mark_Delete
00010826 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001082C                            
0001082C                            Mark_Delete:
0001082C 6000 DF5E                  		bra.w	DeleteObject
00010830                            
00010830                            ; ===========================================================================
00010830 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00010832 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00010834                            ; ===========================================================================
00010834                            
00010834                            Obj40_Move:				; XREF: Obj40_Index2
00010834 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010838 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0001083A 5428 0025                  		addq.b	#2,$25(a0)
0001083E 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00010844 117C 0001 001C             		move.b	#1,$1C(a0)
0001084A 0868 0000 0022             		bchg	#0,$22(a0)
00010850 6600                       		bne.s	locret_F70A
00010852 4468 0010                  		neg.w	$10(a0)		; change direction
00010856                            
00010856                            locret_F70A:
00010856 4E75                       		rts	
00010858                            ; ===========================================================================
00010858                            
00010858                            Obj40_FixToFloor:			; XREF: Obj40_Index2
00010858 6100 DED0                  		bsr.w	SpeedToPos
0001085C 4EB9 0000 0000             		jsr	ObjHitFloor
00010862 0C41 FFF8                  		cmpi.w	#-8,d1
00010866 6D00                       		blt.s	Obj40_Pause
00010868 0C41 000C                  		cmpi.w	#$C,d1
0001086C 6C00                       		bge.s	Obj40_Pause
0001086E D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010872 5328 0033                  		subq.b	#1,$33(a0)
00010876 6A00                       		bpl.s	locret_F756
00010878 117C 000F 0033             		move.b	#$F,$33(a0)
0001087E 6100 E356                  		bsr.w	SingleObjLoad
00010882 6600                       		bne.s	locret_F756
00010884 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00010888 3368 0008 0008             		move.w	8(a0),8(a1)
0001088E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010894 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001089A 137C 0002 001C             		move.b	#2,$1C(a1)
000108A0                            
000108A0                            locret_F756:
000108A0 4E75                       		rts	
000108A2                            ; ===========================================================================
000108A2                            
000108A2                            Obj40_Pause:				; XREF: Obj40_FixToFloor
000108A2 5528 0025                  		subq.b	#2,$25(a0)
000108A6 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000108AC 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
000108B2 117C 0000 001C             		move.b	#0,$1C(a0)
000108B8 4E75                       		rts	
000108BA                            ; ===========================================================================
000108BA                            
000108BA                            Obj40_Animate:				; XREF: Obj40_Index
000108BA 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000108C0 6100 AEDC                  		bsr.w	AnimateSprite
000108C4 6000 DE8A                  		bra.w	DisplaySprite
000108C8                            ; ===========================================================================
000108C8                            
000108C8                            Obj40_Delete:				; XREF: Obj40_Index
000108C8 6000 DEC2                  		bra.w	DeleteObject
000108CC                            ; ===========================================================================
000108CC                            Ani_obj40:
000108CC                            	include "_anim\obj40.asm"
000108CC                            ; ---------------------------------------------------------------------------
000108CC                            ; Animation script - Motobug enemy
000108CC                            ; ---------------------------------------------------------------------------
000108CC 0000                       		dc.w byte_F788-Ani_obj40
000108CE 0000                       		dc.w byte_F78C-Ani_obj40
000108D0 0000                       		dc.w byte_F792-Ani_obj40
000108D2 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
000108D6 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
000108DC 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
000108EA                            		even
000108EA                            		even
000108EA                            
000108EA                            ; ---------------------------------------------------------------------------
000108EA                            ; Sprite mappings - Moto Bug enemy (GHZ)
000108EA                            ; ---------------------------------------------------------------------------
000108EA                            Map_obj40:
000108EA                            	include "_maps\obj40.asm"
000108EA                            Map_cedc:
000108EA 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
000108EC 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
000108EE 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
000108F0 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
000108F2 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
000108F4 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
000108F6 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
000108F8 04                         Map_cedc_E: 	dc.b $4
000108F9 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
000108FE 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
00010903 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00010908 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0001090D 04                         Map_cedc_23: 	dc.b $4
0001090E F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
00010913 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
00010918 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0001091D 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
00010922 05                         Map_cedc_38: 	dc.b $5
00010923 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
00010928 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0001092D F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00010932 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
00010937 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0001093C 01                         Map_cedc_52: 	dc.b $1
0001093D FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
00010942 01                         Map_cedc_58: 	dc.b $1
00010943 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
00010948 01                         Map_cedc_5E: 	dc.b $1
00010949 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0001094E 00                         Map_cedc_64: 	dc.b $0
00010950 00                         	even
00010950 00                         	even
00010950                            
00010950                            ; ===========================================================================
00010950                            ; ---------------------------------------------------------------------------
00010950                            ; Object 4F - blank
00010950                            ; ---------------------------------------------------------------------------
00010950                            
00010950                            Obj4F:					; XREF: Obj_Index
00010950 4E75                       		rts	
00010952                            
00010952                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010952                            
00010952                            
00010952                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00010952 3038 FE04                  		move.w	($FFFFFE04).w,d0
00010956 D047                       		add.w	d7,d0
00010958 0240 0003                  		andi.w	#3,d0
0001095C 6600                       		bne.s	loc_F836
0001095E 7600                       		moveq	#0,d3
00010960 1628 0019                  		move.b	$19(a0),d3
00010964 4A68 0010                  		tst.w	$10(a0)
00010968 6B00                       		bmi.s	loc_F82C
0001096A 6100 0000                  		bsr.w	ObjHitWallRight
0001096E 4A41                       		tst.w	d1
00010970 6A00                       		bpl.s	loc_F836
00010972                            
00010972                            loc_F828:
00010972 7001                       		moveq	#1,d0
00010974 4E75                       		rts	
00010976                            ; ===========================================================================
00010976                            
00010976                            loc_F82C:
00010976 4643                       		not.w	d3
00010978 6100 0000                  		bsr.w	ObjHitWallLeft
0001097C 4A41                       		tst.w	d1
0001097E 6BF2                       		bmi.s	loc_F828
00010980                            
00010980                            loc_F836:
00010980 7000                       		moveq	#0,d0
00010982 4E75                       		rts	
00010984                            ; End of function Obj50_ChkWall
00010984                            
00010984                            ; ===========================================================================
00010984                            ; ---------------------------------------------------------------------------
00010984                            ; Object 50 - Yadrin enemy (SYZ)
00010984                            ; ---------------------------------------------------------------------------
00010984                            
00010984                            Obj50:					; XREF: Obj_Index
00010984 7000                       		moveq	#0,d0
00010986 1028 0024                  		move.b	$24(a0),d0
0001098A 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0001098E 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010992                            ; ===========================================================================
00010992 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00010994 0000                       		dc.w Obj50_Action-Obj50_Index
00010996                            ; ===========================================================================
00010996                            
00010996                            Obj50_Main:				; XREF: Obj50_Index
00010996 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0001099E 317C 247B 0002             		move.w	#$247B,2(a0)
000109A4 117C 0004 0001             		move.b	#4,1(a0)
000109AA 117C 0004 0018             		move.b	#4,$18(a0)
000109B0 117C 0014 0019             		move.b	#$14,$19(a0)
000109B6 117C 0011 0016             		move.b	#$11,$16(a0)
000109BC 117C 0008 0017             		move.b	#8,$17(a0)
000109C2 117C 00CC 0020             		move.b	#$CC,$20(a0)
000109C8 6100 DCEE                  		bsr.w	ObjectFall
000109CC 6100 0000                  		bsr.w	ObjHitFloor
000109D0 4A41                       		tst.w	d1
000109D2 6A00                       		bpl.s	locret_F89E
000109D4 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000109D8 317C 0000 0012             		move.w	#0,$12(a0)
000109DE 5428 0024                  		addq.b	#2,$24(a0)
000109E2 0868 0000 0022             		bchg	#0,$22(a0)
000109E8                            
000109E8                            locret_F89E:
000109E8 4E75                       		rts	
000109EA                            ; ===========================================================================
000109EA                            
000109EA                            Obj50_Action:				; XREF: Obj50_Index
000109EA 7000                       		moveq	#0,d0
000109EC 1028 0025                  		move.b	$25(a0),d0
000109F0 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000109F4 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000109F8 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000109FE 6100 AD9E                  		bsr.w	AnimateSprite
00010A02 6000 FDF4                  		bra.w	MarkObjGone
00010A06                            ; ===========================================================================
00010A06 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00010A08 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00010A0A                            ; ===========================================================================
00010A0A                            
00010A0A                            Obj50_Move:				; XREF: Obj50_Index2
00010A0A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010A0E 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010A10 5428 0025                  		addq.b	#2,$25(a0)
00010A14 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00010A1A 117C 0001 001C             		move.b	#1,$1C(a0)
00010A20 0868 0000 0022             		bchg	#0,$22(a0)
00010A26 6600                       		bne.s	locret_F8E2
00010A28 4468 0010                  		neg.w	$10(a0)		; change direction
00010A2C                            
00010A2C                            locret_F8E2:
00010A2C 4E75                       		rts	
00010A2E                            ; ===========================================================================
00010A2E                            
00010A2E                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010A2E 6100 DCFA                  		bsr.w	SpeedToPos
00010A32 6100 0000                  		bsr.w	ObjHitFloor
00010A36 0C41 FFF8                  		cmpi.w	#-8,d1
00010A3A 6D00                       		blt.s	Obj50_Pause
00010A3C 0C41 000C                  		cmpi.w	#$C,d1
00010A40 6C00                       		bge.s	Obj50_Pause
00010A42 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00010A46 6100 FF0A                  		bsr.w	Obj50_ChkWall
00010A4A 6600                       		bne.s	Obj50_Pause
00010A4C 4E75                       		rts	
00010A4E                            ; ===========================================================================
00010A4E                            
00010A4E                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010A4E 5528 0025                  		subq.b	#2,$25(a0)
00010A52 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010A58 317C 0000 0010             		move.w	#0,$10(a0)
00010A5E 117C 0000 001C             		move.b	#0,$1C(a0)
00010A64 4E75                       		rts	
00010A66                            ; ===========================================================================
00010A66                            Ani_obj50:
00010A66                            	include "_anim\obj50.asm"
00010A66                            ; ---------------------------------------------------------------------------
00010A66                            ; Animation script - Yadrin enemy
00010A66                            ; ---------------------------------------------------------------------------
00010A66 0000                       		dc.w byte_F920-Ani_obj50
00010A68 0000                       		dc.w byte_F924-Ani_obj50
00010A6A 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010A6E 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010A78                            		even
00010A78                            		even
00010A78                            
00010A78                            ; ---------------------------------------------------------------------------
00010A78                            ; Sprite mappings - Yadrin enemy (SYZ)
00010A78                            ; ---------------------------------------------------------------------------
00010A78                            Map_obj50:
00010A78                            	include "_maps\obj50.asm"
00010A78                            Map_ff24:
00010A78 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
00010A7A 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
00010A7C 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
00010A7E 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
00010A80 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
00010A82 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
00010A84 05                         Map_ff24_C: 	dc.b $5
00010A85 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010A8A FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010A8F EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010A94 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010A99 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010A9E 05                         Map_ff24_26: 	dc.b $5
00010A9F F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010AA4 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010AA9 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010AAE F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010AB3 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010AB8 05                         Map_ff24_40: 	dc.b $5
00010AB9 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010ABE 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010AC3 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010AC8 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010ACD 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010AD2 05                         Map_ff24_5A: 	dc.b $5
00010AD3 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010AD8 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010ADD EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010AE2 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010AE7 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010AEC 05                         Map_ff24_74: 	dc.b $5
00010AED F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010AF2 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010AF7 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010AFC F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010B01 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010B06 05                         Map_ff24_8E: 	dc.b $5
00010B07 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010B0C 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010B11 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010B16 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010B1B 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010B20                            	even
00010B20                            	even
00010B20                            
00010B20                            ; ---------------------------------------------------------------------------
00010B20                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010B20                            ;
00010B20                            ; variables:
00010B20                            ; d1 = width
00010B20                            ; d2 = height /	2 (when	jumping)
00010B20                            ; d3 = height /	2 (when	walking)
00010B20                            ; d4 = x-axis position
00010B20                            ; ---------------------------------------------------------------------------
00010B20                            
00010B20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010B20                            
00010B20                            
00010B20                            SolidObject:
00010B20 4A28 0025                  		tst.b	$25(a0)
00010B24 6700 0000                  		beq.w	loc_FAC8
00010B28 3401                       		move.w	d1,d2
00010B2A D442                       		add.w	d2,d2
00010B2C 43F8 D000                  		lea	($FFFFD000).w,a1
00010B30 0829 0001 0022             		btst	#1,$22(a1)
00010B36 6600                       		bne.s	loc_F9FE
00010B38 3029 0008                  		move.w	8(a1),d0
00010B3C 9068 0008                  		sub.w	8(a0),d0
00010B40 D041                       		add.w	d1,d0
00010B42 6B00                       		bmi.s	loc_F9FE
00010B44 B042                       		cmp.w	d2,d0
00010B46 6500                       		bcs.s	loc_FA12
00010B48                            
00010B48                            loc_F9FE:
00010B48 08A9 0003 0022             		bclr	#3,$22(a1)
00010B4E 08A8 0003 0022             		bclr	#3,$22(a0)
00010B54 4228 0025                  		clr.b	$25(a0)
00010B58 7800                       		moveq	#0,d4
00010B5A 4E75                       		rts	
00010B5C                            ; ===========================================================================
00010B5C                            
00010B5C                            loc_FA12:
00010B5C 3404                       		move.w	d4,d2
00010B5E 4EB9 0000 8A2C             		jsr	MvSonicOnPtfm 
00010B64 7800                       		moveq	#0,d4
00010B66 4E75                       		rts	
00010B68                            ; ===========================================================================
00010B68                            
00010B68                            SolidObject71:				; XREF: Obj71_Solid
00010B68 4A28 0025                  		tst.b	$25(a0)
00010B6C 6700 0000                  		beq.w	loc_FAD0
00010B70 3401                       		move.w	d1,d2
00010B72 D442                       		add.w	d2,d2
00010B74 43F8 D000                  		lea	($FFFFD000).w,a1
00010B78 0829 0001 0022             		btst	#1,$22(a1)
00010B7E 6600                       		bne.s	loc_FA44
00010B80 3029 0008                  		move.w	8(a1),d0
00010B84 9068 0008                  		sub.w	8(a0),d0
00010B88 D041                       		add.w	d1,d0
00010B8A 6B00                       		bmi.s	loc_FA44
00010B8C B042                       		cmp.w	d2,d0
00010B8E 6500                       		bcs.s	loc_FA58
00010B90                            
00010B90                            loc_FA44:
00010B90 08A9 0003 0022             		bclr	#3,$22(a1)
00010B96 08A8 0003 0022             		bclr	#3,$22(a0)
00010B9C 4228 0025                  		clr.b	$25(a0)
00010BA0 7800                       		moveq	#0,d4
00010BA2 4E75                       		rts	
00010BA4                            ; ===========================================================================
00010BA4                            
00010BA4                            loc_FA58:
00010BA4 3404                       		move.w	d4,d2
00010BA6                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
00010BA6 7800                       		moveq	#0,d4
00010BA8 4E75                       		rts	
00010BAA                            ; ===========================================================================
00010BAA                            
00010BAA                            SolidObject2F:				; XREF: Obj2F_Solid
00010BAA 43F8 D000                  		lea	($FFFFD000).w,a1
00010BAE 4A28 0001                  		tst.b	1(a0)
00010BB2 6A00 0000                  		bpl.w	loc_FB92
00010BB6 3029 0008                  		move.w	8(a1),d0
00010BBA 9068 0008                  		sub.w	8(a0),d0
00010BBE D041                       		add.w	d1,d0
00010BC0 6B00 0000                  		bmi.w	loc_FB92
00010BC4 3601                       		move.w	d1,d3
00010BC6 D643                       		add.w	d3,d3
00010BC8 B043                       		cmp.w	d3,d0
00010BCA 6200 0000                  		bhi.w	loc_FB92
00010BCE 3A00                       		move.w	d0,d5
00010BD0 0828 0000 0001             		btst	#0,1(a0)
00010BD6 6700                       		beq.s	loc_FA94
00010BD8 4645                       		not.w	d5
00010BDA DA43                       		add.w	d3,d5
00010BDC                            
00010BDC                            loc_FA94:
00010BDC E24D                       		lsr.w	#1,d5
00010BDE 7600                       		moveq	#0,d3
00010BE0 1632 5000                  		move.b	(a2,d5.w),d3
00010BE4 9612                       		sub.b	(a2),d3
00010BE6 3A28 000C                  		move.w	$C(a0),d5
00010BEA 9A43                       		sub.w	d3,d5
00010BEC 1629 0016                  		move.b	$16(a1),d3
00010BF0 4883                       		ext.w	d3
00010BF2 D443                       		add.w	d3,d2
00010BF4 3629 000C                  		move.w	$C(a1),d3
00010BF8 9645                       		sub.w	d5,d3
00010BFA 5843                       		addq.w	#4,d3
00010BFC D642                       		add.w	d2,d3
00010BFE 6B00 0000                  		bmi.w	loc_FB92
00010C02 3802                       		move.w	d2,d4
00010C04 D844                       		add.w	d4,d4
00010C06 B644                       		cmp.w	d4,d3
00010C08 6400 0000                  		bcc.w	loc_FB92
00010C0C 6000 0000                  		bra.w	loc_FB0E
00010C10                            ; ===========================================================================
00010C10                            
00010C10                            loc_FAC8:
00010C10 4A28 0001                  		tst.b	1(a0)
00010C14 6A00 0000                  		bpl.w	loc_FB92
00010C18                            
00010C18                            loc_FAD0:
00010C18 43F8 D000                  		lea	($FFFFD000).w,a1
00010C1C 3029 0008                  		move.w	8(a1),d0
00010C20 9068 0008                  		sub.w	8(a0),d0
00010C24 D041                       		add.w	d1,d0
00010C26 6B00 0000                  		bmi.w	loc_FB92
00010C2A 3601                       		move.w	d1,d3
00010C2C D643                       		add.w	d3,d3
00010C2E B043                       		cmp.w	d3,d0
00010C30 6200 0000                  		bhi.w	loc_FB92
00010C34 1629 0016                  		move.b	$16(a1),d3
00010C38 4883                       		ext.w	d3
00010C3A D443                       		add.w	d3,d2
00010C3C 3629 000C                  		move.w	$C(a1),d3
00010C40 9668 000C                  		sub.w	$C(a0),d3
00010C44 5843                       		addq.w	#4,d3
00010C46 D642                       		add.w	d2,d3
00010C48 6B00 0000                  		bmi.w	loc_FB92
00010C4C 3802                       		move.w	d2,d4
00010C4E D844                       		add.w	d4,d4
00010C50 B644                       		cmp.w	d4,d3
00010C52 6400 0000                  		bcc.w	loc_FB92
00010C56                            
00010C56                            loc_FB0E:
00010C56 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010C5A 6B00 0000                  		bmi.w	loc_FB92
00010C5E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010C64 6400 0000                  		bcc.w	loc_FB92
00010C68 4A78 FE08                  		tst.w	($FFFFFE08).w
00010C6C 6600 0000                  		bne.w	loc_FBAC
00010C70 3A00                       		move.w	d0,d5
00010C72 B240                       		cmp.w	d0,d1
00010C74 6400                       		bcc.s	loc_FB36
00010C76 D241                       		add.w	d1,d1
00010C78 9041                       		sub.w	d1,d0
00010C7A 3A00                       		move.w	d0,d5
00010C7C 4445                       		neg.w	d5
00010C7E                            
00010C7E                            loc_FB36:
00010C7E 3203                       		move.w	d3,d1
00010C80 B443                       		cmp.w	d3,d2
00010C82 6400                       		bcc.s	loc_FB44
00010C84 5943                       		subq.w	#4,d3
00010C86 9644                       		sub.w	d4,d3
00010C88 3203                       		move.w	d3,d1
00010C8A 4441                       		neg.w	d1
00010C8C                            
00010C8C                            loc_FB44:
00010C8C BA41                       		cmp.w	d1,d5
00010C8E 6200 0000                  		bhi.w	loc_FBB0
00010C92 0C41 0004                  		cmpi.w	#4,d1
00010C96 6300                       		bls.s	loc_FB8C
00010C98 4A40                       		tst.w	d0
00010C9A 6700                       		beq.s	loc_FB70
00010C9C 6B00                       		bmi.s	loc_FB5E
00010C9E 4A69 0010                  		tst.w	$10(a1)
00010CA2 6B00                       		bmi.s	loc_FB70
00010CA4 6000                       		bra.s	loc_FB64
00010CA6                            ; ===========================================================================
00010CA6                            
00010CA6                            loc_FB5E:
00010CA6 4A69 0010                  		tst.w	$10(a1)
00010CAA 6A00                       		bpl.s	loc_FB70
00010CAC                            
00010CAC                            loc_FB64:
00010CAC 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010CB2 337C 0000 0010             		move.w	#0,$10(a1)
00010CB8                            
00010CB8                            loc_FB70:
00010CB8 9169 0008                  		sub.w	d0,8(a1)
00010CBC 0829 0001 0022             		btst	#1,$22(a1)
00010CC2 6600                       		bne.s	loc_FB8C
00010CC4 08E9 0005 0022             		bset	#5,$22(a1)
00010CCA 08E8 0005 0022             		bset	#5,$22(a0)
00010CD0 7801                       		moveq	#1,d4
00010CD2 4E75                       		rts	
00010CD4                            ; ===========================================================================
00010CD4                            
00010CD4                            loc_FB8C:
00010CD4 6100                       		bsr.s	loc_FBA0
00010CD6 7801                       		moveq	#1,d4
00010CD8 4E75                       		rts	
00010CDA                            ; ===========================================================================
00010CDA                            
00010CDA                            loc_FB92:
00010CDA 0828 0005 0022             		btst	#5,$22(a0)
00010CE0 6700                       		beq.s	loc_FBAC
00010CE2 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010CE8                            
00010CE8                            loc_FBA0:
00010CE8 08A8 0005 0022             		bclr	#5,$22(a0)
00010CEE 08A9 0005 0022             		bclr	#5,$22(a1)
00010CF4                            
00010CF4                            loc_FBAC:
00010CF4 7800                       		moveq	#0,d4
00010CF6 4E75                       		rts	
00010CF8                            ; ===========================================================================
00010CF8                            
00010CF8                            loc_FBB0:
00010CF8 4A43                       		tst.w	d3
00010CFA 6B00                       		bmi.s	loc_FBBC
00010CFC 0C43 0010                  		cmpi.w	#$10,d3
00010D00 6500                       		bcs.s	loc_FBEE
00010D02 60D6                       		bra.s	loc_FB92
00010D04                            ; ===========================================================================
00010D04                            
00010D04                            loc_FBBC:
00010D04 4A69 0012                  		tst.w	$12(a1)
00010D08 6700                       		beq.s	loc_FBD6
00010D0A 6A00                       		bpl.s	loc_FBD2
00010D0C 4A43                       		tst.w	d3
00010D0E 6A00                       		bpl.s	loc_FBD2
00010D10 9769 000C                  		sub.w	d3,$C(a1)
00010D14 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010D1A                            
00010D1A                            loc_FBD2:
00010D1A 78FF                       		moveq	#-1,d4
00010D1C 4E75                       		rts	
00010D1E                            ; ===========================================================================
00010D1E                            
00010D1E                            loc_FBD6:
00010D1E 0829 0001 0022             		btst	#1,$22(a1)
00010D24 66F4                       		bne.s	loc_FBD2
00010D26 2F08                       		move.l	a0,-(sp)
00010D28 2049                       		movea.l	a1,a0
00010D2A 4EB9 0000 0000             		jsr	KillSonic
00010D30 205F                       		movea.l	(sp)+,a0
00010D32 78FF                       		moveq	#-1,d4
00010D34 4E75                       		rts	
00010D36                            ; ===========================================================================
00010D36                            
00010D36                            loc_FBEE:
00010D36 5943                       		subq.w	#4,d3
00010D38 7200                       		moveq	#0,d1
00010D3A 1228 0019                  		move.b	$19(a0),d1
00010D3E 3401                       		move.w	d1,d2
00010D40 D442                       		add.w	d2,d2
00010D42 D269 0008                  		add.w	8(a1),d1
00010D46 9268 0008                  		sub.w	8(a0),d1
00010D4A 6B00                       		bmi.s	loc_FC28
00010D4C B242                       		cmp.w	d2,d1
00010D4E 6400                       		bcc.s	loc_FC28
00010D50 4A69 0012                  		tst.w	$12(a1)
00010D54 6B00                       		bmi.s	loc_FC28
00010D56 9769 000C                  		sub.w	d3,$C(a1)
00010D5A 5369 000C                  		subq.w	#1,$C(a1)
00010D5E 6100                       		bsr.s	sub_FC2C
00010D60 117C 0002 0025             		move.b	#2,$25(a0)
00010D66 08E8 0003 0022             		bset	#3,$22(a0)
00010D6C 78FF                       		moveq	#-1,d4
00010D6E 4E75                       		rts	
00010D70                            ; ===========================================================================
00010D70                            
00010D70                            loc_FC28:
00010D70 7800                       		moveq	#0,d4
00010D72 4E75                       		rts	
00010D74                            ; End of function SolidObject
00010D74                            
00010D74                            
00010D74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010D74                            
00010D74                            
00010D74                            sub_FC2C:				; XREF: SolidObject
00010D74 0829 0003 0022             		btst	#3,$22(a1)
00010D7A 6700                       		beq.s	loc_FC4E
00010D7C 7000                       		moveq	#0,d0
00010D7E 1029 003D                  		move.b	$3D(a1),d0
00010D82 ED48                       		lsl.w	#6,d0
00010D84 0680 00FF D000             		addi.l	#$FFD000,d0
00010D8A 2440                       		movea.l	d0,a2
00010D8C 08AA 0003 0022             		bclr	#3,$22(a2)
00010D92 422A 0025                  		clr.b	$25(a2)
00010D96                            
00010D96                            loc_FC4E:
00010D96 3008                       		move.w	a0,d0
00010D98 0440 D000                  		subi.w	#-$3000,d0
00010D9C EC48                       		lsr.w	#6,d0
00010D9E 0240 007F                  		andi.w	#$7F,d0
00010DA2 1340 003D                  		move.b	d0,$3D(a1)
00010DA6 137C 0000 0026             		move.b	#0,$26(a1)
00010DAC 337C 0000 0012             		move.w	#0,$12(a1)
00010DB2 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010DB8 0829 0001 0022             		btst	#1,$22(a1)
00010DBE 6700                       		beq.s	loc_FC84
00010DC0 2F08                       		move.l	a0,-(sp)
00010DC2 2049                       		movea.l	a1,a0
00010DC4 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010DCA 205F                       		movea.l	(sp)+,a0
00010DCC                            
00010DCC                            loc_FC84:
00010DCC 08E9 0003 0022             		bset	#3,$22(a1)
00010DD2 08E8 0003 0022             		bset	#3,$22(a0)
00010DD8 4E75                       		rts	
00010DDA                            ; End of function sub_FC2C
00010DDA                            
00010DDA                            ; ===========================================================================
00010DDA                            ; ---------------------------------------------------------------------------
00010DDA                            ; Object 51 - smashable	green block (MZ)
00010DDA                            ; ---------------------------------------------------------------------------
00010DDA                            
00010DDA                            Obj51:					; XREF: Obj_Index
00010DDA 7000                       		moveq	#0,d0
00010DDC 1028 0024                  		move.b	$24(a0),d0
00010DE0 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010DE4 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010DE8 6000 FA0E                  		bra.w	MarkObjGone
00010DEC                            ; ===========================================================================
00010DEC 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010DEE 0000                       		dc.w Obj51_Solid-Obj51_Index
00010DF0 0000                       		dc.w Obj51_Display-Obj51_Index
00010DF2                            ; ===========================================================================
00010DF2                            
00010DF2                            Obj51_Main:				; XREF: Obj51_Index
00010DF2 5428 0024                  		addq.b	#2,$24(a0)
00010DF6 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010DFE 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010E04 117C 0004 0001             		move.b	#4,1(a0)
00010E0A 117C 0010 0019             		move.b	#$10,$19(a0)
00010E10 117C 0004 0018             		move.b	#4,$18(a0)
00010E16 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010E1C                            
00010E1C                            Obj51_Solid:				; XREF: Obj51_Index
00010E1C 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010E22 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010E28 323C 001B                  		move.w	#$1B,d1
00010E2C 343C 0010                  		move.w	#$10,d2
00010E30 363C 0011                  		move.w	#$11,d3
00010E34 3828 0008                  		move.w	8(a0),d4
00010E38 6100 FCE6                  		bsr.w	SolidObject
00010E3C 0828 0003 0022             		btst	#3,$22(a0)
00010E42 6600                       		bne.s	Obj51_Smash
00010E44                            
00010E44                            locret_FCFC:
00010E44 4E75                       		rts	
00010E46                            ; ===========================================================================
00010E46                            
00010E46                            Obj51_Smash:				; XREF: Obj51_Solid
00010E46 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010E4C 66F6                       		bne.s	locret_FCFC	; if not, branch
00010E4E 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010E54 08E9 0002 0022             		bset	#2,$22(a1)
00010E5A 137C 000E 0016             		move.b	#$E,$16(a1)
00010E60 137C 0007 0017             		move.b	#7,$17(a1)
00010E66 137C 0002 001C             		move.b	#2,$1C(a1)
00010E6C 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010E72 08E9 0001 0022             		bset	#1,$22(a1)
00010E78 08A9 0003 0022             		bclr	#3,$22(a1)
00010E7E 137C 0002 0024             		move.b	#2,$24(a1)
00010E84 08A8 0003 0022             		bclr	#3,$22(a0)
00010E8A 4228 0025                  		clr.b	$25(a0)
00010E8E 117C 0001 001A             		move.b	#1,$1A(a0)
00010E94 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010E9A 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010E9C 343C 0038                  		move.w	#$38,d2
00010EA0 6100 D456                  		bsr.w	SmashObject
00010EA4 6100 DD30                  		bsr.w	SingleObjLoad
00010EA8 6600                       		bne.s	Obj51_Display
00010EAA 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010EAE 3368 0008 0008             		move.w	8(a0),8(a1)
00010EB4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010EBA 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010EBE 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010EC2 0C42 0006                  		cmpi.w	#6,d2
00010EC6 6500                       		bcs.s	Obj51_Bonus
00010EC8 7406                       		moveq	#6,d2
00010ECA                            
00010ECA                            Obj51_Bonus:
00010ECA 7000                       		moveq	#0,d0
00010ECC 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010ED0 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010ED6 6500                       		bcs.s	loc_FD98	; if not, branch
00010ED8 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010EDC 740A                       		moveq	#10,d2
00010EDE                            
00010EDE                            loc_FD98:
00010EDE 4EB9 0000 0000             		jsr	AddPoints
00010EE4 E24A                       		lsr.w	#1,d2
00010EE6 1342 001A                  		move.b	d2,$1A(a1)
00010EEA                            
00010EEA                            Obj51_Display:				; XREF: Obj51_Index
00010EEA 6100 D83E                  		bsr.w	SpeedToPos
00010EEE 0668 0038 0012             		addi.w	#$38,$12(a0)
00010EF4 6100 D85A                  		bsr.w	DisplaySprite
00010EF8 4A28 0001                  		tst.b	1(a0)
00010EFC 6A00 D88E                  		bpl.w	DeleteObject
00010F00 4E75                       		rts	
00010F02                            ; ===========================================================================
00010F02 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010F06 FF00 FF00                  		dc.w $FF00, $FF00
00010F0A 0200 FE00                  		dc.w $200, $FE00
00010F0E 0100 FF00                  		dc.w $100, $FF00
00010F12                            
00010F12 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010F1A                            ; ---------------------------------------------------------------------------
00010F1A                            ; Sprite mappings - smashable green block (MZ)
00010F1A                            ; ---------------------------------------------------------------------------
00010F1A                            Map_obj51:
00010F1A                            	include "_maps\obj51.asm"
00010F1A                            ; ---------------------------------------------------------------------------
00010F1A                            ; Sprite mappings - smashable green block (MZ)
00010F1A                            ; ---------------------------------------------------------------------------
00010F1A 0000                       		dc.w byte_FDD8-Map_obj51
00010F1C 0000                       		dc.w byte_FDE3-Map_obj51
00010F1E 02                         byte_FDD8:	dc.b 2
00010F1F F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010F24 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010F29 04                         byte_FDE3:	dc.b 4
00010F2A F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010F2F 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010F34 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010F39 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010F3E                            		even
00010F3E                            		even
00010F3E                            
00010F3E                            ; ===========================================================================
00010F3E                            ; ---------------------------------------------------------------------------
00010F3E                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010F3E                            ; ---------------------------------------------------------------------------
00010F3E                            
00010F3E                            Obj52:					; XREF: Obj_Index
00010F3E 7000                       		moveq	#0,d0
00010F40 1028 0024                  		move.b	$24(a0),d0
00010F44 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010F48 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010F4C                            ; ===========================================================================
00010F4C 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010F4E 0000                       		dc.w Obj52_Platform-Obj52_Index
00010F50 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010F52                            
00010F52 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010F54 2001                       		dc.b $20, 1
00010F56 2002                       		dc.b $20, 2
00010F58 4003                       		dc.b $40, 3
00010F5A 3004                       		dc.b $30, 4
00010F5C                            ; ===========================================================================
00010F5C                            
00010F5C                            Obj52_Main:				; XREF: Obj52_Index
00010F5C 5428 0024                  		addq.b	#2,$24(a0)
00010F60 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010F68 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010F6E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010F74 6600                       		bne.s	loc_FE44
00010F76 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010F7E 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010F84 117C 0007 0016             		move.b	#7,$16(a0)
00010F8A                            
00010F8A                            loc_FE44:
00010F8A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010F90 6600                       		bne.s	loc_FE60
00010F92 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010F98 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010F9E 6700                       		beq.s	loc_FE60	; if yes, branch
00010FA0 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010FA6                            
00010FA6                            loc_FE60:
00010FA6 117C 0004 0001             		move.b	#4,1(a0)
00010FAC 7000                       		moveq	#0,d0
00010FAE 1028 0028                  		move.b	$28(a0),d0
00010FB2 E648                       		lsr.w	#3,d0
00010FB4 0240 001E                  		andi.w	#$1E,d0
00010FB8 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00010FBC 115A 0019                  		move.b	(a2)+,$19(a0)
00010FC0 115A 001A                  		move.b	(a2)+,$1A(a0)
00010FC4 117C 0004 0018             		move.b	#4,$18(a0)
00010FCA 3168 0008 0030             		move.w	8(a0),$30(a0)
00010FD0 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010FD6 0228 000F 0028             		andi.b	#$F,$28(a0)
00010FDC                            
00010FDC                            Obj52_Platform:				; XREF: Obj52_Index
00010FDC 6100 0000                  		bsr.w	Obj52_Move
00010FE0 7200                       		moveq	#0,d1
00010FE2 1228 0019                  		move.b	$19(a0),d1
00010FE6 4EB9 0000 835A             		jsr	(PlatformObject).l
00010FEC 6000                       		bra.s	Obj52_ChkDel
00010FEE                            ; ===========================================================================
00010FEE                            
00010FEE                            Obj52_StandOn:				; XREF: Obj52_Index
00010FEE 7200                       		moveq	#0,d1
00010FF0 1228 0019                  		move.b	$19(a0),d1
00010FF4 4EB9 0000 84CE             		jsr	(ExitPlatform).l
00010FFA 3F28 0008                  		move.w	8(a0),-(sp)
00010FFE 6100 0000                  		bsr.w	Obj52_Move
00011002 341F                       		move.w	(sp)+,d2
00011004 4EB9 0000 8A38             		jsr	(MvSonicOnPtfm2).l
0001100A                            
0001100A                            Obj52_ChkDel:				; XREF: Obj52_Platform
0001100A 3028 0030                  		move.w	$30(a0),d0
0001100E 0240 FF80                  		andi.w	#$FF80,d0
00011012 3238 F700                  		move.w	($FFFFF700).w,d1
00011016 0441 0080                  		subi.w	#$80,d1
0001101A 0241 FF80                  		andi.w	#$FF80,d1
0001101E 9041                       		sub.w	d1,d0
00011020 0C40 0280                  		cmpi.w	#$280,d0
00011024 6200 D766                  		bhi.w	DeleteObject
00011028 6000 D726                  		bra.w	DisplaySprite
0001102C                            ; ===========================================================================
0001102C                            
0001102C                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0001102C 7000                       		moveq	#0,d0
0001102E 1028 0028                  		move.b	$28(a0),d0
00011032 0240 000F                  		andi.w	#$F,d0
00011036 D040                       		add.w	d0,d0
00011038 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0001103C 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00011040                            ; ===========================================================================
00011040 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00011044 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00011048 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0001104C 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00011050 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00011054 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00011056                            ; ===========================================================================
00011056                            
00011056                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00011056 4E75                       		rts	
00011058                            ; ===========================================================================
00011058                            
00011058                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00011058 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001105C 323C 0060                  		move.w	#$60,d1
00011060 0828 0000 0022             		btst	#0,$22(a0)
00011066 6700                       		beq.s	loc_FF26
00011068 4440                       		neg.w	d0
0001106A D041                       		add.w	d1,d0
0001106C                            
0001106C                            loc_FF26:
0001106C 3228 0030                  		move.w	$30(a0),d1
00011070 9240                       		sub.w	d0,d1
00011072 3141 0008                  		move.w	d1,8(a0)
00011076 4E75                       		rts	
00011078                            ; ===========================================================================
00011078                            
00011078                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00011078 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0001107E 6600                       		bne.s	Obj52_02_Wait
00011080 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011084                            
00011084                            Obj52_02_Wait:
00011084 4E75                       		rts	
00011086                            ; ===========================================================================
00011086                            
00011086                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00011086 7600                       		moveq	#0,d3
00011088 1628 0019                  		move.b	$19(a0),d3
0001108C 6100 0000                  		bsr.w	ObjHitWallRight
00011090 4A41                       		tst.w	d1		; has the platform hit a wall?
00011092 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00011094 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00011098 3168 0008 0030             		move.w	8(a0),$30(a0)
0001109E 4E75                       		rts	
000110A0                            ; ===========================================================================
000110A0                            
000110A0                            Obj52_03_End:
000110A0 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000110A4 4E75                       		rts	
000110A6                            ; ===========================================================================
000110A6                            
000110A6                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000110A6 7600                       		moveq	#0,d3
000110A8 1628 0019                  		move.b	$19(a0),d3
000110AC 6100 0000                  		bsr.w	ObjHitWallRight
000110B0 4A41                       		tst.w	d1		; has the platform hit a wall?
000110B2 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000110B4 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000110B8 3168 0008 0030             		move.w	8(a0),$30(a0)
000110BE 4E75                       		rts	
000110C0                            ; ===========================================================================
000110C0                            
000110C0                            Obj52_05_End:
000110C0 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000110C4 4E75                       		rts	
000110C6                            ; ===========================================================================
000110C6                            
000110C6                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000110C6 6100 D662                  		bsr.w	SpeedToPos
000110CA 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000110D0 6100 0000                  		bsr.w	ObjHitFloor
000110D4 4A41                       		tst.w	d1		; has platform hit the floor?
000110D6 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000110DA D368 000C                  		add.w	d1,$C(a0)
000110DE 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000110E2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000110E6                            
000110E6                            locret_FFA0:
000110E6 4E75                       		rts	
000110E8                            ; ===========================================================================
000110E8                            
000110E8                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000110E8 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000110EC 6700                       		beq.s	Obj52_07_ChkDel
000110EE 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000110F2                            
000110F2                            Obj52_07_ChkDel:
000110F2 588F                       		addq.l	#4,sp
000110F4 3028 0030                  		move.w	$30(a0),d0
000110F8 0240 FF80                  		andi.w	#$FF80,d0
000110FC 3238 F700                  		move.w	($FFFFF700).w,d1
00011100 0441 0080                  		subi.w	#$80,d1
00011104 0241 FF80                  		andi.w	#$FF80,d1
00011108 9041                       		sub.w	d1,d0
0001110A 0C40 0280                  		cmpi.w	#$280,d0
0001110E 6200 D67C                  		bhi.w	DeleteObject
00011112 4E75                       		rts	
00011114                            ; ===========================================================================
00011114                            
00011114                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00011114 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011118 323C 0080                  		move.w	#$80,d1
0001111C 0828 0000 0022             		btst	#0,$22(a0)
00011122 6700                       		beq.s	loc_FFE2
00011124 4440                       		neg.w	d0
00011126 D041                       		add.w	d1,d0
00011128                            
00011128                            loc_FFE2:
00011128 3228 0032                  		move.w	$32(a0),d1
0001112C 9240                       		sub.w	d0,d1
0001112E 3141 000C                  		move.w	d1,$C(a0)
00011132 4E75                       		rts	
00011134                            ; ===========================================================================
00011134                            
00011134                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00011134 7600                       		moveq	#0,d3
00011136 1628 0019                  		move.b	$19(a0),d3
0001113A D643                       		add.w	d3,d3
0001113C 7208                       		moveq	#8,d1
0001113E 0828 0000 0022             		btst	#0,$22(a0)
00011144 6700                       		beq.s	loc_10004
00011146 4441                       		neg.w	d1
00011148 4443                       		neg.w	d3
0001114A                            
0001114A                            loc_10004:
0001114A 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
0001114E 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00011150 3028 0008                  		move.w	8(a0),d0
00011154 9068 0030                  		sub.w	$30(a0),d0
00011158 B043                       		cmp.w	d3,d0
0001115A 6700                       		beq.s	Obj52_0A_Wait
0001115C D368 0008                  		add.w	d1,8(a0)	; move platform
00011160 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00011166 4E75                       		rts	
00011168                            ; ===========================================================================
00011168                            
00011168                            Obj52_0A_Wait:
00011168 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0001116C 6600                       		bne.s	locret_1002E	; if time remains, branch
0001116E 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00011174                            
00011174                            locret_1002E:
00011174 4E75                       		rts	
00011176                            ; ===========================================================================
00011176                            
00011176                            Obj52_0A_Back:
00011176 3028 0008                  		move.w	8(a0),d0
0001117A 9068 0030                  		sub.w	$30(a0),d0
0001117E 6700                       		beq.s	Obj52_0A_Reset
00011180 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00011184 4E75                       		rts	
00011186                            ; ===========================================================================
00011186                            
00011186                            Obj52_0A_Reset:
00011186 4268 0036                  		clr.w	$36(a0)
0001118A 5328 0028                  		subq.b	#1,$28(a0)
0001118E 4E75                       		rts	
00011190                            ; ===========================================================================
00011190                            ; ---------------------------------------------------------------------------
00011190                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011190                            ; ---------------------------------------------------------------------------
00011190                            Map_obj52:
00011190                            	include "_maps\obj52mz.asm"
00011190                            ; ---------------------------------------------------------------------------
00011190                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011190                            ; ---------------------------------------------------------------------------
00011190 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00011194 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00011198 0000                       		dc.w byte_1008F-Map_obj52
0001119A 01                         byte_10054:	dc.b 1
0001119B F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000111A0 02                         byte_1005A:	dc.b 2
000111A1 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000111A6 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000111AB 04                         byte_10065:	dc.b 4
000111AC F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000111B1 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000111B6 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000111BB 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000111C0 04                         byte_1007A:	dc.b 4
000111C1 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000111C6 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000111CB F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000111D0 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000111D5 03                         byte_1008F:	dc.b 3
000111D6 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000111DB F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000111E0 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000111E6 00                         		even
000111E6 00                         		even
000111E6                            
000111E6                            ; ---------------------------------------------------------------------------
000111E6                            ; Sprite mappings - moving block (LZ)
000111E6                            ; ---------------------------------------------------------------------------
000111E6                            Map_obj52a:
000111E6                            	include "_maps\obj52lz.asm"
000111E6                            ; ---------------------------------------------------------------------------
000111E6                            ; Sprite mappings - moving block (LZ)
000111E6                            ; ---------------------------------------------------------------------------
000111E6 0000                       		dc.w byte_100A2-Map_obj52a
000111E8 01                         byte_100A2:	dc.b 1
000111E9 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000111EE                            		even
000111EE                            		even
000111EE                            
000111EE                            ; ===========================================================================
000111EE                            ; ---------------------------------------------------------------------------
000111EE                            ; Object 55 - Basaran enemy (MZ)
000111EE                            ; ---------------------------------------------------------------------------
000111EE                            
000111EE                            Obj55:					; XREF: Obj_Index
000111EE 7000                       		moveq	#0,d0
000111F0 1028 0024                  		move.b	$24(a0),d0
000111F4 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000111F8 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000111FC                            ; ===========================================================================
000111FC 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
000111FE 0000                       		dc.w Obj55_Action-Obj55_Index
00011200                            ; ===========================================================================
00011200                            
00011200                            Obj55_Main:				; XREF: Obj55_Index
00011200 5428 0024                  		addq.b	#2,$24(a0)
00011204 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
0001120C 317C 84B8 0002             		move.w	#$84B8,2(a0)
00011212 117C 0004 0001             		move.b	#4,1(a0)
00011218 117C 000C 0016             		move.b	#$C,$16(a0)
0001121E 117C 0002 0018             		move.b	#2,$18(a0)
00011224 117C 000B 0020             		move.b	#$B,$20(a0)
0001122A 117C 0010 0019             		move.b	#$10,$19(a0)
00011230                            
00011230                            Obj55_Action:				; XREF: Obj55_Index
00011230 7000                       		moveq	#0,d0
00011232 1028 0025                  		move.b	$25(a0),d0
00011236 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
0001123A 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
0001123E 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00011244 6100 A558                  		bsr.w	AnimateSprite
00011248 6000 F5AE                  		bra.w	MarkObjGone
0001124C                            ; ===========================================================================
0001124C 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
0001124E 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00011250 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00011252 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00011254                            ; ===========================================================================
00011254                            
00011254                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00011254 343C 0080                  		move.w	#$80,d2
00011258 6100 0000                  		bsr.w	Obj55_ChkSonic
0001125C 6400                       		bcc.s	Obj55_NoDrop
0001125E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011262 3140 0036                  		move.w	d0,$36(a0)
00011266 9068 000C                  		sub.w	$C(a0),d0
0001126A 6500                       		bcs.s	Obj55_NoDrop
0001126C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00011270 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00011272 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011276 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00011278 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001127C D007                       		add.b	d7,d0
0001127E 0200 0007                  		andi.b	#7,d0
00011282 6600                       		bne.s	Obj55_NoDrop
00011284 117C 0001 001C             		move.b	#1,$1C(a0)
0001128A 5428 0025                  		addq.b	#2,$25(a0)
0001128E                            
0001128E                            Obj55_NoDrop:
0001128E 4E75                       		rts	
00011290                            ; ===========================================================================
00011290                            
00011290                            Obj55_DropFly:				; XREF: Obj55_Index2
00011290 6100 D498                  		bsr.w	SpeedToPos
00011294 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
0001129A 343C 0080                  		move.w	#$80,d2
0001129E 6100 0000                  		bsr.w	Obj55_ChkSonic
000112A2 3028 0036                  		move.w	$36(a0),d0
000112A6 9068 000C                  		sub.w	$C(a0),d0
000112AA 6500                       		bcs.s	Obj55_ChkDel
000112AC 0C40 0010                  		cmpi.w	#$10,d0
000112B0 6400                       		bcc.s	locret_10180
000112B2 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000112B6 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000112BC 117C 0002 001C             		move.b	#2,$1C(a0)
000112C2 5428 0025                  		addq.b	#2,$25(a0)
000112C6                            
000112C6                            locret_10180:
000112C6 4E75                       		rts	
000112C8                            ; ===========================================================================
000112C8                            
000112C8                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000112C8 4A28 0001                  		tst.b	1(a0)
000112CC 6A00 D4BE                  		bpl.w	DeleteObject
000112D0 4E75                       		rts	
000112D2                            ; ===========================================================================
000112D2                            
000112D2                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000112D2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000112D6 0200 000F                  		andi.b	#$F,d0
000112DA 6600                       		bne.s	loc_101A0
000112DC 303C 00C0                  		move.w	#$C0,d0
000112E0 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play flapping sound
000112E6                            
000112E6                            loc_101A0:
000112E6 6100 D442                  		bsr.w	SpeedToPos
000112EA 3038 D008                  		move.w	($FFFFD008).w,d0
000112EE 9068 0008                  		sub.w	8(a0),d0
000112F2 6400                       		bcc.s	loc_101B0
000112F4 4440                       		neg.w	d0
000112F6                            
000112F6                            loc_101B0:
000112F6 0C40 0080                  		cmpi.w	#$80,d0
000112FA 6500                       		bcs.s	locret_101C6
000112FC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011300 D007                       		add.b	d7,d0
00011302 0200 0007                  		andi.b	#7,d0
00011306 6600                       		bne.s	locret_101C6
00011308 5428 0025                  		addq.b	#2,$25(a0)
0001130C                            
0001130C                            locret_101C6:
0001130C 4E75                       		rts	
0001130E                            ; ===========================================================================
0001130E                            
0001130E                            Obj55_FlyUp:				; XREF: Obj55_Index2
0001130E 6100 D41A                  		bsr.w	SpeedToPos
00011312 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00011318 6100 0000                  		bsr.w	ObjHitCeiling
0001131C 4A41                       		tst.w	d1		; has basaran hit the ceiling?
0001131E 6A00                       		bpl.s	locret_101F4	; if not, branch
00011320 9368 000C                  		sub.w	d1,$C(a0)
00011324 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
0001132A 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
0001132E 4268 0012                  		clr.w	$12(a0)
00011332 4228 001C                  		clr.b	$1C(a0)
00011336 4228 0025                  		clr.b	$25(a0)
0001133A                            
0001133A                            locret_101F4:
0001133A 4E75                       		rts	
0001133C                            ; ===========================================================================
0001133C                            
0001133C                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
0001133C 323C 0100                  		move.w	#$100,d1
00011340 08E8 0000 0022             		bset	#0,$22(a0)
00011346 3038 D008                  		move.w	($FFFFD008).w,d0
0001134A 9068 0008                  		sub.w	8(a0),d0
0001134E 6400                       		bcc.s	loc_10214
00011350 4440                       		neg.w	d0
00011352 4441                       		neg.w	d1
00011354 08A8 0000 0022             		bclr	#0,$22(a0)
0001135A                            
0001135A                            loc_10214:
0001135A B042                       		cmp.w	d2,d0
0001135C 4E75                       		rts	
0001135E                            ; ===========================================================================
0001135E 6100 D3CA                  		bsr.w	SpeedToPos
00011362 6100 D3EC                  		bsr.w	DisplaySprite
00011366 4A28 0001                  		tst.b	1(a0)
0001136A 6A00 D420                  		bpl.w	DeleteObject
0001136E 4E75                       		rts	
00011370                            ; ===========================================================================
00011370                            Ani_obj55:
00011370                            	include "_anim\obj55.asm"
00011370                            ; ---------------------------------------------------------------------------
00011370                            ; Animation script - Basaran enemy
00011370                            ; ---------------------------------------------------------------------------
00011370 0000                       		dc.w byte_10230-Ani_obj55
00011372 0000                       		dc.w byte_10234-Ani_obj55
00011374 0000                       		dc.w byte_10238-Ani_obj55
00011376 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
0001137A 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
0001137E 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00011384                            		even
00011384                            		even
00011384                            
00011384                            ; ---------------------------------------------------------------------------
00011384                            ; Sprite mappings - Basaran enemy (MZ)
00011384                            ; ---------------------------------------------------------------------------
00011384                            Map_obj55:
00011384                            	include "_maps\obj55.asm"
00011384                            ; ---------------------------------------------------------------------------
00011384                            ; Sprite mappings - Basaran enemy (MZ)
00011384                            ; ---------------------------------------------------------------------------
00011384 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00011388 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
0001138C 01                         byte_10246:	dc.b 1
0001138D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011392 03                         byte_1024C:	dc.b 3
00011393 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00011398 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
0001139D 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000113A2 04                         byte_1025C:	dc.b 4
000113A3 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000113A8 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000113AD 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000113B2 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000113B7 04                         byte_10271:	dc.b 4
000113B8 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000113BD 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000113C2 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000113C7 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000113CC                            		even
000113CC                            		even
000113CC                            
000113CC                            ; ===========================================================================
000113CC                            ; ---------------------------------------------------------------------------
000113CC                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000113CC                            ; ---------------------------------------------------------------------------
000113CC                            
000113CC                            Obj56:					; XREF: Obj_Index
000113CC 7000                       		moveq	#0,d0
000113CE 1028 0024                  		move.b	$24(a0),d0
000113D2 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
000113D6 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
000113DA                            ; ===========================================================================
000113DA 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
000113DC 0000                       		dc.w Obj56_Action-Obj56_Index
000113DE                            
000113DE 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
000113E0 2020                       		dc.b  $20, $20
000113E2 1020                       		dc.b  $10, $20
000113E4 201A                       		dc.b  $20, $1A
000113E6 1027                       		dc.b  $10, $27
000113E8 1010                       		dc.b  $10, $10
000113EA 0820                       		dc.b	8, $20
000113EC 4010                       		dc.b  $40, $10
000113EE                            ; ===========================================================================
000113EE                            
000113EE                            Obj56_Main:				; XREF: Obj56_Index
000113EE 5428 0024                  		addq.b	#2,$24(a0)
000113F2 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
000113FA 317C 4000 0002             		move.w	#$4000,2(a0)
00011400 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011406 6600                       		bne.s	loc_102C8
00011408 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
0001140E                            
0001140E                            loc_102C8:
0001140E 117C 0004 0001             		move.b	#4,1(a0)
00011414 117C 0003 0018             		move.b	#3,$18(a0)
0001141A 7000                       		moveq	#0,d0
0001141C 1028 0028                  		move.b	$28(a0),d0
00011420 E648                       		lsr.w	#3,d0
00011422 0240 000E                  		andi.w	#$E,d0
00011426 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
0001142A 115A 0019                  		move.b	(a2)+,$19(a0)
0001142E 1152 0016                  		move.b	(a2),$16(a0)
00011432 E248                       		lsr.w	#1,d0
00011434 1140 001A                  		move.b	d0,$1A(a0)
00011438 3168 0008 0034             		move.w	8(a0),$34(a0)
0001143E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011444 7000                       		moveq	#0,d0
00011446 1012                       		move.b	(a2),d0
00011448 D040                       		add.w	d0,d0
0001144A 3140 003A                  		move.w	d0,$3A(a0)
0001144E 7000                       		moveq	#0,d0
00011450 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011456 6700                       		beq.s	loc_10332
00011458 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
0001145C 0240 000F                  		andi.w	#$F,d0
00011460 5140                       		subq.w	#8,d0
00011462 6500                       		bcs.s	loc_10332
00011464 E548                       		lsl.w	#2,d0
00011466 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
0001146A 45F2 0000                  		lea	(a2,d0.w),a2
0001146E 4A52                       		tst.w	(a2)
00011470 6A00                       		bpl.s	loc_10332
00011472 0868 0000 0022             		bchg	#0,$22(a0)
00011478                            
00011478                            loc_10332:
00011478 1028 0028                  		move.b	$28(a0),d0
0001147C 6A00                       		bpl.s	Obj56_Action
0001147E 0200 000F                  		andi.b	#$F,d0
00011482 1140 003C                  		move.b	d0,$3C(a0)
00011486 117C 0005 0028             		move.b	#5,$28(a0)
0001148C 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00011492 6600                       		bne.s	Obj56_ChkGone
00011494 117C 000C 0028             		move.b	#$C,$28(a0)
0001149A 317C 0080 003A             		move.w	#$80,$3A(a0)
000114A0                            
000114A0                            Obj56_ChkGone:
000114A0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000114A4 7000                       		moveq	#0,d0
000114A6 1028 0023                  		move.b	$23(a0),d0
000114AA 6700                       		beq.s	Obj56_Action
000114AC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000114B2 0832 0000 0002             		btst	#0,2(a2,d0.w)
000114B8 6700                       		beq.s	Obj56_Action
000114BA 5228 0028                  		addq.b	#1,$28(a0)
000114BE 4268 003A                  		clr.w	$3A(a0)
000114C2                            
000114C2                            Obj56_Action:				; XREF: Obj56_Index
000114C2 3F28 0008                  		move.w	8(a0),-(sp)
000114C6 7000                       		moveq	#0,d0
000114C8 1028 0028                  		move.b	$28(a0),d0	; get object type
000114CC 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000114D0 D040                       		add.w	d0,d0
000114D2 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
000114D6 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
000114DA 381F                       		move.w	(sp)+,d4
000114DC 4A28 0001                  		tst.b	1(a0)
000114E0 6A00                       		bpl.s	Obj56_ChkDel
000114E2 7200                       		moveq	#0,d1
000114E4 1228 0019                  		move.b	$19(a0),d1
000114E8 0641 000B                  		addi.w	#$B,d1
000114EC 7400                       		moveq	#0,d2
000114EE 1428 0016                  		move.b	$16(a0),d2
000114F2 3602                       		move.w	d2,d3
000114F4 5243                       		addq.w	#1,d3
000114F6 6100 F628                  		bsr.w	SolidObject
000114FA                            
000114FA                            Obj56_ChkDel:
000114FA 3028 0034                  		move.w	$34(a0),d0
000114FE 0240 FF80                  		andi.w	#$FF80,d0
00011502 3238 F700                  		move.w	($FFFFF700).w,d1
00011506 0441 0080                  		subi.w	#$80,d1
0001150A 0241 FF80                  		andi.w	#$FF80,d1
0001150E 9041                       		sub.w	d1,d0
00011510 0C40 0280                  		cmpi.w	#$280,d0
00011514 6200 D276                  		bhi.w	DeleteObject
00011518 6000 D236                  		bra.w	DisplaySprite
0001151C                            ; ===========================================================================
0001151C 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011520 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00011524 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00011528 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
0001152C 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011530 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00011534 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00011538                            ; ===========================================================================
00011538                            
00011538                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00011538 4E75                       		rts	
0001153A                            ; ===========================================================================
0001153A                            
0001153A                            Obj56_Type01:				; XREF: Obj56_TypeIndex
0001153A 323C 0040                  		move.w	#$40,d1
0001153E 7000                       		moveq	#0,d0
00011540 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011544 6000                       		bra.s	Obj56_Move_LR
00011546                            ; ===========================================================================
00011546                            
00011546                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00011546 323C 0080                  		move.w	#$80,d1
0001154A 7000                       		moveq	#0,d0
0001154C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011550                            
00011550                            Obj56_Move_LR:
00011550 0828 0000 0022             		btst	#0,$22(a0)
00011556 6700                       		beq.s	loc_10416
00011558 4440                       		neg.w	d0
0001155A D041                       		add.w	d1,d0
0001155C                            
0001155C                            loc_10416:
0001155C 3228 0034                  		move.w	$34(a0),d1
00011560 9240                       		sub.w	d0,d1
00011562 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011566 4E75                       		rts	
00011568                            ; ===========================================================================
00011568                            
00011568                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00011568 323C 0040                  		move.w	#$40,d1
0001156C 7000                       		moveq	#0,d0
0001156E 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011572 6000                       		bra.s	Obj56_Move_UD
00011574                            ; ===========================================================================
00011574                            
00011574                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00011574 323C 0080                  		move.w	#$80,d1
00011578 7000                       		moveq	#0,d0
0001157A 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001157E                            
0001157E                            Obj56_Move_UD:
0001157E 0828 0000 0022             		btst	#0,$22(a0)
00011584 6700                       		beq.s	loc_10444
00011586 4440                       		neg.w	d0
00011588 D041                       		add.w	d1,d0
0001158A                            
0001158A                            loc_10444:
0001158A 3228 0030                  		move.w	$30(a0),d1
0001158E 9240                       		sub.w	d0,d1
00011590 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011594 4E75                       		rts	
00011596                            ; ===========================================================================
00011596                            
00011596                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00011596 4A28 0038                  		tst.b	$38(a0)
0001159A 6600                       		bne.s	loc_104A4
0001159C 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000115A2 6600                       		bne.s	loc_1047A	; if not, branch
000115A4 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
000115AA 6600                       		bne.s	loc_1047A
000115AC 4238 F7C9                  		clr.b	($FFFFF7C9).w
000115B0 3038 D008                  		move.w	($FFFFD008).w,d0
000115B4 B068 0008                  		cmp.w	8(a0),d0
000115B8 6400                       		bcc.s	loc_1047A
000115BA 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000115C0                            
000115C0                            loc_1047A:
000115C0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000115C4 7000                       		moveq	#0,d0
000115C6 1028 003C                  		move.b	$3C(a0),d0
000115CA 0832 0000 0000             		btst	#0,(a2,d0.w)
000115D0 6700                       		beq.s	loc_104AE
000115D2 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000115D8 6600                       		bne.s	loc_1049E	; if not, branch
000115DA 0C00 0003                  		cmpi.b	#3,d0
000115DE 6600                       		bne.s	loc_1049E
000115E0 4238 F7C9                  		clr.b	($FFFFF7C9).w
000115E4                            
000115E4                            loc_1049E:
000115E4 117C 0001 0038             		move.b	#1,$38(a0)
000115EA                            
000115EA                            loc_104A4:
000115EA 4A68 003A                  		tst.w	$3A(a0)
000115EE 6700                       		beq.s	loc_104C8
000115F0 5568 003A                  		subq.w	#2,$3A(a0)
000115F4                            
000115F4                            loc_104AE:
000115F4 3028 003A                  		move.w	$3A(a0),d0
000115F8 0828 0000 0022             		btst	#0,$22(a0)
000115FE 6700                       		beq.s	loc_104BC
00011600 4440                       		neg.w	d0
00011602                            
00011602                            loc_104BC:
00011602 3228 0030                  		move.w	$30(a0),d1
00011606 D240                       		add.w	d0,d1
00011608 3141 000C                  		move.w	d1,$C(a0)
0001160C 4E75                       		rts	
0001160E                            ; ===========================================================================
0001160E                            
0001160E                            loc_104C8:
0001160E 5228 0028                  		addq.b	#1,$28(a0)
00011612 4228 0038                  		clr.b	$38(a0)
00011616 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001161A 7000                       		moveq	#0,d0
0001161C 1028 0023                  		move.b	$23(a0),d0
00011620 67D2                       		beq.s	loc_104AE
00011622 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011628 60CA                       		bra.s	loc_104AE
0001162A                            ; ===========================================================================
0001162A                            
0001162A                            Obj56_Type06:				; XREF: Obj56_TypeIndex
0001162A 4A28 0038                  		tst.b	$38(a0)
0001162E 6600                       		bne.s	loc_10500
00011630 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011634 7000                       		moveq	#0,d0
00011636 1028 003C                  		move.b	$3C(a0),d0
0001163A 4A32 0000                  		tst.b	(a2,d0.w)
0001163E 6A00                       		bpl.s	loc_10512
00011640 117C 0001 0038             		move.b	#1,$38(a0)
00011646                            
00011646                            loc_10500:
00011646 7000                       		moveq	#0,d0
00011648 1028 0016                  		move.b	$16(a0),d0
0001164C D040                       		add.w	d0,d0
0001164E B068 003A                  		cmp.w	$3A(a0),d0
00011652 6700                       		beq.s	loc_1052C
00011654 5468 003A                  		addq.w	#2,$3A(a0)
00011658                            
00011658                            loc_10512:
00011658 3028 003A                  		move.w	$3A(a0),d0
0001165C 0828 0000 0022             		btst	#0,$22(a0)
00011662 6700                       		beq.s	loc_10520
00011664 4440                       		neg.w	d0
00011666                            
00011666                            loc_10520:
00011666 3228 0030                  		move.w	$30(a0),d1
0001166A D240                       		add.w	d0,d1
0001166C 3141 000C                  		move.w	d1,$C(a0)
00011670 4E75                       		rts	
00011672                            ; ===========================================================================
00011672                            
00011672                            loc_1052C:
00011672 5328 0028                  		subq.b	#1,$28(a0)
00011676 4228 0038                  		clr.b	$38(a0)
0001167A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001167E 7000                       		moveq	#0,d0
00011680 1028 0023                  		move.b	$23(a0),d0
00011684 67D2                       		beq.s	loc_10512
00011686 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001168C 60CA                       		bra.s	loc_10512
0001168E                            ; ===========================================================================
0001168E                            
0001168E                            Obj56_Type07:				; XREF: Obj56_TypeIndex
0001168E 4A28 0038                  		tst.b	$38(a0)
00011692 6600                       		bne.s	loc_1055E
00011694 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00011698 6700                       		beq.s	locret_10578
0001169A 117C 0001 0038             		move.b	#1,$38(a0)
000116A0 4268 003A                  		clr.w	$3A(a0)
000116A4                            
000116A4                            loc_1055E:
000116A4 5268 0008                  		addq.w	#1,8(a0)
000116A8 3168 0008 0034             		move.w	8(a0),$34(a0)
000116AE 5268 003A                  		addq.w	#1,$3A(a0)
000116B2 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
000116B8 6600                       		bne.s	locret_10578
000116BA 4228 0028                  		clr.b	$28(a0)
000116BE                            
000116BE                            locret_10578:
000116BE 4E75                       		rts	
000116C0                            ; ===========================================================================
000116C0                            
000116C0                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
000116C0 4A28 0038                  		tst.b	$38(a0)
000116C4 6600                       		bne.s	loc_10598
000116C6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000116CA 7000                       		moveq	#0,d0
000116CC 1028 003C                  		move.b	$3C(a0),d0
000116D0 0832 0000 0000             		btst	#0,(a2,d0.w)
000116D6 6700                       		beq.s	loc_105A2
000116D8 117C 0001 0038             		move.b	#1,$38(a0)
000116DE                            
000116DE                            loc_10598:
000116DE 4A68 003A                  		tst.w	$3A(a0)
000116E2 6700                       		beq.s	loc_105C0
000116E4 5568 003A                  		subq.w	#2,$3A(a0)
000116E8                            
000116E8                            loc_105A2:
000116E8 3028 003A                  		move.w	$3A(a0),d0
000116EC 0828 0000 0022             		btst	#0,$22(a0)
000116F2 6700                       		beq.s	loc_105B4
000116F4 4440                       		neg.w	d0
000116F6 0640 0080                  		addi.w	#$80,d0
000116FA                            
000116FA                            loc_105B4:
000116FA 3228 0034                  		move.w	$34(a0),d1
000116FE D240                       		add.w	d0,d1
00011700 3141 0008                  		move.w	d1,8(a0)
00011704 4E75                       		rts	
00011706                            ; ===========================================================================
00011706                            
00011706                            loc_105C0:
00011706 5228 0028                  		addq.b	#1,$28(a0)
0001170A 4228 0038                  		clr.b	$38(a0)
0001170E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011712 7000                       		moveq	#0,d0
00011714 1028 0023                  		move.b	$23(a0),d0
00011718 67CE                       		beq.s	loc_105A2
0001171A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011720 60C6                       		bra.s	loc_105A2
00011722                            ; ===========================================================================
00011722                            
00011722                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00011722 4A28 0038                  		tst.b	$38(a0)
00011726 6600                       		bne.s	loc_105F8
00011728 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001172C 7000                       		moveq	#0,d0
0001172E 1028 003C                  		move.b	$3C(a0),d0
00011732 4A32 0000                  		tst.b	(a2,d0.w)
00011736 6A00                       		bpl.s	loc_10606
00011738 117C 0001 0038             		move.b	#1,$38(a0)
0001173E                            
0001173E                            loc_105F8:
0001173E 303C 0080                  		move.w	#$80,d0
00011742 B068 003A                  		cmp.w	$3A(a0),d0
00011746 6700                       		beq.s	loc_10624
00011748 5468 003A                  		addq.w	#2,$3A(a0)
0001174C                            
0001174C                            loc_10606:
0001174C 3028 003A                  		move.w	$3A(a0),d0
00011750 0828 0000 0022             		btst	#0,$22(a0)
00011756 6700                       		beq.s	loc_10618
00011758 4440                       		neg.w	d0
0001175A 0640 0080                  		addi.w	#$80,d0
0001175E                            
0001175E                            loc_10618:
0001175E 3228 0034                  		move.w	$34(a0),d1
00011762 D240                       		add.w	d0,d1
00011764 3141 0008                  		move.w	d1,8(a0)
00011768 4E75                       		rts	
0001176A                            ; ===========================================================================
0001176A                            
0001176A                            loc_10624:
0001176A 5328 0028                  		subq.b	#1,$28(a0)
0001176E 4228 0038                  		clr.b	$38(a0)
00011772 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011776 7000                       		moveq	#0,d0
00011778 1028 0023                  		move.b	$23(a0),d0
0001177C 67CE                       		beq.s	loc_10606
0001177E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011784 60C6                       		bra.s	loc_10606
00011786                            ; ===========================================================================
00011786                            
00011786                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011786 323C 0010                  		move.w	#$10,d1
0001178A 7000                       		moveq	#0,d0
0001178C 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011790 E248                       		lsr.w	#1,d0
00011792 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00011796 6000                       		bra.s	Obj56_Move_Sqr
00011798                            ; ===========================================================================
00011798                            
00011798                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00011798 323C 0030                  		move.w	#$30,d1
0001179C 7000                       		moveq	#0,d0
0001179E 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
000117A2 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
000117A6 6000                       		bra.s	Obj56_Move_Sqr
000117A8                            ; ===========================================================================
000117A8                            
000117A8                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
000117A8 323C 0050                  		move.w	#$50,d1
000117AC 7000                       		moveq	#0,d0
000117AE 1038 FE90                  		move.b	($FFFFFE90).w,d0
000117B2 3638 FE92                  		move.w	($FFFFFE92).w,d3
000117B6 6000                       		bra.s	Obj56_Move_Sqr
000117B8                            ; ===========================================================================
000117B8                            
000117B8                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000117B8 323C 0070                  		move.w	#$70,d1
000117BC 7000                       		moveq	#0,d0
000117BE 1038 FE94                  		move.b	($FFFFFE94).w,d0
000117C2 3638 FE96                  		move.w	($FFFFFE96).w,d3
000117C6                            
000117C6                            Obj56_Move_Sqr:
000117C6 4A43                       		tst.w	d3
000117C8 6600                       		bne.s	loc_1068E
000117CA 5228 0022                  		addq.b	#1,$22(a0)
000117CE 0228 0003 0022             		andi.b	#3,$22(a0)
000117D4                            
000117D4                            loc_1068E:
000117D4 1428 0022                  		move.b	$22(a0),d2
000117D8 0202 0003                  		andi.b	#3,d2
000117DC 6600                       		bne.s	loc_106AE
000117DE 9041                       		sub.w	d1,d0
000117E0 D068 0034                  		add.w	$34(a0),d0
000117E4 3140 0008                  		move.w	d0,8(a0)
000117E8 4441                       		neg.w	d1
000117EA D268 0030                  		add.w	$30(a0),d1
000117EE 3141 000C                  		move.w	d1,$C(a0)
000117F2 4E75                       		rts	
000117F4                            ; ===========================================================================
000117F4                            
000117F4                            loc_106AE:
000117F4 5302                       		subq.b	#1,d2
000117F6 6600                       		bne.s	loc_106CC
000117F8 5341                       		subq.w	#1,d1
000117FA 9041                       		sub.w	d1,d0
000117FC 4440                       		neg.w	d0
000117FE D068 0030                  		add.w	$30(a0),d0
00011802 3140 000C                  		move.w	d0,$C(a0)
00011806 5241                       		addq.w	#1,d1
00011808 D268 0034                  		add.w	$34(a0),d1
0001180C 3141 0008                  		move.w	d1,8(a0)
00011810 4E75                       		rts	
00011812                            ; ===========================================================================
00011812                            
00011812                            loc_106CC:
00011812 5302                       		subq.b	#1,d2
00011814 6600                       		bne.s	loc_106EA
00011816 5341                       		subq.w	#1,d1
00011818 9041                       		sub.w	d1,d0
0001181A 4440                       		neg.w	d0
0001181C D068 0034                  		add.w	$34(a0),d0
00011820 3140 0008                  		move.w	d0,8(a0)
00011824 5241                       		addq.w	#1,d1
00011826 D268 0030                  		add.w	$30(a0),d1
0001182A 3141 000C                  		move.w	d1,$C(a0)
0001182E 4E75                       		rts	
00011830                            ; ===========================================================================
00011830                            
00011830                            loc_106EA:
00011830 9041                       		sub.w	d1,d0
00011832 D068 0030                  		add.w	$30(a0),d0
00011836 3140 000C                  		move.w	d0,$C(a0)
0001183A 4441                       		neg.w	d1
0001183C D268 0034                  		add.w	$34(a0),d1
00011840 3141 0008                  		move.w	d1,8(a0)
00011844 4E75                       		rts	
00011846                            ; ===========================================================================
00011846                            ; ---------------------------------------------------------------------------
00011846                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011846                            ; ---------------------------------------------------------------------------
00011846                            Map_obj56:
00011846                            	include "_maps\obj56.asm"
00011846                            ; ---------------------------------------------------------------------------
00011846                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011846                            ; ---------------------------------------------------------------------------
00011846 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
0001184A 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
0001184E 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00011852 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00011856 01                         byte_10710:	dc.b 1
00011857 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
0001185C 04                         byte_10716:	dc.b 4
0001185D E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00011862 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00011867 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001186C 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011871 02                         byte_1072B:	dc.b 2
00011872 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00011877 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001187C 04                         byte_10736:	dc.b 4
0001187D E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00011882 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00011887 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001188C 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00011891 03                         byte_1074B:	dc.b 3
00011892 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00011897 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001189C 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
000118A1 01                         byte_1075B:	dc.b 1
000118A2 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000118A7 02                         byte_10761:	dc.b 2
000118A8 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000118AD 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000118B2 04                         byte_1076C:	dc.b 4
000118B3 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
000118B8 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000118BD F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000118C2 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000118C8 00                         		even
000118C8 00                         		even
000118C8                            
000118C8                            ; ===========================================================================
000118C8                            ; ---------------------------------------------------------------------------
000118C8                            ; Object 57 - spiked balls (SYZ, LZ)
000118C8                            ; ---------------------------------------------------------------------------
000118C8                            
000118C8                            Obj57:					; XREF: Obj_Index
000118C8 7000                       		moveq	#0,d0
000118CA 1028 0024                  		move.b	$24(a0),d0
000118CE 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000118D2 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000118D6                            ; ===========================================================================
000118D6 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000118D8 0000                       		dc.w Obj57_Move-Obj57_Index
000118DA 0000                       		dc.w Obj57_Display-Obj57_Index
000118DC                            ; ===========================================================================
000118DC                            
000118DC                            Obj57_Main:				; XREF: Obj57_Index
000118DC 5428 0024                  		addq.b	#2,$24(a0)
000118E0 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000118E8 317C 03BA 0002             		move.w	#$3BA,2(a0)
000118EE 117C 0004 0001             		move.b	#4,1(a0)
000118F4 117C 0004 0018             		move.b	#4,$18(a0)
000118FA 117C 0008 0019             		move.b	#8,$19(a0)
00011900 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011906 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001190C 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00011912 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011918 6600                       		bne.s	loc_107E8
0001191A 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00011920 317C 0310 0002             		move.w	#$310,2(a0)
00011926 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
0001192E                            
0001192E                            loc_107E8:
0001192E 1228 0028                  		move.b	$28(a0),d1	; get object type
00011932 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011936 4881                       		ext.w	d1
00011938 E741                       		asl.w	#3,d1		; multiply by 8
0001193A 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
0001193E 1028 0022                  		move.b	$22(a0),d0
00011942 E418                       		ror.b	#2,d0
00011944 0200 00C0                  		andi.b	#-$40,d0
00011948 1140 0026                  		move.b	d0,$26(a0)
0001194C 45E8 0029                  		lea	$29(a0),a2
00011950 1228 0028                  		move.b	$28(a0),d1	; get object type
00011954 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00011958 14FC 0000                  		move.b	#0,(a2)+
0001195C 3601                       		move.w	d1,d3
0001195E E94B                       		lsl.w	#4,d3
00011960 1143 003C                  		move.b	d3,$3C(a0)
00011964 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011966 6500                       		bcs.s	loc_10894
00011968 0828 0003 0028             		btst	#3,$28(a0)
0001196E 6700                       		beq.s	Obj57_MakeChain
00011970 5341                       		subq.w	#1,d1
00011972 6500                       		bcs.s	loc_10894
00011974                            
00011974                            Obj57_MakeChain:
00011974 6100 D260                  		bsr.w	SingleObjLoad
00011978 6600                       		bne.s	loc_10894
0001197A 5228 0029                  		addq.b	#1,$29(a0)
0001197E 3A09                       		move.w	a1,d5
00011980 0445 D000                  		subi.w	#-$3000,d5
00011984 EC4D                       		lsr.w	#6,d5
00011986 0245 007F                  		andi.w	#$7F,d5
0001198A 14C5                       		move.b	d5,(a2)+
0001198C 137C 0004 0024             		move.b	#4,$24(a1)
00011992 1290                       		move.b	0(a0),0(a1)
00011994 2368 0004 0004             		move.l	4(a0),4(a1)
0001199A 3368 0002 0002             		move.w	2(a0),2(a1)
000119A0 1368 0001 0001             		move.b	1(a0),1(a1)
000119A6 1368 0018 0018             		move.b	$18(a0),$18(a1)
000119AC 1368 0019 0019             		move.b	$19(a0),$19(a1)
000119B2 1368 0020 0020             		move.b	$20(a0),$20(a1)
000119B8 0403 0010                  		subi.b	#$10,d3
000119BC 1343 003C                  		move.b	d3,$3C(a1)
000119C0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000119C6 6600                       		bne.s	loc_10890
000119C8 4A03                       		tst.b	d3
000119CA 6600                       		bne.s	loc_10890
000119CC 137C 0002 001A             		move.b	#2,$1A(a1)
000119D2                            
000119D2                            loc_10890:
000119D2 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000119D6                            
000119D6                            loc_10894:
000119D6 3A08                       		move.w	a0,d5
000119D8 0445 D000                  		subi.w	#-$3000,d5
000119DC EC4D                       		lsr.w	#6,d5
000119DE 0245 007F                  		andi.w	#$7F,d5
000119E2 14C5                       		move.b	d5,(a2)+
000119E4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000119EA 6600                       		bne.s	Obj57_Move
000119EC 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000119F2 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000119F8                            
000119F8                            Obj57_Move:				; XREF: Obj57_Index
000119F8 6100 0000                  		bsr.w	Obj57_MoveSub
000119FC 6000 0000                  		bra.w	Obj57_ChkDel
00011A00                            ; ===========================================================================
00011A00                            
00011A00                            Obj57_MoveSub:				; XREF: Obj57_Move
00011A00 3028 003E                  		move.w	$3E(a0),d0
00011A04 D168 0026                  		add.w	d0,$26(a0)
00011A08 1028 0026                  		move.b	$26(a0),d0
00011A0C 4EB9 0000 3424             		jsr	(CalcSine).l
00011A12 3428 0038                  		move.w	$38(a0),d2
00011A16 3628 003A                  		move.w	$3A(a0),d3
00011A1A 45E8 0029                  		lea	$29(a0),a2
00011A1E 7C00                       		moveq	#0,d6
00011A20 1C1A                       		move.b	(a2)+,d6
00011A22                            
00011A22                            Obj57_MoveLoop:
00011A22 7800                       		moveq	#0,d4
00011A24 181A                       		move.b	(a2)+,d4
00011A26 ED4C                       		lsl.w	#6,d4
00011A28 0684 00FF D000             		addi.l	#$FFD000,d4
00011A2E 2244                       		movea.l	d4,a1
00011A30 7800                       		moveq	#0,d4
00011A32 1829 003C                  		move.b	$3C(a1),d4
00011A36 2A04                       		move.l	d4,d5
00011A38 C9C0                       		muls.w	d0,d4
00011A3A E084                       		asr.l	#8,d4
00011A3C CBC1                       		muls.w	d1,d5
00011A3E E085                       		asr.l	#8,d5
00011A40 D842                       		add.w	d2,d4
00011A42 DA43                       		add.w	d3,d5
00011A44 3344 000C                  		move.w	d4,$C(a1)
00011A48 3345 0008                  		move.w	d5,8(a1)
00011A4C 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011A50 4E75                       		rts	
00011A52                            ; ===========================================================================
00011A52                            
00011A52                            Obj57_ChkDel:				; XREF: Obj57_Move
00011A52 3028 003A                  		move.w	$3A(a0),d0
00011A56 0240 FF80                  		andi.w	#$FF80,d0
00011A5A 3238 F700                  		move.w	($FFFFF700).w,d1
00011A5E 0441 0080                  		subi.w	#$80,d1
00011A62 0241 FF80                  		andi.w	#$FF80,d1
00011A66 9041                       		sub.w	d1,d0
00011A68 0C40 0280                  		cmpi.w	#$280,d0
00011A6C 6200 0000                  		bhi.w	Obj57_Delete
00011A70 6000 CCDE                  		bra.w	DisplaySprite
00011A74                            ; ===========================================================================
00011A74                            
00011A74                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011A74 7400                       		moveq	#0,d2
00011A76 45E8 0029                  		lea	$29(a0),a2
00011A7A 141A                       		move.b	(a2)+,d2
00011A7C                            
00011A7C                            Obj57_DelLoop:
00011A7C 7000                       		moveq	#0,d0
00011A7E 101A                       		move.b	(a2)+,d0
00011A80 ED48                       		lsl.w	#6,d0
00011A82 0680 00FF D000             		addi.l	#$FFD000,d0
00011A88 2240                       		movea.l	d0,a1
00011A8A 6100 CD02                  		bsr.w	DeleteObject2
00011A8E 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00011A92                            
00011A92 4E75                       		rts	
00011A94                            ; ===========================================================================
00011A94                            
00011A94                            Obj57_Display:				; XREF: Obj57_Index
00011A94 6000 CCBA                  		bra.w	DisplaySprite
00011A98                            ; ===========================================================================
00011A98                            ; ---------------------------------------------------------------------------
00011A98                            ; Sprite mappings - chain of spiked balls (SYZ)
00011A98                            ; ---------------------------------------------------------------------------
00011A98                            Map_obj57:
00011A98                            	include "_maps\obj57syz.asm"
00011A98                            ; ---------------------------------------------------------------------------
00011A98                            ; Sprite mappings - chain of spiked balls (SYZ)
00011A98                            ; ---------------------------------------------------------------------------
00011A98 0000                       		dc.w byte_10958-Map_obj57
00011A9A 01                         byte_10958:	dc.b 1
00011A9B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011AA0                            		even
00011AA0                            		even
00011AA0                            
00011AA0                            ; ---------------------------------------------------------------------------
00011AA0                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011AA0                            ; ---------------------------------------------------------------------------
00011AA0                            Map_obj57a:
00011AA0                            	include "_maps\obj57lz.asm"
00011AA0                            ; ---------------------------------------------------------------------------
00011AA0                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011AA0                            ; ---------------------------------------------------------------------------
00011AA0 0000                       		dc.w byte_10964-Map_obj57a
00011AA2 0000                       		dc.w byte_1096A-Map_obj57a
00011AA4 0000                       		dc.w byte_10970-Map_obj57a
00011AA6 01                         byte_10964:	dc.b 1
00011AA7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011AAC 01                         byte_1096A:	dc.b 1
00011AAD F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00011AB2 01                         byte_10970:	dc.b 1
00011AB3 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00011AB8                            		even
00011AB8                            		even
00011AB8                            
00011AB8                            ; ===========================================================================
00011AB8                            ; ---------------------------------------------------------------------------
00011AB8                            ; Object 58 - giant spiked balls (SYZ)
00011AB8                            ; ---------------------------------------------------------------------------
00011AB8                            
00011AB8                            Obj58:					; XREF: Obj_Index
00011AB8 7000                       		moveq	#0,d0
00011ABA 1028 0024                  		move.b	$24(a0),d0
00011ABE 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00011AC2 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00011AC6                            ; ===========================================================================
00011AC6 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00011AC8 0000                       		dc.w Obj58_Move-Obj58_Index
00011ACA                            ; ===========================================================================
00011ACA                            
00011ACA                            Obj58_Main:				; XREF: Obj58_Index
00011ACA 5428 0024                  		addq.b	#2,$24(a0)
00011ACE 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00011AD6 317C 0396 0002             		move.w	#$396,2(a0)
00011ADC 117C 0004 0001             		move.b	#4,1(a0)
00011AE2 117C 0004 0018             		move.b	#4,$18(a0)
00011AE8 117C 0018 0019             		move.b	#$18,$19(a0)
00011AEE 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011AF4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011AFA 117C 0086 0020             		move.b	#$86,$20(a0)
00011B00 1228 0028                  		move.b	$28(a0),d1	; get object type
00011B04 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011B08 4881                       		ext.w	d1
00011B0A E741                       		asl.w	#3,d1		; multiply by 8
00011B0C 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00011B10 1028 0022                  		move.b	$22(a0),d0
00011B14 E418                       		ror.b	#2,d0
00011B16 0200 00C0                  		andi.b	#$C0,d0
00011B1A 1140 0026                  		move.b	d0,$26(a0)
00011B1E 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011B24                            
00011B24                            Obj58_Move:				; XREF: Obj58_Index
00011B24 7000                       		moveq	#0,d0
00011B26 1028 0028                  		move.b	$28(a0),d0	; get object type
00011B2A 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00011B2E D040                       		add.w	d0,d0
00011B30 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011B34 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011B38 3028 003A                  		move.w	$3A(a0),d0
00011B3C 0240 FF80                  		andi.w	#$FF80,d0
00011B40 3238 F700                  		move.w	($FFFFF700).w,d1
00011B44 0441 0080                  		subi.w	#$80,d1
00011B48 0241 FF80                  		andi.w	#$FF80,d1
00011B4C 9041                       		sub.w	d1,d0
00011B4E 0C40 0280                  		cmpi.w	#$280,d0
00011B52 6200 CC38                  		bhi.w	DeleteObject
00011B56 6000 CBF8                  		bra.w	DisplaySprite
00011B5A                            ; ===========================================================================
00011B5A 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011B5C 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011B5E 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011B60 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011B62                            ; ===========================================================================
00011B62                            
00011B62                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011B62 4E75                       		rts	
00011B64                            ; ===========================================================================
00011B64                            
00011B64                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011B64 323C 0060                  		move.w	#$60,d1
00011B68 7000                       		moveq	#0,d0
00011B6A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011B6E 0828 0000 0022             		btst	#0,$22(a0)
00011B74 6700                       		beq.s	loc_10A38
00011B76 4440                       		neg.w	d0
00011B78 D041                       		add.w	d1,d0
00011B7A                            
00011B7A                            loc_10A38:
00011B7A 3228 003A                  		move.w	$3A(a0),d1
00011B7E 9240                       		sub.w	d0,d1
00011B80 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011B84 4E75                       		rts	
00011B86                            ; ===========================================================================
00011B86                            
00011B86                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011B86 323C 0060                  		move.w	#$60,d1
00011B8A 7000                       		moveq	#0,d0
00011B8C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011B90 0828 0000 0022             		btst	#0,$22(a0)
00011B96 6700                       		beq.s	loc_10A5C
00011B98 4440                       		neg.w	d0
00011B9A 0640 0080                  		addi.w	#$80,d0
00011B9E                            
00011B9E                            loc_10A5C:
00011B9E 3228 0038                  		move.w	$38(a0),d1
00011BA2 9240                       		sub.w	d0,d1
00011BA4 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011BA8 4E75                       		rts	
00011BAA                            ; ===========================================================================
00011BAA                            
00011BAA                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011BAA 3028 003E                  		move.w	$3E(a0),d0
00011BAE D168 0026                  		add.w	d0,$26(a0)
00011BB2 1028 0026                  		move.b	$26(a0),d0
00011BB6 4EB9 0000 3424             		jsr	(CalcSine).l
00011BBC 3428 0038                  		move.w	$38(a0),d2
00011BC0 3628 003A                  		move.w	$3A(a0),d3
00011BC4 7800                       		moveq	#0,d4
00011BC6 1828 003C                  		move.b	$3C(a0),d4
00011BCA 2A04                       		move.l	d4,d5
00011BCC C9C0                       		muls.w	d0,d4
00011BCE E084                       		asr.l	#8,d4
00011BD0 CBC1                       		muls.w	d1,d5
00011BD2 E085                       		asr.l	#8,d5
00011BD4 D842                       		add.w	d2,d4
00011BD6 DA43                       		add.w	d3,d5
00011BD8 3144 000C                  		move.w	d4,$C(a0)
00011BDC 3145 0008                  		move.w	d5,8(a0)
00011BE0 4E75                       		rts	
00011BE2                            ; ===========================================================================
00011BE2                            ; ---------------------------------------------------------------------------
00011BE2                            ; Sprite mappings - SBZ	spiked ball on a chain
00011BE2                            ; ---------------------------------------------------------------------------
00011BE2                            Map_obj15b:
00011BE2                            	include "_maps\obj15sbz.asm"
00011BE2                            ; ---------------------------------------------------------------------------
00011BE2                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011BE2                            ; ---------------------------------------------------------------------------
00011BE2 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011BE6 0000                       		dc.w byte_10AC6-Map_obj15b
00011BE8 05                         byte_10AA6:	dc.b 5
00011BE9 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011BEE F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011BF3 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011BF8 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011BFD 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011C02 01                         byte_10AC0:	dc.b 1
00011C03 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011C08 02                         byte_10AC6:	dc.b 2
00011C09 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011C0E E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011C14 00                         		even
00011C14 00                         		even
00011C14                            
00011C14                            ; ===========================================================================
00011C14                            ; ---------------------------------------------------------------------------
00011C14                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011C14                            ; ---------------------------------------------------------------------------
00011C14                            
00011C14                            Obj59:					; XREF: Obj_Index
00011C14 7000                       		moveq	#0,d0
00011C16 1028 0024                  		move.b	$24(a0),d0
00011C1A 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011C1E 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011C22 3028 0032                  		move.w	$32(a0),d0
00011C26 0240 FF80                  		andi.w	#$FF80,d0
00011C2A 3238 F700                  		move.w	($FFFFF700).w,d1
00011C2E 0441 0080                  		subi.w	#$80,d1
00011C32 0241 FF80                  		andi.w	#$FF80,d1
00011C36 9041                       		sub.w	d1,d0
00011C38 0C40 0280                  		cmpi.w	#$280,d0
00011C3C 6200 CB4E                  		bhi.w	DeleteObject
00011C40 6000 CB0E                  		bra.w	DisplaySprite
00011C44                            ; ===========================================================================
00011C44 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011C46 0000                       		dc.w Obj59_Platform-Obj59_Index
00011C48 0000                       		dc.w Obj59_Action-Obj59_Index
00011C4A 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011C4C                            
00011C4C 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011C4E                            
00011C4E 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011C50 2001                       		dc.b $20, 1
00011C52 3401                       		dc.b $34, 1
00011C54 1003                       		dc.b $10, 3
00011C56 2003                       		dc.b $20, 3
00011C58 3403                       		dc.b $34, 3
00011C5A 1401                       		dc.b $14, 1
00011C5C 2401                       		dc.b $24, 1
00011C5E 2C01                       		dc.b $2C, 1
00011C60 1403                       		dc.b $14, 3
00011C62 2403                       		dc.b $24, 3
00011C64 2C03                       		dc.b $2C, 3
00011C66 2005                       		dc.b $20, 5
00011C68 2007                       		dc.b $20, 7
00011C6A 3009                       		dc.b $30, 9
00011C6C                            ; ===========================================================================
00011C6C                            
00011C6C                            Obj59_Main:				; XREF: Obj59_Index
00011C6C 5428 0024                  		addq.b	#2,$24(a0)
00011C70 7000                       		moveq	#0,d0
00011C72 1028 0028                  		move.b	$28(a0),d0
00011C76 6A00                       		bpl.s	Obj59_Main2
00011C78 5828 0024                  		addq.b	#4,$24(a0)
00011C7C 0240 007F                  		andi.w	#$7F,d0
00011C80 C0FC 0006                  		mulu.w	#6,d0
00011C84 3140 003C                  		move.w	d0,$3C(a0)
00011C88 3140 003E                  		move.w	d0,$3E(a0)
00011C8C 588F                       		addq.l	#4,sp
00011C8E 4E75                       		rts	
00011C90                            ; ===========================================================================
00011C90                            
00011C90                            Obj59_Main2:
00011C90 E648                       		lsr.w	#3,d0
00011C92 0240 001E                  		andi.w	#$1E,d0
00011C96 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011C9A 115A 0019                  		move.b	(a2)+,$19(a0)
00011C9E 115A 001A                  		move.b	(a2)+,$1A(a0)
00011CA2 7000                       		moveq	#0,d0
00011CA4 1028 0028                  		move.b	$28(a0),d0
00011CA8 D040                       		add.w	d0,d0
00011CAA 0240 001E                  		andi.w	#$1E,d0
00011CAE 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011CB2 101A                       		move.b	(a2)+,d0
00011CB4 E548                       		lsl.w	#2,d0
00011CB6 3140 003C                  		move.w	d0,$3C(a0)
00011CBA 115A 0028                  		move.b	(a2)+,$28(a0)
00011CBE 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011CC6 317C 4000 0002             		move.w	#$4000,2(a0)
00011CCC 117C 0004 0001             		move.b	#4,1(a0)
00011CD2 117C 0004 0018             		move.b	#4,$18(a0)
00011CD8 3168 0008 0032             		move.w	8(a0),$32(a0)
00011CDE 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011CE4                            
00011CE4                            Obj59_Platform:				; XREF: Obj59_Index
00011CE4 7200                       		moveq	#0,d1
00011CE6 1228 0019                  		move.b	$19(a0),d1
00011CEA 4EB9 0000 835A             		jsr	(PlatformObject).l
00011CF0 6000 0000                  		bra.w	Obj59_Types
00011CF4                            ; ===========================================================================
00011CF4                            
00011CF4                            Obj59_Action:				; XREF: Obj59_Index
00011CF4 7200                       		moveq	#0,d1
00011CF6 1228 0019                  		move.b	$19(a0),d1
00011CFA 4EB9 0000 84CE             		jsr	(ExitPlatform).l
00011D00 3F28 0008                  		move.w	8(a0),-(sp)
00011D04 6100 0000                  		bsr.w	Obj59_Types
00011D08 341F                       		move.w	(sp)+,d2
00011D0A 4A10                       		tst.b	0(a0)
00011D0C 6700                       		beq.s	locret_10BD4
00011D0E 4EF9 0000 8A38             		jmp	(MvSonicOnPtfm2).l
00011D14                            ; ===========================================================================
00011D14                            
00011D14                            locret_10BD4:
00011D14 4E75                       		rts	
00011D16                            ; ===========================================================================
00011D16                            
00011D16                            Obj59_Types:
00011D16 7000                       		moveq	#0,d0
00011D18 1028 0028                  		move.b	$28(a0),d0
00011D1C 0240 000F                  		andi.w	#$F,d0
00011D20 D040                       		add.w	d0,d0
00011D22 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011D26 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011D2A                            ; ===========================================================================
00011D2A 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011D2E 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011D32 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011D36 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011D3A 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011D3E                            ; ===========================================================================
00011D3E                            
00011D3E                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011D3E 4E75                       		rts	
00011D40                            ; ===========================================================================
00011D40                            
00011D40                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011D40 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011D46 6600                       		bne.s	locret_10C0C
00011D48 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011D4C                            
00011D4C                            locret_10C0C:
00011D4C 4E75                       		rts	
00011D4E                            ; ===========================================================================
00011D4E                            
00011D4E                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011D4E 6100 0000                  		bsr.w	Obj59_Move
00011D52 3028 0034                  		move.w	$34(a0),d0
00011D56 4440                       		neg.w	d0
00011D58 D068 0030                  		add.w	$30(a0),d0
00011D5C 3140 000C                  		move.w	d0,$C(a0)
00011D60 4E75                       		rts	
00011D62                            ; ===========================================================================
00011D62                            
00011D62                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011D62 6100 0000                  		bsr.w	Obj59_Move
00011D66 3028 0034                  		move.w	$34(a0),d0
00011D6A D068 0030                  		add.w	$30(a0),d0
00011D6E 3140 000C                  		move.w	d0,$C(a0)
00011D72 4E75                       		rts	
00011D74                            ; ===========================================================================
00011D74                            
00011D74                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011D74 6100 0000                  		bsr.w	Obj59_Move
00011D78 3028 0034                  		move.w	$34(a0),d0
00011D7C E240                       		asr.w	#1,d0
00011D7E 4440                       		neg.w	d0
00011D80 D068 0030                  		add.w	$30(a0),d0
00011D84 3140 000C                  		move.w	d0,$C(a0)
00011D88 3028 0034                  		move.w	$34(a0),d0
00011D8C D068 0032                  		add.w	$32(a0),d0
00011D90 3140 0008                  		move.w	d0,8(a0)
00011D94 4E75                       		rts	
00011D96                            ; ===========================================================================
00011D96                            
00011D96                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011D96 6100 0000                  		bsr.w	Obj59_Move
00011D9A 3028 0034                  		move.w	$34(a0),d0
00011D9E E240                       		asr.w	#1,d0
00011DA0 D068 0030                  		add.w	$30(a0),d0
00011DA4 3140 000C                  		move.w	d0,$C(a0)
00011DA8 3028 0034                  		move.w	$34(a0),d0
00011DAC 4440                       		neg.w	d0
00011DAE D068 0032                  		add.w	$32(a0),d0
00011DB2 3140 0008                  		move.w	d0,8(a0)
00011DB6 4E75                       		rts	
00011DB8                            ; ===========================================================================
00011DB8                            
00011DB8                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00011DB8 6100 0000                  		bsr.w	Obj59_Move
00011DBC 3028 0034                  		move.w	$34(a0),d0
00011DC0 4440                       		neg.w	d0
00011DC2 D068 0030                  		add.w	$30(a0),d0
00011DC6 3140 000C                  		move.w	d0,$C(a0)
00011DCA 4A28 0028                  		tst.b	$28(a0)
00011DCE 6700 0000                  		beq.w	loc_10C94
00011DD2 4E75                       		rts	
00011DD4                            ; ===========================================================================
00011DD4                            
00011DD4                            loc_10C94:
00011DD4 0828 0003 0022             		btst	#3,$22(a0)
00011DDA 6700                       		beq.s	Obj59_Delete
00011DDC 08E9 0001 0022             		bset	#1,$22(a1)
00011DE2 08A9 0003 0022             		bclr	#3,$22(a1)
00011DE8 137C 0002 0024             		move.b	#2,$24(a1)
00011DEE                            
00011DEE                            Obj59_Delete:
00011DEE 6000 C99C                  		bra.w	DeleteObject
00011DF2                            
00011DF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011DF2                            
00011DF2                            
00011DF2                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011DF2 3028 0038                  		move.w	$38(a0),d0
00011DF6 4A28 003A                  		tst.b	$3A(a0)
00011DFA 6600                       		bne.s	loc_10CC8
00011DFC 0C40 0800                  		cmpi.w	#$800,d0
00011E00 6400                       		bcc.s	loc_10CD0
00011E02 0640 0010                  		addi.w	#$10,d0
00011E06 6000                       		bra.s	loc_10CD0
00011E08                            ; ===========================================================================
00011E08                            
00011E08                            loc_10CC8:
00011E08 4A40                       		tst.w	d0
00011E0A 6700                       		beq.s	loc_10CD0
00011E0C 0440 0010                  		subi.w	#$10,d0
00011E10                            
00011E10                            loc_10CD0:
00011E10 3140 0038                  		move.w	d0,$38(a0)
00011E14 48C0                       		ext.l	d0
00011E16 E180                       		asl.l	#8,d0
00011E18 D0A8 0034                  		add.l	$34(a0),d0
00011E1C 2140 0034                  		move.l	d0,$34(a0)
00011E20 4840                       		swap	d0
00011E22 3428 003C                  		move.w	$3C(a0),d2
00011E26 B042                       		cmp.w	d2,d0
00011E28 6300                       		bls.s	loc_10CF0
00011E2A 117C 0001 003A             		move.b	#1,$3A(a0)
00011E30                            
00011E30                            loc_10CF0:
00011E30 D442                       		add.w	d2,d2
00011E32 B042                       		cmp.w	d2,d0
00011E34 6600                       		bne.s	locret_10CFA
00011E36 4228 0028                  		clr.b	$28(a0)
00011E3A                            
00011E3A                            locret_10CFA:
00011E3A 4E75                       		rts	
00011E3C                            ; End of function Obj59_Move
00011E3C                            
00011E3C                            ; ===========================================================================
00011E3C                            
00011E3C                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011E3C 5368 003C                  		subq.w	#1,$3C(a0)
00011E40 6600                       		bne.s	Obj59_ChkDel
00011E42 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011E48 6100 CD8C                  		bsr.w	SingleObjLoad
00011E4C 6600                       		bne.s	Obj59_ChkDel
00011E4E 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011E52 3368 0008 0008             		move.w	8(a0),8(a1)
00011E58 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011E5E 137C 000E 0028             		move.b	#$E,$28(a1)
00011E64                            
00011E64                            Obj59_ChkDel:
00011E64 588F                       		addq.l	#4,sp
00011E66 3028 0008                  		move.w	8(a0),d0
00011E6A 0240 FF80                  		andi.w	#$FF80,d0
00011E6E 3238 F700                  		move.w	($FFFFF700).w,d1
00011E72 0441 0080                  		subi.w	#$80,d1
00011E76 0241 FF80                  		andi.w	#$FF80,d1
00011E7A 9041                       		sub.w	d1,d0
00011E7C 0C40 0280                  		cmpi.w	#$280,d0
00011E80 6200 C90A                  		bhi.w	DeleteObject
00011E84 4E75                       		rts	
00011E86                            ; ===========================================================================
00011E86                            ; ---------------------------------------------------------------------------
00011E86                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011E86                            ; ---------------------------------------------------------------------------
00011E86                            Map_obj59:
00011E86                            	include "_maps\obj59.asm"
00011E86                            ; ---------------------------------------------------------------------------
00011E86                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011E86                            ; ---------------------------------------------------------------------------
00011E86 0000                       		dc.w byte_10D4A-Map_obj59
00011E88 03                         byte_10D4A:	dc.b 3
00011E89 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011E8E F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011E93 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011E98                            		even
00011E98                            		even
00011E98                            
00011E98                            ; ===========================================================================
00011E98                            ; ---------------------------------------------------------------------------
00011E98                            ; Object 5A - platforms	moving in circles (SLZ)
00011E98                            ; ---------------------------------------------------------------------------
00011E98                            
00011E98                            Obj5A:					; XREF: Obj_Index
00011E98 7000                       		moveq	#0,d0
00011E9A 1028 0024                  		move.b	$24(a0),d0
00011E9E 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011EA2 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011EA6 3028 0032                  		move.w	$32(a0),d0
00011EAA 0240 FF80                  		andi.w	#$FF80,d0
00011EAE 3238 F700                  		move.w	($FFFFF700).w,d1
00011EB2 0441 0080                  		subi.w	#$80,d1
00011EB6 0241 FF80                  		andi.w	#$FF80,d1
00011EBA 9041                       		sub.w	d1,d0
00011EBC 0C40 0280                  		cmpi.w	#$280,d0
00011EC0 6200 C8CA                  		bhi.w	DeleteObject
00011EC4 6000 C88A                  		bra.w	DisplaySprite
00011EC8                            ; ===========================================================================
00011EC8 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00011ECA 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00011ECC 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011ECE                            ; ===========================================================================
00011ECE                            
00011ECE                            Obj5A_Main:				; XREF: Obj5A_Index
00011ECE 5428 0024                  		addq.b	#2,$24(a0)
00011ED2 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011EDA 317C 4000 0002             		move.w	#$4000,2(a0)
00011EE0 117C 0004 0001             		move.b	#4,1(a0)
00011EE6 117C 0004 0018             		move.b	#4,$18(a0)
00011EEC 117C 0018 0019             		move.b	#$18,$19(a0)
00011EF2 3168 0008 0032             		move.w	8(a0),$32(a0)
00011EF8 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011EFE                            
00011EFE                            Obj5A_Platform:				; XREF: Obj5A_Index
00011EFE 7200                       		moveq	#0,d1
00011F00 1228 0019                  		move.b	$19(a0),d1
00011F04 4EB9 0000 835A             		jsr	(PlatformObject).l
00011F0A 6000 0000                  		bra.w	Obj5A_Types
00011F0E                            ; ===========================================================================
00011F0E                            
00011F0E                            Obj5A_Action:				; XREF: Obj5A_Index
00011F0E 7200                       		moveq	#0,d1
00011F10 1228 0019                  		move.b	$19(a0),d1
00011F14 4EB9 0000 84CE             		jsr	(ExitPlatform).l
00011F1A 3F28 0008                  		move.w	8(a0),-(sp)
00011F1E 6100 0000                  		bsr.w	Obj5A_Types
00011F22 341F                       		move.w	(sp)+,d2
00011F24 4EF9 0000 8A38             		jmp	(MvSonicOnPtfm2).l
00011F2A                            ; ===========================================================================
00011F2A                            
00011F2A                            Obj5A_Types:
00011F2A 7000                       		moveq	#0,d0
00011F2C 1028 0028                  		move.b	$28(a0),d0
00011F30 0240 000C                  		andi.w	#$C,d0
00011F34 E248                       		lsr.w	#1,d0
00011F36 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011F3A 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011F3E                            ; ===========================================================================
00011F3E 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011F40 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011F42                            ; ===========================================================================
00011F42                            
00011F42                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011F42 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011F46 0401 0050                  		subi.b	#$50,d1
00011F4A 4881                       		ext.w	d1
00011F4C 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011F50 0402 0050                  		subi.b	#$50,d2
00011F54 4882                       		ext.w	d2
00011F56 0828 0000 0028             		btst	#0,$28(a0)
00011F5C 6700                       		beq.s	loc_10E24
00011F5E 4441                       		neg.w	d1
00011F60 4442                       		neg.w	d2
00011F62                            
00011F62                            loc_10E24:
00011F62 0828 0001 0028             		btst	#1,$28(a0)
00011F68 6700                       		beq.s	loc_10E30
00011F6A 4441                       		neg.w	d1
00011F6C C342                       		exg	d1,d2
00011F6E                            
00011F6E                            loc_10E30:
00011F6E D268 0032                  		add.w	$32(a0),d1
00011F72 3141 0008                  		move.w	d1,8(a0)
00011F76 D468 0030                  		add.w	$30(a0),d2
00011F7A 3142 000C                  		move.w	d2,$C(a0)
00011F7E 4E75                       		rts	
00011F80                            ; ===========================================================================
00011F80                            
00011F80                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011F80 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011F84 0401 0050                  		subi.b	#$50,d1
00011F88 4881                       		ext.w	d1
00011F8A 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011F8E 0402 0050                  		subi.b	#$50,d2
00011F92 4882                       		ext.w	d2
00011F94 0828 0000 0028             		btst	#0,$28(a0)
00011F9A 6700                       		beq.s	loc_10E62
00011F9C 4441                       		neg.w	d1
00011F9E 4442                       		neg.w	d2
00011FA0                            
00011FA0                            loc_10E62:
00011FA0 0828 0001 0028             		btst	#1,$28(a0)
00011FA6 6700                       		beq.s	loc_10E6E
00011FA8 4441                       		neg.w	d1
00011FAA C342                       		exg	d1,d2
00011FAC                            
00011FAC                            loc_10E6E:
00011FAC 4441                       		neg.w	d1
00011FAE D268 0032                  		add.w	$32(a0),d1
00011FB2 3141 0008                  		move.w	d1,8(a0)
00011FB6 D468 0030                  		add.w	$30(a0),d2
00011FBA 3142 000C                  		move.w	d2,$C(a0)
00011FBE 4E75                       		rts	
00011FC0                            ; ===========================================================================
00011FC0                            ; ---------------------------------------------------------------------------
00011FC0                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011FC0                            ; ---------------------------------------------------------------------------
00011FC0                            Map_obj5A:
00011FC0                            	include "_maps\obj5A.asm"
00011FC0                            ; ---------------------------------------------------------------------------
00011FC0                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011FC0                            ; ---------------------------------------------------------------------------
00011FC0 0000                       		dc.w byte_10E84-Map_obj5A
00011FC2 02                         byte_10E84:	dc.b 2
00011FC3 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00011FC8 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011FCE 00                         		even
00011FCE 00                         		even
00011FCE                            
00011FCE                            ; ===========================================================================
00011FCE                            ; ---------------------------------------------------------------------------
00011FCE                            ; Object 5B - blocks that form a staircase (SLZ)
00011FCE                            ; ---------------------------------------------------------------------------
00011FCE                            
00011FCE                            Obj5B:					; XREF: Obj_Index
00011FCE 7000                       		moveq	#0,d0
00011FD0 1028 0024                  		move.b	$24(a0),d0
00011FD4 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011FD8 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011FDC 3028 0030                  		move.w	$30(a0),d0
00011FE0 0240 FF80                  		andi.w	#$FF80,d0
00011FE4 3238 F700                  		move.w	($FFFFF700).w,d1
00011FE8 0441 0080                  		subi.w	#$80,d1
00011FEC 0241 FF80                  		andi.w	#$FF80,d1
00011FF0 9041                       		sub.w	d1,d0
00011FF2 0C40 0280                  		cmpi.w	#$280,d0
00011FF6 6200 C794                  		bhi.w	DeleteObject
00011FFA 6000 C754                  		bra.w	DisplaySprite
00011FFE                            ; ===========================================================================
00011FFE 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00012000 0000                       		dc.w Obj5B_Move-Obj5B_Index
00012002 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00012004                            ; ===========================================================================
00012004                            
00012004                            Obj5B_Main:				; XREF: Obj5B_Index
00012004 5428 0024                  		addq.b	#2,$24(a0)
00012008 7638                       		moveq	#$38,d3
0001200A 7801                       		moveq	#1,d4
0001200C 0828 0000 0022             		btst	#0,$22(a0)
00012012 6700                       		beq.s	loc_10EDA
00012014 763B                       		moveq	#$3B,d3
00012016 78FF                       		moveq	#-1,d4
00012018                            
00012018                            loc_10EDA:
00012018 3428 0008                  		move.w	8(a0),d2
0001201C 2248                       		movea.l	a0,a1
0001201E 7203                       		moveq	#3,d1
00012020 6000                       		bra.s	Obj5B_MakeBlocks
00012022                            ; ===========================================================================
00012022                            
00012022                            Obj5B_Loop:
00012022 6100 CBC8                  		bsr.w	SingleObjLoad2
00012026 6600 0000                  		bne.w	Obj5B_Move
0001202A 137C 0004 0024             		move.b	#4,$24(a1)
00012030                            
00012030                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00012030 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00012034 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001203C 337C 4000 0002             		move.w	#$4000,2(a1)
00012042 137C 0004 0001             		move.b	#4,1(a1)
00012048 137C 0003 0018             		move.b	#3,$18(a1)
0001204E 137C 0010 0019             		move.b	#$10,$19(a1)
00012054 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001205A 3342 0008                  		move.w	d2,8(a1)
0001205E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012064 3368 0008 0030             		move.w	8(a0),$30(a1)
0001206A 3369 000C 0032             		move.w	$C(a1),$32(a1)
00012070 0642 0020                  		addi.w	#$20,d2
00012074 1343 0037                  		move.b	d3,$37(a1)
00012078 2348 003C                  		move.l	a0,$3C(a1)
0001207C D604                       		add.b	d4,d3
0001207E 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00012082                            
00012082                            Obj5B_Move:				; XREF: Obj5B_Index
00012082 7000                       		moveq	#0,d0
00012084 1028 0028                  		move.b	$28(a0),d0
00012088 0240 0007                  		andi.w	#7,d0
0001208C D040                       		add.w	d0,d0
0001208E 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00012092 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00012096                            
00012096                            Obj5B_Solid:				; XREF: Obj5B_Index
00012096 2468 003C                  		movea.l	$3C(a0),a2
0001209A 7000                       		moveq	#0,d0
0001209C 1028 0037                  		move.b	$37(a0),d0
000120A0 1032 0000                  		move.b	(a2,d0.w),d0
000120A4 D068 0032                  		add.w	$32(a0),d0
000120A8 3140 000C                  		move.w	d0,$C(a0)
000120AC 7200                       		moveq	#0,d1
000120AE 1228 0019                  		move.b	$19(a0),d1
000120B2 0641 000B                  		addi.w	#$B,d1
000120B6 343C 0010                  		move.w	#$10,d2
000120BA 363C 0011                  		move.w	#$11,d3
000120BE 3828 0008                  		move.w	8(a0),d4
000120C2 6100 EA5C                  		bsr.w	SolidObject
000120C6 4A04                       		tst.b	d4
000120C8 6A00                       		bpl.s	loc_10F92
000120CA 1544 0036                  		move.b	d4,$36(a2)
000120CE                            
000120CE                            loc_10F92:
000120CE 0828 0003 0022             		btst	#3,$22(a0)
000120D4 6700                       		beq.s	locret_10FA0
000120D6 157C 0001 0036             		move.b	#1,$36(a2)
000120DC                            
000120DC                            locret_10FA0:
000120DC 4E75                       		rts	
000120DE                            ; ===========================================================================
000120DE 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000120E0 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000120E2 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000120E4 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000120E6                            ; ===========================================================================
000120E6                            
000120E6                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000120E6 4A68 0034                  		tst.w	$34(a0)
000120EA 6600                       		bne.s	loc_10FC0
000120EC 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000120F2 6600                       		bne.s	locret_10FBE
000120F4 317C 001E 0034             		move.w	#$1E,$34(a0)
000120FA                            
000120FA                            locret_10FBE:
000120FA 4E75                       		rts	
000120FC                            ; ===========================================================================
000120FC                            
000120FC                            loc_10FC0:
000120FC 5368 0034                  		subq.w	#1,$34(a0)
00012100 66F8                       		bne.s	locret_10FBE
00012102 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012106 4E75                       		rts	
00012108                            ; ===========================================================================
00012108                            
00012108                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00012108 4A68 0034                  		tst.w	$34(a0)
0001210C 6600                       		bne.s	loc_10FE0
0001210E 4A28 0036                  		tst.b	$36(a0)
00012112 6A00                       		bpl.s	locret_10FDE
00012114 317C 003C 0034             		move.w	#$3C,$34(a0)
0001211A                            
0001211A                            locret_10FDE:
0001211A 4E75                       		rts	
0001211C                            ; ===========================================================================
0001211C                            
0001211C                            loc_10FE0:
0001211C 5368 0034                  		subq.w	#1,$34(a0)
00012120 6600                       		bne.s	loc_10FEC
00012122 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012126 4E75                       		rts	
00012128                            ; ===========================================================================
00012128                            
00012128                            loc_10FEC:
00012128 43E8 0038                  		lea	$38(a0),a1
0001212C 3028 0034                  		move.w	$34(a0),d0
00012130 E408                       		lsr.b	#2,d0
00012132 0200 0001                  		andi.b	#1,d0
00012136 12C0                       		move.b	d0,(a1)+
00012138 0A00 0001                  		eori.b	#1,d0
0001213C 12C0                       		move.b	d0,(a1)+
0001213E 0A00 0001                  		eori.b	#1,d0
00012142 12C0                       		move.b	d0,(a1)+
00012144 0A00 0001                  		eori.b	#1,d0
00012148 12C0                       		move.b	d0,(a1)+
0001214A 4E75                       		rts	
0001214C                            ; ===========================================================================
0001214C                            
0001214C                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0001214C 43E8 0038                  		lea	$38(a0),a1
00012150 0C11 0080                  		cmpi.b	#$80,(a1)
00012154 6700                       		beq.s	locret_11038
00012156 5211                       		addq.b	#1,(a1)
00012158 7200                       		moveq	#0,d1
0001215A 1219                       		move.b	(a1)+,d1
0001215C 4841                       		swap	d1
0001215E E289                       		lsr.l	#1,d1
00012160 2401                       		move.l	d1,d2
00012162 E289                       		lsr.l	#1,d1
00012164 2601                       		move.l	d1,d3
00012166 D682                       		add.l	d2,d3
00012168 4841                       		swap	d1
0001216A 4842                       		swap	d2
0001216C 4843                       		swap	d3
0001216E 12C3                       		move.b	d3,(a1)+
00012170 12C2                       		move.b	d2,(a1)+
00012172 12C1                       		move.b	d1,(a1)+
00012174                            
00012174                            locret_11038:
00012174 4E75                       		rts	
00012176 4E75                       		rts	
00012178                            ; ===========================================================================
00012178                            ; ---------------------------------------------------------------------------
00012178                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012178                            ; ---------------------------------------------------------------------------
00012178                            Map_obj5B:
00012178                            	include "_maps\obj5B.asm"
00012178                            ; ---------------------------------------------------------------------------
00012178                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012178                            ; ---------------------------------------------------------------------------
00012178 0000                       		dc.w byte_1103E-Map_obj5B
0001217A 01                         byte_1103E:	dc.b 1
0001217B F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012180                            		even
00012180                            		even
00012180                            
00012180                            ; ===========================================================================
00012180                            ; ---------------------------------------------------------------------------
00012180                            ; Object 5C - metal girders in foreground (SLZ)
00012180                            ; ---------------------------------------------------------------------------
00012180                            
00012180                            Obj5C:					; XREF: Obj_Index
00012180 7000                       		moveq	#0,d0
00012182 1028 0024                  		move.b	$24(a0),d0
00012186 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
0001218A 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
0001218E                            ; ===========================================================================
0001218E 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00012190 0000                       		dc.w Obj5C_Display-Obj5C_Index
00012192                            ; ===========================================================================
00012192                            
00012192                            Obj5C_Main:				; XREF: Obj5C_Index
00012192 5428 0024                  		addq.b	#2,$24(a0)
00012196 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
0001219E 317C 83CC 0002             		move.w	#$83CC,2(a0)
000121A4 117C 0010 0019             		move.b	#$10,$19(a0)
000121AA                            
000121AA                            Obj5C_Display:				; XREF: Obj5C_Index
000121AA 2238 F700                  		move.l	($FFFFF700).w,d1
000121AE D281                       		add.l	d1,d1
000121B0 4841                       		swap	d1
000121B2 4441                       		neg.w	d1
000121B4 3141 0008                  		move.w	d1,8(a0)
000121B8 2238 F704                  		move.l	($FFFFF704).w,d1
000121BC D281                       		add.l	d1,d1
000121BE 4841                       		swap	d1
000121C0 0241 003F                  		andi.w	#$3F,d1
000121C4 4441                       		neg.w	d1
000121C6 0641 0100                  		addi.w	#$100,d1
000121CA 3141 000A                  		move.w	d1,$A(a0)
000121CE 6000 C580                  		bra.w	DisplaySprite
000121D2                            ; ===========================================================================
000121D2                            ; ---------------------------------------------------------------------------
000121D2                            ; Sprite mappings - metal girders in foreground	(SLZ)
000121D2                            ; ---------------------------------------------------------------------------
000121D2                            Map_obj5C:
000121D2                            	include "_maps\obj5C.asm"
000121D2                            ; ---------------------------------------------------------------------------
000121D2                            ; Sprite mappings - metal girders in foreground	(SLZ)
000121D2                            ; ---------------------------------------------------------------------------
000121D2 0000                       		dc.w byte_11098-Map_obj5C
000121D4 09                         byte_11098:	dc.b 9
000121D5 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000121DA A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000121DF C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000121E4 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000121E9 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000121EE 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000121F3 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000121F8 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000121FD 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00012202                            		even
00012202                            		even
00012202                            
00012202                            ; ===========================================================================
00012202                            ; ---------------------------------------------------------------------------
00012202                            ; Object 1B - water surface (LZ)
00012202                            ; ---------------------------------------------------------------------------
00012202                            
00012202                            Obj1B:					; XREF: Obj_Index
00012202 7000                       		moveq	#0,d0
00012204 1028 0024                  		move.b	$24(a0),d0
00012208 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0001220C 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00012210                            ; ===========================================================================
00012210 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00012212 0000                       		dc.w Obj1B_Action-Obj1B_Index
00012214                            ; ===========================================================================
00012214                            
00012214                            Obj1B_Main:				; XREF: Obj1B_Index
00012214 5428 0024                  		addq.b	#2,$24(a0)
00012218 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00012220 317C C300 0002             		move.w	#$C300,2(a0)
00012226 117C 0004 0001             		move.b	#4,1(a0)
0001222C 117C 0080 0019             		move.b	#$80,$19(a0)
00012232 3168 0008 0030             		move.w	8(a0),$30(a0)
00012238                            
00012238                            Obj1B_Action:				; XREF: Obj1B_Index
00012238 3238 F700                  		move.w	($FFFFF700).w,d1
0001223C 0241 FFE0                  		andi.w	#$FFE0,d1
00012240 D268 0030                  		add.w	$30(a0),d1
00012244 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001224A 6700                       		beq.s	loc_11114
0001224C 0641 0020                  		addi.w	#$20,d1
00012250                            
00012250                            loc_11114:
00012250 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00012254 3238 F646                  		move.w	($FFFFF646).w,d1
00012258 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
0001225C 4A28 0032                  		tst.b	$32(a0)
00012260 6600                       		bne.s	Obj1B_Animate
00012262 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00012268 6700                       		beq.s	loc_1114A	; if not, branch
0001226A 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
0001226E 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00012274 6000                       		bra.s	Obj1B_Display
00012276                            ; ===========================================================================
00012276                            
00012276                            Obj1B_Animate:				; XREF: loc_11114
00012276 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001227A 6600                       		bne.s	Obj1B_Display	; if yes, branch
0001227C 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00012282 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00012286                            
00012286                            loc_1114A:				; XREF: loc_11114
00012286 5328 001E                  		subq.b	#1,$1E(a0)
0001228A 6A00                       		bpl.s	Obj1B_Display
0001228C 117C 0007 001E             		move.b	#7,$1E(a0)
00012292 5228 001A                  		addq.b	#1,$1A(a0)
00012296 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
0001229C 6500                       		bcs.s	Obj1B_Display
0001229E 117C 0000 001A             		move.b	#0,$1A(a0)
000122A4                            
000122A4                            Obj1B_Display:
000122A4 6000 C4AA                  		bra.w	DisplaySprite
000122A8                            ; ===========================================================================
000122A8                            ; ---------------------------------------------------------------------------
000122A8                            ; Sprite mappings - water surface (LZ)
000122A8                            ; ---------------------------------------------------------------------------
000122A8                            Map_obj1B:
000122A8                            	include "_maps\obj1B.asm"
000122A8                            ; ---------------------------------------------------------------------------
000122A8                            ; Sprite mappings - water surface (LZ)
000122A8                            ; ---------------------------------------------------------------------------
000122A8 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000122AC 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000122B0 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000122B4 03                         byte_11178:	dc.b 3
000122B5 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000122BA FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000122BF FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000122C4 03                         byte_11188:	dc.b 3
000122C5 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000122CA FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000122CF FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000122D4 03                         byte_11198:	dc.b 3
000122D5 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000122DA FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000122DF FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000122E4 06                         byte_111A8:	dc.b 6
000122E5 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000122EA FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
000122EF FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000122F4 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
000122F9 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000122FE FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00012303 06                         byte_111C7:	dc.b 6
00012304 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012309 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
0001230E FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012313 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00012318 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001231D FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00012322 06                         byte_111E6:	dc.b 6
00012323 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012328 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
0001232D FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012332 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00012337 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001233C FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00012342 00                         		even
00012342 00                         		even
00012342                            
00012342                            ; ===========================================================================
00012342                            ; ---------------------------------------------------------------------------
00012342                            ; Object 0B - pole that	breaks (LZ)
00012342                            ; ---------------------------------------------------------------------------
00012342                            
00012342                            Obj0B:					; XREF: Obj_Index
00012342 7000                       		moveq	#0,d0
00012344 1028 0024                  		move.b	$24(a0),d0
00012348 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
0001234C 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00012350                            ; ===========================================================================
00012350 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00012352 0000                       		dc.w Obj0B_Action-Obj0B_Index
00012354 0000                       		dc.w Obj0B_Display-Obj0B_Index
00012356                            ; ===========================================================================
00012356                            
00012356                            Obj0B_Main:				; XREF: Obj0B_Index
00012356 5428 0024                  		addq.b	#2,$24(a0)
0001235A 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00012362 317C 43DE 0002             		move.w	#$43DE,2(a0)
00012368 117C 0004 0001             		move.b	#4,1(a0)
0001236E 117C 0008 0019             		move.b	#8,$19(a0)
00012374 117C 0004 0018             		move.b	#4,$18(a0)
0001237A 117C 00E1 0020             		move.b	#$E1,$20(a0)
00012380 7000                       		moveq	#0,d0
00012382 1028 0028                  		move.b	$28(a0),d0	; get object type
00012386 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001238A 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
0001238E                            
0001238E                            Obj0B_Action:				; XREF: Obj0B_Index
0001238E 4A28 0032                  		tst.b	$32(a0)
00012392 6700                       		beq.s	Obj0B_Grab
00012394 4A68 0030                  		tst.w	$30(a0)
00012398 6700                       		beq.s	Obj0B_MoveUp
0001239A 5368 0030                  		subq.w	#1,$30(a0)
0001239E 6600                       		bne.s	Obj0B_MoveUp
000123A0 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000123A6 6000                       		bra.s	Obj0B_Release
000123A8                            ; ===========================================================================
000123A8                            
000123A8                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000123A8 43F8 D000                  		lea	($FFFFD000).w,a1
000123AC 3028 000C                  		move.w	$C(a0),d0
000123B0 0440 0018                  		subi.w	#$18,d0
000123B4 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000123BA 6700                       		beq.s	Obj0B_MoveDown
000123BC 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000123C0 B069 000C                  		cmp.w	$C(a1),d0
000123C4 6500                       		bcs.s	Obj0B_MoveDown
000123C6 3340 000C                  		move.w	d0,$C(a1)
000123CA                            
000123CA                            Obj0B_MoveDown:
000123CA 0640 0024                  		addi.w	#$24,d0
000123CE 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
000123D4 6700                       		beq.s	Obj0B_LetGo
000123D6 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000123DA B069 000C                  		cmp.w	$C(a1),d0
000123DE 6400                       		bcc.s	Obj0B_LetGo
000123E0 3340 000C                  		move.w	d0,$C(a1)
000123E4                            
000123E4                            Obj0B_LetGo:
000123E4 1038 F603                  		move.b	($FFFFF603).w,d0
000123E8 0240 0070                  		andi.w	#$70,d0
000123EC 6700                       		beq.s	Obj0B_Display
000123EE                            
000123EE                            Obj0B_Release:				; XREF: Obj0B_Action
000123EE 4228 0020                  		clr.b	$20(a0)
000123F2 5428 0024                  		addq.b	#2,$24(a0)
000123F6 4238 F7C8                  		clr.b	($FFFFF7C8).w
000123FA 4238 F7C9                  		clr.b	($FFFFF7C9).w
000123FE 4228 0032                  		clr.b	$32(a0)
00012402 6000                       		bra.s	Obj0B_Display
00012404                            ; ===========================================================================
00012404                            
00012404                            Obj0B_Grab:				; XREF: Obj0B_Action
00012404 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00012408 6700                       		beq.s	Obj0B_Display	; if not, branch
0001240A 43F8 D000                  		lea	($FFFFD000).w,a1
0001240E 3028 0008                  		move.w	8(a0),d0
00012412 0640 0014                  		addi.w	#$14,d0
00012416 B069 0008                  		cmp.w	8(a1),d0
0001241A 6400                       		bcc.s	Obj0B_Display
0001241C 4228 0021                  		clr.b	$21(a0)
00012420 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00012426 6400                       		bcc.s	Obj0B_Display
00012428 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
0001242C 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00012430 3028 0008                  		move.w	8(a0),d0
00012434 0640 0014                  		addi.w	#$14,d0
00012438 3340 0008                  		move.w	d0,8(a1)
0001243C 08A9 0000 0022             		bclr	#0,$22(a1)
00012442 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00012448 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001244E 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012454 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
0001245A                            
0001245A                            Obj0B_Display:				; XREF: Obj0B_Index
0001245A 6000 E39C                  		bra.w	MarkObjGone
0001245E                            ; ===========================================================================
0001245E                            ; ---------------------------------------------------------------------------
0001245E                            ; Sprite mappings - pole that breaks (LZ)
0001245E                            ; ---------------------------------------------------------------------------
0001245E                            Map_obj0B:
0001245E                            	include "_maps\obj0B.asm"
0001245E                            ; ---------------------------------------------------------------------------
0001245E                            ; Sprite mappings - pole that breaks (LZ)
0001245E                            ; ---------------------------------------------------------------------------
0001245E 0000                       		dc.w byte_11326-Map_obj0B
00012460 0000                       		dc.w byte_11331-Map_obj0B
00012462 02                         byte_11326:	dc.b 2			; normal pole
00012463 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00012468 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001246D 04                         byte_11331:	dc.b 4			; broken pole
0001246E E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00012473 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00012478 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
0001247D 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00012482                            		even
00012482                            		even
00012482                            
00012482                            ; ===========================================================================
00012482                            ; ---------------------------------------------------------------------------
00012482                            ; Object 0C - flapping door (LZ)
00012482                            ; ---------------------------------------------------------------------------
00012482                            
00012482                            Obj0C:					; XREF: Obj_Index
00012482 7000                       		moveq	#0,d0
00012484 1028 0024                  		move.b	$24(a0),d0
00012488 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
0001248C 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00012490                            ; ===========================================================================
00012490 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00012492 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00012494                            ; ===========================================================================
00012494                            
00012494                            Obj0C_Main:				; XREF: Obj0C_Index
00012494 5428 0024                  		addq.b	#2,$24(a0)
00012498 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
000124A0 317C 4328 0002             		move.w	#$4328,2(a0)
000124A6 0028 0004 0001             		ori.b	#4,1(a0)
000124AC 117C 0028 0019             		move.b	#$28,$19(a0)
000124B2 7000                       		moveq	#0,d0
000124B4 1028 0028                  		move.b	$28(a0),d0	; get object type
000124B8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000124BC 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
000124C0                            
000124C0                            Obj0C_OpenClose:			; XREF: Obj0C_Index
000124C0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000124C4 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
000124C6 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
000124CC 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
000124D2 4A28 0001                  		tst.b	1(a0)
000124D6 6A00                       		bpl.s	Obj0C_Solid
000124D8 303C 00BB                  		move.w	#$BB,d0
000124DC 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play door sound
000124E2                            
000124E2                            Obj0C_Solid:
000124E2 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
000124E8 6100 92B4                  		bsr.w	AnimateSprite
000124EC 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
000124F0 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000124F4 6600                       		bne.s	Obj0C_Display	; if yes, branch
000124F6 3038 D008                  		move.w	($FFFFD008).w,d0
000124FA B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
000124FE 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00012500 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012506 323C 0013                  		move.w	#$13,d1
0001250A 343C 0020                  		move.w	#$20,d2
0001250E 3602                       		move.w	d2,d3
00012510 5243                       		addq.w	#1,d3
00012512 3828 0008                  		move.w	8(a0),d4
00012516 6100 E608                  		bsr.w	SolidObject	; make the door	solid
0001251A                            
0001251A                            Obj0C_Display:
0001251A 6000 E2DC                  		bra.w	MarkObjGone
0001251E                            ; ===========================================================================
0001251E                            Ani_obj0C:
0001251E                            	include "_anim\obj0C.asm"
0001251E                            ; ---------------------------------------------------------------------------
0001251E                            ; Animation script - flapping door (LZ)
0001251E                            ; ---------------------------------------------------------------------------
0001251E 0000                       		dc.w byte_113E6-Ani_obj0C
00012520 0000                       		dc.w byte_113EC-Ani_obj0C
00012522 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00012528 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
0001252E                            		even
0001252E                            		even
0001252E                            
0001252E                            ; ---------------------------------------------------------------------------
0001252E                            ; Sprite mappings - flapping door (LZ)
0001252E                            ; ---------------------------------------------------------------------------
0001252E                            Map_obj0C:
0001252E                            	include "_maps\obj0C.asm"
0001252E                            ; ---------------------------------------------------------------------------
0001252E                            ; Sprite mappings - flapping door (LZ)
0001252E                            ; ---------------------------------------------------------------------------
0001252E 0000                       		dc.w byte_113F8-Map_obj0C
00012530 0000                       		dc.w byte_11403-Map_obj0C
00012532 0000                       		dc.w byte_1140E-Map_obj0C
00012534 02                         byte_113F8:	dc.b 2
00012535 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001253A 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001253F 02                         byte_11403:	dc.b 2
00012540 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00012545 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001254A 02                         byte_1140E:	dc.b 2
0001254B D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00012550 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00012556 00                         		even
00012556 00                         		even
00012556                            
00012556                            ; ===========================================================================
00012556                            ; ---------------------------------------------------------------------------
00012556                            ; Object 71 - invisible	solid blocks
00012556                            ; ---------------------------------------------------------------------------
00012556                            
00012556                            Obj71:					; XREF: Obj_Index
00012556 7000                       		moveq	#0,d0
00012558 1028 0024                  		move.b	$24(a0),d0
0001255C 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00012560 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00012564                            ; ===========================================================================
00012564 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00012566 0000                       		dc.w Obj71_Solid-Obj71_Index
00012568                            ; ===========================================================================
00012568                            
00012568                            Obj71_Main:				; XREF: Obj71_Index
00012568 5428 0024                  		addq.b	#2,$24(a0)
0001256C 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00012574 317C 8680 0002             		move.w	#$8680,2(a0)
0001257A 0028 0004 0001             		ori.b	#4,1(a0)
00012580 1028 0028                  		move.b	$28(a0),d0	; get object type
00012584 1200                       		move.b	d0,d1
00012586 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
0001258A 0640 0010                  		addi.w	#$10,d0
0001258E E248                       		lsr.w	#1,d0
00012590 1140 0019                  		move.b	d0,$19(a0)	; set object width
00012594 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00012598 5241                       		addq.w	#1,d1
0001259A E749                       		lsl.w	#3,d1
0001259C 1141 0016                  		move.b	d1,$16(a0)	; set object height
000125A0                            
000125A0                            Obj71_Solid:				; XREF: Obj71_Index
000125A0 6100 C428                  		bsr.w	ChkObjOnScreen
000125A4 6600                       		bne.s	Obj71_ChkDel
000125A6 7200                       		moveq	#0,d1
000125A8 1228 0019                  		move.b	$19(a0),d1
000125AC 0641 000B                  		addi.w	#$B,d1
000125B0 7400                       		moveq	#0,d2
000125B2 1428 0016                  		move.b	$16(a0),d2
000125B6 3602                       		move.w	d2,d3
000125B8 5243                       		addq.w	#1,d3
000125BA 3828 0008                  		move.w	8(a0),d4
000125BE 6100 E5A8                  		bsr.w	SolidObject71
000125C2                            
000125C2                            Obj71_ChkDel:
000125C2 3028 0008                  		move.w	8(a0),d0
000125C6 0240 FF80                  		andi.w	#$FF80,d0
000125CA 3238 F700                  		move.w	($FFFFF700).w,d1
000125CE 0441 0080                  		subi.w	#$80,d1
000125D2 0241 FF80                  		andi.w	#$FF80,d1
000125D6 9041                       		sub.w	d1,d0
000125D8 0C40 0280                  		cmpi.w	#$280,d0
000125DC 6200                       		bhi.s	Obj71_Delete
000125DE 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
000125E2 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
000125E4 4EFA C16A                  		jmp	DisplaySprite	; if yes, display the object
000125E8                            ; ===========================================================================
000125E8                            
000125E8                            Obj71_NoDisplay:
000125E8 4E75                       		rts	
000125EA                            ; ===========================================================================
000125EA                            
000125EA                            Obj71_Delete:
000125EA 4EFA C1A0                  		jmp	DeleteObject
000125EE                            ; ===========================================================================
000125EE                            ; ---------------------------------------------------------------------------
000125EE                            ; Sprite mappings - invisible solid blocks
000125EE                            ; ---------------------------------------------------------------------------
000125EE                            Map_obj71:
000125EE                            	include "_maps\obj71.asm"
000125EE                            ; ---------------------------------------------------------------------------
000125EE                            ; Sprite mappings - invisible solid blocks
000125EE                            ; ---------------------------------------------------------------------------
000125EE 0000                       		dc.w byte_114BC-Map_obj71
000125F0 0000                       		dc.w byte_114D1-Map_obj71
000125F2 0000                       		dc.w byte_114E6-Map_obj71
000125F4 04                         byte_114BC:	dc.b 4
000125F5 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
000125FA F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
000125FF 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00012604 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00012609 04                         byte_114D1:	dc.b 4
0001260A E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
0001260F E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00012614 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00012619 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
0001261E 04                         byte_114E6:	dc.b 4
0001261F E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00012624 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00012629 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
0001262E 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00012634 00                         		even
00012634 00                         		even
00012634                            
00012634                            ; ===========================================================================
00012634                            ; ---------------------------------------------------------------------------
00012634                            ; Object 5D - fans (SLZ)
00012634                            ; ---------------------------------------------------------------------------
00012634                            
00012634                            Obj5D:					; XREF: Obj_Index
00012634 7000                       		moveq	#0,d0
00012636 1028 0024                  		move.b	$24(a0),d0
0001263A 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
0001263E 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012642                            ; ===========================================================================
00012642 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00012644 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012646                            ; ===========================================================================
00012646                            
00012646                            Obj5D_Main:				; XREF: Obj5D_Index
00012646 5428 0024                  		addq.b	#2,$24(a0)
0001264A 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00012652 317C 43A0 0002             		move.w	#$43A0,2(a0)
00012658 0028 0004 0001             		ori.b	#4,1(a0)
0001265E 117C 0010 0019             		move.b	#$10,$19(a0)
00012664 117C 0004 0018             		move.b	#4,$18(a0)
0001266A                            
0001266A                            Obj5D_Delay:				; XREF: Obj5D_Index
0001266A 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00012670 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00012672 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012676 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00012678 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
0001267E 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00012684 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00012686 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
0001268C                            
0001268C                            Obj5D_Blow:
0001268C 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00012690 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00012694 43F8 D000                  		lea	($FFFFD000).w,a1
00012698 3029 0008                  		move.w	8(a1),d0
0001269C 9068 0008                  		sub.w	8(a0),d0
000126A0 0828 0000 0022             		btst	#0,$22(a0)
000126A6 6600                       		bne.s	Obj5D_ChkSonic
000126A8 4440                       		neg.w	d0
000126AA                            
000126AA                            Obj5D_ChkSonic:
000126AA 0640 0050                  		addi.w	#$50,d0
000126AE 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000126B2 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
000126B4 3229 000C                  		move.w	$C(a1),d1
000126B8 0641 0060                  		addi.w	#$60,d1
000126BC 9268 000C                  		sub.w	$C(a0),d1
000126C0 6500                       		bcs.s	Obj5D_Animate
000126C2 0C41 0070                  		cmpi.w	#$70,d1
000126C6 6400                       		bcc.s	Obj5D_Animate
000126C8 0440 0050                  		subi.w	#$50,d0
000126CC 6400                       		bcc.s	loc_1159A
000126CE 4640                       		not.w	d0
000126D0 D040                       		add.w	d0,d0
000126D2                            
000126D2                            loc_1159A:
000126D2 0640 0060                  		addi.w	#$60,d0
000126D6 0828 0000 0022             		btst	#0,$22(a0)
000126DC 6600                       		bne.s	loc_115A8
000126DE 4440                       		neg.w	d0
000126E0                            
000126E0                            loc_115A8:
000126E0 4400                       		neg.b	d0
000126E2 E840                       		asr.w	#4,d0
000126E4 0828 0000 0028             		btst	#0,$28(a0)
000126EA 6700                       		beq.s	Obj5D_MoveSonic
000126EC 4440                       		neg.w	d0
000126EE                            
000126EE                            Obj5D_MoveSonic:
000126EE D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
000126F2                            
000126F2                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
000126F2 5328 001E                  		subq.b	#1,$1E(a0)
000126F6 6A00                       		bpl.s	Obj5D_ChkDel
000126F8 117C 0000 001E             		move.b	#0,$1E(a0)
000126FE 5228 001B                  		addq.b	#1,$1B(a0)
00012702 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00012708 6500                       		bcs.s	loc_115D8
0001270A 117C 0000 001B             		move.b	#0,$1B(a0)
00012710                            
00012710                            loc_115D8:
00012710 7000                       		moveq	#0,d0
00012712 0828 0000 0028             		btst	#0,$28(a0)
00012718 6700                       		beq.s	loc_115E4
0001271A 7002                       		moveq	#2,d0
0001271C                            
0001271C                            loc_115E4:
0001271C D028 001B                  		add.b	$1B(a0),d0
00012720 1140 001A                  		move.b	d0,$1A(a0)
00012724                            
00012724                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012724 6100 C02A                  		bsr.w	DisplaySprite
00012728 3028 0008                  		move.w	8(a0),d0
0001272C 0240 FF80                  		andi.w	#$FF80,d0
00012730 3238 F700                  		move.w	($FFFFF700).w,d1
00012734 0441 0080                  		subi.w	#$80,d1
00012738 0241 FF80                  		andi.w	#$FF80,d1
0001273C 9041                       		sub.w	d1,d0
0001273E 0C40 0280                  		cmpi.w	#$280,d0
00012742 6200 C048                  		bhi.w	DeleteObject
00012746 4E75                       		rts	
00012748                            ; ===========================================================================
00012748                            ; ---------------------------------------------------------------------------
00012748                            ; Sprite mappings - fans (SLZ)
00012748                            ; ---------------------------------------------------------------------------
00012748                            Map_obj5D:
00012748                            	include "_maps\obj5D.asm"
00012748                            ; ---------------------------------------------------------------------------
00012748                            ; Sprite mappings - fans (SLZ)
00012748                            ; ---------------------------------------------------------------------------
00012748 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
0001274C 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012750 0000                       		dc.w byte_1161A-Map_obj5D
00012752 02                         byte_1161A:	dc.b 2
00012753 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00012758 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0001275D 02                         byte_11625:	dc.b 2
0001275E F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012763 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00012768 02                         byte_11630:	dc.b 2
00012769 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
0001276E 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012774 00                         		even
00012774 00                         		even
00012774                            
00012774                            ; ===========================================================================
00012774                            ; ---------------------------------------------------------------------------
00012774                            ; Object 5E - seesaws (SLZ)
00012774                            ; ---------------------------------------------------------------------------
00012774                            
00012774                            Obj5E:					; XREF: Obj_Index
00012774 7000                       		moveq	#0,d0
00012776 1028 0024                  		move.b	$24(a0),d0
0001277A 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
0001277E 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012782 3028 0030                  		move.w	$30(a0),d0
00012786 0240 FF80                  		andi.w	#$FF80,d0
0001278A 3238 F700                  		move.w	($FFFFF700).w,d1
0001278E 0441 0080                  		subi.w	#$80,d1
00012792 0241 FF80                  		andi.w	#$FF80,d1
00012796 9041                       		sub.w	d1,d0
00012798 6B00 BFF2                  		bmi.w	DeleteObject
0001279C 0C40 0280                  		cmpi.w	#$280,d0
000127A0 6200 BFEA                  		bhi.w	DeleteObject
000127A4 6000 BFAA                  		bra.w	DisplaySprite
000127A8                            ; ===========================================================================
000127A8 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
000127AA 0000                       		dc.w Obj5E_Slope-Obj5E_Index
000127AC 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
000127AE 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
000127B0 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000127B2 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000127B4                            ; ===========================================================================
000127B4                            
000127B4                            Obj5E_Main:				; XREF: Obj5E_Index
000127B4 5428 0024                  		addq.b	#2,$24(a0)
000127B8 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000127C0 317C 0374 0002             		move.w	#$374,2(a0)
000127C6 0028 0004 0001             		ori.b	#4,1(a0)
000127CC 117C 0004 0018             		move.b	#4,$18(a0)
000127D2 117C 0030 0019             		move.b	#$30,$19(a0)
000127D8 3168 0008 0030             		move.w	8(a0),$30(a0)
000127DE 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000127E2 6600                       		bne.s	loc_116D2	; if not, branch
000127E4 6100 C406                  		bsr.w	SingleObjLoad2
000127E8 6600                       		bne.s	loc_116D2
000127EA 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000127EE 5C29 0024                  		addq.b	#6,$24(a1)
000127F2 3368 0008 0008             		move.w	8(a0),8(a1)
000127F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000127FE 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012804 2348 003C                  		move.l	a0,$3C(a1)
00012808                            
00012808                            loc_116D2:
00012808 0828 0000 0022             		btst	#0,$22(a0)
0001280E 6700                       		beq.s	loc_116E0
00012810 117C 0002 001A             		move.b	#2,$1A(a0)
00012816                            
00012816                            loc_116E0:
00012816 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
0001281C                            
0001281C                            Obj5E_Slope:				; XREF: Obj5E_Index
0001281C 1228 003A                  		move.b	$3A(a0),d1
00012820 6100 0000                  		bsr.w	loc_11766
00012824 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001282A 0828 0000 001A             		btst	#0,$1A(a0)
00012830 6700                       		beq.s	loc_11702
00012832 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012838                            
00012838                            loc_11702:
00012838 43F8 D000                  		lea	($FFFFD000).w,a1
0001283C 3169 0012 0038             		move.w	$12(a1),$38(a0)
00012842 323C 0030                  		move.w	#$30,d1
00012846 4EB9 0000 842E             		jsr	(SlopeObject).l
0001284C 4E75                       		rts	
0001284E                            ; ===========================================================================
0001284E                            
0001284E                            Obj5E_Slope2:				; XREF: Obj5E_Index
0001284E 6100 0000                  		bsr.w	loc_1174A
00012852 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012858 0828 0000 001A             		btst	#0,$1A(a0)
0001285E 6700                       		beq.s	loc_11730
00012860 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012866                            
00012866                            loc_11730:
00012866 323C 0030                  		move.w	#$30,d1
0001286A 4EB9 0000 84CE             		jsr	(ExitPlatform).l
00012870 323C 0030                  		move.w	#$30,d1
00012874 3428 0008                  		move.w	8(a0),d2
00012878 4EB9 0000 94BE             		jsr	SlopeObject2
0001287E 4E75                       		rts	
00012880                            ; ===========================================================================
00012880                            
00012880                            loc_1174A:				; XREF: Obj5E_Slope2
00012880 7202                       		moveq	#2,d1
00012882 43F8 D000                  		lea	($FFFFD000).w,a1
00012886 3028 0008                  		move.w	8(a0),d0
0001288A 9069 0008                  		sub.w	8(a1),d0
0001288E 6400                       		bcc.s	loc_1175E
00012890 4440                       		neg.w	d0
00012892 7200                       		moveq	#0,d1
00012894                            
00012894                            loc_1175E:
00012894 0C40 0008                  		cmpi.w	#8,d0
00012898 6400                       		bcc.s	loc_11766
0001289A 7201                       		moveq	#1,d1
0001289C                            
0001289C                            loc_11766:
0001289C 1028 001A                  		move.b	$1A(a0),d0
000128A0 B001                       		cmp.b	d1,d0
000128A2 6700                       		beq.s	locret_11790
000128A4 6400                       		bcc.s	loc_11772
000128A6 5400                       		addq.b	#2,d0
000128A8                            
000128A8                            loc_11772:
000128A8 5300                       		subq.b	#1,d0
000128AA 1140 001A                  		move.b	d0,$1A(a0)
000128AE 1141 003A                  		move.b	d1,$3A(a0)
000128B2 08A8 0000 0001             		bclr	#0,1(a0)
000128B8 0828 0001 001A             		btst	#1,$1A(a0)
000128BE 6700                       		beq.s	locret_11790
000128C0 08E8 0000 0001             		bset	#0,1(a0)
000128C6                            
000128C6                            locret_11790:
000128C6 4E75                       		rts	
000128C8                            ; ===========================================================================
000128C8                            
000128C8                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000128C8 5428 0024                  		addq.b	#2,$24(a0)
000128CC 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000128D4 317C 04F0 0002             		move.w	#$4F0,2(a0)
000128DA 0028 0004 0001             		ori.b	#4,1(a0)
000128E0 117C 0004 0018             		move.b	#4,$18(a0)
000128E6 117C 008B 0020             		move.b	#$8B,$20(a0)
000128EC 117C 000C 0019             		move.b	#$C,$19(a0)
000128F2 3168 0008 0030             		move.w	8(a0),$30(a0)
000128F8 0668 0028 0008             		addi.w	#$28,8(a0)
000128FE 3168 000C 0034             		move.w	$C(a0),$34(a0)
00012904 117C 0001 001A             		move.b	#1,$1A(a0)
0001290A 0828 0000 0022             		btst	#0,$22(a0)
00012910 6700                       		beq.s	Obj5E_MoveSpike
00012912 0468 0050 0008             		subi.w	#$50,8(a0)
00012918 117C 0002 003A             		move.b	#2,$3A(a0)
0001291E                            
0001291E                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
0001291E 2268 003C                  		movea.l	$3C(a0),a1
00012922 7000                       		moveq	#0,d0
00012924 1028 003A                  		move.b	$3A(a0),d0
00012928 9029 003A                  		sub.b	$3A(a1),d0
0001292C 6700                       		beq.s	loc_1183E
0001292E 6400                       		bcc.s	loc_117FC
00012930 4400                       		neg.b	d0
00012932                            
00012932                            loc_117FC:
00012932 323C F7E8                  		move.w	#-$818,d1
00012936 343C FEEC                  		move.w	#-$114,d2
0001293A 0C00 0001                  		cmpi.b	#1,d0
0001293E 6700                       		beq.s	loc_11822
00012940 323C F510                  		move.w	#-$AF0,d1
00012944 343C FF34                  		move.w	#-$CC,d2
00012948 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0001294E 6D00                       		blt.s	loc_11822
00012950 323C F200                  		move.w	#-$E00,d1
00012954 343C FF60                  		move.w	#-$A0,d2
00012958                            
00012958                            loc_11822:
00012958 3141 0012                  		move.w	d1,$12(a0)
0001295C 3142 0010                  		move.w	d2,$10(a0)
00012960 3028 0008                  		move.w	8(a0),d0
00012964 9068 0030                  		sub.w	$30(a0),d0
00012968 6400                       		bcc.s	loc_11838
0001296A 4468 0010                  		neg.w	$10(a0)
0001296E                            
0001296E                            loc_11838:
0001296E 5428 0024                  		addq.b	#2,$24(a0)
00012972 6000                       		bra.s	Obj5E_SpikeFall
00012974                            ; ===========================================================================
00012974                            
00012974                            loc_1183E:				; XREF: Obj5E_MoveSpike
00012974 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001297A 7000                       		moveq	#0,d0
0001297C 1029 001A                  		move.b	$1A(a1),d0
00012980 343C 0028                  		move.w	#$28,d2
00012984 3228 0008                  		move.w	8(a0),d1
00012988 9268 0030                  		sub.w	$30(a0),d1
0001298C 6400                       		bcc.s	loc_1185C
0001298E 4442                       		neg.w	d2
00012990 5440                       		addq.w	#2,d0
00012992                            
00012992                            loc_1185C:
00012992 D040                       		add.w	d0,d0
00012994 3228 0034                  		move.w	$34(a0),d1
00012998 D272 0000                  		add.w	(a2,d0.w),d1
0001299C 3141 000C                  		move.w	d1,$C(a0)
000129A0 D468 0030                  		add.w	$30(a0),d2
000129A4 3142 0008                  		move.w	d2,8(a0)
000129A8 4268 000E                  		clr.w	$E(a0)
000129AC 4268 000A                  		clr.w	$A(a0)
000129B0 4E75                       		rts	
000129B2                            ; ===========================================================================
000129B2                            
000129B2                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000129B2 4A68 0012                  		tst.w	$12(a0)
000129B6 6A00                       		bpl.s	loc_1189A
000129B8 6100 BCFE                  		bsr.w	ObjectFall
000129BC 3028 0034                  		move.w	$34(a0),d0
000129C0 0440 002F                  		subi.w	#$2F,d0
000129C4 B068 000C                  		cmp.w	$C(a0),d0
000129C8 6E00                       		bgt.s	locret_11898
000129CA 6100 BCEC                  		bsr.w	ObjectFall
000129CE                            
000129CE                            locret_11898:
000129CE 4E75                       		rts	
000129D0                            ; ===========================================================================
000129D0                            
000129D0                            loc_1189A:				; XREF: Obj5E_SpikeFall
000129D0 6100 BCE6                  		bsr.w	ObjectFall
000129D4 2268 003C                  		movea.l	$3C(a0),a1
000129D8 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000129DE 7000                       		moveq	#0,d0
000129E0 1029 001A                  		move.b	$1A(a1),d0
000129E4 3228 0008                  		move.w	8(a0),d1
000129E8 9268 0030                  		sub.w	$30(a0),d1
000129EC 6400                       		bcc.s	loc_118BA
000129EE 5440                       		addq.w	#2,d0
000129F0                            
000129F0                            loc_118BA:
000129F0 D040                       		add.w	d0,d0
000129F2 3228 0034                  		move.w	$34(a0),d1
000129F6 D272 0000                  		add.w	(a2,d0.w),d1
000129FA B268 000C                  		cmp.w	$C(a0),d1
000129FE 6E00                       		bgt.s	locret_11938
00012A00 2268 003C                  		movea.l	$3C(a0),a1
00012A04 7202                       		moveq	#2,d1
00012A06 4A68 0010                  		tst.w	$10(a0)
00012A0A 6B00                       		bmi.s	Obj5E_Spring
00012A0C 7200                       		moveq	#0,d1
00012A0E                            
00012A0E                            Obj5E_Spring:
00012A0E 1341 003A                  		move.b	d1,$3A(a1)
00012A12 1141 003A                  		move.b	d1,$3A(a0)
00012A16 B229 001A                  		cmp.b	$1A(a1),d1
00012A1A 6700                       		beq.s	loc_1192C
00012A1C 08A9 0003 0022             		bclr	#3,$22(a1)
00012A22 6700                       		beq.s	loc_1192C
00012A24 4229 0025                  		clr.b	$25(a1)
00012A28 137C 0002 0024             		move.b	#2,$24(a1)
00012A2E 45F8 D000                  		lea	($FFFFD000).w,a2
00012A32 3568 0012 0012             		move.w	$12(a0),$12(a2)
00012A38 446A 0012                  		neg.w	$12(a2)
00012A3C 08EA 0001 0022             		bset	#1,$22(a2)
00012A42 08AA 0003 0022             		bclr	#3,$22(a2)
00012A48 422A 003C                  		clr.b	$3C(a2)
00012A4C 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00012A52 157C 0002 0024             		move.b	#2,$24(a2)
00012A58 303C 00CC                  		move.w	#$CC,d0
00012A5C 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play spring sound
00012A62                            
00012A62                            loc_1192C:
00012A62 4268 0010                  		clr.w	$10(a0)
00012A66 4268 0012                  		clr.w	$12(a0)
00012A6A 5528 0024                  		subq.b	#2,$24(a0)
00012A6E                            
00012A6E                            locret_11938:
00012A6E 4E75                       		rts	
00012A70                            ; ===========================================================================
00012A70 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012A7A                            
00012A7A                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00012AAA                            		even
00012AAA                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00012ADA                            		even
00012ADA                            ; ---------------------------------------------------------------------------
00012ADA                            ; Sprite mappings - seesaws (SLZ)
00012ADA                            ; ---------------------------------------------------------------------------
00012ADA                            Map_obj5E:
00012ADA                            	include "_maps\obj5E.asm"
00012ADA                            ; ---------------------------------------------------------------------------
00012ADA                            ; Sprite mappings - seesaws (SLZ)
00012ADA                            ; ---------------------------------------------------------------------------
00012ADA 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012ADE 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012AE2 07                         byte_119AC:	dc.b 7
00012AE3 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00012AE8 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00012AED E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00012AF2 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00012AF7 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00012AFC F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00012B01 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012B06 04                         byte_119D0:	dc.b 4
00012B07 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00012B0C E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012B11 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012B16 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00012B1C 00                         		even
00012B1C 00                         		even
00012B1C                            
00012B1C                            ; ---------------------------------------------------------------------------
00012B1C                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012B1C                            ; ---------------------------------------------------------------------------
00012B1C                            Map_obj5Ea:
00012B1C                            	include "_maps\obj5Eballs.asm"
00012B1C                            ; ---------------------------------------------------------------------------
00012B1C                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012B1C                            ; ---------------------------------------------------------------------------
00012B1C 0000                       		dc.w byte_119EA-Map_obj5Ea
00012B1E 0000                       		dc.w byte_119F0-Map_obj5Ea
00012B20 01                         byte_119EA:	dc.b 1
00012B21 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012B26 01                         byte_119F0:	dc.b 1
00012B27 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00012B2C                            		even
00012B2C                            		even
00012B2C                            
00012B2C                            ; ===========================================================================
00012B2C                            ; ---------------------------------------------------------------------------
00012B2C                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00012B2C                            ; ---------------------------------------------------------------------------
00012B2C                            
00012B2C                            Obj5F:					; XREF: Obj_Index
00012B2C 7000                       		moveq	#0,d0
00012B2E 1028 0024                  		move.b	$24(a0),d0
00012B32 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012B36 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00012B3A                            ; ===========================================================================
00012B3A 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00012B3C 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012B3E 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012B40 0000                       		dc.w Obj5F_End-Obj5F_Index
00012B42                            ; ===========================================================================
00012B42                            
00012B42                            Obj5F_Main:				; XREF: Obj5F_Index
00012B42 5428 0024                  		addq.b	#2,$24(a0)
00012B46 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012B4E 317C 0400 0002             		move.w	#$400,2(a0)
00012B54 0028 0004 0001             		ori.b	#4,1(a0)
00012B5A 117C 0003 0018             		move.b	#3,$18(a0)
00012B60 117C 000C 0019             		move.b	#$C,$19(a0)
00012B66 1028 0028                  		move.b	$28(a0),d0
00012B6A 6700                       		beq.s	loc_11A3C
00012B6C 1140 0024                  		move.b	d0,$24(a0)
00012B70 4E75                       		rts	
00012B72                            ; ===========================================================================
00012B72                            
00012B72                            loc_11A3C:
00012B72 117C 009A 0020             		move.b	#$9A,$20(a0)
00012B78 0868 0000 0022             		bchg	#0,$22(a0)
00012B7E                            
00012B7E                            Obj5F_Action:				; XREF: Obj5F_Index
00012B7E 7000                       		moveq	#0,d0
00012B80 1028 0025                  		move.b	$25(a0),d0
00012B84 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012B88 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012B8C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012B92 6100 8C0A                  		bsr.w	AnimateSprite
00012B96 6000 DC60                  		bra.w	MarkObjGone
00012B9A                            ; ===========================================================================
00012B9A 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012B9C 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012B9E 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012BA0                            ; ===========================================================================
00012BA0                            
00012BA0                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012BA0 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012BA4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012BA8 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012BAA 5428 0025                  		addq.b	#2,$25(a0)
00012BAE 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012BB4 317C 0010 0010             		move.w	#$10,$10(a0)
00012BBA 117C 0001 001C             		move.b	#1,$1C(a0)
00012BC0 0868 0000 0022             		bchg	#0,$22(a0)
00012BC6 6700                       		beq.s	locret_11A96
00012BC8 4468 0010                  		neg.w	$10(a0)		; change direction
00012BCC                            
00012BCC                            locret_11A96:
00012BCC 4E75                       		rts	
00012BCE                            ; ===========================================================================
00012BCE                            
00012BCE                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012BCE 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012BD2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012BD6 6B00                       		bmi.s	loc_11AA8
00012BD8 6100 BB50                  		bsr.w	SpeedToPos
00012BDC 4E75                       		rts	
00012BDE                            ; ===========================================================================
00012BDE                            
00012BDE                            loc_11AA8:
00012BDE 5528 0025                  		subq.b	#2,$25(a0)
00012BE2 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012BE8 4268 0010                  		clr.w	$10(a0)		; stop walking
00012BEC 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012BF2 4E75                       		rts	
00012BF4                            ; ===========================================================================
00012BF4                            
00012BF4                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012BF4 5368 0030                  		subq.w	#1,$30(a0)
00012BF8 6A00                       		bpl.s	locret_11AD0
00012BFA 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012BFE 117C 0000 0024             		move.b	#0,$24(a0)
00012C04                            
00012C04                            locret_11AD0:
00012C04 4E75                       		rts	
00012C06                            ; ===========================================================================
00012C06                            
00012C06                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012C06 3038 D008                  		move.w	($FFFFD008).w,d0
00012C0A 9068 0008                  		sub.w	8(a0),d0
00012C0E 6400                       		bcc.s	loc_11ADE
00012C10 4440                       		neg.w	d0
00012C12                            
00012C12                            loc_11ADE:
00012C12 0C40 0060                  		cmpi.w	#$60,d0
00012C16 6400                       		bcc.s	locret_11B5E
00012C18 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012C1C 9068 000C                  		sub.w	$C(a0),d0
00012C20 6400                       		bcc.s	Obj5F_MakeFuse
00012C22 4440                       		neg.w	d0
00012C24                            
00012C24                            Obj5F_MakeFuse:
00012C24 0C40 0060                  		cmpi.w	#$60,d0
00012C28 6400                       		bcc.s	locret_11B5E
00012C2A 4A78 FE08                  		tst.w	($FFFFFE08).w
00012C2E 6600                       		bne.s	locret_11B5E
00012C30 117C 0004 0025             		move.b	#4,$25(a0)
00012C36 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012C3C 4268 0010                  		clr.w	$10(a0)
00012C40 117C 0002 001C             		move.b	#2,$1C(a0)
00012C46 6100 BFA4                  		bsr.w	SingleObjLoad2
00012C4A 6600                       		bne.s	locret_11B5E
00012C4C 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012C50 3368 0008 0008             		move.w	8(a0),8(a1)
00012C56 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012C5C 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012C62 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012C68 137C 0004 0028             		move.b	#4,$28(a1)
00012C6E 137C 0003 001C             		move.b	#3,$1C(a1)
00012C74 337C 0010 0012             		move.w	#$10,$12(a1)
00012C7A 0828 0001 0022             		btst	#1,$22(a0)
00012C80 6700                       		beq.s	loc_11B54
00012C82 4469 0012                  		neg.w	$12(a1)
00012C86                            
00012C86                            loc_11B54:
00012C86 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012C8C 2348 003C                  		move.l	a0,$3C(a1)
00012C90                            
00012C90                            locret_11B5E:
00012C90 4E75                       		rts	
00012C92                            ; ===========================================================================
00012C92                            
00012C92                            Obj5F_Display:				; XREF: Obj5F_Index
00012C92 6100                       		bsr.s	loc_11B70
00012C94 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012C9A 6100 8B02                  		bsr.w	AnimateSprite
00012C9E 6000 DB58                  		bra.w	MarkObjGone
00012CA2                            ; ===========================================================================
00012CA2                            
00012CA2                            loc_11B70:
00012CA2 5368 0030                  		subq.w	#1,$30(a0)
00012CA6 6B00                       		bmi.s	loc_11B7C
00012CA8 6100 BA80                  		bsr.w	SpeedToPos
00012CAC 4E75                       		rts	
00012CAE                            ; ===========================================================================
00012CAE                            
00012CAE                            loc_11B7C:
00012CAE 4268 0030                  		clr.w	$30(a0)
00012CB2 4228 0024                  		clr.b	$24(a0)
00012CB6 3168 0034 000C             		move.w	$34(a0),$C(a0)
00012CBC 7203                       		moveq	#3,d1
00012CBE 2248                       		movea.l	a0,a1
00012CC0 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012CC6 6000                       		bra.s	Obj5F_MakeShrap
00012CC8                            ; ===========================================================================
00012CC8                            
00012CC8                            Obj5F_Loop:
00012CC8 6100 BF22                  		bsr.w	SingleObjLoad2
00012CCC 6600                       		bne.s	loc_11BCE
00012CCE                            
00012CCE                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012CCE 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012CD2 3368 0008 0008             		move.w	8(a0),8(a1)
00012CD8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012CDE 137C 0006 0028             		move.b	#6,$28(a1)
00012CE4 137C 0004 001C             		move.b	#4,$1C(a1)
00012CEA 335A 0010                  		move.w	(a2)+,$10(a1)
00012CEE 335A 0012                  		move.w	(a2)+,$12(a1)
00012CF2 137C 0098 0020             		move.b	#$98,$20(a1)
00012CF8 08E9 0007 0001             		bset	#7,1(a1)
00012CFE                            
00012CFE                            loc_11BCE:
00012CFE 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012D02                            
00012D02 117C 0006 0024             		move.b	#6,$24(a0)
00012D08                            
00012D08                            Obj5F_End:				; XREF: Obj5F_Index
00012D08 6100 BA20                  		bsr.w	SpeedToPos
00012D0C 0668 0018 0012             		addi.w	#$18,$12(a0)
00012D12 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012D18 6100 8A84                  		bsr.w	AnimateSprite
00012D1C 4A28 0001                  		tst.b	1(a0)
00012D20 6A00 BA6A                  		bpl.w	DeleteObject
00012D24 6000 BA2A                  		bra.w	DisplaySprite
00012D28                            ; ===========================================================================
00012D28 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012D38                            
00012D38                            Ani_obj5F:
00012D38                            	include "_anim\obj5F.asm"
00012D38                            ; ---------------------------------------------------------------------------
00012D38                            ; Animation script - Bomb enemy
00012D38                            ; ---------------------------------------------------------------------------
00012D38 0000                       		dc.w byte_11C12-Ani_obj5F
00012D3A 0000                       		dc.w byte_11C16-Ani_obj5F
00012D3C 0000                       		dc.w byte_11C1C-Ani_obj5F
00012D3E 0000                       		dc.w byte_11C20-Ani_obj5F
00012D40 0000                       		dc.w byte_11C24-Ani_obj5F
00012D42 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012D46 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012D4C 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012D50 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012D54 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012D58                            		even
00012D58                            		even
00012D58                            
00012D58                            ; ---------------------------------------------------------------------------
00012D58                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012D58                            ; ---------------------------------------------------------------------------
00012D58                            Map_obj5F:
00012D58                            	include "_maps\obj5F.asm"
00012D58                            ; ---------------------------------------------------------------------------
00012D58                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012D58                            ; ---------------------------------------------------------------------------
00012D58 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012D5C 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012D60 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012D64 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012D68 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012D6C 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012D70 03                         byte_11C40:	dc.b 3
00012D71 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012D76 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012D7B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012D80 03                         byte_11C50:	dc.b 3
00012D81 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012D86 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012D8B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012D90 03                         byte_11C60:	dc.b 3
00012D91 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012D96 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012D9B E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012DA0 03                         byte_11C70:	dc.b 3
00012DA1 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012DA6 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012DAB E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012DB0 03                         byte_11C80:	dc.b 3
00012DB1 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012DB6 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00012DBB E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012DC0 03                         byte_11C90:	dc.b 3
00012DC1 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012DC6 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00012DCB E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012DD0 02                         byte_11CA0:	dc.b 2
00012DD1 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012DD6 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012DDB 02                         byte_11CAB:	dc.b 2
00012DDC F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012DE1 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012DE6 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012DE7 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012DEC 01                         byte_11CBC:	dc.b 1			; fuse
00012DED E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012DF2 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012DF3 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012DF8 01                         byte_11CC8:	dc.b 1			; fireball
00012DF9 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012DFE                            		even
00012DFE                            		even
00012DFE                            
00012DFE                            ; ===========================================================================
00012DFE                            ; ---------------------------------------------------------------------------
00012DFE                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012DFE                            ; ---------------------------------------------------------------------------
00012DFE                            
00012DFE                            Obj60:					; XREF: Obj_Index
00012DFE 7000                       		moveq	#0,d0
00012E00 1028 0024                  		move.b	$24(a0),d0
00012E04 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012E08 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012E0C                            ; ===========================================================================
00012E0C 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012E0E 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012E10 0000                       		dc.w Obj60_Display-Obj60_Index
00012E12 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012E14 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012E16                            ; ===========================================================================
00012E16                            
00012E16                            Obj60_Main:				; XREF: Obj60_Index
00012E16 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012E1E 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012E24 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012E2A 6700                       		beq.s	loc_11D02
00012E2C 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012E32                            
00012E32                            loc_11D02:
00012E32 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012E38 6600                       		bne.s	loc_11D10
00012E3A 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012E40                            
00012E40                            loc_11D10:
00012E40 0028 0004 0001             		ori.b	#4,1(a0)
00012E46 117C 0004 0018             		move.b	#4,$18(a0)
00012E4C 117C 000B 0020             		move.b	#$B,$20(a0)
00012E52 117C 000C 0019             		move.b	#$C,$19(a0)
00012E58 7400                       		moveq	#0,d2
00012E5A 45E8 0037                  		lea	$37(a0),a2
00012E5E 264A                       		movea.l	a2,a3
00012E60 524A                       		addq.w	#1,a2
00012E62 7203                       		moveq	#3,d1
00012E64                            
00012E64                            Obj60_MakeOrbs:
00012E64 6100 BD86                  		bsr.w	SingleObjLoad2
00012E68 6600                       		bne.s	loc_11D90
00012E6A 5213                       		addq.b	#1,(a3)
00012E6C 3A09                       		move.w	a1,d5
00012E6E 0445 D000                  		subi.w	#-$3000,d5
00012E72 EC4D                       		lsr.w	#6,d5
00012E74 0245 007F                  		andi.w	#$7F,d5
00012E78 14C5                       		move.b	d5,(a2)+
00012E7A 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012E7C 137C 0006 0024             		move.b	#6,$24(a1)
00012E82 2368 0004 0004             		move.l	4(a0),4(a1)
00012E88 3368 0002 0002             		move.w	2(a0),2(a1)
00012E8E 0029 0004 0001             		ori.b	#4,1(a1)
00012E94 137C 0004 0018             		move.b	#4,$18(a1)
00012E9A 137C 0008 0019             		move.b	#8,$19(a1)
00012EA0 137C 0003 001A             		move.b	#3,$1A(a1)
00012EA6 137C 0098 0020             		move.b	#$98,$20(a1)
00012EAC 1342 0026                  		move.b	d2,$26(a1)
00012EB0 0602 0040                  		addi.b	#$40,d2
00012EB4 2348 003C                  		move.l	a0,$3C(a1)
00012EB8 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00012EBC                            
00012EBC                            loc_11D90:
00012EBC 7001                       		moveq	#1,d0
00012EBE 0828 0000 0022             		btst	#0,$22(a0)
00012EC4 6700                       		beq.s	Obj60_Move
00012EC6 4440                       		neg.w	d0
00012EC8                            
00012EC8                            Obj60_Move:
00012EC8 1140 0036                  		move.b	d0,$36(a0)
00012ECC 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012ED2 5428 0024                  		addq.b	#2,$24(a0)
00012ED6 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012EDC 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012EE2 6700                       		beq.s	locret_11DBC	; if not, branch
00012EE4 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012EE8                            
00012EE8                            locret_11DBC:
00012EE8 4E75                       		rts	
00012EEA                            ; ===========================================================================
00012EEA                            
00012EEA                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012EEA 3038 D008                  		move.w	($FFFFD008).w,d0
00012EEE 9068 0008                  		sub.w	8(a0),d0
00012EF2 6400                       		bcc.s	loc_11DCA
00012EF4 4440                       		neg.w	d0
00012EF6                            
00012EF6                            loc_11DCA:
00012EF6 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012EFA 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012EFC 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012F00 9068 000C                  		sub.w	$C(a0),d0
00012F04 6400                       		bcc.s	loc_11DDC
00012F06 4440                       		neg.w	d0
00012F08                            
00012F08                            loc_11DDC:
00012F08 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012F0C 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012F0E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012F12 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012F14 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012F1A                            
00012F1A                            Obj60_Animate:
00012F1A 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012F20 6100 887C                  		bsr.w	AnimateSprite
00012F24 6000 0000                  		bra.w	Obj60_ChkDel
00012F28                            ; ===========================================================================
00012F28                            
00012F28                            Obj60_Display:				; XREF: Obj60_Index
00012F28 6100 B800                  		bsr.w	SpeedToPos
00012F2C                            
00012F2C                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012F2C 3028 0008                  		move.w	8(a0),d0
00012F30 0240 FF80                  		andi.w	#$FF80,d0
00012F34 3238 F700                  		move.w	($FFFFF700).w,d1
00012F38 0441 0080                  		subi.w	#$80,d1
00012F3C 0241 FF80                  		andi.w	#$FF80,d1
00012F40 9041                       		sub.w	d1,d0
00012F42 0C40 0280                  		cmpi.w	#$280,d0
00012F46 6200 0000                  		bhi.w	Obj60_ChkGone
00012F4A 6000 B804                  		bra.w	DisplaySprite
00012F4E                            ; ===========================================================================
00012F4E                            
00012F4E                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012F4E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012F52 7000                       		moveq	#0,d0
00012F54 1028 0023                  		move.b	$23(a0),d0
00012F58 6700                       		beq.s	loc_11E34
00012F5A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012F60                            
00012F60                            loc_11E34:
00012F60 45E8 0037                  		lea	$37(a0),a2
00012F64 7400                       		moveq	#0,d2
00012F66 141A                       		move.b	(a2)+,d2
00012F68 5342                       		subq.w	#1,d2
00012F6A 6500                       		bcs.s	Obj60_Delete
00012F6C                            
00012F6C                            loc_11E40:
00012F6C 7000                       		moveq	#0,d0
00012F6E 101A                       		move.b	(a2)+,d0
00012F70 ED48                       		lsl.w	#6,d0
00012F72 0680 00FF D000             		addi.l	#$FFD000,d0
00012F78 2240                       		movea.l	d0,a1
00012F7A 6100 B812                  		bsr.w	DeleteObject2
00012F7E 51CA FFEC                  		dbf	d2,loc_11E40
00012F82                            
00012F82                            Obj60_Delete:
00012F82 6000 B808                  		bra.w	DeleteObject
00012F86                            ; ===========================================================================
00012F86                            
00012F86                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012F86 2268 003C                  		movea.l	$3C(a0),a1
00012F8A 0C11 0060                  		cmpi.b	#$60,0(a1)
00012F8E 6600 B7FC                  		bne.w	DeleteObject
00012F92 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012F98 6600                       		bne.s	Obj60_Circle
00012F9A 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012FA0 6600                       		bne.s	Obj60_Circle
00012FA2 5428 0024                  		addq.b	#2,$24(a0)
00012FA6 5329 0037                  		subq.b	#1,$37(a1)
00012FAA 6600                       		bne.s	Obj60_FireOrb
00012FAC 5429 0024                  		addq.b	#2,$24(a1)
00012FB0                            
00012FB0                            Obj60_FireOrb:
00012FB0 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012FB6 0829 0000 0022             		btst	#0,$22(a1)
00012FBC 6700                       		beq.s	Obj60_Display2
00012FBE 4468 0010                  		neg.w	$10(a0)
00012FC2                            
00012FC2                            Obj60_Display2:
00012FC2 6000 B78C                  		bra.w	DisplaySprite
00012FC6                            ; ===========================================================================
00012FC6                            
00012FC6                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012FC6 1028 0026                  		move.b	$26(a0),d0
00012FCA 4EB9 0000 3424             		jsr	(CalcSine).l
00012FD0 E841                       		asr.w	#4,d1
00012FD2 D269 0008                  		add.w	8(a1),d1
00012FD6 3141 0008                  		move.w	d1,8(a0)
00012FDA E840                       		asr.w	#4,d0
00012FDC D069 000C                  		add.w	$C(a1),d0
00012FE0 3140 000C                  		move.w	d0,$C(a0)
00012FE4 1029 0036                  		move.b	$36(a1),d0
00012FE8 D128 0026                  		add.b	d0,$26(a0)
00012FEC 6000 B762                  		bra.w	DisplaySprite
00012FF0                            ; ===========================================================================
00012FF0                            
00012FF0                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012FF0 6100 B738                  		bsr.w	SpeedToPos
00012FF4 4A28 0001                  		tst.b	1(a0)
00012FF8 6A00 B792                  		bpl.w	DeleteObject
00012FFC 6000 B752                  		bra.w	DisplaySprite
00013000                            ; ===========================================================================
00013000                            Ani_obj60:
00013000                            	include "_anim\obj60.asm"
00013000                            ; ---------------------------------------------------------------------------
00013000                            ; Animation script - Orbinaut enemy
00013000                            ; ---------------------------------------------------------------------------
00013000 0000                       		dc.w byte_11EDA-Ani_obj60
00013002 0000                       		dc.w byte_11EDE-Ani_obj60
00013004 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00013008 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
0001300E                            		even
0001300E                            		even
0001300E                            
0001300E                            ; ---------------------------------------------------------------------------
0001300E                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001300E                            ; ---------------------------------------------------------------------------
0001300E                            Map_obj60:
0001300E                            	include "_maps\obj60.asm"
0001300E                            ; ---------------------------------------------------------------------------
0001300E                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001300E                            ; ---------------------------------------------------------------------------
0001300E 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00013012 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00013016 01                         byte_11EEC:	dc.b 1
00013017 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001301C 01                         byte_11EF2:	dc.b 1
0001301D F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00013022 01                         byte_11EF8:	dc.b 1
00013023 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00013028 01                         byte_11EFE:	dc.b 1
00013029 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001302E                            		even
0001302E                            		even
0001302E                            
0001302E                            ; ===========================================================================
0001302E                            ; ---------------------------------------------------------------------------
0001302E                            ; Object 16 - harpoon (LZ)
0001302E                            ; ---------------------------------------------------------------------------
0001302E                            
0001302E                            Obj16:					; XREF: Obj_Index
0001302E 7000                       		moveq	#0,d0
00013030 1028 0024                  		move.b	$24(a0),d0
00013034 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00013038 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001303C                            ; ===========================================================================
0001303C 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
0001303E 0000                       		dc.w Obj16_Move-Obj16_Index
00013040 0000                       		dc.w Obj16_Wait-Obj16_Index
00013042                            ; ===========================================================================
00013042                            
00013042                            Obj16_Main:				; XREF: Obj16_Index
00013042 5428 0024                  		addq.b	#2,$24(a0)
00013046 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
0001304E 317C 03CC 0002             		move.w	#$3CC,2(a0)
00013054 0028 0004 0001             		ori.b	#4,1(a0)
0001305A 117C 0004 0018             		move.b	#4,$18(a0)
00013060 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00013066 117C 0014 0019             		move.b	#$14,$19(a0)
0001306C 317C 003C 0030             		move.w	#60,$30(a0)
00013072                            
00013072                            Obj16_Move:				; XREF: Obj16_Index
00013072 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00013078 6100 8724                  		bsr.w	AnimateSprite
0001307C 7000                       		moveq	#0,d0
0001307E 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00013082 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00013088 6000 D76E                  		bra.w	MarkObjGone
0001308C                            ; ===========================================================================
0001308C 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00013092                            ; ===========================================================================
00013092                            
00013092                            Obj16_Wait:				; XREF: Obj16_Index
00013092 5368 0030                  		subq.w	#1,$30(a0)
00013096 6A00                       		bpl.s	Obj16_ChkDel
00013098 317C 003C 0030             		move.w	#60,$30(a0)
0001309E 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000130A2 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000130A8                            
000130A8                            Obj16_ChkDel:
000130A8 6000 D74E                  		bra.w	MarkObjGone
000130AC                            ; ===========================================================================
000130AC                            Ani_obj16:
000130AC                            	include "_anim\obj16.asm"
000130AC                            ; ---------------------------------------------------------------------------
000130AC                            ; Animation script - harpoon (LZ)
000130AC                            ; ---------------------------------------------------------------------------
000130AC 0000                       		dc.w byte_11F8A-Ani_obj16
000130AE 0000                       		dc.w byte_11F8E-Ani_obj16
000130B0 0000                       		dc.w byte_11F92-Ani_obj16
000130B2 0000                       		dc.w byte_11F96-Ani_obj16
000130B4 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000130B8 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000130BC 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000130C0 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000130C4                            		even
000130C4                            		even
000130C4                            
000130C4                            ; ---------------------------------------------------------------------------
000130C4                            ; Sprite mappings - harpoon (LZ)
000130C4                            ; ---------------------------------------------------------------------------
000130C4                            Map_obj16:
000130C4                            	include "_maps\obj16.asm"
000130C4                            ; ---------------------------------------------------------------------------
000130C4                            ; Sprite mappings - harpoon (LZ)
000130C4                            ; ---------------------------------------------------------------------------
000130C4 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000130C8 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000130CC 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000130D0 01                         byte_11FA6:	dc.b 1
000130D1 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000130D6 01                         byte_11FAC:	dc.b 1
000130D7 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000130DC 02                         byte_11FB2:	dc.b 2
000130DD FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000130E2 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000130E7 01                         byte_11FBD:	dc.b 1
000130E8 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000130ED 01                         byte_11FC3:	dc.b 1
000130EE E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000130F3 02                         byte_11FC9:	dc.b 2
000130F4 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000130F9 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000130FE                            		even
000130FE                            		even
000130FE                            
000130FE                            ; ===========================================================================
000130FE                            ; ---------------------------------------------------------------------------
000130FE                            ; Object 61 - blocks (LZ)
000130FE                            ; ---------------------------------------------------------------------------
000130FE                            
000130FE                            Obj61:					; XREF: Obj_Index
000130FE 7000                       		moveq	#0,d0
00013100 1028 0024                  		move.b	$24(a0),d0
00013104 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00013108 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
0001310C                            ; ===========================================================================
0001310C 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
0001310E 0000                       		dc.w Obj61_Action-Obj61_Index
00013110                            
00013110 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00013112 200C                       		dc.b $20, $C
00013114 1010                       		dc.b $10, $10
00013116 1010                       		dc.b $10, $10
00013118                            ; ===========================================================================
00013118                            
00013118                            Obj61_Main:				; XREF: Obj61_Index
00013118 5428 0024                  		addq.b	#2,$24(a0)
0001311C 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00013124 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001312A 117C 0004 0001             		move.b	#4,1(a0)
00013130 117C 0003 0018             		move.b	#3,$18(a0)
00013136 7000                       		moveq	#0,d0
00013138 1028 0028                  		move.b	$28(a0),d0
0001313C E648                       		lsr.w	#3,d0
0001313E 0240 000E                  		andi.w	#$E,d0
00013142 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00013146 115A 0019                  		move.b	(a2)+,$19(a0)
0001314A 1152 0016                  		move.b	(a2),$16(a0)
0001314E E248                       		lsr.w	#1,d0
00013150 1140 001A                  		move.b	d0,$1A(a0)
00013154 3168 0008 0034             		move.w	8(a0),$34(a0)
0001315A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013160 1028 0028                  		move.b	$28(a0),d0
00013164 0200 000F                  		andi.b	#$F,d0
00013168 6700                       		beq.s	Obj61_Action
0001316A 0C00 0007                  		cmpi.b	#7,d0
0001316E 6700                       		beq.s	Obj61_Action
00013170 117C 0001 0038             		move.b	#1,$38(a0)
00013176                            
00013176                            Obj61_Action:				; XREF: Obj61_Index
00013176 3F28 0008                  		move.w	8(a0),-(sp)
0001317A 7000                       		moveq	#0,d0
0001317C 1028 0028                  		move.b	$28(a0),d0
00013180 0240 000F                  		andi.w	#$F,d0
00013184 D040                       		add.w	d0,d0
00013186 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
0001318A 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
0001318E 381F                       		move.w	(sp)+,d4
00013190 4A28 0001                  		tst.b	1(a0)
00013194 6A00                       		bpl.s	Obj61_ChkDel
00013196 7200                       		moveq	#0,d1
00013198 1228 0019                  		move.b	$19(a0),d1
0001319C 0641 000B                  		addi.w	#$B,d1
000131A0 7400                       		moveq	#0,d2
000131A2 1428 0016                  		move.b	$16(a0),d2
000131A6 3602                       		move.w	d2,d3
000131A8 5243                       		addq.w	#1,d3
000131AA 6100 D974                  		bsr.w	SolidObject
000131AE 1144 003F                  		move.b	d4,$3F(a0)
000131B2 6100 0000                  		bsr.w	loc_12180
000131B6                            
000131B6                            Obj61_ChkDel:
000131B6 3028 0034                  		move.w	$34(a0),d0
000131BA 0240 FF80                  		andi.w	#$FF80,d0
000131BE 3238 F700                  		move.w	($FFFFF700).w,d1
000131C2 0441 0080                  		subi.w	#$80,d1
000131C6 0241 FF80                  		andi.w	#$FF80,d1
000131CA 9041                       		sub.w	d1,d0
000131CC 0C40 0280                  		cmpi.w	#$280,d0
000131D0 6200 B5BA                  		bhi.w	DeleteObject
000131D4 6000 B57A                  		bra.w	DisplaySprite
000131D8                            ; ===========================================================================
000131D8 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000131DC 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000131E0 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000131E4 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
000131E8                            ; ===========================================================================
000131E8                            
000131E8                            Obj61_Type00:				; XREF: Obj61_TypeIndex
000131E8 4E75                       		rts	
000131EA                            ; ===========================================================================
000131EA                            
000131EA                            Obj61_Type01:				; XREF: Obj61_TypeIndex
000131EA 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
000131EE 6600                       		bne.s	loc_120D6	; if yes, branch
000131F0 0828 0003 0022             		btst	#3,$22(a0)
000131F6 6700                       		beq.s	locret_120D4
000131F8 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
000131FE                            
000131FE                            locret_120D4:
000131FE 4E75                       		rts	
00013200                            ; ===========================================================================
00013200                            
00013200                            loc_120D6:
00013200 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00013204 66F8                       		bne.s	locret_120D4	; if time remains, branch
00013206 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001320A 4228 0038                  		clr.b	$38(a0)
0001320E 4E75                       		rts	
00013210                            ; ===========================================================================
00013210                            
00013210                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00013210 6100 B518                  		bsr.w	SpeedToPos
00013214 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00013218 6100 0000                  		bsr.w	ObjHitFloor
0001321C 4A41                       		tst.w	d1
0001321E 6A00 0000                  		bpl.w	locret_12106
00013222 5241                       		addq.w	#1,d1
00013224 D368 000C                  		add.w	d1,$C(a0)
00013228 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
0001322C 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013230                            
00013230                            locret_12106:
00013230 4E75                       		rts	
00013232                            ; ===========================================================================
00013232                            
00013232                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00013232 6100 B4F6                  		bsr.w	SpeedToPos
00013236 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
0001323A 6100 0000                  		bsr.w	ObjHitCeiling
0001323E 4A41                       		tst.w	d1
00013240 6A00 0000                  		bpl.w	locret_12126
00013244 9368 000C                  		sub.w	d1,$C(a0)
00013248 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
0001324C 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013250                            
00013250                            locret_12126:
00013250 4E75                       		rts	
00013252                            ; ===========================================================================
00013252                            
00013252                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00013252 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00013258 6600                       		bne.s	locret_12138	; if not, branch
0001325A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001325E 4228 0038                  		clr.b	$38(a0)
00013262                            
00013262                            locret_12138:
00013262 4E75                       		rts	
00013264                            ; ===========================================================================
00013264                            
00013264                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00013264 3038 F646                  		move.w	($FFFFF646).w,d0
00013268 9068 000C                  		sub.w	$C(a0),d0
0001326C 6700                       		beq.s	locret_1217E
0001326E 6400                       		bcc.s	loc_12162
00013270 0C40 FFFE                  		cmpi.w	#-2,d0
00013274 6C00                       		bge.s	loc_1214E
00013276 70FE                       		moveq	#-2,d0
00013278                            
00013278                            loc_1214E:
00013278 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
0001327C 6100 0000                  		bsr.w	ObjHitCeiling
00013280 4A41                       		tst.w	d1
00013282 6A00 0000                  		bpl.w	locret_12160
00013286 9368 000C                  		sub.w	d1,$C(a0)
0001328A                            
0001328A                            locret_12160:
0001328A 4E75                       		rts	
0001328C                            ; ===========================================================================
0001328C                            
0001328C                            loc_12162:				; XREF: Obj61_Type07
0001328C 0C40 0002                  		cmpi.w	#2,d0
00013290 6F00                       		ble.s	loc_1216A
00013292 7002                       		moveq	#2,d0
00013294                            
00013294                            loc_1216A:
00013294 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00013298 6100 0000                  		bsr.w	ObjHitFloor
0001329C 4A41                       		tst.w	d1
0001329E 6A00 0000                  		bpl.w	locret_1217E
000132A2 5241                       		addq.w	#1,d1
000132A4 D368 000C                  		add.w	d1,$C(a0)
000132A8                            
000132A8                            locret_1217E:
000132A8 4E75                       		rts	
000132AA                            ; ===========================================================================
000132AA                            
000132AA                            loc_12180:				; XREF: Obj61_Action
000132AA 4A28 0038                  		tst.b	$38(a0)
000132AE 6700                       		beq.s	locret_121C0
000132B0 0828 0003 0022             		btst	#3,$22(a0)
000132B6 6600                       		bne.s	loc_1219A
000132B8 4A28 003E                  		tst.b	$3E(a0)
000132BC 6700                       		beq.s	locret_121C0
000132BE 5928 003E                  		subq.b	#4,$3E(a0)
000132C2 6000                       		bra.s	loc_121A6
000132C4                            ; ===========================================================================
000132C4                            
000132C4                            loc_1219A:
000132C4 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000132CA 6700                       		beq.s	locret_121C0
000132CC 5828 003E                  		addq.b	#4,$3E(a0)
000132D0                            
000132D0                            loc_121A6:
000132D0 1028 003E                  		move.b	$3E(a0),d0
000132D4 4EB9 0000 3424             		jsr	(CalcSine).l
000132DA 323C 0400                  		move.w	#$400,d1
000132DE C1C1                       		muls.w	d1,d0
000132E0 4840                       		swap	d0
000132E2 D068 0030                  		add.w	$30(a0),d0
000132E6 3140 000C                  		move.w	d0,$C(a0)
000132EA                            
000132EA                            locret_121C0:
000132EA 4E75                       		rts	
000132EC                            ; ===========================================================================
000132EC                            ; ---------------------------------------------------------------------------
000132EC                            ; Sprite mappings - blocks (LZ)
000132EC                            ; ---------------------------------------------------------------------------
000132EC                            Map_obj61:
000132EC                            	include "_maps\obj61.asm"
000132EC                            ; ---------------------------------------------------------------------------
000132EC                            ; Sprite mappings - blocks (LZ)
000132EC                            ; ---------------------------------------------------------------------------
000132EC 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
000132F0 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
000132F4 01                         byte_121CA:	dc.b 1
000132F5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000132FA 02                         byte_121D0:	dc.b 2
000132FB F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00013300 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00013305 01                         byte_121DB:	dc.b 1
00013306 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
0001330B 01                         byte_121E1:	dc.b 1
0001330C F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00013312 00                         		even
00013312 00                         		even
00013312                            
00013312                            ; ===========================================================================
00013312                            ; ---------------------------------------------------------------------------
00013312                            ; Object 62 - gargoyle head (LZ)
00013312                            ; ---------------------------------------------------------------------------
00013312                            
00013312                            Obj62:					; XREF: Obj_Index
00013312 7000                       		moveq	#0,d0
00013314 1028 0024                  		move.b	$24(a0),d0
00013318 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001331C 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00013320 6000 D4D6                  		bra.w	MarkObjGone
00013324                            ; ===========================================================================
00013324 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00013326 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00013328 0000                       		dc.w Obj62_FireBall-Obj62_Index
0001332A 0000                       		dc.w Obj62_AniFire-Obj62_Index
0001332C                            
0001332C 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00013334                            ; ===========================================================================
00013334                            
00013334                            Obj62_Main:				; XREF: Obj62_Index
00013334 5428 0024                  		addq.b	#2,$24(a0)
00013338 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013340 317C 42E9 0002             		move.w	#$42E9,2(a0)
00013346 0028 0004 0001             		ori.b	#4,1(a0)
0001334C 117C 0003 0018             		move.b	#3,$18(a0)
00013352 117C 0010 0019             		move.b	#$10,$19(a0)
00013358 1028 0028                  		move.b	$28(a0),d0	; get object type
0001335C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00013360 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00013366 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001336C 0228 000F 0028             		andi.b	#$F,$28(a0)
00013372                            
00013372                            Obj62_MakeFire:				; XREF: Obj62_Index
00013372 5328 001E                  		subq.b	#1,$1E(a0)
00013376 6600                       		bne.s	Obj62_NoFire
00013378 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001337E 6100 B64A                  		bsr.w	ChkObjOnScreen
00013382 6600                       		bne.s	Obj62_NoFire
00013384 6100 B850                  		bsr.w	SingleObjLoad
00013388 6600                       		bne.s	Obj62_NoFire
0001338A 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
0001338E 5829 0024                  		addq.b	#4,$24(a1)
00013392 3368 0008 0008             		move.w	8(a0),8(a1)
00013398 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001339E 1368 0001 0001             		move.b	1(a0),1(a1)
000133A4 1368 0022 0022             		move.b	$22(a0),$22(a1)
000133AA                            
000133AA                            Obj62_NoFire:
000133AA 4E75                       		rts	
000133AC                            ; ===========================================================================
000133AC                            
000133AC                            Obj62_FireBall:				; XREF: Obj62_Index
000133AC 5428 0024                  		addq.b	#2,$24(a0)
000133B0 117C 0008 0016             		move.b	#8,$16(a0)
000133B6 117C 0008 0017             		move.b	#8,$17(a0)
000133BC 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000133C4 317C 02E9 0002             		move.w	#$2E9,2(a0)
000133CA 0028 0004 0001             		ori.b	#4,1(a0)
000133D0 117C 0004 0018             		move.b	#4,$18(a0)
000133D6 117C 0098 0020             		move.b	#$98,$20(a0)
000133DC 117C 0008 0019             		move.b	#8,$19(a0)
000133E2 117C 0002 001A             		move.b	#2,$1A(a0)
000133E8 5068 000C                  		addq.w	#8,$C(a0)
000133EC 317C 0200 0010             		move.w	#$200,$10(a0)
000133F2 0828 0000 0022             		btst	#0,$22(a0)
000133F8 6600                       		bne.s	Obj62_Sound
000133FA 4468 0010                  		neg.w	$10(a0)
000133FE                            
000133FE                            Obj62_Sound:
000133FE 303C 00AE                  		move.w	#$AE,d0
00013402 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play lava ball sound
00013408                            
00013408                            Obj62_AniFire:				; XREF: Obj62_Index
00013408 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001340C 0200 0007                  		andi.b	#7,d0
00013410 6600                       		bne.s	Obj62_StopFire
00013412 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00013418                            
00013418                            Obj62_StopFire:
00013418 6100 B310                  		bsr.w	SpeedToPos
0001341C 0828 0000 0022             		btst	#0,$22(a0)
00013422 6600                       		bne.s	Obj62_StopFire2
00013424 76F8                       		moveq	#-8,d3
00013426 6100 0000                  		bsr.w	ObjHitWallLeft
0001342A 4A41                       		tst.w	d1
0001342C 6B00 B35E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00013430 4E75                       		rts	
00013432                            ; ===========================================================================
00013432                            
00013432                            Obj62_StopFire2:
00013432 7608                       		moveq	#8,d3
00013434 6100 0000                  		bsr.w	ObjHitWallRight
00013438 4A41                       		tst.w	d1
0001343A 6B00 B350                  		bmi.w	DeleteObject
0001343E 4E75                       		rts	
00013440                            ; ===========================================================================
00013440                            ; ---------------------------------------------------------------------------
00013440                            ; Sprite mappings - gargoyle head (LZ)
00013440                            ; ---------------------------------------------------------------------------
00013440                            Map_obj62:
00013440                            	include "_maps\obj62.asm"
00013440                            ; ---------------------------------------------------------------------------
00013440                            ; Sprite mappings - gargoyle head (LZ)
00013440                            ; ---------------------------------------------------------------------------
00013440 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00013444 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00013448 03                         byte_12320:	dc.b 3
00013449 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
0001344E F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00013453 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00013458 01                         byte_12330:	dc.b 1
00013459 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
0001345E 01                         byte_12336:	dc.b 1
0001345F FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00013464                            		even
00013464                            		even
00013464                            
00013464                            ; ===========================================================================
00013464                            ; ---------------------------------------------------------------------------
00013464                            ; Object 63 - platforms	on a conveyor belt (LZ)
00013464                            ; ---------------------------------------------------------------------------
00013464                            
00013464                            Obj63:					; XREF: Obj_Index
00013464 7000                       		moveq	#0,d0
00013466 1028 0024                  		move.b	$24(a0),d0
0001346A 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
0001346E 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00013472 3028 0030                  		move.w	$30(a0),d0
00013476 0240 FF80                  		andi.w	#$FF80,d0
0001347A 3238 F700                  		move.w	($FFFFF700).w,d1
0001347E 0441 0080                  		subi.w	#$80,d1
00013482 0241 FF80                  		andi.w	#$FF80,d1
00013486 9041                       		sub.w	d1,d0
00013488 0C40 0280                  		cmpi.w	#$280,d0
0001348C 6200                       		bhi.s	loc_1236A
0001348E                            
0001348E                            Obj63_Display:				; XREF: loc_1236A
0001348E 6000 B2C0                  		bra.w	DisplaySprite
00013492                            ; ===========================================================================
00013492                            
00013492                            loc_1236A:				; XREF: Obj63
00013492 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00013498 6600                       		bne.s	loc_12378
0001349A 0C40 FF80                  		cmpi.w	#-$80,d0
0001349E 64EE                       		bcc.s	Obj63_Display
000134A0                            
000134A0                            loc_12378:
000134A0 1028 002F                  		move.b	$2F(a0),d0
000134A4 6A00 B2E6                  		bpl.w	DeleteObject
000134A8 0240 007F                  		andi.w	#$7F,d0
000134AC 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000134B0 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000134B6 6000 B2D4                  		bra.w	DeleteObject
000134BA                            ; ===========================================================================
000134BA 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000134BC 0000                       		dc.w loc_124B2-Obj63_Index
000134BE 0000                       		dc.w loc_124C2-Obj63_Index
000134C0 0000                       		dc.w loc_124DE-Obj63_Index
000134C2                            ; ===========================================================================
000134C2                            
000134C2                            Obj63_Main:				; XREF: Obj63_Index
000134C2 1028 0028                  		move.b	$28(a0),d0
000134C6 6B00 0000                  		bmi.w	loc_12460
000134CA 5428 0024                  		addq.b	#2,$24(a0)
000134CE 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
000134D6 317C 43F6 0002             		move.w	#$43F6,2(a0)
000134DC 0028 0004 0001             		ori.b	#4,1(a0)
000134E2 117C 0010 0019             		move.b	#$10,$19(a0)
000134E8 117C 0004 0018             		move.b	#4,$18(a0)
000134EE 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
000134F4 6600                       		bne.s	loc_123E2
000134F6 5828 0024                  		addq.b	#4,$24(a0)
000134FA 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013500 117C 0001 0018             		move.b	#1,$18(a0)
00013506 6000 0000                  		bra.w	loc_124DE
0001350A                            ; ===========================================================================
0001350A                            
0001350A                            loc_123E2:
0001350A 117C 0004 001A             		move.b	#4,$1A(a0)
00013510 7000                       		moveq	#0,d0
00013512 1028 0028                  		move.b	$28(a0),d0
00013516 3200                       		move.w	d0,d1
00013518 E648                       		lsr.w	#3,d0
0001351A 0240 001E                  		andi.w	#$1E,d0
0001351E 45FA 0000                  		lea	Obj63_Data(pc),a2
00013522 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013526 315A 0038                  		move.w	(a2)+,$38(a0)
0001352A 315A 0030                  		move.w	(a2)+,$30(a0)
0001352E 214A 003C                  		move.l	a2,$3C(a0)
00013532 0241 000F                  		andi.w	#$F,d1
00013536 E549                       		lsl.w	#2,d1
00013538 1141 0038                  		move.b	d1,$38(a0)
0001353C 117C 0004 003A             		move.b	#4,$3A(a0)
00013542 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013546 6700                       		beq.s	loc_1244C
00013548 117C 0001 003B             		move.b	#1,$3B(a0)
0001354E 4428 003A                  		neg.b	$3A(a0)
00013552 7200                       		moveq	#0,d1
00013554 1228 0038                  		move.b	$38(a0),d1
00013558 D228 003A                  		add.b	$3A(a0),d1
0001355C B228 0039                  		cmp.b	$39(a0),d1
00013560 6500                       		bcs.s	loc_12448
00013562 1001                       		move.b	d1,d0
00013564 7200                       		moveq	#0,d1
00013566 4A00                       		tst.b	d0
00013568 6A00                       		bpl.s	loc_12448
0001356A 1228 0039                  		move.b	$39(a0),d1
0001356E 5901                       		subq.b	#4,d1
00013570                            
00013570                            loc_12448:
00013570 1141 0038                  		move.b	d1,$38(a0)
00013574                            
00013574                            loc_1244C:
00013574 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001357A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00013580 6100 0000                  		bsr.w	Obj63_ChangeDir
00013584 6000 0000                  		bra.w	loc_124B2
00013588                            ; ===========================================================================
00013588                            
00013588                            loc_12460:				; XREF: Obj63_Main
00013588 1140 002F                  		move.b	d0,$2F(a0)
0001358C 0240 007F                  		andi.w	#$7F,d0
00013590 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013594 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001359A 6600 B1F0                  		bne.w	DeleteObject
0001359E D040                       		add.w	d0,d0
000135A0 0240 001E                  		andi.w	#$1E,d0
000135A4 45F9 0000 0000             		lea	(ObjPos_LZxpf_Index).l,a2
000135AA D4F2 0000                  		adda.w	(a2,d0.w),a2
000135AE 321A                       		move.w	(a2)+,d1
000135B0 2248                       		movea.l	a0,a1
000135B2 6000                       		bra.s	Obj63_MakePtfms
000135B4                            ; ===========================================================================
000135B4                            
000135B4                            Obj63_Loop:
000135B4 6100 B620                  		bsr.w	SingleObjLoad
000135B8 6600                       		bne.s	loc_124AA
000135BA                            
000135BA                            Obj63_MakePtfms:			; XREF: loc_12460
000135BA 12BC 0063                  		move.b	#$63,0(a1)
000135BE 335A 0008                  		move.w	(a2)+,8(a1)
000135C2 335A 000C                  		move.w	(a2)+,$C(a1)
000135C6 301A                       		move.w	(a2)+,d0
000135C8 1340 0028                  		move.b	d0,$28(a1)
000135CC                            
000135CC                            loc_124AA:
000135CC 51C9 FFE6                  		dbf	d1,Obj63_Loop
000135D0                            
000135D0 588F                       		addq.l	#4,sp
000135D2 4E75                       		rts	
000135D4                            ; ===========================================================================
000135D4                            
000135D4                            loc_124B2:				; XREF: Obj63_Index
000135D4 7200                       		moveq	#0,d1
000135D6 1228 0019                  		move.b	$19(a0),d1
000135DA 4EB9 0000 835A             		jsr	(PlatformObject).l
000135E0 6000 0000                  		bra.w	sub_12502
000135E4                            ; ===========================================================================
000135E4                            
000135E4                            loc_124C2:				; XREF: Obj63_Index
000135E4 7200                       		moveq	#0,d1
000135E6 1228 0019                  		move.b	$19(a0),d1
000135EA 4EB9 0000 84CE             		jsr	(ExitPlatform).l
000135F0 3F28 0008                  		move.w	8(a0),-(sp)
000135F4 6100 0000                  		bsr.w	sub_12502
000135F8 341F                       		move.w	(sp)+,d2
000135FA 4EF9 0000 8A38             		jmp	(MvSonicOnPtfm2).l
00013600                            ; ===========================================================================
00013600                            
00013600                            loc_124DE:				; XREF: Obj63_Index
00013600 3038 FE04                  		move.w	($FFFFFE04).w,d0
00013604 0240 0003                  		andi.w	#3,d0
00013608 6600                       		bne.s	loc_124FC
0001360A 7201                       		moveq	#1,d1
0001360C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013610 6700                       		beq.s	loc_124F2
00013612 4401                       		neg.b	d1
00013614                            
00013614                            loc_124F2:
00013614 D328 001A                  		add.b	d1,$1A(a0)
00013618 0228 0003 001A             		andi.b	#3,$1A(a0)
0001361E                            
0001361E                            loc_124FC:
0001361E 588F                       		addq.l	#4,sp
00013620 6000 D1D6                  		bra.w	MarkObjGone
00013624                            
00013624                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013624                            
00013624                            
00013624                            sub_12502:				; XREF: loc_124B2; loc_124C2
00013624 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00013628 6700                       		beq.s	loc_12520
0001362A 4A28 003B                  		tst.b	$3B(a0)
0001362E 6600                       		bne.s	loc_12520
00013630 117C 0001 003B             		move.b	#1,$3B(a0)
00013636 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
0001363C 4428 003A                  		neg.b	$3A(a0)
00013640 6000                       		bra.s	loc_12534
00013642                            ; ===========================================================================
00013642                            
00013642                            loc_12520:
00013642 3028 0008                  		move.w	8(a0),d0
00013646 B068 0034                  		cmp.w	$34(a0),d0
0001364A 6600                       		bne.s	loc_1256A
0001364C 3028 000C                  		move.w	$C(a0),d0
00013650 B068 0036                  		cmp.w	$36(a0),d0
00013654 6600                       		bne.s	loc_1256A
00013656                            
00013656                            loc_12534:
00013656 7200                       		moveq	#0,d1
00013658 1228 0038                  		move.b	$38(a0),d1
0001365C D228 003A                  		add.b	$3A(a0),d1
00013660 B228 0039                  		cmp.b	$39(a0),d1
00013664 6500                       		bcs.s	loc_12552
00013666 1001                       		move.b	d1,d0
00013668 7200                       		moveq	#0,d1
0001366A 4A00                       		tst.b	d0
0001366C 6A00                       		bpl.s	loc_12552
0001366E 1228 0039                  		move.b	$39(a0),d1
00013672 5901                       		subq.b	#4,d1
00013674                            
00013674                            loc_12552:
00013674 1141 0038                  		move.b	d1,$38(a0)
00013678 2268 003C                  		movea.l	$3C(a0),a1
0001367C 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00013682 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00013688 6100 0000                  		bsr.w	Obj63_ChangeDir
0001368C                            
0001368C                            loc_1256A:
0001368C 6100 B09C                  		bsr.w	SpeedToPos
00013690 4E75                       		rts	
00013692                            ; End of function sub_12502
00013692                            
00013692                            
00013692                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013692                            
00013692                            
00013692                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00013692 7000                       		moveq	#0,d0
00013694 343C FF00                  		move.w	#-$100,d2
00013698 3028 0008                  		move.w	8(a0),d0
0001369C 9068 0034                  		sub.w	$34(a0),d0
000136A0 6400                       		bcc.s	loc_12584
000136A2 4440                       		neg.w	d0
000136A4 4442                       		neg.w	d2
000136A6                            
000136A6                            loc_12584:
000136A6 7200                       		moveq	#0,d1
000136A8 363C FF00                  		move.w	#-$100,d3
000136AC 3228 000C                  		move.w	$C(a0),d1
000136B0 9268 0036                  		sub.w	$36(a0),d1
000136B4 6400                       		bcc.s	loc_12598
000136B6 4441                       		neg.w	d1
000136B8 4443                       		neg.w	d3
000136BA                            
000136BA                            loc_12598:
000136BA B240                       		cmp.w	d0,d1
000136BC 6500                       		bcs.s	loc_125C2
000136BE 3028 0008                  		move.w	8(a0),d0
000136C2 9068 0034                  		sub.w	$34(a0),d0
000136C6 6700                       		beq.s	loc_125AE
000136C8 48C0                       		ext.l	d0
000136CA E180                       		asl.l	#8,d0
000136CC 81C1                       		divs.w	d1,d0
000136CE 4440                       		neg.w	d0
000136D0                            
000136D0                            loc_125AE:
000136D0 3140 0010                  		move.w	d0,$10(a0)
000136D4 3143 0012                  		move.w	d3,$12(a0)
000136D8 4840                       		swap	d0
000136DA 3140 000A                  		move.w	d0,$A(a0)
000136DE 4268 000E                  		clr.w	$E(a0)
000136E2 4E75                       		rts	
000136E4                            ; ===========================================================================
000136E4                            
000136E4                            loc_125C2:				; XREF: Obj63_ChangeDir
000136E4 3228 000C                  		move.w	$C(a0),d1
000136E8 9268 0036                  		sub.w	$36(a0),d1
000136EC 6700                       		beq.s	loc_125D4
000136EE 48C1                       		ext.l	d1
000136F0 E181                       		asl.l	#8,d1
000136F2 83C0                       		divs.w	d0,d1
000136F4 4441                       		neg.w	d1
000136F6                            
000136F6                            loc_125D4:
000136F6 3141 0012                  		move.w	d1,$12(a0)
000136FA 3142 0010                  		move.w	d2,$10(a0)
000136FE 4841                       		swap	d1
00013700 3141 000E                  		move.w	d1,$E(a0)
00013704 4268 000A                  		clr.w	$A(a0)
00013708 4E75                       		rts	
0001370A                            ; End of function Obj63_ChangeDir
0001370A                            
0001370A                            ; ===========================================================================
0001370A 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
0001370C 0000                       		dc.w word_12610-Obj63_Data
0001370E 0000                       		dc.w word_12628-Obj63_Data
00013710 0000                       		dc.w word_1263C-Obj63_Data
00013712 0000                       		dc.w word_12650-Obj63_Data
00013714 0000                       		dc.w word_12668-Obj63_Data
00013716 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00013726 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013732 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013742 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001374A 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
0001375E 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013772 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
0001378A 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
0001379E                            
0001379E                            ; ---------------------------------------------------------------------------
0001379E                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001379E                            ; ---------------------------------------------------------------------------
0001379E                            Map_obj63:
0001379E                            	include "_maps\obj63.asm"
0001379E                            ; ---------------------------------------------------------------------------
0001379E                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001379E                            ; ---------------------------------------------------------------------------
0001379E 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
000137A2 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
000137A6 0000                       		dc.w byte_1269E-Map_obj63
000137A8 01                         byte_12686:	dc.b 1
000137A9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000137AE 01                         byte_1268C:	dc.b 1
000137AF F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000137B4 01                         byte_12692:	dc.b 1
000137B5 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000137BA 01                         byte_12698:	dc.b 1
000137BB F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000137C0 01                         byte_1269E:	dc.b 1
000137C1 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000137C6                            		even
000137C6                            		even
000137C6                            
000137C6                            ; ===========================================================================
000137C6                            ; ---------------------------------------------------------------------------
000137C6                            ; Object 64 - bubbles (LZ)
000137C6                            ; ---------------------------------------------------------------------------
000137C6                            
000137C6                            Obj64:					; XREF: Obj_Index
000137C6 7000                       		moveq	#0,d0
000137C8 1028 0024                  		move.b	$24(a0),d0
000137CC 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000137D0 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000137D4                            ; ===========================================================================
000137D4 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000137D6 0000                       		dc.w Obj64_Animate-Obj64_Index
000137D8 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000137DA 0000                       		dc.w Obj64_Display2-Obj64_Index
000137DC 0000                       		dc.w Obj64_Delete3-Obj64_Index
000137DE 0000                       		dc.w Obj64_BblMaker-Obj64_Index
000137E0                            ; ===========================================================================
000137E0                            
000137E0                            Obj64_Main:				; XREF: Obj64_Index
000137E0 5428 0024                  		addq.b	#2,$24(a0)
000137E4 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
000137EC 317C 8348 0002             		move.w	#$8348,2(a0)
000137F2 117C 0084 0001             		move.b	#$84,1(a0)
000137F8 117C 0010 0019             		move.b	#$10,$19(a0)
000137FE 117C 0001 0018             		move.b	#1,$18(a0)
00013804 1028 0028                  		move.b	$28(a0),d0	; get object type
00013808 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
0001380A 5028 0024                  		addq.b	#8,$24(a0)
0001380E 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00013812 1140 0032                  		move.b	d0,$32(a0)
00013816 1140 0033                  		move.b	d0,$33(a0)
0001381A 117C 0006 001C             		move.b	#6,$1C(a0)
00013820 6000 0000                  		bra.w	Obj64_BblMaker
00013824                            ; ===========================================================================
00013824                            
00013824                            Obj64_Bubble:				; XREF: Obj64_Main
00013824 1140 001C                  		move.b	d0,$1C(a0)
00013828 3168 0008 0030             		move.w	8(a0),$30(a0)
0001382E 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00013834 4EB9 0000 33FE             		jsr	(RandomNumber).l
0001383A 1140 0026                  		move.b	d0,$26(a0)
0001383E                            
0001383E                            Obj64_Animate:				; XREF: Obj64_Index
0001383E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013844 4EB9 0000 B79E             		jsr	AnimateSprite
0001384A 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00013850 6600                       		bne.s	Obj64_ChkWater
00013852 117C 0001 002E             		move.b	#1,$2E(a0)
00013858                            
00013858                            Obj64_ChkWater:				; XREF: Obj64_Index
00013858 3038 F646                  		move.w	($FFFFF646).w,d0
0001385C B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00013860 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00013862                            
00013862                            Obj64_Burst:				; XREF: Obj64_Wobble
00013862 117C 0006 0024             		move.b	#6,$24(a0)
00013868 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
0001386C 6000 0000                  		bra.w	Obj64_Display2
00013870                            ; ===========================================================================
00013870                            
00013870                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00013870 1028 0026                  		move.b	$26(a0),d0
00013874 5228 0026                  		addq.b	#1,$26(a0)
00013878 0240 007F                  		andi.w	#$7F,d0
0001387C 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013882 1031 0000                  		move.b	(a1,d0.w),d0
00013886 4880                       		ext.w	d0
00013888 D068 0030                  		add.w	$30(a0),d0
0001388C 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00013890 4A28 002E                  		tst.b	$2E(a0)
00013894 6700                       		beq.s	Obj64_Display
00013896 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
0001389A 6700                       		beq.s	Obj64_Display	; if not, branch
0001389C                            
0001389C 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000138A0 303C 00AD                  		move.w	#$AD,d0
000138A4 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000138AA 43F8 D000                  		lea	($FFFFD000).w,a1
000138AE 4269 0010                  		clr.w	$10(a1)
000138B2 4269 0012                  		clr.w	$12(a1)
000138B6 4269 0014                  		clr.w	$14(a1)
000138BA 137C 0015 001C             		move.b	#$15,$1C(a1)
000138C0 337C 0023 003E             		move.w	#$23,$3E(a1)
000138C6 137C 0000 003C             		move.b	#0,$3C(a1)
000138CC 08A9 0005 0022             		bclr	#5,$22(a1)
000138D2 08A9 0004 0022             		bclr	#4,$22(a1)
000138D8 0829 0002 0022             		btst	#2,$22(a1)
000138DE 6700 FF82                  		beq.w	Obj64_Burst
000138E2 08A9 0002 0022             		bclr	#2,$22(a1)
000138E8 137C 0013 0016             		move.b	#$13,$16(a1)
000138EE 137C 0009 0017             		move.b	#9,$17(a1)
000138F4 5B69 000C                  		subq.w	#5,$C(a1)
000138F8 6000 FF68                  		bra.w	Obj64_Burst
000138FC                            ; ===========================================================================
000138FC                            
000138FC                            Obj64_Display:				; XREF: Obj64_Wobble
000138FC 6100 AE2C                  		bsr.w	SpeedToPos
00013900 4A28 0001                  		tst.b	1(a0)
00013904 6A00                       		bpl.s	Obj64_Delete
00013906 4EFA AE48                  		jmp	DisplaySprite
0001390A                            ; ===========================================================================
0001390A                            
0001390A                            Obj64_Delete:
0001390A 4EFA AE80                  		jmp	DeleteObject
0001390E                            ; ===========================================================================
0001390E                            
0001390E                            Obj64_Display2:				; XREF: Obj64_Index
0001390E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013914 4EB9 0000 B79E             		jsr	AnimateSprite
0001391A 4A28 0001                  		tst.b	1(a0)
0001391E 6A00                       		bpl.s	Obj64_Delete2
00013920 4EFA AE2E                  		jmp	DisplaySprite
00013924                            ; ===========================================================================
00013924                            
00013924                            Obj64_Delete2:
00013924 4EFA AE66                  		jmp	DeleteObject
00013928                            ; ===========================================================================
00013928                            
00013928                            Obj64_Delete3:				; XREF: Obj64_Index
00013928 6000 AE62                  		bra.w	DeleteObject
0001392C                            ; ===========================================================================
0001392C                            
0001392C                            Obj64_BblMaker:				; XREF: Obj64_Index
0001392C 4A68 0036                  		tst.w	$36(a0)
00013930 6600                       		bne.s	loc_12874
00013932 3038 F646                  		move.w	($FFFFF646).w,d0
00013936 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
0001393A 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
0001393E 4A28 0001                  		tst.b	1(a0)
00013942 6A00 0000                  		bpl.w	Obj64_ChkDel
00013946 5368 0038                  		subq.w	#1,$38(a0)
0001394A 6A00 0000                  		bpl.w	loc_12914
0001394E 317C 0001 0036             		move.w	#1,$36(a0)
00013954                            
00013954                            loc_1283A:
00013954 4EB9 0000 33FE             		jsr	(RandomNumber).l
0001395A 3200                       		move.w	d0,d1
0001395C 0240 0007                  		andi.w	#7,d0
00013960 0C40 0006                  		cmpi.w	#6,d0
00013964 64EE                       		bcc.s	loc_1283A
00013966                            
00013966 1140 0034                  		move.b	d0,$34(a0)
0001396A 0241 000C                  		andi.w	#$C,d1
0001396E 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013974 D2C1                       		adda.w	d1,a1
00013976 2149 003C                  		move.l	a1,$3C(a0)
0001397A 5328 0032                  		subq.b	#1,$32(a0)
0001397E 6A00                       		bpl.s	loc_12872
00013980 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013986 08E8 0007 0036             		bset	#7,$36(a0)
0001398C                            
0001398C                            loc_12872:
0001398C 6000                       		bra.s	loc_1287C
0001398E                            ; ===========================================================================
0001398E                            
0001398E                            loc_12874:				; XREF: Obj64_BblMaker
0001398E 5368 0038                  		subq.w	#1,$38(a0)
00013992 6A00 0000                  		bpl.w	loc_12914
00013996                            
00013996                            loc_1287C:
00013996 4EB9 0000 33FE             		jsr	(RandomNumber).l
0001399C 0240 001F                  		andi.w	#$1F,d0
000139A0 3140 0038                  		move.w	d0,$38(a0)
000139A4 6100 B230                  		bsr.w	SingleObjLoad
000139A8 6600                       		bne.s	loc_128F8
000139AA 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000139AE 3368 0008 0008             		move.w	8(a0),8(a1)
000139B4 4EB9 0000 33FE             		jsr	(RandomNumber).l
000139BA 0240 000F                  		andi.w	#$F,d0
000139BE 5140                       		subq.w	#8,d0
000139C0 D169 0008                  		add.w	d0,8(a1)
000139C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000139CA 7000                       		moveq	#0,d0
000139CC 1028 0034                  		move.b	$34(a0),d0
000139D0 2468 003C                  		movea.l	$3C(a0),a2
000139D4 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000139DA 0828 0007 0036             		btst	#7,$36(a0)
000139E0 6700                       		beq.s	loc_128F8
000139E2 4EB9 0000 33FE             		jsr	(RandomNumber).l
000139E8 0240 0003                  		andi.w	#3,d0
000139EC 6600                       		bne.s	loc_128E4
000139EE 08E8 0006 0036             		bset	#6,$36(a0)
000139F4 6600                       		bne.s	loc_128F8
000139F6 137C 0002 0028             		move.b	#2,$28(a1)
000139FC                            
000139FC                            loc_128E4:
000139FC 4A28 0034                  		tst.b	$34(a0)
00013A00 6600                       		bne.s	loc_128F8
00013A02 08E8 0006 0036             		bset	#6,$36(a0)
00013A08 6600                       		bne.s	loc_128F8
00013A0A 137C 0002 0028             		move.b	#2,$28(a1)
00013A10                            
00013A10                            loc_128F8:
00013A10 5328 0034                  		subq.b	#1,$34(a0)
00013A14 6A00                       		bpl.s	loc_12914
00013A16 4EB9 0000 33FE             		jsr	(RandomNumber).l
00013A1C 0240 007F                  		andi.w	#$7F,d0
00013A20 0640 0080                  		addi.w	#$80,d0
00013A24 D168 0038                  		add.w	d0,$38(a0)
00013A28 4268 0036                  		clr.w	$36(a0)
00013A2C                            
00013A2C                            loc_12914:
00013A2C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013A32 4EB9 0000 B79E             		jsr	AnimateSprite
00013A38                            
00013A38                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00013A38 3028 0008                  		move.w	8(a0),d0
00013A3C 0240 FF80                  		andi.w	#$FF80,d0
00013A40 3238 F700                  		move.w	($FFFFF700).w,d1
00013A44 0441 0080                  		subi.w	#$80,d1
00013A48 0241 FF80                  		andi.w	#$FF80,d1
00013A4C 9041                       		sub.w	d1,d0
00013A4E 0C40 0280                  		cmpi.w	#$280,d0
00013A52 6200 AD38                  		bhi.w	DeleteObject
00013A56 3038 F646                  		move.w	($FFFFF646).w,d0
00013A5A B068 000C                  		cmp.w	$C(a0),d0
00013A5E 6500 ACF0                  		bcs.w	DisplaySprite
00013A62 4E75                       		rts	
00013A64                            ; ===========================================================================
00013A64                            ; bubble production sequence
00013A64                            
00013A64                            ; 0 = small bubble, 1 =	large bubble
00013A64                            
00013A64 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013A76                            
00013A76                            ; ===========================================================================
00013A76                            
00013A76                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013A76 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013A7A 6B00                       		bmi.s	loc_12998
00013A7C 43F8 D000                  		lea	($FFFFD000).w,a1
00013A80 3029 0008                  		move.w	8(a1),d0
00013A84 3228 0008                  		move.w	8(a0),d1
00013A88 0441 0010                  		subi.w	#$10,d1
00013A8C B240                       		cmp.w	d0,d1
00013A8E 6400                       		bcc.s	loc_12998
00013A90 0641 0020                  		addi.w	#$20,d1
00013A94 B240                       		cmp.w	d0,d1
00013A96 6500                       		bcs.s	loc_12998
00013A98 3029 000C                  		move.w	$C(a1),d0
00013A9C 3228 000C                  		move.w	$C(a0),d1
00013AA0 B240                       		cmp.w	d0,d1
00013AA2 6400                       		bcc.s	loc_12998
00013AA4 0641 0010                  		addi.w	#$10,d1
00013AA8 B240                       		cmp.w	d0,d1
00013AAA 6500                       		bcs.s	loc_12998
00013AAC 7001                       		moveq	#1,d0
00013AAE 4E75                       		rts	
00013AB0                            ; ===========================================================================
00013AB0                            
00013AB0                            loc_12998:
00013AB0 7000                       		moveq	#0,d0
00013AB2 4E75                       		rts	
00013AB4                            ; ===========================================================================
00013AB4                            Ani_obj64:
00013AB4                            	include "_anim\obj64.asm"
00013AB4                            ; ---------------------------------------------------------------------------
00013AB4                            ; Animation script - bubbles (LZ)
00013AB4                            ; ---------------------------------------------------------------------------
00013AB4 0000                       		dc.w byte_129AA-Ani_obj64
00013AB6 0000                       		dc.w byte_129B0-Ani_obj64
00013AB8 0000                       		dc.w byte_129B6-Ani_obj64
00013ABA 0000                       		dc.w byte_129BE-Ani_obj64
00013ABC 0000                       		dc.w byte_129BE-Ani_obj64
00013ABE 0000                       		dc.w byte_129C0-Ani_obj64
00013AC0 0000                       		dc.w byte_129C6-Ani_obj64
00013AC2 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00013AC8 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00013ACE 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00013AD6 04FC                       byte_129BE:	dc.b 4,	$FC
00013AD8 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00013ADE 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00013AE4 00                         		even
00013AE4 00                         		even
00013AE4                            
00013AE4                            ; ---------------------------------------------------------------------------
00013AE4                            ; Sprite mappings - bubbles (LZ)
00013AE4                            ; ---------------------------------------------------------------------------
00013AE4                            Map_obj64:
00013AE4                            	include "_maps\obj64.asm"
00013AE4                            ; ---------------------------------------------------------------------------
00013AE4                            ; Sprite mappings - bubbles (LZ)
00013AE4                            ; ---------------------------------------------------------------------------
00013AE4 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00013AE8 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00013AEC 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00013AF0 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00013AF4 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00013AF8 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00013AFC 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013B00 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00013B04 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00013B08 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013B0C 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013B10 0000                       		dc.w byte_12A9C-Map_obj64
00013B12 01                         byte_129FA:	dc.b 1
00013B13 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00013B18 01                         byte_12A00:	dc.b 1
00013B19 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013B1E 01                         byte_12A06:	dc.b 1
00013B1F FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013B24 01                         byte_12A0C:	dc.b 1
00013B25 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00013B2A 01                         byte_12A12:	dc.b 1
00013B2B F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013B30 01                         byte_12A18:	dc.b 1
00013B31 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013B36 01                         byte_12A1E:	dc.b 1
00013B37 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013B3C 04                         byte_12A24:	dc.b 4
00013B3D F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013B42 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013B47 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013B4C 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013B51 04                         byte_12A39:	dc.b 4
00013B52 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013B57 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013B5C 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013B61 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013B66 01                         byte_12A4E:	dc.b 1
00013B67 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013B6C 01                         byte_12A54:	dc.b 1
00013B6D F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013B72 01                         byte_12A5A:	dc.b 1
00013B73 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013B78 01                         byte_12A60:	dc.b 1
00013B79 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013B7E 01                         byte_12A66:	dc.b 1
00013B7F F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013B84 01                         byte_12A6C:	dc.b 1
00013B85 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013B8A 01                         byte_12A72:	dc.b 1
00013B8B F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013B90 01                         byte_12A78:	dc.b 1
00013B91 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013B96 01                         byte_12A7E:	dc.b 1
00013B97 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013B9C 01                         byte_12A84:	dc.b 1
00013B9D F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013BA2 01                         byte_12A8A:	dc.b 1
00013BA3 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013BA8 01                         byte_12A90:	dc.b 1
00013BA9 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013BAE 01                         byte_12A96:	dc.b 1
00013BAF F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00013BB4 00                         byte_12A9C:	dc.b 0
00013BB6 00                         		even
00013BB6 00                         		even
00013BB6                            
00013BB6                            ; ===========================================================================
00013BB6                            ; ---------------------------------------------------------------------------
00013BB6                            ; Object 65 - waterfalls (LZ)
00013BB6                            ; ---------------------------------------------------------------------------
00013BB6                            
00013BB6                            Obj65:					; XREF: Obj_Index
00013BB6 7000                       		moveq	#0,d0
00013BB8 1028 0024                  		move.b	$24(a0),d0
00013BBC 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013BC0 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00013BC4                            ; ===========================================================================
00013BC4 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013BC6 0000                       		dc.w Obj65_Animate-Obj65_Index
00013BC8 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013BCA 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013BCC 0000                       		dc.w loc_12B36-Obj65_Index
00013BCE                            ; ===========================================================================
00013BCE                            
00013BCE                            Obj65_Main:				; XREF: Obj65_Index
00013BCE 5828 0024                  		addq.b	#4,$24(a0)
00013BD2 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013BDA 317C 4259 0002             		move.w	#$4259,2(a0)
00013BE0 0028 0004 0001             		ori.b	#4,1(a0)
00013BE6 117C 0018 0019             		move.b	#$18,$19(a0)
00013BEC 117C 0001 0018             		move.b	#1,$18(a0)
00013BF2 1028 0028                  		move.b	$28(a0),d0	; get object type
00013BF6 6A00                       		bpl.s	loc_12AE6
00013BF8 08E8 0007 0002             		bset	#7,2(a0)
00013BFE                            
00013BFE                            loc_12AE6:
00013BFE 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013C02 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013C06 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013C0A 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013C0C 4228 0018                  		clr.b	$18(a0)
00013C10 5528 0024                  		subq.b	#2,$24(a0)
00013C14 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013C1A 6700                       		beq.s	loc_12B0A	; if not, branch
00013C1C 117C 0006 0024             		move.b	#6,$24(a0)
00013C22                            
00013C22                            loc_12B0A:
00013C22 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013C28 6700                       		beq.s	Obj65_Animate	; if not, branch
00013C2A 117C 0008 0024             		move.b	#8,$24(a0)
00013C30                            
00013C30                            Obj65_Animate:				; XREF: Obj65_Index
00013C30 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013C36 4EB9 0000 B79E             		jsr	AnimateSprite
00013C3C                            
00013C3C                            Obj65_ChkDel:				; XREF: Obj65_Index
00013C3C 6000 CBBA                  		bra.w	MarkObjGone
00013C40                            ; ===========================================================================
00013C40                            
00013C40                            Obj65_FixHeight:			; XREF: Obj65_Index
00013C40 3038 F646                  		move.w	($FFFFF646).w,d0
00013C44 0440 0010                  		subi.w	#$10,d0
00013C48 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013C4C 60E2                       		bra.s	Obj65_Animate
00013C4E                            ; ===========================================================================
00013C4E                            
00013C4E                            loc_12B36:				; XREF: Obj65_Index
00013C4E 08A8 0007 0002             		bclr	#7,2(a0)
00013C54 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013C5A 6600                       		bne.s	Obj65_Animate2
00013C5C 08E8 0007 0002             		bset	#7,2(a0)
00013C62                            
00013C62                            Obj65_Animate2:
00013C62 60CC                       		bra.s	Obj65_Animate
00013C64                            ; ===========================================================================
00013C64                            Ani_obj65:
00013C64                            	include "_anim\obj65.asm"
00013C64                            ; ---------------------------------------------------------------------------
00013C64                            ; Animation script - waterfall (LZ)
00013C64                            ; ---------------------------------------------------------------------------
00013C64 0000                       		dc.w byte_12B4E-Ani_obj65
00013C66 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013C6C 00                         		even
00013C6C 00                         		even
00013C6C                            
00013C6C                            ; ---------------------------------------------------------------------------
00013C6C                            ; Sprite mappings - waterfalls (LZ)
00013C6C                            ; ---------------------------------------------------------------------------
00013C6C                            Map_obj65:
00013C6C                            	include "_maps\obj65.asm"
00013C6C                            ; ---------------------------------------------------------------------------
00013C6C                            ; Sprite mappings - waterfalls (LZ)
00013C6C                            ; ---------------------------------------------------------------------------
00013C6C 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013C70 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013C74 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013C78 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013C7C 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013C80 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013C84 01                         byte_12B6C:	dc.b 1
00013C85 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013C8A 02                         byte_12B72:	dc.b 2
00013C8B F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013C90 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013C95 02                         byte_12B7D:	dc.b 2
00013C96 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013C9B 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013CA0 01                         byte_12B88:	dc.b 1
00013CA1 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013CA6 02                         byte_12B8E:	dc.b 2
00013CA7 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013CAC 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013CB1 01                         byte_12B99:	dc.b 1
00013CB2 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013CB7 01                         byte_12B9F:	dc.b 1
00013CB8 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013CBD 01                         byte_12BA5:	dc.b 1
00013CBE F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013CC3 02                         byte_12BAB:	dc.b 2
00013CC4 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00013CC9 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013CCE 02                         byte_12BB6:	dc.b 2
00013CCF F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00013CD4 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00013CD9 02                         byte_12BC1:	dc.b 2
00013CDA F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013CDF F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013CE4 02                         byte_12BCC:	dc.b 2
00013CE5 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013CEA F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013CF0 00                         		even
00013CF0 00                         		even
00013CF0                            
00013CF0                            ; ===========================================================================
00013CF0                            ; ---------------------------------------------------------------------------
00013CF0                            ; Object 01 - Sonic
00013CF0                            ; ---------------------------------------------------------------------------
00013CF0                            
00013CF0                            Obj01:					; XREF: Obj_Index
00013CF0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00013CF4 6700                       		beq.s	Obj01_Normal	; if not, branch
00013CF6 4EF9 0000 0000             		jmp	DebugMode
00013CFC                            ; ===========================================================================
00013CFC                            
00013CFC                            Obj01_Normal:
00013CFC 7000                       		moveq	#0,d0
00013CFE 1028 0024                  		move.b	$24(a0),d0
00013D02 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013D06 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013D0A                            ; ===========================================================================
00013D0A 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013D0C 0000                       		dc.w Obj01_Control-Obj01_Index
00013D0E 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013D10 0000                       		dc.w Obj01_Death-Obj01_Index
00013D12 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013D14                            ; ===========================================================================
00013D14                            
00013D14                            Player_Maps:
00013D14 0000 0000                  	dc.l	Map_Sonic
00013D18 0000 0000                  	dc.l	Map_Sonic ; gronic
00013D1C 0000 0000                  	dc.l	Map_Sonic ; anakama
00013D20 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
00013D24                            	; insert player mapping here
00013D24                            	
00013D24                            Obj01_Main:				; XREF: Obj01_Index
00013D24 5428 0024                  		addq.b	#2,$24(a0)
00013D28 117C 0013 0016             		move.b	#$13,$16(a0)
00013D2E 117C 0009 0017             		move.b	#9,$17(a0)
00013D34                            		
00013D34 7000                       		moveq	#0,d0
00013D36 1038 FFE8                  		move.b	(v_character),d0
00013D3A E548                       		lsl.w	#2,d0
00013D3C 43FA FFD6                  		lea 	Player_Maps(pc),a1
00013D40 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
00013D46                            		
00013D46 317C 0780 0002             		move.w	#$780,2(a0)
00013D4C 117C 0002 0018             		move.b	#2,$18(a0)
00013D52 117C 0018 0019             		move.b	#$18,$19(a0)
00013D58 117C 0004 0001             		move.b	#4,1(a0)
00013D5E 31FC 0FFF F760             		move.w	#$FFF,($FFFFF760).w ; Sonic's top speed
00013D64 31FC 000F F762             		move.w	#$F,($FFFFF762).w ; Sonic's acceleration
00013D6A 31FC 0AAA F764             		move.w	#$AAA,($FFFFF764).w ; Sonic's deceleration
00013D70                            
00013D70                            Obj01_Control:				; XREF: Obj01_Index
00013D70 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013D74 6700                       		beq.s	loc_12C58	; if not, branch
00013D76 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013D7C 6700                       		beq.s	loc_12C58	; if not, branch
00013D7E 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013D84 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013D88 4E75                       		rts	
00013D8A                            ; ===========================================================================
00013D8A                            
00013D8A                            loc_12C58:
00013D8A 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013D8E 6600                       		bne.s	loc_12C64	; if yes, branch
00013D90 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013D96                            
00013D96                            loc_12C64:
00013D96 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013D9C 6600                       		bne.s	loc_12C7E	; if yes, branch
00013D9E 7000                       		moveq	#0,d0
00013DA0 1028 0022                  		move.b	$22(a0),d0
00013DA4 0240 0006                  		andi.w	#6,d0
00013DA8 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013DAC 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013DB0                            
00013DB0                            loc_12C7E:
00013DB0 6100                       		bsr.s	Sonic_Display
00013DB2 6100 0000                  		bsr.w	Sonic_RecordPos
00013DB6 6100 0000                  		bsr.w	Sonic_Water
00013DBA 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013DC0 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00013DC6 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013DCA 6700                       		beq.s	loc_12CA6
00013DCC 4A28 001C                  		tst.b	$1C(a0)
00013DD0 6600                       		bne.s	loc_12CA6
00013DD2 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013DD8                            
00013DD8                            loc_12CA6:
00013DD8 6100 0000                  		bsr.w	Sonic_Animate
00013DDC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013DE0 6B00                       		bmi.s	loc_12CB6
00013DE2 4EB9 0000 0000             		jsr	TouchResponse
00013DE8                            
00013DE8                            loc_12CB6:
00013DE8 6100 0000                  		bsr.w	Sonic_Loops
00013DEC 6100 0000                  		bsr.w	LoadSonicDynPLC
00013DF0 4E75                       		rts	
00013DF2                            ; ===========================================================================
00013DF2 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00013DF4 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00013DF6 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013DF8 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013DFA                            ; ---------------------------------------------------------------------------
00013DFA                            ; Music	to play	after invincibility wears off
00013DFA                            ; ---------------------------------------------------------------------------
00013DFA                            ; ===========================================================================
00013DFA                            
00013DFA                            Sonic_Display:				; XREF: loc_12C7E
00013DFA 3028 0030                  		move.w	$30(a0),d0
00013DFE 6700                       		beq.s	Obj01_Display
00013E00 5368 0030                  		subq.w	#1,$30(a0)
00013E04 E648                       		lsr.w	#3,d0
00013E06 6400                       		bcc.s	Obj01_ChkInvin
00013E08                            
00013E08                            Obj01_Display:
00013E08 4EBA A946                  		jsr	DisplaySprite
00013E0C                            
00013E0C                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013E0C                             
00013E0C                            Obj01_ChkInvin:
00013E0C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013E10 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013E14 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013E18 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013E1C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013E20 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013E24 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013E28 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013E2C 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013E32 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013E36 7000                       		moveq	#0,d0
00013E38 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013E3C                             
00013E3C 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013E42 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013E44 43F9 0000 4482             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013E4A 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013E4C                             
00013E4C                            Obj01_GetBgm2:
00013E4C 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013E52 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013E54 43F9 0000 448A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013E5A 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013E5C                             
00013E5C                            Obj01_GetBgm3:
00013E5C 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013E62 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013E64 43F9 0000 4492             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013E6A 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013E6C                             
00013E6C                            Obj01_GetBgm4:
00013E6C 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013E72 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013E74 43F9 0000 449A             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013E7A                             
00013E7A                            Obj01_PlayMusic:
00013E7A 1031 0000                  		move.b	(a1,d0.w),d0
00013E7E 4EB9 0000 1C7C             		jsr	(PlaySound).l	; play normal music
00013E84                             
00013E84                            ; NineKode ends here.
00013E84                            
00013E84                            Obj01_RmvInvin:
00013E84 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013E8A                            
00013E8A                            Obj01_ChkShoes:
00013E8A 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013E8E 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013E90 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013E94 6700                       		beq.s	Obj01_ExitChk
00013E96 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013E9A 6600                       		bne.s	Obj01_ExitChk
00013E9C 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013EA2 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013EA8 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013EAE 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013EB4 303C 00E3                  		move.w	#$E3,d0
00013EB8 4EF9 0000 1C7C             		jmp	(PlaySound).l	; run music at normal speed
00013EBE                            ; ===========================================================================
00013EBE                            
00013EBE                            Obj01_ExitChk:
00013EBE 4E75                       		rts	
00013EC0                            
00013EC0                            ; ---------------------------------------------------------------------------
00013EC0                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013EC0                            ; ---------------------------------------------------------------------------
00013EC0                            
00013EC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EC0                            
00013EC0                            
00013EC0                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00013EC0 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00013EC4 43F8 CB00                  		lea	($FFFFCB00).w,a1
00013EC8 43F1 0000                  		lea	(a1,d0.w),a1
00013ECC 32E8 0008                  		move.w	8(a0),(a1)+
00013ED0 32E8 000C                  		move.w	$C(a0),(a1)+
00013ED4 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00013ED8 4E75                       		rts	
00013EDA                            ; End of function Sonic_RecordPos
00013EDA                            
00013EDA                            ; ---------------------------------------------------------------------------
00013EDA                            ; Subroutine for Sonic when he's underwater
00013EDA                            ; ---------------------------------------------------------------------------
00013EDA                            
00013EDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EDA                            
00013EDA                            
00013EDA                            Sonic_Water:				; XREF: loc_12C7E
00013EDA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013EE0 6700                       		beq.s	Obj01_InWater	; if yes, branch
00013EE2                            
00013EE2                            locret_12D80:
00013EE2 4E75                       		rts	
00013EE4                            ; ===========================================================================
00013EE4                            
00013EE4                            Obj01_InWater:
00013EE4 3038 F646                  		move.w	($FFFFF646).w,d0
00013EE8 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013EEC 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013EEE 08E8 0006 0022             		bset	#6,$22(a0)
00013EF4 66EC                       		bne.s	locret_12D80
00013EF6 6100 0000                  		bsr.w	ResumeMusic
00013EFA 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013F00 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013F06 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013F0C 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013F12 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013F18 E0E8 0010                  		asr	$10(a0)
00013F1C E0E8 0012                  		asr	$12(a0)
00013F20 E0E8 0012                  		asr	$12(a0)
00013F24 67BC                       		beq.s	locret_12D80
00013F26 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013F2C 303C 00AA                  		move.w	#$AA,d0
00013F30 4EF9 0000 1C82             		jmp	(PlaySound_Special).l ;	play splash sound
00013F36                            ; ===========================================================================
00013F36                            
00013F36                            Obj01_OutWater:
00013F36 08A8 0006 0022             		bclr	#6,$22(a0)
00013F3C 67A4                       		beq.s	locret_12D80
00013F3E 6100 0000                  		bsr.w	ResumeMusic
00013F42 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013F48 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013F4E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013F54 E1E8 0012                  		asl	$12(a0)
00013F58 6700 FF88                  		beq.w	locret_12D80
00013F5C 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013F62 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013F68 6E00                       		bgt.s	loc_12E0E
00013F6A 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013F70                            
00013F70                            loc_12E0E:
00013F70 303C 00AA                  		move.w	#$AA,d0
00013F74 4EF9 0000 1C82             		jmp	(PlaySound_Special).l ;	play splash sound
00013F7A                            ; End of function Sonic_Water
00013F7A                            
00013F7A                            ; ===========================================================================
00013F7A                            ; ---------------------------------------------------------------------------
00013F7A                            ; Modes	for controlling	Sonic
00013F7A                            ; ---------------------------------------------------------------------------
00013F7A                            
00013F7A                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013F7A 6100 0000                  		bsr.w	Sonic_Jump
00013F7E 6100 0000                  		bsr.w	Sonic_SlopeResist
00013F82 6100 0000                  		bsr.w	Sonic_Move
00013F86 6100 0000                  		bsr.w	Sonic_Roll
00013F8A 6100 0000                  		bsr.w	Sonic_LevelBound
00013F8E 4EBA A79A                  		jsr	SpeedToPos
00013F92 6100 0000                  		bsr.w	Sonic_AnglePos
00013F96 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013F9A 4E75                       		rts	
00013F9C                            ; ===========================================================================
00013F9C                            
00013F9C                            Obj01_MdJump:				; XREF: Obj01_Modes
00013F9C 6100 0000                  		bsr.w	Sonic_JumpHeight
00013FA0 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013FA4 6100 0000                  		bsr.w	Sonic_LevelBound
00013FA8 4EBA A70E                  		jsr	ObjectFall
00013FAC 0828 0006 0022             		btst	#6,$22(a0)
00013FB2 6700                       		beq.s	loc_12E5C
00013FB4 0468 0028 0012             		subi.w	#$28,$12(a0)
00013FBA                            
00013FBA                            loc_12E5C:
00013FBA 6100 0000                  		bsr.w	Sonic_JumpAngle
00013FBE 6100 0000                  		bsr.w	Sonic_Floor
00013FC2 4E75                       		rts	
00013FC4                            ; ===========================================================================
00013FC4                            
00013FC4                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013FC4 6100 0000                  		bsr.w	Sonic_Jump
00013FC8 6100 0000                  		bsr.w	Sonic_RollRepel
00013FCC 6100 0000                  		bsr.w	Sonic_RollSpeed
00013FD0 6100 0000                  		bsr.w	Sonic_LevelBound
00013FD4 4EBA A754                  		jsr	SpeedToPos
00013FD8 6100 0000                  		bsr.w	Sonic_AnglePos
00013FDC 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013FE0 4E75                       		rts	
00013FE2                            ; ===========================================================================
00013FE2                            
00013FE2                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013FE2 6100 0000                  		bsr.w	Sonic_JumpHeight
00013FE6 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013FEA 6100 0000                  		bsr.w	Sonic_LevelBound
00013FEE 6100 0000                  		bsr.w	Sonic_AirUnroll
00013FF2 4EBA A6C4                  		jsr	ObjectFall
00013FF6 0828 0006 0022             		btst	#6,$22(a0)
00013FFC 6700                       		beq.s	loc_12EA6
00013FFE 0468 0028 0012             		subi.w	#$28,$12(a0)
00014004                            
00014004                            loc_12EA6:
00014004 6100 0000                  		bsr.w	Sonic_JumpAngle
00014008 6100 0000                  		bsr.w	Sonic_Floor
0001400C 4E75                       		rts	
0001400E                            ; ---------------------------------------------------------------------------
0001400E                            ; Subroutine to	make Sonic walk/run
0001400E                            ; ---------------------------------------------------------------------------
0001400E                            
0001400E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001400E                            
0001400E                            
0001400E                            Sonic_Move:				; XREF: Obj01_MdNormal
0001400E 3C38 F760                  		move.w	($FFFFF760).w,d6
00014012 3A38 F762                  		move.w	($FFFFF762).w,d5
00014016 3838 F764                  		move.w	($FFFFF764).w,d4
0001401A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001401E 6600 0000                  		bne.w	loc_12FEE
00014022 4A68 003E                  		tst.w	$3E(a0)
00014026 6600 0000                  		bne.w	Obj01_ResetScr
0001402A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014030 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00014032 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00014038 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
0001403A 6100 0000                  		bsr.w	Sonic_MoveLeft
0001403E                            
0001403E                            Obj01_NotLeft:
0001403E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014044 6700                       		beq.s	Obj01_NotRight	; if not, branch
00014046 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001404C 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
0001404E 6100 0000                  		bsr.w	Sonic_MoveLeft
00014052 6000                       		bra.s	Obj01_NotRight
00014054                            
00014054                            Obj01_MoveRight:
00014054 6100 0000                  		bsr.w	Sonic_MoveRight
00014058                            
00014058                            Obj01_NotRight:
00014058 1028 0026                  		move.b	$26(a0),d0
0001405C 0600 0020                  		addi.b	#$20,d0
00014060 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00014064 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014068 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001406C 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014070 08A8 0005 0022             		bclr	#5,$22(a0)
00014076 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001407C 0828 0003 0022             		btst	#3,$22(a0)
00014082 6700                       		beq.s	Sonic_Balance
00014084 7000                       		moveq	#0,d0
00014086 1028 003D                  		move.b	$3D(a0),d0
0001408A ED48                       		lsl.w	#6,d0
0001408C 43F8 D000                  		lea	($FFFFD000).w,a1
00014090 43F1 0000                  		lea	(a1,d0.w),a1
00014094 4A29 0022                  		tst.b	$22(a1)
00014098 6B00                       		bmi.s	Sonic_LookUp
0001409A 7200                       		moveq	#0,d1
0001409C 1229 0019                  		move.b	$19(a1),d1
000140A0 3401                       		move.w	d1,d2
000140A2 D442                       		add.w	d2,d2
000140A4 5942                       		subq.w	#4,d2
000140A6 D268 0008                  		add.w	8(a0),d1
000140AA 9269 0008                  		sub.w	8(a1),d1
000140AE 0C41 0004                  		cmpi.w	#4,d1
000140B2 6D00                       		blt.s	loc_12F6A
000140B4 B242                       		cmp.w	d2,d1
000140B6 6C00                       		bge.s	loc_12F5A
000140B8 6000                       		bra.s	Sonic_LookUp
000140BA                            ; ===========================================================================
000140BA                            
000140BA                            Sonic_Balance:
000140BA 4EB9 0000 0000             		jsr	ObjHitFloor
000140C0 0C41 000C                  		cmpi.w	#$C,d1
000140C4 6D00                       		blt.s	Sonic_LookUp
000140C6 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000140CC 6600                       		bne.s	loc_12F62
000140CE                            
000140CE                            loc_12F5A:
000140CE 08A8 0000 0022             		bclr	#0,$22(a0)
000140D4 6000                       		bra.s	loc_12F70
000140D6                            ; ===========================================================================
000140D6                            
000140D6                            loc_12F62:
000140D6 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000140DC 6600                       		bne.s	Sonic_LookUp
000140DE                            
000140DE                            loc_12F6A:
000140DE 08E8 0000 0022             		bset	#0,$22(a0)
000140E4                            
000140E4                            loc_12F70:
000140E4 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000140EA 6000                       		bra.s	Obj01_ResetScr
000140EC                            ; ===========================================================================
000140EC                            
000140EC                            Sonic_LookUp:
000140EC 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000140F2 6700                       		beq.s	Sonic_Duck	; if not, branch
000140F4 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000140FA 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00014100 6700                       		beq.s	loc_12FC2
00014102 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00014106 6000                       		bra.s	loc_12FC2
00014108                            ; ===========================================================================
00014108                            
00014108                            Sonic_Duck:
00014108 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001410E 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00014110 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00014116 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
0001411C 6700                       		beq.s	loc_12FC2
0001411E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014122 6000                       		bra.s	loc_12FC2
00014124                            ; ===========================================================================
00014124                            
00014124                            Obj01_ResetScr:
00014124 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001412A 6700                       		beq.s	loc_12FC2	; if yes, branch
0001412C 6400                       		bcc.s	loc_12FBE
0001412E 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00014132                            
00014132                            loc_12FBE:
00014132 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00014136                            
00014136                            loc_12FC2:
00014136 1038 F602                  		move.b	($FFFFF602).w,d0
0001413A 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
0001413E 6600                       		bne.s	loc_12FEE	; if yes, branch
00014140 3028 0014                  		move.w	$14(a0),d0
00014144 6700                       		beq.s	loc_12FEE
00014146 6B00                       		bmi.s	loc_12FE2
00014148 9045                       		sub.w	d5,d0
0001414A 6400                       		bcc.s	loc_12FDC
0001414C 303C 0000                  		move.w	#0,d0
00014150                            
00014150                            loc_12FDC:
00014150 3140 0014                  		move.w	d0,$14(a0)
00014154 6000                       		bra.s	loc_12FEE
00014156                            ; ===========================================================================
00014156                            
00014156                            loc_12FE2:
00014156 D045                       		add.w	d5,d0
00014158 6400                       		bcc.s	loc_12FEA
0001415A 303C 0000                  		move.w	#0,d0
0001415E                            
0001415E                            loc_12FEA:
0001415E 3140 0014                  		move.w	d0,$14(a0)
00014162                            
00014162                            loc_12FEE:
00014162 1028 0026                  		move.b	$26(a0),d0
00014166 4EB9 0000 3424             		jsr	(CalcSine).l
0001416C C3E8 0014                  		muls.w	$14(a0),d1
00014170 E081                       		asr.l	#8,d1
00014172 3141 0010                  		move.w	d1,$10(a0)
00014176 C1E8 0014                  		muls.w	$14(a0),d0
0001417A E080                       		asr.l	#8,d0
0001417C 3140 0012                  		move.w	d0,$12(a0)
00014180                            
00014180                            loc_1300C:
00014180 1028 0026                  		move.b	$26(a0),d0
00014184 0600 0040                  		addi.b	#$40,d0
00014188 6B00                       		bmi.s	locret_1307C
0001418A 123C 0040                  		move.b	#$40,d1
0001418E 4A68 0014                  		tst.w	$14(a0)
00014192 6700                       		beq.s	locret_1307C
00014194 6B00                       		bmi.s	loc_13024
00014196 4441                       		neg.w	d1
00014198                            
00014198                            loc_13024:
00014198 1028 0026                  		move.b	$26(a0),d0
0001419C D001                       		add.b	d1,d0
0001419E 3F00                       		move.w	d0,-(sp)
000141A0 6100 0000                  		bsr.w	Sonic_WalkSpeed
000141A4 301F                       		move.w	(sp)+,d0
000141A6 4A41                       		tst.w	d1
000141A8 6A00                       		bpl.s	locret_1307C
000141AA E141                       		asl.w	#8,d1
000141AC 0600 0020                  		addi.b	#$20,d0
000141B0 0200 00C0                  		andi.b	#$C0,d0
000141B4 6700                       		beq.s	loc_13078
000141B6 0C00 0040                  		cmpi.b	#$40,d0
000141BA 6700                       		beq.s	loc_13066
000141BC 0C00 0080                  		cmpi.b	#$80,d0
000141C0 6700                       		beq.s	loc_13060
000141C2 D368 0010                  		add.w	d1,$10(a0)
000141C6 08E8 0005 0022             		bset	#5,$22(a0)
000141CC 317C 0000 0014             		move.w	#0,$14(a0)
000141D2 4E75                       		rts	
000141D4                            ; ===========================================================================
000141D4                            
000141D4                            loc_13060:
000141D4 9368 0012                  		sub.w	d1,$12(a0)
000141D8 4E75                       		rts	
000141DA                            ; ===========================================================================
000141DA                            
000141DA                            loc_13066:
000141DA 9368 0010                  		sub.w	d1,$10(a0)
000141DE 08E8 0005 0022             		bset	#5,$22(a0)
000141E4 317C 0000 0014             		move.w	#0,$14(a0)
000141EA 4E75                       		rts	
000141EC                            ; ===========================================================================
000141EC                            
000141EC                            loc_13078:
000141EC D368 0012                  		add.w	d1,$12(a0)
000141F0                            
000141F0                            locret_1307C:
000141F0 4E75                       		rts	
000141F2                            ; End of function Sonic_Move
000141F2                            
000141F2                            
000141F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141F2                            
000141F2                            
000141F2                            Sonic_MoveLeft:				; XREF: Sonic_Move
000141F2 3028 0014                  		move.w	$14(a0),d0
000141F6 6700                       		beq.s	loc_13086
000141F8 6A00                       		bpl.s	loc_130B2
000141FA                            
000141FA                            loc_13086:
000141FA 08E8 0000 0022             		bset	#0,$22(a0)
00014200 6600                       		bne.s	loc_1309A
00014202 08A8 0005 0022             		bclr	#5,$22(a0)
00014208 117C 0001 001D             		move.b	#1,$1D(a0)
0001420E                            
0001420E                            loc_1309A:
0001420E 9045                       		sub.w	d5,d0
00014210 3206                       		move.w	d6,d1
00014212 4441                       		neg.w	d1
00014214 B041                       		cmp.w	d1,d0
00014216 6E00                       		bgt.s	loc_130A6
00014218 3001                       		move.w	d1,d0
0001421A                            
0001421A                            loc_130A6:
0001421A 3140 0014                  		move.w	d0,$14(a0)
0001421E 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014224 4E75                       		rts	
00014226                            ; ===========================================================================
00014226                            
00014226                            loc_130B2:				; XREF: Sonic_MoveLeft
00014226 9044                       		sub.w	d4,d0
00014228 6400                       		bcc.s	loc_130BA
0001422A 303C FF80                  		move.w	#-$80,d0
0001422E                            
0001422E                            loc_130BA:
0001422E 3140 0014                  		move.w	d0,$14(a0)
00014232 1028 0026                  		move.b	$26(a0),d0
00014236 0600 0020                  		addi.b	#$20,d0
0001423A 0200 00C0                  		andi.b	#$C0,d0
0001423E 6600                       		bne.s	locret_130E8
00014240 0C40 0400                  		cmpi.w	#$400,d0
00014244 6D00                       		blt.s	locret_130E8
00014246 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
0001424C 08A8 0000 0022             		bclr	#0,$22(a0)
00014252 303C 00A4                  		move.w	#$A4,d0
00014256 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play stopping sound
0001425C                            
0001425C                            locret_130E8:
0001425C 4E75                       		rts	
0001425E                            ; End of function Sonic_MoveLeft
0001425E                            
0001425E                            
0001425E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001425E                            
0001425E                            
0001425E                            Sonic_MoveRight:			; XREF: Sonic_Move
0001425E 3028 0014                  		move.w	$14(a0),d0
00014262 6B00                       		bmi.s	loc_13118
00014264 08A8 0000 0022             		bclr	#0,$22(a0)
0001426A 6700                       		beq.s	loc_13104
0001426C 08A8 0005 0022             		bclr	#5,$22(a0)
00014272 117C 0001 001D             		move.b	#1,$1D(a0)
00014278                            
00014278                            loc_13104:
00014278 D045                       		add.w	d5,d0
0001427A B046                       		cmp.w	d6,d0
0001427C 6D00                       		blt.s	loc_1310C
0001427E 3006                       		move.w	d6,d0
00014280                            
00014280                            loc_1310C:
00014280 3140 0014                  		move.w	d0,$14(a0)
00014284 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001428A 4E75                       		rts	
0001428C                            ; ===========================================================================
0001428C                            
0001428C                            loc_13118:				; XREF: Sonic_MoveRight
0001428C D044                       		add.w	d4,d0
0001428E 6400                       		bcc.s	loc_13120
00014290 303C 0080                  		move.w	#$80,d0
00014294                            
00014294                            loc_13120:
00014294 3140 0014                  		move.w	d0,$14(a0)
00014298 1028 0026                  		move.b	$26(a0),d0
0001429C 0600 0020                  		addi.b	#$20,d0
000142A0 0200 00C0                  		andi.b	#$C0,d0
000142A4 6600                       		bne.s	locret_1314E
000142A6 0C40 FC00                  		cmpi.w	#-$400,d0
000142AA 6E00                       		bgt.s	locret_1314E
000142AC 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000142B2 08E8 0000 0022             		bset	#0,$22(a0)
000142B8 303C 00A4                  		move.w	#$A4,d0
000142BC 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play stopping sound
000142C2                            
000142C2                            locret_1314E:
000142C2 4E75                       		rts	
000142C4                            ; End of function Sonic_MoveRight
000142C4                            
000142C4                            ; ---------------------------------------------------------------------------
000142C4                            ; Subroutine to	change Sonic's speed as he rolls
000142C4                            ; ---------------------------------------------------------------------------
000142C4                            
000142C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142C4                            
000142C4                            
000142C4                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000142C4 3C38 F760                  		move.w	($FFFFF760).w,d6
000142C8 E346                       		asl.w	#1,d6
000142CA 3A38 F762                  		move.w	($FFFFF762).w,d5
000142CE E245                       		asr.w	#1,d5
000142D0 3838 F764                  		move.w	($FFFFF764).w,d4
000142D4 E444                       		asr.w	#2,d4
000142D6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000142DA 6600 0000                  		bne.w	loc_131CC
000142DE 4A68 003E                  		tst.w	$3E(a0)
000142E2 6600                       		bne.s	loc_13188
000142E4 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000142EA 6700                       		beq.s	loc_1317C	; if not, branch
000142EC 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000142F2 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
000142F4 6100 0000                  		bsr.w	Sonic_RollLeft
000142F8                            
000142F8                            loc_1317C:
000142F8 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000142FE 6700                       		beq.s	loc_13188	; if not, branch
00014300 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00014306 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00014308 6100 0000                  		bsr.w	Sonic_RollLeft
0001430C 6000                       		bra.s	loc_13188
0001430E                            
0001430E                            SonicRS_RollRight:
0001430E 6100 0000                  		bsr.w	Sonic_RollRight
00014312                            
00014312                            loc_13188:
00014312 3028 0014                  		move.w	$14(a0),d0
00014316 6700                       		beq.s	loc_131AA
00014318 6B00                       		bmi.s	loc_1319E
0001431A 9045                       		sub.w	d5,d0
0001431C 6400                       		bcc.s	loc_13198
0001431E 303C 0000                  		move.w	#0,d0
00014322                            
00014322                            loc_13198:
00014322 3140 0014                  		move.w	d0,$14(a0)
00014326 6000                       		bra.s	loc_131AA
00014328                            ; ===========================================================================
00014328                            
00014328                            loc_1319E:				; XREF: Sonic_RollSpeed
00014328 D045                       		add.w	d5,d0
0001432A 6400                       		bcc.s	loc_131A6
0001432C 303C 0000                  		move.w	#0,d0
00014330                            
00014330                            loc_131A6:
00014330 3140 0014                  		move.w	d0,$14(a0)
00014334                            
00014334                            loc_131AA:
00014334 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00014338 6600                       		bne.s	loc_131CC	; if yes, branch
0001433A 08A8 0002 0022             		bclr	#2,$22(a0)
00014340 117C 0013 0016             		move.b	#$13,$16(a0)
00014346 117C 0009 0017             		move.b	#9,$17(a0)
0001434C 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014352 5B68 000C                  		subq.w	#5,$C(a0)
00014356                            
00014356                            loc_131CC:
00014356 1028 0026                  		move.b	$26(a0),d0
0001435A 4EB9 0000 3424             		jsr	(CalcSine).l
00014360 C1E8 0014                  		muls.w	$14(a0),d0
00014364 E080                       		asr.l	#8,d0
00014366 3140 0012                  		move.w	d0,$12(a0)
0001436A C3E8 0014                  		muls.w	$14(a0),d1
0001436E E081                       		asr.l	#8,d1
00014370 0C41 1000                  		cmpi.w	#$1000,d1
00014374 6F00                       		ble.s	loc_131F0
00014376 323C 1000                  		move.w	#$1000,d1
0001437A                            
0001437A                            loc_131F0:
0001437A 0C41 F000                  		cmpi.w	#-$1000,d1
0001437E 6C00                       		bge.s	loc_131FA
00014380 323C F000                  		move.w	#-$1000,d1
00014384                            
00014384                            loc_131FA:
00014384 3141 0010                  		move.w	d1,$10(a0)
00014388 6000 FDF6                  		bra.w	loc_1300C
0001438C                            ; End of function Sonic_RollSpeed
0001438C                            
0001438C                            
0001438C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001438C                            
0001438C                            
0001438C                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
0001438C 3028 0014                  		move.w	$14(a0),d0
00014390 6700                       		beq.s	loc_1320A
00014392 6A00                       		bpl.s	loc_13218
00014394                            
00014394                            loc_1320A:
00014394 08E8 0000 0022             		bset	#0,$22(a0)
0001439A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000143A0 4E75                       		rts	
000143A2                            ; ===========================================================================
000143A2                            
000143A2                            loc_13218:
000143A2 9044                       		sub.w	d4,d0
000143A4 6400                       		bcc.s	loc_13220
000143A6 303C FF80                  		move.w	#-$80,d0
000143AA                            
000143AA                            loc_13220:
000143AA 3140 0014                  		move.w	d0,$14(a0)
000143AE 4E75                       		rts	
000143B0                            ; End of function Sonic_RollLeft
000143B0                            
000143B0                            
000143B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000143B0                            
000143B0                            
000143B0                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000143B0 3028 0014                  		move.w	$14(a0),d0
000143B4 6B00                       		bmi.s	loc_1323A
000143B6 08A8 0000 0022             		bclr	#0,$22(a0)
000143BC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000143C2 4E75                       		rts	
000143C4                            ; ===========================================================================
000143C4                            
000143C4                            loc_1323A:
000143C4 D044                       		add.w	d4,d0
000143C6 6400                       		bcc.s	loc_13242
000143C8 303C 0080                  		move.w	#$80,d0
000143CC                            
000143CC                            loc_13242:
000143CC 3140 0014                  		move.w	d0,$14(a0)
000143D0 4E75                       		rts	
000143D2                            ; End of function Sonic_RollRight
000143D2                            
000143D2                            Sonic_AirUnroll:
000143D2                            		
000143D2 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
000143D6 6600                       		bne.s	@timer
000143D8 1038 F605                  		move.b	($FFFFF605).w,d0
000143DC 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
000143E0 6700                       		beq.s	@end	; if not, branch
000143E2 08A8 0002 0022             		bclr	#2,$22(a0)
000143E8 117C 0013 0016             		move.b	#$13,$16(a0)
000143EE 117C 0009 0017             		move.b	#9,$17(a0)
000143F4 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
000143FA 303C 00A5                  		move.w	#$A5,d0
000143FE 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play fart sound
00014404 2028 0010                  		move.l	$10(a0),d0
00014408 D080                       		add.l	d0,d0
0001440A 2140 0010                  		move.l	d0,$10(a0)
0001440E 5B68 000C                  		subq.w	#5,$C(a0)
00014412                            	@end:
00014412 4E75                       		rts
00014414                            	@timer:
00014414 5328 003A                  		subq.b	#1,$3A(a0)
00014418 4E75                       		rts
0001441A                            
0001441A                            ; ---------------------------------------------------------------------------
0001441A                            ; Subroutine to	change Sonic's direction while jumping
0001441A                            ; ---------------------------------------------------------------------------
0001441A                            
0001441A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001441A                            
0001441A                            
0001441A                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001441A 3C38 F760                  		move.w	($FFFFF760).w,d6
0001441E 3A38 F762                  		move.w	($FFFFF762).w,d5
00014422 E345                       		asl.w	#1,d5
00014424 0828 0004 0022             		btst	#4,$22(a0)
0001442A 6600                       		bne.s	Obj01_ResetScr2
0001442C 3028 0010                  		move.w	$10(a0),d0
00014430 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014436 6700                       		beq.s	loc_13278	; if not, branch
00014438 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001443E 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00014440 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00014444 6E00                       		bgt.s	loc_13278
00014446 3001                       		move.w	d1,d0
00014448                            
00014448                            loc_13278:
00014448 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001444E 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00014450 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00014456 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00014458 6100 0000                  		bsr.w	SonicCJD_JumpLeft
0001445C 6E00                       		bgt.s	Obj01_JumpMove
0001445E 3001                       		move.w	d1,d0
00014460 6000                       		bra.s	Obj01_JumpMove
00014462                            
00014462                            SonicCJD_JumpLeft:
00014462 08E8 0000 0022             		bset	#0,$22(a0)
00014468 9045                       		sub.w	d5,d0
0001446A 3206                       		move.w	d6,d1
0001446C 4441                       		neg.w	d1
0001446E B041                       		cmp.w	d1,d0
00014470                            		; bgt.s	loc_13278
00014470                            		; move.w	d1,d0
00014470 4E75                       		rts
00014472                            
00014472                            SonicCJD_JumpRight:
00014472 08A8 0000 0022             		bclr	#0,$22(a0)
00014478 D045                       		add.w	d5,d0
0001447A B046                       		cmp.w	d6,d0
0001447C 6D00                       		blt.s	Obj01_JumpMove
0001447E 3006                       		move.w	d6,d0
00014480                            
00014480                            Obj01_JumpMove:
00014480 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00014484                            
00014484                            Obj01_ResetScr2:
00014484 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
0001448A 6700                       		beq.s	loc_132A4	; if yes, branch
0001448C 6400                       		bcc.s	loc_132A0
0001448E 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014492                            
00014492                            loc_132A0:
00014492 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014496                            
00014496                            loc_132A4:
00014496 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
0001449C 6500                       		bcs.s	locret_132D2	; if yes, branch
0001449E 3028 0010                  		move.w	$10(a0),d0
000144A2 3200                       		move.w	d0,d1
000144A4 EA41                       		asr.w	#5,d1
000144A6 6700                       		beq.s	locret_132D2
000144A8 6B00                       		bmi.s	loc_132C6
000144AA 9041                       		sub.w	d1,d0
000144AC 6400                       		bcc.s	loc_132C0
000144AE 303C 0000                  		move.w	#0,d0
000144B2                            
000144B2                            loc_132C0:
000144B2 3140 0010                  		move.w	d0,$10(a0)
000144B6 4E75                       		rts	
000144B8                            ; ===========================================================================
000144B8                            
000144B8                            loc_132C6:
000144B8 9041                       		sub.w	d1,d0
000144BA 6500                       		bcs.s	loc_132CE
000144BC 303C 0000                  		move.w	#0,d0
000144C0                            
000144C0                            loc_132CE:
000144C0 3140 0010                  		move.w	d0,$10(a0)
000144C4                            
000144C4                            locret_132D2:
000144C4 4E75                       		rts	
000144C6                            ; End of function Sonic_ChgJumpDir
000144C6                            
000144C6                            ; ===========================================================================
000144C6                            ; ---------------------------------------------------------------------------
000144C6                            ; Unused subroutine to squash Sonic
000144C6                            ; ---------------------------------------------------------------------------
000144C6 1028 0026                  		move.b	$26(a0),d0
000144CA 0600 0020                  		addi.b	#$20,d0
000144CE 0200 00C0                  		andi.b	#$C0,d0
000144D2 6600                       		bne.s	locret_13302
000144D4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000144D8 4A41                       		tst.w	d1
000144DA 6A00                       		bpl.s	locret_13302
000144DC 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
000144E2 317C 0000 0010             		move.w	#0,$10(a0)
000144E8 317C 0000 0012             		move.w	#0,$12(a0)
000144EE 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000144F4                            
000144F4                            locret_13302:
000144F4 4E75                       		rts	
000144F6                            ; ---------------------------------------------------------------------------
000144F6                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000144F6                            ; ---------------------------------------------------------------------------
000144F6                            
000144F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144F6                            
000144F6                            
000144F6                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000144F6 2228 0008                  		move.l	8(a0),d1
000144FA 3028 0010                  		move.w	$10(a0),d0
000144FE 48C0                       		ext.l	d0
00014500 E180                       		asl.l	#8,d0
00014502 D280                       		add.l	d0,d1
00014504 4841                       		swap	d1
00014506 3038 F728                  		move.w	($FFFFF728).w,d0
0001450A 0640 0010                  		addi.w	#$10,d0
0001450E B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014510 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00014512 3038 F72A                  		move.w	($FFFFF72A).w,d0
00014516 0640 0128                  		addi.w	#$128,d0
0001451A 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001451E 6600                       		bne.s	loc_13332
00014520 0640 0040                  		addi.w	#$40,d0
00014524                            
00014524                            loc_13332:
00014524 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014526 6300                       		bls.s	Boundary_Sides	; if yes, branch
00014528                            
00014528                            loc_13336:
00014528 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001452C 0640 00E0                  		addi.w	#$E0,d0
00014530 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00014534 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00014536 4E75                       		rts	
00014538                            ; ===========================================================================
00014538                            
00014538                            Boundary_Bottom:
00014538 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
0001453E                            		; bne.w	KillSonic	; if not, kill Sonic
0001453E 6600 0000                  		bne.w	CallKillSonic	; GMZ
00014542 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00014548                            		; bcs.w	KillSonic
00014548 6500 0000                  		bcs.w	CallKillSonic	; GMZ
0001454C 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00014550 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014556 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
0001455C 4E75                       		rts	
0001455E                            
0001455E                            CallKillSonic:
0001455E 4EF9 0000 0000             		jmp	KillSonic	; GMZ
00014564                            ; ===========================================================================
00014564                            
00014564                            Boundary_Sides:
00014564 3140 0008                  		move.w	d0,8(a0)
00014568 317C 0000 000A             		move.w	#0,$A(a0)
0001456E 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00014574 317C 0000 0014             		move.w	#0,$14(a0)
0001457A 60AC                       		bra.s	loc_13336
0001457C                            ; End of function Sonic_LevelBound
0001457C                            
0001457C                            ; ---------------------------------------------------------------------------
0001457C                            ; Subroutine allowing Sonic to roll when he's moving
0001457C                            ; ---------------------------------------------------------------------------
0001457C                            
0001457C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001457C                            
0001457C                            
0001457C                            Sonic_Roll:				; XREF: Obj01_MdNormal
0001457C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014580 6600                       		bne.s	Obj01_NoRoll
00014582 3028 0014                  		move.w	$14(a0),d0
00014586 6A00                       		bpl.s	loc_13392
00014588 4440                       		neg.w	d0
0001458A                            
0001458A                            loc_13392:
0001458A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
0001458E 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00014590 1038 F602                  		move.b	($FFFFF602).w,d0
00014594 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00014598 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
0001459A 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000145A0 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
000145A2                            
000145A2                            Obj01_NoRoll:
000145A2 4E75                       		rts	
000145A4                            ; ===========================================================================
000145A4                            
000145A4                            Obj01_ChkRoll:
000145A4 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
000145AA 6700                       		beq.s	Obj01_DoRoll	; if not, branch
000145AC 4E75                       		rts	
000145AE                            ; ===========================================================================
000145AE                            
000145AE                            Obj01_DoRoll:
000145AE 08E8 0002 0022             		bset	#2,$22(a0)
000145B4 117C 000E 0016             		move.b	#$E,$16(a0)
000145BA 117C 0007 0017             		move.b	#7,$17(a0)
000145C0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000145C6 5A68 000C                  		addq.w	#5,$C(a0)
000145CA 303C 00BE                  		move.w	#$BE,d0
000145CE 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play rolling sound
000145D4 4A68 0014                  		tst.w	$14(a0)
000145D8 6600                       		bne.s	locret_133E8
000145DA 317C 0200 0014             		move.w	#$200,$14(a0)
000145E0                            
000145E0                            locret_133E8:
000145E0 4E75                       		rts	
000145E2                            ; End of function Sonic_Roll
000145E2                            
000145E2                            ; ---------------------------------------------------------------------------
000145E2                            ; Subroutine allowing Sonic to jump
000145E2                            ; ---------------------------------------------------------------------------
000145E2                            
000145E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000145E2                            
000145E2                            
000145E2                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000145E2 1038 F603                  		move.b	($FFFFF603).w,d0
000145E6 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000145EA 6700 0000                  		beq.w	locret_1348E	; if not, branch
000145EE 7000                       		moveq	#0,d0
000145F0 1028 0026                  		move.b	$26(a0),d0
000145F4 0600 0080                  		addi.b	#$80,d0
000145F8 6100 0000                  		bsr.w	sub_14D48
000145FC 0C41 0006                  		cmpi.w	#6,d1
00014600 6D00 0000                  		blt.w	locret_1348E
00014604 343C 0680                  		move.w	#$680,d2
00014608 0828 0006 0022             		btst	#6,$22(a0)
0001460E 6700                       		beq.s	loc_1341C
00014610 343C 0380                  		move.w	#$380,d2
00014614                            
00014614                            loc_1341C:
00014614 7000                       		moveq	#0,d0
00014616 1028 0026                  		move.b	$26(a0),d0
0001461A 0400 0040                  		subi.b	#$40,d0
0001461E 4EB9 0000 3424             		jsr	(CalcSine).l
00014624 C3C2                       		muls.w	d2,d1
00014626 E081                       		asr.l	#8,d1
00014628 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
0001462C C1C2                       		muls.w	d2,d0
0001462E E080                       		asr.l	#8,d0
00014630 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00014634 08E8 0001 0022             		bset	#1,$22(a0)
0001463A 08A8 0005 0022             		bclr	#5,$22(a0)
00014640 588F                       		addq.l	#4,sp
00014642 117C 0001 003C             		move.b	#1,$3C(a0)
00014648 4228 0038                  		clr.b	$38(a0)
0001464C 303C 00A0                  		move.w	#$A0,d0
00014650 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play jumping sound
00014656 117C 0013 0016             		move.b	#$13,$16(a0)
0001465C 117C 0009 0017             		move.b	#9,$17(a0)
00014662 0828 0002 0022             		btst	#2,$22(a0)
00014668 6600                       		bne.s	loc_13490
0001466A 117C 000E 0016             		move.b	#$E,$16(a0)
00014670 117C 0007 0017             		move.b	#7,$17(a0)
00014676 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
0001467C 08E8 0002 0022             		bset	#2,$22(a0)
00014682 5A68 000C                  		addq.w	#5,$C(a0)
00014686 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
0001468C                            
0001468C                            locret_1348E:
0001468C 4E75                       		rts	
0001468E                            ; ===========================================================================
0001468E                            
0001468E                            loc_13490:
0001468E 08E8 0004 0022             		bset	#4,$22(a0)
00014694 4E75                       		rts	
00014696                            ; End of function Sonic_Jump
00014696                            
00014696                            
00014696                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014696                            
00014696                            
00014696                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014696 4A28 003C                  		tst.b	$3C(a0)
0001469A 6700                       		beq.s	loc_134C4
0001469C 323C FC00                  		move.w	#-$400,d1
000146A0 0828 0006 0022             		btst	#6,$22(a0)
000146A6 6700                       		beq.s	loc_134AE
000146A8 323C FE00                  		move.w	#-$200,d1
000146AC                            
000146AC                            loc_134AE:
000146AC B268 0012                  		cmp.w	$12(a0),d1
000146B0 6F00                       		ble.s	locret_134C2
000146B2 1038 F602                  		move.b	($FFFFF602).w,d0
000146B6 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000146BA 6600                       		bne.s	locret_134C2	; if yes, branch
000146BC 3141 0012                  		move.w	d1,$12(a0)
000146C0                            
000146C0                            locret_134C2:
000146C0 4E75                       		rts	
000146C2                            ; ===========================================================================
000146C2                            
000146C2                            loc_134C4:
000146C2 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
000146C8 6C00                       		bge.s	locret_134D2
000146CA 317C F040 0012             		move.w	#-$FC0,$12(a0)
000146D0                            
000146D0                            locret_134D2:
000146D0 4E75                       		rts	
000146D2                            ; End of function Sonic_JumpHeight
000146D2                            
000146D2                            ; ---------------------------------------------------------------------------
000146D2                            ; Subroutine to	slow Sonic walking up a	slope
000146D2                            ; ---------------------------------------------------------------------------
000146D2                            
000146D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146D2                            
000146D2                            
000146D2                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
000146D2 1028 0026                  		move.b	$26(a0),d0
000146D6 0600 0060                  		addi.b	#$60,d0
000146DA 0C00 00C0                  		cmpi.b	#$C0,d0
000146DE 6400                       		bcc.s	locret_13508
000146E0 1028 0026                  		move.b	$26(a0),d0
000146E4 4EB9 0000 3424             		jsr	(CalcSine).l
000146EA C1FC 0020                  		muls.w	#$20,d0
000146EE E080                       		asr.l	#8,d0
000146F0 4A68 0014                  		tst.w	$14(a0)
000146F4 6700                       		beq.s	locret_13508
000146F6 6B00                       		bmi.s	loc_13504
000146F8 4A40                       		tst.w	d0
000146FA 6700                       		beq.s	locret_13502
000146FC D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00014700                            
00014700                            locret_13502:
00014700 4E75                       		rts	
00014702                            ; ===========================================================================
00014702                            
00014702                            loc_13504:
00014702 D168 0014                  		add.w	d0,$14(a0)
00014706                            
00014706                            locret_13508:
00014706 4E75                       		rts	
00014708                            ; End of function Sonic_SlopeResist
00014708                            
00014708                            ; ---------------------------------------------------------------------------
00014708                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00014708                            ; ---------------------------------------------------------------------------
00014708                            
00014708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014708                            
00014708                            
00014708                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00014708 1028 0026                  		move.b	$26(a0),d0
0001470C 0600 0060                  		addi.b	#$60,d0
00014710 0C00 00C0                  		cmpi.b	#-$40,d0
00014714 6400                       		bcc.s	locret_13544
00014716 1028 0026                  		move.b	$26(a0),d0
0001471A 4EB9 0000 3424             		jsr	(CalcSine).l
00014720 C1FC 0050                  		muls.w	#$50,d0
00014724 E080                       		asr.l	#8,d0
00014726 4A68 0014                  		tst.w	$14(a0)
0001472A 6B00                       		bmi.s	loc_1353A
0001472C 4A40                       		tst.w	d0
0001472E 6A00                       		bpl.s	loc_13534
00014730 E480                       		asr.l	#2,d0
00014732                            
00014732                            loc_13534:
00014732 D168 0014                  		add.w	d0,$14(a0)
00014736 4E75                       		rts	
00014738                            ; ===========================================================================
00014738                            
00014738                            loc_1353A:
00014738 4A40                       		tst.w	d0
0001473A 6B00                       		bmi.s	loc_13540
0001473C E480                       		asr.l	#2,d0
0001473E                            
0001473E                            loc_13540:
0001473E D168 0014                  		add.w	d0,$14(a0)
00014742                            
00014742                            locret_13544:
00014742 4E75                       		rts	
00014744                            ; End of function Sonic_RollRepel
00014744                            
00014744                            ; ---------------------------------------------------------------------------
00014744                            ; Subroutine to	push Sonic down	a slope
00014744                            ; ---------------------------------------------------------------------------
00014744                            
00014744                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014744                            
00014744                            
00014744                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00014744 4E71                       		nop	
00014746 4A28 0038                  		tst.b	$38(a0)
0001474A 6600                       		bne.s	locret_13580
0001474C 4A68 003E                  		tst.w	$3E(a0)
00014750 6600                       		bne.s	loc_13582
00014752 1028 0026                  		move.b	$26(a0),d0
00014756 0600 0020                  		addi.b	#$20,d0
0001475A 0200 00C0                  		andi.b	#$C0,d0
0001475E 6700                       		beq.s	locret_13580
00014760 3028 0014                  		move.w	$14(a0),d0
00014764 6A00                       		bpl.s	loc_1356A
00014766 4440                       		neg.w	d0
00014768                            
00014768                            loc_1356A:
00014768 0C40 0280                  		cmpi.w	#$280,d0
0001476C 6400                       		bcc.s	locret_13580
0001476E 4268 0014                  		clr.w	$14(a0)
00014772 08E8 0001 0022             		bset	#1,$22(a0)
00014778 317C 001E 003E             		move.w	#$1E,$3E(a0)
0001477E                            
0001477E                            locret_13580:
0001477E 4E75                       		rts	
00014780                            ; ===========================================================================
00014780                            
00014780                            loc_13582:
00014780 5368 003E                  		subq.w	#1,$3E(a0)
00014784 4E75                       		rts	
00014786                            ; End of function Sonic_SlopeRepel
00014786                            
00014786                            ; ---------------------------------------------------------------------------
00014786                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014786                            ; ---------------------------------------------------------------------------
00014786                            
00014786                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014786                            
00014786                            
00014786                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014786 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001478A 6700                       		beq.s	locret_135A2	; if already 0,	branch
0001478C 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001478E                            
0001478E 5400                       		addq.b	#2,d0		; increase angle
00014790 6400                       		bcc.s	loc_13596
00014792 7000                       		moveq	#0,d0
00014794                            
00014794                            loc_13596:
00014794 6000                       		bra.s	loc_1359E
00014796                            ; ===========================================================================
00014796                            
00014796                            loc_13598:
00014796 5500                       		subq.b	#2,d0		; decrease angle
00014798 6400                       		bcc.s	loc_1359E
0001479A 7000                       		moveq	#0,d0
0001479C                            
0001479C                            loc_1359E:
0001479C 1140 0026                  		move.b	d0,$26(a0)
000147A0                            
000147A0                            locret_135A2:
000147A0 4E75                       		rts	
000147A2                            ; End of function Sonic_JumpAngle
000147A2                            
000147A2                            ; ---------------------------------------------------------------------------
000147A2                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000147A2                            ; ---------------------------------------------------------------------------
000147A2                            
000147A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000147A2                            
000147A2                            
000147A2                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
000147A2 3228 0010                  		move.w	$10(a0),d1
000147A6 3428 0012                  		move.w	$12(a0),d2
000147AA 4EB9 0000 36F2             		jsr	(CalcAngle).l
000147B0 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000147B4 0400 0020                  		subi.b	#$20,d0
000147B8 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000147BC 0200 00C0                  		andi.b	#$C0,d0
000147C0 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000147C4 0C00 0040                  		cmpi.b	#$40,d0
000147C8 6700 0000                  		beq.w	loc_13680
000147CC 0C00 0080                  		cmpi.b	#$80,d0
000147D0 6700 0000                  		beq.w	loc_136E2
000147D4 0C00 00C0                  		cmpi.b	#-$40,d0
000147D8 6700 0000                  		beq.w	loc_1373E
000147DC 6100 0000                  		bsr.w	Sonic_HitWall
000147E0 4A41                       		tst.w	d1
000147E2 6A00                       		bpl.s	loc_135F0
000147E4 9368 0008                  		sub.w	d1,8(a0)
000147E8 317C 0000 0010             		move.w	#0,$10(a0)
000147EE                            
000147EE                            loc_135F0:
000147EE 6100 0000                  		bsr.w	sub_14EB4
000147F2 4A41                       		tst.w	d1
000147F4 6A00                       		bpl.s	loc_13602
000147F6 D368 0008                  		add.w	d1,8(a0)
000147FA 317C 0000 0010             		move.w	#0,$10(a0)
00014800                            
00014800                            loc_13602:
00014800 6100 0000                  		bsr.w	Sonic_HitFloor
00014804 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00014808 4A41                       		tst.w	d1
0001480A 6A00                       		bpl.s	locret_1367E
0001480C 1428 0012                  		move.b	$12(a0),d2
00014810 5002                       		addq.b	#8,d2
00014812 4402                       		neg.b	d2
00014814 B202                       		cmp.b	d2,d1
00014816 6C00                       		bge.s	loc_1361E
00014818 B002                       		cmp.b	d2,d0
0001481A 6D00                       		blt.s	locret_1367E
0001481C                            
0001481C                            loc_1361E:
0001481C D368 000C                  		add.w	d1,$C(a0)
00014820 1143 0026                  		move.b	d3,$26(a0)
00014824 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014828 117C 0000 001C             		move.b	#0,$1C(a0)
0001482E 1003                       		move.b	d3,d0
00014830 0600 0020                  		addi.b	#$20,d0
00014834 0200 0040                  		andi.b	#$40,d0
00014838 6600                       		bne.s	loc_1365C
0001483A 1003                       		move.b	d3,d0
0001483C 0600 0010                  		addi.b	#$10,d0
00014840 0200 0020                  		andi.b	#$20,d0
00014844 6700                       		beq.s	loc_1364E
00014846 E0E8 0012                  		asr	$12(a0)
0001484A 6000                       		bra.s	loc_13670
0001484C                            ; ===========================================================================
0001484C                            
0001484C                            loc_1364E:
0001484C 317C 0000 0012             		move.w	#0,$12(a0)
00014852 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014858 4E75                       		rts	
0001485A                            ; ===========================================================================
0001485A                            
0001485A                            loc_1365C:
0001485A 317C 0000 0010             		move.w	#0,$10(a0)
00014860 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00014866 6F00                       		ble.s	loc_13670
00014868 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
0001486E                            
0001486E                            loc_13670:
0001486E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014874 4A03                       		tst.b	d3
00014876 6A00                       		bpl.s	locret_1367E
00014878 4468 0014                  		neg.w	$14(a0)
0001487C                            
0001487C                            locret_1367E:
0001487C 4E75                       		rts	
0001487E                            ; ===========================================================================
0001487E                            
0001487E                            loc_13680:
0001487E 6100 0000                  		bsr.w	Sonic_HitWall
00014882 4A41                       		tst.w	d1
00014884 6A00                       		bpl.s	loc_1369A
00014886 9368 0008                  		sub.w	d1,8(a0)
0001488A 317C 0000 0010             		move.w	#0,$10(a0)
00014890 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014896 4E75                       		rts	
00014898                            ; ===========================================================================
00014898                            
00014898                            loc_1369A:
00014898 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001489C 4A41                       		tst.w	d1
0001489E 6A00                       		bpl.s	loc_136B4
000148A0 9368 000C                  		sub.w	d1,$C(a0)
000148A4 4A68 0012                  		tst.w	$12(a0)
000148A8 6A00                       		bpl.s	locret_136B2
000148AA 317C 0000 0012             		move.w	#0,$12(a0)
000148B0                            
000148B0                            locret_136B2:
000148B0 4E75                       		rts	
000148B2                            ; ===========================================================================
000148B2                            
000148B2                            loc_136B4:
000148B2 4A68 0012                  		tst.w	$12(a0)
000148B6 6B00                       		bmi.s	locret_136E0
000148B8 6100 0000                  		bsr.w	Sonic_HitFloor
000148BC 4A41                       		tst.w	d1
000148BE 6A00                       		bpl.s	locret_136E0
000148C0 D368 000C                  		add.w	d1,$C(a0)
000148C4 1143 0026                  		move.b	d3,$26(a0)
000148C8 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000148CC 117C 0000 001C             		move.b	#0,$1C(a0)
000148D2 317C 0000 0012             		move.w	#0,$12(a0)
000148D8 3168 0010 0014             		move.w	$10(a0),$14(a0)
000148DE                            
000148DE                            locret_136E0:
000148DE 4E75                       		rts	
000148E0                            ; ===========================================================================
000148E0                            
000148E0                            loc_136E2:
000148E0 6100 0000                  		bsr.w	Sonic_HitWall
000148E4 4A41                       		tst.w	d1
000148E6 6A00                       		bpl.s	loc_136F4
000148E8 9368 0008                  		sub.w	d1,8(a0)
000148EC 317C 0000 0010             		move.w	#0,$10(a0)
000148F2                            
000148F2                            loc_136F4:
000148F2 6100 0000                  		bsr.w	sub_14EB4
000148F6 4A41                       		tst.w	d1
000148F8 6A00                       		bpl.s	loc_13706
000148FA D368 0008                  		add.w	d1,8(a0)
000148FE 317C 0000 0010             		move.w	#0,$10(a0)
00014904                            
00014904                            loc_13706:
00014904 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014908 4A41                       		tst.w	d1
0001490A 6A00                       		bpl.s	locret_1373C
0001490C 9368 000C                  		sub.w	d1,$C(a0)
00014910 1003                       		move.b	d3,d0
00014912 0600 0020                  		addi.b	#$20,d0
00014916 0200 0040                  		andi.b	#$40,d0
0001491A 6600                       		bne.s	loc_13726
0001491C 317C 0000 0012             		move.w	#0,$12(a0)
00014922 4E75                       		rts	
00014924                            ; ===========================================================================
00014924                            
00014924                            loc_13726:
00014924 1143 0026                  		move.b	d3,$26(a0)
00014928 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001492C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014932 4A03                       		tst.b	d3
00014934 6A00                       		bpl.s	locret_1373C
00014936 4468 0014                  		neg.w	$14(a0)
0001493A                            
0001493A                            locret_1373C:
0001493A 4E75                       		rts	
0001493C                            ; ===========================================================================
0001493C                            
0001493C                            loc_1373E:
0001493C 6100 0000                  		bsr.w	sub_14EB4
00014940 4A41                       		tst.w	d1
00014942 6A00                       		bpl.s	loc_13758
00014944 D368 0008                  		add.w	d1,8(a0)
00014948 317C 0000 0010             		move.w	#0,$10(a0)
0001494E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014954 4E75                       		rts	
00014956                            ; ===========================================================================
00014956                            
00014956                            loc_13758:
00014956 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001495A 4A41                       		tst.w	d1
0001495C 6A00                       		bpl.s	loc_13772
0001495E 9368 000C                  		sub.w	d1,$C(a0)
00014962 4A68 0012                  		tst.w	$12(a0)
00014966 6A00                       		bpl.s	locret_13770
00014968 317C 0000 0012             		move.w	#0,$12(a0)
0001496E                            
0001496E                            locret_13770:
0001496E 4E75                       		rts	
00014970                            ; ===========================================================================
00014970                            
00014970                            loc_13772:
00014970 4A68 0012                  		tst.w	$12(a0)
00014974 6B00                       		bmi.s	locret_1379E
00014976 6100 0000                  		bsr.w	Sonic_HitFloor
0001497A 4A41                       		tst.w	d1
0001497C 6A00                       		bpl.s	locret_1379E
0001497E D368 000C                  		add.w	d1,$C(a0)
00014982 1143 0026                  		move.b	d3,$26(a0)
00014986 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001498A 117C 0000 001C             		move.b	#0,$1C(a0)
00014990 317C 0000 0012             		move.w	#0,$12(a0)
00014996 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001499C                            
0001499C                            locret_1379E:
0001499C 4E75                       		rts	
0001499E                            ; End of function Sonic_Floor
0001499E                            
0001499E                            ; ---------------------------------------------------------------------------
0001499E                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001499E                            ; ---------------------------------------------------------------------------
0001499E                            
0001499E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001499E                            
0001499E                            
0001499E                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
0001499E 0828 0004 0022             		btst	#4,$22(a0)
000149A4 6700                       		beq.s	loc_137AE
000149A6 4E71                       		nop	
000149A8 4E71                       		nop	
000149AA 4E71                       		nop	
000149AC                            
000149AC                            loc_137AE:
000149AC 08A8 0005 0022             		bclr	#5,$22(a0)
000149B2 08A8 0001 0022             		bclr	#1,$22(a0)
000149B8 08A8 0004 0022             		bclr	#4,$22(a0)
000149BE 0828 0002 0022             		btst	#2,$22(a0)
000149C4 6700                       		beq.s	loc_137E4
000149C6 08A8 0002 0022             		bclr	#2,$22(a0)
000149CC 117C 0013 0016             		move.b	#$13,$16(a0)
000149D2 117C 0009 0017             		move.b	#9,$17(a0)
000149D8 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000149DE 5B68 000C                  		subq.w	#5,$C(a0)
000149E2                            
000149E2                            loc_137E4:
000149E2 117C 0000 003C             		move.b	#0,$3C(a0)
000149E8 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000149EE 4E75                       		rts	
000149F0                            ; End of function Sonic_ResetOnFloor
000149F0                            
000149F0                            ; ===========================================================================
000149F0                            ; ---------------------------------------------------------------------------
000149F0                            ; Sonic	when he	gets hurt
000149F0                            ; ---------------------------------------------------------------------------
000149F0                            
000149F0                            Obj01_Hurt:				; XREF: Obj01_Index
000149F0 4EBA 9D38                  		jsr	SpeedToPos
000149F4 0668 0030 0012             		addi.w	#$30,$12(a0)
000149FA 0828 0006 0022             		btst	#6,$22(a0)
00014A00 6700                       		beq.s	loc_1380C
00014A02 0468 0020 0012             		subi.w	#$20,$12(a0)
00014A08                            
00014A08                            loc_1380C:
00014A08 6100 0000                  		bsr.w	Sonic_HurtStop
00014A0C 6100 FAE8                  		bsr.w	Sonic_LevelBound
00014A10 6100 F4AE                  		bsr.w	Sonic_RecordPos
00014A14 6100 0000                  		bsr.w	Sonic_Animate
00014A18 6100 0000                  		bsr.w	LoadSonicDynPLC
00014A1C 4EFA 9D32                  		jmp	DisplaySprite
00014A20                            
00014A20                            ; ---------------------------------------------------------------------------
00014A20                            ; Subroutine to	stop Sonic falling after he's been hurt
00014A20                            ; ---------------------------------------------------------------------------
00014A20                            
00014A20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A20                            
00014A20                            
00014A20                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014A20 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014A24 0640 00E0                  		addi.w	#$E0,d0
00014A28 B068 000C                  		cmp.w	$C(a0),d0
00014A2C 6500 0000                  		bcs.w	KillSonic
00014A30 6100 FD70                  		bsr.w	Sonic_Floor
00014A34 0828 0001 0022             		btst	#1,$22(a0)
00014A3A 6600                       		bne.s	locret_13860
00014A3C 7000                       		moveq	#0,d0
00014A3E 3140 0012                  		move.w	d0,$12(a0)
00014A42 3140 0010                  		move.w	d0,$10(a0)
00014A46 3140 0014                  		move.w	d0,$14(a0)
00014A4A 117C 0000 001C             		move.b	#0,$1C(a0)
00014A50 5528 0024                  		subq.b	#2,$24(a0)
00014A54 317C 0078 0030             		move.w	#$78,$30(a0)
00014A5A                            
00014A5A                            locret_13860:
00014A5A 4E75                       		rts	
00014A5C                            ; End of function Sonic_HurtStop
00014A5C                            
00014A5C                            ; ===========================================================================
00014A5C                            ; ---------------------------------------------------------------------------
00014A5C                            ; Sonic	when he	dies
00014A5C                            ; ---------------------------------------------------------------------------
00014A5C                            
00014A5C                            Obj01_Death:				; XREF: Obj01_Index
00014A5C 6100 0000                  		bsr.w	GameOver
00014A60 4EBA 9C56                  		jsr	ObjectFall
00014A64 6100 F45A                  		bsr.w	Sonic_RecordPos
00014A68 6100 0000                  		bsr.w	Sonic_Animate
00014A6C 6100 0000                  		bsr.w	LoadSonicDynPLC
00014A70 4EFA 9CDE                  		jmp	DisplaySprite
00014A74                            
00014A74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A74                            
00014A74                            
00014A74                            GameOver:				; XREF: Obj01_Death
00014A74 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014A78 0640 0100                  		addi.w	#$100,d0
00014A7C B068 000C                  		cmp.w	$C(a0),d0
00014A80 6400 0000                  		bcc.w	locret_13900
00014A84 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014A8A 5428 0024                  		addq.b	#2,$24(a0)
00014A8E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014A92 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014A96 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014A9A 6600                       		bne.s	loc_138D4
00014A9C 317C 0000 003A             		move.w	#0,$3A(a0)
00014AA2 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014AA8 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014AAE 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014AB4 4238 FE1A                  		clr.b	($FFFFFE1A).w
00014AB8                            
00014AB8                            loc_138C2:
00014AB8 303C 008F                  		move.w	#$8F,d0
00014ABC 4EB9 0000 1C7C             		jsr	(PlaySound).l	; play game over music
00014AC2 7003                       		moveq	#3,d0
00014AC4 4EF9 0000 1E66             		jmp	(LoadPLC).l	; load game over patterns
00014ACA                            ; ===========================================================================
00014ACA                            
00014ACA                            loc_138D4:
00014ACA 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00014AD0 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014AD4 6700                       		beq.s	locret_13900	; if not, branch
00014AD6 317C 0000 003A             		move.w	#0,$3A(a0)
00014ADC 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014AE2 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014AE8 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014AEE 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014AF4 60C2                       		bra.s	loc_138C2
00014AF6                            ; ===========================================================================
00014AF6                            
00014AF6                            locret_13900:
00014AF6 4E75                       		rts	
00014AF8                            ; End of function GameOver
00014AF8                            
00014AF8                            ; ===========================================================================
00014AF8                            ; ---------------------------------------------------------------------------
00014AF8                            ; Sonic	when the level is restarted
00014AF8                            ; ---------------------------------------------------------------------------
00014AF8                            
00014AF8                            Obj01_ResetLevel:			; XREF: Obj01_Index
00014AF8 4A68 003A                  		tst.w	$3A(a0)
00014AFC 6700                       		beq.s	locret_13914
00014AFE 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014B02 6600                       		bne.s	locret_13914
00014B04 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014B0A                            
00014B0A                            locret_13914:
00014B0A 4E75                       		rts	
00014B0C                            
00014B0C                            ; ---------------------------------------------------------------------------
00014B0C                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014B0C                            ; ---------------------------------------------------------------------------
00014B0C                            
00014B0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B0C                            
00014B0C                            
00014B0C                            Sonic_Loops:				; XREF: Obj01_Control
00014B0C                            ;		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014B0C                            ;		beq.s	loc_13926	; if yes, branch
00014B0C                            ;		tst.b	($FFFFFE10).w	; is level GHZ ?
00014B0C                            ;		bne.w	locret_139C2	; if not, branch
00014B0C                            ;		this is commented out, please do more plane messups id love that
00014B0C                            ;loc_13926:
00014B0C 3028 000C                  		move.w	$C(a0),d0
00014B10 E248                       		lsr.w	#1,d0
00014B12 0240 0380                  		andi.w	#$380,d0
00014B16 1228 0008                  		move.b	8(a0),d1
00014B1A 0241 007F                  		andi.w	#$7F,d1
00014B1E D041                       		add.w	d1,d0
00014B20 43F8 A400                  		lea	($FFFFA400).w,a1
00014B24 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014B28 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014B2C 6700 FA76                  		beq.w	Obj01_ChkRoll
00014B30 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014B34 6700 FA6E                  		beq.w	Obj01_ChkRoll
00014B38 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014B3C 6700                       		beq.s	loc_13976
00014B3E B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014B42 6700                       		beq.s	loc_13966
00014B44 08A8 0006 0001             		bclr	#6,1(a0)
00014B4A 4E75                       		rts	
00014B4C                            ; ===========================================================================
00014B4C                            
00014B4C                            loc_13966:
00014B4C 0828 0001 0022             		btst	#1,$22(a0)
00014B52 6700                       		beq.s	loc_13976
00014B54 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B5A 4E75                       		rts	
00014B5C                            ; ===========================================================================
00014B5C                            
00014B5C                            loc_13976:
00014B5C 3428 0008                  		move.w	8(a0),d2
00014B60 0C02 002C                  		cmpi.b	#$2C,d2
00014B64 6400                       		bcc.s	loc_13988
00014B66 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B6C 4E75                       		rts	
00014B6E                            ; ===========================================================================
00014B6E                            
00014B6E                            loc_13988:
00014B6E 0C02 00E0                  		cmpi.b	#-$20,d2
00014B72 6500                       		bcs.s	loc_13996
00014B74 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014B7A 4E75                       		rts	
00014B7C                            ; ===========================================================================
00014B7C                            
00014B7C                            loc_13996:
00014B7C 0828 0006 0001             		btst	#6,1(a0)
00014B82 6600                       		bne.s	loc_139B2
00014B84 1228 0026                  		move.b	$26(a0),d1
00014B88 6700                       		beq.s	locret_139C2
00014B8A 0C01 0080                  		cmpi.b	#-$80,d1
00014B8E 6200                       		bhi.s	locret_139C2
00014B90 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014B96 4E75                       		rts	
00014B98                            ; ===========================================================================
00014B98                            
00014B98                            loc_139B2:
00014B98 1228 0026                  		move.b	$26(a0),d1
00014B9C 0C01 0080                  		cmpi.b	#-$80,d1
00014BA0 6300                       		bls.s	locret_139C2
00014BA2 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014BA8                            
00014BA8                            locret_139C2:
00014BA8 4E75                       		rts	
00014BAA                            ; End of function Sonic_Loops
00014BAA                            
00014BAA                            ; ---------------------------------------------------------------------------
00014BAA                            ; Subroutine to	animate	Sonic's sprites
00014BAA                            ; ---------------------------------------------------------------------------
00014BAA                            
00014BAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BAA                            
00014BAA                            Player_Anim:
00014BAA 0000 0000                  	dc.l	SonicAniData
00014BAE 0000 0000                  	dc.l	SonicAniData ; gronic
00014BB2 0000 0000                  	dc.l	SonicAniData ; anakama
00014BB6 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
00014BBA                            
00014BBA                            	; Insert more animation data for other characters here
00014BBA                            	
00014BBA                            Sonic_Animate:				; XREF: Obj01_Control; et al
00014BBA 7000                       			moveq	#0,d0
00014BBC 1038 FFE8                  		move.b	(v_character),d0
00014BC0 E548                       		lsl.w	#2,d0
00014BC2 43FA FFE6                  		lea 	Player_Anim(pc),a1
00014BC6                            		
00014BC6 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
00014BCA                            	
00014BCA 7000                       		moveq	#0,d0
00014BCC 1028 001C                  		move.b	$1C(a0),d0
00014BD0 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00014BD4 6700                       		beq.s	SAnim_Do	; if not, branch
00014BD6 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00014BDA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00014BE0 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00014BE6                            
00014BE6                            SAnim_Do:
00014BE6 D040                       		add.w	d0,d0
00014BE8 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00014BEC 1011                       		move.b	(a1),d0
00014BEE 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014BF0 1228 0022                  		move.b	$22(a0),d1
00014BF4 0201 0001                  		andi.b	#1,d1
00014BF8 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014BFE 8328 0001                  		or.b	d1,1(a0)
00014C02 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014C06 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00014C08 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00014C0C                            
00014C0C                            SAnim_Do2:
00014C0C 7200                       		moveq	#0,d1
00014C0E 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00014C12 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00014C16 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014C18                            
00014C18                            SAnim_Next:
00014C18 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014C1C 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00014C20                            
00014C20                            SAnim_Delay:
00014C20 4E75                       		rts	
00014C22                            ; ===========================================================================
00014C22                            
00014C22                            SAnim_End_FF:
00014C22 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014C24 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014C26 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014C2C 1029 0001                  		move.b	1(a1),d0	; read sprite number
00014C30 60E6                       		bra.s	SAnim_Next
00014C32                            ; ===========================================================================
00014C32                            
00014C32                            SAnim_End_FE:
00014C32 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014C34 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014C36 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014C3A 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014C3E 9200                       		sub.b	d0,d1
00014C40 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00014C44 60D2                       		bra.s	SAnim_Next
00014C46                            ; ===========================================================================
00014C46                            
00014C46                            SAnim_End_FD:
00014C46 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014C48 6600                       		bne.s	SAnim_End	; if not, branch
00014C4A 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014C50                            
00014C50                            SAnim_End:
00014C50 4E75                       		rts	
00014C52                            ; ===========================================================================
00014C52                            
00014C52                            SAnim_WalkRun:				; XREF: SAnim_Do
00014C52 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014C56 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014C58 5200                       		addq.b	#1,d0		; is animation walking/running?
00014C5A 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014C5E 7200                       		moveq	#0,d1
00014C60 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014C64 1428 0022                  		move.b	$22(a0),d2
00014C68 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014C6C 6600                       		bne.s	loc_13A70	; if yes, branch
00014C6E 4600                       		not.b	d0		; reverse angle
00014C70                            
00014C70                            loc_13A70:
00014C70 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014C74 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014C76 7203                       		moveq	#3,d1
00014C78                            
00014C78                            loc_13A78:
00014C78 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014C7E B302                       		eor.b	d1,d2
00014C80 8528 0001                  		or.b	d2,1(a0)
00014C84 0828 0005 0022             		btst	#5,$22(a0)
00014C8A 6600 0000                  		bne.w	SAnim_Push
00014C8E E808                       		lsr.b	#4,d0		; divide angle by $10
00014C90 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00014C94 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014C98 6A00                       		bpl.s	loc_13A9C
00014C9A 4442                       		neg.w	d2
00014C9C                            
00014C9C                            loc_13A9C:
00014C9C 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014CA2 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014CA6 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014CA8 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014CAE 1200                       		move.b	d0,d1
00014CB0 E209                       		lsr.b	#1,d1
00014CB2 D001                       		add.b	d1,d0
00014CB4                            
00014CB4                            loc_13AB4:
00014CB4 D000                       		add.b	d0,d0
00014CB6 1600                       		move.b	d0,d3
00014CB8 4442                       		neg.w	d2
00014CBA 0642 0800                  		addi.w	#$800,d2
00014CBE 6A00                       		bpl.s	loc_13AC2
00014CC0 7400                       		moveq	#0,d2
00014CC2                            
00014CC2                            loc_13AC2:
00014CC2 E04A                       		lsr.w	#8,d2
00014CC4 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014CC8 6100 FF42                  		bsr.w	SAnim_Do2
00014CCC D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00014CD0 4E75                       		rts	
00014CD2                            ; ===========================================================================
00014CD2                            
00014CD2                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00014CD2 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00014CD4 6600                       		bne.s	SAnim_Push	; if not, branch
00014CD6 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014CDA 6A00                       		bpl.s	loc_13ADE
00014CDC 4442                       		neg.w	d2
00014CDE                            
00014CDE                            loc_13ADE:
00014CDE 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00014CE4 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00014CE8 6400                       		bcc.s	loc_13AF0	; if yes, branch
00014CEA 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014CF0                            
00014CF0                            loc_13AF0:
00014CF0 4442                       		neg.w	d2
00014CF2 0642 0400                  		addi.w	#$400,d2
00014CF6 6A00                       		bpl.s	loc_13AFA
00014CF8 7400                       		moveq	#0,d2
00014CFA                            
00014CFA                            loc_13AFA:
00014CFA E04A                       		lsr.w	#8,d2
00014CFC 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014D00 1228 0022                  		move.b	$22(a0),d1
00014D04 0201 0001                  		andi.b	#1,d1
00014D08 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014D0E 8328 0001                  		or.b	d1,1(a0)
00014D12 6000 FEF8                  		bra.w	SAnim_Do2
00014D16                            ; ===========================================================================
00014D16                            
00014D16                            SAnim_Push:				; XREF: SAnim_RollJump
00014D16 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014D1A 6B00                       		bmi.s	loc_13B1E
00014D1C 4442                       		neg.w	d2
00014D1E                            
00014D1E                            loc_13B1E:
00014D1E 0642 0800                  		addi.w	#$800,d2
00014D22 6A00                       		bpl.s	loc_13B26
00014D24 7400                       		moveq	#0,d2
00014D26                            
00014D26                            loc_13B26:
00014D26 EC4A                       		lsr.w	#6,d2
00014D28 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014D2C 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014D32 1228 0022                  		move.b	$22(a0),d1
00014D36 0201 0001                  		andi.b	#1,d1
00014D3A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014D40 8328 0001                  		or.b	d1,1(a0)
00014D44 6000 FEC6                  		bra.w	SAnim_Do2
00014D48                            ; End of function Sonic_Animate
00014D48                            
00014D48                            ; ===========================================================================
00014D48                            SonicAniData:
00014D48                            	include "_anim\Sonic.asm"
00014D48                            ; ---------------------------------------------------------------------------
00014D48                            ; Animation script - Sonic
00014D48                            ; ---------------------------------------------------------------------------
00014D48 0000                       		dc.w SonAni_Walk-SonicAniData
00014D4A 0000                       		dc.w SonAni_Run-SonicAniData
00014D4C 0000                       		dc.w SonAni_Roll-SonicAniData
00014D4E 0000                       		dc.w SonAni_Roll2-SonicAniData
00014D50 0000                       		dc.w SonAni_Push-SonicAniData
00014D52 0000                       		dc.w SonAni_Wait-SonicAniData
00014D54 0000                       		dc.w SonAni_Balance-SonicAniData
00014D56 0000                       		dc.w SonAni_LookUp-SonicAniData
00014D58 0000                       		dc.w SonAni_Duck-SonicAniData
00014D5A 0000                       		dc.w SonAni_Warp1-SonicAniData
00014D5C 0000                       		dc.w SonAni_Warp2-SonicAniData
00014D5E 0000                       		dc.w SonAni_Warp3-SonicAniData
00014D60 0000                       		dc.w SonAni_Warp4-SonicAniData
00014D62 0000                       		dc.w SonAni_Stop-SonicAniData
00014D64 0000                       		dc.w SonAni_Float1-SonicAniData
00014D66 0000                       		dc.w SonAni_Float2-SonicAniData
00014D68 0000                       		dc.w SonAni_Spring-SonicAniData
00014D6A 0000                       		dc.w SonAni_LZHang-SonicAniData
00014D6C 0000                       		dc.w SonAni_Leap1-SonicAniData
00014D6E 0000                       		dc.w SonAni_Leap2-SonicAniData
00014D70 0000                       		dc.w SonAni_Surf-SonicAniData
00014D72 0000                       		dc.w SonAni_Bubble-SonicAniData
00014D74 0000                       		dc.w SonAni_Death1-SonicAniData
00014D76 0000                       		dc.w SonAni_Drown-SonicAniData
00014D78 0000                       		dc.w SonAni_Death2-SonicAniData
00014D7A 0000                       		dc.w SonAni_Shrink-SonicAniData
00014D7C 0000                       		dc.w SonAni_Hurt-SonicAniData
00014D7E 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014D80 0000                       		dc.w SonAni_Blank-SonicAniData
00014D82 0000                       		dc.w SonAni_Float3-SonicAniData
00014D84 0000                       		dc.w SonAni_Float4-SonicAniData
00014D86 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014D90 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014D98 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014DA0 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014DA8 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014DB0 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00014DC6 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
00014DCA 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014DCE 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00014DD2 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014DD6 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014DDA 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014DDE 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014DE2 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00014DE6 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00014DEA 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014DF2 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014DF6 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014DFA 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014E00 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014E06 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014E0A 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00014E12 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014E16 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014E1A 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014E1E 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014E28 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
00014E2C 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00014E30 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014E34 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014E3C 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00014E40                            		even
00014E40                            		even
00014E40                            
00014E40                            ; ---------------------------------------------------------------------------
00014E40                            ; Sonic	pattern	loading	subroutine
00014E40                            ; ---------------------------------------------------------------------------
00014E40                            
00014E40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E40                            Player_DPLC:
00014E40 0000 0000                  	dc.l	SonicDynPLC
00014E44 0000 0000                  	dc.l	SonicDynPLC ; gronic
00014E48 0000 0000                  	dc.l	SonicDynPLC ; anakama
00014E4C 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
00014E50                            	; add pointers for player dplc here
00014E50                            Player_Art:
00014E50 0000 0000                  	dc.l	Art_Sonic
00014E54 0000 0000                  	dc.l	Art_Sonic ; gronic
00014E58 0000 0000                  	dc.l	Art_Sonic ; anakama
00014E5C 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
00014E60                            	; add pointers for player art here
00014E60                            
00014E60                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014E60 7000                       		moveq	#0,d0
00014E62 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014E66 B038 F766                  		cmp.b	($FFFFF766).w,d0
00014E6A 6700                       		beq.s	locret_13C96
00014E6C 11C0 F766                  		move.b	d0,($FFFFF766).w
00014E70                            		
00014E70 323C 0000                  		move.w	#0,d1
00014E74 1238 FFE8                  		move.b	(v_character),d1
00014E78 E549                       		lsl.w	#2,d1
00014E7A 45FA FFC4                  		lea 	Player_DPLC(pc),a2
00014E7E                            
00014E7E 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
00014E82                            		
00014E82 D040                       		add.w	d0,d0
00014E84 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014E88 7200                       		moveq	#0,d1
00014E8A 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014E8C 5301                       		subq.b	#1,d1
00014E8E 6B00                       		bmi.s	locret_13C96
00014E90 47F8 C800                  		lea	($FFFFC800).w,a3
00014E94 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014E9A                            
00014E9A                            SPLC_ReadEntry:
00014E9A 303C 0000                  		move.w	#0,d0
00014E9E 1038 FFE8                  		move.b	(v_character),d0
00014EA2 E548                       		lsl.w	#2,d0
00014EA4 43FA FFAA                  		lea 	Player_Art(pc),a1
00014EA8                            
00014EA8 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
00014EAC                            
00014EAC 7400                       		moveq	#0,d2
00014EAE 141A                       		move.b	(a2)+,d2
00014EB0 3002                       		move.w	d2,d0
00014EB2 E808                       		lsr.b	#4,d0
00014EB4 E14A                       		lsl.w	#8,d2
00014EB6 141A                       		move.b	(a2)+,d2
00014EB8 EB4A                       		lsl.w	#5,d2
00014EBA D3C2                       		adda.l	d2,a1
00014EBC                            
00014EBC                            SPLC_LoadTile:
00014EBC 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014EC0 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00014EC4 47EB 0020                  		lea	$20(a3),a3	; next tile
00014EC8 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014ECC                            
00014ECC 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014ED0                            
00014ED0                            locret_13C96:
00014ED0 4E75                       		rts	
00014ED2                            ; End of function LoadSonicDynPLC
00014ED2                            
00014ED2                            ; ===========================================================================
00014ED2                            ; ---------------------------------------------------------------------------
00014ED2                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014ED2                            ; ---------------------------------------------------------------------------
00014ED2                            
00014ED2                            Obj0A:					; XREF: Obj_Index
00014ED2 7000                       		moveq	#0,d0
00014ED4 1028 0024                  		move.b	$24(a0),d0
00014ED8 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014EDC 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014EE0                            ; ===========================================================================
00014EE0 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014EE4 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014EE8 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014EEC 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014EF0 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014EF2                            ; ===========================================================================
00014EF2                            
00014EF2                            Obj0A_Main:				; XREF: Obj0A_Index
00014EF2 5428 0024                  		addq.b	#2,$24(a0)
00014EF6 217C 0001 3AE4 0004        		move.l	#Map_obj64,4(a0)
00014EFE 317C 8348 0002             		move.w	#$8348,2(a0)
00014F04 117C 0084 0001             		move.b	#$84,1(a0)
00014F0A 117C 0010 0019             		move.b	#$10,$19(a0)
00014F10 117C 0001 0018             		move.b	#1,$18(a0)
00014F16 1028 0028                  		move.b	$28(a0),d0
00014F1A 6A00                       		bpl.s	loc_13D00
00014F1C 5028 0024                  		addq.b	#8,$24(a0)
00014F20 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014F28 317C 0440 0002             		move.w	#$440,2(a0)
00014F2E 0240 007F                  		andi.w	#$7F,d0
00014F32 1140 0033                  		move.b	d0,$33(a0)
00014F36 6000 0000                  		bra.w	Obj0A_Countdown
00014F3A                            ; ===========================================================================
00014F3A                            
00014F3A                            loc_13D00:
00014F3A 1140 001C                  		move.b	d0,$1C(a0)
00014F3E 3168 0008 0030             		move.w	8(a0),$30(a0)
00014F44 317C FF78 0012             		move.w	#-$88,$12(a0)
00014F4A                            
00014F4A                            Obj0A_Animate:				; XREF: Obj0A_Index
00014F4A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014F50 4EB9 0000 B79E             		jsr	AnimateSprite
00014F56                            
00014F56                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014F56 3038 F646                  		move.w	($FFFFF646).w,d0
00014F5A B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014F5E 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014F60 117C 0006 0024             		move.b	#6,$24(a0)
00014F66 5E28 001C                  		addq.b	#7,$1C(a0)
00014F6A 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014F70 6700                       		beq.s	Obj0A_Display
00014F72 6000                       		bra.s	Obj0A_Display
00014F74                            ; ===========================================================================
00014F74                            
00014F74                            Obj0A_Wobble:
00014F74 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014F78 6700                       		beq.s	loc_13D44
00014F7A 5868 0030                  		addq.w	#4,$30(a0)
00014F7E                            
00014F7E                            loc_13D44:
00014F7E 1028 0026                  		move.b	$26(a0),d0
00014F82 5228 0026                  		addq.b	#1,$26(a0)
00014F86 0240 007F                  		andi.w	#$7F,d0
00014F8A 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014F90 1031 0000                  		move.b	(a1,d0.w),d0
00014F94 4880                       		ext.w	d0
00014F96 D068 0030                  		add.w	$30(a0),d0
00014F9A 3140 0008                  		move.w	d0,8(a0)
00014F9E 6100                       		bsr.s	Obj0A_ShowNumber
00014FA0 4EBA 9788                  		jsr	SpeedToPos
00014FA4 4A28 0001                  		tst.b	1(a0)
00014FA8 6A00                       		bpl.s	Obj0A_Delete
00014FAA 4EFA 97A4                  		jmp	DisplaySprite
00014FAE                            ; ===========================================================================
00014FAE                            
00014FAE                            Obj0A_Delete:
00014FAE 4EFA 97DC                  		jmp	DeleteObject
00014FB2                            ; ===========================================================================
00014FB2                            
00014FB2                            Obj0A_Display:				; XREF: Obj0A_Index
00014FB2 6100                       		bsr.s	Obj0A_ShowNumber
00014FB4 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014FBA 4EB9 0000 B79E             		jsr	AnimateSprite
00014FC0 4EFA 978E                  		jmp	DisplaySprite
00014FC4                            ; ===========================================================================
00014FC4                            
00014FC4                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014FC4 4EFA 97C6                  		jmp	DeleteObject
00014FC8                            ; ===========================================================================
00014FC8                            
00014FC8                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014FC8 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014FCE 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014FD0 5368 0038                  		subq.w	#1,$38(a0)
00014FD4 6600                       		bne.s	Obj0A_Display2
00014FD6 117C 000E 0024             		move.b	#$E,$24(a0)
00014FDC 5E28 001C                  		addq.b	#7,$1C(a0)
00014FE0 60D0                       		bra.s	Obj0A_Display
00014FE2                            ; ===========================================================================
00014FE2                            
00014FE2                            Obj0A_Display2:
00014FE2 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014FE8 4EB9 0000 B79E             		jsr	AnimateSprite
00014FEE 4A28 0001                  		tst.b	1(a0)
00014FF2 6A00                       		bpl.s	Obj0A_Delete3
00014FF4 4EFA 975A                  		jmp	DisplaySprite
00014FF8                            ; ===========================================================================
00014FF8                            
00014FF8                            Obj0A_Delete3:
00014FF8 4EFA 9792                  		jmp	DeleteObject
00014FFC                            ; ===========================================================================
00014FFC                            
00014FFC                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014FFC 4A68 0038                  		tst.w	$38(a0)
00015000 6700                       		beq.s	locret_13E1A
00015002 5368 0038                  		subq.w	#1,$38(a0)
00015006 6600                       		bne.s	locret_13E1A
00015008 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
0001500E 6400                       		bcc.s	locret_13E1A
00015010 317C 000F 0038             		move.w	#$F,$38(a0)
00015016 4268 0012                  		clr.w	$12(a0)
0001501A 117C 0080 0001             		move.b	#$80,1(a0)
00015020 3028 0008                  		move.w	8(a0),d0
00015024 9078 F700                  		sub.w	($FFFFF700).w,d0
00015028 0640 0080                  		addi.w	#$80,d0
0001502C 3140 0008                  		move.w	d0,8(a0)
00015030 3028 000C                  		move.w	$C(a0),d0
00015034 9078 F704                  		sub.w	($FFFFF704).w,d0
00015038 0640 0080                  		addi.w	#$80,d0
0001503C 3140 000A                  		move.w	d0,$A(a0)
00015040 117C 000C 0024             		move.b	#$C,$24(a0)
00015046                            
00015046                            locret_13E1A:
00015046 4E75                       		rts	
00015048                            ; ===========================================================================
00015048                            Obj0A_WobbleData:
00015048 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015059 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
0001506A 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
0001507B 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
0001508B FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015098 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000150A5 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000150B2 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
000150BF FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
000150C8                            ; ===========================================================================
000150C8                            
000150C8                            Obj0A_Countdown:			; XREF: Obj0A_Index
000150C8 4A68 002C                  		tst.w	$2C(a0)
000150CC 6600 0000                  		bne.w	loc_13F86
000150D0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000150D6 6400 0000                  		bcc.w	locret_1408C
000150DA 0838 0006 D022             		btst	#6,($FFFFD022).w
000150E0 6700 0000                  		beq.w	locret_1408C
000150E4 5368 0038                  		subq.w	#1,$38(a0)
000150E8 6A00 0000                  		bpl.w	loc_13FAC
000150EC 317C 003B 0038             		move.w	#59,$38(a0)
000150F2 317C 0001 0036             		move.w	#1,$36(a0)
000150F8 4EB9 0000 33FE             		jsr	(RandomNumber).l
000150FE 0240 0001                  		andi.w	#1,d0
00015102 1140 0034                  		move.b	d0,$34(a0)
00015106 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0001510A 0C40 0019                  		cmpi.w	#$19,d0
0001510E 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00015110 0C40 0014                  		cmpi.w	#$14,d0
00015114 6700                       		beq.s	Obj0A_WarnSound
00015116 0C40 000F                  		cmpi.w	#$F,d0
0001511A 6700                       		beq.s	Obj0A_WarnSound
0001511C 0C40 000C                  		cmpi.w	#$C,d0
00015120 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00015122 6600                       		bne.s	loc_13F02
00015124 303C 0092                  		move.w	#$92,d0
00015128 4EB9 0000 1C7C             		jsr	(PlaySound).l	; play countdown music
0001512E                            
0001512E                            loc_13F02:
0001512E 5328 0032                  		subq.b	#1,$32(a0)
00015132 6A00                       		bpl.s	Obj0A_ReduceAir
00015134 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001513A 08E8 0007 0036             		bset	#7,$36(a0)
00015140 6000                       		bra.s	Obj0A_ReduceAir
00015142                            ; ===========================================================================
00015142                            
00015142                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00015142 303C 00C2                  		move.w	#$C2,d0
00015146 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
0001514C                            
0001514C                            Obj0A_ReduceAir:
0001514C 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00015150 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00015154 6100 0000                  		bsr.w	ResumeMusic
00015158 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001515E 303C 00B2                  		move.w	#$B2,d0
00015162 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play drowning sound
00015168 117C 000A 0034             		move.b	#$A,$34(a0)
0001516E 317C 0001 0036             		move.w	#1,$36(a0)
00015174 317C 0078 002C             		move.w	#$78,$2C(a0)
0001517A 2F08                       		move.l	a0,-(sp)
0001517C 41F8 D000                  		lea	($FFFFD000).w,a0
00015180 6100 F81C                  		bsr.w	Sonic_ResetOnFloor
00015184 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
0001518A 08E8 0001 0022             		bset	#1,$22(a0)
00015190 08E8 0007 0002             		bset	#7,2(a0)
00015196 317C 0000 0012             		move.w	#0,$12(a0)
0001519C 317C 0000 0010             		move.w	#0,$10(a0)
000151A2 317C 0000 0014             		move.w	#0,$14(a0)
000151A8 11FC 0001 F744             		move.b	#1,($FFFFF744).w
000151AE 205F                       		movea.l	(sp)+,a0
000151B0 4E75                       		rts	
000151B2                            ; ===========================================================================
000151B2                            
000151B2                            loc_13F86:
000151B2 5368 002C                  		subq.w	#1,$2C(a0)
000151B6 6600                       		bne.s	loc_13F94
000151B8 11FC 0006 D024             		move.b	#6,($FFFFD024).w
000151BE 4E75                       		rts	
000151C0                            ; ===========================================================================
000151C0                            
000151C0                            loc_13F94:
000151C0 2F08                       		move.l	a0,-(sp)
000151C2 41F8 D000                  		lea	($FFFFD000).w,a0
000151C6 4EBA 9562                  		jsr	SpeedToPos
000151CA 0668 0010 0012             		addi.w	#$10,$12(a0)
000151D0 205F                       		movea.l	(sp)+,a0
000151D2 6000                       		bra.s	loc_13FAC
000151D4                            ; ===========================================================================
000151D4                            
000151D4                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
000151D4 6000                       		bra.s	Obj0A_MakeItem
000151D6                            ; ===========================================================================
000151D6                            
000151D6                            loc_13FAC:
000151D6 4A68 0036                  		tst.w	$36(a0)
000151DA 6700 0000                  		beq.w	locret_1408C
000151DE 5368 003A                  		subq.w	#1,$3A(a0)
000151E2 6A00 0000                  		bpl.w	locret_1408C
000151E6                            
000151E6                            Obj0A_MakeItem:
000151E6 4EB9 0000 33FE             		jsr	(RandomNumber).l
000151EC 0240 000F                  		andi.w	#$F,d0
000151F0 3140 003A                  		move.w	d0,$3A(a0)
000151F4 4EBA 99E0                  		jsr	SingleObjLoad
000151F8 6600 0000                  		bne.w	locret_1408C
000151FC 12BC 000A                  		move.b	#$A,0(a1)	; load object
00015200 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015206 7006                       		moveq	#6,d0
00015208 0838 0000 D022             		btst	#0,($FFFFD022).w
0001520E 6700                       		beq.s	loc_13FF2
00015210 4440                       		neg.w	d0
00015212 137C 0040 0026             		move.b	#$40,$26(a1)
00015218                            
00015218                            loc_13FF2:
00015218 D169 0008                  		add.w	d0,8(a1)
0001521C 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00015222 137C 0006 0028             		move.b	#6,$28(a1)
00015228 4A68 002C                  		tst.w	$2C(a0)
0001522C 6700 0000                  		beq.w	loc_1403E
00015230 0268 0007 003A             		andi.w	#7,$3A(a0)
00015236 0668 0000 003A             		addi.w	#0,$3A(a0)
0001523C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015240 0440 000C                  		subi.w	#$C,d0
00015244 3340 000C                  		move.w	d0,$C(a1)
00015248 4EB9 0000 33FE             		jsr	(RandomNumber).l
0001524E 1340 0026                  		move.b	d0,$26(a1)
00015252 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015256 0200 0003                  		andi.b	#3,d0
0001525A 6600                       		bne.s	loc_14082
0001525C 137C 000E 0028             		move.b	#$E,$28(a1)
00015262 6000                       		bra.s	loc_14082
00015264                            ; ===========================================================================
00015264                            
00015264                            loc_1403E:
00015264 0828 0007 0036             		btst	#7,$36(a0)
0001526A 6700                       		beq.s	loc_14082
0001526C 3438 FE14                  		move.w	($FFFFFE14).w,d2
00015270 E24A                       		lsr.w	#1,d2
00015272 4EB9 0000 33FE             		jsr	(RandomNumber).l
00015278 0240 0003                  		andi.w	#3,d0
0001527C 6600                       		bne.s	loc_1406A
0001527E 08E8 0006 0036             		bset	#6,$36(a0)
00015284 6600                       		bne.s	loc_14082
00015286 1342 0028                  		move.b	d2,$28(a1)
0001528A 337C 001C 0038             		move.w	#$1C,$38(a1)
00015290                            
00015290                            loc_1406A:
00015290 4A28 0034                  		tst.b	$34(a0)
00015294 6600                       		bne.s	loc_14082
00015296 08E8 0006 0036             		bset	#6,$36(a0)
0001529C 6600                       		bne.s	loc_14082
0001529E 1342 0028                  		move.b	d2,$28(a1)
000152A2 337C 001C 0038             		move.w	#$1C,$38(a1)
000152A8                            
000152A8                            loc_14082:
000152A8 5328 0034                  		subq.b	#1,$34(a0)
000152AC 6A00                       		bpl.s	locret_1408C
000152AE 4268 0036                  		clr.w	$36(a0)
000152B2                            
000152B2                            locret_1408C:
000152B2 4E75                       		rts	
000152B4                            
000152B4                            ; ---------------------------------------------------------------------------
000152B4                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000152B4                            ; ---------------------------------------------------------------------------
000152B4                            
000152B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152B4                            
000152B4                            
000152B4                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
000152B4 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000152BA                             
000152BA                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
000152BA                             
000152BA 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
000152BE                             
000152BE 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000152C4 6600                       		bne.s	Air_GetBgm2	; if not, branch
000152C6 43F9 0000 4482             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000152CC 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000152CE                             
000152CE                            Air_GetBgm2:
000152CE 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000152D4 6600                       		bne.s	Air_GetBgm3	; if not, branch
000152D6 43F9 0000 448A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000152DC 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000152DE                             
000152DE                            Air_GetBgm3:
000152DE 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
000152E4 6600                       		bne.s	Air_GetBgm4	; if not, branch
000152E6 43F9 0000 4492             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
000152EC 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000152EE                             
000152EE                            Air_GetBgm4:
000152EE 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000152F4 6600                       		bne.s	Air_PlayMusic	; if not, branch
000152F6 43F9 0000 449A             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000152FC                             
000152FC                            Air_PlayMusic:
000152FC 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00015300                             
00015300                            loc_140A6:
00015300 4EB9 0000 1C7C             		jsr	(PlaySound).l
00015306                             
00015306                            ; NineKode ends here
00015306                            
00015306                            loc_140AC:
00015306 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0001530C 4238 D372                  		clr.b	($FFFFD372).w
00015310 4E75                       		rts	
00015312                            ; End of function ResumeMusic
00015312                            
00015312                            ; ===========================================================================
00015312                            Ani_obj0A:
00015312                            	include "_anim\obj0A.asm"
00015312                            ; ---------------------------------------------------------------------------
00015312                            ; Animation script - countdown numbers and bubbles (LZ)
00015312                            ; ---------------------------------------------------------------------------
00015312 0000                       		dc.w byte_140D6-Ani_obj0A
00015314 0000                       		dc.w byte_140E0-Ani_obj0A
00015316 0000                       		dc.w byte_140EA-Ani_obj0A
00015318 0000                       		dc.w byte_140F4-Ani_obj0A
0001531A 0000                       		dc.w byte_140FE-Ani_obj0A
0001531C 0000                       		dc.w byte_14108-Ani_obj0A
0001531E 0000                       		dc.w byte_14112-Ani_obj0A
00015320 0000                       		dc.w byte_14118-Ani_obj0A
00015322 0000                       		dc.w byte_14120-Ani_obj0A
00015324 0000                       		dc.w byte_14128-Ani_obj0A
00015326 0000                       		dc.w byte_14130-Ani_obj0A
00015328 0000                       		dc.w byte_14138-Ani_obj0A
0001532A 0000                       		dc.w byte_14140-Ani_obj0A
0001532C 0000                       		dc.w byte_14148-Ani_obj0A
0001532E 0000                       		dc.w byte_1414A-Ani_obj0A
00015330 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
0001533A 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00015344 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
0001534E 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00015358 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00015362 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
0001536C 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00015372 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
0001537A 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00015382 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
0001538A 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00015392 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
0001539A 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
000153A2 0EFC                       byte_14148:	dc.b $E, $FC
000153A4 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
000153AA                            		even
000153AA                            		even
000153AA                            
000153AA                            ; ---------------------------------------------------------------------------
000153AA                            ; Sprite mappings - drowning countdown numbers (LZ)
000153AA                            ; ---------------------------------------------------------------------------
000153AA                            Map_obj0A:
000153AA                            	include "_maps\obj0A.asm"
000153AA                            ; ---------------------------------------------------------------------------
000153AA                            ; Sprite mappings - drowning countdown numbers (LZ)
000153AA                            ; ---------------------------------------------------------------------------
000153AA 0000                       		dc.w byte_14152-Map_obj0A
000153AC 01                         byte_14152:	dc.b 1
000153AD E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
000153B2                            		even
000153B2                            		even
000153B2                            
000153B2                            ; ===========================================================================
000153B2                            ; ---------------------------------------------------------------------------
000153B2                            ; Object 38 - shield and invincibility stars
000153B2                            ; ---------------------------------------------------------------------------
000153B2                            
000153B2                            Obj38:					; XREF: Obj_Index
000153B2 7000                       		moveq	#0,d0
000153B4 1028 0024                  		move.b	$24(a0),d0
000153B8 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
000153BC 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
000153C0                            ; ===========================================================================
000153C0 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
000153C2 0000                       		dc.w Obj38_Shield-Obj38_Index
000153C4 0000                       		dc.w Obj38_Stars-Obj38_Index
000153C6                            ; ===========================================================================
000153C6                            
000153C6                            Obj38_Main:				; XREF: Obj38_Index
000153C6 5428 0024                  		addq.b	#2,$24(a0)
000153CA 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
000153D2 117C 0004 0001             		move.b	#4,1(a0)
000153D8 117C 0001 0018             		move.b	#1,$18(a0)
000153DE 117C 0010 0019             		move.b	#$10,$19(a0)
000153E4 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
000153E8 6600                       		bne.s	Obj38_DoStars	; if not, branch
000153EA 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
000153F0 4E75                       		rts	
000153F2                            ; ===========================================================================
000153F2                            
000153F2                            Obj38_DoStars:
000153F2 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
000153F6 317C 055C 0002             		move.w	#$55C,2(a0)
000153FC 4E75                       		rts	
000153FE                            ; ===========================================================================
000153FE                            
000153FE                            Obj38_Shield:				; XREF: Obj38_Index
000153FE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015402 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00015404 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00015408 6700                       		beq.s	Obj38_Delete	; if not, branch
0001540A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00015410 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00015416 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001541C 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00015422 4EB9 0000 B79E             		jsr	AnimateSprite
00015428 4EFA 9326                  		jmp	DisplaySprite
0001542C                            ; ===========================================================================
0001542C                            
0001542C                            Obj38_RmvShield:
0001542C 4E75                       		rts	
0001542E                            ; ===========================================================================
0001542E                            
0001542E                            Obj38_Delete:
0001542E 4EFA 935C                  		jmp	DeleteObject
00015432                            ; ===========================================================================
00015432                            
00015432                            Obj38_Stars:				; XREF: Obj38_Index
00015432 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015436 6700                       		beq.s	Obj38_Delete2	; if not, branch
00015438 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0001543C 1228 001C                  		move.b	$1C(a0),d1
00015440 5301                       		subq.b	#1,d1
00015442 6000                       		bra.s	Obj38_StarTrail
00015444                            ; ===========================================================================
00015444 E909                       		lsl.b	#4,d1
00015446 5801                       		addq.b	#4,d1
00015448 9001                       		sub.b	d1,d0
0001544A 1228 0030                  		move.b	$30(a0),d1
0001544E 9001                       		sub.b	d1,d0
00015450 5801                       		addq.b	#4,d1
00015452 0201 000F                  		andi.b	#$F,d1
00015456 1141 0030                  		move.b	d1,$30(a0)
0001545A 6000                       		bra.s	Obj38_StarTrail2a
0001545C                            ; ===========================================================================
0001545C                            
0001545C                            Obj38_StarTrail:			; XREF: Obj38_Stars
0001545C E709                       		lsl.b	#3,d1
0001545E 1401                       		move.b	d1,d2
00015460 D201                       		add.b	d1,d1
00015462 D202                       		add.b	d2,d1
00015464 5801                       		addq.b	#4,d1
00015466 9001                       		sub.b	d1,d0
00015468 1228 0030                  		move.b	$30(a0),d1
0001546C 9001                       		sub.b	d1,d0
0001546E 5801                       		addq.b	#4,d1
00015470 0C01 0018                  		cmpi.b	#$18,d1
00015474 6500                       		bcs.s	Obj38_StarTrail2
00015476 7200                       		moveq	#0,d1
00015478                            
00015478                            Obj38_StarTrail2:
00015478 1141 0030                  		move.b	d1,$30(a0)
0001547C                            
0001547C                            Obj38_StarTrail2a:
0001547C 43F8 CB00                  		lea	($FFFFCB00).w,a1
00015480 43F1 0000                  		lea	(a1,d0.w),a1
00015484 3159 0008                  		move.w	(a1)+,8(a0)
00015488 3159 000C                  		move.w	(a1)+,$C(a0)
0001548C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015492 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00015498 4EB9 0000 B79E             		jsr	AnimateSprite
0001549E 4EFA 92B0                  		jmp	DisplaySprite
000154A2                            ; ===========================================================================
000154A2                            
000154A2                            Obj38_Delete2:				; XREF: Obj38_Stars
000154A2 4EFA 92E8                  		jmp	DeleteObject
000154A6                            ; ===========================================================================
000154A6                            ; ---------------------------------------------------------------------------
000154A6                            ; Object 4A - special stage entry from beta
000154A6                            ; ---------------------------------------------------------------------------
000154A6                            
000154A6                            Obj4A:					; XREF: Obj_Index
000154A6 7000                       		moveq	#0,d0
000154A8 1028 0024                  		move.b	$24(a0),d0
000154AC 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
000154B0 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
000154B4                            ; ===========================================================================
000154B4 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
000154B6 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
000154B8 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
000154BA                            ; ===========================================================================
000154BA                            
000154BA                            Obj4A_Main:				; XREF: Obj4A_Index
000154BA 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
000154BE 6700                       		beq.s	Obj4A_Main2	; if yes, branch
000154C0 4E75                       		rts	
000154C2                            ; ===========================================================================
000154C2                            
000154C2                            Obj4A_Main2:
000154C2 5428 0024                  		addq.b	#2,$24(a0)
000154C6 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
000154CE 117C 0004 0001             		move.b	#4,1(a0)
000154D4 117C 0001 0018             		move.b	#1,$18(a0)
000154DA 117C 0038 0019             		move.b	#$38,$19(a0)
000154E0 317C 0541 0002             		move.w	#$541,2(a0)
000154E6 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
000154EC                            
000154EC                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
000154EC 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000154F2 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000154F8 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000154FE 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00015504 4EB9 0000 B79E             		jsr	AnimateSprite
0001550A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00015510 6600                       		bne.s	Obj4A_Display
00015512 4A38 D000                  		tst.b	($FFFFD000).w
00015516 6700                       		beq.s	Obj4A_Display
00015518 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
0001551E 303C 00A8                  		move.w	#$A8,d0
00015522 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00015528                            
00015528                            Obj4A_Display:
00015528 4EFA 9226                  		jmp	DisplaySprite
0001552C                            ; ===========================================================================
0001552C                            
0001552C                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
0001552C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00015530 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00015532 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00015538 4EFA 9252                  		jmp	DeleteObject
0001553C                            ; ===========================================================================
0001553C                            
0001553C                            Obj4A_Wait:
0001553C 4E75                       		rts	
0001553E                            ; ===========================================================================
0001553E                            ; ---------------------------------------------------------------------------
0001553E                            ; Object 08 - water splash (LZ)
0001553E                            ; ---------------------------------------------------------------------------
0001553E                            
0001553E                            Obj08:					; XREF: Obj_Index
0001553E 7000                       		moveq	#0,d0
00015540 1028 0024                  		move.b	$24(a0),d0
00015544 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00015548 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
0001554C                            ; ===========================================================================
0001554C 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
0001554E 0000                       		dc.w Obj08_Display-Obj08_Index
00015550 0000                       		dc.w Obj08_Delete-Obj08_Index
00015552                            ; ===========================================================================
00015552                            
00015552                            Obj08_Main:				; XREF: Obj08_Index
00015552 5428 0024                  		addq.b	#2,$24(a0)
00015556 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
0001555E 0028 0004 0001             		ori.b	#4,1(a0)
00015564 117C 0001 0018             		move.b	#1,$18(a0)
0001556A 117C 0010 0019             		move.b	#$10,$19(a0)
00015570 317C 4259 0002             		move.w	#$4259,2(a0)
00015576 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
0001557C                            
0001557C                            Obj08_Display:				; XREF: Obj08_Index
0001557C 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00015582 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00015588 4EB9 0000 B79E             		jsr	AnimateSprite
0001558E 4EFA 91C0                  		jmp	DisplaySprite
00015592                            ; ===========================================================================
00015592                            
00015592                            Obj08_Delete:				; XREF: Obj08_Index
00015592 4EFA 91F8                  		jmp	DeleteObject	; delete when animation	is complete
00015596                            ; ===========================================================================
00015596                            Ani_obj38:
00015596                            	include "_anim\obj38.asm"
00015596                            ; ---------------------------------------------------------------------------
00015596                            ; Animation script - shield and invincibility stars
00015596                            ; ---------------------------------------------------------------------------
00015596 0000                       		dc.w byte_14356-Ani_obj38
00015598 0000                       		dc.w byte_1435E-Ani_obj38
0001559A 0000                       		dc.w byte_14364-Ani_obj38
0001559C 0000                       		dc.w byte_1437E-Ani_obj38
0001559E 0000                       		dc.w byte_14398-Ani_obj38
000155A0 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
000155A8 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
000155AE 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
000155BF 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
000155C8 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000155D9 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
000155E2 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000155F3 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
000155FC                            		even
000155FC                            		even
000155FC                            
000155FC                            ; ---------------------------------------------------------------------------
000155FC                            ; Sprite mappings - shield and invincibility stars
000155FC                            ; ---------------------------------------------------------------------------
000155FC                            Map_obj38:
000155FC                            	include "_maps\obj38.asm"
000155FC                            ; ---------------------------------------------------------------------------
000155FC                            ; Sprite mappings - shield and invincibility stars
000155FC                            ; ---------------------------------------------------------------------------
000155FC 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00015600 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00015604 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00015608 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
0001560C 04                         byte_143C2:	dc.b 4
0001560D E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015612 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015617 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
0001561C 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015621 04                         byte_143D7:	dc.b 4
00015622 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00015627 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
0001562C 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00015631 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00015636 04                         byte_143EC:	dc.b 4
00015637 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
0001563C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015641 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015646 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0001564B 04                         byte_14401:	dc.b 4
0001564C E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015651 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015656 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
0001565B 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015660 04                         byte_14416:	dc.b 4
00015661 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015666 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0001566B 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00015670 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015675 04                         byte_1442B:	dc.b 4
00015676 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0001567B E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00015680 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00015685 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0001568A 04                         byte_14440:	dc.b 4
0001568B E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00015690 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00015695 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0001569A 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000156A0 00                         		even
000156A0 00                         		even
000156A0                            
000156A0                            Ani_obj4A:
000156A0                            	include "_anim\obj4A.asm"
000156A0                            ; ---------------------------------------------------------------------------
000156A0                            ; Animation script - special stage entry effect from beta
000156A0                            ; ---------------------------------------------------------------------------
000156A0 0000                       		dc.w byte_14458-Ani_obj4A
000156A2 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
000156B6                            		even
000156B6                            		even
000156B6                            
000156B6                            ; ---------------------------------------------------------------------------
000156B6                            ; Sprite mappings - special stage entry	from beta
000156B6                            ; ---------------------------------------------------------------------------
000156B6                            Map_obj4A:
000156B6                            	include "_maps\obj4A.asm"
000156B6                            ; ---------------------------------------------------------------------------
000156B6                            ; Sprite mappings - special stage entry	from beta
000156B6                            ; ---------------------------------------------------------------------------
000156B6 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
000156BA 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
000156BE 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
000156C2 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
000156C6 03                         byte_1447C:	dc.b 3
000156C7 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
000156CC 0004 0001 00               		dc.b 0,	4, 0, 1, 0
000156D1 0800 1000 08               		dc.b 8,	0, $10,	0, 8
000156D6 03                         byte_1448C:	dc.b 3
000156D7 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000156DC 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000156E1 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000156E6 05                         byte_1449C:	dc.b 5
000156E7 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000156EC EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000156F1 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000156F6 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
000156FB 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00015700 09                         byte_144B6:	dc.b 9
00015701 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00015706 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001570B 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00015710 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00015715 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
0001571A F000 1836 18               		dc.b $F0, 0, $18, $36, $18
0001571F F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015724 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00015729 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
0001572E 12                         byte_144E4:	dc.b $12
0001572F 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00015734 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00015739 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
0001573E 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00015743 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00015748 1000 1026 00               		dc.b $10, 0, $10, $26, 0
0001574D 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00015752 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00015757 0000 0026 10               		dc.b 0,	0, 0, $26, $10
0001575C 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00015761 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00015766 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001576B F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00015770 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00015775 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001577A F800 1826 30               		dc.b $F8, 0, $18, $26, $30
0001577F 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00015784 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00015789 11                         byte_1453F:	dc.b $11
0001578A F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
0001578F F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00015794 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00015799 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
0001579E 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
000157A3 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000157A8 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000157AD F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000157B2 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000157B7 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000157BC 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000157C1 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000157C6 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000157CB 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000157D0 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000157D5 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000157DA 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000157DF 09                         byte_14595:	dc.b 9
000157E0 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000157E5 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000157EA 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000157EF 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000157F4 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000157F9 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000157FE 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00015803 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00015808 04                         		dc.b 4
00015809 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
0001580E                            		even
0001580E                            		even
0001580E                            
0001580E                            Ani_obj08:
0001580E                            	include "_anim\obj08.asm"
0001580E                            ; ---------------------------------------------------------------------------
0001580E                            ; Animation script - water splash (LZ)
0001580E                            ; ---------------------------------------------------------------------------
0001580E 0000                       		dc.w byte_145C6-Ani_obj08
00015810 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00015816                            		even
00015816                            		even
00015816                            
00015816                            ; ---------------------------------------------------------------------------
00015816                            ; Sprite mappings - water splash (LZ)
00015816                            ; ---------------------------------------------------------------------------
00015816                            Map_obj08:
00015816                            	include "_maps\obj08.asm"
00015816                            ; ---------------------------------------------------------------------------
00015816                            ; Sprite mappings - water splash (LZ)
00015816                            ; ---------------------------------------------------------------------------
00015816 0000                       		dc.w byte_145D2-Map_obj08
00015818 0000                       		dc.w byte_145DD-Map_obj08
0001581A 0000                       		dc.w byte_145E8-Map_obj08
0001581C 02                         byte_145D2:	dc.b 2
0001581D F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00015822 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00015827 02                         byte_145DD:	dc.b 2
00015828 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
0001582D EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00015832 01                         byte_145E8:	dc.b 1
00015833 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00015838                            		even
00015838                            		even
00015838                            
00015838                            ; ---------------------------------------------------------------------------
00015838                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00015838                            ; ---------------------------------------------------------------------------
00015838                            
00015838                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015838                            
00015838                            
00015838                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015838 0828 0003 0022             		btst	#3,$22(a0)
0001583E 6700                       		beq.s	loc_14602
00015840 7000                       		moveq	#0,d0
00015842 11C0 F768                  		move.b	d0,($FFFFF768).w
00015846 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001584A 4E75                       		rts	
0001584C                            ; ===========================================================================
0001584C                            
0001584C                            loc_14602:
0001584C 7003                       		moveq	#3,d0
0001584E 11C0 F768                  		move.b	d0,($FFFFF768).w
00015852 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015856 1028 0026                  		move.b	$26(a0),d0
0001585A 0600 0020                  		addi.b	#$20,d0
0001585E 6A00                       		bpl.s	loc_14624
00015860 1028 0026                  		move.b	$26(a0),d0
00015864 6A00                       		bpl.s	loc_1461E
00015866 5300                       		subq.b	#1,d0
00015868                            
00015868                            loc_1461E:
00015868 0600 0020                  		addi.b	#$20,d0
0001586C 6000                       		bra.s	loc_14630
0001586E                            ; ===========================================================================
0001586E                            
0001586E                            loc_14624:
0001586E 1028 0026                  		move.b	$26(a0),d0
00015872 6A00                       		bpl.s	loc_1462C
00015874 5200                       		addq.b	#1,d0
00015876                            
00015876                            loc_1462C:
00015876 0600 001F                  		addi.b	#$1F,d0
0001587A                            
0001587A                            loc_14630:
0001587A 0200 00C0                  		andi.b	#$C0,d0
0001587E 0C00 0040                  		cmpi.b	#$40,d0
00015882 6700 0000                  		beq.w	Sonic_WalkVertL
00015886 0C00 0080                  		cmpi.b	#$80,d0
0001588A 6700 0000                  		beq.w	Sonic_WalkCeiling
0001588E 0C00 00C0                  		cmpi.b	#$C0,d0
00015892 6700 0000                  		beq.w	Sonic_WalkVertR
00015896 3428 000C                  		move.w	$C(a0),d2
0001589A 3628 0008                  		move.w	8(a0),d3
0001589E 7000                       		moveq	#0,d0
000158A0 1028 0016                  		move.b	$16(a0),d0
000158A4 4880                       		ext.w	d0
000158A6 D440                       		add.w	d0,d2
000158A8 1028 0017                  		move.b	$17(a0),d0
000158AC 4880                       		ext.w	d0
000158AE D640                       		add.w	d0,d3
000158B0 49F8 F768                  		lea	($FFFFF768).w,a4
000158B4 367C 0010                  		movea.w	#$10,a3
000158B8 3C3C 0000                  		move.w	#0,d6
000158BC 7A0D                       		moveq	#$D,d5
000158BE 6100 0000                  		bsr.w	FindFloor
000158C2 3F01                       		move.w	d1,-(sp)
000158C4 3428 000C                  		move.w	$C(a0),d2
000158C8 3628 0008                  		move.w	8(a0),d3
000158CC 7000                       		moveq	#0,d0
000158CE 1028 0016                  		move.b	$16(a0),d0
000158D2 4880                       		ext.w	d0
000158D4 D440                       		add.w	d0,d2
000158D6 1028 0017                  		move.b	$17(a0),d0
000158DA 4880                       		ext.w	d0
000158DC 4440                       		neg.w	d0
000158DE D640                       		add.w	d0,d3
000158E0 49F8 F76A                  		lea	($FFFFF76A).w,a4
000158E4 367C 0010                  		movea.w	#$10,a3
000158E8 3C3C 0000                  		move.w	#0,d6
000158EC 7A0D                       		moveq	#$D,d5
000158EE 6100 0000                  		bsr.w	FindFloor
000158F2 301F                       		move.w	(sp)+,d0
000158F4 6100 0000                  		bsr.w	Sonic_Angle
000158F8 4A41                       		tst.w	d1
000158FA 6700                       		beq.s	locret_146BE
000158FC 6A00                       		bpl.s	loc_146C0
000158FE 0C41 FFF2                  		cmpi.w	#-$E,d1
00015902 6D00                       		blt.s	locret_146E6
00015904 D368 000C                  		add.w	d1,$C(a0)
00015908                            
00015908                            locret_146BE:
00015908 4E75                       		rts	
0001590A                            ; ===========================================================================
0001590A                            
0001590A                            loc_146C0:
0001590A 0C41 000E                  		cmpi.w	#$E,d1
0001590E 6E00                       		bgt.s	loc_146CC
00015910                            
00015910                            loc_146C6:
00015910 D368 000C                  		add.w	d1,$C(a0)
00015914 4E75                       		rts	
00015916                            ; ===========================================================================
00015916                            
00015916                            loc_146CC:
00015916 4A28 0038                  		tst.b	$38(a0)
0001591A 66F4                       		bne.s	loc_146C6
0001591C 08E8 0001 0022             		bset	#1,$22(a0)
00015922 08A8 0005 0022             		bclr	#5,$22(a0)
00015928 117C 0001 001D             		move.b	#1,$1D(a0)
0001592E 4E75                       		rts	
00015930                            ; ===========================================================================
00015930                            
00015930                            locret_146E6:
00015930 4E75                       		rts	
00015932                            ; End of function Sonic_AnglePos
00015932                            
00015932                            ; ===========================================================================
00015932 2428 0008                  		move.l	8(a0),d2
00015936 3028 0010                  		move.w	$10(a0),d0
0001593A 48C0                       		ext.l	d0
0001593C E180                       		asl.l	#8,d0
0001593E 9480                       		sub.l	d0,d2
00015940 2142 0008                  		move.l	d2,8(a0)
00015944 303C 0038                  		move.w	#$38,d0
00015948 48C0                       		ext.l	d0
0001594A E180                       		asl.l	#8,d0
0001594C 9680                       		sub.l	d0,d3
0001594E 2143 000C                  		move.l	d3,$C(a0)
00015952 4E75                       		rts	
00015954                            ; ===========================================================================
00015954                            
00015954                            locret_1470A:
00015954 4E75                       		rts	
00015956                            ; ===========================================================================
00015956 2628 000C                  		move.l	$C(a0),d3
0001595A 3028 0012                  		move.w	$12(a0),d0
0001595E 0440 0038                  		subi.w	#$38,d0
00015962 3140 0012                  		move.w	d0,$12(a0)
00015966 48C0                       		ext.l	d0
00015968 E180                       		asl.l	#8,d0
0001596A 9680                       		sub.l	d0,d3
0001596C 2143 000C                  		move.l	d3,$C(a0)
00015970 4E75                       		rts	
00015972 4E75                       		rts	
00015974                            ; ===========================================================================
00015974 2428 0008                  		move.l	8(a0),d2
00015978 2628 000C                  		move.l	$C(a0),d3
0001597C 3028 0010                  		move.w	$10(a0),d0
00015980 48C0                       		ext.l	d0
00015982 E180                       		asl.l	#8,d0
00015984 9480                       		sub.l	d0,d2
00015986 3028 0012                  		move.w	$12(a0),d0
0001598A 48C0                       		ext.l	d0
0001598C E180                       		asl.l	#8,d0
0001598E 9680                       		sub.l	d0,d3
00015990 2142 0008                  		move.l	d2,8(a0)
00015994 2143 000C                  		move.l	d3,$C(a0)
00015998 4E75                       		rts	
0001599A                            
0001599A                            ; ---------------------------------------------------------------------------
0001599A                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001599A                            ; ---------------------------------------------------------------------------
0001599A                            
0001599A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001599A                            
0001599A                            
0001599A                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
0001599A 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001599E B240                       		cmp.w	d0,d1
000159A0 6F00                       		ble.s	loc_1475E
000159A2 1438 F768                  		move.b	($FFFFF768).w,d2
000159A6 3200                       		move.w	d0,d1
000159A8                            
000159A8                            loc_1475E:
000159A8 0802 0000                  		btst	#0,d2
000159AC 6600                       		bne.s	loc_1476A
000159AE 1142 0026                  		move.b	d2,$26(a0)
000159B2 4E75                       		rts	
000159B4                            ; ===========================================================================
000159B4                            
000159B4                            loc_1476A:
000159B4 1428 0026                  		move.b	$26(a0),d2
000159B8 0602 0020                  		addi.b	#$20,d2
000159BC 0202 00C0                  		andi.b	#$C0,d2
000159C0 1142 0026                  		move.b	d2,$26(a0)
000159C4 4E75                       		rts	
000159C6                            ; End of function Sonic_Angle
000159C6                            
000159C6                            ; ---------------------------------------------------------------------------
000159C6                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000159C6                            ; ---------------------------------------------------------------------------
000159C6                            
000159C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159C6                            
000159C6                            
000159C6                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000159C6 3428 000C                  		move.w	$C(a0),d2
000159CA 3628 0008                  		move.w	8(a0),d3
000159CE 7000                       		moveq	#0,d0
000159D0 1028 0017                  		move.b	$17(a0),d0
000159D4 4880                       		ext.w	d0
000159D6 4440                       		neg.w	d0
000159D8 D440                       		add.w	d0,d2
000159DA 1028 0016                  		move.b	$16(a0),d0
000159DE 4880                       		ext.w	d0
000159E0 D640                       		add.w	d0,d3
000159E2 49F8 F768                  		lea	($FFFFF768).w,a4
000159E6 367C 0010                  		movea.w	#$10,a3
000159EA 3C3C 0000                  		move.w	#0,d6
000159EE 7A0D                       		moveq	#$D,d5
000159F0 6100 0000                  		bsr.w	FindWall
000159F4 3F01                       		move.w	d1,-(sp)
000159F6 3428 000C                  		move.w	$C(a0),d2
000159FA 3628 0008                  		move.w	8(a0),d3
000159FE 7000                       		moveq	#0,d0
00015A00 1028 0017                  		move.b	$17(a0),d0
00015A04 4880                       		ext.w	d0
00015A06 D440                       		add.w	d0,d2
00015A08 1028 0016                  		move.b	$16(a0),d0
00015A0C 4880                       		ext.w	d0
00015A0E D640                       		add.w	d0,d3
00015A10 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015A14 367C 0010                  		movea.w	#$10,a3
00015A18 3C3C 0000                  		move.w	#0,d6
00015A1C 7A0D                       		moveq	#$D,d5
00015A1E 6100 0000                  		bsr.w	FindWall
00015A22 301F                       		move.w	(sp)+,d0
00015A24 6100 FF74                  		bsr.w	Sonic_Angle
00015A28 4A41                       		tst.w	d1
00015A2A 6700                       		beq.s	locret_147F0
00015A2C 6A00                       		bpl.s	loc_147F2
00015A2E 0C41 FFF2                  		cmpi.w	#-$E,d1
00015A32 6D00 FF20                  		blt.w	locret_1470A
00015A36 D368 0008                  		add.w	d1,8(a0)
00015A3A                            
00015A3A                            locret_147F0:
00015A3A 4E75                       		rts	
00015A3C                            ; ===========================================================================
00015A3C                            
00015A3C                            loc_147F2:
00015A3C 0C41 000E                  		cmpi.w	#$E,d1
00015A40 6E00                       		bgt.s	loc_147FE
00015A42                            
00015A42                            loc_147F8:
00015A42 D368 0008                  		add.w	d1,8(a0)
00015A46 4E75                       		rts	
00015A48                            ; ===========================================================================
00015A48                            
00015A48                            loc_147FE:
00015A48 4A28 0038                  		tst.b	$38(a0)
00015A4C 66F4                       		bne.s	loc_147F8
00015A4E 08E8 0001 0022             		bset	#1,$22(a0)
00015A54 08A8 0005 0022             		bclr	#5,$22(a0)
00015A5A 117C 0001 001D             		move.b	#1,$1D(a0)
00015A60 4E75                       		rts	
00015A62                            ; End of function Sonic_WalkVertR
00015A62                            
00015A62                            ; ---------------------------------------------------------------------------
00015A62                            ; Subroutine allowing Sonic to walk upside-down
00015A62                            ; ---------------------------------------------------------------------------
00015A62                            
00015A62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A62                            
00015A62                            
00015A62                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00015A62 3428 000C                  		move.w	$C(a0),d2
00015A66 3628 0008                  		move.w	8(a0),d3
00015A6A 7000                       		moveq	#0,d0
00015A6C 1028 0016                  		move.b	$16(a0),d0
00015A70 4880                       		ext.w	d0
00015A72 9440                       		sub.w	d0,d2
00015A74 0A42 000F                  		eori.w	#$F,d2
00015A78 1028 0017                  		move.b	$17(a0),d0
00015A7C 4880                       		ext.w	d0
00015A7E D640                       		add.w	d0,d3
00015A80 49F8 F768                  		lea	($FFFFF768).w,a4
00015A84 367C FFF0                  		movea.w	#-$10,a3
00015A88 3C3C 1000                  		move.w	#$1000,d6
00015A8C 7A0D                       		moveq	#$D,d5
00015A8E 6100 0000                  		bsr.w	FindFloor
00015A92 3F01                       		move.w	d1,-(sp)
00015A94 3428 000C                  		move.w	$C(a0),d2
00015A98 3628 0008                  		move.w	8(a0),d3
00015A9C 7000                       		moveq	#0,d0
00015A9E 1028 0016                  		move.b	$16(a0),d0
00015AA2 4880                       		ext.w	d0
00015AA4 9440                       		sub.w	d0,d2
00015AA6 0A42 000F                  		eori.w	#$F,d2
00015AAA 1028 0017                  		move.b	$17(a0),d0
00015AAE 4880                       		ext.w	d0
00015AB0 9640                       		sub.w	d0,d3
00015AB2 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015AB6 367C FFF0                  		movea.w	#-$10,a3
00015ABA 3C3C 1000                  		move.w	#$1000,d6
00015ABE 7A0D                       		moveq	#$D,d5
00015AC0 6100 0000                  		bsr.w	FindFloor
00015AC4 301F                       		move.w	(sp)+,d0
00015AC6 6100 FED2                  		bsr.w	Sonic_Angle
00015ACA 4A41                       		tst.w	d1
00015ACC 6700                       		beq.s	locret_14892
00015ACE 6A00                       		bpl.s	loc_14894
00015AD0 0C41 FFF2                  		cmpi.w	#-$E,d1
00015AD4 6D00 FE5A                  		blt.w	locret_146E6
00015AD8 9368 000C                  		sub.w	d1,$C(a0)
00015ADC                            
00015ADC                            locret_14892:
00015ADC 4E75                       		rts	
00015ADE                            ; ===========================================================================
00015ADE                            
00015ADE                            loc_14894:
00015ADE 0C41 000E                  		cmpi.w	#$E,d1
00015AE2 6E00                       		bgt.s	loc_148A0
00015AE4                            
00015AE4                            loc_1489A:
00015AE4 9368 000C                  		sub.w	d1,$C(a0)
00015AE8 4E75                       		rts	
00015AEA                            ; ===========================================================================
00015AEA                            
00015AEA                            loc_148A0:
00015AEA 4A28 0038                  		tst.b	$38(a0)
00015AEE 66F4                       		bne.s	loc_1489A
00015AF0 08E8 0001 0022             		bset	#1,$22(a0)
00015AF6 08A8 0005 0022             		bclr	#5,$22(a0)
00015AFC 117C 0001 001D             		move.b	#1,$1D(a0)
00015B02 4E75                       		rts	
00015B04                            ; End of function Sonic_WalkCeiling
00015B04                            
00015B04                            ; ---------------------------------------------------------------------------
00015B04                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00015B04                            ; ---------------------------------------------------------------------------
00015B04                            
00015B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B04                            
00015B04                            
00015B04                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00015B04 3428 000C                  		move.w	$C(a0),d2
00015B08 3628 0008                  		move.w	8(a0),d3
00015B0C 7000                       		moveq	#0,d0
00015B0E 1028 0017                  		move.b	$17(a0),d0
00015B12 4880                       		ext.w	d0
00015B14 9440                       		sub.w	d0,d2
00015B16 1028 0016                  		move.b	$16(a0),d0
00015B1A 4880                       		ext.w	d0
00015B1C 9640                       		sub.w	d0,d3
00015B1E 0A43 000F                  		eori.w	#$F,d3
00015B22 49F8 F768                  		lea	($FFFFF768).w,a4
00015B26 367C FFF0                  		movea.w	#-$10,a3
00015B2A 3C3C 0800                  		move.w	#$800,d6
00015B2E 7A0D                       		moveq	#$D,d5
00015B30 6100 0000                  		bsr.w	FindWall
00015B34 3F01                       		move.w	d1,-(sp)
00015B36 3428 000C                  		move.w	$C(a0),d2
00015B3A 3628 0008                  		move.w	8(a0),d3
00015B3E 7000                       		moveq	#0,d0
00015B40 1028 0017                  		move.b	$17(a0),d0
00015B44 4880                       		ext.w	d0
00015B46 D440                       		add.w	d0,d2
00015B48 1028 0016                  		move.b	$16(a0),d0
00015B4C 4880                       		ext.w	d0
00015B4E 9640                       		sub.w	d0,d3
00015B50 0A43 000F                  		eori.w	#$F,d3
00015B54 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015B58 367C FFF0                  		movea.w	#-$10,a3
00015B5C 3C3C 0800                  		move.w	#$800,d6
00015B60 7A0D                       		moveq	#$D,d5
00015B62 6100 0000                  		bsr.w	FindWall
00015B66 301F                       		move.w	(sp)+,d0
00015B68 6100 FE30                  		bsr.w	Sonic_Angle
00015B6C 4A41                       		tst.w	d1
00015B6E 6700                       		beq.s	locret_14934
00015B70 6A00                       		bpl.s	loc_14936
00015B72 0C41 FFF2                  		cmpi.w	#-$E,d1
00015B76 6D00 FDDC                  		blt.w	locret_1470A
00015B7A 9368 0008                  		sub.w	d1,8(a0)
00015B7E                            
00015B7E                            locret_14934:
00015B7E 4E75                       		rts	
00015B80                            ; ===========================================================================
00015B80                            
00015B80                            loc_14936:
00015B80 0C41 000E                  		cmpi.w	#$E,d1
00015B84 6E00                       		bgt.s	loc_14942
00015B86                            
00015B86                            loc_1493C:
00015B86 9368 0008                  		sub.w	d1,8(a0)
00015B8A 4E75                       		rts	
00015B8C                            ; ===========================================================================
00015B8C                            
00015B8C                            loc_14942:
00015B8C 4A28 0038                  		tst.b	$38(a0)
00015B90 66F4                       		bne.s	loc_1493C
00015B92 08E8 0001 0022             		bset	#1,$22(a0)
00015B98 08A8 0005 0022             		bclr	#5,$22(a0)
00015B9E 117C 0001 001D             		move.b	#1,$1D(a0)
00015BA4 4E75                       		rts	
00015BA6                            ; End of function Sonic_WalkVertL
00015BA6                            
00015BA6                            ; ---------------------------------------------------------------------------
00015BA6                            ; Subroutine to	find which tile	the object is standing on
00015BA6                            ; ---------------------------------------------------------------------------
00015BA6                            
00015BA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BA6                            
00015BA6                            
00015BA6                            Floor_ChkTile:				; XREF: FindFloor; et al
00015BA6 3002                       		move.w	d2,d0
00015BA8 E248                       		lsr.w	#1,d0
00015BAA 0240 0380                  		andi.w	#$380,d0
00015BAE 3203                       		move.w	d3,d1
00015BB0 E049                       		lsr.w	#8,d1
00015BB2 0241 007F                  		andi.w	#$7F,d1
00015BB6 D041                       		add.w	d1,d0
00015BB8 72FF                       		moveq	#-1,d1
00015BBA 43F8 A400                  		lea	($FFFFA400).w,a1
00015BBE 1231 0000                  		move.b	(a1,d0.w),d1
00015BC2 6700                       		beq.s	loc_14996
00015BC4 6B00                       		bmi.s	loc_1499A
00015BC6 5301                       		subq.b	#1,d1
00015BC8 4881                       		ext.w	d1
00015BCA EE59                       		ror.w	#7,d1
00015BCC 3002                       		move.w	d2,d0
00015BCE D040                       		add.w	d0,d0
00015BD0 0240 01E0                  		andi.w	#$1E0,d0
00015BD4 D240                       		add.w	d0,d1
00015BD6 3003                       		move.w	d3,d0
00015BD8 E648                       		lsr.w	#3,d0
00015BDA 0240 001E                  		andi.w	#$1E,d0
00015BDE D240                       		add.w	d0,d1
00015BE0                            
00015BE0                            loc_14996:
00015BE0 2241                       		movea.l	d1,a1
00015BE2 4E75                       		rts	
00015BE4                            ; ===========================================================================
00015BE4                            
00015BE4                            loc_1499A:
00015BE4 0241 007F                  		andi.w	#$7F,d1
00015BE8 0828 0006 0001             		btst	#6,1(a0)
00015BEE 6700                       		beq.s	loc_149B2
00015BF0 5241                       		addq.w	#1,d1
00015BF2 0C41 0029                  		cmpi.w	#$29,d1
00015BF6 6600                       		bne.s	loc_149B2
00015BF8 323C 0051                  		move.w	#$51,d1
00015BFC                            
00015BFC                            loc_149B2:
00015BFC 5301                       		subq.b	#1,d1
00015BFE EE59                       		ror.w	#7,d1
00015C00 3002                       		move.w	d2,d0
00015C02 D040                       		add.w	d0,d0
00015C04 0240 01E0                  		andi.w	#$1E0,d0
00015C08 D240                       		add.w	d0,d1
00015C0A 3003                       		move.w	d3,d0
00015C0C E648                       		lsr.w	#3,d0
00015C0E 0240 001E                  		andi.w	#$1E,d0
00015C12 D240                       		add.w	d0,d1
00015C14 2241                       		movea.l	d1,a1
00015C16 4E75                       		rts	
00015C18                            ; End of function Floor_ChkTile
00015C18                            
00015C18                            
00015C18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C18                            
00015C18                            
00015C18                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015C18 618C                       		bsr.s	Floor_ChkTile
00015C1A 3011                       		move.w	(a1),d0
00015C1C 3800                       		move.w	d0,d4
00015C1E 0240 07FF                  		andi.w	#$7FF,d0
00015C22 6700                       		beq.s	loc_149DE
00015C24 0B04                       		btst	d5,d4
00015C26 6600                       		bne.s	loc_149EC
00015C28                            
00015C28                            loc_149DE:
00015C28 D44B                       		add.w	a3,d2
00015C2A 6100 0000                  		bsr.w	FindFloor2
00015C2E 944B                       		sub.w	a3,d2
00015C30 0641 0010                  		addi.w	#$10,d1
00015C34 4E75                       		rts	
00015C36                            ; ===========================================================================
00015C36                            
00015C36                            loc_149EC:
00015C36 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015C3A 1032 0000                  		move.b	(a2,d0.w),d0
00015C3E 0240 00FF                  		andi.w	#$FF,d0
00015C42 67E4                       		beq.s	loc_149DE
00015C44 45F9 0000 0000             		lea	(AngleMap).l,a2
00015C4A 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015C4E E948                       		lsl.w	#4,d0
00015C50 3203                       		move.w	d3,d1
00015C52 0804 000B                  		btst	#$B,d4
00015C56 6700                       		beq.s	loc_14A12
00015C58 4641                       		not.w	d1
00015C5A 4414                       		neg.b	(a4)
00015C5C                            
00015C5C                            loc_14A12:
00015C5C 0804 000C                  		btst	#$C,d4
00015C60 6700                       		beq.s	loc_14A22
00015C62 0614 0040                  		addi.b	#$40,(a4)
00015C66 4414                       		neg.b	(a4)
00015C68 0414 0040                  		subi.b	#$40,(a4)
00015C6C                            
00015C6C                            loc_14A22:
00015C6C 0241 000F                  		andi.w	#$F,d1
00015C70 D240                       		add.w	d0,d1
00015C72 45F9 0000 0000             		lea	(CollArray1).l,a2
00015C78 1032 1000                  		move.b	(a2,d1.w),d0
00015C7C 4880                       		ext.w	d0
00015C7E BD44                       		eor.w	d6,d4
00015C80 0804 000C                  		btst	#$C,d4
00015C84 6700                       		beq.s	loc_14A3E
00015C86 4440                       		neg.w	d0
00015C88                            
00015C88                            loc_14A3E:
00015C88 4A40                       		tst.w	d0
00015C8A 679C                       		beq.s	loc_149DE
00015C8C 6B00                       		bmi.s	loc_14A5A
00015C8E 0C00 0010                  		cmpi.b	#$10,d0
00015C92 6700                       		beq.s	loc_14A66
00015C94 3202                       		move.w	d2,d1
00015C96 0241 000F                  		andi.w	#$F,d1
00015C9A D041                       		add.w	d1,d0
00015C9C 323C 000F                  		move.w	#$F,d1
00015CA0 9240                       		sub.w	d0,d1
00015CA2 4E75                       		rts	
00015CA4                            ; ===========================================================================
00015CA4                            
00015CA4                            loc_14A5A:
00015CA4 3202                       		move.w	d2,d1
00015CA6 0241 000F                  		andi.w	#$F,d1
00015CAA D041                       		add.w	d1,d0
00015CAC 6A00 FF7A                  		bpl.w	loc_149DE
00015CB0                            
00015CB0                            loc_14A66:
00015CB0 944B                       		sub.w	a3,d2
00015CB2 6100 0000                  		bsr.w	FindFloor2
00015CB6 D44B                       		add.w	a3,d2
00015CB8 0441 0010                  		subi.w	#$10,d1
00015CBC 4E75                       		rts	
00015CBE                            ; End of function FindFloor
00015CBE                            
00015CBE                            
00015CBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CBE                            
00015CBE                            
00015CBE                            FindFloor2:				; XREF: FindFloor
00015CBE 6100 FEE6                  		bsr.w	Floor_ChkTile
00015CC2 3011                       		move.w	(a1),d0
00015CC4 3800                       		move.w	d0,d4
00015CC6 0240 07FF                  		andi.w	#$7FF,d0
00015CCA 6700                       		beq.s	loc_14A86
00015CCC 0B04                       		btst	d5,d4
00015CCE 6600                       		bne.s	loc_14A94
00015CD0                            
00015CD0                            loc_14A86:
00015CD0 323C 000F                  		move.w	#$F,d1
00015CD4 3002                       		move.w	d2,d0
00015CD6 0240 000F                  		andi.w	#$F,d0
00015CDA 9240                       		sub.w	d0,d1
00015CDC 4E75                       		rts	
00015CDE                            ; ===========================================================================
00015CDE                            
00015CDE                            loc_14A94:
00015CDE 2478 F796                  		movea.l	($FFFFF796).w,a2
00015CE2 1032 0000                  		move.b	(a2,d0.w),d0
00015CE6 0240 00FF                  		andi.w	#$FF,d0
00015CEA 67E4                       		beq.s	loc_14A86
00015CEC 45F9 0000 0000             		lea	(AngleMap).l,a2
00015CF2 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015CF6 E948                       		lsl.w	#4,d0
00015CF8 3203                       		move.w	d3,d1
00015CFA 0804 000B                  		btst	#$B,d4
00015CFE 6700                       		beq.s	loc_14ABA
00015D00 4641                       		not.w	d1
00015D02 4414                       		neg.b	(a4)
00015D04                            
00015D04                            loc_14ABA:
00015D04 0804 000C                  		btst	#$C,d4
00015D08 6700                       		beq.s	loc_14ACA
00015D0A 0614 0040                  		addi.b	#$40,(a4)
00015D0E 4414                       		neg.b	(a4)
00015D10 0414 0040                  		subi.b	#$40,(a4)
00015D14                            
00015D14                            loc_14ACA:
00015D14 0241 000F                  		andi.w	#$F,d1
00015D18 D240                       		add.w	d0,d1
00015D1A 45F9 0000 0000             		lea	(CollArray1).l,a2
00015D20 1032 1000                  		move.b	(a2,d1.w),d0
00015D24 4880                       		ext.w	d0
00015D26 BD44                       		eor.w	d6,d4
00015D28 0804 000C                  		btst	#$C,d4
00015D2C 6700                       		beq.s	loc_14AE6
00015D2E 4440                       		neg.w	d0
00015D30                            
00015D30                            loc_14AE6:
00015D30 4A40                       		tst.w	d0
00015D32 679C                       		beq.s	loc_14A86
00015D34 6B00                       		bmi.s	loc_14AFC
00015D36 3202                       		move.w	d2,d1
00015D38 0241 000F                  		andi.w	#$F,d1
00015D3C D041                       		add.w	d1,d0
00015D3E 323C 000F                  		move.w	#$F,d1
00015D42 9240                       		sub.w	d0,d1
00015D44 4E75                       		rts	
00015D46                            ; ===========================================================================
00015D46                            
00015D46                            loc_14AFC:
00015D46 3202                       		move.w	d2,d1
00015D48 0241 000F                  		andi.w	#$F,d1
00015D4C D041                       		add.w	d1,d0
00015D4E 6A00 FF80                  		bpl.w	loc_14A86
00015D52 4641                       		not.w	d1
00015D54 4E75                       		rts	
00015D56                            ; End of function FindFloor2
00015D56                            
00015D56                            
00015D56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D56                            
00015D56                            
00015D56                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015D56 6100 FE4E                  		bsr.w	Floor_ChkTile
00015D5A 3011                       		move.w	(a1),d0
00015D5C 3800                       		move.w	d0,d4
00015D5E 0240 07FF                  		andi.w	#$7FF,d0
00015D62 6700                       		beq.s	loc_14B1E
00015D64 0B04                       		btst	d5,d4
00015D66 6600                       		bne.s	loc_14B2C
00015D68                            
00015D68                            loc_14B1E:
00015D68 D64B                       		add.w	a3,d3
00015D6A 6100 0000                  		bsr.w	FindWall2
00015D6E 964B                       		sub.w	a3,d3
00015D70 0641 0010                  		addi.w	#$10,d1
00015D74 4E75                       		rts	
00015D76                            ; ===========================================================================
00015D76                            
00015D76                            loc_14B2C:
00015D76 2478 F796                  		movea.l	($FFFFF796).w,a2
00015D7A 1032 0000                  		move.b	(a2,d0.w),d0
00015D7E 0240 00FF                  		andi.w	#$FF,d0
00015D82 67E4                       		beq.s	loc_14B1E
00015D84 45F9 0000 0000             		lea	(AngleMap).l,a2
00015D8A 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015D8E E948                       		lsl.w	#4,d0
00015D90 3202                       		move.w	d2,d1
00015D92 0804 000C                  		btst	#$C,d4
00015D96 6700                       		beq.s	loc_14B5A
00015D98 4641                       		not.w	d1
00015D9A 0614 0040                  		addi.b	#$40,(a4)
00015D9E 4414                       		neg.b	(a4)
00015DA0 0414 0040                  		subi.b	#$40,(a4)
00015DA4                            
00015DA4                            loc_14B5A:
00015DA4 0804 000B                  		btst	#$B,d4
00015DA8 6700                       		beq.s	loc_14B62
00015DAA 4414                       		neg.b	(a4)
00015DAC                            
00015DAC                            loc_14B62:
00015DAC 0241 000F                  		andi.w	#$F,d1
00015DB0 D240                       		add.w	d0,d1
00015DB2 45F9 0000 0000             		lea	(CollArray2).l,a2
00015DB8 1032 1000                  		move.b	(a2,d1.w),d0
00015DBC 4880                       		ext.w	d0
00015DBE BD44                       		eor.w	d6,d4
00015DC0 0804 000B                  		btst	#$B,d4
00015DC4 6700                       		beq.s	loc_14B7E
00015DC6 4440                       		neg.w	d0
00015DC8                            
00015DC8                            loc_14B7E:
00015DC8 4A40                       		tst.w	d0
00015DCA 679C                       		beq.s	loc_14B1E
00015DCC 6B00                       		bmi.s	loc_14B9A
00015DCE 0C00 0010                  		cmpi.b	#$10,d0
00015DD2 6700                       		beq.s	loc_14BA6
00015DD4 3203                       		move.w	d3,d1
00015DD6 0241 000F                  		andi.w	#$F,d1
00015DDA D041                       		add.w	d1,d0
00015DDC 323C 000F                  		move.w	#$F,d1
00015DE0 9240                       		sub.w	d0,d1
00015DE2 4E75                       		rts	
00015DE4                            ; ===========================================================================
00015DE4                            
00015DE4                            loc_14B9A:
00015DE4 3203                       		move.w	d3,d1
00015DE6 0241 000F                  		andi.w	#$F,d1
00015DEA D041                       		add.w	d1,d0
00015DEC 6A00 FF7A                  		bpl.w	loc_14B1E
00015DF0                            
00015DF0                            loc_14BA6:
00015DF0 964B                       		sub.w	a3,d3
00015DF2 6100 0000                  		bsr.w	FindWall2
00015DF6 D64B                       		add.w	a3,d3
00015DF8 0441 0010                  		subi.w	#$10,d1
00015DFC 4E75                       		rts	
00015DFE                            ; End of function FindWall
00015DFE                            
00015DFE                            
00015DFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015DFE                            
00015DFE                            
00015DFE                            FindWall2:				; XREF: FindWall
00015DFE 6100 FDA6                  		bsr.w	Floor_ChkTile
00015E02 3011                       		move.w	(a1),d0
00015E04 3800                       		move.w	d0,d4
00015E06 0240 07FF                  		andi.w	#$7FF,d0
00015E0A 6700                       		beq.s	loc_14BC6
00015E0C 0B04                       		btst	d5,d4
00015E0E 6600                       		bne.s	loc_14BD4
00015E10                            
00015E10                            loc_14BC6:
00015E10 323C 000F                  		move.w	#$F,d1
00015E14 3003                       		move.w	d3,d0
00015E16 0240 000F                  		andi.w	#$F,d0
00015E1A 9240                       		sub.w	d0,d1
00015E1C 4E75                       		rts	
00015E1E                            ; ===========================================================================
00015E1E                            
00015E1E                            loc_14BD4:
00015E1E 2478 F796                  		movea.l	($FFFFF796).w,a2
00015E22 1032 0000                  		move.b	(a2,d0.w),d0
00015E26 0240 00FF                  		andi.w	#$FF,d0
00015E2A 67E4                       		beq.s	loc_14BC6
00015E2C 45F9 0000 0000             		lea	(AngleMap).l,a2
00015E32 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015E36 E948                       		lsl.w	#4,d0
00015E38 3202                       		move.w	d2,d1
00015E3A 0804 000C                  		btst	#$C,d4
00015E3E 6700                       		beq.s	loc_14C02
00015E40 4641                       		not.w	d1
00015E42 0614 0040                  		addi.b	#$40,(a4)
00015E46 4414                       		neg.b	(a4)
00015E48 0414 0040                  		subi.b	#$40,(a4)
00015E4C                            
00015E4C                            loc_14C02:
00015E4C 0804 000B                  		btst	#$B,d4
00015E50 6700                       		beq.s	loc_14C0A
00015E52 4414                       		neg.b	(a4)
00015E54                            
00015E54                            loc_14C0A:
00015E54 0241 000F                  		andi.w	#$F,d1
00015E58 D240                       		add.w	d0,d1
00015E5A 45F9 0000 0000             		lea	(CollArray2).l,a2
00015E60 1032 1000                  		move.b	(a2,d1.w),d0
00015E64 4880                       		ext.w	d0
00015E66 BD44                       		eor.w	d6,d4
00015E68 0804 000B                  		btst	#$B,d4
00015E6C 6700                       		beq.s	loc_14C26
00015E6E 4440                       		neg.w	d0
00015E70                            
00015E70                            loc_14C26:
00015E70 4A40                       		tst.w	d0
00015E72 679C                       		beq.s	loc_14BC6
00015E74 6B00                       		bmi.s	loc_14C3C
00015E76 3203                       		move.w	d3,d1
00015E78 0241 000F                  		andi.w	#$F,d1
00015E7C D041                       		add.w	d1,d0
00015E7E 323C 000F                  		move.w	#$F,d1
00015E82 9240                       		sub.w	d0,d1
00015E84 4E75                       		rts	
00015E86                            ; ===========================================================================
00015E86                            
00015E86                            loc_14C3C:
00015E86 3203                       		move.w	d3,d1
00015E88 0241 000F                  		andi.w	#$F,d1
00015E8C D041                       		add.w	d1,d0
00015E8E 6A00 FF80                  		bpl.w	loc_14BC6
00015E92 4641                       		not.w	d1
00015E94 4E75                       		rts	
00015E96                            ; End of function FindWall2
00015E96                            
00015E96                            ; ---------------------------------------------------------------------------
00015E96                            ; Unused floor/wall subroutine - logs something	to do with collision
00015E96                            ; ---------------------------------------------------------------------------
00015E96                            
00015E96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E96                            
00015E96                            
00015E96                            FloorLog_Unk:				; XREF: Level
00015E96 4E75                       		rts	
00015E98                            
00015E98 43F9 0000 0000             		lea	(CollArray1).l,a1
00015E9E 45F9 0000 0000             		lea	(CollArray1).l,a2
00015EA4 363C 00FF                  		move.w	#$FF,d3
00015EA8                            
00015EA8                            loc_14C5E:
00015EA8 7A10                       		moveq	#$10,d5
00015EAA 343C 000F                  		move.w	#$F,d2
00015EAE                            
00015EAE                            loc_14C64:
00015EAE 7800                       		moveq	#0,d4
00015EB0 323C 000F                  		move.w	#$F,d1
00015EB4                            
00015EB4                            loc_14C6A:
00015EB4 3019                       		move.w	(a1)+,d0
00015EB6 EAA8                       		lsr.l	d5,d0
00015EB8 D944                       		addx.w	d4,d4
00015EBA 51C9 FFF8                  		dbf	d1,loc_14C6A
00015EBE                            
00015EBE 34C4                       		move.w	d4,(a2)+
00015EC0 92FC 0020                  		suba.w	#$20,a1
00015EC4 5345                       		subq.w	#1,d5
00015EC6 51CA FFE6                  		dbf	d2,loc_14C64
00015ECA                            
00015ECA D2FC 0020                  		adda.w	#$20,a1
00015ECE 51CB FFD8                  		dbf	d3,loc_14C5E
00015ED2                            
00015ED2 43F9 0000 0000             		lea	(CollArray1).l,a1
00015ED8 45F9 0000 0000             		lea	(CollArray2).l,a2
00015EDE 6100                       		bsr.s	FloorLog_Unk2
00015EE0 43F9 0000 0000             		lea	(CollArray1).l,a1
00015EE6 45F9 0000 0000             		lea	(CollArray1).l,a2
00015EEC                            
00015EEC                            ; End of function FloorLog_Unk
00015EEC                            
00015EEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EEC                            
00015EEC                            
00015EEC                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015EEC 363C 0FFF                  		move.w	#$FFF,d3
00015EF0                            
00015EF0                            loc_14CA6:
00015EF0 7400                       		moveq	#0,d2
00015EF2 323C 000F                  		move.w	#$F,d1
00015EF6 3019                       		move.w	(a1)+,d0
00015EF8 6700                       		beq.s	loc_14CD4
00015EFA 6B00                       		bmi.s	loc_14CBE
00015EFC                            
00015EFC                            loc_14CB2:
00015EFC E248                       		lsr.w	#1,d0
00015EFE 6400                       		bcc.s	loc_14CB8
00015F00 5202                       		addq.b	#1,d2
00015F02                            
00015F02                            loc_14CB8:
00015F02 51C9 FFF8                  		dbf	d1,loc_14CB2
00015F06                            
00015F06 6000                       		bra.s	loc_14CD6
00015F08                            ; ===========================================================================
00015F08                            
00015F08                            loc_14CBE:
00015F08 0C40 FFFF                  		cmpi.w	#-1,d0
00015F0C 6700                       		beq.s	loc_14CD0
00015F0E                            
00015F0E                            loc_14CC4:
00015F0E E348                       		lsl.w	#1,d0
00015F10 6400                       		bcc.s	loc_14CCA
00015F12 5302                       		subq.b	#1,d2
00015F14                            
00015F14                            loc_14CCA:
00015F14 51C9 FFF8                  		dbf	d1,loc_14CC4
00015F18                            
00015F18 6000                       		bra.s	loc_14CD6
00015F1A                            ; ===========================================================================
00015F1A                            
00015F1A                            loc_14CD0:
00015F1A 303C 0010                  		move.w	#$10,d0
00015F1E                            
00015F1E                            loc_14CD4:
00015F1E 3400                       		move.w	d0,d2
00015F20                            
00015F20                            loc_14CD6:
00015F20 14C2                       		move.b	d2,(a2)+
00015F22 51CB FFCC                  		dbf	d3,loc_14CA6
00015F26                            
00015F26 4E75                       		rts	
00015F28                            
00015F28                            ; End of function FloorLog_Unk2
00015F28                            
00015F28                            
00015F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F28                            
00015F28                            
00015F28                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015F28 2628 0008                  		move.l	8(a0),d3
00015F2C 2428 000C                  		move.l	$C(a0),d2
00015F30 3228 0010                  		move.w	$10(a0),d1
00015F34 48C1                       		ext.l	d1
00015F36 E181                       		asl.l	#8,d1
00015F38 D681                       		add.l	d1,d3
00015F3A 3228 0012                  		move.w	$12(a0),d1
00015F3E 48C1                       		ext.l	d1
00015F40 E181                       		asl.l	#8,d1
00015F42 D481                       		add.l	d1,d2
00015F44 4842                       		swap	d2
00015F46 4843                       		swap	d3
00015F48 11C0 F768                  		move.b	d0,($FFFFF768).w
00015F4C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015F50 1200                       		move.b	d0,d1
00015F52 0600 0020                  		addi.b	#$20,d0
00015F56 6A00                       		bpl.s	loc_14D1A
00015F58 1001                       		move.b	d1,d0
00015F5A 6A00                       		bpl.s	loc_14D14
00015F5C 5300                       		subq.b	#1,d0
00015F5E                            
00015F5E                            loc_14D14:
00015F5E 0600 0020                  		addi.b	#$20,d0
00015F62 6000                       		bra.s	loc_14D24
00015F64                            ; ===========================================================================
00015F64                            
00015F64                            loc_14D1A:
00015F64 1001                       		move.b	d1,d0
00015F66 6A00                       		bpl.s	loc_14D20
00015F68 5200                       		addq.b	#1,d0
00015F6A                            
00015F6A                            loc_14D20:
00015F6A 0600 001F                  		addi.b	#$1F,d0
00015F6E                            
00015F6E                            loc_14D24:
00015F6E 0200 00C0                  		andi.b	#$C0,d0
00015F72 6700 0000                  		beq.w	loc_14DF0
00015F76 0C00 0080                  		cmpi.b	#$80,d0
00015F7A 6700 0000                  		beq.w	loc_14F7C
00015F7E 0201 0038                  		andi.b	#$38,d1
00015F82 6600                       		bne.s	loc_14D3C
00015F84 5042                       		addq.w	#8,d2
00015F86                            
00015F86                            loc_14D3C:
00015F86 0C00 0040                  		cmpi.b	#$40,d0
00015F8A 6700 0000                  		beq.w	loc_1504A
00015F8E 6000 0000                  		bra.w	loc_14EBC
00015F92                            
00015F92                            ; End of function Sonic_WalkSpeed
00015F92                            
00015F92                            
00015F92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F92                            
00015F92                            
00015F92                            sub_14D48:				; XREF: Sonic_Jump
00015F92 11C0 F768                  		move.b	d0,($FFFFF768).w
00015F96 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015F9A 0600 0020                  		addi.b	#$20,d0
00015F9E 0200 00C0                  		andi.b	#$C0,d0
00015FA2 0C00 0040                  		cmpi.b	#$40,d0
00015FA6 6700 0000                  		beq.w	loc_14FD6
00015FAA 0C00 0080                  		cmpi.b	#$80,d0
00015FAE 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015FB2 0C00 00C0                  		cmpi.b	#$C0,d0
00015FB6 6700 0000                  		beq.w	sub_14E50
00015FBA                            
00015FBA                            ; End of function sub_14D48
00015FBA                            
00015FBA                            ; ---------------------------------------------------------------------------
00015FBA                            ; Subroutine to	make Sonic land	on the floor after jumping
00015FBA                            ; ---------------------------------------------------------------------------
00015FBA                            
00015FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FBA                            
00015FBA                            
00015FBA                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015FBA 3428 000C                  		move.w	$C(a0),d2
00015FBE 3628 0008                  		move.w	8(a0),d3
00015FC2 7000                       		moveq	#0,d0
00015FC4 1028 0016                  		move.b	$16(a0),d0
00015FC8 4880                       		ext.w	d0
00015FCA D440                       		add.w	d0,d2
00015FCC 1028 0017                  		move.b	$17(a0),d0
00015FD0 4880                       		ext.w	d0
00015FD2 D640                       		add.w	d0,d3
00015FD4 49F8 F768                  		lea	($FFFFF768).w,a4
00015FD8 367C 0010                  		movea.w	#$10,a3
00015FDC 3C3C 0000                  		move.w	#0,d6
00015FE0 7A0D                       		moveq	#$D,d5
00015FE2 6100 FC34                  		bsr.w	FindFloor
00015FE6 3F01                       		move.w	d1,-(sp)
00015FE8 3428 000C                  		move.w	$C(a0),d2
00015FEC 3628 0008                  		move.w	8(a0),d3
00015FF0 7000                       		moveq	#0,d0
00015FF2 1028 0016                  		move.b	$16(a0),d0
00015FF6 4880                       		ext.w	d0
00015FF8 D440                       		add.w	d0,d2
00015FFA 1028 0017                  		move.b	$17(a0),d0
00015FFE 4880                       		ext.w	d0
00016000 9640                       		sub.w	d0,d3
00016002 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016006 367C 0010                  		movea.w	#$10,a3
0001600A 3C3C 0000                  		move.w	#0,d6
0001600E 7A0D                       		moveq	#$D,d5
00016010 6100 FC06                  		bsr.w	FindFloor
00016014 301F                       		move.w	(sp)+,d0
00016016 143C 0000                  		move.b	#0,d2
0001601A                            
0001601A                            loc_14DD0:
0001601A 1638 F76A                  		move.b	($FFFFF76A).w,d3
0001601E B240                       		cmp.w	d0,d1
00016020 6F00                       		ble.s	loc_14DDE
00016022 1638 F768                  		move.b	($FFFFF768).w,d3
00016026 C141                       		exg	d0,d1
00016028                            
00016028                            loc_14DDE:
00016028 0803 0000                  		btst	#0,d3
0001602C 6700                       		beq.s	locret_14DE6
0001602E 1602                       		move.b	d2,d3
00016030                            
00016030                            locret_14DE6:
00016030 4E75                       		rts	
00016032                            
00016032                            ; End of function Sonic_HitFloor
00016032                            
00016032                            ; ===========================================================================
00016032 3428 000C                  		move.w	$C(a0),d2
00016036 3628 0008                  		move.w	8(a0),d3
0001603A                            
0001603A                            loc_14DF0:				; XREF: Sonic_WalkSpeed
0001603A 0642 000A                  		addi.w	#$A,d2
0001603E 49F8 F768                  		lea	($FFFFF768).w,a4
00016042 367C 0010                  		movea.w	#$10,a3
00016046 3C3C 0000                  		move.w	#0,d6
0001604A 7A0E                       		moveq	#$E,d5
0001604C 6100 FBCA                  		bsr.w	FindFloor
00016050 143C 0000                  		move.b	#0,d2
00016054                            
00016054                            loc_14E0A:				; XREF: sub_14EB4
00016054 1638 F768                  		move.b	($FFFFF768).w,d3
00016058 0803 0000                  		btst	#0,d3
0001605C 6700                       		beq.s	locret_14E16
0001605E 1602                       		move.b	d2,d3
00016060                            
00016060                            locret_14E16:
00016060 4E75                       		rts	
00016062                            
00016062                            ; ---------------------------------------------------------------------------
00016062                            ; Subroutine allowing objects to interact with the floor
00016062                            ; ---------------------------------------------------------------------------
00016062                            
00016062                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016062                            
00016062                            
00016062                            ObjHitFloor:
00016062 3628 0008                  		move.w	8(a0),d3
00016066                            
00016066                            ; End of function ObjHitFloor
00016066                            
00016066                            
00016066                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016066                            
00016066                            
00016066                            ObjHitFloor2:
00016066 3428 000C                  		move.w	$C(a0),d2
0001606A 7000                       		moveq	#0,d0
0001606C 1028 0016                  		move.b	$16(a0),d0
00016070 4880                       		ext.w	d0
00016072 D440                       		add.w	d0,d2
00016074 49F8 F768                  		lea	($FFFFF768).w,a4
00016078 18BC 0000                  		move.b	#0,(a4)
0001607C 367C 0010                  		movea.w	#$10,a3
00016080 3C3C 0000                  		move.w	#0,d6
00016084 7A0D                       		moveq	#$D,d5
00016086 6100 FB90                  		bsr.w	FindFloor
0001608A 1638 F768                  		move.b	($FFFFF768).w,d3
0001608E 0803 0000                  		btst	#0,d3
00016092 6700                       		beq.s	locret_14E4E
00016094 163C 0000                  		move.b	#0,d3
00016098                            
00016098                            locret_14E4E:
00016098 4E75                       		rts	
0001609A                            ; End of function ObjHitFloor2
0001609A                            
0001609A                            
0001609A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001609A                            
0001609A                            
0001609A                            sub_14E50:				; XREF: sub_14D48
0001609A 3428 000C                  		move.w	$C(a0),d2
0001609E 3628 0008                  		move.w	8(a0),d3
000160A2 7000                       		moveq	#0,d0
000160A4 1028 0017                  		move.b	$17(a0),d0
000160A8 4880                       		ext.w	d0
000160AA 9440                       		sub.w	d0,d2
000160AC 1028 0016                  		move.b	$16(a0),d0
000160B0 4880                       		ext.w	d0
000160B2 D640                       		add.w	d0,d3
000160B4 49F8 F768                  		lea	($FFFFF768).w,a4
000160B8 367C 0010                  		movea.w	#$10,a3
000160BC 3C3C 0000                  		move.w	#0,d6
000160C0 7A0E                       		moveq	#$E,d5
000160C2 6100 FC92                  		bsr.w	FindWall
000160C6 3F01                       		move.w	d1,-(sp)
000160C8 3428 000C                  		move.w	$C(a0),d2
000160CC 3628 0008                  		move.w	8(a0),d3
000160D0 7000                       		moveq	#0,d0
000160D2 1028 0017                  		move.b	$17(a0),d0
000160D6 4880                       		ext.w	d0
000160D8 D440                       		add.w	d0,d2
000160DA 1028 0016                  		move.b	$16(a0),d0
000160DE 4880                       		ext.w	d0
000160E0 D640                       		add.w	d0,d3
000160E2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000160E6 367C 0010                  		movea.w	#$10,a3
000160EA 3C3C 0000                  		move.w	#0,d6
000160EE 7A0E                       		moveq	#$E,d5
000160F0 6100 FC64                  		bsr.w	FindWall
000160F4 301F                       		move.w	(sp)+,d0
000160F6 143C 00C0                  		move.b	#-$40,d2
000160FA 6000 FF1E                  		bra.w	loc_14DD0
000160FE                            
000160FE                            ; End of function sub_14E50
000160FE                            
000160FE                            
000160FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160FE                            
000160FE                            
000160FE                            sub_14EB4:				; XREF: Sonic_Floor
000160FE 3428 000C                  		move.w	$C(a0),d2
00016102 3628 0008                  		move.w	8(a0),d3
00016106                            
00016106                            loc_14EBC:
00016106 0643 000A                  		addi.w	#$A,d3
0001610A 49F8 F768                  		lea	($FFFFF768).w,a4
0001610E 367C 0010                  		movea.w	#$10,a3
00016112 3C3C 0000                  		move.w	#0,d6
00016116 7A0E                       		moveq	#$E,d5
00016118 6100 FC3C                  		bsr.w	FindWall
0001611C 143C 00C0                  		move.b	#-$40,d2
00016120 6000 FF32                  		bra.w	loc_14E0A
00016124                            
00016124                            ; End of function sub_14EB4
00016124                            
00016124                            ; ---------------------------------------------------------------------------
00016124                            ; Subroutine to	detect when an object hits a wall to its right
00016124                            ; ---------------------------------------------------------------------------
00016124                            
00016124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016124                            
00016124                            
00016124                            ObjHitWallRight:
00016124 D668 0008                  		add.w	8(a0),d3
00016128 3428 000C                  		move.w	$C(a0),d2
0001612C 49F8 F768                  		lea	($FFFFF768).w,a4
00016130 18BC 0000                  		move.b	#0,(a4)
00016134 367C 0010                  		movea.w	#$10,a3
00016138 3C3C 0000                  		move.w	#0,d6
0001613C 7A0E                       		moveq	#$E,d5
0001613E 6100 FC16                  		bsr.w	FindWall
00016142 1638 F768                  		move.b	($FFFFF768).w,d3
00016146 0803 0000                  		btst	#0,d3
0001614A 6700                       		beq.s	locret_14F06
0001614C 163C 00C0                  		move.b	#-$40,d3
00016150                            
00016150                            locret_14F06:
00016150 4E75                       		rts	
00016152                            
00016152                            ; End of function ObjHitWallRight
00016152                            
00016152                            ; ---------------------------------------------------------------------------
00016152                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00016152                            ; touches them
00016152                            ; ---------------------------------------------------------------------------
00016152                            
00016152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016152                            
00016152                            
00016152                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00016152 3428 000C                  		move.w	$C(a0),d2
00016156 3628 0008                  		move.w	8(a0),d3
0001615A 7000                       		moveq	#0,d0
0001615C 1028 0016                  		move.b	$16(a0),d0
00016160 4880                       		ext.w	d0
00016162 9440                       		sub.w	d0,d2
00016164 0A42 000F                  		eori.w	#$F,d2
00016168 1028 0017                  		move.b	$17(a0),d0
0001616C 4880                       		ext.w	d0
0001616E D640                       		add.w	d0,d3
00016170 49F8 F768                  		lea	($FFFFF768).w,a4
00016174 367C FFF0                  		movea.w	#-$10,a3
00016178 3C3C 1000                  		move.w	#$1000,d6
0001617C 7A0E                       		moveq	#$E,d5
0001617E 6100 FA98                  		bsr.w	FindFloor
00016182 3F01                       		move.w	d1,-(sp)
00016184 3428 000C                  		move.w	$C(a0),d2
00016188 3628 0008                  		move.w	8(a0),d3
0001618C 7000                       		moveq	#0,d0
0001618E 1028 0016                  		move.b	$16(a0),d0
00016192 4880                       		ext.w	d0
00016194 9440                       		sub.w	d0,d2
00016196 0A42 000F                  		eori.w	#$F,d2
0001619A 1028 0017                  		move.b	$17(a0),d0
0001619E 4880                       		ext.w	d0
000161A0 9640                       		sub.w	d0,d3
000161A2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000161A6 367C FFF0                  		movea.w	#-$10,a3
000161AA 3C3C 1000                  		move.w	#$1000,d6
000161AE 7A0E                       		moveq	#$E,d5
000161B0 6100 FA66                  		bsr.w	FindFloor
000161B4 301F                       		move.w	(sp)+,d0
000161B6 143C 0080                  		move.b	#-$80,d2
000161BA 6000 FE5E                  		bra.w	loc_14DD0
000161BE                            ; End of function Sonic_DontRunOnWalls
000161BE                            
000161BE                            ; ===========================================================================
000161BE 3428 000C                  		move.w	$C(a0),d2
000161C2 3628 0008                  		move.w	8(a0),d3
000161C6                            
000161C6                            loc_14F7C:
000161C6 0442 000A                  		subi.w	#$A,d2
000161CA 0A42 000F                  		eori.w	#$F,d2
000161CE 49F8 F768                  		lea	($FFFFF768).w,a4
000161D2 367C FFF0                  		movea.w	#-$10,a3
000161D6 3C3C 1000                  		move.w	#$1000,d6
000161DA 7A0E                       		moveq	#$E,d5
000161DC 6100 FA3A                  		bsr.w	FindFloor
000161E0 143C 0080                  		move.b	#-$80,d2
000161E4 6000 FE6E                  		bra.w	loc_14E0A
000161E8                            
000161E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161E8                            
000161E8                            
000161E8                            ObjHitCeiling:
000161E8 3428 000C                  		move.w	$C(a0),d2
000161EC 3628 0008                  		move.w	8(a0),d3
000161F0 7000                       		moveq	#0,d0
000161F2 1028 0016                  		move.b	$16(a0),d0
000161F6 4880                       		ext.w	d0
000161F8 9440                       		sub.w	d0,d2
000161FA 0A42 000F                  		eori.w	#$F,d2
000161FE 49F8 F768                  		lea	($FFFFF768).w,a4
00016202 367C FFF0                  		movea.w	#-$10,a3
00016206 3C3C 1000                  		move.w	#$1000,d6
0001620A 7A0E                       		moveq	#$E,d5
0001620C 6100 FA0A                  		bsr.w	FindFloor
00016210 1638 F768                  		move.b	($FFFFF768).w,d3
00016214 0803 0000                  		btst	#0,d3
00016218 6700                       		beq.s	locret_14FD4
0001621A 163C 0080                  		move.b	#-$80,d3
0001621E                            
0001621E                            locret_14FD4:
0001621E 4E75                       		rts	
00016220                            ; End of function ObjHitCeiling
00016220                            
00016220                            ; ===========================================================================
00016220                            
00016220                            loc_14FD6:				; XREF: sub_14D48
00016220 3428 000C                  		move.w	$C(a0),d2
00016224 3628 0008                  		move.w	8(a0),d3
00016228 7000                       		moveq	#0,d0
0001622A 1028 0017                  		move.b	$17(a0),d0
0001622E 4880                       		ext.w	d0
00016230 9440                       		sub.w	d0,d2
00016232 1028 0016                  		move.b	$16(a0),d0
00016236 4880                       		ext.w	d0
00016238 9640                       		sub.w	d0,d3
0001623A 0A43 000F                  		eori.w	#$F,d3
0001623E 49F8 F768                  		lea	($FFFFF768).w,a4
00016242 367C FFF0                  		movea.w	#-$10,a3
00016246 3C3C 0800                  		move.w	#$800,d6
0001624A 7A0E                       		moveq	#$E,d5
0001624C 6100 FB08                  		bsr.w	FindWall
00016250 3F01                       		move.w	d1,-(sp)
00016252 3428 000C                  		move.w	$C(a0),d2
00016256 3628 0008                  		move.w	8(a0),d3
0001625A 7000                       		moveq	#0,d0
0001625C 1028 0017                  		move.b	$17(a0),d0
00016260 4880                       		ext.w	d0
00016262 D440                       		add.w	d0,d2
00016264 1028 0016                  		move.b	$16(a0),d0
00016268 4880                       		ext.w	d0
0001626A 9640                       		sub.w	d0,d3
0001626C 0A43 000F                  		eori.w	#$F,d3
00016270 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016274 367C FFF0                  		movea.w	#-$10,a3
00016278 3C3C 0800                  		move.w	#$800,d6
0001627C 7A0E                       		moveq	#$E,d5
0001627E 6100 FAD6                  		bsr.w	FindWall
00016282 301F                       		move.w	(sp)+,d0
00016284 143C 0040                  		move.b	#$40,d2
00016288 6000 FD90                  		bra.w	loc_14DD0
0001628C                            
0001628C                            ; ---------------------------------------------------------------------------
0001628C                            ; Subroutine to	stop Sonic when	he jumps at a wall
0001628C                            ; ---------------------------------------------------------------------------
0001628C                            
0001628C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001628C                            
0001628C                            
0001628C                            Sonic_HitWall:				; XREF: Sonic_Floor
0001628C 3428 000C                  		move.w	$C(a0),d2
00016290 3628 0008                  		move.w	8(a0),d3
00016294                            
00016294                            loc_1504A:
00016294 0443 000A                  		subi.w	#$A,d3
00016298 0A43 000F                  		eori.w	#$F,d3
0001629C 49F8 F768                  		lea	($FFFFF768).w,a4
000162A0 367C FFF0                  		movea.w	#-$10,a3
000162A4 3C3C 0800                  		move.w	#$800,d6
000162A8 7A0E                       		moveq	#$E,d5
000162AA 6100 FAAA                  		bsr.w	FindWall
000162AE 143C 0040                  		move.b	#$40,d2
000162B2 6000 FDA0                  		bra.w	loc_14E0A
000162B6                            ; End of function Sonic_HitWall
000162B6                            
000162B6                            ; ---------------------------------------------------------------------------
000162B6                            ; Subroutine to	detect when an object hits a wall to its left
000162B6                            ; ---------------------------------------------------------------------------
000162B6                            
000162B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000162B6                            
000162B6                            
000162B6                            ObjHitWallLeft:
000162B6 D668 0008                  		add.w	8(a0),d3
000162BA 3428 000C                  		move.w	$C(a0),d2
000162BE 49F8 F768                  		lea	($FFFFF768).w,a4
000162C2 18BC 0000                  		move.b	#0,(a4)
000162C6 367C FFF0                  		movea.w	#-$10,a3
000162CA 3C3C 0800                  		move.w	#$800,d6
000162CE 7A0E                       		moveq	#$E,d5
000162D0 6100 FA84                  		bsr.w	FindWall
000162D4 1638 F768                  		move.b	($FFFFF768).w,d3
000162D8 0803 0000                  		btst	#0,d3
000162DC 6700                       		beq.s	locret_15098
000162DE 163C 0040                  		move.b	#$40,d3
000162E2                            
000162E2                            locret_15098:
000162E2 4E75                       		rts	
000162E4                            ; End of function ObjHitWallLeft
000162E4                            
000162E4                            ; ===========================================================================
000162E4                            ; ---------------------------------------------------------------------------
000162E4                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
000162E4                            ; ---------------------------------------------------------------------------
000162E4                            
000162E4                            Obj66:					; XREF: Obj_Index
000162E4 7000                       		moveq	#0,d0
000162E6 1028 0024                  		move.b	$24(a0),d0
000162EA 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
000162EE 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000162F2                            ; ===========================================================================
000162F2 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000162F4 0000                       		dc.w Obj66_Action-Obj66_Index
000162F6 0000                       		dc.w Obj66_Display-Obj66_Index
000162F8 0000                       		dc.w Obj66_Release-Obj66_Index
000162FA                            ; ===========================================================================
000162FA                            
000162FA                            Obj66_Main:				; XREF: Obj66_Index
000162FA 5428 0024                  		addq.b	#2,$24(a0)
000162FE 323C 0001                  		move.w	#1,d1
00016302 2248                       		movea.l	a0,a1
00016304 6000                       		bra.s	Obj66_MakeItem
00016306                            ; ===========================================================================
00016306                            
00016306                            Obj66_Loop:
00016306 6100 88CE                  		bsr.w	SingleObjLoad
0001630A 6600                       		bne.s	loc_150FE
0001630C 12BC 0066                  		move.b	#$66,0(a1)
00016310 5829 0024                  		addq.b	#4,$24(a1)
00016314 3368 0008 0008             		move.w	8(a0),8(a1)
0001631A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016320 137C 0003 0018             		move.b	#3,$18(a1)
00016326 137C 0010 001A             		move.b	#$10,$1A(a1)
0001632C                            
0001632C                            Obj66_MakeItem:				; XREF: Obj66_Main
0001632C 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00016334 337C 4348 0002             		move.w	#$4348,2(a1)
0001633A 0029 0004 0001             		ori.b	#4,1(a1)
00016340 137C 0038 0019             		move.b	#$38,$19(a1)
00016346                            
00016346                            loc_150FE:
00016346 51C9 FFBE                  		dbf	d1,Obj66_Loop
0001634A                            
0001634A 117C 0030 0019             		move.b	#$30,$19(a0)
00016350 117C 0004 0018             		move.b	#4,$18(a0)
00016356 317C 003C 0030             		move.w	#$3C,$30(a0)
0001635C 117C 0001 0034             		move.b	#1,$34(a0)
00016362 1168 0028 0038             		move.b	$28(a0),$38(a0)
00016368                            
00016368                            Obj66_Action:				; XREF: Obj66_Index
00016368 6100 0000                  		bsr.w	Obj66_ChkSwitch
0001636C 4A28 0001                  		tst.b	1(a0)
00016370 6A00 0000                  		bpl.w	Obj66_Display
00016374 323C 0030                  		move.w	#$30,d1
00016378 3401                       		move.w	d1,d2
0001637A 3602                       		move.w	d2,d3
0001637C 5243                       		addq.w	#1,d3
0001637E 3828 0008                  		move.w	8(a0),d4
00016382 6100 A79C                  		bsr.w	SolidObject
00016386 0828 0005 0022             		btst	#5,$22(a0)
0001638C 6700 0000                  		beq.w	Obj66_Display
00016390 43F8 D000                  		lea	($FFFFD000).w,a1
00016394 720E                       		moveq	#$E,d1
00016396 3029 0008                  		move.w	8(a1),d0
0001639A B068 0008                  		cmp.w	8(a0),d0
0001639E 6500                       		bcs.s	Obj66_GrabSonic
000163A0 7207                       		moveq	#7,d1
000163A2                            
000163A2                            Obj66_GrabSonic:
000163A2 B228 001A                  		cmp.b	$1A(a0),d1
000163A6 6600                       		bne.s	Obj66_Display
000163A8 1141 0032                  		move.b	d1,$32(a0)
000163AC 5828 0024                  		addq.b	#4,$24(a0)
000163B0 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000163B6 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
000163BC 337C 0800 0014             		move.w	#$800,$14(a1)
000163C2 337C 0000 0010             		move.w	#0,$10(a1)
000163C8 337C 0000 0012             		move.w	#0,$12(a1)
000163CE 08A8 0005 0022             		bclr	#5,$22(a0)
000163D4 08A9 0005 0022             		bclr	#5,$22(a1)
000163DA 08E9 0001 0022             		bset	#1,$22(a1)
000163E0 3429 0008                  		move.w	8(a1),d2
000163E4 3629 000C                  		move.w	$C(a1),d3
000163E8 6100 0000                  		bsr.w	Obj66_ChgPos
000163EC D569 0008                  		add.w	d2,8(a1)
000163F0 D769 000C                  		add.w	d3,$C(a1)
000163F4 E0E9 0008                  		asr	8(a1)
000163F8 E0E9 000C                  		asr	$C(a1)
000163FC                            
000163FC                            Obj66_Display:				; XREF: Obj66_Index
000163FC 6000 A3FA                  		bra.w	MarkObjGone
00016400                            ; ===========================================================================
00016400                            
00016400                            Obj66_Release:				; XREF: Obj66_Index
00016400 1028 001A                  		move.b	$1A(a0),d0
00016404 0C00 0004                  		cmpi.b	#4,d0
00016408 6700                       		beq.s	loc_151C8
0001640A 0C00 0007                  		cmpi.b	#7,d0
0001640E 6600                       		bne.s	loc_151F8
00016410                            
00016410                            loc_151C8:
00016410 B028 0032                  		cmp.b	$32(a0),d0
00016414 6700                       		beq.s	loc_151F8
00016416 43F8 D000                  		lea	($FFFFD000).w,a1
0001641A 337C 0000 0010             		move.w	#0,$10(a1)
00016420 337C 0800 0012             		move.w	#$800,$12(a1)
00016426 0C00 0004                  		cmpi.b	#4,d0
0001642A 6700                       		beq.s	loc_151F0
0001642C 337C 0800 0010             		move.w	#$800,$10(a1)
00016432 337C 0800 0012             		move.w	#$800,$12(a1)
00016438                            
00016438                            loc_151F0:
00016438 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
0001643C 5928 0024                  		subq.b	#4,$24(a0)
00016440                            
00016440                            loc_151F8:
00016440 6100                       		bsr.s	Obj66_ChkSwitch
00016442 6100                       		bsr.s	Obj66_ChgPos
00016444 6000 A3B2                  		bra.w	MarkObjGone
00016448                            
00016448                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016448                            
00016448                            
00016448                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00016448 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001644C 7000                       		moveq	#0,d0
0001644E 1028 0038                  		move.b	$38(a0),d0
00016452 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00016458 6700                       		beq.s	loc_15224	; if not, branch
0001645A 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
0001645E 6600                       		bne.s	Obj66_Animate	; if yes, branch
00016460 4428 0034                  		neg.b	$34(a0)
00016464 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
0001646A 6000                       		bra.s	Obj66_Animate
0001646C                            ; ===========================================================================
0001646C                            
0001646C                            loc_15224:
0001646C 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00016470                            
00016470                            Obj66_Animate:
00016470 5328 001E                  		subq.b	#1,$1E(a0)
00016474 6A00                       		bpl.s	locret_15246
00016476 117C 0007 001E             		move.b	#7,$1E(a0)
0001647C 1228 0034                  		move.b	$34(a0),d1
00016480 1028 001A                  		move.b	$1A(a0),d0
00016484 D001                       		add.b	d1,d0
00016486 0200 000F                  		andi.b	#$F,d0
0001648A 1140 001A                  		move.b	d0,$1A(a0)
0001648E                            
0001648E                            locret_15246:
0001648E 4E75                       		rts	
00016490                            ; End of function Obj66_ChkSwitch
00016490                            
00016490                            
00016490                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016490                            
00016490                            
00016490                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00016490 43F8 D000                  		lea	($FFFFD000).w,a1
00016494 7000                       		moveq	#0,d0
00016496 1028 001A                  		move.b	$1A(a0),d0
0001649A D040                       		add.w	d0,d0
0001649C 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
000164A0 101A                       		move.b	(a2)+,d0
000164A2 4880                       		ext.w	d0
000164A4 D068 0008                  		add.w	8(a0),d0
000164A8 3340 0008                  		move.w	d0,8(a1)
000164AC 101A                       		move.b	(a2)+,d0
000164AE 4880                       		ext.w	d0
000164B0 D068 000C                  		add.w	$C(a0),d0
000164B4 3340 000C                  		move.w	d0,$C(a1)
000164B8 4E75                       		rts	
000164BA                            ; End of function Obj66_ChgPos
000164BA                            
000164BA                            ; ===========================================================================
000164BA E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
000164BE E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
000164C2 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
000164C6 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
000164CA 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
000164CE 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
000164D2 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
000164D6 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
000164DA                            ; ---------------------------------------------------------------------------
000164DA                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000164DA                            ; ---------------------------------------------------------------------------
000164DA                            Map_obj66:
000164DA                            	include "_maps\obj66.asm"
000164DA                            ; ---------------------------------------------------------------------------
000164DA                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000164DA                            ; ---------------------------------------------------------------------------
000164DA 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
000164DE 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
000164E2 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
000164E6 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
000164EA 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
000164EE 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000164F2 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000164F6 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000164FA 0000                       		dc.w byte_154A4-Map_obj66
000164FC 06                         byte_152B4:	dc.b 6
000164FD E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00016502 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00016507 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
0001650C E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00016511 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00016516 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
0001651B 06                         byte_152D3:	dc.b 6
0001651C F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00016521 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00016526 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
0001652B F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00016530 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00016535 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
0001653A 06                         byte_152F2:	dc.b 6
0001653B 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00016540 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00016545 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
0001654A 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
0001654F 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00016554 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00016559 06                         byte_15311:	dc.b 6
0001655A 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
0001655F 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00016564 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00016569 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
0001656E 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00016573 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00016578 06                         byte_15330:	dc.b 6
00016579 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
0001657E 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00016583 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00016588 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
0001658D 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00016592 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00016597 06                         byte_1534F:	dc.b 6
00016598 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
0001659D 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
000165A2 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
000165A7 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000165AC 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000165B1 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000165B6 06                         byte_1536E:	dc.b 6
000165B7 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000165BC 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
000165C1 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
000165C6 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
000165CB 180A 1000 00               		dc.b $18, $A, $10, 0, 0
000165D0 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000165D5 06                         byte_1538D:	dc.b 6
000165D6 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000165DB F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000165E0 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000165E5 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000165EA 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000165EF 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000165F4 06                         byte_153AC:	dc.b 6
000165F5 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000165FA 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000165FF E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00016604 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00016609 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
0001660E 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00016613 06                         byte_153CB:	dc.b 6
00016614 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00016619 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
0001661E DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00016623 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00016628 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
0001662D F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00016632 06                         byte_153EA:	dc.b 6
00016633 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00016638 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
0001663D D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00016642 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00016647 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
0001664C E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00016651 06                         byte_15409:	dc.b 6
00016652 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00016657 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
0001665C CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00016661 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00016666 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
0001666B E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00016670 06                         byte_15428:	dc.b 6
00016671 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00016676 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
0001667B C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00016680 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00016685 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
0001668A E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
0001668F 06                         byte_15447:	dc.b 6
00016690 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00016695 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
0001669A CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
0001669F CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
000166A4 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000166A9 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000166AE 06                         byte_15466:	dc.b 6
000166AF E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000166B4 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000166B9 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000166BE D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000166C3 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000166C8 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
000166CD 06                         byte_15485:	dc.b 6
000166CE E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
000166D3 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000166D8 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000166DD DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000166E2 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000166E7 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000166EC 0C                         byte_154A4:	dc.b $C
000166ED C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000166F2 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000166F7 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000166FC C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00016701 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00016706 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
0001670B 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00016710 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00016715 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
0001671A 280D 1809 00               		dc.b $28, $D, $18, 9, 0
0001671F 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00016724 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
0001672A 00                         		even
0001672A 00                         		even
0001672A                            
0001672A                            ; ===========================================================================
0001672A                            ; ---------------------------------------------------------------------------
0001672A                            ; Object 67 - disc that	you run	around (SBZ)
0001672A                            ; ---------------------------------------------------------------------------
0001672A                            
0001672A                            Obj67:					; XREF: Obj_Index
0001672A 7000                       		moveq	#0,d0
0001672C 1028 0024                  		move.b	$24(a0),d0
00016730 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00016734 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00016738                            ; ===========================================================================
00016738 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
0001673A 0000                       		dc.w Obj67_Action-Obj67_Index
0001673C                            ; ===========================================================================
0001673C                            
0001673C                            Obj67_Main:				; XREF: Obj67_Index
0001673C 5428 0024                  		addq.b	#2,$24(a0)
00016740 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00016748 317C C344 0002             		move.w	#$C344,2(a0)
0001674E 117C 0004 0001             		move.b	#4,1(a0)
00016754 117C 0004 0018             		move.b	#4,$18(a0)
0001675A 117C 0008 0019             		move.b	#8,$19(a0)
00016760 3168 0008 0032             		move.w	8(a0),$32(a0)
00016766 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001676C 117C 0018 0034             		move.b	#$18,$34(a0)
00016772 117C 0048 0038             		move.b	#$48,$38(a0)
00016778 1228 0028                  		move.b	$28(a0),d1	; get object type
0001677C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016780 6700                       		beq.s	loc_15546
00016782 117C 0010 0034             		move.b	#$10,$34(a0)
00016788 117C 0038 0038             		move.b	#$38,$38(a0)
0001678E                            
0001678E                            loc_15546:
0001678E 1228 0028                  		move.b	$28(a0),d1	; get object type
00016792 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016796 4881                       		ext.w	d1
00016798 E741                       		asl.w	#3,d1
0001679A 3141 0036                  		move.w	d1,$36(a0)
0001679E 1028 0022                  		move.b	$22(a0),d0
000167A2 E418                       		ror.b	#2,d0
000167A4 0200 00C0                  		andi.b	#-$40,d0
000167A8 1140 0026                  		move.b	d0,$26(a0)
000167AC                            
000167AC                            Obj67_Action:				; XREF: Obj67_Index
000167AC 6100 0000                  		bsr.w	Obj67_MoveSonic
000167B0 6100 0000                  		bsr.w	Obj67_MoveSpot
000167B4 6000 0000                  		bra.w	Obj67_ChkDel
000167B8                            ; ===========================================================================
000167B8                            
000167B8                            Obj67_MoveSonic:			; XREF: Obj67_Action
000167B8 7400                       		moveq	#0,d2
000167BA 1428 0038                  		move.b	$38(a0),d2
000167BE 3602                       		move.w	d2,d3
000167C0 D643                       		add.w	d3,d3
000167C2 43F8 D000                  		lea	($FFFFD000).w,a1
000167C6 3029 0008                  		move.w	8(a1),d0
000167CA 9068 0032                  		sub.w	$32(a0),d0
000167CE D042                       		add.w	d2,d0
000167D0 B043                       		cmp.w	d3,d0
000167D2 6400                       		bcc.s	loc_155A8
000167D4 3229 000C                  		move.w	$C(a1),d1
000167D8 9268 0030                  		sub.w	$30(a0),d1
000167DC D242                       		add.w	d2,d1
000167DE B243                       		cmp.w	d3,d1
000167E0 6400                       		bcc.s	loc_155A8
000167E2 0829 0001 0022             		btst	#1,$22(a1)
000167E8 6700                       		beq.s	loc_155B8
000167EA 4228 003A                  		clr.b	$3A(a0)
000167EE 4E75                       		rts	
000167F0                            ; ===========================================================================
000167F0                            
000167F0                            loc_155A8:
000167F0 4A28 003A                  		tst.b	$3A(a0)
000167F4 6700                       		beq.s	locret_155B6
000167F6 4229 0038                  		clr.b	$38(a1)
000167FA 4228 003A                  		clr.b	$3A(a0)
000167FE                            
000167FE                            locret_155B6:
000167FE 4E75                       		rts	
00016800                            ; ===========================================================================
00016800                            
00016800                            loc_155B8:
00016800 4A28 003A                  		tst.b	$3A(a0)
00016804 6600                       		bne.s	loc_155E2
00016806 117C 0001 003A             		move.b	#1,$3A(a0)
0001680C 0829 0002 0022             		btst	#2,$22(a1)
00016812 6600                       		bne.s	loc_155D0
00016814 4229 001C                  		clr.b	$1C(a1)
00016818                            
00016818                            loc_155D0:
00016818 08A9 0005 0022             		bclr	#5,$22(a1)
0001681E 137C 0001 001D             		move.b	#1,$1D(a1)
00016824 137C 0001 0038             		move.b	#1,$38(a1)
0001682A                            
0001682A                            loc_155E2:
0001682A 3029 0014                  		move.w	$14(a1),d0
0001682E 4A68 0036                  		tst.w	$36(a0)
00016832 6A00                       		bpl.s	loc_15608
00016834 0C40 FC00                  		cmpi.w	#-$400,d0
00016838 6F00                       		ble.s	loc_155FA
0001683A 337C FC00 0014             		move.w	#-$400,$14(a1)
00016840 4E75                       		rts	
00016842                            ; ===========================================================================
00016842                            
00016842                            loc_155FA:
00016842 0C40 F100                  		cmpi.w	#-$F00,d0
00016846 6C00                       		bge.s	locret_15606
00016848 337C F100 0014             		move.w	#-$F00,$14(a1)
0001684E                            
0001684E                            locret_15606:
0001684E 4E75                       		rts	
00016850                            ; ===========================================================================
00016850                            
00016850                            loc_15608:
00016850 0C40 0400                  		cmpi.w	#$400,d0
00016854 6C00                       		bge.s	loc_15616
00016856 337C 0400 0014             		move.w	#$400,$14(a1)
0001685C 4E75                       		rts	
0001685E                            ; ===========================================================================
0001685E                            
0001685E                            loc_15616:
0001685E 0C40 0F00                  		cmpi.w	#$F00,d0
00016862 6F00                       		ble.s	locret_15622
00016864 337C 0F00 0014             		move.w	#$F00,$14(a1)
0001686A                            
0001686A                            locret_15622:
0001686A 4E75                       		rts	
0001686C                            ; ===========================================================================
0001686C                            
0001686C                            Obj67_MoveSpot:				; XREF: Obj67_Action
0001686C 3028 0036                  		move.w	$36(a0),d0
00016870 D168 0026                  		add.w	d0,$26(a0)
00016874 1028 0026                  		move.b	$26(a0),d0
00016878 4EB9 0000 3424             		jsr	(CalcSine).l
0001687E 3428 0030                  		move.w	$30(a0),d2
00016882 3628 0032                  		move.w	$32(a0),d3
00016886 7800                       		moveq	#0,d4
00016888 1828 0034                  		move.b	$34(a0),d4
0001688C E14C                       		lsl.w	#8,d4
0001688E 2A04                       		move.l	d4,d5
00016890 C9C0                       		muls.w	d0,d4
00016892 4844                       		swap	d4
00016894 CBC1                       		muls.w	d1,d5
00016896 4845                       		swap	d5
00016898 D842                       		add.w	d2,d4
0001689A DA43                       		add.w	d3,d5
0001689C 3144 000C                  		move.w	d4,$C(a0)
000168A0 3145 0008                  		move.w	d5,8(a0)
000168A4 4E75                       		rts	
000168A6                            ; ===========================================================================
000168A6                            
000168A6                            Obj67_ChkDel:				; XREF: Obj67_Action
000168A6 3028 0032                  		move.w	$32(a0),d0
000168AA 0240 FF80                  		andi.w	#-$80,d0
000168AE 3238 F700                  		move.w	($FFFFF700).w,d1
000168B2 0441 0080                  		subi.w	#$80,d1
000168B6 0241 FF80                  		andi.w	#-$80,d1
000168BA 9041                       		sub.w	d1,d0
000168BC 0C40 0280                  		cmpi.w	#$280,d0
000168C0 6200                       		bhi.s	Obj67_Delete
000168C2 4EF9 0000 E750             		jmp	DisplaySprite
000168C8                            ; ===========================================================================
000168C8                            
000168C8                            Obj67_Delete:
000168C8 4EF9 0000 E78C             		jmp	DeleteObject
000168CE                            ; ===========================================================================
000168CE                            ; ---------------------------------------------------------------------------
000168CE                            ; Sprite mappings - disc that you run around (SBZ)
000168CE                            ; (It's just a small blob that moves around in a circle. The disc itself is
000168CE                            ; part of the level tiles.)
000168CE                            ; ---------------------------------------------------------------------------
000168CE                            Map_obj67:
000168CE                            	include "_maps\obj67.asm"
000168CE                            ; ---------------------------------------------------------------------------
000168CE                            ; Sprite mappings - disc that you run around (SBZ)
000168CE                            ; (It's just a small blob that moves around in a circle. The disc itself is
000168CE                            ; part of the level tiles.)
000168CE                            ; ---------------------------------------------------------------------------
000168CE 0000                       		dc.w byte_15688-Map_obj67
000168D0 01                         byte_15688:	dc.b 1
000168D1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000168D6                            		even
000168D6                            		even
000168D6                            
000168D6                            ; ===========================================================================
000168D6                            ; ---------------------------------------------------------------------------
000168D6                            ; Object 68 - conveyor belts (SBZ)
000168D6                            ; ---------------------------------------------------------------------------
000168D6                            
000168D6                            Obj68:					; XREF: Obj_Index
000168D6 7000                       		moveq	#0,d0
000168D8 1028 0024                  		move.b	$24(a0),d0
000168DC 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000168E0 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000168E4                            ; ===========================================================================
000168E4 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000168E6 0000                       		dc.w Obj68_Action-Obj68_Index
000168E8                            ; ===========================================================================
000168E8                            
000168E8                            Obj68_Main:				; XREF: Obj68_Index
000168E8 5428 0024                  		addq.b	#2,$24(a0)
000168EC 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000168F2 1228 0028                  		move.b	$28(a0),d1	; get object type
000168F6 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000168FA 6700                       		beq.s	loc_156BA	; if zero, branch
000168FC 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00016902                            
00016902                            loc_156BA:
00016902 1228 0028                  		move.b	$28(a0),d1	; get object type
00016906 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001690A 4881                       		ext.w	d1
0001690C E841                       		asr.w	#4,d1
0001690E 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00016912                            
00016912                            Obj68_Action:				; XREF: Obj68_Index
00016912 6100                       		bsr.s	Obj68_MoveSonic
00016914 3028 0008                  		move.w	8(a0),d0
00016918 0240 FF80                  		andi.w	#$FF80,d0
0001691C 3238 F700                  		move.w	($FFFFF700).w,d1
00016920 0441 0080                  		subi.w	#$80,d1
00016924 0241 FF80                  		andi.w	#$FF80,d1
00016928 9041                       		sub.w	d1,d0
0001692A 0C40 0280                  		cmpi.w	#$280,d0
0001692E 6200                       		bhi.s	Obj68_Delete
00016930 4E75                       		rts	
00016932                            ; ===========================================================================
00016932                            
00016932                            Obj68_Delete:
00016932 4EF9 0000 E78C             		jmp	DeleteObject
00016938                            ; ===========================================================================
00016938                            
00016938                            Obj68_MoveSonic:			; XREF: Obj68_Action
00016938 7400                       		moveq	#0,d2
0001693A 1428 0038                  		move.b	$38(a0),d2
0001693E 3602                       		move.w	d2,d3
00016940 D643                       		add.w	d3,d3
00016942 43F8 D000                  		lea	($FFFFD000).w,a1
00016946 3029 0008                  		move.w	8(a1),d0
0001694A 9068 0008                  		sub.w	8(a0),d0
0001694E D042                       		add.w	d2,d0
00016950 B043                       		cmp.w	d3,d0
00016952 6400                       		bcc.s	locret_1572E
00016954 3229 000C                  		move.w	$C(a1),d1
00016958 9268 000C                  		sub.w	$C(a0),d1
0001695C 0641 0030                  		addi.w	#$30,d1
00016960 0C41 0030                  		cmpi.w	#$30,d1
00016964 6400                       		bcc.s	locret_1572E
00016966 0829 0001 0022             		btst	#1,$22(a1)
0001696C 6600                       		bne.s	locret_1572E
0001696E 3028 0036                  		move.w	$36(a0),d0
00016972 D169 0008                  		add.w	d0,8(a1)
00016976                            
00016976                            locret_1572E:
00016976 4E75                       		rts	
00016978                            
00016978                            ; ===========================================================================
00016978                            ; ---------------------------------------------------------------------------
00016978                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00016978                            ; ---------------------------------------------------------------------------
00016978                            
00016978                            Obj69:					; XREF: Obj_Index
00016978 7000                       		moveq	#0,d0
0001697A 1028 0024                  		move.b	$24(a0),d0
0001697E 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00016982 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00016986                            ; ===========================================================================
00016986 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00016988 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
0001698A 0000                       		dc.w Obj69_Spinner-Obj69_Index
0001698C                            ; ===========================================================================
0001698C                            
0001698C                            Obj69_Main:				; XREF: Obj69_Index
0001698C 5428 0024                  		addq.b	#2,$24(a0)
00016990 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00016998 317C 4492 0002             		move.w	#$4492,2(a0)
0001699E 0028 0004 0001             		ori.b	#4,1(a0)
000169A4 117C 0080 0019             		move.b	#$80,$19(a0)
000169AA 7000                       		moveq	#0,d0
000169AC 1028 0028                  		move.b	$28(a0),d0
000169B0 0240 000F                  		andi.w	#$F,d0
000169B4 C0FC 003C                  		mulu.w	#$3C,d0
000169B8 3140 0032                  		move.w	d0,$32(a0)
000169BC 4A28 0028                  		tst.b	$28(a0)
000169C0 6A00                       		bpl.s	Obj69_Trapdoor
000169C2 5428 0024                  		addq.b	#2,$24(a0)
000169C6 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000169CE 317C 04DF 0002             		move.w	#$4DF,2(a0)
000169D4 117C 0010 0019             		move.b	#$10,$19(a0)
000169DA 117C 0002 001C             		move.b	#2,$1C(a0)
000169E0 7000                       		moveq	#0,d0
000169E2 1028 0028                  		move.b	$28(a0),d0	; get object type
000169E6 3200                       		move.w	d0,d1
000169E8 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000169EC C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000169F0 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000169F4 3140 0032                  		move.w	d0,$32(a0)
000169F8 0241 0070                  		andi.w	#$70,d1
000169FC 0641 0010                  		addi.w	#$10,d1
00016A00 E549                       		lsl.w	#2,d1
00016A02 5341                       		subq.w	#1,d1
00016A04 3141 0036                  		move.w	d1,$36(a0)
00016A08 6000                       		bra.s	Obj69_Spinner
00016A0A                            ; ===========================================================================
00016A0A                            
00016A0A                            Obj69_Trapdoor:				; XREF: Obj69_Index
00016A0A 5368 0030                  		subq.w	#1,$30(a0)
00016A0E 6A00                       		bpl.s	Obj69_Animate
00016A10 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016A16 0868 0000 001C             		bchg	#0,$1C(a0)
00016A1C 4A28 0001                  		tst.b	1(a0)
00016A20 6A00                       		bpl.s	Obj69_Animate
00016A22 303C 00BB                  		move.w	#$BB,d0
00016A26 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play door sound
00016A2C                            
00016A2C                            Obj69_Animate:
00016A2C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016A32 4EB9 0000 B79E             		jsr	AnimateSprite
00016A38 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00016A3C 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00016A3E 323C 004B                  		move.w	#$4B,d1
00016A42 343C 000C                  		move.w	#$C,d2
00016A46 3602                       		move.w	d2,d3
00016A48 5243                       		addq.w	#1,d3
00016A4A 3828 0008                  		move.w	8(a0),d4
00016A4E 6100 A0D0                  		bsr.w	SolidObject
00016A52 6000 9DA4                  		bra.w	MarkObjGone
00016A56                            ; ===========================================================================
00016A56                            
00016A56                            Obj69_NotSolid:
00016A56 0828 0003 0022             		btst	#3,$22(a0)
00016A5C 6700                       		beq.s	Obj69_Display
00016A5E 43F8 D000                  		lea	($FFFFD000).w,a1
00016A62 08A9 0003 0022             		bclr	#3,$22(a1)
00016A68 08A8 0003 0022             		bclr	#3,$22(a0)
00016A6E 4228 0025                  		clr.b	$25(a0)
00016A72                            
00016A72                            Obj69_Display:
00016A72 6000 9D84                  		bra.w	MarkObjGone
00016A76                            ; ===========================================================================
00016A76                            
00016A76                            Obj69_Spinner:				; XREF: Obj69_Index
00016A76 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016A7A C068 0036                  		and.w	$36(a0),d0
00016A7E 6600                       		bne.s	Obj69_Delay
00016A80 117C 0001 0034             		move.b	#1,$34(a0)
00016A86                            
00016A86                            Obj69_Delay:
00016A86 4A28 0034                  		tst.b	$34(a0)
00016A8A 6700                       		beq.s	Obj69_Animate2
00016A8C 5368 0030                  		subq.w	#1,$30(a0)
00016A90 6A00                       		bpl.s	Obj69_Animate2
00016A92 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016A98 4228 0034                  		clr.b	$34(a0)
00016A9C 0868 0000 001C             		bchg	#0,$1C(a0)
00016AA2                            
00016AA2                            Obj69_Animate2:
00016AA2 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016AA8 4EB9 0000 B79E             		jsr	AnimateSprite
00016AAE 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00016AB2 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00016AB4 323C 001B                  		move.w	#$1B,d1
00016AB8 343C 0007                  		move.w	#7,d2
00016ABC 3602                       		move.w	d2,d3
00016ABE 5243                       		addq.w	#1,d3
00016AC0 3828 0008                  		move.w	8(a0),d4
00016AC4 6100 A05A                  		bsr.w	SolidObject
00016AC8 6000 9D2E                  		bra.w	MarkObjGone
00016ACC                            ; ===========================================================================
00016ACC                            
00016ACC                            Obj69_NotSolid2:
00016ACC 0828 0003 0022             		btst	#3,$22(a0)
00016AD2 6700                       		beq.s	Obj69_Display2
00016AD4 43F8 D000                  		lea	($FFFFD000).w,a1
00016AD8 08A9 0003 0022             		bclr	#3,$22(a1)
00016ADE 08A8 0003 0022             		bclr	#3,$22(a0)
00016AE4 4228 0025                  		clr.b	$25(a0)
00016AE8                            
00016AE8                            Obj69_Display2:
00016AE8 6000 9D0E                  		bra.w	MarkObjGone
00016AEC                            ; ===========================================================================
00016AEC                            Ani_obj69:
00016AEC                            	include "_anim\obj69.asm"
00016AEC                            ; ---------------------------------------------------------------------------
00016AEC                            ; Animation script - trapdoor (SBZ)
00016AEC                            ; ---------------------------------------------------------------------------
00016AEC 0000                       		dc.w byte_158AC-Ani_obj69
00016AEE 0000                       		dc.w byte_158B2-Ani_obj69
00016AF0 0000                       		dc.w byte_158B8-Ani_obj69
00016AF2 0000                       		dc.w byte_158CC-Ani_obj69
00016AF4 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00016AFA 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00016B00 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016B0D 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016B14 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016B21 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016B28                            		even
00016B28                            		even
00016B28                            
00016B28                            ; ---------------------------------------------------------------------------
00016B28                            ; Sprite mappings - trapdoor (SBZ)
00016B28                            ; ---------------------------------------------------------------------------
00016B28                            Map_obj69:
00016B28                            	include "_maps\obj69.asm"
00016B28                            ; ---------------------------------------------------------------------------
00016B28                            ; Sprite mappings - trapdoor (SBZ)
00016B28                            ; ---------------------------------------------------------------------------
00016B28 0000                       		dc.w byte_158E6-Map_obj69
00016B2A 0000                       		dc.w byte_158FB-Map_obj69
00016B2C 0000                       		dc.w byte_15924-Map_obj69
00016B2E 04                         byte_158E6:	dc.b 4
00016B2F F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00016B34 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016B39 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00016B3E F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00016B43 08                         byte_158FB:	dc.b 8
00016B44 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00016B49 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00016B4E 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00016B53 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016B58 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016B5D 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00016B62 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016B67 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016B6C 04                         byte_15924:	dc.b 4
00016B6D 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00016B72 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016B77 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016B7C 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00016B82 00                         		even
00016B82 00                         		even
00016B82                            
00016B82                            ; ---------------------------------------------------------------------------
00016B82                            ; Sprite mappings - spinning platforms (SBZ)
00016B82                            ; ---------------------------------------------------------------------------
00016B82                            Map_obj69a:
00016B82                            	include "_maps\obj69a.asm"
00016B82                            ; ---------------------------------------------------------------------------
00016B82                            ; Sprite mappings - spinning platforms (SBZ)
00016B82                            ; ---------------------------------------------------------------------------
00016B82 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00016B86 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016B8A 0000                       		dc.w byte_15970-Map_obj69a
00016B8C 02                         byte_15944:	dc.b 2
00016B8D F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00016B92 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00016B97 02                         byte_1594F:	dc.b 2
00016B98 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016B9D 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00016BA2 02                         byte_1595A:	dc.b 2
00016BA3 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00016BA8 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00016BAD 02                         byte_15965:	dc.b 2
00016BAE F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00016BB3 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00016BB8 02                         byte_15970:	dc.b 2
00016BB9 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00016BBE 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00016BC4 00                         		even
00016BC4 00                         		even
00016BC4                            
00016BC4                            ; ===========================================================================
00016BC4                            ; ---------------------------------------------------------------------------
00016BC4                            ; Object 6A - ground saws and pizza cutters (SBZ)
00016BC4                            ; ---------------------------------------------------------------------------
00016BC4                            
00016BC4                            Obj6A:					; XREF: Obj_Index
00016BC4 7000                       		moveq	#0,d0
00016BC6 1028 0024                  		move.b	$24(a0),d0
00016BCA 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00016BCE 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00016BD2                            ; ===========================================================================
00016BD2 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00016BD4 0000                       		dc.w Obj6A_Action-Obj6A_Index
00016BD6                            ; ===========================================================================
00016BD6                            
00016BD6                            Obj6A_Main:				; XREF: Obj6A_Index
00016BD6 5428 0024                  		addq.b	#2,$24(a0)
00016BDA 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00016BE2 317C 43B5 0002             		move.w	#$43B5,2(a0)
00016BE8 117C 0004 0001             		move.b	#4,1(a0)
00016BEE 117C 0004 0018             		move.b	#4,$18(a0)
00016BF4 117C 0020 0019             		move.b	#$20,$19(a0)
00016BFA 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016C00 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016C06 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016C0C 6400                       		bcc.s	Obj6A_Action
00016C0E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016C14                            
00016C14                            Obj6A_Action:				; XREF: Obj6A_Index
00016C14 7000                       		moveq	#0,d0
00016C16 1028 0028                  		move.b	$28(a0),d0
00016C1A 0240 0007                  		andi.w	#7,d0
00016C1E D040                       		add.w	d0,d0
00016C20 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00016C24 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016C28 3028 003A                  		move.w	$3A(a0),d0
00016C2C 0240 FF80                  		andi.w	#$FF80,d0
00016C30 3238 F700                  		move.w	($FFFFF700).w,d1
00016C34 0441 0080                  		subi.w	#$80,d1
00016C38 0241 FF80                  		andi.w	#$FF80,d1
00016C3C 9041                       		sub.w	d1,d0
00016C3E 0C40 0280                  		cmpi.w	#$280,d0
00016C42 6200                       		bhi.s	Obj6A_Delete
00016C44 4EF9 0000 E750             		jmp	DisplaySprite
00016C4A                            ; ===========================================================================
00016C4A                            
00016C4A                            Obj6A_Delete:
00016C4A 4EF9 0000 E78C             		jmp	DeleteObject
00016C50                            ; ===========================================================================
00016C50 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00016C54 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016C58 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016C5A                            ; ===========================================================================
00016C5A                            
00016C5A                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016C5A 4E75                       		rts	
00016C5C                            ; ===========================================================================
00016C5C                            
00016C5C                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016C5C 323C 0060                  		move.w	#$60,d1
00016C60 7000                       		moveq	#0,d0
00016C62 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016C66 0828 0000 0022             		btst	#0,$22(a0)
00016C6C 6700                       		beq.s	Obj6A_Animate01
00016C6E 4440                       		neg.w	d0
00016C70 D041                       		add.w	d1,d0
00016C72                            
00016C72                            Obj6A_Animate01:
00016C72 3228 003A                  		move.w	$3A(a0),d1
00016C76 9240                       		sub.w	d0,d1
00016C78 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016C7C 5328 001E                  		subq.b	#1,$1E(a0)
00016C80 6A00                       		bpl.s	loc_15A46
00016C82 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016C88 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016C8E                            
00016C8E                            loc_15A46:
00016C8E 4A28 0001                  		tst.b	1(a0)
00016C92 6A00                       		bpl.s	locret_15A60
00016C94 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016C98 0240 000F                  		andi.w	#$F,d0
00016C9C 6600                       		bne.s	locret_15A60
00016C9E 303C 00B0                  		move.w	#$B0,d0
00016CA2 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play saw sound
00016CA8                            
00016CA8                            locret_15A60:
00016CA8 4E75                       		rts	
00016CAA                            ; ===========================================================================
00016CAA                            
00016CAA                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016CAA 323C 0030                  		move.w	#$30,d1
00016CAE 7000                       		moveq	#0,d0
00016CB0 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016CB4 0828 0000 0022             		btst	#0,$22(a0)
00016CBA 6700                       		beq.s	Obj6A_Animate02
00016CBC 4440                       		neg.w	d0
00016CBE 0640 0080                  		addi.w	#$80,d0
00016CC2                            
00016CC2                            Obj6A_Animate02:
00016CC2 3228 0038                  		move.w	$38(a0),d1
00016CC6 9240                       		sub.w	d0,d1
00016CC8 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016CCC 5328 001E                  		subq.b	#1,$1E(a0)
00016CD0 6A00                       		bpl.s	loc_15A96
00016CD2 117C 0002 001E             		move.b	#2,$1E(a0)
00016CD8 0868 0000 001A             		bchg	#0,$1A(a0)
00016CDE                            
00016CDE                            loc_15A96:
00016CDE 4A28 0001                  		tst.b	1(a0)
00016CE2 6A00                       		bpl.s	locret_15AB0
00016CE4 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016CE8 0C00 0018                  		cmpi.b	#$18,d0
00016CEC 6600                       		bne.s	locret_15AB0
00016CEE 303C 00B0                  		move.w	#$B0,d0
00016CF2 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play saw sound
00016CF8                            
00016CF8                            locret_15AB0:
00016CF8 4E75                       		rts	
00016CFA                            ; ===========================================================================
00016CFA                            
00016CFA                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00016CFA 4A28 003D                  		tst.b	$3D(a0)
00016CFE 6600                       		bne.s	Obj6A_Animate03
00016D00 3038 D008                  		move.w	($FFFFD008).w,d0
00016D04 0440 00C0                  		subi.w	#$C0,d0
00016D08 6500                       		bcs.s	loc_15B02
00016D0A 9068 0008                  		sub.w	8(a0),d0
00016D0E 6500                       		bcs.s	loc_15B02
00016D10 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016D14 0440 0080                  		subi.w	#$80,d0
00016D18 B068 000C                  		cmp.w	$C(a0),d0
00016D1C 6400                       		bcc.s	locret_15B04
00016D1E 0640 0100                  		addi.w	#$100,d0
00016D22 B068 000C                  		cmp.w	$C(a0),d0
00016D26 6500                       		bcs.s	locret_15B04
00016D28 117C 0001 003D             		move.b	#1,$3D(a0)
00016D2E 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00016D34 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016D3A 117C 0002 001A             		move.b	#2,$1A(a0)
00016D40 303C 00B0                  		move.w	#$B0,d0
00016D44 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play saw sound
00016D4A                            
00016D4A                            loc_15B02:
00016D4A 588F                       		addq.l	#4,sp
00016D4C                            
00016D4C                            locret_15B04:
00016D4C 4E75                       		rts	
00016D4E                            ; ===========================================================================
00016D4E                            
00016D4E                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00016D4E 4EB9 0000 E72A             		jsr	SpeedToPos
00016D54 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016D5A 5328 001E                  		subq.b	#1,$1E(a0)
00016D5E 6A00                       		bpl.s	locret_15B24
00016D60 117C 0002 001E             		move.b	#2,$1E(a0)
00016D66 0868 0000 001A             		bchg	#0,$1A(a0)
00016D6C                            
00016D6C                            locret_15B24:
00016D6C 4E75                       		rts	
00016D6E                            ; ===========================================================================
00016D6E                            
00016D6E                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016D6E 4A28 003D                  		tst.b	$3D(a0)
00016D72 6600                       		bne.s	Obj6A_Animate04
00016D74 3038 D008                  		move.w	($FFFFD008).w,d0
00016D78 0640 00E0                  		addi.w	#$E0,d0
00016D7C 9068 0008                  		sub.w	8(a0),d0
00016D80 6400                       		bcc.s	loc_15B74
00016D82 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016D86 0440 0080                  		subi.w	#$80,d0
00016D8A B068 000C                  		cmp.w	$C(a0),d0
00016D8E 6400                       		bcc.s	locret_15B76
00016D90 0640 0100                  		addi.w	#$100,d0
00016D94 B068 000C                  		cmp.w	$C(a0),d0
00016D98 6500                       		bcs.s	locret_15B76
00016D9A 117C 0001 003D             		move.b	#1,$3D(a0)
00016DA0 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016DA6 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016DAC 117C 0002 001A             		move.b	#2,$1A(a0)
00016DB2 303C 00B0                  		move.w	#$B0,d0
00016DB6 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play saw sound
00016DBC                            
00016DBC                            loc_15B74:
00016DBC 588F                       		addq.l	#4,sp
00016DBE                            
00016DBE                            locret_15B76:
00016DBE 4E75                       		rts	
00016DC0                            ; ===========================================================================
00016DC0                            
00016DC0                            Obj6A_Animate04:
00016DC0 4EB9 0000 E72A             		jsr	SpeedToPos
00016DC6 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016DCC 5328 001E                  		subq.b	#1,$1E(a0)
00016DD0 6A00                       		bpl.s	locret_15B96
00016DD2 117C 0002 001E             		move.b	#2,$1E(a0)
00016DD8 0868 0000 001A             		bchg	#0,$1A(a0)
00016DDE                            
00016DDE                            locret_15B96:
00016DDE 4E75                       		rts	
00016DE0                            ; ===========================================================================
00016DE0                            ; ---------------------------------------------------------------------------
00016DE0                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016DE0                            ; ---------------------------------------------------------------------------
00016DE0                            Map_obj6A:
00016DE0                            	include "_maps\obj6A.asm"
00016DE0                            ; ---------------------------------------------------------------------------
00016DE0                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016DE0                            ; ---------------------------------------------------------------------------
00016DE0 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016DE4 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016DE8 07                         byte_15BA0:	dc.b 7
00016DE9 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016DEE D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016DF3 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016DF8 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016DFD E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016E02 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016E07 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016E0C 07                         byte_15BC4:	dc.b 7
00016E0D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016E12 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016E17 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016E1C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016E21 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016E26 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016E2B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016E30 04                         byte_15BE8:	dc.b 4
00016E31 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016E36 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016E3B 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016E40 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016E45 04                         byte_15BFD:	dc.b 4
00016E46 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016E4B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016E50 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016E55 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016E5A                            		even
00016E5A                            		even
00016E5A                            
00016E5A                            ; ===========================================================================
00016E5A                            ; ---------------------------------------------------------------------------
00016E5A                            ; Object 6B - stomper (SBZ)
00016E5A                            ; ---------------------------------------------------------------------------
00016E5A                            
00016E5A                            Obj6B:					; XREF: Obj_Index
00016E5A 7000                       		moveq	#0,d0
00016E5C 1028 0024                  		move.b	$24(a0),d0
00016E60 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016E64 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016E68                            ; ===========================================================================
00016E68 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016E6A 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016E6C                            
00016E6C 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016E70 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016E74 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016E78 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016E7C 8040 0005                  		dc.b  $80, $40,	  0,   5
00016E80                            ; ===========================================================================
00016E80                            
00016E80                            Obj6B_Main:				; XREF: Obj6B_Index
00016E80 5428 0024                  		addq.b	#2,$24(a0)
00016E84 7000                       		moveq	#0,d0
00016E86 1028 0028                  		move.b	$28(a0),d0
00016E8A E448                       		lsr.w	#2,d0
00016E8C 0240 001C                  		andi.w	#$1C,d0
00016E90 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016E94 115B 0019                  		move.b	(a3)+,$19(a0)
00016E98 115B 0016                  		move.b	(a3)+,$16(a0)
00016E9C E448                       		lsr.w	#2,d0
00016E9E 1140 001A                  		move.b	d0,$1A(a0)
00016EA2 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016EAA 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016EB0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016EB6 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00016EB8 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016EBE 6700                       		beq.s	Obj6B_SBZ3
00016EC0                            
00016EC0                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016EC0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016EC4 7000                       		moveq	#0,d0
00016EC6 1028 0023                  		move.b	$23(a0),d0
00016ECA 6700                       		beq.s	Obj6B_Delete
00016ECC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016ED2                            
00016ED2                            Obj6B_Delete:
00016ED2 4EF9 0000 E78C             		jmp	DeleteObject
00016ED8                            ; ===========================================================================
00016ED8                            
00016ED8                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00016ED8 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016EDE 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016EE4 6600                       		bne.s	Obj6B_SBZ12
00016EE6 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016EEA 7000                       		moveq	#0,d0
00016EEC 1028 0023                  		move.b	$23(a0),d0
00016EF0 6700                       		beq.s	Obj6B_SBZ12
00016EF2 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016EF8 6700                       		beq.s	Obj6B_SBZ12
00016EFA 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016EFE 60C0                       		bra.s	Obj6B_ChkGone
00016F00                            ; ===========================================================================
00016F00                            
00016F00                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016F00 0028 0004 0001             		ori.b	#4,1(a0)
00016F06 117C 0004 0018             		move.b	#4,$18(a0)
00016F0C 3168 0008 0034             		move.w	8(a0),$34(a0)
00016F12 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016F18 7000                       		moveq	#0,d0
00016F1A 101B                       		move.b	(a3)+,d0
00016F1C 3140 003C                  		move.w	d0,$3C(a0)
00016F20 7000                       		moveq	#0,d0
00016F22 1028 0028                  		move.b	$28(a0),d0
00016F26 6A00                       		bpl.s	Obj6B_Action
00016F28 0200 000F                  		andi.b	#$F,d0
00016F2C 1140 003E                  		move.b	d0,$3E(a0)
00016F30 1153 0028                  		move.b	(a3),$28(a0)
00016F34 0C13 0005                  		cmpi.b	#5,(a3)
00016F38 6600                       		bne.s	Obj6B_ChkGone2
00016F3A 08E8 0004 0001             		bset	#4,1(a0)
00016F40                            
00016F40                            Obj6B_ChkGone2:
00016F40 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016F44 7000                       		moveq	#0,d0
00016F46 1028 0023                  		move.b	$23(a0),d0
00016F4A 6700                       		beq.s	Obj6B_Action
00016F4C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016F52                            
00016F52                            Obj6B_Action:				; XREF: Obj6B_Index
00016F52 3F28 0008                  		move.w	8(a0),-(sp)
00016F56 7000                       		moveq	#0,d0
00016F58 1028 0028                  		move.b	$28(a0),d0
00016F5C 0240 000F                  		andi.w	#$F,d0
00016F60 D040                       		add.w	d0,d0
00016F62 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016F66 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016F6A 381F                       		move.w	(sp)+,d4
00016F6C 4A28 0001                  		tst.b	1(a0)
00016F70 6A00                       		bpl.s	Obj6B_ChkDel
00016F72 7200                       		moveq	#0,d1
00016F74 1228 0019                  		move.b	$19(a0),d1
00016F78 0641 000B                  		addi.w	#$B,d1
00016F7C 7400                       		moveq	#0,d2
00016F7E 1428 0016                  		move.b	$16(a0),d2
00016F82 3602                       		move.w	d2,d3
00016F84 5243                       		addq.w	#1,d3
00016F86 6100 9B98                  		bsr.w	SolidObject
00016F8A                            
00016F8A                            Obj6B_ChkDel:
00016F8A 3028 0034                  		move.w	$34(a0),d0
00016F8E 0240 FF80                  		andi.w	#$FF80,d0
00016F92 3238 F700                  		move.w	($FFFFF700).w,d1
00016F96 0441 0080                  		subi.w	#$80,d1
00016F9A 0241 FF80                  		andi.w	#$FF80,d1
00016F9E 9041                       		sub.w	d1,d0
00016FA0 0C40 0280                  		cmpi.w	#$280,d0
00016FA4 6200                       		bhi.s	loc_15D64
00016FA6 4EF9 0000 E750             		jmp	DisplaySprite
00016FAC                            ; ===========================================================================
00016FAC                            
00016FAC                            loc_15D64:
00016FAC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016FB2 6600                       		bne.s	Obj6B_Delete2
00016FB4 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016FB8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016FBC 7000                       		moveq	#0,d0
00016FBE 1028 0023                  		move.b	$23(a0),d0
00016FC2 6700                       		beq.s	Obj6B_Delete2
00016FC4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016FCA                            
00016FCA                            Obj6B_Delete2:
00016FCA 4EF9 0000 E78C             		jmp	DeleteObject
00016FD0                            ; ===========================================================================
00016FD0 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016FD4 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00016FD8 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016FDC                            ; ===========================================================================
00016FDC                            
00016FDC                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016FDC 4E75                       		rts	
00016FDE                            ; ===========================================================================
00016FDE                            
00016FDE                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016FDE 4A28 0038                  		tst.b	$38(a0)
00016FE2 6600                       		bne.s	loc_15DB4
00016FE4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016FE8 7000                       		moveq	#0,d0
00016FEA 1028 003E                  		move.b	$3E(a0),d0
00016FEE 0832 0000 0000             		btst	#0,(a2,d0.w)
00016FF4 6700                       		beq.s	loc_15DC2
00016FF6 117C 0001 0038             		move.b	#1,$38(a0)
00016FFC                            
00016FFC                            loc_15DB4:
00016FFC 3028 003C                  		move.w	$3C(a0),d0
00017000 B068 003A                  		cmp.w	$3A(a0),d0
00017004 6700                       		beq.s	loc_15DE0
00017006 5468 003A                  		addq.w	#2,$3A(a0)
0001700A                            
0001700A                            loc_15DC2:
0001700A 3028 003A                  		move.w	$3A(a0),d0
0001700E 0828 0000 0022             		btst	#0,$22(a0)
00017014 6700                       		beq.s	loc_15DD4
00017016 4440                       		neg.w	d0
00017018 0640 0080                  		addi.w	#$80,d0
0001701C                            
0001701C                            loc_15DD4:
0001701C 3228 0034                  		move.w	$34(a0),d1
00017020 9240                       		sub.w	d0,d1
00017022 3141 0008                  		move.w	d1,8(a0)
00017026 4E75                       		rts	
00017028                            ; ===========================================================================
00017028                            
00017028                            loc_15DE0:
00017028 5228 0028                  		addq.b	#1,$28(a0)
0001702C 317C 00B4 0036             		move.w	#$B4,$36(a0)
00017032 4228 0038                  		clr.b	$38(a0)
00017036 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001703A 7000                       		moveq	#0,d0
0001703C 1028 0023                  		move.b	$23(a0),d0
00017040 67C8                       		beq.s	loc_15DC2
00017042 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017048 60C0                       		bra.s	loc_15DC2
0001704A                            ; ===========================================================================
0001704A                            
0001704A                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
0001704A 4A28 0038                  		tst.b	$38(a0)
0001704E 6600                       		bne.s	loc_15E14
00017050 5368 0036                  		subq.w	#1,$36(a0)
00017054 6600                       		bne.s	loc_15E1E
00017056 117C 0001 0038             		move.b	#1,$38(a0)
0001705C                            
0001705C                            loc_15E14:
0001705C 4A68 003A                  		tst.w	$3A(a0)
00017060 6700                       		beq.s	loc_15E3C
00017062 5568 003A                  		subq.w	#2,$3A(a0)
00017066                            
00017066                            loc_15E1E:
00017066 3028 003A                  		move.w	$3A(a0),d0
0001706A 0828 0000 0022             		btst	#0,$22(a0)
00017070 6700                       		beq.s	loc_15E30
00017072 4440                       		neg.w	d0
00017074 0640 0080                  		addi.w	#$80,d0
00017078                            
00017078                            loc_15E30:
00017078 3228 0034                  		move.w	$34(a0),d1
0001707C 9240                       		sub.w	d0,d1
0001707E 3141 0008                  		move.w	d1,8(a0)
00017082 4E75                       		rts	
00017084                            ; ===========================================================================
00017084                            
00017084                            loc_15E3C:
00017084 5328 0028                  		subq.b	#1,$28(a0)
00017088 4228 0038                  		clr.b	$38(a0)
0001708C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017090 7000                       		moveq	#0,d0
00017092 1028 0023                  		move.b	$23(a0),d0
00017096 67CE                       		beq.s	loc_15E1E
00017098 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001709E 60C6                       		bra.s	loc_15E1E
000170A0                            ; ===========================================================================
000170A0                            
000170A0                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
000170A0 4A28 0038                  		tst.b	$38(a0)
000170A4 6600                       		bne.s	loc_15E7C
000170A6 4A68 003A                  		tst.w	$3A(a0)
000170AA 6700                       		beq.s	loc_15E6A
000170AC 5368 003A                  		subq.w	#1,$3A(a0)
000170B0 6000                       		bra.s	loc_15E8E
000170B2                            ; ===========================================================================
000170B2                            
000170B2                            loc_15E6A:
000170B2 5368 0036                  		subq.w	#1,$36(a0)
000170B6 6A00                       		bpl.s	loc_15E8E
000170B8 317C 003C 0036             		move.w	#$3C,$36(a0)
000170BE 117C 0001 0038             		move.b	#1,$38(a0)
000170C4                            
000170C4                            loc_15E7C:
000170C4 5068 003A                  		addq.w	#8,$3A(a0)
000170C8 3028 003A                  		move.w	$3A(a0),d0
000170CC B068 003C                  		cmp.w	$3C(a0),d0
000170D0 6600                       		bne.s	loc_15E8E
000170D2 4228 0038                  		clr.b	$38(a0)
000170D6                            
000170D6                            loc_15E8E:
000170D6 3028 003A                  		move.w	$3A(a0),d0
000170DA 0828 0000 0022             		btst	#0,$22(a0)
000170E0 6700                       		beq.s	loc_15EA0
000170E2 4440                       		neg.w	d0
000170E4 0640 0038                  		addi.w	#$38,d0
000170E8                            
000170E8                            loc_15EA0:
000170E8 3228 0030                  		move.w	$30(a0),d1
000170EC D240                       		add.w	d0,d1
000170EE 3141 000C                  		move.w	d1,$C(a0)
000170F2 4E75                       		rts	
000170F4                            ; ===========================================================================
000170F4                            
000170F4                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000170F4 4A28 0038                  		tst.b	$38(a0)
000170F8 6600                       		bne.s	loc_15ED0
000170FA 4A68 003A                  		tst.w	$3A(a0)
000170FE 6700                       		beq.s	loc_15EBE
00017100 5168 003A                  		subq.w	#8,$3A(a0)
00017104 6000                       		bra.s	loc_15EF0
00017106                            ; ===========================================================================
00017106                            
00017106                            loc_15EBE:
00017106 5368 0036                  		subq.w	#1,$36(a0)
0001710A 6A00                       		bpl.s	loc_15EF0
0001710C 317C 003C 0036             		move.w	#$3C,$36(a0)
00017112 117C 0001 0038             		move.b	#1,$38(a0)
00017118                            
00017118                            loc_15ED0:
00017118 3028 003A                  		move.w	$3A(a0),d0
0001711C B068 003C                  		cmp.w	$3C(a0),d0
00017120 6700                       		beq.s	loc_15EE0
00017122 5068 003A                  		addq.w	#8,$3A(a0)
00017126 6000                       		bra.s	loc_15EF0
00017128                            ; ===========================================================================
00017128                            
00017128                            loc_15EE0:
00017128 5368 0036                  		subq.w	#1,$36(a0)
0001712C 6A00                       		bpl.s	loc_15EF0
0001712E 317C 003C 0036             		move.w	#$3C,$36(a0)
00017134 4228 0038                  		clr.b	$38(a0)
00017138                            
00017138                            loc_15EF0:
00017138 3028 003A                  		move.w	$3A(a0),d0
0001713C 0828 0000 0022             		btst	#0,$22(a0)
00017142 6700                       		beq.s	loc_15F02
00017144 4440                       		neg.w	d0
00017146 0640 0038                  		addi.w	#$38,d0
0001714A                            
0001714A                            loc_15F02:
0001714A 3228 0030                  		move.w	$30(a0),d1
0001714E D240                       		add.w	d0,d1
00017150 3141 000C                  		move.w	d1,$C(a0)
00017154 4E75                       		rts	
00017156                            ; ===========================================================================
00017156                            
00017156                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00017156 4A28 0038                  		tst.b	$38(a0)
0001715A 6600                       		bne.s	loc_15F3E
0001715C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017160 7000                       		moveq	#0,d0
00017162 1028 003E                  		move.b	$3E(a0),d0
00017166 0832 0000 0000             		btst	#0,(a2,d0.w)
0001716C 6700                       		beq.s	locret_15F5C
0001716E 117C 0001 0038             		move.b	#1,$38(a0)
00017174 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017178 7000                       		moveq	#0,d0
0001717A 1028 0023                  		move.b	$23(a0),d0
0001717E 6700                       		beq.s	loc_15F3E
00017180 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017186                            
00017186                            loc_15F3E:
00017186 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0001718E 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00017196 3168 0008 0034             		move.w	8(a0),$34(a0)
0001719C 0C68 0980 0008             		cmpi.w	#$980,8(a0)
000171A2 6700                       		beq.s	loc_15F5E
000171A4                            
000171A4                            locret_15F5C:
000171A4 4E75                       		rts	
000171A6                            ; ===========================================================================
000171A6                            
000171A6                            loc_15F5E:
000171A6 4228 0028                  		clr.b	$28(a0)
000171AA 4228 0038                  		clr.b	$38(a0)
000171AE 4E75                       		rts	
000171B0                            ; ===========================================================================
000171B0                            ; ---------------------------------------------------------------------------
000171B0                            ; Sprite mappings - stomper and	platforms (SBZ)
000171B0                            ; ---------------------------------------------------------------------------
000171B0                            Map_obj6B:
000171B0                            	include "_maps\obj6B.asm"
000171B0                            ; ---------------------------------------------------------------------------
000171B0                            ; Sprite mappings - stomper and	platforms (SBZ)
000171B0                            ; ---------------------------------------------------------------------------
000171B0 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
000171B4 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
000171B8 0000                       		dc.w byte_15FB0-Map_obj6B
000171BA 04                         byte_15F72:	dc.b 4
000171BB F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
000171C0 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
000171C5 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000171CA F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
000171CF 08                         byte_15F87:	dc.b 8
000171D0 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
000171D5 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000171DA E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000171DF E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
000171E4 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
000171E9 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
000171EE 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
000171F3 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
000171F8 0E                         byte_15FB0:	dc.b $E
000171F9 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000171FE C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00017203 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00017208 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001720D C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00017212 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00017217 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
0001721C C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00017221 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00017226 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
0001722B E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00017230 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00017235 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
0001723A 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00017240 00                         		even
00017240 00                         		even
00017240                            
00017240                            ; ===========================================================================
00017240                            ; ---------------------------------------------------------------------------
00017240                            ; Object 6C - vanishing	platforms (SBZ)
00017240                            ; ---------------------------------------------------------------------------
00017240                            
00017240                            Obj6C:					; XREF: Obj_Index
00017240 7000                       		moveq	#0,d0
00017242 1028 0024                  		move.b	$24(a0),d0
00017246 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
0001724A 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
0001724E                            ; ===========================================================================
0001724E 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00017250 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00017252 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00017254 0000                       		dc.w loc_16068-Obj6C_Index
00017256                            ; ===========================================================================
00017256                            
00017256                            Obj6C_Main:				; XREF: Obj6C_Index
00017256 5C28 0024                  		addq.b	#6,$24(a0)
0001725A 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00017262 317C 44C3 0002             		move.w	#$44C3,2(a0)
00017268 0028 0004 0001             		ori.b	#4,1(a0)
0001726E 117C 0010 0019             		move.b	#$10,$19(a0)
00017274 117C 0004 0018             		move.b	#4,$18(a0)
0001727A 7000                       		moveq	#0,d0
0001727C 1028 0028                  		move.b	$28(a0),d0	; get object type
00017280 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017284 5240                       		addq.w	#1,d0		; add 1
00017286 EF48                       		lsl.w	#7,d0		; multiply by $80
00017288 3200                       		move.w	d0,d1
0001728A 5340                       		subq.w	#1,d0
0001728C 3140 0030                  		move.w	d0,$30(a0)
00017290 3140 0032                  		move.w	d0,$32(a0)
00017294 7000                       		moveq	#0,d0
00017296 1028 0028                  		move.b	$28(a0),d0	; get object type
0001729A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
0001729E 0641 0080                  		addi.w	#$80,d1
000172A2 C0C1                       		mulu.w	d1,d0
000172A4 E088                       		lsr.l	#8,d0
000172A6 3140 0036                  		move.w	d0,$36(a0)
000172AA 5341                       		subq.w	#1,d1
000172AC 3141 0038                  		move.w	d1,$38(a0)
000172B0                            
000172B0                            loc_16068:				; XREF: Obj6C_Index
000172B0 3038 FE04                  		move.w	($FFFFFE04).w,d0
000172B4 9068 0036                  		sub.w	$36(a0),d0
000172B8 C068 0038                  		and.w	$38(a0),d0
000172BC 6600                       		bne.s	Obj6C_Animate
000172BE 5928 0024                  		subq.b	#4,$24(a0)
000172C2 6000                       		bra.s	Obj6C_Vanish
000172C4                            ; ===========================================================================
000172C4                            
000172C4                            Obj6C_Animate:
000172C4 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000172CA 4EB9 0000 B79E             		jsr	AnimateSprite
000172D0 6000 9526                  		bra.w	MarkObjGone
000172D4                            ; ===========================================================================
000172D4                            
000172D4                            Obj6C_Vanish:				; XREF: Obj6C_Index
000172D4 5368 0030                  		subq.w	#1,$30(a0)
000172D8 6A00                       		bpl.s	loc_160AA
000172DA 317C 007F 0030             		move.w	#127,$30(a0)
000172E0 4A28 001C                  		tst.b	$1C(a0)
000172E4 6700                       		beq.s	loc_160A4
000172E6 3168 0032 0030             		move.w	$32(a0),$30(a0)
000172EC                            
000172EC                            loc_160A4:
000172EC 0868 0000 001C             		bchg	#0,$1C(a0)
000172F2                            
000172F2                            loc_160AA:
000172F2 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000172F8 4EB9 0000 B79E             		jsr	AnimateSprite
000172FE 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00017304 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00017306 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0001730C 6600                       		bne.s	loc_160D6
0001730E 7200                       		moveq	#0,d1
00017310 1228 0019                  		move.b	$19(a0),d1
00017314 4EB9 0000 835A             		jsr	(PlatformObject).l
0001731A 6000 94DC                  		bra.w	MarkObjGone
0001731E                            ; ===========================================================================
0001731E                            
0001731E                            loc_160D6:
0001731E 7200                       		moveq	#0,d1
00017320 1228 0019                  		move.b	$19(a0),d1
00017324 4EB9 0000 84CE             		jsr	(ExitPlatform).l
0001732A 3428 0008                  		move.w	8(a0),d2
0001732E 4EB9 0000 8A38             		jsr	(MvSonicOnPtfm2).l
00017334 6000 94C2                  		bra.w	MarkObjGone
00017338                            ; ===========================================================================
00017338                            
00017338                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00017338 0828 0003 0022             		btst	#3,$22(a0)
0001733E 6700                       		beq.s	Obj6C_Display
00017340 43F8 D000                  		lea	($FFFFD000).w,a1
00017344 08A9 0003 0022             		bclr	#3,$22(a1)
0001734A 08A8 0003 0022             		bclr	#3,$22(a0)
00017350 117C 0002 0024             		move.b	#2,$24(a0)
00017356 4228 0025                  		clr.b	$25(a0)
0001735A                            
0001735A                            Obj6C_Display:
0001735A 6000 949C                  		bra.w	MarkObjGone
0001735E                            ; ===========================================================================
0001735E                            Ani_obj6C:
0001735E                            	include "_anim\obj6C.asm"
0001735E                            ; ---------------------------------------------------------------------------
0001735E                            ; Animation script - vanishing platforms (SBZ)
0001735E                            ; ---------------------------------------------------------------------------
0001735E 0000                       		dc.w byte_1611A-Ani_obj6C
00017360 0000                       		dc.w byte_16122-Ani_obj6C
00017362 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
0001736A 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00017372                            		even
00017372                            		even
00017372                            
00017372                            ; ---------------------------------------------------------------------------
00017372                            ; Sprite mappings - vanishing platforms	(SBZ)
00017372                            ; ---------------------------------------------------------------------------
00017372                            Map_obj6C:
00017372                            	include "_maps\obj6C.asm"
00017372                            ; ---------------------------------------------------------------------------
00017372                            ; Sprite mappings - vanishing platforms	(SBZ)
00017372                            ; ---------------------------------------------------------------------------
00017372 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00017376 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
0001737A 01                         byte_16132:	dc.b 1
0001737B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00017380 01                         byte_16138:	dc.b 1
00017381 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00017386 01                         byte_1613E:	dc.b 1
00017387 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
0001738C 00                         byte_16144:	dc.b 0
0001738E 00                         		even
0001738E 00                         		even
0001738E                            
0001738E                            ; ===========================================================================
0001738E                            ; ---------------------------------------------------------------------------
0001738E                            ; Object 6E - electrocution orbs (SBZ)
0001738E                            ; ---------------------------------------------------------------------------
0001738E                            
0001738E                            Obj6E:					; XREF: Obj_Index
0001738E 7000                       		moveq	#0,d0
00017390 1028 0024                  		move.b	$24(a0),d0
00017394 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00017398 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
0001739C                            ; ===========================================================================
0001739C 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
0001739E 0000                       		dc.w Obj6E_Shock-Obj6E_Index
000173A0                            ; ===========================================================================
000173A0                            
000173A0                            Obj6E_Main:				; XREF: Obj6E_Index
000173A0 5428 0024                  		addq.b	#2,$24(a0)
000173A4 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
000173AC 317C 047E 0002             		move.w	#$47E,2(a0)
000173B2 0028 0004 0001             		ori.b	#4,1(a0)
000173B8 117C 0028 0019             		move.b	#$28,$19(a0)
000173BE 7000                       		moveq	#0,d0
000173C0 1028 0028                  		move.b	$28(a0),d0	; read object type
000173C4 E948                       		lsl.w	#4,d0		; multiply by $10
000173C6 5340                       		subq.w	#1,d0
000173C8 3140 0034                  		move.w	d0,$34(a0)
000173CC                            
000173CC                            Obj6E_Shock:				; XREF: Obj6E_Index
000173CC 3038 FE04                  		move.w	($FFFFFE04).w,d0
000173D0 C068 0034                  		and.w	$34(a0),d0
000173D4 6600                       		bne.s	Obj6E_Animate
000173D6 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000173DC 4A28 0001                  		tst.b	1(a0)
000173E0 6A00                       		bpl.s	Obj6E_Animate
000173E2 303C 00B1                  		move.w	#$B1,d0
000173E6 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play electricity sound
000173EC                            
000173EC                            Obj6E_Animate:
000173EC 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
000173F2 4EB9 0000 B79E             		jsr	AnimateSprite
000173F8 117C 0000 0020             		move.b	#0,$20(a0)
000173FE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00017404 6600                       		bne.s	Obj6E_Display	; if not, branch
00017406 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
0001740C                            
0001740C                            Obj6E_Display:
0001740C 6000 93EA                  		bra.w	MarkObjGone
00017410                            ; ===========================================================================
00017410                            Ani_obj6E:
00017410                            	include "_anim\obj6E.asm"
00017410                            ; ---------------------------------------------------------------------------
00017410                            ; Animation script - electrocution orbs (SBZ)
00017410                            ; ---------------------------------------------------------------------------
00017410 0000                       		dc.w byte_161CC-Ani_obj6E
00017412 0000                       		dc.w byte_161D0-Ani_obj6E
00017414 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00017418 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00017428                            		even
00017428                            		even
00017428                            
00017428                            ; ---------------------------------------------------------------------------
00017428                            ; Sprite mappings - electrocution orbs (SBZ)
00017428                            ; ---------------------------------------------------------------------------
00017428                            Map_obj6E:
00017428                            	include "_maps\obj6E.asm"
00017428                            Map_26ed:
00017428 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
0001742A 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
0001742C 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
0001742E 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00017430 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00017432 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00017434 01                         Map_26ed_C: 	dc.b $1
00017435 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
0001743A 02                         Map_26ed_12: 	dc.b $2
0001743B F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00017440 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00017445 06                         Map_26ed_1D: 	dc.b $6
00017446 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
0001744B 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00017450 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00017455 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
0001745A F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
0001745F F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00017464 08                         Map_26ed_3C: 	dc.b $8
00017465 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
0001746A 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
0001746F F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00017474 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00017479 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
0001747E F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00017483 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00017488 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
0001748D 06                         Map_26ed_65: 	dc.b $6
0001748E F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00017493 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00017498 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
0001749D F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
000174A2 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
000174A7 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
000174AC 04                         Map_26ed_84: 	dc.b $4
000174AD F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000174B2 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000174B7 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
000174BC F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
000174C2 00                         	even
000174C2 00                         	even
000174C2                            
000174C2                            ; ===========================================================================
000174C2                            ; ---------------------------------------------------------------------------
000174C2                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000174C2                            ; ---------------------------------------------------------------------------
000174C2                            
000174C2                            Obj6F:					; XREF: Obj_Index
000174C2 7000                       		moveq	#0,d0
000174C4 1028 0024                  		move.b	$24(a0),d0
000174C8 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
000174CC 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
000174D0 3028 0030                  		move.w	$30(a0),d0
000174D4 0240 FF80                  		andi.w	#$FF80,d0
000174D8 3238 F700                  		move.w	($FFFFF700).w,d1
000174DC 0441 0080                  		subi.w	#$80,d1
000174E0 0241 FF80                  		andi.w	#$FF80,d1
000174E4 9041                       		sub.w	d1,d0
000174E6 0C40 0280                  		cmpi.w	#$280,d0
000174EA 6200                       		bhi.s	loc_1629A
000174EC                            
000174EC                            Obj6F_Display:
000174EC 4EF9 0000 E750             		jmp	DisplaySprite
000174F2                            ; ===========================================================================
000174F2                            
000174F2                            loc_1629A:
000174F2 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
000174F8 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
000174FA 0C40 FF80                  		cmpi.w	#-$80,d0
000174FE 64EC                       		bcc.s	Obj6F_Display
00017500                            
00017500                            Obj6F_Act1or2:
00017500 1028 002F                  		move.b	$2F(a0),d0
00017504 6A00                       		bpl.s	Obj6F_Delete
00017506 0240 007F                  		andi.w	#$7F,d0
0001750A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001750E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00017514                            
00017514                            Obj6F_Delete:
00017514 4EF9 0000 E78C             		jmp	DeleteObject
0001751A                            ; ===========================================================================
0001751A 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
0001751C 0000                       		dc.w loc_163D8-Obj6F_Index
0001751E                            ; ===========================================================================
0001751E                            
0001751E                            Obj6F_Main:				; XREF: Obj6F_Index
0001751E 1028 0028                  		move.b	$28(a0),d0
00017522 6B00 0000                  		bmi.w	loc_16380
00017526 5428 0024                  		addq.b	#2,$24(a0)
0001752A 217C 0001 6B82 0004        		move.l	#Map_obj69a,4(a0)
00017532 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017538 117C 0010 0019             		move.b	#$10,$19(a0)
0001753E 0028 0004 0001             		ori.b	#4,1(a0)
00017544 117C 0004 0018             		move.b	#4,$18(a0)
0001754A 7000                       		moveq	#0,d0
0001754C 1028 0028                  		move.b	$28(a0),d0
00017550 3200                       		move.w	d0,d1
00017552 E648                       		lsr.w	#3,d0
00017554 0240 001E                  		andi.w	#$1E,d0
00017558 45FA 0000                  		lea	off_164A6(pc),a2
0001755C D4F2 0000                  		adda.w	(a2,d0.w),a2
00017560 315A 0038                  		move.w	(a2)+,$38(a0)
00017564 315A 0030                  		move.w	(a2)+,$30(a0)
00017568 214A 003C                  		move.l	a2,$3C(a0)
0001756C 0241 000F                  		andi.w	#$F,d1
00017570 E549                       		lsl.w	#2,d1
00017572 1141 0038                  		move.b	d1,$38(a0)
00017576 117C 0004 003A             		move.b	#4,$3A(a0)
0001757C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00017580 6700                       		beq.s	loc_16356
00017582 117C 0001 003B             		move.b	#1,$3B(a0)
00017588 4428 003A                  		neg.b	$3A(a0)
0001758C 7200                       		moveq	#0,d1
0001758E 1228 0038                  		move.b	$38(a0),d1
00017592 D228 003A                  		add.b	$3A(a0),d1
00017596 B228 0039                  		cmp.b	$39(a0),d1
0001759A 6500                       		bcs.s	loc_16352
0001759C 1001                       		move.b	d1,d0
0001759E 7200                       		moveq	#0,d1
000175A0 4A00                       		tst.b	d0
000175A2 6A00                       		bpl.s	loc_16352
000175A4 1228 0039                  		move.b	$39(a0),d1
000175A8 5901                       		subq.b	#4,d1
000175AA                            
000175AA                            loc_16352:
000175AA 1141 0038                  		move.b	d1,$38(a0)
000175AE                            
000175AE                            loc_16356:
000175AE 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000175B4 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000175BA 4A41                       		tst.w	d1
000175BC 6600                       		bne.s	loc_1636C
000175BE 117C 0001 001C             		move.b	#1,$1C(a0)
000175C4                            
000175C4                            loc_1636C:
000175C4 0C41 0008                  		cmpi.w	#8,d1
000175C8 6600                       		bne.s	loc_16378
000175CA 117C 0000 001C             		move.b	#0,$1C(a0)
000175D0                            
000175D0                            loc_16378:
000175D0 6100 C0C0                  		bsr.w	Obj63_ChangeDir
000175D4 6000 0000                  		bra.w	loc_163D8
000175D8                            ; ===========================================================================
000175D8                            
000175D8                            loc_16380:				; XREF: Obj6F_Main
000175D8 1140 002F                  		move.b	d0,$2F(a0)
000175DC 0240 007F                  		andi.w	#$7F,d0
000175E0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000175E4 08F2 0000 0000             		bset	#0,(a2,d0.w)
000175EA 6700                       		beq.s	loc_1639A
000175EC 4EF9 0000 E78C             		jmp	DeleteObject
000175F2                            ; ===========================================================================
000175F2                            
000175F2                            loc_1639A:
000175F2 D040                       		add.w	d0,d0
000175F4 0240 001E                  		andi.w	#$1E,d0
000175F8 45F9 0000 0000             		lea	(ObjPos_SBZ1pf_Index).l,a2
000175FE D4F2 0000                  		adda.w	(a2,d0.w),a2
00017602 321A                       		move.w	(a2)+,d1
00017604 2248                       		movea.l	a0,a1
00017606 6000                       		bra.s	Obj6F_LoadPform
00017608                            ; ===========================================================================
00017608                            
00017608                            Obj6F_Loop:
00017608 4EB9 0000 EBD6             		jsr	SingleObjLoad
0001760E 6600                       		bne.s	loc_163D0
00017610                            
00017610                            Obj6F_LoadPform:			; XREF: loc_1639A
00017610 12BC 006F                  		move.b	#$6F,0(a1)
00017614 335A 0008                  		move.w	(a2)+,8(a1)
00017618 335A 000C                  		move.w	(a2)+,$C(a1)
0001761C 301A                       		move.w	(a2)+,d0
0001761E 1340 0028                  		move.b	d0,$28(a1)
00017622                            
00017622                            loc_163D0:
00017622 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00017626                            
00017626 588F                       		addq.l	#4,sp
00017628 4E75                       		rts	
0001762A                            ; ===========================================================================
0001762A                            
0001762A                            loc_163D8:				; XREF: Obj6F_Index
0001762A 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00017630 4EB9 0000 B79E             		jsr	AnimateSprite
00017636 4A28 001A                  		tst.b	$1A(a0)
0001763A 6600                       		bne.s	loc_16404
0001763C 3F28 0008                  		move.w	8(a0),-(sp)
00017640 6100 0000                  		bsr.w	loc_16424
00017644 323C 001B                  		move.w	#$1B,d1
00017648 343C 0007                  		move.w	#7,d2
0001764C 3602                       		move.w	d2,d3
0001764E 5243                       		addq.w	#1,d3
00017650 381F                       		move.w	(sp)+,d4
00017652 6000 94CC                  		bra.w	SolidObject
00017656                            ; ===========================================================================
00017656                            
00017656                            loc_16404:
00017656 0828 0003 0022             		btst	#3,$22(a0)
0001765C 6700                       		beq.s	loc_16420
0001765E 43F8 D000                  		lea	($FFFFD000).w,a1
00017662 08A9 0003 0022             		bclr	#3,$22(a1)
00017668 08A8 0003 0022             		bclr	#3,$22(a0)
0001766E 4228 0025                  		clr.b	$25(a0)
00017672                            
00017672                            loc_16420:
00017672 6000 0002                  		bra.w	*+4
00017676                            
00017676                            loc_16424:
00017676 3028 0008                  		move.w	8(a0),d0
0001767A B068 0034                  		cmp.w	$34(a0),d0
0001767E 6600                       		bne.s	loc_16484
00017680 3028 000C                  		move.w	$C(a0),d0
00017684 B068 0036                  		cmp.w	$36(a0),d0
00017688 6600                       		bne.s	loc_16484
0001768A 7200                       		moveq	#0,d1
0001768C 1228 0038                  		move.b	$38(a0),d1
00017690 D228 003A                  		add.b	$3A(a0),d1
00017694 B228 0039                  		cmp.b	$39(a0),d1
00017698 6500                       		bcs.s	loc_16456
0001769A 1001                       		move.b	d1,d0
0001769C 7200                       		moveq	#0,d1
0001769E 4A00                       		tst.b	d0
000176A0 6A00                       		bpl.s	loc_16456
000176A2 1228 0039                  		move.b	$39(a0),d1
000176A6 5901                       		subq.b	#4,d1
000176A8                            
000176A8                            loc_16456:
000176A8 1141 0038                  		move.b	d1,$38(a0)
000176AC 2268 003C                  		movea.l	$3C(a0),a1
000176B0 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000176B6 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000176BC 4A41                       		tst.w	d1
000176BE 6600                       		bne.s	loc_16474
000176C0 117C 0001 001C             		move.b	#1,$1C(a0)
000176C6                            
000176C6                            loc_16474:
000176C6 0C41 0008                  		cmpi.w	#8,d1
000176CA 6600                       		bne.s	loc_16480
000176CC 117C 0000 001C             		move.b	#0,$1C(a0)
000176D2                            
000176D2                            loc_16480:
000176D2 6100 BFBE                  		bsr.w	Obj63_ChangeDir
000176D6                            
000176D6                            loc_16484:
000176D6 4EF9 0000 E72A             		jmp	SpeedToPos
000176DC                            ; ===========================================================================
000176DC                            Ani_obj6F:
000176DC                            	include "_anim\obj6F.asm"
000176DC                            ; ---------------------------------------------------------------------------
000176DC                            ; Animation script - platform on conveyor belt (SBZ)
000176DC                            ; ---------------------------------------------------------------------------
000176DC 0000                       		dc.w byte_1648E-Ani_obj6F
000176DE 0000                       		dc.w byte_164A2-Ani_obj6F
000176E0 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000176ED 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
000176F4 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
000176F8 00                         		even
000176F8 00                         		even
000176F8                            
000176F8 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000176FE 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00017704 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00017718 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001772C 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00017740 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00017754 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00017768 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001777C                            ; ===========================================================================
0001777C                            ; ---------------------------------------------------------------------------
0001777C                            ; Object 70 - large girder block (SBZ)
0001777C                            ; ---------------------------------------------------------------------------
0001777C                            
0001777C                            Obj70:					; XREF: Obj_Index
0001777C 7000                       		moveq	#0,d0
0001777E 1028 0024                  		move.b	$24(a0),d0
00017782 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00017786 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
0001778A                            ; ===========================================================================
0001778A 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
0001778C 0000                       		dc.w Obj70_Action-Obj70_Index
0001778E                            ; ===========================================================================
0001778E                            
0001778E                            Obj70_Main:				; XREF: Obj70_Index
0001778E 5428 0024                  		addq.b	#2,$24(a0)
00017792 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
0001779A 317C 42F0 0002             		move.w	#$42F0,2(a0)
000177A0 0028 0004 0001             		ori.b	#4,1(a0)
000177A6 117C 0004 0018             		move.b	#4,$18(a0)
000177AC 117C 0060 0019             		move.b	#$60,$19(a0)
000177B2 117C 0018 0016             		move.b	#$18,$16(a0)
000177B8 3168 0008 0032             		move.w	8(a0),$32(a0)
000177BE 3168 000C 0030             		move.w	$C(a0),$30(a0)
000177C4 6100 0000                  		bsr.w	Obj70_Move2
000177C8                            
000177C8                            Obj70_Action:				; XREF: Obj70_Index
000177C8 3F28 0008                  		move.w	8(a0),-(sp)
000177CC 4A68 003A                  		tst.w	$3A(a0)
000177D0 6700                       		beq.s	Obj70_Move
000177D2 5368 003A                  		subq.w	#1,$3A(a0)
000177D6 6600                       		bne.s	Obj70_Solid
000177D8                            
000177D8                            Obj70_Move:
000177D8 4EB9 0000 E72A             		jsr	SpeedToPos
000177DE 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000177E2 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000177E4 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000177E8                            
000177E8                            Obj70_Solid:
000177E8 381F                       		move.w	(sp)+,d4
000177EA 4A28 0001                  		tst.b	1(a0)
000177EE 6A00                       		bpl.s	Obj70_ChkDel
000177F0 7200                       		moveq	#0,d1
000177F2 1228 0019                  		move.b	$19(a0),d1
000177F6 0641 000B                  		addi.w	#$B,d1
000177FA 7400                       		moveq	#0,d2
000177FC 1428 0016                  		move.b	$16(a0),d2
00017800 3602                       		move.w	d2,d3
00017802 5243                       		addq.w	#1,d3
00017804 6100 931A                  		bsr.w	SolidObject
00017808                            
00017808                            Obj70_ChkDel:
00017808 3028 0032                  		move.w	$32(a0),d0
0001780C 0240 FF80                  		andi.w	#$FF80,d0
00017810 3238 F700                  		move.w	($FFFFF700).w,d1
00017814 0441 0080                  		subi.w	#$80,d1
00017818 0241 FF80                  		andi.w	#$FF80,d1
0001781C 9041                       		sub.w	d1,d0
0001781E 0C40 0280                  		cmpi.w	#$280,d0
00017822 6200                       		bhi.s	Obj70_Delete
00017824 4EF9 0000 E750             		jmp	DisplaySprite
0001782A                            ; ===========================================================================
0001782A                            
0001782A                            Obj70_Delete:
0001782A 4EF9 0000 E78C             		jmp	DeleteObject
00017830                            ; ===========================================================================
00017830                            
00017830                            Obj70_Move2:				; XREF: Obj70_Main
00017830 1028 0038                  		move.b	$38(a0),d0
00017834 0240 0018                  		andi.w	#$18,d0
00017838 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
0001783E 43F1 0000                  		lea	(a1,d0.w),a1
00017842 3159 0010                  		move.w	(a1)+,$10(a0)
00017846 3159 0012                  		move.w	(a1)+,$12(a0)
0001784A 3159 0034                  		move.w	(a1)+,$34(a0)
0001784E 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00017852 317C 0007 003A             		move.w	#7,$3A(a0)
00017858 4E75                       		rts	
0001785A                            ; ===========================================================================
0001785A 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00017862 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
0001786A FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00017872 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
0001787A                            ; ---------------------------------------------------------------------------
0001787A                            ; Sprite mappings - large girder block (SBZ)
0001787A                            ; ---------------------------------------------------------------------------
0001787A                            Map_obj70:
0001787A                            	include "_maps\obj70.asm"
0001787A                            ; ---------------------------------------------------------------------------
0001787A                            ; Sprite mappings - large girder block (SBZ)
0001787A                            ; ---------------------------------------------------------------------------
0001787A 0000                       		dc.w byte_1662A-Map_obj70
0001787C 0C                         byte_1662A:	dc.b $C
0001787D E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00017882 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00017887 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001788C 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00017891 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00017896 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001789B E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
000178A0 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
000178A5 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
000178AA 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000178AF E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000178B4 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000178BA 00                         		even
000178BA 00                         		even
000178BA                            
000178BA                            ; ===========================================================================
000178BA                            ; ---------------------------------------------------------------------------
000178BA                            ; Object 72 - teleporter (SBZ)
000178BA                            ; ---------------------------------------------------------------------------
000178BA                            
000178BA                            Obj72:					; XREF: Obj_Index
000178BA 7000                       		moveq	#0,d0
000178BC 1028 0024                  		move.b	$24(a0),d0
000178C0 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000178C4 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000178C8 3028 0008                  		move.w	8(a0),d0
000178CC 0240 FF80                  		andi.w	#$FF80,d0
000178D0 3238 F700                  		move.w	($FFFFF700).w,d1
000178D4 0441 0080                  		subi.w	#$80,d1
000178D8 0241 FF80                  		andi.w	#$FF80,d1
000178DC 9041                       		sub.w	d1,d0
000178DE 0C40 0280                  		cmpi.w	#$280,d0
000178E2 6200                       		bhi.s	Obj72_Delete
000178E4 4E75                       		rts	
000178E6                            ; ===========================================================================
000178E6                            
000178E6                            Obj72_Delete:
000178E6 4EF9 0000 E78C             		jmp	DeleteObject
000178EC                            ; ===========================================================================
000178EC 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000178EE 0000                       		dc.w loc_166C8-Obj72_Index
000178F0 0000                       		dc.w loc_1675E-Obj72_Index
000178F2 0000                       		dc.w loc_16798-Obj72_Index
000178F4                            ; ===========================================================================
000178F4                            
000178F4                            Obj72_Main:				; XREF: Obj72_Index
000178F4 5428 0024                  		addq.b	#2,$24(a0)
000178F8 1028 0028                  		move.b	$28(a0),d0
000178FC D040                       		add.w	d0,d0
000178FE 0240 001E                  		andi.w	#$1E,d0
00017902 45FA 0000                  		lea	Obj72_Data(pc),a2
00017906 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001790A 315A 003A                  		move.w	(a2)+,$3A(a0)
0001790E 214A 003C                  		move.l	a2,$3C(a0)
00017912 315A 0036                  		move.w	(a2)+,$36(a0)
00017916 315A 0038                  		move.w	(a2)+,$38(a0)
0001791A                            
0001791A                            loc_166C8:				; XREF: Obj72_Index
0001791A 43F8 D000                  		lea	($FFFFD000).w,a1
0001791E 3029 0008                  		move.w	8(a1),d0
00017922 9068 0008                  		sub.w	8(a0),d0
00017926 0828 0000 0022             		btst	#0,$22(a0)
0001792C 6700                       		beq.s	loc_166E0
0001792E 0640 000F                  		addi.w	#$F,d0
00017932                            
00017932                            loc_166E0:
00017932 0C40 0010                  		cmpi.w	#$10,d0
00017936 6400                       		bcc.s	locret_1675C
00017938 3229 000C                  		move.w	$C(a1),d1
0001793C 9268 000C                  		sub.w	$C(a0),d1
00017940 0641 0020                  		addi.w	#$20,d1
00017944 0C41 0040                  		cmpi.w	#$40,d1
00017948 6400                       		bcc.s	locret_1675C
0001794A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001794E 6600                       		bne.s	locret_1675C
00017950 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00017956 6600                       		bne.s	loc_1670E
00017958 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001795E 6500                       		bcs.s	locret_1675C
00017960                            
00017960                            loc_1670E:
00017960 5428 0024                  		addq.b	#2,$24(a0)
00017964 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001796A 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00017970 337C 0800 0014             		move.w	#$800,$14(a1)
00017976 337C 0000 0010             		move.w	#0,$10(a1)
0001797C 337C 0000 0012             		move.w	#0,$12(a1)
00017982 08A8 0005 0022             		bclr	#5,$22(a0)
00017988 08A9 0005 0022             		bclr	#5,$22(a1)
0001798E 08E9 0001 0022             		bset	#1,$22(a1)
00017994 3368 0008 0008             		move.w	8(a0),8(a1)
0001799A 3368 000C 000C             		move.w	$C(a0),$C(a1)
000179A0 4228 0032                  		clr.b	$32(a0)
000179A4 303C 00BE                  		move.w	#$BE,d0
000179A8 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000179AE                            
000179AE                            locret_1675C:
000179AE 4E75                       		rts	
000179B0                            ; ===========================================================================
000179B0                            
000179B0                            loc_1675E:				; XREF: Obj72_Index
000179B0 43F8 D000                  		lea	($FFFFD000).w,a1
000179B4 1028 0032                  		move.b	$32(a0),d0
000179B8 5428 0032                  		addq.b	#2,$32(a0)
000179BC 4EB9 0000 3424             		jsr	(CalcSine).l
000179C2 EA40                       		asr.w	#5,d0
000179C4 3428 000C                  		move.w	$C(a0),d2
000179C8 9440                       		sub.w	d0,d2
000179CA 3342 000C                  		move.w	d2,$C(a1)
000179CE 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000179D4 6600                       		bne.s	locret_16796
000179D6 6100 0000                  		bsr.w	sub_1681C
000179DA 5428 0024                  		addq.b	#2,$24(a0)
000179DE 303C 00BC                  		move.w	#$BC,d0
000179E2 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play teleport sound
000179E8                            
000179E8                            locret_16796:
000179E8 4E75                       		rts	
000179EA                            ; ===========================================================================
000179EA                            
000179EA                            loc_16798:				; XREF: Obj72_Index
000179EA 588F                       		addq.l	#4,sp
000179EC 43F8 D000                  		lea	($FFFFD000).w,a1
000179F0 5328 002E                  		subq.b	#1,$2E(a0)
000179F4 6A00                       		bpl.s	loc_167DA
000179F6 3368 0036 0008             		move.w	$36(a0),8(a1)
000179FC 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017A02 7200                       		moveq	#0,d1
00017A04 1228 003A                  		move.b	$3A(a0),d1
00017A08 5801                       		addq.b	#4,d1
00017A0A B228 003B                  		cmp.b	$3B(a0),d1
00017A0E 6500                       		bcs.s	loc_167C2
00017A10 7200                       		moveq	#0,d1
00017A12 6000                       		bra.s	loc_16800
00017A14                            ; ===========================================================================
00017A14                            
00017A14                            loc_167C2:
00017A14 1141 003A                  		move.b	d1,$3A(a0)
00017A18 2468 003C                  		movea.l	$3C(a0),a2
00017A1C 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00017A22 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00017A28 6000 0000                  		bra.w	sub_1681C
00017A2C                            ; ===========================================================================
00017A2C                            
00017A2C                            loc_167DA:
00017A2C 2429 0008                  		move.l	8(a1),d2
00017A30 2629 000C                  		move.l	$C(a1),d3
00017A34 3029 0010                  		move.w	$10(a1),d0
00017A38 48C0                       		ext.l	d0
00017A3A E180                       		asl.l	#8,d0
00017A3C D480                       		add.l	d0,d2
00017A3E 3029 0012                  		move.w	$12(a1),d0
00017A42 48C0                       		ext.l	d0
00017A44 E180                       		asl.l	#8,d0
00017A46 D680                       		add.l	d0,d3
00017A48 2342 0008                  		move.l	d2,8(a1)
00017A4C 2343 000C                  		move.l	d3,$C(a1)
00017A50 4E75                       		rts	
00017A52                            ; ===========================================================================
00017A52                            
00017A52                            loc_16800:
00017A52 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017A58 4228 0024                  		clr.b	$24(a0)
00017A5C 4238 F7C8                  		clr.b	($FFFFF7C8).w
00017A60 337C 0000 0010             		move.w	#0,$10(a1)
00017A66 337C 0200 0012             		move.w	#$200,$12(a1)
00017A6C 4E75                       		rts	
00017A6E                            
00017A6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A6E                            
00017A6E                            
00017A6E                            sub_1681C:
00017A6E 7000                       		moveq	#0,d0
00017A70 343C 1000                  		move.w	#$1000,d2
00017A74 3028 0036                  		move.w	$36(a0),d0
00017A78 9069 0008                  		sub.w	8(a1),d0
00017A7C 6C00                       		bge.s	loc_16830
00017A7E 4440                       		neg.w	d0
00017A80 4442                       		neg.w	d2
00017A82                            
00017A82                            loc_16830:
00017A82 7200                       		moveq	#0,d1
00017A84 363C 1000                  		move.w	#$1000,d3
00017A88 3228 0038                  		move.w	$38(a0),d1
00017A8C 9269 000C                  		sub.w	$C(a1),d1
00017A90 6C00                       		bge.s	loc_16844
00017A92 4441                       		neg.w	d1
00017A94 4443                       		neg.w	d3
00017A96                            
00017A96                            loc_16844:
00017A96 B240                       		cmp.w	d0,d1
00017A98 6500                       		bcs.s	loc_1687A
00017A9A 7200                       		moveq	#0,d1
00017A9C 3228 0038                  		move.w	$38(a0),d1
00017AA0 9269 000C                  		sub.w	$C(a1),d1
00017AA4 4841                       		swap	d1
00017AA6 83C3                       		divs.w	d3,d1
00017AA8 7000                       		moveq	#0,d0
00017AAA 3028 0036                  		move.w	$36(a0),d0
00017AAE 9069 0008                  		sub.w	8(a1),d0
00017AB2 6700                       		beq.s	loc_16866
00017AB4 4840                       		swap	d0
00017AB6 81C1                       		divs.w	d1,d0
00017AB8                            
00017AB8                            loc_16866:
00017AB8 3340 0010                  		move.w	d0,$10(a1)
00017ABC 3343 0012                  		move.w	d3,$12(a1)
00017AC0 4A41                       		tst.w	d1
00017AC2 6A00                       		bpl.s	loc_16874
00017AC4 4441                       		neg.w	d1
00017AC6                            
00017AC6                            loc_16874:
00017AC6 3141 002E                  		move.w	d1,$2E(a0)
00017ACA 4E75                       		rts	
00017ACC                            ; ===========================================================================
00017ACC                            
00017ACC                            loc_1687A:
00017ACC 7000                       		moveq	#0,d0
00017ACE 3028 0036                  		move.w	$36(a0),d0
00017AD2 9069 0008                  		sub.w	8(a1),d0
00017AD6 4840                       		swap	d0
00017AD8 81C2                       		divs.w	d2,d0
00017ADA 7200                       		moveq	#0,d1
00017ADC 3228 0038                  		move.w	$38(a0),d1
00017AE0 9269 000C                  		sub.w	$C(a1),d1
00017AE4 6700                       		beq.s	loc_16898
00017AE6 4841                       		swap	d1
00017AE8 83C0                       		divs.w	d0,d1
00017AEA                            
00017AEA                            loc_16898:
00017AEA 3341 0012                  		move.w	d1,$12(a1)
00017AEE 3342 0010                  		move.w	d2,$10(a1)
00017AF2 4A40                       		tst.w	d0
00017AF4 6A00                       		bpl.s	loc_168A6
00017AF6 4440                       		neg.w	d0
00017AF8                            
00017AF8                            loc_168A6:
00017AF8 3140 002E                  		move.w	d0,$2E(a0)
00017AFC 4E75                       		rts	
00017AFE                            ; End of function sub_1681C
00017AFE                            
00017AFE                            ; ===========================================================================
00017AFE 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00017B04 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00017B0A 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00017B0E 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00017B14 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00017B1A 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00017B20 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00017B26 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00017B2C 0884 0298 0894             		dc.w $884, $298, $894
00017B32 0270 0894 0190             		dc.w $270, $894, $190
00017B38 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00017B3E 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00017B44 1184 0498 1158             		dc.w $1184, $498, $1158
00017B4A 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00017B50 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017B56 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017B5C 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017B62 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017B68 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017B6E FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017B74 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017B7A FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00017B80 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017B86                            ; ===========================================================================
00017B86                            ; ---------------------------------------------------------------------------
00017B86                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017B86                            ; ---------------------------------------------------------------------------
00017B86                            
00017B86                            Obj78:					; XREF: Obj_Index
00017B86 7000                       		moveq	#0,d0
00017B88 1028 0024                  		move.b	$24(a0),d0
00017B8C 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00017B90 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00017B94                            ; ===========================================================================
00017B94 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00017B96 0000                       		dc.w Obj78_Action-Obj78_Index
00017B98 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017B9A 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017B9C 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017B9E 0000                       		dc.w Obj78_Delete-Obj78_Index
00017BA0 0000                       		dc.w loc_16CC0-Obj78_Index
00017BA2                            ; ===========================================================================
00017BA2                            
00017BA2                            locret_16950:
00017BA2 4E75                       		rts	
00017BA4                            ; ===========================================================================
00017BA4                            
00017BA4                            Obj78_Main:				; XREF: Obj78_Index
00017BA4 117C 0007 0016             		move.b	#7,$16(a0)
00017BAA 117C 0008 0017             		move.b	#8,$17(a0)
00017BB0 4EB9 0000 E6B8             		jsr	ObjectFall
00017BB6 4EBA E4AA                  		jsr	ObjHitFloor
00017BBA 4A41                       		tst.w	d1
00017BBC 6AE4                       		bpl.s	locret_16950
00017BBE D368 000C                  		add.w	d1,$C(a0)
00017BC2 4268 0012                  		clr.w	$12(a0)
00017BC6 5428 0024                  		addq.b	#2,$24(a0)
00017BCA 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00017BD2 317C 22B0 0002             		move.w	#$22B0,2(a0)
00017BD8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00017BDE 6700                       		beq.s	loc_16996
00017BE0 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00017BE6                            
00017BE6                            loc_16996:
00017BE6 0228 0003 0001             		andi.b	#3,1(a0)
00017BEC 0028 0004 0001             		ori.b	#4,1(a0)
00017BF2 1168 0001 0022             		move.b	1(a0),$22(a0)
00017BF8 117C 0004 0018             		move.b	#4,$18(a0)
00017BFE 117C 0008 0019             		move.b	#8,$19(a0)
00017C04 117C 000B 0020             		move.b	#$B,$20(a0)
00017C0A 3428 0008                  		move.w	8(a0),d2
00017C0E 7A0C                       		moveq	#$C,d5
00017C10 0828 0000 0022             		btst	#0,$22(a0)
00017C16 6700                       		beq.s	loc_169CA
00017C18 4445                       		neg.w	d5
00017C1A                            
00017C1A                            loc_169CA:
00017C1A 1C3C 0004                  		move.b	#4,d6
00017C1E 7600                       		moveq	#0,d3
00017C20 7804                       		moveq	#4,d4
00017C22 2448                       		movea.l	a0,a2
00017C24 7202                       		moveq	#2,d1
00017C26                            
00017C26                            Obj78_LoadBody:
00017C26 4EB9 0000 EBEC             		jsr	SingleObjLoad2
00017C2C 6600                       		bne.s	Obj78_QuitLoad
00017C2E 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017C32 1346 0024                  		move.b	d6,$24(a1)
00017C36 5406                       		addq.b	#2,d6
00017C38 2368 0004 0004             		move.l	4(a0),4(a1)
00017C3E 3368 0002 0002             		move.w	2(a0),2(a1)
00017C44 137C 0005 0018             		move.b	#5,$18(a1)
00017C4A 137C 0008 0019             		move.b	#8,$19(a1)
00017C50 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017C56 D445                       		add.w	d5,d2
00017C58 3342 0008                  		move.w	d2,8(a1)
00017C5C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017C62 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017C68 1368 0022 0001             		move.b	$22(a0),1(a1)
00017C6E 137C 0008 001A             		move.b	#8,$1A(a1)
00017C74 234A 003C                  		move.l	a2,$3C(a1)
00017C78 1344 003C                  		move.b	d4,$3C(a1)
00017C7C 5804                       		addq.b	#4,d4
00017C7E 2449                       		movea.l	a1,a2
00017C80                            
00017C80                            Obj78_QuitLoad:
00017C80 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017C84                            
00017C84 117C 0007 002A             		move.b	#7,$2A(a0)
00017C8A 4228 003C                  		clr.b	$3C(a0)
00017C8E                            
00017C8E                            Obj78_Action:				; XREF: Obj78_Index
00017C8E 4A28 0022                  		tst.b	$22(a0)
00017C92 6B00 0000                  		bmi.w	loc_16C96
00017C96 7000                       		moveq	#0,d0
00017C98 1028 0025                  		move.b	$25(a0),d0
00017C9C 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00017CA0 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017CA4 1228 002B                  		move.b	$2B(a0),d1
00017CA8 6A00                       		bpl.s	Obj78_Display
00017CAA 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017CB0 1028 0026                  		move.b	$26(a0),d0
00017CB4 0240 007F                  		andi.w	#$7F,d0
00017CB8 5828 0026                  		addq.b	#4,$26(a0)
00017CBC 1031 0000                  		move.b	(a1,d0.w),d0
00017CC0 6A00                       		bpl.s	Obj78_AniHead
00017CC2 08A8 0007 002B             		bclr	#7,$2B(a0)
00017CC8 6000                       		bra.s	Obj78_Display
00017CCA                            ; ===========================================================================
00017CCA                            
00017CCA                            Obj78_AniHead:
00017CCA 0201 0010                  		andi.b	#$10,d1
00017CCE D001                       		add.b	d1,d0
00017CD0 1140 001A                  		move.b	d0,$1A(a0)
00017CD4                            
00017CD4                            Obj78_Display:
00017CD4 3028 0008                  		move.w	8(a0),d0
00017CD8 0240 FF80                  		andi.w	#$FF80,d0
00017CDC 3238 F700                  		move.w	($FFFFF700).w,d1
00017CE0 0441 0080                  		subi.w	#$80,d1
00017CE4 0241 FF80                  		andi.w	#$FF80,d1
00017CE8 9041                       		sub.w	d1,d0
00017CEA 0C40 0280                  		cmpi.w	#$280,d0
00017CEE 6200 0000                  		bhi.w	Obj78_ChkGone
00017CF2 4EF9 0000 E750             		jmp	DisplaySprite
00017CF8                            ; ===========================================================================
00017CF8                            
00017CF8                            Obj78_ChkGone:
00017CF8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017CFC 7000                       		moveq	#0,d0
00017CFE 1028 0023                  		move.b	$23(a0),d0
00017D02 6700                       		beq.s	loc_16ABC
00017D04 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017D0A                            
00017D0A                            loc_16ABC:
00017D0A 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00017D10 4E75                       		rts	
00017D12                            ; ===========================================================================
00017D12                            
00017D12                            Obj78_Delete:				; XREF: Obj78_Index
00017D12 4EF9 0000 E78C             		jmp	DeleteObject
00017D18                            ; ===========================================================================
00017D18 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017D1A 0000                       		dc.w loc_16B02-Obj78_Index2
00017D1C                            ; ===========================================================================
00017D1C                            
00017D1C                            Obj78_Move:				; XREF: Obj78_Index2
00017D1C 5328 002A                  		subq.b	#1,$2A(a0)
00017D20 6B00                       		bmi.s	Obj78_Move2
00017D22 4E75                       		rts	
00017D24                            ; ===========================================================================
00017D24                            
00017D24                            Obj78_Move2:
00017D24 5428 0025                  		addq.b	#2,$25(a0)
00017D28 117C 0010 002A             		move.b	#$10,$2A(a0)
00017D2E 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017D34 317C 0040 0014             		move.w	#$40,$14(a0)
00017D3A 0868 0004 002B             		bchg	#4,$2B(a0)
00017D40 6600                       		bne.s	loc_16AFC
00017D42 4268 0010                  		clr.w	$10(a0)
00017D46 4468 0014                  		neg.w	$14(a0)
00017D4A                            
00017D4A                            loc_16AFC:
00017D4A 08E8 0007 002B             		bset	#7,$2B(a0)
00017D50                            
00017D50                            loc_16B02:				; XREF: Obj78_Index2
00017D50 5328 002A                  		subq.b	#1,$2A(a0)
00017D54 6B00                       		bmi.s	loc_16B5E
00017D56 2F28 0008                  		move.l	8(a0),-(sp)
00017D5A 2428 0008                  		move.l	8(a0),d2
00017D5E 3028 0010                  		move.w	$10(a0),d0
00017D62 0828 0000 0022             		btst	#0,$22(a0)
00017D68 6700                       		beq.s	loc_16B1E
00017D6A 4440                       		neg.w	d0
00017D6C                            
00017D6C                            loc_16B1E:
00017D6C 48C0                       		ext.l	d0
00017D6E E180                       		asl.l	#8,d0
00017D70 D480                       		add.l	d0,d2
00017D72 2142 0008                  		move.l	d2,8(a0)
00017D76 4EBA E2EA                  		jsr	ObjHitFloor
00017D7A 241F                       		move.l	(sp)+,d2
00017D7C 0C41 FFF8                  		cmpi.w	#-8,d1
00017D80 6D00                       		blt.s	loc_16B70
00017D82 0C41 000C                  		cmpi.w	#$C,d1
00017D86 6C00                       		bge.s	loc_16B70
00017D88 D368 000C                  		add.w	d1,$C(a0)
00017D8C 4842                       		swap	d2
00017D8E B468 0008                  		cmp.w	8(a0),d2
00017D92 6700                       		beq.s	locret_16B5C
00017D94 7000                       		moveq	#0,d0
00017D96 1028 003C                  		move.b	$3C(a0),d0
00017D9A 5228 003C                  		addq.b	#1,$3C(a0)
00017D9E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017DA4 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017DA8                            
00017DA8                            locret_16B5C:
00017DA8 4E75                       		rts	
00017DAA                            ; ===========================================================================
00017DAA                            
00017DAA                            loc_16B5E:
00017DAA 5528 0025                  		subq.b	#2,$25(a0)
00017DAE 117C 0007 002A             		move.b	#7,$2A(a0)
00017DB4 317C 0000 0010             		move.w	#0,$10(a0)
00017DBA 4E75                       		rts	
00017DBC                            ; ===========================================================================
00017DBC                            
00017DBC                            loc_16B70:
00017DBC 2142 0008                  		move.l	d2,8(a0)
00017DC0 0868 0000 0022             		bchg	#0,$22(a0)
00017DC6 1168 0022 0001             		move.b	$22(a0),1(a0)
00017DCC 7000                       		moveq	#0,d0
00017DCE 1028 003C                  		move.b	$3C(a0),d0
00017DD2 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017DD8 5228 003C                  		addq.b	#1,$3C(a0)
00017DDC 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017DE2 4E75                       		rts	
00017DE4                            ; ===========================================================================
00017DE4                            
00017DE4                            Obj78_BodySeg2:				; XREF: Obj78_Index
00017DE4 2268 003C                  		movea.l	$3C(a0),a1
00017DE8 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017DEE 6A00                       		bpl.s	Obj78_BodySeg1
00017DF0 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017DF6 1028 0026                  		move.b	$26(a0),d0
00017DFA 0240 007F                  		andi.w	#$7F,d0
00017DFE 5828 0026                  		addq.b	#4,$26(a0)
00017E02 4A31 0004                  		tst.b	4(a1,d0.w)
00017E06 6A00                       		bpl.s	Obj78_AniBody
00017E08 5828 0026                  		addq.b	#4,$26(a0)
00017E0C                            
00017E0C                            Obj78_AniBody:
00017E0C 1031 0000                  		move.b	(a1,d0.w),d0
00017E10 5000                       		addq.b	#8,d0
00017E12 1140 001A                  		move.b	d0,$1A(a0)
00017E16                            
00017E16                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017E16 2268 003C                  		movea.l	$3C(a0),a1
00017E1A 4A28 0022                  		tst.b	$22(a0)
00017E1E 6B00 0000                  		bmi.w	loc_16C90
00017E22 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017E28 1169 0025 0025             		move.b	$25(a1),$25(a0)
00017E2E 6700 0000                  		beq.w	loc_16C64
00017E32 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017E38 3029 0010                  		move.w	$10(a1),d0
00017E3C D069 0014                  		add.w	$14(a1),d0
00017E40 3140 0010                  		move.w	d0,$10(a0)
00017E44 2428 0008                  		move.l	8(a0),d2
00017E48 2602                       		move.l	d2,d3
00017E4A 3028 0010                  		move.w	$10(a0),d0
00017E4E 0828 0000 0022             		btst	#0,$22(a0)
00017E54 6700                       		beq.s	loc_16C0C
00017E56 4440                       		neg.w	d0
00017E58                            
00017E58                            loc_16C0C:
00017E58 48C0                       		ext.l	d0
00017E5A E180                       		asl.l	#8,d0
00017E5C D480                       		add.l	d0,d2
00017E5E 2142 0008                  		move.l	d2,8(a0)
00017E62 4843                       		swap	d3
00017E64 B668 0008                  		cmp.w	8(a0),d3
00017E68 6700                       		beq.s	loc_16C64
00017E6A 7000                       		moveq	#0,d0
00017E6C 1028 003C                  		move.b	$3C(a0),d0
00017E70 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017E74 0C01 0080                  		cmpi.b	#-$80,d1
00017E78 6600                       		bne.s	loc_16C50
00017E7A 4843                       		swap	d3
00017E7C 2143 0008                  		move.l	d3,8(a0)
00017E80 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017E84 0868 0000 0022             		bchg	#0,$22(a0)
00017E8A 1168 0022 0001             		move.b	$22(a0),1(a0)
00017E90 5228 003C                  		addq.b	#1,$3C(a0)
00017E94 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017E9A 6000                       		bra.s	loc_16C64
00017E9C                            ; ===========================================================================
00017E9C                            
00017E9C                            loc_16C50:
00017E9C 4881                       		ext.w	d1
00017E9E D368 000C                  		add.w	d1,$C(a0)
00017EA2 5228 003C                  		addq.b	#1,$3C(a0)
00017EA6 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017EAC 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017EB0                            
00017EB0                            loc_16C64:
00017EB0 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017EB6 6700                       		beq.s	loc_16C90
00017EB8 0C11 0027                  		cmpi.b	#$27,0(a1)
00017EBC 6700                       		beq.s	loc_16C7C
00017EBE 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00017EC4 6600                       		bne.s	loc_16C82
00017EC6                            
00017EC6                            loc_16C7C:
00017EC6 117C 000A 0024             		move.b	#$A,$24(a0)
00017ECC                            
00017ECC                            loc_16C82:
00017ECC 4EF9 0000 E750             		jmp	DisplaySprite
00017ED2                            
00017ED2                            ; ===========================================================================
00017ED2 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017EDA                            ; ===========================================================================
00017EDA                            
00017EDA                            loc_16C90:
00017EDA 08E9 0007 0022             		bset	#7,$22(a1)
00017EE0                            
00017EE0                            loc_16C96:
00017EE0 7000                       		moveq	#0,d0
00017EE2 1028 0024                  		move.b	$24(a0),d0
00017EE6 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017EEA 0828 0000 0022             		btst	#0,$22(a0)
00017EF0 6700                       		beq.s	loc_16CAA
00017EF2 4440                       		neg.w	d0
00017EF4                            
00017EF4                            loc_16CAA:
00017EF4 3140 0010                  		move.w	d0,$10(a0)
00017EF8 317C FC00 0012             		move.w	#-$400,$12(a0)
00017EFE 117C 000C 0024             		move.b	#$C,$24(a0)
00017F04 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017F0A                            
00017F0A                            loc_16CC0:				; XREF: Obj78_Index
00017F0A 4EB9 0000 E6B8             		jsr	ObjectFall
00017F10 4A68 0012                  		tst.w	$12(a0)
00017F14 6B00                       		bmi.s	loc_16CE0
00017F16 4EBA E14A                  		jsr	ObjHitFloor
00017F1A 4A41                       		tst.w	d1
00017F1C 6A00                       		bpl.s	loc_16CE0
00017F1E D368 000C                  		add.w	d1,$C(a0)
00017F22 317C FC00 0012             		move.w	#-$400,$12(a0)
00017F28                            
00017F28                            loc_16CE0:
00017F28 4A28 0001                  		tst.b	1(a0)
00017F2C 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00017F30 4EF9 0000 E750             		jmp	DisplaySprite
00017F36                            ; ===========================================================================
00017F36                            Ani_obj78:
00017F36                            	include "_anim\obj78.asm"
00017F36                            ; ---------------------------------------------------------------------------
00017F36                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017F36                            ; ---------------------------------------------------------------------------
00017F36 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017F46 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017F56 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017F66 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017F76 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017F86 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017F96 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017FA6 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017FB6                            	even
00017FB6                            	even
00017FB6                            
00017FB6                            ; ---------------------------------------------------------------------------
00017FB6                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017FB6                            ; ---------------------------------------------------------------------------
00017FB6                            Map_obj78:
00017FB6                            	include "_maps\obj78.asm"
00017FB6                            ; ---------------------------------------------------------------------------
00017FB6                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017FB6                            ; ---------------------------------------------------------------------------
00017FB6 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017FBA 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017FBE 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017FC2 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017FC6 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017FCA 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017FCE 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017FD2 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017FD6 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017FDA 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017FDE 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017FE2 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00017FE6 01                         byte_16D9E:	dc.b 1
00017FE7 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017FEC 01                         byte_16DA4:	dc.b 1
00017FED F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017FF2 01                         byte_16DAA:	dc.b 1
00017FF3 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00017FF8 01                         byte_16DB0:	dc.b 1
00017FF9 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017FFE 01                         byte_16DB6:	dc.b 1
00017FFF EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018004 01                         byte_16DBC:	dc.b 1
00018005 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001800A 01                         byte_16DC2:	dc.b 1
0001800B EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018010 01                         byte_16DC8:	dc.b 1
00018011 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00018016 01                         byte_16DCE:	dc.b 1
00018017 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001801C 01                         byte_16DD4:	dc.b 1
0001801D F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00018022 01                         byte_16DDA:	dc.b 1
00018023 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00018028 01                         byte_16DE0:	dc.b 1
00018029 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001802E 01                         byte_16DE6:	dc.b 1
0001802F F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00018034 01                         byte_16DEC:	dc.b 1
00018035 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001803A 01                         byte_16DF2:	dc.b 1
0001803B F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00018040 01                         byte_16DF8:	dc.b 1
00018041 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00018046 01                         byte_16DFE:	dc.b 1
00018047 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001804C 01                         byte_16E04:	dc.b 1
0001804D F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00018052 01                         byte_16E0A:	dc.b 1
00018053 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00018058 01                         byte_16E10:	dc.b 1
00018059 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001805E 01                         byte_16E16:	dc.b 1
0001805F EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00018064 01                         byte_16E1C:	dc.b 1
00018065 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001806A 01                         byte_16E22:	dc.b 1
0001806B EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00018070 01                         byte_16E28:	dc.b 1
00018071 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00018076                            		even
00018076                            		even
00018076                            
00018076                            ; ===========================================================================
00018076                            ; ---------------------------------------------------------------------------
00018076                            ; Object 79 - lamppost
00018076                            ; ---------------------------------------------------------------------------
00018076                            
00018076                            Obj79:					; XREF: Obj_Index
00018076 7000                       		moveq	#0,d0
00018078 1028 0024                  		move.b	$24(a0),d0
0001807C 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00018080 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00018084 4EFA 8772                  		jmp	MarkObjGone
00018088                            ; ===========================================================================
00018088 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
0001808A 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
0001808C 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001808E 0000                       		dc.w Obj79_Twirl-Obj79_Index
00018090                            ; ===========================================================================
00018090                            
00018090                            Obj79_Main:				; XREF: Obj79_Index
00018090 5428 0024                  		addq.b	#2,$24(a0)
00018094 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
0001809C 317C 07A0 0002             		move.w	#$7A0,2(a0)
000180A2 117C 0004 0001             		move.b	#4,1(a0)
000180A8 117C 0008 0019             		move.b	#8,$19(a0)
000180AE 117C 0005 0018             		move.b	#5,$18(a0)
000180B4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000180B8 7000                       		moveq	#0,d0
000180BA 1028 0023                  		move.b	$23(a0),d0
000180BE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000180C4 0832 0000 0002             		btst	#0,2(a2,d0.w)
000180CA 6600                       		bne.s	Obj79_RedLamp
000180CC 1238 FE30                  		move.b	($FFFFFE30).w,d1
000180D0 0201 007F                  		andi.b	#$7F,d1
000180D4 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
000180D8 0202 007F                  		andi.b	#$7F,d2
000180DC B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
000180DE 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
000180E0                            
000180E0                            Obj79_RedLamp:
000180E0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000180E6 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
000180EC 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
000180F2 4E75                       		rts	
000180F4                            ; ===========================================================================
000180F4                            
000180F4                            Obj79_BlueLamp:				; XREF: Obj79_Index
000180F4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000180F8 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000180FC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018100 6B00 0000                  		bmi.w	locret_16F90
00018104 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018108 0201 007F                  		andi.b	#$7F,d1
0001810C 1428 0028                  		move.b	$28(a0),d2
00018110 0202 007F                  		andi.b	#$7F,d2
00018114 B202                       		cmp.b	d2,d1
00018116 6500                       		bcs.s	Obj79_HitLamp
00018118 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001811C 7000                       		moveq	#0,d0
0001811E 1028 0023                  		move.b	$23(a0),d0
00018122 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018128 117C 0004 0024             		move.b	#4,$24(a0)
0001812E 117C 0003 001A             		move.b	#3,$1A(a0)
00018134 6000 0000                  		bra.w	locret_16F90
00018138                            ; ===========================================================================
00018138                            
00018138                            Obj79_HitLamp:
00018138 3038 D008                  		move.w	($FFFFD008).w,d0
0001813C 9068 0008                  		sub.w	8(a0),d0
00018140 5040                       		addq.w	#8,d0
00018142 0C40 0010                  		cmpi.w	#$10,d0
00018146 6400 0000                  		bcc.w	locret_16F90
0001814A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001814E 9068 000C                  		sub.w	$C(a0),d0
00018152 0640 0040                  		addi.w	#$40,d0
00018156 0C40 0068                  		cmpi.w	#$68,d0
0001815A 6400                       		bcc.s	locret_16F90
0001815C 303C 00A1                  		move.w	#$A1,d0
00018160 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play lamppost sound
00018166 5428 0024                  		addq.b	#2,$24(a0)
0001816A 4EB9 0000 EBD6             		jsr	SingleObjLoad
00018170 6600                       		bne.s	loc_16F76
00018172 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00018176 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
0001817C 3368 0008 0030             		move.w	8(a0),$30(a1)
00018182 3368 000C 0032             		move.w	$C(a0),$32(a1)
00018188 0469 0018 0032             		subi.w	#$18,$32(a1)
0001818E 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00018196 337C 07A0 0002             		move.w	#$7A0,2(a1)
0001819C 137C 0004 0001             		move.b	#4,1(a1)
000181A2 137C 0008 0019             		move.b	#8,$19(a1)
000181A8 137C 0004 0018             		move.b	#4,$18(a1)
000181AE 137C 0002 001A             		move.b	#2,$1A(a1)
000181B4 337C 0020 0036             		move.w	#$20,$36(a1)
000181BA                            
000181BA                            loc_16F76:
000181BA 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
000181C0 6100 0000                  		bsr.w	Obj79_StoreInfo
000181C4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000181C8 7000                       		moveq	#0,d0
000181CA 1028 0023                  		move.b	$23(a0),d0
000181CE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000181D4                            
000181D4                            locret_16F90:
000181D4 4E75                       		rts	
000181D6                            ; ===========================================================================
000181D6                            
000181D6                            Obj79_AfterHit:				; XREF: Obj79_Index
000181D6 4E75                       		rts	
000181D8                            ; ===========================================================================
000181D8                            
000181D8                            Obj79_Twirl:				; XREF: Obj79_Index
000181D8 5368 0036                  		subq.w	#1,$36(a0)
000181DC 6A00                       		bpl.s	loc_16FA0
000181DE 117C 0004 0024             		move.b	#4,$24(a0)
000181E4                            
000181E4                            loc_16FA0:
000181E4 1028 0026                  		move.b	$26(a0),d0
000181E8 0428 0010 0026             		subi.b	#$10,$26(a0)
000181EE 0400 0040                  		subi.b	#$40,d0
000181F2 4EB9 0000 3424             		jsr	(CalcSine).l
000181F8 C3FC 0C00                  		muls.w	#$C00,d1
000181FC 4841                       		swap	d1
000181FE D268 0030                  		add.w	$30(a0),d1
00018202 3141 0008                  		move.w	d1,8(a0)
00018206 C1FC 0C00                  		muls.w	#$C00,d0
0001820A 4840                       		swap	d0
0001820C D068 0032                  		add.w	$32(a0),d0
00018210 3140 000C                  		move.w	d0,$C(a0)
00018214 4E75                       		rts	
00018216                            ; ===========================================================================
00018216                            ; ---------------------------------------------------------------------------
00018216                            ; Subroutine to	store information when you hit a lamppost
00018216                            ; ---------------------------------------------------------------------------
00018216                            
00018216                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00018216 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
0001821C 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00018222 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00018228 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
0001822E 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00018234 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
0001823A 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00018240 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00018246 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
0001824C 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00018252 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00018258 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
0001825E 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00018264 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
0001826A 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00018270 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00018276 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
0001827C 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00018282 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00018288 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
0001828E 4E75                       		rts	
00018290                            
00018290                            ; ---------------------------------------------------------------------------
00018290                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00018290                            ; ---------------------------------------------------------------------------
00018290                            
00018290                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018290                            
00018290                            
00018290                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00018290 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00018296 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
0001829C 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
000182A2 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
000182A8 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
000182AE 4278 FE20                  		clr.w	($FFFFFE20).w
000182B2 4238 FE1B                  		clr.b	($FFFFFE1B).w
000182B6 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
000182BC 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
000182C2 5338 FE24                  		subq.b	#1,($FFFFFE24).w
000182C6 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
000182CC 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000182D2 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000182D8 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000182DE 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000182E4 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000182EA 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000182F0 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000182F6 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
000182FC 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00018302 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00018308 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
0001830E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00018314 6600                       		bne.s	loc_170E4
00018316 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
0001831C 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018322 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00018328                            
00018328                            loc_170E4:
00018328 4A38 FE30                  		tst.b	($FFFFFE30).w
0001832C 6A00                       		bpl.s	locret_170F6
0001832E 3038 FE32                  		move.w	($FFFFFE32).w,d0
00018332 0440 00A0                  		subi.w	#$A0,d0
00018336 31C0 F728                  		move.w	d0,($FFFFF728).w
0001833A                            
0001833A                            locret_170F6:
0001833A 4E75                       		rts	
0001833C                            ; End of function Obj79_LoadInfo
0001833C                            
0001833C                            ; ===========================================================================
0001833C                            ; ---------------------------------------------------------------------------
0001833C                            ; Sprite mappings - lamppost
0001833C                            ; ---------------------------------------------------------------------------
0001833C                            Map_obj79:
0001833C                            	include "_maps\obj79.asm"
0001833C                            ; ---------------------------------------------------------------------------
0001833C                            ; Sprite mappings - lamppost
0001833C                            ; ---------------------------------------------------------------------------
0001833C 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00018340 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00018344 06                         byte_17100:	dc.b 6
00018345 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001834A E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001834F F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018354 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018359 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
0001835E D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00018363 04                         byte_1711F:	dc.b 4
00018364 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018369 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001836E F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018373 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018378 02                         byte_17134:	dc.b 2
00018379 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001837E F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00018383 06                         byte_1713F:	dc.b 6
00018384 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018389 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001838E F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018393 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018398 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
0001839D D401 0808 00               		dc.b $D4, 1, 8,	8, 0
000183A2                            		even
000183A2                            		even
000183A2                            
000183A2                            ; ===========================================================================
000183A2                            ; ---------------------------------------------------------------------------
000183A2                            ; Object 7D - hidden points at the end of a level
000183A2                            ; ---------------------------------------------------------------------------
000183A2                            
000183A2                            Obj7D:					; XREF: Obj_Index
000183A2 7000                       		moveq	#0,d0
000183A4 1028 0024                  		move.b	$24(a0),d0
000183A8 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
000183AC 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
000183B0                            ; ===========================================================================
000183B0 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
000183B2 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
000183B4                            ; ===========================================================================
000183B4                            
000183B4                            Obj7D_Main:				; XREF: Obj7D_Index
000183B4 7410                       		moveq	#$10,d2
000183B6 3602                       		move.w	d2,d3
000183B8 D643                       		add.w	d3,d3
000183BA 43F8 D000                  		lea	($FFFFD000).w,a1
000183BE 3029 0008                  		move.w	8(a1),d0
000183C2 9068 0008                  		sub.w	8(a0),d0
000183C6 D042                       		add.w	d2,d0
000183C8 B043                       		cmp.w	d3,d0
000183CA 6400                       		bcc.s	Obj7D_ChkDel
000183CC 3229 000C                  		move.w	$C(a1),d1
000183D0 9268 000C                  		sub.w	$C(a0),d1
000183D4 D242                       		add.w	d2,d1
000183D6 B243                       		cmp.w	d3,d1
000183D8 6400                       		bcc.s	Obj7D_ChkDel
000183DA 4A78 FE08                  		tst.w	($FFFFFE08).w
000183DE 6600                       		bne.s	Obj7D_ChkDel
000183E0 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000183E4 6600                       		bne.s	Obj7D_ChkDel
000183E6 5428 0024                  		addq.b	#2,$24(a0)
000183EA 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000183F2 317C 84B6 0002             		move.w	#$84B6,2(a0)
000183F8 0028 0004 0001             		ori.b	#4,1(a0)
000183FE 117C 0000 0018             		move.b	#0,$18(a0)
00018404 117C 0010 0019             		move.b	#$10,$19(a0)
0001840A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00018410 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00018416 303C 00C9                  		move.w	#$C9,d0
0001841A 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play bonus sound
00018420 7000                       		moveq	#0,d0
00018422 1028 0028                  		move.b	$28(a0),d0
00018426 D040                       		add.w	d0,d0
00018428 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
0001842C 4EB9 0000 0000             		jsr	AddPoints
00018432                            
00018432                            Obj7D_ChkDel:
00018432 3028 0008                  		move.w	8(a0),d0
00018436 0240 FF80                  		andi.w	#$FF80,d0
0001843A 3238 F700                  		move.w	($FFFFF700).w,d1
0001843E 0441 0080                  		subi.w	#$80,d1
00018442 0241 FF80                  		andi.w	#$FF80,d1
00018446 9041                       		sub.w	d1,d0
00018448 0C40 0280                  		cmpi.w	#$280,d0
0001844C 6200                       		bhi.s	Obj7D_Delete
0001844E 4E75                       		rts	
00018450                            ; ===========================================================================
00018450                            
00018450                            Obj7D_Delete:
00018450 4EF9 0000 E78C             		jmp	DeleteObject
00018456                            ; ===========================================================================
00018456 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00018458 03E8                       		dc.w 1000
0001845A 0064                       		dc.w 100
0001845C 0001                       		dc.w 1
0001845E                            ; ===========================================================================
0001845E                            
0001845E                            Obj7D_DelayDel:				; XREF: Obj7D_Index
0001845E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00018462 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00018464 3028 0008                  		move.w	8(a0),d0
00018468 0240 FF80                  		andi.w	#-$80,d0
0001846C 3238 F700                  		move.w	($FFFFF700).w,d1
00018470 0441 0080                  		subi.w	#$80,d1
00018474 0241 FF80                  		andi.w	#-$80,d1
00018478 9041                       		sub.w	d1,d0
0001847A 0C40 0280                  		cmpi.w	#$280,d0
0001847E 6200                       		bhi.s	Obj7D_Delete2
00018480 4EF9 0000 E750             		jmp	DisplaySprite
00018486                            ; ===========================================================================
00018486                            
00018486                            Obj7D_Delete2:
00018486 4EF9 0000 E78C             		jmp	DeleteObject
0001848C                            ; ===========================================================================
0001848C                            ; ---------------------------------------------------------------------------
0001848C                            ; Sprite mappings - hidden points at the end of	a level
0001848C                            ; ---------------------------------------------------------------------------
0001848C                            Map_obj7D:
0001848C                            	include "_maps\obj7D.asm"
0001848C                            ; ---------------------------------------------------------------------------
0001848C                            ; Sprite mappings - hidden points at the end of	a level
0001848C                            ; ---------------------------------------------------------------------------
0001848C 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00018490 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00018494 00                         byte_17250:	dc.b 0
00018495 01                         byte_17251:	dc.b 1
00018496 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001849B 01                         byte_17257:	dc.b 1
0001849C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
000184A1 01                         byte_1725D:	dc.b 1
000184A2 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
000184A8 00                         		even
000184A8 00                         		even
000184A8                            
000184A8                            ; ===========================================================================
000184A8                            ; ---------------------------------------------------------------------------
000184A8                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
000184A8                            ; ---------------------------------------------------------------------------
000184A8                            
000184A8                            Obj8A:					; XREF: Obj_Index
000184A8 7000                       		moveq	#0,d0
000184AA 1028 0024                  		move.b	$24(a0),d0
000184AE 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
000184B2 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
000184B6                            ; ===========================================================================
000184B6 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
000184B8 0000                       		dc.w Obj8A_Display-Obj8A_Index
000184BA                            ; ===========================================================================
000184BA                            
000184BA                            Obj8A_Main:				; XREF: Obj8A_Index
000184BA 5428 0024                  		addq.b	#2,$24(a0)
000184BE 317C 0120 0008             		move.w	#$120,8(a0)
000184C4 317C 00F0 000A             		move.w	#$F0,$A(a0)
000184CA 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
000184D2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000184D8 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
000184DC 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
000184E0 117C 0000 0001             		move.b	#0,1(a0)
000184E6 117C 0000 0018             		move.b	#0,$18(a0)
000184EC 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000184F2 6600                       		bne.s	Obj8A_Display	; if not, branch
000184F4 317C 00A6 0002             		move.w	#$A6,2(a0)
000184FA 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00018500 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00018504 6700                       		beq.s	Obj8A_Display	; if not, branch
00018506 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
0001850C 6600                       		bne.s	Obj8A_Display	; if not, branch
0001850E 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00018514 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
0001851A 4EF9 0000 E78C             		jmp	DeleteObject
00018520                            ; ===========================================================================
00018520                            
00018520                            Obj8A_Display:				; XREF: Obj8A_Index
00018520 4EF9 0000 E750             		jmp	DisplaySprite
00018526                            ; ===========================================================================
00018526                            ; ---------------------------------------------------------------------------
00018526                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018526                            ; ---------------------------------------------------------------------------
00018526                            Map_obj8A:
00018526                            	include "_maps\obj8A.asm"
00018526                            Map_ca8f:
00018526 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00018528 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
0001852A 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
0001852C 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
0001852E 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00018530 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00018532 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00018534 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00018536 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00018538 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
0001853A 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
0001853C 0000                       Map_ca8f_tm: 	dc.w Map_ca8f_tmss-Map_ca8f
0001853E 08                         Map_ca8f_16: 	dc.b $8
0001853F CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00018544 E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
00018549 F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
0001854E 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00018553 B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
00018558 B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
0001855D B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00018562 B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00018567 10                         Map_ca8f_3F: 	dc.b $10
00018568 D805 0000 80               	dc.b $D8, $5, $0, $0, $80
0001856D D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00018572 D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00018577 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
0001857C D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00018581 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00018586 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
0001858B D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00018590 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00018595 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
0001859A 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
0001859F 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
000185A4 0805 0016 08               	dc.b $8, $5, $0, $16, $8
000185A9 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
000185AE 0805 0004 30               	dc.b $8, $5, $0, $4, $30
000185B3 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
000185B8 0A                         Map_ca8f_90: 	dc.b $A
000185B9 D805 0012 80               	dc.b $D8, $5, $0, $12, $80
000185BE D805 0022 90               	dc.b $D8, $5, $0, $22, $90
000185C3 D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
000185C8 D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
000185CD D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
000185D2 D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
000185D7 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
000185DC 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
000185E1 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
000185E6 0805 0036 08               	dc.b $8, $5, $0, $36, $8
000185EB 18                         Map_ca8f_C3: 	dc.b $18
000185EC D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
000185F1 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
000185F6 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
000185FB D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00018600 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00018605 D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
0001860A D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
0001860F D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00018614 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00018619 D805 0042 20               	dc.b $D8, $5, $0, $42, $20
0001861E D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00018623 D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00018628 D801 0046 50               	dc.b $D8, $1, $0, $46, $50
0001862D D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00018632 D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00018637 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
0001863C 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00018641 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00018646 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
0001864B 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00018650 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00018655 0805 0004 10               	dc.b $8, $5, $0, $4, $10
0001865A 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
0001865F 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00018664 14                         Map_ca8f_13C: 	dc.b $14
00018665 D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
0001866A D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
0001866F D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00018674 D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00018679 D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
0001867E D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00018683 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00018688 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
0001868D 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00018692 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00018697 0005 0004 24               	dc.b $0, $5, $0, $4, $24
0001869C 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
000186A1 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
000186A6 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
000186AB 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
000186B0 2001 0046 10               	dc.b $20, $1, $0, $46, $10
000186B5 2005 0050 18               	dc.b $20, $5, $0, $50, $18
000186BA 2005 0022 30               	dc.b $20, $5, $0, $22, $30
000186BF 2001 0046 40               	dc.b $20, $1, $0, $46, $40
000186C4 2005 000E 48               	dc.b $20, $5, $0, $E, $48
000186C9 1A                         Map_ca8f_1A1: 	dc.b $1A
000186CA D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
000186CF D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
000186D4 D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
000186D9 D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
000186DE D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
000186E3 D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
000186E8 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
000186ED D805 0026 18               	dc.b $D8, $5, $0, $26, $18
000186F2 D805 0042 28               	dc.b $D8, $5, $0, $42, $28
000186F7 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
000186FC D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00018701 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00018706 0809 0008 88               	dc.b $8, $9, $0, $8, $88
0001870B 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00018710 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00018715 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
0001871A 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
0001871F 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00018724 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00018729 0805 0004 08               	dc.b $8, $5, $0, $4, $8
0001872E 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00018733 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00018738 0809 0008 38               	dc.b $8, $9, $0, $8, $38
0001873D 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00018742 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00018747 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
0001874C 17                         Map_ca8f_224: 	dc.b $17
0001874D D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00018752 D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00018757 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
0001875C D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00018761 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00018766 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
0001876B D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00018770 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00018775 D005 0000 28               	dc.b $D0, $5, $0, $0, $28
0001877A D005 0022 38               	dc.b $D0, $5, $0, $22, $38
0001877F D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00018784 D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00018789 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
0001878E 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00018793 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00018798 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
0001879D 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
000187A2 0005 0004 14               	dc.b $0, $5, $0, $4, $14
000187A7 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
000187AC 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
000187B1 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
000187B6 2005 0058 04               	dc.b $20, $5, $0, $58, $4
000187BB 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
000187C0 1F                         Map_ca8f_298: 	dc.b $1F
000187C1 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
000187C6 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
000187CB D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
000187D0 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
000187D5 D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
000187DA D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
000187DF D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
000187E4 D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
000187E9 D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
000187EE D805 0004 18               	dc.b $D8, $5, $0, $4, $18
000187F3 D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
000187F8 D805 0058 38               	dc.b $D8, $5, $0, $58, $38
000187FD D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00018802 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00018807 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
0001880C 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00018811 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00018816 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
0001881B 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00018820 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00018825 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
0001882A 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
0001882F 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00018834 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00018839 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
0001883E 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00018843 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00018848 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
0001884D 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00018852 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00018857 2005 0004 28               	dc.b $20, $5, $0, $4, $28
0001885C 0F                         Map_ca8f_334: 	dc.b $F
0001885D F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00018862 F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00018867 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
0001886C F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00018871 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00018876 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
0001887B F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00018880 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00018885 F805 0042 00               	dc.b $F8, $5, $0, $42, $0
0001888A F805 0048 18               	dc.b $F8, $5, $0, $48, $18
0001888F F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00018894 F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00018899 F805 000E 50               	dc.b $F8, $5, $0, $E, $50
0001889E F805 0000 60               	dc.b $F8, $5, $0, $0, $60
000188A3 F805 0004 70               	dc.b $F8, $5, $0, $4, $70
000188A8 08                         Map_ca8f_380: 	dc.b $8
000188A9 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
000188AE 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
000188B3 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
000188B8 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
000188BD 3005 0000 08               	dc.b $30, $5, $0, $0, $8
000188C2 3005 0004 18               	dc.b $30, $5, $0, $4, $18
000188C7 3001 0046 28               	dc.b $30, $1, $0, $46, $28
000188CC 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
000188D1 20                         Map_ca8f_3A9: 	dc.b $20
000188D2 ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
000188D7 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
000188DC ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
000188E1 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
000188E6 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
000188EB ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
000188F0 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
000188F5 FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
000188FA FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
000188FF FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00018904 FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
00018909 FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
0001890E FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00018913 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00018918 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
0001891D 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00018922 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00018927 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
0001892C 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00018931 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00018936 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
0001893B 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00018940 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00018945 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
0001894A 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
0001894F 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00018954 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
00018959 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
0001895E 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00018963 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00018968 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
0001896D 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00018972 1C                         Map_ca8f_tmss:	dc.b 28
00018A00 00                         	even
00018A00 00                         	even
00018A00                            
00018A00                            ; ===========================================================================
00018A00                            ; ---------------------------------------------------------------------------
00018A00                            ; Object 3D - matthew boss - modified by GK89
00018A00                            ; ---------------------------------------------------------------------------
00018A00                            
00018A00                            Obj3D:					; XREF: Obj_Index
00018A00 7000                       		moveq	#0,d0
00018A02 1028 0024                  		move.b	$24(a0),d0
00018A06 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00018A0A 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00018A0E                            ; ===========================================================================
00018A0E 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00018A10 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00018A12 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018A14 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00018A16                            
00018A16 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00018A18 0401                       		dc.b 4,	1
00018A1A 0607                       		dc.b 6,	7
00018A1C                            ; ===========================================================================
00018A1C                            
00018A1C                            Obj3D_Main:				; XREF: Obj3D_Index
00018A1C 45F9 0001 8A16             		lea	(Obj3D_ObjData).l,a2
00018A22 2248                       		movea.l	a0,a1
00018A24 7202                       		moveq	#2,d1
00018A26 6000                       		bra.s	Obj3D_LoadBoss
00018A28                            ; ===========================================================================
00018A28                            
00018A28                            Obj3D_Loop:
00018A28 4EB9 0000 EBEC             		jsr	SingleObjLoad2
00018A2E 6600                       		bne.s	loc_17772
00018A30                            
00018A30                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00018A30 135A 0024                  		move.b	(a2)+,$24(a1)
00018A34 12BC 003D                  		move.b	#$3D,0(a1)
00018A38 3368 0008 0008             		move.w	8(a0),8(a1)
00018A3E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018A44 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00018A4C 337C 0400 0002             		move.w	#$400,2(a1)
00018A52 137C 0004 0001             		move.b	#4,1(a1)
00018A58 137C 0020 0019             		move.b	#$20,$19(a1)
00018A5E 137C 0003 0018             		move.b	#3,$18(a1)
00018A64 135A 001C                  		move.b	(a2)+,$1C(a1)
00018A68 2348 0034                  		move.l	a0,$34(a1)
00018A6C 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00018A70                            
00018A70                            loc_17772:
00018A70 3168 0008 0030             		move.w	8(a0),$30(a0)
00018A76 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018A7C 117C 000F 0020             		move.b	#$F,$20(a0)
00018A82 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00018A88                            
00018A88                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00018A88 7000                       		moveq	#0,d0
00018A8A 1028 0025                  		move.b	$25(a0),d0
00018A8E 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00018A92 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00018A96 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018A9C 4EB9 0000 B79E             		jsr	AnimateSprite
00018AA2 1028 0022                  		move.b	$22(a0),d0
00018AA6 0200 0003                  		andi.b	#3,d0
00018AAA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018AB0 8128 0001                  		or.b	d0,1(a0)
00018AB4 4EF9 0000 E750             		jmp	DisplaySprite
00018ABA                            ; ===========================================================================
00018ABA 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00018ABC 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00018ABE 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00018AC0 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00018AC2 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00018AC4 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00018AC6 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00018AC8                            ; ===========================================================================
00018AC8                            
00018AC8                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00018AC8 4EB9 0000 0000             		jsr    Obj3D_ShipMove
00018ACE 6100 0000                  		bsr.w	BossMove
00018AD2 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00018AD8 6600                       		bne.s	loc_177E6
00018ADA 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018AE0 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018AE4                            
00018AE4                            loc_177E6:
00018AE4 1028 003F                  		move.b	$3F(a0),d0
00018AE8 4EB9 0000 3424             		jsr	(CalcSine).l
00018AEE EC40                       		asr.w	#6,d0
00018AF0 D068 0038                  		add.w	$38(a0),d0
00018AF4 3140 000C                  		move.w	d0,$C(a0)
00018AF8 3168 0030 0008             		move.w	$30(a0),8(a0)
00018AFE 5428 003F                  		addq.b	#2,$3F(a0)
00018B02 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018B08 6400                       		bcc.s	locret_1784A
00018B0A 4A28 0022                  		tst.b	$22(a0)
00018B0E 6B00                       		bmi.s	loc_1784C
00018B10 4A28 0020                  		tst.b	$20(a0)
00018B14 6600                       		bne.s	locret_1784A
00018B16 4A28 003E                  		tst.b	$3E(a0)
00018B1A 6600                       		bne.s	Obj3D_ShipFlash
00018B1C 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00018B22 303C 00AC                  		move.w	#$AC,d0
00018B26 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018B2C                            
00018B2C                            Obj3D_ShipFlash:
00018B2C 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018B30 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018B32 4A51                       		tst.w	(a1)
00018B34 6600                       		bne.s	loc_1783C
00018B36 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018B3A                            
00018B3A                            loc_1783C:
00018B3A 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018B3C 5328 003E                  		subq.b	#1,$3E(a0)
00018B40 6600                       		bne.s	locret_1784A
00018B42 117C 000F 0020             		move.b	#$F,$20(a0)
00018B48                            
00018B48                            locret_1784A:
00018B48 4E75                       		rts	
00018B4A                            ; ===========================================================================
00018B4A                            
00018B4A                            loc_1784C:				; XREF: loc_177E6
00018B4A 7064                       		moveq	#100,d0
00018B4C 6100 0000                  		bsr.w	AddPoints
00018B50 117C 0008 0025             		move.b	#8,$25(a0)
00018B56 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018B5C 4E75                       		rts	
00018B5E                            
00018B5E                            ; ---------------------------------------------------------------------------
00018B5E                            ; Defeated boss	subroutine
00018B5E                            ; ---------------------------------------------------------------------------
00018B5E                            
00018B5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018B5E                            
00018B5E                            
00018B5E                            BossDefeated:
00018B5E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00018B62 0200 0007                  		andi.b	#7,d0
00018B66 6600                       		bne.s	locret_178A2
00018B68 4EB9 0000 EBD6             		jsr	SingleObjLoad
00018B6E 6600                       		bne.s	locret_178A2
00018B70 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00018B74 3368 0008 0008             		move.w	8(a0),8(a1)
00018B7A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018B80 4EB9 0000 33FE             		jsr	(RandomNumber).l
00018B86 3200                       		move.w	d0,d1
00018B88 7200                       		moveq	#0,d1
00018B8A 1200                       		move.b	d0,d1
00018B8C E409                       		lsr.b	#2,d1
00018B8E 0441 0020                  		subi.w	#$20,d1
00018B92 D369 0008                  		add.w	d1,8(a1)
00018B96 E048                       		lsr.w	#8,d0
00018B98 E608                       		lsr.b	#3,d0
00018B9A D169 000C                  		add.w	d0,$C(a1)
00018B9E                            
00018B9E                            locret_178A2:
00018B9E 4E75                       		rts	
00018BA0                            ; End of function BossDefeated
00018BA0                            
00018BA0                            ; ---------------------------------------------------------------------------
00018BA0                            ; Subroutine to	move a boss
00018BA0                            ; ---------------------------------------------------------------------------
00018BA0                            
00018BA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018BA0                            
00018BA0                            
00018BA0                            BossMove:
00018BA0 2428 0030                  		move.l	$30(a0),d2
00018BA4 2628 0038                  		move.l	$38(a0),d3
00018BA8 3028 0010                  		move.w	$10(a0),d0
00018BAC 48C0                       		ext.l	d0
00018BAE E180                       		asl.l	#8,d0
00018BB0 D480                       		add.l	d0,d2
00018BB2 3028 0012                  		move.w	$12(a0),d0
00018BB6 48C0                       		ext.l	d0
00018BB8 E180                       		asl.l	#8,d0
00018BBA D680                       		add.l	d0,d3
00018BBC 2142 0030                  		move.l	d2,$30(a0)
00018BC0 2143 0038                  		move.l	d3,$38(a0)
00018BC4 4E75                       		rts	
00018BC6                            ; End of function BossMove
00018BC6                            
00018BC6                            ; ===========================================================================
00018BC6                            
00018BC6                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
00018BC6 6100 FFD8                  		bsr.w	BossMove
00018BCA 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00018BD0 6600                       		bne.s	loc_17916
00018BD2 317C 0000 0010             		move.w	#0,$10(a0)
00018BD8 317C 0000 0012             		move.w	#0,$12(a0)
00018BDE 5428 0025                  		addq.b	#2,$25(a0)
00018BE2 4EB9 0000 EBEC             		jsr	SingleObjLoad2
00018BE8 6600                       		bne.s	loc_17910
00018BEA 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00018BEE 3368 0030 0008             		move.w	$30(a0),8(a1)
00018BF4 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018BFA 2348 0034                  		move.l	a0,$34(a1)
00018BFE                            
00018BFE                            loc_17910:
00018BFE 317C 0077 003C             		move.w	#$77,$3C(a0)
00018C04                            
00018C04                            loc_17916:
00018C04 6000 FEDE                  		bra.w	loc_177E6
00018C08                            ; ===========================================================================
00018C08                            
00018C08                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018C08 5368 003C                  		subq.w	#1,$3C(a0)
00018C0C 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
00018C12 5428 0025                  		addq.b	#2,$25(a0)
00018C16 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018C1C 3038 D008                  		move.w	($FFFFD008).w,d0	 
00018C20 9068 0008                  		sub.w	8(a0),d0		 
00018C24 6A00                       		bpl.s	Obj3D_left			 
00018C26 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018C2C 6000                       		bra.s	Obj3D_right		 
00018C2E 08A8 0005 0022             		bclr	#5,$22(a0)
00018C34 4EB9 0000 0000              		jsr     loc_17950
00018C3A 4E75                       		rts
00018C3C                            ; ===========================================================================
00018C3C                            
00018C3C                            Obj3D_right:
00018C3C 317C FF00 0010             		move.w	#-$100,$10(a0)	
00018C42 4E75                       		Rts
00018C44                            
00018C44                            Obj3D_left:
00018C44 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018C4A 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
00018C50 6600                       		bne.s	RTSboss  	; if not, branch
00018C52 0868 0000 0022              		bchg	#0,$22(a0)
00018C58                            
00018C58                            RTSboss:	    
00018C58 4E75                       		rts
00018C5A                             ; ===========================================================================
00018C5A                            
00018C5A                            Obj3D_UpStuff:
00018C5A 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00018C5E 9068 000C                  		sub.w	$C(a0),d0		 
00018C62 6A00                       		bpl.s	Obj3D_down			 
00018C64 6000                        		bra.s	Obj3D_up		 
00018C66 08A8 0005 0022             		bclr	#5,$22(a0)
00018C6C                             
00018C6C                            Obj3D_up:		
00018C6C 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
00018C72 4E75                        	    rts
00018C74                            
00018C74                            Obj3D_down:
00018C74 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018C7A                            
00018C7A                            loc_17950:
00018C7A 6000 FE68                  		bra.w	loc_177E6
00018C7E                            ; ===========================================================================
00018C7E                            
00018C7E                            loc_17954:				; XREF: Obj3D_ShipIndex
00018C7E 5368 003C                  		subq.w	#1,$3C(a0)
00018C82 6B00                       		bmi.s	loc_17960
00018C84 6100 FF1A                  		bsr.w	BossMove
00018C88 6000                       		bra.s	loc_17976
00018C8A                            ; ===========================================================================
00018C8A                            
00018C8A                            loc_17960:
00018C8A 0868 0000 0022             		bchg	#0,$22(a0)
00018C90 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018C96 5528 0025                  		subq.b	#2,$25(a0)
00018C9A 317C 0000 0010             		move.w	#0,$10(a0)
00018CA0                            
00018CA0                            loc_17976:
00018CA0 6000 FE42                  		bra.w	loc_177E6
00018CA4                            ; ===========================================================================
00018CA4                            
00018CA4                            loc_1797A:				; XREF: Obj3D_ShipIndex
00018CA4 5368 003C                  		subq.w	#1,$3C(a0)
00018CA8 6B00                       		bmi.s	loc_17984
00018CAA 6000 FEB2                  		bra.w	BossDefeated
00018CAE                            ; ===========================================================================
00018CAE                            
00018CAE                            loc_17984:
00018CAE 08E8 0000 0022             		bset	#0,$22(a0)
00018CB4 08A8 0007 0022             		bclr	#7,$22(a0)
00018CBA 4268 0010                  		clr.w	$10(a0)
00018CBE 5428 0025                  		addq.b	#2,$25(a0)
00018CC2 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018CC8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018CCC 6600                       		bne.s	locret_179AA
00018CCE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018CD4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00018CDA 6000 FE82                  		bra.w	BossDefeated
00018CDE                            
00018CDE                            locret_179AA:
00018CDE 4E75                       		rts	
00018CE0                            ; ===========================================================================
00018CE0                            
00018CE0                            loc_179AC:				; XREF: Obj3D_ShipIndex
00018CE0 4EB9 0000 E6B8             		jsr ObjectFall		
00018CE6 5268 003C                  		addq.w	#1,$3C(a0)
00018CEA 6700                       		beq.s	loc_179BC
00018CEC 6A00                       		bpl.s	loc_179C2
00018CEE 6000                       		bra.s	loc_179EE
00018CF0                            ; ===========================================================================
00018CF0                            
00018CF0                            loc_179BC:
00018CF0 4268 0012                  		clr.w	$12(a0)
00018CF4 6000                       		bra.s	loc_179EE
00018CF6                            ; ===========================================================================
00018CF6                            
00018CF6                            loc_179C2:
00018CF6 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018CFC 6500                       		bcs.s	loc_179DA
00018CFE 6700                       		beq.s	loc_179E0
00018D00 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018D06 6500                       		bcs.s	loc_179EE
00018D08 5428 0025                  		addq.b	#2,$25(a0)
00018D0C 6000                       		bra.s	loc_179EE
00018D0E                            ; ===========================================================================
00018D0E                            
00018D0E                            loc_179DA:
00018D0E 5168 0012                  		subq.w	#8,$12(a0)
00018D12 6000                       		bra.s	loc_179EE
00018D14 6000 FE48                  		bra.w	BossDefeated
00018D18                            ; ===========================================================================
00018D18                            
00018D18                            loc_179E0:
00018D18 4268 0012                  		clr.w	$12(a0)
00018D1C 303C 0081                  		move.w	#$81,d0
00018D20 4EB9 0000 1C7C             		jsr	(PlaySound).l	; play GHZ music
00018D26                            
00018D26                            loc_179EE:
00018D26 6100 FE78                  		bsr.w	BossMove
00018D2A 6000 FDB8                  		bra.w	loc_177E6
00018D2E                            ; ===========================================================================
00018D2E                            
00018D2E                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018D2E 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018D34 6700                       		beq.s	loc_17A10
00018D36 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018D3A 6000                       		bra.s	loc_17A16
00018D3C                            ; ===========================================================================
00018D3C                            
00018D3C                            loc_17A10:
00018D3C 4A28 0001                  		tst.b	1(a0)
00018D40 6A00                       		bpl.s	Obj3D_ShipDel
00018D42                            
00018D42                            loc_17A16:
00018D42 6100 FE5C                  		bsr.w	BossMove
00018D46 6000 FD9C                  		bra.w	loc_177E6
00018D4A                            ; ===========================================================================
00018D4A                            
00018D4A                            Obj3D_ShipDel:
00018D4A 4EF9 0000 E78C             		jmp	DeleteObject
00018D50                            ; ===========================================================================
00018D50                            
00018D50                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018D50 7000                       		moveq	#0,d0
00018D52 7201                       		moveq	#1,d1
00018D54 2268 0034                  		movea.l	$34(a0),a1
00018D58 1029 0025                  		move.b	$25(a1),d0
00018D5C 5900                       		subq.b	#4,d0
00018D5E 6600                       		bne.s	loc_17A3E
00018D60 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018D66 6600                       		bne.s	loc_17A46
00018D68 7204                       		moveq	#4,d1
00018D6A                            
00018D6A                            loc_17A3E:
00018D6A 5D00                       		subq.b	#6,d0
00018D6C 6B00                       		bmi.s	loc_17A46
00018D6E 720A                       		moveq	#$A,d1
00018D70 6000                       		bra.s	loc_17A5A
00018D72                            ; ===========================================================================
00018D72                            
00018D72                            loc_17A46:
00018D72 4A29 0020                  		tst.b	$20(a1)
00018D76 6600                       		bne.s	loc_17A50
00018D78 7205                       		moveq	#5,d1
00018D7A 6000                       		bra.s	loc_17A5A
00018D7C                            ; ===========================================================================
00018D7C                            
00018D7C                            loc_17A50:
00018D7C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018D82 6500                       		bcs.s	loc_17A5A
00018D84 7204                       		moveq	#4,d1
00018D86                            
00018D86                            loc_17A5A:
00018D86 1141 001C                  		move.b	d1,$1C(a0)
00018D8A 5500                       		subq.b	#2,d0
00018D8C 6600                       		bne.s	Obj3D_FaceDisp
00018D8E 117C 0006 001C             		move.b	#6,$1C(a0)
00018D94 4A28 0001                  		tst.b	1(a0)
00018D98 6A00                       		bpl.s	Obj3D_FaceDel
00018D9A                            
00018D9A                            Obj3D_FaceDisp:
00018D9A 6000                       		bra.s	Obj3D_Display
00018D9C                            ; ===========================================================================
00018D9C                            
00018D9C                            Obj3D_FaceDel:
00018D9C 4EF9 0000 E78C             		jmp	DeleteObject
00018DA2                            ; ===========================================================================
00018DA2                            
00018DA2                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00018DA2 117C 0007 001C             		move.b	#7,$1C(a0)
00018DA8 2268 0034                  		movea.l	$34(a0),a1
00018DAC 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00018DB2 6600                       		bne.s	loc_17A96
00018DB4 117C 000B 001C             		move.b	#$B,$1C(a0)
00018DBA 4A28 0001                  		tst.b	1(a0)
00018DBE 6A00                       		bpl.s	Obj3D_FlameDel
00018DC0 6000                       		bra.s	Obj3D_FlameDisp
00018DC2                            ; ===========================================================================
00018DC2                            
00018DC2                            loc_17A96:
00018DC2 3029 0010                  		move.w	$10(a1),d0
00018DC6 6700                       		beq.s	Obj3D_FlameDisp
00018DC8 117C 0008 001C             		move.b	#8,$1C(a0)
00018DCE                            
00018DCE                            Obj3D_FlameDisp:
00018DCE 6000                       		bra.s	Obj3D_Display
00018DD0                            ; ===========================================================================
00018DD0                            
00018DD0                            Obj3D_FlameDel:
00018DD0 4EF9 0000 E78C             		jmp	DeleteObject
00018DD6                            ; ===========================================================================
00018DD6                            
00018DD6                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00018DD6 2268 0034                  		movea.l	$34(a0),a1
00018DDA 3169 0008 0008             		move.w	8(a1),8(a0)
00018DE0 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018DE6 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018DEC 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018DF2 4EB9 0000 B79E             		jsr	AnimateSprite
00018DF8 1028 0022                  		move.b	$22(a0),d0
00018DFC 0200 0003                  		andi.b	#3,d0
00018E00 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018E06 8128 0001                  		or.b	d0,1(a0)
00018E0A 4EF9 0000 E750             		jmp	DisplaySprite
00018E10                            ; ===========================================================================
00018E10                            ; ---------------------------------------------------------------------------
00018E10                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018E10                            ; ---------------------------------------------------------------------------
00018E10                            
00018E10                            Obj48:					; XREF: Obj_Index
00018E10 7000                       		moveq	#0,d0
00018E12 1028 0024                  		move.b	$24(a0),d0
00018E16 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018E1A 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018E1E                            ; ===========================================================================
00018E1E 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018E20 0000                       		dc.w Obj48_Base-Obj48_Index
00018E22 0000                       		dc.w Obj48_Display2-Obj48_Index
00018E24 0000                       		dc.w loc_17C68-Obj48_Index
00018E26 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018E28                            ; ===========================================================================
00018E28                            
00018E28                            Obj48_Main:				; XREF: Obj48_Index
00018E28 5428 0024                  		addq.b	#2,$24(a0)
00018E2C 317C 4080 0026             		move.w	#$4080,$26(a0)
00018E32 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018E38 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018E40 317C 046C 0002             		move.w	#$46C,2(a0)
00018E46 45E8 0028                  		lea	$28(a0),a2
00018E4A 14FC 0000                  		move.b	#0,(a2)+
00018E4E 7205                       		moveq	#5,d1
00018E50 2248                       		movea.l	a0,a1
00018E52 6000                       		bra.s	loc_17B60
00018E54                            ; ===========================================================================
00018E54                            
00018E54                            Obj48_MakeLinks:
00018E54 4EB9 0000 EBEC             		jsr	SingleObjLoad2
00018E5A 6600                       		bne.s	Obj48_MakeBall
00018E5C 3368 0008 0008             		move.w	8(a0),8(a1)
00018E62 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018E68 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018E6C 137C 0006 0024             		move.b	#6,$24(a1)
00018E72 237C 0000 8B52 0004        		move.l	#Map_obj15,4(a1)
00018E7A 337C 0380 0002             		move.w	#$380,2(a1)
00018E80 137C 0001 001A             		move.b	#1,$1A(a1)
00018E86 5228 0028                  		addq.b	#1,$28(a0)
00018E8A                            
00018E8A                            loc_17B60:				; XREF: Obj48_Main
00018E8A 3A09                       		move.w	a1,d5
00018E8C 0445 D000                  		subi.w	#$D000,d5
00018E90 EC4D                       		lsr.w	#6,d5
00018E92 0245 007F                  		andi.w	#$7F,d5
00018E96 14C5                       		move.b	d5,(a2)+
00018E98 137C 0004 0001             		move.b	#4,1(a1)
00018E9E 137C 0008 0019             		move.b	#8,$19(a1)
00018EA4 137C 0006 0018             		move.b	#6,$18(a1)
00018EAA 2368 0034 0034             		move.l	$34(a0),$34(a1)
00018EB0 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00018EB4                            
00018EB4                            Obj48_MakeBall:
00018EB4 137C 0008 0024             		move.b	#8,$24(a1)
00018EBA 237C 0000 9142 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00018EC2 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00018EC8 137C 0001 001A             		move.b	#1,$1A(a1)
00018ECE 137C 0005 0018             		move.b	#5,$18(a1)
00018ED4 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00018EDA 4E75                       		rts	
00018EDC                            ; ===========================================================================
00018EDC                            
00018EDC 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00018EE2                            
00018EE2                            ; ===========================================================================
00018EE2                            
00018EE2                            Obj48_Base:				; XREF: Obj48_Index
00018EE2 47F9 0001 8EDC             		lea	(Obj48_PosData).l,a3
00018EE8 45E8 0028                  		lea	$28(a0),a2
00018EEC 7C00                       		moveq	#0,d6
00018EEE 1C1A                       		move.b	(a2)+,d6
00018EF0                            
00018EF0                            loc_17BC6:
00018EF0 7800                       		moveq	#0,d4
00018EF2 181A                       		move.b	(a2)+,d4
00018EF4 ED4C                       		lsl.w	#6,d4
00018EF6 0684 00FF D000             		addi.l	#$FFD000,d4
00018EFC 2244                       		movea.l	d4,a1
00018EFE 101B                       		move.b	(a3)+,d0
00018F00 B029 003C                  		cmp.b	$3C(a1),d0
00018F04 6700                       		beq.s	loc_17BE0
00018F06 5229 003C                  		addq.b	#1,$3C(a1)
00018F0A                            
00018F0A                            loc_17BE0:
00018F0A 51CE FFE4                  		dbf	d6,loc_17BC6
00018F0E                            
00018F0E B029 003C                  		cmp.b	$3C(a1),d0
00018F12 6600                       		bne.s	loc_17BFA
00018F14 2268 0034                  		movea.l	$34(a0),a1
00018F18 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018F1E 6600                       		bne.s	loc_17BFA
00018F20 5428 0024                  		addq.b	#2,$24(a0)
00018F24                            
00018F24                            loc_17BFA:
00018F24 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018F2A 6700                       		beq.s	Obj48_Display
00018F2C 5268 0032                  		addq.w	#1,$32(a0)
00018F30                            
00018F30                            Obj48_Display:
00018F30 6100 0000                  		bsr.w	sub_17C2A
00018F34 1028 0026                  		move.b	$26(a0),d0
00018F38 4EB9 0000 8AC4             		jsr	(Obj15_Move2).l
00018F3E 4EF9 0000 E750             		jmp	DisplaySprite
00018F44                            ; ===========================================================================
00018F44                            
00018F44                            Obj48_Display2:				; XREF: Obj48_Index
00018F44 6100 0000                  		bsr.w	sub_17C2A
00018F48 4EB9 0000 8A84             		jsr	(Obj48_Move).l
00018F4E 4EF9 0000 E750             		jmp	DisplaySprite
00018F54                            
00018F54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018F54                            
00018F54                            
00018F54                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018F54 2268 0034                  		movea.l	$34(a0),a1
00018F58 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018F5E 6400                       		bcc.s	loc_17C3C
00018F60 0868 0000 001A             		bchg	#0,$1A(a0)
00018F66                            
00018F66                            loc_17C3C:
00018F66 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018F6C 3029 000C                  		move.w	$C(a1),d0
00018F70 D068 0032                  		add.w	$32(a0),d0
00018F74 3140 0038                  		move.w	d0,$38(a0)
00018F78 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018F7E 4A29 0022                  		tst.b	$22(a1)
00018F82 6A00                       		bpl.s	locret_17C66
00018F84 10BC 003F                  		move.b	#$3F,0(a0)
00018F88 117C 0000 0024             		move.b	#0,$24(a0)
00018F8E                            
00018F8E                            locret_17C66:
00018F8E 4E75                       		rts	
00018F90                            ; End of function sub_17C2A
00018F90                            
00018F90                            ; ===========================================================================
00018F90                            
00018F90                            loc_17C68:				; XREF: Obj48_Index
00018F90 2268 0034                  		movea.l	$34(a0),a1
00018F94 4A29 0022                  		tst.b	$22(a1)
00018F98 6A00                       		bpl.s	Obj48_Display3
00018F9A 10BC 003F                  		move.b	#$3F,0(a0)
00018F9E 117C 0000 0024             		move.b	#0,$24(a0)
00018FA4                            
00018FA4                            Obj48_Display3:
00018FA4 4EF9 0000 E750             		jmp	DisplaySprite
00018FAA                            ; ===========================================================================
00018FAA                            
00018FAA                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018FAA 7000                       		moveq	#0,d0
00018FAC 4A28 001A                  		tst.b	$1A(a0)
00018FB0 6600                       		bne.s	Obj48_Vanish
00018FB2 5200                       		addq.b	#1,d0
00018FB4                            
00018FB4                            Obj48_Vanish:
00018FB4 1140 001A                  		move.b	d0,$1A(a0)
00018FB8 2268 0034                  		movea.l	$34(a0),a1
00018FBC 4A29 0022                  		tst.b	$22(a1)
00018FC0 6A00                       		bpl.s	Obj48_Display4
00018FC2 117C 0000 0020             		move.b	#0,$20(a0)
00018FC8 6100 FB94                  		bsr.w	BossDefeated
00018FCC 5328 003C                  		subq.b	#1,$3C(a0)
00018FD0 6A00                       		bpl.s	Obj48_Display4
00018FD2 10BC 003F                  		move.b	#$3F,(a0)
00018FD6 117C 0000 0024             		move.b	#0,$24(a0)
00018FDC                            
00018FDC                            Obj48_Display4:
00018FDC 4EF9 0000 E750             		jmp	DisplaySprite
00018FE2                            ; ===========================================================================
00018FE2                            Ani_Eggman:
00018FE2                            	include "_anim\Eggman.asm"
00018FE2                            ; ---------------------------------------------------------------------------
00018FE2                            ; Animation script - Eggman (bosses)
00018FE2                            ; ---------------------------------------------------------------------------
00018FE2 0000                       		dc.w byte_17CD4-Ani_Eggman
00018FE4 0000                       		dc.w byte_17CD8-Ani_Eggman
00018FE6 0000                       		dc.w byte_17CDC-Ani_Eggman
00018FE8 0000                       		dc.w byte_17CE0-Ani_Eggman
00018FEA 0000                       		dc.w byte_17CE4-Ani_Eggman
00018FEC 0000                       		dc.w byte_17CE8-Ani_Eggman
00018FEE 0000                       		dc.w byte_17CEC-Ani_Eggman
00018FF0 0000                       		dc.w byte_17CF0-Ani_Eggman
00018FF2 0000                       		dc.w byte_17CF4-Ani_Eggman
00018FF4 0000                       		dc.w byte_17CF8-Ani_Eggman
00018FF6 0000                       		dc.w byte_17CFC-Ani_Eggman
00018FF8 0000                       		dc.w byte_17D00-Ani_Eggman
00018FFA 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018FFE 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00019002 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00019006 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
0001900A 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
0001900E 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00019012 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00019016 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
0001901A 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001901E 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00019022 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019026 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00019032                            		even
00019032                            		even
00019032                            Ani_TetoB:
00019032                            	include "_anim\TetoB.asm"
00019032                            ; ---------------------------------------------------------------------------
00019032                            ; Animation script - Eggman (bosses)
00019032                            ; ---------------------------------------------------------------------------
00019032 0000                       		dc.w spin-Ani_TetoB
00019034 0000                       		dc.w static-Ani_TetoB
00019036 0000                       		dc.w static2-Ani_TetoB
00019038 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
0001903F 0500 FF                    static:	dc.b 5,	0, $FF
00019042 0501 FF                    static2:	dc.b 5,	1, $FF
00019046 00                         		even
00019046 00                         		even
00019046                            ; ---------------------------------------------------------------------------
00019046                            ; Sprite mappings - Eggman (boss levels)
00019046                            ; ---------------------------------------------------------------------------
00019046                            Map_Eggman:
00019046                            	include "_maps\Eggman.asm"
00019046                            Map_dc7e:
00019046 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00019048 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
0001904A 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
0001904C 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
0001904E 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00019050 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00019052 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00019054 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
00019056 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
00019058 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
0001905A 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
0001905C 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
0001905E 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00019060 06                         Map_dc7e_1A: 	dc.b $6
00019061 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00019066 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
0001906B FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00019070 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00019075 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
0001907A 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
0001907F 02                         Map_dc7e_39: 	dc.b $2
00019080 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00019085 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
0001908A 02                         Map_dc7e_44: 	dc.b $2
0001908B E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00019090 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00019095 03                         Map_dc7e_4F: 	dc.b $3
00019096 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
0001909B EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
000190A0 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
000190A5 03                         Map_dc7e_5F: 	dc.b $3
000190A6 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
000190AB EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
000190B0 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
000190B5 03                         Map_dc7e_6F: 	dc.b $3
000190B6 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000190BB EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000190C0 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000190C5 03                         Map_dc7e_7F: 	dc.b $3
000190C6 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000190CB E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000190D0 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000190D5 04                         Map_dc7e_8F: 	dc.b $4
000190D6 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000190DB E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000190E0 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000190E5 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000190EA 01                         Map_dc7e_A4: 	dc.b $1
000190EB 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
000190F0 01                         Map_dc7e_AA: 	dc.b $1
000190F1 0405 0031 22               	dc.b $4, $5, $0, $31, $22
000190F6 00                         Map_dc7e_B0: 	dc.b $0
000190F7 02                         Map_dc7e_B1: 	dc.b $2
000190F8 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
000190FD 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00019102 02                         Map_dc7e_BC: 	dc.b $2
00019103 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00019108 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
0001910E 00                         	even
0001910E 00                         	even
0001910E                            
0001910E                            ; ---------------------------------------------------------------------------
0001910E                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001910E                            ; ---------------------------------------------------------------------------
0001910E                            Map_BossItems:
0001910E                            	include "_maps\Boss items.asm"
0001910E                            ; ---------------------------------------------------------------------------
0001910E                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001910E                            ; ---------------------------------------------------------------------------
0001910E 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00019112 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00019116 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
0001911A 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
0001911E 01                         byte_17DE4:	dc.b 1
0001911F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019124 02                         byte_17DEA:	dc.b 2
00019125 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
0001912A F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001912F 00                         		dc.b 0
00019130 01                         byte_17DF6:	dc.b 1
00019131 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00019136 01                         byte_17DFC:	dc.b 1
00019137 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
0001913C 01                         byte_17E02:	dc.b 1
0001913D 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00019142 04                         byte_17E08:	dc.b 4
00019143 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00019148 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001914D F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00019152 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00019157 00                         		dc.b 0
00019158 02                         byte_17E1E:	dc.b 2
00019159 0005 0017 00               		dc.b 0,	5, 0, $17, 0
0001915E 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00019163 00                         		dc.b 0
00019164 02                         byte_17E2A:	dc.b 2
00019165 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
0001916A 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00019170 00                         		even
00019170 00                         		even
00019170                            
00019170                            ; ===========================================================================
00019170                            ; ---------------------------------------------------------------------------
00019170                            ; Object 77 - Fatass teto boss fight in LZ -STDH
00019170                            ; ---------------------------------------------------------------------------
00019170                            
00019170                            
00019170                            obj77:					; XREF: Obj_Index
00019170 7000                       		moveq	#0,d0
00019172 1028 0024                  		move.b	$24(a0),d0
00019176 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
0001917A 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
0001917E                            ; ===========================================================================
0001917E 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
00019180 0000                       		dc.w obj77_ShipMain-obj77_Index
00019182 0000                       		dc.w obj77_FaceMain-obj77_Index
00019184 0000                       		dc.w obj77_FlameMain-obj77_Index
00019186                            
00019186 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
00019188 0401                       		dc.b 4,	1
0001918A 0607                       		dc.b 6,	7
0001918C                            ; ===========================================================================
0001918C                            
0001918C                            obj77_Main:				; XREF: obj77_Index
0001918C 45F9 0001 9186             		lea	(obj77_ObjData).l,a2
00019192 2248                       		movea.l	a0,a1
00019194 7202                       		moveq	#2,d1
00019196 6000                       		bra.s	obj77_LoadBoss
00019198                            ; ===========================================================================
00019198                            
00019198                            obj77_Loop:
00019198 4EB9 0000 EBEC             		jsr	SingleObjLoad2
0001919E 6600                       		bne.s	loc2_17772
000191A0                            
000191A0                            obj77_LoadBoss:				; XREF: obj77_Main
000191A0 135A 0024                  		move.b	(a2)+,$24(a1)
000191A4 12BC 0077                  		move.b	#$77,0(a1)
000191A8 3368 0008 0008             		move.w	8(a0),8(a1)
000191AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000191B4 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
000191BC 337C 0400 0002             		move.w	#$400,2(a1)
000191C2 137C 0004 0001             		move.b	#4,1(a1)
000191C8 137C 0020 0019             		move.b	#$20,$19(a1)
000191CE 137C 0003 0018             		move.b	#3,$18(a1)
000191D4 135A 001C                  		move.b	(a2)+,$1C(a1)
000191D8 2348 0034                  		move.l	a0,$34(a1)
000191DC 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
000191E0                            
000191E0                            loc2_17772:
000191E0 3168 0008 0030             		move.w	8(a0),$30(a0)
000191E6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000191EC 117C 000F 0020             		move.b	#$F,$20(a0)
000191F2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000191F8                            
000191F8                            obj77_ShipMain:				; XREF: obj77_Index
000191F8 7000                       		moveq	#0,d0
000191FA 1028 0025                  		move.b	$25(a0),d0
000191FE 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00019202 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
00019206 43F9 0001 9032             		lea	(Ani_TetoB).l,a1
0001920C 4EB9 0000 B79E             		jsr	AnimateSprite
00019212 1028 0022                  		move.b	$22(a0),d0
00019216 0200 0003                  		andi.b	#3,d0
0001921A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019220 8128 0001                  		or.b	d0,1(a0)
00019224 4EF9 0000 E750             		jmp	DisplaySprite
0001922A                            ; ===========================================================================
0001922A 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
0001922C 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
0001922E 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00019230 0000                       		dc.w loc2_17954-obj77_ShipIndex
00019232 0000                       		dc.w fatassruns-obj77_ShipIndex		
00019234 0000                       		dc.w loc2_1797A-obj77_ShipIndex
00019236 0000                       		dc.w loc2_179AC-obj77_ShipIndex
00019238 0000                       		dc.w loc2_179F6-obj77_ShipIndex
0001923A                            ; ===========================================================================
0001923A                            
0001923A                            obj77_ShipStart:			; XREF: obj77_ShipIndex
0001923A                            	;	move.w	#$100,$12(a0)	; move ship down
0001923A 6100 F964                  		bsr.w	BossMove
0001923E 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00019244 6600                       		bne.s	loc2_177E6
00019246 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001924C 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00019250                            
00019250                            loc2_177E6:
00019250                            ;		move.b	$3F(a0),d0
00019250                            ;		jsr	(CalcSine).l
00019250 EC40                       		asr.w	#6,d0
00019252 D068 0038                  		add.w	$38(a0),d0
00019256 3140 000C                  		move.w	d0,$C(a0)
0001925A 3168 0030 0008             		move.w	$30(a0),8(a0)
00019260 5428 003F                  		addq.b	#2,$3F(a0)
00019264 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
0001926A 6400                       		bcc.s	locret_1784A2
0001926C 4A28 0022                  		tst.b	$22(a0)
00019270 6B00                       		bmi.s	loc2_1784C
00019272 4A28 0020                  		tst.b	$20(a0)
00019276 6600                       		bne.s	locret_1784A2
00019278 4A28 003E                  		tst.b	$3E(a0)
0001927C 6600                       		bne.s	obj77_ShipFlash
0001927E 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00019284 303C 00AC                  		move.w	#$AC,d0
00019288 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001928E                            
0001928E                            obj77_ShipFlash:
0001928E 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00019292 7000                       		moveq	#0,d0		; move 0 (black) to d0
00019294 4A51                       		tst.w	(a1)
00019296 6600                       		bne.s	loc2_1783C
00019298 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001929C                            
0001929C                            loc2_1783C:
0001929C 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001929E 5328 003E                  		subq.b	#1,$3E(a0)
000192A2 6600                       		bne.s	locret_1784A2
000192A4 117C 000F 0020             		move.b	#$F,$20(a0)
000192AA                            
000192AA                            locret_1784A2:
000192AA 4E75                       		rts	
000192AC                            ; ===========================================================================
000192AC                            
000192AC                            loc2_1784C:				; XREF: loc2_177E6
000192AC 7064                       		moveq	#100,d0
000192AE 6100 0000                  		bsr.w	AddPoints
000192B2 117C 000A 0025             		move.b	#$A,$25(a0)
000192B8 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000192BE 4E75                       		rts	
000192C0                            ; ===========================================================================
000192C0                            
000192C0                            obj77_MakeBall:				; XREF: obj77_ShipIndex
000192C0 317C FF00 0010             		move.w	#-$100,$10(a0)
000192C6 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
000192CC 6100 F8D2                  		bsr.w	BossMove
000192D0 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
000192D6 6600                       		bne.s	loc2_17916
000192D8 317C 0000 0010             		move.w	#0,$10(a0)
000192DE 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
000192E4 317C 0000 0012             		move.w	#0,$12(a0)
000192EA 5428 0025                  		addq.b	#2,$25(a0)
000192EE                            
000192EE                            loc2_17910:
000192EE 317C 0077 003C             		move.w	#$77,$3C(a0)
000192F4                            
000192F4                            loc2_17916:
000192F4 6000 FF5A                  		bra.w	loc2_177E6
000192F8                            ; ===========================================================================
000192F8                            
000192F8                            obj77_ShipMove:				; XREF: obj77_ShipIndex
000192F8 6100 F8A6                  		bsr.w	BossMove
000192FC 5368 003C                  		subq.w	#1,$3C(a0)
00019300 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00019302 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00019308 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
0001930E 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00019314 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
0001931A 6600                       		bne.s	loc2_17950 ; if not branch
0001931C                            
0001931C                            fatass_attack:
0001931C 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00019322 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
00019328 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
0001932E 6600                       		bne.s	loc2_17950    ; if not you know the drill
00019330 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00019334 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
0001933A                            
0001933A                            loc2_17950:
0001933A 6000 FF14                  		bra.w	loc2_177E6
0001933E                            ; ===========================================================================
0001933E                            
0001933E                            loc2_17954:				; XREF: obj77_ShipIndex
0001933E 6100 F860                  		bsr.w	BossMove
00019342 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
00019348                            		; i suck at programming
00019348 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
0001934E 6600                       		bne.s	loc2_17976    ; if not blah blah
00019350 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00019356 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
0001935A 303C 00B9                  		move.w	#$B9,d0
0001935E 4EB9 0000 1C7C             		jsr	(PlaySound).l	; play the earthquake sound
00019364                            
00019364                            Peartobombs:	
00019364 4EB9 0000 EBEC                		jsr	SingleObjLoad2
0001936A 6600                       		bne.s	secondone
0001936C 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00019370 337C 1D70 0008             		move.w	#$1D70,8(a1)
00019376 337C 0670 000C             		move.w	#$670,$C(a1)
0001937C                            secondone:		
0001937C 4EB9 0000 EBEC                		jsr	SingleObjLoad2
00019382 6600                       		bne.s	loc2_17976		
00019384 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00019388 337C 1D20 0008             		move.w	#$1D20,8(a1)
0001938E 337C 0670 000C             		move.w	#$670,$C(a1)
00019394                            lastone:
00019394 4EB9 0000 EBEC                		jsr	SingleObjLoad2
0001939A 6600                       		bne.s	loc2_17976		
0001939C 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
000193A0 337C 1E00 0008             		move.w	#$1E00,8(a1)
000193A6 337C 0670 000C             		move.w	#$670,$C(a1)
000193AC                            		
000193AC                            loc2_17976:
000193AC 6000 FEA2                  		bra.w	loc2_177E6
000193B0                            		
000193B0                            ; ===========================================================================
000193B0                            Fatassruns:
000193B0 6100 F7EE                   		bsr.w	BossMove
000193B4 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
000193BA 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
000193C0 6600                       		bne.s	processstuff ; is not go here
000193C2 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
000193C8 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
000193CE 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
000193D2 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
000193D8 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
000193DE                            		
000193DE                            		
000193DE                            processstuff:
000193DE 6000 FE70                  		bra.w	loc2_177E6
000193E2                            ; ===========================================================================
000193E2                            
000193E2                            loc2_1797A:				; XREF: obj77_ShipIndex
000193E2 5368 003C                  		subq.w	#1,$3C(a0)
000193E6 6B00                       		bmi.s	loc2_17984
000193E8 6000 F774                  		bra.w	BossDefeated
000193EC                            ; ===========================================================================
000193EC                            
000193EC                            loc2_17984:
000193EC 08E8 0000 0022             		bset	#0,$22(a0)
000193F2 08A8 0007 0022             		bclr	#7,$22(a0)
000193F8 4268 0010                  		clr.w	$10(a0)
000193FC 5428 0025                  		addq.b	#2,$25(a0)
00019400 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019406 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001940A 6600                       		bne.s	locret_179AA2
0001940C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019412                            
00019412                            locret_179AA2:
00019412 4E75                       		rts	
00019414                            ; ===========================================================================
00019414                            
00019414                            loc2_179AC:				; XREF: obj77_ShipIndex
00019414 5268 003C                  		addq.w	#1,$3C(a0)
00019418 6700                       		beq.s	loc2_179BC
0001941A 6A00                       		bpl.s	loc2_179C2
0001941C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019422 6000                       		bra.s	loc2_179EE
00019424                            ; ===========================================================================
00019424                            
00019424                            loc2_179BC:
00019424 4268 0012                  		clr.w	$12(a0)
00019428 6000                       		bra.s	loc2_179EE
0001942A                            ; ===========================================================================
0001942A                            
0001942A                            loc2_179C2:
0001942A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019430 6500                       		bcs.s	loc2_179DA
00019432 6700                       		beq.s	loc2_179E0
00019434 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001943A 6500                       		bcs.s	loc2_179EE
0001943C 5428 0025                  		addq.b	#2,$25(a0)
00019440 6000                       		bra.s	loc2_179EE
00019442                            ; ===========================================================================
00019442                            
00019442                            loc2_179DA:
00019442 5168 0012                  		subq.w	#8,$12(a0)
00019446 6000                       		bra.s	loc2_179EE
00019448                            ; ===========================================================================
00019448                            
00019448                            loc2_179E0:
00019448 4268 0012                  		clr.w	$12(a0)
0001944C 303C 0097                  		move.w	#$97,d0
00019450 4EB9 0000 1C7C             		jsr	(PlaySound).l	; play lz3 music
00019456                            
00019456                            loc2_179EE:
00019456 6100 F748                  		bsr.w	BossMove
0001945A 6000 FDF4                  		bra.w	loc2_177E6
0001945E                            ; ===========================================================================
0001945E                            
0001945E                            loc2_179F6:				; XREF: obj77_ShipIndex
0001945E 317C 0400 0010             		move.w	#$400,$10(a0)
00019464 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001946A 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00019470 6700                       		beq.s	loc2_17A10
00019472 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019476 6000                       		bra.s	loc2_17A16
00019478                            ; ===========================================================================
00019478                            
00019478                            loc2_17A10:
00019478 4A28 0001                  		tst.b	1(a0)
0001947C 6A00                       		bpl.s	obj77_ShipDel
0001947E                            
0001947E                            loc2_17A16:
0001947E 6100 F720                  		bsr.w	BossMove
00019482 6000 FDCC                  		bra.w	loc2_177E6
00019486                            ; ===========================================================================
00019486                            
00019486                            obj77_ShipDel:
00019486 4EF9 0000 E78C             		jmp	DeleteObject
0001948C                            ; ===========================================================================
0001948C                            
0001948C                            obj77_FaceMain:				; XREF: obj77_Index
0001948C 4E75                       		rts
0001948E                            ; ===========================================================================
0001948E                            
0001948E                            obj77_FlameMain:			; XREF: obj77_Index
0001948E 4E75                       		rts
00019490                            ; ===========================================================================
00019490                            
00019490                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00019490 43F9 0001 9032             		lea	(Ani_TetoB).l,a1
00019496 4EB9 0000 B79E             		jsr	AnimateSprite
0001949C 4EF9 0000 E750             		jmp	DisplaySprite
000194A2                            ; ---------------------------------------------------------------------------
000194A2                            ; Sprite mappings - Fatass teto boss
000194A2                            ; ---------------------------------------------------------------------------
000194A2                            Map_TetoBoss:
000194A2                            	include "_maps\tetoboss.asm"
000194A2                            Map_f09a:
000194A2 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
000194A4 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
000194A6 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
000194A8 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
000194AA 03                         Map_f09a_8: 	dc.b $3
000194AB E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
000194B0 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
000194B5 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
000194BA 06                         Map_f09a_18: 	dc.b $6
000194BB EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
000194C0 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
000194C5 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
000194CA 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
000194CF EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
000194D4 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
000194D9 03                         Map_f09a_37: 	dc.b $3
000194DA E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
000194DF 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
000194E4 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
000194E9 06                         Map_f09a_47: 	dc.b $6
000194EA ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
000194EF 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
000194F4 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
000194F9 DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
000194FE ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00019503 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00019508                            	even
00019508                            	even
00019508                            ; ===========================================================================
00019508                            ; ---------------------------------------------------------------------------
00019508                            ; Object 73 - Eggman (MZ)
00019508                            ; ---------------------------------------------------------------------------
00019508                            
00019508                            Obj73:					; XREF: Obj_Index
00019508 7000                       		moveq	#0,d0
0001950A 1028 0024                  		move.b	$24(a0),d0
0001950E 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00019512 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00019516                            ; ===========================================================================
00019516 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00019518 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001951A 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001951C 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001951E 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00019520                            
00019520 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019523 0401 04                    		dc.b 4,	1, 4
00019526 0607 04                    		dc.b 6,	7, 4
00019529 0800 03                    		dc.b 8,	0, 3
0001952C                            ; ===========================================================================
0001952C                            
0001952C                            Obj73_Main:				; XREF: Obj73_Index
0001952C 3168 0008 0030             		move.w	8(a0),$30(a0)
00019532 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019538 117C 000F 0020             		move.b	#$F,$20(a0)
0001953E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019544 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00019548 2248                       		movea.l	a0,a1
0001954A 7203                       		moveq	#3,d1
0001954C 6000                       		bra.s	Obj73_LoadBoss
0001954E                            ; ===========================================================================
0001954E                            
0001954E                            Obj73_Loop:
0001954E 4EB9 0000 EBEC             		jsr	SingleObjLoad2
00019554 6600                       		bne.s	Obj73_ShipMain
00019556 12BC 0073                  		move.b	#$73,0(a1)
0001955A 3368 0008 0008             		move.w	8(a0),8(a1)
00019560 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019566                            
00019566                            Obj73_LoadBoss:				; XREF: Obj73_Main
00019566 08A8 0000 0022             		bclr	#0,$22(a0)
0001956C 4229 0025                  		clr.b	$25(a1)
00019570 135A 0024                  		move.b	(a2)+,$24(a1)
00019574 135A 001C                  		move.b	(a2)+,$1C(a1)
00019578 135A 0018                  		move.b	(a2)+,$18(a1)
0001957C 237C 0001 9046 0004        		move.l	#Map_Eggman,4(a1)
00019584 337C 0400 0002             		move.w	#$400,2(a1)
0001958A 137C 0004 0001             		move.b	#4,1(a1)
00019590 137C 0020 0019             		move.b	#$20,$19(a1)
00019596 2348 0034                  		move.l	a0,$34(a1)
0001959A 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001959E                            
0001959E                            Obj73_ShipMain:
0001959E 7000                       		moveq	#0,d0
000195A0 1028 0025                  		move.b	$25(a0),d0
000195A4 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
000195A8 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
000195AC 43F9 0001 8FE2             		lea	(Ani_Eggman).l,a1
000195B2 4EB9 0000 B79E             		jsr	AnimateSprite
000195B8 7003                       		moveq	#3,d0
000195BA C028 0022                  		and.b	$22(a0),d0
000195BE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000195C4 8128 0001                  		or.b	d0,1(a0)
000195C8 4EF9 0000 E750             		jmp	DisplaySprite
000195CE                            ; ===========================================================================
000195CE 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
000195D0 0000                       		dc.w loc_183AA-Obj73_ShipIndex
000195D2 0000                       		dc.w loc_184F6-Obj73_ShipIndex
000195D4 0000                       		dc.w loc_1852C-Obj73_ShipIndex
000195D6 0000                       		dc.w loc_18582-Obj73_ShipIndex
000195D8                            ; ===========================================================================
000195D8                            
000195D8                            loc_18302:				; XREF: Obj73_ShipIndex
000195D8 1028 003F                  		move.b	$3F(a0),d0
000195DC 5428 003F                  		addq.b	#2,$3F(a0)
000195E0 4EB9 0000 3424             		jsr	(CalcSine).l
000195E6 E440                       		asr.w	#2,d0
000195E8 3140 0012                  		move.w	d0,$12(a0)
000195EC 317C FF00 0010             		move.w	#-$100,$10(a0)
000195F2 6100 F5AC                  		bsr.w	BossMove
000195F6 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
000195FC 6600                       		bne.s	loc_18334
000195FE 5428 0025                  		addq.b	#2,$25(a0)
00019602 4228 0028                  		clr.b	$28(a0)
00019606 42A8 0010                  		clr.l	$10(a0)
0001960A                            
0001960A                            loc_18334:
0001960A 4EB9 0000 33FE             		jsr	(RandomNumber).l
00019610 1140 0034                  		move.b	d0,$34(a0)
00019614                            
00019614                            loc_1833E:
00019614 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001961A 3168 0030 0008             		move.w	$30(a0),8(a0)
00019620 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00019626 6400                       		bcc.s	locret_18390
00019628 4A28 0022                  		tst.b	$22(a0)
0001962C 6B00                       		bmi.s	loc_18392
0001962E 4A28 0020                  		tst.b	$20(a0)
00019632 6600                       		bne.s	locret_18390
00019634 4A28 003E                  		tst.b	$3E(a0)
00019638 6600                       		bne.s	loc_18374
0001963A 117C 0028 003E             		move.b	#$28,$3E(a0)
00019640 303C 00AC                  		move.w	#$AC,d0
00019644 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001964A                            
0001964A                            loc_18374:
0001964A 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001964E 7000                       		moveq	#0,d0
00019650 4A51                       		tst.w	(a1)
00019652 6600                       		bne.s	loc_18382
00019654 303C 0EEE                  		move.w	#$EEE,d0
00019658                            
00019658                            loc_18382:
00019658 3280                       		move.w	d0,(a1)
0001965A 5328 003E                  		subq.b	#1,$3E(a0)
0001965E 6600                       		bne.s	locret_18390
00019660 117C 000F 0020             		move.b	#$F,$20(a0)
00019666                            
00019666                            locret_18390:
00019666 4E75                       		rts	
00019668                            ; ===========================================================================
00019668                            
00019668                            loc_18392:				; XREF: loc_1833E
00019668 7064                       		moveq	#100,d0
0001966A 6100 0000                  		bsr.w	AddPoints
0001966E 117C 0004 0025             		move.b	#4,$25(a0)
00019674 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001967A 4268 0010                  		clr.w	$10(a0)
0001967E 4E75                       		rts	
00019680                            ; ===========================================================================
00019680                            
00019680                            loc_183AA:				; XREF: Obj73_ShipIndex
00019680 7000                       		moveq	#0,d0
00019682 1028 0028                  		move.b	$28(a0),d0
00019686 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001968A 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001968E 0228 0006 0028             		andi.b	#6,$28(a0)
00019694 6000 FF7E                  		bra.w	loc_1833E
00019698                            ; ===========================================================================
00019698 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001969A 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001969C 0000                       		dc.w loc_183CA-off_183C2
0001969E 0000                       		dc.w Obj73_MakeLava2-off_183C2
000196A0                            ; ===========================================================================
000196A0                            
000196A0                            loc_183CA:				; XREF: off_183C2
000196A0 4A68 0010                  		tst.w	$10(a0)
000196A4 6600                       		bne.s	loc_183FE
000196A6 7040                       		moveq	#$40,d0
000196A8 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000196AE 6700                       		beq.s	loc_183E6
000196B0 6500                       		bcs.s	loc_183DE
000196B2 4440                       		neg.w	d0
000196B4                            
000196B4                            loc_183DE:
000196B4 3140 0012                  		move.w	d0,$12(a0)
000196B8 6000 F4E6                  		bra.w	BossMove
000196BC                            ; ===========================================================================
000196BC                            
000196BC                            loc_183E6:
000196BC 317C 0200 0010             		move.w	#$200,$10(a0)
000196C2 317C 0100 0012             		move.w	#$100,$12(a0)
000196C8 0828 0000 0022             		btst	#0,$22(a0)
000196CE 6600                       		bne.s	loc_183FE
000196D0 4468 0010                  		neg.w	$10(a0)
000196D4                            
000196D4                            loc_183FE:
000196D4 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
000196DA 6400                       		bcc.s	Obj73_MakeLava
000196DC 6100 F4C2                  		bsr.w	BossMove
000196E0 5968 0012                  		subq.w	#4,$12(a0)
000196E4                            
000196E4                            Obj73_MakeLava:
000196E4 5328 0034                  		subq.b	#1,$34(a0)
000196E8 6400                       		bcc.s	loc_1845C
000196EA 4EB9 0000 EBD6             		jsr	SingleObjLoad
000196F0 6600                       		bne.s	loc_1844A
000196F2 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
000196F6 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
000196FC 4EB9 0000 33FE             		jsr	(RandomNumber).l
00019702 0280 0000 FFFF             		andi.l	#$FFFF,d0
00019708 80FC 0050                  		divu.w	#$50,d0
0001970C 4840                       		swap	d0
0001970E 0640 1878                  		addi.w	#$1878,d0
00019712 3340 0008                  		move.w	d0,8(a1)
00019716 EE09                       		lsr.b	#7,d1
00019718 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001971E                            
0001971E                            loc_1844A:
0001971E 4EB9 0000 33FE             		jsr	(RandomNumber).l
00019724 0200 001F                  		andi.b	#$1F,d0
00019728 0600 0040                  		addi.b	#$40,d0
0001972C 1140 0034                  		move.b	d0,$34(a0)
00019730                            
00019730                            loc_1845C:
00019730 0828 0000 0022             		btst	#0,$22(a0)
00019736 6700                       		beq.s	loc_18474
00019738 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001973E 6D00                       		blt.s	locret_1849C
00019740 317C 1910 0030             		move.w	#$1910,$30(a0)
00019746 6000                       		bra.s	loc_18482
00019748                            ; ===========================================================================
00019748                            
00019748                            loc_18474:
00019748 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001974E 6E00                       		bgt.s	locret_1849C
00019750 317C 1830 0030             		move.w	#$1830,$30(a0)
00019756                            
00019756                            loc_18482:
00019756 4268 0010                  		clr.w	$10(a0)
0001975A 317C FE80 0012             		move.w	#-$180,$12(a0)
00019760 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019766 6400                       		bcc.s	loc_18498
00019768 4468 0012                  		neg.w	$12(a0)
0001976C                            
0001976C                            loc_18498:
0001976C 5428 0028                  		addq.b	#2,$28(a0)
00019770                            
00019770                            locret_1849C:
00019770 4E75                       		rts	
00019772                            ; ===========================================================================
00019772                            
00019772                            Obj73_MakeLava2:			; XREF: off_183C2
00019772 6100 F42C                  		bsr.w	BossMove
00019776 3028 0038                  		move.w	$38(a0),d0
0001977A 0440 022C                  		subi.w	#$22C,d0
0001977E 6E00                       		bgt.s	locret_184F4
00019780 303C 022C                  		move.w	#$22C,d0
00019784 4A68 0012                  		tst.w	$12(a0)
00019788 6700                       		beq.s	loc_184EA
0001978A 4268 0012                  		clr.w	$12(a0)
0001978E 317C 0050 003C             		move.w	#$50,$3C(a0)
00019794 0868 0000 0022             		bchg	#0,$22(a0)
0001979A 4EB9 0000 EBD6             		jsr	SingleObjLoad
000197A0 6600                       		bne.s	loc_184EA
000197A2 3368 0030 0008             		move.w	$30(a0),8(a1)
000197A8 3368 0038 000C             		move.w	$38(a0),$C(a1)
000197AE 0669 0018 000C             		addi.w	#$18,$C(a1)
000197B4 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
000197B8 137C 0001 0028             		move.b	#1,$28(a1)
000197BE                            
000197BE                            loc_184EA:
000197BE 5368 003C                  		subq.w	#1,$3C(a0)
000197C2 6600                       		bne.s	locret_184F4
000197C4 5428 0028                  		addq.b	#2,$28(a0)
000197C8                            
000197C8                            locret_184F4:
000197C8 4E75                       		rts	
000197CA                            ; ===========================================================================
000197CA                            
000197CA                            loc_184F6:				; XREF: Obj73_ShipIndex
000197CA 5368 003C                  		subq.w	#1,$3C(a0)
000197CE 6B00                       		bmi.s	loc_18500
000197D0 6000 F38C                  		bra.w	BossDefeated
000197D4                            ; ===========================================================================
000197D4                            
000197D4                            loc_18500:
000197D4 08E8 0000 0022             		bset	#0,$22(a0)
000197DA 08A8 0007 0022             		bclr	#7,$22(a0)
000197E0 4268 0010                  		clr.w	$10(a0)
000197E4 5428 0025                  		addq.b	#2,$25(a0)
000197E8 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000197EE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000197F2 6600                       		bne.s	locret_1852A
000197F4 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000197FA 4268 0012                  		clr.w	$12(a0)
000197FE                            
000197FE                            locret_1852A:
000197FE 4E75                       		rts	
00019800                            ; ===========================================================================
00019800                            
00019800                            loc_1852C:				; XREF: Obj73_ShipIndex
00019800 5268 003C                  		addq.w	#1,$3C(a0)
00019804 6700                       		beq.s	loc_18544
00019806 6A00                       		bpl.s	loc_1854E
00019808 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001980E 6400                       		bcc.s	loc_18544
00019810 0668 0018 0012             		addi.w	#$18,$12(a0)
00019816 6000                       		bra.s	loc_1857A
00019818                            ; ===========================================================================
00019818                            
00019818                            loc_18544:
00019818 4268 0012                  		clr.w	$12(a0)
0001981C 4268 003C                  		clr.w	$3C(a0)
00019820 6000                       		bra.s	loc_1857A
00019822                            ; ===========================================================================
00019822                            
00019822                            loc_1854E:
00019822 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019828 6500                       		bcs.s	loc_18566
0001982A 6700                       		beq.s	loc_1856C
0001982C 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019832 6500                       		bcs.s	loc_1857A
00019834 5428 0025                  		addq.b	#2,$25(a0)
00019838 6000                       		bra.s	loc_1857A
0001983A                            ; ===========================================================================
0001983A                            
0001983A                            loc_18566:
0001983A 5168 0012                  		subq.w	#8,$12(a0)
0001983E 6000                       		bra.s	loc_1857A
00019840                            ; ===========================================================================
00019840                            
00019840                            loc_1856C:
00019840 4268 0012                  		clr.w	$12(a0)
00019844 303C 0083                  		move.w	#$83,d0
00019848 4EB9 0000 1C7C             		jsr	(PlaySound).l	; play MZ music
0001984E                            
0001984E                            loc_1857A:
0001984E 6100 F350                  		bsr.w	BossMove
00019852 6000 FDC0                  		bra.w	loc_1833E
00019856                            ; ===========================================================================
00019856                            
00019856                            loc_18582:				; XREF: Obj73_ShipIndex
00019856 317C 0500 0010             		move.w	#$500,$10(a0)
0001985C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019862 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00019868 6400                       		bcc.s	loc_1859C
0001986A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001986E 6000                       		bra.s	loc_185A2
00019870                            ; ===========================================================================
00019870                            
00019870                            loc_1859C:
00019870 4A28 0001                  		tst.b	1(a0)
00019874 6A00                       		bpl.s	Obj73_ShipDel
00019876                            
00019876                            loc_185A2:
00019876 6100 F328                  		bsr.w	BossMove
0001987A 6000 FD98                  		bra.w	loc_1833E
0001987E                            ; ===========================================================================
0001987E                            
0001987E                            Obj73_ShipDel:
0001987E 4EF9 0000 E78C             		jmp	DeleteObject
00019884                            ; ===========================================================================
00019884                            
00019884                            Obj73_FaceMain:				; XREF: Obj73_Index
00019884 7000                       		moveq	#0,d0
00019886 7201                       		moveq	#1,d1
00019888 2268 0034                  		movea.l	$34(a0),a1
0001988C 1029 0025                  		move.b	$25(a1),d0
00019890 5540                       		subq.w	#2,d0
00019892 6600                       		bne.s	loc_185D2
00019894 0829 0001 0028             		btst	#1,$28(a1)
0001989A 6700                       		beq.s	loc_185DA
0001989C 4A69 0012                  		tst.w	$12(a1)
000198A0 6600                       		bne.s	loc_185DA
000198A2 7204                       		moveq	#4,d1
000198A4 6000                       		bra.s	loc_185EE
000198A6                            ; ===========================================================================
000198A6                            
000198A6                            loc_185D2:
000198A6 5500                       		subq.b	#2,d0
000198A8 6B00                       		bmi.s	loc_185DA
000198AA 720A                       		moveq	#$A,d1
000198AC 6000                       		bra.s	loc_185EE
000198AE                            ; ===========================================================================
000198AE                            
000198AE                            loc_185DA:
000198AE 4A29 0020                  		tst.b	$20(a1)
000198B2 6600                       		bne.s	loc_185E4
000198B4 7205                       		moveq	#5,d1
000198B6 6000                       		bra.s	loc_185EE
000198B8                            ; ===========================================================================
000198B8                            
000198B8                            loc_185E4:
000198B8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000198BE 6500                       		bcs.s	loc_185EE
000198C0 7204                       		moveq	#4,d1
000198C2                            
000198C2                            loc_185EE:
000198C2 1141 001C                  		move.b	d1,$1C(a0)
000198C6 5900                       		subq.b	#4,d0
000198C8 6600                       		bne.s	loc_18602
000198CA 117C 0006 001C             		move.b	#6,$1C(a0)
000198D0 4A28 0001                  		tst.b	1(a0)
000198D4 6A00                       		bpl.s	Obj73_FaceDel
000198D6                            
000198D6                            loc_18602:
000198D6 6000                       		bra.s	Obj73_Display
000198D8                            ; ===========================================================================
000198D8                            
000198D8                            Obj73_FaceDel:
000198D8 4EF9 0000 E78C             		jmp	DeleteObject
000198DE                            ; ===========================================================================
000198DE                            
000198DE                            Obj73_FlameMain:			; XREF: Obj73_Index
000198DE 117C 0007 001C             		move.b	#7,$1C(a0)
000198E4 2268 0034                  		movea.l	$34(a0),a1
000198E8 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000198EE 6D00                       		blt.s	loc_1862A
000198F0 117C 000B 001C             		move.b	#$B,$1C(a0)
000198F6 4A28 0001                  		tst.b	1(a0)
000198FA 6A00                       		bpl.s	Obj73_FlameDel
000198FC 6000                       		bra.s	loc_18636
000198FE                            ; ===========================================================================
000198FE                            
000198FE                            loc_1862A:
000198FE 4A69 0010                  		tst.w	$10(a1)
00019902 6700                       		beq.s	loc_18636
00019904 117C 0008 001C             		move.b	#8,$1C(a0)
0001990A                            
0001990A                            loc_18636:
0001990A 6000                       		bra.s	Obj73_Display
0001990C                            ; ===========================================================================
0001990C                            
0001990C                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001990C 4EF9 0000 E78C             		jmp	DeleteObject
00019912                            ; ===========================================================================
00019912                            
00019912                            Obj73_Display:
00019912 43F9 0001 8FE2             		lea	(Ani_Eggman).l,a1
00019918 4EB9 0000 B79E             		jsr	AnimateSprite
0001991E                            
0001991E                            loc_1864A:
0001991E 2268 0034                  		movea.l	$34(a0),a1
00019922 3169 0008 0008             		move.w	8(a1),8(a0)
00019928 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001992E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019934 7003                       		moveq	#3,d0
00019936 C028 0022                  		and.b	$22(a0),d0
0001993A 0228 00FC 0001             		andi.b	#-4,1(a0)
00019940 8128 0001                  		or.b	d0,1(a0)
00019944 4EF9 0000 E750             		jmp	DisplaySprite
0001994A                            ; ===========================================================================
0001994A                            
0001994A                            Obj73_TubeMain:				; XREF: Obj73_Index
0001994A 2268 0034                  		movea.l	$34(a0),a1
0001994E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019954 6600                       		bne.s	loc_18688
00019956 4A28 0001                  		tst.b	1(a0)
0001995A 6A00                       		bpl.s	Obj73_TubeDel
0001995C                            
0001995C                            loc_18688:
0001995C 217C 0001 910E 0004        		move.l	#Map_BossItems,4(a0)
00019964 317C 246C 0002             		move.w	#$246C,2(a0)
0001996A 117C 0004 001A             		move.b	#4,$1A(a0)
00019970 60AC                       		bra.s	loc_1864A
00019972                            ; ===========================================================================
00019972                            
00019972                            Obj73_TubeDel:
00019972 4EF9 0000 E78C             		jmp	DeleteObject
00019978                            ; ===========================================================================
00019978                            ; ---------------------------------------------------------------------------
00019978                            ; Object 74 - lava that	Eggman drops (MZ)
00019978                            ; ---------------------------------------------------------------------------
00019978                            
00019978                            Obj74:					; XREF: Obj_Index
00019978 7000                       		moveq	#0,d0
0001997A 1028 0024                  		move.b	$24(a0),d0
0001997E 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00019982 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00019986 4EF9 0000 E750             		jmp	DisplaySprite
0001998C                            ; ===========================================================================
0001998C 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001998E 0000                       		dc.w Obj74_Action-Obj74_Index
00019990 0000                       		dc.w loc_18886-Obj74_Index
00019992 0000                       		dc.w Obj74_Delete3-Obj74_Index
00019994                            ; ===========================================================================
00019994                            
00019994                            Obj74_Main:				; XREF: Obj74_Index
00019994 117C 0008 0016             		move.b	#8,$16(a0)
0001999A 117C 0008 0017             		move.b	#8,$17(a0)
000199A0 217C 0000 C39C 0004        		move.l	#Map_obj14,4(a0)
000199A8 317C 0345 0002             		move.w	#$345,2(a0)
000199AE 117C 0004 0001             		move.b	#4,1(a0)
000199B4 117C 0005 0018             		move.b	#5,$18(a0)
000199BA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000199C0 117C 0008 0019             		move.b	#8,$19(a0)
000199C6 5428 0024                  		addq.b	#2,$24(a0)
000199CA 4A28 0028                  		tst.b	$28(a0)
000199CE 6600                       		bne.s	loc_1870A
000199D0 117C 008B 0020             		move.b	#$8B,$20(a0)
000199D6 5428 0024                  		addq.b	#2,$24(a0)
000199DA 6000 0000                  		bra.w	loc_18886
000199DE                            ; ===========================================================================
000199DE                            
000199DE                            loc_1870A:
000199DE 117C 001E 0029             		move.b	#$1E,$29(a0)
000199E4 303C 00AE                  		move.w	#$AE,d0
000199E8 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play lava sound
000199EE                            
000199EE                            Obj74_Action:				; XREF: Obj74_Index
000199EE 7000                       		moveq	#0,d0
000199F0 1028 0025                  		move.b	$25(a0),d0
000199F4 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
000199F8 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
000199FC 4EB9 0000 E72A             		jsr	SpeedToPos
00019A02 43F9 0000 F60A             		lea	(Ani_obj14).l,a1
00019A08 4EB9 0000 B79E             		jsr	AnimateSprite
00019A0E 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00019A14 6200                       		bhi.s	Obj74_Delete
00019A16 4E75                       		rts	
00019A18                            ; ===========================================================================
00019A18                            
00019A18                            Obj74_Delete:
00019A18 4EF9 0000 E78C             		jmp	DeleteObject
00019A1E                            ; ===========================================================================
00019A1E 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00019A20 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00019A22 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00019A24 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00019A26                            ; ===========================================================================
00019A26                            
00019A26                            Obj74_Drop:				; XREF: Obj74_Index2
00019A26 08E8 0001 0022             		bset	#1,$22(a0)
00019A2C 5328 0029                  		subq.b	#1,$29(a0)
00019A30 6A00                       		bpl.s	locret_18780
00019A32 117C 008B 0020             		move.b	#$8B,$20(a0)
00019A38 4228 0028                  		clr.b	$28(a0)
00019A3C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019A42 08A8 0001 0022             		bclr	#1,$22(a0)
00019A48 6100 C618                  		bsr.w	ObjHitFloor
00019A4C 4A41                       		tst.w	d1
00019A4E 6A00                       		bpl.s	locret_18780
00019A50 5428 0025                  		addq.b	#2,$25(a0)
00019A54                            
00019A54                            locret_18780:
00019A54 4E75                       		rts	
00019A56                            ; ===========================================================================
00019A56                            
00019A56                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00019A56 5568 000C                  		subq.w	#2,$C(a0)
00019A5A 08E8 0007 0002             		bset	#7,2(a0)
00019A60 317C 00A0 0010             		move.w	#$A0,$10(a0)
00019A66 4268 0012                  		clr.w	$12(a0)
00019A6A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019A70 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019A76 117C 0003 0029             		move.b	#3,$29(a0)
00019A7C 4EB9 0000 EBEC             		jsr	SingleObjLoad2
00019A82 6600                       		bne.s	loc_187CA
00019A84 47D1                       		lea	(a1),a3
00019A86 45D0                       		lea	(a0),a2
00019A88 7003                       		moveq	#3,d0
00019A8A                            
00019A8A                            Obj74_Loop:
00019A8A 26DA                       		move.l	(a2)+,(a3)+
00019A8C 26DA                       		move.l	(a2)+,(a3)+
00019A8E 26DA                       		move.l	(a2)+,(a3)+
00019A90 26DA                       		move.l	(a2)+,(a3)+
00019A92 51C8 FFF6                  		dbf	d0,Obj74_Loop
00019A96                            
00019A96 4469 0010                  		neg.w	$10(a1)
00019A9A 5429 0025                  		addq.b	#2,$25(a1)
00019A9E                            
00019A9E                            loc_187CA:
00019A9E 5428 0025                  		addq.b	#2,$25(a0)
00019AA2 4E75                       		rts	
00019AA4                            
00019AA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019AA4                            
00019AA4                            
00019AA4                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00019AA4 4EB9 0000 EBEC             		jsr	SingleObjLoad2
00019AAA 6600                       		bne.s	locret_187EE
00019AAC 3368 0008 0008             		move.w	8(a0),8(a1)
00019AB2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019AB8 12BC 0074                  		move.b	#$74,(a1)
00019ABC 337C 0067 0028             		move.w	#$67,$28(a1)
00019AC2                            
00019AC2                            locret_187EE:
00019AC2 4E75                       		rts	
00019AC4                            ; End of function Obj74_Duplicate2
00019AC4                            
00019AC4                            ; ===========================================================================
00019AC4                            
00019AC4                            Obj74_Duplicate:			; XREF: Obj74_Index2
00019AC4 6100 C59C                  		bsr.w	ObjHitFloor
00019AC8 4A41                       		tst.w	d1
00019ACA 6A00                       		bpl.s	loc_18826
00019ACC 3028 0008                  		move.w	8(a0),d0
00019AD0 0C40 1940                  		cmpi.w	#$1940,d0
00019AD4 6E00                       		bgt.s	loc_1882C
00019AD6 3228 0030                  		move.w	$30(a0),d1
00019ADA B240                       		cmp.w	d0,d1
00019ADC 6700                       		beq.s	loc_1881E
00019ADE 0240 0010                  		andi.w	#$10,d0
00019AE2 0241 0010                  		andi.w	#$10,d1
00019AE6 B240                       		cmp.w	d0,d1
00019AE8 6700                       		beq.s	loc_1881E
00019AEA 61B8                       		bsr.s	Obj74_Duplicate2
00019AEC 3168 0008 0032             		move.w	8(a0),$32(a0)
00019AF2                            
00019AF2                            loc_1881E:
00019AF2 3168 0008 0030             		move.w	8(a0),$30(a0)
00019AF8 4E75                       		rts	
00019AFA                            ; ===========================================================================
00019AFA                            
00019AFA                            loc_18826:
00019AFA 5428 0025                  		addq.b	#2,$25(a0)
00019AFE 4E75                       		rts	
00019B00                            ; ===========================================================================
00019B00                            
00019B00                            loc_1882C:
00019B00 5428 0024                  		addq.b	#2,$24(a0)
00019B04 4E75                       		rts	
00019B06                            ; ===========================================================================
00019B06                            
00019B06                            Obj74_FallEdge:				; XREF: Obj74_Index2
00019B06 08A8 0001 0022             		bclr	#1,$22(a0)
00019B0C 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00019B12 3028 0008                  		move.w	8(a0),d0
00019B16 9068 0032                  		sub.w	$32(a0),d0
00019B1A 6A00                       		bpl.s	loc_1884A
00019B1C 4440                       		neg.w	d0
00019B1E                            
00019B1E                            loc_1884A:
00019B1E 0C40 0012                  		cmpi.w	#$12,d0
00019B22 6600                       		bne.s	loc_18856
00019B24 08A8 0007 0002             		bclr	#7,2(a0)
00019B2A                            
00019B2A                            loc_18856:
00019B2A 6100 C536                  		bsr.w	ObjHitFloor
00019B2E 4A41                       		tst.w	d1
00019B30 6A00                       		bpl.s	locret_1887E
00019B32 5328 0029                  		subq.b	#1,$29(a0)
00019B36 6700                       		beq.s	Obj74_Delete2
00019B38 4268 0012                  		clr.w	$12(a0)
00019B3C 3168 0032 0008             		move.w	$32(a0),8(a0)
00019B42 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019B48 08E8 0007 0002             		bset	#7,2(a0)
00019B4E 5528 0025                  		subq.b	#2,$25(a0)
00019B52                            
00019B52                            locret_1887E:
00019B52 4E75                       		rts	
00019B54                            ; ===========================================================================
00019B54                            
00019B54                            Obj74_Delete2:
00019B54 4EF9 0000 E78C             		jmp	DeleteObject
00019B5A                            ; ===========================================================================
00019B5A                            
00019B5A                            loc_18886:				; XREF: Obj74_Index
00019B5A 08E8 0007 0002             		bset	#7,2(a0)
00019B60 5328 0029                  		subq.b	#1,$29(a0)
00019B64 6600                       		bne.s	Obj74_Animate
00019B66 117C 0001 001C             		move.b	#1,$1C(a0)
00019B6C 5968 000C                  		subq.w	#4,$C(a0)
00019B70 4228 0020                  		clr.b	$20(a0)
00019B74                            
00019B74                            Obj74_Animate:
00019B74 43F9 0000 F60A             		lea	(Ani_obj14).l,a1
00019B7A 4EF9 0000 B79E             		jmp	AnimateSprite
00019B80                            ; ===========================================================================
00019B80                            
00019B80                            Obj74_Delete3:				; XREF: Obj74_Index
00019B80 4EF9 0000 E78C             		jmp	DeleteObject
00019B86                            ; ===========================================================================
00019B86                            
00019B86                            Obj7A_Delete:
00019B86 4EF9 0000 E78C             		jmp	DeleteObject
00019B8C                            ; ===========================================================================
00019B8C                            ; ---------------------------------------------------------------------------
00019B8C                            ; Object 7A - Eggman (SLZ)
00019B8C                            ; ---------------------------------------------------------------------------
00019B8C                            
00019B8C                            Obj7A:					; XREF: Obj_Index
00019B8C 7000                       		moveq	#0,d0
00019B8E 1028 0024                  		move.b	$24(a0),d0
00019B92 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00019B96 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00019B9A                            ; ===========================================================================
00019B9A 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00019B9C 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00019B9E 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00019BA0 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00019BA2 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00019BA4                            
00019BA4 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019BA7 0401 04                    		dc.b 4,	1, 4
00019BAA 0607 04                    		dc.b 6,	7, 4
00019BAD 0800 03                    		dc.b 8,	0, 3
00019BB0                            ; ===========================================================================
00019BB0                            
00019BB0                            Obj7A_Main:				; XREF: Obj7A_Index
00019BB0 317C 2188 0008             		move.w	#$2188,8(a0)
00019BB6 317C 0228 000C             		move.w	#$228,$C(a0)
00019BBC 3168 0008 0030             		move.w	8(a0),$30(a0)
00019BC2 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019BC8 117C 000F 0020             		move.b	#$F,$20(a0)
00019BCE 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019BD4 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00019BD8 2248                       		movea.l	a0,a1
00019BDA 7203                       		moveq	#3,d1
00019BDC 6000                       		bra.s	Obj7A_LoadBoss
00019BDE                            ; ===========================================================================
00019BDE                            
00019BDE                            Obj7A_Loop:
00019BDE 4EB9 0000 EBEC             		jsr	SingleObjLoad2
00019BE4 6600                       		bne.s	loc_1895C
00019BE6 12BC 007A                  		move.b	#$7A,0(a1)
00019BEA 3368 0008 0008             		move.w	8(a0),8(a1)
00019BF0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019BF6                            
00019BF6                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00019BF6 08A8 0000 0022             		bclr	#0,$22(a0)
00019BFC 4229 0025                  		clr.b	$25(a1)
00019C00 135A 0024                  		move.b	(a2)+,$24(a1)
00019C04 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C08 135A 0018                  		move.b	(a2)+,$18(a1)
00019C0C 237C 0001 9046 0004        		move.l	#Map_Eggman,4(a1)
00019C14 337C 0400 0002             		move.w	#$400,2(a1)
00019C1A 137C 0004 0001             		move.b	#4,1(a1)
00019C20 137C 0020 0019             		move.b	#$20,$19(a1)
00019C26 2348 0034                  		move.l	a0,$34(a1)
00019C2A 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019C2E                            
00019C2E                            loc_1895C:
00019C2E 43F8 D040                  		lea	($FFFFD040).w,a1
00019C32 45E8 002A                  		lea	$2A(a0),a2
00019C36 705E                       		moveq	#$5E,d0
00019C38 723E                       		moveq	#$3E,d1
00019C3A                            
00019C3A                            loc_18968:
00019C3A B011                       		cmp.b	(a1),d0
00019C3C 6600                       		bne.s	loc_18974
00019C3E 4A29 0028                  		tst.b	$28(a1)
00019C42 6700                       		beq.s	loc_18974
00019C44 34C9                       		move.w	a1,(a2)+
00019C46                            
00019C46                            loc_18974:
00019C46 D2FC 0040                  		adda.w	#$40,a1
00019C4A 51C9 FFEE                  		dbf	d1,loc_18968
00019C4E                            
00019C4E                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00019C4E 7000                       		moveq	#0,d0
00019C50 1028 0025                  		move.b	$25(a0),d0
00019C54 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00019C58 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019C5C 43F9 0001 8FE2             		lea	(Ani_Eggman).l,a1
00019C62 4EB9 0000 B79E             		jsr	AnimateSprite
00019C68 7003                       		moveq	#3,d0
00019C6A C028 0022                  		and.b	$22(a0),d0
00019C6E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019C74 8128 0001                  		or.b	d0,1(a0)
00019C78 4EF9 0000 E750             		jmp	DisplaySprite
00019C7E                            ; ===========================================================================
00019C7E 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00019C80 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00019C82 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00019C84 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00019C86 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00019C88 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00019C8A                            ; ===========================================================================
00019C8A                            
00019C8A                            loc_189B8:				; XREF: Obj7A_ShipIndex
00019C8A 317C FF00 0010             		move.w	#-$100,$10(a0)
00019C90 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00019C96 6400                       		bcc.s	loc_189CA
00019C98 5428 0025                  		addq.b	#2,$25(a0)
00019C9C                            
00019C9C                            loc_189CA:
00019C9C 6100 EF02                  		bsr.w	BossMove
00019CA0 1028 003F                  		move.b	$3F(a0),d0
00019CA4 5428 003F                  		addq.b	#2,$3F(a0)
00019CA8 4EB9 0000 3424             		jsr	(CalcSine).l
00019CAE EC40                       		asr.w	#6,d0
00019CB0 D068 0038                  		add.w	$38(a0),d0
00019CB4 3140 000C                  		move.w	d0,$C(a0)
00019CB8 3168 0030 0008             		move.w	$30(a0),8(a0)
00019CBE 6000                       		bra.s	loc_189FE
00019CC0                            ; ===========================================================================
00019CC0                            
00019CC0                            loc_189EE:
00019CC0 6100 EEDE                  		bsr.w	BossMove
00019CC4 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019CCA 3168 0030 0008             		move.w	$30(a0),8(a0)
00019CD0                            
00019CD0                            loc_189FE:
00019CD0 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019CD6 6400                       		bcc.s	locret_18A44
00019CD8 4A28 0022                  		tst.b	$22(a0)
00019CDC 6B00                       		bmi.s	loc_18A46
00019CDE 4A28 0020                  		tst.b	$20(a0)
00019CE2 6600                       		bne.s	locret_18A44
00019CE4 4A28 003E                  		tst.b	$3E(a0)
00019CE8 6600                       		bne.s	loc_18A28
00019CEA 117C 0020 003E             		move.b	#$20,$3E(a0)
00019CF0 303C 00AC                  		move.w	#$AC,d0
00019CF4 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019CFA                            
00019CFA                            loc_18A28:
00019CFA 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019CFE 7000                       		moveq	#0,d0
00019D00 4A51                       		tst.w	(a1)
00019D02 6600                       		bne.s	loc_18A36
00019D04 303C 0EEE                  		move.w	#$EEE,d0
00019D08                            
00019D08                            loc_18A36:
00019D08 3280                       		move.w	d0,(a1)
00019D0A 5328 003E                  		subq.b	#1,$3E(a0)
00019D0E 6600                       		bne.s	locret_18A44
00019D10 117C 000F 0020             		move.b	#$F,$20(a0)
00019D16                            
00019D16                            locret_18A44:
00019D16 4E75                       		rts	
00019D18                            ; ===========================================================================
00019D18                            
00019D18                            loc_18A46:
00019D18 7064                       		moveq	#100,d0
00019D1A 6100 0000                  		bsr.w	AddPoints
00019D1E 117C 0006 0025             		move.b	#6,$25(a0)
00019D24 117C 0078 003C             		move.b	#$78,$3C(a0)
00019D2A 4268 0010                  		clr.w	$10(a0)
00019D2E 4E75                       		rts	
00019D30                            ; ===========================================================================
00019D30                            
00019D30                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019D30 3028 0030                  		move.w	$30(a0),d0
00019D34 317C 0200 0010             		move.w	#$200,$10(a0)
00019D3A 0828 0000 0022             		btst	#0,$22(a0)
00019D40 6600                       		bne.s	loc_18A7C
00019D42 4468 0010                  		neg.w	$10(a0)
00019D46 0C40 2008                  		cmpi.w	#$2008,d0
00019D4A 6E00                       		bgt.s	loc_18A88
00019D4C 6000                       		bra.s	loc_18A82
00019D4E                            ; ===========================================================================
00019D4E                            
00019D4E                            loc_18A7C:
00019D4E 0C40 2138                  		cmpi.w	#$2138,d0
00019D52 6D00                       		blt.s	loc_18A88
00019D54                            
00019D54                            loc_18A82:
00019D54 0868 0000 0022             		bchg	#0,$22(a0)
00019D5A                            
00019D5A                            loc_18A88:
00019D5A 3028 0008                  		move.w	8(a0),d0
00019D5E 72FF                       		moveq	#-1,d1
00019D60 7402                       		moveq	#2,d2
00019D62 45E8 002A                  		lea	$2A(a0),a2
00019D66 7828                       		moveq	#$28,d4
00019D68 4A68 0010                  		tst.w	$10(a0)
00019D6C 6A00                       		bpl.s	loc_18A9E
00019D6E 4444                       		neg.w	d4
00019D70                            
00019D70                            loc_18A9E:
00019D70 321A                       		move.w	(a2)+,d1
00019D72 2641                       		movea.l	d1,a3
00019D74 082B 0003 0022             		btst	#3,$22(a3)
00019D7A 6600                       		bne.s	loc_18AB4
00019D7C 362B 0008                  		move.w	8(a3),d3
00019D80 D644                       		add.w	d4,d3
00019D82 9640                       		sub.w	d0,d3
00019D84 6700                       		beq.s	loc_18AC0
00019D86                            
00019D86                            loc_18AB4:
00019D86 51CA FFE8                  		dbf	d2,loc_18A9E
00019D8A                            
00019D8A 1142 0028                  		move.b	d2,$28(a0)
00019D8E 6000 FF0C                  		bra.w	loc_189CA
00019D92                            ; ===========================================================================
00019D92                            
00019D92                            loc_18AC0:
00019D92 1142 0028                  		move.b	d2,$28(a0)
00019D96 5428 0025                  		addq.b	#2,$25(a0)
00019D9A 117C 0028 003C             		move.b	#$28,$3C(a0)
00019DA0 6000 FEFA                  		bra.w	loc_189CA
00019DA4                            ; ===========================================================================
00019DA4                            
00019DA4                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00019DA4 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00019DAA 6600                       		bne.s	loc_18B36
00019DAC 70FF                       		moveq	#-1,d0
00019DAE 1028 0028                  		move.b	$28(a0),d0
00019DB2 4880                       		ext.w	d0
00019DB4 6B00                       		bmi.s	loc_18B40
00019DB6 5540                       		subq.w	#2,d0
00019DB8 4440                       		neg.w	d0
00019DBA D040                       		add.w	d0,d0
00019DBC 43E8 002A                  		lea	$2A(a0),a1
00019DC0 3031 0000                  		move.w	(a1,d0.w),d0
00019DC4 2440                       		movea.l	d0,a2
00019DC6 43F8 D040                  		lea	($FFFFD040).w,a1
00019DCA 723E                       		moveq	#$3E,d1
00019DCC                            
00019DCC                            loc_18AFA:
00019DCC B0A9 003C                  		cmp.l	$3C(a1),d0
00019DD0 6700                       		beq.s	loc_18B40
00019DD2 D2FC 0040                  		adda.w	#$40,a1
00019DD6 51C9 FFF4                  		dbf	d1,loc_18AFA
00019DDA                            
00019DDA 2F08                       		move.l	a0,-(sp)
00019DDC 41D2                       		lea	(a2),a0
00019DDE 4EB9 0000 EBEC             		jsr	SingleObjLoad2
00019DE4 205F                       		movea.l	(sp)+,a0
00019DE6 6600                       		bne.s	loc_18B40
00019DE8 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019DEC 3368 0008 0008             		move.w	8(a0),8(a1)
00019DF2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019DF8 0669 0020 000C             		addi.w	#$20,$C(a1)
00019DFE 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019E04 234A 003C                  		move.l	a2,$3C(a1)
00019E08                            
00019E08                            loc_18B36:
00019E08 5328 003C                  		subq.b	#1,$3C(a0)
00019E0C 6700                       		beq.s	loc_18B40
00019E0E 6000 FEC0                  		bra.w	loc_189FE
00019E12                            ; ===========================================================================
00019E12                            
00019E12                            loc_18B40:
00019E12 5528 0025                  		subq.b	#2,$25(a0)
00019E16 6000 FE84                  		bra.w	loc_189CA
00019E1A                            ; ===========================================================================
00019E1A                            
00019E1A                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019E1A 5328 003C                  		subq.b	#1,$3C(a0)
00019E1E 6B00                       		bmi.s	loc_18B52
00019E20 6000 ED3C                  		bra.w	BossDefeated
00019E24                            ; ===========================================================================
00019E24                            
00019E24                            loc_18B52:
00019E24 5428 0025                  		addq.b	#2,$25(a0)
00019E28 4268 0012                  		clr.w	$12(a0)
00019E2C 08E8 0000 0022             		bset	#0,$22(a0)
00019E32 08A8 0007 0022             		bclr	#7,$22(a0)
00019E38 4268 0010                  		clr.w	$10(a0)
00019E3C 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019E42 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019E46 6600                       		bne.s	loc_18B7C
00019E48 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019E4E                            
00019E4E                            loc_18B7C:
00019E4E 6000 FE80                  		bra.w	loc_189FE
00019E52                            ; ===========================================================================
00019E52                            
00019E52                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019E52 5228 003C                  		addq.b	#1,$3C(a0)
00019E56 6700                       		beq.s	loc_18B90
00019E58 6A00                       		bpl.s	loc_18B96
00019E5A 0668 0018 0012             		addi.w	#$18,$12(a0)
00019E60 6000                       		bra.s	loc_18BC2
00019E62                            ; ===========================================================================
00019E62                            
00019E62                            loc_18B90:
00019E62 4268 0012                  		clr.w	$12(a0)
00019E66 6000                       		bra.s	loc_18BC2
00019E68                            ; ===========================================================================
00019E68                            
00019E68                            loc_18B96:
00019E68 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019E6E 6500                       		bcs.s	loc_18BAE
00019E70 6700                       		beq.s	loc_18BB4
00019E72 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019E78 6500                       		bcs.s	loc_18BC2
00019E7A 5428 0025                  		addq.b	#2,$25(a0)
00019E7E 6000                       		bra.s	loc_18BC2
00019E80                            ; ===========================================================================
00019E80                            
00019E80                            loc_18BAE:
00019E80 5168 0012                  		subq.w	#8,$12(a0)
00019E84 6000                       		bra.s	loc_18BC2
00019E86                            ; ===========================================================================
00019E86                            
00019E86                            loc_18BB4:
00019E86 4268 0012                  		clr.w	$12(a0)
00019E8A 303C 0084                  		move.w	#$84,d0
00019E8E 4EB9 0000 1C7C             		jsr	(PlaySound).l	; play SLZ music
00019E94                            
00019E94                            loc_18BC2:
00019E94 6000 FE2A                  		bra.w	loc_189EE
00019E98                            ; ===========================================================================
00019E98                            
00019E98                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00019E98 317C 0400 0010             		move.w	#$400,$10(a0)
00019E9E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019EA4 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00019EAA 6400                       		bcc.s	loc_18BE0
00019EAC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019EB0 6000                       		bra.s	loc_18BE8
00019EB2                            ; ===========================================================================
00019EB2                            
00019EB2                            loc_18BE0:
00019EB2 4A28 0001                  		tst.b	1(a0)
00019EB6 6A00 FCCE                  		bpl.w	Obj7A_Delete
00019EBA                            
00019EBA                            loc_18BE8:
00019EBA 6100 ECE4                  		bsr.w	BossMove
00019EBE 6000 FDDC                  		bra.w	loc_189CA
00019EC2                            ; ===========================================================================
00019EC2                            
00019EC2                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00019EC2 7000                       		moveq	#0,d0
00019EC4 7201                       		moveq	#1,d1
00019EC6 2268 0034                  		movea.l	$34(a0),a1
00019ECA 1029 0025                  		move.b	$25(a1),d0
00019ECE 0C00 0006                  		cmpi.b	#6,d0
00019ED2 6B00                       		bmi.s	loc_18C06
00019ED4 720A                       		moveq	#$A,d1
00019ED6 6000                       		bra.s	loc_18C1A
00019ED8                            ; ===========================================================================
00019ED8                            
00019ED8                            loc_18C06:
00019ED8 4A29 0020                  		tst.b	$20(a1)
00019EDC 6600                       		bne.s	loc_18C10
00019EDE 7205                       		moveq	#5,d1
00019EE0 6000                       		bra.s	loc_18C1A
00019EE2                            ; ===========================================================================
00019EE2                            
00019EE2                            loc_18C10:
00019EE2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019EE8 6500                       		bcs.s	loc_18C1A
00019EEA 7204                       		moveq	#4,d1
00019EEC                            
00019EEC                            loc_18C1A:
00019EEC 1141 001C                  		move.b	d1,$1C(a0)
00019EF0 0C00 000A                  		cmpi.b	#$A,d0
00019EF4 6600                       		bne.s	loc_18C32
00019EF6 117C 0006 001C             		move.b	#6,$1C(a0)
00019EFC 4A28 0001                  		tst.b	1(a0)
00019F00 6A00 FC84                  		bpl.w	Obj7A_Delete
00019F04                            
00019F04                            loc_18C32:
00019F04 6000                       		bra.s	loc_18C6C
00019F06                            ; ===========================================================================
00019F06                            
00019F06                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019F06 117C 0008 001C             		move.b	#8,$1C(a0)
00019F0C 2268 0034                  		movea.l	$34(a0),a1
00019F10 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019F16 6600                       		bne.s	loc_18C56
00019F18 4A28 0001                  		tst.b	1(a0)
00019F1C 6A00 FC68                  		bpl.w	Obj7A_Delete
00019F20 117C 000B 001C             		move.b	#$B,$1C(a0)
00019F26 6000                       		bra.s	loc_18C6C
00019F28                            ; ===========================================================================
00019F28                            
00019F28                            loc_18C56:
00019F28 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019F2E 6E00                       		bgt.s	loc_18C6C
00019F30 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019F36 6D00                       		blt.s	loc_18C6C
00019F38 117C 0007 001C             		move.b	#7,$1C(a0)
00019F3E                            
00019F3E                            loc_18C6C:
00019F3E 43F9 0001 8FE2             		lea	(Ani_Eggman).l,a1
00019F44 4EB9 0000 B79E             		jsr	AnimateSprite
00019F4A                            
00019F4A                            loc_18C78:
00019F4A 2268 0034                  		movea.l	$34(a0),a1
00019F4E 3169 0008 0008             		move.w	8(a1),8(a0)
00019F54 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019F5A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019F60 7003                       		moveq	#3,d0
00019F62 C028 0022                  		and.b	$22(a0),d0
00019F66 0228 00FC 0001             		andi.b	#-4,1(a0)
00019F6C 8128 0001                  		or.b	d0,1(a0)
00019F70 4EF9 0000 E750             		jmp	DisplaySprite
00019F76                            ; ===========================================================================
00019F76                            
00019F76                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019F76 2268 0034                  		movea.l	$34(a0),a1
00019F7A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019F80 6600                       		bne.s	loc_18CB8
00019F82 4A28 0001                  		tst.b	1(a0)
00019F86 6A00 FBFE                  		bpl.w	Obj7A_Delete
00019F8A                            
00019F8A                            loc_18CB8:
00019F8A 217C 0001 910E 0004        		move.l	#Map_BossItems,4(a0)
00019F92 317C 246C 0002             		move.w	#$246C,2(a0)
00019F98 117C 0003 001A             		move.b	#3,$1A(a0)
00019F9E 60AA                       		bra.s	loc_18C78
00019FA0                            ; ===========================================================================
00019FA0                            ; ---------------------------------------------------------------------------
00019FA0                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00019FA0                            ; ---------------------------------------------------------------------------
00019FA0                            
00019FA0                            Obj7B:					; XREF: Obj_Index
00019FA0 7000                       		moveq	#0,d0
00019FA2 1028 0024                  		move.b	$24(a0),d0
00019FA6 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00019FAA 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00019FAE 3028 0030                  		move.w	$30(a0),d0
00019FB2 0240 FF80                  		andi.w	#$FF80,d0
00019FB6 3238 F700                  		move.w	($FFFFF700).w,d1
00019FBA 0441 0080                  		subi.w	#$80,d1
00019FBE 0241 FF80                  		andi.w	#$FF80,d1
00019FC2 9041                       		sub.w	d1,d0
00019FC4 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019FC8 0C40 0280                  		cmpi.w	#$280,d0
00019FCC 6200 FBB8                  		bhi.w	Obj7A_Delete
00019FD0 4EF9 0000 E750             		jmp	DisplaySprite
00019FD6                            ; ===========================================================================
00019FD6 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00019FD8 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019FDA 0000                       		dc.w loc_18DC6-Obj7B_Index
00019FDC 0000                       		dc.w loc_18EAA-Obj7B_Index
00019FDE 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019FE0 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019FE2                            ; ===========================================================================
00019FE2                            
00019FE2                            Obj7B_Main:				; XREF: Obj7B_Index
00019FE2 217C 0001 2B1C 0004        		move.l	#Map_obj5Ea,4(a0)
00019FEA 317C 0518 0002             		move.w	#$518,2(a0)
00019FF0 117C 0001 001A             		move.b	#1,$1A(a0)
00019FF6 0028 0004 0001             		ori.b	#4,1(a0)
00019FFC 117C 0004 0018             		move.b	#4,$18(a0)
0001A002 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A008 117C 000C 0019             		move.b	#$C,$19(a0)
0001A00E 2268 003C                  		movea.l	$3C(a0),a1
0001A012 3169 0008 0030             		move.w	8(a1),$30(a0)
0001A018 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001A01E 08E8 0000 0022             		bset	#0,$22(a0)
0001A024 3028 0008                  		move.w	8(a0),d0
0001A028 B069 0008                  		cmp.w	8(a1),d0
0001A02C 6E00                       		bgt.s	loc_18D68
0001A02E 08A8 0000 0022             		bclr	#0,$22(a0)
0001A034 117C 0002 003A             		move.b	#2,$3A(a0)
0001A03A                            
0001A03A                            loc_18D68:
0001A03A 5428 0024                  		addq.b	#2,$24(a0)
0001A03E                            
0001A03E                            Obj7B_Fall:				; XREF: Obj7B_Index
0001A03E 4EB9 0000 E6B8             		jsr	ObjectFall
0001A044 2268 003C                  		movea.l	$3C(a0),a1
0001A048 45F9 0000 0000             		lea	(word_19018).l,a2
0001A04E 7000                       		moveq	#0,d0
0001A050 1029 001A                  		move.b	$1A(a1),d0
0001A054 3228 0008                  		move.w	8(a0),d1
0001A058 9268 0030                  		sub.w	$30(a0),d1
0001A05C 6400                       		bcc.s	loc_18D8E
0001A05E 5440                       		addq.w	#2,d0
0001A060                            
0001A060                            loc_18D8E:
0001A060 D040                       		add.w	d0,d0
0001A062 3228 0034                  		move.w	$34(a0),d1
0001A066 D272 0000                  		add.w	(a2,d0.w),d1
0001A06A B268 000C                  		cmp.w	$C(a0),d1
0001A06E 6E00                       		bgt.s	locret_18DC4
0001A070 2268 003C                  		movea.l	$3C(a0),a1
0001A074 7202                       		moveq	#2,d1
0001A076 0828 0000 0022             		btst	#0,$22(a0)
0001A07C 6700                       		beq.s	loc_18DAE
0001A07E 7200                       		moveq	#0,d1
0001A080                            
0001A080                            loc_18DAE:
0001A080 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001A086 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001A08C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A092 6000 0000                  		bra.w	loc_18FA2
0001A096                            ; ===========================================================================
0001A096                            
0001A096                            locret_18DC4:
0001A096 4E75                       		rts	
0001A098                            ; ===========================================================================
0001A098                            
0001A098                            loc_18DC6:				; XREF: Obj7B_Index
0001A098 2268 003C                  		movea.l	$3C(a0),a1
0001A09C 7000                       		moveq	#0,d0
0001A09E 1028 003A                  		move.b	$3A(a0),d0
0001A0A2 9029 003A                  		sub.b	$3A(a1),d0
0001A0A6 6700                       		beq.s	loc_18E2A
0001A0A8 6400                       		bcc.s	loc_18DDA
0001A0AA 4400                       		neg.b	d0
0001A0AC                            
0001A0AC                            loc_18DDA:
0001A0AC 323C F7E8                  		move.w	#-$818,d1
0001A0B0 343C FEEC                  		move.w	#-$114,d2
0001A0B4 0C00 0001                  		cmpi.b	#1,d0
0001A0B8 6700                       		beq.s	loc_18E00
0001A0BA 323C F6A0                  		move.w	#-$960,d1
0001A0BE 343C FF0C                  		move.w	#-$F4,d2
0001A0C2 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001A0C8 6D00                       		blt.s	loc_18E00
0001A0CA 323C F5E0                  		move.w	#-$A20,d1
0001A0CE 343C FF80                  		move.w	#-$80,d2
0001A0D2                            
0001A0D2                            loc_18E00:
0001A0D2 3141 0012                  		move.w	d1,$12(a0)
0001A0D6 3142 0010                  		move.w	d2,$10(a0)
0001A0DA 3028 0008                  		move.w	8(a0),d0
0001A0DE 9068 0030                  		sub.w	$30(a0),d0
0001A0E2 6400                       		bcc.s	loc_18E16
0001A0E4 4468 0010                  		neg.w	$10(a0)
0001A0E8                            
0001A0E8                            loc_18E16:
0001A0E8 117C 0001 001A             		move.b	#1,$1A(a0)
0001A0EE 317C 0020 0028             		move.w	#$20,$28(a0)
0001A0F4 5428 0024                  		addq.b	#2,$24(a0)
0001A0F8 6000 0000                  		bra.w	loc_18EAA
0001A0FC                            ; ===========================================================================
0001A0FC                            
0001A0FC                            loc_18E2A:				; XREF: loc_18DC6
0001A0FC 45F9 0000 0000             		lea	(word_19018).l,a2
0001A102 7000                       		moveq	#0,d0
0001A104 1029 001A                  		move.b	$1A(a1),d0
0001A108 343C 0028                  		move.w	#$28,d2
0001A10C 3228 0008                  		move.w	8(a0),d1
0001A110 9268 0030                  		sub.w	$30(a0),d1
0001A114 6400                       		bcc.s	loc_18E48
0001A116 4442                       		neg.w	d2
0001A118 5440                       		addq.w	#2,d0
0001A11A                            
0001A11A                            loc_18E48:
0001A11A D040                       		add.w	d0,d0
0001A11C 3228 0034                  		move.w	$34(a0),d1
0001A120 D272 0000                  		add.w	(a2,d0.w),d1
0001A124 3141 000C                  		move.w	d1,$C(a0)
0001A128 D468 0030                  		add.w	$30(a0),d2
0001A12C 3142 0008                  		move.w	d2,8(a0)
0001A130 4268 000E                  		clr.w	$E(a0)
0001A134 4268 000A                  		clr.w	$A(a0)
0001A138 5368 0028                  		subq.w	#1,$28(a0)
0001A13C 6600                       		bne.s	loc_18E7A
0001A13E 317C 0020 0028             		move.w	#$20,$28(a0)
0001A144 117C 0008 0024             		move.b	#8,$24(a0)
0001A14A 4E75                       		rts	
0001A14C                            ; ===========================================================================
0001A14C                            
0001A14C                            loc_18E7A:
0001A14C 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001A152 6600                       		bne.s	loc_18E88
0001A154 117C 0005 001F             		move.b	#5,$1F(a0)
0001A15A                            
0001A15A                            loc_18E88:
0001A15A 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001A160 6600                       		bne.s	loc_18E96
0001A162 117C 0002 001F             		move.b	#2,$1F(a0)
0001A168                            
0001A168                            loc_18E96:
0001A168 5328 001E                  		subq.b	#1,$1E(a0)
0001A16C 6E00                       		bgt.s	locret_18EA8
0001A16E 0868 0000 001A             		bchg	#0,$1A(a0)
0001A174 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A17A                            
0001A17A                            locret_18EA8:
0001A17A 4E75                       		rts	
0001A17C                            ; ===========================================================================
0001A17C                            
0001A17C                            loc_18EAA:				; XREF: Obj7B_Index
0001A17C 43F8 D040                  		lea	($FFFFD040).w,a1
0001A180 707A                       		moveq	#$7A,d0
0001A182 7240                       		moveq	#$40,d1
0001A184 743E                       		moveq	#$3E,d2
0001A186                            
0001A186                            loc_18EB4:
0001A186 B011                       		cmp.b	(a1),d0
0001A188 6700                       		beq.s	loc_18EC0
0001A18A D2C1                       		adda.w	d1,a1
0001A18C 51CA FFF8                  		dbf	d2,loc_18EB4
0001A190                            
0001A190 6000                       		bra.s	loc_18F38
0001A192                            ; ===========================================================================
0001A192                            
0001A192                            loc_18EC0:
0001A192 3029 0008                  		move.w	8(a1),d0
0001A196 3229 000C                  		move.w	$C(a1),d1
0001A19A 3428 0008                  		move.w	8(a0),d2
0001A19E 3628 000C                  		move.w	$C(a0),d3
0001A1A2 45FA 0000                  		lea	byte_19022(pc),a2
0001A1A6 47FA 0000                  		lea	byte_19026(pc),a3
0001A1AA 181A                       		move.b	(a2)+,d4
0001A1AC 4884                       		ext.w	d4
0001A1AE D044                       		add.w	d4,d0
0001A1B0 181B                       		move.b	(a3)+,d4
0001A1B2 4884                       		ext.w	d4
0001A1B4 D444                       		add.w	d4,d2
0001A1B6 B440                       		cmp.w	d0,d2
0001A1B8 6500                       		bcs.s	loc_18F38
0001A1BA 181A                       		move.b	(a2)+,d4
0001A1BC 4884                       		ext.w	d4
0001A1BE D044                       		add.w	d4,d0
0001A1C0 181B                       		move.b	(a3)+,d4
0001A1C2 4884                       		ext.w	d4
0001A1C4 D444                       		add.w	d4,d2
0001A1C6 B042                       		cmp.w	d2,d0
0001A1C8 6500                       		bcs.s	loc_18F38
0001A1CA 181A                       		move.b	(a2)+,d4
0001A1CC 4884                       		ext.w	d4
0001A1CE D244                       		add.w	d4,d1
0001A1D0 181B                       		move.b	(a3)+,d4
0001A1D2 4884                       		ext.w	d4
0001A1D4 D644                       		add.w	d4,d3
0001A1D6 B641                       		cmp.w	d1,d3
0001A1D8 6500                       		bcs.s	loc_18F38
0001A1DA 181A                       		move.b	(a2)+,d4
0001A1DC 4884                       		ext.w	d4
0001A1DE D244                       		add.w	d4,d1
0001A1E0 181B                       		move.b	(a3)+,d4
0001A1E2 4884                       		ext.w	d4
0001A1E4 D644                       		add.w	d4,d3
0001A1E6 B243                       		cmp.w	d3,d1
0001A1E8 6500                       		bcs.s	loc_18F38
0001A1EA 5428 0024                  		addq.b	#2,$24(a0)
0001A1EE 4268 0028                  		clr.w	$28(a0)
0001A1F2 4229 0020                  		clr.b	$20(a1)
0001A1F6 5329 0021                  		subq.b	#1,$21(a1)
0001A1FA 6600                       		bne.s	loc_18F38
0001A1FC 08E9 0007 0022             		bset	#7,$22(a1)
0001A202 4268 0010                  		clr.w	$10(a0)
0001A206 4268 0012                  		clr.w	$12(a0)
0001A20A                            
0001A20A                            loc_18F38:
0001A20A 4A68 0012                  		tst.w	$12(a0)
0001A20E 6A00                       		bpl.s	loc_18F5C
0001A210 4EB9 0000 E6B8             		jsr	ObjectFall
0001A216 3028 0034                  		move.w	$34(a0),d0
0001A21A 0440 002F                  		subi.w	#$2F,d0
0001A21E B068 000C                  		cmp.w	$C(a0),d0
0001A222 6E00                       		bgt.s	loc_18F58
0001A224 4EB9 0000 E6B8             		jsr	ObjectFall
0001A22A                            
0001A22A                            loc_18F58:
0001A22A 6000 FF20                  		bra.w	loc_18E7A
0001A22E                            ; ===========================================================================
0001A22E                            
0001A22E                            loc_18F5C:
0001A22E 4EB9 0000 E6B8             		jsr	ObjectFall
0001A234 2268 003C                  		movea.l	$3C(a0),a1
0001A238 45F9 0000 0000             		lea	(word_19018).l,a2
0001A23E 7000                       		moveq	#0,d0
0001A240 1029 001A                  		move.b	$1A(a1),d0
0001A244 3228 0008                  		move.w	8(a0),d1
0001A248 9268 0030                  		sub.w	$30(a0),d1
0001A24C 6400                       		bcc.s	loc_18F7E
0001A24E 5440                       		addq.w	#2,d0
0001A250                            
0001A250                            loc_18F7E:
0001A250 D040                       		add.w	d0,d0
0001A252 3228 0034                  		move.w	$34(a0),d1
0001A256 D272 0000                  		add.w	(a2,d0.w),d1
0001A25A B268 000C                  		cmp.w	$C(a0),d1
0001A25E 6ECA                       		bgt.s	loc_18F58
0001A260 2268 003C                  		movea.l	$3C(a0),a1
0001A264 7202                       		moveq	#2,d1
0001A266 4A68 0010                  		tst.w	$10(a0)
0001A26A 6B00                       		bmi.s	loc_18F9C
0001A26C 7200                       		moveq	#0,d1
0001A26E                            
0001A26E                            loc_18F9C:
0001A26E 317C 0000 0028             		move.w	#0,$28(a0)
0001A274                            
0001A274                            loc_18FA2:
0001A274 1341 003A                  		move.b	d1,$3A(a1)
0001A278 1141 003A                  		move.b	d1,$3A(a0)
0001A27C B229 001A                  		cmp.b	$1A(a1),d1
0001A280 6700                       		beq.s	loc_19008
0001A282 08A9 0003 0022             		bclr	#3,$22(a1)
0001A288 6700                       		beq.s	loc_19008
0001A28A 4229 0025                  		clr.b	$25(a1)
0001A28E 137C 0002 0024             		move.b	#2,$24(a1)
0001A294 45F8 D000                  		lea	($FFFFD000).w,a2
0001A298 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001A29E 446A 0012                  		neg.w	$12(a2)
0001A2A2 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001A2A8 6600                       		bne.s	loc_18FDC
0001A2AA E0EA 0012                  		asr	$12(a2)
0001A2AE                            
0001A2AE                            loc_18FDC:
0001A2AE 08EA 0001 0022             		bset	#1,$22(a2)
0001A2B4 08AA 0003 0022             		bclr	#3,$22(a2)
0001A2BA 422A 003C                  		clr.b	$3C(a2)
0001A2BE 2F08                       		move.l	a0,-(sp)
0001A2C0 41D2                       		lea	(a2),a0
0001A2C2 4EBA A2E0                  		jsr	Obj01_ChkRoll
0001A2C6 205F                       		movea.l	(sp)+,a0
0001A2C8 157C 0002 0024             		move.b	#2,$24(a2)
0001A2CE 303C 00CC                  		move.w	#$CC,d0
0001A2D2 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001A2D8                            
0001A2D8                            loc_19008:
0001A2D8 4268 0010                  		clr.w	$10(a0)
0001A2DC 4268 0012                  		clr.w	$12(a0)
0001A2E0 5428 0024                  		addq.b	#2,$24(a0)
0001A2E4 6000 FE66                  		bra.w	loc_18E7A
0001A2E8                            ; ===========================================================================
0001A2E8 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001A2F2                            		even
0001A2F2 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001A2F6                            		even
0001A2F6 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001A2FA                            		even
0001A2FA                            ; ===========================================================================
0001A2FA                            
0001A2FA                            Obj7B_Explode:				; XREF: Obj7B_Index
0001A2FA 10BC 003F                  		move.b	#$3F,(a0)
0001A2FE 4228 0024                  		clr.b	$24(a0)
0001A302 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001A308 6700                       		beq.s	Obj7B_MakeFrag
0001A30A 4E75                       		rts	
0001A30C                            ; ===========================================================================
0001A30C                            
0001A30C                            Obj7B_MakeFrag:
0001A30C 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001A312 7203                       		moveq	#3,d1
0001A314 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001A318                            
0001A318                            Obj7B_Loop:
0001A318 4EB9 0000 EBD6             		jsr	SingleObjLoad
0001A31E 6600                       		bne.s	loc_1909A
0001A320 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001A324 137C 000A 0024             		move.b	#$A,$24(a1)
0001A32A 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001A332 137C 0003 0018             		move.b	#3,$18(a1)
0001A338 337C 0518 0002             		move.w	#$518,2(a1)
0001A33E 3368 0008 0008             		move.w	8(a0),8(a1)
0001A344 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A34A 335A 0010                  		move.w	(a2)+,$10(a1)
0001A34E 335A 0012                  		move.w	(a2)+,$12(a1)
0001A352 137C 0098 0020             		move.b	#$98,$20(a1)
0001A358 0029 0004 0001             		ori.b	#4,1(a1)
0001A35E 08E9 0007 0001             		bset	#7,1(a1)
0001A364 137C 000C 0019             		move.b	#$C,$19(a1)
0001A36A                            
0001A36A                            loc_1909A:
0001A36A 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001A36E                            
0001A36E 4E75                       		rts	
0001A370                            ; ===========================================================================
0001A370 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001A374 FF60 FDC0                  		dc.w $FF60, $FDC0
0001A378 0100 FCC0                  		dc.w $100, $FCC0
0001A37C 00A0 FDC0                  		dc.w $A0, $FDC0
0001A380                            ; ===========================================================================
0001A380                            
0001A380                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001A380 4EB9 0000 E72A             		jsr	SpeedToPos
0001A386 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A38C 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001A392 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A398 7004                       		moveq	#4,d0
0001A39A C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A39E E448                       		lsr.w	#2,d0
0001A3A0 1140 001A                  		move.b	d0,$1A(a0)
0001A3A4 4A28 0001                  		tst.b	1(a0)
0001A3A8 6A00 F7DC                  		bpl.w	Obj7A_Delete
0001A3AC 4E75                       		rts	
0001A3AE                            ; ===========================================================================
0001A3AE                            ; ---------------------------------------------------------------------------
0001A3AE                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001A3AE                            ; ---------------------------------------------------------------------------
0001A3AE                            Map_obj7B:
0001A3AE                            	include "_maps\obj7B.asm"
0001A3AE                            ; ---------------------------------------------------------------------------
0001A3AE                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001A3AE                            ; ---------------------------------------------------------------------------
0001A3AE 0000                       		dc.w byte_190E2-Map_obj7B
0001A3B0 0000                       		dc.w byte_190E8-Map_obj7B
0001A3B2 01                         byte_190E2:	dc.b 1
0001A3B3 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001A3B8 01                         byte_190E8:	dc.b 1
0001A3B9 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001A3BE                            		even
0001A3BE                            		even
0001A3BE                            
0001A3BE                            ; ===========================================================================
0001A3BE                            ; ---------------------------------------------------------------------------
0001A3BE                            ; Object 75 - Eggman (SYZ)
0001A3BE                            ; ---------------------------------------------------------------------------
0001A3BE                            
0001A3BE                            Obj75:					; XREF: Obj_Index
0001A3BE 7000                       		moveq	#0,d0
0001A3C0 1028 0024                  		move.b	$24(a0),d0
0001A3C4 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001A3C8 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001A3CC                            ; ===========================================================================
0001A3CC 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001A3CE 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001A3D0 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001A3D2 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001A3D4 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001A3D6                            
0001A3D6 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001A3D9 0401 05                    		dc.b 4,	1, 5
0001A3DC 0607 05                    		dc.b 6,	7, 5
0001A3DF 0800 05                    		dc.b 8,	0, 5
0001A3E2                            ; ===========================================================================
0001A3E2                            
0001A3E2                            Obj75_Main:				; XREF: Obj75_Index
0001A3E2 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001A3E8 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001A3EE 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A3F4 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A3FA 117C 000F 0020             		move.b	#$F,$20(a0)
0001A400 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A406 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001A40A 2248                       		movea.l	a0,a1
0001A40C 7203                       		moveq	#3,d1
0001A40E 6000                       		bra.s	Obj75_LoadBoss
0001A410                            ; ===========================================================================
0001A410                            
0001A410                            Obj75_Loop:
0001A410 4EB9 0000 EBEC             		jsr	SingleObjLoad2
0001A416 6600                       		bne.s	Obj75_ShipMain
0001A418 12BC 0075                  		move.b	#$75,(a1)
0001A41C 3368 0008 0008             		move.w	8(a0),8(a1)
0001A422 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A428                            
0001A428                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001A428 08A8 0000 0022             		bclr	#0,$22(a0)
0001A42E 4229 0025                  		clr.b	$25(a1)
0001A432 135A 0024                  		move.b	(a2)+,$24(a1)
0001A436 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A43A 135A 0018                  		move.b	(a2)+,$18(a1)
0001A43E 237C 0001 9046 0004        		move.l	#Map_Eggman,4(a1)
0001A446 337C 0400 0002             		move.w	#$400,2(a1)
0001A44C 137C 0004 0001             		move.b	#4,1(a1)
0001A452 137C 0020 0019             		move.b	#$20,$19(a1)
0001A458 2348 0034                  		move.l	a0,$34(a1)
0001A45C 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001A460                            
0001A460                            Obj75_ShipMain:				; XREF: Obj75_Index
0001A460 7000                       		moveq	#0,d0
0001A462 1028 0025                  		move.b	$25(a0),d0
0001A466 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001A46A 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001A46E 43F9 0001 8FE2             		lea	(Ani_Eggman).l,a1
0001A474 4EB9 0000 B79E             		jsr	AnimateSprite
0001A47A 7003                       		moveq	#3,d0
0001A47C C028 0022                  		and.b	$22(a0),d0
0001A480 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A486 8128 0001                  		or.b	d0,1(a0)
0001A48A 4EF9 0000 E750             		jmp	DisplaySprite
0001A490                            ; ===========================================================================
0001A490 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001A494 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001A498 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001A49C                            ; ===========================================================================
0001A49C                            
0001A49C                            loc_191CC:				; XREF: Obj75_ShipIndex
0001A49C 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A4A2 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001A4A8 6400                       		bcc.s	loc_191DE
0001A4AA 5428 0025                  		addq.b	#2,$25(a0)
0001A4AE                            
0001A4AE                            loc_191DE:
0001A4AE 1028 003F                  		move.b	$3F(a0),d0
0001A4B2 5428 003F                  		addq.b	#2,$3F(a0)
0001A4B6 4EB9 0000 3424             		jsr	(CalcSine).l
0001A4BC E440                       		asr.w	#2,d0
0001A4BE 3140 0012                  		move.w	d0,$12(a0)
0001A4C2                            
0001A4C2                            loc_191F2:
0001A4C2 6100 E6DC                  		bsr.w	BossMove
0001A4C6 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A4CC 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A4D2                            
0001A4D2                            loc_19202:
0001A4D2 3028 0008                  		move.w	8(a0),d0
0001A4D6 0440 2C00                  		subi.w	#$2C00,d0
0001A4DA EA48                       		lsr.w	#5,d0
0001A4DC 1140 0034                  		move.b	d0,$34(a0)
0001A4E0 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001A4E6 6400                       		bcc.s	locret_19256
0001A4E8 4A28 0022                  		tst.b	$22(a0)
0001A4EC 6B00                       		bmi.s	loc_19258
0001A4EE 4A28 0020                  		tst.b	$20(a0)
0001A4F2 6600                       		bne.s	locret_19256
0001A4F4 4A28 003E                  		tst.b	$3E(a0)
0001A4F8 6600                       		bne.s	loc_1923A
0001A4FA 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A500 303C 00AC                  		move.w	#$AC,d0
0001A504 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A50A                            
0001A50A                            loc_1923A:
0001A50A 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A50E 7000                       		moveq	#0,d0
0001A510 4A51                       		tst.w	(a1)
0001A512 6600                       		bne.s	loc_19248
0001A514 303C 0EEE                  		move.w	#$EEE,d0
0001A518                            
0001A518                            loc_19248:
0001A518 3280                       		move.w	d0,(a1)
0001A51A 5328 003E                  		subq.b	#1,$3E(a0)
0001A51E 6600                       		bne.s	locret_19256
0001A520 117C 000F 0020             		move.b	#$F,$20(a0)
0001A526                            
0001A526                            locret_19256:
0001A526 4E75                       		rts	
0001A528                            ; ===========================================================================
0001A528                            
0001A528                            loc_19258:				; XREF: loc_19202
0001A528 7064                       		moveq	#100,d0
0001A52A 6100 0000                  		bsr.w	AddPoints
0001A52E 117C 0006 0025             		move.b	#6,$25(a0)
0001A534 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A53A 4268 0010                  		clr.w	$10(a0)
0001A53E 4E75                       		rts	
0001A540                            ; ===========================================================================
0001A540                            
0001A540                            loc_19270:				; XREF: Obj75_ShipIndex
0001A540 3028 0030                  		move.w	$30(a0),d0
0001A544 317C 0140 0010             		move.w	#$140,$10(a0)
0001A54A 0828 0000 0022             		btst	#0,$22(a0)
0001A550 6600                       		bne.s	loc_1928E
0001A552 4468 0010                  		neg.w	$10(a0)
0001A556 0C40 2C08                  		cmpi.w	#$2C08,d0
0001A55A 6E00                       		bgt.s	loc_1929E
0001A55C 6000                       		bra.s	loc_19294
0001A55E                            ; ===========================================================================
0001A55E                            
0001A55E                            loc_1928E:
0001A55E 0C40 2D38                  		cmpi.w	#$2D38,d0
0001A562 6D00                       		blt.s	loc_1929E
0001A564                            
0001A564                            loc_19294:
0001A564 0868 0000 0022             		bchg	#0,$22(a0)
0001A56A 4228 003D                  		clr.b	$3D(a0)
0001A56E                            
0001A56E                            loc_1929E:
0001A56E 0440 2C10                  		subi.w	#$2C10,d0
0001A572 0240 001F                  		andi.w	#$1F,d0
0001A576 0440 001F                  		subi.w	#$1F,d0
0001A57A 6A00                       		bpl.s	loc_192AE
0001A57C 4440                       		neg.w	d0
0001A57E                            
0001A57E                            loc_192AE:
0001A57E 5340                       		subq.w	#1,d0
0001A580 6E00                       		bgt.s	loc_192E8
0001A582 4A28 003D                  		tst.b	$3D(a0)
0001A586 6600                       		bne.s	loc_192E8
0001A588 3238 D008                  		move.w	($FFFFD008).w,d1
0001A58C 0441 2C00                  		subi.w	#$2C00,d1
0001A590 EA41                       		asr.w	#5,d1
0001A592 B228 0034                  		cmp.b	$34(a0),d1
0001A596 6600                       		bne.s	loc_192E8
0001A598 7000                       		moveq	#0,d0
0001A59A 1028 0034                  		move.b	$34(a0),d0
0001A59E EB40                       		asl.w	#5,d0
0001A5A0 0640 2C10                  		addi.w	#$2C10,d0
0001A5A4 3140 0030                  		move.w	d0,$30(a0)
0001A5A8 6100 0000                  		bsr.w	Obj75_FindBlocks
0001A5AC 5428 0025                  		addq.b	#2,$25(a0)
0001A5B0 4268 0028                  		clr.w	$28(a0)
0001A5B4 4268 0010                  		clr.w	$10(a0)
0001A5B8                            
0001A5B8                            loc_192E8:
0001A5B8 6000 FEF4                  		bra.w	loc_191DE
0001A5BC                            ; ===========================================================================
0001A5BC                            
0001A5BC                            loc_192EC:				; XREF: Obj75_ShipIndex
0001A5BC 7000                       		moveq	#0,d0
0001A5BE 1028 0028                  		move.b	$28(a0),d0
0001A5C2 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001A5C6 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001A5CA                            ; ===========================================================================
0001A5CA 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001A5CC 0000                       		dc.w loc_19348-off_192FA
0001A5CE 0000                       		dc.w loc_1938E-off_192FA
0001A5D0 0000                       		dc.w loc_193D0-off_192FA
0001A5D2                            ; ===========================================================================
0001A5D2                            
0001A5D2                            loc_19302:				; XREF: off_192FA
0001A5D2 317C 0180 0012             		move.w	#$180,$12(a0)
0001A5D8 3028 0038                  		move.w	$38(a0),d0
0001A5DC 0C40 0556                  		cmpi.w	#$556,d0
0001A5E0 6500                       		bcs.s	loc_19344
0001A5E2 317C 0556 0038             		move.w	#$556,$38(a0)
0001A5E8 4268 003C                  		clr.w	$3C(a0)
0001A5EC 70FF                       		moveq	#-1,d0
0001A5EE 3028 0036                  		move.w	$36(a0),d0
0001A5F2 6700                       		beq.s	loc_1933C
0001A5F4 2240                       		movea.l	d0,a1
0001A5F6 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A5FC 117C 00FF 0029             		move.b	#-1,$29(a0)
0001A602 2348 0034                  		move.l	a0,$34(a1)
0001A606 317C 0032 003C             		move.w	#$32,$3C(a0)
0001A60C                            
0001A60C                            loc_1933C:
0001A60C 4268 0012                  		clr.w	$12(a0)
0001A610 5428 0028                  		addq.b	#2,$28(a0)
0001A614                            
0001A614                            loc_19344:
0001A614 6000 FEAC                  		bra.w	loc_191F2
0001A618                            ; ===========================================================================
0001A618                            
0001A618                            loc_19348:				; XREF: off_192FA
0001A618 5368 003C                  		subq.w	#1,$3C(a0)
0001A61C 6A00                       		bpl.s	loc_19366
0001A61E 5428 0028                  		addq.b	#2,$28(a0)
0001A622 317C F800 0012             		move.w	#-$800,$12(a0)
0001A628 4A68 0036                  		tst.w	$36(a0)
0001A62C 6600                       		bne.s	loc_19362
0001A62E E0E8 0012                  		asr	$12(a0)
0001A632                            
0001A632                            loc_19362:
0001A632 7000                       		moveq	#0,d0
0001A634 6000                       		bra.s	loc_1937C
0001A636                            ; ===========================================================================
0001A636                            
0001A636                            loc_19366:
0001A636 7000                       		moveq	#0,d0
0001A638 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001A63E 6E00                       		bgt.s	loc_1937C
0001A640 7002                       		moveq	#2,d0
0001A642 0828 0001 003D             		btst	#1,$3D(a0)
0001A648 6700                       		beq.s	loc_1937C
0001A64A 4440                       		neg.w	d0
0001A64C                            
0001A64C                            loc_1937C:
0001A64C D068 0038                  		add.w	$38(a0),d0
0001A650 3140 000C                  		move.w	d0,$C(a0)
0001A654 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A65A 6000 FE76                  		bra.w	loc_19202
0001A65E                            ; ===========================================================================
0001A65E                            
0001A65E                            loc_1938E:				; XREF: off_192FA
0001A65E 303C 04DA                  		move.w	#$4DA,d0
0001A662 4A68 0036                  		tst.w	$36(a0)
0001A666 6700                       		beq.s	loc_1939C
0001A668 0440 0018                  		subi.w	#$18,d0
0001A66C                            
0001A66C                            loc_1939C:
0001A66C B068 0038                  		cmp.w	$38(a0),d0
0001A670 6D00                       		blt.s	loc_193BE
0001A672 317C 0008 003C             		move.w	#8,$3C(a0)
0001A678 4A68 0036                  		tst.w	$36(a0)
0001A67C 6700                       		beq.s	loc_193B4
0001A67E 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001A684                            
0001A684                            loc_193B4:
0001A684 5428 0028                  		addq.b	#2,$28(a0)
0001A688 4268 0012                  		clr.w	$12(a0)
0001A68C 6000                       		bra.s	loc_193CC
0001A68E                            ; ===========================================================================
0001A68E                            
0001A68E                            loc_193BE:
0001A68E 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001A694 6C00                       		bge.s	loc_193CC
0001A696 0668 000C 0012             		addi.w	#$C,$12(a0)
0001A69C                            
0001A69C                            loc_193CC:
0001A69C 6000 FE24                  		bra.w	loc_191F2
0001A6A0                            ; ===========================================================================
0001A6A0                            
0001A6A0                            loc_193D0:				; XREF: off_192FA
0001A6A0 5368 003C                  		subq.w	#1,$3C(a0)
0001A6A4 6E00                       		bgt.s	loc_19406
0001A6A6 6B00                       		bmi.s	loc_193EE
0001A6A8 70FF                       		moveq	#-1,d0
0001A6AA 3028 0036                  		move.w	$36(a0),d0
0001A6AE 6700                       		beq.s	loc_193E8
0001A6B0 2240                       		movea.l	d0,a1
0001A6B2 137C 000A 0029             		move.b	#$A,$29(a1)
0001A6B8                            
0001A6B8                            loc_193E8:
0001A6B8 4268 0036                  		clr.w	$36(a0)
0001A6BC 6000                       		bra.s	loc_19406
0001A6BE                            ; ===========================================================================
0001A6BE                            
0001A6BE                            loc_193EE:
0001A6BE 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001A6C4 6600                       		bne.s	loc_19406
0001A6C6 4228 0029                  		clr.b	$29(a0)
0001A6CA 5528 0025                  		subq.b	#2,$25(a0)
0001A6CE 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001A6D4 6000                       		bra.s	loc_19446
0001A6D6                            ; ===========================================================================
0001A6D6                            
0001A6D6                            loc_19406:
0001A6D6 7001                       		moveq	#1,d0
0001A6D8 4A68 0036                  		tst.w	$36(a0)
0001A6DC 6700                       		beq.s	loc_19410
0001A6DE 7002                       		moveq	#2,d0
0001A6E0                            
0001A6E0                            loc_19410:
0001A6E0 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001A6E6 6700                       		beq.s	loc_19424
0001A6E8 6D00                       		blt.s	loc_1941C
0001A6EA 4440                       		neg.w	d0
0001A6EC                            
0001A6EC                            loc_1941C:
0001A6EC 4A68 0036                  		tst.w	$36(a0)
0001A6F0 D168 0038                  		add.w	d0,$38(a0)
0001A6F4                            
0001A6F4                            loc_19424:
0001A6F4 7000                       		moveq	#0,d0
0001A6F6 4A68 0036                  		tst.w	$36(a0)
0001A6FA 6700                       		beq.s	loc_19438
0001A6FC 7002                       		moveq	#2,d0
0001A6FE 0828 0000 003D             		btst	#0,$3D(a0)
0001A704 6700                       		beq.s	loc_19438
0001A706 4440                       		neg.w	d0
0001A708                            
0001A708                            loc_19438:
0001A708 D068 0038                  		add.w	$38(a0),d0
0001A70C 3140 000C                  		move.w	d0,$C(a0)
0001A710 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A716                            
0001A716                            loc_19446:
0001A716 6000 FDBA                  		bra.w	loc_19202
0001A71A                            
0001A71A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A71A                            
0001A71A                            
0001A71A                            Obj75_FindBlocks:			; XREF: loc_192AE
0001A71A 4268 0036                  		clr.w	$36(a0)
0001A71E 43F8 D040                  		lea	($FFFFD040).w,a1
0001A722 703E                       		moveq	#$3E,d0
0001A724 7276                       		moveq	#$76,d1
0001A726 1428 0034                  		move.b	$34(a0),d2
0001A72A                            
0001A72A                            Obj75_FindLoop:
0001A72A B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001A72C 6600                       		bne.s	loc_1946A	; if not, branch
0001A72E B429 0028                  		cmp.b	$28(a1),d2
0001A732 6600                       		bne.s	loc_1946A
0001A734 3149 0036                  		move.w	a1,$36(a0)
0001A738 6000                       		bra.s	locret_19472
0001A73A                            ; ===========================================================================
0001A73A                            
0001A73A                            loc_1946A:
0001A73A 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001A73E 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001A742                            
0001A742                            locret_19472:
0001A742 4E75                       		rts	
0001A744                            ; End of function Obj75_FindBlocks
0001A744                            
0001A744                            ; ===========================================================================
0001A744                            
0001A744                            loc_19474:				; XREF: Obj75_ShipIndex
0001A744 5368 003C                  		subq.w	#1,$3C(a0)
0001A748 6B00                       		bmi.s	loc_1947E
0001A74A 6000 E412                  		bra.w	BossDefeated
0001A74E                            ; ===========================================================================
0001A74E                            
0001A74E                            loc_1947E:
0001A74E 5428 0025                  		addq.b	#2,$25(a0)
0001A752 4268 0012                  		clr.w	$12(a0)
0001A756 08E8 0000 0022             		bset	#0,$22(a0)
0001A75C 08A8 0007 0022             		bclr	#7,$22(a0)
0001A762 4268 0010                  		clr.w	$10(a0)
0001A766 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001A76C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A770 6600                       		bne.s	loc_194A8
0001A772 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A778                            
0001A778                            loc_194A8:
0001A778 6000 FD58                  		bra.w	loc_19202
0001A77C                            ; ===========================================================================
0001A77C                            
0001A77C                            loc_194AC:				; XREF: Obj75_ShipIndex
0001A77C 5268 003C                  		addq.w	#1,$3C(a0)
0001A780 6700                       		beq.s	loc_194BC
0001A782 6A00                       		bpl.s	loc_194C2
0001A784 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A78A 6000                       		bra.s	loc_194EE
0001A78C                            ; ===========================================================================
0001A78C                            
0001A78C                            loc_194BC:
0001A78C 4268 0012                  		clr.w	$12(a0)
0001A790 6000                       		bra.s	loc_194EE
0001A792                            ; ===========================================================================
0001A792                            
0001A792                            loc_194C2:
0001A792 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001A798 6500                       		bcs.s	loc_194DA
0001A79A 6700                       		beq.s	loc_194E0
0001A79C 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001A7A2 6500                       		bcs.s	loc_194EE
0001A7A4 5428 0025                  		addq.b	#2,$25(a0)
0001A7A8 6000                       		bra.s	loc_194EE
0001A7AA                            ; ===========================================================================
0001A7AA                            
0001A7AA                            loc_194DA:
0001A7AA 5168 0012                  		subq.w	#8,$12(a0)
0001A7AE 6000                       		bra.s	loc_194EE
0001A7B0                            ; ===========================================================================
0001A7B0                            
0001A7B0                            loc_194E0:
0001A7B0 4268 0012                  		clr.w	$12(a0)
0001A7B4 303C 0085                  		move.w	#$85,d0
0001A7B8 4EB9 0000 1C7C             		jsr	(PlaySound).l	; play SYZ music
0001A7BE                            
0001A7BE                            loc_194EE:
0001A7BE 6000 FD02                  		bra.w	loc_191F2
0001A7C2                            ; ===========================================================================
0001A7C2                            
0001A7C2                            loc_194F2:				; XREF: Obj75_ShipIndex
0001A7C2 317C 0400 0010             		move.w	#$400,$10(a0)
0001A7C8 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A7CE 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001A7D4 6400                       		bcc.s	loc_1950C
0001A7D6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A7DA 6000                       		bra.s	loc_19512
0001A7DC                            ; ===========================================================================
0001A7DC                            
0001A7DC                            loc_1950C:
0001A7DC 4A28 0001                  		tst.b	1(a0)
0001A7E0 6A00                       		bpl.s	Obj75_ShipDelete
0001A7E2                            
0001A7E2                            loc_19512:
0001A7E2 6100 E3BC                  		bsr.w	BossMove
0001A7E6 6000 FCC6                  		bra.w	loc_191DE
0001A7EA                            ; ===========================================================================
0001A7EA                            
0001A7EA                            Obj75_ShipDelete:
0001A7EA 4EF9 0000 E78C             		jmp	DeleteObject
0001A7F0                            ; ===========================================================================
0001A7F0                            
0001A7F0                            Obj75_FaceMain:				; XREF: Obj75_Index
0001A7F0 7201                       		moveq	#1,d1
0001A7F2 2268 0034                  		movea.l	$34(a0),a1
0001A7F6 7000                       		moveq	#0,d0
0001A7F8 1029 0025                  		move.b	$25(a1),d0
0001A7FC 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001A800 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001A804 1141 001C                  		move.b	d1,$1C(a0)
0001A808 1010                       		move.b	(a0),d0
0001A80A B011                       		cmp.b	(a1),d0
0001A80C 6600                       		bne.s	Obj75_FaceDelete
0001A80E 6000                       		bra.s	loc_195BE
0001A810                            ; ===========================================================================
0001A810                            
0001A810                            Obj75_FaceDelete:
0001A810 4EF9 0000 E78C             		jmp	DeleteObject
0001A816                            ; ===========================================================================
0001A816 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001A81A 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001A81E 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001A822                            ; ===========================================================================
0001A822                            
0001A822                            loc_19552:				; XREF: off_19546
0001A822 720A                       		moveq	#$A,d1
0001A824 4E75                       		rts	
0001A826                            ; ===========================================================================
0001A826                            
0001A826                            loc_19556:				; XREF: off_19546
0001A826 7206                       		moveq	#6,d1
0001A828 4E75                       		rts	
0001A82A                            ; ===========================================================================
0001A82A                            
0001A82A                            loc_1955A:				; XREF: off_19546
0001A82A 7000                       		moveq	#0,d0
0001A82C 1029 0028                  		move.b	$28(a1),d0
0001A830 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001A834 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001A838                            ; ===========================================================================
0001A838 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001A83C 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001A840                            ; ===========================================================================
0001A840                            
0001A840                            loc_19570:				; XREF: off_19568
0001A840 6000                       		bra.s	loc_19574
0001A842                            ; ===========================================================================
0001A842                            
0001A842                            loc_19572:				; XREF: off_19568
0001A842 7206                       		moveq	#6,d1
0001A844                            
0001A844                            loc_19574:				; XREF: off_19546
0001A844 4A29 0020                  		tst.b	$20(a1)
0001A848 6600                       		bne.s	loc_1957E
0001A84A 7205                       		moveq	#5,d1
0001A84C 4E75                       		rts	
0001A84E                            ; ===========================================================================
0001A84E                            
0001A84E                            loc_1957E:
0001A84E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A854 6500                       		bcs.s	locret_19588
0001A856 7204                       		moveq	#4,d1
0001A858                            
0001A858                            locret_19588:
0001A858 4E75                       		rts	
0001A85A                            ; ===========================================================================
0001A85A                            
0001A85A                            Obj75_FlameMain:			; XREF: Obj75_Index
0001A85A 117C 0007 001C             		move.b	#7,$1C(a0)
0001A860 2268 0034                  		movea.l	$34(a0),a1
0001A864 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A86A 6600                       		bne.s	loc_195AA
0001A86C 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A872 4A28 0001                  		tst.b	1(a0)
0001A876 6A00                       		bpl.s	Obj75_FlameDelete
0001A878 6000                       		bra.s	loc_195B6
0001A87A                            ; ===========================================================================
0001A87A                            
0001A87A                            loc_195AA:
0001A87A 4A69 0010                  		tst.w	$10(a1)
0001A87E 6700                       		beq.s	loc_195B6
0001A880 117C 0008 001C             		move.b	#8,$1C(a0)
0001A886                            
0001A886                            loc_195B6:
0001A886 6000                       		bra.s	loc_195BE
0001A888                            ; ===========================================================================
0001A888                            
0001A888                            Obj75_FlameDelete:
0001A888 4EF9 0000 E78C             		jmp	DeleteObject
0001A88E                            ; ===========================================================================
0001A88E                            
0001A88E                            loc_195BE:
0001A88E 43F9 0001 8FE2             		lea	(Ani_Eggman).l,a1
0001A894 4EB9 0000 B79E             		jsr	AnimateSprite
0001A89A 2268 0034                  		movea.l	$34(a0),a1
0001A89E 3169 0008 0008             		move.w	8(a1),8(a0)
0001A8A4 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A8AA                            
0001A8AA                            loc_195DA:
0001A8AA 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A8B0 7003                       		moveq	#3,d0
0001A8B2 C028 0022                  		and.b	$22(a0),d0
0001A8B6 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A8BC 8128 0001                  		or.b	d0,1(a0)
0001A8C0 4EF9 0000 E750             		jmp	DisplaySprite
0001A8C6                            ; ===========================================================================
0001A8C6                            
0001A8C6                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001A8C6 217C 0001 910E 0004        		move.l	#Map_BossItems,4(a0)
0001A8CE 317C 246C 0002             		move.w	#$246C,2(a0)
0001A8D4 117C 0005 001A             		move.b	#5,$1A(a0)
0001A8DA 2268 0034                  		movea.l	$34(a0),a1
0001A8DE 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A8E4 6600                       		bne.s	loc_1961C
0001A8E6 4A28 0001                  		tst.b	1(a0)
0001A8EA 6A00                       		bpl.s	Obj75_SpikeDelete
0001A8EC                            
0001A8EC                            loc_1961C:
0001A8EC 3169 0008 0008             		move.w	8(a1),8(a0)
0001A8F2 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A8F8 3028 003C                  		move.w	$3C(a0),d0
0001A8FC 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A902 6600                       		bne.s	loc_19652
0001A904 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A90A 6700                       		beq.s	loc_1964C
0001A90C 4A29 0028                  		tst.b	$28(a1)
0001A910 6600                       		bne.s	loc_19658
0001A912 0C40 0094                  		cmpi.w	#$94,d0
0001A916 6C00                       		bge.s	loc_19658
0001A918 5E40                       		addq.w	#7,d0
0001A91A 6000                       		bra.s	loc_19658
0001A91C                            ; ===========================================================================
0001A91C                            
0001A91C                            loc_1964C:
0001A91C 4A69 003C                  		tst.w	$3C(a1)
0001A920 6A00                       		bpl.s	loc_19658
0001A922                            
0001A922                            loc_19652:
0001A922 4A40                       		tst.w	d0
0001A924 6F00                       		ble.s	loc_19658
0001A926 5B40                       		subq.w	#5,d0
0001A928                            
0001A928                            loc_19658:
0001A928 3140 003C                  		move.w	d0,$3C(a0)
0001A92C E440                       		asr.w	#2,d0
0001A92E D168 000C                  		add.w	d0,$C(a0)
0001A932 117C 0008 0019             		move.b	#8,$19(a0)
0001A938 117C 000C 0016             		move.b	#$C,$16(a0)
0001A93E 4228 0020                  		clr.b	$20(a0)
0001A942 2268 0034                  		movea.l	$34(a0),a1
0001A946 4A29 0020                  		tst.b	$20(a1)
0001A94A 6700                       		beq.s	loc_19688
0001A94C 4A29 0029                  		tst.b	$29(a1)
0001A950 6600                       		bne.s	loc_19688
0001A952 117C 0084 0020             		move.b	#$84,$20(a0)
0001A958                            
0001A958                            loc_19688:
0001A958 6000 FF50                  		bra.w	loc_195DA
0001A95C                            ; ===========================================================================
0001A95C                            
0001A95C                            Obj75_SpikeDelete:
0001A95C 4EF9 0000 E78C             		jmp	DeleteObject
0001A962                            ; ===========================================================================
0001A962                            ; ---------------------------------------------------------------------------
0001A962                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A962                            ; ---------------------------------------------------------------------------
0001A962                            
0001A962                            Obj76:					; XREF: Obj_Index
0001A962 7000                       		moveq	#0,d0
0001A964 1028 0024                  		move.b	$24(a0),d0
0001A968 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A96C 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A970                            ; ===========================================================================
0001A970 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A972 0000                       		dc.w Obj76_Action-Obj76_Index
0001A974 0000                       		dc.w loc_19762-Obj76_Index
0001A976                            ; ===========================================================================
0001A976                            
0001A976                            Obj76_Main:				; XREF: Obj76_Index
0001A976 7800                       		moveq	#0,d4
0001A978 3A3C 2C10                  		move.w	#$2C10,d5
0001A97C 7C09                       		moveq	#9,d6
0001A97E 43D0                       		lea	(a0),a1
0001A980 6000                       		bra.s	Obj76_MakeBlock
0001A982                            ; ===========================================================================
0001A982                            
0001A982                            Obj76_Loop:
0001A982 4EB9 0000 EBD6             		jsr	SingleObjLoad
0001A988 6600                       		bne.s	Obj76_ExitLoop
0001A98A                            
0001A98A                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A98A 12BC 0076                  		move.b	#$76,(a1)
0001A98E 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A996 337C 4000 0002             		move.w	#$4000,2(a1)
0001A99C 137C 0004 0001             		move.b	#4,1(a1)
0001A9A2 137C 0010 0019             		move.b	#$10,$19(a1)
0001A9A8 137C 0010 0016             		move.b	#$10,$16(a1)
0001A9AE 137C 0003 0018             		move.b	#3,$18(a1)
0001A9B4 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A9B8 337C 0582 000C             		move.w	#$582,$C(a1)
0001A9BE 3344 0028                  		move.w	d4,$28(a1)
0001A9C2 0644 0101                  		addi.w	#$101,d4
0001A9C6 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A9CA 5429 0024                  		addq.b	#2,$24(a1)
0001A9CE 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A9D2                            
0001A9D2                            Obj76_ExitLoop:
0001A9D2 4E75                       		rts	
0001A9D4                            ; ===========================================================================
0001A9D4                            
0001A9D4                            Obj76_Action:				; XREF: Obj76_Index
0001A9D4 1028 0029                  		move.b	$29(a0),d0
0001A9D8 B028 0028                  		cmp.b	$28(a0),d0
0001A9DC 6700                       		beq.s	Obj76_Solid
0001A9DE 4A00                       		tst.b	d0
0001A9E0 6B00                       		bmi.s	loc_19718
0001A9E2                            
0001A9E2                            loc_19712:
0001A9E2 6100 0000                  		bsr.w	Obj76_Break
0001A9E6 6000                       		bra.s	Obj76_Display
0001A9E8                            ; ===========================================================================
0001A9E8                            
0001A9E8                            loc_19718:
0001A9E8 2268 0034                  		movea.l	$34(a0),a1
0001A9EC 4A29 0021                  		tst.b	$21(a1)
0001A9F0 67F0                       		beq.s	loc_19712
0001A9F2 3169 0008 0008             		move.w	8(a1),8(a0)
0001A9F8 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A9FE 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001AA04 B2C8                       		cmpa.w	a0,a1
0001AA06 6500                       		bcs.s	Obj76_Display
0001AA08 3029 0012                  		move.w	$12(a1),d0
0001AA0C 48C0                       		ext.l	d0
0001AA0E E080                       		asr.l	#8,d0
0001AA10 D168 000C                  		add.w	d0,$C(a0)
0001AA14 6000                       		bra.s	Obj76_Display
0001AA16                            ; ===========================================================================
0001AA16                            
0001AA16                            Obj76_Solid:				; XREF: Obj76_Action
0001AA16 323C 001B                  		move.w	#$1B,d1
0001AA1A 343C 0010                  		move.w	#$10,d2
0001AA1E 363C 0011                  		move.w	#$11,d3
0001AA22 3828 0008                  		move.w	8(a0),d4
0001AA26 4EB9 0001 0B20             		jsr	SolidObject
0001AA2C                            
0001AA2C                            Obj76_Display:				; XREF: Obj76_Action
0001AA2C 4EF9 0000 E750             		jmp	DisplaySprite
0001AA32                            ; ===========================================================================
0001AA32                            
0001AA32                            loc_19762:				; XREF: Obj76_Index
0001AA32 4A28 0001                  		tst.b	1(a0)
0001AA36 6A00                       		bpl.s	Obj76_Delete
0001AA38 4EB9 0000 E6B8             		jsr	ObjectFall
0001AA3E 4EF9 0000 E750             		jmp	DisplaySprite
0001AA44                            ; ===========================================================================
0001AA44                            
0001AA44                            Obj76_Delete:
0001AA44 4EF9 0000 E78C             		jmp	DeleteObject
0001AA4A                            
0001AA4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AA4A                            
0001AA4A                            
0001AA4A                            Obj76_Break:				; XREF: Obj76_Action
0001AA4A 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001AA4E 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001AA52 7801                       		moveq	#1,d4
0001AA54 7203                       		moveq	#3,d1
0001AA56 7438                       		moveq	#$38,d2
0001AA58 5428 0024                  		addq.b	#2,$24(a0)
0001AA5C 117C 0008 0019             		move.b	#8,$19(a0)
0001AA62 117C 0008 0016             		move.b	#8,$16(a0)
0001AA68 43D0                       		lea	(a0),a1
0001AA6A 6000                       		bra.s	Obj76_MakeFrag
0001AA6C                            ; ===========================================================================
0001AA6C                            
0001AA6C                            Obj76_LoopFrag:
0001AA6C 4EB9 0000 EBEC             		jsr	SingleObjLoad2
0001AA72 6600                       		bne.s	loc_197D4
0001AA74                            
0001AA74                            Obj76_MakeFrag:
0001AA74 45D0                       		lea	(a0),a2
0001AA76 47D1                       		lea	(a1),a3
0001AA78 7603                       		moveq	#3,d3
0001AA7A                            
0001AA7A                            loc_197AA:
0001AA7A 26DA                       		move.l	(a2)+,(a3)+
0001AA7C 26DA                       		move.l	(a2)+,(a3)+
0001AA7E 26DA                       		move.l	(a2)+,(a3)+
0001AA80 26DA                       		move.l	(a2)+,(a3)+
0001AA82 51CB FFF6                  		dbf	d3,loc_197AA
0001AA86                            
0001AA86 335C 0010                  		move.w	(a4)+,$10(a1)
0001AA8A 335C 0012                  		move.w	(a4)+,$12(a1)
0001AA8E 361D                       		move.w	(a5)+,d3
0001AA90 D769 0008                  		add.w	d3,8(a1)
0001AA94 361D                       		move.w	(a5)+,d3
0001AA96 D769 000C                  		add.w	d3,$C(a1)
0001AA9A 1344 001A                  		move.b	d4,$1A(a1)
0001AA9E 5244                       		addq.w	#1,d4
0001AAA0 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001AAA4                            
0001AAA4                            loc_197D4:
0001AAA4 303C 00CB                  		move.w	#$CB,d0
0001AAA8 4EF9 0000 1C82             		jmp	(PlaySound_Special).l ;	play smashing sound
0001AAAE                            ; End of function Obj76_Break
0001AAAE                            
0001AAAE                            ; ===========================================================================
0001AAAE FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001AAB2 0180 FE00                  		dc.w $180, $FE00
0001AAB6 FF00 FF00                  		dc.w $FF00, $FF00
0001AABA 0100 FF00                  		dc.w $100, $FF00
0001AABE FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001AAC2 0010 0000                  		dc.w $10, 0
0001AAC6 0000 0010                  		dc.w 0,	$10
0001AACA 0010 0010                  		dc.w $10, $10
0001AACE                            ; ---------------------------------------------------------------------------
0001AACE                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001AACE                            ; ---------------------------------------------------------------------------
0001AACE                            Map_obj76:
0001AACE                            	include "_maps\obj76.asm"
0001AACE                            ; ---------------------------------------------------------------------------
0001AACE                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001AACE                            ; ---------------------------------------------------------------------------
0001AACE 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001AAD2 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001AAD6 0000                       		dc.w byte_19826-Map_obj76
0001AAD8 02                         byte_19808:	dc.b 2
0001AAD9 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001AADE 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001AAE3 00                         		dc.b 0
0001AAE4 01                         byte_19814:	dc.b 1
0001AAE5 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001AAEA 01                         byte_1981A:	dc.b 1
0001AAEB F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001AAF0 01                         byte_19820:	dc.b 1
0001AAF1 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001AAF6 01                         byte_19826:	dc.b 1
0001AAF7 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001AAFC                            		even
0001AAFC                            		even
0001AAFC                            
0001AAFC                            ; ===========================================================================
0001AAFC                            
0001AAFC                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001AAFC 4EF9 0000 E78C             		jmp	DeleteObject
0001AB02                            ; ===========================================================================
0001AB02                            ; ---------------------------------------------------------------------------
0001AB02                            ; Object 82 - Eggman (SBZ2)
0001AB02                            ; ---------------------------------------------------------------------------
0001AB02                            
0001AB02                            Obj82:					; XREF: Obj_Index
0001AB02 7000                       		moveq	#0,d0
0001AB04 1028 0024                  		move.b	$24(a0),d0
0001AB08 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001AB0C 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001AB10                            ; ===========================================================================
0001AB10 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001AB12 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001AB14 0000                       		dc.w Obj82_Switch-Obj82_Index
0001AB16                            
0001AB16 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001AB19 0400 03                    		dc.b 4,	0, 3
0001AB1C                            ; ===========================================================================
0001AB1C                            
0001AB1C                            Obj82_Main:				; XREF: Obj82_Index
0001AB1C 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001AB20 317C 2160 0008             		move.w	#$2160,8(a0)
0001AB26 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001AB2C 117C 000F 0020             		move.b	#$F,$20(a0)
0001AB32 117C 0010 0021             		move.b	#$10,$21(a0)
0001AB38 08A8 0000 0022             		bclr	#0,$22(a0)
0001AB3E 4228 0025                  		clr.b	$25(a0)
0001AB42 115A 0024                  		move.b	(a2)+,$24(a0)
0001AB46 115A 001C                  		move.b	(a2)+,$1C(a0)
0001AB4A 115A 0018                  		move.b	(a2)+,$18(a0)
0001AB4E 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001AB56 317C 0400 0002             		move.w	#$400,2(a0)
0001AB5C 117C 0004 0001             		move.b	#4,1(a0)
0001AB62 08E8 0007 0001             		bset	#7,1(a0)
0001AB68 117C 0020 0019             		move.b	#$20,$19(a0)
0001AB6E 4EB9 0000 EBEC             		jsr	SingleObjLoad2
0001AB74 6600                       		bne.s	Obj82_Eggman
0001AB76 2348 0034                  		move.l	a0,$34(a1)
0001AB7A 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001AB7E 337C 2130 0008             		move.w	#$2130,8(a1)
0001AB84 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001AB8A 4228 0025                  		clr.b	$25(a0)
0001AB8E 135A 0024                  		move.b	(a2)+,$24(a1)
0001AB92 135A 001C                  		move.b	(a2)+,$1C(a1)
0001AB96 135A 0018                  		move.b	(a2)+,$18(a1)
0001AB9A 237C 0000 CED2 0004        		move.l	#Map_obj32,4(a1)
0001ABA2 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001ABA8 137C 0004 0001             		move.b	#4,1(a1)
0001ABAE 08E9 0007 0001             		bset	#7,1(a1)
0001ABB4 137C 0010 0019             		move.b	#$10,$19(a1)
0001ABBA 137C 0000 001A             		move.b	#0,$1A(a1)
0001ABC0                            
0001ABC0                            Obj82_Eggman:				; XREF: Obj82_Index
0001ABC0 7000                       		moveq	#0,d0
0001ABC2 1028 0025                  		move.b	$25(a0),d0
0001ABC6 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001ABCA 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001ABCE 43FA 0000                  		lea	Ani_obj82(pc),a1
0001ABD2 4EB9 0000 B79E             		jsr	AnimateSprite
0001ABD8 4EF9 0000 E750             		jmp	DisplaySprite
0001ABDE                            ; ===========================================================================
0001ABDE 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001ABE0 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001ABE2 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001ABE4 0000                       		dc.w loc_19934-Obj82_EggIndex
0001ABE6                            ; ===========================================================================
0001ABE6                            
0001ABE6                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001ABE6 3028 0008                  		move.w	8(a0),d0
0001ABEA 9078 D008                  		sub.w	($FFFFD008).w,d0
0001ABEE 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001ABF2 6400                       		bcc.s	loc_19934	; if not, branch
0001ABF4 5428 0025                  		addq.b	#2,$25(a0)
0001ABF8 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001ABFE 117C 0001 001C             		move.b	#1,$1C(a0)
0001AC04                            
0001AC04                            loc_19934:				; XREF: Obj82_EggIndex
0001AC04 4EF9 0000 E72A             		jmp	SpeedToPos
0001AC0A                            ; ===========================================================================
0001AC0A                            
0001AC0A                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001AC0A 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001AC0E 6600                       		bne.s	loc_19954	; if time remains, branch
0001AC10 5428 0025                  		addq.b	#2,$25(a0)
0001AC14 117C 0002 001C             		move.b	#2,$1C(a0)
0001AC1A 5868 000C                  		addq.w	#4,$C(a0)
0001AC1E 317C 000F 003C             		move.w	#15,$3C(a0)
0001AC24                            
0001AC24                            loc_19954:
0001AC24 60DE                       		bra.s	loc_19934
0001AC26                            ; ===========================================================================
0001AC26                            
0001AC26                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001AC26 5368 003C                  		subq.w	#1,$3C(a0)
0001AC2A 6E00                       		bgt.s	loc_199D0
0001AC2C 6600                       		bne.s	loc_1996A
0001AC2E 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001AC34 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001AC3A                            
0001AC3A                            loc_1996A:
0001AC3A 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001AC40 6E00                       		bgt.s	loc_19976
0001AC42 4268 0010                  		clr.w	$10(a0)
0001AC46                            
0001AC46                            loc_19976:
0001AC46 0668 0024 0012             		addi.w	#$24,$12(a0)
0001AC4C 4A68 0012                  		tst.w	$12(a0)
0001AC50 6B00                       		bmi.s	Obj82_FindBlocks
0001AC52 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001AC58 6500                       		bcs.s	Obj82_FindBlocks
0001AC5A 317C 5357 0028             		move.w	#$5357,$28(a0)
0001AC60 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001AC66 6500                       		bcs.s	Obj82_FindBlocks
0001AC68 317C 059B 000C             		move.w	#$59B,$C(a0)
0001AC6E 4268 0012                  		clr.w	$12(a0)
0001AC72                            
0001AC72                            Obj82_FindBlocks:
0001AC72 3028 0010                  		move.w	$10(a0),d0
0001AC76 8068 0012                  		or.w	$12(a0),d0
0001AC7A 6600                       		bne.s	loc_199D0
0001AC7C 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001AC80 703E                       		moveq	#$3E,d0
0001AC82 7240                       		moveq	#$40,d1
0001AC84                            
0001AC84                            Obj82_FindLoop:	
0001AC84 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001AC86 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001AC8A 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001AC8E                            
0001AC8E 6600                       		bne.s	loc_199D0
0001AC90 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001AC96 5428 0025                  		addq.b	#2,$25(a0)
0001AC9A 117C 0001 001C             		move.b	#1,$1C(a0)
0001ACA0                            
0001ACA0                            loc_199D0:
0001ACA0 6000 FF62                  		bra.w	loc_19934
0001ACA4                            ; ===========================================================================
0001ACA4                            
0001ACA4                            Obj82_Switch:				; XREF: Obj82_Index
0001ACA4 7000                       		moveq	#0,d0
0001ACA6 1028 0025                  		move.b	$25(a0),d0
0001ACAA 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001ACAE 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001ACB2                            ; ===========================================================================
0001ACB2 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001ACB4 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001ACB6                            ; ===========================================================================
0001ACB6                            
0001ACB6                            loc_199E6:				; XREF: Obj82_SwIndex
0001ACB6 2268 0034                  		movea.l	$34(a0),a1
0001ACBA 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001ACC0 6600                       		bne.s	Obj82_SwDisplay
0001ACC2 117C 0001 001A             		move.b	#1,$1A(a0)
0001ACC8 5428 0025                  		addq.b	#2,$25(a0)
0001ACCC                            
0001ACCC                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001ACCC 4EF9 0000 E750             		jmp	DisplaySprite
0001ACD2                            ; ===========================================================================
0001ACD2                            Ani_obj82:
0001ACD2                            	include "_anim\obj82.asm"
0001ACD2                            ; ---------------------------------------------------------------------------
0001ACD2                            ; Animation script - Eggman (SBZ2)
0001ACD2                            ; ---------------------------------------------------------------------------
0001ACD2 0000                       		dc.w byte_19A10-Ani_obj82
0001ACD4 0000                       		dc.w byte_19A14-Ani_obj82
0001ACD6 0000                       		dc.w byte_19A18-Ani_obj82
0001ACD8 0000                       		dc.w byte_19A20-Ani_obj82
0001ACDA 0000                       		dc.w byte_19A24-Ani_obj82
0001ACDC 0000                       		dc.w byte_19A2A-Ani_obj82
0001ACDE 0000                       		dc.w byte_19A30-Ani_obj82
0001ACE0 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001ACE4 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001ACE8 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001ACF0 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001ACF4 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001ACFA 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001AD00 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001AD04                            		even
0001AD04                            		even
0001AD04                            
0001AD04                            ; ---------------------------------------------------------------------------
0001AD04                            ; Sprite mappings - Eggman (SBZ2)
0001AD04                            ; ---------------------------------------------------------------------------
0001AD04                            Map_obj82:
0001AD04                            	include "_maps\obj82.asm"
0001AD04                            ; ================================================================================
0001AD04                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001AD04                            ; ================================================================================
0001AD04                            
0001AD04                            DATAA16Z12RYSAF:
0001AD04 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001AD08 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001AD0C 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001AD10 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001AD14 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001AD18 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001AD1A 03                         DATAA16Z12RYSAF_0: dc.b $3
0001AD1B FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001AD20 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001AD25 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001AD2A 04                         DATAA16Z12RYSAF_1: dc.b $4
0001AD2B E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001AD30 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001AD35 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001AD3A FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001AD3F 04                         DATAA16Z12RYSAF_2: dc.b $4
0001AD40 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001AD45 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001AD4A 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001AD4F FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001AD54 03                         DATAA16Z12RYSAF_3: dc.b $3
0001AD55 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001AD5A 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001AD5F F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001AD64 04                         DATAA16Z12RYSAF_4: dc.b $4
0001AD65 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001AD6A 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001AD6F 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001AD74 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001AD79 04                         DATAA16Z12RYSAF_5: dc.b $4
0001AD7A E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001AD7F E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001AD84 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001AD89 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001AD8E 07                         DATAA16Z12RYSAF_6: dc.b $7
0001AD8F E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001AD94 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001AD99 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001AD9E 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001ADA3 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001ADA8 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001ADAD F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001ADB2 04                         DATAA16Z12RYSAF_7: dc.b $4
0001ADB3 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001ADB8 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001ADBD 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001ADC2 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001ADC7 05                         DATAA16Z12RYSAF_8: dc.b $5
0001ADC8 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001ADCD E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001ADD2 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001ADD7 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001ADDC EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001ADE1 08                         DATAA16Z12RYSAF_9: dc.b $8
0001ADE2 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001ADE7 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001ADEC E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001ADF1 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001ADF6 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001ADFB F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001AE00 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001AE05 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001AE0A 03                         DATAA16Z12RYSAF_A: dc.b $3
0001AE0B EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001AE10 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001AE15 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001AE1A                            	even
0001AE1A                            	even
0001AE1A                            
0001AE1A                            ; ===========================================================================
0001AE1A                            ; ---------------------------------------------------------------------------
0001AE1A                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001AE1A                            ; ---------------------------------------------------------------------------
0001AE1A                            
0001AE1A                            Obj83:					; XREF: Obj_Index
0001AE1A 7000                       		moveq	#0,d0
0001AE1C 1028 0024                  		move.b	$24(a0),d0
0001AE20 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001AE24 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001AE28                            ; ===========================================================================
0001AE28 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001AE2A 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001AE2C 0000                       		dc.w loc_19C36-Obj83_Index
0001AE2E 0000                       		dc.w loc_19C62-Obj83_Index
0001AE30 0000                       		dc.w loc_19C72-Obj83_Index
0001AE32 0000                       		dc.w loc_19C80-Obj83_Index
0001AE34                            ; ===========================================================================
0001AE34                            
0001AE34                            Obj83_Main:				; XREF: Obj83_Index
0001AE34 317C 2080 0008             		move.w	#$2080,8(a0)
0001AE3A 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001AE40 117C 0080 0019             		move.b	#$80,$19(a0)
0001AE46 117C 0010 0016             		move.b	#$10,$16(a0)
0001AE4C 117C 0004 0001             		move.b	#4,1(a0)
0001AE52 08E8 0007 0001             		bset	#7,1(a0)
0001AE58 7800                       		moveq	#0,d4
0001AE5A 3A3C 2010                  		move.w	#$2010,d5
0001AE5E 7C07                       		moveq	#7,d6
0001AE60 45E8 0030                  		lea	$30(a0),a2
0001AE64                            
0001AE64                            Obj83_MakeBlock:
0001AE64 4EB9 0000 EBD6             		jsr	SingleObjLoad
0001AE6A 6600                       		bne.s	Obj83_ExitMake
0001AE6C 34C9                       		move.w	a1,(a2)+
0001AE6E 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001AE72 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001AE7A 337C 4518 0002             		move.w	#$4518,2(a1)
0001AE80 137C 0004 0001             		move.b	#4,1(a1)
0001AE86 137C 0010 0019             		move.b	#$10,$19(a1)
0001AE8C 137C 0010 0016             		move.b	#$10,$16(a1)
0001AE92 137C 0003 0018             		move.b	#3,$18(a1)
0001AE98 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001AE9C 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001AEA2 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001AEA6 137C 0008 0024             		move.b	#8,$24(a1)
0001AEAC 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001AEB0                            
0001AEB0                            Obj83_ExitMake:
0001AEB0 5428 0024                  		addq.b	#2,$24(a0)
0001AEB4 4E75                       		rts	
0001AEB6                            ; ===========================================================================
0001AEB6                            
0001AEB6                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001AEB6 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001AEBC 6600                       		bne.s	Obj83_Solid	; if not, branch
0001AEBE 4228 001A                  		clr.b	$1A(a0)
0001AEC2 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001AEC6                            
0001AEC6                            Obj83_Solid:
0001AEC6 7000                       		moveq	#0,d0
0001AEC8 1028 001A                  		move.b	$1A(a0),d0
0001AECC 4400                       		neg.b	d0
0001AECE 4880                       		ext.w	d0
0001AED0 5040                       		addq.w	#8,d0
0001AED2 E940                       		asl.w	#4,d0
0001AED4 383C 2100                  		move.w	#$2100,d4
0001AED8 9840                       		sub.w	d0,d4
0001AEDA 1140 0019                  		move.b	d0,$19(a0)
0001AEDE 3144 0008                  		move.w	d4,8(a0)
0001AEE2 720B                       		moveq	#$B,d1
0001AEE4 D240                       		add.w	d0,d1
0001AEE6 7410                       		moveq	#$10,d2
0001AEE8 7611                       		moveq	#$11,d3
0001AEEA 4EF9 0001 0B20             		jmp	SolidObject
0001AEF0                            ; ===========================================================================
0001AEF0                            
0001AEF0                            loc_19C36:				; XREF: Obj83_Index
0001AEF0 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001AEF6 6400                       		bcc.s	Obj83_Solid2
0001AEF8 70FF                       		moveq	#-1,d0
0001AEFA 1028 001A                  		move.b	$1A(a0),d0
0001AEFE 4880                       		ext.w	d0
0001AF00 D040                       		add.w	d0,d0
0001AF02 3030 0030                  		move.w	$30(a0,d0.w),d0
0001AF06 2240                       		movea.l	d0,a1
0001AF08 337C 474F 0028             		move.w	#$474F,$28(a1)
0001AF0E 5228 001A                  		addq.b	#1,$1A(a0)
0001AF12 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001AF18 6700                       		beq.s	loc_19C62
0001AF1A                            
0001AF1A                            Obj83_Solid2:
0001AF1A 60AA                       		bra.s	Obj83_Solid
0001AF1C                            ; ===========================================================================
0001AF1C                            
0001AF1C                            loc_19C62:				; XREF: Obj83_Index
0001AF1C 08A8 0003 0022             		bclr	#3,$22(a0)
0001AF22 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AF28 6000 FBD2                  		bra.w	loc_1982C
0001AF2C                            ; ===========================================================================
0001AF2C                            
0001AF2C                            loc_19C72:				; XREF: Obj83_Index
0001AF2C 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001AF32 6700                       		beq.s	Obj83_Break	; if yes, branch
0001AF34 4EF9 0000 E750             		jmp	DisplaySprite
0001AF3A                            ; ===========================================================================
0001AF3A                            
0001AF3A                            loc_19C80:				; XREF: Obj83_Index
0001AF3A 4A28 0001                  		tst.b	1(a0)
0001AF3E 6A00 FBBC                  		bpl.w	loc_1982C
0001AF42 4EB9 0000 E6B8             		jsr	ObjectFall
0001AF48 4EF9 0000 E750             		jmp	DisplaySprite
0001AF4E                            ; ===========================================================================
0001AF4E                            
0001AF4E                            Obj83_Break:				; XREF: loc_19C72
0001AF4E 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001AF52 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001AF56 7801                       		moveq	#1,d4
0001AF58 7203                       		moveq	#3,d1
0001AF5A 7438                       		moveq	#$38,d2
0001AF5C 5428 0024                  		addq.b	#2,$24(a0)
0001AF60 117C 0008 0019             		move.b	#8,$19(a0)
0001AF66 117C 0008 0016             		move.b	#8,$16(a0)
0001AF6C 43D0                       		lea	(a0),a1
0001AF6E 6000                       		bra.s	Obj83_MakeFrag
0001AF70                            ; ===========================================================================
0001AF70                            
0001AF70                            Obj83_LoopFrag:
0001AF70 4EB9 0000 EBEC             		jsr	SingleObjLoad2
0001AF76 6600                       		bne.s	Obj83_BreakSnd
0001AF78                            
0001AF78                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001AF78 45D0                       		lea	(a0),a2
0001AF7A 47D1                       		lea	(a1),a3
0001AF7C 7603                       		moveq	#3,d3
0001AF7E                            
0001AF7E                            loc_19CC4:
0001AF7E 26DA                       		move.l	(a2)+,(a3)+
0001AF80 26DA                       		move.l	(a2)+,(a3)+
0001AF82 26DA                       		move.l	(a2)+,(a3)+
0001AF84 26DA                       		move.l	(a2)+,(a3)+
0001AF86 51CB FFF6                  		dbf	d3,loc_19CC4
0001AF8A                            
0001AF8A 335C 0012                  		move.w	(a4)+,$12(a1)
0001AF8E 361D                       		move.w	(a5)+,d3
0001AF90 D769 0008                  		add.w	d3,8(a1)
0001AF94 361D                       		move.w	(a5)+,d3
0001AF96 D769 000C                  		add.w	d3,$C(a1)
0001AF9A 1344 001A                  		move.b	d4,$1A(a1)
0001AF9E 5244                       		addq.w	#1,d4
0001AFA0 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001AFA4                            
0001AFA4                            Obj83_BreakSnd:
0001AFA4 303C 00CB                  		move.w	#$CB,d0
0001AFA8 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play smashing sound
0001AFAE 4EF9 0000 E750             		jmp	DisplaySprite
0001AFB4                            ; ===========================================================================
0001AFB4 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001AFB8 0120 00C0                  		dc.w $120, $C0
0001AFBC FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001AFC0 0010 0000                  		dc.w $10, 0
0001AFC4 0000 0010                  		dc.w 0,	$10
0001AFC8 0010 0010                  		dc.w $10, $10
0001AFCC                            ; ---------------------------------------------------------------------------
0001AFCC                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001AFCC                            ; ---------------------------------------------------------------------------
0001AFCC                            Map_obj83:
0001AFCC                            	include "_maps\obj83.asm"
0001AFCC                            ; ---------------------------------------------------------------------------
0001AFCC                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001AFCC                            ; ---------------------------------------------------------------------------
0001AFCC 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001AFD0 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001AFD4 0000                       		dc.w byte_19D46-Map_obj83
0001AFD6 01                         byte_19D1C:	dc.b 1
0001AFD7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001AFDC 02                         byte_19D22:	dc.b 2
0001AFDD F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001AFE2 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001AFE7 00                         		dc.b 0
0001AFE8 02                         byte_19D2E:	dc.b 2
0001AFE9 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001AFEE F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001AFF3 00                         		dc.b 0
0001AFF4 02                         byte_19D3A:	dc.b 2
0001AFF5 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001AFFA F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001AFFF 00                         		dc.b 0
0001B000 02                         byte_19D46:	dc.b 2
0001B001 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001B006 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001B00C 00                         		even
0001B00C 00                         		even
0001B00C                            
0001B00C                            ; ===========================================================================
0001B00C                            ; ---------------------------------------------------------------------------
0001B00C                            ; Object 85 - Eggman (FZ)
0001B00C                            ; ---------------------------------------------------------------------------
0001B00C                            
0001B00C                            Obj85_Delete:
0001B00C 4EF9 0000 E78C             		jmp	DeleteObject
0001B012                            ; ===========================================================================
0001B012                            
0001B012                            Obj85:					; XREF: Obj_Index
0001B012 7000                       		moveq	#0,d0
0001B014 1028 0024                  		move.b	$24(a0),d0
0001B018 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001B01C 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001B020                            ; ===========================================================================
0001B020 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001B022 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001B024 0000                       		dc.w loc_1A38E-Obj85_Index
0001B026 0000                       		dc.w loc_1A346-Obj85_Index
0001B028 0000                       		dc.w loc_1A2C6-Obj85_Index
0001B02A 0000                       		dc.w loc_1A3AC-Obj85_Index
0001B02C 0000                       		dc.w loc_1A264-Obj85_Index
0001B02E                            
0001B02E 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001B034 0001 AD04                  		dc.l Map_obj82		; mappings pointer
0001B038 25B0 0590 0300             		dc.w $25B0, $590, $300
0001B03E 0000 0000                  		dc.l Map_obj84
0001B042 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001B048 0000 0000                  		dc.l Map_FZBoss
0001B04C 26E0 0596 0470             		dc.w $26E0, $596, $470
0001B052 0001 AD04                  		dc.l Map_obj82
0001B056 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B05C 0001 9046                  		dc.l Map_Eggman
0001B060 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B066 0001 9046                  		dc.l Map_Eggman
0001B06A                            
0001B06A 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001B06F 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001B074 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001B079 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001B07E 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001B083 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001B088                            ; ===========================================================================
0001B088                            
0001B088                            Obj85_Main:				; XREF: Obj85_Index
0001B088 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001B08C 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001B090 2248                       		movea.l	a0,a1
0001B092 7205                       		moveq	#5,d1
0001B094 6000                       		bra.s	Obj85_LoadBoss
0001B096                            ; ===========================================================================
0001B096                            
0001B096                            Obj85_Loop:
0001B096 4EB9 0000 EBEC             		jsr	SingleObjLoad2
0001B09C 6600                       		bne.s	loc_19E20
0001B09E                            
0001B09E                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001B09E 12BC 0085                  		move.b	#$85,(a1)
0001B0A2 335A 0008                  		move.w	(a2)+,8(a1)
0001B0A6 335A 000C                  		move.w	(a2)+,$C(a1)
0001B0AA 335A 0002                  		move.w	(a2)+,2(a1)
0001B0AE 235A 0004                  		move.l	(a2)+,4(a1)
0001B0B2 135B 0024                  		move.b	(a3)+,$24(a1)
0001B0B6 135B 001C                  		move.b	(a3)+,$1C(a1)
0001B0BA 135B 0018                  		move.b	(a3)+,$18(a1)
0001B0BE 135B 0017                  		move.b	(a3)+,$17(a1)
0001B0C2 135B 0016                  		move.b	(a3)+,$16(a1)
0001B0C6 137C 0004 0001             		move.b	#4,1(a1)
0001B0CC 08E8 0007 0001             		bset	#7,1(a0)
0001B0D2 2348 0034                  		move.l	a0,$34(a1)
0001B0D6 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001B0DA                            
0001B0DA                            loc_19E20:
0001B0DA 45E8 0036                  		lea	$36(a0),a2
0001B0DE 4EB9 0000 EBD6             		jsr	SingleObjLoad
0001B0E4 6600                       		bne.s	loc_19E5A
0001B0E6 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001B0EA 3489                       		move.w	a1,(a2)
0001B0EC 2348 0034                  		move.l	a0,$34(a1)
0001B0F0 45E8 0038                  		lea	$38(a0),a2
0001B0F4 7400                       		moveq	#0,d2
0001B0F6 7203                       		moveq	#3,d1
0001B0F8                            
0001B0F8                            loc_19E3E:
0001B0F8 4EB9 0000 EBEC             		jsr	SingleObjLoad2
0001B0FE 6600                       		bne.s	loc_19E5A
0001B100 34C9                       		move.w	a1,(a2)+
0001B102 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001B106 2348 0034                  		move.l	a0,$34(a1)
0001B10A 1342 0028                  		move.b	d2,$28(a1)
0001B10E 5442                       		addq.w	#2,d2
0001B110 51C9 FFE6                  		dbf	d1,loc_19E3E
0001B114                            
0001B114                            loc_19E5A:
0001B114 317C 0000 0034             		move.w	#0,$34(a0)
0001B11A 4EB8 33FE                  		jsr	RandomNumber	; get a number between 0 and 250
0001B11E 4240                       		clr.w	d0
0001B120 4840                       		swap	d0
0001B122 80FC 00FB                  		divu.w	#251,d0
0001B126 4840                       		swap	d0
0001B128 0640 0118                  		add.w	#280,d0		; add 280
0001B12C 33C0 00FF 7FFE             		move.w	d0,($FF7FFE).l	; that's the number of hits
0001B132 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B138                            
0001B138                            Obj85_Eggman:				; XREF: Obj85_Index
0001B138 7000                       		moveq	#0,d0
0001B13A 1028 0034                  		move.b	$34(a0),d0
0001B13E 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001B142 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001B146 4EF9 0000 E750             		jmp	DisplaySprite
0001B14C                            ; ===========================================================================
0001B14C 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001B150 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001B154 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001B158 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001B15C                            ; ===========================================================================
0001B15C                            
0001B15C                            loc_19E90:				; XREF: off_19E80
0001B15C 4AB8 F680                  		tst.l	($FFFFF680).w
0001B160 6600                       		bne.s	loc_19EA2
0001B162 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001B168 6500                       		bcs.s	loc_19EA2
0001B16A 5428 0034                  		addq.b	#2,$34(a0)
0001B16E                            
0001B16E                            loc_19EA2:
0001B16E 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001B172 4E75                       		rts	
0001B174                            ; ===========================================================================
0001B174                            
0001B174                            loc_19EA8:				; XREF: off_19E80
0001B174 4A68 0030                  		tst.w	$30(a0)
0001B178 6A00                       		bpl.s	loc_19F10
0001B17A 4268 0030                  		clr.w	$30(a0)
0001B17E 4EB9 0000 33FE             		jsr	(RandomNumber).l
0001B184 0240 000C                  		andi.w	#$C,d0
0001B188 3200                       		move.w	d0,d1
0001B18A 5441                       		addq.w	#2,d1
0001B18C 4A80                       		tst.l	d0
0001B18E 6A00                       		bpl.s	loc_19EC6
0001B190 C141                       		exg	d1,d0
0001B192                            
0001B192                            loc_19EC6:
0001B192 43FA 0000                  		lea	word_19FD6(pc),a1
0001B196 3031 0000                  		move.w	(a1,d0.w),d0
0001B19A 3231 1000                  		move.w	(a1,d1.w),d1
0001B19E 3140 0030                  		move.w	d0,$30(a0)
0001B1A2 74FF                       		moveq	#-1,d2
0001B1A4 3430 0038                  		move.w	$38(a0,d0.w),d2
0001B1A8 2242                       		movea.l	d2,a1
0001B1AA 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B1B0 337C FFFF 0030             		move.w	#-1,$30(a1)
0001B1B6 3430 1038                  		move.w	$38(a0,d1.w),d2
0001B1BA 2242                       		movea.l	d2,a1
0001B1BC 137C 0001 0029             		move.b	#1,$29(a1)
0001B1C2 337C 0000 0030             		move.w	#0,$30(a1)
0001B1C8 317C 0001 0032             		move.w	#1,$32(a0)
0001B1CE 4228 0035                  		clr.b	$35(a0)
0001B1D2 303C 00B7                  		move.w	#$B7,d0
0001B1D6 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001B1DC                            
0001B1DC                            loc_19F10:
0001B1DC 4A68 0032                  		tst.w	$32(a0)
0001B1E0 6B00 0000                  		bmi.w	loc_19FA6
0001B1E4 08A8 0000 0022             		bclr	#0,$22(a0)
0001B1EA 3038 D008                  		move.w	($FFFFD008).w,d0
0001B1EE 9068 0008                  		sub.w	8(a0),d0
0001B1F2 6500                       		bcs.s	loc_19F2E
0001B1F4 08E8 0000 0022             		bset	#0,$22(a0)
0001B1FA                            
0001B1FA                            loc_19F2E:
0001B1FA 323C 002B                  		move.w	#$2B,d1
0001B1FE 343C 0014                  		move.w	#$14,d2
0001B202 363C 0014                  		move.w	#$14,d3
0001B206 3828 0008                  		move.w	8(a0),d4
0001B20A 4EB9 0001 0B20             		jsr	SolidObject
0001B210 4A44                       		tst.w	d4
0001B212 6E00                       		bgt.s	loc_19F50
0001B214                            
0001B214                            loc_19F48:
0001B214 4A28 0035                  		tst.b	$35(a0)
0001B218 6600                       		bne.s	loc_19F88
0001B21A 6000                       		bra.s	loc_19F96
0001B21C                            ; ===========================================================================
0001B21C                            
0001B21C                            loc_19F50:
0001B21C 5E78 F636                  		addq.w	#7,($FFFFF636).w	; add 7 to... the rng seed?
0001B220                            ;		cmpi.b	#2,($FFFFD01C).w	; check if player is in ball form (nah)
0001B220                            ;		bne.s	loc_19F48
0001B220                            ;		move.w	#$300,d0		; knock player back (nah)
0001B220                            ;		btst	#0,$22(a0)
0001B220                            ;		bne.s	loc_19F6A
0001B220                            ;		neg.w	d0
0001B220                            ;
0001B220                            ;loc_19F6A:
0001B220                            ;		move.w	d0,($FFFFD010).w
0001B220 4A28 0035                  		tst.b	$35(a0)
0001B224 6600                       		bne.s	loc_19F88
0001B226 5379 00FF 7FFE             		subq.w	#1,($FF7FFE).l		; no overflowing! dumbass glitch finish the boss again looking ass
0001B22C 6400                       		bcc.s	@notoverflown
0001B22E 4279 00FF 7FFE             		clr.w	($FF7FFE).l
0001B234                            @notoverflown:
0001B234 117C 0001 0035             		move.b	#1,$35(a0)		; eye-frame timer
0001B23A 303C 00AC                  		move.w	#$AC,d0
0001B23E 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B244                            
0001B244                            loc_19F88:
0001B244 5328 0035                  		subq.b	#1,$35(a0)
0001B248 6700                       		beq.s	loc_19F96
0001B24A 117C 0003 001C             		move.b	#3,$1C(a0)
0001B250 6000                       		bra.s	loc_19F9C
0001B252                            ; ===========================================================================
0001B252                            
0001B252                            loc_19F96:
0001B252 117C 0001 001C             		move.b	#1,$1C(a0)
0001B258                            
0001B258                            loc_19F9C:
0001B258 43FA FA78                  		lea	Ani_obj82(pc),a1
0001B25C 4EF9 0000 B79E             		jmp	AnimateSprite
0001B262                            ; ===========================================================================
0001B262                            
0001B262                            loc_19FA6:
0001B262 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B268 6700                       		beq.s	loc_19FBC
0001B26A 5428 0034                  		addq.b	#2,$34(a0)
0001B26E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B274 4268 0032                  		clr.w	$32(a0)
0001B278 4E75                       		rts	
0001B27A                            ; ===========================================================================
0001B27A                            
0001B27A                            loc_19FBC:
0001B27A 117C 0006 0034             		move.b	#6,$34(a0)
0001B280 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001B286 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B28C 117C 0014 0016             		move.b	#$14,$16(a0)
0001B292 4E75                       		rts	
0001B294                            ; ===========================================================================
0001B294 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001B2A4                            ; ===========================================================================
0001B2A4                            
0001B2A4                            loc_19FE6:				; XREF: off_19E80
0001B2A4 70FF                       		moveq	#-1,d0
0001B2A6 3028 0036                  		move.w	$36(a0),d0
0001B2AA 2240                       		movea.l	d0,a1
0001B2AC 4A68 0030                  		tst.w	$30(a0)
0001B2B0 6A00                       		bpl.s	loc_1A000
0001B2B2 4268 0030                  		clr.w	$30(a0)
0001B2B6 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B2BC 6100                       		bsr.s	loc_1A020
0001B2BE                            
0001B2BE                            loc_1A000:
0001B2BE 700F                       		moveq	#$F,d0
0001B2C0 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B2C4 6600                       		bne.s	loc_1A00A
0001B2C6 6100                       		bsr.s	loc_1A020
0001B2C8                            
0001B2C8                            loc_1A00A:
0001B2C8 4A68 0032                  		tst.w	$32(a0)
0001B2CC 6700                       		beq.s	locret_1A01E
0001B2CE 5528 0034                  		subq.b	#2,$34(a0)
0001B2D2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B2D8 4268 0032                  		clr.w	$32(a0)
0001B2DC                            
0001B2DC                            locret_1A01E:
0001B2DC 4E75                       		rts	
0001B2DE                            ; ===========================================================================
0001B2DE                            
0001B2DE                            loc_1A020:
0001B2DE 303C 00B1                  		move.w	#$B1,d0
0001B2E2 4EF9 0000 1C82             		jmp	(PlaySound_Special).l ;	play electricity sound
0001B2E8                            ; ===========================================================================
0001B2E8                            
0001B2E8                            loc_1A02A:				; XREF: off_19E80
0001B2E8 117C 0030 0017             		move.b	#$30,$17(a0)
0001B2EE 08E8 0000 0022             		bset	#0,$22(a0)
0001B2F4 4EB9 0000 E72A             		jsr	SpeedToPos
0001B2FA 117C 0006 001A             		move.b	#6,$1A(a0)
0001B300 0668 0010 0012             		addi.w	#$10,$12(a0)
0001B306 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001B30C 6500                       		bcs.s	loc_1A070
0001B30E 317C 059C 000C             		move.w	#$59C,$C(a0)
0001B314 5428 0034                  		addq.b	#2,$34(a0)
0001B318 117C 0020 0017             		move.b	#$20,$17(a0)
0001B31E 317C 0100 0010             		move.w	#$100,$10(a0)
0001B324 317C FF00 0012             		move.w	#-$100,$12(a0)
0001B32A 5438 F742                  		addq.b	#2,($FFFFF742).w
0001B32E                            
0001B32E                            loc_1A070:
0001B32E 6000 0000                  		bra.w	loc_1A166
0001B332                            ; ===========================================================================
0001B332                            
0001B332                            loc_1A074:				; XREF: off_19E80
0001B332 08E8 0000 0022             		bset	#0,$22(a0)
0001B338 117C 0004 001C             		move.b	#4,$1C(a0)
0001B33E 4EB9 0000 E72A             		jsr	SpeedToPos
0001B344 0668 0010 0012             		addi.w	#$10,$12(a0)
0001B34A 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001B350 6500                       		bcs.s	loc_1A09A
0001B352 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B358                            
0001B358                            loc_1A09A:
0001B358 317C 0400 0010             		move.w	#$400,$10(a0)
0001B35E 3028 0008                  		move.w	8(a0),d0
0001B362 9078 D008                  		sub.w	($FFFFD008).w,d0
0001B366 6A00                       		bpl.s	loc_1A0B4
0001B368 317C 0500 0010             		move.w	#$500,$10(a0)
0001B36E 6000 0000                  		bra.w	loc_1A0F2
0001B372                            ; ===========================================================================
0001B372                            
0001B372                            loc_1A0B4:
0001B372 0440 0070                  		subi.w	#$70,d0
0001B376 6500                       		bcs.s	loc_1A0F2
0001B378 0468 0100 0010             		subi.w	#$100,$10(a0)
0001B37E 5140                       		subq.w	#8,d0
0001B380 6500                       		bcs.s	loc_1A0F2
0001B382 0468 0100 0010             		subi.w	#$100,$10(a0)
0001B388 5140                       		subq.w	#8,d0
0001B38A 6500                       		bcs.s	loc_1A0F2
0001B38C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001B392 5140                       		subq.w	#8,d0
0001B394 6500                       		bcs.s	loc_1A0F2
0001B396 0468 0080 0010             		subi.w	#$80,$10(a0)
0001B39C 5140                       		subq.w	#8,d0
0001B39E 6500                       		bcs.s	loc_1A0F2
0001B3A0 0468 0080 0010             		subi.w	#$80,$10(a0)
0001B3A6 0440 0038                  		subi.w	#$38,d0
0001B3AA 6500                       		bcs.s	loc_1A0F2
0001B3AC 4268 0010                  		clr.w	$10(a0)
0001B3B0                            
0001B3B0                            loc_1A0F2:
0001B3B0 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001B3B6 6500                       		bcs.s	loc_1A110
0001B3B8 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001B3BE 317C 0240 0010             		move.w	#$240,$10(a0)
0001B3C4 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001B3CA 5428 0034                  		addq.b	#2,$34(a0)
0001B3CE                            
0001B3CE                            loc_1A110:
0001B3CE 6000                       		bra.s	loc_1A15C
0001B3D0                            ; ===========================================================================
0001B3D0                            
0001B3D0                            loc_1A112:				; XREF: off_19E80
0001B3D0 4EB9 0000 E72A             		jsr	SpeedToPos
0001B3D6 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001B3DC 6500                       		bcs.s	loc_1A124
0001B3DE 4268 0010                  		clr.w	$10(a0)
0001B3E2                            
0001B3E2                            loc_1A124:
0001B3E2 0668 0034 0012             		addi.w	#$34,$12(a0)
0001B3E8 4A68 0012                  		tst.w	$12(a0)
0001B3EC 6B00                       		bmi.s	loc_1A142
0001B3EE 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001B3F4 6500                       		bcs.s	loc_1A142
0001B3F6 317C 0592 000C             		move.w	#$592,$C(a0)
0001B3FC 4268 0012                  		clr.w	$12(a0)
0001B400                            
0001B400                            loc_1A142:
0001B400 3028 0010                  		move.w	$10(a0),d0
0001B404 8068 0012                  		or.w	$12(a0),d0
0001B408 6600                       		bne.s	loc_1A15C
0001B40A 5428 0034                  		addq.b	#2,$34(a0)
0001B40E 317C FE80 0012             		move.w	#-$180,$12(a0)
0001B414 117C 0001 0021             		move.b	#1,$21(a0)
0001B41A                            
0001B41A                            loc_1A15C:
0001B41A 43FA F8B6                  		lea	Ani_obj82(pc),a1
0001B41E 4EB9 0000 B79E             		jsr	AnimateSprite
0001B424                            
0001B424                            loc_1A166:
0001B424 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001B42A 6C00                       		bge.s	loc_1A172
0001B42C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B430                            
0001B430                            loc_1A172:
0001B430 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001B436 6C00                       		bge.s	locret_1A190
0001B438 323C 001B                  		move.w	#$1B,d1
0001B43C 343C 0070                  		move.w	#$70,d2
0001B440 363C 0071                  		move.w	#$71,d3
0001B444 3828 0008                  		move.w	8(a0),d4
0001B448 4EF9 0001 0B20             		jmp	SolidObject
0001B44E                            ; ===========================================================================
0001B44E                            
0001B44E                            locret_1A190:
0001B44E 4E75                       		rts	
0001B450                            ; ===========================================================================
0001B450                            
0001B450                            loc_1A192:				; XREF: off_19E80
0001B450 217C 0001 9046 0004        		move.l	#Map_Eggman,4(a0)
0001B458 317C 0400 0002             		move.w	#$400,2(a0)
0001B45E 117C 0000 001C             		move.b	#0,$1C(a0)
0001B464 08E8 0000 0022             		bset	#0,$22(a0)
0001B46A 4EB9 0000 E72A             		jsr	SpeedToPos
0001B470 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001B476 6400                       		bcc.s	loc_1A1D0
0001B478 317C 0180 0010             		move.w	#$180,$10(a0)
0001B47E 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001B484 117C 000F 0020             		move.b	#$F,$20(a0)
0001B48A 5428 0034                  		addq.b	#2,$34(a0)
0001B48E                            
0001B48E                            loc_1A1D0:
0001B48E 6000 FF8A                  		bra.w	loc_1A15C
0001B492                            ; ===========================================================================
0001B492                            
0001B492                            loc_1A1D4:				; XREF: off_19E80
0001B492 08E8 0000 0022             		bset	#0,$22(a0)
0001B498 4EB9 0000 E72A             		jsr	SpeedToPos
0001B49E 4A68 0030                  		tst.w	$30(a0)
0001B4A2 6600                       		bne.s	loc_1A1FC
0001B4A4 4A28 0020                  		tst.b	$20(a0)
0001B4A8 6600                       		bne.s	loc_1A216
0001B4AA 317C 001E 0030             		move.w	#$1E,$30(a0)
0001B4B0 303C 00AC                  		move.w	#$AC,d0
0001B4B4 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B4BA                            
0001B4BA                            loc_1A1FC:
0001B4BA 5368 0030                  		subq.w	#1,$30(a0)
0001B4BE 6600                       		bne.s	loc_1A216
0001B4C0 4A28 0022                  		tst.b	$22(a0)
0001B4C4 6A00                       		bpl.s	loc_1A210
0001B4C6 317C 0060 0012             		move.w	#$60,$12(a0)
0001B4CC 6000                       		bra.s	loc_1A216
0001B4CE                            ; ===========================================================================
0001B4CE                            
0001B4CE                            loc_1A210:
0001B4CE 117C 000F 0020             		move.b	#$F,$20(a0)
0001B4D4                            
0001B4D4                            loc_1A216:
0001B4D4 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001B4DA 6D00                       		blt.s	loc_1A23A
0001B4DC 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001B4E2 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001B4E8 4278 D014                  		clr.w	($FFFFD014).w
0001B4EC 4A68 0012                  		tst.w	$12(a0)
0001B4F0 6A00                       		bpl.s	loc_1A248
0001B4F2 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001B4F8                            
0001B4F8                            loc_1A23A:
0001B4F8 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001B4FE 6D00                       		blt.s	loc_1A248
0001B500 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001B506                            
0001B506                            loc_1A248:
0001B506 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001B50C 6500                       		bcs.s	loc_1A260
0001B50E 4A28 0001                  		tst.b	1(a0)
0001B512 6B00                       		bmi.s	loc_1A260
0001B514 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001B51A 6000 FAF0                  		bra.w	Obj85_Delete
0001B51E                            ; ===========================================================================
0001B51E                            
0001B51E                            loc_1A260:
0001B51E 6000 FEFA                  		bra.w	loc_1A15C
0001B522                            ; ===========================================================================
0001B522                            
0001B522                            loc_1A264:				; XREF: Obj85_Index
0001B522 2268 0034                  		movea.l	$34(a0),a1
0001B526 1011                       		move.b	(a1),d0
0001B528 B010                       		cmp.b	(a0),d0
0001B52A 6600 FAE0                  		bne.w	Obj85_Delete
0001B52E 117C 0007 001C             		move.b	#7,$1C(a0)
0001B534 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001B53A 6C00                       		bge.s	loc_1A280
0001B53C 6000                       		bra.s	loc_1A2A6
0001B53E                            ; ===========================================================================
0001B53E                            
0001B53E                            loc_1A280:
0001B53E 4A69 0010                  		tst.w	$10(a1)
0001B542 6700                       		beq.s	loc_1A28C
0001B544 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B54A                            
0001B54A                            loc_1A28C:
0001B54A 43FA DA96                  		lea	Ani_Eggman(pc),a1
0001B54E 4EB9 0000 B79E             		jsr	AnimateSprite
0001B554                            
0001B554                            loc_1A296:
0001B554 2268 0034                  		movea.l	$34(a0),a1
0001B558 3169 0008 0008             		move.w	8(a1),8(a0)
0001B55E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B564                            
0001B564                            loc_1A2A6:
0001B564 2268 0034                  		movea.l	$34(a0),a1
0001B568 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B56E 7003                       		moveq	#3,d0
0001B570 C028 0022                  		and.b	$22(a0),d0
0001B574 0228 00FC 0001             		andi.b	#-4,1(a0)
0001B57A 8128 0001                  		or.b	d0,1(a0)
0001B57E 4EF9 0000 E750             		jmp	DisplaySprite
0001B584                            ; ===========================================================================
0001B584                            
0001B584                            loc_1A2C6:				; XREF: Obj85_Index
0001B584 2268 0034                  		movea.l	$34(a0),a1
0001B588 1011                       		move.b	(a1),d0
0001B58A B010                       		cmp.b	(a0),d0
0001B58C 6600 FA7E                  		bne.w	Obj85_Delete
0001B590 0CA9 0001 9046 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B598 6700                       		beq.s	loc_1A2E4
0001B59A 117C 000A 001A             		move.b	#$A,$1A(a0)
0001B5A0 60C2                       		bra.s	loc_1A2A6
0001B5A2                            ; ===========================================================================
0001B5A2                            
0001B5A2                            loc_1A2E4:
0001B5A2 117C 0001 001C             		move.b	#1,$1C(a0)
0001B5A8 4A29 0021                  		tst.b	$21(a1)
0001B5AC 6F00                       		ble.s	loc_1A312
0001B5AE 117C 0006 001C             		move.b	#6,$1C(a0)
0001B5B4 217C 0001 9046 0004        		move.l	#Map_Eggman,4(a0)
0001B5BC 317C 0400 0002             		move.w	#$400,2(a0)
0001B5C2 43FA DA1E                  		lea	Ani_Eggman(pc),a1
0001B5C6 4EB9 0000 B79E             		jsr	AnimateSprite
0001B5CC 6000 FF86                  		bra.w	loc_1A296
0001B5D0                            ; ===========================================================================
0001B5D0                            
0001B5D0                            loc_1A312:
0001B5D0 4A28 0001                  		tst.b	1(a0)
0001B5D4 6A00 FA36                  		bpl.w	Obj85_Delete
0001B5D8 6100 D584                  		bsr.w	BossDefeated
0001B5DC 117C 0002 0018             		move.b	#2,$18(a0)
0001B5E2 117C 0000 001C             		move.b	#0,$1C(a0)
0001B5E8 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001B5F0 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001B5F6 43FA 0000                  		lea	Ani_obj85(pc),a1
0001B5FA 4EB9 0000 B79E             		jsr	AnimateSprite
0001B600 6000 FF52                  		bra.w	loc_1A296
0001B604                            ; ===========================================================================
0001B604                            
0001B604                            loc_1A346:				; XREF: Obj85_Index
0001B604 08E8 0000 0022             		bset	#0,$22(a0)
0001B60A 2268 0034                  		movea.l	$34(a0),a1
0001B60E 0CA9 0001 9046 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B616 6700                       		beq.s	loc_1A35E
0001B618 6000 FF4A                  		bra.w	loc_1A2A6
0001B61C                            ; ===========================================================================
0001B61C                            
0001B61C                            loc_1A35E:
0001B61C 3169 0008 0008             		move.w	8(a1),8(a0)
0001B622 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B628 4A28 001E                  		tst.b	$1E(a0)
0001B62C 6600                       		bne.s	loc_1A376
0001B62E 117C 0014 001E             		move.b	#$14,$1E(a0)
0001B634                            
0001B634                            loc_1A376:
0001B634 5328 001E                  		subq.b	#1,$1E(a0)
0001B638 6E00                       		bgt.s	loc_1A38A
0001B63A 5228 001A                  		addq.b	#1,$1A(a0)
0001B63E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001B644 6E00 F9C6                  		bgt.w	Obj85_Delete
0001B648                            
0001B648                            loc_1A38A:
0001B648 6000 FF0A                  		bra.w	loc_1A296
0001B64C                            ; ===========================================================================
0001B64C                            
0001B64C                            loc_1A38E:				; XREF: Obj85_Index
0001B64C 117C 000B 001A             		move.b	#$B,$1A(a0)
0001B652 3038 D008                  		move.w	($FFFFD008).w,d0
0001B656 9068 0008                  		sub.w	8(a0),d0
0001B65A 6500                       		bcs.s	loc_1A3A6
0001B65C 4A28 0001                  		tst.b	1(a0)
0001B660 6A00 F9AA                  		bpl.w	Obj85_Delete
0001B664                            
0001B664                            loc_1A3A6:
0001B664 4EF9 0000 E750             		jmp	DisplaySprite
0001B66A                            ; ===========================================================================
0001B66A                            
0001B66A                            loc_1A3AC:				; XREF: Obj85_Index
0001B66A 117C 0000 001A             		move.b	#0,$1A(a0)
0001B670 08E8 0000 0022             		bset	#0,$22(a0)
0001B676 2268 0034                  		movea.l	$34(a0),a1
0001B67A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001B680 6600                       		bne.s	loc_1A3D0
0001B682 0CA9 0001 9046 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B68A 6700 F980                  		beq.w	Obj85_Delete
0001B68E                            
0001B68E                            loc_1A3D0:
0001B68E 6000 FED4                  		bra.w	loc_1A2A6
0001B692                            ; ===========================================================================
0001B692                            Ani_obj85:
0001B692                            	include "_anim\obj85.asm"
0001B692                            ; ---------------------------------------------------------------------------
0001B692                            ; Animation script - Eggman (FZ)
0001B692                            ; ---------------------------------------------------------------------------
0001B692 0000                       		dc.w byte_1A3D6-Ani_obj85
0001B694 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001B698                            		even
0001B698                            		even
0001B698                            
0001B698                            Map_Eggman2:
0001B698                            	include "_maps\Eggman2.asm"
0001B698                            ; ---------------------------------------------------------------------------
0001B698                            ; Sprite mappings - Eggman (FZ)
0001B698                            ; ---------------------------------------------------------------------------
0001B698 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001B69A 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001B69C 06                         byte_1A3DE:	dc.b 6
0001B69D E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001B6A2 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001B6A7 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001B6AC FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001B6B1 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001B6B6 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001B6BB 06                         byte_1A3FD:	dc.b 6
0001B6BC E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001B6C1 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001B6C6 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001B6CB FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001B6D0 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001B6D5 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001B6DA                            		even
0001B6DA                            		even
0001B6DA                            
0001B6DA                            Map_FZBoss:
0001B6DA                            	include "_maps\FZ boss.asm"
0001B6DA                            ; ---------------------------------------------------------------------------
0001B6DA                            ; Sprite mappings - boss (FZ)
0001B6DA                            ; ---------------------------------------------------------------------------
0001B6DA 0000                       		dc.w byte_1A422-Map_FZBoss
0001B6DC 0000                       		dc.w byte_1A42D-Map_FZBoss
0001B6DE 0000                       		dc.w byte_1A43D-Map_FZBoss
0001B6E0 02                         byte_1A422:	dc.b 2
0001B6E1 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001B6E6 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001B6EB 03                         byte_1A42D:	dc.b 3
0001B6EC 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001B6F1 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001B6F6 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001B6FB 02                         byte_1A43D:	dc.b 2
0001B6FC 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001B701 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001B706                            		even
0001B706                            		even
0001B706                            
0001B706                            ; ===========================================================================
0001B706                            
0001B706                            Obj84_Delete:
0001B706 4EF9 0000 E78C             		jmp	DeleteObject
0001B70C                            ; ===========================================================================
0001B70C                            ; ---------------------------------------------------------------------------
0001B70C                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001B70C                            ; ---------------------------------------------------------------------------
0001B70C                            
0001B70C                            Obj84:					; XREF: Obj_Index
0001B70C 7000                       		moveq	#0,d0
0001B70E 1028 0024                  		move.b	$24(a0),d0
0001B712 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001B716 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001B71A                            ; ===========================================================================
0001B71A 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001B71C 0000                       		dc.w loc_1A4CE-Obj84_Index
0001B71E 0000                       		dc.w loc_1A57E-Obj84_Index
0001B720                            
0001B720 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001B724 2550 0620                  		dc.w $2550, $620
0001B728 2490 04C0                  		dc.w $2490, $4C0
0001B72C 2510 04C0                  		dc.w $2510, $4C0
0001B730                            ; ===========================================================================
0001B730                            
0001B730                            Obj84_Main:				; XREF: Obj84_Index
0001B730 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001B734 7000                       		moveq	#0,d0
0001B736 1028 0028                  		move.b	$28(a0),d0
0001B73A D040                       		add.w	d0,d0
0001B73C D2C0                       		adda.w	d0,a1
0001B73E 117C 0004 0001             		move.b	#4,1(a0)
0001B744 08E8 0007 0001             		bset	#7,1(a0)
0001B74A 08E8 0004 0001             		bset	#4,1(a0)
0001B750 317C 0300 0002             		move.w	#$300,2(a0)
0001B756 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001B75E 3159 0008                  		move.w	(a1)+,8(a0)
0001B762 3151 000C                  		move.w	(a1),$C(a0)
0001B766 3159 0038                  		move.w	(a1)+,$38(a0)
0001B76A 117C 0020 0016             		move.b	#$20,$16(a0)
0001B770 117C 0060 0017             		move.b	#$60,$17(a0)
0001B776 117C 0020 0019             		move.b	#$20,$19(a0)
0001B77C 117C 0060 0016             		move.b	#$60,$16(a0)
0001B782 117C 0003 0018             		move.b	#3,$18(a0)
0001B788 5428 0024                  		addq.b	#2,$24(a0)
0001B78C                            
0001B78C                            loc_1A4CE:				; XREF: Obj84_Index
0001B78C 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B792 6F00                       		ble.s	loc_1A4DC
0001B794 08E8 0001 0001             		bset	#1,1(a0)
0001B79A                            
0001B79A                            loc_1A4DC:
0001B79A 42A8 003C                  		clr.l	$3C(a0)
0001B79E 4A28 0029                  		tst.b	$29(a0)
0001B7A2 6700                       		beq.s	loc_1A4EA
0001B7A4 5428 0024                  		addq.b	#2,$24(a0)
0001B7A8                            
0001B7A8                            loc_1A4EA:
0001B7A8 2028 003C                  		move.l	$3C(a0),d0
0001B7AC 2228 0038                  		move.l	$38(a0),d1
0001B7B0 D280                       		add.l	d0,d1
0001B7B2 4841                       		swap	d1
0001B7B4 3141 000C                  		move.w	d1,$C(a0)
0001B7B8 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001B7BE 6600                       		bne.s	loc_1A524
0001B7C0 4A68 0030                  		tst.w	$30(a0)
0001B7C4 6A00                       		bpl.s	loc_1A524
0001B7C6 70F6                       		moveq	#-$A,d0
0001B7C8 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B7CE 6F00                       		ble.s	loc_1A514
0001B7D0 700E                       		moveq	#$E,d0
0001B7D2                            
0001B7D2                            loc_1A514:
0001B7D2 D240                       		add.w	d0,d1
0001B7D4 2268 0034                  		movea.l	$34(a0),a1
0001B7D8 3341 000C                  		move.w	d1,$C(a1)
0001B7DC 3368 0008 0008             		move.w	8(a0),8(a1)
0001B7E2                            
0001B7E2                            loc_1A524:
0001B7E2 323C 002B                  		move.w	#$2B,d1
0001B7E6 343C 0060                  		move.w	#$60,d2
0001B7EA 363C 0061                  		move.w	#$61,d3
0001B7EE 3828 0008                  		move.w	8(a0),d4
0001B7F2 4EB9 0001 0B20             		jsr	SolidObject
0001B7F8 7000                       		moveq	#0,d0
0001B7FA 3228 003C                  		move.w	$3C(a0),d1
0001B7FE 6A00                       		bpl.s	loc_1A550
0001B800 4441                       		neg.w	d1
0001B802 5141                       		subq.w	#8,d1
0001B804 6500                       		bcs.s	loc_1A55C
0001B806 5200                       		addq.b	#1,d0
0001B808 E841                       		asr.w	#4,d1
0001B80A D041                       		add.w	d1,d0
0001B80C 6000                       		bra.s	loc_1A55C
0001B80E                            ; ===========================================================================
0001B80E                            
0001B80E                            loc_1A550:
0001B80E 0441 0027                  		subi.w	#$27,d1
0001B812 6500                       		bcs.s	loc_1A55C
0001B814 5200                       		addq.b	#1,d0
0001B816 E841                       		asr.w	#4,d1
0001B818 D041                       		add.w	d1,d0
0001B81A                            
0001B81A                            loc_1A55C:
0001B81A 1140 001A                  		move.b	d0,$1A(a0)
0001B81E 3038 D008                  		move.w	($FFFFD008).w,d0
0001B822 9068 0008                  		sub.w	8(a0),d0
0001B826 6B00                       		bmi.s	loc_1A578
0001B828 0440 0140                  		subi.w	#$140,d0
0001B82C 6B00                       		bmi.s	loc_1A578
0001B82E 4A28 0001                  		tst.b	1(a0)
0001B832 6A00 FED2                  		bpl.w	Obj84_Delete
0001B836                            
0001B836                            loc_1A578:
0001B836 4EF9 0000 E750             		jmp	DisplaySprite
0001B83C                            ; ===========================================================================
0001B83C                            
0001B83C                            loc_1A57E:				; XREF: Obj84_Index
0001B83C 7000                       		moveq	#0,d0
0001B83E 1028 0028                  		move.b	$28(a0),d0
0001B842 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001B846 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001B84A 6000 FF5C                  		bra.w	loc_1A4EA
0001B84E                            ; ===========================================================================
0001B84E 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001B850 0000                       		dc.w loc_1A598-off_1A590
0001B852 0000                       		dc.w loc_1A604-off_1A590
0001B854 0000                       		dc.w loc_1A604-off_1A590
0001B856                            ; ===========================================================================
0001B856                            
0001B856                            loc_1A598:				; XREF: off_1A590
0001B856 4A28 0029                  		tst.b	$29(a0)
0001B85A 6600                       		bne.s	loc_1A5D4
0001B85C 2268 0034                  		movea.l	$34(a0),a1
0001B860 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B866 6600                       		bne.s	loc_1A5B4
0001B868 6100 D2F4                  		bsr.w	BossDefeated
0001B86C 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001B874                            
0001B874                            loc_1A5B4:
0001B874 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001B87C 6400                       		bcc.s	locret_1A602
0001B87E 42A8 003C                  		clr.l	$3C(a0)
0001B882 2268 0034                  		movea.l	$34(a0),a1
0001B886 5369 0032                  		subq.w	#1,$32(a1)
0001B88A 4269 0030                  		clr.w	$30(a1)
0001B88E 5528 0024                  		subq.b	#2,$24(a0)
0001B892 4E75                       		rts	
0001B894                            ; ===========================================================================
0001B894                            
0001B894                            loc_1A5D4:
0001B894 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001B89A 6C00                       		bge.s	loc_1A5E4
0001B89C 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001B8A4                            
0001B8A4                            loc_1A5E4:
0001B8A4 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001B8AC 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001B8B2 6E00                       		bgt.s	locret_1A602
0001B8B4 4268 003E                  		clr.w	$3E(a0)
0001B8B8 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001B8BE 4228 0029                  		clr.b	$29(a0)
0001B8C2                            
0001B8C2                            locret_1A602:
0001B8C2 4E75                       		rts	
0001B8C4                            ; ===========================================================================
0001B8C4                            
0001B8C4                            loc_1A604:				; XREF: off_1A590
0001B8C4 08E8 0001 0001             		bset	#1,1(a0)
0001B8CA 4A28 0029                  		tst.b	$29(a0)
0001B8CE 6600                       		bne.s	loc_1A646
0001B8D0 2268 0034                  		movea.l	$34(a0),a1
0001B8D4 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B8DA 6600                       		bne.s	loc_1A626
0001B8DC 6100 D280                  		bsr.w	BossDefeated
0001B8E0 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B8E8                            
0001B8E8                            loc_1A626:
0001B8E8 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B8F0 6400                       		bcc.s	locret_1A674
0001B8F2 42A8 003C                  		clr.l	$3C(a0)
0001B8F6 2268 0034                  		movea.l	$34(a0),a1
0001B8FA 5369 0032                  		subq.w	#1,$32(a1)
0001B8FE 4269 0030                  		clr.w	$30(a1)
0001B902 5528 0024                  		subq.b	#2,$24(a0)
0001B906 4E75                       		rts	
0001B908                            ; ===========================================================================
0001B908                            
0001B908                            loc_1A646:
0001B908 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B90E 6D00                       		blt.s	loc_1A656
0001B910 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B918                            
0001B918                            loc_1A656:
0001B918 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B920 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B926 6D00                       		blt.s	locret_1A674
0001B928 4268 003E                  		clr.w	$3E(a0)
0001B92C 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B932 4228 0029                  		clr.b	$29(a0)
0001B936                            
0001B936                            locret_1A674:
0001B936 4E75                       		rts	
0001B938                            ; ===========================================================================
0001B938                            ; ---------------------------------------------------------------------------
0001B938                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B938                            ; ---------------------------------------------------------------------------
0001B938                            Map_obj84:
0001B938                            	include "_maps\obj84.asm"
0001B938                            ; ---------------------------------------------------------------------------
0001B938                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B938                            ; ---------------------------------------------------------------------------
0001B938 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B93C 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B940 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B944 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B948 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B94C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B950 06                         byte_1A68E:	dc.b 6
0001B951 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B956 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B95B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B960 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B965 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B96A B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B96F 08                         byte_1A6AD:	dc.b 8
0001B970 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B975 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B97A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B97F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B984 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B989 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B98E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B993 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B998 0A                         byte_1A6D6:	dc.b $A
0001B999 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B99E A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B9A3 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B9A8 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B9AD B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B9B2 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B9B7 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B9BC D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B9C1 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B9C6 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B9CB 0C                         byte_1A709:	dc.b $C
0001B9CC A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B9D1 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B9D6 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B9DB B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B9E0 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B9E5 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B9EA D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B9EF D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B9F4 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B9F9 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B9FE 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001BA03 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001BA08 0D                         byte_1A746:	dc.b $D
0001BA09 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001BA0E A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001BA13 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001BA18 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001BA1D B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001BA22 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001BA27 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001BA2C D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001BA31 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001BA36 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001BA3B 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001BA40 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001BA45 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001BA4A 0E                         byte_1A788:	dc.b $E
0001BA4B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001BA50 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001BA55 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001BA5A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001BA5F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001BA64 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001BA69 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001BA6E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001BA73 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001BA78 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001BA7D 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001BA82 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001BA87 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001BA8C 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001BA91 02                         byte_1A7CF:	dc.b 2
0001BA92 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001BA97 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001BA9C                            		even
0001BA9C                            		even
0001BA9C                            
0001BA9C                            ; ===========================================================================
0001BA9C                            ; ---------------------------------------------------------------------------
0001BA9C                            ; Object 86 - energy balls (FZ)
0001BA9C                            ; ---------------------------------------------------------------------------
0001BA9C                            
0001BA9C                            Obj86:					; XREF: Obj_Index
0001BA9C 7000                       		moveq	#0,d0
0001BA9E 1028 0024                  		move.b	$24(a0),d0
0001BAA2 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001BAA6 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001BAAA                            ; ===========================================================================
0001BAAA 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001BAAC 0000                       		dc.w Obj86_Generator-Obj86_Index
0001BAAE 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001BAB0 0000                       		dc.w loc_1A962-Obj86_Index
0001BAB2 0000                       		dc.w loc_1A982-Obj86_Index
0001BAB4                            ; ===========================================================================
0001BAB4                            
0001BAB4                            Obj86_Main:				; XREF: Obj86_Index
0001BAB4 317C 2588 0008             		move.w	#$2588,8(a0)
0001BABA 317C 053C 000C             		move.w	#$53C,$C(a0)
0001BAC0 317C 0300 0002             		move.w	#$300,2(a0)
0001BAC6 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001BACE 117C 0000 001C             		move.b	#0,$1C(a0)
0001BAD4 117C 0003 0018             		move.b	#3,$18(a0)
0001BADA 117C 0008 0017             		move.b	#8,$17(a0)
0001BAE0 117C 0008 0016             		move.b	#8,$16(a0)
0001BAE6 117C 0004 0001             		move.b	#4,1(a0)
0001BAEC 08E8 0007 0001             		bset	#7,1(a0)
0001BAF2 5428 0024                  		addq.b	#2,$24(a0)
0001BAF6                            
0001BAF6                            Obj86_Generator:			; XREF: Obj86_Index
0001BAF6 2268 0034                  		movea.l	$34(a0),a1
0001BAFA 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001BB00 6600                       		bne.s	loc_1A850
0001BB02 10BC 003F                  		move.b	#$3F,(a0)
0001BB06 117C 0000 0024             		move.b	#0,$24(a0)
0001BB0C 4EF9 0000 E750             		jmp	DisplaySprite
0001BB12                            ; ===========================================================================
0001BB12                            
0001BB12                            loc_1A850:
0001BB12 117C 0000 001C             		move.b	#0,$1C(a0)
0001BB18 4A28 0029                  		tst.b	$29(a0)
0001BB1C 6700                       		beq.s	loc_1A86C
0001BB1E 5428 0024                  		addq.b	#2,$24(a0)
0001BB22 117C 0001 001C             		move.b	#1,$1C(a0)
0001BB28 117C 003E 0028             		move.b	#$3E,$28(a0)
0001BB2E                            
0001BB2E                            loc_1A86C:
0001BB2E 323C 0013                  		move.w	#$13,d1
0001BB32 343C 0008                  		move.w	#8,d2
0001BB36 363C 0011                  		move.w	#$11,d3
0001BB3A 3828 0008                  		move.w	8(a0),d4
0001BB3E 4EB9 0001 0B20             		jsr	SolidObject
0001BB44 3038 D008                  		move.w	($FFFFD008).w,d0
0001BB48 9068 0008                  		sub.w	8(a0),d0
0001BB4C 6B00                       		bmi.s	loc_1A89A
0001BB4E 0440 0140                  		subi.w	#$140,d0
0001BB52 6B00                       		bmi.s	loc_1A89A
0001BB54 4A28 0001                  		tst.b	1(a0)
0001BB58 6A00 FBAC                  		bpl.w	Obj84_Delete
0001BB5C                            
0001BB5C                            loc_1A89A:
0001BB5C 43FA 0000                  		lea	Ani_obj86(pc),a1
0001BB60 4EB9 0000 B79E             		jsr	AnimateSprite
0001BB66 4EF9 0000 E750             		jmp	DisplaySprite
0001BB6C                            ; ===========================================================================
0001BB6C                            
0001BB6C                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001BB6C 4A28 0029                  		tst.b	$29(a0)
0001BB70 6700 0000                  		beq.w	loc_1A954
0001BB74 4228 0029                  		clr.b	$29(a0)
0001BB78 D068 0030                  		add.w	$30(a0),d0
0001BB7C 0240 001E                  		andi.w	#$1E,d0
0001BB80 D4C0                       		adda.w	d0,a2
0001BB82 5868 0030                  		addq.w	#4,$30(a0)
0001BB86 4268 0032                  		clr.w	$32(a0)
0001BB8A 7403                       		moveq	#3,d2
0001BB8C                            
0001BB8C                            Obj86_Loop:
0001BB8C 4EB9 0000 EBEC             		jsr	SingleObjLoad2
0001BB92 6600 0000                  		bne.w	loc_1A954
0001BB96 12BC 0086                  		move.b	#$86,(a1)
0001BB9A 3368 0008 0008             		move.w	8(a0),8(a1)
0001BBA0 337C 053C 000C             		move.w	#$53C,$C(a1)
0001BBA6 137C 0008 0024             		move.b	#8,$24(a1)
0001BBAC 337C 2300 0002             		move.w	#$2300,2(a1)
0001BBB2 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001BBBA 137C 000C 0016             		move.b	#$C,$16(a1)
0001BBC0 137C 000C 0017             		move.b	#$C,$17(a1)
0001BBC6 137C 0000 0020             		move.b	#0,$20(a1)
0001BBCC 137C 0003 0018             		move.b	#3,$18(a1)
0001BBD2 337C 003E 0028             		move.w	#$3E,$28(a1)
0001BBD8 137C 0004 0001             		move.b	#4,1(a1)
0001BBDE 08E9 0007 0001             		bset	#7,1(a1)
0001BBE4 2348 0034                  		move.l	a0,$34(a1)
0001BBE8 4EB9 0000 33FE             		jsr	(RandomNumber).l
0001BBEE 3228 0032                  		move.w	$32(a0),d1
0001BBF2 C3FC FFB1                  		muls.w	#-$4F,d1
0001BBF6 0641 2578                  		addi.w	#$2578,d1
0001BBFA 0240 001F                  		andi.w	#$1F,d0
0001BBFE 0440 0010                  		subi.w	#$10,d0
0001BC02 D041                       		add.w	d1,d0
0001BC04 3340 0030                  		move.w	d0,$30(a1)
0001BC08 5268 0032                  		addq.w	#1,$32(a0)
0001BC0C 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001BC12 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001BC16                            
0001BC16                            loc_1A954:
0001BC16 4A68 0032                  		tst.w	$32(a0)
0001BC1A 6600                       		bne.s	loc_1A95E
0001BC1C 5428 0024                  		addq.b	#2,$24(a0)
0001BC20                            
0001BC20                            loc_1A95E:
0001BC20 6000 FF0C                  		bra.w	loc_1A86C
0001BC24                            ; ===========================================================================
0001BC24                            
0001BC24                            loc_1A962:				; XREF: Obj86_Index
0001BC24 117C 0002 001C             		move.b	#2,$1C(a0)
0001BC2A 4A68 0038                  		tst.w	$38(a0)
0001BC2E 6600                       		bne.s	loc_1A97E
0001BC30 117C 0002 0024             		move.b	#2,$24(a0)
0001BC36 2268 0034                  		movea.l	$34(a0),a1
0001BC3A 337C FFFF 0032             		move.w	#-1,$32(a1)
0001BC40                            
0001BC40                            loc_1A97E:
0001BC40 6000 FEEC                  		bra.w	loc_1A86C
0001BC44                            ; ===========================================================================
0001BC44                            
0001BC44                            loc_1A982:				; XREF: Obj86_Index
0001BC44 7000                       		moveq	#0,d0
0001BC46 1028 0025                  		move.b	$25(a0),d0
0001BC4A 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001BC4E 4EFB 0000                  		jmp	Obj86_Index2(pc,d0.w)
0001BC52                            ; ===========================================================================
0001BC52 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001BC54 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001BC56 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2	; orb random 1
0001BC58 0000                       		dc.w Obj86_Ball_Sine-Obj86_Index2	; rob random 2
0001BC5A 0000                       		dc.w Obj86_Ball_Explode-Obj86_Index2	; orb random 3
0001BC5C 0000                       		dc.w Obj86_Ball_Speed-Obj86_Index2	; yeah you get it
0001BC5E 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001BC60 0000                       		dc.w Obj86_Ball_Homing-Obj86_Index2
0001BC62 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001BC64 0000                       		dc.w Obj86_Ball_Static-Obj86_Index2
0001BC66                            ; ===========================================================================
0001BC66                            
0001BC66                            loc_1A9A6:				; XREF: Obj86_Index2
0001BC66 3028 0030                  		move.w	$30(a0),d0
0001BC6A 9068 0008                  		sub.w	8(a0),d0
0001BC6E E940                       		asl.w	#4,d0
0001BC70 3140 0010                  		move.w	d0,$10(a0)
0001BC74 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001BC7A 5428 0025                  		addq.b	#2,$25(a0)
0001BC7E                            
0001BC7E                            Obj86_Ball_Animate:
0001BC7E 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001BC82 4EB9 0000 B79E             		jsr	AnimateSprite
0001BC88 4EF9 0000 E750             		jmp	DisplaySprite
0001BC8E                            ; ===========================================================================
0001BC8E                            
0001BC8E                            loc_1A9C0:				; XREF: Obj86_Index2
0001BC8E 4A68 0010                  		tst.w	$10(a0)
0001BC92 6700                       		beq.s	loc_1A9E6
0001BC94 4EB9 0000 E72A             		jsr	SpeedToPos
0001BC9A 3028 0008                  		move.w	8(a0),d0
0001BC9E 9068 0030                  		sub.w	$30(a0),d0
0001BCA2 6400                       		bcc.s	loc_1A9E6
0001BCA4 4268 0010                  		clr.w	$10(a0)
0001BCA8 D168 0008                  		add.w	d0,8(a0)
0001BCAC 2268 0034                  		movea.l	$34(a0),a1
0001BCB0 5369 0032                  		subq.w	#1,$32(a1)
0001BCB4                            
0001BCB4                            loc_1A9E6:
0001BCB4 117C 0000 001C             		move.b	#0,$1C(a0)
0001BCBA 5368 0028                  		subq.w	#1,$28(a0)
0001BCBE 6600                       		bne.s	locret_1AA1C
0001BCC0 4EB8 33FE                  		jsr	RandomNumber
0001BCC4 0240 000E                  		and.w	#7*2,d0
0001BCC8 5840                       		addq.w	#2*2,d0
0001BCCA 1140 0025                  		move.b	d0,$25(a0)	; set routine
0001BCCE 4840                       		swap	d0
0001BCD0 3140 0028                  		move.w	d0,$28(a0)	; set other number
0001BCD4 117C 0001 001C             		move.b	#1,$1C(a0)
0001BCDA 117C 009A 0020             		move.b	#$9A,$20(a0)
0001BCE0 3038 D008                  		move.w	($FFFFD008).w,d0
0001BCE4 9068 0008                  		sub.w	8(a0),d0
0001BCE8 3140 0010                  		move.w	d0,$10(a0)
0001BCEC 317C 0140 0012             		move.w	#$140,$12(a0)
0001BCF2                            
0001BCF2                            locret_1AA1C:
0001BCF2 6000 FF8A                  		bra.w	Obj86_Ball_Animate
0001BCF6                            ; ===========================================================================
0001BCF6                            
0001BCF6                            Obj86_Ball_Explode:
0001BCF6 5328 0028                  		subq.b	#1,$28(a0)
0001BCFA 6A00 FF82                  		bpl.w	Obj86_Ball_Animate
0001BCFE 2268 0034                  		movea.l	$34(a0),a1
0001BD02 5369 0038                  		subq.w	#1,$38(a1)
0001BD06 2248                       		move.l	a0,a1
0001BD08 7400                       		moveq	#0,d2	; GMZ
0001BD0A 720F                       		moveq	#16-1,d1	; GMZ: Amount of explosion objects
0001BD0C 6000                       		bra.s	@start
0001BD0E                            @loop:
0001BD0E 4EB9 0000 EBD6             		jsr	SingleObjLoad
0001BD14 6600                       		bne.s	@exit
0001BD16 3368 0008 0008             		move.w	8(a0),8(a1)
0001BD1C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BD22                            @start:
0001BD22 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BD26 137C 0002 0024             		move.b	#2,$24(a1)	; ML: no animal
0001BD2C 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype:
0001BD30 5802                       		addq.b	#4,d2
0001BD32 51C9 FFDA                  		dbf	d1,@loop
0001BD36                            @exit:
0001BD36 6000 FF46                  		bra.w	Obj86_Ball_Animate
0001BD3A                            ; ===========================================================================
0001BD3A                            
0001BD3A                            Obj86_Ball_Sine:
0001BD3A 1028 0028                  		move.b	$28(a0),d0
0001BD3E 5828 0028                  		addq.b	#4,$28(a0)
0001BD42 4EB8 3424                  		jsr	CalcSine
0001BD46 C1FC 0002                  		muls.w	#2,d0
0001BD4A 3140 0010                  		move.w	d0,$10(a0)
0001BD4E                            
0001BD4E 1028 0029                  		move.b	$29(a0),d0
0001BD52 5828 0029                  		addq.b	#4,$29(a0)
0001BD56 4EB8 3424                  		jsr	CalcSine
0001BD5A 4A40                       		tst.w	d0
0001BD5C 6B00                       		bmi.s	@upwards
0001BD5E E548                       		lsl.w	#2,d0		; x4 go down faster
0001BD60                            @upwards:
0001BD60 3140 0012                  		move.w	d0,$12(a0)
0001BD64 6000 0000                  		bra.w	loc_1AA1E
0001BD68                            ; ===========================================================================
0001BD68                            
0001BD68                            Obj86_Ball_Homing:
0001BD68 0C28 00F0 0028             		cmp.b	#$F0,$28(a0)
0001BD6E 6400                       		bhs.s	@homer
0001BD70 0C28 00E0 0028             		cmp.b	#$E0,$28(a0)
0001BD76 6400                       		bhs.s	Obj86_Ball_Vanish
0001BD78 5328 0028                  		subq.b	#1,$28(a0)
0001BD7C 6400                       		bcc.s	@nomorehoming
0001BD7E 3038 D008                  		move.w	($FFFFD008).w,d0
0001BD82 9068 0008                  		sub.w	8(a0),d0
0001BD86 D168 0010                  		add.w	d0,$10(a0)
0001BD8A D168 0010                  		add.w	d0,$10(a0)
0001BD8E                            @nomorehoming:
0001BD8E 6000 0000                  		bra.w	loc_1AA1E
0001BD92                            @homer:
0001BD92 0C28 00DF 0028             		cmp.b	#$DF,$28(a0)
0001BD98 60F4                       		bra.s	@nomorehoming	; next frame ig
0001BD9A                            ; ===========================================================================
0001BD9A                            
0001BD9A                            Obj86_Ball_Speed:
0001BD9A 4268 0010                  		clr.w	$10(a0)
0001BD9E 7000                       		moveq	#0,d0
0001BDA0 1028 0028                  		move.b	$28(a0),d0
0001BDA4 E448                       		lsr.w	#2,d0
0001BDA6 D168 0012                  		add.w	d0,$12(a0)
0001BDAA 1028 0029                  		move.b	$29(a0),d0
0001BDAE D128 0028                  		add.b	d0,$28(a0)
0001BDB2 6000 0000                  		bra.w	loc_1AA1E
0001BDB6                            ; ===========================================================================
0001BDB6                            
0001BDB6                            Obj86_Ball_Vanish:
0001BDB6 303C 00E1                  		move.w	#$E1,d0
0001BDBA 4EB9 0000 1C82             		jsr	(PlaySound_Special).l
0001BDC0 6000 0000                  		bra.w	loc_1AA34
0001BDC4                            ; ===========================================================================
0001BDC4                            
0001BDC4                            Obj86_Ball_Static:
0001BDC4 4268 0010                  		clr.w	$10(a0)
0001BDC8 7000                       		moveq	#0,d0
0001BDCA 7200                       		moveq	#0,d1
0001BDCC 1028 0028                  		move.b	$28(a0),d0
0001BDD0 1228 0029                  		move.b	$29(a0),d1
0001BDD4 D041                       		add.w	d1,d0
0001BDD6 3140 0012                  		move.w	d0,$12(a0)
0001BDDA 6000 0000                  		bra.w	loc_1AA1E
0001BDDE                            ; ===========================================================================
0001BDDE                            
0001BDDE                            Obj86_Ball_Standard:
0001BDDE                            loc_1AA1E:
0001BDDE 4EB9 0000 E72A             		jsr	SpeedToPos
0001BDE4 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001BDEA 6500 FE92                  		blo.w	Obj86_Ball_Animate
0001BDEE                            loc_1AA34:
0001BDEE 2268 0034                  		movea.l	$34(a0),a1
0001BDF2 5369 0038                  		subq.w	#1,$38(a1)
0001BDF6 6000 F90E                  		bra.w	Obj84_Delete
0001BDFA                            ; ===========================================================================
0001BDFA                            Ani_obj86:
0001BDFA                            	include "_anim\obj86.asm"
0001BDFA                            ; ---------------------------------------------------------------------------
0001BDFA                            ; Animation script - energy ball launcher (FZ)
0001BDFA                            ; ---------------------------------------------------------------------------
0001BDFA 0000                       		dc.w byte_1AA46-Ani_obj86
0001BDFC 0000                       		dc.w byte_1AA4A-Ani_obj86
0001BDFE 0000                       		dc.w byte_1AA50-Ani_obj86
0001BE00 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001BE04 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001BE0A 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001BE10                            		even
0001BE10                            		even
0001BE10                            
0001BE10                            ; ---------------------------------------------------------------------------
0001BE10                            ; Sprite mappings - energy ball	launcher (FZ)
0001BE10                            ; ---------------------------------------------------------------------------
0001BE10                            Map_obj86:
0001BE10                            	include "_maps\obj86.asm"
0001BE10                            ; ---------------------------------------------------------------------------
0001BE10                            ; Sprite mappings - energy ball	launcher (FZ)
0001BE10                            ; ---------------------------------------------------------------------------
0001BE10 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001BE14 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001BE18 01                         byte_1AA5E:	dc.b 1
0001BE19 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001BE1E 01                         byte_1AA64:	dc.b 1
0001BE1F F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001BE24 01                         byte_1AA6A:	dc.b 1
0001BE25 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001BE2A 01                         byte_1AA70:	dc.b 1
0001BE2B F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001BE30                            		even
0001BE30                            		even
0001BE30                            
0001BE30                            Ani_obj86a:
0001BE30                            	include "_anim\obj86a.asm"
0001BE30                            ; ---------------------------------------------------------------------------
0001BE30                            ; Animation script - energy balls (FZ)
0001BE30                            ; ---------------------------------------------------------------------------
0001BE30 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001BE32 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001BE34 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001BE43 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001BE52 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001BE56 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001BE60                            		even
0001BE60                            		even
0001BE60                            
0001BE60                            ; ---------------------------------------------------------------------------
0001BE60                            ; Sprite mappings - energy balls (FZ)
0001BE60                            ; ---------------------------------------------------------------------------
0001BE60                            Map_obj86a:
0001BE60                            	include "_maps\obj86a.asm"
0001BE60                            ; ---------------------------------------------------------------------------
0001BE60                            ; Sprite mappings - energy balls (FZ)
0001BE60                            ; ---------------------------------------------------------------------------
0001BE60 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001BE64 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001BE68 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001BE6C 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001BE70 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001BE74 0000                       		dc.w byte_1AB20-Map_obj86a
0001BE76 02                         byte_1AABC:	dc.b 2
0001BE77 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001BE7C 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001BE81 02                         byte_1AAC7:	dc.b 2
0001BE82 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001BE87 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001BE8C 02                         byte_1AAD2:	dc.b 2
0001BE8D F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001BE92 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001BE97 02                         byte_1AADD:	dc.b 2
0001BE98 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001BE9D 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001BEA2 02                         byte_1AAE8:	dc.b 2
0001BEA3 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001BEA8 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001BEAD 02                         byte_1AAF3:	dc.b 2
0001BEAE F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001BEB3 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001BEB8 01                         byte_1AAFE:	dc.b 1
0001BEB9 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001BEBE 01                         byte_1AB04:	dc.b 1
0001BEBF F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001BEC4 02                         byte_1AB0A:	dc.b 2
0001BEC5 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001BECA 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001BECF 02                         byte_1AB15:	dc.b 2
0001BED0 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001BED5 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001BEDA 00                         byte_1AB20:	dc.b 0
0001BEDC 00                         		even
0001BEDC 00                         		even
0001BEDC                            
0001BEDC                            ; ===========================================================================
0001BEDC                            ; ---------------------------------------------------------------------------
0001BEDC                            ; Object 3E - prison capsule
0001BEDC                            ; ---------------------------------------------------------------------------
0001BEDC                            
0001BEDC                            Obj3E:					; XREF: Obj_Index
0001BEDC 7000                       		moveq	#0,d0
0001BEDE 1028 0024                  		move.b	$24(a0),d0
0001BEE2 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001BEE6 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001BEEA 3028 0008                  		move.w	8(a0),d0
0001BEEE 0240 FF80                  		andi.w	#$FF80,d0
0001BEF2 3238 F700                  		move.w	($FFFFF700).w,d1
0001BEF6 0441 0080                  		subi.w	#$80,d1
0001BEFA 0241 FF80                  		andi.w	#$FF80,d1
0001BEFE 9041                       		sub.w	d1,d0
0001BF00 0C40 0280                  		cmpi.w	#$280,d0
0001BF04 6200                       		bhi.s	Obj3E_Delete
0001BF06 4EF9 0000 E750             		jmp	DisplaySprite
0001BF0C                            ; ===========================================================================
0001BF0C                            
0001BF0C                            Obj3E_Delete:
0001BF0C 4EF9 0000 E78C             		jmp	DeleteObject
0001BF12                            ; ===========================================================================
0001BF12 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001BF14 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001BF16 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001BF18 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001BF1A 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001BF1C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001BF1E 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001BF20 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001BF22                            
0001BF22 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001BF26 040C 0501                  		dc.b 4,	$C, 5, 1
0001BF2A 0610 0403                  		dc.b 6,	$10, 4,	3
0001BF2E 0810 0305                  		dc.b 8,	$10, 3,	5
0001BF32                            ; ===========================================================================
0001BF32                            
0001BF32                            Obj3E_Main:				; XREF: Obj3E_Index
0001BF32 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001BF3A 317C 049D 0002             		move.w	#$49D,2(a0)
0001BF40 117C 0004 0001             		move.b	#4,1(a0)
0001BF46 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001BF4C 7000                       		moveq	#0,d0
0001BF4E 1028 0028                  		move.b	$28(a0),d0
0001BF52 E548                       		lsl.w	#2,d0
0001BF54 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001BF58 1159 0024                  		move.b	(a1)+,$24(a0)
0001BF5C 1159 0019                  		move.b	(a1)+,$19(a0)
0001BF60 1159 0018                  		move.b	(a1)+,$18(a0)
0001BF64 1159 001A                  		move.b	(a1)+,$1A(a0)
0001BF68 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001BF6C 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001BF6E 117C 0006 0020             		move.b	#6,$20(a0)
0001BF74 117C 0008 0021             		move.b	#8,$21(a0)
0001BF7A                            
0001BF7A                            Obj3E_Not02:
0001BF7A 4E75                       		rts	
0001BF7C                            ; ===========================================================================
0001BF7C                            
0001BF7C                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001BF7C 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001BF82 6700                       		beq.s	Obj3E_ChkOpened
0001BF84 323C 002B                  		move.w	#$2B,d1
0001BF88 343C 0018                  		move.w	#$18,d2
0001BF8C 363C 0018                  		move.w	#$18,d3
0001BF90 3828 0008                  		move.w	8(a0),d4
0001BF94 4EF9 0001 0B20             		jmp	SolidObject
0001BF9A                            ; ===========================================================================
0001BF9A                            
0001BF9A                            Obj3E_ChkOpened:
0001BF9A 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001BF9E 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001BFA0 4228 0025                  		clr.b	$25(a0)
0001BFA4 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BFAA 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001BFB0                            
0001BFB0                            Obj3E_DoOpen:
0001BFB0 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001BFB6 4E75                       		rts	
0001BFB8                            ; ===========================================================================
0001BFB8                            
0001BFB8                            Obj3E_Switched:				; XREF: Obj3E_Index
0001BFB8 323C 0017                  		move.w	#$17,d1
0001BFBC 343C 0008                  		move.w	#8,d2
0001BFC0 363C 0008                  		move.w	#8,d3
0001BFC4 3828 0008                  		move.w	8(a0),d4
0001BFC8 4EB9 0001 0B20             		jsr	SolidObject
0001BFCE 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001BFD4 4EB9 0000 B79E             		jsr	AnimateSprite
0001BFDA 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001BFE0 4A28 0025                  		tst.b	$25(a0)
0001BFE4 6700                       		beq.s	locret_1AC60
0001BFE6 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001BFEA 6600                       		bne.s	Obj3E_SkipScrPosChk	; GMZ: If not, branch
0001BFEC 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w	; GMZ: Is screen X pos 2AC0?
0001BFF2 6600                       		bne.s	locret_1AC60	; GMZ: If not, branch
0001BFF4                            
0001BFF4                            Obj3E_SkipScrPosChk:
0001BFF4 5068 000C                  		addq.w	#8,$C(a0)
0001BFF8 117C 000A 0024             		move.b	#$A,$24(a0)
0001BFFE                            		; move.w	#$3C,$1E(a0)
0001BFFE 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C002 6600                       		bne.s	Obj3E_SetNormalTimer	; GMZ: If not, branch
0001C004 317C 0100 001E             		move.w	#$100,$1E(a0)	; GMZ: Timer for "Sonic Got Through"
0001C00A 6000                       		bra.s	Obj3E_LockCtrl	; GMZ
0001C00C                            
0001C00C                            Obj3E_SetNormalTimer:	; GMZ
0001C00C 317C 003C 001E             		move.w	#$3C,$1E(a0)	; GMZ
0001C012                            
0001C012                            Obj3E_LockCtrl:	; GMZ
0001C012 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001C016 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001C01A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001C020 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C024 6700                       		beq.s	Obj3E_NoCtrl	; GMZ: If yes, branch
0001C026 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001C02C 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001C02E 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001C034 6000                       		bra.s	Obj3E_ContinueCode
0001C036                            
0001C036                            Obj3E_MoveLeft:
0001C036 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001C03C                            
0001C03C                            Obj3E_NoCtrl:	; GMZ
0001C03C                            Obj3E_ContinueCode:
0001C03C 4228 0025                  		clr.b	$25(a0)
0001C040 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C044 6700                       		beq.s	Obj3E_LoadTruthNuke	; GMZ: If yes, branch
0001C046 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C04C 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C052                            
0001C052                            locret_1AC60:
0001C052 4E75                       		rts	
0001C054                            
0001C054                            Obj3E_LoadTruthNuke:	; GMZ
0001C054 2448                       		move.l	a0,a2	; GMZ
0001C056 207C FFFF D000             		move.l	#$FFFFD000,a0
0001C05C 4EB9 0000 E78C             		jsr	DeleteObject	; GMZ: Delete Sonic's object
0001C062 207C FFFF D040             		move.l	#$FFFFD040,a0
0001C068 4EB9 0000 E78C             		jsr	DeleteObject	; GMZ: Delete the HUD object
0001C06E 204A                       		move.l	a2,a0
0001C070 303C 00E4                  		move.w	#$E4,d0
0001C074 4EB8 1C82                  		jsr	PlaySound_Special	; GMZ: Stop music
0001C078 303C 00CD                  		move.w	#$CD,d0
0001C07C 4EB8 1C7C                  		jsr	PlaySound	; GMZ: Play a button sound
0001C080 11FC 0001 FFF9             		move.b	#1,($FFFFFFF9).w	; GMZ: Set truth nuke flag
0001C086 48E7 FF80                  		movem.l	d0-d7/a0,-(sp)
0001C08A 4EB8 2836                  		jsr	Pal_MakeFlash
0001C08E 4CDF 01FF                  		movem.l	(sp)+,d0-d7/a0
0001C092 31FC 0000 FBC0             		move.w	#$0000,($FFFFFBC0).w	; GMZ: Make BG color black
0001C098                            		; lea	(Obj3E_TNScrPos).l,a1
0001C098                            		; moveq	#0,d2
0001C098                            		; move.b	($FFFFFE10).w,d2
0001C098                            		; lsl.l	#3,d2
0001C098                            		; move.l	(a1,d2.w),d0
0001C098                            		; move.l	4(a1,d2.w),d1
0001C098                            		; move.l	d0,($FFFFF700).w
0001C098                            		; move.l	d1,($FFFFF704).w
0001C098                            		; cmpi.b	#8,d2
0001C098                            		; ; beq.s	Obj3E_IsLZ
0001C098                            		; ; move.l	#$00000000,($FFFFF704).w	; GMZ: Set camera to the top of the stage
0001C098                            		; ; bra.s	Obj3E_IsntLZ
0001C098                            		; bne.s	Obj3E_IsntLZ
0001C098                            
0001C098                            ; Obj3E_IsLZ:
0001C098                            		; move.l	#$01600000,($FFFFD00C).w
0001C098                            		; move.l	#$01000000,($FFFFF704).w
0001C098                            		; move.l	#$20300000,($FFFFF700).w
0001C098                            		; move.l	#0,($FFFFF646).w
0001C098                            		; move.l	#0,($FFFFF64A).w
0001C098                            		; move.b	#0,($FFFFF64E).w
0001C098 21FC 2AC0 0000 F700        		move.l	#$2AC00000,($FFFFF700).w	; GMZ
0001C0A0 21FC 0000 0000 F704        		move.l	#$00000000,($FFFFF704).w	; GMZ
0001C0A8                            
0001C0A8                            Obj3E_IsntLZ:
0001C0A8 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C0AE 7000                       		moveq	#0,d0
0001C0B0 7200                       		moveq	#0,d1
0001C0B2 303C 0A40                  		move.w	#$A40,d0
0001C0B6                            
0001C0B6                            Obj3E_ClearChunks:
0001C0B6 22C1                       		move.l	d1,(a1)+
0001C0B8 22C1                       		move.l	d1,(a1)+
0001C0BA 22C1                       		move.l	d1,(a1)+
0001C0BC 22C1                       		move.l	d1,(a1)+	; GMZ: Clear chunks to prevent garbage from appearing
0001C0BE 51C8 FFF6                  		dbf	d0,Obj3E_ClearChunks
0001C0C2 43F9 00FF A400             		lea	($FFA400).l,a1
0001C0C8 303C 0100                  		move.w	#$100,d0
0001C0CC                            
0001C0CC                            Obj3E_ClearLayout:
0001C0CC 22C1                       		move.l	d1,(a1)+	; GMZ: Clear layout to prevent garbage from appearing
0001C0CE 51C8 FFFC                  		dbf	d0,Obj3E_ClearLayout
0001C0D2                            
0001C0D2 4EB8 1BA8                  		jsr	ClearScreen
0001C0D6 4EB8 1EC4                  		jsr	ClearPLC
0001C0DA 7023                       		moveq	#$23,d0
0001C0DC 4EB8 1E66                  		jsr	LoadPLC	; GMZ: Load art
0001C0E0 2448                       		move.l	a0,a2	; Save a0 to a2
0001C0E2 43F9 00FF B010             		lea	($FFB010).l,a1
0001C0E8 41F9 0000 0000             		lea	(Eni_TruthNuke).l,a0
0001C0EE 303C 0000                  		move.w	#0,d0
0001C0F2 4EB8 2004                  		jsr	EniDec
0001C0F6 43F9 00FF B010             		lea	($FFB010).l,a1
0001C0FC 203C 4000 0003             		move.l	#$40000003,d0
0001C102 7200                       		moveq	#0,d1
0001C104 3238 F700                  		move.w	($FFFFF700).w,d1
0001C108 0241 01F8                  		andi.w	#$1F8,d1
0001C10C E189                       		lsl.l	#8,d1
0001C10E ED89                       		lsl.l	#6,d1
0001C110 D081                       		add.l	d1,d0	; GMZ: Get correct plane position
0001C112 7227                       		moveq	#$27,d1
0001C114 741B                       		moveq	#$1B,d2
0001C116 4EB8 1D06                  		jsr	ShowVDPGraphics	; GMZ: Load plane mappings
0001C11A 204A                       		move.l	a2,a0	; GMZ: Recover a0 from a2
0001C11C 4E75                       		rts	
0001C11E                            ; ===========================================================================
0001C11E                            
0001C11E                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001C11E 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C122 6700                       		beq.s	Obj3E_TNExplosion	; GMZ: If yes, branch
0001C124 7007                       		moveq	#7,d0
0001C126 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C12A 6600                       		bne.s	loc_1ACA0
0001C12C 4EB9 0000 EBD6             		jsr	SingleObjLoad
0001C132 6600                       		bne.s	loc_1ACA0
0001C134 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001C138 3368 0008 0008             		move.w	8(a0),8(a1)
0001C13E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C144 4EB9 0000 33FE             		jsr	(RandomNumber).l
0001C14A 7200                       		moveq	#0,d1
0001C14C 1200                       		move.b	d0,d1
0001C14E E409                       		lsr.b	#2,d1
0001C150 0441 0020                  		subi.w	#$20,d1
0001C154 D369 0008                  		add.w	d1,8(a1)
0001C158 E048                       		lsr.w	#8,d0
0001C15A E608                       		lsr.b	#3,d0
0001C15C D169 000C                  		add.w	d0,$C(a1)
0001C160                            
0001C160                            loc_1ACA0:
0001C160 5368 001E                  		subq.w	#1,$1E(a0)
0001C164 6700                       		beq.s	Obj3E_MakeAnimal
0001C166 4E75                       		rts	
0001C168                            
0001C168                            Obj3E_TNExplosion:
0001C168 303C 00C1                  		move.w	#$C1,d0
0001C16C 4EB8 1C7C                  		jsr	PlaySound	; GMZ: Play multiple explosion sounds while we wait
0001C170 5368 001E                  		subq.w	#1,$1E(a0)
0001C174 6700 0000                  		beq.w	Obj3E_TNExplTimerOver	; GMZ: If timer is 0, branch
0001C178 4E75                       		rts
0001C17A                            
0001C17A                            Obj3E_TNExplTimerOver:	; GMZ
0001C17A 48E7 FF80                  		movem.l	d0-d7/a0,-(sp)
0001C17E 4EB8 278A                  		jsr	Pal_MakeWhite	; GMZ: Fade out from black
0001C182 4CDF 01FF                  		movem.l	(sp)+,d0-d7/a0
0001C186 317C 0080 001E             		move.w	#$80,$1E(a0)	; GMZ: Set new timer
0001C18C 117C 000E 0024             		move.b	#$E,$24(a0)	; GMZ: Set routine to 0E (End Act)
0001C192 4E75                       		rts	
0001C194                            ; ===========================================================================
0001C194                            
0001C194                            Obj3E_MakeAnimal:
0001C194 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001C19A 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001C1A0 117C 0006 001A             		move.b	#6,$1A(a0)
0001C1A6 317C 0096 001E             		move.w	#$96,$1E(a0)
0001C1AC 0668 0020 000C             		addi.w	#$20,$C(a0)
0001C1B2 7C07                       		moveq	#7,d6
0001C1B4 3A3C 009A                  		move.w	#$9A,d5
0001C1B8 78E4                       		moveq	#-$1C,d4
0001C1BA                            
0001C1BA                            Obj3E_Loop:
0001C1BA 4EB9 0000 EBD6             		jsr	SingleObjLoad
0001C1C0 6600                       		bne.s	locret_1ACF8
0001C1C2 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C1C6 3368 0008 0008             		move.w	8(a0),8(a1)
0001C1CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C1D2 D969 0008                  		add.w	d4,8(a1)
0001C1D6 5E44                       		addq.w	#7,d4
0001C1D8 3345 0036                  		move.w	d5,$36(a1)
0001C1DC 5145                       		subq.w	#8,d5
0001C1DE 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001C1E2                            
0001C1E2                            locret_1ACF8:
0001C1E2 4E75                       		rts	
0001C1E4                            ; ===========================================================================
0001C1E4                            
0001C1E4                            Obj3E_Animals:				; XREF: Obj3E_Index
0001C1E4 7007                       		moveq	#7,d0
0001C1E6 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C1EA 6600                       		bne.s	loc_1AD38
0001C1EC 4EB9 0000 EBD6             		jsr	SingleObjLoad
0001C1F2 6600                       		bne.s	loc_1AD38
0001C1F4 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C1F8 3368 0008 0008             		move.w	8(a0),8(a1)
0001C1FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C204 4EB9 0000 33FE             		jsr	(RandomNumber).l
0001C20A 0240 001F                  		andi.w	#$1F,d0
0001C20E 5D40                       		subq.w	#6,d0
0001C210 4A41                       		tst.w	d1
0001C212 6A00                       		bpl.s	loc_1AD2E
0001C214 4440                       		neg.w	d0
0001C216                            
0001C216                            loc_1AD2E:
0001C216 D169 0008                  		add.w	d0,8(a1)
0001C21A 337C 000C 0036             		move.w	#$C,$36(a1)
0001C220                            
0001C220                            loc_1AD38:
0001C220 5368 001E                  		subq.w	#1,$1E(a0)
0001C224 6600                       		bne.s	locret_1AD48
0001C226 5428 0024                  		addq.b	#2,$24(a0)
0001C22A 317C 00B4 001E             		move.w	#180,$1E(a0)
0001C230                            
0001C230                            locret_1AD48:
0001C230 4E75                       		rts	
0001C232                            ; ===========================================================================
0001C232                            
0001C232                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001C232 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C236 6700                       		beq.s	Obj3E_TNEndAct	; GMZ: If yes, branch
0001C238 703E                       		moveq	#$3E,d0
0001C23A 7228                       		moveq	#$28,d1
0001C23C 7440                       		moveq	#$40,d2
0001C23E 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001C242                            
0001C242                            Obj3E_FindObj28:
0001C242 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001C244 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001C246 D2C2                       		adda.w	d2,a1		; next object RAM
0001C248 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001C24C                            
0001C24C 4EB9 0000 FDDC             		jsr	GotThroughAct
0001C252 4EF9 0000 E78C             		jmp	DeleteObject
0001C258                            
0001C258                            Obj3E_TNEndAct:
0001C258 5368 001E                  		subq.w	#1,$1E(a0)	; GMZ: Wait some frames
0001C25C 6600                       		bne.s	Obj3E_Obj28Found	; GMZ: If timer isn't 0, branch
0001C25E                            
0001C25E 4EB9 0000 FDDC             		jsr	GotThroughAct
0001C264 4EF9 0000 E78C             		jmp	DeleteObject
0001C26A                            ; ===========================================================================
0001C26A                            
0001C26A                            Obj3E_Obj28Found:
0001C26A 4E75                       		rts	
0001C26C                            ; ===========================================================================
0001C26C                            Ani_obj3E:
0001C26C                            	include "_anim\obj3E.asm"
0001C26C                            ; ---------------------------------------------------------------------------
0001C26C                            ; Animation script - prison capsule
0001C26C                            ; ---------------------------------------------------------------------------
0001C26C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C26E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C270 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001C274                            		even
0001C274                            		even
0001C274                            
0001C274                            ; ---------------------------------------------------------------------------
0001C274                            ; Sprite mappings - prison capsule
0001C274                            ; ---------------------------------------------------------------------------
0001C274                            Map_obj3E:
0001C274                            	include "_maps\obj3E.asm"
0001C274                            ; ---------------------------------------------------------------------------
0001C274                            ; Sprite mappings - prison capsule
0001C274                            ; ---------------------------------------------------------------------------
0001C274 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001C278 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001C27C 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001C280 0000                       		dc.w byte_1ADE2-Map_obj3E
0001C282 07                         byte_1AD82:	dc.b 7
0001C283 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001C288 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001C28D E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001C292 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001C297 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001C29C 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C2A1 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C2A6 01                         byte_1ADA6:	dc.b 1
0001C2A7 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001C2AC 06                         byte_1ADAC:	dc.b 6
0001C2AD 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001C2B2 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001C2B7 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001C2BC 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001C2C1 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C2C6 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C2CB 01                         byte_1ADCB:	dc.b 1
0001C2CC F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001C2D1 02                         byte_1ADD1:	dc.b 2
0001C2D2 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001C2D7 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001C2DC 01                         byte_1ADDC:	dc.b 1
0001C2DD F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001C2E2 00                         byte_1ADE2:	dc.b 0
0001C2E4 00                         		even
0001C2E4 00                         		even
0001C2E4                            
0001C2E4                            ; ---------------------------------------------------------------------------
0001C2E4                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001C2E4                            ; ---------------------------------------------------------------------------
0001C2E4                            
0001C2E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2E4                            
0001C2E4                            
0001C2E4                            TouchResponse:				; XREF: Obj01
0001C2E4 4E71                       		nop	
0001C2E6 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001C2EA 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001C2EE 5142                       		subq.w	#8,d2
0001C2F0 7A00                       		moveq	#0,d5
0001C2F2 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001C2F6 5705                       		subq.b	#3,d5
0001C2F8 9645                       		sub.w	d5,d3
0001C2FA 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001C300 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001C302 0643 000C                  		addi.w	#$C,d3
0001C306 7A0A                       		moveq	#$A,d5
0001C308                            
0001C308                            Touch_NoDuck:
0001C308 383C 0010                  		move.w	#$10,d4
0001C30C DA45                       		add.w	d5,d5
0001C30E 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001C312 3C3C 005F                  		move.w	#$5F,d6
0001C316                            
0001C316                            Touch_Loop:
0001C316 4A29 0001                  		tst.b	1(a1)
0001C31A 6A00                       		bpl.s	Touch_NextObj
0001C31C 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001C320 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001C322                            
0001C322                            Touch_NextObj:
0001C322 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001C326 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001C32A                            
0001C32A 7000                       		moveq	#0,d0
0001C32C 4E75                       		rts	
0001C32E                            ; ===========================================================================
0001C32E 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001C330 0C14                       		dc.b   $C, $14
0001C332 140C                       		dc.b  $14,  $C
0001C334 0410                       		dc.b	4, $10
0001C336 0C12                       		dc.b   $C, $12
0001C338 1010                       		dc.b  $10, $10
0001C33A 0606                       		dc.b	6,   6
0001C33C 180C                       		dc.b  $18,  $C
0001C33E 0C10                       		dc.b   $C, $10
0001C340 100C                       		dc.b  $10,  $C
0001C342 0808                       		dc.b	8,   8
0001C344 1410                       		dc.b  $14, $10
0001C346 1408                       		dc.b  $14,   8
0001C348 0E0E                       		dc.b   $E,  $E
0001C34A 1818                       		dc.b  $18, $18
0001C34C 2810                       		dc.b  $28, $10
0001C34E 1018                       		dc.b  $10, $18
0001C350 0810                       		dc.b	8, $10
0001C352 2070                       		dc.b  $20, $70
0001C354 4020                       		dc.b  $40, $20
0001C356 8020                       		dc.b  $80, $20
0001C358 2020                       		dc.b  $20, $20
0001C35A 0808                       		dc.b	8,   8
0001C35C 0404                       		dc.b	4,   4
0001C35E 2008                       		dc.b  $20,   8
0001C360 0C0C                       		dc.b   $C,  $C
0001C362 0804                       		dc.b	8,   4
0001C364 1804                       		dc.b  $18,   4
0001C366 2804                       		dc.b  $28,   4
0001C368 0408                       		dc.b	4,   8
0001C36A 0418                       		dc.b	4, $18
0001C36C 0428                       		dc.b	4, $28
0001C36E 0420                       		dc.b	4, $20
0001C370 1818                       		dc.b  $18, $18
0001C372 0C18                       		dc.b   $C, $18
0001C374 4808                       		dc.b  $48,   8
0001C376                            ; ===========================================================================
0001C376                            
0001C376                            Touch_Height:				; XREF: TouchResponse
0001C376 0240 003F                  		andi.w	#$3F,d0
0001C37A D040                       		add.w	d0,d0
0001C37C 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001C380 7200                       		moveq	#0,d1
0001C382 121A                       		move.b	(a2)+,d1
0001C384 3029 0008                  		move.w	8(a1),d0
0001C388 9041                       		sub.w	d1,d0
0001C38A 9042                       		sub.w	d2,d0
0001C38C 6400                       		bcc.s	loc_1AE98
0001C38E D241                       		add.w	d1,d1
0001C390 D041                       		add.w	d1,d0
0001C392 6500                       		bcs.s	Touch_Width
0001C394 6000 FF8C                  		bra.w	Touch_NextObj
0001C398                            ; ===========================================================================
0001C398                            
0001C398                            loc_1AE98:
0001C398 B044                       		cmp.w	d4,d0
0001C39A 6200 FF86                  		bhi.w	Touch_NextObj
0001C39E                            
0001C39E                            Touch_Width:
0001C39E 7200                       		moveq	#0,d1
0001C3A0 121A                       		move.b	(a2)+,d1
0001C3A2 3029 000C                  		move.w	$C(a1),d0
0001C3A6 9041                       		sub.w	d1,d0
0001C3A8 9043                       		sub.w	d3,d0
0001C3AA 6400                       		bcc.s	loc_1AEB6
0001C3AC D241                       		add.w	d1,d1
0001C3AE D240                       		add.w	d0,d1
0001C3B0 6500                       		bcs.s	Touch_ChkValue
0001C3B2 6000 FF6E                  		bra.w	Touch_NextObj
0001C3B6                            ; ===========================================================================
0001C3B6                            
0001C3B6                            loc_1AEB6:
0001C3B6 B045                       		cmp.w	d5,d0
0001C3B8 6200 FF68                  		bhi.w	Touch_NextObj
0001C3BC                            
0001C3BC                            Touch_ChkValue:
0001C3BC 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001C3C0 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001C3C4 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001C3C8 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001C3CC 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001C3D0 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001C3D2 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001C3D6                            
0001C3D6                            ; touch	response is $40-$7F
0001C3D6                            
0001C3D6 1029 0020                  		move.b	$20(a1),d0
0001C3DA 0200 003F                  		andi.b	#$3F,d0
0001C3DE 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001C3E2 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001C3E4 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001C3EA 6400 0000                  		bcc.w	locret_1AEF2
0001C3EE 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001C3F2                            
0001C3F2                            locret_1AEF2:
0001C3F2 4E75                       		rts	
0001C3F4                            ; ===========================================================================
0001C3F4                            
0001C3F4                            Touch_Monitor:
0001C3F4 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001C3F8 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001C3FA 3028 000C                  		move.w	$C(a0),d0
0001C3FE 0440 0010                  		subi.w	#$10,d0
0001C402 B069 000C                  		cmp.w	$C(a1),d0
0001C406 6500                       		bcs.s	locret_1AF2E
0001C408 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C40C 337C FE80 0012             		move.w	#-$180,$12(a1)
0001C412 4A29 0025                  		tst.b	$25(a1)
0001C416 6600                       		bne.s	locret_1AF2E
0001C418 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001C41C 4E75                       		rts	
0001C41E                            ; ===========================================================================
0001C41E                            
0001C41E                            loc_1AF1E:
0001C41E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001C424 6600                       		bne.s	locret_1AF2E
0001C426 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C42A 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001C42E                            
0001C42E                            locret_1AF2E:
0001C42E 4E75                       		rts	
0001C430                            ; ===========================================================================
0001C430                            
0001C430                            Touch_Enemy:				; XREF: Touch_ChkValue
0001C430 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C434 6600                       		bne.s	loc_1AF40	; if yes, branch
0001C436 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001C43C 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001C440                            
0001C440                            loc_1AF40:
0001C440 4A29 0021                  		tst.b	$21(a1)
0001C444 6700                       		beq.s	Touch_KillEnemy
0001C446 4468 0010                  		neg.w	$10(a0)
0001C44A 4468 0012                  		neg.w	$12(a0)
0001C44E E0E8 0010                  		asr	$10(a0)
0001C452 E0E8 0012                  		asr	$12(a0)
0001C456 137C 0000 0020             		move.b	#0,$20(a1)
0001C45C 5329 0021                  		subq.b	#1,$21(a1)
0001C460 6600                       		bne.s	locret_1AF68
0001C462 08E9 0007 0022             		bset	#7,$22(a1)
0001C468                            
0001C468                            locret_1AF68:
0001C468 4E75                       		rts	
0001C46A                            ; ===========================================================================
0001C46A                            
0001C46A                            Touch_KillEnemy:
0001C46A 08E9 0007 0022             		bset	#7,$22(a1)
0001C470 7000                       		moveq	#0,d0
0001C472 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001C476 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001C47A 0C40 0006                  		cmpi.w	#6,d0
0001C47E 6500                       		bcs.s	loc_1AF82
0001C480 7006                       		moveq	#6,d0
0001C482                            
0001C482                            loc_1AF82:
0001C482 3340 003E                  		move.w	d0,$3E(a1)
0001C486 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001C48A 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001C490 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001C492 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001C496 337C 000A 003E             		move.w	#$A,$3E(a1)
0001C49C                            
0001C49C                            loc_1AF9C:
0001C49C 6100 0000                  		bsr.w	AddPoints
0001C4A0 7400                       		moveq	#0,d2	; GMZ
0001C4A2 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001C4A4 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001C4A6                            
0001C4A6                            TouchKE_Explode:
0001C4A6 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001C4AA 137C 0000 0024             		move.b	#0,$24(a1)
0001C4B0 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001C4B4                            
0001C4B4                            TouchKE_NextExplosion:
0001C4B4 5802                       		addq.b	#4,d2
0001C4B6 4EB9 0000 EBD6             		jsr	SingleObjLoad
0001C4BC 6600                       		bne.s	TouchKE_NoExplosion
0001C4BE 336A 0008 0008             		move.w	8(a2),8(a1)
0001C4C4 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001C4CA 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001C4CE                            
0001C4CE                            TouchKE_NoExplosion:
0001C4CE 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001C4D0 4A68 0012                  		tst.w	$12(a0)
0001C4D4 6B00                       		bmi.s	loc_1AFC2
0001C4D6 3028 000C                  		move.w	$C(a0),d0
0001C4DA B069 000C                  		cmp.w	$C(a1),d0
0001C4DE 6400                       		bcc.s	loc_1AFCA
0001C4E0 4468 0012                  		neg.w	$12(a0)
0001C4E4 4E75                       		rts	
0001C4E6                            ; ===========================================================================
0001C4E6                            
0001C4E6                            loc_1AFC2:
0001C4E6 0668 0100 0012             		addi.w	#$100,$12(a0)
0001C4EC 4E75                       		rts	
0001C4EE                            ; ===========================================================================
0001C4EE                            
0001C4EE                            loc_1AFCA:
0001C4EE 0468 0100 0012             		subi.w	#$100,$12(a0)
0001C4F4 4E75                       		rts	
0001C4F6                            ; ===========================================================================
0001C4F6 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001C4FE                            ; ===========================================================================
0001C4FE                            
0001C4FE                            loc_1AFDA:				; XREF: Touch_CatKiller
0001C4FE 08E9 0007 0022             		bset	#7,$22(a1)
0001C504                            
0001C504                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001C504 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C508 6700                       		beq.s	Touch_Hurt	; if not, branch
0001C50A                            
0001C50A                            loc_1AFE6:				; XREF: Touch_Hurt
0001C50A 70FF                       		moveq	#-1,d0
0001C50C 4E75                       		rts	
0001C50E                            ; ===========================================================================
0001C50E                            
0001C50E                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001C50E 4E71                       		nop	
0001C510 4A68 0030                  		tst.w	$30(a0)
0001C514 66F4                       		bne.s	loc_1AFE6
0001C516 2449                       		movea.l	a1,a2
0001C518                            
0001C518                            ; End of function TouchResponse
0001C518                            ; continue straight to HurtSonic
0001C518                            
0001C518                            ; ---------------------------------------------------------------------------
0001C518                            ; Hurting Sonic	subroutine
0001C518                            ; ---------------------------------------------------------------------------
0001C518                            
0001C518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C518                            
0001C518                            
0001C518                            HurtSonic:
0001C518 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001C51C 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001C51E 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001C522 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001C526 4EB9 0000 EBD6             		jsr	SingleObjLoad
0001C52C 6600                       		bne.s	Hurt_Shield
0001C52E 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001C532 3368 0008 0008             		move.w	8(a0),8(a1)
0001C538 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C53E                            
0001C53E                            Hurt_Shield:
0001C53E 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001C544 117C 0004 0024             		move.b	#4,$24(a0)
0001C54A 6100 8452                  		bsr.w	Sonic_ResetOnFloor
0001C54E 08E8 0001 0022             		bset	#1,$22(a0)
0001C554 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001C55A 317C FE00 0010             		move.w	#-$200,$10(a0)
0001C560 0828 0006 0022             		btst	#6,$22(a0)
0001C566 6700                       		beq.s	Hurt_Reverse
0001C568 317C FE00 0012             		move.w	#-$200,$12(a0)
0001C56E 317C FF00 0010             		move.w	#-$100,$10(a0)
0001C574                            
0001C574                            Hurt_Reverse:
0001C574 3028 0008                  		move.w	8(a0),d0
0001C578 B06A 0008                  		cmp.w	8(a2),d0
0001C57C 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001C57E 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001C582                            
0001C582                            Hurt_ChkSpikes:
0001C582 317C 0000 0014             		move.w	#0,$14(a0)
0001C588 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001C58E 317C 0078 0030             		move.w	#$78,$30(a0)
0001C594 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001C598 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001C59C 6600                       		bne.s	Hurt_Sound	; if not, branch
0001C59E 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001C5A2 6600                       		bne.s	Hurt_Sound	; if not, branch
0001C5A4 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001C5A8                            
0001C5A8                            Hurt_Sound:
0001C5A8 4EB9 0000 1C82             		jsr	(PlaySound_Special).l
0001C5AE 70FF                       		moveq	#-1,d0
0001C5B0 4E75                       		rts	
0001C5B2                            ; ===========================================================================
0001C5B2                            
0001C5B2                            Hurt_NoRings:
0001C5B2 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001C5B6 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001C5BA                            ; End of function HurtSonic
0001C5BA                            
0001C5BA                            ; ---------------------------------------------------------------------------
0001C5BA                            ; Subroutine to	kill Sonic
0001C5BA                            ; ---------------------------------------------------------------------------
0001C5BA                            
0001C5BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5BA                            
0001C5BA                            
0001C5BA                            KillSonic:
0001C5BA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001C5BE 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001C5C0 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001C5C6 117C 0006 0024             		move.b	#6,$24(a0)
0001C5CC 6100 83D0                  		bsr.w	Sonic_ResetOnFloor
0001C5D0 08E8 0001 0022             		bset	#1,$22(a0)
0001C5D6 317C F900 0012             		move.w	#-$700,$12(a0)
0001C5DC 317C 0000 0010             		move.w	#0,$10(a0)
0001C5E2 317C 0000 0014             		move.w	#0,$14(a0)
0001C5E8 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001C5EE 117C 0018 001C             		move.b	#$18,$1C(a0)
0001C5F4 08E8 0007 0002             		bset	#7,2(a0)
0001C5FA 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001C5FE 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001C602 6600                       		bne.s	Kill_Sound
0001C604 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001C608                            
0001C608                            Kill_Sound:
0001C608 4EB9 0000 1C82             		jsr	(PlaySound_Special).l
0001C60E                            
0001C60E                            Kill_NoDeath:
0001C60E 70FF                       		moveq	#-1,d0
0001C610 4E75                       		rts	
0001C612                            ; End of function KillSonic
0001C612                            
0001C612                            
0001C612                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C612                            
0001C612                            
0001C612                            Touch_Special:				; XREF: Touch_ChkValue
0001C612 1229 0020                  		move.b	$20(a1),d1
0001C616 0201 003F                  		andi.b	#$3F,d1
0001C61A 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001C61E 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001C620 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001C624 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001C626 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001C62A 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001C62C 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001C630 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001C632 4E75                       		rts	
0001C634                            ; ===========================================================================
0001C634                            
0001C634                            Touch_CatKiller:			; XREF: Touch_Special
0001C634 6000 FEC8                  		bra.w	loc_1AFDA
0001C638                            ; ===========================================================================
0001C638                            
0001C638                            Touch_Yadrin:				; XREF: Touch_Special
0001C638 9A40                       		sub.w	d0,d5
0001C63A 0C45 0008                  		cmpi.w	#8,d5
0001C63E 6400                       		bcc.s	loc_1B144
0001C640 3029 0008                  		move.w	8(a1),d0
0001C644 5940                       		subq.w	#4,d0
0001C646 0829 0000 0022             		btst	#0,$22(a1)
0001C64C 6700                       		beq.s	loc_1B130
0001C64E 0440 0010                  		subi.w	#$10,d0
0001C652                            
0001C652                            loc_1B130:
0001C652 9042                       		sub.w	d2,d0
0001C654 6400                       		bcc.s	loc_1B13C
0001C656 0640 0018                  		addi.w	#$18,d0
0001C65A 6500                       		bcs.s	loc_1B140
0001C65C 6000                       		bra.s	loc_1B144
0001C65E                            ; ===========================================================================
0001C65E                            
0001C65E                            loc_1B13C:
0001C65E B044                       		cmp.w	d4,d0
0001C660 6200                       		bhi.s	loc_1B144
0001C662                            
0001C662                            loc_1B140:
0001C662 6000 FEA0                  		bra.w	Touch_ChkHurt
0001C666                            ; ===========================================================================
0001C666                            
0001C666                            loc_1B144:
0001C666 6000 FDC8                  		bra.w	Touch_Enemy
0001C66A                            ; ===========================================================================
0001C66A                            
0001C66A                            Touch_D7orE1:				; XREF: Touch_Special
0001C66A 5229 0021                  		addq.b	#1,$21(a1)
0001C66E 4E75                       		rts	
0001C670                            ; End of function Touch_Special
0001C670                            
0001C670                            ; ---------------------------------------------------------------------------
0001C670                            ; Subroutine to	show the special stage layout
0001C670                            ; ---------------------------------------------------------------------------
0001C670                            
0001C670                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C670                            
0001C670                            
0001C670                            SS_ShowLayout:				; XREF: SpecialStage
0001C670 6100 0000                  		bsr.w	SS_AniWallsRings
0001C674 6100 0000                  		bsr.w	SS_AniItems
0001C678 3F05                       		move.w	d5,-(sp)
0001C67A 43F8 8000                  		lea	($FFFF8000).w,a1
0001C67E 1038 F780                  		move.b	($FFFFF780).w,d0
0001C682 0200 00FC                  		andi.b	#$FC,d0
0001C686 4EB9 0000 3424             		jsr	(CalcSine).l
0001C68C 3800                       		move.w	d0,d4
0001C68E 3A01                       		move.w	d1,d5
0001C690 C9FC 0018                  		muls.w	#$18,d4
0001C694 CBFC 0018                  		muls.w	#$18,d5
0001C698 7400                       		moveq	#0,d2
0001C69A 3438 F700                  		move.w	($FFFFF700).w,d2
0001C69E 84FC 0018                  		divu.w	#$18,d2
0001C6A2 4842                       		swap	d2
0001C6A4 4442                       		neg.w	d2
0001C6A6 0642 FF4C                  		addi.w	#-$B4,d2
0001C6AA 7600                       		moveq	#0,d3
0001C6AC 3638 F704                  		move.w	($FFFFF704).w,d3
0001C6B0 86FC 0018                  		divu.w	#$18,d3
0001C6B4 4843                       		swap	d3
0001C6B6 4443                       		neg.w	d3
0001C6B8 0643 FF4C                  		addi.w	#-$B4,d3
0001C6BC 3E3C 000F                  		move.w	#$F,d7
0001C6C0                            
0001C6C0                            loc_1B19E:
0001C6C0 48A7 E000                  		movem.w	d0-d2,-(sp)
0001C6C4 48A7 C000                  		movem.w	d0-d1,-(sp)
0001C6C8 4440                       		neg.w	d0
0001C6CA C3C2                       		muls.w	d2,d1
0001C6CC C1C3                       		muls.w	d3,d0
0001C6CE 2C00                       		move.l	d0,d6
0001C6D0 DC81                       		add.l	d1,d6
0001C6D2 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001C6D6 C1C2                       		muls.w	d2,d0
0001C6D8 C3C3                       		muls.w	d3,d1
0001C6DA D280                       		add.l	d0,d1
0001C6DC 2406                       		move.l	d6,d2
0001C6DE 3C3C 000F                  		move.w	#$F,d6
0001C6E2                            
0001C6E2                            loc_1B1C0:
0001C6E2 2002                       		move.l	d2,d0
0001C6E4 E080                       		asr.l	#8,d0
0001C6E6 32C0                       		move.w	d0,(a1)+
0001C6E8 2001                       		move.l	d1,d0
0001C6EA E080                       		asr.l	#8,d0
0001C6EC 32C0                       		move.w	d0,(a1)+
0001C6EE D485                       		add.l	d5,d2
0001C6F0 D284                       		add.l	d4,d1
0001C6F2 51CE FFEE                  		dbf	d6,loc_1B1C0
0001C6F6                            
0001C6F6 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001C6FA 0643 0018                  		addi.w	#$18,d3
0001C6FE 51CF FFC0                  		dbf	d7,loc_1B19E
0001C702                            
0001C702 3A1F                       		move.w	(sp)+,d5
0001C704 41F9 00FF 0000             		lea	($FF0000).l,a0
0001C70A 7000                       		moveq	#0,d0
0001C70C 3038 F704                  		move.w	($FFFFF704).w,d0
0001C710 80FC 0018                  		divu.w	#$18,d0
0001C714 C0FC 0080                  		mulu.w	#$80,d0
0001C718 D1C0                       		adda.l	d0,a0
0001C71A 7000                       		moveq	#0,d0
0001C71C 3038 F700                  		move.w	($FFFFF700).w,d0
0001C720 80FC 0018                  		divu.w	#$18,d0
0001C724 D0C0                       		adda.w	d0,a0
0001C726 49F8 8000                  		lea	($FFFF8000).w,a4
0001C72A 3E3C 000F                  		move.w	#$F,d7
0001C72E                            
0001C72E                            loc_1B20C:
0001C72E 3C3C 000F                  		move.w	#$F,d6
0001C732                            
0001C732                            loc_1B210:
0001C732 7000                       		moveq	#0,d0
0001C734 1018                       		move.b	(a0)+,d0
0001C736 6700                       		beq.s	loc_1B268
0001C738 0C00 004E                  		cmpi.b	#$4E,d0
0001C73C 6200                       		bhi.s	loc_1B268
0001C73E 3614                       		move.w	(a4),d3
0001C740 0643 0120                  		addi.w	#$120,d3
0001C744 0C43 0070                  		cmpi.w	#$70,d3
0001C748 6500                       		bcs.s	loc_1B268
0001C74A 0C43 01D0                  		cmpi.w	#$1D0,d3
0001C74E 6400                       		bcc.s	loc_1B268
0001C750 342C 0002                  		move.w	2(a4),d2
0001C754 0642 00F0                  		addi.w	#$F0,d2
0001C758 0C42 0070                  		cmpi.w	#$70,d2
0001C75C 6500                       		bcs.s	loc_1B268
0001C75E 0C42 0170                  		cmpi.w	#$170,d2
0001C762 6400                       		bcc.s	loc_1B268
0001C764 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001C76A E748                       		lsl.w	#3,d0
0001C76C 4BF5 0000                  		lea	(a5,d0.w),a5
0001C770 225D                       		movea.l	(a5)+,a1
0001C772 321D                       		move.w	(a5)+,d1
0001C774 D241                       		add.w	d1,d1
0001C776 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001C77A 365D                       		movea.w	(a5)+,a3
0001C77C 7200                       		moveq	#0,d1
0001C77E 1219                       		move.b	(a1)+,d1
0001C780 5301                       		subq.b	#1,d1
0001C782 6B00                       		bmi.s	loc_1B268
0001C784 4EB9 0000 E8AE             		jsr	sub_D762
0001C78A                            
0001C78A                            loc_1B268:
0001C78A 584C                       		addq.w	#4,a4
0001C78C 51CE FFA4                  		dbf	d6,loc_1B210
0001C790                            
0001C790 41E8 0070                  		lea	$70(a0),a0
0001C794 51CF FF98                  		dbf	d7,loc_1B20C
0001C798                            
0001C798 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001C79C 0C05 0050                  		cmpi.b	#$50,d5
0001C7A0 6700                       		beq.s	loc_1B288
0001C7A2 24BC 0000 0000             		move.l	#0,(a2)
0001C7A8 4E75                       		rts	
0001C7AA                            ; ===========================================================================
0001C7AA                            
0001C7AA                            loc_1B288:
0001C7AA 157C 0000 FFFB             		move.b	#0,-5(a2)
0001C7B0 4E75                       		rts	
0001C7B2                            ; End of function SS_ShowLayout
0001C7B2                            
0001C7B2                            ; ---------------------------------------------------------------------------
0001C7B2                            ; Subroutine to	animate	walls and rings	in the special stage
0001C7B2                            ; ---------------------------------------------------------------------------
0001C7B2                            
0001C7B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7B2                            
0001C7B2                            
0001C7B2                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001C7B2 43F9 00FF 400C             		lea	($FF400C).l,a1
0001C7B8 7000                       		moveq	#0,d0
0001C7BA 1038 F780                  		move.b	($FFFFF780).w,d0
0001C7BE E408                       		lsr.b	#2,d0
0001C7C0 0240 000F                  		andi.w	#$F,d0
0001C7C4 7223                       		moveq	#$23,d1
0001C7C6                            
0001C7C6                            loc_1B2A4:
0001C7C6 3280                       		move.w	d0,(a1)
0001C7C8 5049                       		addq.w	#8,a1
0001C7CA 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001C7CE                            
0001C7CE 43F9 00FF 4005             		lea	($FF4005).l,a1
0001C7D4 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001C7D8 6A00                       		bpl.s	loc_1B2C8
0001C7DA 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001C7E0 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001C7E4 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001C7EA                            
0001C7EA                            loc_1B2C8:
0001C7EA 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001C7F0 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001C7F4 6A00                       		bpl.s	loc_1B2E4
0001C7F6 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001C7FC 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001C800 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001C806                            
0001C806                            loc_1B2E4:
0001C806 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001C80A 1340 0138                  		move.b	d0,$138(a1)
0001C80E 1340 0160                  		move.b	d0,$160(a1)
0001C812 1340 0148                  		move.b	d0,$148(a1)
0001C816 1340 0150                  		move.b	d0,$150(a1)
0001C81A 1340 01D8                  		move.b	d0,$1D8(a1)
0001C81E 1340 01E0                  		move.b	d0,$1E0(a1)
0001C822 1340 01E8                  		move.b	d0,$1E8(a1)
0001C826 1340 01F0                  		move.b	d0,$1F0(a1)
0001C82A 1340 01F8                  		move.b	d0,$1F8(a1)
0001C82E 1340 0200                  		move.b	d0,$200(a1)
0001C832 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001C836 6A00                       		bpl.s	loc_1B326
0001C838 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001C83E 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001C842 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001C848                            
0001C848                            loc_1B326:
0001C848 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001C84C 1340 0168                  		move.b	d0,$168(a1)
0001C850 1340 0170                  		move.b	d0,$170(a1)
0001C854 1340 0178                  		move.b	d0,$178(a1)
0001C858 1340 0180                  		move.b	d0,$180(a1)
0001C85C 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001C860 6A00                       		bpl.s	loc_1B350
0001C862 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001C868 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001C86C 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001C872                            
0001C872                            loc_1B350:
0001C872 43F9 00FF 4016             		lea	($FF4016).l,a1
0001C878 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001C87E 7000                       		moveq	#0,d0
0001C880 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001C884 D040                       		add.w	d0,d0
0001C886 41F0 0000                  		lea	(a0,d0.w),a0
0001C88A 3290                       		move.w	(a0),(a1)
0001C88C 3368 0002 0008             		move.w	2(a0),8(a1)
0001C892 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C898 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C89E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C8A4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C8AA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C8B0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C8B6 D0FC 0020                  		adda.w	#$20,a0
0001C8BA D2FC 0048                  		adda.w	#$48,a1
0001C8BE 3290                       		move.w	(a0),(a1)
0001C8C0 3368 0002 0008             		move.w	2(a0),8(a1)
0001C8C6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C8CC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C8D2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C8D8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C8DE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C8E4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C8EA D0FC 0020                  		adda.w	#$20,a0
0001C8EE D2FC 0048                  		adda.w	#$48,a1
0001C8F2 3290                       		move.w	(a0),(a1)
0001C8F4 3368 0002 0008             		move.w	2(a0),8(a1)
0001C8FA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C900 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C906 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C90C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C912 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C918 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C91E D0FC 0020                  		adda.w	#$20,a0
0001C922 D2FC 0048                  		adda.w	#$48,a1
0001C926 3290                       		move.w	(a0),(a1)
0001C928 3368 0002 0008             		move.w	2(a0),8(a1)
0001C92E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C934 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C93A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C940 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C946 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C94C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C952 D0FC 0020                  		adda.w	#$20,a0
0001C956 D2FC 0048                  		adda.w	#$48,a1
0001C95A 4E75                       		rts	
0001C95C                            ; End of function SS_AniWallsRings
0001C95C                            
0001C95C                            ; ===========================================================================
0001C95C 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C96C 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C97C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C98C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C99C 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C9AC 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C9BC 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C9CC 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C9DC                            ; ---------------------------------------------------------------------------
0001C9DC                            ; Subroutine to	remove items when you collect them in the special stage
0001C9DC                            ; ---------------------------------------------------------------------------
0001C9DC                            
0001C9DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9DC                            
0001C9DC                            
0001C9DC                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001C9DC 45F9 00FF 4400             		lea	($FF4400).l,a2
0001C9E2 303C 001F                  		move.w	#$1F,d0
0001C9E6                            
0001C9E6                            loc_1B4C4:
0001C9E6 4A12                       		tst.b	(a2)
0001C9E8 6700                       		beq.s	locret_1B4CE
0001C9EA 504A                       		addq.w	#8,a2
0001C9EC 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001C9F0                            
0001C9F0                            locret_1B4CE:
0001C9F0 4E75                       		rts	
0001C9F2                            ; End of function SS_RemoveCollectedItem
0001C9F2                            
0001C9F2                            ; ---------------------------------------------------------------------------
0001C9F2                            ; Subroutine to	animate	special	stage items when you touch them
0001C9F2                            ; ---------------------------------------------------------------------------
0001C9F2                            
0001C9F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9F2                            
0001C9F2                            
0001C9F2                            SS_AniItems:				; XREF: SS_ShowLayout
0001C9F2 41F9 00FF 4400             		lea	($FF4400).l,a0
0001C9F8 3E3C 001F                  		move.w	#$1F,d7
0001C9FC                            
0001C9FC                            loc_1B4DA:
0001C9FC 7000                       		moveq	#0,d0
0001C9FE 1010                       		move.b	(a0),d0
0001CA00 6700                       		beq.s	loc_1B4E8
0001CA02 E548                       		lsl.w	#2,d0
0001CA04 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001CA08 4E91                       		jsr	(a1)
0001CA0A                            
0001CA0A                            loc_1B4E8:
0001CA0A 5048                       		addq.w	#8,a0
0001CA0C                            
0001CA0C                            loc_1B4EA:
0001CA0C 51CF FFEE                  		dbf	d7,loc_1B4DA
0001CA10                            
0001CA10 4E75                       		rts	
0001CA12                            ; End of function SS_AniItems
0001CA12                            
0001CA12                            ; ===========================================================================
0001CA12 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001CA16 0000 0000                  		dc.l SS_AniBumper
0001CA1A 0000 0000                  		dc.l SS_Ani1Up
0001CA1E 0000 0000                  		dc.l SS_AniReverse
0001CA22 0000 0000                  		dc.l SS_AniEmeraldSparks
0001CA26 0000 0000                  		dc.l SS_AniGlassBlock
0001CA2A                            ; ===========================================================================
0001CA2A                            
0001CA2A                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001CA2A 5328 0002                  		subq.b	#1,2(a0)
0001CA2E 6A00                       		bpl.s	locret_1B530
0001CA30 117C 0005 0002             		move.b	#5,2(a0)
0001CA36 7000                       		moveq	#0,d0
0001CA38 1028 0003                  		move.b	3(a0),d0
0001CA3C 5228 0003                  		addq.b	#1,3(a0)
0001CA40 2268 0004                  		movea.l	4(a0),a1
0001CA44 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001CA48 1280                       		move.b	d0,(a1)
0001CA4A 6600                       		bne.s	locret_1B530
0001CA4C 4290                       		clr.l	(a0)
0001CA4E 42A8 0004                  		clr.l	4(a0)
0001CA52                            
0001CA52                            locret_1B530:
0001CA52 4E75                       		rts	
0001CA54                            ; ===========================================================================
0001CA54 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001CA5A                            ; ===========================================================================
0001CA5A                            
0001CA5A                            SS_AniBumper:				; XREF: SS_AniIndex
0001CA5A 5328 0002                  		subq.b	#1,2(a0)
0001CA5E 6A00                       		bpl.s	locret_1B566
0001CA60 117C 0007 0002             		move.b	#7,2(a0)
0001CA66 7000                       		moveq	#0,d0
0001CA68 1028 0003                  		move.b	3(a0),d0
0001CA6C 5228 0003                  		addq.b	#1,3(a0)
0001CA70 2268 0004                  		movea.l	4(a0),a1
0001CA74 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001CA78 6600                       		bne.s	loc_1B564
0001CA7A 4290                       		clr.l	(a0)
0001CA7C 42A8 0004                  		clr.l	4(a0)
0001CA80 12BC 0025                  		move.b	#$25,(a1)
0001CA84 4E75                       		rts	
0001CA86                            ; ===========================================================================
0001CA86                            
0001CA86                            loc_1B564:
0001CA86 1280                       		move.b	d0,(a1)
0001CA88                            
0001CA88                            locret_1B566:
0001CA88 4E75                       		rts	
0001CA8A                            ; ===========================================================================
0001CA8A 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001CA90                            ; ===========================================================================
0001CA90                            
0001CA90                            SS_Ani1Up:				; XREF: SS_AniIndex
0001CA90 5328 0002                  		subq.b	#1,2(a0)
0001CA94 6A00                       		bpl.s	locret_1B596
0001CA96 117C 0005 0002             		move.b	#5,2(a0)
0001CA9C 7000                       		moveq	#0,d0
0001CA9E 1028 0003                  		move.b	3(a0),d0
0001CAA2 5228 0003                  		addq.b	#1,3(a0)
0001CAA6 2268 0004                  		movea.l	4(a0),a1
0001CAAA 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001CAAE 1280                       		move.b	d0,(a1)
0001CAB0 6600                       		bne.s	locret_1B596
0001CAB2 4290                       		clr.l	(a0)
0001CAB4 42A8 0004                  		clr.l	4(a0)
0001CAB8                            
0001CAB8                            locret_1B596:
0001CAB8 4E75                       		rts	
0001CABA                            ; ===========================================================================
0001CABA 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001CAC0                            ; ===========================================================================
0001CAC0                            
0001CAC0                            SS_AniReverse:				; XREF: SS_AniIndex
0001CAC0 5328 0002                  		subq.b	#1,2(a0)
0001CAC4 6A00                       		bpl.s	locret_1B5CC
0001CAC6 117C 0007 0002             		move.b	#7,2(a0)
0001CACC 7000                       		moveq	#0,d0
0001CACE 1028 0003                  		move.b	3(a0),d0
0001CAD2 5228 0003                  		addq.b	#1,3(a0)
0001CAD6 2268 0004                  		movea.l	4(a0),a1
0001CADA 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001CADE 6600                       		bne.s	loc_1B5CA
0001CAE0 4290                       		clr.l	(a0)
0001CAE2 42A8 0004                  		clr.l	4(a0)
0001CAE6 12BC 002B                  		move.b	#$2B,(a1)
0001CAEA 4E75                       		rts	
0001CAEC                            ; ===========================================================================
0001CAEC                            
0001CAEC                            loc_1B5CA:
0001CAEC 1280                       		move.b	d0,(a1)
0001CAEE                            
0001CAEE                            locret_1B5CC:
0001CAEE 4E75                       		rts	
0001CAF0                            ; ===========================================================================
0001CAF0 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001CAF6                            ; ===========================================================================
0001CAF6                            
0001CAF6                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001CAF6 5328 0002                  		subq.b	#1,2(a0)
0001CAFA 6A00                       		bpl.s	locret_1B60C
0001CAFC 117C 0005 0002             		move.b	#5,2(a0)
0001CB02 7000                       		moveq	#0,d0
0001CB04 1028 0003                  		move.b	3(a0),d0
0001CB08 5228 0003                  		addq.b	#1,3(a0)
0001CB0C 2268 0004                  		movea.l	4(a0),a1
0001CB10 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001CB14 1280                       		move.b	d0,(a1)
0001CB16 6600                       		bne.s	locret_1B60C
0001CB18 4290                       		clr.l	(a0)
0001CB1A 42A8 0004                  		clr.l	4(a0)
0001CB1E 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001CB24 303C 00A8                  		move.w	#$A8,d0
0001CB28 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001CB2E                            
0001CB2E                            locret_1B60C:
0001CB2E 4E75                       		rts	
0001CB30                            ; ===========================================================================
0001CB30 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001CB36                            ; ===========================================================================
0001CB36                            
0001CB36                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001CB36 5328 0002                  		subq.b	#1,2(a0)
0001CB3A 6A00                       		bpl.s	locret_1B640
0001CB3C 117C 0001 0002             		move.b	#1,2(a0)
0001CB42 7000                       		moveq	#0,d0
0001CB44 1028 0003                  		move.b	3(a0),d0
0001CB48 5228 0003                  		addq.b	#1,3(a0)
0001CB4C 2268 0004                  		movea.l	4(a0),a1
0001CB50 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001CB54 1280                       		move.b	d0,(a1)
0001CB56 6600                       		bne.s	locret_1B640
0001CB58 12A8 0004                  		move.b	4(a0),(a1)
0001CB5C 4290                       		clr.l	(a0)
0001CB5E 42A8 0004                  		clr.l	4(a0)
0001CB62                            
0001CB62                            locret_1B640:
0001CB62 4E75                       		rts	
0001CB64                            ; ===========================================================================
0001CB64 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001CB6E                            ; ---------------------------------------------------------------------------
0001CB6E                            ; Special stage	layout pointers
0001CB6E                            ; ---------------------------------------------------------------------------
0001CB6E                            SS_LayoutIndex:
0001CB6E                            	include "_inc\Special stage layout pointers.asm"
0001CB6E                            ; ---------------------------------------------------------------------------
0001CB6E                            ; Special stage	layout pointers
0001CB6E                            ; ---------------------------------------------------------------------------
0001CB6E 0000 0000                  	dc.l SS_1
0001CB72 0000 0000                  	dc.l SS_2
0001CB76 0000 0000                  	dc.l SS_3
0001CB7A 0000 0000                  	dc.l SS_4
0001CB7E 0000 0000                  	dc.l SS_5
0001CB82 0000 0000                  	dc.l SS_6
0001CB86                            	even
0001CB86                            	even
0001CB86                            
0001CB86                            ; ---------------------------------------------------------------------------
0001CB86                            ; Special stage	start locations
0001CB86                            ; ---------------------------------------------------------------------------
0001CB86                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001CB9E                            		even
0001CB9E                            
0001CB9E                            ; ---------------------------------------------------------------------------
0001CB9E                            ; Subroutine to	load special stage layout
0001CB9E                            ; ---------------------------------------------------------------------------
0001CB9E                            
0001CB9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB9E                            
0001CB9E                            
0001CB9E                            SS_Load:				; XREF: SpecialStage
0001CB9E 7000                       		moveq	#0,d0
0001CBA0 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001CBA4 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001CBA8 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001CBAE 6500                       		bcs.s	SS_ChkEmldNum
0001CBB0 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001CBB6                            
0001CBB6                            SS_ChkEmldNum:
0001CBB6 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001CBBC 6700                       		beq.s	SS_LoadData	; if yes, branch
0001CBBE 7200                       		moveq	#0,d1
0001CBC0 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001CBC4 5301                       		subq.b	#1,d1
0001CBC6 6500                       		bcs.s	SS_LoadData
0001CBC8 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001CBCC                            
0001CBCC                            SS_ChkEmldLoop:	
0001CBCC B033 1000                  		cmp.b	(a3,d1.w),d0
0001CBD0 6600                       		bne.s	SS_ChkEmldRepeat
0001CBD2 60CA                       		bra.s	SS_Load
0001CBD4                            ; ===========================================================================
0001CBD4                            
0001CBD4                            SS_ChkEmldRepeat:
0001CBD4 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001CBD8                            
0001CBD8                            SS_LoadData:
0001CBD8 E548                       		lsl.w	#2,d0
0001CBDA 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001CBDE 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001CBE2 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001CBE6 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001CBEA 43F9 00FF 4000             		lea	($FF4000).l,a1
0001CBF0 303C 0000                  		move.w	#0,d0
0001CBF4 4EB9 0000 2004             		jsr	(EniDec).l
0001CBFA 43F9 00FF 0000             		lea	($FF0000).l,a1
0001CC00 303C 0FFF                  		move.w	#$FFF,d0
0001CC04                            
0001CC04                            SS_ClrRAM3:
0001CC04 4299                       		clr.l	(a1)+
0001CC06 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001CC0A                            
0001CC0A 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CC10 41F9 00FF 4000             		lea	($FF4000).l,a0
0001CC16 723F                       		moveq	#$3F,d1
0001CC18                            
0001CC18                            loc_1B6F6:
0001CC18 743F                       		moveq	#$3F,d2
0001CC1A                            
0001CC1A                            loc_1B6F8:
0001CC1A 12D8                       		move.b	(a0)+,(a1)+
0001CC1C 51CA FFFC                  		dbf	d2,loc_1B6F8
0001CC20                            
0001CC20 43E9 0040                  		lea	$40(a1),a1
0001CC24 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001CC28                            
0001CC28 43F9 00FF 4008             		lea	($FF4008).l,a1
0001CC2E 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001CC34 724D                       		moveq	#$4D,d1
0001CC36                            
0001CC36                            loc_1B714:
0001CC36 22D8                       		move.l	(a0)+,(a1)+
0001CC38 32FC 0000                  		move.w	#0,(a1)+
0001CC3C 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001CC42 32D8                       		move.w	(a0)+,(a1)+
0001CC44 51C9 FFF0                  		dbf	d1,loc_1B714
0001CC48                            
0001CC48 43F9 00FF 4400             		lea	($FF4400).l,a1
0001CC4E 323C 003F                  		move.w	#$3F,d1
0001CC52                            
0001CC52                            loc_1B730:
0001CC52                            
0001CC52 4299                       		clr.l	(a1)+
0001CC54 51C9 FFFC                  		dbf	d1,loc_1B730
0001CC58                            
0001CC58 4E75                       		rts	
0001CC5A                            ; End of function SS_Load
0001CC5A                            
0001CC5A                            ; ===========================================================================
0001CC5A                            ; ---------------------------------------------------------------------------
0001CC5A                            ; Special stage	mappings and VRAM pointers
0001CC5A                            ; ---------------------------------------------------------------------------
0001CC5A                            SS_MapIndex:
0001CC5A                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001CC5A                            ; ---------------------------------------------------------------------------
0001CC5A                            ; Special stage	mappings and VRAM pointers
0001CC5A                            ; ---------------------------------------------------------------------------
0001CC5A 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001CC5E 0142                       	dc.w $142		; VRAM setting
0001CC60 0000 0000                  	dc.l Map_SSWalls
0001CC64 0142                       	dc.w $142
0001CC66 0000 0000                  	dc.l Map_SSWalls
0001CC6A 0142                       	dc.w $142
0001CC6C 0000 0000                  	dc.l Map_SSWalls
0001CC70 0142                       	dc.w $142
0001CC72 0000 0000                  	dc.l Map_SSWalls
0001CC76 0142                       	dc.w $142
0001CC78 0000 0000                  	dc.l Map_SSWalls
0001CC7C 0142                       	dc.w $142
0001CC7E 0000 0000                  	dc.l Map_SSWalls
0001CC82 0142                       	dc.w $142
0001CC84 0000 0000                  	dc.l Map_SSWalls
0001CC88 0142                       	dc.w $142
0001CC8A 0000 0000                  	dc.l Map_SSWalls
0001CC8E 0142                       	dc.w $142
0001CC90 0000 0000                  	dc.l Map_SSWalls
0001CC94 2142                       	dc.w $2142
0001CC96 0000 0000                  	dc.l Map_SSWalls
0001CC9A 2142                       	dc.w $2142
0001CC9C 0000 0000                  	dc.l Map_SSWalls
0001CCA0 2142                       	dc.w $2142
0001CCA2 0000 0000                  	dc.l Map_SSWalls
0001CCA6 2142                       	dc.w $2142
0001CCA8 0000 0000                  	dc.l Map_SSWalls
0001CCAC 2142                       	dc.w $2142
0001CCAE 0000 0000                  	dc.l Map_SSWalls
0001CCB2 2142                       	dc.w $2142
0001CCB4 0000 0000                  	dc.l Map_SSWalls
0001CCB8 2142                       	dc.w $2142
0001CCBA 0000 0000                  	dc.l Map_SSWalls
0001CCBE 2142                       	dc.w $2142
0001CCC0 0000 0000                  	dc.l Map_SSWalls
0001CCC4 2142                       	dc.w $2142
0001CCC6 0000 0000                  	dc.l Map_SSWalls
0001CCCA 4142                       	dc.w $4142
0001CCCC 0000 0000                  	dc.l Map_SSWalls
0001CCD0 4142                       	dc.w $4142
0001CCD2 0000 0000                  	dc.l Map_SSWalls
0001CCD6 4142                       	dc.w $4142
0001CCD8 0000 0000                  	dc.l Map_SSWalls
0001CCDC 4142                       	dc.w $4142
0001CCDE 0000 0000                  	dc.l Map_SSWalls
0001CCE2 4142                       	dc.w $4142
0001CCE4 0000 0000                  	dc.l Map_SSWalls
0001CCE8 4142                       	dc.w $4142
0001CCEA 0000 0000                  	dc.l Map_SSWalls
0001CCEE 4142                       	dc.w $4142
0001CCF0 0000 0000                  	dc.l Map_SSWalls
0001CCF4 4142                       	dc.w $4142
0001CCF6 0000 0000                  	dc.l Map_SSWalls
0001CCFA 4142                       	dc.w $4142
0001CCFC 0000 0000                  	dc.l Map_SSWalls
0001CD00 6142                       	dc.w $6142
0001CD02 0000 0000                  	dc.l Map_SSWalls
0001CD06 6142                       	dc.w $6142
0001CD08 0000 0000                  	dc.l Map_SSWalls
0001CD0C 6142                       	dc.w $6142
0001CD0E 0000 0000                  	dc.l Map_SSWalls
0001CD12 6142                       	dc.w $6142
0001CD14 0000 0000                  	dc.l Map_SSWalls
0001CD18 6142                       	dc.w $6142
0001CD1A 0000 0000                  	dc.l Map_SSWalls
0001CD1E 6142                       	dc.w $6142
0001CD20 0000 0000                  	dc.l Map_SSWalls
0001CD24 6142                       	dc.w $6142
0001CD26 0000 0000                  	dc.l Map_SSWalls
0001CD2A 6142                       	dc.w $6142
0001CD2C 0000 0000                  	dc.l Map_SSWalls
0001CD30 6142                       	dc.w $6142
0001CD32 0000 FC44                  	dc.l Map_obj47
0001CD36 023B                       	dc.w $23B
0001CD38 0000 0000                  	dc.l Map_SS_R
0001CD3C 0570                       	dc.w $570
0001CD3E 0000 0000                  	dc.l Map_SS_R
0001CD42 0251                       	dc.w $251
0001CD44 0000 0000                  	dc.l Map_SS_R
0001CD48 0370                       	dc.w $370
0001CD4A 0000 0000                  	dc.l Map_SS_Up
0001CD4E 0263                       	dc.w $263
0001CD50 0000 0000                  	dc.l Map_SS_Down
0001CD54 0263                       	dc.w $263
0001CD56 0000 0000                  	dc.l Map_SS_R
0001CD5A 22F0                       	dc.w $22F0
0001CD5C 0000 0000                  	dc.l Map_SS_Glass
0001CD60 0470                       	dc.w $470
0001CD62 0000 0000                  	dc.l Map_SS_Glass
0001CD66 05F0                       	dc.w $5F0
0001CD68 0000 0000                  	dc.l Map_SS_Glass
0001CD6C 65F0                       	dc.w $65F0
0001CD6E 0000 0000                  	dc.l Map_SS_Glass
0001CD72 25F0                       	dc.w $25F0
0001CD74 0000 0000                  	dc.l Map_SS_Glass
0001CD78 45F0                       	dc.w $45F0
0001CD7A 0000 0000                  	dc.l Map_SS_R
0001CD7E 02F0                       	dc.w $2F0
0001CD80 0100 FC44                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001CD84 023B                       	dc.w $23B
0001CD86 0200 FC44                  	dc.l Map_obj47+$2000000
0001CD8A 023B                       	dc.w $23B
0001CD8C 0000 0000                  	dc.l Map_SS_R
0001CD90 0797                       	dc.w $797
0001CD92 0000 0000                  	dc.l Map_SS_R
0001CD96 07A0                       	dc.w $7A0
0001CD98 0000 0000                  	dc.l Map_SS_R
0001CD9C 07A9                       	dc.w $7A9
0001CD9E 0000 0000                  	dc.l Map_SS_R
0001CDA2 0797                       	dc.w $797
0001CDA4 0000 0000                  	dc.l Map_SS_R
0001CDA8 07A0                       	dc.w $7A0
0001CDAA 0000 0000                  	dc.l Map_SS_R
0001CDAE 07A9                       	dc.w $7A9
0001CDB0 0000 AF3C                  	dc.l Map_obj25
0001CDB4 27B2                       	dc.w $27B2
0001CDB6 0000 0000                  	dc.l Map_SS_Chaos3
0001CDBA 0770                       	dc.w $770
0001CDBC 0000 0000                  	dc.l Map_SS_Chaos3
0001CDC0 2770                       	dc.w $2770
0001CDC2 0000 0000                  	dc.l Map_SS_Chaos3
0001CDC6 4770                       	dc.w $4770
0001CDC8 0000 0000                  	dc.l Map_SS_Chaos3
0001CDCC 6770                       	dc.w $6770
0001CDCE 0000 0000                  	dc.l Map_SS_Chaos1
0001CDD2 0770                       	dc.w $770
0001CDD4 0000 0000                  	dc.l Map_SS_Chaos2
0001CDD8 0770                       	dc.w $770
0001CDDA 0000 0000                  	dc.l Map_SS_R
0001CDDE 04F0                       	dc.w $4F0
0001CDE0 0400 AF3C                  	dc.l Map_obj25+$4000000
0001CDE4 27B2                       	dc.w $27B2
0001CDE6 0500 AF3C                  	dc.l Map_obj25+$5000000
0001CDEA 27B2                       	dc.w $27B2
0001CDEC 0600 AF3C                  	dc.l Map_obj25+$6000000
0001CDF0 27B2                       	dc.w $27B2
0001CDF2 0700 AF3C                  	dc.l Map_obj25+$7000000
0001CDF6 27B2                       	dc.w $27B2
0001CDF8 0000 0000                  	dc.l Map_SS_Glass
0001CDFC 23F0                       	dc.w $23F0
0001CDFE 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001CE02 23F0                       	dc.w $23F0
0001CE04 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001CE08 23F0                       	dc.w $23F0
0001CE0A 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001CE0E 23F0                       	dc.w $23F0
0001CE10 0000 0000                  	dc.l Map_SS_R+$2000000
0001CE14 04F0                       	dc.w $4F0
0001CE16 0000 0000                  	dc.l Map_SS_Glass
0001CE1A 05F0                       	dc.w $5F0
0001CE1C 0000 0000                  	dc.l Map_SS_Glass
0001CE20 65F0                       	dc.w $65F0
0001CE22 0000 0000                  	dc.l Map_SS_Glass
0001CE26 25F0                       	dc.w $25F0
0001CE28 0000 0000                  	dc.l Map_SS_Glass
0001CE2C 45F0                       	dc.w $45F0
0001CE2C 45F0                       	dc.w $45F0
0001CE2E                            
0001CE2E                            ; ---------------------------------------------------------------------------
0001CE2E                            ; Sprite mappings - special stage "R" block
0001CE2E                            ; ---------------------------------------------------------------------------
0001CE2E                            Map_SS_R:
0001CE2E                            	include "_maps\SSRblock.asm"
0001CE2E                            ; ---------------------------------------------------------------------------
0001CE2E                            ; Sprite mappings - special stage "R" block
0001CE2E                            ; ---------------------------------------------------------------------------
0001CE2E 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001CE32 0000                       		dc.w byte_1B91E-Map_SS_R
0001CE34 01                         byte_1B912:	dc.b 1
0001CE35 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001CE3A 01                         byte_1B918:	dc.b 1
0001CE3B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001CE40 00                         byte_1B91E:	dc.b 0
0001CE42 00                         		even
0001CE42 00                         		even
0001CE42                            
0001CE42                            ; ---------------------------------------------------------------------------
0001CE42                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001CE42                            ; ---------------------------------------------------------------------------
0001CE42                            Map_SS_Glass:
0001CE42                            	include "_maps\SSglassblock.asm"
0001CE42                            ; ---------------------------------------------------------------------------
0001CE42                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001CE42                            ; ---------------------------------------------------------------------------
0001CE42 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001CE46 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001CE4A 01                         byte_1B928:	dc.b 1
0001CE4B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001CE50 01                         byte_1B92E:	dc.b 1
0001CE51 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001CE56 01                         byte_1B934:	dc.b 1
0001CE57 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001CE5C 01                         byte_1B93A:	dc.b 1
0001CE5D F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001CE62                            		even
0001CE62                            		even
0001CE62                            
0001CE62                            ; ---------------------------------------------------------------------------
0001CE62                            ; Sprite mappings - special stage "UP" block
0001CE62                            ; ---------------------------------------------------------------------------
0001CE62                            Map_SS_Up:
0001CE62                            	include "_maps\SSUPblock.asm"
0001CE62                            ; ---------------------------------------------------------------------------
0001CE62                            ; Sprite mappings - special stage "UP" block
0001CE62                            ; ---------------------------------------------------------------------------
0001CE62 0000                       		dc.w byte_1B944-Map_SS_Up
0001CE64 0000                       		dc.w byte_1B94A-Map_SS_Up
0001CE66 01                         byte_1B944:	dc.b 1
0001CE67 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001CE6C 01                         byte_1B94A:	dc.b 1
0001CE6D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001CE72                            		even
0001CE72                            		even
0001CE72                            
0001CE72                            ; ---------------------------------------------------------------------------
0001CE72                            ; Sprite mappings - special stage "DOWN" block
0001CE72                            ; ---------------------------------------------------------------------------
0001CE72                            Map_SS_Down:
0001CE72                            	include "_maps\SSDOWNblock.asm"
0001CE72                            ; ---------------------------------------------------------------------------
0001CE72                            ; Sprite mappings - special stage "DOWN" block
0001CE72                            ; ---------------------------------------------------------------------------
0001CE72 0000                       		dc.w byte_1B954-Map_SS_Down
0001CE74 0000                       		dc.w byte_1B95A-Map_SS_Down
0001CE76 01                         byte_1B954:	dc.b 1
0001CE77 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001CE7C 01                         byte_1B95A:	dc.b 1
0001CE7D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001CE82                            		even
0001CE82                            		even
0001CE82                            
0001CE82                            ; ---------------------------------------------------------------------------
0001CE82                            ; Sprite mappings - special stage chaos	emeralds
0001CE82                            ; ---------------------------------------------------------------------------
0001CE82 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001CE84 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001CE86 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001CE88 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001CE8A 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001CE8C 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001CE8E 01                         byte_1B96C:	dc.b 1
0001CE8F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001CE94 01                         byte_1B972:	dc.b 1
0001CE95 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001CE9A 01                         byte_1B978:	dc.b 1
0001CE9B F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001CEA0 01                         byte_1B97E:	dc.b 1
0001CEA1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001CEA6                            		even
0001CEA6                            ; ===========================================================================
0001CEA6                            ; ---------------------------------------------------------------------------
0001CEA6                            ; Object 09 - Sonic (special stage)
0001CEA6                            ; ---------------------------------------------------------------------------
0001CEA6                            
0001CEA6                            Obj09:					; XREF: Obj_Index
0001CEA6                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001CEA6                            ;		beq.s	Obj09_Normal	; if not, branch
0001CEA6 6100 0000                  		bsr.w	SS_FixCamera
0001CEAA                            ;		bra.w	DebugMode
0001CEAA                            ; ===========================================================================
0001CEAA                            
0001CEAA                            Obj09_Normal:
0001CEAA 7000                       		moveq	#0,d0
0001CEAC 1028 0024                  		move.b	$24(a0),d0
0001CEB0 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001CEB4 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001CEB8                            ; ===========================================================================
0001CEB8 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001CEBA 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001CEBC 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001CEBE 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001CEC0                            ; ===========================================================================
0001CEC0                            
0001CEC0                            Obj09_Main:				; XREF: Obj09_Index
0001CEC0 5428 0024                  		addq.b	#2,$24(a0)
0001CEC4 117C 000E 0016             		move.b	#$E,$16(a0)
0001CECA 117C 0007 0017             		move.b	#7,$17(a0)
0001CED0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001CED8 317C 0780 0002             		move.w	#$780,2(a0)
0001CEDE 117C 0004 0001             		move.b	#4,1(a0)
0001CEE4 117C 0000 0018             		move.b	#0,$18(a0)
0001CEEA 117C 0002 001C             		move.b	#2,$1C(a0)
0001CEF0 08E8 0002 0022             		bset	#2,$22(a0)
0001CEF6 08E8 0001 0022             		bset	#1,$22(a0)
0001CEFC                            
0001CEFC                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001CEFC                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001CEFC                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001CEFC                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001CEFC                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001CEFC                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001CEFC                            
0001CEFC                            Obj09_NoDebug:
0001CEFC 117C 0000 0030             		move.b	#0,$30(a0)
0001CF02 7000                       		moveq	#0,d0
0001CF04 1028 0022                  		move.b	$22(a0),d0
0001CF08 0240 0002                  		andi.w	#2,d0
0001CF0C 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001CF10 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001CF14 4EB9 0001 4E60             		jsr	LoadSonicDynPLC
0001CF1A 4EF9 0000 E750             		jmp	DisplaySprite
0001CF20                            ; ===========================================================================
0001CF20 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001CF22 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001CF24                            ; ===========================================================================
0001CF24                            
0001CF24                            Obj09_OnWall:				; XREF: Obj09_Modes
0001CF24 6100 0000                  		bsr.w	Obj09_Rise
0001CF28 6100 0000                  		bsr.w	Obj09_Move
0001CF2C 6100 0000                  		bsr.w	Obj09_Fall
0001CF30 6000                       		bra.s	Obj09_Display
0001CF32                            ; ===========================================================================
0001CF32                            
0001CF32                            Obj09_InAir:				; XREF: Obj09_Modes
0001CF32 6100 0000                  		bsr.w	Obj09_Rise
0001CF36 6100 0000                  		bsr.w	Obj09_Move
0001CF3A 6100 0000                  		bsr.w	Obj09_Fall
0001CF3E                            
0001CF3E                            Obj09_Display:				; XREF: Obj09_OnWall
0001CF3E 6100 0000                  		bsr.w	Obj09_ChkItems
0001CF42 6100 0000                  		bsr.w	Obj09_ChkItems2
0001CF46 4EB9 0000 E72A             		jsr	SpeedToPos
0001CF4C 6100 0000                  		bsr.w	SS_FixCamera
0001CF50 3038 F780                  		move.w	($FFFFF780).w,d0
0001CF54 D078 F782                  		add.w	($FFFFF782).w,d0
0001CF58 31C0 F780                  		move.w	d0,($FFFFF780).w
0001CF5C 4EB9 0001 4BBA             		jsr	Sonic_Animate
0001CF62 4E75                       		rts	
0001CF64                            
0001CF64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF64                            
0001CF64                            
0001CF64                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001CF64 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001CF6A 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001CF6C 4A78 F784                          tst.w   ($FFFFF784).w
0001CF70 6600                               bne.s   @corereverse1
0001CF72 6100 0000                  		bsr.w	Obj09_MoveLeft
0001CF76 6000                               bra.s   Obj09_ChkRight          
0001CF78                            
0001CF78                            @corereverse1:
0001CF78 6100 0000                          bsr.w	Obj09_MoveRight
0001CF7C                            
0001CF7C                            Obj09_ChkRight:
0001CF7C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001CF82 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001CF84 4A78 F784                          tst.w   ($FFFFF784).w
0001CF88 6600                               bne.s   @corereverse2
0001CF8A 6100 0000                  		bsr.w	Obj09_MoveRight
0001CF8E 6000                               bra.s   Obj09_MoveSpeed 
0001CF90                            
0001CF90                            @corereverse2:
0001CF90 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001CF94                            
0001CF94                            Obj09_MoveSpeed:
0001CF94 1038 F602                  		move.b	($FFFFF602).w,d0
0001CF98 0200 000C                  		andi.b	#$C,d0
0001CF9C 6600                       		bne.s	Obj09_MoveCollision
0001CF9E 3028 0010                  		move.w	$10(a0),d0
0001CFA2 6700                       		beq.s	Obj09_MoveCollision
0001CFA4 317C 0000 0010             		move.w	#0,$10(a0)
0001CFAA                            
0001CFAA                            Obj09_MoveCollision:
0001CFAA 1038 F780                  		move.b	($FFFFF780).w,d0
0001CFAE 0600 0020                  		addi.b	#$20,d0
0001CFB2 0200 00C0                  		andi.b	#$C0,d0
0001CFB6 4400                       		neg.b	d0
0001CFB8 4EB9 0000 3424             		jsr	(CalcSine).l
0001CFBE C3E8 0010                  		muls.w	$10(a0),d1
0001CFC2 D3A8 0008                  		add.l	d1,8(a0)
0001CFC6 C1E8 0012                  		muls.w	$12(a0),d0
0001CFCA D1A8 000C                  		add.l	d0,$C(a0)
0001CFCE 48E7 C000                  		movem.l	d0-d1,-(sp)
0001CFD2 2428 000C                  		move.l	$C(a0),d2
0001CFD6 2628 0008                  		move.l	8(a0),d3
0001CFDA 6100 0000                  		bsr.w	sub_1BCE8
0001CFDE 6700                       		beq.s	loc_1BAF2
0001CFE0 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001CFE4 93A8 0008                  		sub.l	d1,8(a0)
0001CFE8 91A8 000C                  		sub.l	d0,$C(a0)
0001CFEC 317C 0000 0010             		move.w	#0,$10(a0)
0001CFF2 4E75                       		rts	
0001CFF4                            ; ===========================================================================
0001CFF4                            
0001CFF4                            loc_1BAF2:
0001CFF4 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001CFF8 4E75                       		rts	
0001CFFA                            ; End of function Obj09_Move
0001CFFA                            
0001CFFA                            
0001CFFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFFA                            
0001CFFA                            
0001CFFA                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001CFFA 08E8 0000 0022             		bset	#0,$22(a0)
0001D000 4240                               clr.w   d0
0001D002 3038 F786                          move.w  ($FFFFF786).w,d0
0001D006 D040                               add.w   d0,d0
0001D008 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001D00E 4468 0010                          neg.w   $10(a0)
0001D012 4E75                               rts
0001D014                            
0001D014                            ; End of function Obj09_MoveLeft
0001D014                            
0001D014                            
0001D014                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D014                            
0001D014                            
0001D014                            Obj09_MoveRight:
0001D014 08A8 0000 0022             		bclr	#0,$22(a0)
0001D01A 4240                               clr.w   d0
0001D01C 3038 F786                          move.w  ($FFFFF786).w,d0
0001D020 D040                               add.w   d0,d0
0001D022 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001D028 4E75                       		rts
0001D02A                            
0001D02A                            ; End of function Obj09_MoveRight
0001D02A                            
0001D02A                            ; ---------------------------------------------------------------------------
0001D02A                            
0001D02A                            SS_XSpdIndex:
0001D02A 0032                       		dc.w 50
0001D02C 0064                       		dc.w 100
0001D02E 0096                       		dc.w 150
0001D030 00C8                       		dc.w 200
0001D032 00FA                       		dc.w 250
0001D034                            
0001D034                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D034                            
0001D034                            
0001D034                            Obj09_Rise:				; XREF: Obj09_OnWall
0001D034 0838 0000 F602             		btst	#0,($FFFFF602).w
0001D03A 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001D03C 4A78 F784                          tst.w   ($FFFFF784).w
0001D040 6600 0000                          bne.w   @corereverse1
0001D044 6100 0000                  		bsr.w	Obj09_MoveUp
0001D048 6000                               bra.s   Obj09_NoRise
0001D04A                            
0001D04A                            @corereverse1:
0001D04A 6100 0000                  		bsr.w	Obj09_Falling 
0001D04E                                    
0001D04E                            Obj09_NoRise:
0001D04E 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001D054 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001D056 4A78 F784                          tst.w   ($FFFFF784).w
0001D05A 6600 0000                          bne.w   @corereverse2
0001D05E 6100 0000                  		bsr.w	Obj09_Falling			;	
0001D062 6000                               bra.s   Obj09_MoveYSpeed
0001D064                            
0001D064                            @corereverse2:
0001D064 6100 0000                  		bsr.w	Obj09_MoveUp
0001D068                            		
0001D068                            Obj09_MoveYSpeed:
0001D068 1038 F602                  		move.b	($FFFFF602).w,d0
0001D06C 0200 0003                  		andi.b	#3,d0
0001D070 6600                       		bne.s	Obj09_MoveYCollision
0001D072 3028 0012                  		move.w	$12(a0),d0
0001D076 6700                       		beq.s	Obj09_MoveYCollision
0001D078 317C 0000 0012             		move.w	#0,$12(a0)
0001D07E                            
0001D07E                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001D07E 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001D082 0600 0020                  		addi.b	#$20,d0					;	?
0001D086 0200 00C0                  		andi.b	#$C0,d0					;	
0001D08A 4400                       		neg.b	d0						;	?
0001D08C 4EB9 0000 3424             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001D092 C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001D096 D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001D09A C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001D09E D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001D0A2 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001D0A6 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001D0AA 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001D0AE 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001D0B2 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001D0B6 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001D0BA 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001D0BE 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001D0C2 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001D0C8 4E75                       		rts								;	end routine
0001D0CA                            
0001D0CA                            Obj09_MoveUp:
0001D0CA 4240                               clr.w   d0
0001D0CC 3038 F786                          move.w  ($FFFFF786).w,d0
0001D0D0 D040                               add.w   d0,d0
0001D0D2 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001D0D8 4468 0012                          neg.w   $12(a0)
0001D0DC 4E75                               rts
0001D0DE                            
0001D0DE                            Obj09_Falling:
0001D0DE 4240                               clr.w   d0
0001D0E0 3038 F786                          move.w  ($FFFFF786).w,d0
0001D0E4 D040                               add.w   d0,d0
0001D0E6 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001D0EC 4E75                       		rts
0001D0EE                            ; End of function Obj09_Jump
0001D0EE                            
0001D0EE                            ; ---------------------------------------------------------------------------
0001D0EE                            SS_YSpdIndex:
0001D0EE 0080                       		dc.w $80
0001D0F0 0100                       		dc.w $100
0001D0F2 0180                       		dc.w $180
0001D0F4 0200                       		dc.w $200
0001D0F6 0280                       		dc.w $280
0001D0F8                            
0001D0F8                            
0001D0F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0F8                            
0001D0F8                            
0001D0F8                            nullsub_2:				; XREF: Obj09_InAir
0001D0F8 4E75                       		rts	
0001D0FA                            ; End of function nullsub_2
0001D0FA                            
0001D0FA                            ; ===========================================================================
0001D0FA                            ; ---------------------------------------------------------------------------
0001D0FA                            ; unused subroutine to limit Sonic's upward vertical speed
0001D0FA                            ; ---------------------------------------------------------------------------
0001D0FA 323C FC00                  		move.w	#-$400,d1
0001D0FE B268 0012                  		cmp.w	$12(a0),d1
0001D102 6F00                       		ble.s	locret_1BBB4
0001D104 1038 F602                  		move.b	($FFFFF602).w,d0
0001D108 0200 0070                  		andi.b	#$70,d0
0001D10C 6600                       		bne.s	locret_1BBB4
0001D10E 3141 0012                  		move.w	d1,$12(a0)
0001D112                            
0001D112                            locret_1BBB4:
0001D112 4E75                       		rts	
0001D114                            ; ---------------------------------------------------------------------------
0001D114                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001D114                            ; ---------------------------------------------------------------------------
0001D114                            
0001D114                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D114                            
0001D114                            
0001D114                            SS_FixCamera:				; XREF: Obj09
0001D114 3428 000C                  		move.w	$C(a0),d2
0001D118 3628 0008                  		move.w	8(a0),d3
0001D11C 3038 F700                  		move.w	($FFFFF700).w,d0
0001D120 0443 00A0                  		subi.w	#$A0,d3
0001D124 6500                       		bcs.s	loc_1BBCE
0001D126 9043                       		sub.w	d3,d0
0001D128 9178 F700                  		sub.w	d0,($FFFFF700).w
0001D12C                            
0001D12C                            loc_1BBCE:
0001D12C 3038 F704                  		move.w	($FFFFF704).w,d0
0001D130 0442 0070                  		subi.w	#$70,d2
0001D134 6500                       		bcs.s	locret_1BBDE
0001D136 9042                       		sub.w	d2,d0
0001D138 9178 F704                  		sub.w	d0,($FFFFF704).w
0001D13C                            
0001D13C                            locret_1BBDE:
0001D13C 4E75                       		rts	
0001D13E                            ; End of function SS_FixCamera
0001D13E                            
0001D13E                            ; ===========================================================================
0001D13E                            
0001D13E                            Obj09_ExitStage:			; XREF: Obj09_Index
0001D13E 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001D144 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001D14A 6600                       		bne.s	loc_1BBF4
0001D14C 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D152                            
0001D152                            loc_1BBF4:
0001D152 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001D158 6D00                       		blt.s	loc_1BC12
0001D15A 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001D160                            ;		move.w	#$4000,($FFFFF780).w
0001D160 5428 0024                  		addq.b	#2,$24(a0)
0001D164 317C 003C 0038             		move.w	#$3C,$38(a0)
0001D16A                            
0001D16A                            loc_1BC12:
0001D16A                            ;		move.w	($FFFFF780).w,d0
0001D16A                            ;		add.w	($FFFFF782).w,d0
0001D16A                            ;		move.w	d0,($FFFFF780).w
0001D16A 4EB9 0001 4BBA             		jsr	Sonic_Animate
0001D170 4EB9 0001 4E60             		jsr	LoadSonicDynPLC
0001D176 6100 FF9C                  		bsr.w	SS_FixCamera
0001D17A 4EF9 0000 E750             		jmp	DisplaySprite
0001D180                            ; ===========================================================================
0001D180                            
0001D180                            Obj09_Exit2:				; XREF: Obj09_Index
0001D180 5368 0038                  		subq.w	#1,$38(a0)
0001D184 6600                       		bne.s	loc_1BC40
0001D186 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D18C                            
0001D18C                            loc_1BC40:
0001D18C 4EB9 0001 4BBA             		jsr	Sonic_Animate
0001D192 4EB9 0001 4E60             		jsr	LoadSonicDynPLC
0001D198 6100 FF7A                  		bsr.w	SS_FixCamera
0001D19C 4EF9 0000 E750             		jmp	DisplaySprite
0001D1A2                            
0001D1A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1A2                            
0001D1A2                            
0001D1A2                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001D1A2 2428 000C                  		move.l	$C(a0),d2
0001D1A6 2628 0008                  		move.l	8(a0),d3
0001D1AA 1038 F780                  		move.b	($FFFFF780).w,d0
0001D1AE 0200 00FC                  		andi.b	#$FC,d0
0001D1B2 4EB9 0000 3424             		jsr	(CalcSine).l
0001D1B8 3828 0010                  		move.w	$10(a0),d4
0001D1BC 48C4                       		ext.l	d4
0001D1BE E184                       		asl.l	#8,d4
0001D1C0 C1FC 002A                  		muls.w	#$2A,d0
0001D1C4 D084                       		add.l	d4,d0
0001D1C6 3828 0012                  		move.w	$12(a0),d4
0001D1CA 48C4                       		ext.l	d4
0001D1CC E184                       		asl.l	#8,d4
0001D1CE C3FC 002A                  		muls.w	#$2A,d1
0001D1D2 D284                       		add.l	d4,d1
0001D1D4 7A00                       		moveq	#0,d5
0001D1D6 3A28 0010                  		move.w	$10(a0),d5
0001D1DA 6700                       		beq.s	Obj09_NoXFall
0001D1DC D680                       		add.l	d0,d3
0001D1DE 6100 0000                  		bsr.w	sub_1BCE8
0001D1E2 6700                       		beq.s	loc_1BCB0
0001D1E4 9680                       		sub.l	d0,d3
0001D1E6 7000                       		moveq	#0,d0
0001D1E8 3140 0010                  		move.w	d0,$10(a0)
0001D1EC 08A8 0001 0022             		bclr	#1,$22(a0)
0001D1F2                            
0001D1F2                            Obj09_NoXFall
0001D1F2 7C00                       		moveq	#0,d6
0001D1F4 3C28 0012                  		move.w	$12(a0),d6
0001D1F8 6700                       		beq.s	Obj09_NoYFall
0001D1FA D481                       		add.l	d1,d2
0001D1FC 6100 0000                  		bsr.w	sub_1BCE8
0001D200 6700                       		beq.s	loc_1BCC6
0001D202 9481                       		sub.l	d1,d2
0001D204 7200                       		moveq	#0,d1
0001D206 3141 0012                  		move.w	d1,$12(a0)
0001D20A 4E75                       		rts	
0001D20C                            ; ===========================================================================
0001D20C                            
0001D20C                            loc_1BCB0:
0001D20C 7C00                       		moveq	#0,d6
0001D20E 3C28 0012                  		move.w	$12(a0),d6
0001D212 6700                       		beq.s	Obj09_NoYFall
0001D214 D481                       		add.l	d1,d2
0001D216 6100 0000                  		bsr.w	sub_1BCE8
0001D21A 6700                       		beq.s	loc_1BCD4
0001D21C 9481                       		sub.l	d1,d2
0001D21E 7200                       		moveq	#0,d1
0001D220 3141 0012                  		move.w	d1,$12(a0)
0001D224 08A8 0001 0022             		bclr	#1,$22(a0)
0001D22A                            
0001D22A                            loc_1BCC6:
0001D22A E080                       		asr.l	#8,d0
0001D22C E081                       		asr.l	#8,d1
0001D22E 3140 0010                  		move.w	d0,$10(a0)
0001D232 3141 0012                  		move.w	d1,$12(a0)
0001D236 4E75                       		rts	
0001D238                            ; ===========================================================================
0001D238                            
0001D238                            loc_1BCD4:
0001D238 E080                       		asr.l	#8,d0
0001D23A E081                       		asr.l	#8,d1
0001D23C 3140 0010                  		move.w	d0,$10(a0)
0001D240 3141 0012                  		move.w	d1,$12(a0)
0001D244 08E8 0001 0022             		bset	#1,$22(a0)
0001D24A 4E75                       		rts	
0001D24C                            
0001D24C                            Obj09_NoYFall:
0001D24C 4E75                       		rts
0001D24E                            ; End of function Obj09_Fall
0001D24E                            
0001D24E                            
0001D24E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D24E                            
0001D24E                            
0001D24E                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001D24E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D254 7800                       		moveq	#0,d4
0001D256 4842                       		swap	d2
0001D258 3802                       		move.w	d2,d4
0001D25A 4842                       		swap	d2
0001D25C 0644 0044                  		addi.w	#$44,d4
0001D260 88FC 0018                  		divu.w	#$18,d4
0001D264 C8FC 0080                  		mulu.w	#$80,d4
0001D268 D3C4                       		adda.l	d4,a1
0001D26A 7800                       		moveq	#0,d4
0001D26C 4843                       		swap	d3
0001D26E 3803                       		move.w	d3,d4
0001D270 4843                       		swap	d3
0001D272 0644 0014                  		addi.w	#$14,d4
0001D276 88FC 0018                  		divu.w	#$18,d4
0001D27A D2C4                       		adda.w	d4,a1
0001D27C 7A00                       		moveq	#0,d5
0001D27E 1819                       		move.b	(a1)+,d4
0001D280 6100                       		bsr.s	sub_1BD30
0001D282 1819                       		move.b	(a1)+,d4
0001D284 6100                       		bsr.s	sub_1BD30
0001D286 D2FC 007E                  		adda.w	#$7E,a1
0001D28A 1819                       		move.b	(a1)+,d4
0001D28C 6100                       		bsr.s	sub_1BD30
0001D28E 1819                       		move.b	(a1)+,d4
0001D290 6100                       		bsr.s	sub_1BD30
0001D292 4A05                       		tst.b	d5
0001D294 4E75                       		rts	
0001D296                            ; End of function sub_1BCE8
0001D296                            
0001D296                            
0001D296                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D296                            
0001D296                            
0001D296                            sub_1BD30:				; XREF: sub_1BCE8
0001D296 6700                       		beq.s	locret_1BD44
0001D298 0C04 0028                  		cmpi.b	#$28,d4
0001D29C 6500                       		blo.s	loc_1BD46
0001D29E 0C04 004B                  		cmpi.b	#$4B,d4
0001D2A2 6400                       		bhs.s	loc_1BD46
0001D2A4 0C04 003A                  		cmpi.b	#$3A,d4
0001D2A8 6400                       		bhs.s	locret_1BD44
0001D2AA 0C04 002C                  		cmpi.b	#$2C,d4
0001D2AE 6400                       		bhs.s	loc_1BD46
0001D2B0                            
0001D2B0                            locret_1BD44:
0001D2B0 4E75                       		rts	
0001D2B2                            ; ===========================================================================
0001D2B2                            
0001D2B2                            loc_1BD46:
0001D2B2 1144 0030                  		move.b	d4,$30(a0)
0001D2B6 2149 0032                  		move.l	a1,$32(a0)
0001D2BA 7AFF                       		moveq	#-1,d5
0001D2BC 4E75                       		rts	
0001D2BE                            ; End of function sub_1BD30
0001D2BE                            
0001D2BE                            
0001D2BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2BE                            
0001D2BE                            
0001D2BE                            Obj09_ChkItems:				; XREF: Obj09_Display
0001D2BE 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D2C4 7800                       		moveq	#0,d4
0001D2C6 3828 000C                  		move.w	$C(a0),d4
0001D2CA 0644 0050                  		addi.w	#$50,d4
0001D2CE 88FC 0018                  		divu.w	#$18,d4
0001D2D2 C8FC 0080                  		mulu.w	#$80,d4
0001D2D6 D3C4                       		adda.l	d4,a1
0001D2D8 7800                       		moveq	#0,d4
0001D2DA 3828 0008                  		move.w	8(a0),d4
0001D2DE 0644 0020                  		addi.w	#$20,d4
0001D2E2 88FC 0018                  		divu.w	#$18,d4
0001D2E6 D2C4                       		adda.w	d4,a1
0001D2E8 1811                       		move.b	(a1),d4
0001D2EA 6600                       		bne.s	Obj09_ChkCont
0001D2EC 4A28 003A                  		tst.b	$3A(a0)
0001D2F0 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001D2F4 7800                       		moveq	#0,d4
0001D2F6 4E75                       		rts	
0001D2F8                            ; ===========================================================================
0001D2F8                            
0001D2F8                            Obj09_ChkCont:
0001D2F8 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001D2FC 6600                       		bne.s	Obj09_Chk1Up
0001D2FE 6100 F6DC                  		bsr.w	SS_RemoveCollectedItem
0001D302 6600                       		bne.s	Obj09_GetCont
0001D304 14BC 0001                  		move.b	#1,(a2)
0001D308 2549 0004                  		move.l	a1,4(a2)
0001D30C                            
0001D30C                            Obj09_GetCont:
0001D30C 4EB9 0000 AC24             		jsr	CollectRing
0001D312 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001D318 6500                       		bcs.s	Obj09_NoCont
0001D31A 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001D320 6600                       		bne.s	Obj09_NoCont
0001D322 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001D326 303C 00BF                  		move.w	#$BF,d0
0001D32A 4EB9 0000 1C7C             		jsr	(PlaySound).l	; play extra continue sound
0001D330                            
0001D330                            Obj09_NoCont:
0001D330 7800                       		moveq	#0,d4
0001D332 4E75                       		rts	
0001D334                            ; ===========================================================================
0001D334                            
0001D334                            Obj09_Chk1Up:
0001D334 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001D338 6600                       		bne.s	Obj09_ChkEmer
0001D33A 6100 F6A0                  		bsr.w	SS_RemoveCollectedItem
0001D33E 6600                       		bne.s	Obj09_Get1Up
0001D340 14BC 0003                  		move.b	#3,(a2)
0001D344 2549 0004                  		move.l	a1,4(a2)
0001D348                            
0001D348                            Obj09_Get1Up:
0001D348 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001D34C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001D350 303C 0088                  		move.w	#$88,d0
0001D354 4EB9 0000 1C7C             		jsr	(PlaySound).l	; play extra life music
0001D35A 7800                       		moveq	#0,d4
0001D35C 4E75                       		rts	
0001D35E                            ; ===========================================================================
0001D35E                            
0001D35E                            Obj09_ChkEmer:
0001D35E 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001D362 6500                       		bcs.s	Obj09_UPblock
0001D364 0C04 0040                  		cmpi.b	#$40,d4
0001D368 6200                       		bhi.s	Obj09_UPblock
0001D36A 6100 F670                  		bsr.w	SS_RemoveCollectedItem
0001D36E 6600                       		bne.s	Obj09_GetEmer
0001D370 14BC 0005                  		move.b	#5,(a2)
0001D374 2549 0004                  		move.l	a1,4(a2)
0001D378                            
0001D378                            Obj09_GetEmer:
0001D378 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001D37E 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001D380 0404 003B                  		subi.b	#$3B,d4
0001D384 7000                       		moveq	#0,d0
0001D386 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001D38A 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001D38E 1584 0000                  		move.b	d4,(a2,d0.w)
0001D392 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001D396                            
0001D396                            Obj09_NoEmer:
0001D396 303C 0093                  		move.w	#$93,d0
0001D39A 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play emerald music
0001D3A0 7800                       		moveq	#0,d4
0001D3A2 4E75                       		rts	
0001D3A4                            
0001D3A4                            ; ===========================================================================
0001D3A4                            
0001D3A4                            Obj09_UPblock:
0001D3A4 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001D3A8 6600                       		bne.s	Obj09_DOWNblock
0001D3AA 6100 F630                  		bsr.w	SS_RemoveCollectedItem
0001D3AE 6600                       		bne.s	Obj09_SpeedUp
0001D3B0 14BC 0001                  		move.b	#1,(a2)
0001D3B4 2549 0004                  		move.l	a1,4(a2)
0001D3B8                            
0001D3B8                            Obj09_SpeedUp:
0001D3B8 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001D3BE 6400                       		bhs.s	Obj09_UPsnd
0001D3C0 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001D3C4                            
0001D3C4                            Obj09_UPsnd:
0001D3C4 303C 00A9                  		move.w	#$A9,d0
0001D3C8 4EB9 0000 1C82             		jsr	(PlaySound_Special).l	; play up/down sound
0001D3CE 7800                       		moveq	#0,d4
0001D3D0 4E75                       		rts	
0001D3D2                            ; ===========================================================================
0001D3D2                            
0001D3D2                            Obj09_DOWNblock:
0001D3D2 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001D3D6 6600                       		bne.s	Obj09_Rblock
0001D3D8 6100 F602                  		bsr.w	SS_RemoveCollectedItem
0001D3DC 6600                       		bne.s	Obj09_SpeedDown
0001D3DE 14BC 0001                  		move.b	#1,(a2)
0001D3E2 2549 0004                  		move.l	a1,4(a2)
0001D3E6                            
0001D3E6                            Obj09_SpeedDown:
0001D3E6 4A78 F786                  		tst.w 	($FFFFF786).w
0001D3EA 6700                       		beq.s	Obj09_DOWNsnd
0001D3EC 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001D3F0                            
0001D3F0                            Obj09_DOWNsnd:
0001D3F0 303C 00A9                  		move.w	#$A9,d0
0001D3F4 4EB9 0000 1C82             		jsr	(PlaySound_Special).l	; play up/down sound
0001D3FA 7800                       		moveq	#0,d4
0001D3FC 4E75                       		rts	
0001D3FE                            ; ===========================================================================
0001D3FE                            
0001D3FE                            Obj09_Rblock:
0001D3FE 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001D402 6600                       		bne.s	Obj09_ChkGhost
0001D404 6100 F5D6                  		bsr.w	SS_RemoveCollectedItem
0001D408 6600                       		bne.s	Obj09_RevStage
0001D40A 14BC 0001                  		move.b	#1,(a2)
0001D40E 2549 0004                  		move.l	a1,4(a2)
0001D412                            
0001D412                            Obj09_RevStage:
0001D412 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001D418 103C 00A9                  		move.b	#$A9,d0
0001D41C 4EB9 0000 1C82             		jsr	(PlaySound_Special).l	; play sound
0001D422 7800                       		moveq	#0,d4
0001D424 4E75                       		rts	
0001D426                            
0001D426                            ; ===========================================================================
0001D426                            
0001D426                            Obj09_ChkGhost:
0001D426 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001D42A 6600                       		bne.s	Obj09_ChkGhostTag
0001D42C 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001D432                            
0001D432                            Obj09_ChkGhostTag:
0001D432 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001D436 6600                       		bne.s	Obj09_NoGhost
0001D438 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001D43E 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001D440 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001D446                            
0001D446                            Obj09_NoGhost:
0001D446 78FF                       		moveq	#-1,d4
0001D448 4E75                       		rts	
0001D44A                            ; ===========================================================================
0001D44A                            
0001D44A                            Obj09_MakeGhostSolid:
0001D44A 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001D450 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001D452 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D458 723F                       		moveq	#$3F,d1
0001D45A                            
0001D45A                            Obj09_GhostLoop2:
0001D45A 743F                       		moveq	#$3F,d2
0001D45C                            
0001D45C                            Obj09_GhostLoop:
0001D45C 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001D460 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001D462 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001D466                            
0001D466                            Obj09_NoReplace:
0001D466 5249                       		addq.w	#1,a1
0001D468 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001D46C 43E9 0040                  		lea	$40(a1),a1
0001D470 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001D474                            
0001D474                            Obj09_GhostNotSolid:
0001D474 4228 003A                  		clr.b	$3A(a0)
0001D478 7800                       		moveq	#0,d4
0001D47A 4E75                       		rts	
0001D47C                            ; End of function Obj09_ChkItems
0001D47C                            
0001D47C                            
0001D47C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D47C                            
0001D47C                            
0001D47C                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001D47C 1028 0030                  		move.b	$30(a0),d0
0001D480 6600                       		bne.s	Obj09_GOAL
0001D482 5328 0036                  		subq.b	#1,$36(a0)
0001D486 6A00                       		bpl.s	loc_1BEA0
0001D488 117C 0000 0036             		move.b	#0,$36(a0)
0001D48E                            
0001D48E                            loc_1BEA0:
0001D48E 5328 0037                  		subq.b	#1,$37(a0)
0001D492 6A00                       		bpl.s	locret_1BEAC
0001D494 117C 0000 0037             		move.b	#0,$37(a0)
0001D49A                            
0001D49A                            locret_1BEAC:
0001D49A 4E75                       		rts	
0001D49C                            ; ===========================================================================
0001D49C                            
0001D49C                            ; ===========================================================================
0001D49C                            
0001D49C                            Obj09_GOAL:
0001D49C 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001D4A0 6600                       		bne.s	Obj09_ChkGlass
0001D4A2 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001D4A6 303C 00A8                  		move.w	#$A8,d0		; change item
0001D4AA 4EB9 0000 1C82             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001D4B0 4E75                       		rts	
0001D4B2                            ; ===========================================================================
0001D4B2                            
0001D4B2                            ; ===========================================================================
0001D4B2                            
0001D4B2                            Obj09_ChkGlass:
0001D4B2 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001D4B6 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001D4B8 0C00 002E                  		cmpi.b	#$2E,d0
0001D4BC 6700                       		beq.s	Obj09_Glass
0001D4BE 0C00 002F                  		cmpi.b	#$2F,d0
0001D4C2 6700                       		beq.s	Obj09_Glass
0001D4C4 0C00 0030                  		cmpi.b	#$30,d0
0001D4C8 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001D4CA                            
0001D4CA                            Obj09_Glass:
0001D4CA 6100 F510                  		bsr.w	SS_RemoveCollectedItem
0001D4CE 6600                       		bne.s	Obj09_GlassSnd
0001D4D0 14BC 0006                  		move.b	#6,(a2)
0001D4D4 2268 0032                  		movea.l	$32(a0),a1
0001D4D8 5389                       		subq.l	#1,a1
0001D4DA 2549 0004                  		move.l	a1,4(a2)
0001D4DE 1011                       		move.b	(a1),d0
0001D4E0 5200                       		addq.b	#1,d0		; change glass type when touched
0001D4E2 0C00 0030                  		cmpi.b	#$30,d0
0001D4E6 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001D4E8 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001D4EA                            
0001D4EA                            Obj09_GlassUpdate:
0001D4EA 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001D4EE                            
0001D4EE                            Obj09_GlassSnd:
0001D4EE 303C 00BA                  		move.w	#$BA,d0
0001D4F2 4EF9 0000 1C82             		jmp	(PlaySound_Special).l ;	play glass block sound
0001D4F8                            ; ===========================================================================
0001D4F8                            
0001D4F8                            Obj09_NoGlass:
0001D4F8 4E75                       		rts	
0001D4FA                            ; End of function Obj09_ChkItems2
0001D4FA                            
0001D4FA                            ; ===========================================================================
0001D4FA                            ; ---------------------------------------------------------------------------
0001D4FA                            ; Object 10 - blank
0001D4FA                            ; ---------------------------------------------------------------------------
0001D4FA                            
0001D4FA                            Obj10:					; XREF: Obj_Index
0001D4FA 4E75                       		rts	
0001D4FC                            ; ---------------------------------------------------------------------------
0001D4FC                            ; Subroutine to	animate	level graphics
0001D4FC                            ; ---------------------------------------------------------------------------
0001D4FC                            
0001D4FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4FC                            
0001D4FC                            
0001D4FC                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001D4FC 4A38 FFF9                  		tst.b	($FFFFFFF9).w	; GMZ: Is truth nuke flag enabled?
0001D500 6600                       		bne.s	AniArt_Pause	; GMZ: If yes, branch
0001D502 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D506 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001D508 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D50E 6100 0000                  		bsr.w	AniArt_GiantRing
0001D512 7000                       		moveq	#0,d0
0001D514 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D518 D040                       		add.w	d0,d0
0001D51A 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001D51E 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001D522                            ; ===========================================================================
0001D522                            
0001D522                            AniArt_Pause:
0001D522 4E75                       		rts	
0001D524                            ; End of function AniArt_Load
0001D524                            
0001D524                            ; ===========================================================================
0001D524 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001D528 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001D52C 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001D530 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_GHZ-AniArt_Index
0001D534                            ; ===========================================================================
0001D534                            ; ---------------------------------------------------------------------------
0001D534                            ; Animated pattern routine - Green Hill
0001D534                            ; ---------------------------------------------------------------------------
0001D534                            
0001D534                            AniArt_GHZ:				; XREF: AniArt_Index
0001D534 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001D538 6A00                       		bpl.s	loc_1C08A
0001D53A 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001D540 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001D546 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D54A 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001D54E 0240 0001                  		andi.w	#1,d0
0001D552 6700                       		beq.s	loc_1C078
0001D554 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001D558                            
0001D558                            loc_1C078:
0001D558 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001D562 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001D566 6000 0000                  		bra.w	LoadTiles
0001D56A                            ; ===========================================================================
0001D56A                            
0001D56A                            loc_1C08A:
0001D56A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D56E 6A00                       		bpl.s	loc_1C0C0
0001D570 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001D576 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001D57C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D580 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D584 0240 0001                  		andi.w	#1,d0
0001D588 6700                       		beq.s	loc_1C0AE
0001D58A 43E9 0200                  		lea	$200(a1),a1
0001D58E                            
0001D58E                            loc_1C0AE:
0001D58E 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001D598 323C 000F                  		move.w	#$F,d1
0001D59C 6000 0000                  		bra.w	LoadTiles
0001D5A0                            ; ===========================================================================
0001D5A0                            
0001D5A0                            loc_1C0C0:
0001D5A0 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D5A4 6A00                       		bpl.s	locret_1C10C
0001D5A6 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D5AC 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001D5B0 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001D5B4 0240 0003                  		andi.w	#3,d0
0001D5B8 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001D5BC 0800 0000                  		btst	#0,d0
0001D5C0 6600                       		bne.s	loc_1C0E8
0001D5C2 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001D5C8                            
0001D5C8                            loc_1C0E8:
0001D5C8 EF48                       		lsl.w	#7,d0
0001D5CA 3200                       		move.w	d0,d1
0001D5CC D040                       		add.w	d0,d0
0001D5CE D041                       		add.w	d1,d0
0001D5D0 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001D5DA 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001D5E0 43F1 0000                  		lea	(a1,d0.w),a1
0001D5E4 323C 000B                  		move.w	#$B,d1
0001D5E8 6100 0000                  		bsr.w	LoadTiles
0001D5EC                            
0001D5EC                            locret_1C10C:
0001D5EC 4E75                       		rts	
0001D5EE                            ; ===========================================================================
0001D5EE 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001D5F2                            ; ===========================================================================
0001D5F2                            ; ---------------------------------------------------------------------------
0001D5F2                            ; Animated pattern routine - Marble
0001D5F2                            ; ---------------------------------------------------------------------------
0001D5F2                            
0001D5F2                            AniArt_MZ:				; XREF: AniArt_Index
0001D5F2 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001D5F6 6A00                       		bpl.s	loc_1C150
0001D5F8 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001D5FE 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001D604 7000                       		moveq	#0,d0
0001D606 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D60A 5200                       		addq.b	#1,d0
0001D60C 0C00 0003                  		cmpi.b	#3,d0
0001D610 6600                       		bne.s	loc_1C134
0001D612 7000                       		moveq	#0,d0
0001D614                            
0001D614                            loc_1C134:
0001D614 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001D618 C0FC 0100                  		mulu.w	#$100,d0
0001D61C D2C0                       		adda.w	d0,a1
0001D61E 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001D628 323C 0007                  		move.w	#7,d1
0001D62C 6100 0000                  		bsr.w	LoadTiles
0001D630                            
0001D630                            loc_1C150:
0001D630 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D634 6A00                       		bpl.s	loc_1C1AE
0001D636 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001D63C 7000                       		moveq	#0,d0
0001D63E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D642 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001D648 EE58                       		ror.w	#7,d0
0001D64A D8C0                       		adda.w	d0,a4
0001D64C 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001D656 7600                       		moveq	#0,d3
0001D658 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001D65C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D660 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001D664 343C 0003                  		move.w	#3,d2
0001D668                            
0001D668                            loc_1C188:
0001D668 3003                       		move.w	d3,d0
0001D66A D040                       		add.w	d0,d0
0001D66C 0240 001E                  		andi.w	#$1E,d0
0001D670 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001D676 3033 0000                  		move.w	(a3,d0.w),d0
0001D67A 47F3 0000                  		lea	(a3,d0.w),a3
0001D67E 224C                       		movea.l	a4,a1
0001D680 323C 001F                  		move.w	#$1F,d1
0001D684 4E93                       		jsr	(a3)
0001D686 5843                       		addq.w	#4,d3
0001D688 51CA FFDE                  		dbf	d2,loc_1C188
0001D68C 4E75                       		rts	
0001D68E                            ; ===========================================================================
0001D68E                            
0001D68E                            loc_1C1AE:
0001D68E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D692 6A00 0000                  		bpl.w	locret_1C1EA
0001D696 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D69C 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001D6A2 7000                       		moveq	#0,d0
0001D6A4 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001D6A8 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001D6AC 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001D6B2 C0FC 00C0                  		mulu.w	#$C0,d0
0001D6B6 D2C0                       		adda.w	d0,a1
0001D6B8 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001D6C2 323C 0005                  		move.w	#5,d1
0001D6C6 6000 0000                  		bra.w	LoadTiles
0001D6CA                            ; ===========================================================================
0001D6CA                            
0001D6CA                            locret_1C1EA:
0001D6CA 4E75                       		rts	
0001D6CC                            ; ===========================================================================
0001D6CC                            ; ---------------------------------------------------------------------------
0001D6CC                            ; Animated pattern routine - Scrap Brain
0001D6CC                            ; ---------------------------------------------------------------------------
0001D6CC                            
0001D6CC                            AniArt_SBZ:				; XREF: AniArt_Index
0001D6CC 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001D6D0 6700                       		beq.s	loc_1C1F8
0001D6D2 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001D6D6 6000                       		bra.s	loc_1C250
0001D6D8                            ; ===========================================================================
0001D6D8                            
0001D6D8                            loc_1C1F8:
0001D6D8 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001D6DC 6A00                       		bpl.s	loc_1C250
0001D6DE 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001D6E4 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001D6EA 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001D6F4 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D6F8 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001D6FC 0240 0007                  		andi.w	#7,d0
0001D700 6700                       		beq.s	loc_1C234
0001D702 5340                       		subq.w	#1,d0
0001D704 C0FC 0180                  		mulu.w	#$180,d0
0001D708 43F1 0000                  		lea	(a1,d0.w),a1
0001D70C 323C 000B                  		move.w	#$B,d1
0001D710 6000 0000                  		bra.w	LoadTiles
0001D714                            ; ===========================================================================
0001D714                            
0001D714                            loc_1C234:
0001D714 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001D71A                            
0001D71A                            loc_1C23A:
0001D71A 323C 0005                  		move.w	#5,d1
0001D71E 6100 0000                  		bsr.w	LoadTiles
0001D722 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001D728 323C 0005                  		move.w	#5,d1
0001D72C 6000 0000                  		bra.w	LoadTiles
0001D730                            ; ===========================================================================
0001D730                            
0001D730                            loc_1C250:
0001D730 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001D734 6700                       		beq.s	loc_1C25C
0001D736 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D73A 6000                       		bra.s	locret_1C2A0
0001D73C                            ; ===========================================================================
0001D73C                            
0001D73C                            loc_1C25C:
0001D73C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D740 6A00                       		bpl.s	locret_1C2A0
0001D742 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001D748 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001D74E 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001D758 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D75C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D760 0240 0007                  		andi.w	#7,d0
0001D764 6700                       		beq.s	loc_1C298
0001D766 5340                       		subq.w	#1,d0
0001D768 C0FC 0180                  		mulu.w	#$180,d0
0001D76C 43F1 0000                  		lea	(a1,d0.w),a1
0001D770 323C 000B                  		move.w	#$B,d1
0001D774 6000 0000                  		bra.w	LoadTiles
0001D778                            ; ===========================================================================
0001D778                            
0001D778                            loc_1C298:
0001D778 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001D77E 609A                       		bra.s	loc_1C23A
0001D780                            ; ===========================================================================
0001D780                            
0001D780                            locret_1C2A0:
0001D780 4E75                       		rts	
0001D782                            ; ===========================================================================
0001D782                            ; ---------------------------------------------------------------------------
0001D782                            ; Animated pattern routine - ending sequence
0001D782                            ; ---------------------------------------------------------------------------
0001D782                            
0001D782                            AniArt_Ending:				; XREF: AniArt_Index
0001D782 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D786 6A00                       		bpl.s	loc_1C2F4
0001D788 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001D78E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001D794 45F8 9400                  		lea	($FFFF9400).w,a2
0001D798 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D79C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D7A0 0240 0001                  		andi.w	#1,d0
0001D7A4 6700                       		beq.s	loc_1C2CE
0001D7A6 43E9 0200                  		lea	$200(a1),a1
0001D7AA 45EA 0200                  		lea	$200(a2),a2
0001D7AE                            
0001D7AE                            loc_1C2CE:
0001D7AE 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001D7B8 323C 000F                  		move.w	#$F,d1
0001D7BC 6100 0000                  		bsr.w	LoadTiles
0001D7C0 224A                       		movea.l	a2,a1
0001D7C2 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001D7CC 323C 000F                  		move.w	#$F,d1
0001D7D0 6000 0000                  		bra.w	LoadTiles
0001D7D4                            ; ===========================================================================
0001D7D4                            
0001D7D4                            loc_1C2F4:
0001D7D4 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D7D8 6A00                       		bpl.s	loc_1C33C
0001D7DA 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D7E0 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001D7E4 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001D7E8 0240 0007                  		andi.w	#7,d0
0001D7EC 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001D7F0 EF48                       		lsl.w	#7,d0
0001D7F2 3200                       		move.w	d0,d1
0001D7F4 D040                       		add.w	d0,d0
0001D7F6 D041                       		add.w	d1,d0
0001D7F8 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001D802 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001D808 43F1 0000                  		lea	(a1,d0.w),a1
0001D80C 323C 000B                  		move.w	#$B,d1
0001D810 6000 0000                  		bra.w	LoadTiles
0001D814                            ; ===========================================================================
0001D814 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001D81C                            ; ===========================================================================
0001D81C                            
0001D81C                            loc_1C33C:
0001D81C 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001D820 6A00                       		bpl.s	loc_1C37A
0001D822 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001D828 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001D82C 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001D830 0240 0003                  		andi.w	#3,d0
0001D834 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001D838 E148                       		lsl.w	#8,d0
0001D83A D040                       		add.w	d0,d0
0001D83C 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001D846 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001D84A 43F1 0000                  		lea	(a1,d0.w),a1
0001D84E 323C 000F                  		move.w	#$F,d1
0001D852 6000 0000                  		bra.w	LoadTiles
0001D856                            ; ===========================================================================
0001D856 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001D85A                            ; ===========================================================================
0001D85A                            
0001D85A                            loc_1C37A:
0001D85A 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001D85E 6A00                       		bpl.s	locret_1C3B4
0001D860 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001D866 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001D86A 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001D86E 0240 0003                  		andi.w	#3,d0
0001D872 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001D876 E148                       		lsl.w	#8,d0
0001D878 D040                       		add.w	d0,d0
0001D87A 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001D884 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001D888 43F1 0000                  		lea	(a1,d0.w),a1
0001D88C 323C 000F                  		move.w	#$F,d1
0001D890 6000 0000                  		bra.w	LoadTiles
0001D894                            ; ===========================================================================
0001D894                            
0001D894                            locret_1C3B4:
0001D894 4E75                       		rts	
0001D896                            ; ===========================================================================
0001D896                            
0001D896                            AniArt_none:				; XREF: AniArt_Index
0001D896 4E75                       		rts	
0001D898                            
0001D898                            ; ---------------------------------------------------------------------------
0001D898                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001D898                            ; ---------------------------------------------------------------------------
0001D898                            
0001D898                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D898                            
0001D898                            
0001D898                            LoadTiles:
0001D898 2C99                       		move.l	(a1)+,(a6)
0001D89A 2C99                       		move.l	(a1)+,(a6)
0001D89C 2C99                       		move.l	(a1)+,(a6)
0001D89E 2C99                       		move.l	(a1)+,(a6)
0001D8A0 2C99                       		move.l	(a1)+,(a6)
0001D8A2 2C99                       		move.l	(a1)+,(a6)
0001D8A4 2C99                       		move.l	(a1)+,(a6)
0001D8A6 2C99                       		move.l	(a1)+,(a6)
0001D8A8 51C9 FFEE                  		dbf	d1,LoadTiles
0001D8AC 4E75                       		rts	
0001D8AE                            ; End of function LoadTiles
0001D8AE                            
0001D8AE                            ; ===========================================================================
0001D8AE                            ; ---------------------------------------------------------------------------
0001D8AE                            ; Animated pattern routine - more Marble Zone
0001D8AE                            ; ---------------------------------------------------------------------------
0001D8AE 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001D8B2 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001D8B6 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001D8BA 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001D8BE 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001D8C2 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001D8C6 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001D8CA 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001D8CE                            ; ===========================================================================
0001D8CE                            
0001D8CE                            loc_1C3EE:				; XREF: AniArt_MZextra
0001D8CE 2C91                       		move.l	(a1),(a6)
0001D8D0 43E9 0010                  		lea	$10(a1),a1
0001D8D4 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001D8D8 4E75                       		rts	
0001D8DA                            ; ===========================================================================
0001D8DA                            
0001D8DA                            loc_1C3FA:				; XREF: AniArt_MZextra
0001D8DA 2029 0002                  		move.l	2(a1),d0
0001D8DE 1029 0001                  		move.b	1(a1),d0
0001D8E2 E098                       		ror.l	#8,d0
0001D8E4 2C80                       		move.l	d0,(a6)
0001D8E6 43E9 0010                  		lea	$10(a1),a1
0001D8EA 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001D8EE 4E75                       		rts	
0001D8F0                            ; ===========================================================================
0001D8F0                            
0001D8F0                            loc_1C410:				; XREF: AniArt_MZextra
0001D8F0 2CA9 0002                  		move.l	2(a1),(a6)
0001D8F4 43E9 0010                  		lea	$10(a1),a1
0001D8F8 51C9 FFF6                  		dbf	d1,loc_1C410
0001D8FC 4E75                       		rts	
0001D8FE                            ; ===========================================================================
0001D8FE                            
0001D8FE                            loc_1C41E:				; XREF: AniArt_MZextra
0001D8FE 2029 0004                  		move.l	4(a1),d0
0001D902 1029 0003                  		move.b	3(a1),d0
0001D906 E098                       		ror.l	#8,d0
0001D908 2C80                       		move.l	d0,(a6)
0001D90A 43E9 0010                  		lea	$10(a1),a1
0001D90E 51C9 FFEE                  		dbf	d1,loc_1C41E
0001D912 4E75                       		rts	
0001D914                            ; ===========================================================================
0001D914                            
0001D914                            loc_1C434:				; XREF: AniArt_MZextra
0001D914 2CA9 0004                  		move.l	4(a1),(a6)
0001D918 43E9 0010                  		lea	$10(a1),a1
0001D91C 51C9 FFF6                  		dbf	d1,loc_1C434
0001D920 4E75                       		rts	
0001D922                            ; ===========================================================================
0001D922                            
0001D922                            loc_1C442:				; XREF: AniArt_MZextra
0001D922 2029 0006                  		move.l	6(a1),d0
0001D926 1029 0005                  		move.b	5(a1),d0
0001D92A E098                       		ror.l	#8,d0
0001D92C 2C80                       		move.l	d0,(a6)
0001D92E 43E9 0010                  		lea	$10(a1),a1
0001D932 51C9 FFEE                  		dbf	d1,loc_1C442
0001D936 4E75                       		rts	
0001D938                            ; ===========================================================================
0001D938                            
0001D938                            loc_1C458:				; XREF: AniArt_MZextra
0001D938 2CA9 0006                  		move.l	6(a1),(a6)
0001D93C 43E9 0010                  		lea	$10(a1),a1
0001D940 51C9 FFF6                  		dbf	d1,loc_1C458
0001D944 4E75                       		rts	
0001D946                            ; ===========================================================================
0001D946                            
0001D946                            loc_1C466:				; XREF: AniArt_MZextra
0001D946 2029 0008                  		move.l	8(a1),d0
0001D94A 1029 0007                  		move.b	7(a1),d0
0001D94E E098                       		ror.l	#8,d0
0001D950 2C80                       		move.l	d0,(a6)
0001D952 43E9 0010                  		lea	$10(a1),a1
0001D956 51C9 FFEE                  		dbf	d1,loc_1C466
0001D95A 4E75                       		rts	
0001D95C                            ; ===========================================================================
0001D95C                            
0001D95C                            loc_1C47C:				; XREF: AniArt_MZextra
0001D95C 2CA9 0008                  		move.l	8(a1),(a6)
0001D960 43E9 0010                  		lea	$10(a1),a1
0001D964 51C9 FFF6                  		dbf	d1,loc_1C47C
0001D968 4E75                       		rts	
0001D96A                            ; ===========================================================================
0001D96A                            
0001D96A                            loc_1C48A:				; XREF: AniArt_MZextra
0001D96A 2029 000A                  		move.l	$A(a1),d0
0001D96E 1029 0009                  		move.b	9(a1),d0
0001D972 E098                       		ror.l	#8,d0
0001D974 2C80                       		move.l	d0,(a6)
0001D976 43E9 0010                  		lea	$10(a1),a1
0001D97A 51C9 FFEE                  		dbf	d1,loc_1C48A
0001D97E 4E75                       		rts	
0001D980                            ; ===========================================================================
0001D980                            
0001D980                            loc_1C4A0:				; XREF: AniArt_MZextra
0001D980 2CA9 000A                  		move.l	$A(a1),(a6)
0001D984 43E9 0010                  		lea	$10(a1),a1
0001D988 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001D98C 4E75                       		rts	
0001D98E                            ; ===========================================================================
0001D98E                            
0001D98E                            loc_1C4AE:				; XREF: AniArt_MZextra
0001D98E 2029 000C                  		move.l	$C(a1),d0
0001D992 1029 000B                  		move.b	$B(a1),d0
0001D996 E098                       		ror.l	#8,d0
0001D998 2C80                       		move.l	d0,(a6)
0001D99A 43E9 0010                  		lea	$10(a1),a1
0001D99E 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001D9A2 4E75                       		rts	
0001D9A4                            ; ===========================================================================
0001D9A4                            
0001D9A4                            loc_1C4C4:				; XREF: AniArt_MZextra
0001D9A4 2CA9 000C                  		move.l	$C(a1),(a6)
0001D9A8 43E9 0010                  		lea	$10(a1),a1
0001D9AC 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001D9B0 4E75                       		rts	
0001D9B2                            ; ===========================================================================
0001D9B2                            
0001D9B2                            loc_1C4D2:				; XREF: AniArt_MZextra
0001D9B2 2029 000C                  		move.l	$C(a1),d0
0001D9B6 E198                       		rol.l	#8,d0
0001D9B8 1011                       		move.b	0(a1),d0
0001D9BA 2C80                       		move.l	d0,(a6)
0001D9BC 43E9 0010                  		lea	$10(a1),a1
0001D9C0 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001D9C4 4E75                       		rts	
0001D9C6                            ; ===========================================================================
0001D9C6                            
0001D9C6                            loc_1C4E8:				; XREF: AniArt_MZextra
0001D9C6 3CA9 000E                  		move.w	$E(a1),(a6)
0001D9CA 3C91                       		move.w	0(a1),(a6)
0001D9CC 43E9 0010                  		lea	$10(a1),a1
0001D9D0 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001D9D4 4E75                       		rts	
0001D9D6                            ; ===========================================================================
0001D9D6                            
0001D9D6                            loc_1C4FA:				; XREF: AniArt_MZextra
0001D9D6 2011                       		move.l	0(a1),d0
0001D9D8 1029 000F                  		move.b	$F(a1),d0
0001D9DC E098                       		ror.l	#8,d0
0001D9DE 2C80                       		move.l	d0,(a6)
0001D9E0 43E9 0010                  		lea	$10(a1),a1
0001D9E4 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001D9E8 4E75                       		rts	
0001D9EA                            
0001D9EA                            ; ---------------------------------------------------------------------------
0001D9EA                            ; Animated pattern routine - giant ring
0001D9EA                            ; ---------------------------------------------------------------------------
0001D9EA                            
0001D9EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D9EA                            
0001D9EA                            
0001D9EA                            AniArt_GiantRing:			; XREF: AniArt_Load
0001D9EA 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001D9EE 6600                       		bne.s	loc_1C518
0001D9F0 4E75                       		rts	
0001D9F2                            ; ===========================================================================
0001D9F2                            
0001D9F2                            loc_1C518:
0001D9F2 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001D9F8 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001D9FE 7000                       		moveq	#0,d0
0001DA00 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001DA04 43F1 0000                  		lea	(a1,d0.w),a1
0001DA08 0640 8000                  		addi.w	#$8000,d0
0001DA0C E588                       		lsl.l	#2,d0
0001DA0E E448                       		lsr.w	#2,d0
0001DA10 0040 4000                  		ori.w	#$4000,d0
0001DA14 4840                       		swap	d0
0001DA16 2D40 0004                  		move.l	d0,4(a6)
0001DA1A 323C 000D                  		move.w	#$D,d1
0001DA1E 6000 FE78                  		bra.w	LoadTiles
0001DA22                            ; End of function AniArt_GiantRing
0001DA22                            
0001DA22                            ; ===========================================================================
0001DA22                            ; ---------------------------------------------------------------------------
0001DA22                            ; Object 21 - SCORE, TIME, RINGS
0001DA22                            ; ---------------------------------------------------------------------------
0001DA22                            
0001DA22                            Obj21:					; XREF: Obj_Index
0001DA22 7000                       		moveq	#0,d0
0001DA24 1028 0024                  		move.b	$24(a0),d0
0001DA28 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001DA2C 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001DA30                            ; ===========================================================================
0001DA30 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001DA32 0000                       		dc.w Obj21_Flash-Obj21_Index
0001DA34                            ; ===========================================================================
0001DA34                            
0001DA34                            Obj21_Main:				; XREF: Obj21_Main
0001DA34 5428 0024                  		addq.b	#2,$24(a0)
0001DA38 317C 0090 0008             		move.w	#$90,8(a0)
0001DA3E 317C 0108 000A             		move.w	#$108,$A(a0)
0001DA44 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001DA4C 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001DA52 117C 0000 0001             		move.b	#0,1(a0)
0001DA58 117C 0000 0018             		move.b	#0,$18(a0)
0001DA5E                            
0001DA5E                            Obj21_Flash:				; XREF: Obj21_Main
0001DA5E 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001DA62 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001DA64 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001DA68 4EF9 0000 E750             		jmp	DisplaySprite
0001DA6E                            ; ===========================================================================
0001DA6E                            
0001DA6E                            Obj21_Flash2:
0001DA6E 7000                       		moveq	#0,d0
0001DA70 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001DA76 6600                       		bne.s	Obj21_Display
0001DA78 5240                       		addq.w	#1,d0		; make ring counter flash red
0001DA7A 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001DA80 6600                       		bne.s	Obj21_Display	; if not, branch
0001DA82 5440                       		addq.w	#2,d0		; make time counter flash red
0001DA84                            
0001DA84                            Obj21_Display:
0001DA84 1140 001A                  		move.b	d0,$1A(a0)
0001DA88 4EF9 0000 E750             		jmp	DisplaySprite
0001DA8E                            ; ===========================================================================
0001DA8E                            ; ---------------------------------------------------------------------------
0001DA8E                            ; Sprite mappings - SCORE, TIME, RINGS
0001DA8E                            ; ---------------------------------------------------------------------------
0001DA8E                            Map_obj21:
0001DA8E                            	include "_maps\obj21.asm"
0001DA8E                            Map_549d:
0001DA8E 0000                       Map_549d_0: 	dc.w Map_549d_8-Map_549d
0001DA90 0000                       Map_549d_2: 	dc.w Map_549d_36-Map_549d
0001DA92 0000                       Map_549d_4: 	dc.w Map_549d_64-Map_549d
0001DA94 0000                       Map_549d_6: 	dc.w Map_549d_92-Map_549d
0001DA96 09                         Map_549d_8: 	dc.b $9
0001DA97 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001DA9C 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001DAA1 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001DAA6 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001DAAB A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001DAB0 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001DAB5 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001DABA 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001DABF 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001DAC4 09                         Map_549d_36: 	dc.b $9
0001DAC5 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001DACA 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001DACF 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001DAD4 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001DAD9 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001DADE A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001DAE3 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001DAE8 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001DAED 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001DAF2 09                         Map_549d_64: 	dc.b $9
0001DAF3 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001DAF8 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001DAFD 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001DB02 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001DB07 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001DB0C A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001DB11 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001DB16 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001DB1B 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001DB20 09                         Map_549d_92: 	dc.b $9
0001DB21 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001DB26 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001DB2B 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001DB30 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001DB35 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001DB3A A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001DB3F 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001DB44 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001DB49 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001DB4E                            	even
0001DB4E                            	even
0001DB4E                            
0001DB4E                            ; ---------------------------------------------------------------------------
0001DB4E                            ; Add points subroutine
0001DB4E                            ; ---------------------------------------------------------------------------
0001DB4E                            
0001DB4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB4E                            
0001DB4E                            
0001DB4E                            AddPoints:
0001DB4E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001DB54 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001DB58 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001DB5C D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001DB5E 223C 000F 423F             		move.l	#999999,d1
0001DB64 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001DB66 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001DB6A 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001DB6C 2481                       		move.l	d1,(a2)
0001DB6E                            
0001DB6E                            loc_1C6AC:
0001DB6E 2013                       		move.l	(a3),d0
0001DB70 B092                       		cmp.l	(a2),d0
0001DB72 6500 0000                  		bcs.w	locret_1C6B6
0001DB76 2480                       		move.l	d0,(a2)
0001DB78                            
0001DB78                            locret_1C6B6:
0001DB78 4E75                       		rts	
0001DB7A                            ; End of function AddPoints
0001DB7A                            
0001DB7A                            ; ---------------------------------------------------------------------------
0001DB7A                            ; Subroutine to	update the HUD
0001DB7A                            ; ---------------------------------------------------------------------------
0001DB7A                            
0001DB7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB7A                            
0001DB7A                            
0001DB7A                            HudUpdate:
0001DB7A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001DB7E 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001DB82 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001DB86 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001DB88 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001DB8C 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001DB92 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001DB96 6100 0000                  		bsr.w	Hud_Score
0001DB9A                            
0001DB9A                            Hud_ChkRings:
0001DB9A 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001DB9E 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001DBA0 6A00                       		bpl.s	loc_1C6E4
0001DBA2 6100 0000                  		bsr.w	Hud_LoadZero
0001DBA6                            
0001DBA6                            loc_1C6E4:
0001DBA6 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001DBAA 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001DBB0 7200                       		moveq	#0,d1
0001DBB2 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001DBB6 6100 0000                  		bsr.w	Hud_Rings
0001DBBA                            
0001DBBA                            Hud_ChkTime:
0001DBBA 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001DBBE 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001DBC0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001DBC4 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001DBC6 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001DBCA 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001DBD0 6700                       		beq.s	TimeOver	; if yes, branch
0001DBD2 5221                       		addq.b	#1,-(a1)
0001DBD4 0C11 003C                  		cmpi.b	#60,(a1)
0001DBD8 6500                       		bcs.s	Hud_ChkLives
0001DBDA 12BC 0000                  		move.b	#0,(a1)
0001DBDE 5221                       		addq.b	#1,-(a1)
0001DBE0 0C11 003C                  		cmpi.b	#60,(a1)
0001DBE4 6500                       		bcs.s	loc_1C734
0001DBE6 12BC 0000                  		move.b	#0,(a1)
0001DBEA 5221                       		addq.b	#1,-(a1)
0001DBEC 0C11 0009                  		cmpi.b	#9,(a1)
0001DBF0 6500                       		bcs.s	loc_1C734
0001DBF2 12BC 0009                  		move.b	#9,(a1)
0001DBF6                            
0001DBF6                            loc_1C734:
0001DBF6 203C 5E40 0003             		move.l	#$5E400003,d0
0001DBFC 7200                       		moveq	#0,d1
0001DBFE 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001DC02 6100 0000                  		bsr.w	Hud_Mins
0001DC06 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001DC0C 7200                       		moveq	#0,d1
0001DC0E 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001DC12 6100 0000                  		bsr.w	Hud_Secs
0001DC16                            
0001DC16                            Hud_ChkLives:
0001DC16 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001DC1A 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001DC1C 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001DC20 6100 0000                  		bsr.w	Hud_Lives
0001DC24                            
0001DC24                            Hud_ChkBonus:
0001DC24 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001DC28 6700                       		beq.s	Hud_End		; if not, branch
0001DC2A 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001DC2E 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001DC38 7200                       		moveq	#0,d1
0001DC3A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001DC3E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001DC42 7200                       		moveq	#0,d1
0001DC44 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001DC48 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001DC4C                            
0001DC4C                            Hud_End:
0001DC4C 4E75                       		rts	
0001DC4E                            ; ===========================================================================
0001DC4E                            
0001DC4E                            TimeOver:				; XREF: Hud_ChkTime
0001DC4E 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001DC52 41F8 D000                  		lea	($FFFFD000).w,a0
0001DC56 2448                       		movea.l	a0,a2
0001DC58 6100 E960                  		bsr.w	KillSonic
0001DC5C 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001DC62 4E75                       		rts	
0001DC64                            ; ===========================================================================
0001DC64                            
0001DC64                            HudDebug:				; XREF: HudUpdate
0001DC64 6100 0000                  		bsr.w	HudDb_XY
0001DC68 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001DC6C 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001DC6E 6A00                       		bpl.s	HudDb_Rings
0001DC70 6100 0000                  		bsr.w	Hud_LoadZero
0001DC74                            
0001DC74                            HudDb_Rings:
0001DC74 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001DC78 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001DC7E 7200                       		moveq	#0,d1
0001DC80 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001DC84 6100 0000                  		bsr.w	Hud_Rings
0001DC88                            
0001DC88                            HudDb_ObjCount:
0001DC88 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001DC8E 7200                       		moveq	#0,d1
0001DC90 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001DC94 6100 0000                  		bsr.w	Hud_Secs
0001DC98 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001DC9C 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001DC9E 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001DCA2 6100 0000                  		bsr.w	Hud_Lives
0001DCA6                            
0001DCA6                            HudDb_ChkBonus:
0001DCA6 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001DCAA 6700                       		beq.s	HudDb_End	; if not, branch
0001DCAC 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001DCB0 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001DCBA 7200                       		moveq	#0,d1
0001DCBC 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001DCC0 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001DCC4 7200                       		moveq	#0,d1
0001DCC6 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001DCCA 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001DCCE                            
0001DCCE                            HudDb_End:
0001DCCE 4E75                       		rts	
0001DCD0                            ; End of function HudUpdate
0001DCD0                            
0001DCD0                            ; ---------------------------------------------------------------------------
0001DCD0                            ; Subroutine to	load "0" on the	HUD
0001DCD0                            ; ---------------------------------------------------------------------------
0001DCD0                            
0001DCD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DCD0                            
0001DCD0                            
0001DCD0                            Hud_LoadZero:				; XREF: HudUpdate
0001DCD0 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001DCDA 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001DCDE 343C 0002                  		move.w	#2,d2
0001DCE2 6000                       		bra.s	loc_1C83E
0001DCE4                            ; End of function Hud_LoadZero
0001DCE4                            
0001DCE4                            ; ---------------------------------------------------------------------------
0001DCE4                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001DCE4                            ; ---------------------------------------------------------------------------
0001DCE4                            
0001DCE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DCE4                            
0001DCE4                            
0001DCE4                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001DCE4 4DF9 00C0 0000             		lea	($C00000).l,a6
0001DCEA 6100 0000                  		bsr.w	Hud_Lives
0001DCEE 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001DCF8 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001DCFC 343C 000E                  		move.w	#$E,d2
0001DD00                            
0001DD00                            loc_1C83E:				; XREF: Hud_LoadZero
0001DD00 43FA 0000                  		lea	Art_Hud(pc),a1
0001DD04                            
0001DD04                            loc_1C842:
0001DD04 323C 000F                  		move.w	#$F,d1
0001DD08 101A                       		move.b	(a2)+,d0
0001DD0A 6B00                       		bmi.s	loc_1C85E
0001DD0C 4880                       		ext.w	d0
0001DD0E EB48                       		lsl.w	#5,d0
0001DD10 47F1 0000                  		lea	(a1,d0.w),a3
0001DD14                            
0001DD14                            loc_1C852:
0001DD14 2C9B                       		move.l	(a3)+,(a6)
0001DD16 51C9 FFFC                  		dbf	d1,loc_1C852
0001DD1A                            
0001DD1A                            loc_1C858:
0001DD1A 51CA FFE8                  		dbf	d2,loc_1C842
0001DD1E                            
0001DD1E 4E75                       		rts	
0001DD20                            ; ===========================================================================
0001DD20                            
0001DD20                            loc_1C85E:
0001DD20 2CBC 0000 0000             		move.l	#0,(a6)
0001DD26 51C9 FFF8                  		dbf	d1,loc_1C85E
0001DD2A                            
0001DD2A 60EE                       		bra.s	loc_1C858
0001DD2C                            ; End of function Hud_Base
0001DD2C                            
0001DD2C                            ; ===========================================================================
0001DD2C 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001DD38 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001DD3C                            ; ---------------------------------------------------------------------------
0001DD3C                            ; Subroutine to	load debug mode	numbers	patterns
0001DD3C                            ; ---------------------------------------------------------------------------
0001DD3C                            
0001DD3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD3C                            
0001DD3C                            
0001DD3C                            HudDb_XY:				; XREF: HudDebug
0001DD3C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001DD46 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001DD4A 4841                       		swap	d1
0001DD4C 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001DD50 6100                       		bsr.s	HudDb_XY2
0001DD52 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001DD56 4841                       		swap	d1
0001DD58 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001DD5C                            ; End of function HudDb_XY
0001DD5C                            
0001DD5C                            
0001DD5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD5C                            
0001DD5C                            
0001DD5C                            HudDb_XY2:
0001DD5C 7C07                       		moveq	#7,d6
0001DD5E 43F9 0000 0D6E             		lea	(Art_Text).l,a1
0001DD64                            
0001DD64                            HudDb_XYLoop:
0001DD64 E959                       		rol.w	#4,d1
0001DD66 3401                       		move.w	d1,d2
0001DD68 0242 000F                  		andi.w	#$F,d2
0001DD6C 0C42 000A                  		cmpi.w	#$A,d2
0001DD70 6500                       		bcs.s	loc_1C8B2
0001DD72 5E42                       		addq.w	#7,d2
0001DD74                            
0001DD74                            loc_1C8B2:
0001DD74 EB4A                       		lsl.w	#5,d2
0001DD76 47F1 2000                  		lea	(a1,d2.w),a3
0001DD7A 2C9B                       		move.l	(a3)+,(a6)
0001DD7C 2C9B                       		move.l	(a3)+,(a6)
0001DD7E 2C9B                       		move.l	(a3)+,(a6)
0001DD80 2C9B                       		move.l	(a3)+,(a6)
0001DD82 2C9B                       		move.l	(a3)+,(a6)
0001DD84 2C9B                       		move.l	(a3)+,(a6)
0001DD86 2C9B                       		move.l	(a3)+,(a6)
0001DD88 2C9B                       		move.l	(a3)+,(a6)
0001DD8A 4841                       		swap	d1
0001DD8C 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001DD90                            
0001DD90 4E75                       		rts	
0001DD92                            ; End of function HudDb_XY2
0001DD92                            
0001DD92                            ; ---------------------------------------------------------------------------
0001DD92                            ; Subroutine to	load rings numbers patterns
0001DD92                            ; ---------------------------------------------------------------------------
0001DD92                            
0001DD92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD92                            
0001DD92                            
0001DD92                            Hud_Rings:				; XREF: HudUpdate
0001DD92 45F9 0000 0000             		lea	(Hud_100).l,a2
0001DD98 7C02                       		moveq	#2,d6
0001DD9A 6000                       		bra.s	Hud_LoadArt
0001DD9C                            ; End of function Hud_Rings
0001DD9C                            
0001DD9C                            ; ---------------------------------------------------------------------------
0001DD9C                            ; Subroutine to	load score numbers patterns
0001DD9C                            ; ---------------------------------------------------------------------------
0001DD9C                            
0001DD9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD9C                            
0001DD9C                            
0001DD9C                            Hud_Score:				; XREF: HudUpdate
0001DD9C 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001DDA2 7C05                       		moveq	#5,d6
0001DDA4                            
0001DDA4                            Hud_LoadArt:
0001DDA4 7800                       		moveq	#0,d4
0001DDA6 43FA 0000                  		lea	Art_Hud(pc),a1
0001DDAA                            
0001DDAA                            Hud_ScoreLoop:
0001DDAA 7400                       		moveq	#0,d2
0001DDAC 261A                       		move.l	(a2)+,d3
0001DDAE                            
0001DDAE                            loc_1C8EC:
0001DDAE 9283                       		sub.l	d3,d1
0001DDB0 6500                       		bcs.s	loc_1C8F4
0001DDB2 5242                       		addq.w	#1,d2
0001DDB4 60F8                       		bra.s	loc_1C8EC
0001DDB6                            ; ===========================================================================
0001DDB6                            
0001DDB6                            loc_1C8F4:
0001DDB6 D283                       		add.l	d3,d1
0001DDB8 4A42                       		tst.w	d2
0001DDBA 6700                       		beq.s	loc_1C8FE
0001DDBC 383C 0001                  		move.w	#1,d4
0001DDC0                            
0001DDC0                            loc_1C8FE:
0001DDC0 4A44                       		tst.w	d4
0001DDC2 6700                       		beq.s	loc_1C92C
0001DDC4 ED4A                       		lsl.w	#6,d2
0001DDC6 2D40 0004                  		move.l	d0,4(a6)
0001DDCA 47F1 2000                  		lea	(a1,d2.w),a3
0001DDCE 2C9B                       		move.l	(a3)+,(a6)
0001DDD0 2C9B                       		move.l	(a3)+,(a6)
0001DDD2 2C9B                       		move.l	(a3)+,(a6)
0001DDD4 2C9B                       		move.l	(a3)+,(a6)
0001DDD6 2C9B                       		move.l	(a3)+,(a6)
0001DDD8 2C9B                       		move.l	(a3)+,(a6)
0001DDDA 2C9B                       		move.l	(a3)+,(a6)
0001DDDC 2C9B                       		move.l	(a3)+,(a6)
0001DDDE 2C9B                       		move.l	(a3)+,(a6)
0001DDE0 2C9B                       		move.l	(a3)+,(a6)
0001DDE2 2C9B                       		move.l	(a3)+,(a6)
0001DDE4 2C9B                       		move.l	(a3)+,(a6)
0001DDE6 2C9B                       		move.l	(a3)+,(a6)
0001DDE8 2C9B                       		move.l	(a3)+,(a6)
0001DDEA 2C9B                       		move.l	(a3)+,(a6)
0001DDEC 2C9B                       		move.l	(a3)+,(a6)
0001DDEE                            
0001DDEE                            loc_1C92C:
0001DDEE 0680 0040 0000             		addi.l	#$400000,d0
0001DDF4 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001DDF8                            
0001DDF8 4E75                       		rts	
0001DDFA                            ; End of function Hud_Score
0001DDFA                            
0001DDFA                            ; ---------------------------------------------------------------------------
0001DDFA                            ; Subroutine to	load countdown numbers on the continue screen
0001DDFA                            ; ---------------------------------------------------------------------------
0001DDFA                            
0001DDFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDFA                            
0001DDFA                            
0001DDFA                            ContScrCounter:				; XREF: ContinueScreen
0001DDFA 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001DE04 4DF9 00C0 0000             		lea	($C00000).l,a6
0001DE0A 45F9 0000 0000             		lea	(Hud_10).l,a2
0001DE10 7C01                       		moveq	#1,d6
0001DE12 7800                       		moveq	#0,d4
0001DE14 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001DE18                            
0001DE18                            ContScr_Loop:
0001DE18 7400                       		moveq	#0,d2
0001DE1A 261A                       		move.l	(a2)+,d3
0001DE1C                            
0001DE1C                            loc_1C95A:
0001DE1C 9283                       		sub.l	d3,d1
0001DE1E 6500                       		bcs.s	loc_1C962
0001DE20 5242                       		addq.w	#1,d2
0001DE22 60F8                       		bra.s	loc_1C95A
0001DE24                            ; ===========================================================================
0001DE24                            
0001DE24                            loc_1C962:
0001DE24 D283                       		add.l	d3,d1
0001DE26 ED4A                       		lsl.w	#6,d2
0001DE28 47F1 2000                  		lea	(a1,d2.w),a3
0001DE2C 2C9B                       		move.l	(a3)+,(a6)
0001DE2E 2C9B                       		move.l	(a3)+,(a6)
0001DE30 2C9B                       		move.l	(a3)+,(a6)
0001DE32 2C9B                       		move.l	(a3)+,(a6)
0001DE34 2C9B                       		move.l	(a3)+,(a6)
0001DE36 2C9B                       		move.l	(a3)+,(a6)
0001DE38 2C9B                       		move.l	(a3)+,(a6)
0001DE3A 2C9B                       		move.l	(a3)+,(a6)
0001DE3C 2C9B                       		move.l	(a3)+,(a6)
0001DE3E 2C9B                       		move.l	(a3)+,(a6)
0001DE40 2C9B                       		move.l	(a3)+,(a6)
0001DE42 2C9B                       		move.l	(a3)+,(a6)
0001DE44 2C9B                       		move.l	(a3)+,(a6)
0001DE46 2C9B                       		move.l	(a3)+,(a6)
0001DE48 2C9B                       		move.l	(a3)+,(a6)
0001DE4A 2C9B                       		move.l	(a3)+,(a6)
0001DE4C 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001DE50                            
0001DE50 4E75                       		rts	
0001DE52                            ; End of function ContScrCounter
0001DE52                            
0001DE52                            ; ===========================================================================
0001DE52                            ; ---------------------------------------------------------------------------
0001DE52                            ; HUD counter sizes
0001DE52                            ; ---------------------------------------------------------------------------
0001DE52 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001DE56 0000 2710                  Hud_10000:	dc.l 10000
0001DE5A 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001DE5E 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001DE62 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001DE66 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001DE6A                            
0001DE6A                            ; ---------------------------------------------------------------------------
0001DE6A                            ; Subroutine to	load time numbers patterns
0001DE6A                            ; ---------------------------------------------------------------------------
0001DE6A                            
0001DE6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE6A                            
0001DE6A                            
0001DE6A                            Hud_Mins:				; XREF: Hud_ChkTime
0001DE6A 45F9 0001 DE66             		lea	(Hud_1).l,a2
0001DE70 7C00                       		moveq	#0,d6
0001DE72 6000                       		bra.s	loc_1C9BA
0001DE74                            ; End of function Hud_Mins
0001DE74                            
0001DE74                            
0001DE74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE74                            
0001DE74                            
0001DE74                            Hud_Secs:				; XREF: Hud_ChkTime
0001DE74 45F9 0001 DE62             		lea	(Hud_10).l,a2
0001DE7A 7C01                       		moveq	#1,d6
0001DE7C                            
0001DE7C                            loc_1C9BA:
0001DE7C 7800                       		moveq	#0,d4
0001DE7E 43FA 0000                  		lea	Art_Hud(pc),a1
0001DE82                            
0001DE82                            Hud_TimeLoop:
0001DE82 7400                       		moveq	#0,d2
0001DE84 261A                       		move.l	(a2)+,d3
0001DE86                            
0001DE86                            loc_1C9C4:
0001DE86 9283                       		sub.l	d3,d1
0001DE88 6500                       		bcs.s	loc_1C9CC
0001DE8A 5242                       		addq.w	#1,d2
0001DE8C 60F8                       		bra.s	loc_1C9C4
0001DE8E                            ; ===========================================================================
0001DE8E                            
0001DE8E                            loc_1C9CC:
0001DE8E D283                       		add.l	d3,d1
0001DE90 4A42                       		tst.w	d2
0001DE92 6700                       		beq.s	loc_1C9D6
0001DE94 383C 0001                  		move.w	#1,d4
0001DE98                            
0001DE98                            loc_1C9D6:
0001DE98 ED4A                       		lsl.w	#6,d2
0001DE9A 2D40 0004                  		move.l	d0,4(a6)
0001DE9E 47F1 2000                  		lea	(a1,d2.w),a3
0001DEA2 2C9B                       		move.l	(a3)+,(a6)
0001DEA4 2C9B                       		move.l	(a3)+,(a6)
0001DEA6 2C9B                       		move.l	(a3)+,(a6)
0001DEA8 2C9B                       		move.l	(a3)+,(a6)
0001DEAA 2C9B                       		move.l	(a3)+,(a6)
0001DEAC 2C9B                       		move.l	(a3)+,(a6)
0001DEAE 2C9B                       		move.l	(a3)+,(a6)
0001DEB0 2C9B                       		move.l	(a3)+,(a6)
0001DEB2 2C9B                       		move.l	(a3)+,(a6)
0001DEB4 2C9B                       		move.l	(a3)+,(a6)
0001DEB6 2C9B                       		move.l	(a3)+,(a6)
0001DEB8 2C9B                       		move.l	(a3)+,(a6)
0001DEBA 2C9B                       		move.l	(a3)+,(a6)
0001DEBC 2C9B                       		move.l	(a3)+,(a6)
0001DEBE 2C9B                       		move.l	(a3)+,(a6)
0001DEC0 2C9B                       		move.l	(a3)+,(a6)
0001DEC2 0680 0040 0000             		addi.l	#$400000,d0
0001DEC8 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001DECC                            
0001DECC 4E75                       		rts	
0001DECE                            ; End of function Hud_Secs
0001DECE                            
0001DECE                            ; ---------------------------------------------------------------------------
0001DECE                            ; Subroutine to	load time/ring bonus numbers patterns
0001DECE                            ; ---------------------------------------------------------------------------
0001DECE                            
0001DECE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DECE                            
0001DECE                            
0001DECE                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001DECE 45F9 0001 DE5A             		lea	(Hud_1000).l,a2
0001DED4 7C03                       		moveq	#3,d6
0001DED6 7800                       		moveq	#0,d4
0001DED8 43FA 0000                  		lea	Art_Hud(pc),a1
0001DEDC                            
0001DEDC                            Hud_BonusLoop:
0001DEDC 7400                       		moveq	#0,d2
0001DEDE 261A                       		move.l	(a2)+,d3
0001DEE0                            
0001DEE0                            loc_1CA1E:
0001DEE0 9283                       		sub.l	d3,d1
0001DEE2 6500                       		bcs.s	loc_1CA26
0001DEE4 5242                       		addq.w	#1,d2
0001DEE6 60F8                       		bra.s	loc_1CA1E
0001DEE8                            ; ===========================================================================
0001DEE8                            
0001DEE8                            loc_1CA26:
0001DEE8 D283                       		add.l	d3,d1
0001DEEA 4A42                       		tst.w	d2
0001DEEC 6700                       		beq.s	loc_1CA30
0001DEEE 383C 0001                  		move.w	#1,d4
0001DEF2                            
0001DEF2                            loc_1CA30:
0001DEF2 4A44                       		tst.w	d4
0001DEF4 6700                       		beq.s	Hud_ClrBonus
0001DEF6 ED4A                       		lsl.w	#6,d2
0001DEF8 47F1 2000                  		lea	(a1,d2.w),a3
0001DEFC 2C9B                       		move.l	(a3)+,(a6)
0001DEFE 2C9B                       		move.l	(a3)+,(a6)
0001DF00 2C9B                       		move.l	(a3)+,(a6)
0001DF02 2C9B                       		move.l	(a3)+,(a6)
0001DF04 2C9B                       		move.l	(a3)+,(a6)
0001DF06 2C9B                       		move.l	(a3)+,(a6)
0001DF08 2C9B                       		move.l	(a3)+,(a6)
0001DF0A 2C9B                       		move.l	(a3)+,(a6)
0001DF0C 2C9B                       		move.l	(a3)+,(a6)
0001DF0E 2C9B                       		move.l	(a3)+,(a6)
0001DF10 2C9B                       		move.l	(a3)+,(a6)
0001DF12 2C9B                       		move.l	(a3)+,(a6)
0001DF14 2C9B                       		move.l	(a3)+,(a6)
0001DF16 2C9B                       		move.l	(a3)+,(a6)
0001DF18 2C9B                       		move.l	(a3)+,(a6)
0001DF1A 2C9B                       		move.l	(a3)+,(a6)
0001DF1C                            
0001DF1C                            loc_1CA5A:
0001DF1C 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001DF20                            
0001DF20 4E75                       		rts	
0001DF22                            ; ===========================================================================
0001DF22                            
0001DF22                            Hud_ClrBonus:
0001DF22 7A0F                       		moveq	#$F,d5
0001DF24                            
0001DF24                            Hud_ClrBonusLoop:
0001DF24 2CBC 0000 0000             		move.l	#0,(a6)
0001DF2A 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001DF2E                            
0001DF2E 60EC                       		bra.s	loc_1CA5A
0001DF30                            ; End of function Hud_TimeRingBonus
0001DF30                            
0001DF30                            ; ---------------------------------------------------------------------------
0001DF30                            ; Subroutine to	load uncompressed lives	counter	patterns
0001DF30                            ; ---------------------------------------------------------------------------
0001DF30                            
0001DF30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF30                            
0001DF30                            
0001DF30                            Hud_Lives:				; XREF: Hud_ChkLives
0001DF30 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001DF36 7200                       		moveq	#0,d1
0001DF38 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001DF3C 45F9 0001 DE62             		lea	(Hud_10).l,a2
0001DF42 7C01                       		moveq	#1,d6
0001DF44 7800                       		moveq	#0,d4
0001DF46 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001DF4A                            
0001DF4A                            Hud_LivesLoop:
0001DF4A 2D40 0004                  		move.l	d0,4(a6)
0001DF4E 7400                       		moveq	#0,d2
0001DF50 261A                       		move.l	(a2)+,d3
0001DF52                            
0001DF52                            loc_1CA90:
0001DF52 9283                       		sub.l	d3,d1
0001DF54 6500                       		bcs.s	loc_1CA98
0001DF56 5242                       		addq.w	#1,d2
0001DF58 60F8                       		bra.s	loc_1CA90
0001DF5A                            ; ===========================================================================
0001DF5A                            
0001DF5A                            loc_1CA98:
0001DF5A D283                       		add.l	d3,d1
0001DF5C 4A42                       		tst.w	d2
0001DF5E 6700                       		beq.s	loc_1CAA2
0001DF60 383C 0001                  		move.w	#1,d4
0001DF64                            
0001DF64                            loc_1CAA2:
0001DF64 4A44                       		tst.w	d4
0001DF66 6700                       		beq.s	Hud_ClrLives
0001DF68                            
0001DF68                            loc_1CAA6:
0001DF68 EB4A                       		lsl.w	#5,d2
0001DF6A 47F1 2000                  		lea	(a1,d2.w),a3
0001DF6E 2C9B                       		move.l	(a3)+,(a6)
0001DF70 2C9B                       		move.l	(a3)+,(a6)
0001DF72 2C9B                       		move.l	(a3)+,(a6)
0001DF74 2C9B                       		move.l	(a3)+,(a6)
0001DF76 2C9B                       		move.l	(a3)+,(a6)
0001DF78 2C9B                       		move.l	(a3)+,(a6)
0001DF7A 2C9B                       		move.l	(a3)+,(a6)
0001DF7C 2C9B                       		move.l	(a3)+,(a6)
0001DF7E                            
0001DF7E                            loc_1CABC:
0001DF7E 0680 0040 0000             		addi.l	#$400000,d0
0001DF84 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001DF88                            
0001DF88 4E75                       		rts	
0001DF8A                            ; ===========================================================================
0001DF8A                            
0001DF8A                            Hud_ClrLives:
0001DF8A 4A46                       		tst.w	d6
0001DF8C 67DA                       		beq.s	loc_1CAA6
0001DF8E 7A07                       		moveq	#7,d5
0001DF90                            
0001DF90                            Hud_ClrLivesLoop:
0001DF90 2CBC 0000 0000             		move.l	#0,(a6)
0001DF96 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001DF9A 60E2                       		bra.s	loc_1CABC
0001DF9C                            ; End of function Hud_Lives
0001DF9C                            
0001DF9C                            ; ===========================================================================
0001DF9C                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001E29C                            		even
0001E29C                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001E3DC                            		even
0001E3DC                            ; ===========================================================================
0001E3DC                            ; ---------------------------------------------------------------------------
0001E3DC                            ; When debug mode is currently in use
0001E3DC                            ; ---------------------------------------------------------------------------
0001E3DC                            
0001E3DC                            DebugMode:				; XREF: Obj01; Obj09
0001E3DC 7000                       		moveq	#0,d0
0001E3DE 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001E3E2 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001E3E6 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001E3EA                            ; ===========================================================================
0001E3EA 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001E3EC 0000                       		dc.w Debug_Skip-Debug_Index
0001E3EE                            ; ===========================================================================
0001E3EE                            
0001E3EE                            Debug_Main:				; XREF: Debug_Index
0001E3EE 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001E3F2 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001E3F8 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001E3FE 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001E404 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001E40A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001E410 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001E416 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001E41C 117C 0000 001A             		move.b	#0,$1A(a0)
0001E422 117C 0000 001C             		move.b	#0,$1C(a0)
0001E428 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001E42E 6600                       		bne.s	Debug_Zone	; if not, branch
0001E430 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001E436 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001E43C 7006                       		moveq	#6,d0		; use 6th debug	item list
0001E43E 6000                       		bra.s	Debug_UseList
0001E440                            ; ===========================================================================
0001E440                            
0001E440                            Debug_Zone:
0001E440 7000                       		moveq	#0,d0
0001E442 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E446                            
0001E446                            Debug_UseList:
0001E446 45F9 0000 0000             		lea	(DebugList).l,a2
0001E44C D040                       		add.w	d0,d0
0001E44E D4F2 0000                  		adda.w	(a2,d0.w),a2
0001E452 3C1A                       		move.w	(a2)+,d6
0001E454 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001E458 6200                       		bhi.s	loc_1CF9E
0001E45A 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001E460                            
0001E460                            loc_1CF9E:
0001E460 6100 0000                  		bsr.w	Debug_ShowItem
0001E464 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001E46A 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001E470                            
0001E470                            Debug_Skip:				; XREF: Debug_Index
0001E470 7006                       		moveq	#6,d0
0001E472 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001E478 6700                       		beq.s	loc_1CFBE
0001E47A 7000                       		moveq	#0,d0
0001E47C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E480                            
0001E480                            loc_1CFBE:
0001E480 45F9 0000 0000             		lea	(DebugList).l,a2
0001E486 D040                       		add.w	d0,d0
0001E488 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001E48C 3C1A                       		move.w	(a2)+,d6
0001E48E 6100 0000                  		bsr.w	Debug_Control
0001E492 4EF9 0000 E750             		jmp	DisplaySprite
0001E498                            
0001E498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E498                            
0001E498                            
0001E498                            Debug_Control:
0001E498 7800                       		moveq	#0,d4
0001E49A 323C 0001                  		move.w	#1,d1
0001E49E 1838 F605                  		move.b	($FFFFF605).w,d4
0001E4A2 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001E4A6 6600                       		bne.s	loc_1D018	; if yes, branch
0001E4A8 1038 F604                  		move.b	($FFFFF604).w,d0
0001E4AC 0240 000F                  		andi.w	#$F,d0
0001E4B0 6600                       		bne.s	loc_1D000
0001E4B2 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001E4B8 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001E4BE 6000 0000                  		bra.w	Debug_BackItem
0001E4C2                            ; ===========================================================================
0001E4C2                            
0001E4C2                            loc_1D000:
0001E4C2 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001E4C6 6600                       		bne.s	loc_1D01C
0001E4C8 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001E4CE 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001E4D2 6600                       		bne.s	loc_1D018
0001E4D4 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001E4DA                            
0001E4DA                            loc_1D018:
0001E4DA 1838 F604                  		move.b	($FFFFF604).w,d4
0001E4DE                            
0001E4DE                            loc_1D01C:
0001E4DE 7200                       		moveq	#0,d1
0001E4E0 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001E4E4 5241                       		addq.w	#1,d1
0001E4E6 4841                       		swap	d1
0001E4E8 E881                       		asr.l	#4,d1
0001E4EA 2428 000C                  		move.l	$C(a0),d2
0001E4EE 2628 0008                  		move.l	8(a0),d3
0001E4F2 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001E4F6 6700                       		beq.s	loc_1D03C	; if not, branch
0001E4F8 9481                       		sub.l	d1,d2
0001E4FA 6400                       		bcc.s	loc_1D03C
0001E4FC 7400                       		moveq	#0,d2
0001E4FE                            
0001E4FE                            loc_1D03C:
0001E4FE 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001E502 6700                       		beq.s	loc_1D052	; if not, branch
0001E504 D481                       		add.l	d1,d2
0001E506 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001E50C 6500                       		bcs.s	loc_1D052
0001E50E 243C 07FF 0000             		move.l	#$7FF0000,d2
0001E514                            
0001E514                            loc_1D052:
0001E514 0804 0002                  		btst	#2,d4
0001E518 6700                       		beq.s	loc_1D05E
0001E51A 9681                       		sub.l	d1,d3
0001E51C 6400                       		bcc.s	loc_1D05E
0001E51E 7600                       		moveq	#0,d3
0001E520                            
0001E520                            loc_1D05E:
0001E520 0804 0003                  		btst	#3,d4
0001E524 6700                       		beq.s	loc_1D066
0001E526 D681                       		add.l	d1,d3
0001E528                            
0001E528                            loc_1D066:
0001E528 2142 000C                  		move.l	d2,$C(a0)
0001E52C 2143 0008                  		move.l	d3,8(a0)
0001E530                            
0001E530                            Debug_BackItem:
0001E530 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001E536 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001E538 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001E53E 6700                       		beq.s	Debug_NextItem	; if not, branch
0001E540 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001E544 6400                       		bcc.s	Debug_NoLoop
0001E546 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001E54A 6000                       		bra.s	Debug_NoLoop
0001E54C                            ; ===========================================================================
0001E54C                            
0001E54C                            Debug_NextItem:
0001E54C 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001E552 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001E554 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001E558 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001E55C 6200                       		bhi.s	Debug_NoLoop
0001E55E 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001E564                            
0001E564                            Debug_NoLoop:
0001E564 6000 0000                  		bra.w	Debug_ShowItem
0001E568                            ; ===========================================================================
0001E568                            
0001E568                            Debug_MakeItem:
0001E568 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001E56E 6700                       		beq.s	Debug_Exit	; if not, branch
0001E570 4EB9 0000 EBD6             		jsr	SingleObjLoad
0001E576 6600                       		bne.s	Debug_Exit
0001E578 3368 0008 0008             		move.w	8(a0),8(a1)
0001E57E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001E584 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001E588 1368 0001 0001             		move.b	1(a0),1(a1)
0001E58E 1368 0001 0022             		move.b	1(a0),$22(a1)
0001E594 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001E59A 7000                       		moveq	#0,d0
0001E59C 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001E5A0 E748                       		lsl.w	#3,d0
0001E5A2 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001E5A8 4E75                       		rts	
0001E5AA                            ; ===========================================================================
0001E5AA                            
0001E5AA                            Debug_Exit:
0001E5AA 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001E5B0 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001E5B2 7000                       		moveq	#0,d0
0001E5B4 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001E5B8 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001E5C0 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001E5C6 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001E5CA 3140 000A                  		move.w	d0,$A(a0)
0001E5CE 3140 000E                  		move.w	d0,$E(a0)
0001E5D2 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001E5D8 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001E5DE 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001E5E4 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001E5E6 4278 F780                  		clr.w	($FFFFF780).w
0001E5EA 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001E5F0 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001E5F8 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001E5FE 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001E604 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001E60A 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001E610                            
0001E610                            Debug_DoNothing:
0001E610 4E75                       		rts	
0001E612                            ; End of function Debug_Control
0001E612                            
0001E612                            
0001E612                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E612                            
0001E612                            
0001E612                            Debug_ShowItem:				; XREF: Debug_Main
0001E612 7000                       		moveq	#0,d0
0001E614 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001E618 E748                       		lsl.w	#3,d0
0001E61A 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001E620 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001E626 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001E62C 4E75                       		rts	
0001E62E                            ; End of function Debug_ShowItem
0001E62E                            
0001E62E                            ; ===========================================================================
0001E62E                            ; ---------------------------------------------------------------------------
0001E62E                            ; Debug	list pointers
0001E62E                            ; ---------------------------------------------------------------------------
0001E62E                            DebugList:
0001E62E                            	include "_inc\Debug list pointers.asm"
0001E62E                            ; ---------------------------------------------------------------------------
0001E62E                            ; Debug	list pointers
0001E62E                            ; ---------------------------------------------------------------------------
0001E62E 0000                       	dc.w Debug_GHZ-DebugList
0001E630 0000                       	dc.w Debug_LZ-DebugList
0001E632 0000                       	dc.w Debug_MZ-DebugList
0001E634 0000                       	dc.w Debug_SLZ-DebugList
0001E636 0000                       	dc.w Debug_SYZ-DebugList
0001E638 0000                       	dc.w Debug_SBZ-DebugList
0001E63A 0000                       	dc.w Debug_Ending-DebugList
0001E63C 0000                       	dc.w Debug_GHZ-DebugList
0001E63C 0000                       	dc.w Debug_GHZ-DebugList
0001E63E                            
0001E63E                            ; ---------------------------------------------------------------------------
0001E63E                            ; Debug	list - Green Hill
0001E63E                            ; ---------------------------------------------------------------------------
0001E63E                            Debug_GHZ:
0001E63E                            	include "_inc\Debug list - GHZ.asm"
0001E63E                            ; ---------------------------------------------------------------------------
0001E63E                            ; Debug	list - Green Hill
0001E63E                            ; ---------------------------------------------------------------------------
0001E63E 0010                       	dc.w $10			; number of items in list
0001E640 2500 AF3C                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001E644 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001E648 2600 B542                  	dc.l Map_obj26+$26000000
0001E64C 0000 0680                  	dc.b 0,	0, 6, $80
0001E650 1F00 A734                  	dc.l Map_obj1F+$1F000000
0001E654 0000 0400                  	dc.b 0,	0, 4, 0
0001E658 2200 A9F0                  	dc.l Map_obj22+$22000000
0001E65C 0000 0444                  	dc.b 0,	0, 4, $44
0001E660 2B00 BBB6                  	dc.l Map_obj2B+$2B000000
0001E664 0000 047B                  	dc.b 0,	0, 4, $7B
0001E668 3600 E0F2                  	dc.l Map_obj36+$36000000
0001E66C 0000 051B                  	dc.b 0,	0, 5, $1B
0001E670 1800 9042                  	dc.l Map_obj18+$18000000
0001E674 0000 4000                  	dc.b 0,	0, $40,	0
0001E678 3B00 E218                  	dc.l Map_obj3B+$3B000000
0001E67C 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001E680 4001 08EA                  	dc.l Map_obj40+$40000000
0001E684 0000 04F0                  	dc.b 0,	0, 4, $F0
0001E688 4100 EE64                  	dc.l Map_obj41+$41000000
0001E68C 0000 0523                  	dc.b 0,	0, 5, $23
0001E690 4200 F08A                  	dc.l Map_obj42+$42000000
0001E694 0000 249B                  	dc.b 0,	0, $24,	$9B
0001E698 4400 F398                  	dc.l Map_obj44+$44000000
0001E69C 0000 434C                  	dc.b 0,	0, $43,	$4C
0001E6A0 1900 9142                  	dc.l Map_obj48+$19000000
0001E6A4 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001E6A8 7901 833C                  	dc.l Map_obj79+$79000000
0001E6AC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E6B0 4B00 AF7C                  	dc.l Map_obj4B+$4B000000
0001E6B4 0000 2400                  	dc.b 0,	0, $24,	0
0001E6B8 7D01 848C                  	dc.l Map_obj7D+$7D000000
0001E6BC 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001E6C0                            	even
0001E6C0                            	even
0001E6C0                            
0001E6C0                            ; ---------------------------------------------------------------------------
0001E6C0                            ; Debug	list - Labyrinth
0001E6C0                            ; ---------------------------------------------------------------------------
0001E6C0                            Debug_LZ:
0001E6C0                            	include "_inc\Debug list - LZ.asm"
0001E6C0                            ; ---------------------------------------------------------------------------
0001E6C0                            ; Debug	list - Labyrinth
0001E6C0                            ; ---------------------------------------------------------------------------
0001E6C0 0019                       	dc.w $19
0001E6C2 2500 AF3C                  	dc.l Map_obj25+$25000000
0001E6C6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E6CA 2600 B542                  	dc.l Map_obj26+$26000000
0001E6CE 0000 0680                  	dc.b 0,	0, 6, $80
0001E6D2 4100 EE64                  	dc.l Map_obj41+$41000000
0001E6D6 0000 0523                  	dc.b 0,	0, 5, $23
0001E6DA 2C00 BC66                  	dc.l Map_obj2C+$2C000000
0001E6DE 0800 2486                  	dc.b 8,	0, $24,	$86
0001E6E2 2D00 BE5A                  	dc.l Map_obj2D+$2D000000
0001E6E6 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001E6EA 1601 30C4                  	dc.l Map_obj16+$16000000
0001E6EE 0000 03CC                  	dc.b 0,	0, 3, $CC
0001E6F2 1601 30C4                  	dc.l Map_obj16+$16000000
0001E6F6 0203 03CC                  	dc.b 2,	3, 3, $CC
0001E6FA 3300 D312                  	dc.l Map_obj33+$33000000
0001E6FE 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001E702 3200 CED2                  	dc.l Map_obj32+$32000000
0001E706 0000 0513                  	dc.b 0,	0, 5, $13
0001E70A 3600 E0F2                  	dc.l Map_obj36+$36000000
0001E70E 0000 051B                  	dc.b 0,	0, 5, $1B
0001E712 5201 11E6                  	dc.l Map_obj52a+$52000000
0001E716 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001E71A 6101 32EC                  	dc.l Map_obj61+$61000000
0001E71E 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001E722 6101 32EC                  	dc.l Map_obj61+$61000000
0001E726 1301 43E6                  	dc.b $13, 1, $43, $E6
0001E72A 6101 32EC                  	dc.l Map_obj61+$61000000
0001E72E 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001E732 6201 3440                  	dc.l Map_obj62+$62000000
0001E736 0000 443E                  	dc.b 0,	0, $44,	$3E
0001E73A 6101 32EC                  	dc.l Map_obj61+$61000000
0001E73E 2702 43E6                  	dc.b $27, 2, $43, $E6
0001E742 6101 32EC                  	dc.l Map_obj61+$61000000
0001E746 3003 43E6                  	dc.b $30, 3, $43, $E6
0001E74A 6301 379E                  	dc.l Map_obj63+$63000000
0001E74E 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001E752 6001 300E                  	dc.l Map_obj60+$60000000
0001E756 0000 0467                  	dc.b 0,	0, 4, $67
0001E75A 6401 3AE4                  	dc.l Map_obj64+$64000000
0001E75E 8413 8348                  	dc.b $84, $13, $83, $48
0001E762 6501 3C6C                  	dc.l Map_obj65+$65000000
0001E766 0202 C259                  	dc.b 2,	2, $C2,	$59
0001E76A 6501 3C6C                  	dc.l Map_obj65+$65000000
0001E76E 0909 C259                  	dc.b 9,	9, $C2,	$59
0001E772 0B01 245E                  	dc.l Map_obj0B+$B000000
0001E776 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001E77A 0C01 252E                  	dc.l Map_obj0C+$C000000
0001E77E 0200 4328                  	dc.b 2,	0, $43,	$28
0001E782 7901 833C                  	dc.l Map_obj79+$79000000
0001E786 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E78A                            	even
0001E78A                            	even
0001E78A                            
0001E78A                            ; ---------------------------------------------------------------------------
0001E78A                            ; Debug	list - Marble
0001E78A                            ; ---------------------------------------------------------------------------
0001E78A                            Debug_MZ:
0001E78A                            	include "_inc\Debug list - MZ.asm"
0001E78A                            ; ---------------------------------------------------------------------------
0001E78A                            ; Debug	list - Marble
0001E78A                            ; ---------------------------------------------------------------------------
0001E78A 0012                       	dc.w $12
0001E78C 2500 AF3C                  	dc.l Map_obj25+$25000000
0001E790 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E794 2600 B542                  	dc.l Map_obj26+$26000000
0001E798 0000 0680                  	dc.b 0,	0, 6, $80
0001E79C 2200 A9F0                  	dc.l Map_obj22+$22000000
0001E7A0 0000 0444                  	dc.b 0,	0, 4, $44
0001E7A4 3600 E0F2                  	dc.l Map_obj36+$36000000
0001E7A8 0000 051B                  	dc.b 0,	0, 5, $1B
0001E7AC 4100 EE64                  	dc.l Map_obj41+$41000000
0001E7B0 0000 0523                  	dc.b 0,	0, 5, $23
0001E7B4 1300 C39C                  	dc.l Map_obj14+$13000000
0001E7B8 0000 0345                  	dc.b 0,	0, 3, $45
0001E7BC 4600 FA4A                  	dc.l Map_obj46+$46000000
0001E7C0 0000 4000                  	dc.b 0,	0, $40,	0
0001E7C4 4C01 0396                  	dc.l Map_obj4C+$4C000000
0001E7C8 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001E7CC 4E01 067A                  	dc.l Map_obj4E+$4E000000
0001E7D0 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001E7D4 3300 D312                  	dc.l Map_obj33+$33000000
0001E7D8 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001E7DC 5001 0A78                  	dc.l Map_obj50+$50000000
0001E7E0 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E7E4 5101 0F1A                  	dc.l Map_obj51+$51000000
0001E7E8 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001E7EC 5201 1190                  	dc.l Map_obj52+$52000000
0001E7F0 0000 02B8                  	dc.b 0,	0, 2, $B8
0001E7F4 5300 96DA                  	dc.l Map_obj53+$53000000
0001E7F8 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001E7FC 5401 035C                  	dc.l Map_obj54+$54000000
0001E800 0000 8680                  	dc.b 0,	0, $86,	$80
0001E804 5501 1384                  	dc.l Map_obj55+$55000000
0001E808 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E80C 7801 7FB6                  	dc.l Map_obj78+$78000000
0001E810 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E814 7901 833C                  	dc.l Map_obj79+$79000000
0001E818 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E81C                            	even
0001E81C                            	even
0001E81C                            
0001E81C                            ; ---------------------------------------------------------------------------
0001E81C                            ; Debug	list - Star Light
0001E81C                            ; ---------------------------------------------------------------------------
0001E81C                            Debug_SLZ:
0001E81C                            	include "_inc\Debug list - SLZ.asm"
0001E81C                            ; ---------------------------------------------------------------------------
0001E81C                            ; Debug	list - Star Light
0001E81C                            ; ---------------------------------------------------------------------------
0001E81C 000F                       	dc.w $F
0001E81E 2500 AF3C                  	dc.l Map_obj25+$25000000
0001E822 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E826 2600 B542                  	dc.l Map_obj26+$26000000
0001E82A 0000 0680                  	dc.b 0,	0, 6, $80
0001E82E 5901 1E86                  	dc.l Map_obj59+$59000000
0001E832 0000 4000                  	dc.b 0,	0, $40,	0
0001E836 5300 96DA                  	dc.l Map_obj53+$53000000
0001E83A 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001E83E 1800 90A0                  	dc.l Map_obj18b+$18000000
0001E842 0000 4000                  	dc.b 0,	0, $40,	0
0001E846 5A01 1FC0                  	dc.l Map_obj5A+$5A000000
0001E84A 0000 4000                  	dc.b 0,	0, $40,	0
0001E84E 5B01 2178                  	dc.l Map_obj5B+$5B000000
0001E852 0000 4000                  	dc.b 0,	0, $40,	0
0001E856 5D01 2748                  	dc.l Map_obj5D+$5D000000
0001E85A 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001E85E 5E01 2ADA                  	dc.l Map_obj5E+$5E000000
0001E862 0000 0374                  	dc.b 0,	0, 3, $74
0001E866 4100 EE64                  	dc.l Map_obj41+$41000000
0001E86A 0000 0523                  	dc.b 0,	0, 5, $23
0001E86E 1300 C39C                  	dc.l Map_obj14+$13000000
0001E872 0000 0480                  	dc.b 0,	0, 4, $80
0001E876 1C00 97EA                  	dc.l Map_obj1C+$1C000000
0001E87A 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001E87E 5F01 2D58                  	dc.l Map_obj5F+$5F000000
0001E882 0000 0400                  	dc.b 0,	0, 4, 0
0001E886 6001 300E                  	dc.l Map_obj60+$60000000
0001E88A 0000 2429                  	dc.b 0,	0, $24,	$29
0001E88E 7901 833C                  	dc.l Map_obj79+$79000000
0001E892 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E896                            	even
0001E896                            	even
0001E896                            
0001E896                            ; ---------------------------------------------------------------------------
0001E896                            ; Debug	list - Spring Yard
0001E896                            ; ---------------------------------------------------------------------------
0001E896                            Debug_SYZ:
0001E896                            	include "_inc\Debug list - SYZ.asm"
0001E896                            ; ---------------------------------------------------------------------------
0001E896                            ; Debug	list - Spring Yard
0001E896                            ; ---------------------------------------------------------------------------
0001E896 000F                       	dc.w $F
0001E898 2500 AF3C                  	dc.l Map_obj25+$25000000
0001E89C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E8A0 2600 B542                  	dc.l Map_obj26+$26000000
0001E8A4 0000 0680                  	dc.b 0,	0, 6, $80
0001E8A8 3600 E0F2                  	dc.l Map_obj36+$36000000
0001E8AC 0000 051B                  	dc.b 0,	0, 5, $1B
0001E8B0 4100 EE64                  	dc.l Map_obj41+$41000000
0001E8B4 0000 0523                  	dc.b 0,	0, 5, $23
0001E8B8 4300 F2EA                  	dc.l Map_obj43+$43000000
0001E8BC 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E8C0 1200 FAC8                  	dc.l Map_obj12+$12000000
0001E8C4 0000 0000                  	dc.b 0,	0, 0, 0
0001E8C8 4700 FC44                  	dc.l Map_obj47+$47000000
0001E8CC 0000 0380                  	dc.b 0,	0, 3, $80
0001E8D0 1F00 A734                  	dc.l Map_obj1F+$1F000000
0001E8D4 0000 0400                  	dc.b 0,	0, 4, 0
0001E8D8 2200 A9F0                  	dc.l Map_obj22+$22000000
0001E8DC 0000 0444                  	dc.b 0,	0, 4, $44
0001E8E0 5001 0A78                  	dc.l Map_obj50+$50000000
0001E8E4 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E8E8 1800 908E                  	dc.l Map_obj18a+$18000000
0001E8EC 0000 4000                  	dc.b 0,	0, $40,	0
0001E8F0 5601 1846                  	dc.l Map_obj56+$56000000
0001E8F4 0000 4000                  	dc.b 0,	0, $40,	0
0001E8F8 3200 CED2                  	dc.l Map_obj32+$32000000
0001E8FC 0000 0513                  	dc.b 0,	0, 5, $13
0001E900 7801 7FB6                  	dc.l Map_obj78+$78000000
0001E904 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E908 7901 833C                  	dc.l Map_obj79+$79000000
0001E90C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E910                            	even
0001E910                            	even
0001E910                            
0001E910                            ; ---------------------------------------------------------------------------
0001E910                            ; Debug	list - Scrap Brain
0001E910                            ; ---------------------------------------------------------------------------
0001E910                            Debug_SBZ:
0001E910                            	include "_inc\Debug list - SBZ.asm"
0001E910                            ; ---------------------------------------------------------------------------
0001E910                            ; Debug	list - Scrap Brain
0001E910                            ; ---------------------------------------------------------------------------
0001E910 001D                       	dc.w $1D
0001E912 2500 AF3C                  	dc.l Map_obj25+$25000000
0001E916 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E91A 2600 B542                  	dc.l Map_obj26+$26000000
0001E91E 0000 0680                  	dc.b 0,	0, 6, $80
0001E922 5F01 2D58                  	dc.l Map_obj5F+$5F000000
0001E926 0000 0400                  	dc.b 0,	0, 4, 0
0001E92A 6001 300E                  	dc.l Map_obj60+$60000000
0001E92E 0000 0429                  	dc.b 0,	0, 4, $29
0001E932 7801 7FB6                  	dc.l Map_obj78+$78000000
0001E936 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001E93A 1501 1BE2                  	dc.l Map_obj15b+$15000000
0001E93E 0702 4391                  	dc.b 7,	2, $43,	$91
0001E942 6701 68CE                  	dc.l Map_obj67+$67000000
0001E946 E000 C344                  	dc.b $E0, 0, $C3, $44
0001E94A 5201 1190                  	dc.l Map_obj52+$52000000
0001E94E 2802 22C0                  	dc.b $28, 2, $22, $C0
0001E952 3200 CED2                  	dc.l Map_obj32+$32000000
0001E956 0000 0513                  	dc.b 0,	0, 5, $13
0001E95A 6901 6B28                  	dc.l Map_obj69+$69000000
0001E95E 0300 4492                  	dc.b 3,	0, $44,	$92
0001E962 6901 6B82                  	dc.l Map_obj69a+$69000000
0001E966 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001E96A 6A01 6DE0                  	dc.l Map_obj6A+$6A000000
0001E96E 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001E972 5300 96DA                  	dc.l Map_obj53+$53000000
0001E976 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001E97A 5201 1190                  	dc.l Map_obj52+$52000000
0001E97E 3903 4460                  	dc.b $39, 3, $44, $60
0001E982 6B01 71B0                  	dc.l Map_obj6B+$6B000000
0001E986 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001E98A 2A00 9980                  	dc.l Map_obj2A+$2A000000
0001E98E 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001E992 6B01 71B0                  	dc.l Map_obj6B+$6B000000
0001E996 1301 22C0                  	dc.b $13, 1, $22, $C0
0001E99A 6A01 6DE0                  	dc.l Map_obj6A+$6A000000
0001E99E 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001E9A2 6B01 71B0                  	dc.l Map_obj6B+$6B000000
0001E9A6 2401 22C0                  	dc.b $24, 1, $22, $C0
0001E9AA 6A01 6DE0                  	dc.l Map_obj6A+$6A000000
0001E9AE 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001E9B2 6B01 71B0                  	dc.l Map_obj6B+$6B000000
0001E9B6 3401 22C0                  	dc.b $34, 1, $22, $C0
0001E9BA 6C01 7372                  	dc.l Map_obj6C+$6C000000
0001E9BE 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001E9C2 6D00 F73A                  	dc.l Map_obj6D+$6D000000
0001E9C6 6400 83D9                  	dc.b $64, 0, $83, $D9
0001E9CA 6D00 F73A                  	dc.l Map_obj6D+$6D000000
0001E9CE 640B 83D9                  	dc.b $64, $B, $83, $D9
0001E9D2 6E01 7428                  	dc.l Map_obj6E+$6E000000
0001E9D6 0400 047E                  	dc.b 4,	0, 4, $7E
0001E9DA 7001 787A                  	dc.l Map_obj70+$70000000
0001E9DE 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001E9E2 7101 25EE                  	dc.l Map_obj71+$71000000
0001E9E6 1100 8680                  	dc.b $11, 0, $86, $80
0001E9EA 1E00 9E3E                  	dc.l Map_obj1E+$1E000000
0001E9EE 0400 2302                  	dc.b 4,	0, $23,	2
0001E9F2 7901 833C                  	dc.l Map_obj79+$79000000
0001E9F6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E9FA                            	even
0001E9FA                            	even
0001E9FA                            
0001E9FA                            ; ---------------------------------------------------------------------------
0001E9FA                            ; Debug	list - ending sequence / special stage
0001E9FA                            ; ---------------------------------------------------------------------------
0001E9FA                            Debug_Ending:
0001E9FA                            	include "_inc\Debug list - Ending and SS.asm"
0001E9FA                            ; ---------------------------------------------------------------------------
0001E9FA                            ; Debug	list - ending sequence / special stage
0001E9FA                            ; ---------------------------------------------------------------------------
0001E9FA 000D                       	dc.w $D
0001E9FC 2500 AF3C                  	dc.l Map_obj25+$25000000
0001EA00 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EA04 4700 FC44                  	dc.l Map_obj47+$47000000
0001EA08 0000 0380                  	dc.b 0,	0, 3, $80
0001EA0C 2800 A466                  	dc.l Map_obj28a+$28000000
0001EA10 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001EA14 2800 A466                  	dc.l Map_obj28a+$28000000
0001EA18 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001EA1C 2800 A466                  	dc.l Map_obj28a+$28000000
0001EA20 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001EA24 2800 A44E                  	dc.l Map_obj28+$28000000
0001EA28 0D00 0553                  	dc.b $D, 0, 5, $53
0001EA2C 2800 A44E                  	dc.l Map_obj28+$28000000
0001EA30 0E00 0553                  	dc.b $E, 0, 5, $53
0001EA34 2800 A44E                  	dc.l Map_obj28+$28000000
0001EA38 0F00 0573                  	dc.b $F, 0, 5, $73
0001EA3C 2800 A44E                  	dc.l Map_obj28+$28000000
0001EA40 1000 0573                  	dc.b $10, 0, 5,	$73
0001EA44 2800 A466                  	dc.l Map_obj28a+$28000000
0001EA48 1100 0585                  	dc.b $11, 0, 5,	$85
0001EA4C 2800 A47E                  	dc.l Map_obj28b+$28000000
0001EA50 1200 0593                  	dc.b $12, 0, 5,	$93
0001EA54 2800 A466                  	dc.l Map_obj28a+$28000000
0001EA58 1300 0565                  	dc.b $13, 0, 5,	$65
0001EA5C 2800 A47E                  	dc.l Map_obj28b+$28000000
0001EA60 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001EA64                            	even
0001EA64                            	even
0001EA64                            
0001EA64                            ; ---------------------------------------------------------------------------
0001EA64                            ; Main level load blocks
0001EA64                            ; ---------------------------------------------------------------------------
0001EA64                            MainLoadBlocks:
0001EA64                            	include "_inc\Main level load blocks.asm"
0001EA64                            ; ---------------------------------------------------------------------------
0001EA64                            ; Main level load blocks
0001EA64                            ;
0001EA64                            ; ===FORMAT===
0001EA64                            ; level	patterns + (1st	PLC num	* 10^6)
0001EA64                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001EA64                            ; 256x256 mappings
0001EA64                            ; blank, music (unused), pal index (unused), pal index
0001EA64                            ; ---------------------------------------------------------------------------
0001EA64 0000 0000                  	dc.l Nem_GHZ_2nd|4<<24
0001EA68 0000 0000                  	dc.l Blk16_GHZ|5<<24
0001EA6C 0000 0000                  	dc.l Blk256_GHZ
0001EA70 0081 0404                  	dc.b 0,	$81, 4,	4
0001EA74 0000 0000                  	dc.l Nem_LZ|6<<24
0001EA78 0000 0000                  	dc.l Blk16_LZ|7<<24
0001EA7C 0000 0000                  	dc.l Blk256_LZ
0001EA80 0082 0505                  	dc.b 0,	$82, 5,	5
0001EA84 0000 0000                  	dc.l Nem_MZ|8<<24
0001EA88 0000 0000                  	dc.l Blk16_MZ|9<<24
0001EA8C 0000 0000                  	dc.l Blk256_MZ
0001EA90 0083 0606                  	dc.b 0,	$83, 6,	6
0001EA94 0000 0000                  	dc.l Nem_SLZ|$A<<24
0001EA98 0000 0000                  	dc.l Blk16_SLZ|$B<<24
0001EA9C 0000 0000                  	dc.l Blk256_SLZ
0001EAA0 0084 0707                  	dc.b 0,	$84, 7,	7
0001EAA4 0000 0000                  	dc.l Nem_SYZ|$C<<24
0001EAA8 0000 0000                  	dc.l Blk16_SYZ|$D<<24
0001EAAC 0000 0000                  	dc.l Blk256_SYZ
0001EAB0 0085 0808                  	dc.b 0,	$85, 8,	8
0001EAB4 0000 0000                  	dc.l Nem_SBZ|$E<<24
0001EAB8 0000 0000                  	dc.l Blk16_SBZ|$F<<24
0001EABC 0000 0000                  	dc.l Blk256_SBZ
0001EAC0 0086 0909                  	dc.b 0,	$86, 9,	9
0001EAC4 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001EAC8 0000 0000                  	dc.l Blk16_GHZ
0001EACC 0000 0000                  	dc.l Blk256_GHZ
0001EAD0 0086 1313                  	dc.b 0,	$86, $13, $13
0001EAD4                            ; there you go lol
0001EAD4 0000 0000                  	dc.l Nem_BHZ|$20<<24 ; MAKOTO ZONE
0001EAD8 0000 0000                  	dc.l Blk16_BHZ|$21<<24
0001EADC 0000 0000                  	dc.l Blk256_BHZ
0001EAE0 009E 1515                  	dc.b 0,	$9E, $15, $15
0001EAE4                            	even
0001EAE4                            	even
0001EAE4                            
0001EAE4                            ; ---------------------------------------------------------------------------
0001EAE4                            ; Pattern load cues
0001EAE4                            ; ---------------------------------------------------------------------------
0001EAE4                            ArtLoadCues:
0001EAE4                            	include "_inc\Pattern load cues.asm"
0001EAE4                            ; ---------------------------------------------------------------------------
0001EAE4                            ; Pattern load cues - index
0001EAE4                            ; ---------------------------------------------------------------------------
0001EAE4 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues	; 0
0001EAE8 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues	; 2
0001EAEC 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues		; 4
0001EAF0 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001EAF4 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001EAF8 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001EAFC 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001EB00 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001EB04 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues	; $10
0001EB08 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001EB0C 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001EB10 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001EB14 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001EB18 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001EB1C 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001EB20 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001EB24                            
0001EB24 0000 0000                  	dc.w PLC_BHZ-ArtLoadCues, PLC_BHZ2-ArtLoadCues		; $20
0001EB28 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001EB2A 0000                       	dc.w PLC_TruthNuke-ArtLoadCues	; GMZ
0001EB2C                            ; ---------------------------------------------------------------------------
0001EB2C                            ; Pattern load cues - standard block 1
0001EB2C                            ; ---------------------------------------------------------------------------
0001EB2C 0004                       PLC_Main:	dc.w 4
0001EB2E 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001EB32 F400                       		dc.w $F400
0001EB34 0000 0000                  		dc.l Nem_Hud		; HUD
0001EB38 D940                       		dc.w $D940
0001EB3A 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001EB3E FA80                       		dc.w $FA80
0001EB40 0000 0000                  		dc.l Nem_Ring		; rings
0001EB44 F640                       		dc.w $F640
0001EB46 0000 0000                  		dc.l Nem_Points		; points from enemy
0001EB4A F2E0                       		dc.w $F2E0
0001EB4C                            ; ---------------------------------------------------------------------------
0001EB4C                            ; Pattern load cues - standard block 2
0001EB4C                            ; ---------------------------------------------------------------------------
0001EB4C 0002                       PLC_Main2:	dc.w 2
0001EB4E 0000 0000                  		dc.l Nem_Monitors	; monitors
0001EB52 D000                       		dc.w $D000
0001EB54 0000 0000                  		dc.l Nem_Shield		; shield
0001EB58 A820                       		dc.w $A820
0001EB5A 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001EB5E AB80                       		dc.w $AB80
0001EB60                            ; ---------------------------------------------------------------------------
0001EB60                            ; Pattern load cues - explosion
0001EB60                            ; ---------------------------------------------------------------------------
0001EB60 0000                       PLC_Explode:	dc.w 0
0001EB62 0000 0000                  		dc.l Nem_Explode	; explosion
0001EB66 B400                       		dc.w $B400
0001EB68                            ; ---------------------------------------------------------------------------
0001EB68                            ; Pattern load cues - game/time	over
0001EB68                            ; ---------------------------------------------------------------------------
0001EB68 0000                       PLC_GameOver:	dc.w 0
0001EB6A 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001EB6E ABC0                       		dc.w $ABC0
0001EB70                            ; ---------------------------------------------------------------------------
0001EB70                            ; Pattern load cues - Green Hill
0001EB70                            ; ---------------------------------------------------------------------------
0001EB70 000B                       PLC_GHZ:	dc.w $B
0001EB72 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001EB76 0000                       		dc.w 0
0001EB78 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001EB7C 39A0                       		dc.w $39A0
0001EB7E 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001EB82 6B00                       		dc.w $6B00
0001EB84 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001EB88 7A00                       		dc.w $7A00
0001EB8A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001EB8E 8000                       		dc.w $8000
0001EB90 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001EB94 8880                       		dc.w $8880
0001EB96 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001EB9A 8F60                       		dc.w $8F60
0001EB9C 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001EBA0 9360                       		dc.w $9360
0001EBA2 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001EBA6 9E00                       		dc.w $9E00
0001EBA8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001EBAC A360                       		dc.w $A360
0001EBAE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001EBB2 A460                       		dc.w $A460
0001EBB4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EBB8 A660                       		dc.w $A660
0001EBBA 0005                       PLC_GHZ2:	dc.w 5
0001EBBC 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001EBC0 7000                       		dc.w $7000
0001EBC2 0000 0000                  		dc.l Nem_Bridge		; bridge
0001EBC6 71C0                       		dc.w $71C0
0001EBC8 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001EBCC 7300                       		dc.w $7300
0001EBCE 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001EBD2 7540                       		dc.w $7540
0001EBD4 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001EBD8 A1E0                       		dc.w $A1E0
0001EBDA 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001EBDE 6980                       		dc.w $6980
0001EBE0                            ; ---------------------------------------------------------------------------
0001EBE0                            ; Pattern load cues - Labyrinth
0001EBE0                            ; ---------------------------------------------------------------------------
0001EBE0 000B                       PLC_LZ:		dc.w $B
0001EBE2 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001EBE6 0000                       		dc.w 0
0001EBE8 0000 0000                  		dc.l Nem_LzBlock1	; block
0001EBEC 3C00                       		dc.w $3C00
0001EBEE 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001EBF2 3E00                       		dc.w $3E00
0001EBF4 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001EBF8 4B20                       		dc.w $4B20
0001EBFA 0000 0000                  		dc.l Nem_Water		; water	surface
0001EBFE 6000                       		dc.w $6000
0001EC00 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001EC04 6200                       		dc.w $6200
0001EC06 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001EC0A 6500                       		dc.w $6500
0001EC0C 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001EC10 6900                       		dc.w $6900
0001EC12 0000 0000                  		dc.l Nem_LzBlock3	; block
0001EC16 7780                       		dc.w $7780
0001EC18 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001EC1C 7880                       		dc.w $7880
0001EC1E 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001EC22 7980                       		dc.w $7980
0001EC24 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001EC28 94C0                       		dc.w $94C0
0001EC2A 000C                       PLC_LZ2:	dc.w $C
0001EC2C 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001EC30 7BC0                       		dc.w $7BC0
0001EC32 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001EC36 7CC0                       		dc.w $7CC0
0001EC38 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001EC3C 7EC0                       		dc.w $7EC0
0001EC3E 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001EC42 5D20                       		dc.w $5D20
0001EC44 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001EC48 8800                       		dc.w $8800
0001EC4A 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001EC4E 89E0                       		dc.w $89E0
0001EC50 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001EC54 8CE0                       		dc.w $8CE0
0001EC56 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001EC5A 90C0                       		dc.w $90C0
0001EC5C 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001EC60 A1E0                       		dc.w $A1E0
0001EC62 0000 0000                  		dc.l Nem_Cork		; cork block
0001EC66 A000                       		dc.w $A000
0001EC68 0000 0000                  		dc.l Nem_Spikes		; spikes
0001EC6C A360                       		dc.w $A360
0001EC6E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001EC72 A460                       		dc.w $A460
0001EC74 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EC78 A660                       		dc.w $A660
0001EC7A                            ; ---------------------------------------------------------------------------
0001EC7A                            ; Pattern load cues - Marble
0001EC7A                            ; ---------------------------------------------------------------------------
0001EC7A 0009                       PLC_MZ:		dc.w 9
0001EC7C 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001EC80 0000                       		dc.w 0
0001EC82 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001EC86 6000                       		dc.w $6000
0001EC88 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001EC8C 68A0                       		dc.w $68A0
0001EC8E 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001EC92 7000                       		dc.w $7000
0001EC94 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001EC98 71C0                       		dc.w $71C0
0001EC9A 0000 0000                  		dc.l Nem_Lava		; lava
0001EC9E 7500                       		dc.w $7500
0001ECA0 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001ECA4 8880                       		dc.w $8880
0001ECA6 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001ECAA 8F60                       		dc.w $8F60
0001ECAC 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001ECB0 9700                       		dc.w $9700
0001ECB2 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001ECB6 9FE0                       		dc.w $9FE0
0001ECB8 0004                       PLC_MZ2:	dc.w 4
0001ECBA 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001ECBE A260                       		dc.w $A260
0001ECC0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001ECC4 A360                       		dc.w $A360
0001ECC6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001ECCA A460                       		dc.w $A460
0001ECCC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001ECD0 A660                       		dc.w $A660
0001ECD2 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001ECD6 5700                       		dc.w $5700
0001ECD8                            ; ---------------------------------------------------------------------------
0001ECD8                            ; Pattern load cues - Star Light
0001ECD8                            ; ---------------------------------------------------------------------------
0001ECD8 0008                       PLC_SLZ:	dc.w 8
0001ECDA 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001ECDE 0000                       		dc.w 0
0001ECE0 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001ECE4 8000                       		dc.w $8000
0001ECE6 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001ECEA 8520                       		dc.w $8520
0001ECEC 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001ECF0 9000                       		dc.w $9000
0001ECF2 0000 0000                  		dc.l Nem_SlzBlock	; block
0001ECF6 9C00                       		dc.w $9C00
0001ECF8 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001ECFC A260                       		dc.w $A260
0001ECFE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001ED02 A360                       		dc.w $A360
0001ED04 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001ED08 A460                       		dc.w $A460
0001ED0A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001ED0E A660                       		dc.w $A660
0001ED10 0005                       PLC_SLZ2:	dc.w 5
0001ED12 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001ED16 6E80                       		dc.w $6E80
0001ED18 0000 0000                  		dc.l Nem_Fan		; fan
0001ED1C 7400                       		dc.w $7400
0001ED1E 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001ED22 7980                       		dc.w $7980
0001ED24 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001ED28 7B80                       		dc.w $7B80
0001ED2A 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001ED2E 9B00                       		dc.w $9B00
0001ED30 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001ED34 9E00                       		dc.w $9E00
0001ED36                            ; ---------------------------------------------------------------------------
0001ED36                            ; Pattern load cues - Spring Yard
0001ED36                            ; ---------------------------------------------------------------------------
0001ED36 0004                       PLC_SYZ:	dc.w 4
0001ED38 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001ED3C 0000                       		dc.w 0
0001ED3E 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001ED42 8000                       		dc.w $8000
0001ED44 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001ED48 8880                       		dc.w $8880
0001ED4A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001ED4E 8F60                       		dc.w $8F60
0001ED50 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001ED54 9700                       		dc.w $9700
0001ED56 0007                       PLC_SYZ2:	dc.w 7
0001ED58 0000 0000                  		dc.l Nem_Bumper		; bumper
0001ED5C 7000                       		dc.w $7000
0001ED5E 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001ED62 72C0                       		dc.w $72C0
0001ED64 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001ED68 7740                       		dc.w $7740
0001ED6A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001ED6E 9FE0                       		dc.w $9FE0
0001ED70 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001ED74 A1E0                       		dc.w $A1E0
0001ED76 0000 0000                  		dc.l Nem_Spikes		; spikes
0001ED7A A360                       		dc.w $A360
0001ED7C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001ED80 A460                       		dc.w $A460
0001ED82 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001ED86 A660                       		dc.w $A660
0001ED88                            ; ---------------------------------------------------------------------------
0001ED88                            ; Pattern load cues - Scrap Brain
0001ED88                            ; ---------------------------------------------------------------------------
0001ED88 000B                       PLC_SBZ:	dc.w $B
0001ED8A 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001ED8E 0000                       		dc.w 0
0001ED90 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001ED94 5800                       		dc.w $5800
0001ED96 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001ED9A 5D00                       		dc.w $5D00
0001ED9C 0000 0000                  		dc.l Nem_Girder		; girder
0001EDA0 5E00                       		dc.w $5E00
0001EDA2 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001EDA6 6040                       		dc.w $6040
0001EDA8 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001EDAC 6880                       		dc.w $6880
0001EDAE 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001EDB2 6900                       		dc.w $6900
0001EDB4 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001EDB8 7220                       		dc.w $7220
0001EDBA 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001EDBE 76A0                       		dc.w $76A0
0001EDC0 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001EDC4 7B20                       		dc.w $7B20
0001EDC6 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001EDCA 7EA0                       		dc.w $7EA0
0001EDCC 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001EDD0 9860                       		dc.w $9860
0001EDD2 000C                       PLC_SBZ2:	dc.w $C
0001EDD4 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001EDD8 5600                       		dc.w $5600
0001EDDA 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001EDDE 8000                       		dc.w $8000
0001EDE0 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001EDE4 8520                       		dc.w $8520
0001EDE6 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001EDEA 8C00                       		dc.w $8C00
0001EDEC 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001EDF0 8DE0                       		dc.w $8DE0
0001EDF2 0000 0000                  		dc.l Nem_Electric	; electric orb
0001EDF6 8FC0                       		dc.w $8FC0
0001EDF8 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001EDFC 9240                       		dc.w $9240
0001EDFE 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001EE02 7F20                       		dc.w $7F20
0001EE04 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001EE08 9BE0                       		dc.w $9BE0
0001EE0A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001EE0E A1E0                       		dc.w $A1E0
0001EE10 0000 0000                  		dc.l Nem_Spikes		; spikes
0001EE14 A360                       		dc.w $A360
0001EE16 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001EE1A A460                       		dc.w $A460
0001EE1C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EE20 A660                       		dc.w $A660
0001EE22                            ; ---------------------------------------------------------------------------
0001EE22                            ; Pattern load cues - DR. Breen Hill
0001EE22                            ; ---------------------------------------------------------------------------
0001EE22 000A                       PLC_BHZ:	dc.w $A
0001EE24 0000 0000                  		dc.l Nem_BHZ	; GHZ main patterns
0001EE28 0000                       		dc.w 0
0001EE2A 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001EE2E 6B00                       		dc.w $6B00
0001EE30 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001EE34 7A00                       		dc.w $7A00
0001EE36 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001EE3A 8000                       		dc.w $8000
0001EE3C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001EE40 8880                       		dc.w $8880
0001EE42 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001EE46 8F60                       		dc.w $8F60
0001EE48 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001EE4C 9360                       		dc.w $9360
0001EE4E 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001EE52 9E00                       		dc.w $9E00
0001EE54 0000 0000                  		dc.l Nem_Spikes		; spikes
0001EE58 A360                       		dc.w $A360
0001EE5A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001EE5E A460                       		dc.w $A460
0001EE60 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EE64 A660                       		dc.w $A660
0001EE66 0005                       PLC_BHZ2:	dc.w 5
0001EE68 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001EE6C 7000                       		dc.w $7000
0001EE6E 0000 0000                  		dc.l Nem_Bridge		; bridge
0001EE72 71C0                       		dc.w $71C0
0001EE74 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001EE78 7300                       		dc.w $7300
0001EE7A 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001EE7E 7540                       		dc.w $7540
0001EE80 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001EE84 A1E0                       		dc.w $A1E0
0001EE86 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001EE8A 6980                       		dc.w $6980
0001EE8C                            ; ---------------------------------------------------------------------------
0001EE8C                            ; Pattern load cues - title card
0001EE8C                            ; ---------------------------------------------------------------------------
0001EE8C 0000                       PLC_TitleCard:	dc.w 0
0001EE8E 0000 0000                  		dc.l Nem_TitleCard
0001EE92 B000                       		dc.w $B000
0001EE94                            ; ---------------------------------------------------------------------------
0001EE94                            ; Pattern load cues - act 3 boss
0001EE94                            ; ---------------------------------------------------------------------------
0001EE94 0005                       PLC_Boss:	dc.w 5
0001EE96 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001EE9A 8000                       		dc.w $8000
0001EE9C 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001EEA0 8D80                       		dc.w $8D80
0001EEA2 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001EEA6 93A0                       		dc.w $93A0
0001EEA8 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001EEAC A300                       		dc.w $A300
0001EEAE 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001EEB2 A300                       		dc.w $A300
0001EEB4 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001EEB8 A540                       		dc.w $A540
0001EEBA                            ; ---------------------------------------------------------------------------
0001EEBA                            ; Pattern load cues - act 1/2 signpost
0001EEBA                            ; ---------------------------------------------------------------------------
0001EEBA 0002                       PLC_Signpost:	dc.w 2
0001EEBC 0000 0000                  		dc.l Nem_SignPost	; signpost
0001EEC0 D000                       		dc.w $D000
0001EEC2 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001EEC6 96C0                       		dc.w $96C0
0001EEC8 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001EECC 8C40                       		dc.w $8C40
0001EECE                            ; ---------------------------------------------------------------------------
0001EECE                            ; Pattern load cues - beta special stage warp effect
0001EECE                            ; ---------------------------------------------------------------------------
0001EECE 0000                       PLC_Warp:	dc.w 0
0001EED0 0000 0000                  		dc.l Nem_Warp
0001EED4 A820                       		dc.w $A820
0001EED6                            ; ---------------------------------------------------------------------------
0001EED6                            ; Pattern load cues - special stage
0001EED6                            ; ---------------------------------------------------------------------------
0001EED6 0010                       PLC_SpeStage:	dc.w $10
0001EED8 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001EEDC 0000                       		dc.w 0
0001EEDE 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001EEE2 0A20                       		dc.w $A20
0001EEE4 0000 0000                  		dc.l Nem_SSWalls	; walls
0001EEE8 2840                       		dc.w $2840
0001EEEA 0000 0000                  		dc.l Nem_Bumper		; bumper
0001EEEE 4760                       		dc.w $4760
0001EEF0 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001EEF4 4A20                       		dc.w $4A20
0001EEF6 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001EEFA 4C60                       		dc.w $4C60
0001EEFC 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001EF00 5E00                       		dc.w $5E00
0001EF02 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001EF06 6E00                       		dc.w $6E00
0001EF08 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001EF0C 7E00                       		dc.w $7E00
0001EF0E 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001EF12 8E00                       		dc.w $8E00
0001EF14 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001EF18 9E00                       		dc.w $9E00
0001EF1A 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001EF1E AE00                       		dc.w $AE00
0001EF20 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001EF24 BE00                       		dc.w $BE00
0001EF26 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001EF2A EE00                       		dc.w $EE00
0001EF2C 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001EF30 F2E0                       		dc.w $F2E0
0001EF32 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001EF36 F400                       		dc.w $F400
0001EF38 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001EF3C F520                       		dc.w $F520
0001EF3E 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001EF42 F2E0                       		dc.w $F2E0
0001EF44 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001EF48 F400                       		dc.w $F400
0001EF4A 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001EF4E F520                       		dc.w $F520
0001EF50                            ; ---------------------------------------------------------------------------
0001EF50                            ; Pattern load cues - GHZ animals
0001EF50                            ; ---------------------------------------------------------------------------
0001EF50 0001                       PLC_GHZAnimals:	dc.w 1
0001EF52 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001EF56 B000                       		dc.w $B000
0001EF58 0000 0000                  		dc.l Nem_Flicky		; flicky
0001EF5C B240                       		dc.w $B240
0001EF5E                            ; ---------------------------------------------------------------------------
0001EF5E                            ; Pattern load cues - LZ animals
0001EF5E                            ; ---------------------------------------------------------------------------
0001EF5E 0001                       PLC_LZAnimals:	dc.w 1
0001EF60 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001EF64 B000                       		dc.w $B000
0001EF66 0000 0000                  		dc.l Nem_Seal		; seal
0001EF6A B240                       		dc.w $B240
0001EF6C                            ; ---------------------------------------------------------------------------
0001EF6C                            ; Pattern load cues - MZ animals
0001EF6C                            ; ---------------------------------------------------------------------------
0001EF6C 0001                       PLC_MZAnimals:	dc.w 1
0001EF6E 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001EF72 B000                       		dc.w $B000
0001EF74 0000 0000                  		dc.l Nem_Seal		; seal
0001EF78 B240                       		dc.w $B240
0001EF7A                            ; ---------------------------------------------------------------------------
0001EF7A                            ; Pattern load cues - SLZ animals
0001EF7A                            ; ---------------------------------------------------------------------------
0001EF7A 0001                       PLC_SLZAnimals:	dc.w 1
0001EF7C 0000 0000                  		dc.l Nem_Pig		; pig
0001EF80 B000                       		dc.w $B000
0001EF82 0000 0000                  		dc.l Nem_Flicky		; flicky
0001EF86 B240                       		dc.w $B240
0001EF88                            ; ---------------------------------------------------------------------------
0001EF88                            ; Pattern load cues - SYZ animals
0001EF88                            ; ---------------------------------------------------------------------------
0001EF88 0001                       PLC_SYZAnimals:	dc.w 1
0001EF8A 0000 0000                  		dc.l Nem_Pig		; pig
0001EF8E B000                       		dc.w $B000
0001EF90 0000 0000                  		dc.l Nem_Chicken	; chicken
0001EF94 B240                       		dc.w $B240
0001EF96                            ; ---------------------------------------------------------------------------
0001EF96                            ; Pattern load cues - SBZ animals
0001EF96                            ; ---------------------------------------------------------------------------
0001EF96 0001                       PLC_SBZAnimals:	dc.w 1
0001EF98 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001EF9C B000                       		dc.w $B000
0001EF9E 0000 0000                  		dc.l Nem_Chicken	; chicken
0001EFA2 B240                       		dc.w $B240
0001EFA4                            ; ---------------------------------------------------------------------------
0001EFA4                            ; Pattern load cues - special stage results screen
0001EFA4                            ; ---------------------------------------------------------------------------
0001EFA4 0001                       PLC_SpeStResult:dc.w 1
0001EFA6 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001EFAA A820                       		dc.w $A820
0001EFAC 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001EFB0 AA20                       		dc.w $AA20
0001EFB2                            ; ---------------------------------------------------------------------------
0001EFB2                            ; Pattern load cues - ending sequence
0001EFB2                            ; ---------------------------------------------------------------------------
0001EFB2 000E                       PLC_Ending:	dc.w $E
0001EFB4 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001EFB8 0000                       		dc.w 0
0001EFBA 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001EFBE 39A0                       		dc.w $39A0
0001EFC0 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001EFC4 6B00                       		dc.w $6B00
0001EFC6 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001EFCA 7400                       		dc.w $7400
0001EFCC 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001EFD0 78A0                       		dc.w $78A0
0001EFD2 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001EFD6 7C20                       		dc.w $7C20
0001EFD8 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001EFDC A480                       		dc.w $A480
0001EFDE 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001EFE2 AA60                       		dc.w $AA60
0001EFE4 0000 0000                  		dc.l Nem_Chicken	; chicken
0001EFE8 ACA0                       		dc.w $ACA0
0001EFEA 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001EFEE AE60                       		dc.w $AE60
0001EFF0 0000 0000                  		dc.l Nem_Seal		; seal
0001EFF4 B0A0                       		dc.w $B0A0
0001EFF6 0000 0000                  		dc.l Nem_Pig		; pig
0001EFFA B260                       		dc.w $B260
0001EFFC 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F000 B4A0                       		dc.w $B4A0
0001F002 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001F006 B660                       		dc.w $B660
0001F008 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001F00C B8A0                       		dc.w $B8A0
0001F00E                            ; ---------------------------------------------------------------------------
0001F00E                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001F00E                            ; ---------------------------------------------------------------------------
0001F00E 0002                       PLC_TryAgain:	dc.w 2
0001F010 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F014 78A0                       		dc.w $78A0
0001F016 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001F01A 7C20                       		dc.w $7C20
0001F01C 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001F020 B400                       		dc.w $B400
0001F022                            ; ---------------------------------------------------------------------------
0001F022                            ; Pattern load cues - Eggman on SBZ 2
0001F022                            ; ---------------------------------------------------------------------------
0001F022 0002                       PLC_EggmanSBZ2:	dc.w 2
0001F024 0000 0000                  		dc.l Nem_SbzBlock	; block
0001F028 A300                       		dc.w $A300
0001F02A 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001F02E 8000                       		dc.w $8000
0001F030 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F034 9400                       		dc.w $9400
0001F036                            ; ---------------------------------------------------------------------------
0001F036                            ; Pattern load cues - final boss
0001F036                            ; ---------------------------------------------------------------------------
0001F036 0004                       PLC_FZBoss:	dc.w 4
0001F038 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001F03C 7400                       		dc.w $7400
0001F03E 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001F042 6000                       		dc.w $6000
0001F044 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F048 8000                       		dc.w $8000
0001F04A 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001F04E 8E00                       		dc.w $8E00
0001F050 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F054 A540                       		dc.w $A540
0001F056                            ; ---------------------------------------------------------------------------
0001F056                            ; Pattern load cues - Teto boss
0001F056                            ; ---------------------------------------------------------------------------
0001F056 0002                       PLC_TetoBoss:	dc.w 2
0001F058 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001F05C 8000                       		dc.w $8000
0001F05E 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001F062 93A0                       		dc.w $93A0
0001F064 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001F068 9000                       		dc.w $9000
0001F06A                            		; even
0001F06A                            ; ---------------------------------------------------------------------------
0001F06A                            ; Pattern load cues - Truth Nuke
0001F06A                            ; ---------------------------------------------------------------------------
0001F06A 0000                       PLC_TruthNuke:	dc.w 0
0001F06C 0000 0000                  		dc.l Nem_TruthNuke	; GMZ
0001F070 0000                       		dc.w 0
0001F072                            		even
0001F072                            		even
0001F072                            
0001F072                            		incbin	misc\padding.bin
0001F160                            		even
0001F160                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001F5B6                            		even
0001F5B6                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001F64E                            		even
0001F64E                            Nem_Gomer:	incbin	artnem\gomer.bin
0001F790                            		even
0001F790                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001F7DE                            		even
0001F7DE                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001F8F2                            		even
0001F8F2                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
000207BC                            		even
000207BC                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
000248C2                            		even
000248C2                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
000248F6                            		even
000248F6                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
000249B4                            		even
000249B4                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024E5C                            		even
00024E5C                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00024EBA                            		even
00024EBA                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00025AC0                            		even
00025AC0                            Eni_TruthNuke:	incbin	mapeni\truthnuke.bin	; GMZ
00025B9E                            		even
00025B9E                            Nem_TruthNuke:	incbin	artnem\truthnuke.bin	; GMZ: TRVTH NVKE
00029068                            		even
00029068                            ; ---------------------------------------------------------------------------
00029068                            ; Sprite mappings - Sonic
00029068                            ; ---------------------------------------------------------------------------
00029068                            Map_Sonic:
00029068                            	include "_maps\Sonic.asm"
00029068                            Map_a933:
00029068 0000                       Map_a933_0: 	dc.w Map_a933_E0-Map_a933
0002906A 0000                       Map_a933_2: 	dc.w Map_a933_E1-Map_a933
0002906C 0000                       Map_a933_4: 	dc.w Map_a933_EC-Map_a933
0002906E 0000                       Map_a933_6: 	dc.w Map_a933_FC-Map_a933
00029070 0000                       Map_a933_8: 	dc.w Map_a933_10C-Map_a933
00029072 0000                       Map_a933_A: 	dc.w Map_a933_11C-Map_a933
00029074 0000                       Map_a933_C: 	dc.w Map_a933_12C-Map_a933
00029076 0000                       Map_a933_E: 	dc.w Map_a933_141-Map_a933
00029078 0000                       Map_a933_10: 	dc.w Map_a933_14C-Map_a933
0002907A 0000                       Map_a933_12: 	dc.w Map_a933_157-Map_a933
0002907C 0000                       Map_a933_14: 	dc.w Map_a933_16C-Map_a933
0002907E 0000                       Map_a933_16: 	dc.w Map_a933_177-Map_a933
00029080 0000                       Map_a933_18: 	dc.w Map_a933_187-Map_a933
00029082 0000                       Map_a933_1A: 	dc.w Map_a933_1A1-Map_a933
00029084 0000                       Map_a933_1C: 	dc.w Map_a933_1C0-Map_a933
00029086 0000                       Map_a933_1E: 	dc.w Map_a933_1D5-Map_a933
00029088 0000                       Map_a933_20: 	dc.w Map_a933_1EF-Map_a933
0002908A 0000                       Map_a933_22: 	dc.w Map_a933_204-Map_a933
0002908C 0000                       Map_a933_24: 	dc.w Map_a933_21E-Map_a933
0002908E 0000                       Map_a933_26: 	dc.w Map_a933_233-Map_a933
00029090 0000                       Map_a933_28: 	dc.w Map_a933_23E-Map_a933
00029092 0000                       Map_a933_2A: 	dc.w Map_a933_249-Map_a933
00029094 0000                       Map_a933_2C: 	dc.w Map_a933_25E-Map_a933
00029096 0000                       Map_a933_2E: 	dc.w Map_a933_269-Map_a933
00029098 0000                       Map_a933_30: 	dc.w Map_a933_279-Map_a933
0002909A 0000                       Map_a933_32: 	dc.w Map_a933_298-Map_a933
0002909C 0000                       Map_a933_34: 	dc.w Map_a933_2B7-Map_a933
0002909E 0000                       Map_a933_36: 	dc.w Map_a933_2CC-Map_a933
000290A0 0000                       Map_a933_38: 	dc.w Map_a933_2E6-Map_a933
000290A2 0000                       Map_a933_3A: 	dc.w Map_a933_2FB-Map_a933
000290A4 0000                       Map_a933_3C: 	dc.w Map_a933_315-Map_a933
000290A6 0000                       Map_a933_3E: 	dc.w Map_a933_320-Map_a933
000290A8 0000                       Map_a933_40: 	dc.w Map_a933_32B-Map_a933
000290AA 0000                       Map_a933_42: 	dc.w Map_a933_336-Map_a933
000290AC 0000                       Map_a933_44: 	dc.w Map_a933_341-Map_a933
000290AE 0000                       Map_a933_46: 	dc.w Map_a933_356-Map_a933
000290B0 0000                       Map_a933_48: 	dc.w Map_a933_366-Map_a933
000290B2 0000                       Map_a933_4A: 	dc.w Map_a933_37B-Map_a933
000290B4 0000                       Map_a933_4C: 	dc.w Map_a933_38B-Map_a933
000290B6 0000                       Map_a933_4E: 	dc.w Map_a933_396-Map_a933
000290B8 0000                       Map_a933_50: 	dc.w Map_a933_3A1-Map_a933
000290BA 0000                       Map_a933_52: 	dc.w Map_a933_3AC-Map_a933
000290BC 0000                       Map_a933_54: 	dc.w Map_a933_3B7-Map_a933
000290BE 0000                       Map_a933_56: 	dc.w Map_a933_3CC-Map_a933
000290C0 0000                       Map_a933_58: 	dc.w Map_a933_3D7-Map_a933
000290C2 0000                       Map_a933_5A: 	dc.w Map_a933_3EC-Map_a933
000290C4 0000                       Map_a933_5C: 	dc.w Map_a933_3F7-Map_a933
000290C6 0000                       Map_a933_5E: 	dc.w Map_a933_3FD-Map_a933
000290C8 0000                       Map_a933_60: 	dc.w Map_a933_403-Map_a933
000290CA 0000                       Map_a933_62: 	dc.w Map_a933_409-Map_a933
000290CC 0000                       Map_a933_64: 	dc.w Map_a933_40F-Map_a933
000290CE 0000                       Map_a933_66: 	dc.w Map_a933_415-Map_a933
000290D0 0000                       Map_a933_68: 	dc.w Map_a933_420-Map_a933
000290D2 0000                       Map_a933_6A: 	dc.w Map_a933_426-Map_a933
000290D4 0000                       Map_a933_6C: 	dc.w Map_a933_431-Map_a933
000290D6 0000                       Map_a933_6E: 	dc.w Map_a933_437-Map_a933
000290D8 0000                       Map_a933_70: 	dc.w Map_a933_442-Map_a933
000290DA 0000                       Map_a933_72: 	dc.w Map_a933_457-Map_a933
000290DC 0000                       Map_a933_74: 	dc.w Map_a933_476-Map_a933
000290DE 0000                       Map_a933_76: 	dc.w Map_a933_481-Map_a933
000290E0 0000                       Map_a933_78: 	dc.w Map_a933_48C-Map_a933
000290E2 0000                       Map_a933_7A: 	dc.w Map_a933_4A1-Map_a933
000290E4 0000                       Map_a933_7C: 	dc.w Map_a933_4AC-Map_a933
000290E6 0000                       Map_a933_7E: 	dc.w Map_a933_4BC-Map_a933
000290E8 0000                       Map_a933_80: 	dc.w Map_a933_4D1-Map_a933
000290EA 0000                       Map_a933_82: 	dc.w Map_a933_4DC-Map_a933
000290EC 0000                       Map_a933_84: 	dc.w Map_a933_4F1-Map_a933
000290EE 0000                       Map_a933_86: 	dc.w Map_a933_506-Map_a933
000290F0 0000                       Map_a933_88: 	dc.w Map_a933_520-Map_a933
000290F2 0000                       Map_a933_8A: 	dc.w Map_a933_53A-Map_a933
000290F4 0000                       Map_a933_8C: 	dc.w Map_a933_545-Map_a933
000290F6 0000                       Map_a933_8E: 	dc.w Map_a933_555-Map_a933
000290F8 0000                       Map_a933_90: 	dc.w Map_a933_560-Map_a933
000290FA 0000                       Map_a933_92: 	dc.w Map_a933_570-Map_a933
000290FC 0000                       Map_a933_94: 	dc.w Map_a933_57B-Map_a933
000290FE 0000                       Map_a933_96: 	dc.w Map_a933_58B-Map_a933
00029100 0000                       Map_a933_98: 	dc.w Map_a933_59B-Map_a933
00029102 0000                       Map_a933_9A: 	dc.w Map_a933_5B5-Map_a933
00029104 0000                       Map_a933_9C: 	dc.w Map_a933_5CF-Map_a933
00029106 0000                       Map_a933_9E: 	dc.w Map_a933_5DA-Map_a933
00029108 0000                       Map_a933_A0: 	dc.w Map_a933_5EA-Map_a933
0002910A 0000                       Map_a933_A2: 	dc.w Map_a933_5F0-Map_a933
0002910C 0000                       Map_a933_A4: 	dc.w Map_a933_5F6-Map_a933
0002910E 0000                       Map_a933_A6: 	dc.w Map_a933_5FC-Map_a933
00029110 0000                       Map_a933_A8: 	dc.w Map_a933_611-Map_a933
00029112 0000                       Map_a933_AA: 	dc.w Map_a933_621-Map_a933
00029114 0000                       Map_a933_AC: 	dc.w Map_a933_631-Map_a933
00029116 0000                       Map_a933_AE: 	dc.w Map_a933_641-Map_a933
00029118 0000                       Map_a933_B0: 	dc.w Map_a933_64C-Map_a933
0002911A 0000                       Map_a933_B2: 	dc.w Map_a933_657-Map_a933
0002911C 0000                       Map_a933_B4: 	dc.w Map_a933_667-Map_a933
0002911E 0000                       Map_a933_B6: 	dc.w Map_a933_672-Map_a933
00029120 0000                       Map_a933_B8: 	dc.w Map_a933_687-Map_a933
00029122 0000                       Map_a933_BA: 	dc.w Map_a933_688-Map_a933
00029124 0000                       Map_a933_BC: 	dc.w Map_a933_689-Map_a933
00029126 0000                       Map_a933_BE: 	dc.w Map_a933_68A-Map_a933
00029128 0000                       Map_a933_C0: 	dc.w Map_a933_68B-Map_a933
0002912A 0000                       Map_a933_C2: 	dc.w Map_a933_696-Map_a933
0002912C 0000                       Map_a933_C4: 	dc.w Map_a933_697-Map_a933
0002912E 0000                       Map_a933_C6: 	dc.w Map_a933_6A2-Map_a933
00029130 0000                       Map_a933_C8: 	dc.w Map_a933_6A3-Map_a933
00029132 0000                       Map_a933_CA: 	dc.w Map_a933_6A4-Map_a933
00029134 0000                       Map_a933_CC: 	dc.w Map_a933_6A5-Map_a933
00029136 0000                       Map_a933_CE: 	dc.w Map_a933_6B0-Map_a933
00029138 0000                       Map_a933_D0: 	dc.w Map_a933_6B1-Map_a933
0002913A 0000                       Map_a933_D2: 	dc.w Map_a933_6BC-Map_a933
0002913C 0000                       Map_a933_D4: 	dc.w Map_a933_6BD-Map_a933
0002913E 0000                       Map_a933_D6: 	dc.w Map_a933_6BE-Map_a933
00029140 0000                       Map_a933_D8: 	dc.w Map_a933_6BF-Map_a933
00029142 0000                       Map_a933_DA: 	dc.w Map_a933_6CA-Map_a933
00029144 0000                       Map_a933_DC: 	dc.w Map_a933_6CB-Map_a933
00029146 0000                       Map_a933_DE: 	dc.w Map_a933_6D6-Map_a933
00029148 00                         Map_a933_E0: 	dc.b $0
00029149 02                         Map_a933_E1: 	dc.b $2
0002914A ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
0002914F 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00029154 03                         Map_a933_EC: 	dc.b $3
00029155 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002915A FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
0002915F 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00029164 03                         Map_a933_FC: 	dc.b $3
00029165 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002916A FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
0002916F 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00029174 03                         Map_a933_10C: 	dc.b $3
00029175 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002917A FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
0002917F 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00029184 03                         Map_a933_11C: 	dc.b $3
00029185 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002918A 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
0002918F 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00029194 04                         Map_a933_12C: 	dc.b $4
00029195 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
0002919A FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
0002919F FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
000291A4 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
000291A9 02                         Map_a933_141: 	dc.b $2
000291AA EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
000291AF FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
000291B4 02                         Map_a933_14C: 	dc.b $2
000291B5 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
000291BA FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
000291BF 04                         Map_a933_157: 	dc.b $4
000291C0 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000291C5 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
000291CA FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
000291CF 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
000291D4 02                         Map_a933_16C: 	dc.b $2
000291D5 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
000291DA EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
000291DF 03                         Map_a933_177: 	dc.b $3
000291E0 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
000291E5 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
000291EA 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
000291EF 05                         Map_a933_187: 	dc.b $5
000291F0 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
000291F5 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
000291FA FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
000291FF 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00029204 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00029209 06                         Map_a933_1A1: 	dc.b $6
0002920A EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
0002920F EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00029214 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00029219 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
0002921E FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00029223 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00029228 04                         Map_a933_1C0: 	dc.b $4
00029229 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
0002922E ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00029233 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00029238 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
0002923D 05                         Map_a933_1D5: 	dc.b $5
0002923E EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00029243 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00029248 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
0002924D 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00029252 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00029257 04                         Map_a933_1EF: 	dc.b $4
00029258 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
0002925D EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00029262 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00029267 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
0002926C 05                         Map_a933_204: 	dc.b $5
0002926D ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00029272 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00029277 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
0002927C FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00029281 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00029286 04                         Map_a933_21E: 	dc.b $4
00029287 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
0002928C EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00029291 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00029296 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
0002929B 02                         Map_a933_233: 	dc.b $2
0002929C F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
000292A1 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
000292A6 02                         Map_a933_23E: 	dc.b $2
000292A7 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
000292AC F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
000292B1 04                         Map_a933_249: 	dc.b $4
000292B2 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
000292B7 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
000292BC FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
000292C1 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
000292C6 02                         Map_a933_25E: 	dc.b $2
000292C7 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
000292CC F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
000292D1 03                         Map_a933_269: 	dc.b $3
000292D2 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
000292D7 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
000292DC F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
000292E1 06                         Map_a933_279: 	dc.b $6
000292E2 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000292E7 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
000292EC F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
000292F1 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
000292F6 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
000292FB FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00029300 06                         Map_a933_298: 	dc.b $6
00029301 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00029306 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
0002930B EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00029310 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00029315 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
0002931A 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
0002931F 04                         Map_a933_2B7: 	dc.b $4
00029320 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00029325 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
0002932A EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
0002932F 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00029334 05                         Map_a933_2CC: 	dc.b $5
00029335 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002933A ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
0002933F F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00029344 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00029349 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
0002934E 04                         Map_a933_2E6: 	dc.b $4
0002934F FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00029354 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00029359 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
0002935E 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00029363 05                         Map_a933_2FB: 	dc.b $5
00029364 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00029369 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
0002936E F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00029373 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00029378 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
0002937D 02                         Map_a933_315: 	dc.b $2
0002937E EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00029383 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00029388 02                         Map_a933_320: 	dc.b $2
00029389 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002938E FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00029393 02                         Map_a933_32B: 	dc.b $2
00029394 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00029399 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002939E 02                         Map_a933_336: 	dc.b $2
0002939F EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000293A4 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000293A9 04                         Map_a933_341: 	dc.b $4
000293AA EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000293AF EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000293B4 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000293B9 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000293BE 03                         Map_a933_356: 	dc.b $3
000293BF EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000293C4 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000293C9 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000293CE 04                         Map_a933_366: 	dc.b $4
000293CF EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000293D4 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000293D9 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000293DE FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000293E3 03                         Map_a933_37B: 	dc.b $3
000293E4 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000293E9 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000293EE FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000293F3 02                         Map_a933_38B: 	dc.b $2
000293F4 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000293F9 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000293FE 02                         Map_a933_396: 	dc.b $2
000293FF F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00029404 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00029409 02                         Map_a933_3A1: 	dc.b $2
0002940A F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002940F F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00029414 02                         Map_a933_3AC: 	dc.b $2
00029415 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002941A F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002941F 04                         Map_a933_3B7: 	dc.b $4
00029420 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00029425 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002942A EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002942F 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00029434 02                         Map_a933_3CC: 	dc.b $2
00029435 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002943A EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002943F 04                         Map_a933_3D7: 	dc.b $4
00029440 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00029445 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002944A EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002944F 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00029454 02                         Map_a933_3EC: 	dc.b $2
00029455 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002945A EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002945F 01                         Map_a933_3F7: 	dc.b $1
00029460 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00029465 01                         Map_a933_3FD: 	dc.b $1
00029466 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002946B 01                         Map_a933_403: 	dc.b $1
0002946C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00029471 01                         Map_a933_409: 	dc.b $1
00029472 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00029477 01                         Map_a933_40F: 	dc.b $1
00029478 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002947D 02                         Map_a933_415: 	dc.b $2
0002947E F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00029483 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00029488 01                         Map_a933_420: 	dc.b $1
00029489 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002948E 02                         Map_a933_426: 	dc.b $2
0002948F EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00029494 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00029499 01                         Map_a933_431: 	dc.b $1
0002949A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002949F 02                         Map_a933_437: 	dc.b $2
000294A0 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000294A5 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000294AA 04                         Map_a933_442: 	dc.b $4
000294AB ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000294B0 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000294B5 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000294BA 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000294BF 06                         Map_a933_457: 	dc.b $6
000294C0 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
000294C5 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
000294CA 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
000294CF 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
000294D4 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
000294D9 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
000294DE 02                         Map_a933_476: 	dc.b $2
000294DF 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
000294E4 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
000294E9 02                         Map_a933_481: 	dc.b $2
000294EA 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
000294EF EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
000294F4 04                         Map_a933_48C: 	dc.b $4
000294F5 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000294FA F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
000294FF 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00029504 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00029509 02                         Map_a933_4A1: 	dc.b $2
0002950A F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
0002950F F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00029514 03                         Map_a933_4AC: 	dc.b $3
00029515 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
0002951A FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
0002951F 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00029524 04                         Map_a933_4BC: 	dc.b $4
00029525 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002952A F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002952F 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00029534 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00029539 02                         Map_a933_4D1: 	dc.b $2
0002953A EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
0002953F 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
00029544 04                         Map_a933_4DC: 	dc.b $4
00029545 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002954A 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002954F F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00029554 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00029559 04                         Map_a933_4F1: 	dc.b $4
0002955A F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002955F 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00029564 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00029569 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002956E 05                         Map_a933_506: 	dc.b $5
0002956F E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00029574 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00029579 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002957E 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00029583 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00029588 05                         Map_a933_520: 	dc.b $5
00029589 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
0002958E E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00029593 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00029598 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
0002959D 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000295A2 02                         Map_a933_53A: 	dc.b $2
000295A3 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000295A8 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000295AD 03                         Map_a933_545: 	dc.b $3
000295AE EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000295B3 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000295B8 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000295BD 02                         Map_a933_555: 	dc.b $2
000295BE ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000295C3 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000295C8 03                         Map_a933_560: 	dc.b $3
000295C9 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000295CE 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000295D3 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000295D8 02                         Map_a933_570: 	dc.b $2
000295D9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000295DE FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
000295E3 03                         Map_a933_57B: 	dc.b $3
000295E4 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000295E9 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
000295EE E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
000295F3 03                         Map_a933_58B: 	dc.b $3
000295F4 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000295F9 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000295FE F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00029603 05                         Map_a933_59B: 	dc.b $5
00029604 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00029609 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002960E F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00029613 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00029618 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002961D 05                         Map_a933_5B5: 	dc.b $5
0002961E E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00029623 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00029628 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002962D 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00029632 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00029637 02                         Map_a933_5CF: 	dc.b $2
00029638 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002963D F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00029642 03                         Map_a933_5DA: 	dc.b $3
00029643 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00029648 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
0002964D 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00029652 01                         Map_a933_5EA: 	dc.b $1
00029653 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00029658 01                         Map_a933_5F0: 	dc.b $1
00029659 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0002965E 01                         Map_a933_5F6: 	dc.b $1
0002965F F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00029664 04                         Map_a933_5FC: 	dc.b $4
00029665 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
0002966A F705 0808 04               	dc.b $F7, $5, $8, $8, $4
0002966F 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
00029674 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
00029679 03                         Map_a933_611: 	dc.b $3
0002967A F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
0002967F FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
00029684 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00029689 03                         Map_a933_621: 	dc.b $3
0002968A F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
0002968F F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00029694 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00029699 03                         Map_a933_631: 	dc.b $3
0002969A EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
0002969F FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000296A4 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000296A9 02                         Map_a933_641: 	dc.b $2
000296AA F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000296AF F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000296B4 02                         Map_a933_64C: 	dc.b $2
000296B5 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000296BA EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000296BF 03                         Map_a933_657: 	dc.b $3
000296C0 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
000296C5 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
000296CA 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
000296CF 02                         Map_a933_667: 	dc.b $2
000296D0 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
000296D5 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
000296DA 04                         Map_a933_672: 	dc.b $4
000296DB ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
000296E0 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
000296E5 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
000296EA 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
000296EF 00                         Map_a933_687: 	dc.b $0
000296F0 00                         Map_a933_688: 	dc.b $0
000296F1 00                         Map_a933_689: 	dc.b $0
000296F2 00                         Map_a933_68A: 	dc.b $0
000296F3 02                         Map_a933_68B: 	dc.b $2
000296F4 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000296F9 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000296FE 00                         Map_a933_696: 	dc.b $0
000296FF 02                         Map_a933_697: 	dc.b $2
00029700 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00029705 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002970A 00                         Map_a933_6A2: 	dc.b $0
0002970B 00                         Map_a933_6A3: 	dc.b $0
0002970C 00                         Map_a933_6A4: 	dc.b $0
0002970D 02                         Map_a933_6A5: 	dc.b $2
0002970E F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00029713 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00029718 00                         Map_a933_6B0: 	dc.b $0
00029719 02                         Map_a933_6B1: 	dc.b $2
0002971A F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002971F EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00029724 00                         Map_a933_6BC: 	dc.b $0
00029725 00                         Map_a933_6BD: 	dc.b $0
00029726 00                         Map_a933_6BE: 	dc.b $0
00029727 02                         Map_a933_6BF: 	dc.b $2
00029728 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002972D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00029732 00                         Map_a933_6CA: 	dc.b $0
00029733 02                         Map_a933_6CB: 	dc.b $2
00029734 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00029739 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002973E 00                         Map_a933_6D6: 	dc.b $0
00029740 00                         	even
00029740 00                         	even
00029740                            
00029740                            ; ---------------------------------------------------------------------------
00029740                            ; Uncompressed graphics	loading	array for Sonic
00029740                            ; ---------------------------------------------------------------------------
00029740                            SonicDynPLC:
00029740                            	include "_inc\Sonic dynamic pattern load cues.asm"
00029740                            DPLC_33c5:
00029740 0000                       DPLC_33c5_0: 	dc.w DPLC_33c5_E0-DPLC_33c5
00029742 0000                       DPLC_33c5_2: 	dc.w DPLC_33c5_E1-DPLC_33c5
00029744 0000                       DPLC_33c5_4: 	dc.w DPLC_33c5_E6-DPLC_33c5
00029746 0000                       DPLC_33c5_6: 	dc.w DPLC_33c5_ED-DPLC_33c5
00029748 0000                       DPLC_33c5_8: 	dc.w DPLC_33c5_F4-DPLC_33c5
0002974A 0000                       DPLC_33c5_A: 	dc.w DPLC_33c5_FB-DPLC_33c5
0002974C 0000                       DPLC_33c5_C: 	dc.w DPLC_33c5_102-DPLC_33c5
0002974E 0000                       DPLC_33c5_E: 	dc.w DPLC_33c5_10B-DPLC_33c5
00029750 0000                       DPLC_33c5_10: 	dc.w DPLC_33c5_110-DPLC_33c5
00029752 0000                       DPLC_33c5_12: 	dc.w DPLC_33c5_115-DPLC_33c5
00029754 0000                       DPLC_33c5_14: 	dc.w DPLC_33c5_11E-DPLC_33c5
00029756 0000                       DPLC_33c5_16: 	dc.w DPLC_33c5_123-DPLC_33c5
00029758 0000                       DPLC_33c5_18: 	dc.w DPLC_33c5_12A-DPLC_33c5
0002975A 0000                       DPLC_33c5_1A: 	dc.w DPLC_33c5_135-DPLC_33c5
0002975C 0000                       DPLC_33c5_1C: 	dc.w DPLC_33c5_142-DPLC_33c5
0002975E 0000                       DPLC_33c5_1E: 	dc.w DPLC_33c5_14B-DPLC_33c5
00029760 0000                       DPLC_33c5_20: 	dc.w DPLC_33c5_156-DPLC_33c5
00029762 0000                       DPLC_33c5_22: 	dc.w DPLC_33c5_15F-DPLC_33c5
00029764 0000                       DPLC_33c5_24: 	dc.w DPLC_33c5_16A-DPLC_33c5
00029766 0000                       DPLC_33c5_26: 	dc.w DPLC_33c5_173-DPLC_33c5
00029768 0000                       DPLC_33c5_28: 	dc.w DPLC_33c5_178-DPLC_33c5
0002976A 0000                       DPLC_33c5_2A: 	dc.w DPLC_33c5_17D-DPLC_33c5
0002976C 0000                       DPLC_33c5_2C: 	dc.w DPLC_33c5_186-DPLC_33c5
0002976E 0000                       DPLC_33c5_2E: 	dc.w DPLC_33c5_18B-DPLC_33c5
00029770 0000                       DPLC_33c5_30: 	dc.w DPLC_33c5_192-DPLC_33c5
00029772 0000                       DPLC_33c5_32: 	dc.w DPLC_33c5_19F-DPLC_33c5
00029774 0000                       DPLC_33c5_34: 	dc.w DPLC_33c5_1AC-DPLC_33c5
00029776 0000                       DPLC_33c5_36: 	dc.w DPLC_33c5_1B5-DPLC_33c5
00029778 0000                       DPLC_33c5_38: 	dc.w DPLC_33c5_1C0-DPLC_33c5
0002977A 0000                       DPLC_33c5_3A: 	dc.w DPLC_33c5_1C9-DPLC_33c5
0002977C 0000                       DPLC_33c5_3C: 	dc.w DPLC_33c5_1D4-DPLC_33c5
0002977E 0000                       DPLC_33c5_3E: 	dc.w DPLC_33c5_1D9-DPLC_33c5
00029780 0000                       DPLC_33c5_40: 	dc.w DPLC_33c5_1DE-DPLC_33c5
00029782 0000                       DPLC_33c5_42: 	dc.w DPLC_33c5_1E3-DPLC_33c5
00029784 0000                       DPLC_33c5_44: 	dc.w DPLC_33c5_1E8-DPLC_33c5
00029786 0000                       DPLC_33c5_46: 	dc.w DPLC_33c5_1F1-DPLC_33c5
00029788 0000                       DPLC_33c5_48: 	dc.w DPLC_33c5_1F8-DPLC_33c5
0002978A 0000                       DPLC_33c5_4A: 	dc.w DPLC_33c5_201-DPLC_33c5
0002978C 0000                       DPLC_33c5_4C: 	dc.w DPLC_33c5_208-DPLC_33c5
0002978E 0000                       DPLC_33c5_4E: 	dc.w DPLC_33c5_20D-DPLC_33c5
00029790 0000                       DPLC_33c5_50: 	dc.w DPLC_33c5_212-DPLC_33c5
00029792 0000                       DPLC_33c5_52: 	dc.w DPLC_33c5_217-DPLC_33c5
00029794 0000                       DPLC_33c5_54: 	dc.w DPLC_33c5_21C-DPLC_33c5
00029796 0000                       DPLC_33c5_56: 	dc.w DPLC_33c5_225-DPLC_33c5
00029798 0000                       DPLC_33c5_58: 	dc.w DPLC_33c5_22A-DPLC_33c5
0002979A 0000                       DPLC_33c5_5A: 	dc.w DPLC_33c5_233-DPLC_33c5
0002979C 0000                       DPLC_33c5_5C: 	dc.w DPLC_33c5_238-DPLC_33c5
0002979E 0000                       DPLC_33c5_5E: 	dc.w DPLC_33c5_23B-DPLC_33c5
000297A0 0000                       DPLC_33c5_60: 	dc.w DPLC_33c5_23E-DPLC_33c5
000297A2 0000                       DPLC_33c5_62: 	dc.w DPLC_33c5_241-DPLC_33c5
000297A4 0000                       DPLC_33c5_64: 	dc.w DPLC_33c5_244-DPLC_33c5
000297A6 0000                       DPLC_33c5_66: 	dc.w DPLC_33c5_247-DPLC_33c5
000297A8 0000                       DPLC_33c5_68: 	dc.w DPLC_33c5_24C-DPLC_33c5
000297AA 0000                       DPLC_33c5_6A: 	dc.w DPLC_33c5_24F-DPLC_33c5
000297AC 0000                       DPLC_33c5_6C: 	dc.w DPLC_33c5_254-DPLC_33c5
000297AE 0000                       DPLC_33c5_6E: 	dc.w DPLC_33c5_257-DPLC_33c5
000297B0 0000                       DPLC_33c5_70: 	dc.w DPLC_33c5_25C-DPLC_33c5
000297B2 0000                       DPLC_33c5_72: 	dc.w DPLC_33c5_265-DPLC_33c5
000297B4 0000                       DPLC_33c5_74: 	dc.w DPLC_33c5_26A-DPLC_33c5
000297B6 0000                       DPLC_33c5_76: 	dc.w DPLC_33c5_26F-DPLC_33c5
000297B8 0000                       DPLC_33c5_78: 	dc.w DPLC_33c5_274-DPLC_33c5
000297BA 0000                       DPLC_33c5_7A: 	dc.w DPLC_33c5_279-DPLC_33c5
000297BC 0000                       DPLC_33c5_7C: 	dc.w DPLC_33c5_27C-DPLC_33c5
000297BE 0000                       DPLC_33c5_7E: 	dc.w DPLC_33c5_283-DPLC_33c5
000297C0 0000                       DPLC_33c5_80: 	dc.w DPLC_33c5_288-DPLC_33c5
000297C2 0000                       DPLC_33c5_82: 	dc.w DPLC_33c5_28B-DPLC_33c5
000297C4 0000                       DPLC_33c5_84: 	dc.w DPLC_33c5_294-DPLC_33c5
000297C6 0000                       DPLC_33c5_86: 	dc.w DPLC_33c5_29D-DPLC_33c5
000297C8 0000                       DPLC_33c5_88: 	dc.w DPLC_33c5_2A8-DPLC_33c5
000297CA 0000                       DPLC_33c5_8A: 	dc.w DPLC_33c5_2B3-DPLC_33c5
000297CC 0000                       DPLC_33c5_8C: 	dc.w DPLC_33c5_2B8-DPLC_33c5
000297CE 0000                       DPLC_33c5_8E: 	dc.w DPLC_33c5_2BF-DPLC_33c5
000297D0 0000                       DPLC_33c5_90: 	dc.w DPLC_33c5_2C4-DPLC_33c5
000297D2 0000                       DPLC_33c5_92: 	dc.w DPLC_33c5_2CB-DPLC_33c5
000297D4 0000                       DPLC_33c5_94: 	dc.w DPLC_33c5_2D0-DPLC_33c5
000297D6 0000                       DPLC_33c5_96: 	dc.w DPLC_33c5_2D7-DPLC_33c5
000297D8 0000                       DPLC_33c5_98: 	dc.w DPLC_33c5_2DE-DPLC_33c5
000297DA 0000                       DPLC_33c5_9A: 	dc.w DPLC_33c5_2E9-DPLC_33c5
000297DC 0000                       DPLC_33c5_9C: 	dc.w DPLC_33c5_2F4-DPLC_33c5
000297DE 0000                       DPLC_33c5_9E: 	dc.w DPLC_33c5_2F9-DPLC_33c5
000297E0 0000                       DPLC_33c5_A0: 	dc.w DPLC_33c5_300-DPLC_33c5
000297E2 0000                       DPLC_33c5_A2: 	dc.w DPLC_33c5_303-DPLC_33c5
000297E4 0000                       DPLC_33c5_A4: 	dc.w DPLC_33c5_306-DPLC_33c5
000297E6 0000                       DPLC_33c5_A6: 	dc.w DPLC_33c5_309-DPLC_33c5
000297E8 0000                       DPLC_33c5_A8: 	dc.w DPLC_33c5_30E-DPLC_33c5
000297EA 0000                       DPLC_33c5_AA: 	dc.w DPLC_33c5_315-DPLC_33c5
000297EC 0000                       DPLC_33c5_AC: 	dc.w DPLC_33c5_31C-DPLC_33c5
000297EE 0000                       DPLC_33c5_AE: 	dc.w DPLC_33c5_323-DPLC_33c5
000297F0 0000                       DPLC_33c5_B0: 	dc.w DPLC_33c5_328-DPLC_33c5
000297F2 0000                       DPLC_33c5_B2: 	dc.w DPLC_33c5_32D-DPLC_33c5
000297F4 0000                       DPLC_33c5_B4: 	dc.w DPLC_33c5_332-DPLC_33c5
000297F6 0000                       DPLC_33c5_B6: 	dc.w DPLC_33c5_337-DPLC_33c5
000297F8 0000                       DPLC_33c5_B8: 	dc.w DPLC_33c5_33C-DPLC_33c5
000297FA 0000                       DPLC_33c5_BA: 	dc.w DPLC_33c5_33D-DPLC_33c5
000297FC 0000                       DPLC_33c5_BC: 	dc.w DPLC_33c5_33E-DPLC_33c5
000297FE 0000                       DPLC_33c5_BE: 	dc.w DPLC_33c5_33F-DPLC_33c5
00029800 0000                       DPLC_33c5_C0: 	dc.w DPLC_33c5_340-DPLC_33c5
00029802 0000                       DPLC_33c5_C2: 	dc.w DPLC_33c5_345-DPLC_33c5
00029804 0000                       DPLC_33c5_C4: 	dc.w DPLC_33c5_346-DPLC_33c5
00029806 0000                       DPLC_33c5_C6: 	dc.w DPLC_33c5_34B-DPLC_33c5
00029808 0000                       DPLC_33c5_C8: 	dc.w DPLC_33c5_34C-DPLC_33c5
0002980A 0000                       DPLC_33c5_CA: 	dc.w DPLC_33c5_34D-DPLC_33c5
0002980C 0000                       DPLC_33c5_CC: 	dc.w DPLC_33c5_34E-DPLC_33c5
0002980E 0000                       DPLC_33c5_CE: 	dc.w DPLC_33c5_353-DPLC_33c5
00029810 0000                       DPLC_33c5_D0: 	dc.w DPLC_33c5_354-DPLC_33c5
00029812 0000                       DPLC_33c5_D2: 	dc.w DPLC_33c5_359-DPLC_33c5
00029814 0000                       DPLC_33c5_D4: 	dc.w DPLC_33c5_35A-DPLC_33c5
00029816 0000                       DPLC_33c5_D6: 	dc.w DPLC_33c5_35B-DPLC_33c5
00029818 0000                       DPLC_33c5_D8: 	dc.w DPLC_33c5_35C-DPLC_33c5
0002981A 0000                       DPLC_33c5_DA: 	dc.w DPLC_33c5_361-DPLC_33c5
0002981C 0000                       DPLC_33c5_DC: 	dc.w DPLC_33c5_362-DPLC_33c5
0002981E 0000                       DPLC_33c5_DE: 	dc.w DPLC_33c5_367-DPLC_33c5
00029820 00                         DPLC_33c5_E0: 	dc.b $0
00029821 02                         DPLC_33c5_E1: 	dc.b $2
00029822 F000                       	dc.b $F0, $0
00029824 1010                       	dc.b $10, $10
00029826 03                         DPLC_33c5_E6: 	dc.b $3
00029827 5012                       	dc.b $50, $12
00029829 5018                       	dc.b $50, $18
0002982B 201E                       	dc.b $20, $1E
0002982D 03                         DPLC_33c5_ED: 	dc.b $3
0002982E 5021                       	dc.b $50, $21
00029830 5018                       	dc.b $50, $18
00029832 201E                       	dc.b $20, $1E
00029834 03                         DPLC_33c5_F4: 	dc.b $3
00029835 5021                       	dc.b $50, $21
00029837 5018                       	dc.b $50, $18
00029839 2027                       	dc.b $20, $27
0002983B 03                         DPLC_33c5_FB: 	dc.b $3
0002983C 802A                       	dc.b $80, $2A
0002983E 2033                       	dc.b $20, $33
00029840 2036                       	dc.b $20, $36
00029842 04                         DPLC_33c5_102: 	dc.b $4
00029843 7039                       	dc.b $70, $39
00029845 5041                       	dc.b $50, $41
00029847 5047                       	dc.b $50, $47
00029849 104D                       	dc.b $10, $4D
0002984B 02                         DPLC_33c5_10B: 	dc.b $2
0002984C 7039                       	dc.b $70, $39
0002984E B04F                       	dc.b $B0, $4F
00029850 02                         DPLC_33c5_110: 	dc.b $2
00029851 505B                       	dc.b $50, $5B
00029853 8061                       	dc.b $80, $61
00029855 04                         DPLC_33c5_115: 	dc.b $4
00029856 505B                       	dc.b $50, $5B
00029858 506A                       	dc.b $50, $6A
0002985A 5070                       	dc.b $50, $70
0002985C 1076                       	dc.b $10, $76
0002985E 02                         DPLC_33c5_11E: 	dc.b $2
0002985F F4F0                       	dc.b $F4, $F0
00029861 1500                       	dc.b $15, $0
00029863 03                         DPLC_33c5_123: 	dc.b $3
00029864 7039                       	dc.b $70, $39
00029866 3078                       	dc.b $30, $78
00029868 507C                       	dc.b $50, $7C
0002986A 05                         DPLC_33c5_12A: 	dc.b $5
0002986B 5082                       	dc.b $50, $82
0002986D 5088                       	dc.b $50, $88
0002986F 208E                       	dc.b $20, $8E
00029871 5091                       	dc.b $50, $91
00029873 0097                       	dc.b $0, $97
00029875 06                         DPLC_33c5_135: 	dc.b $6
00029876 5082                       	dc.b $50, $82
00029878 1098                       	dc.b $10, $98
0002987A 309A                       	dc.b $30, $9A
0002987C 509E                       	dc.b $50, $9E
0002987E 30A4                       	dc.b $30, $A4
00029880 00A8                       	dc.b $0, $A8
00029882 04                         DPLC_33c5_142: 	dc.b $4
00029883 50A9                       	dc.b $50, $A9
00029885 10AF                       	dc.b $10, $AF
00029887 70B1                       	dc.b $70, $B1
00029889 20B9                       	dc.b $20, $B9
0002988B 05                         DPLC_33c5_14B: 	dc.b $5
0002988C 50BC                       	dc.b $50, $BC
0002988E 30C2                       	dc.b $30, $C2
00029890 70C6                       	dc.b $70, $C6
00029892 20CE                       	dc.b $20, $CE
00029894 10D1                       	dc.b $10, $D1
00029896 04                         DPLC_33c5_156: 	dc.b $4
00029897 50BC                       	dc.b $50, $BC
00029899 10D3                       	dc.b $10, $D3
0002989B 70D5                       	dc.b $70, $D5
0002989D 20DD                       	dc.b $20, $DD
0002989F 05                         DPLC_33c5_15F: 	dc.b $5
000298A0 5082                       	dc.b $50, $82
000298A2 1098                       	dc.b $10, $98
000298A4 008E                       	dc.b $0, $8E
000298A6 70E0                       	dc.b $70, $E0
000298A8 20E8                       	dc.b $20, $E8
000298AA 04                         DPLC_33c5_16A: 	dc.b $4
000298AB 70EB                       	dc.b $70, $EB
000298AD 50F3                       	dc.b $50, $F3
000298AF 10F9                       	dc.b $10, $F9
000298B1 50FB                       	dc.b $50, $FB
000298B3 02                         DPLC_33c5_173: 	dc.b $2
000298B4 70EB                       	dc.b $70, $EB
000298B6 B101                       	dc.b $B1, $1
000298B8 02                         DPLC_33c5_178: 	dc.b $2
000298B9 510D                       	dc.b $51, $D
000298BB 8113                       	dc.b $81, $13
000298BD 04                         DPLC_33c5_17D: 	dc.b $4
000298BE 510D                       	dc.b $51, $D
000298C0 511C                       	dc.b $51, $1C
000298C2 1122                       	dc.b $11, $22
000298C4 5124                       	dc.b $51, $24
000298C6 02                         DPLC_33c5_186: 	dc.b $2
000298C7 510D                       	dc.b $51, $D
000298C9 B12A                       	dc.b $B1, $2A
000298CB 03                         DPLC_33c5_18B: 	dc.b $3
000298CC 70EB                       	dc.b $70, $EB
000298CE 0101                       	dc.b $1, $1
000298D0 8136                       	dc.b $81, $36
000298D2 06                         DPLC_33c5_192: 	dc.b $6
000298D3 513F                       	dc.b $51, $3F
000298D5 1145                       	dc.b $11, $45
000298D7 1147                       	dc.b $11, $47
000298D9 8149                       	dc.b $81, $49
000298DB 0152                       	dc.b $1, $52
000298DD 0153                       	dc.b $1, $53
000298DF 06                         DPLC_33c5_19F: 	dc.b $6
000298E0 513F                       	dc.b $51, $3F
000298E2 2154                       	dc.b $21, $54
000298E4 1157                       	dc.b $11, $57
000298E6 1159                       	dc.b $11, $59
000298E8 815B                       	dc.b $81, $5B
000298EA 0152                       	dc.b $1, $52
000298EC 04                         DPLC_33c5_1AC: 	dc.b $4
000298ED 5164                       	dc.b $51, $64
000298EF 116A                       	dc.b $11, $6A
000298F1 816C                       	dc.b $81, $6C
000298F3 1175                       	dc.b $11, $75
000298F5 05                         DPLC_33c5_1B5: 	dc.b $5
000298F6 5177                       	dc.b $51, $77
000298F8 217D                       	dc.b $21, $7D
000298FA 1180                       	dc.b $11, $80
000298FC 7182                       	dc.b $71, $82
000298FE 218A                       	dc.b $21, $8A
00029900 04                         DPLC_33c5_1C0: 	dc.b $4
00029901 5177                       	dc.b $51, $77
00029903 118D                       	dc.b $11, $8D
00029905 818F                       	dc.b $81, $8F
00029907 1198                       	dc.b $11, $98
00029909 05                         DPLC_33c5_1C9: 	dc.b $5
0002990A 513F                       	dc.b $51, $3F
0002990C 819A                       	dc.b $81, $9A
0002990E 1159                       	dc.b $11, $59
00029910 11A3                       	dc.b $11, $A3
00029912 0152                       	dc.b $1, $52
00029914 02                         DPLC_33c5_1D4: 	dc.b $2
00029915 51A5                       	dc.b $51, $A5
00029917 B1AB                       	dc.b $B1, $AB
00029919 02                         DPLC_33c5_1D9: 	dc.b $2
0002991A 505B                       	dc.b $50, $5B
0002991C B1B7                       	dc.b $B1, $B7
0002991E 02                         DPLC_33c5_1DE: 	dc.b $2
0002991F 51A5                       	dc.b $51, $A5
00029921 B1C3                       	dc.b $B1, $C3
00029923 02                         DPLC_33c5_1E3: 	dc.b $2
00029924 505B                       	dc.b $50, $5B
00029926 B1CF                       	dc.b $B1, $CF
00029928 04                         DPLC_33c5_1E8: 	dc.b $4
00029929 51DB                       	dc.b $51, $DB
0002992B 11E1                       	dc.b $11, $E1
0002992D B1E3                       	dc.b $B1, $E3
0002992F 01EF                       	dc.b $1, $EF
00029931 03                         DPLC_33c5_1F1: 	dc.b $3
00029932 51F0                       	dc.b $51, $F0
00029934 11F6                       	dc.b $11, $F6
00029936 B1F8                       	dc.b $B1, $F8
00029938 04                         DPLC_33c5_1F8: 	dc.b $4
00029939 51DB                       	dc.b $51, $DB
0002993B 1204                       	dc.b $12, $4
0002993D B206                       	dc.b $B2, $6
0002993F 01EF                       	dc.b $1, $EF
00029941 03                         DPLC_33c5_201: 	dc.b $3
00029942 51F0                       	dc.b $51, $F0
00029944 11F6                       	dc.b $11, $F6
00029946 B212                       	dc.b $B2, $12
00029948 02                         DPLC_33c5_208: 	dc.b $2
00029949 521E                       	dc.b $52, $1E
0002994B B224                       	dc.b $B2, $24
0002994D 02                         DPLC_33c5_20D: 	dc.b $2
0002994E 510D                       	dc.b $51, $D
00029950 B230                       	dc.b $B2, $30
00029952 02                         DPLC_33c5_212: 	dc.b $2
00029953 521E                       	dc.b $52, $1E
00029955 B23C                       	dc.b $B2, $3C
00029957 02                         DPLC_33c5_217: 	dc.b $2
00029958 510D                       	dc.b $51, $D
0002995A B248                       	dc.b $B2, $48
0002995C 04                         DPLC_33c5_21C: 	dc.b $4
0002995D 5254                       	dc.b $52, $54
0002995F 125A                       	dc.b $12, $5A
00029961 B25C                       	dc.b $B2, $5C
00029963 0268                       	dc.b $2, $68
00029965 02                         DPLC_33c5_225: 	dc.b $2
00029966 7269                       	dc.b $72, $69
00029968 B271                       	dc.b $B2, $71
0002996A 04                         DPLC_33c5_22A: 	dc.b $4
0002996B 5254                       	dc.b $52, $54
0002996D 127D                       	dc.b $12, $7D
0002996F B27F                       	dc.b $B2, $7F
00029971 0268                       	dc.b $2, $68
00029973 02                         DPLC_33c5_233: 	dc.b $2
00029974 7269                       	dc.b $72, $69
00029976 B28B                       	dc.b $B2, $8B
00029978 01                         DPLC_33c5_238: 	dc.b $1
00029979 F297                       	dc.b $F2, $97
0002997B 01                         DPLC_33c5_23B: 	dc.b $1
0002997C F2A7                       	dc.b $F2, $A7
0002997E 01                         DPLC_33c5_23E: 	dc.b $1
0002997F F2B7                       	dc.b $F2, $B7
00029981 01                         DPLC_33c5_241: 	dc.b $1
00029982 F2C7                       	dc.b $F2, $C7
00029984 01                         DPLC_33c5_244: 	dc.b $1
00029985 F2D7                       	dc.b $F2, $D7
00029987 02                         DPLC_33c5_247: 	dc.b $2
00029988 B2E7                       	dc.b $B2, $E7
0002998A 22F3                       	dc.b $22, $F3
0002998C 01                         DPLC_33c5_24C: 	dc.b $1
0002998D F2F6                       	dc.b $F2, $F6
0002998F 02                         DPLC_33c5_24F: 	dc.b $2
00029990 B306                       	dc.b $B3, $6
00029992 2312                       	dc.b $23, $12
00029994 01                         DPLC_33c5_254: 	dc.b $1
00029995 F315                       	dc.b $F3, $15
00029997 02                         DPLC_33c5_257: 	dc.b $2
00029998 5325                       	dc.b $53, $25
0002999A B32B                       	dc.b $B3, $2B
0002999C 04                         DPLC_33c5_25C: 	dc.b $4
0002999D 5337                       	dc.b $53, $37
0002999F 733D                       	dc.b $73, $3D
000299A1 1345                       	dc.b $13, $45
000299A3 0347                       	dc.b $3, $47
000299A5 02                         DPLC_33c5_265: 	dc.b $2
000299A6 D348                       	dc.b $D3, $48
000299A8 34EC                       	dc.b $34, $EC
000299AA 02                         DPLC_33c5_26A: 	dc.b $2
000299AB F528                       	dc.b $F5, $28
000299AD 0538                       	dc.b $5, $38
000299AF 02                         DPLC_33c5_26F: 	dc.b $2
000299B0 F539                       	dc.b $F5, $39
000299B2 0549                       	dc.b $5, $49
000299B4 02                         DPLC_33c5_274: 	dc.b $2
000299B5 E356                       	dc.b $E3, $56
000299B7 054A                       	dc.b $5, $4A
000299B9 01                         DPLC_33c5_279: 	dc.b $1
000299BA 8365                       	dc.b $83, $65
000299BC 03                         DPLC_33c5_27C: 	dc.b $3
000299BD 736E                       	dc.b $73, $6E
000299BF 0376                       	dc.b $3, $76
000299C1 3377                       	dc.b $33, $77
000299C3 02                         DPLC_33c5_283: 	dc.b $2
000299C4 E37B                       	dc.b $E3, $7B
000299C6 054A                       	dc.b $5, $4A
000299C8 01                         DPLC_33c5_288: 	dc.b $1
000299C9 D561                       	dc.b $D5, $61
000299CB 04                         DPLC_33c5_28B: 	dc.b $4
000299CC B399                       	dc.b $B3, $99
000299CE 33A5                       	dc.b $33, $A5
000299D0 03A9                       	dc.b $3, $A9
000299D2 03AA                       	dc.b $3, $AA
000299D4 04                         DPLC_33c5_294: 	dc.b $4
000299D5 B3AB                       	dc.b $B3, $AB
000299D7 33B7                       	dc.b $33, $B7
000299D9 03BB                       	dc.b $3, $BB
000299DB 03BC                       	dc.b $3, $BC
000299DD 05                         DPLC_33c5_29D: 	dc.b $5
000299DE 83BD                       	dc.b $83, $BD
000299E0 13C6                       	dc.b $13, $C6
000299E2 53C8                       	dc.b $53, $C8
000299E4 13CE                       	dc.b $13, $CE
000299E6 03D0                       	dc.b $3, $D0
000299E8 05                         DPLC_33c5_2A8: 	dc.b $5
000299E9 83D1                       	dc.b $83, $D1
000299EB 13DA                       	dc.b $13, $DA
000299ED 53C8                       	dc.b $53, $C8
000299EF 13CE                       	dc.b $13, $CE
000299F1 03D0                       	dc.b $3, $D0
000299F3 02                         DPLC_33c5_2B3: 	dc.b $2
000299F4 83DC                       	dc.b $83, $DC
000299F6 73E5                       	dc.b $73, $E5
000299F8 03                         DPLC_33c5_2B8: 	dc.b $3
000299F9 83ED                       	dc.b $83, $ED
000299FB 23F6                       	dc.b $23, $F6
000299FD 13F9                       	dc.b $13, $F9
000299FF 02                         DPLC_33c5_2BF: 	dc.b $2
00029A00 83FB                       	dc.b $83, $FB
00029A02 7404                       	dc.b $74, $4
00029A04 03                         DPLC_33c5_2C4: 	dc.b $3
00029A05 83ED                       	dc.b $83, $ED
00029A07 240C                       	dc.b $24, $C
00029A09 140F                       	dc.b $14, $F
00029A0B 02                         DPLC_33c5_2CB: 	dc.b $2
00029A0C 5411                       	dc.b $54, $11
00029A0E B417                       	dc.b $B4, $17
00029A10 03                         DPLC_33c5_2D0: 	dc.b $3
00029A11 8423                       	dc.b $84, $23
00029A13 342C                       	dc.b $34, $2C
00029A15 0430                       	dc.b $4, $30
00029A17 03                         DPLC_33c5_2D7: 	dc.b $3
00029A18 7431                       	dc.b $74, $31
00029A1A 1439                       	dc.b $14, $39
00029A1C B43B                       	dc.b $B4, $3B
00029A1E 05                         DPLC_33c5_2DE: 	dc.b $5
00029A1F 7447                       	dc.b $74, $47
00029A21 144F                       	dc.b $14, $4F
00029A23 5451                       	dc.b $54, $51
00029A25 3457                       	dc.b $34, $57
00029A27 045B                       	dc.b $4, $5B
00029A29 05                         DPLC_33c5_2E9: 	dc.b $5
00029A2A 745C                       	dc.b $74, $5C
00029A2C 144F                       	dc.b $14, $4F
00029A2E 5464                       	dc.b $54, $64
00029A30 3457                       	dc.b $34, $57
00029A32 045B                       	dc.b $4, $5B
00029A34 02                         DPLC_33c5_2F4: 	dc.b $2
00029A35 246A                       	dc.b $24, $6A
00029A37 F46D                       	dc.b $F4, $6D
00029A39 03                         DPLC_33c5_2F9: 	dc.b $3
00029A3A 247D                       	dc.b $24, $7D
00029A3C B480                       	dc.b $B4, $80
00029A3E 248C                       	dc.b $24, $8C
00029A40 01                         DPLC_33c5_300: 	dc.b $1
00029A41 B48F                       	dc.b $B4, $8F
00029A43 01                         DPLC_33c5_303: 	dc.b $1
00029A44 549B                       	dc.b $54, $9B
00029A46 01                         DPLC_33c5_306: 	dc.b $1
00029A47 14A1                       	dc.b $14, $A1
00029A49 02                         DPLC_33c5_309: 	dc.b $2
00029A4A E356                       	dc.b $E3, $56
00029A4C 054A                       	dc.b $5, $4A
00029A4E 03                         DPLC_33c5_30E: 	dc.b $3
00029A4F 736E                       	dc.b $73, $6E
00029A51 0376                       	dc.b $3, $76
00029A53 3377                       	dc.b $33, $77
00029A55 03                         DPLC_33c5_315: 	dc.b $3
00029A56 B4A3                       	dc.b $B4, $A3
00029A58 14AF                       	dc.b $14, $AF
00029A5A 34B1                       	dc.b $34, $B1
00029A5C 03                         DPLC_33c5_31C: 	dc.b $3
00029A5D 54B5                       	dc.b $54, $B5
00029A5F B4BB                       	dc.b $B4, $BB
00029A61 1074                       	dc.b $10, $74
00029A63 02                         DPLC_33c5_323: 	dc.b $2
00029A64 F4C7                       	dc.b $F4, $C7
00029A66 24D7                       	dc.b $24, $D7
00029A68 02                         DPLC_33c5_328: 	dc.b $2
00029A69 F4DA                       	dc.b $F4, $DA
00029A6B 14EA                       	dc.b $14, $EA
00029A6D 02                         DPLC_33c5_32D: 	dc.b $2
00029A6E F502                       	dc.b $F5, $2
00029A70 2512                       	dc.b $25, $12
00029A72 02                         DPLC_33c5_332: 	dc.b $2
00029A73 F515                       	dc.b $F5, $15
00029A75 2525                       	dc.b $25, $25
00029A77 02                         DPLC_33c5_337: 	dc.b $2
00029A78 F54B                       	dc.b $F5, $4B
00029A7A 755B                       	dc.b $75, $5B
00029A7C 00                         DPLC_33c5_33C: 	dc.b $0
00029A7D 00                         DPLC_33c5_33D: 	dc.b $0
00029A7E 00                         DPLC_33c5_33E: 	dc.b $0
00029A7F 00                         DPLC_33c5_33F: 	dc.b $0
00029A80 02                         DPLC_33c5_340: 	dc.b $2
00029A81 F4DA                       	dc.b $F4, $DA
00029A83 14EA                       	dc.b $14, $EA
00029A85 00                         DPLC_33c5_345: 	dc.b $0
00029A86 02                         DPLC_33c5_346: 	dc.b $2
00029A87 F4DA                       	dc.b $F4, $DA
00029A89 14EA                       	dc.b $14, $EA
00029A8B 00                         DPLC_33c5_34B: 	dc.b $0
00029A8C 00                         DPLC_33c5_34C: 	dc.b $0
00029A8D 00                         DPLC_33c5_34D: 	dc.b $0
00029A8E 02                         DPLC_33c5_34E: 	dc.b $2
00029A8F F4DA                       	dc.b $F4, $DA
00029A91 14EA                       	dc.b $14, $EA
00029A93 00                         DPLC_33c5_353: 	dc.b $0
00029A94 02                         DPLC_33c5_354: 	dc.b $2
00029A95 F4DA                       	dc.b $F4, $DA
00029A97 14EA                       	dc.b $14, $EA
00029A99 00                         DPLC_33c5_359: 	dc.b $0
00029A9A 00                         DPLC_33c5_35A: 	dc.b $0
00029A9B 00                         DPLC_33c5_35B: 	dc.b $0
00029A9C 02                         DPLC_33c5_35C: 	dc.b $2
00029A9D F4DA                       	dc.b $F4, $DA
00029A9F 14EA                       	dc.b $14, $EA
00029AA1 00                         DPLC_33c5_361: 	dc.b $0
00029AA2 02                         DPLC_33c5_362: 	dc.b $2
00029AA3 F4DA                       	dc.b $F4, $DA
00029AA5 14EA                       	dc.b $14, $EA
00029AA7 00                         DPLC_33c5_367: 	dc.b $0
00029AA8                            	even
00029AA8                            	even
00029AA8                            
00029AA8                            ; ---------------------------------------------------------------------------
00029AA8                            ; Uncompressed graphics	- Sonic
00029AA8                            ; ---------------------------------------------------------------------------
00029AA8                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00034888                            		even
00034888                            ; ---------------------------------------------------------------------------
00034888                            ; Compressed graphics - various
00034888                            ; ---------------------------------------------------------------------------
00034888                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0003498C                            		even
0003498C                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
000349C6                            		even
000349C6                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00034B5C                            		even
00034B5C                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00034CA4                            		even
00034CA4                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00034DAE                            		even
00034DAE                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00034E00                            		even
00034E00                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00035048                            		even
00035048                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
000351CE                            		even
000351CE                            ; ---------------------------------------------------------------------------
000351CE                            ; Sprite mappings - walls of the special stage
000351CE                            ; ---------------------------------------------------------------------------
000351CE                            Map_SSWalls:
000351CE                            	include "_maps\SSwalls.asm"
000351CE                            ; ---------------------------------------------------------------------------
000351CE                            ; Sprite mappings - walls of the special stage
000351CE                            ; ---------------------------------------------------------------------------
000351CE 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
000351D2 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
000351D6 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
000351DA 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
000351DE 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
000351E2 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
000351E6 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
000351EA 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
000351EE 01                         byte_2C584:	dc.b 1
000351EF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000351F4 01                         byte_2C58A:	dc.b 1
000351F5 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
000351FA 01                         byte_2C590:	dc.b 1
000351FB F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00035200 01                         byte_2C596:	dc.b 1
00035201 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00035206 01                         byte_2C59C:	dc.b 1
00035207 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003520C 01                         byte_2C5A2:	dc.b 1
0003520D F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00035212 01                         byte_2C5A8:	dc.b 1
00035213 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00035218 01                         byte_2C5AE:	dc.b 1
00035219 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003521E 01                         byte_2C5B4:	dc.b 1
0003521F F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00035224 01                         byte_2C5BA:	dc.b 1
00035225 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003522A 01                         byte_2C5C0:	dc.b 1
0003522B F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00035230 01                         byte_2C5C6:	dc.b 1
00035231 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00035236 01                         byte_2C5CC:	dc.b 1
00035237 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003523C 01                         byte_2C5D2:	dc.b 1
0003523D F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00035242 01                         byte_2C5D8:	dc.b 1
00035243 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00035248 01                         byte_2C5DE:	dc.b 1
00035249 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003524E                            		even
0003524E                            		even
0003524E                            ; ---------------------------------------------------------------------------
0003524E                            ; Compressed graphics - special stage
0003524E                            ; ---------------------------------------------------------------------------
0003524E                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00035B86                            		even
00035B86                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00035CD4                            		even
00035CD4                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00037166                            		even
00037166                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00037466                            		even
00037466                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003795A                            		even
0003795A                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00037A48                            		even
00037A48                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00037B18                            		even
00037B18                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00037C0E                            		even
00037C0E                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00037C6C                            		even
00037C6C                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00037CFE                            		even
00037CFE                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00037DC0                            		even
00037DC0                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00037E8E                            		even
00037E8E                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00037F5A                            		even
00037F5A                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00038022                            		even
00038022                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
000380EC                            		even
000380EC                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000381BC                            		even
000381BC                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000383B0                            		even
000383B0                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00038518                            		even
00038518                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000385C8                            		even
000385C8                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000386A2                            		even
000386A2                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00038726                            		even
00038726                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000388A4                            		even
000388A4                            ; ---------------------------------------------------------------------------
000388A4                            ; Compressed graphics - GHZ stuff
000388A4                            ; ---------------------------------------------------------------------------
000388A4                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
000388EE                            		even
000388EE                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00038A08                            		even
00038A08                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00038AF4                            		even
00038AF4                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00038B3C                            		even
00038B3C                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00038CDA                            		even
00038CDA                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00038D96                            		even
00038D96                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00038FAA                            		even
00038FAA                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
000390D6                            		even
000390D6                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00039204                            		even
00039204                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000392A2                            		even
000392A2                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00039302                            		even
00039302                            ; ---------------------------------------------------------------------------
00039302                            ; Compressed graphics - LZ stuff
00039302                            ; ---------------------------------------------------------------------------
00039302                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00039426                            		even
00039426                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00039C1A                            		even
00039C1A                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00039D9A                            		even
00039D9A                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00039F04                            		even
00039F04                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003A55A                            		even
0003A55A                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0003A610                            		even
0003A610                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003A6B2                            		even
0003A6B2                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003A80E                            		even
0003A80E                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0003A872                            		even
0003A872                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003A9C4                            		even
0003A9C4                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003AEA6                            		even
0003AEA6                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003B016                            		even
0003B016                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0003B2CE                            		even
0003B2CE                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003B406                            		even
0003B406                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0003B530                            		even
0003B530                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0003B640                            		even
0003B640                            ; ---------------------------------------------------------------------------
0003B640                            ; Compressed graphics - MZ stuff
0003B640                            ; ---------------------------------------------------------------------------
0003B640                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0003B8CE                            		even
0003B8CE                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
0003B98C                            		even
0003B98C                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
0003BA44                            		even
0003BA44                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0003BA98                            		even
0003BA98                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0003BD6A 00                         		even
0003BD6A                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
0003C680                            		even
0003C680                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003C7E4                            		even
0003C7E4                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
0003C86C                            		even
0003C86C                            ; ---------------------------------------------------------------------------
0003C86C                            ; Compressed graphics - SLZ stuff
0003C86C                            ; ---------------------------------------------------------------------------
0003C86C                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003CAA8                            		even
0003CAA8                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
0003CBEE                            		even
0003CBEE                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003CE32                            		even
0003CE32                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
0003CE94                            		even
0003CE94                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0003CF76                            		even
0003CF76                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0003D158                            		even
0003D158                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0003D264                            		even
0003D264                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003D308                            		even
0003D308                            ; ---------------------------------------------------------------------------
0003D308                            ; Compressed graphics - SYZ stuff
0003D308                            ; ---------------------------------------------------------------------------
0003D308                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0003D472                            		even
0003D472                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0003D4D4                            		even
0003D4D4                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003D5B6                            		even
0003D5B6                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0003D844                            		even
0003D844                            ; ---------------------------------------------------------------------------
0003D844                            ; Compressed graphics - SBZ stuff
0003D844                            ; ---------------------------------------------------------------------------
0003D844                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003D898                            		even
0003D898                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0003DB34                            		even
0003DB34                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003DD38                            		even
0003DD38                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003DED6                            		even
0003DED6                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003E206                            		even
0003E206                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003E3E4                            		even
0003E3E4                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003E43C                            		even
0003E43C                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003E606 00                         		even
0003E606                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003E704                            		even
0003E704                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003E890                            		even
0003E890                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003E8E0                            		even
0003E8E0                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003E938                            		even
0003E938                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003EA34                            		even
0003EA34                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003EB4A                            		even
0003EB4A                            ; ---------------------------------------------------------------------------
0003EB4A                            ; Compressed graphics - enemies
0003EB4A                            ; ---------------------------------------------------------------------------
0003EB4A                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003EFB8 00                         		even
0003EFB8                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003F162 00                         		even
0003F162                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003F524 00                         		even
0003F524                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003F70C                            		even
0003F70C                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003F8C4 00                         		even
0003F8C4                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003FA0E                            		even
0003FA0E                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003FC98                            		even
0003FC98                            Nem_Roller:	incbin	artnem\roller.bin	; roller
000402BC                            		even
000402BC                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
000404B2                            		even
000404B2                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00040AD0                            		even
00040AD0                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
00040ED0 00                         		even
00040ED0                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
000411CC                            		even
000411CC                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00041414                            		even
00041414                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
000416AC                            		even
000416AC                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0004188A                            		even
0004188A                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
00041A18                            		even
00041A18                            ; ---------------------------------------------------------------------------
00041A18                            ; Compressed graphics - various
00041A18                            ; ---------------------------------------------------------------------------
00041A18                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
00041F48                            		even
00041F48                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0004203E                            		even
0004203E                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
00042144                            		even
00042144                            Nem_Ring:	incbin	artnem\rings.bin	; rings
00042238                            		even
00042238                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0004277C                            		even
0004277C                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
00042DE2                            		even
00042DE2                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
00042E92                            		even
00042E92                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
00043024                            		even
00043024                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
00043138                            		even
00043138                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0004320A                            		even
0004320A                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
00043686                            		even
00043686                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
00043746                            		even
00043746                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
000438BA                            		even
000438BA                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
00043BBC                            		even
00043BBC                            ; ---------------------------------------------------------------------------
00043BBC                            ; Compressed graphics - continue screen
00043BBC                            ; ---------------------------------------------------------------------------
00043BBC                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00043E6C                            		even
00043E6C                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
000440A6                            		even
000440A6                            ; ---------------------------------------------------------------------------
000440A6                            ; Compressed graphics - animals
000440A6                            ; ---------------------------------------------------------------------------
000440A6                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
000441FE                            		even
000441FE                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0004435A                            		even
0004435A                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
000444D6                            		even
000444D6                            Nem_Seal:	incbin	artnem\seal.bin		; seal
000445F2                            		even
000445F2                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00044728                            		even
00044728                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00044862                            		even
00044862                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
000449BE                            		even
000449BE                            ; ---------------------------------------------------------------------------
000449BE                            ; Compressed graphics - primary patterns and block mappings
000449BE                            ; ---------------------------------------------------------------------------
000449BE                            Blk16_GHZ:	incbin	map16\ghz.bin
000452D2                            		even
000452D2                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00046BE0                            		even
00046BE0                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00047F60                            		even
00047F60                            Blk256_GHZ:	incbin	map256\ghz.bin
0004A39A                            		even
0004A39A                            Blk16_LZ:	incbin	map16\lz.bin
0004AAD4                            		even
0004AAD4                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0004CF28                            		even
0004CF28                            Blk256_LZ:	incbin	map256\lz.bin
0004F8A8                            		even
0004F8A8                            Blk16_MZ:	incbin	map16\mz.bin
00050010                            		even
00050010                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0005294C                            		even
0005294C                            Blk256_MZ:	incbin	map256\mz.bin
00054162                            		even
00054162                            Blk16_SLZ:	incbin	map16\slz.bin
0005482C                            		even
0005482C                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00056780                            		even
00056780                            Blk256_SLZ:	incbin	map256\slz.bin
00056DFA                            		even
00056DFA                            Blk16_SYZ:	incbin	map16\syz.bin
00057A20                            		even
00057A20                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0005BFB2                            		even
0005BFB2                            Blk256_SYZ:	incbin	map256\syz.bin
0005E00E                            		even
0005E00E                            Blk16_SBZ:	incbin	map16\sbz.bin
0005EF56                            		even
0005EF56                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0006191A                            		even
0006191A                            Blk256_SBZ:	incbin	map256\sbz.bin
00064410                            		even
00064410                            Blk16_BHZ:	incbin	map16\bhz.bin
00064C9E                            		even
00064C9E                            Nem_BHZ:	incbin	artnem\8x8bhz.bin	; GHZ primary patterns
00067A9C                            		even
00067A9C                            Blk256_BHZ:	incbin	map256\bhz.bin
000696CA                            		even
000696CA                            ; ---------------------------------------------------------------------------
000696CA                            ; Compressed graphics - bosses and ending sequence
000696CA                            ; ---------------------------------------------------------------------------
000696CA                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00069EE4 00                         		even
00069EE4                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
0006A532                            		even
0006A532                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
0006A5AC                            		even
0006A5AC                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0006A896                            		even
0006A896                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006B11A                            		even
0006B11A                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006BE70 00                         		even
0006BE70                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006C5D8                            		even
0006C5D8                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0006CB58                            		even
0006CB58                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0006CC78                            		even
0006CC78                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0006CE76                            		even
0006CE76                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006E054                            		even
0006E054                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006E998                            		even
0006E998                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006ED6E                            		even
0006ED6E                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006F2FE                            		even
0006F2FE                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006F586                            		even
0006F586                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006FB74 00                         		even
0006FB74                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006FDFC                            		even
0006FDFC                            		incbin	misc\padding2.bin
0006FF00                            		even
0006FF00                            ; ---------------------------------------------------------------------------
0006FF00                            ; Collision data
0006FF00                            ; ---------------------------------------------------------------------------
0006FF00                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00070000                            		even
00070000                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00071000                            		even
00071000                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00072000                            		even
00072000                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
000721B8 00                         		even
000721B8                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00072320                            		even
00072320                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000724B0 00                         		even
000724B0                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
000726A4                            		even
000726A4                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000728AA                            		even
000728AA                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00072B48                            		even
00072B48                            Col_BHZ:	incbin	collide\bhz.bin		; GHZ index
00072CD4                            		even
00072CD4                            ; ---------------------------------------------------------------------------
00072CD4                            ; Special layouts
00072CD4                            ; ---------------------------------------------------------------------------
00072CD4                            SS_1:		incbin	sslayout\1.bin
00072F1C                            		even
00072F1C                            SS_2:		incbin	sslayout\2.bin
000732D4                            		even
000732D4                            SS_3:		incbin	sslayout\3.bin
00073630                            		even
00073630                            SS_4:		incbin	sslayout\4.bin
00073B0A                            		even
00073B0A                            SS_5:		incbin	sslayout\5.bin
00073FBA                            		even
00073FBA                            SS_6:		incbin	sslayout\6.bin
000742AC                            		even
000742AC                            ; ---------------------------------------------------------------------------
000742AC                            ; Animated uncompressed graphics
000742AC                            ; ---------------------------------------------------------------------------
000742AC                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
000744AC                            		even
000744AC                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
000748AC                            		even
000748AC                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00074D2C                            		even
00074D2C                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0007502C                            		even
0007502C                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0007562C                            		even
0007562C                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0007592C                            		even
0007592C                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
000763AC                            		even
000763AC                            
000763AC                            ; ---------------------------------------------------------------------------
000763AC                            ; Level	layout index
000763AC                            ; ---------------------------------------------------------------------------
000763AC 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
000763B2 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
000763B8 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
000763BE 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000763C4 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
000763CA 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
000763D0 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
000763D6 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
000763DC 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
000763E2 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
000763E8 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
000763EE 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
000763F4 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000763FA 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00076400 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00076406 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0007640C 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00076412 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00076418 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007641E 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00076424 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007642A 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00076430 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00076436 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007643C 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00076442 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00076448 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007644E 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00076454 0000 0000 0000             		dc.w Level_BHZ1-Level_Index, Level_BHZbg-Level_Index, byte_68D70-Level_Index
0007645A 0000 0000 0000             		dc.w Level_BHZ2-Level_Index, Level_BHZbg-Level_Index, byte_68E3C-Level_Index
00076460 0000 0000 0000             		dc.w Level_BHZ3-Level_Index, Level_BHZbg-Level_Index, byte_68F84-Level_Index
00076466 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007646C                            
0007646C                            Level_GHZ1:	incbin	levels\ghz1.bin
0007655E                            		even
0007655E 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00076562                            Level_GHZ2:	incbin	levels\ghz2.bin
0007662A                            		even
0007662A 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007662E                            Level_GHZ3:	incbin	levels\ghz3.bin
00076750                            		even
00076750                            Level_GHZbg:	incbin	levels\ghzbg.bin
00076772                            		even
00076772 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00076776 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007677A                            
0007677A                            Level_LZ1:	incbin	levels\lz1.bin
0007687C                            		even
0007687C                            Level_LZbg:	incbin	levels\lzbg.bin
0007697E                            		even
0007697E 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00076982                            Level_LZ2:	incbin	levels\lz2.bin
00076A1C                            		even
00076A1C 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00076A20                            Level_LZ3:	incbin	levels\lz3.bin
00076B3A                            		even
00076B3A 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00076B3E                            Level_SBZ3:	incbin	levels\sbz3.bin
00076BF8                            		even
00076BF8 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00076BFC                            
00076BFC                            Level_MZ1:	incbin	levels\mz1.bin
00076C9A                            		even
00076C9A                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00076D14                            		even
00076D14                            Level_MZ2:	incbin	levels\mz2.bin
00076DB8                            		even
00076DB8                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00076E4A                            		even
00076E4A 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00076E4E                            Level_MZ3:	incbin	levels\mz3.bin
00076F30                            		even
00076F30                            Level_MZ3bg:	incbin	levels\mz3bg.bin
00076FD4 00                         		even
00076FD4 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00076FD8 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00076FDC                            
00076FDC                            Level_SLZ1:	incbin	levels\slz1.bin
000770EE                            		even
000770EE                            Level_SLZbg:	incbin	levels\slzbg.bin
00077108                            		even
00077108                            Level_SLZ2:	incbin	levels\slz2.bin
000771F8                            		even
000771F8                            Level_SLZ3:	incbin	levels\slz3.bin
00077312                            		even
00077312 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00077316                            
00077316                            Level_SYZ1:	incbin	levels\syz1.bin
000773D2 00                         		even
000773D2                            Level_SYZbg:	incbin	levels\syzbg.bin
0007740C                            		even
0007740C 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00077410                            Level_SYZ2:	incbin	levels\syz2.bin
00077514                            		even
00077514 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00077518                            Level_SYZ3:	incbin	levels\syz3.bin
00077672 00                         		even
00077672 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00077676 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007767A                            
0007767A                            Level_SBZ1:	incbin	levels\sbz1.bin
0007779C                            		even
0007779C                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
000777DA                            		even
000777DA                            Level_SBZ2:	incbin	levels\sbz2.bin
0007791C                            		even
0007791C                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00077A86                            		even
00077A86 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00077A8A 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00077A8E                            Level_End:	incbin	levels\ending.bin
00077ABE 00                         		even
00077ABE 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00077AC2                            Level_BHZ1:	incbin	levels\bhz1.bin
00077BB4                            		even
00077BB4                            
00077BB4                            Level_BHZ2:	incbin	levels\bhz2.bin
00077C7C                            		even
00077C7C                            
00077C7C                            Level_BHZ3:	incbin	levels\bhz3.bin
00077D9E                            		even
00077D9E                            Level_BHZbg:	incbin	levels\bhzbg.bin
00077EA0                            		even
00077EA0                            ; ---------------------------------------------------------------------------
00077EA0                            ; Animated uncompressed giant ring graphics
00077EA0                            ; ---------------------------------------------------------------------------
00077EA0                            Art_BigRing:	incbin	artunc\bigring.bin
00078AE0                            		even
00078AE0                            
00078AE0                            		incbin	misc\padding3.bin
00078B7C                            		even
00078B7C                            
00078B7C                            ; ---------------------------------------------------------------------------
00078B7C                            ; Sprite locations index
00078B7C                            ; ---------------------------------------------------------------------------
00078B7C 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B80 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B84 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B88 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B8C 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B90 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B94 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B98 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B9C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BA0 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BA4 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BA8 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BAC 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BB0 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BB4 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BB8 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BBC 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BC0 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BC4 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BC8 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BCC 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BD0 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BD4 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BD8 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BDC 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BE0 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BE4 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BE8 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BEC 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BF0 0000 0000                  		dc.w ObjPos_BHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BF4 0000 0000                  		dc.w ObjPos_BHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BF8 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BFC                            ObjPos_LZxpf_Index:
00078BFC 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00078C00 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_LZxpf_Index, ObjPos_LZ2pf2-ObjPos_LZxpf_Index
00078C04 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_LZxpf_Index, ObjPos_LZ3pf2-ObjPos_LZxpf_Index
00078C08 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00078C0C                            
00078C0C                            ObjPos_SBZ1pf_Index:
00078C0C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00078C10 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf4-ObjPos_SBZ1pf_Index
00078C14 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf6-ObjPos_SBZ1pf_Index
00078C18 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00078C1C FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00078C22                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
00079492                            		even
00079492                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
00079762                            		even
00079762                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0007A146                            		even
0007A146                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0007A4EE                            		even
0007A4EE                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0007A824                            		even
0007A824                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0007AD3A                            		even
0007AD3A                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0007B1D2                            		even
0007B1D2                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0007B204                            		even
0007B204                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007B236                            		even
0007B236                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007B268                            		even
0007B268                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0007B29A                            		even
0007B29A                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0007B2E4                            		even
0007B2E4                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0007B322                            		even
0007B322                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0007B62E                            		even
0007B62E                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0007BAF0                            		even
0007BAF0                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0007C078                            		even
0007C078                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0007C0A2                            		even
0007C0A2                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007C50A                            		even
0007C50A                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0007CAEC                            		even
0007CAEC                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0007D15E                            		even
0007D15E                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0007D6C8                            		even
0007D6C8                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0007DCCE                            		even
0007DCCE                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007E40C                            		even
0007E40C                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007EAEA                            		even
0007EAEA                            ObjPos_FZ:	incbin	objpos\fz.bin
0007EB32                            		even
0007EB32                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007EB64                            		even
0007EB64                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007EB96                            		even
0007EB96                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0007EBC8                            		even
0007EBC8                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007EBFA                            		even
0007EBFA                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007EC2C                            		even
0007EC2C                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007EC64                            		even
0007EC64                            ObjPos_End:	incbin	objpos\ending.bin
0007EDC0                            		even
0007EDC0                            ObjPos_BHZ1:	incbin	objpos\bhz1.bin
0007F3D2                            		even
0007F3D2                            ObjPos_BHZ2:	incbin	objpos\bhz2.bin
0007F996                            		even
0007F996                            ObjPos_BHZ3:	incbin	objpos\bhz3.bin
00080050                            		even
00080050 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00080056                            ; ---------------------------------------------------------------------------
00080056                            		incbin	misc\padding4.bin
00080680                            		even
00080680                            
00080680                                            include "MegaPCM.asm"                   ; ++ ADD THIS LINE
00080680                            
00080680                            ; ==============================================================================
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; Mega PCM 2.0 - DAC Sound Driver
00080680                            ;
00080680                            ; Documentation, examples and source code are available at:
00080680                            ; - https://github.com/vladikcomper/MegaPCM/tree/2.x
00080680                            ;
00080680                            ; (c) 2012-2024, Vladikcomper
00080680                            ; ------------------------------------------------------------------------------
00080680                            
00080680                            ; ==============================================================================
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; Constants
00080680                            ; ------------------------------------------------------------------------------
00080680                            
00080680                            
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; Definitions for sample table
00080680                            ; ------------------------------------------------------------------------------
00080680                            
00080680 =00000001                  FLAGS_SFX:		equ	$01		; sample is SFX, normal drums cannot interrupt it
00080680 =00000002                  FLAGS_LOOP:		equ	$02		; loop sample indefinitely
00080680                            
00080680 =00000000                  TYPE_NONE:		equ	$00
00080680 =00000050                  TYPE_PCM:		equ	'P'
00080680 =00000054                  TYPE_PCM_TURBO:	equ	'T'
00080680 =00000044                  TYPE_DPCM:		equ	'D'
00080680                            
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; Maximum playback rates:
00080680 =00007D00                  TYPE_PCM_TURBO_MAX_RATE:	equ	32000 ; Hz
00080680 =0000620C                  TYPE_PCM_MAX_RATE:			equ	25100 ; Hz
00080680 =00005078                  TYPE_DPCM_MAX_RATE:			equ	20600 ; Hz
00080680                            
00080680                            ; Internal driver's base rates for pitched playback.
00080680                            ; NOTICE: Actual max rates are slightly lower,
00080680                            ; because the highest pitch is 255/256, not 256/256.
00080680 =00006278                  TYPE_PCM_BASE_RATE:			equ	25208 ; Hz
00080680 =000050D3                  TYPE_DPCM_BASE_RATE:		equ	20691 ; Hz
00080680                            
00080680                            
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; Return error codes for `MegaPCM_LoadSampleTable`
00080680                            ; ------------------------------------------------------------------------------
00080680                            
00080680 =00000001                  MPCM_ST_TOO_MANY_SAMPLES:			equ	$01
00080680 =00000002                  MPCM_ST_UNKNOWN_SAMPLE_TYPE:		equ	$02
00080680                            
00080680 =00000010                  MPCM_ST_PITCH_NOT_SET:				equ	$10
00080680                            
00080680 =00000020                  MPCM_ST_WAVE_INVALID_HEADER:		equ	$20
00080680 =00000021                  MPCM_ST_WAVE_BAD_AUDIO_FORMAT:		equ	$21
00080680 =00000022                  MPCM_ST_WAVE_NOT_MONO:				equ	$22
00080680 =00000023                  MPCM_ST_WAVE_NOT_8BIT:				equ	$23
00080680 =00000024                  MPCM_ST_WAVE_BAD_SAMPLE_RATE:		equ	$24
00080680 =00000025                  MPCM_ST_WAVE_MISSING_DATA_CHUNK:	equ	$25
00080680                            
00080680                            
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; System Ports used by Mega PCM
00080680                            ; ------------------------------------------------------------------------------
00080680                            
00080680 =00A00000                  MPCM_Z80_RAM:		equ		$A00000
00080680 =00A11100                  MPCM_Z80_BUSREQ:	equ		$A11100
00080680 =00A11200                  MPCM_Z80_RESET:		equ		$A11200
00080680                            
00080680 =00A04000                  MPCM_YM2612_A0:		equ		$A04000
00080680 =00A04001                  MPCM_YM2612_D0:		equ		$A04001
00080680 =00A04002                  MPCM_YM2612_A1:		equ		$A04002
00080680 =00A04003                  MPCM_YM2612_D1:		equ		$A04003
00080680                            
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; Z80 equates
00080680                            ; ------------------------------------------------------------------------------
00080680                            
00080680 =00001FC3                  Z_MPCM_DriverReady:	equ $1fc3
00080680 =00001FC2                  Z_MPCM_CommandInput:	equ $1fc2
00080680 =00001FC4                  Z_MPCM_VolumeInput:	equ $1fc4
00080680 =00001FC5                  Z_MPCM_SFXVolumeInput:	equ $1fc5
00080680 =00001FC6                  Z_MPCM_PanInput:	equ $1fc6
00080680 =00001FC7                  Z_MPCM_SFXPanInput:	equ $1fc7
00080680 =00001FDD                  Z_MPCM_LoopId:	equ $1fdd
00080680 =00001FDC                  Z_MPCM_ActiveSamplePitch:	equ $1fdc
00080680 =00001FE2                  Z_MPCM_VBlankActive:	equ $1fe2
00080680 =00001FE3                  Z_MPCM_CalibrationApplied:	equ $1fe3
00080680 =00001FE4                  Z_MPCM_CalibrationScore_ROM:	equ $1fe4
00080680 =00001FE6                  Z_MPCM_CalibrationScore_RAM:	equ $1fe6
00080680 =00001FE8                  Z_MPCM_LastErrorCode:	equ $1fe8
00080680 =00001976                  Z_MPCM_SampleTable:	equ $1976
00080680 =00000001                  Z_MPCM_COMMAND_STOP:	equ $1
00080680 =00000002                  Z_MPCM_COMMAND_PAUSE:	equ $2
00080680 =00000001                  Z_MPCM_LOOP_IDLE:	equ $1
00080680 =00000002                  Z_MPCM_LOOP_PAUSE:	equ $2
00080680 =00000010                  Z_MPCM_LOOP_PCM:	equ $10
00080680 =00000018                  Z_MPCM_LOOP_PCM_TURBO:	equ $18
00080680 =00000020                  Z_MPCM_LOOP_DPCM:	equ $20
00080680 =00000080                  Z_MPCM_LOOP_CALIBRATION:	equ $80
00080680 =00000002                  Z_MPCM_ERROR__BAD_INTERRUPT:	equ $2
00080680 =00000001                  Z_MPCM_ERROR__BAD_SAMPLE_TYPE:	equ $1
00080680 =00000080                  Z_MPCM_ERROR__UNKNOWN_COMMAND:	equ $80
00080680                            
00080680                            ; ==============================================================================
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; Macros
00080680                            ; ------------------------------------------------------------------------------
00080680                            
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; Macro to generate sample record in a sample table
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; ARGUMENTS:
00080680                            ;	type - Sample type (TYPE_PCM, TYPE_DPCM, TYPE_PCM_TURBO or TYPE_NONE)
00080680                            ;	samplePtr - Sample pointer/name (assigned via `incdac` macro)
00080680                            ;	sampleRateHz? - (Optional) Playback rate in Hz, auto-detected for .WAV
00080680                            ;	flags? - (Optional) Additional flags (e.g. FLAGS_SFX or FLAGS_LOOP)
00080680                            ; ------------------------------------------------------------------------------
00080680                            
00080680                            dcSample: macro	type, samplePtr, sampleRateHz, flags
00080680                            	if narg>4
00080680                            		inform 2, "Too many arguments. USAGE: dcSample type, samplePtr, sampleRateHz, flags"
00080680                            	endif
00080680                            	dc.b	\type					; $00	- type
00080680                            	if \type=TYPE_PCM
00080680                            		if \sampleRateHz+0>TYPE_PCM_MAX_RATE
00080680                            			inform 2, "Invalid sample rate: \sampleRateHz\. TYPE_PCM only supports sample rates <= \#TYPE_PCM_MAX_RATE Hz"
00080680                            		endif
00080680                            		dc.b	\flags+0								; $01	- flags (optional)
00080680                            		dc.b	(\sampleRateHz+0)*256/TYPE_PCM_BASE_RATE; $02	- pitch (optional for .WAV files)
00080680                            		dc.b	0										; $03	- <RESERVED>
00080680                            		dc.l	\samplePtr								; $04	- start offset
00080680                            		dc.l	\samplePtr\_End							; $08	- end offset
00080680                            	elseif \type=TYPE_PCM_TURBO
00080680                            		if (\sampleRateHz+0<>TYPE_PCM_TURBO_MAX_RATE)&(\sampleRateHz+0<>0)
00080680                            			inform 2, "Invalid sample rate: \sampleRateHz\. TYPE_PCM_TURBO only supports sample rate of \#TYPE_PCM_TURBO_MAX_RATE Hz"
00080680                            		endif
00080680                            		dc.b	\flags+0								; $01	- flags (optional)
00080680                            		dc.b	$FF										; $02	- pitch (optional for .WAV files)
00080680                            		dc.b	0										; $03	- <RESERVED>
00080680                            		dc.l	\samplePtr								; $04	- start offset
00080680                            		dc.l	\samplePtr\_End							; $08	- end offset
00080680                            	elseif \type=TYPE_DPCM
00080680                            		if \sampleRateHz>TYPE_DPCM_MAX_RATE
00080680                            			inform 2, "Invalid sample rate: \sampleRateHz\. TYPE_DPCM only supports sample rates <= \#TYPE_DPCM_MAX_RATE Hz"
00080680                            		endif
00080680                            		dc.b	\flags+0								; $01	- flags (optional)
00080680                            		dc.b	(\sampleRateHz)*256/TYPE_DPCM_BASE_RATE	; $02	- pitch
00080680                            		dc.b	0										; $03	- <RESERVED>
00080680                            		dc.l	\samplePtr								; $04	- start offset
00080680                            		dc.l	\samplePtr\_End							; $08	- end offset
00080680                            	elseif \type=TYPE_NONE
00080680                            		dc.b	0, 0, 0
00080680                            		dc.l	0, 0
00080680                            	else
00080680                            		inform 2, "Unknown sample type. Please use one of: TYPE_PCM, TYPE_DPCM, TYPE_PCM_TURBO, TYPE_NONE"
00080680                            	endif
00080680                            	endm
00080680                            
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; Macro to include a sample file
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; ARGUMENTS:
00080680                            ;	name - Name assigned to the sample (label)
00080680                            ;	path - Sample's include path (string)
00080680                            ; ------------------------------------------------------------------------------
00080680                            
00080680                            incdac:	macro name, path
00080680                            		even
00080680                            	\name:
00080680                            		incbin	\path
00080680                            	\name\_End:
00080680                            	endm
00080680                            
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; Macro to stop Z80 and take over its bus
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; ARGUMENTS:
00080680                            ;	opBusReq? - (Optional) Custom operand for Z80_BUSREQ
00080680                            ; ------------------------------------------------------------------------------
00080680                            
00080680                            MPCM_stopZ80:	macro opBusReq
00080680                            	pusho
00080680                            	opt		l-		; make sure "@" marks local labels
00080680                            	if narg=1
00080680                            		move.w	#$100, \opBusReq
00080680                            		@wait\@:
00080680                            			btst	#0, \opBusReq
00080680                            			bne.s	@wait\@
00080680                            	else
00080680                            		move.w	#$100, MPCM_Z80_BUSREQ
00080680                            		@wait\@:
00080680                            			btst	#0, MPCM_Z80_BUSREQ
00080680                            			bne.s	@wait\@
00080680                            	endif
00080680                            	popo
00080680                            	endm
00080680                            
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; Macro to start Z80 and release its bus
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; ARGUMENTS:
00080680                            ;	opBusReq? - (Optional) Custom operand for Z80_BUSREQ
00080680                            ; ------------------------------------------------------------------------------
00080680                            
00080680                            MPCM_startZ80:	macro opBusReq
00080680                            	if narg=1
00080680                            		move.w	#0, \opBusReq
00080680                            	else
00080680                            		move.w	#0, MPCM_Z80_BUSREQ
00080680                            	endif
00080680                            	endm
00080680                            
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; Ensures Mega PCM 2 isn't busy writing to YM (other than DAC output obviously)
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; ARGUMENTS:
00080680                            ;	opBusReq? - (Optional) Custom operand for Z80_BUSREQ
00080680                            ; ------------------------------------------------------------------------------
00080680                            
00080680                            MPCM_ensureYMWriteReady:	macro opBusReq
00080680                            	pusho
00080680                            	opt		l-		; make sure "@" marks local labels
00080680                            	@chk_ready\@:
00080680                            		tst.b	(MPCM_Z80_RAM+Z_MPCM_DriverReady).l
00080680                            		bne.s	@ready\@
00080680                            		MPCM_startZ80 \opBusReq
00080680                            		move.w	d0, -(sp)
00080680                            		moveq	#10, d0
00080680                            		dbf		d0, *						; waste 100+ cycles
00080680                            		move.w	(sp)+, d0
00080680                            		MPCM_stopZ80 \opBusReq
00080680                            		bra.s	@chk_ready\@
00080680                            	@ready\@:
00080680                            	popo
00080680                            	endm
00080680                            
00080680                            ; ==============================================================================
00080680                            ; ------------------------------------------------------------------------------
00080680                            ; Mega PCM library blob
00080680                            ; ------------------------------------------------------------------------------
00080680                            
00080680                            MegaPCMLibraryBlob:
00080680                            
00080680 40E7 46FC 2700 2F0B 47F9+  	dc.l	$40E746FC, $27002F0B, $47F900A1, $1100303C, $01003680, $37400100, $41FA0346, $43F900A0
000806A0 0000 323C 1975 12D8 51C9+  	dc.l	$0000323C, $197512D8, $51C9FFFC, $72003741, $010041F9, $00A01FC3, $4E714E71, $37400100
000806C0 3681 6016 36BC 0100 0813+  	dc.l	$36816016, $36BC0100, $08130000, $66FA1210, $36BC0000, $0C010052, $670A303C, $0FFF51C8
000806E0 FFFE 60E0 265F 46DF 4E75+  	dc.l	$FFFE60E0, $265F46DF, $4E7548E7, $3C3847F9, $00A11100, $43F900A0, $1976594F, $747E1A18
00080700 6700 0174 6B00 0160 1818+  	dc.l	$67000174, $6B000160, $18181618, $52482458, $28580C05, $00446700, $00F80C05, $00506708
00080720 0C05 0054 6600 0184 2012+  	dc.l	$0C050054, $66000184, $20120C80, $52494646, $67180C80, $41494646, $67000174, $0C804E49
00080740 5354 6600 00C4 6000 0166+  	dc.l	$53546600, $00C46000, $01660CAA, $57415645, $00086600, $015A45EA, $000C0C92, $666D7420
00080760 6600 014C 0C6A 0100 0008+  	dc.l	$6600014C, $0C6A0100, $00086700, $000C0C6A, $FEFF0008, $6600013C, $0C6A0100, $000A6600
00080780 0136 0C6A 0800 0016 6600+  	dc.l	$01360C6A, $08000016, $66000130, $4A036630, $1EAA000D, $1F6A000C, $00013017, $0C050054
000807A0 660C 0C40 7D00 6600 0116+  	dc.l	$660C0C40, $7D006600, $011676FF, $60120C40, $620C6200, $010A48C0, $E18880FC, $62781600
000807C0 B5CC 6400 00FE 1EAA 0007+  	dc.l	$B5CC6400, $00FE1EAA, $00071F6A, $00060001, $1F6A0005, $00021F6A, $00040003, $201745F2
000807E0 0808 0C92 6461 7461 66D6+  	dc.l	$08080C92, $64617461, $66D61EAA, $00071F6A, $00060001, $1F6A0005, $00021F6A, $00040003
00080800 2017 49F2 0808 504A 300C+  	dc.l	$201749F2, $0808504A, $300C0240, $000198C0, $4A036700, $00B2200A, $D0805240, $E2583E80
00080820 4840 220C D281 5241 E259+  	dc.l	$4840220C, $D2815241, $E2593F41, $00024841, $40E746FC, $270036BC, $01000813, $000066FA
00080840 12C5 12C4 12C3 12C0 12C1+  	dc.l	$12C512C4, $12C312C0, $12C112EF, $000312EF, $000212EF, $000512EF, $000436BC, $000046DF
00080860 51CA FE9C 6040 5348 7000+  	dc.l	$51CAFE9C, $60405348, $700041E8, $FFF4584F, $4CDF1C3C, $4E7540E7, $46FC2700, $36BC0100
00080880 0813 0000 66FA 12C5 12C5+  	dc.l	$08130000, $66FA12C5, $12C512C5, $12C512C5, $12C512C5, $12C512C5, $36BC0000, $46DF41E8
000808A0 000B 51CA FE5A 7001 60C0+  	dc.l	$000B51CA, $FE5A7001, $60C07002, $60BC7020, $60B87021, $60B47022, $60B07023, $60AC7024
000808C0 60A8 7025 60A4 7010 60A0+  	dc.l	$60A87025, $60A47010, $60A033FC, $010000A1, $11000839, $000000A1, $110066F6, $13C000A0
000808E0 1FC2 33FC 0000 00A1 1100+  	dc.l	$1FC233FC, $000000A1, $11004E75, $33FC0100, $00A11100, $08390000, $00A11100, $66F613FC
00080900 0002 00A0 1FC2 33FC 0000+  	dc.l	$000200A0, $1FC233FC, $000000A1, $11004E75, $33FC0100, $00A11100, $08390000, $00A11100
00080920 66F6 13FC 0000 00A0 1FC2+  	dc.l	$66F613FC, $000000A0, $1FC233FC, $000000A1, $11004E75, $33FC0100, $00A11100, $08390000
00080940 00A1 1100 66F6 13FC 0001+  	dc.l	$00A11100, $66F613FC, $000100A0, $1FC233FC, $000000A1, $11004E75, $33FC0100, $00A11100
00080960 0839 0000 00A1 1100 66F6+  	dc.l	$08390000, $00A11100, $66F613C0, $00A01FC4, $33FC0000, $00A11100, $4E7533FC, $010000A1
00080980 1100 0839 0000 00A1 1100+  	dc.l	$11000839, $000000A1, $110066F6, $13C000A0, $1FC533FC, $000000A1, $11004E75, $33FC0100
000809A0 00A1 1100 0839 0000 00A1+  	dc.l	$00A11100, $08390000, $00A11100, $66F613C0, $00A01FC6, $33FC0000, $00A11100, $4E7533FC
000809C0 0100 00A1 1100 0839 0000+  	dc.l	$010000A1, $11000839, $000000A1, $110066F6, $13C000A0, $1FC733FC, $000000A1, $11004E75
000809E0 F3ED 56C3 D118 0000 FEFF+  	dc.l	$F3ED56C3, $D1180000, $FEFFC210, $00C90000, $320900E5, $21006077, $0F770F77, $0F770F77
00080A00 0F77 0F77 0F77 75E1 C94D+  	dc.l	$0F770F77, $0F7775E1, $C94D6567, $6150434D, $20762E32, $2E300000, $C33B00F5, $3E0232E8
00080A20 1FF1 C9F3 3E10 32DD 1F21+  	dc.l	$1FF1C9F3, $3E1032DD, $1F214301, $223900ED, $73DE1FDD, $F933F1C1, $E1D131DD, $1FF508CB
00080A40 FCCB 85E5 7AE6 7F57 CB83+  	dc.l	$FCCB85E5, $7AE67F57, $CB83B320, $03051680, $D578B920, $0BDA6919, $CBBCEBED, $52C38700
00080A60 AF95 5F9C 8557 EBE5 C521+  	dc.l	$AF955F9C, $8557EBE5, $C521C41F, $0830012C, $E5ED7BDE, $1FDD21D1, $1F3AD31F, $CFF32AD9
00080A80 1FED 4BD5 1F11 0003 D908+  	dc.l	$1FED4BD5, $1F110003, $D908AF08, $ED4BD11F, $0AE60FC6, $04473ADC, $1FFD6F21, $00031101
00080AA0 40D9 FB00 3E00 F3ED A0ED+  	dc.l	$40D9FB00, $3E00F3ED, $A0EDA016, $03E2EE00, $D94E0A12, $08FD8530, $012C087D, $D9FB9392
00080AC0 D2C6 00F5 3E00 0000 0000+  	dc.l	$D2C600F5, $3E000000, $0000F1F3, $18E2FB3A, $0900DDBE, $032025F3, $7BD9BD28, $154E0A12
00080AE0 08FD 8530 012C 08D9 FBC5+  	dc.l	$08FD8530, $012C08D9, $FBC50303, $030303C1, $18E5D9FB, $DDCB0A4E, $C29900C9, $3A09003C
00080B00 2100 8044 DDBE 0320 04ED+  	dc.l	$21008044, $DDBE0320, $04ED4BD7, $1FD7C3C6, $0021E100, $36C42336, $00C9D900, $030B030B
00080B20 0018 14F5 C506 8E7B D9BD+  	dc.l	$001814F5, $C5068E7B, $D9BD28EE, $4E0A1208, $FD853001, $2C08D93E, $FF32E21F, $E52329E1
00080B40 10E5 7BD9 BD28 0A4E 0A12+  	dc.l	$10E57BD9, $BD280A4E, $0A1208FD, $8530012C, $08D9D9ED, $4BD11F0A, $E60FC604, $47D9007B
00080B60 D9BD 280A 4E0A 1208 FD85+  	dc.l	$D9BD280A, $4E0A1208, $FD853001, $2C08D93A, $DC1FFD6F, $3AC21FB7, $280EF2BF, $01DDCB0A
00080B80 46CA F118 AF32 C21F 32E2+  	dc.l	$46CAF118, $AF32C21F, $32E21F7B, $D9BD280A, $4E0A1208, $FD853001, $2C08D9C1, $F1FBC93D
00080BA0 CA69 193D 2005 FD2E 0018+  	dc.l	$CA69193D, $2005FD2E, $0018DD3E, $8032E81F, $18D2F33E, $1832DD1F, $21A00222, $3900ED73
00080BC0 DE1F DDF9 33F1 C1E1 D131+  	dc.l	$DE1FDDF9, $33F1C1E1, $D131DD1F, $F5CBFCCB, $85E57AE6, $7F57CB83, $B3200305, $1680D578
00080BE0 B920 0BDA 6919 CBBC EBED+  	dc.l	$B9200BDA, $6919CBBC, $EBED52C3, $1502AF95, $5F9C8557, $EBE5C5ED, $7BDE1FDD, $21D11F3A
00080C00 D31F CFF3 1100 032A D91F+  	dc.l	$D31FCFF3, $1100032A, $D91FED4B, $D51FD921, $00031101, $40D93E00, $F3EDA0ED, $A01603E2
00080C20 5602 D97E 122C 7DD9 FB93+  	dc.l	$5602D97E, $122C7DD9, $FB9392D2, $3802E523, $2309E1F3, $18ECFB3A, $0900DDBE, $03201DF3
00080C40 7BD9 BD28 0D7E 122C D9FB+  	dc.l	$7BD9BD28, $0D7E122C, $D9FBE5C5, $09C1E1C3, $5F02D9FB, $DDCB0A4E, $C21F02C9, $3A09003C
00080C60 2100 8044 DDBE 0320 04ED+  	dc.l	$21008044, $DDBE0320, $04ED4BD7, $1FD7C338, $02214C02, $36362336, $02C9D93E, $00C3AD02
00080C80 F5C5 06BF 7BD9 BD28 F17E+  	dc.l	$F5C506BF, $7BD9BD28, $F17E122C, $D93EFF32, $E21F3E00, $C5010000, $C110E900, $7BD9BD28
00080CA0 037E 122C D93A C21F B728+  	dc.l	$037E122C, $D93AC21F, $B7280EF2, $E002DDCB, $0A46CAF1, $18AF32C2, $1F32E21F, $C1F1FBC9
00080CC0 3DCA 6919 3D20 06CD 5C18+  	dc.l	$3DCA6919, $3D2006CD, $5C18AF18, $EC3E8032, $E81F18E1, $00000000, $00000000, $00000000
00080CE0 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080D00 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080D20 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080D40 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080D60 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080D80 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080DA0 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080DC0 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080DE0 0001 0203 0405 0607 0809+  	dc.l	$00010203, $04050607, $08090A0B, $0C0D0E0F, $10111213, $14151617, $18191A1B, $1C1D1E1F
00080E00 2021 2223 2425 2627 2829+  	dc.l	$20212223, $24252627, $28292A2B, $2C2D2E2F, $30313233, $34353637, $38393A3B, $3C3D3E3F
00080E20 4041 4243 4445 4647 4849+  	dc.l	$40414243, $44454647, $48494A4B, $4C4D4E4F, $50515253, $54555657, $58595A5B, $5C5D5E5F
00080E40 6061 6263 6465 6667 6869+  	dc.l	$60616263, $64656667, $68696A6B, $6C6D6E6F, $70717273, $74757677, $78797A7B, $7C7D7E7F
00080E60 8081 8283 8485 8687 8889+  	dc.l	$80818283, $84858687, $88898A8B, $8C8D8E8F, $90919293, $94959697, $98999A9B, $9C9D9E9F
00080E80 A0A1 A2A3 A4A5 A6A7 A8A9+  	dc.l	$A0A1A2A3, $A4A5A6A7, $A8A9AAAB, $ACADAEAF, $B0B1B2B3, $B4B5B6B7, $B8B9BABB, $BCBDBEBF
00080EA0 C0C1 C2C3 C4C5 C6C7 C8C9+  	dc.l	$C0C1C2C3, $C4C5C6C7, $C8C9CACB, $CCCDCECF, $D0D1D2D3, $D4D5D6D7, $D8D9DADB, $DCDDDEDF
00080EC0 E0E1 E2E3 E4E5 E6E7 E8E9+  	dc.l	$E0E1E2E3, $E4E5E6E7, $E8E9EAEB, $ECEDEEEF, $F0F1F2F3, $F4F5F6F7, $F8F9FAFB, $FCFDFEFF
00080EE0 0809 0A0B 0C0D 0E0F 1010+  	dc.l	$08090A0B, $0C0D0E0F, $10101112, $13141516, $1718191A, $1B1C1D1E, $1E1F2021, $22232425
00080F00 2627 2829 2A2B 2C2C 2D2E+  	dc.l	$26272829, $2A2B2C2C, $2D2E2F30, $31323334, $35363738, $393A3A3B, $3C3D3E3F, $40414243
00080F20 4445 4647 4848 494A 4B4C+  	dc.l	$44454647, $4848494A, $4B4C4D4E, $4F505152, $53545556, $56575859, $5A5B5C5D, $5E5F6061
00080F40 6263 6464 6566 6768 696A+  	dc.l	$62636464, $65666768, $696A6B6C, $6D6E6F70, $71727273, $74757677, $78797A7B, $7C7D7E7F
00080F60 8080 8182 8384 8586 8788+  	dc.l	$80808182, $83848586, $8788898A, $8B8C8D8E, $8E8F9091, $92939495, $96979899, $9A9B9C9C
00080F80 9D9E 9FA0 A1A2 A3A4 A5A6+  	dc.l	$9D9E9FA0, $A1A2A3A4, $A5A6A7A8, $A9AAAAAB, $ACADAEAF, $B0B1B2B3, $B4B5B6B7, $B8B8B9BA
00080FA0 BBBC BDBE BFC0 C1C2 C3C4+  	dc.l	$BBBCBDBE, $BFC0C1C2, $C3C4C5C6, $C6C7C8C9, $CACBCCCD, $CECFD0D1, $D2D3D4D4, $D5D6D7D8
00080FC0 D9DA DBDC DDDE DFE0 E1E2+  	dc.l	$D9DADBDC, $DDDEDFE0, $E1E2E2E3, $E4E5E6E7, $E8E9EAEB, $ECEDEEEF, $F0F0F1F2, $F3F4F5F6
00080FE0 1111 1213 1415 1617 1818+  	dc.l	$11111213, $14151617, $1818191A, $1B1C1D1E, $1E1F2021, $22232425, $25262728, $292A2B2B
00081000 2C2D 2E2F 3031 3232 3334+  	dc.l	$2C2D2E2F, $30313232, $33343536, $37383839, $3A3B3C3D, $3E3F3F40, $41424344, $45454647
00081020 4849 4A4B 4C4C 4D4E 4F50+  	dc.l	$48494A4B, $4C4C4D4E, $4F505152, $52535455, $56575859, $595A5B5C, $5D5E5F5F, $60616263
00081040 6465 6666 6768 696A 6B6C+  	dc.l	$64656666, $6768696A, $6B6C6C6D, $6E6F7071, $72737374, $75767778, $79797A7B, $7C7D7E7F
00081060 8080 8182 8384 8586 8687+  	dc.l	$80808182, $83848586, $86878889, $8A8B8C8D, $8D8E8F90, $91929393, $94959697, $98999A9A
00081080 9B9C 9D9E 9FA0 A0A1 A2A3+  	dc.l	$9B9C9D9E, $9FA0A0A1, $A2A3A4A5, $A6A7A7A8, $A9AAABAC, $ADADAEAF, $B0B1B2B3, $B4B4B5B6
000810A0 B7B8 B9BA BABB BCBD BEBF+  	dc.l	$B7B8B9BA, $BABBBCBD, $BEBFC0C1, $C1C2C3C4, $C5C6C7C7, $C8C9CACB, $CCCDCECE, $CFD0D1D2
000810C0 D3D4 D4D5 D6D7 D8D9 DADB+  	dc.l	$D3D4D4D5, $D6D7D8D9, $DADBDBDC, $DDDEDFE0, $E1E1E2E3, $E4E5E6E7, $E8E8E9EA, $EBECEDEE
000810E0 191A 1B1C 1C1D 1E1F 2020+  	dc.l	$191A1B1C, $1C1D1E1F, $20202122, $23242425, $26272828, $292A2B2C, $2C2D2E2F, $30303132
00081100 3334 3435 3637 3838 393A+  	dc.l	$33343435, $36373838, $393A3B3C, $3C3D3E3F, $40404142, $43444445, $46474848, $494A4B4C
00081120 4C4D 4E4F 5050 5152 5354+  	dc.l	$4C4D4E4F, $50505152, $53545455, $56575858, $595A5B5C, $5C5D5E5F, $60606162, $63646465
00081140 6667 6868 696A 6B6C 6C6D+  	dc.l	$66676868, $696A6B6C, $6C6D6E6F, $70707172, $73747475, $76777878, $797A7B7C, $7C7D7E7F
00081160 8080 8182 8384 8485 8687+  	dc.l	$80808182, $83848485, $86878888, $898A8B8C, $8C8D8E8F, $90909192, $93949495, $96979898
00081180 999A 9B9C 9C9D 9E9F A0A0+  	dc.l	$999A9B9C, $9C9D9E9F, $A0A0A1A2, $A3A4A4A5, $A6A7A8A8, $A9AAABAC, $ACADAEAF, $B0B0B1B2
000811A0 B3B4 B4B5 B6B7 B8B8 B9BA+  	dc.l	$B3B4B4B5, $B6B7B8B8, $B9BABBBC, $BCBDBEBF, $C0C0C1C2, $C3C4C4C5, $C6C7C8C8, $C9CACBCC
000811C0 CCCD CECF D0D0 D1D2 D3D4+  	dc.l	$CCCDCECF, $D0D0D1D2, $D3D4D4D5, $D6D7D8D8, $D9DADBDC, $DCDDDEDF, $E0E0E1E2, $E3E4E4E5
000811E0 2222 2324 2525 2627 2828+  	dc.l	$22222324, $25252627, $2828292A, $2A2B2C2D, $2D2E2F30, $30313233, $33343535, $36373838
00081200 393A 3B3B 3C3D 3E3E 3F40+  	dc.l	$393A3B3B, $3C3D3E3E, $3F404041, $42434344, $45464647, $4849494A, $4B4B4C4D, $4E4E4F50
00081220 5151 5253 5454 5556 5657+  	dc.l	$51515253, $54545556, $56575859, $595A5B5C, $5C5D5E5F, $5F606161, $62636464, $65666767
00081240 6869 6A6A 6B6C 6C6D 6E6F+  	dc.l	$68696A6A, $6B6C6C6D, $6E6F6F70, $71727273, $74757576, $77777879, $7A7A7B7C, $7D7D7E7F
00081260 8080 8182 8283 8485 8586+  	dc.l	$80808182, $82838485, $85868788, $88898A8B, $8B8C8D8D, $8E8F9090, $91929393, $94959696
00081280 9798 9899 9A9B 9B9C 9D9E+  	dc.l	$97989899, $9A9B9B9C, $9D9E9E9F, $A0A1A1A2, $A3A3A4A5, $A6A6A7A8, $A9A9AAAB, $ACACADAE
000812A0 AEAF B0B1 B1B2 B3B4 B4B5+  	dc.l	$AEAFB0B1, $B1B2B3B4, $B4B5B6B7, $B7B8B9B9, $BABBBCBC, $BDBEBFBF, $C0C1C2C2, $C3C4C4C5
000812C0 C6C7 C7C8 C9CA CACB CCCD+  	dc.l	$C6C7C7C8, $C9CACACB, $CCCDCDCE, $CFCFD0D1, $D2D2D3D4, $D5D5D6D7, $D8D8D9DA, $DADBDCDD
000812E0 2A2B 2C2C 2D2E 2E2F 3030+  	dc.l	$2A2B2C2C, $2D2E2E2F, $30303132, $32333434, $35363637, $3838393A, $3A3B3C3C, $3D3E3E3F
00081300 4040 4142 4243 4444 4546+  	dc.l	$40404142, $42434444, $45464647, $4848494A, $4A4B4C4C, $4D4E4E4F, $50505152, $52535454
00081320 5556 5657 5858 595A 5A5B+  	dc.l	$55565657, $5858595A, $5A5B5C5C, $5D5E5E5F, $60606162, $62636464, $65666667, $6868696A
00081340 6A6B 6C6C 6D6E 6E6F 7070+  	dc.l	$6A6B6C6C, $6D6E6E6F, $70707172, $72737474, $75767677, $7878797A, $7A7B7C7C, $7D7E7E7F
00081360 8080 8182 8283 8484 8586+  	dc.l	$80808182, $82838484, $85868687, $8888898A, $8A8B8C8C, $8D8E8E8F, $90909192, $92939494
00081380 9596 9697 9898 999A 9A9B+  	dc.l	$95969697, $9898999A, $9A9B9C9C, $9D9E9E9F, $A0A0A1A2, $A2A3A4A4, $A5A6A6A7, $A8A8A9AA
000813A0 AAAB ACAC ADAE AEAF B0B0+  	dc.l	$AAABACAC, $ADAEAEAF, $B0B0B1B2, $B2B3B4B4, $B5B6B6B7, $B8B8B9BA, $BABBBCBC, $BDBEBEBF
000813C0 C0C0 C1C2 C2C3 C4C4 C5C6+  	dc.l	$C0C0C1C2, $C2C3C4C4, $C5C6C6C7, $C8C8C9CA, $CACBCCCC, $CDCECECF, $D0D0D1D2, $D2D3D4D4
000813E0 3333 3435 3536 3637 3838+  	dc.l	$33333435, $35363637, $38383939, $3A3B3B3C, $3C3D3E3E, $3F3F4041, $41424243, $44444545
00081400 4647 4748 4849 4A4A 4B4B+  	dc.l	$46474748, $48494A4A, $4B4B4C4D, $4D4E4E4F, $50505151, $52535354, $54555656, $57575859
00081420 595A 5A5B 5C5C 5D5D 5E5F+  	dc.l	$595A5A5B, $5C5C5D5D, $5E5F5F60, $60616262, $63636465, $65666667, $68686969, $6A6B6B6C
00081440 6C6D 6E6E 6F6F 7071 7172+  	dc.l	$6C6D6E6E, $6F6F7071, $71727273, $74747575, $76777778, $78797A7A, $7B7B7C7D, $7D7E7E7F
00081460 8080 8181 8283 8384 8485+  	dc.l	$80808181, $82838384, $84858686, $87878889, $898A8A8B, $8C8C8D8D, $8E8F8F90, $90919292
00081480 9393 9495 9596 9697 9898+  	dc.l	$93939495, $95969697, $98989999, $9A9B9B9C, $9C9D9E9E, $9F9FA0A1, $A1A2A2A3, $A4A4A5A5
000814A0 A6A7 A7A8 A8A9 AAAA ABAB+  	dc.l	$A6A7A7A8, $A8A9AAAA, $ABABACAD, $ADAEAEAF, $B0B0B1B1, $B2B3B3B4, $B4B5B6B6, $B7B7B8B9
000814C0 B9BA BABB BCBC BDBD BEBF+  	dc.l	$B9BABABB, $BCBCBDBD, $BEBFBFC0, $C0C1C2C2, $C3C3C4C5, $C5C6C6C7, $C8C8C9C9, $CACBCBCC
000814E0 3B3C 3C3D 3D3E 3E3F 4040+  	dc.l	$3B3C3C3D, $3D3E3E3F, $40404141, $42424343, $44444545, $46464748, $4849494A, $4A4B4B4C
00081500 4C4D 4D4E 4E4F 5050 5151+  	dc.l	$4C4D4D4E, $4E4F5050, $51515252, $53535454, $55555656, $57585859, $595A5A5B, $5B5C5C5D
00081520 5D5E 5E5F 6060 6161 6262+  	dc.l	$5D5E5E5F, $60606161, $62626363, $64646565, $66666768, $6869696A, $6A6B6B6C, $6C6D6D6E
00081540 6E6F 7070 7171 7272 7373+  	dc.l	$6E6F7070, $71717272, $73737474, $75757676, $77787879, $797A7A7B, $7B7C7C7D, $7D7E7E7F
00081560 8080 8181 8282 8383 8484+  	dc.l	$80808181, $82828383, $84848585, $86868788, $8889898A, $8A8B8B8C, $8C8D8D8E, $8E8F9090
00081580 9191 9292 9393 9494 9595+  	dc.l	$91919292, $93939494, $95959696, $97989899, $999A9A9B, $9B9C9C9D, $9D9E9E9F, $A0A0A1A1
000815A0 A2A2 A3A3 A4A4 A5A5 A6A6+  	dc.l	$A2A2A3A3, $A4A4A5A5, $A6A6A7A8, $A8A9A9AA, $AAABABAC, $ACADADAE, $AEAFB0B0, $B1B1B2B2
000815C0 B3B3 B4B4 B5B5 B6B6 B7B8+  	dc.l	$B3B3B4B4, $B5B5B6B6, $B7B8B8B9, $B9BABABB, $BBBCBCBD, $BDBEBEBF, $C0C0C1C1, $C2C2C3C3
000815E0 4444 4545 4646 4747 4848+  	dc.l	$44444545, $46464747, $48484849, $494A4A4B, $4B4C4C4D, $4D4E4E4F, $4F4F5050, $51515252
00081600 5353 5454 5555 5656 5657+  	dc.l	$53535454, $55555656, $56575758, $5859595A, $5A5B5B5C, $5C5D5D5D, $5E5E5F5F, $60606161
00081620 6262 6363 6464 6465 6566+  	dc.l	$62626363, $64646465, $65666667, $67686869, $696A6A6B, $6B6B6C6C, $6D6D6E6E, $6F6F7070
00081640 7171 7272 7273 7374 7475+  	dc.l	$71717272, $72737374, $74757576, $76777778, $78797979, $7A7A7B7B, $7C7C7D7D, $7E7E7F7F
00081660 8080 8081 8182 8283 8384+  	dc.l	$80808081, $81828283, $83848485, $85868687, $87878888, $89898A8A, $8B8B8C8C, $8D8D8E8E
00081680 8E8F 8F90 9091 9192 9293+  	dc.l	$8E8F8F90, $90919192, $92939394, $94959595, $96969797, $98989999, $9A9A9B9B, $9C9C9C9D
000816A0 9D9E 9E9F 9FA0 A0A1 A1A2+  	dc.l	$9D9E9E9F, $9FA0A0A1, $A1A2A2A3, $A3A3A4A4, $A5A5A6A6, $A7A7A8A8, $A9A9AAAA, $AAABABAC
000816C0 ACAD ADAE AEAF AFB0 B0B1+  	dc.l	$ACADADAE, $AEAFAFB0, $B0B1B1B1, $B2B2B3B3, $B4B4B5B5, $B6B6B7B7, $B8B8B8B9, $B9BABABB
000816E0 4C4D 4D4E 4E4E 4F4F 5050+  	dc.l	$4C4D4D4E, $4E4E4F4F, $50505051, $51525252, $53535454, $54555556, $56565757, $58585859
00081700 595A 5A5A 5B5B 5C5C 5C5D+  	dc.l	$595A5A5A, $5B5B5C5C, $5C5D5D5E, $5E5E5F5F, $60606061, $61626262, $63636464, $64656566
00081720 6666 6767 6868 6869 696A+  	dc.l	$66666767, $68686869, $696A6A6A, $6B6B6C6C, $6C6D6D6E, $6E6E6F6F, $70707071, $71727272
00081740 7373 7474 7475 7576 7676+  	dc.l	$73737474, $74757576, $76767777, $78787879, $797A7A7A, $7B7B7C7C, $7C7D7D7E, $7E7E7F7F
00081760 8080 8081 8182 8282 8383+  	dc.l	$80808081, $81828282, $83838484, $84858586, $86868787, $88888889, $898A8A8A, $8B8B8C8C
00081780 8C8D 8D8E 8E8E 8F8F 9090+  	dc.l	$8C8D8D8E, $8E8E8F8F, $90909091, $91929292, $93939494, $94959596, $96969797, $98989899
000817A0 999A 9A9A 9B9B 9C9C 9C9D+  	dc.l	$999A9A9A, $9B9B9C9C, $9C9D9D9E, $9E9E9F9F, $A0A0A0A1, $A1A2A2A2, $A3A3A4A4, $A4A5A5A6
000817C0 A6A6 A7A7 A8A8 A8A9 A9AA+  	dc.l	$A6A6A7A7, $A8A8A8A9, $A9AAAAAA, $ABABACAC, $ACADADAE, $AEAEAFAF, $B0B0B0B1, $B1B2B2B2
000817E0 5555 5656 5657 5757 5858+  	dc.l	$55555656, $56575757, $58585859, $59595A5A, $5A5B5B5B, $5C5C5C5D, $5D5D5E5E, $5E5F5F5F
00081800 6060 6061 6161 6262 6263+  	dc.l	$60606061, $61616262, $62636363, $64646465, $65656666, $66676767, $68686869, $69696A6A
00081820 6A6B 6B6B 6C6C 6C6D 6D6D+  	dc.l	$6A6B6B6B, $6C6C6C6D, $6D6D6E6E, $6E6F6F6F, $70707071, $71717272, $72737373, $74747475
00081840 7575 7676 7677 7777 7878+  	dc.l	$75757676, $76777777, $78787879, $79797A7A, $7A7B7B7B, $7C7C7C7D, $7D7D7E7E, $7E7F7F7F
00081860 8080 8081 8181 8282 8283+  	dc.l	$80808081, $81818282, $82838383, $84848485, $85858686, $86878787, $88888889, $89898A8A
00081880 8A8B 8B8B 8C8C 8C8D 8D8D+  	dc.l	$8A8B8B8B, $8C8C8C8D, $8D8D8E8E, $8E8F8F8F, $90909091, $91919292, $92939393, $94949495
000818A0 9595 9696 9697 9797 9898+  	dc.l	$95959696, $96979797, $98989899, $99999A9A, $9A9B9B9B, $9C9C9C9D, $9D9D9E9E, $9E9F9F9F
000818C0 A0A0 A0A1 A1A1 A2A2 A2A3+  	dc.l	$A0A0A0A1, $A1A1A2A2, $A2A3A3A3, $A4A4A4A5, $A5A5A6A6, $A6A7A7A7, $A8A8A8A9, $A9A9AAAA
000818E0 5D5E 5E5E 5E5F 5F5F 6060+  	dc.l	$5D5E5E5E, $5E5F5F5F, $60606060, $61616161, $62626262, $63636364, $64646465, $65656566
00081900 6666 6667 6767 6868 6868+  	dc.l	$66666667, $67676868, $68686969, $69696A6A, $6A6A6B6B, $6B6C6C6C, $6C6D6D6D, $6D6E6E6E
00081920 6E6F 6F6F 7070 7070 7171+  	dc.l	$6E6F6F6F, $70707070, $71717171, $72727272, $73737374, $74747475, $75757576, $76767677
00081940 7777 7878 7878 7979 7979+  	dc.l	$77777878, $78787979, $79797A7A, $7A7A7B7B, $7B7C7C7C, $7C7D7D7D, $7D7E7E7E, $7E7F7F7F
00081960 8080 8080 8181 8181 8282+  	dc.l	$80808080, $81818181, $82828282, $83838384, $84848485, $85858586, $86868687, $87878888
00081980 8888 8989 8989 8A8A 8A8A+  	dc.l	$88888989, $89898A8A, $8A8A8B8B, $8B8C8C8C, $8C8D8D8D, $8D8E8E8E, $8E8F8F8F, $90909090
000819A0 9191 9191 9292 9292 9393+  	dc.l	$91919191, $92929292, $93939394, $94949495, $95959596, $96969697, $97979898, $98989999
000819C0 9999 9A9A 9A9A 9B9B 9B9C+  	dc.l	$99999A9A, $9A9A9B9B, $9B9C9C9C, $9C9D9D9D, $9D9E9E9E, $9E9F9F9F, $A0A0A0A0, $A1A1A1A1
000819E0 6666 6667 6767 6767 6868+  	dc.l	$66666667, $67676767, $68686868, $68696969, $69696A6A, $6A6A6A6B, $6B6B6B6B, $6C6C6C6C
00081A00 6C6D 6D6D 6D6D 6E6E 6E6E+  	dc.l	$6C6D6D6D, $6D6D6E6E, $6E6E6E6F, $6F6F6F6F, $70707070, $70717171, $71717272, $72727273
00081A20 7373 7373 7474 7474 7475+  	dc.l	$73737373, $74747474, $74757575, $75757676, $76767677, $77777777, $78787878, $78797979
00081A40 7979 7A7A 7A7A 7A7B 7B7B+  	dc.l	$79797A7A, $7A7A7A7B, $7B7B7B7B, $7C7C7C7C, $7C7D7D7D, $7D7D7E7E, $7E7E7E7F, $7F7F7F7F
00081A60 8080 8080 8081 8181 8181+  	dc.l	$80808080, $80818181, $81818282, $82828283, $83838383, $84848484, $84858585, $85858686
00081A80 8686 8687 8787 8787 8888+  	dc.l	$86868687, $87878787, $88888888, $88898989, $89898A8A, $8A8A8A8B, $8B8B8B8B, $8C8C8C8C
00081AA0 8C8D 8D8D 8D8D 8E8E 8E8E+  	dc.l	$8C8D8D8D, $8D8D8E8E, $8E8E8E8F, $8F8F8F8F, $90909090, $90919191, $91919292, $92929293
00081AC0 9393 9393 9494 9494 9495+  	dc.l	$93939393, $94949494, $94959595, $95959696, $96969697, $97979797, $98989898, $98999999
00081AE0 6E6F 6F6F 6F6F 6F6F 7070+  	dc.l	$6E6F6F6F, $6F6F6F6F, $70707070, $70707070, $71717171, $71717172, $72727272, $72727273
00081B00 7373 7373 7373 7474 7474+  	dc.l	$73737373, $73737474, $74747474, $74747575, $75757575, $75767676, $76767676, $76777777
00081B20 7777 7777 7878 7878 7878+  	dc.l	$77777777, $78787878, $78787878, $79797979, $7979797A, $7A7A7A7A, $7A7A7A7B, $7B7B7B7B
00081B40 7B7B 7C7C 7C7C 7C7C 7C7C+  	dc.l	$7B7B7C7C, $7C7C7C7C, $7C7C7D7D, $7D7D7D7D, $7D7E7E7E, $7E7E7E7E, $7E7F7F7F, $7F7F7F7F
00081B60 8080 8080 8080 8080 8181+  	dc.l	$80808080, $80808080, $81818181, $81818182, $82828282, $82828283, $83838383, $83838484
00081B80 8484 8484 8484 8585 8585+  	dc.l	$84848484, $84848585, $85858585, $85868686, $86868686, $86878787, $87878787, $88888888
00081BA0 8888 8888 8989 8989 8989+  	dc.l	$88888888, $89898989, $8989898A, $8A8A8A8A, $8A8A8A8B, $8B8B8B8B, $8B8B8C8C, $8C8C8C8C
00081BC0 8C8C 8D8D 8D8D 8D8D 8D8E+  	dc.l	$8C8C8D8D, $8D8D8D8D, $8D8E8E8E, $8E8E8E8E, $8E8F8F8F, $8F8F8F8F, $90909090, $90909090
00081BE0 7777 7777 7777 7777 7878+  	dc.l	$77777777, $77777777, $78787878, $78787878, $78787878, $78787879, $79797979, $79797979
00081C00 7979 7979 7979 7A7A 7A7A+  	dc.l	$79797979, $79797A7A, $7A7A7A7A, $7A7A7A7A, $7A7A7A7A, $7A7B7B7B, $7B7B7B7B, $7B7B7B7B
00081C20 7B7B 7B7B 7C7C 7C7C 7C7C+  	dc.l	$7B7B7B7B, $7C7C7C7C, $7C7C7C7C, $7C7C7C7C, $7C7C7C7D, $7D7D7D7D, $7D7D7D7D, $7D7D7D7D
00081C40 7D7D 7E7E 7E7E 7E7E 7E7E+  	dc.l	$7D7D7E7E, $7E7E7E7E, $7E7E7E7E, $7E7E7E7E, $7E7F7F7F, $7F7F7F7F, $7F7F7F7F, $7F7F7F7F
00081C60 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808081, $81818181, $81818181, $81818181, $81818282
00081C80 8282 8282 8282 8282 8282+  	dc.l	$82828282, $82828282, $82828282, $82838383, $83838383, $83838383, $83838383, $84848484
00081CA0 8484 8484 8484 8484 8484+  	dc.l	$84848484, $84848484, $84848485, $85858585, $85858585, $85858585, $85858686, $86868686
00081CC0 8686 8686 8686 8686 8687+  	dc.l	$86868686, $86868686, $86878787, $87878787, $87878787, $87878787, $88888888, $88888888
00081CE0 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081D00 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081D20 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081D40 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081D60 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081D80 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081DA0 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081DC0 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081DE0 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $01010101, $01010101, $01010101, $01010101
00081E00 0202 0202 0202 0202 0202+  	dc.l	$02020202, $02020202, $02020202, $02020202, $04040404, $04040404, $04040404, $04040404
00081E20 0808 0808 0808 0808 0808+  	dc.l	$08080808, $08080808, $08080808, $08080808, $10101010, $10101010, $10101010, $10101010
00081E40 2020 2020 2020 2020 2020+  	dc.l	$20202020, $20202020, $20202020, $20202020, $40404040, $40404040, $40404040, $40404040
00081E60 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $FFFFFFFF, $FFFFFFFF, $FFFFFFFF, $FFFFFFFF
00081E80 FEFE FEFE FEFE FEFE FEFE+  	dc.l	$FEFEFEFE, $FEFEFEFE, $FEFEFEFE, $FEFEFEFE, $FCFCFCFC, $FCFCFCFC, $FCFCFCFC, $FCFCFCFC
00081EA0 F8F8 F8F8 F8F8 F8F8 F8F8+  	dc.l	$F8F8F8F8, $F8F8F8F8, $F8F8F8F8, $F8F8F8F8, $F0F0F0F0, $F0F0F0F0, $F0F0F0F0, $F0F0F0F0
00081EC0 E0E0 E0E0 E0E0 E0E0 E0E0+  	dc.l	$E0E0E0E0, $E0E0E0E0, $E0E0E0E0, $E0E0E0E0, $C0C0C0C0, $C0C0C0C0, $C0C0C0C0, $C0C0C0C0
00081EE0 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081F00 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081F20 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081F40 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081F60 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081F80 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081FA0 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081FC0 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081FE0 0000 0000 0000 00D1 C9D5+  	dc.l	$00000000, $000000D1, $C9D511A0, $00B7ED52, $112000ED, $52280FD2, $13167DED, $440F0FE6
00082000 0721 0016 6FE9 D1D5 1329+  	dc.l	$07210016, $6FE9D1D5, $132918D4, $F33E2032, $DD1F2140, $17223900, $ED73DE1F, $DDF933F1
00082020 C1E1 D131 DD1F F508 CBFC+  	dc.l	$C1E1D131, $DD1FF508, $CBFCE5CB, $BA1B7AA3, $3C200305, $167F141C, $D5151D78, $B9200BDA
00082040 6919 CBBC EBED 52C3 7216+  	dc.l	$6919CBBC, $EBED52C3, $7216AF95, $5F9C8557, $EB2B242C, $E5C521C4, $1F083001, $2CE5ED7B
00082060 DE1F 3AD3 1FCF F301 0003+  	dc.l	$DE1F3AD3, $1FCFF301, $00032614, $ED5BD91F, $DD2AD51F, $D908AF08, $ED4BD11F, $0AE60FC6
00082080 0447 3ADC 1FFD 6F21 0003+  	dc.l	$04473ADC, $1FFD6F21, $00031101, $40D9FB0D, $3E800200, $1A136F0A, $0C8624F3, $020C8625
000820A0 02DD 2D28 1DD9 4E0A 1208+  	dc.l	$02DD2D28, $1DD94E0A, $1208FD85, $30012C08, $7DD9FB91, $90D2B416, $F5F1F5F1, $E509E1F3
000820C0 18E3 DD25 C2C5 16FB 3A09+  	dc.l	$18E3DD25, $C2C516FB, $3A090021, $D41FBE20, $28F379D9, $BD28174E, $0A1208FD, $8530012C
000820E0 08D9 FBF5 F1F5 F1E5 2323+  	dc.l	$08D9FBF5, $F1F5F1E5, $232323E1, $18E3D9FB, $3ADB1FE6, $02C28216, $C93C1100, $80DD2100
00082100 80BE 2004 DD2A D71F 2614+  	dc.l	$80BE2004, $DD2AD71F, $2614D7C3, $B41621D6, $1636B323, $3616C9D9, $00030B03, $0B001814
00082120 F5C5 0672 79D9 BD28 EE4E+  	dc.l	$F5C50672, $79D9BD28, $EE4E0A12, $08FD8530, $012C08D9, $3EFF32E2, $1FC5C1E5, $2929E100
00082140 10E2 79D9 BD28 0A4E 0A12+  	dc.l	$10E279D9, $BD280A4E, $0A1208FD, $8530012C, $08D9D9ED, $4BD11F0A, $E60FC604, $47D93ADC
00082160 1FFD 6F3A C21F B728 0DF2+  	dc.l	$1FFD6F3A, $C21FB728, $0DF2AE17, $3ADB1F0F, $3028AF32, $C21F79D9, $BD280A4E, $0A1208FD
00082180 8530 012C 08D9 AF32 E21F+  	dc.l	$8530012C, $08D9AF32, $E21FC1F1, $FBC93DCA, $69193D20, $0BFD2E00, $18DC3AC2, $1FC3F118
000821A0 3E80 32E8 1F18 CBF3 3E80+  	dc.l	$3E8032E8, $1F18CBF3, $3E8032DD, $1F21DC17, $223900D9, $0E00D9FB, $000018FC, $D921834D
000821C0 CD09 1621 F517 790C D1E6+  	dc.l	$CD091621, $F517790C, $D1E60387, $16005F19, $5E2356EB, $E9FB170B, $181B18D9, $010000ED
000821E0 43E4 1F11 0080 214B 18FB+  	dc.l	$43E41F11, $0080214B, $18FBE9D9, $ED43E41F, $01000011, $0000214B, $18FBE9D9, $ED43E61F
00082200 6069 ED5B E41F AFED 52FA+  	dc.l	$6069ED5B, $E41FAFED, $52FA3C18, $7BCB2A1F, $CB2A1FCB, $2A1F5FAF, $ED52300E, $CD3101CD
00082220 9102 CD2E 173E 0132 E31F+  	dc.l	$9102CD2E, $173E0132, $E31FC91A, $031A031A, $031A031A, $031A031A, $031A03E9, $F33E0232
00082240 DD1F E52A 3900 22E0 1F21+  	dc.l	$DD1FE52A, $390022E0, $1F217518, $223900E1, $FB000018, $FCE52172, $4DCD0916, $E13AC21F
00082260 B728 23F2 9818 3ADB 1F0F+  	dc.l	$B72823F2, $98183ADB, $1F0F3006, $AF32C21F, $FBC93AC2, $1FC3F118, $3DCA6919, $3D28F13E
00082280 8032 E81F 18E6 E52A E01F+  	dc.l	$8032E81F, $18E6E52A, $E01F2239, $00E13333, $C9F33E01, $32DD1F21, $C2182239, $00FB0000
000822A0 18FC 2187 4DCD 0916 3AC2+  	dc.l	$18FC2187, $4DCD0916, $3AC21FB7, $FAF118FB, $C931EA1F, $21000006, $15E510FD, $31C01FCD
000822C0 C717 21C6 1F3E C077 2C77+  	dc.l	$C71721C6, $1F3EC077, $2C773E52, $32C31F18, $C031C01F, $21C21F36, $00CDFF18, $C3B118D6
000822E0 8028 134F 0600 8760 6F29+  	dc.l	$8028134F, $06008760, $6F292909, $DD216D19, $EBDD19C3, $1A19DD21, $C81F21C6, $1FDDCB01
00082300 4628 012C 4E21 C31F 1100+  	dc.l	$4628012C, $4E21C31F, $11004043, $3E5270EB, $362B2C36, $802C36B6, $2C716836, $2A12CD52
00082320 1921 C31F 1100 403E 5273+  	dc.l	$1921C31F, $1100403E, $5273EB36, $2B2C3600, $12C9DD7E, $00FE50CA, $4300FE54, $CAD201FE
00082340 44CA 2C16 3E01 32E8 1FAF+  	dc.l	$44CA2C16, $3E0132E8, $1FAF32C2, $1F31C01F, $CD4119C3
00082354 B118                       	dc.w	$B118
00082356                            
00082356                            ; ------------------------------------------------------------------------------
00082356                            ; Exported symbols
00082356                            ; ------------------------------------------------------------------------------
00082356                            
00082356 =00080680                  MegaPCM_LoadDriver:	equ	MegaPCMLibraryBlob+$0
00082356 =000806EA                  MegaPCM_LoadSampleTable:	equ	MegaPCMLibraryBlob+$6A
00082356 =000808CA                  MegaPCM_PlaySample:	equ	MegaPCMLibraryBlob+$24A
00082356 =000808EC                  MegaPCM_PausePlayback:	equ	MegaPCMLibraryBlob+$26C
00082356 =00080910                  MegaPCM_UnpausePlayback:	equ	MegaPCMLibraryBlob+$290
00082356 =00080934                  MegaPCM_StopPlayback:	equ	MegaPCMLibraryBlob+$2B4
00082356 =00080958                  MegaPCM_SetVolume:	equ	MegaPCMLibraryBlob+$2D8
00082356 =0008097A                  MegaPCM_SetSFXVolume:	equ	MegaPCMLibraryBlob+$2FA
00082356 =0008099C                  MegaPCM_SetPan:	equ	MegaPCMLibraryBlob+$31C
00082356 =000809BE                  MegaPCM_SetSFXPan:	equ	MegaPCMLibraryBlob+$33E
00082356 =000809E0                  MegaPCM:	equ	MegaPCMLibraryBlob+$360
00082356 =00082356                  MegaPCM_End:	equ	MegaPCMLibraryBlob+$1CD6
00082356                            
00082356                            
00082356                            ; ------------------------------------------------------------------------------
00082356                            ; MIT License
00082356                            ;
00082356                            ; Copyright (c) 2012-2024 Vladikcomper
00082356                            ; 
00082356                            ; Permission is hereby granted, free of charge, to any person obtaining a copy
00082356                            ; of this software and associated documentation files (the "Software"), to deal
00082356                            ; in the Software without restriction, including without limitation the rights
00082356                            ; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
00082356                            ; copies of the Software, and to permit persons to whom the Software is
00082356                            ; furnished to do so, subject to the following conditions:
00082356                            ; 
00082356                            ; The above copyright notice and this permission notice shall be included in all
00082356                            ; copies or substantial portions of the Software.
00082356                            ; 
00082356                            ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
00082356                            ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
00082356                            ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
00082356                            ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
00082356                            ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
00082356                            ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
00082356                            ; SOFTWARE.
00082356                            ; ------------------------------------------------------------------------------
00082356                            ; ------------------------------------------------------------------------------
00082356                                            include "SampleTable.asm"               ; ++ ADD THIS LINE
00082356                            
00082356                            ; ---------------------------------------------------------------
00082356                            SampleTable:
00082356                            	;			type			pointer		Hz
000823E6 FFFF                       	dc.w	-1	; end marker
000823E8                            
000823E8                            ; ---------------------------------------------------------------
000823E8                            	incdac	Kick, "sound/dac/kick.dpcm"
0008273A                            	incdac	Snare, "sound/dac/snare.pcm"
0008361A                            	incdac	Timpani, "sound/dac/timpani.dpcm"
00084630                            	incdac	SegaPCM, "sound/dac/sega.wav"
0009E786                            	even
0009E786                            	even
0009E786                            
0009E786 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0009E78A 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0
0009E78E 0000 0000                  Go_MusicIndex:	dc.l MusicIndex-4		; XREF: Sound_Music
0009E792 0000 0000                  Go_MusicIndex80:	dc.l MusicIndex80-4		; XREF: Sound_Music
0009E796 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_SFX
0009E79A 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_Music
0009E79E 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0009E7A2                            ; ---------------------------------------------------------------------------
0009E7A2                            ; PSG instruments used in music
0009E7A2                            ; ---------------------------------------------------------------------------
0009E7A2 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0009E7AE 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0009E7BA 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0009E7C6                            
0009E7C6 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
0009E7D6 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
0009E7DD                            
0009E7DD 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
0009E7E4                            
0009E7E4 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
0009E7F4 80                                     dc.b    $80
0009E7F5                            
0009E7F5 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
0009E800                            
0009E800 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
0009E810 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
0009E820 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
0009E82A                            
0009E82A 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
0009E839                            
0009E839 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0009E849 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
0009E855                            
0009E855 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
0009E865 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
0009E875 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
0009E87D                            
0009E87D 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
0009E88D 80                                     dc.b    $80
0009E88E                            
0009E88E 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0009E896                            ; ---------------------------------------------------------------------------
0009E896                            ; Music	Pointers
0009E896                            ; ---------------------------------------------------------------------------
0009E896                            MusicIndex:	
0009E896 0000 0000                  		dc.l Music9F ; test
0009E89A 0000 0000                  		dc.l Music92 ; test
0009E89E                            
0009E89E                            MusicIndex80:
0009E89E 0000 0000 0000 0000        		dc.l Music81, Music82
0009E8A6 0000 0000 0000 0000        		dc.l Music83, Music84
0009E8AE 0000 0000 0000 0000        		dc.l Music85, Music86
0009E8B6 0000 0000 0000 0000        		dc.l Music87, Music88
0009E8BE 0000 0000 0000 0000        		dc.l Music89, Music8A
0009E8C6 0000 0000 0000 0000        		dc.l Music8B, Music8C
0009E8CE 0000 0000 0000 0000        		dc.l Music8D, Music8E
0009E8D6 0000 0000 0000 0000        		dc.l Music8F, Music90
0009E8DE 0000 0000 0000 0000        		dc.l Music91, Music92
0009E8E6 0000 0000 0000 0000        		dc.l Music93, Music94
0009E8EE 0000 0000 0000 0000        		dc.l Music95, Music96
0009E8F6 0000 0000 0000 0000        		dc.l Music97, Music98
0009E8FE 0000 0000 0000 0000        		dc.l Music99, Music9A
0009E906 0000 0000 0000 0000        		dc.l Music9B, Music9C
0009E90E 0000 0000 0000 0000        		dc.l Music9D, Music9E
0009E916 0000 0000                  		dc.l Music9F
0009E91A                            ; ---------------------------------------------------------------------------
0009E91A                            ; Type of sound	being played ($00 = music; $70 = normal	sound effect)
0009E91A                            ; ---------------------------------------------------------------------------
0009E91A                            SoundTypes:			
0009E91A 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $01
0009E929 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $10
0009E939 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $20
0009E949 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $30
0009E959 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $40
0009E969 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $50
0009E979 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $60
0009E989 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $70
0009E999 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $80
0009E9A9 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
0009E9B9 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
0009E9C9 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
0009E9D9 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
0009E9E9 7070 7070 7070 7070 7070+  		dc.b $70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $D0
0009E9F9 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $E0
0009EA09 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $F0
0009EA18                            		even
0009EA18                            
0009EA18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009EA18                            
0009EA18                            
0009EA18                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0009EA18                            ; every 5th frame, update a second time (same technique as most SMPS versions, but more scuffed)
0009EA18 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; if in an NTSC region(!), branch ; TODO: use the VDP pal value instead
0009EA1E 6700                       		beq.s	@main
0009EA20 7000                       		moveq	#0,d0			; PAL song timer "optimization"
0009EA22 3038 FE0E                  		move.w	($FFFFFE0E).w,d0	; TODO: proper timer, this is prone to overflow and cause slight variations
0009EA26 80FC 0005                  		divu.w	#5,d0			;       also divisions are generally slow
0009EA2A 4840                       		swap	d0
0009EA2C 4A40                       		tst.w	d0
0009EA2E 6600                       		bne.s	@main
0009EA30 6100 0000                  		bsr.w	@main
0009EA34                            @main:
0009EA34 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0009EA3C 4E71                       		nop
0009EA3E 4E71                       		nop
0009EA40 4E71                       		nop
0009EA42                            ; loc_71B5A:
0009EA42                            @wait:
0009EA42 0839 0000 00A1 1100        		btst	#0,($A11100).l
0009EA4A 66F6                       		bne.s	@wait
0009EA4C                            
0009EA4C 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0009EA54 6700                       		beq.s	loc_71B82
0009EA56 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0009EA5E 4E71                       		nop
0009EA60 4E71                       		nop
0009EA62 4E71                       		nop
0009EA64 4E71                       		nop
0009EA66 4E71                       		nop
0009EA68 60CA                       		bra.s	@main		; if you want really funky sound, use sub_71B4C instead ;)
0009EA6A                            ; ===========================================================================
0009EA6A                            
0009EA6A                            loc_71B82:
0009EA6A 4DF9 00FF F000             		lea	($FFF000).l,a6
0009EA70 422E 000E                  		clr.b	$E(a6)
0009EA74 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0009EA78 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0009EA7C 532E 0001                  		subq.b	#1,1(a6)
0009EA80 6600                       		bne.s	loc_71B9E
0009EA82 4EBA 0000                  		jsr	sub_7260C(pc)
0009EA86                            
0009EA86                            loc_71B9E:
0009EA86 102E 0004                  		move.b	4(a6),d0
0009EA8A 6700                       		beq.s	loc_71BA8
0009EA8C 4EBA 0000                  		jsr	sub_72504(pc)
0009EA90                            
0009EA90                            loc_71BA8:
0009EA90 4A2E 0024                  		tst.b	$24(a6)
0009EA94 6700                       		beq.s	loc_71BB2
0009EA96 4EBA 0000                  		jsr	sub_7267C(pc)
0009EA9A                            
0009EA9A                            loc_71BB2:
0009EA9A 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0009EA9E 6700                       		beq.s	loc_71BBC	; if not, branch
0009EAA0 4EBA 0000                  		jsr	Sound_Play(pc)
0009EAA4                            
0009EAA4                            loc_71BBC:
0009EAA4 4BEE 0040                  		lea	$40(a6),a5
0009EAA8 4A15                       		tst.b	(a5)
0009EAAA 6A00                       		bpl.s	loc_71BD4
0009EAAC 4EBA 0000                  		jsr	sub_71C4E(pc)
0009EAB0                            
0009EAB0                            loc_71BD4:
0009EAB0 422E 0008                  		clr.b	8(a6)
0009EAB4 7E05                       		moveq	#5,d7
0009EAB6                            
0009EAB6                            loc_71BDA:
0009EAB6 DAFC 0030                  		adda.w	#$30,a5
0009EABA 4A15                       		tst.b	(a5)
0009EABC 6A00                       		bpl.s	loc_71BE6
0009EABE 4EBA 0000                  		jsr	sub_71CCA(pc)
0009EAC2                            
0009EAC2                            loc_71BE6:
0009EAC2 51CF FFF2                  		dbf	d7,loc_71BDA
0009EAC6                            
0009EAC6 7E02                       		moveq	#2,d7
0009EAC8                            
0009EAC8                            loc_71BEC:
0009EAC8 DAFC 0030                  		adda.w	#$30,a5
0009EACC 4A15                       		tst.b	(a5)
0009EACE 6A00                       		bpl.s	loc_71BF8
0009EAD0 4EBA 0000                  		jsr	sub_72850(pc)
0009EAD4                            
0009EAD4                            loc_71BF8:
0009EAD4 51CF FFF2                  		dbf	d7,loc_71BEC
0009EAD8                            
0009EAD8 1D7C 0080 000E             		move.b	#$80,$E(a6)
0009EADE 7E02                       		moveq	#2,d7
0009EAE0                            
0009EAE0                            loc_71C04:
0009EAE0 DAFC 0030                  		adda.w	#$30,a5
0009EAE4 4A15                       		tst.b	(a5)
0009EAE6 6A00                       		bpl.s	loc_71C10
0009EAE8 4EBA 0000                  		jsr	sub_71CCA(pc)
0009EAEC                            
0009EAEC                            loc_71C10:
0009EAEC 51CF FFF2                  		dbf	d7,loc_71C04
0009EAF0                            
0009EAF0 7E02                       		moveq	#2,d7
0009EAF2                            
0009EAF2                            loc_71C16:
0009EAF2 DAFC 0030                  		adda.w	#$30,a5
0009EAF6 4A15                       		tst.b	(a5)
0009EAF8 6A00                       		bpl.s	loc_71C22
0009EAFA 4EBA 0000                  		jsr	sub_72850(pc)
0009EAFE                            
0009EAFE                            loc_71C22:
0009EAFE 51CF FFF2                  		dbf	d7,loc_71C16
0009EB02 1D7C 0040 000E             		move.b	#$40,$E(a6)
0009EB08 DAFC 0030                  		adda.w	#$30,a5
0009EB0C 4A15                       		tst.b	(a5)
0009EB0E 6A00                       		bpl.s	loc_71C38
0009EB10 4EBA 0000                  		jsr	sub_71CCA(pc)
0009EB14                            
0009EB14                            loc_71C38:
0009EB14 DAFC 0030                  		adda.w	#$30,a5
0009EB18 4A15                       		tst.b	(a5)
0009EB1A 6A00                       		bpl.s	loc_71C44
0009EB1C 4EBA 0000                  		jsr	sub_72850(pc)
0009EB20                            
0009EB20                            loc_71C44:
0009EB20 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0009EB28 4E75                       		rts	
0009EB2A                            ; End of function sub_71B4C
0009EB2A                            
0009EB2A                            
0009EB2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009EB2A                            
0009EB2A                            
0009EB2A                            sub_71C4E:				; XREF: sub_71B4C
0009EB2A 532D 000E                  		subq.b	#1,$E(a5)
0009EB2E 6600                       		bne.s	locret_71CAA
0009EB30 1D7C 0080 0008             		move.b	#$80,8(a6)
0009EB36 286D 0004                  		movea.l	4(a5),a4
0009EB3A                            
0009EB3A                            loc_71C5E:
0009EB3A 7A00                       		moveq	#0,d5
0009EB3C 1A1C                       		move.b	(a4)+,d5
0009EB3E 0C05 00E0                  		cmpi.b	#-$20,d5
0009EB42 6500                       		bcs.s	loc_71C6E
0009EB44 4EBA 0000                  		jsr	sub_72A5A(pc)
0009EB48 60F0                       		bra.s	loc_71C5E
0009EB4A                            ; ===========================================================================
0009EB4A                            
0009EB4A                            loc_71C6E:
0009EB4A 4A05                       		tst.b	d5
0009EB4C 6A00                       		bpl.s	loc_71C84
0009EB4E 1B45 0010                  		move.b	d5,$10(a5)
0009EB52 1A1C                       		move.b	(a4)+,d5
0009EB54 6A00                       		bpl.s	loc_71C84
0009EB56 534C                       		subq.w	#1,a4
0009EB58 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0009EB5E 6000                       		bra.s	loc_71C88
0009EB60                            ; ===========================================================================
0009EB60                            
0009EB60                            loc_71C84:
0009EB60 4EBA 0000                  		jsr	sub_71D40(pc)
0009EB64                            
0009EB64                            loc_71C88:
0009EB64 2B4C 0004                  		move.l	a4,4(a5)
0009EB68 0815 0002                  		btst	#2,(a5)
0009EB6C 6600                       		bne.s	locret_71CAA
0009EB6E 7000                       		moveq	#0,d0
0009EB70 102D 0010                  		move.b	$10(a5),d0
0009EB74 0C00 0080                  		cmpi.b	#$80,d0
0009EB78 6700                       		beq.s	locret_71CAA
0009EB7A                            		;btst	#3,d0
0009EB7A                            		;bne.s	loc_71CAC
0009EB7A                            		;move.b	d0,($A01FFF).l
0009EB8C 13C0 00A0 1FC2                             move.b  d0, $A00000+Z_MPCM_CommandInput ; ++ send DAC sample to Mega PCM
0009EB9A                            locret_71CAA:
0009EB9A 4E75                       		rts	
0009EB9C                            ; ===========================================================================
0009EB9C                            ; UNIMPLEMENTED --- MEGAPCM2 GUIDE
0009EB9C                            ;loc_71CAC:
0009EB9C                            ;		subi.b	#$88,d0
0009EB9C                            ;		move.b	byte_71CC4(pc,d0.w),d0
0009EB9C                            ;		move.b	d0,($A000EA).l
0009EB9C                            ;		move.b	#$83,($A01FFF).l
0009EB9C                            ;		rts	
0009EB9C                            ; End of function sub_71C4E
0009EB9C                            
0009EB9C                            ; ===========================================================================
0009EB9C 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0009EBA2                            
0009EBA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009EBA2                            
0009EBA2                            
0009EBA2                            sub_71CCA:				; XREF: sub_71B4C
0009EBA2 532D 000E                  		subq.b	#1,$E(a5)
0009EBA6 6600                       		bne.s	loc_71CE0
0009EBA8 0895 0004                  		bclr	#4,(a5)
0009EBAC 4EBA 0000                  		jsr	sub_71CEC(pc)
0009EBB0 4EBA 0000                  		jsr	sub_71E18(pc)
0009EBB4 6000 0000                  		bra.w	loc_726E2
0009EBB8                            ; ===========================================================================
0009EBB8                            
0009EBB8                            loc_71CE0:
0009EBB8 4EBA 0000                  		jsr	sub_71D9E(pc)
0009EBBC 4EBA 0000                  		jsr	sub_71DC6(pc)
0009EBC0 6000 0000                  		bra.w	loc_71E24
0009EBC4                            ; End of function sub_71CCA
0009EBC4                            
0009EBC4                            
0009EBC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009EBC4                            
0009EBC4                            
0009EBC4                            sub_71CEC:				; XREF: sub_71CCA
0009EBC4 286D 0004                  		movea.l	4(a5),a4
0009EBC8 0895 0001                  		bclr	#1,(a5)
0009EBCC                            
0009EBCC                            loc_71CF4:
0009EBCC 7A00                       		moveq	#0,d5
0009EBCE 1A1C                       		move.b	(a4)+,d5
0009EBD0 0C05 00E0                  		cmpi.b	#-$20,d5
0009EBD4 6500                       		bcs.s	loc_71D04
0009EBD6 4EBA 0000                  		jsr	sub_72A5A(pc)
0009EBDA 60F0                       		bra.s	loc_71CF4
0009EBDC                            ; ===========================================================================
0009EBDC                            
0009EBDC                            loc_71D04:
0009EBDC 4EBA 0000                  		jsr	sub_726FE(pc)
0009EBE0 4A05                       		tst.b	d5
0009EBE2 6A00                       		bpl.s	loc_71D1A
0009EBE4 4EBA 0000                  		jsr	sub_71D22(pc)
0009EBE8 1A1C                       		move.b	(a4)+,d5
0009EBEA 6A00                       		bpl.s	loc_71D1A
0009EBEC 534C                       		subq.w	#1,a4
0009EBEE 6000 0000                  		bra.w	sub_71D60
0009EBF2                            ; ===========================================================================
0009EBF2                            
0009EBF2                            loc_71D1A:
0009EBF2 4EBA 0000                  		jsr	sub_71D40(pc)
0009EBF6 6000 0000                  		bra.w	sub_71D60
0009EBFA                            ; End of function sub_71CEC
0009EBFA                            
0009EBFA                            
0009EBFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009EBFA                            
0009EBFA                            
0009EBFA                            sub_71D22:				; XREF: sub_71CEC
0009EBFA 0405 0080                  		subi.b	#$80,d5
0009EBFE 6700                       		beq.s	loc_71D58
0009EC00 DA2D 0008                  		add.b	8(a5),d5
0009EC04 0245 007F                  		andi.w	#$7F,d5
0009EC08 E34D                       		lsl.w	#1,d5
0009EC0A 41FA 0000                  		lea	word_72790(pc),a0
0009EC0E 3C30 5000                  		move.w	(a0,d5.w),d6
0009EC12 3B46 0010                  		move.w	d6,$10(a5)
0009EC16 4E75                       		rts	
0009EC18                            ; End of function sub_71D22
0009EC18                            
0009EC18                            
0009EC18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009EC18                            
0009EC18                            
0009EC18                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0009EC18 1005                       		move.b	d5,d0
0009EC1A 122D 0002                  		move.b	2(a5),d1
0009EC1E                            
0009EC1E                            loc_71D46:
0009EC1E 5301                       		subq.b	#1,d1
0009EC20 6700                       		beq.s	loc_71D4E
0009EC22 D005                       		add.b	d5,d0
0009EC24 60F8                       		bra.s	loc_71D46
0009EC26                            ; ===========================================================================
0009EC26                            
0009EC26                            loc_71D4E:
0009EC26 1B40 000F                  		move.b	d0,$F(a5)
0009EC2A 1B40 000E                  		move.b	d0,$E(a5)
0009EC2E 4E75                       		rts	
0009EC30                            ; End of function sub_71D40
0009EC30                            
0009EC30                            ; ===========================================================================
0009EC30                            
0009EC30                            loc_71D58:				; XREF: sub_71D22
0009EC30 08D5 0001                  		bset	#1,(a5)
0009EC34 426D 0010                  		clr.w	$10(a5)
0009EC38                            
0009EC38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009EC38                            
0009EC38                            
0009EC38                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0009EC38 2B4C 0004                  		move.l	a4,4(a5)
0009EC3C 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0009EC42 0815 0004                  		btst	#4,(a5)
0009EC46 6600                       		bne.s	locret_71D9C
0009EC48 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0009EC4E 422D 000C                  		clr.b	$C(a5)
0009EC52 0815 0003                  		btst	#3,(a5)
0009EC56 6700                       		beq.s	locret_71D9C
0009EC58 206D 0014                  		movea.l	$14(a5),a0
0009EC5C 1B58 0018                  		move.b	(a0)+,$18(a5)
0009EC60 1B58 0019                  		move.b	(a0)+,$19(a5)
0009EC64 1B58 001A                  		move.b	(a0)+,$1A(a5)
0009EC68 1018                       		move.b	(a0)+,d0
0009EC6A E208                       		lsr.b	#1,d0
0009EC6C 1B40 001B                  		move.b	d0,$1B(a5)
0009EC70 426D 001C                  		clr.w	$1C(a5)
0009EC74                            
0009EC74                            locret_71D9C:
0009EC74 4E75                       		rts	
0009EC76                            ; End of function sub_71D60
0009EC76                            
0009EC76                            
0009EC76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009EC76                            
0009EC76                            
0009EC76                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0009EC76 4A2D 0012                  		tst.b	$12(a5)
0009EC7A 6700                       		beq.s	locret_71DC4
0009EC7C 532D 0012                  		subq.b	#1,$12(a5)
0009EC80 6600                       		bne.s	locret_71DC4
0009EC82 08D5 0001                  		bset	#1,(a5)
0009EC86 4A2D 0001                  		tst.b	1(a5)
0009EC8A 6B00 0000                  		bmi.w	loc_71DBE
0009EC8E 4EBA 0000                  		jsr	sub_726FE(pc)
0009EC92 584F                       		addq.w	#4,sp
0009EC94 4E75                       		rts	
0009EC96                            ; ===========================================================================
0009EC96                            
0009EC96                            loc_71DBE:
0009EC96 4EBA 0000                  		jsr	sub_729A0(pc)
0009EC9A 584F                       		addq.w	#4,sp
0009EC9C                            
0009EC9C                            locret_71DC4:
0009EC9C 4E75                       		rts	
0009EC9E                            ; End of function sub_71D9E
0009EC9E                            
0009EC9E                            
0009EC9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009EC9E                            
0009EC9E                            
0009EC9E                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0009EC9E 584F                       		addq.w	#4,sp
0009ECA0 0815 0003                  		btst	#3,(a5)
0009ECA4 6700                       		beq.s	locret_71E16
0009ECA6 4A2D 0018                  		tst.b	$18(a5)
0009ECAA 6700                       		beq.s	loc_71DDA
0009ECAC 532D 0018                  		subq.b	#1,$18(a5)
0009ECB0 4E75                       		rts	
0009ECB2                            ; ===========================================================================
0009ECB2                            
0009ECB2                            loc_71DDA:
0009ECB2 532D 0019                  		subq.b	#1,$19(a5)
0009ECB6 6700                       		beq.s	loc_71DE2
0009ECB8 4E75                       		rts	
0009ECBA                            ; ===========================================================================
0009ECBA                            
0009ECBA                            loc_71DE2:
0009ECBA 206D 0014                  		movea.l	$14(a5),a0
0009ECBE 1B68 0001 0019             		move.b	1(a0),$19(a5)
0009ECC4 4A2D 001B                  		tst.b	$1B(a5)
0009ECC8 6600                       		bne.s	loc_71DFE
0009ECCA 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0009ECD0 442D 001A                  		neg.b	$1A(a5)
0009ECD4 4E75                       		rts	
0009ECD6                            ; ===========================================================================
0009ECD6                            
0009ECD6                            loc_71DFE:
0009ECD6 532D 001B                  		subq.b	#1,$1B(a5)
0009ECDA 1C2D 001A                  		move.b	$1A(a5),d6
0009ECDE 4886                       		ext.w	d6
0009ECE0 DC6D 001C                  		add.w	$1C(a5),d6
0009ECE4 3B46 001C                  		move.w	d6,$1C(a5)
0009ECE8 DC6D 0010                  		add.w	$10(a5),d6
0009ECEC 594F                       		subq.w	#4,sp
0009ECEE                            
0009ECEE                            locret_71E16:
0009ECEE 4E75                       		rts	
0009ECF0                            ; End of function sub_71DC6
0009ECF0                            
0009ECF0                            
0009ECF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009ECF0                            
0009ECF0                            
0009ECF0                            sub_71E18:				; XREF: sub_71CCA
0009ECF0 0815 0001                  		btst	#1,(a5)
0009ECF4 6600                       		bne.s	locret_71E48
0009ECF6 3C2D 0010                  		move.w	$10(a5),d6
0009ECFA 6700                       		beq.s	loc_71E4A
0009ECFC                            
0009ECFC                            loc_71E24:				; XREF: sub_71CCA
0009ECFC 102D 001E                  		move.b	$1E(a5),d0
0009ED00 4880                       		ext.w	d0
0009ED02 DC40                       		add.w	d0,d6
0009ED04 0815 0002                  		btst	#2,(a5)
0009ED08 6600                       		bne.s	locret_71E48
0009ED0A 3206                       		move.w	d6,d1
0009ED0C E049                       		lsr.w	#8,d1
0009ED0E 103C 00A4                  		move.b	#-$5C,d0
0009ED12 4EBA 0000                  		jsr	sub_72722(pc)
0009ED16 1206                       		move.b	d6,d1
0009ED18 103C 00A0                  		move.b	#-$60,d0
0009ED1C 4EBA 0000                  		jsr	sub_72722(pc)
0009ED20                            
0009ED20                            locret_71E48:
0009ED20 4E75                       		rts	
0009ED22                            ; ===========================================================================
0009ED22                            
0009ED22                            loc_71E4A:
0009ED22 08D5 0001                  		bset	#1,(a5)
0009ED26 4E75                       		rts	
0009ED28                            ; End of function sub_71E18
0009ED28                            
0009ED28                            ; ===========================================================================
0009ED28                            
0009ED28                            loc_71E50:				; XREF: sub_71B4C
0009ED28 6B00                       		bmi.s	loc_71E94
0009ED2A 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0009ED30 6700 0000                  		beq.w	loc_71EFE
0009ED34 1D7C 0002 0003             		move.b	#2,3(a6)
0009ED3A 7602                       		moveq	#2,d3
0009ED3C 103C 00B4                  		move.b	#-$4C,d0
0009ED40 7200                       		moveq	#0,d1
0009ED42                            
0009ED42                            loc_71E6A:
0009ED42 4EBA 0000                  		jsr	sub_7272E(pc)
0009ED46 4EBA 0000                  		jsr	sub_72764(pc)
0009ED4A 5200                       		addq.b	#1,d0
0009ED4C 51CB FFF4                  		dbf	d3,loc_71E6A
0009ED50                            
0009ED50 7602                       		moveq	#2,d3
0009ED52 7028                       		moveq	#$28,d0
0009ED54                            
0009ED54                            loc_71E7C:
0009ED54 1203                       		move.b	d3,d1
0009ED56 4EBA 0000                  		jsr	sub_7272E(pc)
0009ED5A 5801                       		addq.b	#4,d1
0009ED5C 4EBA 0000                  		jsr	sub_7272E(pc)
0009ED60 51CB FFF2                  		dbf	d3,loc_71E7C
0009ED64                            
0009ED64 4EBA 0000                  		jsr	sub_729B6(pc)
0009ED68 6000 FDB6                  		bra.w	loc_71C44
0009ED6C                            ; ===========================================================================
0009ED6C                            
0009ED6C                            loc_71E94:				; XREF: loc_71E50
0009ED6C 422E 0003                  		clr.b	3(a6)
0009ED70 7630                       		moveq	#$30,d3
0009ED72 4BEE 0040                  		lea	$40(a6),a5
0009ED76 7806                       		moveq	#6,d4
0009ED78                            
0009ED78                            loc_71EA0:
0009ED78 0815 0007                  		btst	#7,(a5)
0009ED7C 6700                       		beq.s	loc_71EB8
0009ED7E 0815 0002                  		btst	#2,(a5)
0009ED82 6600                       		bne.s	loc_71EB8
0009ED84 103C 00B4                  		move.b	#-$4C,d0
0009ED88 122D 000A                  		move.b	$A(a5),d1
0009ED8C 4EBA 0000                  		jsr	sub_72722(pc)
0009ED90                            
0009ED90                            loc_71EB8:
0009ED90 DAC3                       		adda.w	d3,a5
0009ED92 51CC FFE4                  		dbf	d4,loc_71EA0
0009ED96                            
0009ED96 4BEE 0220                  		lea	$220(a6),a5
0009ED9A 7802                       		moveq	#2,d4
0009ED9C                            
0009ED9C                            loc_71EC4:
0009ED9C 0815 0007                  		btst	#7,(a5)
0009EDA0 6700                       		beq.s	loc_71EDC
0009EDA2 0815 0002                  		btst	#2,(a5)
0009EDA6 6600                       		bne.s	loc_71EDC
0009EDA8 103C 00B4                  		move.b	#-$4C,d0
0009EDAC 122D 000A                  		move.b	$A(a5),d1
0009EDB0 4EBA 0000                  		jsr	sub_72722(pc)
0009EDB4                            
0009EDB4                            loc_71EDC:
0009EDB4 DAC3                       		adda.w	d3,a5
0009EDB6 51CC FFE4                  		dbf	d4,loc_71EC4
0009EDBA                            
0009EDBA 4BEE 0340                  		lea	$340(a6),a5
0009EDBE 0815 0007                  		btst	#7,(a5)
0009EDC2 6700                       		beq.s	loc_71EFE
0009EDC4 0815 0002                  		btst	#2,(a5)
0009EDC8 6600                       		bne.s	loc_71EFE
0009EDCA 103C 00B4                  		move.b	#-$4C,d0
0009EDCE 122D 000A                  		move.b	$A(a5),d1
0009EDD2 4EBA 0000                  		jsr	sub_72722(pc)
0009EDD6                            
0009EDD6                            loc_71EFE:
0009EDD6 6000 FD48                  		bra.w	loc_71C44
0009EDDA                            
0009EDDA                            ; ---------------------------------------------------------------------------
0009EDDA                            ; Subroutine to	play a sound or	music track
0009EDDA                            ; ---------------------------------------------------------------------------
0009EDDA                            
0009EDDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009EDDA                            
0009EDDA                            
0009EDDA                            Sound_Play:				; XREF: sub_71B4C
0009EDDA 2079 0009 E786             		movea.l	(Go_SoundTypes).l,a0
0009EDE0 43EE 000A                  		lea	$A(a6),a1	; load music track number
0009EDE4 1616                       		move.b	0(a6),d3
0009EDE6 7802                       		moveq	#2,d4
0009EDE8                            
0009EDE8                            loc_71F12:
0009EDE8 1011                       		move.b	(a1),d0		; move track number to d0
0009EDEA 1200                       		move.b	d0,d1
0009EDEC 4219                       		clr.b	(a1)+
0009EDEE 0400 0081                  		subi.b	#$81,d0
0009EDF2 6500                       		bcs.s	loc_71F3E
0009EDF4                            ; ===========================================================================
0009EDF4                            
0009EDF4                            loc_71F2C:
0009EDF4 1430 0000                  		move.b	(a0,d0.w),d2
0009EDF8 B403                       		cmp.b	d3,d2
0009EDFA 6500                       		bcs.s	loc_71F3E
0009EDFC 1602                       		move.b	d2,d3
0009EDFE 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0009EE02                            
0009EE02                            loc_71F3E:
0009EE02 51CC FFE4                  		dbf	d4,loc_71F12
0009EE06                            
0009EE06 4A03                       		tst.b	d3
0009EE08 6B00                       		bmi.s	Sound_ChkValue
0009EE0A 1C83                       		move.b	d3,0(a6)
0009EE0C                            ; End of function Sound_Play
0009EE0C                            
0009EE0C                            
0009EE0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009EE0C                            
0009EE0C                            ; no checks if you play something fucked up it's your fault
0009EE0C                            Sound_ChkValue:				; XREF: sub_71B4C
0009EE0C 7E00                       		moveq	#0,d7
0009EE0E 1E2E 0009                  		move.b	9(a6),d7
0009EE12                            		
0009EE12 6700 0000                  		beq.w	Sound_E4
0009EE16 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0009EE1C 0C07 00A0                  		cmpi.b	#$A0,d7
0009EE20 6500 0000                  		blo.w	Sound_Music	; music	$81-$9F
0009EE24                            		
0009EE24 0C07 00D0                  		cmpi.b	#$D0,d7
0009EE28 6700 0000                  		beq.w	Sound_D0
0009EE2C 0C07 00E0                  		cmpi.b	#$E0,d7
0009EE30 6500 0000                  		blo.w	Sound_SFX	; sound	$A0-$CF
0009EE34                            		
0009EE34                            		; falls to command
0009EE34                            ; ===========================================================================
0009EE34                            
0009EE34                            Sound_Command				; XREF: Sound_ChkValue
0009EE34 0407 00E0                  		subi.b	#$E0,d7
0009EE38 E54F                       		lsl.w	#2,d7
0009EE3A 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0009EE3E                            ; ===========================================================================
0009EE3E                            
0009EE3E                            Sound_ExIndex:
0009EE3E 6000 0000                  		bra.w	Sound_E0
0009EE42                            ; ===========================================================================
0009EE42 6000 0000                  		bra.w	Sound_E1
0009EE46                            ; ===========================================================================
0009EE46 6000 0000                  		bra.w	Sound_E2
0009EE4A                            ; ===========================================================================
0009EE4A 6000 0000                  		bra.w	Sound_E3
0009EE4E                            ; ===========================================================================
0009EE4E 6000 0000                  		bra.w	Sound_E4
0009EE52                            ; ===========================================================================
0009EE52 6000 0000                  		bra.w	Sound_E5
0009EE56                            ; ===========================================================================
0009EE56                            ; ---------------------------------------------------------------------------
0009EE56                            ; Play "Say-gaa" PCM sound
0009EE56                            ; ---------------------------------------------------------------------------
0009EE56                            
0009EE56                            Sound_E1:	
0009EE56                            
0009EE56 708C                                       moveq   #$FFFFFF8C, d0          ; ++ request SEGA PCM sample
0009EE58 4EF9 0008 08CA                             jmp     MegaPCM_PlaySample      ; ++
0009EE5E                            
0009EE5E                            Sound_E1_old:               			  
0009EE5E 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
0009EE66 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0009EE6E 303C 007F                  		move.w	#127,d0				; delay so the YM doesn't crap itself
0009EE72 51C8 FFFE                  		dbf	d0,*
0009EE76 45F9 0008 4630             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0009EE7C 263C 0001 A156             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0009EE82 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0009EE8A                            PlayPCM_Loop:	  
0009EE8A 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0009EE90 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0009EE94 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0009EE98 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0009EE9A 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0009EE9C 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0009EEA0 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0009EEA6 4EB8 1ACC                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0009EEAA 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0009EEB0 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0009EEB2 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0009EEB4                            return_PlayPCM: 
0009EEB4 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; silence PCM to avoid an awful sounding click
0009EEBC 584F                       		addq.w	#4,sp 
0009EEBE 4E75                       		rts
0009EEC0                            		
0009EEC0                            ; ---------------------------------------------------------------------------
0009EEC0                            ; Play you are an idiot pcm sound
0009EEC0                            ; since the sfx already crashes the game forever load it here :V
0009EEC0                            ; ---------------------------------------------------------------------------
0009EEC0                            
0009EEC0                            Sound_E5: 
0009EEC0 4EB8 1BA8                  		jsr	ClearScreen
0009EEC4 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
0009EECC 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0009EED4                            
0009EED4                            		;control port on a5
0009EED4 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
0009EEDA 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
0009EEE0 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
0009EEE4 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
0009EEE8 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
0009EEEC                            		
0009EEEC 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
0009EEF0                            		
0009EEF0 2ABC 4000 0000             		move.l	#$40000000,(a5)
0009EEF6 41F9 0002 4EBA             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
0009EEFC 4EB8 1D26                  		jsr	NemDec
0009EF00 43F9 00FF 0000             		lea	($FF0000).l,a1
0009EF06 41F9 0002 4E5C             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
0009EF0C 303C 0000                  		move.w	#0,d0
0009EF10 4EB8 2004                  		jsr	EniDec
0009EF14 43F9 00FF 0000             		lea	($FF0000).l,a1
0009EF1A 203C 4304 0003             		move.l	#$43040003,d0
0009EF20 7223                       		moveq	#35,d1
0009EF22 740D                       		moveq	#13,d2
0009EF24 4EB8 1D06                  		jsr	ShowVDPGraphics
0009EF28 7014                       		moveq	#20,d0
0009EF2A 4EB8 29D2                  		jsr	PalLoad2	; load pallet
0009EF2E                            
0009EF2E                            
0009EF2E 4BF9 00C0 0004             		lea	($C00004).l,a5
0009EF34 50F8 FE25                  		st.b	($FFFFFE25).w			; start with -1, so the NOT makes it 0
0009EF38 7600                       		moveq	#0,d3				; make @palett jump to @start when done
0009EF3A 6000                       		bra.s	@palett
0009EF3C                            @start:
0009EF3C 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0009EF42 263C 0000 0000             		move.l	#IdiotPCM_End-IdiotPCM,d3	; Load the size of the idiot PCM sample into d3 
0009EF48 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel
0009EF50                            @loop:
0009EF50 44D5                       		move.w	(a5),ccr
0009EF52 6B00                       		bmi.s	@vblank
0009EF54                            
0009EF54 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0009EF5A 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0009EF5E 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0009EF62 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0009EF64 66EA                       		bne.s	@loop				; if not zero, loop
0009EF66 60D4                       		bra.s	@start
0009EF68                            @vblank:
0009EF68 0C38 000F FE24             		cmp.b	#15,($FFFFFE24).w
0009EF6E 6700                       		beq.s	@palett
0009EF70 5238 FE24                  		addq.b	#1,($FFFFFE24).w
0009EF74                            @loop_vblank:
0009EF74 44D5                       		move.w	(a5),ccr
0009EF76 6AD8                       		bpl.s	@loop
0009EF78                            
0009EF78 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0009EF7E 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0009EF82 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0009EF86 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0009EF88 66EA                       		bne.s	@loop_vblank			; if not zero, loop
0009EF8A 60B0                       		bra.s	@start
0009EF8C                            @palett:
0009EF8C 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
0009EF92                            
0009EF92 4238 FE24                  		clr.b	($FFFFFE24).w
0009EF96 4638 FE25                  		not.b	($FFFFFE25).w
0009EF9A 6700                       		beq.s	@not_black
0009EF9C 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
0009EFA2 6000                       		bra.s	@merge
0009EFA4                            	@not_black:
0009EFA4 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
0009EFAA                            	@merge:
0009EFAA 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
0009EFAE 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
0009EFB2 3F3C 0080                  		move.w	#$80+((0&$C000)>>14),-(sp) ;dest
0009EFB6 3A9F                       		move.w	(sp)+,(a5)
0009EFB8                            		
0009EFB8 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
0009EFBC 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
0009EFC0 4A83                       		tst.l	d3
0009EFC2 66B0                       		bne.s	@loop_vblank
0009EFC4 6000 FF76                  		bra.w	@start
0009EFC8                            ; ===========================================================================
0009EFC8                            ; ---------------------------------------------------------------------------
0009EFC8                            ; Play music track $81-$9F
0009EFC8                            ; ---------------------------------------------------------------------------
0009EFC8                            
0009EFC8                            Sound_Music:				; XREF: Sound_ChkValue
0009EFC8 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0009EFCC 6600                       		bne.s	loc_72024	; if not, branch
0009EFCE 4A2E 0027                  		tst.b	$27(a6)
0009EFD2 6600 0000                  		bne.w	loc_721B6
0009EFD6 4BEE 0040                  		lea	$40(a6),a5
0009EFDA 7009                       		moveq	#9,d0
0009EFDC                            
0009EFDC                            loc_71FE6:
0009EFDC 0895 0002                  		bclr	#2,(a5)
0009EFE0 DAFC 0030                  		adda.w	#$30,a5
0009EFE4 51C8 FFF6                  		dbf	d0,loc_71FE6
0009EFE8                            
0009EFE8 4BEE 0220                  		lea	$220(a6),a5
0009EFEC 7005                       		moveq	#5,d0
0009EFEE                            
0009EFEE                            loc_71FF8:
0009EFEE 0895 0007                  		bclr	#7,(a5)
0009EFF2 DAFC 0030                  		adda.w	#$30,a5
0009EFF6 51C8 FFF6                  		dbf	d0,loc_71FF8
0009EFFA 4216                       		clr.b	0(a6)
0009EFFC 204E                       		movea.l	a6,a0
0009EFFE 43EE 03A0                  		lea	$3A0(a6),a1
0009F002 303C 0087                  		move.w	#$87,d0
0009F006                            
0009F006                            loc_72012:
0009F006 22D8                       		move.l	(a0)+,(a1)+
0009F008 51C8 FFFC                  		dbf	d0,loc_72012
0009F00C                            
0009F00C 1D7C 0080 0027             		move.b	#$80,$27(a6)
0009F012 4216                       		clr.b	0(a6)
0009F014 6000                       		bra.s	loc_7202C
0009F016                            ; ===========================================================================
0009F016                            
0009F016                            loc_72024:
0009F016 422E 0027                  		clr.b	$27(a6)
0009F01A 422E 0026                  		clr.b	$26(a6)
0009F01E                            
0009F01E                            loc_7202C:
0009F01E 4EBA 0000                  		jsr	sub_725CA(pc)
0009F022 2879 0009 E79A             		movea.l	(off_719A0).l,a4
0009F028 0C07 0080                  		cmpi.b	#$80,d7
0009F02C 6500                       		blo.s	@zeroindex
0009F02E                            		
0009F02E 0407 0080                  		subi.b	#$80,d7
0009F032 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0009F038 2879 0009 E792             		movea.l	(Go_MusicIndex80).l,a4
0009F03E 6000                       		bra.s @continue
0009F040                            	@zeroindex:
0009F040 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0009F046 2879 0009 E78E             		movea.l	(Go_MusicIndex).l,a4
0009F04C                            	@continue:
0009F04C E54F                       		lsl.w	#2,d7
0009F04E 2874 7000                  		movea.l	(a4,d7.w),a4
0009F052 7000                       		moveq	#0,d0
0009F054 3014                       		move.w	(a4),d0
0009F056 D08C                       		add.l	a4,d0
0009F058 2D40 0018                  		move.l	d0,$18(a6)
0009F05C 102C 0005                  		move.b	5(a4),d0
0009F060 1D40 0028                  		move.b	d0,$28(a6)
0009F064 4A2E 002A                  		tst.b	$2A(a6)
0009F068 6700                       		beq.s	loc_72068
0009F06A 102E 0029                  		move.b	$29(a6),d0
0009F06E                            
0009F06E                            loc_72068:
0009F06E 1D40 0002                  		move.b	d0,2(a6)
0009F072 1D40 0001                  		move.b	d0,1(a6)
0009F076 7200                       		moveq	#0,d1
0009F078 264C                       		movea.l	a4,a3
0009F07A 5C4C                       		addq.w	#6,a4
0009F07C 7E00                       		moveq	#0,d7
0009F07E 1E2B 0002                  		move.b	2(a3),d7
0009F082 6700 0000                  		beq.w	loc_72114
0009F086 5307                       		subq.b	#1,d7
0009F088 123C 00C0                  		move.b	#-$40,d1
0009F08C 182B 0004                  		move.b	4(a3),d4
0009F090 7C30                       		moveq	#$30,d6
0009F092 1A3C 0001                  		move.b	#1,d5
0009F096 43EE 0040                  		lea	$40(a6),a1
0009F09A 45FA 0000                  		lea	byte_721BA(pc),a2
0009F09E                            
0009F09E                            loc_72098:
0009F09E 08D1 0007                  		bset	#7,(a1)
0009F0A2 135A 0001                  		move.b	(a2)+,1(a1)
0009F0A6 1344 0002                  		move.b	d4,2(a1)
0009F0AA 1346 000D                  		move.b	d6,$D(a1)
0009F0AE 1341 000A                  		move.b	d1,$A(a1)
0009F0B2 1345 000E                  		move.b	d5,$E(a1)
0009F0B6 7000                       		moveq	#0,d0
0009F0B8 301C                       		move.w	(a4)+,d0
0009F0BA D08B                       		add.l	a3,d0
0009F0BC 2340 0004                  		move.l	d0,4(a1)
0009F0C0 335C 0008                  		move.w	(a4)+,8(a1)
0009F0C4 D2C6                       		adda.w	d6,a1
0009F0C6 51CF FFD6                  		dbf	d7,loc_72098
0009F0CA 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0009F0D0 6600                       		bne.s	loc_720D8
0009F0D2 702B                       		moveq	#$2B,d0
0009F0D4 7200                       		moveq	#0,d1
0009F0D6 4EBA 0000                  		jsr	sub_7272E(pc)
0009F0DA 6000 0000                  		bra.w	loc_72114
0009F0DE                            ; ===========================================================================
0009F0DE                            
0009F0DE                            loc_720D8:
0009F0DE 7028                       		moveq	#$28,d0
0009F0E0 7206                       		moveq	#6,d1
0009F0E2 4EBA 0000                  		jsr	sub_7272E(pc)
0009F0E6 103C 0042                  		move.b	#$42,d0
0009F0EA 727F                       		moveq	#$7F,d1
0009F0EC 4EBA 0000                  		jsr	sub_72764(pc)
0009F0F0 103C 004A                  		move.b	#$4A,d0
0009F0F4 727F                       		moveq	#$7F,d1
0009F0F6 4EBA 0000                  		jsr	sub_72764(pc)
0009F0FA 103C 0046                  		move.b	#$46,d0
0009F0FE 727F                       		moveq	#$7F,d1
0009F100 4EBA 0000                  		jsr	sub_72764(pc)
0009F104 103C 004E                  		move.b	#$4E,d0
0009F108 727F                       		moveq	#$7F,d1
0009F10A 4EBA 0000                  		jsr	sub_72764(pc)
0009F10E 103C 00B6                  		move.b	#-$4A,d0
0009F112 123C 00C0                  		move.b	#-$40,d1
0009F116 4EBA 0000                  		jsr	sub_72764(pc)
0009F11A                            
0009F11A                            loc_72114:
0009F11A 7E00                       		moveq	#0,d7
0009F11C 1E2B 0003                  		move.b	3(a3),d7
0009F120 6700                       		beq.s	loc_72154
0009F122 5307                       		subq.b	#1,d7
0009F124 43EE 0190                  		lea	$190(a6),a1
0009F128 45FA 0000                  		lea	byte_721C2(pc),a2
0009F12C                            
0009F12C                            loc_72126:
0009F12C 08D1 0007                  		bset	#7,(a1)
0009F130 135A 0001                  		move.b	(a2)+,1(a1)
0009F134 1344 0002                  		move.b	d4,2(a1)
0009F138 1346 000D                  		move.b	d6,$D(a1)
0009F13C 1345 000E                  		move.b	d5,$E(a1)
0009F140 7000                       		moveq	#0,d0
0009F142 301C                       		move.w	(a4)+,d0
0009F144 D08B                       		add.l	a3,d0
0009F146 2340 0004                  		move.l	d0,4(a1)
0009F14A 335C 0008                  		move.w	(a4)+,8(a1)
0009F14E 101C                       		move.b	(a4)+,d0
0009F150 135C 000B                  		move.b	(a4)+,$B(a1)
0009F154 D2C6                       		adda.w	d6,a1
0009F156 51CF FFD4                  		dbf	d7,loc_72126
0009F15A                            
0009F15A                            loc_72154:
0009F15A 43EE 0220                  		lea	$220(a6),a1
0009F15E 7E05                       		moveq	#5,d7
0009F160                            
0009F160                            loc_7215A:
0009F160 4A11                       		tst.b	(a1)
0009F162 6A00 0000                  		bpl.w	loc_7217C
0009F166 7000                       		moveq	#0,d0
0009F168 1029 0001                  		move.b	1(a1),d0
0009F16C 6B00                       		bmi.s	loc_7216E
0009F16E 5500                       		subq.b	#2,d0
0009F170 E508                       		lsl.b	#2,d0
0009F172 6000                       		bra.s	loc_72170
0009F174                            ; ===========================================================================
0009F174                            
0009F174                            loc_7216E:
0009F174 E608                       		lsr.b	#3,d0
0009F176                            
0009F176                            loc_72170:
0009F176 41FA 0000                  		lea	dword_722CC(pc),a0
0009F17A 2070 0000                  		movea.l	(a0,d0.w),a0
0009F17E 08D0 0002                  		bset	#2,(a0)
0009F182                            
0009F182                            loc_7217C:
0009F182 D2C6                       		adda.w	d6,a1
0009F184 51CF FFDA                  		dbf	d7,loc_7215A
0009F188                            
0009F188 4A6E 0340                  		tst.w	$340(a6)
0009F18C 6A00                       		bpl.s	loc_7218E
0009F18E 08EE 0002 0100             		bset	#2,$100(a6)
0009F194                            
0009F194                            loc_7218E:
0009F194 4A6E 0370                  		tst.w	$370(a6)
0009F198 6A00                       		bpl.s	loc_7219A
0009F19A 08EE 0002 01F0             		bset	#2,$1F0(a6)
0009F1A0                            
0009F1A0                            loc_7219A:
0009F1A0 4BEE 0070                  		lea	$70(a6),a5
0009F1A4 7805                       		moveq	#5,d4
0009F1A6                            
0009F1A6                            loc_721A0:
0009F1A6 4EBA 0000                  		jsr	sub_726FE(pc)
0009F1AA DAC6                       		adda.w	d6,a5
0009F1AC 51CC FFF8                  		dbf	d4,loc_721A0
0009F1B0 7802                       		moveq	#2,d4
0009F1B2                            
0009F1B2                            loc_721AC:
0009F1B2 4EBA 0000                  		jsr	sub_729A0(pc)
0009F1B6 DAC6                       		adda.w	d6,a5
0009F1B8 51CC FFF8                  		dbf	d4,loc_721AC
0009F1BC                            
0009F1BC                            loc_721B6:
0009F1BC 584F                       		addq.w	#4,sp
0009F1BE 4E75                       		rts	
0009F1C0                            ; ===========================================================================
0009F1C0 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0009F1C8                            		even
0009F1C8 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0009F1CC                            		even
0009F1CC                            ; ===========================================================================
0009F1CC                            ; ---------------------------------------------------------------------------
0009F1CC                            ; Play normal sound effect
0009F1CC                            ; ---------------------------------------------------------------------------
0009F1CC                            
0009F1CC                            Sound_SFX:				; XREF: Sound_ChkValue
0009F1CC 4A2E 0027                  		tst.b	$27(a6)
0009F1D0 6600 0000                  		bne.w	loc_722C6
0009F1D4 4A2E 0004                  		tst.b	4(a6)
0009F1D8 6600 0000                  		bne.w	loc_722C6
0009F1DC 4A2E 0024                  		tst.b	$24(a6)
0009F1E0 6600 0000                  		bne.w	loc_722C6
0009F1E4 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0009F1E8 6600                       		bne.s	Sound_notB5	; if not, branch
0009F1EA 4A2E 002B                  		tst.b	$2B(a6)
0009F1EE 6600                       		bne.s	loc_721EE
0009F1F0 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0009F1F4                            
0009F1F4                            loc_721EE:
0009F1F4 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0009F1FA                            
0009F1FA                            Sound_notB5:
0009F1FA 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0009F1FE 6600                       		bne.s	Sound_notA7	; if not, branch
0009F200 4A2E 002C                  		tst.b	$2C(a6)
0009F204 6600 0000                  		bne.w	locret_722C4
0009F208 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0009F20E                            
0009F20E                            Sound_notA7:
0009F20E 2079 0009 E796             		movea.l	(Go_SoundIndex).l,a0
0009F214 0407 00A0                  		subi.b	#$A0,d7
0009F218 E54F                       		lsl.w	#2,d7
0009F21A 2670 7000                  		movea.l	(a0,d7.w),a3
0009F21E 224B                       		movea.l	a3,a1
0009F220 7200                       		moveq	#0,d1
0009F222 3219                       		move.w	(a1)+,d1
0009F224 D28B                       		add.l	a3,d1
0009F226 1A19                       		move.b	(a1)+,d5
0009F228 1E19                       		move.b	(a1)+,d7
0009F22A 5307                       		subq.b	#1,d7
0009F22C 7C30                       		moveq	#$30,d6
0009F22E                            
0009F22E                            loc_72228:
0009F22E 7600                       		moveq	#0,d3
0009F230 1629 0001                  		move.b	1(a1),d3
0009F234 1803                       		move.b	d3,d4
0009F236 6B00                       		bmi.s	loc_72244
0009F238 5543                       		subq.w	#2,d3
0009F23A E54B                       		lsl.w	#2,d3
0009F23C 4BFA 0000                  		lea	dword_722CC(pc),a5
0009F240 2A75 3000                  		movea.l	(a5,d3.w),a5
0009F244 08D5 0002                  		bset	#2,(a5)
0009F248 6000                       		bra.s	loc_7226E
0009F24A                            ; ===========================================================================
0009F24A                            
0009F24A                            loc_72244:
0009F24A E64B                       		lsr.w	#3,d3
0009F24C 4BFA 0000                  		lea	dword_722CC(pc),a5
0009F250 2A75 3000                  		movea.l	(a5,d3.w),a5
0009F254 08D5 0002                  		bset	#2,(a5)
0009F258 0C04 00C0                  		cmpi.b	#$C0,d4
0009F25C 6600                       		bne.s	loc_7226E
0009F25E 1004                       		move.b	d4,d0
0009F260 0000 001F                  		ori.b	#$1F,d0
0009F264 13C0 00C0 0011             		move.b	d0,($C00011).l
0009F26A 0840 0005                  		bchg	#5,d0
0009F26E 13C0 00C0 0011             		move.b	d0,($C00011).l
0009F274                            
0009F274                            loc_7226E:
0009F274 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0009F278 244D                       		movea.l	a5,a2
0009F27A 700B                       		moveq	#$B,d0
0009F27C                            
0009F27C                            loc_72276:
0009F27C 429A                       		clr.l	(a2)+
0009F27E 51C8 FFFC                  		dbf	d0,loc_72276
0009F282                            
0009F282 3A99                       		move.w	(a1)+,(a5)
0009F284 1B45 0002                  		move.b	d5,2(a5)
0009F288 7000                       		moveq	#0,d0
0009F28A 3019                       		move.w	(a1)+,d0
0009F28C D08B                       		add.l	a3,d0
0009F28E 2B40 0004                  		move.l	d0,4(a5)
0009F292 3B59 0008                  		move.w	(a1)+,8(a5)
0009F296 1B7C 0001 000E             		move.b	#1,$E(a5)
0009F29C 1B46 000D                  		move.b	d6,$D(a5)
0009F2A0 4A04                       		tst.b	d4
0009F2A2 6B00                       		bmi.s	loc_722A8
0009F2A4 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0009F2AA 2B41 0020                  		move.l	d1,$20(a5)
0009F2AE                            
0009F2AE                            loc_722A8:
0009F2AE 51CF FF7E                  		dbf	d7,loc_72228
0009F2B2                            
0009F2B2 4A2E 0250                  		tst.b	$250(a6)
0009F2B6 6A00                       		bpl.s	loc_722B8
0009F2B8 08EE 0002 0340             		bset	#2,$340(a6)
0009F2BE                            
0009F2BE                            loc_722B8:
0009F2BE 4A2E 0310                  		tst.b	$310(a6)
0009F2C2 6A00                       		bpl.s	locret_722C4
0009F2C4 08EE 0002 0370             		bset	#2,$370(a6)
0009F2CA                            
0009F2CA                            locret_722C4:
0009F2CA 4E75                       		rts	
0009F2CC                            ; ===========================================================================
0009F2CC                            
0009F2CC                            loc_722C6:
0009F2CC 4216                       		clr.b	0(a6)
0009F2CE 4E75                       		rts	
0009F2D0                            ; ===========================================================================
0009F2D0 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0009F2D4 0000 0000                  		dc.l 0
0009F2D8 00FF F100                  		dc.l $FFF100
0009F2DC 00FF F130                  		dc.l $FFF130
0009F2E0 00FF F190                  		dc.l $FFF190
0009F2E4 00FF F1C0                  		dc.l $FFF1C0
0009F2E8 00FF F1F0                  		dc.l $FFF1F0
0009F2EC 00FF F1F0                  		dc.l $FFF1F0
0009F2F0 00FF F220                  dword_722EC:	dc.l $FFF220
0009F2F4 0000 0000                  		dc.l 0
0009F2F8 00FF F250                  		dc.l $FFF250
0009F2FC 00FF F280                  		dc.l $FFF280
0009F300 00FF F2B0                  		dc.l $FFF2B0
0009F304 00FF F2E0                  		dc.l $FFF2E0
0009F308 00FF F310                  		dc.l $FFF310
0009F30C 00FF F310                  		dc.l $FFF310
0009F310                            ; ===========================================================================
0009F310                            ; ---------------------------------------------------------------------------
0009F310                            ; Play GHZ waterfall sound
0009F310                            ; ---------------------------------------------------------------------------
0009F310                            
0009F310                            Sound_D0:				; XREF: Sound_ChkValue
0009F310 4A2E 0027                  		tst.b	$27(a6)
0009F314 6600 0000                  		bne.w	locret_723C6
0009F318 4A2E 0004                  		tst.b	4(a6)
0009F31C 6600 0000                  		bne.w	locret_723C6
0009F320 4A2E 0024                  		tst.b	$24(a6)
0009F324 6600 0000                  		bne.w	locret_723C6
0009F328 2079 0009 E78A             		movea.l	(Go_SoundD0).l,a0
0009F32E 0407 00D0                  		subi.b	#$D0,d7
0009F332 E54F                       		lsl.w	#2,d7
0009F334 2670 7000                  		movea.l	(a0,d7.w),a3
0009F338 224B                       		movea.l	a3,a1
0009F33A 7000                       		moveq	#0,d0
0009F33C 3019                       		move.w	(a1)+,d0
0009F33E D08B                       		add.l	a3,d0
0009F340 2D40 0020                  		move.l	d0,$20(a6)
0009F344 1A19                       		move.b	(a1)+,d5
0009F346 1E19                       		move.b	(a1)+,d7
0009F348 5307                       		subq.b	#1,d7
0009F34A 7C30                       		moveq	#$30,d6
0009F34C                            
0009F34C                            loc_72348:
0009F34C 1829 0001                  		move.b	1(a1),d4
0009F350 6B00                       		bmi.s	loc_7235A
0009F352 08EE 0002 0100             		bset	#2,$100(a6)
0009F358 4BEE 0340                  		lea	$340(a6),a5
0009F35C 6000                       		bra.s	loc_72364
0009F35E                            ; ===========================================================================
0009F35E                            
0009F35E                            loc_7235A:
0009F35E 08EE 0002 01F0             		bset	#2,$1F0(a6)
0009F364 4BEE 0370                  		lea	$370(a6),a5
0009F368                            
0009F368                            loc_72364:
0009F368 244D                       		movea.l	a5,a2
0009F36A 700B                       		moveq	#$B,d0
0009F36C                            
0009F36C                            loc_72368:
0009F36C 429A                       		clr.l	(a2)+
0009F36E 51C8 FFFC                  		dbf	d0,loc_72368
0009F372                            
0009F372 3A99                       		move.w	(a1)+,(a5)
0009F374 1B45 0002                  		move.b	d5,2(a5)
0009F378 7000                       		moveq	#0,d0
0009F37A 3019                       		move.w	(a1)+,d0
0009F37C D08B                       		add.l	a3,d0
0009F37E 2B40 0004                  		move.l	d0,4(a5)
0009F382 3B59 0008                  		move.w	(a1)+,8(a5)
0009F386 1B7C 0001 000E             		move.b	#1,$E(a5)
0009F38C 1B46 000D                  		move.b	d6,$D(a5)
0009F390 4A04                       		tst.b	d4
0009F392 6B00                       		bmi.s	loc_72396
0009F394 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0009F39A                            
0009F39A                            loc_72396:
0009F39A 51CF FFB0                  		dbf	d7,loc_72348
0009F39E                            
0009F39E 4A2E 0250                  		tst.b	$250(a6)
0009F3A2 6A00                       		bpl.s	loc_723A6
0009F3A4 08EE 0002 0340             		bset	#2,$340(a6)
0009F3AA                            
0009F3AA                            loc_723A6:
0009F3AA 4A2E 0310                  		tst.b	$310(a6)
0009F3AE 6A00                       		bpl.s	locret_723C6
0009F3B0 08EE 0002 0370             		bset	#2,$370(a6)
0009F3B6 0004 001F                  		ori.b	#$1F,d4
0009F3BA 13C4 00C0 0011             		move.b	d4,($C00011).l
0009F3C0 0844 0005                  		bchg	#5,d4
0009F3C4 13C4 00C0 0011             		move.b	d4,($C00011).l
0009F3CA                            
0009F3CA                            locret_723C6:
0009F3CA 4E75                       		rts	
0009F3CC                            ; End of function Sound_ChkValue
0009F3CC                            
0009F3CC                            ; ===========================================================================
0009F3CC 00FF F100                  		dc.l $FFF100
0009F3D0 00FF F1F0                  		dc.l $FFF1F0
0009F3D4 00FF F250                  		dc.l $FFF250
0009F3D8 00FF F310                  		dc.l $FFF310
0009F3DC 00FF F340                  		dc.l $FFF340
0009F3E0 00FF F370                  		dc.l $FFF370
0009F3E4                            
0009F3E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009F3E4                            
0009F3E4                            
0009F3E4                            Snd_FadeOut1:				; XREF: Sound_E0
0009F3E4 4216                       		clr.b	0(a6)
0009F3E6 4BEE 0220                  		lea	$220(a6),a5
0009F3EA 7E05                       		moveq	#5,d7
0009F3EC                            
0009F3EC                            loc_723EA:
0009F3EC 4A15                       		tst.b	(a5)
0009F3EE 6A00 0000                  		bpl.w	loc_72472
0009F3F2 0895 0007                  		bclr	#7,(a5)
0009F3F6 7600                       		moveq	#0,d3
0009F3F8 162D 0001                  		move.b	1(a5),d3
0009F3FC 6B00                       		bmi.s	loc_7243C
0009F3FE 4EBA 0000                  		jsr	sub_726FE(pc)
0009F402 0C03 0004                  		cmpi.b	#4,d3
0009F406 6600                       		bne.s	loc_72416
0009F408 4A2E 0340                  		tst.b	$340(a6)
0009F40C 6A00                       		bpl.s	loc_72416
0009F40E 4BEE 0340                  		lea	$340(a6),a5
0009F412 226E 0020                  		movea.l	$20(a6),a1
0009F416 6000                       		bra.s	loc_72428
0009F418                            ; ===========================================================================
0009F418                            
0009F418                            loc_72416:
0009F418 5503                       		subq.b	#2,d3
0009F41A E50B                       		lsl.b	#2,d3
0009F41C 41FA FEB2                  		lea	dword_722CC(pc),a0
0009F420 264D                       		movea.l	a5,a3
0009F422 2A70 3000                  		movea.l	(a0,d3.w),a5
0009F426 226E 0018                  		movea.l	$18(a6),a1
0009F42A                            
0009F42A                            loc_72428:
0009F42A 0895 0002                  		bclr	#2,(a5)
0009F42E 08D5 0001                  		bset	#1,(a5)
0009F432 102D 000B                  		move.b	$B(a5),d0
0009F436 4EBA 0000                  		jsr	sub_72C4E(pc)
0009F43A 2A4B                       		movea.l	a3,a5
0009F43C 6000                       		bra.s	loc_72472
0009F43E                            ; ===========================================================================
0009F43E                            
0009F43E                            loc_7243C:
0009F43E 4EBA 0000                  		jsr	sub_729A0(pc)
0009F442 41EE 0370                  		lea	$370(a6),a0
0009F446 0C03 00E0                  		cmpi.b	#$E0,d3
0009F44A 6700                       		beq.s	loc_7245A
0009F44C 0C03 00C0                  		cmpi.b	#$C0,d3
0009F450 6700                       		beq.s	loc_7245A
0009F452 E60B                       		lsr.b	#3,d3
0009F454 41FA FE7A                  		lea	dword_722CC(pc),a0
0009F458 2070 3000                  		movea.l	(a0,d3.w),a0
0009F45C                            
0009F45C                            loc_7245A:
0009F45C 0890 0002                  		bclr	#2,(a0)
0009F460 08D0 0001                  		bset	#1,(a0)
0009F464 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0009F46A 6600                       		bne.s	loc_72472
0009F46C 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0009F474                            
0009F474                            loc_72472:
0009F474 DAFC 0030                  		adda.w	#$30,a5
0009F478 51CF FF72                  		dbf	d7,loc_723EA
0009F47C                            
0009F47C 4E75                       		rts	
0009F47E                            ; End of function Snd_FadeOut1
0009F47E                            
0009F47E                            
0009F47E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009F47E                            
0009F47E                            
0009F47E                            Snd_FadeOut2:				; XREF: Sound_E0
0009F47E 4BEE 0340                  		lea	$340(a6),a5
0009F482 4A15                       		tst.b	(a5)
0009F484 6A00                       		bpl.s	loc_724AE
0009F486 0895 0007                  		bclr	#7,(a5)
0009F48A 0815 0002                  		btst	#2,(a5)
0009F48E 6600                       		bne.s	loc_724AE
0009F490 4EBA 0000                  		jsr	loc_7270A(pc)
0009F494 4BEE 0100                  		lea	$100(a6),a5
0009F498 0895 0002                  		bclr	#2,(a5)
0009F49C 08D5 0001                  		bset	#1,(a5)
0009F4A0 4A15                       		tst.b	(a5)
0009F4A2 6A00                       		bpl.s	loc_724AE
0009F4A4 226E 0018                  		movea.l	$18(a6),a1
0009F4A8 102D 000B                  		move.b	$B(a5),d0
0009F4AC 4EBA 0000                  		jsr	sub_72C4E(pc)
0009F4B0                            
0009F4B0                            loc_724AE:
0009F4B0 4BEE 0370                  		lea	$370(a6),a5
0009F4B4 4A15                       		tst.b	(a5)
0009F4B6 6A00                       		bpl.s	locret_724E4
0009F4B8 0895 0007                  		bclr	#7,(a5)
0009F4BC 0815 0002                  		btst	#2,(a5)
0009F4C0 6600                       		bne.s	locret_724E4
0009F4C2 4EBA 0000                  		jsr	loc_729A6(pc)
0009F4C6 4BEE 01F0                  		lea	$1F0(a6),a5
0009F4CA 0895 0002                  		bclr	#2,(a5)
0009F4CE 08D5 0001                  		bset	#1,(a5)
0009F4D2 4A15                       		tst.b	(a5)
0009F4D4 6A00                       		bpl.s	locret_724E4
0009F4D6 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0009F4DC 6600                       		bne.s	locret_724E4
0009F4DE 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0009F4E6                            
0009F4E6                            locret_724E4:
0009F4E6 4E75                       		rts	
0009F4E8                            ; End of function Snd_FadeOut2
0009F4E8                            
0009F4E8                            ; ===========================================================================
0009F4E8                            ; ---------------------------------------------------------------------------
0009F4E8                            ; Fade out music
0009F4E8                            ; ---------------------------------------------------------------------------
0009F4E8                            
0009F4E8                            Sound_E0:				; XREF: Sound_ExIndex
0009F4E8 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0009F4EC 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0009F4F0 1D7C 0003 0006             		move.b	#3,6(a6)
0009F4F6 1D7C 0028 0004             		move.b	#$28,4(a6)
0009F4FC 422E 0040                  		clr.b	$40(a6)
0009F500 422E 002A                  		clr.b	$2A(a6)
0009F504 4E75                       		rts	
0009F506                            
0009F506                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009F506                            
0009F506                            
0009F506                            sub_72504:				; XREF: sub_71B4C
0009F506 102E 0006                  		move.b	6(a6),d0
0009F50A 6700                       		beq.s	loc_72510
0009F50C 532E 0006                  		subq.b	#1,6(a6)
0009F510 4E75                       		rts	
0009F512                            ; ===========================================================================
0009F512                            
0009F512                            loc_72510:
0009F512 532E 0004                  		subq.b	#1,4(a6)
0009F516 6700 0000                  		beq.w	Sound_E4
0009F51A 1D7C 0003 0006             		move.b	#3,6(a6)
0009F520 4BEE 0070                  		lea	$70(a6),a5
0009F524 7E05                       		moveq	#5,d7
0009F526                            
0009F526                            loc_72524:
0009F526 4A15                       		tst.b	(a5)
0009F528 6A00                       		bpl.s	loc_72538
0009F52A 522D 0009                  		addq.b	#1,9(a5)
0009F52E 6A00                       		bpl.s	loc_72534
0009F530 0895 0007                  		bclr	#7,(a5)
0009F534 6000                       		bra.s	loc_72538
0009F536                            ; ===========================================================================
0009F536                            
0009F536                            loc_72534:
0009F536 4EBA 0000                  		jsr	sub_72CB4(pc)
0009F53A                            
0009F53A                            loc_72538:
0009F53A DAFC 0030                  		adda.w	#$30,a5
0009F53E 51CF FFE6                  		dbf	d7,loc_72524
0009F542                            
0009F542 7E02                       		moveq	#2,d7
0009F544                            
0009F544                            loc_72542:
0009F544 4A15                       		tst.b	(a5)
0009F546 6A00                       		bpl.s	loc_72560
0009F548 522D 0009                  		addq.b	#1,9(a5)
0009F54C 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0009F552 6500                       		bcs.s	loc_72558
0009F554 0895 0007                  		bclr	#7,(a5)
0009F558 6000                       		bra.s	loc_72560
0009F55A                            ; ===========================================================================
0009F55A                            
0009F55A                            loc_72558:
0009F55A 1C2D 0009                  		move.b	9(a5),d6
0009F55E 4EBA 0000                  		jsr	sub_7296A(pc)
0009F562                            
0009F562                            loc_72560:
0009F562 DAFC 0030                  		adda.w	#$30,a5
0009F566 51CF FFDC                  		dbf	d7,loc_72542
0009F56A                            
0009F56A 4E75                       		rts	
0009F56C                            ; End of function sub_72504
0009F56C                            
0009F56C                            
0009F56C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009F56C                            
0009F56C                            
0009F56C                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0009F56C 7602                       		moveq	#2,d3
0009F56E 7028                       		moveq	#$28,d0
0009F570                            
0009F570                            loc_7256E:
0009F570 1203                       		move.b	d3,d1
0009F572 4EBA 0000                  		jsr	sub_7272E(pc)
0009F576 5801                       		addq.b	#4,d1
0009F578 4EBA 0000                  		jsr	sub_7272E(pc)
0009F57C 51CB FFF2                  		dbf	d3,loc_7256E
0009F580                            
0009F580 7040                       		moveq	#$40,d0
0009F582 727F                       		moveq	#$7F,d1
0009F584 7802                       		moveq	#2,d4
0009F586                            
0009F586                            loc_72584:
0009F586 7603                       		moveq	#3,d3
0009F588                            
0009F588                            loc_72586:
0009F588 4EBA 0000                  		jsr	sub_7272E(pc)
0009F58C 4EBA 0000                  		jsr	sub_72764(pc)
0009F590 5840                       		addq.w	#4,d0
0009F592 51CB FFF4                  		dbf	d3,loc_72586
0009F596                            
0009F596 0400 000F                  		subi.b	#$F,d0
0009F59A 51CC FFEA                  		dbf	d4,loc_72584
0009F59E                            
0009F59E 4E75                       		rts	
0009F5A0                            ; End of function sub_7256A
0009F5A0                            
0009F5A0                            ; ===========================================================================
0009F5A0                            ; ---------------------------------------------------------------------------
0009F5A0                            ; Stop music
0009F5A0                            ; ---------------------------------------------------------------------------
0009F5A0                            
0009F5A0                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0009F5A0 702B                       		moveq	#$2B,d0
0009F5A2 123C 0080                  		move.b	#$80,d1
0009F5A6 4EBA 0000                  		jsr	sub_7272E(pc)
0009F5AA 7027                       		moveq	#$27,d0
0009F5AC 7200                       		moveq	#0,d1
0009F5AE 4EBA 0000                  		jsr	sub_7272E(pc)
0009F5B2 204E                       		movea.l	a6,a0
0009F5B4 303C 00E3                  		move.w	#$E3,d0
0009F5B8                            
0009F5B8                            loc_725B6:
0009F5B8 4298                       		clr.l	(a0)+
0009F5BA 51C8 FFFC                  		dbf	d0,loc_725B6
0009F5BE                            
0009F5BE 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0009F5C4 4EBA FFA6                  		jsr	sub_7256A(pc)
0009F5C8 6000 0000                  		bra.w	sub_729B6
0009F5CC                            
0009F5CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009F5CC                            
0009F5CC                            
0009F5CC                            sub_725CA:				; XREF: Sound_ChkValue
0009F5CC 204E                       		movea.l	a6,a0
0009F5CE 1216                       		move.b	0(a6),d1
0009F5D0 142E 0027                  		move.b	$27(a6),d2
0009F5D4 162E 002A                  		move.b	$2A(a6),d3
0009F5D8 182E 0026                  		move.b	$26(a6),d4
0009F5DC 3A2E 000A                  		move.w	$A(a6),d5
0009F5E0 303C 0087                  		move.w	#$87,d0
0009F5E4                            
0009F5E4                            loc_725E4:
0009F5E4 4298                       		clr.l	(a0)+
0009F5E6 51C8 FFFC                  		dbf	d0,loc_725E4
0009F5EA                            
0009F5EA 1C81                       		move.b	d1,0(a6)
0009F5EC 1D42 0027                  		move.b	d2,$27(a6)
0009F5F0 1D43 002A                  		move.b	d3,$2A(a6)
0009F5F4 1D44 0026                  		move.b	d4,$26(a6)
0009F5F8 3D45 000A                  		move.w	d5,$A(a6)
0009F5FC 1D7C 0080 0009             		move.b	#$80,9(a6)
0009F602 4EBA FF68                  		jsr	sub_7256A(pc)
0009F606 6000 0000                  		bra.w	sub_729B6
0009F60A                            ; End of function sub_725CA
0009F60A                            
0009F60A                            
0009F60A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009F60A                            
0009F60A                            
0009F60A                            sub_7260C:				; XREF: sub_71B4C
0009F60A 1D6E 0002 0001             		move.b	2(a6),1(a6)
0009F610 41EE 004E                  		lea	$4E(a6),a0
0009F614 7030                       		moveq	#$30,d0
0009F616 7209                       		moveq	#9,d1
0009F618                            
0009F618                            loc_7261A:
0009F618 5210                       		addq.b	#1,(a0)
0009F61A D0C0                       		adda.w	d0,a0
0009F61C 51C9 FFFA                  		dbf	d1,loc_7261A
0009F620                            
0009F620 4E75                       		rts	
0009F622                            ; End of function sub_7260C
0009F622                            
0009F622                            ; ===========================================================================
0009F622                            ; ---------------------------------------------------------------------------
0009F622                            ; Speed	up music
0009F622                            ; ---------------------------------------------------------------------------
0009F622                            
0009F622                            Sound_E2:				; XREF: Sound_ExIndex
0009F622 4A2E 0027                  		tst.b	$27(a6)
0009F626 6600                       		bne.s	loc_7263E
0009F628 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0009F62E 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0009F634 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0009F63A 4E75                       		rts	
0009F63C                            ; ===========================================================================
0009F63C                            
0009F63C                            loc_7263E:
0009F63C 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0009F642 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0009F648 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0009F64E 4E75                       		rts	
0009F650                            ; ===========================================================================
0009F650                            ; ---------------------------------------------------------------------------
0009F650                            ; Change music back to normal speed
0009F650                            ; ---------------------------------------------------------------------------
0009F650                            
0009F650                            Sound_E3:				; XREF: Sound_ExIndex
0009F650 4A2E 0027                  		tst.b	$27(a6)
0009F654 6600                       		bne.s	loc_7266A
0009F656 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0009F65C 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0009F662 422E 002A                  		clr.b	$2A(a6)
0009F666 4E75                       		rts	
0009F668                            ; ===========================================================================
0009F668                            
0009F668                            loc_7266A:
0009F668 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0009F66E 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0009F674 422E 03CA                  		clr.b	$3CA(a6)
0009F678 4E75                       		rts	
0009F67A                            
0009F67A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009F67A                            
0009F67A                            
0009F67A                            sub_7267C:				; XREF: sub_71B4C
0009F67A 4A2E 0025                  		tst.b	$25(a6)
0009F67E 6700                       		beq.s	loc_72688
0009F680 532E 0025                  		subq.b	#1,$25(a6)
0009F684 4E75                       		rts	
0009F686                            ; ===========================================================================
0009F686                            
0009F686                            loc_72688:
0009F686 4A2E 0026                  		tst.b	$26(a6)
0009F68A 6700                       		beq.s	loc_726D6
0009F68C 532E 0026                  		subq.b	#1,$26(a6)
0009F690 1D7C 0002 0025             		move.b	#2,$25(a6)
0009F696 4BEE 0070                  		lea	$70(a6),a5
0009F69A 7E05                       		moveq	#5,d7
0009F69C                            
0009F69C                            loc_7269E:
0009F69C 4A15                       		tst.b	(a5)
0009F69E 6A00                       		bpl.s	loc_726AA
0009F6A0 532D 0009                  		subq.b	#1,9(a5)
0009F6A4 4EBA 0000                  		jsr	sub_72CB4(pc)
0009F6A8                            
0009F6A8                            loc_726AA:
0009F6A8 DAFC 0030                  		adda.w	#$30,a5
0009F6AC 51CF FFEE                  		dbf	d7,loc_7269E
0009F6B0 7E02                       		moveq	#2,d7
0009F6B2                            
0009F6B2                            loc_726B4:
0009F6B2 4A15                       		tst.b	(a5)
0009F6B4 6A00                       		bpl.s	loc_726CC
0009F6B6 532D 0009                  		subq.b	#1,9(a5)
0009F6BA 1C2D 0009                  		move.b	9(a5),d6
0009F6BE 0C06 0010                  		cmpi.b	#$10,d6
0009F6C2 6500                       		bcs.s	loc_726C8
0009F6C4 7C0F                       		moveq	#$F,d6
0009F6C6                            
0009F6C6                            loc_726C8:
0009F6C6 4EBA 0000                  		jsr	sub_7296A(pc)
0009F6CA                            
0009F6CA                            loc_726CC:
0009F6CA DAFC 0030                  		adda.w	#$30,a5
0009F6CE 51CF FFE2                  		dbf	d7,loc_726B4
0009F6D2 4E75                       		rts	
0009F6D4                            ; ===========================================================================
0009F6D4                            
0009F6D4                            loc_726D6:
0009F6D4 08AE 0002 0040             		bclr	#2,$40(a6)
0009F6DA 422E 0024                  		clr.b	$24(a6)
0009F6DE 4E75                       		rts	
0009F6E0                            ; End of function sub_7267C
0009F6E0                            
0009F6E0                            ; ===========================================================================
0009F6E0                            
0009F6E0                            loc_726E2:				; XREF: sub_71CCA
0009F6E0 0815 0001                  		btst	#1,(a5)
0009F6E4 6600                       		bne.s	locret_726FC
0009F6E6 0815 0002                  		btst	#2,(a5)
0009F6EA 6600                       		bne.s	locret_726FC
0009F6EC 7028                       		moveq	#$28,d0
0009F6EE 122D 0001                  		move.b	1(a5),d1
0009F6F2 0001 00F0                  		ori.b	#-$10,d1
0009F6F6 6000 0000                  		bra.w	sub_7272E
0009F6FA                            ; ===========================================================================
0009F6FA                            
0009F6FA                            locret_726FC:
0009F6FA 4E75                       		rts	
0009F6FC                            
0009F6FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009F6FC                            
0009F6FC                            
0009F6FC                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0009F6FC 0815 0004                  		btst	#4,(a5)
0009F700 6600                       		bne.s	locret_72714
0009F702 0815 0002                  		btst	#2,(a5)
0009F706 6600                       		bne.s	locret_72714
0009F708                            
0009F708                            loc_7270A:				; XREF: Snd_FadeOut2
0009F708 7028                       		moveq	#$28,d0
0009F70A 122D 0001                  		move.b	1(a5),d1
0009F70E 6000 0000                  		bra.w	sub_7272E
0009F712                            ; ===========================================================================
0009F712                            
0009F712                            locret_72714:
0009F712 4E75                       		rts	
0009F714                            ; End of function sub_726FE
0009F714                            
0009F714                            ; ===========================================================================
0009F714                            ; ===========================================================================
0009F714                            loc_72716:
0009F714 0815 0002                                  btst    #2,(a5)                         ; Is track being overriden by sfx?
0009F718 6600                                       bne.s   @locret                         ; Return if yes
0009F71A 6000 0000                                  bra.w   sub_72722
0009F71E                            ; ===========================================================================
0009F71E                            ; locret_72720:
0009F71E                            @locret:
0009F71E 4E75                                       rts     
0009F720                            
0009F720                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0009F720                            
0009F720                            sub_72722:
0009F720 142D 0001                                  move.b  1(a5), d2
0009F724 5902                                       subq.b  #4, d2                          ; Is this bound for part I or II?
0009F726 6400                                       bcc.s   loc_7275A                       ; If part II, branch
0009F728 5802                                       addq.b  #4, d2                          ; Add in voice control bits
0009F72A D002                                       add.b   d2, d0                          ;
0009F72C                            
0009F72C                            ; ---------------------------------------------------------------------------
0009F72C                            sub_7272E:
0009F76C 4A39 00A0 4000             @waitLoop:      tst.b   ($A04000).l             ; is FM busy?
0009F772 6BF8                                       bmi.s   @waitLoop               ; branch if yes
0009F774 13C0 00A0 4000                             move.b  d0, ($A04000).l
0009F77A 4E71                                       nop
0009F77C 13C1 00A0 4001                             move.b  d1, ($A04001).l
0009F782 4E71                                       nop
0009F784 4E71                                       nop
0009F786 4A39 00A0 4000             @waitLoop2:     tst.b   ($A04000).l             ; is FM busy?
0009F78C 6BF8                                       bmi.s   @waitLoop2              ; branch if yes
0009F78E 13FC 002A 00A0 4000                        move.b  #$2A, ($A04000).l       ; restore DAC output for Mega PCM
0009F79E 4E75                                       rts
0009F7A0                            ; End of function sub_7272E
0009F7A0                            
0009F7A0                            ; ===========================================================================
0009F7A0                            loc_7275A:
0009F7A0 D002                                       add.b   d2,d0                   ; Add in to destination register
0009F7A2                            
0009F7A2                            ; ---------------------------------------------------------------------------
0009F7A2                            sub_72764:
0009F7E2 4A39 00A0 4000             @waitLoop:      tst.b   ($A04000).l             ; is FM busy?
0009F7E8 6BF8                                       bmi.s   @waitLoop               ; branch if yes
0009F7EA 13C0 00A0 4002                             move.b  d0, ($A04002).l
0009F7F0 4E71                                       nop
0009F7F2 13C1 00A0 4003                             move.b  d1, ($A04003).l
0009F7F8 4E71                                       nop
0009F7FA 4E71                                       nop
0009F7FC 4A39 00A0 4000             @waitLoop2:     tst.b   ($A04000).l             ; is FM busy?
0009F802 6BF8                                       bmi.s   @waitLoop2              ; branch if yes
0009F804 13FC 002A 00A0 4000                        move.b  #$2A, ($A04000).l       ; restore DAC output for Mega PCM
0009F814 4E75                                       rts
0009F816                            ; End of function sub_72764
0009F816                            ;loc_72716:				; XREF: sub_72A5A
0009F816                            ;		btst	#2,(a5)
0009F816                            ;		bne.s	locret_72720
0009F816                            ;		bra.w	sub_72722
0009F816                            ; ===========================================================================
0009F816                            
0009F816                            ;locret_72720:
0009F816                            ;		rts	
0009F816                            
0009F816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009F816                            
0009F816                            
0009F816                            ;sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0009F816                            ;		btst	#2,1(a5)
0009F816                            ;		bne.s	loc_7275A
0009F816                            ;		add.b	1(a5),d0
0009F816                            ; End of function sub_72722
0009F816                            
0009F816                            
0009F816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009F816                            
0009F816                            
0009F816                            ;sub_7272E:				; XREF: loc_71E6A
0009F816                            ;		move.b	($A04000).l,d2
0009F816                            ;		btst	#7,d2
0009F816                            ;		bne.s	sub_7272E
0009F816                            ;		move.b	d0,($A04000).l
0009F816                            ;		nop	
0009F816                            ;		nop	
0009F816                            ;		nop	
0009F816                            
0009F816                            ;loc_72746:
0009F816                            ;		move.b	($A04000).l,d2
0009F816                            ;		btst	#7,d2
0009F816                            ;		bne.s	loc_72746
0009F816                            ;
0009F816                            ;		move.b	d1,($A04001).l
0009F816                            ;		rts	
0009F816                            ; End of function sub_7272E
0009F816                            
0009F816                            ; ===========================================================================
0009F816                            
0009F816                            ;loc_7275A:				; XREF: sub_72722
0009F816                            ;		move.b	1(a5),d2
0009F816                            ;		bclr	#2,d2
0009F816                            ;		add.b	d2,d0
0009F816                            
0009F816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009F816                            
0009F816                            
0009F816                            ;sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0009F816                            ;		move.b	($A04000).l,d2
0009F816                            ;		btst	#7,d2
0009F816                            ;		bne.s	sub_72764
0009F816                            ;		move.b	d0,($A04002).l
0009F816                            ;		nop	
0009F816                            ;		nop	
0009F816                            ;		nop	
0009F816                            ;
0009F816                            ;loc_7277C:
0009F816                            ;		move.b	($A04000).l,d2
0009F816                            ;		btst	#7,d2
0009F816                            ;		bne.s	loc_7277C
0009F816                            ;
0009F816                            ;		move.b	d1,($A04003).l
0009F816                            ;		rts	
0009F816                            ; End of function sub_72764
0009F816                            
0009F816                            ; ===========================================================================
0009F816 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0009F828 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0009F83A 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0009F84A 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0009F85A 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0009F86A 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0009F87A 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0009F88A 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0009F89A 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0009F8AA 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0009F8BA 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0009F8CA 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0009F8D6                            
0009F8D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009F8D6                            
0009F8D6                            
0009F8D6                            sub_72850:				; XREF: sub_71B4C
0009F8D6 532D 000E                  		subq.b	#1,$E(a5)
0009F8DA 6600                       		bne.s	loc_72866
0009F8DC 0895 0004                  		bclr	#4,(a5)
0009F8E0 4EBA 0000                  		jsr	sub_72878(pc)
0009F8E4 4EBA 0000                  		jsr	sub_728DC(pc)
0009F8E8 6000 0000                  		bra.w	loc_7292E
0009F8EC                            ; ===========================================================================
0009F8EC                            
0009F8EC                            loc_72866:
0009F8EC 4EBA F388                  		jsr	sub_71D9E(pc)
0009F8F0 4EBA 0000                  		jsr	sub_72926(pc)
0009F8F4 4EBA F3A8                  		jsr	sub_71DC6(pc)
0009F8F8 4EBA 0000                  		jsr	sub_728E2(pc)
0009F8FC 4E75                       		rts	
0009F8FE                            ; End of function sub_72850
0009F8FE                            
0009F8FE                            
0009F8FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009F8FE                            
0009F8FE                            
0009F8FE                            sub_72878:				; XREF: sub_72850
0009F8FE 0895 0001                  		bclr	#1,(a5)
0009F902 286D 0004                  		movea.l	4(a5),a4
0009F906                            
0009F906                            loc_72880:
0009F906 7A00                       		moveq	#0,d5
0009F908 1A1C                       		move.b	(a4)+,d5
0009F90A 0C05 00E0                  		cmpi.b	#$E0,d5
0009F90E 6500                       		bcs.s	loc_72890
0009F910 4EBA 0000                  		jsr	sub_72A5A(pc)
0009F914 60F0                       		bra.s	loc_72880
0009F916                            ; ===========================================================================
0009F916                            
0009F916                            loc_72890:
0009F916 4A05                       		tst.b	d5
0009F918 6A00                       		bpl.s	loc_728A4
0009F91A 4EBA 0000                  		jsr	sub_728AC(pc)
0009F91E 1A1C                       		move.b	(a4)+,d5
0009F920 4A05                       		tst.b	d5
0009F922 6A00                       		bpl.s	loc_728A4
0009F924 534C                       		subq.w	#1,a4
0009F926 6000 F310                  		bra.w	sub_71D60
0009F92A                            ; ===========================================================================
0009F92A                            
0009F92A                            loc_728A4:
0009F92A 4EBA F2EC                  		jsr	sub_71D40(pc)
0009F92E 6000 F308                  		bra.w	sub_71D60
0009F932                            ; End of function sub_72878
0009F932                            
0009F932                            
0009F932                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009F932                            
0009F932                            
0009F932                            sub_728AC:				; XREF: sub_72878
0009F932 0405 0081                  		subi.b	#$81,d5
0009F936 6500                       		bcs.s	loc_728CA
0009F938 DA2D 0008                  		add.b	8(a5),d5
0009F93C 0245 007F                  		andi.w	#$7F,d5
0009F940 E34D                       		lsl.w	#1,d5
0009F942 41FA 0000                  		lea	word_729CE(pc),a0
0009F946 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0009F94C 6000 F2EA                  		bra.w	sub_71D60
0009F950                            ; ===========================================================================
0009F950                            
0009F950                            loc_728CA:
0009F950 08D5 0001                  		bset	#1,(a5)
0009F954 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0009F95A 4EBA F2DC                  		jsr	sub_71D60(pc)
0009F95E 6000 0000                  		bra.w	sub_729A0
0009F962                            ; End of function sub_728AC
0009F962                            
0009F962                            
0009F962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009F962                            
0009F962                            
0009F962                            sub_728DC:				; XREF: sub_72850
0009F962 3C2D 0010                  		move.w	$10(a5),d6
0009F966 6B00                       		bmi.s	loc_72920
0009F968                            ; End of function sub_728DC
0009F968                            
0009F968                            
0009F968                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009F968                            
0009F968                            
0009F968                            sub_728E2:				; XREF: sub_72850
0009F968 102D 001E                  		move.b	$1E(a5),d0
0009F96C 4880                       		ext.w	d0
0009F96E DC40                       		add.w	d0,d6
0009F970 0815 0002                  		btst	#2,(a5)
0009F974 6600                       		bne.s	locret_7291E
0009F976 0815 0001                  		btst	#1,(a5)
0009F97A 6600                       		bne.s	locret_7291E
0009F97C 102D 0001                  		move.b	1(a5),d0
0009F980 0C00 00E0                  		cmpi.b	#$E0,d0
0009F984 6600                       		bne.s	loc_72904
0009F986 103C 00C0                  		move.b	#$C0,d0
0009F98A                            
0009F98A                            loc_72904:
0009F98A 3206                       		move.w	d6,d1
0009F98C 0201 000F                  		andi.b	#$F,d1
0009F990 8001                       		or.b	d1,d0
0009F992 E84E                       		lsr.w	#4,d6
0009F994 0206 003F                  		andi.b	#$3F,d6
0009F998 13C0 00C0 0011             		move.b	d0,($C00011).l
0009F99E 13C6 00C0 0011             		move.b	d6,($C00011).l
0009F9A4                            
0009F9A4                            locret_7291E:
0009F9A4 4E75                       		rts	
0009F9A6                            ; End of function sub_728E2
0009F9A6                            
0009F9A6                            ; ===========================================================================
0009F9A6                            
0009F9A6                            loc_72920:				; XREF: sub_728DC
0009F9A6 08D5 0001                  		bset	#1,(a5)
0009F9AA 4E75                       		rts	
0009F9AC                            
0009F9AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009F9AC                            
0009F9AC                            
0009F9AC                            sub_72926:				; XREF: sub_72850
0009F9AC 4A2D 000B                  		tst.b	$B(a5)
0009F9B0 6700 0000                  		beq.w	locret_7298A
0009F9B4                            
0009F9B4                            loc_7292E:				; XREF: sub_72850
0009F9B4 1C2D 0009                  		move.b	9(a5),d6
0009F9B8 7000                       		moveq	#0,d0
0009F9BA 102D 000B                  		move.b	$B(a5),d0
0009F9BE 6700                       		beq.s	sub_7296A
0009F9C0 2079 0009 E79E             		movea.l	(Go_PSGIndex).l,a0
0009F9C6 5340                       		subq.w	#1,d0
0009F9C8 E548                       		lsl.w	#2,d0
0009F9CA 2070 0000                  		movea.l	(a0,d0.w),a0
0009F9CE 102D 000C                  		move.b	$C(a5),d0
0009F9D2 1030 0000                  		move.b	(a0,d0.w),d0
0009F9D6 522D 000C                  		addq.b	#1,$C(a5)
0009F9DA 0800 0007                  		btst	#7,d0
0009F9DE 6700                       		beq.s	loc_72960
0009F9E0 0C00 0080                  		cmpi.b	#$80,d0
0009F9E4 6700                       		beq.s	loc_7299A
0009F9E6                            
0009F9E6                            loc_72960:
0009F9E6 DC40                       		add.w	d0,d6
0009F9E8 0C06 0010                  		cmpi.b	#$10,d6
0009F9EC 6500                       		bcs.s	sub_7296A
0009F9EE 7C0F                       		moveq	#$F,d6
0009F9F0                            ; End of function sub_72926
0009F9F0                            
0009F9F0                            
0009F9F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009F9F0                            
0009F9F0                            
0009F9F0                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0009F9F0 0815 0001                  		btst	#1,(a5)
0009F9F4 6600                       		bne.s	locret_7298A
0009F9F6 0815 0002                  		btst	#2,(a5)
0009F9FA 6600                       		bne.s	locret_7298A
0009F9FC 0815 0004                  		btst	#4,(a5)
0009FA00 6600                       		bne.s	loc_7298C
0009FA02                            
0009FA02                            loc_7297C:
0009FA02 8C2D 0001                  		or.b	1(a5),d6
0009FA06 0606 0010                  		addi.b	#$10,d6
0009FA0A 13C6 00C0 0011             		move.b	d6,($C00011).l
0009FA10                            
0009FA10                            locret_7298A:
0009FA10 4E75                       		rts	
0009FA12                            ; ===========================================================================
0009FA12                            
0009FA12                            loc_7298C:
0009FA12 4A2D 0013                  		tst.b	$13(a5)
0009FA16 67EA                       		beq.s	loc_7297C
0009FA18 4A2D 0012                  		tst.b	$12(a5)
0009FA1C 66E4                       		bne.s	loc_7297C
0009FA1E 4E75                       		rts	
0009FA20                            ; End of function sub_7296A
0009FA20                            
0009FA20                            ; ===========================================================================
0009FA20                            
0009FA20                            loc_7299A:				; XREF: sub_72926
0009FA20 532D 000C                  		subq.b	#1,$C(a5)
0009FA24 4E75                       		rts	
0009FA26                            
0009FA26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009FA26                            
0009FA26                            
0009FA26                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0009FA26 0815 0002                  		btst	#2,(a5)
0009FA2A 6600                       		bne.s	locret_729B4
0009FA2C                            
0009FA2C                            loc_729A6:				; XREF: Snd_FadeOut2
0009FA2C 102D 0001                  		move.b	1(a5),d0
0009FA30 0000 001F                  		ori.b	#$1F,d0
0009FA34 13C0 00C0 0011             		move.b	d0,($C00011).l
0009FA3A                            
0009FA3A                            locret_729B4:
0009FA3A 4E75                       		rts	
0009FA3C                            ; End of function sub_729A0
0009FA3C                            
0009FA3C                            
0009FA3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009FA3C                            
0009FA3C                            
0009FA3C                            sub_729B6:				; XREF: loc_71E7C
0009FA3C 41F9 00C0 0011             		lea	($C00011).l,a0
0009FA42 10BC 009F                  		move.b	#$9F,(a0)
0009FA46 10BC 00BF                  		move.b	#$BF,(a0)
0009FA4A 10BC 00DF                  		move.b	#$DF,(a0)
0009FA4E 10BC 00FF                  		move.b	#$FF,(a0)
0009FA52 4E75                       		rts	
0009FA54                            ; End of function sub_729B6
0009FA54                            
0009FA54                            ; ===========================================================================
0009FA54 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0009FA66 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0009FA78 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0009FA8C 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0009FAA0 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0009FAB4 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0009FAC8 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0009FADC 0011 0000                  		dc.w $11, 0
0009FAE0                            
0009FAE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009FAE0                            
0009FAE0                            
0009FAE0                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0009FAE0 0445 00E0                  		subi.w	#$E0,d5
0009FAE4 E54D                       		lsl.w	#2,d5
0009FAE6 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0009FAEA                            ; End of function sub_72A5A
0009FAEA                            
0009FAEA                            ; ===========================================================================
0009FAEA                            
0009FAEA                            loc_72A64:
0009FAEA 6000 0000                  		bra.w	loc_72ACC
0009FAEE                            ; ===========================================================================
0009FAEE 6000 0000                  		bra.w	loc_72AEC
0009FAF2                            ; ===========================================================================
0009FAF2 6000 0000                  		bra.w	loc_72AF2
0009FAF6                            ; ===========================================================================
0009FAF6 6000 0000                  		bra.w	loc_72AF8
0009FAFA                            ; ===========================================================================
0009FAFA 6000 0000                  		bra.w	loc_72B14
0009FAFE                            ; ===========================================================================
0009FAFE 6000 0000                  		bra.w	loc_72B9E
0009FB02                            ; ===========================================================================
0009FB02 6000 0000                  		bra.w	loc_72BA4
0009FB06                            ; ===========================================================================
0009FB06 6000 0000                  		bra.w	loc_72BAE
0009FB0A                            ; ===========================================================================
0009FB0A 6000 0000                  		bra.w	loc_72BB4
0009FB0E                            ; ===========================================================================
0009FB0E 6000 0000                  		bra.w	loc_72BBE
0009FB12                            ; ===========================================================================
0009FB12 6000 0000                  		bra.w	loc_72BC6
0009FB16                            ; ===========================================================================
0009FB16 6000 0000                  		bra.w	loc_72BD0
0009FB1A                            ; ===========================================================================
0009FB1A 6000 0000                  		bra.w	loc_72BE6
0009FB1E                            ; ===========================================================================
0009FB1E 6000 0000                  		bra.w	loc_72BEE
0009FB22                            ; ===========================================================================
0009FB22 6000 0000                  		bra.w	loc_72BF4
0009FB26                            ; ===========================================================================
0009FB26 6000 0000                  		bra.w	loc_72C26
0009FB2A                            ; ===========================================================================
0009FB2A 6000 0000                  		bra.w	loc_72D30
0009FB2E                            ; ===========================================================================
0009FB2E 6000 0000                  		bra.w	loc_72D52
0009FB32                            ; ===========================================================================
0009FB32 6000 0000                  		bra.w	loc_72D58
0009FB36                            ; ===========================================================================
0009FB36 6000 0000                  		bra.w	loc_72E06
0009FB3A                            ; ===========================================================================
0009FB3A 6000 0000                  		bra.w	loc_72E20
0009FB3E                            ; ===========================================================================
0009FB3E 6000 0000                  		bra.w	loc_72E26
0009FB42                            ; ===========================================================================
0009FB42 6000 0000                  		bra.w	loc_72E2C
0009FB46                            ; ===========================================================================
0009FB46 6000 0000                  		bra.w	loc_72E38
0009FB4A                            ; ===========================================================================
0009FB4A 6000 0000                  		bra.w	loc_72E52
0009FB4E                            ; ===========================================================================
0009FB4E 6000 0000                  		bra.w	loc_72E64
0009FB52                            ; ===========================================================================
0009FB52                            
0009FB52                            loc_72ACC:				; XREF: loc_72A64
0009FB52 121C                       		move.b	(a4)+,d1
0009FB54 4A2D 0001                  		tst.b	1(a5)
0009FB58 6B00                       		bmi.s	locret_72AEA
0009FB5A 102D 000A                  		move.b	$A(a5),d0
0009FB5E 0200 0037                  		andi.b	#$37,d0
0009FB62 8200                       		or.b	d0,d1
0009FB64 1B41 000A                  		move.b	d1,$A(a5)
0009FB68 103C 00B4                  		move.b	#$B4,d0
0009FB6C 6000 FBA6                  		bra.w	loc_72716
0009FB70                            ; ===========================================================================
0009FB70                            
0009FB70                            locret_72AEA:
0009FB70 4E75                       		rts	
0009FB72                            ; ===========================================================================
0009FB72                            
0009FB72                            loc_72AEC:				; XREF: loc_72A64
0009FB72 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0009FB76 4E75                       		rts	
0009FB78                            ; ===========================================================================
0009FB78                            
0009FB78                            loc_72AF2:				; XREF: loc_72A64
0009FB78 1D5C 0007                  		move.b	(a4)+,7(a6)
0009FB7C 4E75                       		rts	
0009FB7E                            ; ===========================================================================
0009FB7E                            
0009FB7E                            loc_72AF8:				; XREF: loc_72A64
0009FB7E 7000                       		moveq	#0,d0
0009FB80 102D 000D                  		move.b	$D(a5),d0
0009FB84 2875 0000                  		movea.l	(a5,d0.w),a4
0009FB88 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0009FB90 544C                       		addq.w	#2,a4
0009FB92 5800                       		addq.b	#4,d0
0009FB94 1B40 000D                  		move.b	d0,$D(a5)
0009FB98 4E75                       		rts	
0009FB9A                            ; ===========================================================================
0009FB9A                            
0009FB9A                            loc_72B14:				; XREF: loc_72A64
0009FB9A 204E                       		movea.l	a6,a0
0009FB9C 43EE 03A0                  		lea	$3A0(a6),a1
0009FBA0 303C 0087                  		move.w	#$87,d0
0009FBA4                            
0009FBA4                            loc_72B1E:
0009FBA4 20D9                       		move.l	(a1)+,(a0)+
0009FBA6 51C8 FFFC                  		dbf	d0,loc_72B1E
0009FBAA                            
0009FBAA 08EE 0002 0040             		bset	#2,$40(a6)
0009FBB0 264D                       		movea.l	a5,a3
0009FBB2 1C3C 0028                  		move.b	#$28,d6
0009FBB6 9C2E 0026                  		sub.b	$26(a6),d6
0009FBBA 7E05                       		moveq	#5,d7
0009FBBC 4BEE 0070                  		lea	$70(a6),a5
0009FBC0                            
0009FBC0                            loc_72B3A:
0009FBC0 0815 0007                  		btst	#7,(a5)
0009FBC4 6700                       		beq.s	loc_72B5C
0009FBC6 08D5 0001                  		bset	#1,(a5)
0009FBCA DD2D 0009                  		add.b	d6,9(a5)
0009FBCE 0815 0002                  		btst	#2,(a5)
0009FBD2 6600                       		bne.s	loc_72B5C
0009FBD4 7000                       		moveq	#0,d0
0009FBD6 102D 000B                  		move.b	$B(a5),d0
0009FBDA 226E 0018                  		movea.l	$18(a6),a1
0009FBDE 4EBA 0000                  		jsr	sub_72C4E(pc)
0009FBE2                            
0009FBE2                            loc_72B5C:
0009FBE2 DAFC 0030                  		adda.w	#$30,a5
0009FBE6 51CF FFD8                  		dbf	d7,loc_72B3A
0009FBEA                            
0009FBEA 7E02                       		moveq	#2,d7
0009FBEC                            
0009FBEC                            loc_72B66:
0009FBEC 0815 0007                  		btst	#7,(a5)
0009FBF0 6700                       		beq.s	loc_72B78
0009FBF2 08D5 0001                  		bset	#1,(a5)
0009FBF6 4EBA FE2E                  		jsr	sub_729A0(pc)
0009FBFA DD2D 0009                  		add.b	d6,9(a5)
0009FBFE                            
0009FBFE                            loc_72B78:
0009FBFE DAFC 0030                  		adda.w	#$30,a5
0009FC02 51CF FFE8                  		dbf	d7,loc_72B66
0009FC06 2A4B                       		movea.l	a3,a5
0009FC08 1D7C 0080 0024             		move.b	#$80,$24(a6)
0009FC0E 1D7C 0028 0026             		move.b	#$28,$26(a6)
0009FC14 422E 0027                  		clr.b	$27(a6)
0009FC18 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0009FC20 504F                       		addq.w	#8,sp
0009FC22 4E75                       		rts	
0009FC24                            ; ===========================================================================
0009FC24                            
0009FC24                            loc_72B9E:				; XREF: loc_72A64
0009FC24 1B5C 0002                  		move.b	(a4)+,2(a5)
0009FC28 4E75                       		rts	
0009FC2A                            ; ===========================================================================
0009FC2A                            
0009FC2A                            loc_72BA4:				; XREF: loc_72A64
0009FC2A 101C                       		move.b	(a4)+,d0
0009FC2C D12D 0009                  		add.b	d0,9(a5)
0009FC30 6000 0000                  		bra.w	sub_72CB4
0009FC34                            ; ===========================================================================
0009FC34                            
0009FC34                            loc_72BAE:				; XREF: loc_72A64
0009FC34 08D5 0004                  		bset	#4,(a5)
0009FC38 4E75                       		rts	
0009FC3A                            ; ===========================================================================
0009FC3A                            
0009FC3A                            loc_72BB4:				; XREF: loc_72A64
0009FC3A 1B54 0012                  		move.b	(a4),$12(a5)
0009FC3E 1B5C 0013                  		move.b	(a4)+,$13(a5)
0009FC42 4E75                       		rts	
0009FC44                            ; ===========================================================================
0009FC44                            
0009FC44                            loc_72BBE:				; XREF: loc_72A64
0009FC44 101C                       		move.b	(a4)+,d0
0009FC46 D12D 0008                  		add.b	d0,8(a5)
0009FC4A 4E75                       		rts	
0009FC4C                            ; ===========================================================================
0009FC4C                            
0009FC4C                            loc_72BC6:				; XREF: loc_72A64
0009FC4C 1D54 0002                  		move.b	(a4),2(a6)
0009FC50 1D5C 0001                  		move.b	(a4)+,1(a6)
0009FC54 4E75                       		rts	
0009FC56                            ; ===========================================================================
0009FC56                            
0009FC56                            loc_72BD0:				; XREF: loc_72A64
0009FC56 41EE 0040                  		lea	$40(a6),a0
0009FC5A 101C                       		move.b	(a4)+,d0
0009FC5C 7230                       		moveq	#$30,d1
0009FC5E 7409                       		moveq	#9,d2
0009FC60                            
0009FC60                            loc_72BDA:
0009FC60 1140 0002                  		move.b	d0,2(a0)
0009FC64 D0C1                       		adda.w	d1,a0
0009FC66 51CA FFF8                  		dbf	d2,loc_72BDA
0009FC6A                            
0009FC6A 4E75                       		rts	
0009FC6C                            ; ===========================================================================
0009FC6C                            
0009FC6C                            loc_72BE6:				; XREF: loc_72A64
0009FC6C 101C                       		move.b	(a4)+,d0
0009FC6E D12D 0009                  		add.b	d0,9(a5)
0009FC72 4E75                       		rts	
0009FC74                            ; ===========================================================================
0009FC74                            
0009FC74                            loc_72BEE:				; XREF: loc_72A64
0009FC74 422E 002C                  		clr.b	$2C(a6)
0009FC78 4E75                       		rts	
0009FC7A                            ; ===========================================================================
0009FC7A                            
0009FC7A                            loc_72BF4:				; XREF: loc_72A64
0009FC7A 0895 0007                  		bclr	#7,(a5)
0009FC7E 0895 0004                  		bclr	#4,(a5)
0009FC82 4EBA FA78                  		jsr	sub_726FE(pc)
0009FC86 4A2E 0250                  		tst.b	$250(a6)
0009FC8A 6B00                       		bmi.s	loc_72C22
0009FC8C 264D                       		movea.l	a5,a3
0009FC8E 4BEE 0100                  		lea	$100(a6),a5
0009FC92 226E 0018                  		movea.l	$18(a6),a1
0009FC96 0895 0002                  		bclr	#2,(a5)
0009FC9A 08D5 0001                  		bset	#1,(a5)
0009FC9E 102D 000B                  		move.b	$B(a5),d0
0009FCA2 4EBA 0000                  		jsr	sub_72C4E(pc)
0009FCA6 2A4B                       		movea.l	a3,a5
0009FCA8                            
0009FCA8                            loc_72C22:
0009FCA8 504F                       		addq.w	#8,sp
0009FCAA 4E75                       		rts	
0009FCAC                            ; ===========================================================================
0009FCAC                            
0009FCAC                            loc_72C26:				; XREF: loc_72A64
0009FCAC 7000                       		moveq	#0,d0
0009FCAE 101C                       		move.b	(a4)+,d0
0009FCB0 1B40 000B                  		move.b	d0,$B(a5)
0009FCB4 0815 0002                  		btst	#2,(a5)
0009FCB8 6600 0000                  		bne.w	locret_72CAA
0009FCBC 226E 0018                  		movea.l	$18(a6),a1
0009FCC0 4A2E 000E                  		tst.b	$E(a6)
0009FCC4 6700                       		beq.s	sub_72C4E
0009FCC6 226D 0020                  		movea.l	$20(a5),a1
0009FCCA 4A2E 000E                  		tst.b	$E(a6)
0009FCCE 6B00                       		bmi.s	sub_72C4E
0009FCD0 226E 0020                  		movea.l	$20(a6),a1
0009FCD4                            
0009FCD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009FCD4                            
0009FCD4                            
0009FCD4                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0009FCD4 5340                       		subq.w	#1,d0
0009FCD6 6B00                       		bmi.s	loc_72C5C
0009FCD8 323C 0019                  		move.w	#$19,d1
0009FCDC                            
0009FCDC                            loc_72C56:
0009FCDC D2C1                       		adda.w	d1,a1
0009FCDE 51C8 FFFC                  		dbf	d0,loc_72C56
0009FCE2                            
0009FCE2                            loc_72C5C:
0009FCE2 1219                       		move.b	(a1)+,d1
0009FCE4 1B41 001F                  		move.b	d1,$1F(a5)
0009FCE8 1801                       		move.b	d1,d4
0009FCEA 103C 00B0                  		move.b	#$B0,d0
0009FCEE 4EBA FA30                  		jsr	sub_72722(pc)
0009FCF2 45FA 0000                  		lea	byte_72D18(pc),a2
0009FCF6 7613                       		moveq	#$13,d3
0009FCF8                            
0009FCF8                            loc_72C72:
0009FCF8 101A                       		move.b	(a2)+,d0
0009FCFA 1219                       		move.b	(a1)+,d1
0009FCFC 4EBA FA22                  		jsr	sub_72722(pc)
0009FD00 51CB FFF6                  		dbf	d3,loc_72C72
0009FD04 7A03                       		moveq	#3,d5
0009FD06 0244 0007                  		andi.w	#7,d4
0009FD0A 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0009FD0E 162D 0009                  		move.b	9(a5),d3
0009FD12                            
0009FD12                            loc_72C8C:
0009FD12 101A                       		move.b	(a2)+,d0
0009FD14 1219                       		move.b	(a1)+,d1
0009FD16 E20C                       		lsr.b	#1,d4
0009FD18 6400                       		bcc.s	loc_72C96
0009FD1A D203                       		add.b	d3,d1
0009FD1C                            
0009FD1C                            loc_72C96:
0009FD1C 4EBA FA02                  		jsr	sub_72722(pc)
0009FD20 51CD FFF0                  		dbf	d5,loc_72C8C
0009FD24 103C 00B4                  		move.b	#$B4,d0
0009FD28 122D 000A                  		move.b	$A(a5),d1
0009FD2C 4EBA F9F2                  		jsr	sub_72722(pc)
0009FD30                            
0009FD30                            locret_72CAA:
0009FD30 4E75                       		rts	
0009FD32                            ; End of function sub_72C4E
0009FD32                            
0009FD32                            ; ===========================================================================
0009FD32 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0009FD3A                            
0009FD3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009FD3A                            
0009FD3A                            
0009FD3A                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0009FD3A 0815 0002                  		btst	#2,(a5)
0009FD3E 6600                       		bne.s	locret_72D16
0009FD40 7000                       		moveq	#0,d0
0009FD42 102D 000B                  		move.b	$B(a5),d0
0009FD46 226E 0018                  		movea.l	$18(a6),a1
0009FD4A 4A2E 000E                  		tst.b	$E(a6)
0009FD4E 6700                       		beq.s	loc_72CD8
0009FD50 226E 0020                  		movea.l	$20(a6),a1
0009FD54 4A2E 000E                  		tst.b	$E(a6)
0009FD58 6B00                       		bmi.s	loc_72CD8
0009FD5A 226E 0020                  		movea.l	$20(a6),a1
0009FD5E                            
0009FD5E                            loc_72CD8:
0009FD5E 5340                       		subq.w	#1,d0
0009FD60 6B00                       		bmi.s	loc_72CE6
0009FD62 323C 0019                  		move.w	#$19,d1
0009FD66                            
0009FD66                            loc_72CE0:
0009FD66 D2C1                       		adda.w	d1,a1
0009FD68 51C8 FFFC                  		dbf	d0,loc_72CE0
0009FD6C                            
0009FD6C                            loc_72CE6:
0009FD6C D2FC 0015                  		adda.w	#$15,a1
0009FD70 45FA 0000                  		lea	byte_72D2C(pc),a2
0009FD74 102D 001F                  		move.b	$1F(a5),d0
0009FD78 0240 0007                  		andi.w	#7,d0
0009FD7C 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0009FD80 162D 0009                  		move.b	9(a5),d3
0009FD84 6B00                       		bmi.s	locret_72D16
0009FD86 7A03                       		moveq	#3,d5
0009FD88                            
0009FD88                            loc_72D02:
0009FD88 101A                       		move.b	(a2)+,d0
0009FD8A 1219                       		move.b	(a1)+,d1
0009FD8C E20C                       		lsr.b	#1,d4
0009FD8E 6400                       		bcc.s	loc_72D12
0009FD90 D203                       		add.b	d3,d1
0009FD92 6500                       		bcs.s	loc_72D12
0009FD94 4EBA F98A                  		jsr	sub_72722(pc)
0009FD98                            
0009FD98                            loc_72D12:
0009FD98 51CD FFEE                  		dbf	d5,loc_72D02
0009FD9C                            
0009FD9C                            locret_72D16:
0009FD9C 4E75                       		rts	
0009FD9E                            ; End of function sub_72CB4
0009FD9E                            
0009FD9E                            ; ===========================================================================
0009FD9E 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0009FDA8 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0009FDB2 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0009FDB6                            ; ===========================================================================
0009FDB6                            
0009FDB6                            loc_72D30:				; XREF: loc_72A64
0009FDB6 08D5 0003                  		bset	#3,(a5)
0009FDBA 2B4C 0014                  		move.l	a4,$14(a5)
0009FDBE 1B5C 0018                  		move.b	(a4)+,$18(a5)
0009FDC2 1B5C 0019                  		move.b	(a4)+,$19(a5)
0009FDC6 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0009FDCA 101C                       		move.b	(a4)+,d0
0009FDCC E208                       		lsr.b	#1,d0
0009FDCE 1B40 001B                  		move.b	d0,$1B(a5)
0009FDD2 426D 001C                  		clr.w	$1C(a5)
0009FDD6 4E75                       		rts	
0009FDD8                            ; ===========================================================================
0009FDD8                            
0009FDD8                            loc_72D52:				; XREF: loc_72A64
0009FDD8 08D5 0003                  		bset	#3,(a5)
0009FDDC 4E75                       		rts	
0009FDDE                            ; ===========================================================================
0009FDDE                            
0009FDDE                            loc_72D58:				; XREF: loc_72A64
0009FDDE 0895 0007                  		bclr	#7,(a5)
0009FDE2 0895 0004                  		bclr	#4,(a5)
0009FDE6 4A2D 0001                  		tst.b	1(a5)
0009FDEA 6B00                       		bmi.s	loc_72D74
0009FDEC 4A2E 0008                  		tst.b	8(a6)
0009FDF0 6B00 0000                  		bmi.w	loc_72E02
0009FDF4 4EBA F906                  		jsr	sub_726FE(pc)
0009FDF8 6000                       		bra.s	loc_72D78
0009FDFA                            ; ===========================================================================
0009FDFA                            
0009FDFA                            loc_72D74:
0009FDFA 4EBA FC2A                  		jsr	sub_729A0(pc)
0009FDFE                            
0009FDFE                            loc_72D78:
0009FDFE 4A2E 000E                  		tst.b	$E(a6)
0009FE02 6A00 0000                  		bpl.w	loc_72E02
0009FE06 4216                       		clr.b	0(a6)
0009FE08 7000                       		moveq	#0,d0
0009FE0A 102D 0001                  		move.b	1(a5),d0
0009FE0E 6B00                       		bmi.s	loc_72DCC
0009FE10 41FA F4BE                  		lea	dword_722CC(pc),a0
0009FE14 264D                       		movea.l	a5,a3
0009FE16 0C00 0004                  		cmpi.b	#4,d0
0009FE1A 6600                       		bne.s	loc_72DA8
0009FE1C 4A2E 0340                  		tst.b	$340(a6)
0009FE20 6A00                       		bpl.s	loc_72DA8
0009FE22 4BEE 0340                  		lea	$340(a6),a5
0009FE26 226E 0020                  		movea.l	$20(a6),a1
0009FE2A 6000                       		bra.s	loc_72DB8
0009FE2C                            ; ===========================================================================
0009FE2C                            
0009FE2C                            loc_72DA8:
0009FE2C 5500                       		subq.b	#2,d0
0009FE2E E508                       		lsl.b	#2,d0
0009FE30 2A70 0000                  		movea.l	(a0,d0.w),a5
0009FE34 4A15                       		tst.b	(a5)
0009FE36 6A00                       		bpl.s	loc_72DC8
0009FE38 226E 0018                  		movea.l	$18(a6),a1
0009FE3C                            
0009FE3C                            loc_72DB8:
0009FE3C 0895 0002                  		bclr	#2,(a5)
0009FE40 08D5 0001                  		bset	#1,(a5)
0009FE44 102D 000B                  		move.b	$B(a5),d0
0009FE48 4EBA FE8A                  		jsr	sub_72C4E(pc)
0009FE4C                            
0009FE4C                            loc_72DC8:
0009FE4C 2A4B                       		movea.l	a3,a5
0009FE4E 6000                       		bra.s	loc_72E02
0009FE50                            ; ===========================================================================
0009FE50                            
0009FE50                            loc_72DCC:
0009FE50 41EE 0370                  		lea	$370(a6),a0
0009FE54 4A10                       		tst.b	(a0)
0009FE56 6A00                       		bpl.s	loc_72DE0
0009FE58 0C00 00E0                  		cmpi.b	#$E0,d0
0009FE5C 6700                       		beq.s	loc_72DEA
0009FE5E 0C00 00C0                  		cmpi.b	#$C0,d0
0009FE62 6700                       		beq.s	loc_72DEA
0009FE64                            
0009FE64                            loc_72DE0:
0009FE64 41FA F46A                  		lea	dword_722CC(pc),a0
0009FE68 E608                       		lsr.b	#3,d0
0009FE6A 2070 0000                  		movea.l	(a0,d0.w),a0
0009FE6E                            
0009FE6E                            loc_72DEA:
0009FE6E 0890 0002                  		bclr	#2,(a0)
0009FE72 08D0 0001                  		bset	#1,(a0)
0009FE76 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0009FE7C 6600                       		bne.s	loc_72E02
0009FE7E 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0009FE86                            
0009FE86                            loc_72E02:
0009FE86 504F                       		addq.w	#8,sp
0009FE88 4E75                       		rts	
0009FE8A                            ; ===========================================================================
0009FE8A                            
0009FE8A                            loc_72E06:				; XREF: loc_72A64
0009FE8A 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0009FE90 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0009FE94 0815 0002                  		btst	#2,(a5)
0009FE98 6600                       		bne.s	locret_72E1E
0009FE9A 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0009FEA2                            
0009FEA2                            locret_72E1E:
0009FEA2 4E75                       		rts	
0009FEA4                            ; ===========================================================================
0009FEA4                            
0009FEA4                            loc_72E20:				; XREF: loc_72A64
0009FEA4 0895 0003                  		bclr	#3,(a5)
0009FEA8 4E75                       		rts	
0009FEAA                            ; ===========================================================================
0009FEAA                            
0009FEAA                            loc_72E26:				; XREF: loc_72A64
0009FEAA 1B5C 000B                  		move.b	(a4)+,$B(a5)
0009FEAE 4E75                       		rts	
0009FEB0                            ; ===========================================================================
0009FEB0                            
0009FEB0                            loc_72E2C:				; XREF: loc_72A64
0009FEB0 101C                       		move.b	(a4)+,d0
0009FEB2 E148                       		lsl.w	#8,d0
0009FEB4 101C                       		move.b	(a4)+,d0
0009FEB6 D8C0                       		adda.w	d0,a4
0009FEB8 534C                       		subq.w	#1,a4
0009FEBA 4E75                       		rts	
0009FEBC                            ; ===========================================================================
0009FEBC                            
0009FEBC                            loc_72E38:				; XREF: loc_72A64
0009FEBC 7000                       		moveq	#0,d0
0009FEBE 101C                       		move.b	(a4)+,d0
0009FEC0 121C                       		move.b	(a4)+,d1
0009FEC2 4A35 0024                  		tst.b	$24(a5,d0.w)
0009FEC6 6600                       		bne.s	loc_72E48
0009FEC8 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0009FECC                            
0009FECC                            loc_72E48:
0009FECC 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0009FED0 66DE                       		bne.s	loc_72E2C
0009FED2 544C                       		addq.w	#2,a4
0009FED4 4E75                       		rts	
0009FED6                            ; ===========================================================================
0009FED6                            
0009FED6                            loc_72E52:				; XREF: loc_72A64
0009FED6 7000                       		moveq	#0,d0
0009FED8 102D 000D                  		move.b	$D(a5),d0
0009FEDC 5900                       		subq.b	#4,d0
0009FEDE 2B8C 0000                  		move.l	a4,(a5,d0.w)
0009FEE2 1B40 000D                  		move.b	d0,$D(a5)
0009FEE6 60C8                       		bra.s	loc_72E2C
0009FEE8                            ; ===========================================================================
0009FEE8                            
0009FEE8                            loc_72E64:				; XREF: loc_72A64
0009FEE8 103C 0088                  		move.b	#$88,d0
0009FEEC 123C 000F                  		move.b	#$F,d1
0009FEF0 4EBA F83A                  		jsr	sub_7272E(pc)
0009FEF4 103C 008C                  		move.b	#$8C,d0
0009FEF8 123C 000F                  		move.b	#$F,d1
0009FEFC 6000 F82E                  		bra.w	sub_7272E
0009FF00                            ; ===========================================================================
0009FF00                            Kos_Z80:	incbin	sound\z80_1.bin
0009FFB0 3046                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0009FFB2 21                         		dc.b $21
0009FFB3 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0009FFB5                            		incbin	sound\z80_2.bin
000A1660                            		even
000A1660                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
000A7E60                            		even
000A7E60                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
000B16FE                            		even
000B16FE                            Music83:	incbin	sound\music83.bin ; Marble Act 1
000B531E 00                         		even
000B531E                            Music84:	include	sound\music84.asm ; Star Light Act 1
000B531E                            music84_Header:
000B531E =00000001                  smpsHeaderStartSong = 1
000B531E 0000                       	smpsHeaderVoice     music84_Voices
000B5320 0603                       	smpsHeaderChan      $06, $03
000B5322 0205                       	smpsHeaderTempo     $02, $05
000B5324                            
000B5328 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
000B532C 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
000B5330 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
000B5334 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
000B5338 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
000B533C 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
000B5342 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
000B5348 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
000B534E                            
000B534E                            ; FM1 Data
000B534E                            music84_FM1:
000B534E E0C0                       	smpsPan             panCenter, $00
000B5352 E107                       	smpsAlterNote       $07
000B5354 9B03 8007                  	dc.b	nD2, $03, nRst, $07
000B5358 E106                       	smpsAlterNote       $06
000B535A 9903 800B                  	dc.b	nC2, $03, nRst, $0B
000B535E E10B                       	smpsAlterNote       $0B
000B5360 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
000B5366 E10C                       	smpsAlterNote       $0C
000B5368 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000B536B E10B                       	smpsAlterNote       $0B
000B536D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000B5370 E109                       	smpsAlterNote       $09
000B5372 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
000B5377 E108                       	smpsAlterNote       $08
000B5379 8001                       	dc.b	nRst, $01
000B537B E10B                       	smpsAlterNote       $0B
000B537D 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
000B5383 E107                       	smpsAlterNote       $07
000B5385 9B03                       	dc.b	nD2, $03
000B5387                            
000B5387                            music84_Jump04:
000B5387 E107                       	smpsAlterNote       $07
000B5389 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000B538D E10B                       	smpsAlterNote       $0B
000B538F A202 8001                  	dc.b	nA2, $02, nRst, $01
000B5393 E107                       	smpsAlterNote       $07
000B5395 9B03                       	dc.b	nD2, $03
000B5397 E11A                       	smpsAlterNote       $1A
000B5399 A301                       	dc.b	nBb2, $01
000B539B E1F2                       	smpsAlterNote       $F2
000B539D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000B53A0 E1FF                       	smpsAlterNote       $FF
000B53A2 E701                       	dc.b	smpsNoAttack, $01
000B53A4 E111                       	smpsAlterNote       $11
000B53A6 E701                       	dc.b	smpsNoAttack, $01
000B53A8 E106                       	smpsAlterNote       $06
000B53AA E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000B53AD E107                       	smpsAlterNote       $07
000B53AF 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000B53B3 E108                       	smpsAlterNote       $08
000B53B5 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
000B53BD E109                       	smpsAlterNote       $09
000B53BF A003                       	dc.b	nG2, $03
000B53C1 E10C                       	smpsAlterNote       $0C
000B53C3 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000B53C7 E1FD                       	smpsAlterNote       $FD
000B53C9 A401                       	dc.b	nB2, $01
000B53CB E109                       	smpsAlterNote       $09
000B53CD E701                       	dc.b	smpsNoAttack, $01
000B53CF E106                       	smpsAlterNote       $06
000B53D1 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000B53D4 E109                       	smpsAlterNote       $09
000B53D6 A007                       	dc.b	nG2, $07
000B53D8 E108                       	smpsAlterNote       $08
000B53DA 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000B53DE E107                       	smpsAlterNote       $07
000B53E0 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000B53E6 E10B                       	smpsAlterNote       $0B
000B53E8 A203 8001                  	dc.b	nA2, $03, nRst, $01
000B53EC E107                       	smpsAlterNote       $07
000B53EE 9B03                       	dc.b	nD2, $03
000B53F0 E11A                       	smpsAlterNote       $1A
000B53F2 A301                       	dc.b	nBb2, $01
000B53F4 E1F9                       	smpsAlterNote       $F9
000B53F6 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000B53F9 E107                       	smpsAlterNote       $07
000B53FB E701                       	dc.b	smpsNoAttack, $01
000B53FD E111                       	smpsAlterNote       $11
000B53FF E701                       	dc.b	smpsNoAttack, $01
000B5401 E106                       	smpsAlterNote       $06
000B5403 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000B5408 E107                       	smpsAlterNote       $07
000B540A 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000B5412 E1EC                       	smpsAlterNote       $EC
000B5414 A101                       	dc.b	nAb2, $01
000B5416 E108                       	smpsAlterNote       $08
000B5418 E701                       	dc.b	smpsNoAttack, $01
000B541A E116                       	smpsAlterNote       $16
000B541C E701                       	dc.b	smpsNoAttack, $01
000B541E E1F5                       	smpsAlterNote       $F5
000B5420 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000B5423 E10B                       	smpsAlterNote       $0B
000B5425 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000B5429 E107                       	smpsAlterNote       $07
000B542B 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000B5431 E109                       	smpsAlterNote       $09
000B5433 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000B5437 E10B                       	smpsAlterNote       $0B
000B5439 9603                       	dc.b	nA1, $03
000B543B E107                       	smpsAlterNote       $07
000B543D 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000B5443 E10B                       	smpsAlterNote       $0B
000B5445 A203 8001                  	dc.b	nA2, $03, nRst, $01
000B5449 E107                       	smpsAlterNote       $07
000B544B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000B544F E11A                       	smpsAlterNote       $1A
000B5451 A301                       	dc.b	nBb2, $01
000B5453 E1F9                       	smpsAlterNote       $F9
000B5455 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000B5458 E107                       	smpsAlterNote       $07
000B545A E701                       	dc.b	smpsNoAttack, $01
000B545C E1FB                       	smpsAlterNote       $FB
000B545E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000B5461 E106                       	smpsAlterNote       $06
000B5463 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000B5467 E107                       	smpsAlterNote       $07
000B5469 9B03                       	dc.b	nD2, $03
000B546B E108                       	smpsAlterNote       $08
000B546D 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000B5473 E109                       	smpsAlterNote       $09
000B5475 A002 8001                  	dc.b	nG2, $02, nRst, $01
000B5479 E10C                       	smpsAlterNote       $0C
000B547B A303                       	dc.b	nBb2, $03
000B547D E1F0                       	smpsAlterNote       $F0
000B547F A401                       	dc.b	nB2, $01
000B5481 E1FD                       	smpsAlterNote       $FD
000B5483 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
000B5488 E106                       	smpsAlterNote       $06
000B548A 8001                       	dc.b	nRst, $01
000B548C E109                       	smpsAlterNote       $09
000B548E A006 8001                  	dc.b	nG2, $06, nRst, $01
000B5492 E108                       	smpsAlterNote       $08
000B5494 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
000B5498 E107                       	smpsAlterNote       $07
000B549A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000B54A0 E10B                       	smpsAlterNote       $0B
000B54A2 A203                       	dc.b	nA2, $03
000B54A4 E107                       	smpsAlterNote       $07
000B54A6 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000B54AA E1F2                       	smpsAlterNote       $F2
000B54AC A401                       	dc.b	nB2, $01
000B54AE E1FF                       	smpsAlterNote       $FF
000B54B0 E701                       	dc.b	smpsNoAttack, $01
000B54B2 E107                       	smpsAlterNote       $07
000B54B4 E701                       	dc.b	smpsNoAttack, $01
000B54B6 E1FB                       	smpsAlterNote       $FB
000B54B8 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000B54BB E106                       	smpsAlterNote       $06
000B54BD E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000B54C1 E107                       	smpsAlterNote       $07
000B54C3 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
000B54CD E117                       	smpsAlterNote       $17
000B54CF A001                       	dc.b	nG2, $01
000B54D1 E1FA                       	smpsAlterNote       $FA
000B54D3 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000B54D6 E108                       	smpsAlterNote       $08
000B54D8 E701                       	dc.b	smpsNoAttack, $01
000B54DA E1E7                       	smpsAlterNote       $E7
000B54DC E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000B54DF E103                       	smpsAlterNote       $03
000B54E1 E701                       	dc.b	smpsNoAttack, $01
000B54E3 E10B                       	smpsAlterNote       $0B
000B54E5 E702                       	dc.b	smpsNoAttack, $02
000B54E7 E107                       	smpsAlterNote       $07
000B54E9 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
000B54F1 E106                       	smpsAlterNote       $06
000B54F3 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
000B54F9 E10C                       	smpsAlterNote       $0C
000B54FB 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
000B5501 E109                       	smpsAlterNote       $09
000B5503 9E03                       	dc.b	nF2, $03
000B5505 E10C                       	smpsAlterNote       $0C
000B5507 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000B550B E1EA                       	smpsAlterNote       $EA
000B550D A201                       	dc.b	nA2, $01
000B550F E106                       	smpsAlterNote       $06
000B5511 E701                       	dc.b	smpsNoAttack, $01
000B5513 E1E2                       	smpsAlterNote       $E2
000B5515 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000B5518 E1F0                       	smpsAlterNote       $F0
000B551A E701                       	dc.b	smpsNoAttack, $01
000B551C E10C                       	smpsAlterNote       $0C
000B551E E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000B552A E116                       	smpsAlterNote       $16
000B552C 9C01                       	dc.b	nEb2, $01
000B552E E105                       	smpsAlterNote       $05
000B5530 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000B5533 E1F1                       	smpsAlterNote       $F1
000B5535 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000B5538 E1FF                       	smpsAlterNote       $FF
000B553A E701                       	dc.b	smpsNoAttack, $01
000B553C E109                       	smpsAlterNote       $09
000B553E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000B5542 E10C                       	smpsAlterNote       $0C
000B5544 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000B5550 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
000B5556 E109                       	smpsAlterNote       $09
000B5558 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000B555C E10C                       	smpsAlterNote       $0C
000B555E 9703                       	dc.b	nBb1, $03
000B5560 E11A                       	smpsAlterNote       $1A
000B5562 A101                       	dc.b	nAb2, $01
000B5564 E1FB                       	smpsAlterNote       $FB
000B5566 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000B5569 E10A                       	smpsAlterNote       $0A
000B556B E701                       	dc.b	smpsNoAttack, $01
000B556D E1E8                       	smpsAlterNote       $E8
000B556F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000B5572 E106                       	smpsAlterNote       $06
000B5574 E701                       	dc.b	smpsNoAttack, $01
000B5576 E10C                       	smpsAlterNote       $0C
000B5578 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
000B5584 E1F9                       	smpsAlterNote       $F9
000B5586 9D01                       	dc.b	nE2, $01
000B5588 E108                       	smpsAlterNote       $08
000B558A E701                       	dc.b	smpsNoAttack, $01
000B558C E1F6                       	smpsAlterNote       $F6
000B558E E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000B5591 E109                       	smpsAlterNote       $09
000B5593 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
000B5597 E10C                       	smpsAlterNote       $0C
000B5599 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
000B55A5 E108                       	smpsAlterNote       $08
000B55A7 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000B55AD E106                       	smpsAlterNote       $06
000B55AF A403 8001                  	dc.b	nB2, $03, nRst, $01
000B55B3 E108                       	smpsAlterNote       $08
000B55B5 9D03                       	dc.b	nE2, $03
000B55B7 E1EB                       	smpsAlterNote       $EB
000B55B9 A801                       	dc.b	nEb3, $01
000B55BB E109                       	smpsAlterNote       $09
000B55BD E701                       	dc.b	smpsNoAttack, $01
000B55BF E1FA                       	smpsAlterNote       $FA
000B55C1 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000B55C4 E108                       	smpsAlterNote       $08
000B55C6 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
000B55D2 E1E9                       	smpsAlterNote       $E9
000B55D4 A301                       	dc.b	nBb2, $01
000B55D6 E107                       	smpsAlterNote       $07
000B55D8 E701                       	dc.b	smpsNoAttack, $01
000B55DA E1F0                       	smpsAlterNote       $F0
000B55DC E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000B55DF E1F7                       	smpsAlterNote       $F7
000B55E1 E701                       	dc.b	smpsNoAttack, $01
000B55E3 E107                       	smpsAlterNote       $07
000B55E5 E701                       	dc.b	smpsNoAttack, $01
000B55E7 E106                       	smpsAlterNote       $06
000B55E9 E701                       	dc.b	smpsNoAttack, $01
000B55EB E108                       	smpsAlterNote       $08
000B55ED 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000B55F3 E106                       	smpsAlterNote       $06
000B55F5 A403 8001                  	dc.b	nB2, $03, nRst, $01
000B55F9 E108                       	smpsAlterNote       $08
000B55FB 9D03                       	dc.b	nE2, $03
000B55FD E10B                       	smpsAlterNote       $0B
000B55FF 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
000B5607 E108                       	smpsAlterNote       $08
000B5609 9D03                       	dc.b	nE2, $03
000B560B E10B                       	smpsAlterNote       $0B
000B560D 9603 8001                  	dc.b	nA1, $03, nRst, $01
000B5611 E113                       	smpsAlterNote       $13
000B5613 A001                       	dc.b	nG2, $01
000B5615 E118                       	smpsAlterNote       $18
000B5617 E701                       	dc.b	smpsNoAttack, $01
000B5619 E1E9                       	smpsAlterNote       $E9
000B561B E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000B561E E1F3                       	smpsAlterNote       $F3
000B5620 E701                       	dc.b	smpsNoAttack, $01
000B5622 E1FD                       	smpsAlterNote       $FD
000B5624 E701                       	dc.b	smpsNoAttack, $01
000B5626 E102                       	smpsAlterNote       $02
000B5628 E701                       	dc.b	smpsNoAttack, $01
000B562A E107                       	smpsAlterNote       $07
000B562C 8001                       	dc.b	nRst, $01
000B562E E10B                       	smpsAlterNote       $0B
000B5630 9603                       	dc.b	nA1, $03
000B5632 E10C                       	smpsAlterNote       $0C
000B5634 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
000B563A E10B                       	smpsAlterNote       $0B
000B563C 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000B5648 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
000B564E E107                       	smpsAlterNote       $07
000B5650 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000B5656 E10B                       	smpsAlterNote       $0B
000B5658 A203                       	dc.b	nA2, $03
000B565A E107                       	smpsAlterNote       $07
000B565C 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000B5660 E1F2                       	smpsAlterNote       $F2
000B5662 A401                       	dc.b	nB2, $01
000B5664 E1FF                       	smpsAlterNote       $FF
000B5666 E701                       	dc.b	smpsNoAttack, $01
000B5668 E107                       	smpsAlterNote       $07
000B566A E701                       	dc.b	smpsNoAttack, $01
000B566C E1FB                       	smpsAlterNote       $FB
000B566E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000B5671 E106                       	smpsAlterNote       $06
000B5673 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000B5677 E107                       	smpsAlterNote       $07
000B5679 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000B567D E108                       	smpsAlterNote       $08
000B567F 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000B5685 E109                       	smpsAlterNote       $09
000B5687 A003 8001                  	dc.b	nG2, $03, nRst, $01
000B568B E10C                       	smpsAlterNote       $0C
000B568D A302 8001                  	dc.b	nBb2, $02, nRst, $01
000B5691 E1F0                       	smpsAlterNote       $F0
000B5693 A401                       	dc.b	nB2, $01
000B5695 E109                       	smpsAlterNote       $09
000B5697 E701                       	dc.b	smpsNoAttack, $01
000B5699 E106                       	smpsAlterNote       $06
000B569B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000B569E E109                       	smpsAlterNote       $09
000B56A0 A007                       	dc.b	nG2, $07
000B56A2 E108                       	smpsAlterNote       $08
000B56A4 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000B56A8 E107                       	smpsAlterNote       $07
000B56AA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000B56B0 E10B                       	smpsAlterNote       $0B
000B56B2 A202 8001                  	dc.b	nA2, $02, nRst, $01
000B56B6 E107                       	smpsAlterNote       $07
000B56B8 9B03                       	dc.b	nD2, $03
000B56BA E11A                       	smpsAlterNote       $1A
000B56BC A301                       	dc.b	nBb2, $01
000B56BE E1F2                       	smpsAlterNote       $F2
000B56C0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000B56C3 E1FF                       	smpsAlterNote       $FF
000B56C5 E701                       	dc.b	smpsNoAttack, $01
000B56C7 E111                       	smpsAlterNote       $11
000B56C9 E701                       	dc.b	smpsNoAttack, $01
000B56CB E106                       	smpsAlterNote       $06
000B56CD E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000B56D0 E107                       	smpsAlterNote       $07
000B56D2 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000B56DE E117                       	smpsAlterNote       $17
000B56E0 A001                       	dc.b	nG2, $01
000B56E2 E1FA                       	smpsAlterNote       $FA
000B56E4 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000B56E7 E116                       	smpsAlterNote       $16
000B56E9 E701                       	dc.b	smpsNoAttack, $01
000B56EB E1F5                       	smpsAlterNote       $F5
000B56ED E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000B56F0 E103                       	smpsAlterNote       $03
000B56F2 E701                       	dc.b	smpsNoAttack, $01
000B56F4 E10B                       	smpsAlterNote       $0B
000B56F6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B56FA E107                       	smpsAlterNote       $07
000B56FC 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000B5702 E109                       	smpsAlterNote       $09
000B5704 9E03                       	dc.b	nF2, $03
000B5706 E10B                       	smpsAlterNote       $0B
000B5708 9603 8001                  	dc.b	nA1, $03, nRst, $01
000B570C E107                       	smpsAlterNote       $07
000B570E 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000B5714 E10B                       	smpsAlterNote       $0B
000B5716 A203 8001                  	dc.b	nA2, $03, nRst, $01
000B571A E107                       	smpsAlterNote       $07
000B571C 9B03                       	dc.b	nD2, $03
000B571E E11A                       	smpsAlterNote       $1A
000B5720 A301                       	dc.b	nBb2, $01
000B5722 E1F9                       	smpsAlterNote       $F9
000B5724 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000B5727 E107                       	smpsAlterNote       $07
000B5729 E701                       	dc.b	smpsNoAttack, $01
000B572B E111                       	smpsAlterNote       $11
000B572D E701                       	dc.b	smpsNoAttack, $01
000B572F E106                       	smpsAlterNote       $06
000B5731 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000B5736 E107                       	smpsAlterNote       $07
000B5738 9B03                       	dc.b	nD2, $03
000B573A E108                       	smpsAlterNote       $08
000B573C 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000B5742 E109                       	smpsAlterNote       $09
000B5744 A003                       	dc.b	nG2, $03
000B5746 E10C                       	smpsAlterNote       $0C
000B5748 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000B574C E1FD                       	smpsAlterNote       $FD
000B574E A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
000B5753 E106                       	smpsAlterNote       $06
000B5755 8001                       	dc.b	nRst, $01
000B5757 E109                       	smpsAlterNote       $09
000B5759 A006 8001                  	dc.b	nG2, $06, nRst, $01
000B575D E108                       	smpsAlterNote       $08
000B575F 9C03                       	dc.b	nEb2, $03
000B5761 E107                       	smpsAlterNote       $07
000B5763 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000B5769 E10B                       	smpsAlterNote       $0B
000B576B A203 8001                  	dc.b	nA2, $03, nRst, $01
000B576F E107                       	smpsAlterNote       $07
000B5771 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000B5775 E11A                       	smpsAlterNote       $1A
000B5777 A301                       	dc.b	nBb2, $01
000B5779 E1F9                       	smpsAlterNote       $F9
000B577B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000B577E E107                       	smpsAlterNote       $07
000B5780 E701                       	dc.b	smpsNoAttack, $01
000B5782 E1FB                       	smpsAlterNote       $FB
000B5784 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000B5787 E106                       	smpsAlterNote       $06
000B5789 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000B578D E107                       	smpsAlterNote       $07
000B578F 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000B5797 E1EC                       	smpsAlterNote       $EC
000B5799 A101                       	dc.b	nAb2, $01
000B579B E108                       	smpsAlterNote       $08
000B579D E701                       	dc.b	smpsNoAttack, $01
000B579F E1E7                       	smpsAlterNote       $E7
000B57A1 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000B57A4 E1F5                       	smpsAlterNote       $F5
000B57A6 E701                       	dc.b	smpsNoAttack, $01
000B57A8 E10B                       	smpsAlterNote       $0B
000B57AA E702                       	dc.b	smpsNoAttack, $02
000B57AC E107                       	smpsAlterNote       $07
000B57AE 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000B57B4 E106                       	smpsAlterNote       $06
000B57B6 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000B57BC E10C                       	smpsAlterNote       $0C
000B57BE 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
000B57C6 E109                       	smpsAlterNote       $09
000B57C8 9E03                       	dc.b	nF2, $03
000B57CA E10C                       	smpsAlterNote       $0C
000B57CC 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000B57D0 E1EA                       	smpsAlterNote       $EA
000B57D2 A201                       	dc.b	nA2, $01
000B57D4 E106                       	smpsAlterNote       $06
000B57D6 E701                       	dc.b	smpsNoAttack, $01
000B57D8 E114                       	smpsAlterNote       $14
000B57DA E701                       	dc.b	smpsNoAttack, $01
000B57DC E1F0                       	smpsAlterNote       $F0
000B57DE E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000B57E1 E10C                       	smpsAlterNote       $0C
000B57E3 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000B57EF 9703                       	dc.b	nBb1, $03
000B57F1 E116                       	smpsAlterNote       $16
000B57F3 9C01                       	dc.b	nEb2, $01
000B57F5 E105                       	smpsAlterNote       $05
000B57F7 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000B57FA E113                       	smpsAlterNote       $13
000B57FC E701                       	dc.b	smpsNoAttack, $01
000B57FE E1FF                       	smpsAlterNote       $FF
000B5800 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000B5803 E109                       	smpsAlterNote       $09
000B5805 E703                       	dc.b	smpsNoAttack, $03
000B5807 E10C                       	smpsAlterNote       $0C
000B5809 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000B5815 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000B581D E109                       	smpsAlterNote       $09
000B581F 9E03                       	dc.b	nF2, $03
000B5821 E10C                       	smpsAlterNote       $0C
000B5823 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000B5827 E1EC                       	smpsAlterNote       $EC
000B5829 A201                       	dc.b	nA2, $01
000B582B E10A                       	smpsAlterNote       $0A
000B582D E701                       	dc.b	smpsNoAttack, $01
000B582F E1E8                       	smpsAlterNote       $E8
000B5831 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000B5834 E1F7                       	smpsAlterNote       $F7
000B5836 E701                       	dc.b	smpsNoAttack, $01
000B5838 E10C                       	smpsAlterNote       $0C
000B583A E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000B5846 E1EA                       	smpsAlterNote       $EA
000B5848 9D01                       	dc.b	nE2, $01
000B584A E108                       	smpsAlterNote       $08
000B584C E701                       	dc.b	smpsNoAttack, $01
000B584E E1F6                       	smpsAlterNote       $F6
000B5850 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000B5853 E105                       	smpsAlterNote       $05
000B5855 E701                       	dc.b	smpsNoAttack, $01
000B5857 E109                       	smpsAlterNote       $09
000B5859 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000B585D E10C                       	smpsAlterNote       $0C
000B585F 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000B586B E108                       	smpsAlterNote       $08
000B586D 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
000B5873 E106                       	smpsAlterNote       $06
000B5875 A403 8001                  	dc.b	nB2, $03, nRst, $01
000B5879 E108                       	smpsAlterNote       $08
000B587B 9D03                       	dc.b	nE2, $03
000B587D E1EB                       	smpsAlterNote       $EB
000B587F A801                       	dc.b	nEb3, $01
000B5881 E109                       	smpsAlterNote       $09
000B5883 E701                       	dc.b	smpsNoAttack, $01
000B5885 E1EB                       	smpsAlterNote       $EB
000B5887 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000B588A E108                       	smpsAlterNote       $08
000B588C E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
000B5898 E1E9                       	smpsAlterNote       $E9
000B589A A301                       	dc.b	nBb2, $01
000B589C E1F8                       	smpsAlterNote       $F8
000B589E E701                       	dc.b	smpsNoAttack, $01
000B58A0 E116                       	smpsAlterNote       $16
000B58A2 E701                       	dc.b	smpsNoAttack, $01
000B58A4 E1F7                       	smpsAlterNote       $F7
000B58A6 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000B58A9 E107                       	smpsAlterNote       $07
000B58AB E701                       	dc.b	smpsNoAttack, $01
000B58AD E1EE                       	smpsAlterNote       $EE
000B58AF E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000B58B2 E106                       	smpsAlterNote       $06
000B58B4 8001                       	dc.b	nRst, $01
000B58B6 E108                       	smpsAlterNote       $08
000B58B8 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
000B58BE E106                       	smpsAlterNote       $06
000B58C0 A402 8001                  	dc.b	nB2, $02, nRst, $01
000B58C4 E108                       	smpsAlterNote       $08
000B58C6 9D03                       	dc.b	nE2, $03
000B58C8 E10B                       	smpsAlterNote       $0B
000B58CA 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
000B58D0 E108                       	smpsAlterNote       $08
000B58D2 9D03 8001                  	dc.b	nE2, $03, nRst, $01
000B58D6 E10B                       	smpsAlterNote       $0B
000B58D8 9603                       	dc.b	nA1, $03
000B58DA E10E                       	smpsAlterNote       $0E
000B58DC A001                       	dc.b	nG2, $01
000B58DE E118                       	smpsAlterNote       $18
000B58E0 E701                       	dc.b	smpsNoAttack, $01
000B58E2 E1E9                       	smpsAlterNote       $E9
000B58E4 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000B58E7 E1EE                       	smpsAlterNote       $EE
000B58E9 E701                       	dc.b	smpsNoAttack, $01
000B58EB E1F8                       	smpsAlterNote       $F8
000B58ED E701                       	dc.b	smpsNoAttack, $01
000B58EF E102                       	smpsAlterNote       $02
000B58F1 E701                       	dc.b	smpsNoAttack, $01
000B58F3 E107                       	smpsAlterNote       $07
000B58F5 8001                       	dc.b	nRst, $01
000B58F7 E10B                       	smpsAlterNote       $0B
000B58F9 9603                       	dc.b	nA1, $03
000B58FB E10C                       	smpsAlterNote       $0C
000B58FD 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
000B5903 E10B                       	smpsAlterNote       $0B
000B5905 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000B5911 8001 9603                  	dc.b	nRst, $01, nA1, $03
000B5915 E10C                       	smpsAlterNote       $0C
000B5917 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
000B5923 8001                       	dc.b	nRst, $01
000B5925 E10B                       	smpsAlterNote       $0B
000B5927 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000B592F E107                       	smpsAlterNote       $07
000B5931 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000B5935 E10B                       	smpsAlterNote       $0B
000B5937 9603                       	dc.b	nA1, $03
000B5939 E109                       	smpsAlterNote       $09
000B593B 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000B593F E108                       	smpsAlterNote       $08
000B5941 9D06                       	dc.b	nE2, $06
000B5943 E107                       	smpsAlterNote       $07
000B5945 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000B5949 E106                       	smpsAlterNote       $06
000B594B 9903                       	dc.b	nC2, $03
000B594D E10C                       	smpsAlterNote       $0C
000B594F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000B5953 E10B                       	smpsAlterNote       $0B
000B5955 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000B5961 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000B596B E10C                       	smpsAlterNote       $0C
000B596D 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
000B5979 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000B5985 8001                       	dc.b	nRst, $01
000B5987 E10B                       	smpsAlterNote       $0B
000B5989 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000B5995 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
000B59A1 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
000B59AD 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000B59B7 E10C                       	smpsAlterNote       $0C
000B59B9 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
000B59C5 E10B                       	smpsAlterNote       $0B
000B59C7 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000B59CF E107                       	smpsAlterNote       $07
000B59D1 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000B59D5 E10B                       	smpsAlterNote       $0B
000B59D7 9603                       	dc.b	nA1, $03
000B59D9 E109                       	smpsAlterNote       $09
000B59DB 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000B59DF E108                       	smpsAlterNote       $08
000B59E1 9D06 8001                  	dc.b	nE2, $06, nRst, $01
000B59E5 E107                       	smpsAlterNote       $07
000B59E7 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000B59EB E106                       	smpsAlterNote       $06
000B59ED 9903                       	dc.b	nC2, $03
000B59EF E10C                       	smpsAlterNote       $0C
000B59F1 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000B59F5 E10B                       	smpsAlterNote       $0B
000B59F7 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000B5A03 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000B5A0D E10C                       	smpsAlterNote       $0C
000B5A0F 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
000B5A1B 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000B5A27 8001                       	dc.b	nRst, $01
000B5A29 E10B                       	smpsAlterNote       $0B
000B5A2B 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000B5A37 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000B5A41 E10C                       	smpsAlterNote       $0C
000B5A43 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000B5A4F 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
000B5A5B E10B                       	smpsAlterNote       $0B
000B5A5D 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000B5A69 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000B5A73 E10C                       	smpsAlterNote       $0C
000B5A75 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000B5A81 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
000B5A8D E10B                       	smpsAlterNote       $0B
000B5A8F 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
000B5A9B 8001                       	dc.b	nRst, $01
000B5A9D E1EC                       	smpsAlterNote       $EC
000B5A9F A101                       	dc.b	nAb2, $01
000B5AA1 E1FA                       	smpsAlterNote       $FA
000B5AA3 E701                       	dc.b	smpsNoAttack, $01
000B5AA5 E116                       	smpsAlterNote       $16
000B5AA7 E701                       	dc.b	smpsNoAttack, $01
000B5AA9 E1F5                       	smpsAlterNote       $F5
000B5AAB E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000B5AAE E10B                       	smpsAlterNote       $0B
000B5AB0 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
000B5ABC 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
000B5AC8 E107                       	smpsAlterNote       $07
000B5ACA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000B5AD0 E10B                       	smpsAlterNote       $0B
000B5AD2 A203                       	dc.b	nA2, $03
000B5AD4 E107                       	smpsAlterNote       $07
000B5AD6 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000B5ADA E1F3                       	smpsAlterNote       $F3
000B5ADC A401                       	dc.b	nB2, $01
000B5ADE E102                       	smpsAlterNote       $02
000B5AE0 E701                       	dc.b	smpsNoAttack, $01
000B5AE2 E109                       	smpsAlterNote       $09
000B5AE4 E701                       	dc.b	smpsNoAttack, $01
000B5AE6 E102                       	smpsAlterNote       $02
000B5AE8 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000B5AEB E106                       	smpsAlterNote       $06
000B5AED E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000B5AF1 E107                       	smpsAlterNote       $07
000B5AF3 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000B5AF7 E108                       	smpsAlterNote       $08
000B5AF9 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000B5AFF E109                       	smpsAlterNote       $09
000B5B01 A003 8001                  	dc.b	nG2, $03, nRst, $01
000B5B05 E1F2                       	smpsAlterNote       $F2
000B5B07 A401                       	dc.b	nB2, $01
000B5B09 E1FF                       	smpsAlterNote       $FF
000B5B0B E701                       	dc.b	smpsNoAttack, $01
000B5B0D E111                       	smpsAlterNote       $11
000B5B0F E701                       	dc.b	smpsNoAttack, $01
000B5B11 E1FB                       	smpsAlterNote       $FB
000B5B13 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000B5B16 E106                       	smpsAlterNote       $06
000B5B18 E702                       	dc.b	smpsNoAttack, $02
000B5B1A E109                       	smpsAlterNote       $09
000B5B1C A007                       	dc.b	nG2, $07
000B5B1E E108                       	smpsAlterNote       $08
000B5B20 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000B5B24 E107                       	smpsAlterNote       $07
000B5B26 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000B5B2C E10B                       	smpsAlterNote       $0B
000B5B2E A202 8001                  	dc.b	nA2, $02, nRst, $01
000B5B32 E107                       	smpsAlterNote       $07
000B5B34 9B03                       	dc.b	nD2, $03
000B5B36 E11A                       	smpsAlterNote       $1A
000B5B38 A301                       	dc.b	nBb2, $01
000B5B3A E1F2                       	smpsAlterNote       $F2
000B5B3C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000B5B3F E1FF                       	smpsAlterNote       $FF
000B5B41 E701                       	dc.b	smpsNoAttack, $01
000B5B43 E111                       	smpsAlterNote       $11
000B5B45 E701                       	dc.b	smpsNoAttack, $01
000B5B47 E106                       	smpsAlterNote       $06
000B5B49 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000B5B4C E107                       	smpsAlterNote       $07
000B5B4E 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000B5B5A E117                       	smpsAlterNote       $17
000B5B5C A001                       	dc.b	nG2, $01
000B5B5E E1FA                       	smpsAlterNote       $FA
000B5B60 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000B5B63 E116                       	smpsAlterNote       $16
000B5B65 E701                       	dc.b	smpsNoAttack, $01
000B5B67 E1F5                       	smpsAlterNote       $F5
000B5B69 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000B5B6C E103                       	smpsAlterNote       $03
000B5B6E E701                       	dc.b	smpsNoAttack, $01
000B5B70 E10B                       	smpsAlterNote       $0B
000B5B72 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B5B76 E107                       	smpsAlterNote       $07
000B5B78 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000B5B7E E109                       	smpsAlterNote       $09
000B5B80 9E03                       	dc.b	nF2, $03
000B5B82 E10B                       	smpsAlterNote       $0B
000B5B84 9603 8001                  	dc.b	nA1, $03, nRst, $01
000B5B88 E107                       	smpsAlterNote       $07
000B5B8A 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000B5B90 E10B                       	smpsAlterNote       $0B
000B5B92 A203 8001                  	dc.b	nA2, $03, nRst, $01
000B5B96 E107                       	smpsAlterNote       $07
000B5B98 9B03                       	dc.b	nD2, $03
000B5B9A E11A                       	smpsAlterNote       $1A
000B5B9C A301                       	dc.b	nBb2, $01
000B5B9E E1F9                       	smpsAlterNote       $F9
000B5BA0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000B5BA3 E1FF                       	smpsAlterNote       $FF
000B5BA5 E701                       	dc.b	smpsNoAttack, $01
000B5BA7 E111                       	smpsAlterNote       $11
000B5BA9 E701                       	dc.b	smpsNoAttack, $01
000B5BAB E106                       	smpsAlterNote       $06
000B5BAD E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000B5BB0 E107                       	smpsAlterNote       $07
000B5BB2 9B03                       	dc.b	nD2, $03
000B5BB4 E108                       	smpsAlterNote       $08
000B5BB6 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000B5BBC E109                       	smpsAlterNote       $09
000B5BBE A003                       	dc.b	nG2, $03
000B5BC0 E1F0                       	smpsAlterNote       $F0
000B5BC2 A501                       	dc.b	nC3, $01
000B5BC4 E106                       	smpsAlterNote       $06
000B5BC6 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
000B5BCA E109                       	smpsAlterNote       $09
000B5BCC A006 8001                  	dc.b	nG2, $06, nRst, $01
000B5BD0 E108                       	smpsAlterNote       $08
000B5BD2 9C03                       	dc.b	nEb2, $03
000B5BD4 E107                       	smpsAlterNote       $07
000B5BD6 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000B5BDC E10B                       	smpsAlterNote       $0B
000B5BDE A203 8001                  	dc.b	nA2, $03, nRst, $01
000B5BE2 E107                       	smpsAlterNote       $07
000B5BE4 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000B5BE8 E11A                       	smpsAlterNote       $1A
000B5BEA A301                       	dc.b	nBb2, $01
000B5BEC E1F9                       	smpsAlterNote       $F9
000B5BEE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000B5BF1 E107                       	smpsAlterNote       $07
000B5BF3 E701                       	dc.b	smpsNoAttack, $01
000B5BF5 E1FB                       	smpsAlterNote       $FB
000B5BF7 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000B5BFA E106                       	smpsAlterNote       $06
000B5BFC E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000B5C00 E107                       	smpsAlterNote       $07
000B5C02 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000B5C0A E1EC                       	smpsAlterNote       $EC
000B5C0C A101                       	dc.b	nAb2, $01
000B5C0E E108                       	smpsAlterNote       $08
000B5C10 E701                       	dc.b	smpsNoAttack, $01
000B5C12 E1E7                       	smpsAlterNote       $E7
000B5C14 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000B5C17 E1F5                       	smpsAlterNote       $F5
000B5C19 E701                       	dc.b	smpsNoAttack, $01
000B5C1B E10B                       	smpsAlterNote       $0B
000B5C1D E702                       	dc.b	smpsNoAttack, $02
000B5C1F E107                       	smpsAlterNote       $07
000B5C21 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000B5C27 E106                       	smpsAlterNote       $06
000B5C29 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000B5C2F E10C                       	smpsAlterNote       $0C
000B5C31 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
000B5C39 E109                       	smpsAlterNote       $09
000B5C3B 9E03                       	dc.b	nF2, $03
000B5C3D E10C                       	smpsAlterNote       $0C
000B5C3F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000B5C43 E1EA                       	smpsAlterNote       $EA
000B5C45 A201                       	dc.b	nA2, $01
000B5C47 E106                       	smpsAlterNote       $06
000B5C49 E701                       	dc.b	smpsNoAttack, $01
000B5C4B E114                       	smpsAlterNote       $14
000B5C4D E701                       	dc.b	smpsNoAttack, $01
000B5C4F E1F0                       	smpsAlterNote       $F0
000B5C51 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000B5C54 E10C                       	smpsAlterNote       $0C
000B5C56 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000B5C62 9703                       	dc.b	nBb1, $03
000B5C64 E116                       	smpsAlterNote       $16
000B5C66 9C01                       	dc.b	nEb2, $01
000B5C68 E105                       	smpsAlterNote       $05
000B5C6A E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000B5C6D E113                       	smpsAlterNote       $13
000B5C6F E701                       	dc.b	smpsNoAttack, $01
000B5C71 E1FF                       	smpsAlterNote       $FF
000B5C73 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000B5C76 E109                       	smpsAlterNote       $09
000B5C78 E703                       	dc.b	smpsNoAttack, $03
000B5C7A E10C                       	smpsAlterNote       $0C
000B5C7C 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000B5C88 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000B5C90 E109                       	smpsAlterNote       $09
000B5C92 9E03                       	dc.b	nF2, $03
000B5C94 E10C                       	smpsAlterNote       $0C
000B5C96 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000B5C9A E1EA                       	smpsAlterNote       $EA
000B5C9C A201                       	dc.b	nA2, $01
000B5C9E E106                       	smpsAlterNote       $06
000B5CA0 E701                       	dc.b	smpsNoAttack, $01
000B5CA2 E1E2                       	smpsAlterNote       $E2
000B5CA4 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000B5CA7 E1F0                       	smpsAlterNote       $F0
000B5CA9 E701                       	dc.b	smpsNoAttack, $01
000B5CAB E10C                       	smpsAlterNote       $0C
000B5CAD E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000B5CB9 E116                       	smpsAlterNote       $16
000B5CBB 9C01                       	dc.b	nEb2, $01
000B5CBD E105                       	smpsAlterNote       $05
000B5CBF E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000B5CC2 E1F1                       	smpsAlterNote       $F1
000B5CC4 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000B5CC7 E1FF                       	smpsAlterNote       $FF
000B5CC9 E701                       	dc.b	smpsNoAttack, $01
000B5CCB E109                       	smpsAlterNote       $09
000B5CCD E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000B5CD1 E10C                       	smpsAlterNote       $0C
000B5CD3 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
000B5CDF E106                       	smpsAlterNote       $06
000B5CE1 9903                       	dc.b	nC2, $03
000B5CE3 E107                       	smpsAlterNote       $07
000B5CE5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000B5CE9 E109                       	smpsAlterNote       $09
000B5CEB 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
000B5CF1 E107                       	smpsAlterNote       $07
000B5CF3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000B5CF7 E108                       	smpsAlterNote       $08
000B5CF9 9D03                       	dc.b	nE2, $03
000B5CFB E10B                       	smpsAlterNote       $0B
000B5CFD 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
000B5D03 E109                       	smpsAlterNote       $09
000B5D05 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
000B5D0B E10C                       	smpsAlterNote       $0C
000B5D0D 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
000B5D13 E106                       	smpsAlterNote       $06
000B5D15 9903                       	dc.b	nC2, $03
000B5D17 E11A                       	smpsAlterNote       $1A
000B5D19 A301                       	dc.b	nBb2, $01
000B5D1B E1F9                       	smpsAlterNote       $F9
000B5D1D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000B5D20 E1FF                       	smpsAlterNote       $FF
000B5D22 E701                       	dc.b	smpsNoAttack, $01
000B5D24 E111                       	smpsAlterNote       $11
000B5D26 E701                       	dc.b	smpsNoAttack, $01
000B5D28 E106                       	smpsAlterNote       $06
000B5D2A E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
000B5D31 E109                       	smpsAlterNote       $09
000B5D33 A003                       	dc.b	nG2, $03
000B5D35 E106                       	smpsAlterNote       $06
000B5D37 9907                       	dc.b	nC2, $07
000B5D39 E107                       	smpsAlterNote       $07
000B5D3B 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
000B5D43 E10B                       	smpsAlterNote       $0B
000B5D45 A203                       	dc.b	nA2, $03
000B5D47 E107                       	smpsAlterNote       $07
000B5D49 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000B5D4D E1F2                       	smpsAlterNote       $F2
000B5D4F A401                       	dc.b	nB2, $01
000B5D51 E1F9                       	smpsAlterNote       $F9
000B5D53 E701                       	dc.b	smpsNoAttack, $01
000B5D55 E107                       	smpsAlterNote       $07
000B5D57 E701                       	dc.b	smpsNoAttack, $01
000B5D59 E1FB                       	smpsAlterNote       $FB
000B5D5B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000B5D5E E106                       	smpsAlterNote       $06
000B5D60 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000B5D64 E107                       	smpsAlterNote       $07
000B5D66 9B03                       	dc.b	nD2, $03
000B5D68 E108                       	smpsAlterNote       $08
000B5D6A 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
000B5D70 E109                       	smpsAlterNote       $09
000B5D72 A003 8001                  	dc.b	nG2, $03, nRst, $01
000B5D76 E1F2                       	smpsAlterNote       $F2
000B5D78 A401                       	dc.b	nB2, $01
000B5D7A E1F9                       	smpsAlterNote       $F9
000B5D7C E701                       	dc.b	smpsNoAttack, $01
000B5D7E E107                       	smpsAlterNote       $07
000B5D80 E701                       	dc.b	smpsNoAttack, $01
000B5D82 E1FB                       	smpsAlterNote       $FB
000B5D84 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000B5D87 E106                       	smpsAlterNote       $06
000B5D89 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000B5D8D E108                       	smpsAlterNote       $08
000B5D8F 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
000B5D93 E10C                       	smpsAlterNote       $0C
000B5D95 A302 8001                  	dc.b	nBb2, $02, nRst, $01
000B5D99 E107                       	smpsAlterNote       $07
000B5D9B 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000B5DA1 E10B                       	smpsAlterNote       $0B
000B5DA3 A203                       	dc.b	nA2, $03
000B5DA5 E107                       	smpsAlterNote       $07
000B5DA7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000B5DAB E1F2                       	smpsAlterNote       $F2
000B5DAD A401                       	dc.b	nB2, $01
000B5DAF E1FF                       	smpsAlterNote       $FF
000B5DB1 E701                       	dc.b	smpsNoAttack, $01
000B5DB3 E107                       	smpsAlterNote       $07
000B5DB5 E701                       	dc.b	smpsNoAttack, $01
000B5DB7 E1FB                       	smpsAlterNote       $FB
000B5DB9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000B5DBC E106                       	smpsAlterNote       $06
000B5DBE E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000B5DC2 E107                       	smpsAlterNote       $07
000B5DC4 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000B5DC8 E108                       	smpsAlterNote       $08
000B5DCA 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
000B5DD0 E109                       	smpsAlterNote       $09
000B5DD2 A003 8001                  	dc.b	nG2, $03, nRst, $01
000B5DD6 E1F2                       	smpsAlterNote       $F2
000B5DD8 A401                       	dc.b	nB2, $01
000B5DDA E1FF                       	smpsAlterNote       $FF
000B5DDC E701                       	dc.b	smpsNoAttack, $01
000B5DDE E111                       	smpsAlterNote       $11
000B5DE0 E701                       	dc.b	smpsNoAttack, $01
000B5DE2 E1FB                       	smpsAlterNote       $FB
000B5DE4 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000B5DE7 E106                       	smpsAlterNote       $06
000B5DE9 E702                       	dc.b	smpsNoAttack, $02
000B5DEB E108                       	smpsAlterNote       $08
000B5DED 9C07                       	dc.b	nEb2, $07
000B5DEF E10C                       	smpsAlterNote       $0C
000B5DF1 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000B5DF5 E107                       	smpsAlterNote       $07
000B5DF7 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000B5DFD E10B                       	smpsAlterNote       $0B
000B5DFF A202 8001                  	dc.b	nA2, $02, nRst, $01
000B5E03 E107                       	smpsAlterNote       $07
000B5E05 9B03                       	dc.b	nD2, $03
000B5E07 E11A                       	smpsAlterNote       $1A
000B5E09 A301                       	dc.b	nBb2, $01
000B5E0B E1F2                       	smpsAlterNote       $F2
000B5E0D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000B5E10 E1FF                       	smpsAlterNote       $FF
000B5E12 E701                       	dc.b	smpsNoAttack, $01
000B5E14 E111                       	smpsAlterNote       $11
000B5E16 E701                       	dc.b	smpsNoAttack, $01
000B5E18 E106                       	smpsAlterNote       $06
000B5E1A E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000B5E1D E107                       	smpsAlterNote       $07
000B5E1F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000B5E23 E108                       	smpsAlterNote       $08
000B5E25 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
000B5E2D E109                       	smpsAlterNote       $09
000B5E2F A003                       	dc.b	nG2, $03
000B5E31 E11A                       	smpsAlterNote       $1A
000B5E33 A301                       	dc.b	nBb2, $01
000B5E35 E1F2                       	smpsAlterNote       $F2
000B5E37 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000B5E3A E1FF                       	smpsAlterNote       $FF
000B5E3C E701                       	dc.b	smpsNoAttack, $01
000B5E3E E111                       	smpsAlterNote       $11
000B5E40 E701                       	dc.b	smpsNoAttack, $01
000B5E42 E106                       	smpsAlterNote       $06
000B5E44 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000B5E47 E108                       	smpsAlterNote       $08
000B5E49 9C07                       	dc.b	nEb2, $07
000B5E4B E10C                       	smpsAlterNote       $0C
000B5E4D A303 8001                  	dc.b	nBb2, $03, nRst, $01
000B5E51 E107                       	smpsAlterNote       $07
000B5E53 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
000B5E5F 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
000B5E69 E108                       	smpsAlterNote       $08
000B5E6B 9C06                       	dc.b	nEb2, $06
000B5E6D E10C                       	smpsAlterNote       $0C
000B5E6F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000B5E73 E108                       	smpsAlterNote       $08
000B5E75 9C03                       	dc.b	nEb2, $03
000B5E77 E109                       	smpsAlterNote       $09
000B5E79 A003 8001                  	dc.b	nG2, $03, nRst, $01
000B5E7D E10C                       	smpsAlterNote       $0C
000B5E7F A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
000B5E87 E107                       	smpsAlterNote       $07
000B5E89 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000B5E8D F6F4 F8                    	smpsJump            music84_Jump04
000B5E90                            
000B5E90                            ; FM2 Data
000B5E90                            music84_FM2:
000B5E90 E0C0                       	smpsPan             panCenter, $00
000B5E94 E10B                       	smpsAlterNote       $0B
000B5E96 C603 8007                  	dc.b	nA5, $03, nRst, $07
000B5E9A E109                       	smpsAlterNote       $09
000B5E9C C403 800B                  	dc.b	nG5, $03, nRst, $0B
000B5EA0 E108                       	smpsAlterNote       $08
000B5EA2 C103 8004                  	dc.b	nE5, $03, nRst, $04
000B5EA8 E080                       	smpsPan             panLeft, $00
000B5EAA E10C                       	smpsAlterNote       $0C
000B5EAC E6F9                       	smpsAlterVol        $F9
000B5EAE C703                       	dc.b	nBb5, $03
000B5EB0 E10B                       	smpsAlterNote       $0B
000B5EB2 C603 8001                  	dc.b	nA5, $03, nRst, $01
000B5EB6 E109                       	smpsAlterNote       $09
000B5EB8 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
000B5EBE E108                       	smpsAlterNote       $08
000B5EC0 C103 8001                  	dc.b	nE5, $03, nRst, $01
000B5EC4 E106                       	smpsAlterNote       $06
000B5EC6 BD03                       	dc.b	nC5, $03
000B5EC8 E10B                       	smpsAlterNote       $0B
000B5ECA BA03 8001                  	dc.b	nA4, $03, nRst, $01
000B5ED0 E0C0                       	smpsPan             panCenter, $00
000B5ED2 E107                       	smpsAlterNote       $07
000B5ED4 E606                       	smpsAlterVol        $06
000B5ED6 BF03                       	dc.b	nD5, $03
000B5ED8                            
000B5ED8                            music84_Jump03:
000B5ED8 E108                       	smpsAlterNote       $08
000B5EDA C103 8001                  	dc.b	nE5, $03, nRst, $01
000B5EDE E109                       	smpsAlterNote       $09
000B5EE0 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
000B5EE6 E10B                       	smpsAlterNote       $0B
000B5EE8 C607                       	dc.b	nA5, $07
000B5EEA E107                       	smpsAlterNote       $07
000B5EEC BF03 8001                  	dc.b	nD5, $03, nRst, $01
000B5EF0 E106                       	smpsAlterNote       $06
000B5EF2 C90D                       	dc.b	nC6, $0D
000B5EF4 E100                       	smpsAlterNote       $00
000B5EF6 E701                       	dc.b	smpsNoAttack, $01
000B5EF8 E1FF                       	smpsAlterNote       $FF
000B5EFA E701                       	dc.b	smpsNoAttack, $01
000B5EFC E103                       	smpsAlterNote       $03
000B5EFE E701                       	dc.b	smpsNoAttack, $01
000B5F00 E109                       	smpsAlterNote       $09
000B5F02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B5F06 E106                       	smpsAlterNote       $06
000B5F08 E701                       	dc.b	smpsNoAttack, $01
000B5F0A E100                       	smpsAlterNote       $00
000B5F0C E701                       	dc.b	smpsNoAttack, $01
000B5F0E E10C                       	smpsAlterNote       $0C
000B5F10 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000B5F14 E10B                       	smpsAlterNote       $0B
000B5F16 C603                       	dc.b	nA5, $03
000B5F18 E109                       	smpsAlterNote       $09
000B5F1A C403 8001                  	dc.b	nG5, $03, nRst, $01
000B5F1E E10B                       	smpsAlterNote       $0B
000B5F20 C60D                       	dc.b	nA5, $0D
000B5F22 E105                       	smpsAlterNote       $05
000B5F24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B5F28 E10B                       	smpsAlterNote       $0B
000B5F2A E701                       	dc.b	smpsNoAttack, $01
000B5F2C E10E                       	smpsAlterNote       $0E
000B5F2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B5F32 E108                       	smpsAlterNote       $08
000B5F34 E701                       	dc.b	smpsNoAttack, $01
000B5F36 E104                       	smpsAlterNote       $04
000B5F38 E701                       	dc.b	smpsNoAttack, $01
000B5F3A E105                       	smpsAlterNote       $05
000B5F3C E701                       	dc.b	smpsNoAttack, $01
000B5F3E E10B                       	smpsAlterNote       $0B
000B5F40 E701                       	dc.b	smpsNoAttack, $01
000B5F42 E10F                       	smpsAlterNote       $0F
000B5F44 E701                       	dc.b	smpsNoAttack, $01
000B5F46 E10B                       	smpsAlterNote       $0B
000B5F48 E701                       	dc.b	smpsNoAttack, $01
000B5F4A E108                       	smpsAlterNote       $08
000B5F4C E701                       	dc.b	smpsNoAttack, $01
000B5F4E E104                       	smpsAlterNote       $04
000B5F50 E701                       	dc.b	smpsNoAttack, $01
000B5F52 E108                       	smpsAlterNote       $08
000B5F54 E701                       	dc.b	smpsNoAttack, $01
000B5F56 E10E                       	smpsAlterNote       $0E
000B5F58 E701                       	dc.b	smpsNoAttack, $01
000B5F5A E10F                       	smpsAlterNote       $0F
000B5F5C E701                       	dc.b	smpsNoAttack, $01
000B5F5E E10B                       	smpsAlterNote       $0B
000B5F60 E701                       	dc.b	smpsNoAttack, $01
000B5F62 E105                       	smpsAlterNote       $05
000B5F64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B5F68 E108                       	smpsAlterNote       $08
000B5F6A E701                       	dc.b	smpsNoAttack, $01
000B5F6C E10E                       	smpsAlterNote       $0E
000B5F6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B5F72 E108                       	smpsAlterNote       $08
000B5F74 E701                       	dc.b	smpsNoAttack, $01
000B5F76 E105                       	smpsAlterNote       $05
000B5F78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B5F7C E10B                       	smpsAlterNote       $0B
000B5F7E E701                       	dc.b	smpsNoAttack, $01
000B5F80 E10F                       	smpsAlterNote       $0F
000B5F82 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000B5F86 E107                       	smpsAlterNote       $07
000B5F88 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000B5F8C E108                       	smpsAlterNote       $08
000B5F8E C103                       	dc.b	nE5, $03
000B5F90 E109                       	smpsAlterNote       $09
000B5F92 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
000B5F9A E10B                       	smpsAlterNote       $0B
000B5F9C C606 8001                  	dc.b	nA5, $06, nRst, $01
000B5FA0 E107                       	smpsAlterNote       $07
000B5FA2 BF03                       	dc.b	nD5, $03
000B5FA4 E106                       	smpsAlterNote       $06
000B5FA6 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
000B5FAA E107                       	smpsAlterNote       $07
000B5FAC CB03                       	dc.b	nD6, $03
000B5FAE E10C                       	smpsAlterNote       $0C
000B5FB0 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000B5FB4 E10B                       	smpsAlterNote       $0B
000B5FB6 C604 8001                  	dc.b	nA5, $04, nRst, $01
000B5FBA E109                       	smpsAlterNote       $09
000B5FBC C404                       	dc.b	nG5, $04
000B5FBE E10B                       	smpsAlterNote       $0B
000B5FC0 C60D                       	dc.b	nA5, $0D
000B5FC2 E108                       	smpsAlterNote       $08
000B5FC4 E701                       	dc.b	smpsNoAttack, $01
000B5FC6 E104                       	smpsAlterNote       $04
000B5FC8 E701                       	dc.b	smpsNoAttack, $01
000B5FCA E108                       	smpsAlterNote       $08
000B5FCC E701                       	dc.b	smpsNoAttack, $01
000B5FCE E10B                       	smpsAlterNote       $0B
000B5FD0 E701                       	dc.b	smpsNoAttack, $01
000B5FD2 E10F                       	smpsAlterNote       $0F
000B5FD4 E701                       	dc.b	smpsNoAttack, $01
000B5FD6 E10B                       	smpsAlterNote       $0B
000B5FD8 E701                       	dc.b	smpsNoAttack, $01
000B5FDA E105                       	smpsAlterNote       $05
000B5FDC E701                       	dc.b	smpsNoAttack, $01
000B5FDE E104                       	smpsAlterNote       $04
000B5FE0 E701                       	dc.b	smpsNoAttack, $01
000B5FE2 E108                       	smpsAlterNote       $08
000B5FE4 E701                       	dc.b	smpsNoAttack, $01
000B5FE6 E10E                       	smpsAlterNote       $0E
000B5FE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B5FEC E10B                       	smpsAlterNote       $0B
000B5FEE E701                       	dc.b	smpsNoAttack, $01
000B5FF0 E105                       	smpsAlterNote       $05
000B5FF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B5FF6 E10B                       	smpsAlterNote       $0B
000B5FF8 E701                       	dc.b	smpsNoAttack, $01
000B5FFA E10E                       	smpsAlterNote       $0E
000B5FFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6000 E108                       	smpsAlterNote       $08
000B6002 E701                       	dc.b	smpsNoAttack, $01
000B6004 E104                       	smpsAlterNote       $04
000B6006 E701                       	dc.b	smpsNoAttack, $01
000B6008 E105                       	smpsAlterNote       $05
000B600A E701                       	dc.b	smpsNoAttack, $01
000B600C E10B                       	smpsAlterNote       $0B
000B600E E701                       	dc.b	smpsNoAttack, $01
000B6010 E10F                       	smpsAlterNote       $0F
000B6012 E701                       	dc.b	smpsNoAttack, $01
000B6014 E10B                       	smpsAlterNote       $0B
000B6016 E701                       	dc.b	smpsNoAttack, $01
000B6018 E108                       	smpsAlterNote       $08
000B601A E701                       	dc.b	smpsNoAttack, $01
000B601C E105                       	smpsAlterNote       $05
000B601E 8001                       	dc.b	nRst, $01
000B6020 E109                       	smpsAlterNote       $09
000B6022 C401                       	dc.b	nG5, $01
000B6024 E10B                       	smpsAlterNote       $0B
000B6026 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
000B602F E109                       	smpsAlterNote       $09
000B6031 C404 8001                  	dc.b	nG5, $04, nRst, $01
000B6035 E10B                       	smpsAlterNote       $0B
000B6037 C604 8001                  	dc.b	nA5, $04, nRst, $01
000B603B E107                       	smpsAlterNote       $07
000B603D BF0D                       	dc.b	nD5, $0D
000B603F E101                       	smpsAlterNote       $01
000B6041 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6045 E104                       	smpsAlterNote       $04
000B6047 E701                       	dc.b	smpsNoAttack, $01
000B6049 E10A                       	smpsAlterNote       $0A
000B604B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B604F E104                       	smpsAlterNote       $04
000B6051 E701                       	dc.b	smpsNoAttack, $01
000B6053 E101                       	smpsAlterNote       $01
000B6055 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6059 E107                       	smpsAlterNote       $07
000B605B E701                       	dc.b	smpsNoAttack, $01
000B605D E10B                       	smpsAlterNote       $0B
000B605F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B6063 E108                       	smpsAlterNote       $08
000B6065 C101                       	dc.b	nE5, $01
000B6067 E109                       	smpsAlterNote       $09
000B6069 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000B606E E10B                       	smpsAlterNote       $0B
000B6070 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000B6078 E108                       	smpsAlterNote       $08
000B607A CD06                       	dc.b	nE6, $06
000B607C E109                       	smpsAlterNote       $09
000B607E CE07                       	dc.b	nF6, $07
000B6080 E108                       	smpsAlterNote       $08
000B6082 CD03 8001                  	dc.b	nE6, $03, nRst, $01
000B6086 E106                       	smpsAlterNote       $06
000B6088 C903                       	dc.b	nC6, $03
000B608A E109                       	smpsAlterNote       $09
000B608C C403 8001                  	dc.b	nG5, $03, nRst, $01
000B6090 E10C                       	smpsAlterNote       $0C
000B6092 C70D                       	dc.b	nBb5, $0D
000B6094 E106                       	smpsAlterNote       $06
000B6096 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B609A E109                       	smpsAlterNote       $09
000B609C E701                       	dc.b	smpsNoAttack, $01
000B609E E10F                       	smpsAlterNote       $0F
000B60A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B60A4 E109                       	smpsAlterNote       $09
000B60A6 E701                       	dc.b	smpsNoAttack, $01
000B60A8 E106                       	smpsAlterNote       $06
000B60AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B60AE E10C                       	smpsAlterNote       $0C
000B60B0 E701                       	dc.b	smpsNoAttack, $01
000B60B2 E110                       	smpsAlterNote       $10
000B60B4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B60B8 E10B                       	smpsAlterNote       $0B
000B60BA C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
000B60BE E105                       	smpsAlterNote       $05
000B60C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B60C4 E10B                       	smpsAlterNote       $0B
000B60C6 E701                       	dc.b	smpsNoAttack, $01
000B60C8 E10E                       	smpsAlterNote       $0E
000B60CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B60CE E108                       	smpsAlterNote       $08
000B60D0 E701                       	dc.b	smpsNoAttack, $01
000B60D2 E104                       	smpsAlterNote       $04
000B60D4 E701                       	dc.b	smpsNoAttack, $01
000B60D6 E105                       	smpsAlterNote       $05
000B60D8 E701                       	dc.b	smpsNoAttack, $01
000B60DA E10B                       	smpsAlterNote       $0B
000B60DC E701                       	dc.b	smpsNoAttack, $01
000B60DE E10F                       	smpsAlterNote       $0F
000B60E0 E701                       	dc.b	smpsNoAttack, $01
000B60E2 E10B                       	smpsAlterNote       $0B
000B60E4 E701                       	dc.b	smpsNoAttack, $01
000B60E6 E108                       	smpsAlterNote       $08
000B60E8 E701                       	dc.b	smpsNoAttack, $01
000B60EA E104                       	smpsAlterNote       $04
000B60EC E701                       	dc.b	smpsNoAttack, $01
000B60EE E108                       	smpsAlterNote       $08
000B60F0 E701                       	dc.b	smpsNoAttack, $01
000B60F2 E10E                       	smpsAlterNote       $0E
000B60F4 E701                       	dc.b	smpsNoAttack, $01
000B60F6 E10F                       	smpsAlterNote       $0F
000B60F8 E701                       	dc.b	smpsNoAttack, $01
000B60FA E10B                       	smpsAlterNote       $0B
000B60FC E701                       	dc.b	smpsNoAttack, $01
000B60FE E105                       	smpsAlterNote       $05
000B6100 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6104 E108                       	smpsAlterNote       $08
000B6106 E701                       	dc.b	smpsNoAttack, $01
000B6108 E10E                       	smpsAlterNote       $0E
000B610A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B610E E108                       	smpsAlterNote       $08
000B6110 E701                       	dc.b	smpsNoAttack, $01
000B6112 E105                       	smpsAlterNote       $05
000B6114 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6118 E10B                       	smpsAlterNote       $0B
000B611A E701                       	dc.b	smpsNoAttack, $01
000B611C E10F                       	smpsAlterNote       $0F
000B611E E701                       	dc.b	smpsNoAttack, $01
000B6120 E10E                       	smpsAlterNote       $0E
000B6122 E701                       	dc.b	smpsNoAttack, $01
000B6124 E108                       	smpsAlterNote       $08
000B6126 E701                       	dc.b	smpsNoAttack, $01
000B6128 E104                       	smpsAlterNote       $04
000B612A E701                       	dc.b	smpsNoAttack, $01
000B612C E108                       	smpsAlterNote       $08
000B612E E701                       	dc.b	smpsNoAttack, $01
000B6130 E10E                       	smpsAlterNote       $0E
000B6132 E701                       	dc.b	smpsNoAttack, $01
000B6134 E10F                       	smpsAlterNote       $0F
000B6136 E701                       	dc.b	smpsNoAttack, $01
000B6138 E10B                       	smpsAlterNote       $0B
000B613A E701                       	dc.b	smpsNoAttack, $01
000B613C E105                       	smpsAlterNote       $05
000B613E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6142 E108                       	smpsAlterNote       $08
000B6144 E701                       	dc.b	smpsNoAttack, $01
000B6146 E10E                       	smpsAlterNote       $0E
000B6148 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B614C E108                       	smpsAlterNote       $08
000B614E E701                       	dc.b	smpsNoAttack, $01
000B6150 E105                       	smpsAlterNote       $05
000B6152 E701                       	dc.b	smpsNoAttack, $01
000B6154 E10B                       	smpsAlterNote       $0B
000B6156 C60D                       	dc.b	nA5, $0D
000B6158 E108                       	smpsAlterNote       $08
000B615A E701                       	dc.b	smpsNoAttack, $01
000B615C E104                       	smpsAlterNote       $04
000B615E E701                       	dc.b	smpsNoAttack, $01
000B6160 E105                       	smpsAlterNote       $05
000B6162 E701                       	dc.b	smpsNoAttack, $01
000B6164 E10B                       	smpsAlterNote       $0B
000B6166 E701                       	dc.b	smpsNoAttack, $01
000B6168 E10F                       	smpsAlterNote       $0F
000B616A E701                       	dc.b	smpsNoAttack, $01
000B616C E10B                       	smpsAlterNote       $0B
000B616E E701                       	dc.b	smpsNoAttack, $01
000B6170 E108                       	smpsAlterNote       $08
000B6172 E701                       	dc.b	smpsNoAttack, $01
000B6174 E104                       	smpsAlterNote       $04
000B6176 E701                       	dc.b	smpsNoAttack, $01
000B6178 E108                       	smpsAlterNote       $08
000B617A E701                       	dc.b	smpsNoAttack, $01
000B617C E10E                       	smpsAlterNote       $0E
000B617E E701                       	dc.b	smpsNoAttack, $01
000B6180 E10F                       	smpsAlterNote       $0F
000B6182 E701                       	dc.b	smpsNoAttack, $01
000B6186 E109                       	smpsAlterNote       $09
000B6188 E6FF                       	smpsAlterVol        $FF
000B618A C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
000B6194 E108                       	smpsAlterNote       $08
000B6196 C103 800E                  	dc.b	nE5, $03, nRst, $0E
000B619C E107                       	smpsAlterNote       $07
000B619E E601                       	smpsAlterVol        $01
000B61A0 BF03                       	dc.b	nD5, $03
000B61A2 E108                       	smpsAlterNote       $08
000B61A4 C103 8001                  	dc.b	nE5, $03, nRst, $01
000B61A8 E109                       	smpsAlterNote       $09
000B61AA C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000B61B0 E10B                       	smpsAlterNote       $0B
000B61B2 C606 8001                  	dc.b	nA5, $06, nRst, $01
000B61B6 E107                       	smpsAlterNote       $07
000B61B8 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000B61BC E106                       	smpsAlterNote       $06
000B61BE C90D                       	dc.b	nC6, $0D
000B61C0 E103                       	smpsAlterNote       $03
000B61C2 E701                       	dc.b	smpsNoAttack, $01
000B61C4 E1FF                       	smpsAlterNote       $FF
000B61C6 E701                       	dc.b	smpsNoAttack, $01
000B61C8 E103                       	smpsAlterNote       $03
000B61CA E701                       	dc.b	smpsNoAttack, $01
000B61CC E109                       	smpsAlterNote       $09
000B61CE E701                       	dc.b	smpsNoAttack, $01
000B61D0 E10A                       	smpsAlterNote       $0A
000B61D2 E701                       	dc.b	smpsNoAttack, $01
000B61D4 E106                       	smpsAlterNote       $06
000B61D6 E701                       	dc.b	smpsNoAttack, $01
000B61D8 E100                       	smpsAlterNote       $00
000B61DA E701                       	dc.b	smpsNoAttack, $01
000B61DC E10C                       	smpsAlterNote       $0C
000B61DE C703 8001                  	dc.b	nBb5, $03, nRst, $01
000B61E2 E10B                       	smpsAlterNote       $0B
000B61E4 C603                       	dc.b	nA5, $03
000B61E6 E109                       	smpsAlterNote       $09
000B61E8 C403 8001                  	dc.b	nG5, $03, nRst, $01
000B61EC E10B                       	smpsAlterNote       $0B
000B61EE C60D                       	dc.b	nA5, $0D
000B61F0 E105                       	smpsAlterNote       $05
000B61F2 E701                       	dc.b	smpsNoAttack, $01
000B61F4 E104                       	smpsAlterNote       $04
000B61F6 E701                       	dc.b	smpsNoAttack, $01
000B61F8 E108                       	smpsAlterNote       $08
000B61FA E701                       	dc.b	smpsNoAttack, $01
000B61FC E10E                       	smpsAlterNote       $0E
000B61FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6202 E10B                       	smpsAlterNote       $0B
000B6204 E701                       	dc.b	smpsNoAttack, $01
000B6206 E105                       	smpsAlterNote       $05
000B6208 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B620C E10B                       	smpsAlterNote       $0B
000B620E E701                       	dc.b	smpsNoAttack, $01
000B6210 E10E                       	smpsAlterNote       $0E
000B6212 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6216 E108                       	smpsAlterNote       $08
000B6218 E701                       	dc.b	smpsNoAttack, $01
000B621A E104                       	smpsAlterNote       $04
000B621C E701                       	dc.b	smpsNoAttack, $01
000B621E E105                       	smpsAlterNote       $05
000B6220 E701                       	dc.b	smpsNoAttack, $01
000B6222 E10B                       	smpsAlterNote       $0B
000B6224 E701                       	dc.b	smpsNoAttack, $01
000B6226 E10F                       	smpsAlterNote       $0F
000B6228 E701                       	dc.b	smpsNoAttack, $01
000B622A E10B                       	smpsAlterNote       $0B
000B622C E701                       	dc.b	smpsNoAttack, $01
000B622E E108                       	smpsAlterNote       $08
000B6230 E701                       	dc.b	smpsNoAttack, $01
000B6232 E104                       	smpsAlterNote       $04
000B6234 E701                       	dc.b	smpsNoAttack, $01
000B6236 E108                       	smpsAlterNote       $08
000B6238 E701                       	dc.b	smpsNoAttack, $01
000B623A E10E                       	smpsAlterNote       $0E
000B623C E701                       	dc.b	smpsNoAttack, $01
000B623E E10F                       	smpsAlterNote       $0F
000B6240 E701                       	dc.b	smpsNoAttack, $01
000B6242 E10B                       	smpsAlterNote       $0B
000B6244 E701                       	dc.b	smpsNoAttack, $01
000B6246 E105                       	smpsAlterNote       $05
000B6248 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B624C E108                       	smpsAlterNote       $08
000B624E E701                       	dc.b	smpsNoAttack, $01
000B6250 E10E                       	smpsAlterNote       $0E
000B6252 E701                       	dc.b	smpsNoAttack, $01
000B6254 E10F                       	smpsAlterNote       $0F
000B6256 800F                       	dc.b	nRst, $0F
000B6258 E107                       	smpsAlterNote       $07
000B625A BF02 8001                  	dc.b	nD5, $02, nRst, $01
000B625E E108                       	smpsAlterNote       $08
000B6260 C103                       	dc.b	nE5, $03
000B6262 E109                       	smpsAlterNote       $09
000B6264 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000B626A E10B                       	smpsAlterNote       $0B
000B626C C606 8001                  	dc.b	nA5, $06, nRst, $01
000B6270 E107                       	smpsAlterNote       $07
000B6272 BF03                       	dc.b	nD5, $03
000B6274 E106                       	smpsAlterNote       $06
000B6276 C90E                       	dc.b	nC6, $0E
000B6278 E107                       	smpsAlterNote       $07
000B627A CB03 8001                  	dc.b	nD6, $03, nRst, $01
000B627E E10C                       	smpsAlterNote       $0C
000B6280 C704                       	dc.b	nBb5, $04
000B6282 E10B                       	smpsAlterNote       $0B
000B6284 C604 8001                  	dc.b	nA5, $04, nRst, $01
000B6288 E109                       	smpsAlterNote       $09
000B628A C404                       	dc.b	nG5, $04
000B628C E10B                       	smpsAlterNote       $0B
000B628E C60D                       	dc.b	nA5, $0D
000B6290 E108                       	smpsAlterNote       $08
000B6292 E701                       	dc.b	smpsNoAttack, $01
000B6294 E105                       	smpsAlterNote       $05
000B6296 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B629A E10B                       	smpsAlterNote       $0B
000B629C E701                       	dc.b	smpsNoAttack, $01
000B629E E10F                       	smpsAlterNote       $0F
000B62A0 E701                       	dc.b	smpsNoAttack, $01
000B62A2 E10E                       	smpsAlterNote       $0E
000B62A4 E701                       	dc.b	smpsNoAttack, $01
000B62A6 E108                       	smpsAlterNote       $08
000B62A8 E701                       	dc.b	smpsNoAttack, $01
000B62AA E104                       	smpsAlterNote       $04
000B62AC E701                       	dc.b	smpsNoAttack, $01
000B62AE E108                       	smpsAlterNote       $08
000B62B0 E701                       	dc.b	smpsNoAttack, $01
000B62B2 E10B                       	smpsAlterNote       $0B
000B62B4 E701                       	dc.b	smpsNoAttack, $01
000B62B6 E10F                       	smpsAlterNote       $0F
000B62B8 E701                       	dc.b	smpsNoAttack, $01
000B62BA E10B                       	smpsAlterNote       $0B
000B62BC E701                       	dc.b	smpsNoAttack, $01
000B62BE E105                       	smpsAlterNote       $05
000B62C0 E701                       	dc.b	smpsNoAttack, $01
000B62C2 E104                       	smpsAlterNote       $04
000B62C4 E701                       	dc.b	smpsNoAttack, $01
000B62C6 E108                       	smpsAlterNote       $08
000B62C8 E701                       	dc.b	smpsNoAttack, $01
000B62CA E10E                       	smpsAlterNote       $0E
000B62CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B62D0 E10B                       	smpsAlterNote       $0B
000B62D2 E701                       	dc.b	smpsNoAttack, $01
000B62D4 E105                       	smpsAlterNote       $05
000B62D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B62DA E10B                       	smpsAlterNote       $0B
000B62DC E701                       	dc.b	smpsNoAttack, $01
000B62DE E10E                       	smpsAlterNote       $0E
000B62E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B62E4 E108                       	smpsAlterNote       $08
000B62E6 E701                       	dc.b	smpsNoAttack, $01
000B62E8 E105                       	smpsAlterNote       $05
000B62EA 8001                       	dc.b	nRst, $01
000B62EC E109                       	smpsAlterNote       $09
000B62EE C402                       	dc.b	nG5, $02
000B62F0 E10B                       	smpsAlterNote       $0B
000B62F2 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000B62FB E109                       	smpsAlterNote       $09
000B62FD C404                       	dc.b	nG5, $04
000B62FF E10B                       	smpsAlterNote       $0B
000B6301 C604 8001                  	dc.b	nA5, $04, nRst, $01
000B6305 E107                       	smpsAlterNote       $07
000B6307 BF0D                       	dc.b	nD5, $0D
000B6309 E101                       	smpsAlterNote       $01
000B630B E701                       	dc.b	smpsNoAttack, $01
000B630D E100                       	smpsAlterNote       $00
000B630F E701                       	dc.b	smpsNoAttack, $01
000B6311 E104                       	smpsAlterNote       $04
000B6313 E701                       	dc.b	smpsNoAttack, $01
000B6315 E10A                       	smpsAlterNote       $0A
000B6317 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B631B E107                       	smpsAlterNote       $07
000B631D E701                       	dc.b	smpsNoAttack, $01
000B631F E101                       	smpsAlterNote       $01
000B6321 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6325 E107                       	smpsAlterNote       $07
000B6327 E701                       	dc.b	smpsNoAttack, $01
000B6329 E10A                       	smpsAlterNote       $0A
000B632B E701                       	dc.b	smpsNoAttack, $01
000B632D E10B                       	smpsAlterNote       $0B
000B632F 8001                       	dc.b	nRst, $01
000B6331 E108                       	smpsAlterNote       $08
000B6333 C101                       	dc.b	nE5, $01
000B6335 E109                       	smpsAlterNote       $09
000B6337 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000B633C E10B                       	smpsAlterNote       $0B
000B633E C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000B6346 E108                       	smpsAlterNote       $08
000B6348 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000B634C E109                       	smpsAlterNote       $09
000B634E CE06 8001                  	dc.b	nF6, $06, nRst, $01
000B6352 E108                       	smpsAlterNote       $08
000B6354 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000B6358 E106                       	smpsAlterNote       $06
000B635A C903                       	dc.b	nC6, $03
000B635C E109                       	smpsAlterNote       $09
000B635E C403 8001                  	dc.b	nG5, $03, nRst, $01
000B6362 E10C                       	smpsAlterNote       $0C
000B6364 C70D                       	dc.b	nBb5, $0D
000B6366 E109                       	smpsAlterNote       $09
000B6368 E701                       	dc.b	smpsNoAttack, $01
000B636A E105                       	smpsAlterNote       $05
000B636C E701                       	dc.b	smpsNoAttack, $01
000B636E E109                       	smpsAlterNote       $09
000B6370 E701                       	dc.b	smpsNoAttack, $01
000B6372 E10F                       	smpsAlterNote       $0F
000B6374 E701                       	dc.b	smpsNoAttack, $01
000B6376 E110                       	smpsAlterNote       $10
000B6378 E701                       	dc.b	smpsNoAttack, $01
000B637A E10C                       	smpsAlterNote       $0C
000B637C E701                       	dc.b	smpsNoAttack, $01
000B637E E106                       	smpsAlterNote       $06
000B6380 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6384 E109                       	smpsAlterNote       $09
000B6386 E701                       	dc.b	smpsNoAttack, $01
000B6388 E10F                       	smpsAlterNote       $0F
000B638A E701                       	dc.b	smpsNoAttack, $01
000B638C E110                       	smpsAlterNote       $10
000B638E 8001                       	dc.b	nRst, $01
000B6390 E10B                       	smpsAlterNote       $0B
000B6392 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
000B6398 E105                       	smpsAlterNote       $05
000B639A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B639E E108                       	smpsAlterNote       $08
000B63A0 E701                       	dc.b	smpsNoAttack, $01
000B63A2 E10E                       	smpsAlterNote       $0E
000B63A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B63A8 E108                       	smpsAlterNote       $08
000B63AA E701                       	dc.b	smpsNoAttack, $01
000B63AC E105                       	smpsAlterNote       $05
000B63AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B63B2 E10B                       	smpsAlterNote       $0B
000B63B4 E701                       	dc.b	smpsNoAttack, $01
000B63B6 E10F                       	smpsAlterNote       $0F
000B63B8 E701                       	dc.b	smpsNoAttack, $01
000B63BA E10E                       	smpsAlterNote       $0E
000B63BC E701                       	dc.b	smpsNoAttack, $01
000B63BE E108                       	smpsAlterNote       $08
000B63C0 E701                       	dc.b	smpsNoAttack, $01
000B63C2 E104                       	smpsAlterNote       $04
000B63C4 E701                       	dc.b	smpsNoAttack, $01
000B63C6 E108                       	smpsAlterNote       $08
000B63C8 E701                       	dc.b	smpsNoAttack, $01
000B63CA E10B                       	smpsAlterNote       $0B
000B63CC E701                       	dc.b	smpsNoAttack, $01
000B63CE E10F                       	smpsAlterNote       $0F
000B63D0 E701                       	dc.b	smpsNoAttack, $01
000B63D2 E10B                       	smpsAlterNote       $0B
000B63D4 E701                       	dc.b	smpsNoAttack, $01
000B63D6 E105                       	smpsAlterNote       $05
000B63D8 E701                       	dc.b	smpsNoAttack, $01
000B63DA E104                       	smpsAlterNote       $04
000B63DC E701                       	dc.b	smpsNoAttack, $01
000B63DE E108                       	smpsAlterNote       $08
000B63E0 E701                       	dc.b	smpsNoAttack, $01
000B63E2 E10E                       	smpsAlterNote       $0E
000B63E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B63E8 E10B                       	smpsAlterNote       $0B
000B63EA E701                       	dc.b	smpsNoAttack, $01
000B63EC E105                       	smpsAlterNote       $05
000B63EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B63F2 E10B                       	smpsAlterNote       $0B
000B63F4 E701                       	dc.b	smpsNoAttack, $01
000B63F6 E10E                       	smpsAlterNote       $0E
000B63F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B63FC E108                       	smpsAlterNote       $08
000B63FE E701                       	dc.b	smpsNoAttack, $01
000B6400 E104                       	smpsAlterNote       $04
000B6402 E701                       	dc.b	smpsNoAttack, $01
000B6404 E105                       	smpsAlterNote       $05
000B6406 E701                       	dc.b	smpsNoAttack, $01
000B6408 E10B                       	smpsAlterNote       $0B
000B640A E701                       	dc.b	smpsNoAttack, $01
000B640C E10F                       	smpsAlterNote       $0F
000B640E E701                       	dc.b	smpsNoAttack, $01
000B6410 E10B                       	smpsAlterNote       $0B
000B6412 E701                       	dc.b	smpsNoAttack, $01
000B6414 E108                       	smpsAlterNote       $08
000B6416 E701                       	dc.b	smpsNoAttack, $01
000B6418 E104                       	smpsAlterNote       $04
000B641A E701                       	dc.b	smpsNoAttack, $01
000B641C E108                       	smpsAlterNote       $08
000B641E E701                       	dc.b	smpsNoAttack, $01
000B6420 E10E                       	smpsAlterNote       $0E
000B6422 E701                       	dc.b	smpsNoAttack, $01
000B6424 E10F                       	smpsAlterNote       $0F
000B6426 E701                       	dc.b	smpsNoAttack, $01
000B6428 E10B                       	smpsAlterNote       $0B
000B642A E701                       	dc.b	smpsNoAttack, $01
000B642C E105                       	smpsAlterNote       $05
000B642E E701                       	dc.b	smpsNoAttack, $01
000B6430 E10B                       	smpsAlterNote       $0B
000B6432 C60E                       	dc.b	nA5, $0E
000B6434 E105                       	smpsAlterNote       $05
000B6436 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B643A E10B                       	smpsAlterNote       $0B
000B643C E701                       	dc.b	smpsNoAttack, $01
000B643E E10E                       	smpsAlterNote       $0E
000B6440 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6444 E108                       	smpsAlterNote       $08
000B6446 E701                       	dc.b	smpsNoAttack, $01
000B6448 E104                       	smpsAlterNote       $04
000B644A E701                       	dc.b	smpsNoAttack, $01
000B644C E105                       	smpsAlterNote       $05
000B644E E701                       	dc.b	smpsNoAttack, $01
000B6450 E10B                       	smpsAlterNote       $0B
000B6452 E701                       	dc.b	smpsNoAttack, $01
000B6454 E10F                       	smpsAlterNote       $0F
000B6456 E701                       	dc.b	smpsNoAttack, $01
000B6458 E10B                       	smpsAlterNote       $0B
000B645A E701                       	dc.b	smpsNoAttack, $01
000B645C E108                       	smpsAlterNote       $08
000B645E E701                       	dc.b	smpsNoAttack, $01
000B6460 E104                       	smpsAlterNote       $04
000B6462 E701                       	dc.b	smpsNoAttack, $01
000B6464 E108                       	smpsAlterNote       $08
000B6466 E701                       	dc.b	smpsNoAttack, $01
000B6468 E10E                       	smpsAlterNote       $0E
000B646A E701                       	dc.b	smpsNoAttack, $01
000B646C E10F                       	smpsAlterNote       $0F
000B646E E701                       	dc.b	smpsNoAttack, $01
000B6470 E10B                       	smpsAlterNote       $0B
000B6472 E701                       	dc.b	smpsNoAttack, $01
000B6474 E105                       	smpsAlterNote       $05
000B6476 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B647A E108                       	smpsAlterNote       $08
000B647C E701                       	dc.b	smpsNoAttack, $01
000B647E E10E                       	smpsAlterNote       $0E
000B6480 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6484 E108                       	smpsAlterNote       $08
000B6486 E701                       	dc.b	smpsNoAttack, $01
000B6488 E105                       	smpsAlterNote       $05
000B648A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B648E E10B                       	smpsAlterNote       $0B
000B6490 E701                       	dc.b	smpsNoAttack, $01
000B6492 E10F                       	smpsAlterNote       $0F
000B6494 E701                       	dc.b	smpsNoAttack, $01
000B6496 E10E                       	smpsAlterNote       $0E
000B6498 E701                       	dc.b	smpsNoAttack, $01
000B649A E108                       	smpsAlterNote       $08
000B649C E701                       	dc.b	smpsNoAttack, $01
000B649E E104                       	smpsAlterNote       $04
000B64A0 E701                       	dc.b	smpsNoAttack, $01
000B64A2 E108                       	smpsAlterNote       $08
000B64A4 E701                       	dc.b	smpsNoAttack, $01
000B64A6 E10E                       	smpsAlterNote       $0E
000B64A8 E701                       	dc.b	smpsNoAttack, $01
000B64AA E10F                       	smpsAlterNote       $0F
000B64AC E701                       	dc.b	smpsNoAttack, $01
000B64AE E10B                       	smpsAlterNote       $0B
000B64B0 E701                       	dc.b	smpsNoAttack, $01
000B64B2 E105                       	smpsAlterNote       $05
000B64B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B64B8 E108                       	smpsAlterNote       $08
000B64BA E701                       	dc.b	smpsNoAttack, $01
000B64BC E10E                       	smpsAlterNote       $0E
000B64BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B64C2 E108                       	smpsAlterNote       $08
000B64C4 E701                       	dc.b	smpsNoAttack, $01
000B64C6 E105                       	smpsAlterNote       $05
000B64C8 E701                       	dc.b	smpsNoAttack, $01
000B64CC E10B                       	smpsAlterNote       $0B
000B64CE E6FD                       	smpsAlterVol        $FD
000B64D0 C604 8001                  	dc.b	nA5, $04, nRst, $01
000B64D4 E109                       	smpsAlterNote       $09
000B64D6 C404                       	dc.b	nG5, $04
000B64D8 E10B                       	smpsAlterNote       $0B
000B64DA C604 8001                  	dc.b	nA5, $04, nRst, $01
000B64DE E107                       	smpsAlterNote       $07
000B64E0 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000B64E6 E10B                       	smpsAlterNote       $0B
000B64E8 C604                       	dc.b	nA5, $04
000B64EA E109                       	smpsAlterNote       $09
000B64EC C404 8001                  	dc.b	nG5, $04, nRst, $01
000B64F0 E10B                       	smpsAlterNote       $0B
000B64F2 C604                       	dc.b	nA5, $04
000B64F4 E108                       	smpsAlterNote       $08
000B64F6 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
000B64FE E106                       	smpsAlterNote       $06
000B6500 C904 8001                  	dc.b	nC6, $04, nRst, $01
000B6504 E10C                       	smpsAlterNote       $0C
000B6506 C704                       	dc.b	nBb5, $04
000B6508 E10B                       	smpsAlterNote       $0B
000B650A C604 8001                  	dc.b	nA5, $04, nRst, $01
000B650E E109                       	smpsAlterNote       $09
000B6510 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000B651A E10B                       	smpsAlterNote       $0B
000B651C C60D                       	dc.b	nA5, $0D
000B651E E108                       	smpsAlterNote       $08
000B6520 E701                       	dc.b	smpsNoAttack, $01
000B6522 E104                       	smpsAlterNote       $04
000B6524 E701                       	dc.b	smpsNoAttack, $01
000B6526 E108                       	smpsAlterNote       $08
000B6528 E701                       	dc.b	smpsNoAttack, $01
000B652A E10E                       	smpsAlterNote       $0E
000B652C E701                       	dc.b	smpsNoAttack, $01
000B652E E10F                       	smpsAlterNote       $0F
000B6530 E701                       	dc.b	smpsNoAttack, $01
000B6532 E10B                       	smpsAlterNote       $0B
000B6534 E701                       	dc.b	smpsNoAttack, $01
000B6536 E105                       	smpsAlterNote       $05
000B6538 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B653C E108                       	smpsAlterNote       $08
000B653E E701                       	dc.b	smpsNoAttack, $01
000B6540 E10E                       	smpsAlterNote       $0E
000B6542 E701                       	dc.b	smpsNoAttack, $01
000B6544 E10F                       	smpsAlterNote       $0F
000B6546 8001                       	dc.b	nRst, $01
000B6548 E109                       	smpsAlterNote       $09
000B654A C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000B6550 E108                       	smpsAlterNote       $08
000B6552 C10D                       	dc.b	nE5, $0D
000B6554 E102                       	smpsAlterNote       $02
000B6556 E701                       	dc.b	smpsNoAttack, $01
000B6558 E101                       	smpsAlterNote       $01
000B655A E701                       	dc.b	smpsNoAttack, $01
000B655C E105                       	smpsAlterNote       $05
000B655E E701                       	dc.b	smpsNoAttack, $01
000B6560 E10B                       	smpsAlterNote       $0B
000B6562 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6566 E108                       	smpsAlterNote       $08
000B6568 E701                       	dc.b	smpsNoAttack, $01
000B656A E102                       	smpsAlterNote       $02
000B656C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6570 E108                       	smpsAlterNote       $08
000B6572 E701                       	dc.b	smpsNoAttack, $01
000B6574 E10B                       	smpsAlterNote       $0B
000B6576 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B657A E105                       	smpsAlterNote       $05
000B657C E701                       	dc.b	smpsNoAttack, $01
000B657E E101                       	smpsAlterNote       $01
000B6580 E701                       	dc.b	smpsNoAttack, $01
000B6582 E102                       	smpsAlterNote       $02
000B6584 E701                       	dc.b	smpsNoAttack, $01
000B6586 E108                       	smpsAlterNote       $08
000B6588 E701                       	dc.b	smpsNoAttack, $01
000B658A E10C                       	smpsAlterNote       $0C
000B658C E701                       	dc.b	smpsNoAttack, $01
000B658E E108                       	smpsAlterNote       $08
000B6590 E701                       	dc.b	smpsNoAttack, $01
000B6592 E105                       	smpsAlterNote       $05
000B6594 E701                       	dc.b	smpsNoAttack, $01
000B6596 E101                       	smpsAlterNote       $01
000B6598 E701                       	dc.b	smpsNoAttack, $01
000B659A E105                       	smpsAlterNote       $05
000B659C E701                       	dc.b	smpsNoAttack, $01
000B659E E10B                       	smpsAlterNote       $0B
000B65A0 E701                       	dc.b	smpsNoAttack, $01
000B65A2 E10C                       	smpsAlterNote       $0C
000B65A4 E701                       	dc.b	smpsNoAttack, $01
000B65A6 E108                       	smpsAlterNote       $08
000B65A8 E701                       	dc.b	smpsNoAttack, $01
000B65AA E102                       	smpsAlterNote       $02
000B65AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B65B0 E105                       	smpsAlterNote       $05
000B65B2 E701                       	dc.b	smpsNoAttack, $01
000B65B4 E10B                       	smpsAlterNote       $0B
000B65B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B65BA E105                       	smpsAlterNote       $05
000B65BC E701                       	dc.b	smpsNoAttack, $01
000B65BE E102                       	smpsAlterNote       $02
000B65C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B65C4 E108                       	smpsAlterNote       $08
000B65C6 E701                       	dc.b	smpsNoAttack, $01
000B65C8 E10C                       	smpsAlterNote       $0C
000B65CA E701                       	dc.b	smpsNoAttack, $01
000B65CC E10B                       	smpsAlterNote       $0B
000B65CE E701                       	dc.b	smpsNoAttack, $01
000B65D0 E105                       	smpsAlterNote       $05
000B65D2 E701                       	dc.b	smpsNoAttack, $01
000B65D4 E101                       	smpsAlterNote       $01
000B65D6 E701                       	dc.b	smpsNoAttack, $01
000B65D8 E105                       	smpsAlterNote       $05
000B65DA E701                       	dc.b	smpsNoAttack, $01
000B65DC E108                       	smpsAlterNote       $08
000B65DE E701                       	dc.b	smpsNoAttack, $01
000B65E0 E10C                       	smpsAlterNote       $0C
000B65E2 E701                       	dc.b	smpsNoAttack, $01
000B65E4 E108                       	smpsAlterNote       $08
000B65E6 E701                       	dc.b	smpsNoAttack, $01
000B65E8 E102                       	smpsAlterNote       $02
000B65EA E701                       	dc.b	smpsNoAttack, $01
000B65EC E101                       	smpsAlterNote       $01
000B65EE E701                       	dc.b	smpsNoAttack, $01
000B65F0 E105                       	smpsAlterNote       $05
000B65F2 E701                       	dc.b	smpsNoAttack, $01
000B65F4 E10B                       	smpsAlterNote       $0B
000B65F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B65FA E108                       	smpsAlterNote       $08
000B65FC E701                       	dc.b	smpsNoAttack, $01
000B65FE E102                       	smpsAlterNote       $02
000B6600 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6604 E108                       	smpsAlterNote       $08
000B6606 E701                       	dc.b	smpsNoAttack, $01
000B6608 E10B                       	smpsAlterNote       $0B
000B660A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B660E E105                       	smpsAlterNote       $05
000B6610 E701                       	dc.b	smpsNoAttack, $01
000B6612 E101                       	smpsAlterNote       $01
000B6614 E701                       	dc.b	smpsNoAttack, $01
000B6616 E102                       	smpsAlterNote       $02
000B6618 E701                       	dc.b	smpsNoAttack, $01
000B661A E108                       	smpsAlterNote       $08
000B661C E701                       	dc.b	smpsNoAttack, $01
000B661E E10C                       	smpsAlterNote       $0C
000B6620 E701                       	dc.b	smpsNoAttack, $01
000B6622 E108                       	smpsAlterNote       $08
000B6624 E701                       	dc.b	smpsNoAttack, $01
000B6626 E105                       	smpsAlterNote       $05
000B6628 E701                       	dc.b	smpsNoAttack, $01
000B662A E101                       	smpsAlterNote       $01
000B662C E701                       	dc.b	smpsNoAttack, $01
000B662E E105                       	smpsAlterNote       $05
000B6630 E701                       	dc.b	smpsNoAttack, $01
000B6632 E10B                       	smpsAlterNote       $0B
000B6634 E701                       	dc.b	smpsNoAttack, $01
000B6636 E10C                       	smpsAlterNote       $0C
000B6638 E701                       	dc.b	smpsNoAttack, $01
000B663A E108                       	smpsAlterNote       $08
000B663C E701                       	dc.b	smpsNoAttack, $01
000B663E E102                       	smpsAlterNote       $02
000B6640 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6644 E105                       	smpsAlterNote       $05
000B6646 E701                       	dc.b	smpsNoAttack, $01
000B6648 E10B                       	smpsAlterNote       $0B
000B664A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B664E E105                       	smpsAlterNote       $05
000B6650 E701                       	dc.b	smpsNoAttack, $01
000B6652 E101                       	smpsAlterNote       $01
000B6654 E701                       	dc.b	smpsNoAttack, $01
000B6656 E102                       	smpsAlterNote       $02
000B6658 E701                       	dc.b	smpsNoAttack, $01
000B665A E108                       	smpsAlterNote       $08
000B665C E701                       	dc.b	smpsNoAttack, $01
000B665E E10C                       	smpsAlterNote       $0C
000B6660 E701                       	dc.b	smpsNoAttack, $01
000B6662 E108                       	smpsAlterNote       $08
000B6664 E701                       	dc.b	smpsNoAttack, $01
000B6666 E105                       	smpsAlterNote       $05
000B6668 E701                       	dc.b	smpsNoAttack, $01
000B666A E101                       	smpsAlterNote       $01
000B666C E701                       	dc.b	smpsNoAttack, $01
000B666E E105                       	smpsAlterNote       $05
000B6670 E701                       	dc.b	smpsNoAttack, $01
000B6672 E10B                       	smpsAlterNote       $0B
000B6674 E701                       	dc.b	smpsNoAttack, $01
000B6676 E10C                       	smpsAlterNote       $0C
000B6678 E701                       	dc.b	smpsNoAttack, $01
000B667A E108                       	smpsAlterNote       $08
000B667C E701                       	dc.b	smpsNoAttack, $01
000B667E E102                       	smpsAlterNote       $02
000B6680 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6684 E105                       	smpsAlterNote       $05
000B6686 E701                       	dc.b	smpsNoAttack, $01
000B6688 E10B                       	smpsAlterNote       $0B
000B668A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B668E E105                       	smpsAlterNote       $05
000B6690 E701                       	dc.b	smpsNoAttack, $01
000B6692 E102                       	smpsAlterNote       $02
000B6694 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6698 E108                       	smpsAlterNote       $08
000B669A E701                       	dc.b	smpsNoAttack, $01
000B669C E10C                       	smpsAlterNote       $0C
000B669E E701                       	dc.b	smpsNoAttack, $01
000B66A0 E10B                       	smpsAlterNote       $0B
000B66A2 E701                       	dc.b	smpsNoAttack, $01
000B66A4 E105                       	smpsAlterNote       $05
000B66A6 E701                       	dc.b	smpsNoAttack, $01
000B66A8 E101                       	smpsAlterNote       $01
000B66AA E701                       	dc.b	smpsNoAttack, $01
000B66AC E105                       	smpsAlterNote       $05
000B66AE E701                       	dc.b	smpsNoAttack, $01
000B66B0 E108                       	smpsAlterNote       $08
000B66B2 E701                       	dc.b	smpsNoAttack, $01
000B66B4 E10C                       	smpsAlterNote       $0C
000B66B6 E701                       	dc.b	smpsNoAttack, $01
000B66BA E10B                       	smpsAlterNote       $0B
000B66BC C604 8001                  	dc.b	nA5, $04, nRst, $01
000B66C0 E109                       	smpsAlterNote       $09
000B66C2 C404                       	dc.b	nG5, $04
000B66C4 E10B                       	smpsAlterNote       $0B
000B66C6 C604 8001                  	dc.b	nA5, $04, nRst, $01
000B66CA E107                       	smpsAlterNote       $07
000B66CC BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000B66D2 E10B                       	smpsAlterNote       $0B
000B66D4 C604                       	dc.b	nA5, $04
000B66D6 E109                       	smpsAlterNote       $09
000B66D8 C404 8001                  	dc.b	nG5, $04, nRst, $01
000B66DC E10B                       	smpsAlterNote       $0B
000B66DE C604                       	dc.b	nA5, $04
000B66E0 E108                       	smpsAlterNote       $08
000B66E2 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
000B66E8 E106                       	smpsAlterNote       $06
000B66EA C904 8001                  	dc.b	nC6, $04, nRst, $01
000B66EE E10C                       	smpsAlterNote       $0C
000B66F0 C704                       	dc.b	nBb5, $04
000B66F2 E10B                       	smpsAlterNote       $0B
000B66F4 C604 8001                  	dc.b	nA5, $04, nRst, $01
000B66F8 E109                       	smpsAlterNote       $09
000B66FA C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000B6704 E10B                       	smpsAlterNote       $0B
000B6706 C60D                       	dc.b	nA5, $0D
000B6708 E108                       	smpsAlterNote       $08
000B670A E701                       	dc.b	smpsNoAttack, $01
000B670C E104                       	smpsAlterNote       $04
000B670E E701                       	dc.b	smpsNoAttack, $01
000B6710 E108                       	smpsAlterNote       $08
000B6712 E701                       	dc.b	smpsNoAttack, $01
000B6714 E10B                       	smpsAlterNote       $0B
000B6716 E701                       	dc.b	smpsNoAttack, $01
000B6718 E10F                       	smpsAlterNote       $0F
000B671A E701                       	dc.b	smpsNoAttack, $01
000B671C E10B                       	smpsAlterNote       $0B
000B671E E701                       	dc.b	smpsNoAttack, $01
000B6720 E105                       	smpsAlterNote       $05
000B6722 E701                       	dc.b	smpsNoAttack, $01
000B6724 E104                       	smpsAlterNote       $04
000B6726 E701                       	dc.b	smpsNoAttack, $01
000B6728 E108                       	smpsAlterNote       $08
000B672A E701                       	dc.b	smpsNoAttack, $01
000B672C E10E                       	smpsAlterNote       $0E
000B672E E701                       	dc.b	smpsNoAttack, $01
000B6730 E10F                       	smpsAlterNote       $0F
000B6732 8001                       	dc.b	nRst, $01
000B6734 E109                       	smpsAlterNote       $09
000B6736 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000B673C E108                       	smpsAlterNote       $08
000B673E C10D                       	dc.b	nE5, $0D
000B6740 E105                       	smpsAlterNote       $05
000B6742 E701                       	dc.b	smpsNoAttack, $01
000B6744 E101                       	smpsAlterNote       $01
000B6746 E701                       	dc.b	smpsNoAttack, $01
000B6748 E105                       	smpsAlterNote       $05
000B674A E701                       	dc.b	smpsNoAttack, $01
000B674C E10B                       	smpsAlterNote       $0B
000B674E E701                       	dc.b	smpsNoAttack, $01
000B6750 E10C                       	smpsAlterNote       $0C
000B6752 E701                       	dc.b	smpsNoAttack, $01
000B6754 E108                       	smpsAlterNote       $08
000B6756 E701                       	dc.b	smpsNoAttack, $01
000B6758 E102                       	smpsAlterNote       $02
000B675A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B675E E105                       	smpsAlterNote       $05
000B6760 E701                       	dc.b	smpsNoAttack, $01
000B6762 E10B                       	smpsAlterNote       $0B
000B6764 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6768 E105                       	smpsAlterNote       $05
000B676A E701                       	dc.b	smpsNoAttack, $01
000B676C E102                       	smpsAlterNote       $02
000B676E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6772 E108                       	smpsAlterNote       $08
000B6774 E701                       	dc.b	smpsNoAttack, $01
000B6776 E10C                       	smpsAlterNote       $0C
000B6778 E701                       	dc.b	smpsNoAttack, $01
000B677A E10B                       	smpsAlterNote       $0B
000B677C E701                       	dc.b	smpsNoAttack, $01
000B677E E105                       	smpsAlterNote       $05
000B6780 E701                       	dc.b	smpsNoAttack, $01
000B6782 E101                       	smpsAlterNote       $01
000B6784 E701                       	dc.b	smpsNoAttack, $01
000B6786 E105                       	smpsAlterNote       $05
000B6788 E701                       	dc.b	smpsNoAttack, $01
000B678A E108                       	smpsAlterNote       $08
000B678C E701                       	dc.b	smpsNoAttack, $01
000B678E E10C                       	smpsAlterNote       $0C
000B6790 E701                       	dc.b	smpsNoAttack, $01
000B6792 E108                       	smpsAlterNote       $08
000B6794 E701                       	dc.b	smpsNoAttack, $01
000B6796 E102                       	smpsAlterNote       $02
000B6798 E701                       	dc.b	smpsNoAttack, $01
000B679A E101                       	smpsAlterNote       $01
000B679C E701                       	dc.b	smpsNoAttack, $01
000B679E E105                       	smpsAlterNote       $05
000B67A0 E701                       	dc.b	smpsNoAttack, $01
000B67A2 E10B                       	smpsAlterNote       $0B
000B67A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B67A8 E108                       	smpsAlterNote       $08
000B67AA E701                       	dc.b	smpsNoAttack, $01
000B67AC E102                       	smpsAlterNote       $02
000B67AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B67B2 E108                       	smpsAlterNote       $08
000B67B4 E701                       	dc.b	smpsNoAttack, $01
000B67B6 E10B                       	smpsAlterNote       $0B
000B67B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B67BC E105                       	smpsAlterNote       $05
000B67BE E701                       	dc.b	smpsNoAttack, $01
000B67C0 E101                       	smpsAlterNote       $01
000B67C2 E701                       	dc.b	smpsNoAttack, $01
000B67C4 E102                       	smpsAlterNote       $02
000B67C6 E701                       	dc.b	smpsNoAttack, $01
000B67C8 E108                       	smpsAlterNote       $08
000B67CA E701                       	dc.b	smpsNoAttack, $01
000B67CC E10C                       	smpsAlterNote       $0C
000B67CE E701                       	dc.b	smpsNoAttack, $01
000B67D0 E108                       	smpsAlterNote       $08
000B67D2 E701                       	dc.b	smpsNoAttack, $01
000B67D4 E105                       	smpsAlterNote       $05
000B67D6 E701                       	dc.b	smpsNoAttack, $01
000B67D8 E101                       	smpsAlterNote       $01
000B67DA E701                       	dc.b	smpsNoAttack, $01
000B67DC E105                       	smpsAlterNote       $05
000B67DE E701                       	dc.b	smpsNoAttack, $01
000B67E0 E10B                       	smpsAlterNote       $0B
000B67E2 E701                       	dc.b	smpsNoAttack, $01
000B67E4 E10C                       	smpsAlterNote       $0C
000B67E6 E701                       	dc.b	smpsNoAttack, $01
000B67E8 E108                       	smpsAlterNote       $08
000B67EA E701                       	dc.b	smpsNoAttack, $01
000B67EC E102                       	smpsAlterNote       $02
000B67EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B67F2 E108                       	smpsAlterNote       $08
000B67F4 E701                       	dc.b	smpsNoAttack, $01
000B67F6 E10B                       	smpsAlterNote       $0B
000B67F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B67FC E105                       	smpsAlterNote       $05
000B67FE E701                       	dc.b	smpsNoAttack, $01
000B6800 E101                       	smpsAlterNote       $01
000B6802 E701                       	dc.b	smpsNoAttack, $01
000B6804 E102                       	smpsAlterNote       $02
000B6806 E701                       	dc.b	smpsNoAttack, $01
000B6808 E108                       	smpsAlterNote       $08
000B680A E701                       	dc.b	smpsNoAttack, $01
000B680C E10C                       	smpsAlterNote       $0C
000B680E E701                       	dc.b	smpsNoAttack, $01
000B6810 E108                       	smpsAlterNote       $08
000B6812 E701                       	dc.b	smpsNoAttack, $01
000B6814 E105                       	smpsAlterNote       $05
000B6816 E701                       	dc.b	smpsNoAttack, $01
000B6818 E101                       	smpsAlterNote       $01
000B681A E701                       	dc.b	smpsNoAttack, $01
000B681C E105                       	smpsAlterNote       $05
000B681E E701                       	dc.b	smpsNoAttack, $01
000B6820 E10B                       	smpsAlterNote       $0B
000B6822 E701                       	dc.b	smpsNoAttack, $01
000B6824 E10C                       	smpsAlterNote       $0C
000B6826 E701                       	dc.b	smpsNoAttack, $01
000B6828 E108                       	smpsAlterNote       $08
000B682A E701                       	dc.b	smpsNoAttack, $01
000B682C E102                       	smpsAlterNote       $02
000B682E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6832 E105                       	smpsAlterNote       $05
000B6834 E701                       	dc.b	smpsNoAttack, $01
000B6836 E10B                       	smpsAlterNote       $0B
000B6838 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B683C E105                       	smpsAlterNote       $05
000B683E E701                       	dc.b	smpsNoAttack, $01
000B6840 E102                       	smpsAlterNote       $02
000B6842 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6846 E108                       	smpsAlterNote       $08
000B6848 E701                       	dc.b	smpsNoAttack, $01
000B684A E10C                       	smpsAlterNote       $0C
000B684C E701                       	dc.b	smpsNoAttack, $01
000B684E E10B                       	smpsAlterNote       $0B
000B6850 E701                       	dc.b	smpsNoAttack, $01
000B6852 E105                       	smpsAlterNote       $05
000B6854 E701                       	dc.b	smpsNoAttack, $01
000B6856 E101                       	smpsAlterNote       $01
000B6858 E701                       	dc.b	smpsNoAttack, $01
000B685A E105                       	smpsAlterNote       $05
000B685C E701                       	dc.b	smpsNoAttack, $01
000B685E E108                       	smpsAlterNote       $08
000B6860 E701                       	dc.b	smpsNoAttack, $01
000B6862 E10C                       	smpsAlterNote       $0C
000B6864 E701                       	dc.b	smpsNoAttack, $01
000B6866 E108                       	smpsAlterNote       $08
000B6868 E701                       	dc.b	smpsNoAttack, $01
000B686A E102                       	smpsAlterNote       $02
000B686C E701                       	dc.b	smpsNoAttack, $01
000B686E E101                       	smpsAlterNote       $01
000B6870 E701                       	dc.b	smpsNoAttack, $01
000B6872 E105                       	smpsAlterNote       $05
000B6874 E701                       	dc.b	smpsNoAttack, $01
000B6876 E10B                       	smpsAlterNote       $0B
000B6878 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B687C E108                       	smpsAlterNote       $08
000B687E E701                       	dc.b	smpsNoAttack, $01
000B6880 E102                       	smpsAlterNote       $02
000B6882 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6886 E108                       	smpsAlterNote       $08
000B6888 E701                       	dc.b	smpsNoAttack, $01
000B688A E10B                       	smpsAlterNote       $0B
000B688C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6890 E105                       	smpsAlterNote       $05
000B6892 E701                       	dc.b	smpsNoAttack, $01
000B6894 E102                       	smpsAlterNote       $02
000B6896 8001                       	dc.b	nRst, $01
000B6898 E107                       	smpsAlterNote       $07
000B689A BF01 8001                  	dc.b	nD5, $01, nRst, $01
000B689E E108                       	smpsAlterNote       $08
000B68A0 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
000B68A4 E102                       	smpsAlterNote       $02
000B68A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B68AA E108                       	smpsAlterNote       $08
000B68AC E701                       	dc.b	smpsNoAttack, $01
000B68AE E10B                       	smpsAlterNote       $0B
000B68B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B68B4 E105                       	smpsAlterNote       $05
000B68B6 E701                       	dc.b	smpsNoAttack, $01
000B68B8 E101                       	smpsAlterNote       $01
000B68BA E701                       	dc.b	smpsNoAttack, $01
000B68BC E102                       	smpsAlterNote       $02
000B68BE E701                       	dc.b	smpsNoAttack, $01
000B68C0 E108                       	smpsAlterNote       $08
000B68C2 E701                       	dc.b	smpsNoAttack, $01
000B68C4 E10C                       	smpsAlterNote       $0C
000B68C6 E701                       	dc.b	smpsNoAttack, $01
000B68C8 E108                       	smpsAlterNote       $08
000B68CA E701                       	dc.b	smpsNoAttack, $01
000B68CC E105                       	smpsAlterNote       $05
000B68CE E701                       	dc.b	smpsNoAttack, $01
000B68D0 E101                       	smpsAlterNote       $01
000B68D2 E701                       	dc.b	smpsNoAttack, $01
000B68D4 E105                       	smpsAlterNote       $05
000B68D6 E701                       	dc.b	smpsNoAttack, $01
000B68D8 E10B                       	smpsAlterNote       $0B
000B68DA E701                       	dc.b	smpsNoAttack, $01
000B68DC E10C                       	smpsAlterNote       $0C
000B68DE E701                       	dc.b	smpsNoAttack, $01
000B68E0 E108                       	smpsAlterNote       $08
000B68E2 E701                       	dc.b	smpsNoAttack, $01
000B68E4 E102                       	smpsAlterNote       $02
000B68E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B68EA E105                       	smpsAlterNote       $05
000B68EC E701                       	dc.b	smpsNoAttack, $01
000B68EE E10B                       	smpsAlterNote       $0B
000B68F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B68F4 E105                       	smpsAlterNote       $05
000B68F6 E701                       	dc.b	smpsNoAttack, $01
000B68F8 E102                       	smpsAlterNote       $02
000B68FA E701                       	dc.b	smpsNoAttack, $01
000B68FC E109                       	smpsAlterNote       $09
000B68FE C40A C207                  	dc.b	nG5, $0A, nF5, $07
000B6902 E108                       	smpsAlterNote       $08
000B6904 C10D                       	dc.b	nE5, $0D
000B6906 E105                       	smpsAlterNote       $05
000B6908 E701                       	dc.b	smpsNoAttack, $01
000B690A E101                       	smpsAlterNote       $01
000B690C E701                       	dc.b	smpsNoAttack, $01
000B690E E102                       	smpsAlterNote       $02
000B6910 E701                       	dc.b	smpsNoAttack, $01
000B6912 E108                       	smpsAlterNote       $08
000B6914 E701                       	dc.b	smpsNoAttack, $01
000B6916 E10C                       	smpsAlterNote       $0C
000B6918 E701                       	dc.b	smpsNoAttack, $01
000B691A E108                       	smpsAlterNote       $08
000B691C E701                       	dc.b	smpsNoAttack, $01
000B691E E105                       	smpsAlterNote       $05
000B6920 E701                       	dc.b	smpsNoAttack, $01
000B6922 E101                       	smpsAlterNote       $01
000B6924 E701                       	dc.b	smpsNoAttack, $01
000B6926 E105                       	smpsAlterNote       $05
000B6928 E701                       	dc.b	smpsNoAttack, $01
000B692A E10B                       	smpsAlterNote       $0B
000B692C E701                       	dc.b	smpsNoAttack, $01
000B692E E10C                       	smpsAlterNote       $0C
000B6930 E701                       	dc.b	smpsNoAttack, $01
000B6932 E108                       	smpsAlterNote       $08
000B6934 E701                       	dc.b	smpsNoAttack, $01
000B6936 E102                       	smpsAlterNote       $02
000B6938 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
000B6940 E10B                       	smpsAlterNote       $0B
000B6942 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000B6946 E10C                       	smpsAlterNote       $0C
000B6948 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000B694C E10B                       	smpsAlterNote       $0B
000B694E BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
000B6954 E107                       	smpsAlterNote       $07
000B6956 BF03                       	dc.b	nD5, $03
000B6958 E108                       	smpsAlterNote       $08
000B695A C103 8001                  	dc.b	nE5, $03, nRst, $01
000B695E E109                       	smpsAlterNote       $09
000B6960 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000B6966 E10B                       	smpsAlterNote       $0B
000B6968 C606 8001                  	dc.b	nA5, $06, nRst, $01
000B696C E107                       	smpsAlterNote       $07
000B696E BF02 8001                  	dc.b	nD5, $02, nRst, $01
000B6972 E106                       	smpsAlterNote       $06
000B6974 C90D                       	dc.b	nC6, $0D
000B6976 E103                       	smpsAlterNote       $03
000B6978 E701                       	dc.b	smpsNoAttack, $01
000B697A E1FF                       	smpsAlterNote       $FF
000B697C E701                       	dc.b	smpsNoAttack, $01
000B697E E103                       	smpsAlterNote       $03
000B6980 E701                       	dc.b	smpsNoAttack, $01
000B6982 E109                       	smpsAlterNote       $09
000B6984 E701                       	dc.b	smpsNoAttack, $01
000B6986 E10A                       	smpsAlterNote       $0A
000B6988 E701                       	dc.b	smpsNoAttack, $01
000B698A E106                       	smpsAlterNote       $06
000B698C E701                       	dc.b	smpsNoAttack, $01
000B698E E100                       	smpsAlterNote       $00
000B6990 E701                       	dc.b	smpsNoAttack, $01
000B6992 E10C                       	smpsAlterNote       $0C
000B6994 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000B6998 E10B                       	smpsAlterNote       $0B
000B699A C603                       	dc.b	nA5, $03
000B699C E109                       	smpsAlterNote       $09
000B699E C403 8001                  	dc.b	nG5, $03, nRst, $01
000B69A2 E10B                       	smpsAlterNote       $0B
000B69A4 C60D                       	dc.b	nA5, $0D
000B69A6 E105                       	smpsAlterNote       $05
000B69A8 E701                       	dc.b	smpsNoAttack, $01
000B69AA E104                       	smpsAlterNote       $04
000B69AC E701                       	dc.b	smpsNoAttack, $01
000B69AE E108                       	smpsAlterNote       $08
000B69B0 E701                       	dc.b	smpsNoAttack, $01
000B69B2 E10E                       	smpsAlterNote       $0E
000B69B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B69B8 E10B                       	smpsAlterNote       $0B
000B69BA E701                       	dc.b	smpsNoAttack, $01
000B69BC E105                       	smpsAlterNote       $05
000B69BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B69C2 E10B                       	smpsAlterNote       $0B
000B69C4 E701                       	dc.b	smpsNoAttack, $01
000B69C6 E10E                       	smpsAlterNote       $0E
000B69C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B69CC E108                       	smpsAlterNote       $08
000B69CE E701                       	dc.b	smpsNoAttack, $01
000B69D0 E104                       	smpsAlterNote       $04
000B69D2 E701                       	dc.b	smpsNoAttack, $01
000B69D4 E105                       	smpsAlterNote       $05
000B69D6 E701                       	dc.b	smpsNoAttack, $01
000B69D8 E10B                       	smpsAlterNote       $0B
000B69DA E701                       	dc.b	smpsNoAttack, $01
000B69DC E10F                       	smpsAlterNote       $0F
000B69DE E701                       	dc.b	smpsNoAttack, $01
000B69E0 E10B                       	smpsAlterNote       $0B
000B69E2 E701                       	dc.b	smpsNoAttack, $01
000B69E4 E108                       	smpsAlterNote       $08
000B69E6 E701                       	dc.b	smpsNoAttack, $01
000B69E8 E104                       	smpsAlterNote       $04
000B69EA E701                       	dc.b	smpsNoAttack, $01
000B69EC E108                       	smpsAlterNote       $08
000B69EE E701                       	dc.b	smpsNoAttack, $01
000B69F0 E10E                       	smpsAlterNote       $0E
000B69F2 E701                       	dc.b	smpsNoAttack, $01
000B69F4 E10F                       	smpsAlterNote       $0F
000B69F6 E701                       	dc.b	smpsNoAttack, $01
000B69F8 E10B                       	smpsAlterNote       $0B
000B69FA E701                       	dc.b	smpsNoAttack, $01
000B69FC E105                       	smpsAlterNote       $05
000B69FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6A02 E108                       	smpsAlterNote       $08
000B6A04 E701                       	dc.b	smpsNoAttack, $01
000B6A06 E10E                       	smpsAlterNote       $0E
000B6A08 E701                       	dc.b	smpsNoAttack, $01
000B6A0A E10F                       	smpsAlterNote       $0F
000B6A0C 800F                       	dc.b	nRst, $0F
000B6A0E E107                       	smpsAlterNote       $07
000B6A10 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000B6A14 E108                       	smpsAlterNote       $08
000B6A16 C103                       	dc.b	nE5, $03
000B6A18 E109                       	smpsAlterNote       $09
000B6A1A C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000B6A20 E10B                       	smpsAlterNote       $0B
000B6A22 C607                       	dc.b	nA5, $07
000B6A24 E107                       	smpsAlterNote       $07
000B6A26 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000B6A2A E106                       	smpsAlterNote       $06
000B6A2C C90D                       	dc.b	nC6, $0D
000B6A2E E107                       	smpsAlterNote       $07
000B6A30 CB03 8001                  	dc.b	nD6, $03, nRst, $01
000B6A34 E10C                       	smpsAlterNote       $0C
000B6A36 C704                       	dc.b	nBb5, $04
000B6A38 E10B                       	smpsAlterNote       $0B
000B6A3A C604 8001                  	dc.b	nA5, $04, nRst, $01
000B6A3E E109                       	smpsAlterNote       $09
000B6A40 C404                       	dc.b	nG5, $04
000B6A42 E10B                       	smpsAlterNote       $0B
000B6A44 C60D                       	dc.b	nA5, $0D
000B6A46 E108                       	smpsAlterNote       $08
000B6A48 E701                       	dc.b	smpsNoAttack, $01
000B6A4A E105                       	smpsAlterNote       $05
000B6A4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6A50 E10B                       	smpsAlterNote       $0B
000B6A52 E701                       	dc.b	smpsNoAttack, $01
000B6A54 E10F                       	smpsAlterNote       $0F
000B6A56 E701                       	dc.b	smpsNoAttack, $01
000B6A58 E10E                       	smpsAlterNote       $0E
000B6A5A E701                       	dc.b	smpsNoAttack, $01
000B6A5C E108                       	smpsAlterNote       $08
000B6A5E E701                       	dc.b	smpsNoAttack, $01
000B6A60 E104                       	smpsAlterNote       $04
000B6A62 E701                       	dc.b	smpsNoAttack, $01
000B6A64 E108                       	smpsAlterNote       $08
000B6A66 E701                       	dc.b	smpsNoAttack, $01
000B6A68 E10B                       	smpsAlterNote       $0B
000B6A6A E701                       	dc.b	smpsNoAttack, $01
000B6A6C E10F                       	smpsAlterNote       $0F
000B6A6E E701                       	dc.b	smpsNoAttack, $01
000B6A70 E10B                       	smpsAlterNote       $0B
000B6A72 E701                       	dc.b	smpsNoAttack, $01
000B6A74 E105                       	smpsAlterNote       $05
000B6A76 E701                       	dc.b	smpsNoAttack, $01
000B6A78 E104                       	smpsAlterNote       $04
000B6A7A E701                       	dc.b	smpsNoAttack, $01
000B6A7C E108                       	smpsAlterNote       $08
000B6A7E E701                       	dc.b	smpsNoAttack, $01
000B6A80 E10E                       	smpsAlterNote       $0E
000B6A82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6A86 E10B                       	smpsAlterNote       $0B
000B6A88 E701                       	dc.b	smpsNoAttack, $01
000B6A8A E105                       	smpsAlterNote       $05
000B6A8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6A90 E10B                       	smpsAlterNote       $0B
000B6A92 E701                       	dc.b	smpsNoAttack, $01
000B6A94 E10E                       	smpsAlterNote       $0E
000B6A96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6A9A E108                       	smpsAlterNote       $08
000B6A9C E701                       	dc.b	smpsNoAttack, $01
000B6A9E E105                       	smpsAlterNote       $05
000B6AA0 8001                       	dc.b	nRst, $01
000B6AA2 E109                       	smpsAlterNote       $09
000B6AA4 C401 8001                  	dc.b	nG5, $01, nRst, $01
000B6AA8 E10B                       	smpsAlterNote       $0B
000B6AAA C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000B6AB2 E109                       	smpsAlterNote       $09
000B6AB4 C404                       	dc.b	nG5, $04
000B6AB6 E10B                       	smpsAlterNote       $0B
000B6AB8 C604 8001                  	dc.b	nA5, $04, nRst, $01
000B6ABC E107                       	smpsAlterNote       $07
000B6ABE BF0D                       	dc.b	nD5, $0D
000B6AC0 E101                       	smpsAlterNote       $01
000B6AC2 E701                       	dc.b	smpsNoAttack, $01
000B6AC4 E100                       	smpsAlterNote       $00
000B6AC6 E701                       	dc.b	smpsNoAttack, $01
000B6AC8 E104                       	smpsAlterNote       $04
000B6ACA E701                       	dc.b	smpsNoAttack, $01
000B6ACC E10A                       	smpsAlterNote       $0A
000B6ACE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6AD2 E107                       	smpsAlterNote       $07
000B6AD4 E701                       	dc.b	smpsNoAttack, $01
000B6AD6 E101                       	smpsAlterNote       $01
000B6AD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6ADC E107                       	smpsAlterNote       $07
000B6ADE E701                       	dc.b	smpsNoAttack, $01
000B6AE0 E10A                       	smpsAlterNote       $0A
000B6AE2 E701                       	dc.b	smpsNoAttack, $01
000B6AE4 E10B                       	smpsAlterNote       $0B
000B6AE6 8001                       	dc.b	nRst, $01
000B6AE8 E108                       	smpsAlterNote       $08
000B6AEA 8001                       	dc.b	nRst, $01
000B6AEC E109                       	smpsAlterNote       $09
000B6AEE 8001 C401                  	dc.b	nRst, $01, nG5, $01
000B6AF2 E10B                       	smpsAlterNote       $0B
000B6AF4 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000B6AFC E108                       	smpsAlterNote       $08
000B6AFE CD06 8001                  	dc.b	nE6, $06, nRst, $01
000B6B02 E109                       	smpsAlterNote       $09
000B6B04 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000B6B08 E108                       	smpsAlterNote       $08
000B6B0A CD02 8001                  	dc.b	nE6, $02, nRst, $01
000B6B0E E106                       	smpsAlterNote       $06
000B6B10 C903                       	dc.b	nC6, $03
000B6B12 E109                       	smpsAlterNote       $09
000B6B14 C403 8001                  	dc.b	nG5, $03, nRst, $01
000B6B18 E10C                       	smpsAlterNote       $0C
000B6B1A C70D                       	dc.b	nBb5, $0D
000B6B1C E109                       	smpsAlterNote       $09
000B6B1E E701                       	dc.b	smpsNoAttack, $01
000B6B20 E105                       	smpsAlterNote       $05
000B6B22 E701                       	dc.b	smpsNoAttack, $01
000B6B24 E109                       	smpsAlterNote       $09
000B6B26 E701                       	dc.b	smpsNoAttack, $01
000B6B28 E10F                       	smpsAlterNote       $0F
000B6B2A E701                       	dc.b	smpsNoAttack, $01
000B6B2C E110                       	smpsAlterNote       $10
000B6B2E E701                       	dc.b	smpsNoAttack, $01
000B6B30 E10C                       	smpsAlterNote       $0C
000B6B32 E701                       	dc.b	smpsNoAttack, $01
000B6B34 E106                       	smpsAlterNote       $06
000B6B36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6B3A E109                       	smpsAlterNote       $09
000B6B3C E701                       	dc.b	smpsNoAttack, $01
000B6B3E E10F                       	smpsAlterNote       $0F
000B6B40 E701                       	dc.b	smpsNoAttack, $01
000B6B42 E110                       	smpsAlterNote       $10
000B6B44 8001                       	dc.b	nRst, $01
000B6B46 E10B                       	smpsAlterNote       $0B
000B6B48 C606 8001                  	dc.b	nA5, $06, nRst, $01
000B6B4C E109                       	smpsAlterNote       $09
000B6B4E C40D                       	dc.b	nG5, $0D
000B6B50 E103                       	smpsAlterNote       $03
000B6B52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6B56 E106                       	smpsAlterNote       $06
000B6B58 E701                       	dc.b	smpsNoAttack, $01
000B6B5A E10C                       	smpsAlterNote       $0C
000B6B5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6B60 E106                       	smpsAlterNote       $06
000B6B62 E701                       	dc.b	smpsNoAttack, $01
000B6B64 E103                       	smpsAlterNote       $03
000B6B66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6B6A E109                       	smpsAlterNote       $09
000B6B6C E701                       	dc.b	smpsNoAttack, $01
000B6B6E E10D                       	smpsAlterNote       $0D
000B6B70 E701                       	dc.b	smpsNoAttack, $01
000B6B72 E10C                       	smpsAlterNote       $0C
000B6B74 E701                       	dc.b	smpsNoAttack, $01
000B6B76 E106                       	smpsAlterNote       $06
000B6B78 E701                       	dc.b	smpsNoAttack, $01
000B6B7A E102                       	smpsAlterNote       $02
000B6B7C E701                       	dc.b	smpsNoAttack, $01
000B6B7E E103                       	smpsAlterNote       $03
000B6B80 8001                       	dc.b	nRst, $01
000B6B82 E10B                       	smpsAlterNote       $0B
000B6B84 C60D                       	dc.b	nA5, $0D
000B6B86 E108                       	smpsAlterNote       $08
000B6B88 E701                       	dc.b	smpsNoAttack, $01
000B6B8A E104                       	smpsAlterNote       $04
000B6B8C E701                       	dc.b	smpsNoAttack, $01
000B6B8E E108                       	smpsAlterNote       $08
000B6B90 E701                       	dc.b	smpsNoAttack, $01
000B6B92 E10B                       	smpsAlterNote       $0B
000B6B94 E701                       	dc.b	smpsNoAttack, $01
000B6B96 E10F                       	smpsAlterNote       $0F
000B6B98 E701                       	dc.b	smpsNoAttack, $01
000B6B9A E10B                       	smpsAlterNote       $0B
000B6B9C E701                       	dc.b	smpsNoAttack, $01
000B6B9E E105                       	smpsAlterNote       $05
000B6BA0 E701                       	dc.b	smpsNoAttack, $01
000B6BA2 E104                       	smpsAlterNote       $04
000B6BA4 E701                       	dc.b	smpsNoAttack, $01
000B6BA6 E108                       	smpsAlterNote       $08
000B6BA8 E701                       	dc.b	smpsNoAttack, $01
000B6BAA E10E                       	smpsAlterNote       $0E
000B6BAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6BB0 E10B                       	smpsAlterNote       $0B
000B6BB2 E701                       	dc.b	smpsNoAttack, $01
000B6BB4 E105                       	smpsAlterNote       $05
000B6BB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6BBA E10C                       	smpsAlterNote       $0C
000B6BBC C70E                       	dc.b	nBb5, $0E
000B6BBE E106                       	smpsAlterNote       $06
000B6BC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6BC4 E10C                       	smpsAlterNote       $0C
000B6BC6 E701                       	dc.b	smpsNoAttack, $01
000B6BC8 E10F                       	smpsAlterNote       $0F
000B6BCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6BCE E109                       	smpsAlterNote       $09
000B6BD0 E701                       	dc.b	smpsNoAttack, $01
000B6BD2 E105                       	smpsAlterNote       $05
000B6BD4 E701                       	dc.b	smpsNoAttack, $01
000B6BD6 E106                       	smpsAlterNote       $06
000B6BD8 E701                       	dc.b	smpsNoAttack, $01
000B6BDA E10C                       	smpsAlterNote       $0C
000B6BDC E701                       	dc.b	smpsNoAttack, $01
000B6BDE E110                       	smpsAlterNote       $10
000B6BE0 E701                       	dc.b	smpsNoAttack, $01
000B6BE2 E10C                       	smpsAlterNote       $0C
000B6BE4 E701                       	dc.b	smpsNoAttack, $01
000B6BE6 E109                       	smpsAlterNote       $09
000B6BE8 E701                       	dc.b	smpsNoAttack, $01
000B6BEA E105                       	smpsAlterNote       $05
000B6BEC E701                       	dc.b	smpsNoAttack, $01
000B6BEE E106                       	smpsAlterNote       $06
000B6BF0 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
000B6BF4 E107                       	smpsAlterNote       $07
000B6BF6 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
000B6BFB E108                       	smpsAlterNote       $08
000B6BFD CD0D                       	dc.b	nE6, $0D
000B6BFF E107                       	smpsAlterNote       $07
000B6C01 CB0D                       	dc.b	nD6, $0D
000B6C03 E104                       	smpsAlterNote       $04
000B6C05 E701                       	dc.b	smpsNoAttack, $01
000B6C07 E100                       	smpsAlterNote       $00
000B6C09 E701                       	dc.b	smpsNoAttack, $01
000B6C0B E101                       	smpsAlterNote       $01
000B6C0D E701                       	dc.b	smpsNoAttack, $01
000B6C0F E107                       	smpsAlterNote       $07
000B6C11 E701                       	dc.b	smpsNoAttack, $01
000B6C13 E10B                       	smpsAlterNote       $0B
000B6C15 E701                       	dc.b	smpsNoAttack, $01
000B6C17 E107                       	smpsAlterNote       $07
000B6C19 E701                       	dc.b	smpsNoAttack, $01
000B6C1B E104                       	smpsAlterNote       $04
000B6C1D E701                       	dc.b	smpsNoAttack, $01
000B6C1F E100                       	smpsAlterNote       $00
000B6C21 E701                       	dc.b	smpsNoAttack, $01
000B6C23 E104                       	smpsAlterNote       $04
000B6C25 E701                       	dc.b	smpsNoAttack, $01
000B6C27 E10A                       	smpsAlterNote       $0A
000B6C29 E701                       	dc.b	smpsNoAttack, $01
000B6C2B E10B                       	smpsAlterNote       $0B
000B6C2D E701                       	dc.b	smpsNoAttack, $01
000B6C2F E108                       	smpsAlterNote       $08
000B6C31 CC0D                       	dc.b	nEb6, $0D
000B6C33 E105                       	smpsAlterNote       $05
000B6C35 E701                       	dc.b	smpsNoAttack, $01
000B6C37 E101                       	smpsAlterNote       $01
000B6C39 E701                       	dc.b	smpsNoAttack, $01
000B6C3B E102                       	smpsAlterNote       $02
000B6C3D E701                       	dc.b	smpsNoAttack, $01
000B6C3F E108                       	smpsAlterNote       $08
000B6C41 E701                       	dc.b	smpsNoAttack, $01
000B6C43 E106                       	smpsAlterNote       $06
000B6C45 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
000B6C51 8001                       	dc.b	nRst, $01
000B6C53 E107                       	smpsAlterNote       $07
000B6C55 CB0D                       	dc.b	nD6, $0D
000B6C57 E104                       	smpsAlterNote       $04
000B6C59 E701                       	dc.b	smpsNoAttack, $01
000B6C5B E100                       	smpsAlterNote       $00
000B6C5D E701                       	dc.b	smpsNoAttack, $01
000B6C5F E104                       	smpsAlterNote       $04
000B6C61 E701                       	dc.b	smpsNoAttack, $01
000B6C63 E107                       	smpsAlterNote       $07
000B6C65 E701                       	dc.b	smpsNoAttack, $01
000B6C67 E10B                       	smpsAlterNote       $0B
000B6C69 E701                       	dc.b	smpsNoAttack, $01
000B6C6B E107                       	smpsAlterNote       $07
000B6C6D E701                       	dc.b	smpsNoAttack, $01
000B6C6F E101                       	smpsAlterNote       $01
000B6C71 E701                       	dc.b	smpsNoAttack, $01
000B6C73 E100                       	smpsAlterNote       $00
000B6C75 E701                       	dc.b	smpsNoAttack, $01
000B6C77 E104                       	smpsAlterNote       $04
000B6C79 E701                       	dc.b	smpsNoAttack, $01
000B6C7B E10A                       	smpsAlterNote       $0A
000B6C7D E701                       	dc.b	smpsNoAttack, $01
000B6C7F E10B                       	smpsAlterNote       $0B
000B6C81 8001                       	dc.b	nRst, $01
000B6C83 E109                       	smpsAlterNote       $09
000B6C85 CE0A                       	dc.b	nF6, $0A
000B6C87 E108                       	smpsAlterNote       $08
000B6C89 CC07                       	dc.b	nEb6, $07
000B6C8B E106                       	smpsAlterNote       $06
000B6C8D C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
000B6C99 E107                       	smpsAlterNote       $07
000B6C9B CB0D                       	dc.b	nD6, $0D
000B6C9D E101                       	smpsAlterNote       $01
000B6C9F E701                       	dc.b	smpsNoAttack, $01
000B6CA1 E100                       	smpsAlterNote       $00
000B6CA3 E701                       	dc.b	smpsNoAttack, $01
000B6CA5 E104                       	smpsAlterNote       $04
000B6CA7 E701                       	dc.b	smpsNoAttack, $01
000B6CA9 E10A                       	smpsAlterNote       $0A
000B6CAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6CAF E107                       	smpsAlterNote       $07
000B6CB1 E701                       	dc.b	smpsNoAttack, $01
000B6CB3 E101                       	smpsAlterNote       $01
000B6CB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6CB9 E107                       	smpsAlterNote       $07
000B6CBB E701                       	dc.b	smpsNoAttack, $01
000B6CBD E10A                       	smpsAlterNote       $0A
000B6CBF E701                       	dc.b	smpsNoAttack, $01
000B6CC1 E10B                       	smpsAlterNote       $0B
000B6CC3 8001                       	dc.b	nRst, $01
000B6CC5 E108                       	smpsAlterNote       $08
000B6CC7 CC0D                       	dc.b	nEb6, $0D
000B6CC9 E102                       	smpsAlterNote       $02
000B6CCB E701                       	dc.b	smpsNoAttack, $01
000B6CCD E101                       	smpsAlterNote       $01
000B6CCF E701                       	dc.b	smpsNoAttack, $01
000B6CD1 E105                       	smpsAlterNote       $05
000B6CD3 E701                       	dc.b	smpsNoAttack, $01
000B6CD5 E108                       	smpsAlterNote       $08
000B6CD7 8001                       	dc.b	nRst, $01
000B6CD9 E106                       	smpsAlterNote       $06
000B6CDB C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000B6CE7 8001                       	dc.b	nRst, $01
000B6CE9 E107                       	smpsAlterNote       $07
000B6CEB CB0D                       	dc.b	nD6, $0D
000B6CED E101                       	smpsAlterNote       $01
000B6CEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6CF3 E104                       	smpsAlterNote       $04
000B6CF5 E701                       	dc.b	smpsNoAttack, $01
000B6CF7 E10A                       	smpsAlterNote       $0A
000B6CF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6CFD E104                       	smpsAlterNote       $04
000B6CFF E701                       	dc.b	smpsNoAttack, $01
000B6D01 E101                       	smpsAlterNote       $01
000B6D03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6D07 E107                       	smpsAlterNote       $07
000B6D09 E701                       	dc.b	smpsNoAttack, $01
000B6D0B E10B                       	smpsAlterNote       $0B
000B6D0D E701                       	dc.b	smpsNoAttack, $01
000B6D0F E10A                       	smpsAlterNote       $0A
000B6D11 E701                       	dc.b	smpsNoAttack, $01
000B6D13 E104                       	smpsAlterNote       $04
000B6D15 E701                       	dc.b	smpsNoAttack, $01
000B6D17 E100                       	smpsAlterNote       $00
000B6D19 E701                       	dc.b	smpsNoAttack, $01
000B6D1B E101                       	smpsAlterNote       $01
000B6D1D 801C                       	dc.b	nRst, $1C
000B6D21 E107                       	smpsAlterNote       $07
000B6D23 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000B6D27 E603                       	smpsAlterVol        $03
000B6D29 F6F1 AD                    	smpsJump            music84_Jump03
000B6D2C                            
000B6D2C                            ; FM3 Data
000B6D2C                            music84_FM3:
000B6D2C E0C0                       	smpsPan             panCenter, $00
000B6D30 E109                       	smpsAlterNote       $09
000B6D32 C203 8007                  	dc.b	nF5, $03, nRst, $07
000B6D36 E108                       	smpsAlterNote       $08
000B6D38 C103 800B                  	dc.b	nE5, $03, nRst, $0B
000B6D3C E10B                       	smpsAlterNote       $0B
000B6D3E BA03 8006                  	dc.b	nA4, $03, nRst, $06
000B6D44 E040                       	smpsPan             panRight, $00
000B6D46 E110                       	smpsAlterNote       $10
000B6D48 E6F9                       	smpsAlterVol        $F9
000B6D4A C702 8001                  	dc.b	nBb5, $02, nRst, $01
000B6D4E E10F                       	smpsAlterNote       $0F
000B6D50 C603                       	dc.b	nA5, $03
000B6D52 E10D                       	smpsAlterNote       $0D
000B6D54 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000B6D5A E10C                       	smpsAlterNote       $0C
000B6D5C C103 8001                  	dc.b	nE5, $03, nRst, $01
000B6D60 E10A                       	smpsAlterNote       $0A
000B6D62 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000B6D66 E10F                       	smpsAlterNote       $0F
000B6D68 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000B6D6C E0C0                       	smpsPan             panCenter, $00
000B6D70 E109                       	smpsAlterNote       $09
000B6D72 E609                       	smpsAlterVol        $09
000B6D74 B603                       	dc.b	nF4, $03
000B6D76                            
000B6D76                            music84_Jump02:
000B6D76 E70A                       	dc.b	smpsNoAttack, $0A
000B6D78 E103                       	smpsAlterNote       $03
000B6D7A E701                       	dc.b	smpsNoAttack, $01
000B6D7C E102                       	smpsAlterNote       $02
000B6D7E E701                       	dc.b	smpsNoAttack, $01
000B6D80 E106                       	smpsAlterNote       $06
000B6D82 E701                       	dc.b	smpsNoAttack, $01
000B6D84 E10C                       	smpsAlterNote       $0C
000B6D86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6D8A E109                       	smpsAlterNote       $09
000B6D8C E701                       	dc.b	smpsNoAttack, $01
000B6D8E E103                       	smpsAlterNote       $03
000B6D90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6D94 E109                       	smpsAlterNote       $09
000B6D96 E701                       	dc.b	smpsNoAttack, $01
000B6D98 E10C                       	smpsAlterNote       $0C
000B6D9A E701                       	dc.b	smpsNoAttack, $01
000B6D9C E10D                       	smpsAlterNote       $0D
000B6D9E 8001                       	dc.b	nRst, $01
000B6DA0 E109                       	smpsAlterNote       $09
000B6DA2 B80D                       	dc.b	nG4, $0D
000B6DA4 E103                       	smpsAlterNote       $03
000B6DA6 E701                       	dc.b	smpsNoAttack, $01
000B6DA8 E102                       	smpsAlterNote       $02
000B6DAA E701                       	dc.b	smpsNoAttack, $01
000B6DAC E106                       	smpsAlterNote       $06
000B6DAE E701                       	dc.b	smpsNoAttack, $01
000B6DB0 E10C                       	smpsAlterNote       $0C
000B6DB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6DB6 E109                       	smpsAlterNote       $09
000B6DB8 E701                       	dc.b	smpsNoAttack, $01
000B6DBA E103                       	smpsAlterNote       $03
000B6DBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6DC0 E109                       	smpsAlterNote       $09
000B6DC2 E701                       	dc.b	smpsNoAttack, $01
000B6DC4 E10C                       	smpsAlterNote       $0C
000B6DC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6DCA E106                       	smpsAlterNote       $06
000B6DCC E701                       	dc.b	smpsNoAttack, $01
000B6DCE E102                       	smpsAlterNote       $02
000B6DD0 E701                       	dc.b	smpsNoAttack, $01
000B6DD2 E103                       	smpsAlterNote       $03
000B6DD4 E701                       	dc.b	smpsNoAttack, $01
000B6DD6 E109                       	smpsAlterNote       $09
000B6DD8 E701                       	dc.b	smpsNoAttack, $01
000B6DDA E10D                       	smpsAlterNote       $0D
000B6DDC E701                       	dc.b	smpsNoAttack, $01
000B6DDE E109                       	smpsAlterNote       $09
000B6DE0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B6DE4 E10B                       	smpsAlterNote       $0B
000B6DE6 BA0D                       	dc.b	nA4, $0D
000B6DE8 E105                       	smpsAlterNote       $05
000B6DEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6DEE E108                       	smpsAlterNote       $08
000B6DF0 E701                       	dc.b	smpsNoAttack, $01
000B6DF2 E10E                       	smpsAlterNote       $0E
000B6DF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6DF8 E108                       	smpsAlterNote       $08
000B6DFA E701                       	dc.b	smpsNoAttack, $01
000B6DFC E104                       	smpsAlterNote       $04
000B6DFE E701                       	dc.b	smpsNoAttack, $01
000B6E00 E105                       	smpsAlterNote       $05
000B6E02 E701                       	dc.b	smpsNoAttack, $01
000B6E04 E10B                       	smpsAlterNote       $0B
000B6E06 E701                       	dc.b	smpsNoAttack, $01
000B6E08 E10F                       	smpsAlterNote       $0F
000B6E0A E701                       	dc.b	smpsNoAttack, $01
000B6E0C E10B                       	smpsAlterNote       $0B
000B6E0E E701                       	dc.b	smpsNoAttack, $01
000B6E10 E108                       	smpsAlterNote       $08
000B6E12 E701                       	dc.b	smpsNoAttack, $01
000B6E14 E104                       	smpsAlterNote       $04
000B6E16 E701                       	dc.b	smpsNoAttack, $01
000B6E18 E108                       	smpsAlterNote       $08
000B6E1A E701                       	dc.b	smpsNoAttack, $01
000B6E1C E10E                       	smpsAlterNote       $0E
000B6E1E E701                       	dc.b	smpsNoAttack, $01
000B6E20 E10F                       	smpsAlterNote       $0F
000B6E22 E701                       	dc.b	smpsNoAttack, $01
000B6E24 E10B                       	smpsAlterNote       $0B
000B6E26 E701                       	dc.b	smpsNoAttack, $01
000B6E28 E105                       	smpsAlterNote       $05
000B6E2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6E2E E108                       	smpsAlterNote       $08
000B6E30 E701                       	dc.b	smpsNoAttack, $01
000B6E32 E10E                       	smpsAlterNote       $0E
000B6E34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6E38 E108                       	smpsAlterNote       $08
000B6E3A E701                       	dc.b	smpsNoAttack, $01
000B6E3C E105                       	smpsAlterNote       $05
000B6E3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6E42 E10B                       	smpsAlterNote       $0B
000B6E44 E701                       	dc.b	smpsNoAttack, $01
000B6E46 E10F                       	smpsAlterNote       $0F
000B6E48 E701                       	dc.b	smpsNoAttack, $01
000B6E4A E10E                       	smpsAlterNote       $0E
000B6E4C E701                       	dc.b	smpsNoAttack, $01
000B6E4E E108                       	smpsAlterNote       $08
000B6E50 E701                       	dc.b	smpsNoAttack, $01
000B6E52 E104                       	smpsAlterNote       $04
000B6E54 E701                       	dc.b	smpsNoAttack, $01
000B6E56 E105                       	smpsAlterNote       $05
000B6E58 8001                       	dc.b	nRst, $01
000B6E5A E108                       	smpsAlterNote       $08
000B6E5C B50A                       	dc.b	nE4, $0A
000B6E5E E109                       	smpsAlterNote       $09
000B6E60 B60D                       	dc.b	nF4, $0D
000B6E62 E106                       	smpsAlterNote       $06
000B6E64 E701                       	dc.b	smpsNoAttack, $01
000B6E66 E103                       	smpsAlterNote       $03
000B6E68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6E6C E109                       	smpsAlterNote       $09
000B6E6E E701                       	dc.b	smpsNoAttack, $01
000B6E70 E10D                       	smpsAlterNote       $0D
000B6E72 E701                       	dc.b	smpsNoAttack, $01
000B6E74 E10C                       	smpsAlterNote       $0C
000B6E76 E701                       	dc.b	smpsNoAttack, $01
000B6E78 E106                       	smpsAlterNote       $06
000B6E7A E701                       	dc.b	smpsNoAttack, $01
000B6E7C E102                       	smpsAlterNote       $02
000B6E7E E701                       	dc.b	smpsNoAttack, $01
000B6E80 E106                       	smpsAlterNote       $06
000B6E82 E701                       	dc.b	smpsNoAttack, $01
000B6E84 E109                       	smpsAlterNote       $09
000B6E86 E701                       	dc.b	smpsNoAttack, $01
000B6E88 E10D                       	smpsAlterNote       $0D
000B6E8A E701                       	dc.b	smpsNoAttack, $01
000B6E8C E109                       	smpsAlterNote       $09
000B6E8E B80D                       	dc.b	nG4, $0D
000B6E90 E106                       	smpsAlterNote       $06
000B6E92 E701                       	dc.b	smpsNoAttack, $01
000B6E94 E103                       	smpsAlterNote       $03
000B6E96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6E9A E109                       	smpsAlterNote       $09
000B6E9C E701                       	dc.b	smpsNoAttack, $01
000B6E9E E10D                       	smpsAlterNote       $0D
000B6EA0 E701                       	dc.b	smpsNoAttack, $01
000B6EA2 E10C                       	smpsAlterNote       $0C
000B6EA4 E701                       	dc.b	smpsNoAttack, $01
000B6EA6 E106                       	smpsAlterNote       $06
000B6EA8 E701                       	dc.b	smpsNoAttack, $01
000B6EAA E102                       	smpsAlterNote       $02
000B6EAC E701                       	dc.b	smpsNoAttack, $01
000B6EAE E106                       	smpsAlterNote       $06
000B6EB0 E701                       	dc.b	smpsNoAttack, $01
000B6EB2 E109                       	smpsAlterNote       $09
000B6EB4 E701                       	dc.b	smpsNoAttack, $01
000B6EB6 E10D                       	smpsAlterNote       $0D
000B6EB8 E701                       	dc.b	smpsNoAttack, $01
000B6EBA E109                       	smpsAlterNote       $09
000B6EBC E701                       	dc.b	smpsNoAttack, $01
000B6EBE E103                       	smpsAlterNote       $03
000B6EC0 E701                       	dc.b	smpsNoAttack, $01
000B6EC2 E102                       	smpsAlterNote       $02
000B6EC4 E701                       	dc.b	smpsNoAttack, $01
000B6EC6 E106                       	smpsAlterNote       $06
000B6EC8 E701                       	dc.b	smpsNoAttack, $01
000B6ECA E10C                       	smpsAlterNote       $0C
000B6ECC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6ED0 E109                       	smpsAlterNote       $09
000B6ED2 E701                       	dc.b	smpsNoAttack, $01
000B6ED4 E10B                       	smpsAlterNote       $0B
000B6ED6 BA0D                       	dc.b	nA4, $0D
000B6ED8 E108                       	smpsAlterNote       $08
000B6EDA E701                       	dc.b	smpsNoAttack, $01
000B6EDC E104                       	smpsAlterNote       $04
000B6EDE E701                       	dc.b	smpsNoAttack, $01
000B6EE0 E108                       	smpsAlterNote       $08
000B6EE2 E701                       	dc.b	smpsNoAttack, $01
000B6EE4 E10B                       	smpsAlterNote       $0B
000B6EE6 E701                       	dc.b	smpsNoAttack, $01
000B6EE8 E10F                       	smpsAlterNote       $0F
000B6EEA E701                       	dc.b	smpsNoAttack, $01
000B6EEC E10B                       	smpsAlterNote       $0B
000B6EEE E701                       	dc.b	smpsNoAttack, $01
000B6EF0 E105                       	smpsAlterNote       $05
000B6EF2 E701                       	dc.b	smpsNoAttack, $01
000B6EF4 E104                       	smpsAlterNote       $04
000B6EF6 E701                       	dc.b	smpsNoAttack, $01
000B6EF8 E108                       	smpsAlterNote       $08
000B6EFA E701                       	dc.b	smpsNoAttack, $01
000B6EFC E10E                       	smpsAlterNote       $0E
000B6EFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6F02 E10B                       	smpsAlterNote       $0B
000B6F04 E701                       	dc.b	smpsNoAttack, $01
000B6F06 E105                       	smpsAlterNote       $05
000B6F08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6F0C E10B                       	smpsAlterNote       $0B
000B6F0E E701                       	dc.b	smpsNoAttack, $01
000B6F10 E10E                       	smpsAlterNote       $0E
000B6F12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6F16 E108                       	smpsAlterNote       $08
000B6F18 E701                       	dc.b	smpsNoAttack, $01
000B6F1A E104                       	smpsAlterNote       $04
000B6F1C E701                       	dc.b	smpsNoAttack, $01
000B6F1E E105                       	smpsAlterNote       $05
000B6F20 E701                       	dc.b	smpsNoAttack, $01
000B6F22 E10B                       	smpsAlterNote       $0B
000B6F24 E701                       	dc.b	smpsNoAttack, $01
000B6F26 E10F                       	smpsAlterNote       $0F
000B6F28 E701                       	dc.b	smpsNoAttack, $01
000B6F2A E10B                       	smpsAlterNote       $0B
000B6F2C E701                       	dc.b	smpsNoAttack, $01
000B6F2E E108                       	smpsAlterNote       $08
000B6F30 E701                       	dc.b	smpsNoAttack, $01
000B6F32 E105                       	smpsAlterNote       $05
000B6F34 8001                       	dc.b	nRst, $01
000B6F36 E109                       	smpsAlterNote       $09
000B6F38 B609 8001                  	dc.b	nF4, $09, nRst, $01
000B6F3C E108                       	smpsAlterNote       $08
000B6F3E B506 8001                  	dc.b	nE4, $06, nRst, $01
000B6F42 E107                       	smpsAlterNote       $07
000B6F44 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000B6F48 E108                       	smpsAlterNote       $08
000B6F4A B502 8001                  	dc.b	nE4, $02, nRst, $01
000B6F4E E109                       	smpsAlterNote       $09
000B6F50 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
000B6F56 E10B                       	smpsAlterNote       $0B
000B6F58 BA0D                       	dc.b	nA4, $0D
000B6F5A E108                       	smpsAlterNote       $08
000B6F5C E701                       	dc.b	smpsNoAttack, $01
000B6F5E E104                       	smpsAlterNote       $04
000B6F60 E701                       	dc.b	smpsNoAttack, $01
000B6F62 E108                       	smpsAlterNote       $08
000B6F64 E701                       	dc.b	smpsNoAttack, $01
000B6F66 E10E                       	smpsAlterNote       $0E
000B6F68 E701                       	dc.b	smpsNoAttack, $01
000B6F6A E10F                       	smpsAlterNote       $0F
000B6F6C E701                       	dc.b	smpsNoAttack, $01
000B6F6E E10B                       	smpsAlterNote       $0B
000B6F70 E701                       	dc.b	smpsNoAttack, $01
000B6F72 E105                       	smpsAlterNote       $05
000B6F74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6F78 E108                       	smpsAlterNote       $08
000B6F7A E701                       	dc.b	smpsNoAttack, $01
000B6F7C E10E                       	smpsAlterNote       $0E
000B6F7E E701                       	dc.b	smpsNoAttack, $01
000B6F80 E10F                       	smpsAlterNote       $0F
000B6F82 8001                       	dc.b	nRst, $01
000B6F84 E109                       	smpsAlterNote       $09
000B6F86 C20D                       	dc.b	nF5, $0D
000B6F88 E103                       	smpsAlterNote       $03
000B6F8A E701                       	dc.b	smpsNoAttack, $01
000B6F8C E102                       	smpsAlterNote       $02
000B6F8E E701                       	dc.b	smpsNoAttack, $01
000B6F90 E106                       	smpsAlterNote       $06
000B6F92 E701                       	dc.b	smpsNoAttack, $01
000B6F94 E10C                       	smpsAlterNote       $0C
000B6F96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6F9A E109                       	smpsAlterNote       $09
000B6F9C E701                       	dc.b	smpsNoAttack, $01
000B6F9E E103                       	smpsAlterNote       $03
000B6FA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6FA4 E109                       	smpsAlterNote       $09
000B6FA6 E701                       	dc.b	smpsNoAttack, $01
000B6FA8 E10C                       	smpsAlterNote       $0C
000B6FAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6FAE E106                       	smpsAlterNote       $06
000B6FB0 E701                       	dc.b	smpsNoAttack, $01
000B6FB2 E102                       	smpsAlterNote       $02
000B6FB4 E701                       	dc.b	smpsNoAttack, $01
000B6FB6 E103                       	smpsAlterNote       $03
000B6FB8 E701                       	dc.b	smpsNoAttack, $01
000B6FBA E109                       	smpsAlterNote       $09
000B6FBC E701                       	dc.b	smpsNoAttack, $01
000B6FBE E10D                       	smpsAlterNote       $0D
000B6FC0 E701                       	dc.b	smpsNoAttack, $01
000B6FC2 E109                       	smpsAlterNote       $09
000B6FC4 E701                       	dc.b	smpsNoAttack, $01
000B6FC6 E106                       	smpsAlterNote       $06
000B6FC8 E701                       	dc.b	smpsNoAttack, $01
000B6FCA E102                       	smpsAlterNote       $02
000B6FCC E701                       	dc.b	smpsNoAttack, $01
000B6FCE E106                       	smpsAlterNote       $06
000B6FD0 E701                       	dc.b	smpsNoAttack, $01
000B6FD2 E10C                       	smpsAlterNote       $0C
000B6FD4 E701                       	dc.b	smpsNoAttack, $01
000B6FD6 E10D                       	smpsAlterNote       $0D
000B6FD8 E701                       	dc.b	smpsNoAttack, $01
000B6FDA E109                       	smpsAlterNote       $09
000B6FDC E701                       	dc.b	smpsNoAttack, $01
000B6FDE E103                       	smpsAlterNote       $03
000B6FE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6FE4 E106                       	smpsAlterNote       $06
000B6FE6 E701                       	dc.b	smpsNoAttack, $01
000B6FE8 E10C                       	smpsAlterNote       $0C
000B6FEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6FEE E106                       	smpsAlterNote       $06
000B6FF0 E701                       	dc.b	smpsNoAttack, $01
000B6FF2 E103                       	smpsAlterNote       $03
000B6FF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B6FF8 E109                       	smpsAlterNote       $09
000B6FFA E701                       	dc.b	smpsNoAttack, $01
000B6FFC E10D                       	smpsAlterNote       $0D
000B6FFE E701                       	dc.b	smpsNoAttack, $01
000B7000 E10C                       	smpsAlterNote       $0C
000B7002 E701                       	dc.b	smpsNoAttack, $01
000B7004 E106                       	smpsAlterNote       $06
000B7006 E701                       	dc.b	smpsNoAttack, $01
000B7008 E102                       	smpsAlterNote       $02
000B700A E701                       	dc.b	smpsNoAttack, $01
000B700C E106                       	smpsAlterNote       $06
000B700E E701                       	dc.b	smpsNoAttack, $01
000B7010 E109                       	smpsAlterNote       $09
000B7012 E701                       	dc.b	smpsNoAttack, $01
000B7014 E10D                       	smpsAlterNote       $0D
000B7016 E701                       	dc.b	smpsNoAttack, $01
000B7018 E109                       	smpsAlterNote       $09
000B701A E701                       	dc.b	smpsNoAttack, $01
000B701C E103                       	smpsAlterNote       $03
000B701E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B7022 E109                       	smpsAlterNote       $09
000B7024 C206                       	dc.b	nF5, $06
000B7026 E108                       	smpsAlterNote       $08
000B7028 C10E                       	dc.b	nE5, $0E
000B702A E102                       	smpsAlterNote       $02
000B702C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7030 E108                       	smpsAlterNote       $08
000B7032 E701                       	dc.b	smpsNoAttack, $01
000B7034 E10B                       	smpsAlterNote       $0B
000B7036 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B703A E105                       	smpsAlterNote       $05
000B703C E701                       	dc.b	smpsNoAttack, $01
000B703E E101                       	smpsAlterNote       $01
000B7040 E701                       	dc.b	smpsNoAttack, $01
000B7042 E102                       	smpsAlterNote       $02
000B7044 E701                       	dc.b	smpsNoAttack, $01
000B7046 E108                       	smpsAlterNote       $08
000B7048 E701                       	dc.b	smpsNoAttack, $01
000B704A E10C                       	smpsAlterNote       $0C
000B704C E701                       	dc.b	smpsNoAttack, $01
000B704E E107                       	smpsAlterNote       $07
000B7050 BF0E                       	dc.b	nD5, $0E
000B7052 E101                       	smpsAlterNote       $01
000B7054 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7058 E107                       	smpsAlterNote       $07
000B705A E701                       	dc.b	smpsNoAttack, $01
000B705C E10A                       	smpsAlterNote       $0A
000B705E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7062 E104                       	smpsAlterNote       $04
000B7064 E701                       	dc.b	smpsNoAttack, $01
000B7066 E100                       	smpsAlterNote       $00
000B7068 E701                       	dc.b	smpsNoAttack, $01
000B706A E104                       	smpsAlterNote       $04
000B706C E701                       	dc.b	smpsNoAttack, $01
000B706E E107                       	smpsAlterNote       $07
000B7070 E701                       	dc.b	smpsNoAttack, $01
000B7072 E10B                       	smpsAlterNote       $0B
000B7074 E701                       	dc.b	smpsNoAttack, $01
000B7076 E107                       	smpsAlterNote       $07
000B7078 E701                       	dc.b	smpsNoAttack, $01
000B707A E101                       	smpsAlterNote       $01
000B707C E701                       	dc.b	smpsNoAttack, $01
000B707E E100                       	smpsAlterNote       $00
000B7080 E701                       	dc.b	smpsNoAttack, $01
000B7082 E104                       	smpsAlterNote       $04
000B7084 E701                       	dc.b	smpsNoAttack, $01
000B7086 E10A                       	smpsAlterNote       $0A
000B7088 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B708C E107                       	smpsAlterNote       $07
000B708E E701                       	dc.b	smpsNoAttack, $01
000B7090 E101                       	smpsAlterNote       $01
000B7092 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7096 E107                       	smpsAlterNote       $07
000B7098 E701                       	dc.b	smpsNoAttack, $01
000B709A E10A                       	smpsAlterNote       $0A
000B709C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B70A0 E104                       	smpsAlterNote       $04
000B70A2 E701                       	dc.b	smpsNoAttack, $01
000B70A4 E100                       	smpsAlterNote       $00
000B70A6 E701                       	dc.b	smpsNoAttack, $01
000B70A8 E101                       	smpsAlterNote       $01
000B70AA E701                       	dc.b	smpsNoAttack, $01
000B70AC E107                       	smpsAlterNote       $07
000B70AE E701                       	dc.b	smpsNoAttack, $01
000B70B0 E10B                       	smpsAlterNote       $0B
000B70B2 E701                       	dc.b	smpsNoAttack, $01
000B70B4 E107                       	smpsAlterNote       $07
000B70B6 E701                       	dc.b	smpsNoAttack, $01
000B70B8 E104                       	smpsAlterNote       $04
000B70BA E701                       	dc.b	smpsNoAttack, $01
000B70BC E100                       	smpsAlterNote       $00
000B70BE E701                       	dc.b	smpsNoAttack, $01
000B70C0 E104                       	smpsAlterNote       $04
000B70C2 E701                       	dc.b	smpsNoAttack, $01
000B70C4 E10A                       	smpsAlterNote       $0A
000B70C6 E701                       	dc.b	smpsNoAttack, $01
000B70C8 E10B                       	smpsAlterNote       $0B
000B70CA E701                       	dc.b	smpsNoAttack, $01
000B70CC E107                       	smpsAlterNote       $07
000B70CE E701                       	dc.b	smpsNoAttack, $01
000B70D0 E101                       	smpsAlterNote       $01
000B70D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B70D6 E104                       	smpsAlterNote       $04
000B70D8 E701                       	dc.b	smpsNoAttack, $01
000B70DA E10A                       	smpsAlterNote       $0A
000B70DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B70E0 E104                       	smpsAlterNote       $04
000B70E2 E701                       	dc.b	smpsNoAttack, $01
000B70E4 E101                       	smpsAlterNote       $01
000B70E6 E701                       	dc.b	smpsNoAttack, $01
000B70EA E107                       	smpsAlterNote       $07
000B70EC E6FF                       	smpsAlterVol        $FF
000B70EE BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
000B70FA 8004                       	dc.b	nRst, $04
000B70FE E109                       	smpsAlterNote       $09
000B7100 E602                       	smpsAlterVol        $02
000B7102 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
000B7108 E108                       	smpsAlterNote       $08
000B710A B502 8001                  	dc.b	nE4, $02, nRst, $01
000B710E E109                       	smpsAlterNote       $09
000B7110 B60D                       	dc.b	nF4, $0D
000B7112 E106                       	smpsAlterNote       $06
000B7114 E701                       	dc.b	smpsNoAttack, $01
000B7116 E102                       	smpsAlterNote       $02
000B7118 E701                       	dc.b	smpsNoAttack, $01
000B711A E106                       	smpsAlterNote       $06
000B711C E701                       	dc.b	smpsNoAttack, $01
000B711E E109                       	smpsAlterNote       $09
000B7120 E701                       	dc.b	smpsNoAttack, $01
000B7122 E10D                       	smpsAlterNote       $0D
000B7124 E701                       	dc.b	smpsNoAttack, $01
000B7126 E109                       	smpsAlterNote       $09
000B7128 E701                       	dc.b	smpsNoAttack, $01
000B712A E103                       	smpsAlterNote       $03
000B712C E701                       	dc.b	smpsNoAttack, $01
000B712E E102                       	smpsAlterNote       $02
000B7130 E701                       	dc.b	smpsNoAttack, $01
000B7132 E106                       	smpsAlterNote       $06
000B7134 E701                       	dc.b	smpsNoAttack, $01
000B7136 E10C                       	smpsAlterNote       $0C
000B7138 E701                       	dc.b	smpsNoAttack, $01
000B713A E10D                       	smpsAlterNote       $0D
000B713C 8001                       	dc.b	nRst, $01
000B713E E109                       	smpsAlterNote       $09
000B7140 B80D                       	dc.b	nG4, $0D
000B7142 E106                       	smpsAlterNote       $06
000B7144 E701                       	dc.b	smpsNoAttack, $01
000B7146 E102                       	smpsAlterNote       $02
000B7148 E701                       	dc.b	smpsNoAttack, $01
000B714A E106                       	smpsAlterNote       $06
000B714C E701                       	dc.b	smpsNoAttack, $01
000B714E E10C                       	smpsAlterNote       $0C
000B7150 E701                       	dc.b	smpsNoAttack, $01
000B7152 E10D                       	smpsAlterNote       $0D
000B7154 E701                       	dc.b	smpsNoAttack, $01
000B7156 E109                       	smpsAlterNote       $09
000B7158 E701                       	dc.b	smpsNoAttack, $01
000B715A E103                       	smpsAlterNote       $03
000B715C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7160 E106                       	smpsAlterNote       $06
000B7162 E701                       	dc.b	smpsNoAttack, $01
000B7164 E10C                       	smpsAlterNote       $0C
000B7166 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B716A E106                       	smpsAlterNote       $06
000B716C E701                       	dc.b	smpsNoAttack, $01
000B716E E103                       	smpsAlterNote       $03
000B7170 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7174 E109                       	smpsAlterNote       $09
000B7176 E701                       	dc.b	smpsNoAttack, $01
000B7178 E10D                       	smpsAlterNote       $0D
000B717A E701                       	dc.b	smpsNoAttack, $01
000B717C E10C                       	smpsAlterNote       $0C
000B717E E701                       	dc.b	smpsNoAttack, $01
000B7180 E109                       	smpsAlterNote       $09
000B7182 8001                       	dc.b	nRst, $01
000B7184 E10B                       	smpsAlterNote       $0B
000B7186 BA03                       	dc.b	nA4, $03
000B7188 E10C                       	smpsAlterNote       $0C
000B718A BB03 8001                  	dc.b	nBb4, $03, nRst, $01
000B718E E10B                       	smpsAlterNote       $0B
000B7190 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
000B7196 E10C                       	smpsAlterNote       $0C
000B7198 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000B719C E10B                       	smpsAlterNote       $0B
000B719E C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
000B71A4 E10C                       	smpsAlterNote       $0C
000B71A6 D303                       	dc.b	nBb6, $03
000B71A8 E10B                       	smpsAlterNote       $0B
000B71AA D20D                       	dc.b	nA6, $0D
000B71AC E108                       	smpsAlterNote       $08
000B71AE E701                       	dc.b	smpsNoAttack, $01
000B71B0 E104                       	smpsAlterNote       $04
000B71B2 E701                       	dc.b	smpsNoAttack, $01
000B71B4 E105                       	smpsAlterNote       $05
000B71B6 E701                       	dc.b	smpsNoAttack, $01
000B71B8 E10B                       	smpsAlterNote       $0B
000B71BA E701                       	dc.b	smpsNoAttack, $01
000B71BC E10F                       	smpsAlterNote       $0F
000B71BE E701                       	dc.b	smpsNoAttack, $01
000B71C0 E10B                       	smpsAlterNote       $0B
000B71C2 E701                       	dc.b	smpsNoAttack, $01
000B71C4 E108                       	smpsAlterNote       $08
000B71C6 E701                       	dc.b	smpsNoAttack, $01
000B71C8 E104                       	smpsAlterNote       $04
000B71CA E701                       	dc.b	smpsNoAttack, $01
000B71CC E108                       	smpsAlterNote       $08
000B71CE E701                       	dc.b	smpsNoAttack, $01
000B71D0 E10E                       	smpsAlterNote       $0E
000B71D2 E701                       	dc.b	smpsNoAttack, $01
000B71D4 E10F                       	smpsAlterNote       $0F
000B71D6 E701                       	dc.b	smpsNoAttack, $01
000B71D8 E10B                       	smpsAlterNote       $0B
000B71DA E701                       	dc.b	smpsNoAttack, $01
000B71DC E105                       	smpsAlterNote       $05
000B71DE E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
000B71E4 E109                       	smpsAlterNote       $09
000B71E6 CE07                       	dc.b	nF6, $07
000B71E8 E108                       	smpsAlterNote       $08
000B71EA CD06 8001                  	dc.b	nE6, $06, nRst, $01
000B71EE E109                       	smpsAlterNote       $09
000B71F0 CE03 8001                  	dc.b	nF6, $03, nRst, $01
000B71F4 E108                       	smpsAlterNote       $08
000B71F6 CC0D                       	dc.b	nEb6, $0D
000B71F8 E102                       	smpsAlterNote       $02
000B71FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B71FE E108                       	smpsAlterNote       $08
000B7200 E701                       	dc.b	smpsNoAttack, $01
000B7202 E10B                       	smpsAlterNote       $0B
000B7204 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7208 E105                       	smpsAlterNote       $05
000B720A E701                       	dc.b	smpsNoAttack, $01
000B720C E101                       	smpsAlterNote       $01
000B720E E701                       	dc.b	smpsNoAttack, $01
000B7210 E102                       	smpsAlterNote       $02
000B7212 E701                       	dc.b	smpsNoAttack, $01
000B7214 E108                       	smpsAlterNote       $08
000B7216 E701                       	dc.b	smpsNoAttack, $01
000B7218 E10C                       	smpsAlterNote       $0C
000B721A E701                       	dc.b	smpsNoAttack, $01
000B721C E108                       	smpsAlterNote       $08
000B721E E701                       	dc.b	smpsNoAttack, $01
000B7220 E105                       	smpsAlterNote       $05
000B7222 E701                       	dc.b	smpsNoAttack, $01
000B7224 E101                       	smpsAlterNote       $01
000B7226 E701                       	dc.b	smpsNoAttack, $01
000B7228 E105                       	smpsAlterNote       $05
000B722A E701                       	dc.b	smpsNoAttack, $01
000B722C E10B                       	smpsAlterNote       $0B
000B722E E701                       	dc.b	smpsNoAttack, $01
000B7230 E10C                       	smpsAlterNote       $0C
000B7232 E701                       	dc.b	smpsNoAttack, $01
000B7234 E108                       	smpsAlterNote       $08
000B7236 E701                       	dc.b	smpsNoAttack, $01
000B7238 E107                       	smpsAlterNote       $07
000B723A CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
000B7244 E10B                       	smpsAlterNote       $0B
000B7246 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000B7250 E109                       	smpsAlterNote       $09
000B7252 C203                       	dc.b	nF5, $03
000B7254 E108                       	smpsAlterNote       $08
000B7256 C103 8001                  	dc.b	nE5, $03, nRst, $01
000B725A E109                       	smpsAlterNote       $09
000B725C C20D                       	dc.b	nF5, $0D
000B725E E108                       	smpsAlterNote       $08
000B7260 C10E                       	dc.b	nE5, $0E
000B7262 E107                       	smpsAlterNote       $07
000B7264 BF0D                       	dc.b	nD5, $0D
000B7266 E104                       	smpsAlterNote       $04
000B7268 E701                       	dc.b	smpsNoAttack, $01
000B726A E100                       	smpsAlterNote       $00
000B726C E701                       	dc.b	smpsNoAttack, $01
000B726E E104                       	smpsAlterNote       $04
000B7270 E701                       	dc.b	smpsNoAttack, $01
000B7272 E107                       	smpsAlterNote       $07
000B7274 E701                       	dc.b	smpsNoAttack, $01
000B7276 E10B                       	smpsAlterNote       $0B
000B7278 E701                       	dc.b	smpsNoAttack, $01
000B727A E107                       	smpsAlterNote       $07
000B727C E701                       	dc.b	smpsNoAttack, $01
000B727E E101                       	smpsAlterNote       $01
000B7280 E701                       	dc.b	smpsNoAttack, $01
000B7282 E100                       	smpsAlterNote       $00
000B7284 E701                       	dc.b	smpsNoAttack, $01
000B7286 E104                       	smpsAlterNote       $04
000B7288 E701                       	dc.b	smpsNoAttack, $01
000B728A E10A                       	smpsAlterNote       $0A
000B728C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7290 E107                       	smpsAlterNote       $07
000B7292 E701                       	dc.b	smpsNoAttack, $01
000B7294 E101                       	smpsAlterNote       $01
000B7296 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B729A E107                       	smpsAlterNote       $07
000B729C E701                       	dc.b	smpsNoAttack, $01
000B729E E10A                       	smpsAlterNote       $0A
000B72A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B72A4 E104                       	smpsAlterNote       $04
000B72A6 E701                       	dc.b	smpsNoAttack, $01
000B72A8 E100                       	smpsAlterNote       $00
000B72AA E701                       	dc.b	smpsNoAttack, $01
000B72AC E101                       	smpsAlterNote       $01
000B72AE E701                       	dc.b	smpsNoAttack, $01
000B72B0 E107                       	smpsAlterNote       $07
000B72B2 E701                       	dc.b	smpsNoAttack, $01
000B72B4 E10B                       	smpsAlterNote       $0B
000B72B6 E701                       	dc.b	smpsNoAttack, $01
000B72B8 E107                       	smpsAlterNote       $07
000B72BA E701                       	dc.b	smpsNoAttack, $01
000B72BC E104                       	smpsAlterNote       $04
000B72BE E701                       	dc.b	smpsNoAttack, $01
000B72C0 E100                       	smpsAlterNote       $00
000B72C2 E701                       	dc.b	smpsNoAttack, $01
000B72C4 E104                       	smpsAlterNote       $04
000B72C6 E701                       	dc.b	smpsNoAttack, $01
000B72C8 E10A                       	smpsAlterNote       $0A
000B72CA E701                       	dc.b	smpsNoAttack, $01
000B72CC E10B                       	smpsAlterNote       $0B
000B72CE E701                       	dc.b	smpsNoAttack, $01
000B72D0 E107                       	smpsAlterNote       $07
000B72D2 E701                       	dc.b	smpsNoAttack, $01
000B72D4 E101                       	smpsAlterNote       $01
000B72D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B72DA E104                       	smpsAlterNote       $04
000B72DC E701                       	dc.b	smpsNoAttack, $01
000B72DE E10A                       	smpsAlterNote       $0A
000B72E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B72E4 E104                       	smpsAlterNote       $04
000B72E6 E701                       	dc.b	smpsNoAttack, $01
000B72E8 E101                       	smpsAlterNote       $01
000B72EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B72EE E107                       	smpsAlterNote       $07
000B72F0 E701                       	dc.b	smpsNoAttack, $01
000B72F2 E10B                       	smpsAlterNote       $0B
000B72F4 E701                       	dc.b	smpsNoAttack, $01
000B72F6 E10A                       	smpsAlterNote       $0A
000B72F8 E701                       	dc.b	smpsNoAttack, $01
000B72FA E104                       	smpsAlterNote       $04
000B72FC E701                       	dc.b	smpsNoAttack, $01
000B72FE E100                       	smpsAlterNote       $00
000B7300 E701                       	dc.b	smpsNoAttack, $01
000B7302 E104                       	smpsAlterNote       $04
000B7304 E701                       	dc.b	smpsNoAttack, $01
000B7306 E107                       	smpsAlterNote       $07
000B7308 E701                       	dc.b	smpsNoAttack, $01
000B730A E10B                       	smpsAlterNote       $0B
000B730C E701                       	dc.b	smpsNoAttack, $01
000B730E E107                       	smpsAlterNote       $07
000B7310 E701                       	dc.b	smpsNoAttack, $01
000B7312 E101                       	smpsAlterNote       $01
000B7314 E701                       	dc.b	smpsNoAttack, $01
000B7316 E100                       	smpsAlterNote       $00
000B7318 E701                       	dc.b	smpsNoAttack, $01
000B731A E104                       	smpsAlterNote       $04
000B731C E701                       	dc.b	smpsNoAttack, $01
000B731E E10A                       	smpsAlterNote       $0A
000B7320 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7324 E107                       	smpsAlterNote       $07
000B7326 E701                       	dc.b	smpsNoAttack, $01
000B7328 E101                       	smpsAlterNote       $01
000B732A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B732E E107                       	smpsAlterNote       $07
000B7330 E701                       	dc.b	smpsNoAttack, $01
000B7332 E10A                       	smpsAlterNote       $0A
000B7334 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7338 E104                       	smpsAlterNote       $04
000B733A E701                       	dc.b	smpsNoAttack, $01
000B733C E100                       	smpsAlterNote       $00
000B733E E701                       	dc.b	smpsNoAttack, $01
000B7340 E101                       	smpsAlterNote       $01
000B7342 E701                       	dc.b	smpsNoAttack, $01
000B7344 E107                       	smpsAlterNote       $07
000B7346 E701                       	dc.b	smpsNoAttack, $01
000B7348 E10B                       	smpsAlterNote       $0B
000B734A E701                       	dc.b	smpsNoAttack, $01
000B734C E107                       	smpsAlterNote       $07
000B734E E701                       	dc.b	smpsNoAttack, $01
000B7350 E104                       	smpsAlterNote       $04
000B7352 E701                       	dc.b	smpsNoAttack, $01
000B7354 E100                       	smpsAlterNote       $00
000B7356 E701                       	dc.b	smpsNoAttack, $01
000B7358 E101                       	smpsAlterNote       $01
000B735A 8001                       	dc.b	nRst, $01
000B735C E109                       	smpsAlterNote       $09
000B735E C20D                       	dc.b	nF5, $0D
000B7360 E106                       	smpsAlterNote       $06
000B7362 E701                       	dc.b	smpsNoAttack, $01
000B7364 E102                       	smpsAlterNote       $02
000B7366 E701                       	dc.b	smpsNoAttack, $01
000B7368 E106                       	smpsAlterNote       $06
000B736A E701                       	dc.b	smpsNoAttack, $01
000B736C E10C                       	smpsAlterNote       $0C
000B736E E701                       	dc.b	smpsNoAttack, $01
000B7370 E10D                       	smpsAlterNote       $0D
000B7372 E701                       	dc.b	smpsNoAttack, $01
000B7374 E109                       	smpsAlterNote       $09
000B7376 E701                       	dc.b	smpsNoAttack, $01
000B7378 E103                       	smpsAlterNote       $03
000B737A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B737E E106                       	smpsAlterNote       $06
000B7380 E701                       	dc.b	smpsNoAttack, $01
000B7382 E10C                       	smpsAlterNote       $0C
000B7384 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7388 E106                       	smpsAlterNote       $06
000B738A E701                       	dc.b	smpsNoAttack, $01
000B738C E103                       	smpsAlterNote       $03
000B738E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7392 E109                       	smpsAlterNote       $09
000B7394 E701                       	dc.b	smpsNoAttack, $01
000B7396 E10D                       	smpsAlterNote       $0D
000B7398 E701                       	dc.b	smpsNoAttack, $01
000B739A E10C                       	smpsAlterNote       $0C
000B739C E701                       	dc.b	smpsNoAttack, $01
000B739E E109                       	smpsAlterNote       $09
000B73A0 8001                       	dc.b	nRst, $01
000B73A2 E108                       	smpsAlterNote       $08
000B73A4 C10D                       	dc.b	nE5, $0D
000B73A6 E109                       	smpsAlterNote       $09
000B73A8 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
000B73AC E108                       	smpsAlterNote       $08
000B73AE C10D                       	dc.b	nE5, $0D
000B73B0 E102                       	smpsAlterNote       $02
000B73B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B73B6 E105                       	smpsAlterNote       $05
000B73B8 E701                       	dc.b	smpsNoAttack, $01
000B73BA E108                       	smpsAlterNote       $08
000B73BC 8001                       	dc.b	nRst, $01
000B73BE E107                       	smpsAlterNote       $07
000B73C0 BF0D                       	dc.b	nD5, $0D
000B73C2 E108                       	smpsAlterNote       $08
000B73C4 C107                       	dc.b	nE5, $07
000B73C6 E109                       	smpsAlterNote       $09
000B73C8 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
000B73CE E10B                       	smpsAlterNote       $0B
000B73D0 C603                       	dc.b	nA5, $03
000B73D2 E10C                       	smpsAlterNote       $0C
000B73D4 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
000B73DA E10B                       	smpsAlterNote       $0B
000B73DC C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
000B73E2 E109                       	smpsAlterNote       $09
000B73E4 D003                       	dc.b	nG6, $03
000B73E6 E108                       	smpsAlterNote       $08
000B73E8 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000B73EC E10B                       	smpsAlterNote       $0B
000B73EE C601 8001                  	dc.b	nA5, $01, nRst, $01
000B73F2 E108                       	smpsAlterNote       $08
000B73F4 C102                       	dc.b	nE5, $02
000B73F8 E10C                       	smpsAlterNote       $0C
000B73FA E6FB                       	smpsAlterVol        $FB
000B73FC A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
000B7408 8001                       	dc.b	nRst, $01
000B740A E10B                       	smpsAlterNote       $0B
000B740C A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000B7414 E107                       	smpsAlterNote       $07
000B7416 A706 8001                  	dc.b	nD3, $06, nRst, $01
000B741A E10B                       	smpsAlterNote       $0B
000B741C A203                       	dc.b	nA2, $03
000B741E E109                       	smpsAlterNote       $09
000B7420 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000B7424 E108                       	smpsAlterNote       $08
000B7426 A906                       	dc.b	nE3, $06
000B7428 E107                       	smpsAlterNote       $07
000B742A A703 8001                  	dc.b	nD3, $03, nRst, $01
000B742E E106                       	smpsAlterNote       $06
000B7430 A503                       	dc.b	nC3, $03
000B7432 E10C                       	smpsAlterNote       $0C
000B7434 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000B7438 E10B                       	smpsAlterNote       $0B
000B743A A203 8004                  	dc.b	nA2, $03, nRst, $04
000B743E E11B                       	smpsAlterNote       $1B
000B7440 C401                       	dc.b	nG5, $01
000B7442 E1F4                       	smpsAlterNote       $F4
000B7444 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000B7447 E106                       	smpsAlterNote       $06
000B7449 E701                       	dc.b	smpsNoAttack, $01
000B744B E10F                       	smpsAlterNote       $0F
000B744D E701                       	dc.b	smpsNoAttack, $01
000B744F E1E4                       	smpsAlterNote       $E4
000B7451 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000B7454 E1F6                       	smpsAlterNote       $F6
000B7456 E701                       	dc.b	smpsNoAttack, $01
000B7458 E108                       	smpsAlterNote       $08
000B745A E701                       	dc.b	smpsNoAttack, $01
000B745C E10B                       	smpsAlterNote       $0B
000B745E E706                       	dc.b	smpsNoAttack, $06
000B7460 E105                       	smpsAlterNote       $05
000B7462 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7466 E108                       	smpsAlterNote       $08
000B7468 E701                       	dc.b	smpsNoAttack, $01
000B746A E10E                       	smpsAlterNote       $0E
000B746C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7470 E108                       	smpsAlterNote       $08
000B7472 E701                       	dc.b	smpsNoAttack, $01
000B7474 E105                       	smpsAlterNote       $05
000B7476 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B747A E10B                       	smpsAlterNote       $0B
000B747C E701                       	dc.b	smpsNoAttack, $01
000B747E E10F                       	smpsAlterNote       $0F
000B7480 E701                       	dc.b	smpsNoAttack, $01
000B7482 E10E                       	smpsAlterNote       $0E
000B7484 E701                       	dc.b	smpsNoAttack, $01
000B7486 E108                       	smpsAlterNote       $08
000B7488 E701                       	dc.b	smpsNoAttack, $01
000B748A E104                       	smpsAlterNote       $04
000B748C E701                       	dc.b	smpsNoAttack, $01
000B748E E108                       	smpsAlterNote       $08
000B7490 E701                       	dc.b	smpsNoAttack, $01
000B7492 E10B                       	smpsAlterNote       $0B
000B7494 E701                       	dc.b	smpsNoAttack, $01
000B7496 E10F                       	smpsAlterNote       $0F
000B7498 E701                       	dc.b	smpsNoAttack, $01
000B749A E10B                       	smpsAlterNote       $0B
000B749C E701                       	dc.b	smpsNoAttack, $01
000B749E E105                       	smpsAlterNote       $05
000B74A0 E701                       	dc.b	smpsNoAttack, $01
000B74A2 E104                       	smpsAlterNote       $04
000B74A4 E701                       	dc.b	smpsNoAttack, $01
000B74A6 E108                       	smpsAlterNote       $08
000B74A8 E701                       	dc.b	smpsNoAttack, $01
000B74AA E10E                       	smpsAlterNote       $0E
000B74AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B74B0 E10B                       	smpsAlterNote       $0B
000B74B2 E701                       	dc.b	smpsNoAttack, $01
000B74B4 E105                       	smpsAlterNote       $05
000B74B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B74BA E10B                       	smpsAlterNote       $0B
000B74BC E701                       	dc.b	smpsNoAttack, $01
000B74BE E10E                       	smpsAlterNote       $0E
000B74C0 E701                       	dc.b	smpsNoAttack, $01
000B74C2 E10F                       	smpsAlterNote       $0F
000B74C4 8001                       	dc.b	nRst, $01
000B74C6 E109                       	smpsAlterNote       $09
000B74C8 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000B74CE E108                       	smpsAlterNote       $08
000B74D0 C101 8001                  	dc.b	nE5, $01, nRst, $01
000B74D4 E109                       	smpsAlterNote       $09
000B74D6 C202                       	dc.b	nF5, $02
000B74D8 E108                       	smpsAlterNote       $08
000B74DA C102                       	dc.b	nE5, $02
000B74DC E107                       	smpsAlterNote       $07
000B74DE BF02 8001                  	dc.b	nD5, $02, nRst, $01
000B74E2 E108                       	smpsAlterNote       $08
000B74E4 C101 8001                  	dc.b	nE5, $01, nRst, $01
000B74E8 E107                       	smpsAlterNote       $07
000B74EA BF02                       	dc.b	nD5, $02
000B74EC E106                       	smpsAlterNote       $06
000B74EE BD02 8001                  	dc.b	nC5, $02, nRst, $01
000B74F2 E107                       	smpsAlterNote       $07
000B74F4 BF01 8001                  	dc.b	nD5, $01, nRst, $01
000B74F8 E106                       	smpsAlterNote       $06
000B74FA BD02                       	dc.b	nC5, $02
000B74FC E10C                       	smpsAlterNote       $0C
000B74FE BB02                       	dc.b	nBb4, $02
000B7500 E106                       	smpsAlterNote       $06
000B7502 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000B7506 E10C                       	smpsAlterNote       $0C
000B7508 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000B750C E10B                       	smpsAlterNote       $0B
000B750E BA02                       	dc.b	nA4, $02
000B7510 E10C                       	smpsAlterNote       $0C
000B7512 BB02                       	dc.b	nBb4, $02
000B7514 E10B                       	smpsAlterNote       $0B
000B7516 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000B7520 E108                       	smpsAlterNote       $08
000B7522 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
000B752A E107                       	smpsAlterNote       $07
000B752C BE02                       	dc.b	nCs5, $02
000B752E E10B                       	smpsAlterNote       $0B
000B7530 BA02                       	dc.b	nA4, $02
000B7532 E109                       	smpsAlterNote       $09
000B7534 B802 8001                  	dc.b	nG4, $02, nRst, $01
000B7538 E108                       	smpsAlterNote       $08
000B753A B501 8001                  	dc.b	nE4, $01, nRst, $01
000B753E E10B                       	smpsAlterNote       $0B
000B7540 AE02                       	dc.b	nA3, $02
000B7542 E10C                       	smpsAlterNote       $0C
000B7544 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
000B7550 E10B                       	smpsAlterNote       $0B
000B7552 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000B755A E107                       	smpsAlterNote       $07
000B755C A706 8001                  	dc.b	nD3, $06, nRst, $01
000B7560 E10B                       	smpsAlterNote       $0B
000B7562 A203                       	dc.b	nA2, $03
000B7564 E109                       	smpsAlterNote       $09
000B7566 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000B756A E108                       	smpsAlterNote       $08
000B756C A906 8001                  	dc.b	nE3, $06, nRst, $01
000B7570 E107                       	smpsAlterNote       $07
000B7572 A702 8001                  	dc.b	nD3, $02, nRst, $01
000B7576 E106                       	smpsAlterNote       $06
000B7578 A503                       	dc.b	nC3, $03
000B757A E10C                       	smpsAlterNote       $0C
000B757C A303 8001                  	dc.b	nBb2, $03, nRst, $01
000B7582 E107                       	smpsAlterNote       $07
000B7584 B20D                       	dc.b	nCs4, $0D
000B7586 E104                       	smpsAlterNote       $04
000B7588 E701                       	dc.b	smpsNoAttack, $01
000B758A E100                       	smpsAlterNote       $00
000B758C E701                       	dc.b	smpsNoAttack, $01
000B758E E104                       	smpsAlterNote       $04
000B7590 E701                       	dc.b	smpsNoAttack, $01
000B7592 E10A                       	smpsAlterNote       $0A
000B7594 E701                       	dc.b	smpsNoAttack, $01
000B7596 E10B                       	smpsAlterNote       $0B
000B7598 E701                       	dc.b	smpsNoAttack, $01
000B759A E107                       	smpsAlterNote       $07
000B759C E701                       	dc.b	smpsNoAttack, $01
000B759E E101                       	smpsAlterNote       $01
000B75A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B75A4 E104                       	smpsAlterNote       $04
000B75A6 E701                       	dc.b	smpsNoAttack, $01
000B75A8 E10A                       	smpsAlterNote       $0A
000B75AA E701                       	dc.b	smpsNoAttack, $01
000B75AC E10B                       	smpsAlterNote       $0B
000B75AE 8001                       	dc.b	nRst, $01
000B75B0 E107                       	smpsAlterNote       $07
000B75B2 B30D                       	dc.b	nD4, $0D
000B75B4 E104                       	smpsAlterNote       $04
000B75B6 E701                       	dc.b	smpsNoAttack, $01
000B75B8 E100                       	smpsAlterNote       $00
000B75BA E701                       	dc.b	smpsNoAttack, $01
000B75BC E104                       	smpsAlterNote       $04
000B75BE E701                       	dc.b	smpsNoAttack, $01
000B75C0 E10A                       	smpsAlterNote       $0A
000B75C2 E701                       	dc.b	smpsNoAttack, $01
000B75C4 E10B                       	smpsAlterNote       $0B
000B75C6 E701                       	dc.b	smpsNoAttack, $01
000B75C8 E107                       	smpsAlterNote       $07
000B75CA E701                       	dc.b	smpsNoAttack, $01
000B75CC E101                       	smpsAlterNote       $01
000B75CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B75D2 E104                       	smpsAlterNote       $04
000B75D4 E701                       	dc.b	smpsNoAttack, $01
000B75D6 E10A                       	smpsAlterNote       $0A
000B75D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B75DC E104                       	smpsAlterNote       $04
000B75DE E701                       	dc.b	smpsNoAttack, $01
000B75E0 E101                       	smpsAlterNote       $01
000B75E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B75E6 E107                       	smpsAlterNote       $07
000B75E8 E701                       	dc.b	smpsNoAttack, $01
000B75EA E10B                       	smpsAlterNote       $0B
000B75EC E701                       	dc.b	smpsNoAttack, $01
000B75EE E10A                       	smpsAlterNote       $0A
000B75F0 E701                       	dc.b	smpsNoAttack, $01
000B75F2 E107                       	smpsAlterNote       $07
000B75F4 8001                       	dc.b	nRst, $01
000B75F6 E108                       	smpsAlterNote       $08
000B75F8 B50D                       	dc.b	nE4, $0D
000B75FA E102                       	smpsAlterNote       $02
000B75FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7600 E105                       	smpsAlterNote       $05
000B7602 E701                       	dc.b	smpsNoAttack, $01
000B7604 E10B                       	smpsAlterNote       $0B
000B7606 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B760A E105                       	smpsAlterNote       $05
000B760C E701                       	dc.b	smpsNoAttack, $01
000B760E E102                       	smpsAlterNote       $02
000B7610 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7614 E108                       	smpsAlterNote       $08
000B7616 E701                       	dc.b	smpsNoAttack, $01
000B7618 E10C                       	smpsAlterNote       $0C
000B761A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B761E E107                       	smpsAlterNote       $07
000B7620 B30D                       	dc.b	nD4, $0D
000B7622 E101                       	smpsAlterNote       $01
000B7624 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7628 E104                       	smpsAlterNote       $04
000B762A E701                       	dc.b	smpsNoAttack, $01
000B762C E10A                       	smpsAlterNote       $0A
000B762E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7632 E104                       	smpsAlterNote       $04
000B7634 E701                       	dc.b	smpsNoAttack, $01
000B7636 E101                       	smpsAlterNote       $01
000B7638 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B763C E107                       	smpsAlterNote       $07
000B763E E701                       	dc.b	smpsNoAttack, $01
000B7640 E10B                       	smpsAlterNote       $0B
000B7642 E701                       	dc.b	smpsNoAttack, $01
000B7644 E10A                       	smpsAlterNote       $0A
000B7646 E701                       	dc.b	smpsNoAttack, $01
000B7648 E104                       	smpsAlterNote       $04
000B764A E701                       	dc.b	smpsNoAttack, $01
000B764C E100                       	smpsAlterNote       $00
000B764E E701                       	dc.b	smpsNoAttack, $01
000B7650 E104                       	smpsAlterNote       $04
000B7652 E701                       	dc.b	smpsNoAttack, $01
000B7654 E107                       	smpsAlterNote       $07
000B7656 E701                       	dc.b	smpsNoAttack, $01
000B7658 E10B                       	smpsAlterNote       $0B
000B765A E701                       	dc.b	smpsNoAttack, $01
000B765C E107                       	smpsAlterNote       $07
000B765E E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
000B7662 E101                       	smpsAlterNote       $01
000B7664 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7668 E107                       	smpsAlterNote       $07
000B766A E701                       	dc.b	smpsNoAttack, $01
000B766C E10A                       	smpsAlterNote       $0A
000B766E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7672 E104                       	smpsAlterNote       $04
000B7674 E701                       	dc.b	smpsNoAttack, $01
000B7676 E100                       	smpsAlterNote       $00
000B7678 E701                       	dc.b	smpsNoAttack, $01
000B767A E101                       	smpsAlterNote       $01
000B767C E701                       	dc.b	smpsNoAttack, $01
000B767E E107                       	smpsAlterNote       $07
000B7680 E701                       	dc.b	smpsNoAttack, $01
000B7682 E10B                       	smpsAlterNote       $0B
000B7684 E701                       	dc.b	smpsNoAttack, $01
000B7686 E107                       	smpsAlterNote       $07
000B7688 B30E                       	dc.b	nD4, $0E
000B768A E101                       	smpsAlterNote       $01
000B768C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7690 E107                       	smpsAlterNote       $07
000B7692 E701                       	dc.b	smpsNoAttack, $01
000B7694 E10A                       	smpsAlterNote       $0A
000B7696 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B769A E104                       	smpsAlterNote       $04
000B769C E701                       	dc.b	smpsNoAttack, $01
000B769E E100                       	smpsAlterNote       $00
000B76A0 E701                       	dc.b	smpsNoAttack, $01
000B76A2 E101                       	smpsAlterNote       $01
000B76A4 E701                       	dc.b	smpsNoAttack, $01
000B76A6 E107                       	smpsAlterNote       $07
000B76A8 E701                       	dc.b	smpsNoAttack, $01
000B76AA E10B                       	smpsAlterNote       $0B
000B76AC E701                       	dc.b	smpsNoAttack, $01
000B76AE E107                       	smpsAlterNote       $07
000B76B0 E701                       	dc.b	smpsNoAttack, $01
000B76B2 E104                       	smpsAlterNote       $04
000B76B4 E701                       	dc.b	smpsNoAttack, $01
000B76B6 E100                       	smpsAlterNote       $00
000B76B8 E701                       	dc.b	smpsNoAttack, $01
000B76BA E104                       	smpsAlterNote       $04
000B76BC E701                       	dc.b	smpsNoAttack, $01
000B76BE E10A                       	smpsAlterNote       $0A
000B76C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B76C4 E107                       	smpsAlterNote       $07
000B76C6 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000B76CA E104                       	smpsAlterNote       $04
000B76CC E701                       	dc.b	smpsNoAttack, $01
000B76CE E100                       	smpsAlterNote       $00
000B76D0 E701                       	dc.b	smpsNoAttack, $01
000B76D2 E101                       	smpsAlterNote       $01
000B76D4 E701                       	dc.b	smpsNoAttack, $01
000B76D6 E107                       	smpsAlterNote       $07
000B76D8 E701                       	dc.b	smpsNoAttack, $01
000B76DA E10B                       	smpsAlterNote       $0B
000B76DC E701                       	dc.b	smpsNoAttack, $01
000B76DE E107                       	smpsAlterNote       $07
000B76E0 E701                       	dc.b	smpsNoAttack, $01
000B76E2 E104                       	smpsAlterNote       $04
000B76E4 E701                       	dc.b	smpsNoAttack, $01
000B76E6 E100                       	smpsAlterNote       $00
000B76E8 E701                       	dc.b	smpsNoAttack, $01
000B76EA E104                       	smpsAlterNote       $04
000B76EC E701                       	dc.b	smpsNoAttack, $01
000B76EE E10A                       	smpsAlterNote       $0A
000B76F0 E701                       	dc.b	smpsNoAttack, $01
000B76F2 E10B                       	smpsAlterNote       $0B
000B76F4 E701                       	dc.b	smpsNoAttack, $01
000B76F8 E6FF                       	smpsAlterVol        $FF
000B76FA A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
000B7706 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
000B770E E109                       	smpsAlterNote       $09
000B7710 E601                       	smpsAlterVol        $01
000B7712 B60D                       	dc.b	nF4, $0D
000B7714 E106                       	smpsAlterNote       $06
000B7716 E701                       	dc.b	smpsNoAttack, $01
000B7718 E102                       	smpsAlterNote       $02
000B771A E701                       	dc.b	smpsNoAttack, $01
000B771C E106                       	smpsAlterNote       $06
000B771E E701                       	dc.b	smpsNoAttack, $01
000B7720 E109                       	smpsAlterNote       $09
000B7722 E701                       	dc.b	smpsNoAttack, $01
000B7724 E10D                       	smpsAlterNote       $0D
000B7726 E701                       	dc.b	smpsNoAttack, $01
000B7728 E109                       	smpsAlterNote       $09
000B772A E701                       	dc.b	smpsNoAttack, $01
000B772C E103                       	smpsAlterNote       $03
000B772E E701                       	dc.b	smpsNoAttack, $01
000B7730 E102                       	smpsAlterNote       $02
000B7732 E701                       	dc.b	smpsNoAttack, $01
000B7734 E106                       	smpsAlterNote       $06
000B7736 E701                       	dc.b	smpsNoAttack, $01
000B7738 E10C                       	smpsAlterNote       $0C
000B773A E701                       	dc.b	smpsNoAttack, $01
000B773C E10D                       	smpsAlterNote       $0D
000B773E 8001                       	dc.b	nRst, $01
000B7740 E109                       	smpsAlterNote       $09
000B7742 B80D                       	dc.b	nG4, $0D
000B7744 E106                       	smpsAlterNote       $06
000B7746 E701                       	dc.b	smpsNoAttack, $01
000B7748 E102                       	smpsAlterNote       $02
000B774A E701                       	dc.b	smpsNoAttack, $01
000B774C E106                       	smpsAlterNote       $06
000B774E E701                       	dc.b	smpsNoAttack, $01
000B7750 E109                       	smpsAlterNote       $09
000B7752 E701                       	dc.b	smpsNoAttack, $01
000B7754 E10D                       	smpsAlterNote       $0D
000B7756 E701                       	dc.b	smpsNoAttack, $01
000B7758 E109                       	smpsAlterNote       $09
000B775A E701                       	dc.b	smpsNoAttack, $01
000B775C E103                       	smpsAlterNote       $03
000B775E E701                       	dc.b	smpsNoAttack, $01
000B7760 E102                       	smpsAlterNote       $02
000B7762 E701                       	dc.b	smpsNoAttack, $01
000B7764 E106                       	smpsAlterNote       $06
000B7766 E701                       	dc.b	smpsNoAttack, $01
000B7768 E10C                       	smpsAlterNote       $0C
000B776A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B776E E106                       	smpsAlterNote       $06
000B7770 E701                       	dc.b	smpsNoAttack, $01
000B7772 E103                       	smpsAlterNote       $03
000B7774 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7778 E109                       	smpsAlterNote       $09
000B777A E701                       	dc.b	smpsNoAttack, $01
000B777C E10D                       	smpsAlterNote       $0D
000B777E E701                       	dc.b	smpsNoAttack, $01
000B7780 E10C                       	smpsAlterNote       $0C
000B7782 E701                       	dc.b	smpsNoAttack, $01
000B7784 E109                       	smpsAlterNote       $09
000B7786 8001                       	dc.b	nRst, $01
000B7788 E10B                       	smpsAlterNote       $0B
000B778A BA0D                       	dc.b	nA4, $0D
000B778C E105                       	smpsAlterNote       $05
000B778E E701                       	dc.b	smpsNoAttack, $01
000B7790 E104                       	smpsAlterNote       $04
000B7792 E701                       	dc.b	smpsNoAttack, $01
000B7794 E108                       	smpsAlterNote       $08
000B7796 E701                       	dc.b	smpsNoAttack, $01
000B7798 E10E                       	smpsAlterNote       $0E
000B779A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B779E E10B                       	smpsAlterNote       $0B
000B77A0 E701                       	dc.b	smpsNoAttack, $01
000B77A2 E105                       	smpsAlterNote       $05
000B77A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B77A8 E10B                       	smpsAlterNote       $0B
000B77AA E701                       	dc.b	smpsNoAttack, $01
000B77AC E10E                       	smpsAlterNote       $0E
000B77AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B77B2 E108                       	smpsAlterNote       $08
000B77B4 E701                       	dc.b	smpsNoAttack, $01
000B77B6 E104                       	smpsAlterNote       $04
000B77B8 E701                       	dc.b	smpsNoAttack, $01
000B77BA E105                       	smpsAlterNote       $05
000B77BC E701                       	dc.b	smpsNoAttack, $01
000B77BE E10B                       	smpsAlterNote       $0B
000B77C0 E701                       	dc.b	smpsNoAttack, $01
000B77C2 E10F                       	smpsAlterNote       $0F
000B77C4 E701                       	dc.b	smpsNoAttack, $01
000B77C6 E10B                       	smpsAlterNote       $0B
000B77C8 E701                       	dc.b	smpsNoAttack, $01
000B77CA E108                       	smpsAlterNote       $08
000B77CC E701                       	dc.b	smpsNoAttack, $01
000B77CE E104                       	smpsAlterNote       $04
000B77D0 E701                       	dc.b	smpsNoAttack, $01
000B77D2 E108                       	smpsAlterNote       $08
000B77D4 E701                       	dc.b	smpsNoAttack, $01
000B77D6 E10E                       	smpsAlterNote       $0E
000B77D8 E701                       	dc.b	smpsNoAttack, $01
000B77DA E10F                       	smpsAlterNote       $0F
000B77DC E701                       	dc.b	smpsNoAttack, $01
000B77DE E10B                       	smpsAlterNote       $0B
000B77E0 E701                       	dc.b	smpsNoAttack, $01
000B77E2 E105                       	smpsAlterNote       $05
000B77E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B77E8 E108                       	smpsAlterNote       $08
000B77EA E701                       	dc.b	smpsNoAttack, $01
000B77EC E10E                       	smpsAlterNote       $0E
000B77EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B77F2 E108                       	smpsAlterNote       $08
000B77F4 E701                       	dc.b	smpsNoAttack, $01
000B77F6 E105                       	smpsAlterNote       $05
000B77F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B77FC E108                       	smpsAlterNote       $08
000B77FE B50A 8001                  	dc.b	nE4, $0A, nRst, $01
000B7802 E109                       	smpsAlterNote       $09
000B7804 B60D                       	dc.b	nF4, $0D
000B7806 E103                       	smpsAlterNote       $03
000B7808 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B780C E106                       	smpsAlterNote       $06
000B780E E701                       	dc.b	smpsNoAttack, $01
000B7810 E10C                       	smpsAlterNote       $0C
000B7812 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7816 E106                       	smpsAlterNote       $06
000B7818 E701                       	dc.b	smpsNoAttack, $01
000B781A E103                       	smpsAlterNote       $03
000B781C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7820 E109                       	smpsAlterNote       $09
000B7822 E701                       	dc.b	smpsNoAttack, $01
000B7824 E10D                       	smpsAlterNote       $0D
000B7826 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B782A E109                       	smpsAlterNote       $09
000B782C B80D                       	dc.b	nG4, $0D
000B782E E103                       	smpsAlterNote       $03
000B7830 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7834 E109                       	smpsAlterNote       $09
000B7836 E701                       	dc.b	smpsNoAttack, $01
000B7838 E10C                       	smpsAlterNote       $0C
000B783A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B783E E106                       	smpsAlterNote       $06
000B7840 E701                       	dc.b	smpsNoAttack, $01
000B7842 E102                       	smpsAlterNote       $02
000B7844 E701                       	dc.b	smpsNoAttack, $01
000B7846 E103                       	smpsAlterNote       $03
000B7848 E701                       	dc.b	smpsNoAttack, $01
000B784A E109                       	smpsAlterNote       $09
000B784C E701                       	dc.b	smpsNoAttack, $01
000B784E E10D                       	smpsAlterNote       $0D
000B7850 E701                       	dc.b	smpsNoAttack, $01
000B7852 E109                       	smpsAlterNote       $09
000B7854 E701                       	dc.b	smpsNoAttack, $01
000B7856 E106                       	smpsAlterNote       $06
000B7858 E701                       	dc.b	smpsNoAttack, $01
000B785A E102                       	smpsAlterNote       $02
000B785C E701                       	dc.b	smpsNoAttack, $01
000B785E E106                       	smpsAlterNote       $06
000B7860 E701                       	dc.b	smpsNoAttack, $01
000B7862 E10C                       	smpsAlterNote       $0C
000B7864 E701                       	dc.b	smpsNoAttack, $01
000B7866 E10D                       	smpsAlterNote       $0D
000B7868 E701                       	dc.b	smpsNoAttack, $01
000B786A E109                       	smpsAlterNote       $09
000B786C E701                       	dc.b	smpsNoAttack, $01
000B786E E10B                       	smpsAlterNote       $0B
000B7870 BA0D                       	dc.b	nA4, $0D
000B7872 E108                       	smpsAlterNote       $08
000B7874 E701                       	dc.b	smpsNoAttack, $01
000B7876 E105                       	smpsAlterNote       $05
000B7878 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B787C E10B                       	smpsAlterNote       $0B
000B787E E701                       	dc.b	smpsNoAttack, $01
000B7880 E10F                       	smpsAlterNote       $0F
000B7882 E701                       	dc.b	smpsNoAttack, $01
000B7884 E10E                       	smpsAlterNote       $0E
000B7886 E701                       	dc.b	smpsNoAttack, $01
000B7888 E108                       	smpsAlterNote       $08
000B788A E701                       	dc.b	smpsNoAttack, $01
000B788C E104                       	smpsAlterNote       $04
000B788E E701                       	dc.b	smpsNoAttack, $01
000B7890 E108                       	smpsAlterNote       $08
000B7892 E701                       	dc.b	smpsNoAttack, $01
000B7894 E10B                       	smpsAlterNote       $0B
000B7896 E701                       	dc.b	smpsNoAttack, $01
000B7898 E10F                       	smpsAlterNote       $0F
000B789A E701                       	dc.b	smpsNoAttack, $01
000B789C E10B                       	smpsAlterNote       $0B
000B789E E701                       	dc.b	smpsNoAttack, $01
000B78A0 E105                       	smpsAlterNote       $05
000B78A2 E701                       	dc.b	smpsNoAttack, $01
000B78A4 E104                       	smpsAlterNote       $04
000B78A6 E701                       	dc.b	smpsNoAttack, $01
000B78A8 E108                       	smpsAlterNote       $08
000B78AA E701                       	dc.b	smpsNoAttack, $01
000B78AC E10E                       	smpsAlterNote       $0E
000B78AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B78B2 E10B                       	smpsAlterNote       $0B
000B78B4 E701                       	dc.b	smpsNoAttack, $01
000B78B6 E105                       	smpsAlterNote       $05
000B78B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B78BC E10B                       	smpsAlterNote       $0B
000B78BE E701                       	dc.b	smpsNoAttack, $01
000B78C0 E10E                       	smpsAlterNote       $0E
000B78C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B78C6 E108                       	smpsAlterNote       $08
000B78C8 E701                       	dc.b	smpsNoAttack, $01
000B78CA E105                       	smpsAlterNote       $05
000B78CC 8001                       	dc.b	nRst, $01
000B78CE E109                       	smpsAlterNote       $09
000B78D0 B60A                       	dc.b	nF4, $0A
000B78D2 E108                       	smpsAlterNote       $08
000B78D4 B507                       	dc.b	nE4, $07
000B78D6 E107                       	smpsAlterNote       $07
000B78D8 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000B78DC E108                       	smpsAlterNote       $08
000B78DE B503                       	dc.b	nE4, $03
000B78E0 E109                       	smpsAlterNote       $09
000B78E2 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
000B78EA E10B                       	smpsAlterNote       $0B
000B78EC BA0D                       	dc.b	nA4, $0D
000B78EE E108                       	smpsAlterNote       $08
000B78F0 E701                       	dc.b	smpsNoAttack, $01
000B78F2 E104                       	smpsAlterNote       $04
000B78F4 E701                       	dc.b	smpsNoAttack, $01
000B78F6 E108                       	smpsAlterNote       $08
000B78F8 E701                       	dc.b	smpsNoAttack, $01
000B78FA E10B                       	smpsAlterNote       $0B
000B78FC E701                       	dc.b	smpsNoAttack, $01
000B78FE E10F                       	smpsAlterNote       $0F
000B7900 E701                       	dc.b	smpsNoAttack, $01
000B7902 E10B                       	smpsAlterNote       $0B
000B7904 E701                       	dc.b	smpsNoAttack, $01
000B7906 E105                       	smpsAlterNote       $05
000B7908 E701                       	dc.b	smpsNoAttack, $01
000B790A E104                       	smpsAlterNote       $04
000B790C E701                       	dc.b	smpsNoAttack, $01
000B790E E108                       	smpsAlterNote       $08
000B7910 E701                       	dc.b	smpsNoAttack, $01
000B7912 E10E                       	smpsAlterNote       $0E
000B7914 E701                       	dc.b	smpsNoAttack, $01
000B7916 E10F                       	smpsAlterNote       $0F
000B7918 8001                       	dc.b	nRst, $01
000B791A E109                       	smpsAlterNote       $09
000B791C C20D                       	dc.b	nF5, $0D
000B791E E106                       	smpsAlterNote       $06
000B7920 E701                       	dc.b	smpsNoAttack, $01
000B7922 E102                       	smpsAlterNote       $02
000B7924 E701                       	dc.b	smpsNoAttack, $01
000B7926 E106                       	smpsAlterNote       $06
000B7928 E701                       	dc.b	smpsNoAttack, $01
000B792A E109                       	smpsAlterNote       $09
000B792C E701                       	dc.b	smpsNoAttack, $01
000B792E E10D                       	smpsAlterNote       $0D
000B7930 E701                       	dc.b	smpsNoAttack, $01
000B7932 E109                       	smpsAlterNote       $09
000B7934 E701                       	dc.b	smpsNoAttack, $01
000B7936 E103                       	smpsAlterNote       $03
000B7938 E701                       	dc.b	smpsNoAttack, $01
000B793A E102                       	smpsAlterNote       $02
000B793C E701                       	dc.b	smpsNoAttack, $01
000B793E E106                       	smpsAlterNote       $06
000B7940 E701                       	dc.b	smpsNoAttack, $01
000B7942 E10C                       	smpsAlterNote       $0C
000B7944 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7948 E109                       	smpsAlterNote       $09
000B794A E701                       	dc.b	smpsNoAttack, $01
000B794C E103                       	smpsAlterNote       $03
000B794E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7952 E109                       	smpsAlterNote       $09
000B7954 E701                       	dc.b	smpsNoAttack, $01
000B7956 E10C                       	smpsAlterNote       $0C
000B7958 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B795C E106                       	smpsAlterNote       $06
000B795E E701                       	dc.b	smpsNoAttack, $01
000B7960 E102                       	smpsAlterNote       $02
000B7962 E701                       	dc.b	smpsNoAttack, $01
000B7964 E103                       	smpsAlterNote       $03
000B7966 E701                       	dc.b	smpsNoAttack, $01
000B7968 E109                       	smpsAlterNote       $09
000B796A E701                       	dc.b	smpsNoAttack, $01
000B796C E10D                       	smpsAlterNote       $0D
000B796E E701                       	dc.b	smpsNoAttack, $01
000B7970 E109                       	smpsAlterNote       $09
000B7972 E701                       	dc.b	smpsNoAttack, $01
000B7974 E106                       	smpsAlterNote       $06
000B7976 E701                       	dc.b	smpsNoAttack, $01
000B7978 E102                       	smpsAlterNote       $02
000B797A E701                       	dc.b	smpsNoAttack, $01
000B797C E106                       	smpsAlterNote       $06
000B797E E701                       	dc.b	smpsNoAttack, $01
000B7980 E10C                       	smpsAlterNote       $0C
000B7982 E701                       	dc.b	smpsNoAttack, $01
000B7984 E10D                       	smpsAlterNote       $0D
000B7986 E701                       	dc.b	smpsNoAttack, $01
000B7988 E109                       	smpsAlterNote       $09
000B798A E701                       	dc.b	smpsNoAttack, $01
000B798C E103                       	smpsAlterNote       $03
000B798E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7992 E106                       	smpsAlterNote       $06
000B7994 E701                       	dc.b	smpsNoAttack, $01
000B7996 E10C                       	smpsAlterNote       $0C
000B7998 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B799C E106                       	smpsAlterNote       $06
000B799E E701                       	dc.b	smpsNoAttack, $01
000B79A0 E103                       	smpsAlterNote       $03
000B79A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B79A6 E109                       	smpsAlterNote       $09
000B79A8 E701                       	dc.b	smpsNoAttack, $01
000B79AA E10D                       	smpsAlterNote       $0D
000B79AC E701                       	dc.b	smpsNoAttack, $01
000B79AE E10C                       	smpsAlterNote       $0C
000B79B0 E701                       	dc.b	smpsNoAttack, $01
000B79B2 E106                       	smpsAlterNote       $06
000B79B4 E701                       	dc.b	smpsNoAttack, $01
000B79B6 E103                       	smpsAlterNote       $03
000B79B8 8001                       	dc.b	nRst, $01
000B79BA E109                       	smpsAlterNote       $09
000B79BC C206 8001                  	dc.b	nF5, $06, nRst, $01
000B79C2 E10C                       	smpsAlterNote       $0C
000B79C4 E601                       	smpsAlterVol        $01
000B79C6 BB0D                       	dc.b	nBb4, $0D
000B79C8 E106                       	smpsAlterNote       $06
000B79CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B79CE E109                       	smpsAlterNote       $09
000B79D0 E701                       	dc.b	smpsNoAttack, $01
000B79D2 E10F                       	smpsAlterNote       $0F
000B79D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B79D8 E109                       	smpsAlterNote       $09
000B79DA E701                       	dc.b	smpsNoAttack, $01
000B79DC E106                       	smpsAlterNote       $06
000B79DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B79E2 E10C                       	smpsAlterNote       $0C
000B79E4 E701                       	dc.b	smpsNoAttack, $01
000B79E6 E110                       	smpsAlterNote       $10
000B79E8 E701                       	dc.b	smpsNoAttack, $01
000B79EA E10F                       	smpsAlterNote       $0F
000B79EC E701                       	dc.b	smpsNoAttack, $01
000B79EE E109                       	smpsAlterNote       $09
000B79F0 E701                       	dc.b	smpsNoAttack, $01
000B79F2 E105                       	smpsAlterNote       $05
000B79F4 E701                       	dc.b	smpsNoAttack, $01
000B79F6 E106                       	smpsAlterNote       $06
000B79F8 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000B79FC E103                       	smpsAlterNote       $03
000B79FE E701                       	dc.b	smpsNoAttack, $01
000B7A00 E1FF                       	smpsAlterNote       $FF
000B7A02 E701                       	dc.b	smpsNoAttack, $01
000B7A04 E103                       	smpsAlterNote       $03
000B7A06 E701                       	dc.b	smpsNoAttack, $01
000B7A08 E106                       	smpsAlterNote       $06
000B7A0A E701                       	dc.b	smpsNoAttack, $01
000B7A0C E10A                       	smpsAlterNote       $0A
000B7A0E E701                       	dc.b	smpsNoAttack, $01
000B7A10 E106                       	smpsAlterNote       $06
000B7A12 E701                       	dc.b	smpsNoAttack, $01
000B7A14 E100                       	smpsAlterNote       $00
000B7A16 E701                       	dc.b	smpsNoAttack, $01
000B7A18 E1FF                       	smpsAlterNote       $FF
000B7A1A E701                       	dc.b	smpsNoAttack, $01
000B7A1C E103                       	smpsAlterNote       $03
000B7A1E E701                       	dc.b	smpsNoAttack, $01
000B7A20 E109                       	smpsAlterNote       $09
000B7A22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7A26 E106                       	smpsAlterNote       $06
000B7A28 E701                       	dc.b	smpsNoAttack, $01
000B7A2A E100                       	smpsAlterNote       $00
000B7A2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7A30 E107                       	smpsAlterNote       $07
000B7A32 BF0E                       	dc.b	nD5, $0E
000B7A34 E101                       	smpsAlterNote       $01
000B7A36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7A3A E107                       	smpsAlterNote       $07
000B7A3C E701                       	dc.b	smpsNoAttack, $01
000B7A3E E10A                       	smpsAlterNote       $0A
000B7A40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7A44 E104                       	smpsAlterNote       $04
000B7A46 E701                       	dc.b	smpsNoAttack, $01
000B7A48 E100                       	smpsAlterNote       $00
000B7A4A E701                       	dc.b	smpsNoAttack, $01
000B7A4C E101                       	smpsAlterNote       $01
000B7A4E E701                       	dc.b	smpsNoAttack, $01
000B7A50 E107                       	smpsAlterNote       $07
000B7A52 E701                       	dc.b	smpsNoAttack, $01
000B7A54 E10B                       	smpsAlterNote       $0B
000B7A56 E701                       	dc.b	smpsNoAttack, $01
000B7A58 E107                       	smpsAlterNote       $07
000B7A5A E701                       	dc.b	smpsNoAttack, $01
000B7A5C E104                       	smpsAlterNote       $04
000B7A5E E701                       	dc.b	smpsNoAttack, $01
000B7A60 E100                       	smpsAlterNote       $00
000B7A62 E701                       	dc.b	smpsNoAttack, $01
000B7A64 E101                       	smpsAlterNote       $01
000B7A66 8001                       	dc.b	nRst, $01
000B7A68 E108                       	smpsAlterNote       $08
000B7A6A C10C                       	dc.b	nE5, $0C
000B7A6C E109                       	smpsAlterNote       $09
000B7A6E C201 8001                  	dc.b	nF5, $01, nRst, $01
000B7A72 E10A                       	smpsAlterNote       $0A
000B7A74 8001                       	dc.b	nRst, $01
000B7A76 E109                       	smpsAlterNote       $09
000B7A78 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000B7A7C E106                       	smpsAlterNote       $06
000B7A7E E701                       	dc.b	smpsNoAttack, $01
000B7A80 E102                       	smpsAlterNote       $02
000B7A82 E701                       	dc.b	smpsNoAttack, $01
000B7A84 E103                       	smpsAlterNote       $03
000B7A86 E701                       	dc.b	smpsNoAttack, $01
000B7A88 E109                       	smpsAlterNote       $09
000B7A8A E701                       	dc.b	smpsNoAttack, $01
000B7A8C E10D                       	smpsAlterNote       $0D
000B7A8E E701                       	dc.b	smpsNoAttack, $01
000B7A90 E109                       	smpsAlterNote       $09
000B7A92 E701                       	dc.b	smpsNoAttack, $01
000B7A94 E106                       	smpsAlterNote       $06
000B7A96 E701                       	dc.b	smpsNoAttack, $01
000B7A98 E102                       	smpsAlterNote       $02
000B7A9A E701                       	dc.b	smpsNoAttack, $01
000B7A9C E106                       	smpsAlterNote       $06
000B7A9E E701                       	dc.b	smpsNoAttack, $01
000B7AA0 E10C                       	smpsAlterNote       $0C
000B7AA2 E701                       	dc.b	smpsNoAttack, $01
000B7AA4 E10D                       	smpsAlterNote       $0D
000B7AA6 E701                       	dc.b	smpsNoAttack, $01
000B7AA8 E109                       	smpsAlterNote       $09
000B7AAA C40D                       	dc.b	nG5, $0D
000B7AAC E106                       	smpsAlterNote       $06
000B7AAE E701                       	dc.b	smpsNoAttack, $01
000B7AB0 E102                       	smpsAlterNote       $02
000B7AB2 E701                       	dc.b	smpsNoAttack, $01
000B7AB4 E103                       	smpsAlterNote       $03
000B7AB6 E701                       	dc.b	smpsNoAttack, $01
000B7AB8 E109                       	smpsAlterNote       $09
000B7ABA E701                       	dc.b	smpsNoAttack, $01
000B7ABC E108                       	smpsAlterNote       $08
000B7ABE C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
000B7ACA E109                       	smpsAlterNote       $09
000B7ACC C20D                       	dc.b	nF5, $0D
000B7ACE E106                       	smpsAlterNote       $06
000B7AD0 E701                       	dc.b	smpsNoAttack, $01
000B7AD2 E102                       	smpsAlterNote       $02
000B7AD4 E701                       	dc.b	smpsNoAttack, $01
000B7AD6 E106                       	smpsAlterNote       $06
000B7AD8 E701                       	dc.b	smpsNoAttack, $01
000B7ADA E109                       	smpsAlterNote       $09
000B7ADC E701                       	dc.b	smpsNoAttack, $01
000B7ADE E10D                       	smpsAlterNote       $0D
000B7AE0 E701                       	dc.b	smpsNoAttack, $01
000B7AE2 E109                       	smpsAlterNote       $09
000B7AE4 E701                       	dc.b	smpsNoAttack, $01
000B7AE6 E103                       	smpsAlterNote       $03
000B7AE8 E701                       	dc.b	smpsNoAttack, $01
000B7AEA E102                       	smpsAlterNote       $02
000B7AEC E701                       	dc.b	smpsNoAttack, $01
000B7AEE E106                       	smpsAlterNote       $06
000B7AF0 E701                       	dc.b	smpsNoAttack, $01
000B7AF2 E10C                       	smpsAlterNote       $0C
000B7AF4 E701                       	dc.b	smpsNoAttack, $01
000B7AF6 E10D                       	smpsAlterNote       $0D
000B7AF8 8001                       	dc.b	nRst, $01
000B7AFA E112                       	smpsAlterNote       $12
000B7AFC C401                       	dc.b	nG5, $01
000B7AFE E1EB                       	smpsAlterNote       $EB
000B7B00 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000B7B03 E1FD                       	smpsAlterNote       $FD
000B7B05 E701                       	dc.b	smpsNoAttack, $01
000B7B07 E10F                       	smpsAlterNote       $0F
000B7B09 E701                       	dc.b	smpsNoAttack, $01
000B7B0B E118                       	smpsAlterNote       $18
000B7B0D E701                       	dc.b	smpsNoAttack, $01
000B7B0F E1ED                       	smpsAlterNote       $ED
000B7B11 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000B7B14 E1FF                       	smpsAlterNote       $FF
000B7B16 E701                       	dc.b	smpsNoAttack, $01
000B7B18 E10B                       	smpsAlterNote       $0B
000B7B1A E703                       	dc.b	smpsNoAttack, $03
000B7B1C E109                       	smpsAlterNote       $09
000B7B1E C407                       	dc.b	nG5, $07
000B7B20 E108                       	smpsAlterNote       $08
000B7B22 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
000B7B2E E109                       	smpsAlterNote       $09
000B7B30 C20D                       	dc.b	nF5, $0D
000B7B32 E103                       	smpsAlterNote       $03
000B7B34 E701                       	dc.b	smpsNoAttack, $01
000B7B36 E102                       	smpsAlterNote       $02
000B7B38 E701                       	dc.b	smpsNoAttack, $01
000B7B3A E106                       	smpsAlterNote       $06
000B7B3C E701                       	dc.b	smpsNoAttack, $01
000B7B3E E10C                       	smpsAlterNote       $0C
000B7B40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7B44 E109                       	smpsAlterNote       $09
000B7B46 E701                       	dc.b	smpsNoAttack, $01
000B7B48 E103                       	smpsAlterNote       $03
000B7B4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7B4E E109                       	smpsAlterNote       $09
000B7B50 E701                       	dc.b	smpsNoAttack, $01
000B7B52 E10C                       	smpsAlterNote       $0C
000B7B54 E701                       	dc.b	smpsNoAttack, $01
000B7B56 E10D                       	smpsAlterNote       $0D
000B7B58 8001                       	dc.b	nRst, $01
000B7B5A E10B                       	smpsAlterNote       $0B
000B7B5C C609 8001                  	dc.b	nA5, $09, nRst, $01
000B7B60 E109                       	smpsAlterNote       $09
000B7B62 B806 8001                  	dc.b	nG4, $06, nRst, $01
000B7B66 E108                       	smpsAlterNote       $08
000B7B68 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000B7B74 8001                       	dc.b	nRst, $01
000B7B76 E109                       	smpsAlterNote       $09
000B7B78 C20D                       	dc.b	nF5, $0D
000B7B7A E103                       	smpsAlterNote       $03
000B7B7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7B80 E106                       	smpsAlterNote       $06
000B7B82 E701                       	dc.b	smpsNoAttack, $01
000B7B84 E10C                       	smpsAlterNote       $0C
000B7B86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7B8A E106                       	smpsAlterNote       $06
000B7B8C E701                       	dc.b	smpsNoAttack, $01
000B7B8E E103                       	smpsAlterNote       $03
000B7B90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7B94 E109                       	smpsAlterNote       $09
000B7B96 E701                       	dc.b	smpsNoAttack, $01
000B7B98 E10D                       	smpsAlterNote       $0D
000B7B9A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B7BA0 E108                       	smpsAlterNote       $08
000B7BA2 E6FF                       	smpsAlterVol        $FF
000B7BA4 A806                       	dc.b	nEb3, $06
000B7BA6 E10C                       	smpsAlterNote       $0C
000B7BA8 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000B7BAC E108                       	smpsAlterNote       $08
000B7BAE A803                       	dc.b	nEb3, $03
000B7BB0 E109                       	smpsAlterNote       $09
000B7BB2 AC03 8001                  	dc.b	nG3, $03, nRst, $01
000B7BB6 E10C                       	smpsAlterNote       $0C
000B7BB8 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
000B7BC2 E109                       	smpsAlterNote       $09
000B7BC4 E602                       	smpsAlterVol        $02
000B7BC6 B604                       	dc.b	nF4, $04
000B7BC8 E602                       	smpsAlterVol        $02
000B7BCA F6F1 AA                    	smpsJump            music84_Jump02
000B7BCD                            
000B7BCD                            ; FM4 Data
000B7BCD                            music84_FM4:
000B7BCF E040                       	smpsPan             panRight, $00
000B7BD1 8003                       	dc.b	nRst, $03
000B7BD3 E10F                       	smpsAlterNote       $0F
000B7BD5 C603 8008                  	dc.b	nA5, $03, nRst, $08
000B7BD9 E10D                       	smpsAlterNote       $0D
000B7BDB C403 800A                  	dc.b	nG5, $03, nRst, $0A
000B7BDF E10C                       	smpsAlterNote       $0C
000B7BE1 C103 8004                  	dc.b	nE5, $03, nRst, $04
000B7BE7 E6FE                       	smpsAlterVol        $FE
000B7BE9 E110                       	smpsAlterNote       $10
000B7BEB C703 8001                  	dc.b	nBb5, $03, nRst, $01
000B7BEF E10F                       	smpsAlterNote       $0F
000B7BF1 C602 8001                  	dc.b	nA5, $02, nRst, $01
000B7BF5 E10D                       	smpsAlterNote       $0D
000B7BF7 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
000B7C00 E10C                       	smpsAlterNote       $0C
000B7C02 C103                       	dc.b	nE5, $03
000B7C04 E10A                       	smpsAlterNote       $0A
000B7C06 BD03 8001                  	dc.b	nC5, $03, nRst, $01
000B7C0C 03                         	dc.b	$03
000B7C0D                            
000B7C0D                            music84_Jump01:
000B7C0D E10B                       	smpsAlterNote       $0B
000B7C0F BF03 8001                  	dc.b	nD5, $03, nRst, $01
000B7C13 E10C                       	smpsAlterNote       $0C
000B7C15 C102 8001                  	dc.b	nE5, $02, nRst, $01
000B7C19 E10D                       	smpsAlterNote       $0D
000B7C1B C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000B7C25 E10B                       	smpsAlterNote       $0B
000B7C27 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
000B7C2B E107                       	smpsAlterNote       $07
000B7C2D E701                       	dc.b	smpsNoAttack, $01
000B7C2F E103                       	smpsAlterNote       $03
000B7C31 E701                       	dc.b	smpsNoAttack, $01
000B7C33 E104                       	smpsAlterNote       $04
000B7C35 E701                       	dc.b	smpsNoAttack, $01
000B7C37 E10A                       	smpsAlterNote       $0A
000B7C39 E701                       	dc.b	smpsNoAttack, $01
000B7C3B E10E                       	smpsAlterNote       $0E
000B7C3D E701                       	dc.b	smpsNoAttack, $01
000B7C3F E10A                       	smpsAlterNote       $0A
000B7C41 E701                       	dc.b	smpsNoAttack, $01
000B7C43 E107                       	smpsAlterNote       $07
000B7C45 E701                       	dc.b	smpsNoAttack, $01
000B7C47 E104                       	smpsAlterNote       $04
000B7C49 8001                       	dc.b	nRst, $01
000B7C4B E110                       	smpsAlterNote       $10
000B7C4D C703                       	dc.b	nBb5, $03
000B7C4F E10F                       	smpsAlterNote       $0F
000B7C51 C603 8001                  	dc.b	nA5, $03, nRst, $01
000B7C55 E10D                       	smpsAlterNote       $0D
000B7C57 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
000B7C5D E10C                       	smpsAlterNote       $0C
000B7C5F E701                       	dc.b	smpsNoAttack, $01
000B7C61 E108                       	smpsAlterNote       $08
000B7C63 E701                       	dc.b	smpsNoAttack, $01
000B7C65 E10C                       	smpsAlterNote       $0C
000B7C67 E701                       	dc.b	smpsNoAttack, $01
000B7C69 E10F                       	smpsAlterNote       $0F
000B7C6B E701                       	dc.b	smpsNoAttack, $01
000B7C6D E113                       	smpsAlterNote       $13
000B7C6F E701                       	dc.b	smpsNoAttack, $01
000B7C71 E10F                       	smpsAlterNote       $0F
000B7C73 E701                       	dc.b	smpsNoAttack, $01
000B7C75 E109                       	smpsAlterNote       $09
000B7C77 E701                       	dc.b	smpsNoAttack, $01
000B7C79 E108                       	smpsAlterNote       $08
000B7C7B E701                       	dc.b	smpsNoAttack, $01
000B7C7D E10C                       	smpsAlterNote       $0C
000B7C7F E701                       	dc.b	smpsNoAttack, $01
000B7C81 E112                       	smpsAlterNote       $12
000B7C83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7C87 E10C                       	smpsAlterNote       $0C
000B7C89 E701                       	dc.b	smpsNoAttack, $01
000B7C8B E109                       	smpsAlterNote       $09
000B7C8D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7C91 E10F                       	smpsAlterNote       $0F
000B7C93 E701                       	dc.b	smpsNoAttack, $01
000B7C95 E113                       	smpsAlterNote       $13
000B7C97 E701                       	dc.b	smpsNoAttack, $01
000B7C99 E112                       	smpsAlterNote       $12
000B7C9B E701                       	dc.b	smpsNoAttack, $01
000B7C9D E10C                       	smpsAlterNote       $0C
000B7C9F E701                       	dc.b	smpsNoAttack, $01
000B7CA1 E108                       	smpsAlterNote       $08
000B7CA3 E701                       	dc.b	smpsNoAttack, $01
000B7CA5 E10C                       	smpsAlterNote       $0C
000B7CA7 E701                       	dc.b	smpsNoAttack, $01
000B7CA9 E10F                       	smpsAlterNote       $0F
000B7CAB E701                       	dc.b	smpsNoAttack, $01
000B7CAD E113                       	smpsAlterNote       $13
000B7CAF E701                       	dc.b	smpsNoAttack, $01
000B7CB1 E10F                       	smpsAlterNote       $0F
000B7CB3 E701                       	dc.b	smpsNoAttack, $01
000B7CB5 E109                       	smpsAlterNote       $09
000B7CB7 E701                       	dc.b	smpsNoAttack, $01
000B7CB9 E108                       	smpsAlterNote       $08
000B7CBB E701                       	dc.b	smpsNoAttack, $01
000B7CBD E10C                       	smpsAlterNote       $0C
000B7CBF E701                       	dc.b	smpsNoAttack, $01
000B7CC1 E112                       	smpsAlterNote       $12
000B7CC3 E701                       	dc.b	smpsNoAttack, $01
000B7CC5 E113                       	smpsAlterNote       $13
000B7CC7 800F                       	dc.b	nRst, $0F
000B7CC9 E10B                       	smpsAlterNote       $0B
000B7CCB BF03                       	dc.b	nD5, $03
000B7CCD E10C                       	smpsAlterNote       $0C
000B7CCF C103 8001                  	dc.b	nE5, $03, nRst, $01
000B7CD3 E10D                       	smpsAlterNote       $0D
000B7CD5 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
000B7CDD E10B                       	smpsAlterNote       $0B
000B7CDF BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
000B7CE9 E110                       	smpsAlterNote       $10
000B7CEB C704                       	dc.b	nBb5, $04
000B7CED E10F                       	smpsAlterNote       $0F
000B7CEF C604 8001                  	dc.b	nA5, $04, nRst, $01
000B7CF3 E10D                       	smpsAlterNote       $0D
000B7CF5 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000B7CFB E109                       	smpsAlterNote       $09
000B7CFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7D01 E10F                       	smpsAlterNote       $0F
000B7D03 E701                       	dc.b	smpsNoAttack, $01
000B7D05 E112                       	smpsAlterNote       $12
000B7D07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7D0B E10C                       	smpsAlterNote       $0C
000B7D0D E701                       	dc.b	smpsNoAttack, $01
000B7D0F E108                       	smpsAlterNote       $08
000B7D11 E701                       	dc.b	smpsNoAttack, $01
000B7D13 E109                       	smpsAlterNote       $09
000B7D15 E701                       	dc.b	smpsNoAttack, $01
000B7D17 E10F                       	smpsAlterNote       $0F
000B7D19 E701                       	dc.b	smpsNoAttack, $01
000B7D1B E113                       	smpsAlterNote       $13
000B7D1D E701                       	dc.b	smpsNoAttack, $01
000B7D1F E10F                       	smpsAlterNote       $0F
000B7D21 E701                       	dc.b	smpsNoAttack, $01
000B7D23 E10C                       	smpsAlterNote       $0C
000B7D25 E701                       	dc.b	smpsNoAttack, $01
000B7D27 E108                       	smpsAlterNote       $08
000B7D29 E701                       	dc.b	smpsNoAttack, $01
000B7D2B E10C                       	smpsAlterNote       $0C
000B7D2D E701                       	dc.b	smpsNoAttack, $01
000B7D2F E112                       	smpsAlterNote       $12
000B7D31 E701                       	dc.b	smpsNoAttack, $01
000B7D33 E113                       	smpsAlterNote       $13
000B7D35 E701                       	dc.b	smpsNoAttack, $01
000B7D37 E10F                       	smpsAlterNote       $0F
000B7D39 E701                       	dc.b	smpsNoAttack, $01
000B7D3B E109                       	smpsAlterNote       $09
000B7D3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7D41 E10C                       	smpsAlterNote       $0C
000B7D43 E701                       	dc.b	smpsNoAttack, $01
000B7D45 E112                       	smpsAlterNote       $12
000B7D47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7D4B E10C                       	smpsAlterNote       $0C
000B7D4D E701                       	dc.b	smpsNoAttack, $01
000B7D4F E109                       	smpsAlterNote       $09
000B7D51 E701                       	dc.b	smpsNoAttack, $01
000B7D53 E10D                       	smpsAlterNote       $0D
000B7D55 C401 8001                  	dc.b	nG5, $01, nRst, $01
000B7D59 E10F                       	smpsAlterNote       $0F
000B7D5B C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
000B7D65 E10D                       	smpsAlterNote       $0D
000B7D67 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000B7D6D E10B                       	smpsAlterNote       $0B
000B7D6F BF0D                       	dc.b	nD5, $0D
000B7D71 E108                       	smpsAlterNote       $08
000B7D73 E701                       	dc.b	smpsNoAttack, $01
000B7D75 E104                       	smpsAlterNote       $04
000B7D77 E701                       	dc.b	smpsNoAttack, $01
000B7D79 E108                       	smpsAlterNote       $08
000B7D7B E701                       	dc.b	smpsNoAttack, $01
000B7D7D E10B                       	smpsAlterNote       $0B
000B7D7F E701                       	dc.b	smpsNoAttack, $01
000B7D81 E10F                       	smpsAlterNote       $0F
000B7D83 E701                       	dc.b	smpsNoAttack, $01
000B7D85 E10B                       	smpsAlterNote       $0B
000B7D87 E701                       	dc.b	smpsNoAttack, $01
000B7D89 E105                       	smpsAlterNote       $05
000B7D8B E701                       	dc.b	smpsNoAttack, $01
000B7D8D E104                       	smpsAlterNote       $04
000B7D8F E701                       	dc.b	smpsNoAttack, $01
000B7D91 E108                       	smpsAlterNote       $08
000B7D93 E701                       	dc.b	smpsNoAttack, $01
000B7D95 E10E                       	smpsAlterNote       $0E
000B7D97 E701                       	dc.b	smpsNoAttack, $01
000B7D99 E10F                       	smpsAlterNote       $0F
000B7D9B 8001                       	dc.b	nRst, $01
000B7D9D E10C                       	smpsAlterNote       $0C
000B7D9F C101                       	dc.b	nE5, $01
000B7DA1 E10D                       	smpsAlterNote       $0D
000B7DA3 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
000B7DA9 E10F                       	smpsAlterNote       $0F
000B7DAB C606 8001                  	dc.b	nA5, $06, nRst, $01
000B7DAF E10C                       	smpsAlterNote       $0C
000B7DB1 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000B7DB5 E10D                       	smpsAlterNote       $0D
000B7DB7 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000B7DBB E10C                       	smpsAlterNote       $0C
000B7DBD CD03                       	dc.b	nE6, $03
000B7DBF E10A                       	smpsAlterNote       $0A
000B7DC1 C903 8001                  	dc.b	nC6, $03, nRst, $01
000B7DC5 E10D                       	smpsAlterNote       $0D
000B7DC7 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
000B7DCF E109                       	smpsAlterNote       $09
000B7DD1 E701                       	dc.b	smpsNoAttack, $01
000B7DD3 E10D                       	smpsAlterNote       $0D
000B7DD5 E701                       	dc.b	smpsNoAttack, $01
000B7DD7 E110                       	smpsAlterNote       $10
000B7DD9 E701                       	dc.b	smpsNoAttack, $01
000B7DDB E114                       	smpsAlterNote       $14
000B7DDD E701                       	dc.b	smpsNoAttack, $01
000B7DDF E110                       	smpsAlterNote       $10
000B7DE1 E701                       	dc.b	smpsNoAttack, $01
000B7DE3 E10A                       	smpsAlterNote       $0A
000B7DE5 E701                       	dc.b	smpsNoAttack, $01
000B7DE7 E109                       	smpsAlterNote       $09
000B7DE9 E701                       	dc.b	smpsNoAttack, $01
000B7DEB E10D                       	smpsAlterNote       $0D
000B7DED E701                       	dc.b	smpsNoAttack, $01
000B7DEF E113                       	smpsAlterNote       $13
000B7DF1 E701                       	dc.b	smpsNoAttack, $01
000B7DF3 E114                       	smpsAlterNote       $14
000B7DF5 8001                       	dc.b	nRst, $01
000B7DF7 E10F                       	smpsAlterNote       $0F
000B7DF9 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
000B7DFF E10C                       	smpsAlterNote       $0C
000B7E01 E701                       	dc.b	smpsNoAttack, $01
000B7E03 E108                       	smpsAlterNote       $08
000B7E05 E701                       	dc.b	smpsNoAttack, $01
000B7E07 E10C                       	smpsAlterNote       $0C
000B7E09 E701                       	dc.b	smpsNoAttack, $01
000B7E0B E112                       	smpsAlterNote       $12
000B7E0D E701                       	dc.b	smpsNoAttack, $01
000B7E0F E113                       	smpsAlterNote       $13
000B7E11 E701                       	dc.b	smpsNoAttack, $01
000B7E13 E10F                       	smpsAlterNote       $0F
000B7E15 E701                       	dc.b	smpsNoAttack, $01
000B7E17 E109                       	smpsAlterNote       $09
000B7E19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7E1D E10C                       	smpsAlterNote       $0C
000B7E1F E701                       	dc.b	smpsNoAttack, $01
000B7E21 E112                       	smpsAlterNote       $12
000B7E23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7E27 E10C                       	smpsAlterNote       $0C
000B7E29 E701                       	dc.b	smpsNoAttack, $01
000B7E2B E109                       	smpsAlterNote       $09
000B7E2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7E31 E10F                       	smpsAlterNote       $0F
000B7E33 E701                       	dc.b	smpsNoAttack, $01
000B7E35 E113                       	smpsAlterNote       $13
000B7E37 E701                       	dc.b	smpsNoAttack, $01
000B7E39 E112                       	smpsAlterNote       $12
000B7E3B E701                       	dc.b	smpsNoAttack, $01
000B7E3D E10C                       	smpsAlterNote       $0C
000B7E3F E701                       	dc.b	smpsNoAttack, $01
000B7E41 E108                       	smpsAlterNote       $08
000B7E43 E701                       	dc.b	smpsNoAttack, $01
000B7E45 E10C                       	smpsAlterNote       $0C
000B7E47 E701                       	dc.b	smpsNoAttack, $01
000B7E49 E10F                       	smpsAlterNote       $0F
000B7E4B E701                       	dc.b	smpsNoAttack, $01
000B7E4D E113                       	smpsAlterNote       $13
000B7E4F E701                       	dc.b	smpsNoAttack, $01
000B7E51 E10F                       	smpsAlterNote       $0F
000B7E53 E701                       	dc.b	smpsNoAttack, $01
000B7E55 E109                       	smpsAlterNote       $09
000B7E57 E701                       	dc.b	smpsNoAttack, $01
000B7E59 E108                       	smpsAlterNote       $08
000B7E5B E701                       	dc.b	smpsNoAttack, $01
000B7E5D E10C                       	smpsAlterNote       $0C
000B7E5F E701                       	dc.b	smpsNoAttack, $01
000B7E61 E112                       	smpsAlterNote       $12
000B7E63 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7E67 E10F                       	smpsAlterNote       $0F
000B7E69 E701                       	dc.b	smpsNoAttack, $01
000B7E6B E109                       	smpsAlterNote       $09
000B7E6D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7E71 E10F                       	smpsAlterNote       $0F
000B7E73 E701                       	dc.b	smpsNoAttack, $01
000B7E75 E113                       	smpsAlterNote       $13
000B7E77 E701                       	dc.b	smpsNoAttack, $01
000B7E79 E112                       	smpsAlterNote       $12
000B7E7B E701                       	dc.b	smpsNoAttack, $01
000B7E7D E10C                       	smpsAlterNote       $0C
000B7E7F E701                       	dc.b	smpsNoAttack, $01
000B7E81 E108                       	smpsAlterNote       $08
000B7E83 E701                       	dc.b	smpsNoAttack, $01
000B7E85 E10C                       	smpsAlterNote       $0C
000B7E87 E701                       	dc.b	smpsNoAttack, $01
000B7E89 E10F                       	smpsAlterNote       $0F
000B7E8B E701                       	dc.b	smpsNoAttack, $01
000B7E8D E113                       	smpsAlterNote       $13
000B7E8F E701                       	dc.b	smpsNoAttack, $01
000B7E91 E10F                       	smpsAlterNote       $0F
000B7E93 E701                       	dc.b	smpsNoAttack, $01
000B7E95 E109                       	smpsAlterNote       $09
000B7E97 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B7E9B E10F                       	smpsAlterNote       $0F
000B7E9D C60D                       	dc.b	nA5, $0D
000B7E9F E109                       	smpsAlterNote       $09
000B7EA1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7EA5 E10C                       	smpsAlterNote       $0C
000B7EA7 E701                       	dc.b	smpsNoAttack, $01
000B7EA9 E112                       	smpsAlterNote       $12
000B7EAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7EAF E10C                       	smpsAlterNote       $0C
000B7EB1 E701                       	dc.b	smpsNoAttack, $01
000B7EB3 E109                       	smpsAlterNote       $09
000B7EB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7EB9 E10F                       	smpsAlterNote       $0F
000B7EBB E701                       	dc.b	smpsNoAttack, $01
000B7EBD E113                       	smpsAlterNote       $13
000B7EBF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B7EC5 E10D                       	smpsAlterNote       $0D
000B7EC7 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
000B7ECF E10C                       	smpsAlterNote       $0C
000B7ED1 C103 800E                  	dc.b	nE5, $03, nRst, $0E
000B7ED7 E6FF                       	smpsAlterVol        $FF
000B7ED9 E10B                       	smpsAlterNote       $0B
000B7EDB BF03 8001                  	dc.b	nD5, $03, nRst, $01
000B7EDF E10C                       	smpsAlterNote       $0C
000B7EE1 C103                       	dc.b	nE5, $03
000B7EE3 E10D                       	smpsAlterNote       $0D
000B7EE5 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
000B7EEF E10B                       	smpsAlterNote       $0B
000B7EF1 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
000B7EF5 E107                       	smpsAlterNote       $07
000B7EF7 E701                       	dc.b	smpsNoAttack, $01
000B7EF9 E104                       	smpsAlterNote       $04
000B7EFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7EFF E10A                       	smpsAlterNote       $0A
000B7F01 E701                       	dc.b	smpsNoAttack, $01
000B7F03 E10D                       	smpsAlterNote       $0D
000B7F05 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7F09 E107                       	smpsAlterNote       $07
000B7F0B E701                       	dc.b	smpsNoAttack, $01
000B7F0D E104                       	smpsAlterNote       $04
000B7F0F 8001                       	dc.b	nRst, $01
000B7F11 E110                       	smpsAlterNote       $10
000B7F13 C703                       	dc.b	nBb5, $03
000B7F15 E10F                       	smpsAlterNote       $0F
000B7F17 C603 8001                  	dc.b	nA5, $03, nRst, $01
000B7F1B E10D                       	smpsAlterNote       $0D
000B7F1D C403 C60D                  	dc.b	nG5, $03, nA5, $0D
000B7F21 E10C                       	smpsAlterNote       $0C
000B7F23 E701                       	dc.b	smpsNoAttack, $01
000B7F25 E108                       	smpsAlterNote       $08
000B7F27 E701                       	dc.b	smpsNoAttack, $01
000B7F29 E109                       	smpsAlterNote       $09
000B7F2B E701                       	dc.b	smpsNoAttack, $01
000B7F2D E10F                       	smpsAlterNote       $0F
000B7F2F E701                       	dc.b	smpsNoAttack, $01
000B7F31 E113                       	smpsAlterNote       $13
000B7F33 E701                       	dc.b	smpsNoAttack, $01
000B7F35 E10F                       	smpsAlterNote       $0F
000B7F37 E701                       	dc.b	smpsNoAttack, $01
000B7F39 E10C                       	smpsAlterNote       $0C
000B7F3B E701                       	dc.b	smpsNoAttack, $01
000B7F3D E108                       	smpsAlterNote       $08
000B7F3F E701                       	dc.b	smpsNoAttack, $01
000B7F41 E10C                       	smpsAlterNote       $0C
000B7F43 E701                       	dc.b	smpsNoAttack, $01
000B7F45 E112                       	smpsAlterNote       $12
000B7F47 E701                       	dc.b	smpsNoAttack, $01
000B7F49 E113                       	smpsAlterNote       $13
000B7F4B E701                       	dc.b	smpsNoAttack, $01
000B7F4D E10F                       	smpsAlterNote       $0F
000B7F4F E701                       	dc.b	smpsNoAttack, $01
000B7F51 E109                       	smpsAlterNote       $09
000B7F53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7F57 E10C                       	smpsAlterNote       $0C
000B7F59 E701                       	dc.b	smpsNoAttack, $01
000B7F5B E112                       	smpsAlterNote       $12
000B7F5D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7F61 E10C                       	smpsAlterNote       $0C
000B7F63 E701                       	dc.b	smpsNoAttack, $01
000B7F65 E109                       	smpsAlterNote       $09
000B7F67 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7F6B E10F                       	smpsAlterNote       $0F
000B7F6D E701                       	dc.b	smpsNoAttack, $01
000B7F6F E113                       	smpsAlterNote       $13
000B7F71 E701                       	dc.b	smpsNoAttack, $01
000B7F73 E112                       	smpsAlterNote       $12
000B7F75 E701                       	dc.b	smpsNoAttack, $01
000B7F77 E10C                       	smpsAlterNote       $0C
000B7F79 E701                       	dc.b	smpsNoAttack, $01
000B7F7B E108                       	smpsAlterNote       $08
000B7F7D E701                       	dc.b	smpsNoAttack, $01
000B7F7F E10C                       	smpsAlterNote       $0C
000B7F81 E701                       	dc.b	smpsNoAttack, $01
000B7F83 E10F                       	smpsAlterNote       $0F
000B7F85 E701                       	dc.b	smpsNoAttack, $01
000B7F87 E113                       	smpsAlterNote       $13
000B7F89 E701                       	dc.b	smpsNoAttack, $01
000B7F8B E10F                       	smpsAlterNote       $0F
000B7F8D BA03 8001                  	dc.b	nA4, $03, nRst, $01
000B7F91 E110                       	smpsAlterNote       $10
000B7F93 BB03                       	dc.b	nBb4, $03
000B7F95 E10F                       	smpsAlterNote       $0F
000B7F97 BA06 8001                  	dc.b	nA4, $06, nRst, $01
000B7F9B E10B                       	smpsAlterNote       $0B
000B7F9D BF03                       	dc.b	nD5, $03
000B7F9F E10C                       	smpsAlterNote       $0C
000B7FA1 C103 8001                  	dc.b	nE5, $03, nRst, $01
000B7FA5 E10D                       	smpsAlterNote       $0D
000B7FA7 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000B7FB1 E10B                       	smpsAlterNote       $0B
000B7FB3 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
000B7FBF E110                       	smpsAlterNote       $10
000B7FC1 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000B7FC5 E10F                       	smpsAlterNote       $0F
000B7FC7 C604                       	dc.b	nA5, $04
000B7FC9 E10D                       	smpsAlterNote       $0D
000B7FCB C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000B7FD1 E109                       	smpsAlterNote       $09
000B7FD3 E701                       	dc.b	smpsNoAttack, $01
000B7FD5 E108                       	smpsAlterNote       $08
000B7FD7 E701                       	dc.b	smpsNoAttack, $01
000B7FD9 E10C                       	smpsAlterNote       $0C
000B7FDB E701                       	dc.b	smpsNoAttack, $01
000B7FDD E112                       	smpsAlterNote       $12
000B7FDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7FE3 E10F                       	smpsAlterNote       $0F
000B7FE5 E701                       	dc.b	smpsNoAttack, $01
000B7FE7 E109                       	smpsAlterNote       $09
000B7FE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7FED E10F                       	smpsAlterNote       $0F
000B7FEF E701                       	dc.b	smpsNoAttack, $01
000B7FF1 E112                       	smpsAlterNote       $12
000B7FF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B7FF7 E10C                       	smpsAlterNote       $0C
000B7FF9 E701                       	dc.b	smpsNoAttack, $01
000B7FFB E108                       	smpsAlterNote       $08
000B7FFD E701                       	dc.b	smpsNoAttack, $01
000B7FFF E109                       	smpsAlterNote       $09
000B8001 E701                       	dc.b	smpsNoAttack, $01
000B8003 E10F                       	smpsAlterNote       $0F
000B8005 E701                       	dc.b	smpsNoAttack, $01
000B8007 E113                       	smpsAlterNote       $13
000B8009 E701                       	dc.b	smpsNoAttack, $01
000B800B E10F                       	smpsAlterNote       $0F
000B800D E701                       	dc.b	smpsNoAttack, $01
000B800F E10C                       	smpsAlterNote       $0C
000B8011 E701                       	dc.b	smpsNoAttack, $01
000B8013 E108                       	smpsAlterNote       $08
000B8015 E701                       	dc.b	smpsNoAttack, $01
000B8017 E10C                       	smpsAlterNote       $0C
000B8019 E701                       	dc.b	smpsNoAttack, $01
000B801B E112                       	smpsAlterNote       $12
000B801D E701                       	dc.b	smpsNoAttack, $01
000B801F E113                       	smpsAlterNote       $13
000B8021 E701                       	dc.b	smpsNoAttack, $01
000B8023 E10F                       	smpsAlterNote       $0F
000B8025 E701                       	dc.b	smpsNoAttack, $01
000B8027 E109                       	smpsAlterNote       $09
000B8029 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B802D E10C                       	smpsAlterNote       $0C
000B802F E701                       	dc.b	smpsNoAttack, $01
000B8031 E112                       	smpsAlterNote       $12
000B8033 E701                       	dc.b	smpsNoAttack, $01
000B8035 E113                       	smpsAlterNote       $13
000B8037 8001                       	dc.b	nRst, $01
000B8039 E10F                       	smpsAlterNote       $0F
000B803B C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
000B8047 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
000B804F E10D                       	smpsAlterNote       $0D
000B8051 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000B8057 E10B                       	smpsAlterNote       $0B
000B8059 BF0D                       	dc.b	nD5, $0D
000B805B E108                       	smpsAlterNote       $08
000B805D E701                       	dc.b	smpsNoAttack, $01
000B805F E104                       	smpsAlterNote       $04
000B8061 E701                       	dc.b	smpsNoAttack, $01
000B8063 E105                       	smpsAlterNote       $05
000B8065 E701                       	dc.b	smpsNoAttack, $01
000B8067 E10B                       	smpsAlterNote       $0B
000B8069 E701                       	dc.b	smpsNoAttack, $01
000B806B E10F                       	smpsAlterNote       $0F
000B806D E701                       	dc.b	smpsNoAttack, $01
000B806F E10B                       	smpsAlterNote       $0B
000B8071 E701                       	dc.b	smpsNoAttack, $01
000B8073 E108                       	smpsAlterNote       $08
000B8075 E701                       	dc.b	smpsNoAttack, $01
000B8077 E104                       	smpsAlterNote       $04
000B8079 E701                       	dc.b	smpsNoAttack, $01
000B807B E108                       	smpsAlterNote       $08
000B807D E701                       	dc.b	smpsNoAttack, $01
000B807F E10E                       	smpsAlterNote       $0E
000B8081 E701                       	dc.b	smpsNoAttack, $01
000B8083 E10F                       	smpsAlterNote       $0F
000B8085 E701                       	dc.b	smpsNoAttack, $01
000B8087 E10C                       	smpsAlterNote       $0C
000B8089 C101                       	dc.b	nE5, $01
000B808B E10D                       	smpsAlterNote       $0D
000B808D C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000B8095 E10F                       	smpsAlterNote       $0F
000B8097 C607                       	dc.b	nA5, $07
000B8099 E10C                       	smpsAlterNote       $0C
000B809B CD07                       	dc.b	nE6, $07
000B809D E10D                       	smpsAlterNote       $0D
000B809F CE06 8001                  	dc.b	nF6, $06, nRst, $01
000B80A3 E10C                       	smpsAlterNote       $0C
000B80A5 CD03                       	dc.b	nE6, $03
000B80A7 E10A                       	smpsAlterNote       $0A
000B80A9 C903 8001                  	dc.b	nC6, $03, nRst, $01
000B80AD E10D                       	smpsAlterNote       $0D
000B80AF C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
000B80B5 E10A                       	smpsAlterNote       $0A
000B80B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B80BB E110                       	smpsAlterNote       $10
000B80BD E701                       	dc.b	smpsNoAttack, $01
000B80BF E114                       	smpsAlterNote       $14
000B80C1 E701                       	dc.b	smpsNoAttack, $01
000B80C3 E113                       	smpsAlterNote       $13
000B80C5 E701                       	dc.b	smpsNoAttack, $01
000B80C7 E10D                       	smpsAlterNote       $0D
000B80C9 E701                       	dc.b	smpsNoAttack, $01
000B80CB E109                       	smpsAlterNote       $09
000B80CD E701                       	dc.b	smpsNoAttack, $01
000B80CF E10D                       	smpsAlterNote       $0D
000B80D1 E701                       	dc.b	smpsNoAttack, $01
000B80D3 E110                       	smpsAlterNote       $10
000B80D5 E701                       	dc.b	smpsNoAttack, $01
000B80D7 E114                       	smpsAlterNote       $14
000B80D9 E701                       	dc.b	smpsNoAttack, $01
000B80DB E10F                       	smpsAlterNote       $0F
000B80DD C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
000B80E1 E10C                       	smpsAlterNote       $0C
000B80E3 E701                       	dc.b	smpsNoAttack, $01
000B80E5 E108                       	smpsAlterNote       $08
000B80E7 E701                       	dc.b	smpsNoAttack, $01
000B80E9 E10C                       	smpsAlterNote       $0C
000B80EB E701                       	dc.b	smpsNoAttack, $01
000B80ED E10F                       	smpsAlterNote       $0F
000B80EF E701                       	dc.b	smpsNoAttack, $01
000B80F1 E113                       	smpsAlterNote       $13
000B80F3 E701                       	dc.b	smpsNoAttack, $01
000B80F5 E10F                       	smpsAlterNote       $0F
000B80F7 E701                       	dc.b	smpsNoAttack, $01
000B80F9 E109                       	smpsAlterNote       $09
000B80FB E701                       	dc.b	smpsNoAttack, $01
000B80FD E108                       	smpsAlterNote       $08
000B80FF E701                       	dc.b	smpsNoAttack, $01
000B8101 E10C                       	smpsAlterNote       $0C
000B8103 E701                       	dc.b	smpsNoAttack, $01
000B8105 E112                       	smpsAlterNote       $12
000B8107 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B810B E10F                       	smpsAlterNote       $0F
000B810D E701                       	dc.b	smpsNoAttack, $01
000B810F E109                       	smpsAlterNote       $09
000B8111 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8115 E10F                       	smpsAlterNote       $0F
000B8117 E701                       	dc.b	smpsNoAttack, $01
000B8119 E112                       	smpsAlterNote       $12
000B811B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B811F E10C                       	smpsAlterNote       $0C
000B8121 E701                       	dc.b	smpsNoAttack, $01
000B8123 E108                       	smpsAlterNote       $08
000B8125 E701                       	dc.b	smpsNoAttack, $01
000B8127 E109                       	smpsAlterNote       $09
000B8129 E701                       	dc.b	smpsNoAttack, $01
000B812B E10F                       	smpsAlterNote       $0F
000B812D E701                       	dc.b	smpsNoAttack, $01
000B812F E113                       	smpsAlterNote       $13
000B8131 E701                       	dc.b	smpsNoAttack, $01
000B8133 E10F                       	smpsAlterNote       $0F
000B8135 E701                       	dc.b	smpsNoAttack, $01
000B8137 E10C                       	smpsAlterNote       $0C
000B8139 E701                       	dc.b	smpsNoAttack, $01
000B813B E108                       	smpsAlterNote       $08
000B813D E701                       	dc.b	smpsNoAttack, $01
000B813F E10C                       	smpsAlterNote       $0C
000B8141 E701                       	dc.b	smpsNoAttack, $01
000B8143 E112                       	smpsAlterNote       $12
000B8145 E701                       	dc.b	smpsNoAttack, $01
000B8147 E113                       	smpsAlterNote       $13
000B8149 E701                       	dc.b	smpsNoAttack, $01
000B814B E10F                       	smpsAlterNote       $0F
000B814D E701                       	dc.b	smpsNoAttack, $01
000B814F E109                       	smpsAlterNote       $09
000B8151 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8155 E10C                       	smpsAlterNote       $0C
000B8157 E701                       	dc.b	smpsNoAttack, $01
000B8159 E112                       	smpsAlterNote       $12
000B815B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B815F E10C                       	smpsAlterNote       $0C
000B8161 E701                       	dc.b	smpsNoAttack, $01
000B8163 E109                       	smpsAlterNote       $09
000B8165 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8169 E10F                       	smpsAlterNote       $0F
000B816B E701                       	dc.b	smpsNoAttack, $01
000B816D E113                       	smpsAlterNote       $13
000B816F E701                       	dc.b	smpsNoAttack, $01
000B8171 E112                       	smpsAlterNote       $12
000B8173 E701                       	dc.b	smpsNoAttack, $01
000B8175 E10C                       	smpsAlterNote       $0C
000B8177 E701                       	dc.b	smpsNoAttack, $01
000B8179 E109                       	smpsAlterNote       $09
000B817B 8001                       	dc.b	nRst, $01
000B817D E10F                       	smpsAlterNote       $0F
000B817F C60D                       	dc.b	nA5, $0D
000B8181 E10C                       	smpsAlterNote       $0C
000B8183 E701                       	dc.b	smpsNoAttack, $01
000B8185 E108                       	smpsAlterNote       $08
000B8187 E701                       	dc.b	smpsNoAttack, $01
000B8189 E10C                       	smpsAlterNote       $0C
000B818B E701                       	dc.b	smpsNoAttack, $01
000B818D E112                       	smpsAlterNote       $12
000B818F E701                       	dc.b	smpsNoAttack, $01
000B8191 E113                       	smpsAlterNote       $13
000B8193 E701                       	dc.b	smpsNoAttack, $01
000B8195 E10F                       	smpsAlterNote       $0F
000B8197 E701                       	dc.b	smpsNoAttack, $01
000B8199 E109                       	smpsAlterNote       $09
000B819B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B819F E10C                       	smpsAlterNote       $0C
000B81A1 E701                       	dc.b	smpsNoAttack, $01
000B81A3 E112                       	smpsAlterNote       $12
000B81A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B81A9 E10C                       	smpsAlterNote       $0C
000B81AB E701                       	dc.b	smpsNoAttack, $01
000B81AD E109                       	smpsAlterNote       $09
000B81AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B81B3 E10F                       	smpsAlterNote       $0F
000B81B5 E701                       	dc.b	smpsNoAttack, $01
000B81B7 E113                       	smpsAlterNote       $13
000B81B9 E701                       	dc.b	smpsNoAttack, $01
000B81BB E112                       	smpsAlterNote       $12
000B81BD E701                       	dc.b	smpsNoAttack, $01
000B81BF E10C                       	smpsAlterNote       $0C
000B81C1 E701                       	dc.b	smpsNoAttack, $01
000B81C3 E108                       	smpsAlterNote       $08
000B81C5 E701                       	dc.b	smpsNoAttack, $01
000B81C7 E10C                       	smpsAlterNote       $0C
000B81C9 E701                       	dc.b	smpsNoAttack, $01
000B81CB E10F                       	smpsAlterNote       $0F
000B81CD E701                       	dc.b	smpsNoAttack, $01
000B81CF E113                       	smpsAlterNote       $13
000B81D1 E701                       	dc.b	smpsNoAttack, $01
000B81D3 E10F                       	smpsAlterNote       $0F
000B81D5 E701                       	dc.b	smpsNoAttack, $01
000B81D7 E109                       	smpsAlterNote       $09
000B81D9 E701                       	dc.b	smpsNoAttack, $01
000B81DB E108                       	smpsAlterNote       $08
000B81DD E701                       	dc.b	smpsNoAttack, $01
000B81DF E10C                       	smpsAlterNote       $0C
000B81E1 E701                       	dc.b	smpsNoAttack, $01
000B81E3 E112                       	smpsAlterNote       $12
000B81E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B81E9 E10F                       	smpsAlterNote       $0F
000B81EB E701                       	dc.b	smpsNoAttack, $01
000B81ED E109                       	smpsAlterNote       $09
000B81EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B81F3 E10F                       	smpsAlterNote       $0F
000B81F5 E701                       	dc.b	smpsNoAttack, $01
000B81F7 E112                       	smpsAlterNote       $12
000B81F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B81FD E10C                       	smpsAlterNote       $0C
000B81FF E701                       	dc.b	smpsNoAttack, $01
000B8201 E108                       	smpsAlterNote       $08
000B8203 E701                       	dc.b	smpsNoAttack, $01
000B8205 E10C                       	smpsAlterNote       $0C
000B8207 E701                       	dc.b	smpsNoAttack, $01
000B8209 E10F                       	smpsAlterNote       $0F
000B820B E701                       	dc.b	smpsNoAttack, $01
000B820D E113                       	smpsAlterNote       $13
000B820F E701                       	dc.b	smpsNoAttack, $01
000B8211 E10F                       	smpsAlterNote       $0F
000B8213 E701                       	dc.b	smpsNoAttack, $01
000B8215 E109                       	smpsAlterNote       $09
000B8217 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B821D E601                       	smpsAlterVol        $01
000B821F E10F                       	smpsAlterNote       $0F
000B8221 C604                       	dc.b	nA5, $04
000B8223 E10D                       	smpsAlterNote       $0D
000B8225 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000B822B E10B                       	smpsAlterNote       $0B
000B822D BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
000B8235 E10F                       	smpsAlterNote       $0F
000B8237 C604 8001                  	dc.b	nA5, $04, nRst, $01
000B823B E10D                       	smpsAlterNote       $0D
000B823D C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000B8243 E10C                       	smpsAlterNote       $0C
000B8245 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
000B824B E10A                       	smpsAlterNote       $0A
000B824D C904 8001                  	dc.b	nC6, $04, nRst, $01
000B8251 E110                       	smpsAlterNote       $10
000B8253 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000B8257 E10F                       	smpsAlterNote       $0F
000B8259 C604                       	dc.b	nA5, $04
000B825B E10D                       	smpsAlterNote       $0D
000B825D C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000B8269 E109                       	smpsAlterNote       $09
000B826B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B826F E10F                       	smpsAlterNote       $0F
000B8271 E701                       	dc.b	smpsNoAttack, $01
000B8273 E112                       	smpsAlterNote       $12
000B8275 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8279 E10C                       	smpsAlterNote       $0C
000B827B E701                       	dc.b	smpsNoAttack, $01
000B827D E108                       	smpsAlterNote       $08
000B827F E701                       	dc.b	smpsNoAttack, $01
000B8281 E10C                       	smpsAlterNote       $0C
000B8283 E701                       	dc.b	smpsNoAttack, $01
000B8285 E10F                       	smpsAlterNote       $0F
000B8287 E701                       	dc.b	smpsNoAttack, $01
000B8289 E113                       	smpsAlterNote       $13
000B828B E701                       	dc.b	smpsNoAttack, $01
000B828D E10D                       	smpsAlterNote       $0D
000B828F C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000B8295 E10C                       	smpsAlterNote       $0C
000B8297 C10D                       	dc.b	nE5, $0D
000B8299 E109                       	smpsAlterNote       $09
000B829B E701                       	dc.b	smpsNoAttack, $01
000B829D E105                       	smpsAlterNote       $05
000B829F E701                       	dc.b	smpsNoAttack, $01
000B82A1 E106                       	smpsAlterNote       $06
000B82A3 E701                       	dc.b	smpsNoAttack, $01
000B82A5 E10C                       	smpsAlterNote       $0C
000B82A7 E701                       	dc.b	smpsNoAttack, $01
000B82A9 E110                       	smpsAlterNote       $10
000B82AB E701                       	dc.b	smpsNoAttack, $01
000B82AD E10C                       	smpsAlterNote       $0C
000B82AF E701                       	dc.b	smpsNoAttack, $01
000B82B1 E109                       	smpsAlterNote       $09
000B82B3 E701                       	dc.b	smpsNoAttack, $01
000B82B5 E105                       	smpsAlterNote       $05
000B82B7 E701                       	dc.b	smpsNoAttack, $01
000B82B9 E109                       	smpsAlterNote       $09
000B82BB E701                       	dc.b	smpsNoAttack, $01
000B82BD E10F                       	smpsAlterNote       $0F
000B82BF E701                       	dc.b	smpsNoAttack, $01
000B82C1 E110                       	smpsAlterNote       $10
000B82C3 E701                       	dc.b	smpsNoAttack, $01
000B82C5 E10C                       	smpsAlterNote       $0C
000B82C7 E701                       	dc.b	smpsNoAttack, $01
000B82C9 E106                       	smpsAlterNote       $06
000B82CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B82CF E109                       	smpsAlterNote       $09
000B82D1 E701                       	dc.b	smpsNoAttack, $01
000B82D3 E10F                       	smpsAlterNote       $0F
000B82D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B82D9 E109                       	smpsAlterNote       $09
000B82DB E701                       	dc.b	smpsNoAttack, $01
000B82DD E106                       	smpsAlterNote       $06
000B82DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B82E3 E10C                       	smpsAlterNote       $0C
000B82E5 E701                       	dc.b	smpsNoAttack, $01
000B82E7 E110                       	smpsAlterNote       $10
000B82E9 E701                       	dc.b	smpsNoAttack, $01
000B82EB E10F                       	smpsAlterNote       $0F
000B82ED E701                       	dc.b	smpsNoAttack, $01
000B82EF E109                       	smpsAlterNote       $09
000B82F1 E701                       	dc.b	smpsNoAttack, $01
000B82F3 E105                       	smpsAlterNote       $05
000B82F5 E701                       	dc.b	smpsNoAttack, $01
000B82F7 E109                       	smpsAlterNote       $09
000B82F9 E701                       	dc.b	smpsNoAttack, $01
000B82FB E10C                       	smpsAlterNote       $0C
000B82FD E701                       	dc.b	smpsNoAttack, $01
000B82FF E110                       	smpsAlterNote       $10
000B8301 E701                       	dc.b	smpsNoAttack, $01
000B8303 E10C                       	smpsAlterNote       $0C
000B8305 E701                       	dc.b	smpsNoAttack, $01
000B8307 E106                       	smpsAlterNote       $06
000B8309 E701                       	dc.b	smpsNoAttack, $01
000B830B E105                       	smpsAlterNote       $05
000B830D E701                       	dc.b	smpsNoAttack, $01
000B830F E109                       	smpsAlterNote       $09
000B8311 E701                       	dc.b	smpsNoAttack, $01
000B8313 E10F                       	smpsAlterNote       $0F
000B8315 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8319 E10C                       	smpsAlterNote       $0C
000B831B E701                       	dc.b	smpsNoAttack, $01
000B831D E106                       	smpsAlterNote       $06
000B831F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8323 E10C                       	smpsAlterNote       $0C
000B8325 E701                       	dc.b	smpsNoAttack, $01
000B8327 E10F                       	smpsAlterNote       $0F
000B8329 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B832D E109                       	smpsAlterNote       $09
000B832F E701                       	dc.b	smpsNoAttack, $01
000B8331 E105                       	smpsAlterNote       $05
000B8333 E701                       	dc.b	smpsNoAttack, $01
000B8335 E106                       	smpsAlterNote       $06
000B8337 E701                       	dc.b	smpsNoAttack, $01
000B8339 E10C                       	smpsAlterNote       $0C
000B833B E701                       	dc.b	smpsNoAttack, $01
000B833D E110                       	smpsAlterNote       $10
000B833F E701                       	dc.b	smpsNoAttack, $01
000B8341 E10C                       	smpsAlterNote       $0C
000B8343 E701                       	dc.b	smpsNoAttack, $01
000B8345 E109                       	smpsAlterNote       $09
000B8347 E701                       	dc.b	smpsNoAttack, $01
000B8349 E105                       	smpsAlterNote       $05
000B834B E701                       	dc.b	smpsNoAttack, $01
000B834D E109                       	smpsAlterNote       $09
000B834F E701                       	dc.b	smpsNoAttack, $01
000B8351 E10F                       	smpsAlterNote       $0F
000B8353 E701                       	dc.b	smpsNoAttack, $01
000B8355 E110                       	smpsAlterNote       $10
000B8357 E701                       	dc.b	smpsNoAttack, $01
000B8359 E10C                       	smpsAlterNote       $0C
000B835B E701                       	dc.b	smpsNoAttack, $01
000B835D E106                       	smpsAlterNote       $06
000B835F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8363 E109                       	smpsAlterNote       $09
000B8365 E701                       	dc.b	smpsNoAttack, $01
000B8367 E10F                       	smpsAlterNote       $0F
000B8369 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B836D E109                       	smpsAlterNote       $09
000B836F E701                       	dc.b	smpsNoAttack, $01
000B8371 E106                       	smpsAlterNote       $06
000B8373 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8377 E10C                       	smpsAlterNote       $0C
000B8379 E701                       	dc.b	smpsNoAttack, $01
000B837B E110                       	smpsAlterNote       $10
000B837D E701                       	dc.b	smpsNoAttack, $01
000B837F E10F                       	smpsAlterNote       $0F
000B8381 E701                       	dc.b	smpsNoAttack, $01
000B8383 E109                       	smpsAlterNote       $09
000B8385 E701                       	dc.b	smpsNoAttack, $01
000B8387 E105                       	smpsAlterNote       $05
000B8389 E701                       	dc.b	smpsNoAttack, $01
000B838B E109                       	smpsAlterNote       $09
000B838D E701                       	dc.b	smpsNoAttack, $01
000B838F E10C                       	smpsAlterNote       $0C
000B8391 E701                       	dc.b	smpsNoAttack, $01
000B8393 E110                       	smpsAlterNote       $10
000B8395 E701                       	dc.b	smpsNoAttack, $01
000B8397 E10C                       	smpsAlterNote       $0C
000B8399 E701                       	dc.b	smpsNoAttack, $01
000B839B E106                       	smpsAlterNote       $06
000B839D E701                       	dc.b	smpsNoAttack, $01
000B839F E105                       	smpsAlterNote       $05
000B83A1 E701                       	dc.b	smpsNoAttack, $01
000B83A3 E109                       	smpsAlterNote       $09
000B83A5 E701                       	dc.b	smpsNoAttack, $01
000B83A7 E10F                       	smpsAlterNote       $0F
000B83A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B83AD E109                       	smpsAlterNote       $09
000B83AF E701                       	dc.b	smpsNoAttack, $01
000B83B1 E106                       	smpsAlterNote       $06
000B83B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B83B7 E10C                       	smpsAlterNote       $0C
000B83B9 E701                       	dc.b	smpsNoAttack, $01
000B83BB E110                       	smpsAlterNote       $10
000B83BD E701                       	dc.b	smpsNoAttack, $01
000B83BF E10F                       	smpsAlterNote       $0F
000B83C1 E701                       	dc.b	smpsNoAttack, $01
000B83C3 E109                       	smpsAlterNote       $09
000B83C5 E701                       	dc.b	smpsNoAttack, $01
000B83C7 E105                       	smpsAlterNote       $05
000B83C9 E701                       	dc.b	smpsNoAttack, $01
000B83CB E109                       	smpsAlterNote       $09
000B83CD E701                       	dc.b	smpsNoAttack, $01
000B83CF E10C                       	smpsAlterNote       $0C
000B83D1 E701                       	dc.b	smpsNoAttack, $01
000B83D3 E110                       	smpsAlterNote       $10
000B83D5 E701                       	dc.b	smpsNoAttack, $01
000B83D7 E10C                       	smpsAlterNote       $0C
000B83D9 E701                       	dc.b	smpsNoAttack, $01
000B83DB E106                       	smpsAlterNote       $06
000B83DD E701                       	dc.b	smpsNoAttack, $01
000B83DF E105                       	smpsAlterNote       $05
000B83E1 E701                       	dc.b	smpsNoAttack, $01
000B83E3 E109                       	smpsAlterNote       $09
000B83E5 E701                       	dc.b	smpsNoAttack, $01
000B83E7 E10F                       	smpsAlterNote       $0F
000B83E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B83ED E10C                       	smpsAlterNote       $0C
000B83EF E701                       	dc.b	smpsNoAttack, $01
000B83F1 E106                       	smpsAlterNote       $06
000B83F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B83F7 E10C                       	smpsAlterNote       $0C
000B83F9 E701                       	dc.b	smpsNoAttack, $01
000B83FB E10F                       	smpsAlterNote       $0F
000B83FD E701                       	dc.b	smpsNoAttack, $01
000B83FF E110                       	smpsAlterNote       $10
000B8401 8001                       	dc.b	nRst, $01
000B8403 E10F                       	smpsAlterNote       $0F
000B8405 C604                       	dc.b	nA5, $04
000B8407 E10D                       	smpsAlterNote       $0D
000B8409 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000B840F E10B                       	smpsAlterNote       $0B
000B8411 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
000B8417 E10F                       	smpsAlterNote       $0F
000B8419 C604 8001                  	dc.b	nA5, $04, nRst, $01
000B841D E10D                       	smpsAlterNote       $0D
000B841F C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000B8425 E10C                       	smpsAlterNote       $0C
000B8427 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
000B842D E10A                       	smpsAlterNote       $0A
000B842F C904                       	dc.b	nC6, $04
000B8431 E110                       	smpsAlterNote       $10
000B8433 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000B8437 E10F                       	smpsAlterNote       $0F
000B8439 C604                       	dc.b	nA5, $04
000B843B E10D                       	smpsAlterNote       $0D
000B843D C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000B8449 E109                       	smpsAlterNote       $09
000B844B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B844F E10F                       	smpsAlterNote       $0F
000B8451 E701                       	dc.b	smpsNoAttack, $01
000B8453 E112                       	smpsAlterNote       $12
000B8455 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8459 E10C                       	smpsAlterNote       $0C
000B845B E701                       	dc.b	smpsNoAttack, $01
000B845D E108                       	smpsAlterNote       $08
000B845F E701                       	dc.b	smpsNoAttack, $01
000B8461 E109                       	smpsAlterNote       $09
000B8463 E701                       	dc.b	smpsNoAttack, $01
000B8465 E10F                       	smpsAlterNote       $0F
000B8467 E701                       	dc.b	smpsNoAttack, $01
000B8469 E113                       	smpsAlterNote       $13
000B846B E701                       	dc.b	smpsNoAttack, $01
000B846D E10D                       	smpsAlterNote       $0D
000B846F C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000B8475 E10C                       	smpsAlterNote       $0C
000B8477 C10D                       	dc.b	nE5, $0D
000B8479 E109                       	smpsAlterNote       $09
000B847B E701                       	dc.b	smpsNoAttack, $01
000B847D E106                       	smpsAlterNote       $06
000B847F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8483 E10C                       	smpsAlterNote       $0C
000B8485 E701                       	dc.b	smpsNoAttack, $01
000B8487 E110                       	smpsAlterNote       $10
000B8489 E701                       	dc.b	smpsNoAttack, $01
000B848B E10F                       	smpsAlterNote       $0F
000B848D E701                       	dc.b	smpsNoAttack, $01
000B848F E109                       	smpsAlterNote       $09
000B8491 E701                       	dc.b	smpsNoAttack, $01
000B8493 E105                       	smpsAlterNote       $05
000B8495 E701                       	dc.b	smpsNoAttack, $01
000B8497 E109                       	smpsAlterNote       $09
000B8499 E701                       	dc.b	smpsNoAttack, $01
000B849B E10C                       	smpsAlterNote       $0C
000B849D E701                       	dc.b	smpsNoAttack, $01
000B849F E110                       	smpsAlterNote       $10
000B84A1 E701                       	dc.b	smpsNoAttack, $01
000B84A3 E10C                       	smpsAlterNote       $0C
000B84A5 E701                       	dc.b	smpsNoAttack, $01
000B84A7 E106                       	smpsAlterNote       $06
000B84A9 E701                       	dc.b	smpsNoAttack, $01
000B84AB E105                       	smpsAlterNote       $05
000B84AD E701                       	dc.b	smpsNoAttack, $01
000B84AF E109                       	smpsAlterNote       $09
000B84B1 E701                       	dc.b	smpsNoAttack, $01
000B84B3 E10F                       	smpsAlterNote       $0F
000B84B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B84B9 E10C                       	smpsAlterNote       $0C
000B84BB E701                       	dc.b	smpsNoAttack, $01
000B84BD E106                       	smpsAlterNote       $06
000B84BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B84C3 E10C                       	smpsAlterNote       $0C
000B84C5 E701                       	dc.b	smpsNoAttack, $01
000B84C7 E10F                       	smpsAlterNote       $0F
000B84C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B84CD E109                       	smpsAlterNote       $09
000B84CF E701                       	dc.b	smpsNoAttack, $01
000B84D1 E105                       	smpsAlterNote       $05
000B84D3 E701                       	dc.b	smpsNoAttack, $01
000B84D5 E106                       	smpsAlterNote       $06
000B84D7 E701                       	dc.b	smpsNoAttack, $01
000B84D9 E10C                       	smpsAlterNote       $0C
000B84DB E701                       	dc.b	smpsNoAttack, $01
000B84DD E110                       	smpsAlterNote       $10
000B84DF E701                       	dc.b	smpsNoAttack, $01
000B84E1 E10C                       	smpsAlterNote       $0C
000B84E3 E701                       	dc.b	smpsNoAttack, $01
000B84E5 E109                       	smpsAlterNote       $09
000B84E7 E701                       	dc.b	smpsNoAttack, $01
000B84E9 E105                       	smpsAlterNote       $05
000B84EB E701                       	dc.b	smpsNoAttack, $01
000B84ED E109                       	smpsAlterNote       $09
000B84EF E701                       	dc.b	smpsNoAttack, $01
000B84F1 E10F                       	smpsAlterNote       $0F
000B84F3 E701                       	dc.b	smpsNoAttack, $01
000B84F5 E110                       	smpsAlterNote       $10
000B84F7 E701                       	dc.b	smpsNoAttack, $01
000B84F9 E10C                       	smpsAlterNote       $0C
000B84FB E701                       	dc.b	smpsNoAttack, $01
000B84FD E106                       	smpsAlterNote       $06
000B84FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8503 E109                       	smpsAlterNote       $09
000B8505 E701                       	dc.b	smpsNoAttack, $01
000B8507 E10F                       	smpsAlterNote       $0F
000B8509 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B850D E109                       	smpsAlterNote       $09
000B850F E701                       	dc.b	smpsNoAttack, $01
000B8511 E106                       	smpsAlterNote       $06
000B8513 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8517 E10C                       	smpsAlterNote       $0C
000B8519 E701                       	dc.b	smpsNoAttack, $01
000B851B E110                       	smpsAlterNote       $10
000B851D E701                       	dc.b	smpsNoAttack, $01
000B851F E10F                       	smpsAlterNote       $0F
000B8521 E701                       	dc.b	smpsNoAttack, $01
000B8523 E109                       	smpsAlterNote       $09
000B8525 E701                       	dc.b	smpsNoAttack, $01
000B8527 E105                       	smpsAlterNote       $05
000B8529 E701                       	dc.b	smpsNoAttack, $01
000B852B E109                       	smpsAlterNote       $09
000B852D E701                       	dc.b	smpsNoAttack, $01
000B852F E10F                       	smpsAlterNote       $0F
000B8531 E701                       	dc.b	smpsNoAttack, $01
000B8533 E110                       	smpsAlterNote       $10
000B8535 E701                       	dc.b	smpsNoAttack, $01
000B8537 E10C                       	smpsAlterNote       $0C
000B8539 E701                       	dc.b	smpsNoAttack, $01
000B853B E106                       	smpsAlterNote       $06
000B853D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8541 E109                       	smpsAlterNote       $09
000B8543 E701                       	dc.b	smpsNoAttack, $01
000B8545 E10F                       	smpsAlterNote       $0F
000B8547 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B854B E109                       	smpsAlterNote       $09
000B854D E701                       	dc.b	smpsNoAttack, $01
000B854F E106                       	smpsAlterNote       $06
000B8551 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8555 E10C                       	smpsAlterNote       $0C
000B8557 E701                       	dc.b	smpsNoAttack, $01
000B8559 E110                       	smpsAlterNote       $10
000B855B E701                       	dc.b	smpsNoAttack, $01
000B855D E10F                       	smpsAlterNote       $0F
000B855F E701                       	dc.b	smpsNoAttack, $01
000B8561 E109                       	smpsAlterNote       $09
000B8563 E701                       	dc.b	smpsNoAttack, $01
000B8565 E105                       	smpsAlterNote       $05
000B8567 E701                       	dc.b	smpsNoAttack, $01
000B8569 E109                       	smpsAlterNote       $09
000B856B E701                       	dc.b	smpsNoAttack, $01
000B856D E10C                       	smpsAlterNote       $0C
000B856F E701                       	dc.b	smpsNoAttack, $01
000B8571 E110                       	smpsAlterNote       $10
000B8573 E701                       	dc.b	smpsNoAttack, $01
000B8575 E10C                       	smpsAlterNote       $0C
000B8577 E701                       	dc.b	smpsNoAttack, $01
000B8579 E106                       	smpsAlterNote       $06
000B857B E701                       	dc.b	smpsNoAttack, $01
000B857D E105                       	smpsAlterNote       $05
000B857F E701                       	dc.b	smpsNoAttack, $01
000B8581 E109                       	smpsAlterNote       $09
000B8583 E701                       	dc.b	smpsNoAttack, $01
000B8585 E10F                       	smpsAlterNote       $0F
000B8587 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B858B E10C                       	smpsAlterNote       $0C
000B858D E701                       	dc.b	smpsNoAttack, $01
000B858F E106                       	smpsAlterNote       $06
000B8591 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8595 E10C                       	smpsAlterNote       $0C
000B8597 E701                       	dc.b	smpsNoAttack, $01
000B8599 E10F                       	smpsAlterNote       $0F
000B859B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B859F E109                       	smpsAlterNote       $09
000B85A1 E701                       	dc.b	smpsNoAttack, $01
000B85A3 E105                       	smpsAlterNote       $05
000B85A5 E701                       	dc.b	smpsNoAttack, $01
000B85A7 E106                       	smpsAlterNote       $06
000B85A9 E701                       	dc.b	smpsNoAttack, $01
000B85AB E10C                       	smpsAlterNote       $0C
000B85AD E701                       	dc.b	smpsNoAttack, $01
000B85AF E110                       	smpsAlterNote       $10
000B85B1 E701                       	dc.b	smpsNoAttack, $01
000B85B3 E10C                       	smpsAlterNote       $0C
000B85B5 E701                       	dc.b	smpsNoAttack, $01
000B85B7 E109                       	smpsAlterNote       $09
000B85B9 E701                       	dc.b	smpsNoAttack, $01
000B85BB E105                       	smpsAlterNote       $05
000B85BD E701                       	dc.b	smpsNoAttack, $01
000B85BF E109                       	smpsAlterNote       $09
000B85C1 E701                       	dc.b	smpsNoAttack, $01
000B85C3 E10F                       	smpsAlterNote       $0F
000B85C5 E701                       	dc.b	smpsNoAttack, $01
000B85C7 E110                       	smpsAlterNote       $10
000B85C9 E701                       	dc.b	smpsNoAttack, $01
000B85CB E10C                       	smpsAlterNote       $0C
000B85CD E701                       	dc.b	smpsNoAttack, $01
000B85CF E106                       	smpsAlterNote       $06
000B85D1 E701                       	dc.b	smpsNoAttack, $01
000B85D3 E10B                       	smpsAlterNote       $0B
000B85D5 BF02                       	dc.b	nD5, $02
000B85D7 E10C                       	smpsAlterNote       $0C
000B85D9 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
000B85DF E109                       	smpsAlterNote       $09
000B85E1 E701                       	dc.b	smpsNoAttack, $01
000B85E3 E105                       	smpsAlterNote       $05
000B85E5 E701                       	dc.b	smpsNoAttack, $01
000B85E7 E109                       	smpsAlterNote       $09
000B85E9 E701                       	dc.b	smpsNoAttack, $01
000B85EB E10F                       	smpsAlterNote       $0F
000B85ED E701                       	dc.b	smpsNoAttack, $01
000B85EF E110                       	smpsAlterNote       $10
000B85F1 E701                       	dc.b	smpsNoAttack, $01
000B85F3 E10C                       	smpsAlterNote       $0C
000B85F5 E701                       	dc.b	smpsNoAttack, $01
000B85F7 E106                       	smpsAlterNote       $06
000B85F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B85FD E109                       	smpsAlterNote       $09
000B85FF E701                       	dc.b	smpsNoAttack, $01
000B8601 E10F                       	smpsAlterNote       $0F
000B8603 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8607 E109                       	smpsAlterNote       $09
000B8609 E701                       	dc.b	smpsNoAttack, $01
000B860B E106                       	smpsAlterNote       $06
000B860D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8611 E10C                       	smpsAlterNote       $0C
000B8613 E701                       	dc.b	smpsNoAttack, $01
000B8615 E110                       	smpsAlterNote       $10
000B8617 E701                       	dc.b	smpsNoAttack, $01
000B8619 E10F                       	smpsAlterNote       $0F
000B861B E701                       	dc.b	smpsNoAttack, $01
000B861D E109                       	smpsAlterNote       $09
000B861F E701                       	dc.b	smpsNoAttack, $01
000B8621 E105                       	smpsAlterNote       $05
000B8623 E701                       	dc.b	smpsNoAttack, $01
000B8625 E109                       	smpsAlterNote       $09
000B8627 E701                       	dc.b	smpsNoAttack, $01
000B8629 E10C                       	smpsAlterNote       $0C
000B862B E701                       	dc.b	smpsNoAttack, $01
000B862D E110                       	smpsAlterNote       $10
000B862F E701                       	dc.b	smpsNoAttack, $01
000B8631 E10C                       	smpsAlterNote       $0C
000B8633 E701                       	dc.b	smpsNoAttack, $01
000B8635 E106                       	smpsAlterNote       $06
000B8637 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B863B E10D                       	smpsAlterNote       $0D
000B863D C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
000B8645 E10C                       	smpsAlterNote       $0C
000B8647 C10D                       	dc.b	nE5, $0D
000B8649 E106                       	smpsAlterNote       $06
000B864B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B864F E109                       	smpsAlterNote       $09
000B8651 E701                       	dc.b	smpsNoAttack, $01
000B8653 E10F                       	smpsAlterNote       $0F
000B8655 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8659 E109                       	smpsAlterNote       $09
000B865B E701                       	dc.b	smpsNoAttack, $01
000B865D E106                       	smpsAlterNote       $06
000B865F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8663 E10C                       	smpsAlterNote       $0C
000B8665 E701                       	dc.b	smpsNoAttack, $01
000B8667 E110                       	smpsAlterNote       $10
000B8669 E701                       	dc.b	smpsNoAttack, $01
000B866B E10F                       	smpsAlterNote       $0F
000B866D E701                       	dc.b	smpsNoAttack, $01
000B866F E109                       	smpsAlterNote       $09
000B8671 E701                       	dc.b	smpsNoAttack, $01
000B8673 E105                       	smpsAlterNote       $05
000B8675 E701                       	dc.b	smpsNoAttack, $01
000B8677 E106                       	smpsAlterNote       $06
000B8679 800F                       	dc.b	nRst, $0F
000B867D E6FF                       	smpsAlterVol        $FF
000B867F E10F                       	smpsAlterNote       $0F
000B8681 BA01                       	dc.b	nA4, $01
000B8683 E110                       	smpsAlterNote       $10
000B8685 BB02                       	dc.b	nBb4, $02
000B8687 E10F                       	smpsAlterNote       $0F
000B8689 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
000B868F E10B                       	smpsAlterNote       $0B
000B8691 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000B8695 E10C                       	smpsAlterNote       $0C
000B8697 C103                       	dc.b	nE5, $03
000B8699 E10D                       	smpsAlterNote       $0D
000B869B C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
000B86A5 E10B                       	smpsAlterNote       $0B
000B86A7 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
000B86AB E104                       	smpsAlterNote       $04
000B86AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B86B1 E10A                       	smpsAlterNote       $0A
000B86B3 E701                       	dc.b	smpsNoAttack, $01
000B86B5 E10D                       	smpsAlterNote       $0D
000B86B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B86BB E107                       	smpsAlterNote       $07
000B86BD E701                       	dc.b	smpsNoAttack, $01
000B86BF E104                       	smpsAlterNote       $04
000B86C1 8001                       	dc.b	nRst, $01
000B86C3 E110                       	smpsAlterNote       $10
000B86C5 C703                       	dc.b	nBb5, $03
000B86C7 E10F                       	smpsAlterNote       $0F
000B86C9 C603 8001                  	dc.b	nA5, $03, nRst, $01
000B86CD E10D                       	smpsAlterNote       $0D
000B86CF C403 C60D                  	dc.b	nG5, $03, nA5, $0D
000B86D3 E10C                       	smpsAlterNote       $0C
000B86D5 E701                       	dc.b	smpsNoAttack, $01
000B86D7 E108                       	smpsAlterNote       $08
000B86D9 E701                       	dc.b	smpsNoAttack, $01
000B86DB E109                       	smpsAlterNote       $09
000B86DD E701                       	dc.b	smpsNoAttack, $01
000B86DF E10F                       	smpsAlterNote       $0F
000B86E1 E701                       	dc.b	smpsNoAttack, $01
000B86E3 E113                       	smpsAlterNote       $13
000B86E5 E701                       	dc.b	smpsNoAttack, $01
000B86E7 E10F                       	smpsAlterNote       $0F
000B86E9 E701                       	dc.b	smpsNoAttack, $01
000B86EB E10C                       	smpsAlterNote       $0C
000B86ED E701                       	dc.b	smpsNoAttack, $01
000B86EF E108                       	smpsAlterNote       $08
000B86F1 E701                       	dc.b	smpsNoAttack, $01
000B86F3 E10C                       	smpsAlterNote       $0C
000B86F5 E701                       	dc.b	smpsNoAttack, $01
000B86F7 E112                       	smpsAlterNote       $12
000B86F9 E701                       	dc.b	smpsNoAttack, $01
000B86FB E113                       	smpsAlterNote       $13
000B86FD E701                       	dc.b	smpsNoAttack, $01
000B86FF E10F                       	smpsAlterNote       $0F
000B8701 E701                       	dc.b	smpsNoAttack, $01
000B8703 E109                       	smpsAlterNote       $09
000B8705 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8709 E10C                       	smpsAlterNote       $0C
000B870B E701                       	dc.b	smpsNoAttack, $01
000B870D E112                       	smpsAlterNote       $12
000B870F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8713 E10C                       	smpsAlterNote       $0C
000B8715 E701                       	dc.b	smpsNoAttack, $01
000B8717 E109                       	smpsAlterNote       $09
000B8719 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B871D E10F                       	smpsAlterNote       $0F
000B871F E701                       	dc.b	smpsNoAttack, $01
000B8721 E113                       	smpsAlterNote       $13
000B8723 E701                       	dc.b	smpsNoAttack, $01
000B8725 E112                       	smpsAlterNote       $12
000B8727 E701                       	dc.b	smpsNoAttack, $01
000B8729 E10C                       	smpsAlterNote       $0C
000B872B E701                       	dc.b	smpsNoAttack, $01
000B872D E108                       	smpsAlterNote       $08
000B872F E701                       	dc.b	smpsNoAttack, $01
000B8731 E10C                       	smpsAlterNote       $0C
000B8733 E701                       	dc.b	smpsNoAttack, $01
000B8735 E10F                       	smpsAlterNote       $0F
000B8737 E701                       	dc.b	smpsNoAttack, $01
000B8739 E113                       	smpsAlterNote       $13
000B873B E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000B873F E10B                       	smpsAlterNote       $0B
000B8741 BF03                       	dc.b	nD5, $03
000B8743 E10C                       	smpsAlterNote       $0C
000B8745 C103 8001                  	dc.b	nE5, $03, nRst, $01
000B8749 E10D                       	smpsAlterNote       $0D
000B874B C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000B8755 E10B                       	smpsAlterNote       $0B
000B8757 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
000B8763 E110                       	smpsAlterNote       $10
000B8765 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000B8769 E10F                       	smpsAlterNote       $0F
000B876B C604                       	dc.b	nA5, $04
000B876D E10D                       	smpsAlterNote       $0D
000B876F C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000B8775 E109                       	smpsAlterNote       $09
000B8777 E701                       	dc.b	smpsNoAttack, $01
000B8779 E108                       	smpsAlterNote       $08
000B877B E701                       	dc.b	smpsNoAttack, $01
000B877D E10C                       	smpsAlterNote       $0C
000B877F E701                       	dc.b	smpsNoAttack, $01
000B8781 E112                       	smpsAlterNote       $12
000B8783 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8787 E10F                       	smpsAlterNote       $0F
000B8789 E701                       	dc.b	smpsNoAttack, $01
000B878B E109                       	smpsAlterNote       $09
000B878D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8791 E10F                       	smpsAlterNote       $0F
000B8793 E701                       	dc.b	smpsNoAttack, $01
000B8795 E112                       	smpsAlterNote       $12
000B8797 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B879B E10C                       	smpsAlterNote       $0C
000B879D E701                       	dc.b	smpsNoAttack, $01
000B879F E108                       	smpsAlterNote       $08
000B87A1 E701                       	dc.b	smpsNoAttack, $01
000B87A3 E109                       	smpsAlterNote       $09
000B87A5 E701                       	dc.b	smpsNoAttack, $01
000B87A7 E10F                       	smpsAlterNote       $0F
000B87A9 E701                       	dc.b	smpsNoAttack, $01
000B87AB E113                       	smpsAlterNote       $13
000B87AD E701                       	dc.b	smpsNoAttack, $01
000B87AF E10F                       	smpsAlterNote       $0F
000B87B1 E701                       	dc.b	smpsNoAttack, $01
000B87B3 E10C                       	smpsAlterNote       $0C
000B87B5 E701                       	dc.b	smpsNoAttack, $01
000B87B7 E108                       	smpsAlterNote       $08
000B87B9 E701                       	dc.b	smpsNoAttack, $01
000B87BB E10C                       	smpsAlterNote       $0C
000B87BD E701                       	dc.b	smpsNoAttack, $01
000B87BF E112                       	smpsAlterNote       $12
000B87C1 E701                       	dc.b	smpsNoAttack, $01
000B87C3 E113                       	smpsAlterNote       $13
000B87C5 E701                       	dc.b	smpsNoAttack, $01
000B87C7 E10F                       	smpsAlterNote       $0F
000B87C9 E701                       	dc.b	smpsNoAttack, $01
000B87CB E109                       	smpsAlterNote       $09
000B87CD E701                       	dc.b	smpsNoAttack, $01
000B87CF E10D                       	smpsAlterNote       $0D
000B87D1 C402                       	dc.b	nG5, $02
000B87D3 E10F                       	smpsAlterNote       $0F
000B87D5 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
000B87DF E10D                       	smpsAlterNote       $0D
000B87E1 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000B87E7 E10B                       	smpsAlterNote       $0B
000B87E9 BF0D                       	dc.b	nD5, $0D
000B87EB E108                       	smpsAlterNote       $08
000B87ED E701                       	dc.b	smpsNoAttack, $01
000B87EF E104                       	smpsAlterNote       $04
000B87F1 E701                       	dc.b	smpsNoAttack, $01
000B87F3 E105                       	smpsAlterNote       $05
000B87F5 E701                       	dc.b	smpsNoAttack, $01
000B87F7 E10B                       	smpsAlterNote       $0B
000B87F9 E701                       	dc.b	smpsNoAttack, $01
000B87FB E10F                       	smpsAlterNote       $0F
000B87FD E701                       	dc.b	smpsNoAttack, $01
000B87FF E10B                       	smpsAlterNote       $0B
000B8801 E701                       	dc.b	smpsNoAttack, $01
000B8803 E108                       	smpsAlterNote       $08
000B8805 E701                       	dc.b	smpsNoAttack, $01
000B8807 E104                       	smpsAlterNote       $04
000B8809 E701                       	dc.b	smpsNoAttack, $01
000B880B E108                       	smpsAlterNote       $08
000B880D E701                       	dc.b	smpsNoAttack, $01
000B880F E10E                       	smpsAlterNote       $0E
000B8811 E701                       	dc.b	smpsNoAttack, $01
000B8813 E10F                       	smpsAlterNote       $0F
000B8815 E701                       	dc.b	smpsNoAttack, $01
000B8817 E10C                       	smpsAlterNote       $0C
000B8819 C101                       	dc.b	nE5, $01
000B881B E10D                       	smpsAlterNote       $0D
000B881D C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000B8825 E10F                       	smpsAlterNote       $0F
000B8827 C607                       	dc.b	nA5, $07
000B8829 E10C                       	smpsAlterNote       $0C
000B882B CD07                       	dc.b	nE6, $07
000B882D E10D                       	smpsAlterNote       $0D
000B882F CE06 8001                  	dc.b	nF6, $06, nRst, $01
000B8833 E10C                       	smpsAlterNote       $0C
000B8835 CD03                       	dc.b	nE6, $03
000B8837 E10A                       	smpsAlterNote       $0A
000B8839 C903 8001                  	dc.b	nC6, $03, nRst, $01
000B883D E10D                       	smpsAlterNote       $0D
000B883F C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
000B8845 E10A                       	smpsAlterNote       $0A
000B8847 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B884B E110                       	smpsAlterNote       $10
000B884D E701                       	dc.b	smpsNoAttack, $01
000B884F E114                       	smpsAlterNote       $14
000B8851 E701                       	dc.b	smpsNoAttack, $01
000B8853 E113                       	smpsAlterNote       $13
000B8855 E701                       	dc.b	smpsNoAttack, $01
000B8857 E10D                       	smpsAlterNote       $0D
000B8859 E701                       	dc.b	smpsNoAttack, $01
000B885B E109                       	smpsAlterNote       $09
000B885D E701                       	dc.b	smpsNoAttack, $01
000B885F E10D                       	smpsAlterNote       $0D
000B8861 E701                       	dc.b	smpsNoAttack, $01
000B8863 E110                       	smpsAlterNote       $10
000B8865 E701                       	dc.b	smpsNoAttack, $01
000B8867 E114                       	smpsAlterNote       $14
000B8869 E701                       	dc.b	smpsNoAttack, $01
000B886B E10F                       	smpsAlterNote       $0F
000B886D C607                       	dc.b	nA5, $07
000B886F E10D                       	smpsAlterNote       $0D
000B8871 C40D                       	dc.b	nG5, $0D
000B8873 E10A                       	smpsAlterNote       $0A
000B8875 E701                       	dc.b	smpsNoAttack, $01
000B8877 E106                       	smpsAlterNote       $06
000B8879 E701                       	dc.b	smpsNoAttack, $01
000B887B E10A                       	smpsAlterNote       $0A
000B887D E701                       	dc.b	smpsNoAttack, $01
000B887F E10D                       	smpsAlterNote       $0D
000B8881 E701                       	dc.b	smpsNoAttack, $01
000B8883 E111                       	smpsAlterNote       $11
000B8885 E701                       	dc.b	smpsNoAttack, $01
000B8887 E10D                       	smpsAlterNote       $0D
000B8889 E701                       	dc.b	smpsNoAttack, $01
000B888B E107                       	smpsAlterNote       $07
000B888D E701                       	dc.b	smpsNoAttack, $01
000B888F E106                       	smpsAlterNote       $06
000B8891 E701                       	dc.b	smpsNoAttack, $01
000B8893 E10A                       	smpsAlterNote       $0A
000B8895 E701                       	dc.b	smpsNoAttack, $01
000B8897 E110                       	smpsAlterNote       $10
000B8899 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B889D E10D                       	smpsAlterNote       $0D
000B889F E701                       	dc.b	smpsNoAttack, $01
000B88A1 E107                       	smpsAlterNote       $07
000B88A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B88A7 E10F                       	smpsAlterNote       $0F
000B88A9 C60E                       	dc.b	nA5, $0E
000B88AB E109                       	smpsAlterNote       $09
000B88AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B88B1 E10F                       	smpsAlterNote       $0F
000B88B3 E701                       	dc.b	smpsNoAttack, $01
000B88B5 E112                       	smpsAlterNote       $12
000B88B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B88BB E10C                       	smpsAlterNote       $0C
000B88BD E701                       	dc.b	smpsNoAttack, $01
000B88BF E108                       	smpsAlterNote       $08
000B88C1 E701                       	dc.b	smpsNoAttack, $01
000B88C3 E109                       	smpsAlterNote       $09
000B88C5 E701                       	dc.b	smpsNoAttack, $01
000B88C7 E10F                       	smpsAlterNote       $0F
000B88C9 E701                       	dc.b	smpsNoAttack, $01
000B88CB E113                       	smpsAlterNote       $13
000B88CD E701                       	dc.b	smpsNoAttack, $01
000B88CF E10F                       	smpsAlterNote       $0F
000B88D1 E701                       	dc.b	smpsNoAttack, $01
000B88D3 E10C                       	smpsAlterNote       $0C
000B88D5 E701                       	dc.b	smpsNoAttack, $01
000B88D7 E108                       	smpsAlterNote       $08
000B88D9 E701                       	dc.b	smpsNoAttack, $01
000B88DB E109                       	smpsAlterNote       $09
000B88DD 8001                       	dc.b	nRst, $01
000B88DF E110                       	smpsAlterNote       $10
000B88E1 C70D                       	dc.b	nBb5, $0D
000B88E3 E10D                       	smpsAlterNote       $0D
000B88E5 E701                       	dc.b	smpsNoAttack, $01
000B88E7 E109                       	smpsAlterNote       $09
000B88E9 E701                       	dc.b	smpsNoAttack, $01
000B88EB E10D                       	smpsAlterNote       $0D
000B88ED E701                       	dc.b	smpsNoAttack, $01
000B88EF E113                       	smpsAlterNote       $13
000B88F1 E701                       	dc.b	smpsNoAttack, $01
000B88F3 E114                       	smpsAlterNote       $14
000B88F5 E701                       	dc.b	smpsNoAttack, $01
000B88F7 E110                       	smpsAlterNote       $10
000B88F9 E701                       	dc.b	smpsNoAttack, $01
000B88FB E10A                       	smpsAlterNote       $0A
000B88FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8901 E10D                       	smpsAlterNote       $0D
000B8903 E701                       	dc.b	smpsNoAttack, $01
000B8905 E113                       	smpsAlterNote       $13
000B8907 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B890B E10D                       	smpsAlterNote       $0D
000B890D E701                       	dc.b	smpsNoAttack, $01
000B890F E10A                       	smpsAlterNote       $0A
000B8911 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
000B891B E10B                       	smpsAlterNote       $0B
000B891D 8001                       	dc.b	nRst, $01
000B891F E10C                       	smpsAlterNote       $0C
000B8921 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
000B8925 E10B                       	smpsAlterNote       $0B
000B8927 CB0D                       	dc.b	nD6, $0D
000B8929 E105                       	smpsAlterNote       $05
000B892B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B892F E108                       	smpsAlterNote       $08
000B8931 E701                       	dc.b	smpsNoAttack, $01
000B8933 E10E                       	smpsAlterNote       $0E
000B8935 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8939 E108                       	smpsAlterNote       $08
000B893B E701                       	dc.b	smpsNoAttack, $01
000B893D E105                       	smpsAlterNote       $05
000B893F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8943 E10B                       	smpsAlterNote       $0B
000B8945 E701                       	dc.b	smpsNoAttack, $01
000B8947 E10F                       	smpsAlterNote       $0F
000B8949 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B894D E10C                       	smpsAlterNote       $0C
000B894F CC0D                       	dc.b	nEb6, $0D
000B8951 E106                       	smpsAlterNote       $06
000B8953 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8957 E109                       	smpsAlterNote       $09
000B8959 E701                       	dc.b	smpsNoAttack, $01
000B895B E10C                       	smpsAlterNote       $0C
000B895D 8001                       	dc.b	nRst, $01
000B895F E10A                       	smpsAlterNote       $0A
000B8961 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000B896D CB0E                       	dc.b	nD6, $0E
000B896F E105                       	smpsAlterNote       $05
000B8971 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8975 E10B                       	smpsAlterNote       $0B
000B8977 E701                       	dc.b	smpsNoAttack, $01
000B8979 E10E                       	smpsAlterNote       $0E
000B897B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B897F E108                       	smpsAlterNote       $08
000B8981 E701                       	dc.b	smpsNoAttack, $01
000B8983 E104                       	smpsAlterNote       $04
000B8985 E701                       	dc.b	smpsNoAttack, $01
000B8987 E105                       	smpsAlterNote       $05
000B8989 E701                       	dc.b	smpsNoAttack, $01
000B898B E10B                       	smpsAlterNote       $0B
000B898D E701                       	dc.b	smpsNoAttack, $01
000B898F E10F                       	smpsAlterNote       $0F
000B8991 E701                       	dc.b	smpsNoAttack, $01
000B8993 E10D                       	smpsAlterNote       $0D
000B8995 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
000B8999 E10C                       	smpsAlterNote       $0C
000B899B CC06 8001                  	dc.b	nEb6, $06, nRst, $01
000B899F E10A                       	smpsAlterNote       $0A
000B89A1 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
000B89AD CB0D                       	dc.b	nD6, $0D
000B89AF E108                       	smpsAlterNote       $08
000B89B1 E701                       	dc.b	smpsNoAttack, $01
000B89B3 E104                       	smpsAlterNote       $04
000B89B5 E701                       	dc.b	smpsNoAttack, $01
000B89B7 E105                       	smpsAlterNote       $05
000B89B9 E701                       	dc.b	smpsNoAttack, $01
000B89BB E10B                       	smpsAlterNote       $0B
000B89BD E701                       	dc.b	smpsNoAttack, $01
000B89BF E10F                       	smpsAlterNote       $0F
000B89C1 E701                       	dc.b	smpsNoAttack, $01
000B89C3 E10B                       	smpsAlterNote       $0B
000B89C5 E701                       	dc.b	smpsNoAttack, $01
000B89C7 E108                       	smpsAlterNote       $08
000B89C9 E701                       	dc.b	smpsNoAttack, $01
000B89CB E104                       	smpsAlterNote       $04
000B89CD E701                       	dc.b	smpsNoAttack, $01
000B89CF E108                       	smpsAlterNote       $08
000B89D1 E701                       	dc.b	smpsNoAttack, $01
000B89D3 E10E                       	smpsAlterNote       $0E
000B89D5 E701                       	dc.b	smpsNoAttack, $01
000B89D7 E10F                       	smpsAlterNote       $0F
000B89D9 E701                       	dc.b	smpsNoAttack, $01
000B89DB E10C                       	smpsAlterNote       $0C
000B89DD CC0D                       	dc.b	nEb6, $0D
000B89DF E109                       	smpsAlterNote       $09
000B89E1 E701                       	dc.b	smpsNoAttack, $01
000B89E3 E105                       	smpsAlterNote       $05
000B89E5 E701                       	dc.b	smpsNoAttack, $01
000B89E7 E106                       	smpsAlterNote       $06
000B89E9 E701                       	dc.b	smpsNoAttack, $01
000B89EB E10C                       	smpsAlterNote       $0C
000B89ED E701                       	dc.b	smpsNoAttack, $01
000B89EF E10A                       	smpsAlterNote       $0A
000B89F1 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
000B89FD CB0D                       	dc.b	nD6, $0D
000B89FF E108                       	smpsAlterNote       $08
000B8A01 E701                       	dc.b	smpsNoAttack, $01
000B8A03 E104                       	smpsAlterNote       $04
000B8A05 E701                       	dc.b	smpsNoAttack, $01
000B8A07 E108                       	smpsAlterNote       $08
000B8A09 E701                       	dc.b	smpsNoAttack, $01
000B8A0B E10B                       	smpsAlterNote       $0B
000B8A0D E701                       	dc.b	smpsNoAttack, $01
000B8A0F E10F                       	smpsAlterNote       $0F
000B8A11 E701                       	dc.b	smpsNoAttack, $01
000B8A13 E10B                       	smpsAlterNote       $0B
000B8A15 E701                       	dc.b	smpsNoAttack, $01
000B8A17 E105                       	smpsAlterNote       $05
000B8A19 E701                       	dc.b	smpsNoAttack, $01
000B8A1B E104                       	smpsAlterNote       $04
000B8A1D E701                       	dc.b	smpsNoAttack, $01
000B8A1F E108                       	smpsAlterNote       $08
000B8A21 E701                       	dc.b	smpsNoAttack, $01
000B8A23 E10E                       	smpsAlterNote       $0E
000B8A25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8A29 E10B                       	smpsAlterNote       $0B
000B8A2B E701                       	dc.b	smpsNoAttack, $01
000B8A2D E105                       	smpsAlterNote       $05
000B8A2F E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
000B8A37 03                         	dc.b	$03
000B8A38 E601                       	smpsAlterVol        $01
000B8A3A F6F1 D1                    	smpsJump            music84_Jump01
000B8A3D                            
000B8A3D                            ; FM5 Data
000B8A3D                            music84_FM5:
000B8A3F E080                       	smpsPan             panLeft, $00
000B8A41 8003                       	dc.b	nRst, $03
000B8A43 E10D                       	smpsAlterNote       $0D
000B8A45 C203 8008                  	dc.b	nF5, $03, nRst, $08
000B8A49 E10C                       	smpsAlterNote       $0C
000B8A4B C103 800A                  	dc.b	nE5, $03, nRst, $0A
000B8A4F E10F                       	smpsAlterNote       $0F
000B8A51 BA03 8006                  	dc.b	nA4, $03, nRst, $06
000B8A57 E6FE                       	smpsAlterVol        $FE
000B8A59 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
000B8A5F E10D                       	smpsAlterNote       $0D
000B8A61 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000B8A67 E10C                       	smpsAlterNote       $0C
000B8A69 C102 8001                  	dc.b	nE5, $02, nRst, $01
000B8A6D E10A                       	smpsAlterNote       $0A
000B8A6F BD01 8001                  	dc.b	nC5, $01, nRst, $01
000B8A75 03                         	dc.b	$03
000B8A76                            
000B8A76                            music84_Jump00:
000B8A76 8004                       	dc.b	nRst, $04
000B8A78 E602                       	smpsAlterVol        $02
000B8A7A E10D                       	smpsAlterNote       $0D
000B8A7C B60D                       	dc.b	nF4, $0D
000B8A7E E107                       	smpsAlterNote       $07
000B8A80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8A84 E10A                       	smpsAlterNote       $0A
000B8A86 E701                       	dc.b	smpsNoAttack, $01
000B8A88 E110                       	smpsAlterNote       $10
000B8A8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8A8E E10A                       	smpsAlterNote       $0A
000B8A90 E701                       	dc.b	smpsNoAttack, $01
000B8A92 E107                       	smpsAlterNote       $07
000B8A94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8A98 E10D                       	smpsAlterNote       $0D
000B8A9A E701                       	dc.b	smpsNoAttack, $01
000B8A9C E111                       	smpsAlterNote       $11
000B8A9E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B8AA2 E10D                       	smpsAlterNote       $0D
000B8AA4 B80D                       	dc.b	nG4, $0D
000B8AA6 E107                       	smpsAlterNote       $07
000B8AA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8AAC E10A                       	smpsAlterNote       $0A
000B8AAE E701                       	dc.b	smpsNoAttack, $01
000B8AB0 E110                       	smpsAlterNote       $10
000B8AB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8AB6 E10A                       	smpsAlterNote       $0A
000B8AB8 E701                       	dc.b	smpsNoAttack, $01
000B8ABA E107                       	smpsAlterNote       $07
000B8ABC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8AC0 E10D                       	smpsAlterNote       $0D
000B8AC2 E701                       	dc.b	smpsNoAttack, $01
000B8AC4 E111                       	smpsAlterNote       $11
000B8AC6 E701                       	dc.b	smpsNoAttack, $01
000B8AC8 E110                       	smpsAlterNote       $10
000B8ACA E701                       	dc.b	smpsNoAttack, $01
000B8ACC E10A                       	smpsAlterNote       $0A
000B8ACE E701                       	dc.b	smpsNoAttack, $01
000B8AD0 E106                       	smpsAlterNote       $06
000B8AD2 E701                       	dc.b	smpsNoAttack, $01
000B8AD4 E10A                       	smpsAlterNote       $0A
000B8AD6 E701                       	dc.b	smpsNoAttack, $01
000B8AD8 E10D                       	smpsAlterNote       $0D
000B8ADA E701                       	dc.b	smpsNoAttack, $01
000B8ADC E111                       	smpsAlterNote       $11
000B8ADE E701                       	dc.b	smpsNoAttack, $01
000B8AE0 E10D                       	smpsAlterNote       $0D
000B8AE2 E701                       	dc.b	smpsNoAttack, $01
000B8AE4 E10F                       	smpsAlterNote       $0F
000B8AE6 BA0E                       	dc.b	nA4, $0E
000B8AE8 E109                       	smpsAlterNote       $09
000B8AEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8AEE E10F                       	smpsAlterNote       $0F
000B8AF0 E701                       	dc.b	smpsNoAttack, $01
000B8AF2 E112                       	smpsAlterNote       $12
000B8AF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8AF8 E10C                       	smpsAlterNote       $0C
000B8AFA E701                       	dc.b	smpsNoAttack, $01
000B8AFC E108                       	smpsAlterNote       $08
000B8AFE E701                       	dc.b	smpsNoAttack, $01
000B8B00 E109                       	smpsAlterNote       $09
000B8B02 E701                       	dc.b	smpsNoAttack, $01
000B8B04 E10F                       	smpsAlterNote       $0F
000B8B06 E701                       	dc.b	smpsNoAttack, $01
000B8B08 E113                       	smpsAlterNote       $13
000B8B0A E701                       	dc.b	smpsNoAttack, $01
000B8B0C E10F                       	smpsAlterNote       $0F
000B8B0E E701                       	dc.b	smpsNoAttack, $01
000B8B10 E109                       	smpsAlterNote       $09
000B8B12 E701                       	dc.b	smpsNoAttack, $01
000B8B14 E108                       	smpsAlterNote       $08
000B8B16 E701                       	dc.b	smpsNoAttack, $01
000B8B18 E10C                       	smpsAlterNote       $0C
000B8B1A E701                       	dc.b	smpsNoAttack, $01
000B8B1C E112                       	smpsAlterNote       $12
000B8B1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8B22 E10F                       	smpsAlterNote       $0F
000B8B24 E701                       	dc.b	smpsNoAttack, $01
000B8B26 E109                       	smpsAlterNote       $09
000B8B28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8B2C E10F                       	smpsAlterNote       $0F
000B8B2E E701                       	dc.b	smpsNoAttack, $01
000B8B30 E112                       	smpsAlterNote       $12
000B8B32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8B36 E10C                       	smpsAlterNote       $0C
000B8B38 E701                       	dc.b	smpsNoAttack, $01
000B8B3A E108                       	smpsAlterNote       $08
000B8B3C E701                       	dc.b	smpsNoAttack, $01
000B8B3E E109                       	smpsAlterNote       $09
000B8B40 E701                       	dc.b	smpsNoAttack, $01
000B8B42 E10F                       	smpsAlterNote       $0F
000B8B44 E701                       	dc.b	smpsNoAttack, $01
000B8B46 E113                       	smpsAlterNote       $13
000B8B48 E701                       	dc.b	smpsNoAttack, $01
000B8B4A E10F                       	smpsAlterNote       $0F
000B8B4C E701                       	dc.b	smpsNoAttack, $01
000B8B4E E10C                       	smpsAlterNote       $0C
000B8B50 E701                       	dc.b	smpsNoAttack, $01
000B8B52 E108                       	smpsAlterNote       $08
000B8B54 E701                       	dc.b	smpsNoAttack, $01
000B8B56 E109                       	smpsAlterNote       $09
000B8B58 8001                       	dc.b	nRst, $01
000B8B5A E10C                       	smpsAlterNote       $0C
000B8B5C B50A                       	dc.b	nE4, $0A
000B8B5E E10D                       	smpsAlterNote       $0D
000B8B60 B60D                       	dc.b	nF4, $0D
000B8B62 E10A                       	smpsAlterNote       $0A
000B8B64 E701                       	dc.b	smpsNoAttack, $01
000B8B66 E106                       	smpsAlterNote       $06
000B8B68 E701                       	dc.b	smpsNoAttack, $01
000B8B6A E107                       	smpsAlterNote       $07
000B8B6C E701                       	dc.b	smpsNoAttack, $01
000B8B6E E10D                       	smpsAlterNote       $0D
000B8B70 E701                       	dc.b	smpsNoAttack, $01
000B8B72 E111                       	smpsAlterNote       $11
000B8B74 E701                       	dc.b	smpsNoAttack, $01
000B8B76 E10D                       	smpsAlterNote       $0D
000B8B78 E701                       	dc.b	smpsNoAttack, $01
000B8B7A E10A                       	smpsAlterNote       $0A
000B8B7C E701                       	dc.b	smpsNoAttack, $01
000B8B7E E106                       	smpsAlterNote       $06
000B8B80 E701                       	dc.b	smpsNoAttack, $01
000B8B82 E10A                       	smpsAlterNote       $0A
000B8B84 E701                       	dc.b	smpsNoAttack, $01
000B8B86 E110                       	smpsAlterNote       $10
000B8B88 E701                       	dc.b	smpsNoAttack, $01
000B8B8A E111                       	smpsAlterNote       $11
000B8B8C E701                       	dc.b	smpsNoAttack, $01
000B8B8E E10D                       	smpsAlterNote       $0D
000B8B90 B80D                       	dc.b	nG4, $0D
000B8B92 E10A                       	smpsAlterNote       $0A
000B8B94 E701                       	dc.b	smpsNoAttack, $01
000B8B96 E106                       	smpsAlterNote       $06
000B8B98 E701                       	dc.b	smpsNoAttack, $01
000B8B9A E107                       	smpsAlterNote       $07
000B8B9C E701                       	dc.b	smpsNoAttack, $01
000B8B9E E10D                       	smpsAlterNote       $0D
000B8BA0 E701                       	dc.b	smpsNoAttack, $01
000B8BA2 E111                       	smpsAlterNote       $11
000B8BA4 E701                       	dc.b	smpsNoAttack, $01
000B8BA6 E10D                       	smpsAlterNote       $0D
000B8BA8 E701                       	dc.b	smpsNoAttack, $01
000B8BAA E10A                       	smpsAlterNote       $0A
000B8BAC E701                       	dc.b	smpsNoAttack, $01
000B8BAE E106                       	smpsAlterNote       $06
000B8BB0 E701                       	dc.b	smpsNoAttack, $01
000B8BB2 E10A                       	smpsAlterNote       $0A
000B8BB4 E701                       	dc.b	smpsNoAttack, $01
000B8BB6 E110                       	smpsAlterNote       $10
000B8BB8 E701                       	dc.b	smpsNoAttack, $01
000B8BBA E111                       	smpsAlterNote       $11
000B8BBC E701                       	dc.b	smpsNoAttack, $01
000B8BBE E10D                       	smpsAlterNote       $0D
000B8BC0 E701                       	dc.b	smpsNoAttack, $01
000B8BC2 E107                       	smpsAlterNote       $07
000B8BC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8BC8 E10A                       	smpsAlterNote       $0A
000B8BCA E701                       	dc.b	smpsNoAttack, $01
000B8BCC E110                       	smpsAlterNote       $10
000B8BCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8BD2 E10D                       	smpsAlterNote       $0D
000B8BD4 8001                       	dc.b	nRst, $01
000B8BD6 E10F                       	smpsAlterNote       $0F
000B8BD8 BA0D                       	dc.b	nA4, $0D
000B8BDA E10C                       	smpsAlterNote       $0C
000B8BDC E701                       	dc.b	smpsNoAttack, $01
000B8BDE E108                       	smpsAlterNote       $08
000B8BE0 E701                       	dc.b	smpsNoAttack, $01
000B8BE2 E10C                       	smpsAlterNote       $0C
000B8BE4 E701                       	dc.b	smpsNoAttack, $01
000B8BE6 E112                       	smpsAlterNote       $12
000B8BE8 E701                       	dc.b	smpsNoAttack, $01
000B8BEA E113                       	smpsAlterNote       $13
000B8BEC E701                       	dc.b	smpsNoAttack, $01
000B8BEE E10F                       	smpsAlterNote       $0F
000B8BF0 E701                       	dc.b	smpsNoAttack, $01
000B8BF2 E109                       	smpsAlterNote       $09
000B8BF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8BF8 E10C                       	smpsAlterNote       $0C
000B8BFA E701                       	dc.b	smpsNoAttack, $01
000B8BFC E112                       	smpsAlterNote       $12
000B8BFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8C02 E10C                       	smpsAlterNote       $0C
000B8C04 E701                       	dc.b	smpsNoAttack, $01
000B8C06 E109                       	smpsAlterNote       $09
000B8C08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8C0C E10F                       	smpsAlterNote       $0F
000B8C0E E701                       	dc.b	smpsNoAttack, $01
000B8C10 E113                       	smpsAlterNote       $13
000B8C12 E701                       	dc.b	smpsNoAttack, $01
000B8C14 E112                       	smpsAlterNote       $12
000B8C16 E701                       	dc.b	smpsNoAttack, $01
000B8C18 E10C                       	smpsAlterNote       $0C
000B8C1A E701                       	dc.b	smpsNoAttack, $01
000B8C1C E108                       	smpsAlterNote       $08
000B8C1E E701                       	dc.b	smpsNoAttack, $01
000B8C20 E10C                       	smpsAlterNote       $0C
000B8C22 E701                       	dc.b	smpsNoAttack, $01
000B8C24 E10F                       	smpsAlterNote       $0F
000B8C26 E701                       	dc.b	smpsNoAttack, $01
000B8C28 E113                       	smpsAlterNote       $13
000B8C2A E701                       	dc.b	smpsNoAttack, $01
000B8C2C E10F                       	smpsAlterNote       $0F
000B8C2E E701                       	dc.b	smpsNoAttack, $01
000B8C30 E109                       	smpsAlterNote       $09
000B8C32 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B8C36 E10D                       	smpsAlterNote       $0D
000B8C38 B609 8001                  	dc.b	nF4, $09, nRst, $01
000B8C3C E10C                       	smpsAlterNote       $0C
000B8C3E B506 8001                  	dc.b	nE4, $06, nRst, $01
000B8C42 E10B                       	smpsAlterNote       $0B
000B8C44 B30D                       	dc.b	nD4, $0D
000B8C46 E10C                       	smpsAlterNote       $0C
000B8C48 B503 8001                  	dc.b	nE4, $03, nRst, $01
000B8C4C E10D                       	smpsAlterNote       $0D
000B8C4E B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
000B8C56 E109                       	smpsAlterNote       $09
000B8C58 E701                       	dc.b	smpsNoAttack, $01
000B8C5A E108                       	smpsAlterNote       $08
000B8C5C E701                       	dc.b	smpsNoAttack, $01
000B8C5E E10C                       	smpsAlterNote       $0C
000B8C60 E701                       	dc.b	smpsNoAttack, $01
000B8C62 E112                       	smpsAlterNote       $12
000B8C64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8C68 E10F                       	smpsAlterNote       $0F
000B8C6A E701                       	dc.b	smpsNoAttack, $01
000B8C6C E109                       	smpsAlterNote       $09
000B8C6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8C72 E10F                       	smpsAlterNote       $0F
000B8C74 E701                       	dc.b	smpsNoAttack, $01
000B8C76 E112                       	smpsAlterNote       $12
000B8C78 E701                       	dc.b	smpsNoAttack, $01
000B8C7A E113                       	smpsAlterNote       $13
000B8C7C 8001                       	dc.b	nRst, $01
000B8C7E E10D                       	smpsAlterNote       $0D
000B8C80 C20D                       	dc.b	nF5, $0D
000B8C82 E107                       	smpsAlterNote       $07
000B8C84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8C88 E10A                       	smpsAlterNote       $0A
000B8C8A E701                       	dc.b	smpsNoAttack, $01
000B8C8C E110                       	smpsAlterNote       $10
000B8C8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8C92 E10A                       	smpsAlterNote       $0A
000B8C94 E701                       	dc.b	smpsNoAttack, $01
000B8C96 E107                       	smpsAlterNote       $07
000B8C98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8C9C E10D                       	smpsAlterNote       $0D
000B8C9E E701                       	dc.b	smpsNoAttack, $01
000B8CA0 E111                       	smpsAlterNote       $11
000B8CA2 E701                       	dc.b	smpsNoAttack, $01
000B8CA4 E110                       	smpsAlterNote       $10
000B8CA6 E701                       	dc.b	smpsNoAttack, $01
000B8CA8 E10A                       	smpsAlterNote       $0A
000B8CAA E701                       	dc.b	smpsNoAttack, $01
000B8CAC E106                       	smpsAlterNote       $06
000B8CAE E701                       	dc.b	smpsNoAttack, $01
000B8CB0 E10A                       	smpsAlterNote       $0A
000B8CB2 E701                       	dc.b	smpsNoAttack, $01
000B8CB4 E10D                       	smpsAlterNote       $0D
000B8CB6 E701                       	dc.b	smpsNoAttack, $01
000B8CB8 E111                       	smpsAlterNote       $11
000B8CBA E701                       	dc.b	smpsNoAttack, $01
000B8CBC E10D                       	smpsAlterNote       $0D
000B8CBE E701                       	dc.b	smpsNoAttack, $01
000B8CC0 E107                       	smpsAlterNote       $07
000B8CC2 E701                       	dc.b	smpsNoAttack, $01
000B8CC4 E106                       	smpsAlterNote       $06
000B8CC6 E701                       	dc.b	smpsNoAttack, $01
000B8CC8 E10A                       	smpsAlterNote       $0A
000B8CCA E701                       	dc.b	smpsNoAttack, $01
000B8CCC E110                       	smpsAlterNote       $10
000B8CCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8CD2 E10D                       	smpsAlterNote       $0D
000B8CD4 E701                       	dc.b	smpsNoAttack, $01
000B8CD6 E107                       	smpsAlterNote       $07
000B8CD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8CDC E10D                       	smpsAlterNote       $0D
000B8CDE E701                       	dc.b	smpsNoAttack, $01
000B8CE0 E110                       	smpsAlterNote       $10
000B8CE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8CE6 E10A                       	smpsAlterNote       $0A
000B8CE8 E701                       	dc.b	smpsNoAttack, $01
000B8CEA E106                       	smpsAlterNote       $06
000B8CEC E701                       	dc.b	smpsNoAttack, $01
000B8CEE E107                       	smpsAlterNote       $07
000B8CF0 E701                       	dc.b	smpsNoAttack, $01
000B8CF2 E10D                       	smpsAlterNote       $0D
000B8CF4 E701                       	dc.b	smpsNoAttack, $01
000B8CF6 E111                       	smpsAlterNote       $11
000B8CF8 E701                       	dc.b	smpsNoAttack, $01
000B8CFA E10D                       	smpsAlterNote       $0D
000B8CFC E701                       	dc.b	smpsNoAttack, $01
000B8CFE E10A                       	smpsAlterNote       $0A
000B8D00 E701                       	dc.b	smpsNoAttack, $01
000B8D02 E106                       	smpsAlterNote       $06
000B8D04 E701                       	dc.b	smpsNoAttack, $01
000B8D06 E10A                       	smpsAlterNote       $0A
000B8D08 E701                       	dc.b	smpsNoAttack, $01
000B8D0A E110                       	smpsAlterNote       $10
000B8D0C E701                       	dc.b	smpsNoAttack, $01
000B8D0E E111                       	smpsAlterNote       $11
000B8D10 E701                       	dc.b	smpsNoAttack, $01
000B8D12 E10D                       	smpsAlterNote       $0D
000B8D14 E701                       	dc.b	smpsNoAttack, $01
000B8D16 E107                       	smpsAlterNote       $07
000B8D18 E701                       	dc.b	smpsNoAttack, $01
000B8D1A E10D                       	smpsAlterNote       $0D
000B8D1C C207                       	dc.b	nF5, $07
000B8D1E E10C                       	smpsAlterNote       $0C
000B8D20 C10D                       	dc.b	nE5, $0D
000B8D22 E109                       	smpsAlterNote       $09
000B8D24 E701                       	dc.b	smpsNoAttack, $01
000B8D26 E106                       	smpsAlterNote       $06
000B8D28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8D2C E10C                       	smpsAlterNote       $0C
000B8D2E E701                       	dc.b	smpsNoAttack, $01
000B8D30 E110                       	smpsAlterNote       $10
000B8D32 E701                       	dc.b	smpsNoAttack, $01
000B8D34 E10F                       	smpsAlterNote       $0F
000B8D36 E701                       	dc.b	smpsNoAttack, $01
000B8D38 E109                       	smpsAlterNote       $09
000B8D3A E701                       	dc.b	smpsNoAttack, $01
000B8D3C E105                       	smpsAlterNote       $05
000B8D3E E701                       	dc.b	smpsNoAttack, $01
000B8D40 E109                       	smpsAlterNote       $09
000B8D42 E701                       	dc.b	smpsNoAttack, $01
000B8D44 E10C                       	smpsAlterNote       $0C
000B8D46 E701                       	dc.b	smpsNoAttack, $01
000B8D48 E110                       	smpsAlterNote       $10
000B8D4A E701                       	dc.b	smpsNoAttack, $01
000B8D4C E10B                       	smpsAlterNote       $0B
000B8D4E BF0D                       	dc.b	nD5, $0D
000B8D50 E108                       	smpsAlterNote       $08
000B8D52 E701                       	dc.b	smpsNoAttack, $01
000B8D54 E105                       	smpsAlterNote       $05
000B8D56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8D5A E10B                       	smpsAlterNote       $0B
000B8D5C E701                       	dc.b	smpsNoAttack, $01
000B8D5E E10F                       	smpsAlterNote       $0F
000B8D60 E701                       	dc.b	smpsNoAttack, $01
000B8D62 E10E                       	smpsAlterNote       $0E
000B8D64 E701                       	dc.b	smpsNoAttack, $01
000B8D66 E108                       	smpsAlterNote       $08
000B8D68 E701                       	dc.b	smpsNoAttack, $01
000B8D6A E104                       	smpsAlterNote       $04
000B8D6C E701                       	dc.b	smpsNoAttack, $01
000B8D6E E108                       	smpsAlterNote       $08
000B8D70 E701                       	dc.b	smpsNoAttack, $01
000B8D72 E10E                       	smpsAlterNote       $0E
000B8D74 E701                       	dc.b	smpsNoAttack, $01
000B8D76 E10F                       	smpsAlterNote       $0F
000B8D78 E701                       	dc.b	smpsNoAttack, $01
000B8D7A E10B                       	smpsAlterNote       $0B
000B8D7C E701                       	dc.b	smpsNoAttack, $01
000B8D7E E105                       	smpsAlterNote       $05
000B8D80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8D84 E108                       	smpsAlterNote       $08
000B8D86 E701                       	dc.b	smpsNoAttack, $01
000B8D88 E10E                       	smpsAlterNote       $0E
000B8D8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8D8E E108                       	smpsAlterNote       $08
000B8D90 E701                       	dc.b	smpsNoAttack, $01
000B8D92 E105                       	smpsAlterNote       $05
000B8D94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8D98 E10B                       	smpsAlterNote       $0B
000B8D9A E701                       	dc.b	smpsNoAttack, $01
000B8D9C E10F                       	smpsAlterNote       $0F
000B8D9E E701                       	dc.b	smpsNoAttack, $01
000B8DA0 E10E                       	smpsAlterNote       $0E
000B8DA2 E701                       	dc.b	smpsNoAttack, $01
000B8DA4 E108                       	smpsAlterNote       $08
000B8DA6 E701                       	dc.b	smpsNoAttack, $01
000B8DA8 E104                       	smpsAlterNote       $04
000B8DAA E701                       	dc.b	smpsNoAttack, $01
000B8DAC E108                       	smpsAlterNote       $08
000B8DAE E701                       	dc.b	smpsNoAttack, $01
000B8DB0 E10B                       	smpsAlterNote       $0B
000B8DB2 E701                       	dc.b	smpsNoAttack, $01
000B8DB4 E10F                       	smpsAlterNote       $0F
000B8DB6 E701                       	dc.b	smpsNoAttack, $01
000B8DB8 E10B                       	smpsAlterNote       $0B
000B8DBA E701                       	dc.b	smpsNoAttack, $01
000B8DBC E105                       	smpsAlterNote       $05
000B8DBE E701                       	dc.b	smpsNoAttack, $01
000B8DC0 E104                       	smpsAlterNote       $04
000B8DC2 E701                       	dc.b	smpsNoAttack, $01
000B8DC4 E108                       	smpsAlterNote       $08
000B8DC6 E701                       	dc.b	smpsNoAttack, $01
000B8DC8 E10E                       	smpsAlterNote       $0E
000B8DCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8DCE E10B                       	smpsAlterNote       $0B
000B8DD0 E701                       	dc.b	smpsNoAttack, $01
000B8DD2 E105                       	smpsAlterNote       $05
000B8DD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8DD8 E10B                       	smpsAlterNote       $0B
000B8DDA E701                       	dc.b	smpsNoAttack, $01
000B8DDC E10E                       	smpsAlterNote       $0E
000B8DDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8DE2 E108                       	smpsAlterNote       $08
000B8DE4 E701                       	dc.b	smpsNoAttack, $01
000B8DE6 E105                       	smpsAlterNote       $05
000B8DE8 8001                       	dc.b	nRst, $01
000B8DEC E601                       	smpsAlterVol        $01
000B8DEE E10B                       	smpsAlterNote       $0B
000B8DF0 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
000B8DFC 8004                       	dc.b	nRst, $04
000B8E00 E6FF                       	smpsAlterVol        $FF
000B8E02 E10D                       	smpsAlterNote       $0D
000B8E04 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
000B8E0C E10C                       	smpsAlterNote       $0C
000B8E0E E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
000B8E13 E10D                       	smpsAlterNote       $0D
000B8E15 B60D                       	dc.b	nF4, $0D
000B8E17 E10A                       	smpsAlterNote       $0A
000B8E19 E701                       	dc.b	smpsNoAttack, $01
000B8E1B E106                       	smpsAlterNote       $06
000B8E1D E701                       	dc.b	smpsNoAttack, $01
000B8E1F E10A                       	smpsAlterNote       $0A
000B8E21 E701                       	dc.b	smpsNoAttack, $01
000B8E23 E110                       	smpsAlterNote       $10
000B8E25 E701                       	dc.b	smpsNoAttack, $01
000B8E27 E111                       	smpsAlterNote       $11
000B8E29 E701                       	dc.b	smpsNoAttack, $01
000B8E2B E10D                       	smpsAlterNote       $0D
000B8E2D E701                       	dc.b	smpsNoAttack, $01
000B8E2F E107                       	smpsAlterNote       $07
000B8E31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8E35 E10A                       	smpsAlterNote       $0A
000B8E37 E701                       	dc.b	smpsNoAttack, $01
000B8E39 E110                       	smpsAlterNote       $10
000B8E3B E701                       	dc.b	smpsNoAttack, $01
000B8E3D E111                       	smpsAlterNote       $11
000B8E3F 8001                       	dc.b	nRst, $01
000B8E41 E10D                       	smpsAlterNote       $0D
000B8E43 B80D                       	dc.b	nG4, $0D
000B8E45 E10A                       	smpsAlterNote       $0A
000B8E47 E701                       	dc.b	smpsNoAttack, $01
000B8E49 E106                       	smpsAlterNote       $06
000B8E4B E701                       	dc.b	smpsNoAttack, $01
000B8E4D E10A                       	smpsAlterNote       $0A
000B8E4F E701                       	dc.b	smpsNoAttack, $01
000B8E51 E110                       	smpsAlterNote       $10
000B8E53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8E57 E10D                       	smpsAlterNote       $0D
000B8E59 E701                       	dc.b	smpsNoAttack, $01
000B8E5B E107                       	smpsAlterNote       $07
000B8E5D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8E61 E10D                       	smpsAlterNote       $0D
000B8E63 E701                       	dc.b	smpsNoAttack, $01
000B8E65 E110                       	smpsAlterNote       $10
000B8E67 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8E6B E10A                       	smpsAlterNote       $0A
000B8E6D E701                       	dc.b	smpsNoAttack, $01
000B8E6F E106                       	smpsAlterNote       $06
000B8E71 E701                       	dc.b	smpsNoAttack, $01
000B8E73 E107                       	smpsAlterNote       $07
000B8E75 E701                       	dc.b	smpsNoAttack, $01
000B8E77 E10D                       	smpsAlterNote       $0D
000B8E79 E701                       	dc.b	smpsNoAttack, $01
000B8E7B E111                       	smpsAlterNote       $11
000B8E7D E701                       	dc.b	smpsNoAttack, $01
000B8E7F E10D                       	smpsAlterNote       $0D
000B8E81 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B8E85 E10F                       	smpsAlterNote       $0F
000B8E87 BA02 8001                  	dc.b	nA4, $02, nRst, $01
000B8E8B E110                       	smpsAlterNote       $10
000B8E8D BB03                       	dc.b	nBb4, $03
000B8E8F E10F                       	smpsAlterNote       $0F
000B8E91 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
000B8E97 E110                       	smpsAlterNote       $10
000B8E99 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000B8E9D E10F                       	smpsAlterNote       $0F
000B8E9F C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
000B8EA5 E110                       	smpsAlterNote       $10
000B8EA7 D302 8001                  	dc.b	nBb6, $02, nRst, $01
000B8EAB E10F                       	smpsAlterNote       $0F
000B8EAD D20D                       	dc.b	nA6, $0D
000B8EAF E10C                       	smpsAlterNote       $0C
000B8EB1 E701                       	dc.b	smpsNoAttack, $01
000B8EB3 E108                       	smpsAlterNote       $08
000B8EB5 E701                       	dc.b	smpsNoAttack, $01
000B8EB7 E10C                       	smpsAlterNote       $0C
000B8EB9 E701                       	dc.b	smpsNoAttack, $01
000B8EBB E10F                       	smpsAlterNote       $0F
000B8EBD E701                       	dc.b	smpsNoAttack, $01
000B8EBF E113                       	smpsAlterNote       $13
000B8EC1 E701                       	dc.b	smpsNoAttack, $01
000B8EC3 E10F                       	smpsAlterNote       $0F
000B8EC5 E701                       	dc.b	smpsNoAttack, $01
000B8EC7 E109                       	smpsAlterNote       $09
000B8EC9 E701                       	dc.b	smpsNoAttack, $01
000B8ECB E108                       	smpsAlterNote       $08
000B8ECD E701                       	dc.b	smpsNoAttack, $01
000B8ECF E10C                       	smpsAlterNote       $0C
000B8ED1 E701                       	dc.b	smpsNoAttack, $01
000B8ED3 E112                       	smpsAlterNote       $12
000B8ED5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8ED9 E10F                       	smpsAlterNote       $0F
000B8EDB E701                       	dc.b	smpsNoAttack, $01
000B8EDD E109                       	smpsAlterNote       $09
000B8EDF E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
000B8EE5 E10D                       	smpsAlterNote       $0D
000B8EE7 CE07                       	dc.b	nF6, $07
000B8EE9 E10C                       	smpsAlterNote       $0C
000B8EEB CD06 8001                  	dc.b	nE6, $06, nRst, $01
000B8EEF E10D                       	smpsAlterNote       $0D
000B8EF1 CE03                       	dc.b	nF6, $03
000B8EF3 E10C                       	smpsAlterNote       $0C
000B8EF5 CC0D                       	dc.b	nEb6, $0D
000B8EF7 E109                       	smpsAlterNote       $09
000B8EF9 E701                       	dc.b	smpsNoAttack, $01
000B8EFB E106                       	smpsAlterNote       $06
000B8EFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8F01 E10C                       	smpsAlterNote       $0C
000B8F03 E701                       	dc.b	smpsNoAttack, $01
000B8F05 E110                       	smpsAlterNote       $10
000B8F07 E701                       	dc.b	smpsNoAttack, $01
000B8F09 E10F                       	smpsAlterNote       $0F
000B8F0B E701                       	dc.b	smpsNoAttack, $01
000B8F0D E109                       	smpsAlterNote       $09
000B8F0F E701                       	dc.b	smpsNoAttack, $01
000B8F11 E105                       	smpsAlterNote       $05
000B8F13 E701                       	dc.b	smpsNoAttack, $01
000B8F15 E109                       	smpsAlterNote       $09
000B8F17 E701                       	dc.b	smpsNoAttack, $01
000B8F19 E10C                       	smpsAlterNote       $0C
000B8F1B E701                       	dc.b	smpsNoAttack, $01
000B8F1D E110                       	smpsAlterNote       $10
000B8F1F E701                       	dc.b	smpsNoAttack, $01
000B8F21 E10C                       	smpsAlterNote       $0C
000B8F23 E701                       	dc.b	smpsNoAttack, $01
000B8F25 E106                       	smpsAlterNote       $06
000B8F27 E701                       	dc.b	smpsNoAttack, $01
000B8F29 E105                       	smpsAlterNote       $05
000B8F2B E701                       	dc.b	smpsNoAttack, $01
000B8F2D E109                       	smpsAlterNote       $09
000B8F2F E701                       	dc.b	smpsNoAttack, $01
000B8F31 E10F                       	smpsAlterNote       $0F
000B8F33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8F37 E10C                       	smpsAlterNote       $0C
000B8F39 E701                       	dc.b	smpsNoAttack, $01
000B8F3B E10B                       	smpsAlterNote       $0B
000B8F3D CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
000B8F47 E10F                       	smpsAlterNote       $0F
000B8F49 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000B8F53 E10D                       	smpsAlterNote       $0D
000B8F55 C203                       	dc.b	nF5, $03
000B8F57 E10C                       	smpsAlterNote       $0C
000B8F59 C103 8001                  	dc.b	nE5, $03, nRst, $01
000B8F5D E10D                       	smpsAlterNote       $0D
000B8F5F C20D                       	dc.b	nF5, $0D
000B8F61 E10C                       	smpsAlterNote       $0C
000B8F63 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
000B8F67 E10B                       	smpsAlterNote       $0B
000B8F69 BF0D                       	dc.b	nD5, $0D
000B8F6B E108                       	smpsAlterNote       $08
000B8F6D E701                       	dc.b	smpsNoAttack, $01
000B8F6F E104                       	smpsAlterNote       $04
000B8F71 E701                       	dc.b	smpsNoAttack, $01
000B8F73 E108                       	smpsAlterNote       $08
000B8F75 E701                       	dc.b	smpsNoAttack, $01
000B8F77 E10E                       	smpsAlterNote       $0E
000B8F79 E701                       	dc.b	smpsNoAttack, $01
000B8F7B E10F                       	smpsAlterNote       $0F
000B8F7D E701                       	dc.b	smpsNoAttack, $01
000B8F7F E10B                       	smpsAlterNote       $0B
000B8F81 E701                       	dc.b	smpsNoAttack, $01
000B8F83 E105                       	smpsAlterNote       $05
000B8F85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8F89 E108                       	smpsAlterNote       $08
000B8F8B E701                       	dc.b	smpsNoAttack, $01
000B8F8D E10E                       	smpsAlterNote       $0E
000B8F8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8F93 E108                       	smpsAlterNote       $08
000B8F95 E701                       	dc.b	smpsNoAttack, $01
000B8F97 E105                       	smpsAlterNote       $05
000B8F99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8F9D E10B                       	smpsAlterNote       $0B
000B8F9F E701                       	dc.b	smpsNoAttack, $01
000B8FA1 E10F                       	smpsAlterNote       $0F
000B8FA3 E701                       	dc.b	smpsNoAttack, $01
000B8FA5 E10E                       	smpsAlterNote       $0E
000B8FA7 E701                       	dc.b	smpsNoAttack, $01
000B8FA9 E108                       	smpsAlterNote       $08
000B8FAB E701                       	dc.b	smpsNoAttack, $01
000B8FAD E104                       	smpsAlterNote       $04
000B8FAF E701                       	dc.b	smpsNoAttack, $01
000B8FB1 E108                       	smpsAlterNote       $08
000B8FB3 E701                       	dc.b	smpsNoAttack, $01
000B8FB5 E10B                       	smpsAlterNote       $0B
000B8FB7 E701                       	dc.b	smpsNoAttack, $01
000B8FB9 E10F                       	smpsAlterNote       $0F
000B8FBB E701                       	dc.b	smpsNoAttack, $01
000B8FBD E10B                       	smpsAlterNote       $0B
000B8FBF E701                       	dc.b	smpsNoAttack, $01
000B8FC1 E105                       	smpsAlterNote       $05
000B8FC3 E701                       	dc.b	smpsNoAttack, $01
000B8FC5 E104                       	smpsAlterNote       $04
000B8FC7 E701                       	dc.b	smpsNoAttack, $01
000B8FC9 E108                       	smpsAlterNote       $08
000B8FCB E701                       	dc.b	smpsNoAttack, $01
000B8FCD E10E                       	smpsAlterNote       $0E
000B8FCF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8FD3 E10B                       	smpsAlterNote       $0B
000B8FD5 E701                       	dc.b	smpsNoAttack, $01
000B8FD7 E105                       	smpsAlterNote       $05
000B8FD9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8FDD E10B                       	smpsAlterNote       $0B
000B8FDF E701                       	dc.b	smpsNoAttack, $01
000B8FE1 E10E                       	smpsAlterNote       $0E
000B8FE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B8FE7 E108                       	smpsAlterNote       $08
000B8FE9 E701                       	dc.b	smpsNoAttack, $01
000B8FEB E104                       	smpsAlterNote       $04
000B8FED E701                       	dc.b	smpsNoAttack, $01
000B8FEF E105                       	smpsAlterNote       $05
000B8FF1 E701                       	dc.b	smpsNoAttack, $01
000B8FF3 E10B                       	smpsAlterNote       $0B
000B8FF5 E701                       	dc.b	smpsNoAttack, $01
000B8FF7 E10F                       	smpsAlterNote       $0F
000B8FF9 E701                       	dc.b	smpsNoAttack, $01
000B8FFB E10B                       	smpsAlterNote       $0B
000B8FFD E701                       	dc.b	smpsNoAttack, $01
000B8FFF E108                       	smpsAlterNote       $08
000B9001 E701                       	dc.b	smpsNoAttack, $01
000B9003 E104                       	smpsAlterNote       $04
000B9005 E701                       	dc.b	smpsNoAttack, $01
000B9007 E108                       	smpsAlterNote       $08
000B9009 E701                       	dc.b	smpsNoAttack, $01
000B900B E10E                       	smpsAlterNote       $0E
000B900D E701                       	dc.b	smpsNoAttack, $01
000B900F E10F                       	smpsAlterNote       $0F
000B9011 E701                       	dc.b	smpsNoAttack, $01
000B9013 E10B                       	smpsAlterNote       $0B
000B9015 E701                       	dc.b	smpsNoAttack, $01
000B9017 E105                       	smpsAlterNote       $05
000B9019 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B901D E108                       	smpsAlterNote       $08
000B901F E701                       	dc.b	smpsNoAttack, $01
000B9021 E10E                       	smpsAlterNote       $0E
000B9023 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9027 E108                       	smpsAlterNote       $08
000B9029 E701                       	dc.b	smpsNoAttack, $01
000B902B E105                       	smpsAlterNote       $05
000B902D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9031 E10B                       	smpsAlterNote       $0B
000B9033 E701                       	dc.b	smpsNoAttack, $01
000B9035 E10F                       	smpsAlterNote       $0F
000B9037 E701                       	dc.b	smpsNoAttack, $01
000B9039 E10E                       	smpsAlterNote       $0E
000B903B E701                       	dc.b	smpsNoAttack, $01
000B903D E108                       	smpsAlterNote       $08
000B903F E701                       	dc.b	smpsNoAttack, $01
000B9041 E104                       	smpsAlterNote       $04
000B9043 E701                       	dc.b	smpsNoAttack, $01
000B9045 E108                       	smpsAlterNote       $08
000B9047 E701                       	dc.b	smpsNoAttack, $01
000B9049 E10B                       	smpsAlterNote       $0B
000B904B E701                       	dc.b	smpsNoAttack, $01
000B904D E10F                       	smpsAlterNote       $0F
000B904F E701                       	dc.b	smpsNoAttack, $01
000B9051 E10B                       	smpsAlterNote       $0B
000B9053 E701                       	dc.b	smpsNoAttack, $01
000B9055 E105                       	smpsAlterNote       $05
000B9057 E701                       	dc.b	smpsNoAttack, $01
000B9059 E104                       	smpsAlterNote       $04
000B905B E701                       	dc.b	smpsNoAttack, $01
000B905D E105                       	smpsAlterNote       $05
000B905F 8001                       	dc.b	nRst, $01
000B9061 E10D                       	smpsAlterNote       $0D
000B9063 C20D                       	dc.b	nF5, $0D
000B9065 E107                       	smpsAlterNote       $07
000B9067 E701                       	dc.b	smpsNoAttack, $01
000B9069 E106                       	smpsAlterNote       $06
000B906B E701                       	dc.b	smpsNoAttack, $01
000B906D E10A                       	smpsAlterNote       $0A
000B906F E701                       	dc.b	smpsNoAttack, $01
000B9071 E110                       	smpsAlterNote       $10
000B9073 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9077 E10D                       	smpsAlterNote       $0D
000B9079 E701                       	dc.b	smpsNoAttack, $01
000B907B E107                       	smpsAlterNote       $07
000B907D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9081 E10D                       	smpsAlterNote       $0D
000B9083 E701                       	dc.b	smpsNoAttack, $01
000B9085 E110                       	smpsAlterNote       $10
000B9087 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B908B E10A                       	smpsAlterNote       $0A
000B908D E701                       	dc.b	smpsNoAttack, $01
000B908F E106                       	smpsAlterNote       $06
000B9091 E701                       	dc.b	smpsNoAttack, $01
000B9093 E107                       	smpsAlterNote       $07
000B9095 E701                       	dc.b	smpsNoAttack, $01
000B9097 E10D                       	smpsAlterNote       $0D
000B9099 E701                       	dc.b	smpsNoAttack, $01
000B909B E111                       	smpsAlterNote       $11
000B909D E701                       	dc.b	smpsNoAttack, $01
000B909F E10D                       	smpsAlterNote       $0D
000B90A1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B90A5 E10C                       	smpsAlterNote       $0C
000B90A7 C10D                       	dc.b	nE5, $0D
000B90A9 E10D                       	smpsAlterNote       $0D
000B90AB C20A                       	dc.b	nF5, $0A
000B90AD E10C                       	smpsAlterNote       $0C
000B90AF C10E                       	dc.b	nE5, $0E
000B90B1 E106                       	smpsAlterNote       $06
000B90B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B90B7 E10C                       	smpsAlterNote       $0C
000B90B9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B90BD E10B                       	smpsAlterNote       $0B
000B90BF BF0D                       	dc.b	nD5, $0D
000B90C1 E10C                       	smpsAlterNote       $0C
000B90C3 C107                       	dc.b	nE5, $07
000B90C5 E10D                       	smpsAlterNote       $0D
000B90C7 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
000B90D1 E110                       	smpsAlterNote       $10
000B90D3 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
000B90D9 E10F                       	smpsAlterNote       $0F
000B90DB C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
000B90E3 E10D                       	smpsAlterNote       $0D
000B90E5 D003                       	dc.b	nG6, $03
000B90E9 E0C0                       	smpsPan             panCenter, $00
000B90EB E6FF                       	smpsAlterVol        $FF
000B90ED AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
000B90F9 8001                       	dc.b	nRst, $01
000B90FB E10C                       	smpsAlterNote       $0C
000B90FD A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
000B9107 E604                       	smpsAlterVol        $04
000B9109 E10B                       	smpsAlterNote       $0B
000B910B B306 8001                  	dc.b	nD4, $06, nRst, $01
000B910F E10F                       	smpsAlterNote       $0F
000B9111 AE03                       	dc.b	nA3, $03
000B9113 E10D                       	smpsAlterNote       $0D
000B9115 B603 8001                  	dc.b	nF4, $03, nRst, $01
000B9119 E10C                       	smpsAlterNote       $0C
000B911B B506 8001                  	dc.b	nE4, $06, nRst, $01
000B911F E10B                       	smpsAlterNote       $0B
000B9121 B302 8001                  	dc.b	nD4, $02, nRst, $01
000B9125 E10A                       	smpsAlterNote       $0A
000B9127 B103                       	dc.b	nC4, $03
000B9129 E110                       	smpsAlterNote       $10
000B912B AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000B912F E10F                       	smpsAlterNote       $0F
000B9131 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
000B9135 E080                       	smpsPan             panLeft, $00
000B9137 01                         	dc.b	$01
000B913A E6FB                       	smpsAlterVol        $FB
000B913C E1E4                       	smpsAlterNote       $E4
000B913E C501                       	dc.b	nAb5, $01
000B9140 E1F4                       	smpsAlterNote       $F4
000B9142 E701                       	dc.b	smpsNoAttack, $01
000B9144 E104                       	smpsAlterNote       $04
000B9146 E701                       	dc.b	smpsNoAttack, $01
000B9148 E114                       	smpsAlterNote       $14
000B914A E701                       	dc.b	smpsNoAttack, $01
000B914C E11C                       	smpsAlterNote       $1C
000B914E E701                       	dc.b	smpsNoAttack, $01
000B9150 E1EF                       	smpsAlterNote       $EF
000B9152 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000B9155 E1FF                       	smpsAlterNote       $FF
000B9157 E701                       	dc.b	smpsNoAttack, $01
000B9159 E10F                       	smpsAlterNote       $0F
000B915B C606                       	dc.b	nA5, $06
000B915D E109                       	smpsAlterNote       $09
000B915F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9163 E10F                       	smpsAlterNote       $0F
000B9165 E701                       	dc.b	smpsNoAttack, $01
000B9167 E112                       	smpsAlterNote       $12
000B9169 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B916D E10C                       	smpsAlterNote       $0C
000B916F E701                       	dc.b	smpsNoAttack, $01
000B9171 E108                       	smpsAlterNote       $08
000B9173 E701                       	dc.b	smpsNoAttack, $01
000B9175 E109                       	smpsAlterNote       $09
000B9177 E701                       	dc.b	smpsNoAttack, $01
000B9179 E10F                       	smpsAlterNote       $0F
000B917B E701                       	dc.b	smpsNoAttack, $01
000B917D E113                       	smpsAlterNote       $13
000B917F E701                       	dc.b	smpsNoAttack, $01
000B9181 E10F                       	smpsAlterNote       $0F
000B9183 E701                       	dc.b	smpsNoAttack, $01
000B9185 E10C                       	smpsAlterNote       $0C
000B9187 E701                       	dc.b	smpsNoAttack, $01
000B9189 E108                       	smpsAlterNote       $08
000B918B E701                       	dc.b	smpsNoAttack, $01
000B918D E10C                       	smpsAlterNote       $0C
000B918F E701                       	dc.b	smpsNoAttack, $01
000B9191 E112                       	smpsAlterNote       $12
000B9193 E701                       	dc.b	smpsNoAttack, $01
000B9195 E113                       	smpsAlterNote       $13
000B9197 E701                       	dc.b	smpsNoAttack, $01
000B9199 E10F                       	smpsAlterNote       $0F
000B919B E701                       	dc.b	smpsNoAttack, $01
000B919D E109                       	smpsAlterNote       $09
000B919F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B91A3 E10C                       	smpsAlterNote       $0C
000B91A5 E701                       	dc.b	smpsNoAttack, $01
000B91A7 E112                       	smpsAlterNote       $12
000B91A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B91AD E10C                       	smpsAlterNote       $0C
000B91AF E701                       	dc.b	smpsNoAttack, $01
000B91B1 E109                       	smpsAlterNote       $09
000B91B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B91B7 E10F                       	smpsAlterNote       $0F
000B91B9 E701                       	dc.b	smpsNoAttack, $01
000B91BB E113                       	smpsAlterNote       $13
000B91BD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B91C1 E10D                       	smpsAlterNote       $0D
000B91C3 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
000B91C9 E10C                       	smpsAlterNote       $0C
000B91CB C102 8001                  	dc.b	nE5, $02, nRst, $01
000B91CF E10D                       	smpsAlterNote       $0D
000B91D1 C201 8001                  	dc.b	nF5, $01, nRst, $01
000B91D5 E10C                       	smpsAlterNote       $0C
000B91D7 C102                       	dc.b	nE5, $02
000B91D9 E10B                       	smpsAlterNote       $0B
000B91DB BF02 8001                  	dc.b	nD5, $02, nRst, $01
000B91DF E10C                       	smpsAlterNote       $0C
000B91E1 C101 8001                  	dc.b	nE5, $01, nRst, $01
000B91E5 E10B                       	smpsAlterNote       $0B
000B91E7 BF02                       	dc.b	nD5, $02
000B91E9 E10A                       	smpsAlterNote       $0A
000B91EB BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
000B91F5 E110                       	smpsAlterNote       $10
000B91F7 BB02                       	dc.b	nBb4, $02
000B91F9 E10A                       	smpsAlterNote       $0A
000B91FB BD02 8001                  	dc.b	nC5, $02, nRst, $01
000B91FF E110                       	smpsAlterNote       $10
000B9201 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000B9205 E10F                       	smpsAlterNote       $0F
000B9207 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000B920B E110                       	smpsAlterNote       $10
000B920D BB02                       	dc.b	nBb4, $02
000B920F E10F                       	smpsAlterNote       $0F
000B9211 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000B921B E10C                       	smpsAlterNote       $0C
000B921D B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
000B9225 E10B                       	smpsAlterNote       $0B
000B9227 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
000B922B E10F                       	smpsAlterNote       $0F
000B922D BA02                       	dc.b	nA4, $02
000B9231 E0C0                       	smpsPan             panCenter, $00
000B9233 E601                       	smpsAlterVol        $01
000B9235 E109                       	smpsAlterNote       $09
000B9237 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
000B9243 E108                       	smpsAlterNote       $08
000B9245 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
000B924B E107                       	smpsAlterNote       $07
000B924D B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
000B9253 E109                       	smpsAlterNote       $09
000B9255 B603 8001                  	dc.b	nF4, $03, nRst, $01
000B9259 E108                       	smpsAlterNote       $08
000B925B B506 8001                  	dc.b	nE4, $06, nRst, $01
000B925F E107                       	smpsAlterNote       $07
000B9261 B302 8001                  	dc.b	nD4, $02, nRst, $01
000B9265 E106                       	smpsAlterNote       $06
000B9267 B103                       	dc.b	nC4, $03
000B9269 E10C                       	smpsAlterNote       $0C
000B926B AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000B9271 E080                       	smpsPan             panLeft, $00
000B9273 07                         	dc.b	$07
000B9274 E6FE                       	smpsAlterVol        $FE
000B9276 E10B                       	smpsAlterNote       $0B
000B9278 B20D                       	dc.b	nCs4, $0D
000B927A E105                       	smpsAlterNote       $05
000B927C E701                       	dc.b	smpsNoAttack, $01
000B927E E104                       	smpsAlterNote       $04
000B9280 E701                       	dc.b	smpsNoAttack, $01
000B9282 E108                       	smpsAlterNote       $08
000B9284 E701                       	dc.b	smpsNoAttack, $01
000B9286 E10E                       	smpsAlterNote       $0E
000B9288 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B928C E10B                       	smpsAlterNote       $0B
000B928E E701                       	dc.b	smpsNoAttack, $01
000B9290 E105                       	smpsAlterNote       $05
000B9292 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9296 E10B                       	smpsAlterNote       $0B
000B9298 E701                       	dc.b	smpsNoAttack, $01
000B929A E10E                       	smpsAlterNote       $0E
000B929C E701                       	dc.b	smpsNoAttack, $01
000B929E E10F                       	smpsAlterNote       $0F
000B92A0 8001                       	dc.b	nRst, $01
000B92A2 E10B                       	smpsAlterNote       $0B
000B92A4 B30D                       	dc.b	nD4, $0D
000B92A6 E105                       	smpsAlterNote       $05
000B92A8 E701                       	dc.b	smpsNoAttack, $01
000B92AA E104                       	smpsAlterNote       $04
000B92AC E701                       	dc.b	smpsNoAttack, $01
000B92AE E108                       	smpsAlterNote       $08
000B92B0 E701                       	dc.b	smpsNoAttack, $01
000B92B2 E10E                       	smpsAlterNote       $0E
000B92B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B92B8 E10B                       	smpsAlterNote       $0B
000B92BA E701                       	dc.b	smpsNoAttack, $01
000B92BC E105                       	smpsAlterNote       $05
000B92BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B92C2 E10B                       	smpsAlterNote       $0B
000B92C4 E701                       	dc.b	smpsNoAttack, $01
000B92C6 E10E                       	smpsAlterNote       $0E
000B92C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B92CC E108                       	smpsAlterNote       $08
000B92CE E701                       	dc.b	smpsNoAttack, $01
000B92D0 E104                       	smpsAlterNote       $04
000B92D2 E701                       	dc.b	smpsNoAttack, $01
000B92D4 E105                       	smpsAlterNote       $05
000B92D6 E701                       	dc.b	smpsNoAttack, $01
000B92D8 E10B                       	smpsAlterNote       $0B
000B92DA E701                       	dc.b	smpsNoAttack, $01
000B92DC E10F                       	smpsAlterNote       $0F
000B92DE E701                       	dc.b	smpsNoAttack, $01
000B92E0 E10B                       	smpsAlterNote       $0B
000B92E2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B92E6 E10C                       	smpsAlterNote       $0C
000B92E8 B50D                       	dc.b	nE4, $0D
000B92EA E106                       	smpsAlterNote       $06
000B92EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B92F0 E10C                       	smpsAlterNote       $0C
000B92F2 E701                       	dc.b	smpsNoAttack, $01
000B92F4 E10F                       	smpsAlterNote       $0F
000B92F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B92FA E109                       	smpsAlterNote       $09
000B92FC E701                       	dc.b	smpsNoAttack, $01
000B92FE E105                       	smpsAlterNote       $05
000B9300 E701                       	dc.b	smpsNoAttack, $01
000B9302 E106                       	smpsAlterNote       $06
000B9304 E701                       	dc.b	smpsNoAttack, $01
000B9306 E10C                       	smpsAlterNote       $0C
000B9308 E701                       	dc.b	smpsNoAttack, $01
000B930A E110                       	smpsAlterNote       $10
000B930C E701                       	dc.b	smpsNoAttack, $01
000B930E E10B                       	smpsAlterNote       $0B
000B9310 B30E                       	dc.b	nD4, $0E
000B9312 E105                       	smpsAlterNote       $05
000B9314 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9318 E10B                       	smpsAlterNote       $0B
000B931A E701                       	dc.b	smpsNoAttack, $01
000B931C E10E                       	smpsAlterNote       $0E
000B931E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9322 E108                       	smpsAlterNote       $08
000B9324 E701                       	dc.b	smpsNoAttack, $01
000B9326 E104                       	smpsAlterNote       $04
000B9328 E701                       	dc.b	smpsNoAttack, $01
000B932A E105                       	smpsAlterNote       $05
000B932C E701                       	dc.b	smpsNoAttack, $01
000B932E E10B                       	smpsAlterNote       $0B
000B9330 E701                       	dc.b	smpsNoAttack, $01
000B9332 E10F                       	smpsAlterNote       $0F
000B9334 E701                       	dc.b	smpsNoAttack, $01
000B9336 E10B                       	smpsAlterNote       $0B
000B9338 E701                       	dc.b	smpsNoAttack, $01
000B933A E108                       	smpsAlterNote       $08
000B933C E701                       	dc.b	smpsNoAttack, $01
000B933E E104                       	smpsAlterNote       $04
000B9340 E701                       	dc.b	smpsNoAttack, $01
000B9342 E108                       	smpsAlterNote       $08
000B9344 E701                       	dc.b	smpsNoAttack, $01
000B9346 E10E                       	smpsAlterNote       $0E
000B9348 E701                       	dc.b	smpsNoAttack, $01
000B934A E10F                       	smpsAlterNote       $0F
000B934C E701                       	dc.b	smpsNoAttack, $01
000B934E E10B                       	smpsAlterNote       $0B
000B9350 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000B9354 E108                       	smpsAlterNote       $08
000B9356 E701                       	dc.b	smpsNoAttack, $01
000B9358 E105                       	smpsAlterNote       $05
000B935A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B935E E10B                       	smpsAlterNote       $0B
000B9360 E701                       	dc.b	smpsNoAttack, $01
000B9362 E10F                       	smpsAlterNote       $0F
000B9364 E701                       	dc.b	smpsNoAttack, $01
000B9366 E10E                       	smpsAlterNote       $0E
000B9368 E701                       	dc.b	smpsNoAttack, $01
000B936A E108                       	smpsAlterNote       $08
000B936C E701                       	dc.b	smpsNoAttack, $01
000B936E E104                       	smpsAlterNote       $04
000B9370 E701                       	dc.b	smpsNoAttack, $01
000B9372 E108                       	smpsAlterNote       $08
000B9374 E701                       	dc.b	smpsNoAttack, $01
000B9376 E10B                       	smpsAlterNote       $0B
000B9378 E701                       	dc.b	smpsNoAttack, $01
000B937A E10F                       	smpsAlterNote       $0F
000B937C E701                       	dc.b	smpsNoAttack, $01
000B937E E10B                       	smpsAlterNote       $0B
000B9380 B30D                       	dc.b	nD4, $0D
000B9382 E108                       	smpsAlterNote       $08
000B9384 E701                       	dc.b	smpsNoAttack, $01
000B9386 E105                       	smpsAlterNote       $05
000B9388 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B938C E10B                       	smpsAlterNote       $0B
000B938E E701                       	dc.b	smpsNoAttack, $01
000B9390 E10F                       	smpsAlterNote       $0F
000B9392 E701                       	dc.b	smpsNoAttack, $01
000B9394 E10E                       	smpsAlterNote       $0E
000B9396 E701                       	dc.b	smpsNoAttack, $01
000B9398 E108                       	smpsAlterNote       $08
000B939A E701                       	dc.b	smpsNoAttack, $01
000B939C E104                       	smpsAlterNote       $04
000B939E E701                       	dc.b	smpsNoAttack, $01
000B93A0 E108                       	smpsAlterNote       $08
000B93A2 E701                       	dc.b	smpsNoAttack, $01
000B93A4 E10B                       	smpsAlterNote       $0B
000B93A6 E701                       	dc.b	smpsNoAttack, $01
000B93A8 E10F                       	smpsAlterNote       $0F
000B93AA E701                       	dc.b	smpsNoAttack, $01
000B93AC E10B                       	smpsAlterNote       $0B
000B93AE E701                       	dc.b	smpsNoAttack, $01
000B93B0 E105                       	smpsAlterNote       $05
000B93B2 E701                       	dc.b	smpsNoAttack, $01
000B93B4 E104                       	smpsAlterNote       $04
000B93B6 E701                       	dc.b	smpsNoAttack, $01
000B93B8 E108                       	smpsAlterNote       $08
000B93BA E701                       	dc.b	smpsNoAttack, $01
000B93BC E10E                       	smpsAlterNote       $0E
000B93BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B93C2 E10B                       	smpsAlterNote       $0B
000B93C4 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
000B93C8 E108                       	smpsAlterNote       $08
000B93CA E701                       	dc.b	smpsNoAttack, $01
000B93CC E104                       	smpsAlterNote       $04
000B93CE E701                       	dc.b	smpsNoAttack, $01
000B93D0 E108                       	smpsAlterNote       $08
000B93D2 E701                       	dc.b	smpsNoAttack, $01
000B93D4 E10B                       	smpsAlterNote       $0B
000B93D6 E701                       	dc.b	smpsNoAttack, $01
000B93DA E0C0                       	smpsPan             panCenter, $00
000B93DC E601                       	smpsAlterVol        $01
000B93DE E108                       	smpsAlterNote       $08
000B93E0 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
000B93EC 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
000B93F4 E080                       	smpsPan             panLeft, $00
000B93F6 07                         	dc.b	$07
000B93F7 E6FF                       	smpsAlterVol        $FF
000B93F9 E10D                       	smpsAlterNote       $0D
000B93FB B60D                       	dc.b	nF4, $0D
000B93FD E10A                       	smpsAlterNote       $0A
000B93FF E701                       	dc.b	smpsNoAttack, $01
000B9401 E106                       	smpsAlterNote       $06
000B9403 E701                       	dc.b	smpsNoAttack, $01
000B9405 E10A                       	smpsAlterNote       $0A
000B9407 E701                       	dc.b	smpsNoAttack, $01
000B9409 E110                       	smpsAlterNote       $10
000B940B E701                       	dc.b	smpsNoAttack, $01
000B940D E111                       	smpsAlterNote       $11
000B940F E701                       	dc.b	smpsNoAttack, $01
000B9411 E10D                       	smpsAlterNote       $0D
000B9413 E701                       	dc.b	smpsNoAttack, $01
000B9415 E107                       	smpsAlterNote       $07
000B9417 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B941B E10A                       	smpsAlterNote       $0A
000B941D E701                       	dc.b	smpsNoAttack, $01
000B941F E110                       	smpsAlterNote       $10
000B9421 E701                       	dc.b	smpsNoAttack, $01
000B9423 E111                       	smpsAlterNote       $11
000B9425 8001                       	dc.b	nRst, $01
000B9427 E10D                       	smpsAlterNote       $0D
000B9429 B80D                       	dc.b	nG4, $0D
000B942B E10A                       	smpsAlterNote       $0A
000B942D E701                       	dc.b	smpsNoAttack, $01
000B942F E106                       	smpsAlterNote       $06
000B9431 E701                       	dc.b	smpsNoAttack, $01
000B9433 E10A                       	smpsAlterNote       $0A
000B9435 E701                       	dc.b	smpsNoAttack, $01
000B9437 E110                       	smpsAlterNote       $10
000B9439 E701                       	dc.b	smpsNoAttack, $01
000B943B E111                       	smpsAlterNote       $11
000B943D E701                       	dc.b	smpsNoAttack, $01
000B943F E10D                       	smpsAlterNote       $0D
000B9441 E701                       	dc.b	smpsNoAttack, $01
000B9443 E107                       	smpsAlterNote       $07
000B9445 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9449 E10D                       	smpsAlterNote       $0D
000B944B E701                       	dc.b	smpsNoAttack, $01
000B944D E110                       	smpsAlterNote       $10
000B944F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9453 E10A                       	smpsAlterNote       $0A
000B9455 E701                       	dc.b	smpsNoAttack, $01
000B9457 E106                       	smpsAlterNote       $06
000B9459 E701                       	dc.b	smpsNoAttack, $01
000B945B E107                       	smpsAlterNote       $07
000B945D E701                       	dc.b	smpsNoAttack, $01
000B945F E10D                       	smpsAlterNote       $0D
000B9461 E701                       	dc.b	smpsNoAttack, $01
000B9463 E111                       	smpsAlterNote       $11
000B9465 E701                       	dc.b	smpsNoAttack, $01
000B9467 E10D                       	smpsAlterNote       $0D
000B9469 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B946D E10F                       	smpsAlterNote       $0F
000B946F BA0D                       	dc.b	nA4, $0D
000B9471 E109                       	smpsAlterNote       $09
000B9473 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9477 E10C                       	smpsAlterNote       $0C
000B9479 E701                       	dc.b	smpsNoAttack, $01
000B947B E112                       	smpsAlterNote       $12
000B947D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9481 E10C                       	smpsAlterNote       $0C
000B9483 E701                       	dc.b	smpsNoAttack, $01
000B9485 E109                       	smpsAlterNote       $09
000B9487 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B948B E10F                       	smpsAlterNote       $0F
000B948D E701                       	dc.b	smpsNoAttack, $01
000B948F E113                       	smpsAlterNote       $13
000B9491 E701                       	dc.b	smpsNoAttack, $01
000B9493 E112                       	smpsAlterNote       $12
000B9495 E701                       	dc.b	smpsNoAttack, $01
000B9497 E10C                       	smpsAlterNote       $0C
000B9499 E701                       	dc.b	smpsNoAttack, $01
000B949B E108                       	smpsAlterNote       $08
000B949D E701                       	dc.b	smpsNoAttack, $01
000B949F E10C                       	smpsAlterNote       $0C
000B94A1 E701                       	dc.b	smpsNoAttack, $01
000B94A3 E10F                       	smpsAlterNote       $0F
000B94A5 E701                       	dc.b	smpsNoAttack, $01
000B94A7 E113                       	smpsAlterNote       $13
000B94A9 E701                       	dc.b	smpsNoAttack, $01
000B94AB E10F                       	smpsAlterNote       $0F
000B94AD E701                       	dc.b	smpsNoAttack, $01
000B94AF E109                       	smpsAlterNote       $09
000B94B1 E701                       	dc.b	smpsNoAttack, $01
000B94B3 E108                       	smpsAlterNote       $08
000B94B5 E701                       	dc.b	smpsNoAttack, $01
000B94B7 E10C                       	smpsAlterNote       $0C
000B94B9 E701                       	dc.b	smpsNoAttack, $01
000B94BB E112                       	smpsAlterNote       $12
000B94BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B94C1 E10F                       	smpsAlterNote       $0F
000B94C3 E701                       	dc.b	smpsNoAttack, $01
000B94C5 E109                       	smpsAlterNote       $09
000B94C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B94CB E10F                       	smpsAlterNote       $0F
000B94CD E701                       	dc.b	smpsNoAttack, $01
000B94CF E112                       	smpsAlterNote       $12
000B94D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B94D5 E10C                       	smpsAlterNote       $0C
000B94D7 E701                       	dc.b	smpsNoAttack, $01
000B94D9 E108                       	smpsAlterNote       $08
000B94DB E701                       	dc.b	smpsNoAttack, $01
000B94DD E109                       	smpsAlterNote       $09
000B94DF E701                       	dc.b	smpsNoAttack, $01
000B94E1 E10C                       	smpsAlterNote       $0C
000B94E3 B50A                       	dc.b	nE4, $0A
000B94E5 E10D                       	smpsAlterNote       $0D
000B94E7 B60E                       	dc.b	nF4, $0E
000B94E9 E107                       	smpsAlterNote       $07
000B94EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B94EF E10D                       	smpsAlterNote       $0D
000B94F1 E701                       	dc.b	smpsNoAttack, $01
000B94F3 E110                       	smpsAlterNote       $10
000B94F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B94F9 E10A                       	smpsAlterNote       $0A
000B94FB E701                       	dc.b	smpsNoAttack, $01
000B94FD E106                       	smpsAlterNote       $06
000B94FF E701                       	dc.b	smpsNoAttack, $01
000B9501 E107                       	smpsAlterNote       $07
000B9503 E701                       	dc.b	smpsNoAttack, $01
000B9505 E10D                       	smpsAlterNote       $0D
000B9507 E701                       	dc.b	smpsNoAttack, $01
000B9509 E111                       	smpsAlterNote       $11
000B950B E701                       	dc.b	smpsNoAttack, $01
000B950D E10D                       	smpsAlterNote       $0D
000B950F B80D                       	dc.b	nG4, $0D
000B9511 E10A                       	smpsAlterNote       $0A
000B9513 E701                       	dc.b	smpsNoAttack, $01
000B9515 E107                       	smpsAlterNote       $07
000B9517 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B951B E10D                       	smpsAlterNote       $0D
000B951D E701                       	dc.b	smpsNoAttack, $01
000B951F E111                       	smpsAlterNote       $11
000B9521 E701                       	dc.b	smpsNoAttack, $01
000B9523 E110                       	smpsAlterNote       $10
000B9525 E701                       	dc.b	smpsNoAttack, $01
000B9527 E10A                       	smpsAlterNote       $0A
000B9529 E701                       	dc.b	smpsNoAttack, $01
000B952B E106                       	smpsAlterNote       $06
000B952D E701                       	dc.b	smpsNoAttack, $01
000B952F E10A                       	smpsAlterNote       $0A
000B9531 E701                       	dc.b	smpsNoAttack, $01
000B9533 E10D                       	smpsAlterNote       $0D
000B9535 E701                       	dc.b	smpsNoAttack, $01
000B9537 E111                       	smpsAlterNote       $11
000B9539 E701                       	dc.b	smpsNoAttack, $01
000B953B E10D                       	smpsAlterNote       $0D
000B953D E701                       	dc.b	smpsNoAttack, $01
000B953F E107                       	smpsAlterNote       $07
000B9541 E701                       	dc.b	smpsNoAttack, $01
000B9543 E106                       	smpsAlterNote       $06
000B9545 E701                       	dc.b	smpsNoAttack, $01
000B9547 E10A                       	smpsAlterNote       $0A
000B9549 E701                       	dc.b	smpsNoAttack, $01
000B954B E110                       	smpsAlterNote       $10
000B954D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9551 E10D                       	smpsAlterNote       $0D
000B9553 E701                       	dc.b	smpsNoAttack, $01
000B9555 E10F                       	smpsAlterNote       $0F
000B9557 BA0D                       	dc.b	nA4, $0D
000B9559 E10C                       	smpsAlterNote       $0C
000B955B E701                       	dc.b	smpsNoAttack, $01
000B955D E108                       	smpsAlterNote       $08
000B955F E701                       	dc.b	smpsNoAttack, $01
000B9561 E109                       	smpsAlterNote       $09
000B9563 E701                       	dc.b	smpsNoAttack, $01
000B9565 E10F                       	smpsAlterNote       $0F
000B9567 E701                       	dc.b	smpsNoAttack, $01
000B9569 E113                       	smpsAlterNote       $13
000B956B E701                       	dc.b	smpsNoAttack, $01
000B956D E10F                       	smpsAlterNote       $0F
000B956F E701                       	dc.b	smpsNoAttack, $01
000B9571 E10C                       	smpsAlterNote       $0C
000B9573 E701                       	dc.b	smpsNoAttack, $01
000B9575 E108                       	smpsAlterNote       $08
000B9577 E701                       	dc.b	smpsNoAttack, $01
000B9579 E10C                       	smpsAlterNote       $0C
000B957B E701                       	dc.b	smpsNoAttack, $01
000B957D E112                       	smpsAlterNote       $12
000B957F E701                       	dc.b	smpsNoAttack, $01
000B9581 E113                       	smpsAlterNote       $13
000B9583 E701                       	dc.b	smpsNoAttack, $01
000B9585 E10F                       	smpsAlterNote       $0F
000B9587 E701                       	dc.b	smpsNoAttack, $01
000B9589 E109                       	smpsAlterNote       $09
000B958B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B958F E10C                       	smpsAlterNote       $0C
000B9591 E701                       	dc.b	smpsNoAttack, $01
000B9593 E112                       	smpsAlterNote       $12
000B9595 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9599 E10C                       	smpsAlterNote       $0C
000B959B E701                       	dc.b	smpsNoAttack, $01
000B959D E109                       	smpsAlterNote       $09
000B959F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B95A3 E10F                       	smpsAlterNote       $0F
000B95A5 E701                       	dc.b	smpsNoAttack, $01
000B95A7 E113                       	smpsAlterNote       $13
000B95A9 E701                       	dc.b	smpsNoAttack, $01
000B95AB E112                       	smpsAlterNote       $12
000B95AD E701                       	dc.b	smpsNoAttack, $01
000B95AF E10C                       	smpsAlterNote       $0C
000B95B1 E701                       	dc.b	smpsNoAttack, $01
000B95B3 E109                       	smpsAlterNote       $09
000B95B5 8001                       	dc.b	nRst, $01
000B95B7 E10D                       	smpsAlterNote       $0D
000B95B9 B60A                       	dc.b	nF4, $0A
000B95BB E10C                       	smpsAlterNote       $0C
000B95BD B506 8001                  	dc.b	nE4, $06, nRst, $01
000B95C1 E10B                       	smpsAlterNote       $0B
000B95C3 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000B95C7 E10C                       	smpsAlterNote       $0C
000B95C9 B503                       	dc.b	nE4, $03
000B95CB E10D                       	smpsAlterNote       $0D
000B95CD B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
000B95D7 E10C                       	smpsAlterNote       $0C
000B95D9 E701                       	dc.b	smpsNoAttack, $01
000B95DB E108                       	smpsAlterNote       $08
000B95DD E701                       	dc.b	smpsNoAttack, $01
000B95DF E10C                       	smpsAlterNote       $0C
000B95E1 E701                       	dc.b	smpsNoAttack, $01
000B95E3 E112                       	smpsAlterNote       $12
000B95E5 E701                       	dc.b	smpsNoAttack, $01
000B95E7 E113                       	smpsAlterNote       $13
000B95E9 E701                       	dc.b	smpsNoAttack, $01
000B95EB E10F                       	smpsAlterNote       $0F
000B95ED E701                       	dc.b	smpsNoAttack, $01
000B95EF E109                       	smpsAlterNote       $09
000B95F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B95F5 E10C                       	smpsAlterNote       $0C
000B95F7 E701                       	dc.b	smpsNoAttack, $01
000B95F9 E112                       	smpsAlterNote       $12
000B95FB E701                       	dc.b	smpsNoAttack, $01
000B95FD E113                       	smpsAlterNote       $13
000B95FF 8001                       	dc.b	nRst, $01
000B9601 E10D                       	smpsAlterNote       $0D
000B9603 C20D                       	dc.b	nF5, $0D
000B9605 E10A                       	smpsAlterNote       $0A
000B9607 E701                       	dc.b	smpsNoAttack, $01
000B9609 E106                       	smpsAlterNote       $06
000B960B E701                       	dc.b	smpsNoAttack, $01
000B960D E10A                       	smpsAlterNote       $0A
000B960F E701                       	dc.b	smpsNoAttack, $01
000B9611 E110                       	smpsAlterNote       $10
000B9613 E701                       	dc.b	smpsNoAttack, $01
000B9615 E111                       	smpsAlterNote       $11
000B9617 E701                       	dc.b	smpsNoAttack, $01
000B9619 E10D                       	smpsAlterNote       $0D
000B961B E701                       	dc.b	smpsNoAttack, $01
000B961D E107                       	smpsAlterNote       $07
000B961F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9623 E10A                       	smpsAlterNote       $0A
000B9625 E701                       	dc.b	smpsNoAttack, $01
000B9627 E110                       	smpsAlterNote       $10
000B9629 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B962D E10A                       	smpsAlterNote       $0A
000B962F E701                       	dc.b	smpsNoAttack, $01
000B9631 E107                       	smpsAlterNote       $07
000B9633 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9637 E10D                       	smpsAlterNote       $0D
000B9639 E701                       	dc.b	smpsNoAttack, $01
000B963B E111                       	smpsAlterNote       $11
000B963D E701                       	dc.b	smpsNoAttack, $01
000B963F E110                       	smpsAlterNote       $10
000B9641 E701                       	dc.b	smpsNoAttack, $01
000B9643 E10A                       	smpsAlterNote       $0A
000B9645 E701                       	dc.b	smpsNoAttack, $01
000B9647 E106                       	smpsAlterNote       $06
000B9649 E701                       	dc.b	smpsNoAttack, $01
000B964B E10A                       	smpsAlterNote       $0A
000B964D E701                       	dc.b	smpsNoAttack, $01
000B964F E10D                       	smpsAlterNote       $0D
000B9651 E701                       	dc.b	smpsNoAttack, $01
000B9653 E111                       	smpsAlterNote       $11
000B9655 E701                       	dc.b	smpsNoAttack, $01
000B9657 E10D                       	smpsAlterNote       $0D
000B9659 E701                       	dc.b	smpsNoAttack, $01
000B965B E107                       	smpsAlterNote       $07
000B965D E701                       	dc.b	smpsNoAttack, $01
000B965F E106                       	smpsAlterNote       $06
000B9661 E701                       	dc.b	smpsNoAttack, $01
000B9663 E10A                       	smpsAlterNote       $0A
000B9665 E701                       	dc.b	smpsNoAttack, $01
000B9667 E110                       	smpsAlterNote       $10
000B9669 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B966D E10D                       	smpsAlterNote       $0D
000B966F E701                       	dc.b	smpsNoAttack, $01
000B9671 E107                       	smpsAlterNote       $07
000B9673 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9677 E10D                       	smpsAlterNote       $0D
000B9679 E701                       	dc.b	smpsNoAttack, $01
000B967B E110                       	smpsAlterNote       $10
000B967D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9681 E10A                       	smpsAlterNote       $0A
000B9683 E701                       	dc.b	smpsNoAttack, $01
000B9685 E106                       	smpsAlterNote       $06
000B9687 E701                       	dc.b	smpsNoAttack, $01
000B9689 E107                       	smpsAlterNote       $07
000B968B E701                       	dc.b	smpsNoAttack, $01
000B968D E10D                       	smpsAlterNote       $0D
000B968F E701                       	dc.b	smpsNoAttack, $01
000B9691 E111                       	smpsAlterNote       $11
000B9693 E701                       	dc.b	smpsNoAttack, $01
000B9695 E10D                       	smpsAlterNote       $0D
000B9697 E701                       	dc.b	smpsNoAttack, $01
000B9699 E10A                       	smpsAlterNote       $0A
000B969B E701                       	dc.b	smpsNoAttack, $01
000B969D E107                       	smpsAlterNote       $07
000B969F 8001                       	dc.b	nRst, $01
000B96A1 E10D                       	smpsAlterNote       $0D
000B96A3 C206 8001                  	dc.b	nF5, $06, nRst, $01
000B96A9 E601                       	smpsAlterVol        $01
000B96AB E110                       	smpsAlterNote       $10
000B96AD BB0D                       	dc.b	nBb4, $0D
000B96AF E10A                       	smpsAlterNote       $0A
000B96B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B96B5 E110                       	smpsAlterNote       $10
000B96B7 E701                       	dc.b	smpsNoAttack, $01
000B96B9 E113                       	smpsAlterNote       $13
000B96BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B96BF E10D                       	smpsAlterNote       $0D
000B96C1 E701                       	dc.b	smpsNoAttack, $01
000B96C3 E109                       	smpsAlterNote       $09
000B96C5 E701                       	dc.b	smpsNoAttack, $01
000B96C7 E10A                       	smpsAlterNote       $0A
000B96C9 E701                       	dc.b	smpsNoAttack, $01
000B96CB E110                       	smpsAlterNote       $10
000B96CD E701                       	dc.b	smpsNoAttack, $01
000B96CF E114                       	smpsAlterNote       $14
000B96D1 E701                       	dc.b	smpsNoAttack, $01
000B96D3 E110                       	smpsAlterNote       $10
000B96D5 E701                       	dc.b	smpsNoAttack, $01
000B96D7 E10D                       	smpsAlterNote       $0D
000B96D9 E701                       	dc.b	smpsNoAttack, $01
000B96DB E109                       	smpsAlterNote       $09
000B96DD E701                       	dc.b	smpsNoAttack, $01
000B96DF E10A                       	smpsAlterNote       $0A
000B96E1 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000B96E5 E107                       	smpsAlterNote       $07
000B96E7 E701                       	dc.b	smpsNoAttack, $01
000B96E9 E103                       	smpsAlterNote       $03
000B96EB E701                       	dc.b	smpsNoAttack, $01
000B96ED E107                       	smpsAlterNote       $07
000B96EF E701                       	dc.b	smpsNoAttack, $01
000B96F1 E10D                       	smpsAlterNote       $0D
000B96F3 E701                       	dc.b	smpsNoAttack, $01
000B96F5 E10E                       	smpsAlterNote       $0E
000B96F7 E701                       	dc.b	smpsNoAttack, $01
000B96F9 E10A                       	smpsAlterNote       $0A
000B96FB E701                       	dc.b	smpsNoAttack, $01
000B96FD E104                       	smpsAlterNote       $04
000B96FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9703 E107                       	smpsAlterNote       $07
000B9705 E701                       	dc.b	smpsNoAttack, $01
000B9707 E10D                       	smpsAlterNote       $0D
000B9709 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B970D E107                       	smpsAlterNote       $07
000B970F E701                       	dc.b	smpsNoAttack, $01
000B9711 E104                       	smpsAlterNote       $04
000B9713 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9717 E10B                       	smpsAlterNote       $0B
000B9719 BF0D                       	dc.b	nD5, $0D
000B971B E108                       	smpsAlterNote       $08
000B971D E701                       	dc.b	smpsNoAttack, $01
000B971F E105                       	smpsAlterNote       $05
000B9721 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9725 E10B                       	smpsAlterNote       $0B
000B9727 E701                       	dc.b	smpsNoAttack, $01
000B9729 E10F                       	smpsAlterNote       $0F
000B972B E701                       	dc.b	smpsNoAttack, $01
000B972D E10E                       	smpsAlterNote       $0E
000B972F E701                       	dc.b	smpsNoAttack, $01
000B9731 E108                       	smpsAlterNote       $08
000B9733 E701                       	dc.b	smpsNoAttack, $01
000B9735 E104                       	smpsAlterNote       $04
000B9737 E701                       	dc.b	smpsNoAttack, $01
000B9739 E108                       	smpsAlterNote       $08
000B973B E701                       	dc.b	smpsNoAttack, $01
000B973D E10B                       	smpsAlterNote       $0B
000B973F E701                       	dc.b	smpsNoAttack, $01
000B9741 E10F                       	smpsAlterNote       $0F
000B9743 E701                       	dc.b	smpsNoAttack, $01
000B9745 E10B                       	smpsAlterNote       $0B
000B9747 E701                       	dc.b	smpsNoAttack, $01
000B9749 E105                       	smpsAlterNote       $05
000B974B E701                       	dc.b	smpsNoAttack, $01
000B974D E104                       	smpsAlterNote       $04
000B974F E701                       	dc.b	smpsNoAttack, $01
000B9751 E105                       	smpsAlterNote       $05
000B9753 8001                       	dc.b	nRst, $01
000B9755 E10C                       	smpsAlterNote       $0C
000B9757 C10C                       	dc.b	nE5, $0C
000B9759 E10D                       	smpsAlterNote       $0D
000B975B C201                       	dc.b	nF5, $01
000B975D E10E                       	smpsAlterNote       $0E
000B975F C301 8001                  	dc.b	nFs5, $01, nRst, $01
000B9763 E10D                       	smpsAlterNote       $0D
000B9765 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000B9769 E10A                       	smpsAlterNote       $0A
000B976B E701                       	dc.b	smpsNoAttack, $01
000B976D E106                       	smpsAlterNote       $06
000B976F E701                       	dc.b	smpsNoAttack, $01
000B9771 E10A                       	smpsAlterNote       $0A
000B9773 E701                       	dc.b	smpsNoAttack, $01
000B9775 E10D                       	smpsAlterNote       $0D
000B9777 E701                       	dc.b	smpsNoAttack, $01
000B9779 E111                       	smpsAlterNote       $11
000B977B E701                       	dc.b	smpsNoAttack, $01
000B977D E10D                       	smpsAlterNote       $0D
000B977F E701                       	dc.b	smpsNoAttack, $01
000B9781 E107                       	smpsAlterNote       $07
000B9783 E701                       	dc.b	smpsNoAttack, $01
000B9785 E106                       	smpsAlterNote       $06
000B9787 E701                       	dc.b	smpsNoAttack, $01
000B9789 E10A                       	smpsAlterNote       $0A
000B978B E701                       	dc.b	smpsNoAttack, $01
000B978D E110                       	smpsAlterNote       $10
000B978F E701                       	dc.b	smpsNoAttack, $01
000B9791 E111                       	smpsAlterNote       $11
000B9793 8001                       	dc.b	nRst, $01
000B9795 E10D                       	smpsAlterNote       $0D
000B9797 C40D                       	dc.b	nG5, $0D
000B9799 E10A                       	smpsAlterNote       $0A
000B979B E701                       	dc.b	smpsNoAttack, $01
000B979D E106                       	smpsAlterNote       $06
000B979F E701                       	dc.b	smpsNoAttack, $01
000B97A1 E10A                       	smpsAlterNote       $0A
000B97A3 E701                       	dc.b	smpsNoAttack, $01
000B97A5 E10D                       	smpsAlterNote       $0D
000B97A7 E701                       	dc.b	smpsNoAttack, $01
000B97A9 E10C                       	smpsAlterNote       $0C
000B97AB C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
000B97B7 8001                       	dc.b	nRst, $01
000B97B9 E10D                       	smpsAlterNote       $0D
000B97BB C20D                       	dc.b	nF5, $0D
000B97BD E10A                       	smpsAlterNote       $0A
000B97BF E701                       	dc.b	smpsNoAttack, $01
000B97C1 E106                       	smpsAlterNote       $06
000B97C3 E701                       	dc.b	smpsNoAttack, $01
000B97C5 E10A                       	smpsAlterNote       $0A
000B97C7 E701                       	dc.b	smpsNoAttack, $01
000B97C9 E110                       	smpsAlterNote       $10
000B97CB E701                       	dc.b	smpsNoAttack, $01
000B97CD E111                       	smpsAlterNote       $11
000B97CF E701                       	dc.b	smpsNoAttack, $01
000B97D1 E10D                       	smpsAlterNote       $0D
000B97D3 E701                       	dc.b	smpsNoAttack, $01
000B97D5 E107                       	smpsAlterNote       $07
000B97D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B97DB E10A                       	smpsAlterNote       $0A
000B97DD E701                       	dc.b	smpsNoAttack, $01
000B97DF E110                       	smpsAlterNote       $10
000B97E1 E701                       	dc.b	smpsNoAttack, $01
000B97E3 E111                       	smpsAlterNote       $11
000B97E5 8001                       	dc.b	nRst, $01
000B97E7 E10F                       	smpsAlterNote       $0F
000B97E9 C60A                       	dc.b	nA5, $0A
000B97EB E10D                       	smpsAlterNote       $0D
000B97ED C406 8001                  	dc.b	nG5, $06, nRst, $01
000B97F1 E10C                       	smpsAlterNote       $0C
000B97F3 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000B97FF 8001                       	dc.b	nRst, $01
000B9801 E10D                       	smpsAlterNote       $0D
000B9803 C20D                       	dc.b	nF5, $0D
000B9805 E107                       	smpsAlterNote       $07
000B9807 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B980B E10A                       	smpsAlterNote       $0A
000B980D E701                       	dc.b	smpsNoAttack, $01
000B980F E110                       	smpsAlterNote       $10
000B9811 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9815 E10A                       	smpsAlterNote       $0A
000B9817 E701                       	dc.b	smpsNoAttack, $01
000B9819 E107                       	smpsAlterNote       $07
000B981B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B981F E10D                       	smpsAlterNote       $0D
000B9821 E701                       	dc.b	smpsNoAttack, $01
000B9823 E111                       	smpsAlterNote       $11
000B9825 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B9829 E10D                       	smpsAlterNote       $0D
000B982B C40D                       	dc.b	nG5, $0D
000B982D E107                       	smpsAlterNote       $07
000B982F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9833 E10A                       	smpsAlterNote       $0A
000B9835 E701                       	dc.b	smpsNoAttack, $01
000B9837 E10D                       	smpsAlterNote       $0D
000B9839 8001                       	dc.b	nRst, $01
000B983B E10C                       	smpsAlterNote       $0C
000B983D C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000B9849 E10D                       	smpsAlterNote       $0D
000B984B C20E                       	dc.b	nF5, $0E
000B984D E107                       	smpsAlterNote       $07
000B984F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9853 E10D                       	smpsAlterNote       $0D
000B9855 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000B985B E0C0                       	smpsPan             panCenter, $00
000B985D E603                       	smpsAlterVol        $03
000B985F E108                       	smpsAlterNote       $08
000B9861 B406                       	dc.b	nEb4, $06
000B9863 E10C                       	smpsAlterNote       $0C
000B9865 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000B9869 E108                       	smpsAlterNote       $08
000B986B B403                       	dc.b	nEb4, $03
000B986D E109                       	smpsAlterNote       $09
000B986F B803 8001                  	dc.b	nG4, $03, nRst, $01
000B9873 E10C                       	smpsAlterNote       $0C
000B9875 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
000B987D 03                         	dc.b	$03
000B987E E6FD                       	smpsAlterVol        $FD
000B9880 F6F1 F4                    	smpsJump            music84_Jump00
000B9883                            
000B9883                            ; PSG1 Data
000B9883                            music84_PSG1:
000B9883 E1FD                       	smpsAlterNote       $FD
000B9885 EC04                       	smpsPSGAlterVol     $04
000B9887 9203                       	dc.b	nF1, $03
000B9889 E1FE                       	smpsAlterNote       $FE
000B988B 9603                       	dc.b	nA1, $03
000B988D EC04                       	smpsPSGAlterVol     $04
000B988F E701                       	dc.b	smpsNoAttack, $01
000B9891 E1FF                       	smpsAlterNote       $FF
000B9893 ECFC                       	smpsPSGAlterVol     $FC
000B9895 9B03                       	dc.b	nD2, $03
000B9897 E1FD                       	smpsAlterNote       $FD
000B9899 9403                       	dc.b	nG1, $03
000B989B EC04                       	smpsPSGAlterVol     $04
000B989D E701                       	dc.b	smpsNoAttack, $01
000B989F E1FE                       	smpsAlterNote       $FE
000B98A1 ECFC                       	smpsPSGAlterVol     $FC
000B98A3 9703                       	dc.b	nBb1, $03
000B98A5 E1FF                       	smpsAlterNote       $FF
000B98A7 9B03                       	dc.b	nD2, $03
000B98A9 EC04                       	smpsPSGAlterVol     $04
000B98AB E701                       	dc.b	smpsNoAttack, $01
000B98AD E1FE                       	smpsAlterNote       $FE
000B98AF ECFC                       	smpsPSGAlterVol     $FC
000B98B1 A002                       	dc.b	nG2, $02
000B98B3 EC04                       	smpsPSGAlterVol     $04
000B98B5 E701                       	dc.b	smpsNoAttack, $01
000B98B7 E1FF                       	smpsAlterNote       $FF
000B98B9 ECFC                       	smpsPSGAlterVol     $FC
000B98BB A203                       	dc.b	nA2, $03
000B98BD EC0B                       	smpsPSGAlterVol     $0B
000B98BF 800A                       	dc.b	nRst, $0A
000B98C1 E105                       	smpsAlterNote       $05
000B98C3 01                         	dc.b	$01
000B98C4 E1FC                       	smpsAlterNote       $FC
000B98C6 01                         	dc.b	$01
000B98C7 E105                       	smpsAlterNote       $05
000B98C9 01                         	dc.b	$01
000B98CA E1FD                       	smpsAlterNote       $FD
000B98CC 01                         	dc.b	$01
000B98CD E105                       	smpsAlterNote       $05
000B98CF 01                         	dc.b	$01
000B98D0 E1FD                       	smpsAlterNote       $FD
000B98D2 01                         	dc.b	$01
000B98D3 E1FA                       	smpsAlterNote       $FA
000B98D5 01                         	dc.b	$01
000B98D6 E1FC                       	smpsAlterNote       $FC
000B98D8 01                         	dc.b	$01
000B98D9 E105                       	smpsAlterNote       $05
000B98DB 01                         	dc.b	$01
000B98DC E108                       	smpsAlterNote       $08
000B98DE 0101                       	dc.b	$01, $01
000B98E0 E105                       	smpsAlterNote       $05
000B98E2 01                         	dc.b	$01
000B98E3 E1FA                       	smpsAlterNote       $FA
000B98E5 0101                       	dc.b	$01, $01
000B98E7 E1FD                       	smpsAlterNote       $FD
000B98E9 01                         	dc.b	$01
000B98EA E105                       	smpsAlterNote       $05
000B98EC 01                         	dc.b	$01
000B98ED E108                       	smpsAlterNote       $08
000B98EF 01                         	dc.b	$01
000B98F0 E105                       	smpsAlterNote       $05
000B98F2 01                         	dc.b	$01
000B98F3 E1FC                       	smpsAlterNote       $FC
000B98F5 01                         	dc.b	$01
000B98F6 E105                       	smpsAlterNote       $05
000B98F8 01                         	dc.b	$01
000B98F9 E1FD                       	smpsAlterNote       $FD
000B98FB 01                         	dc.b	$01
000B98FC                            
000B98FC                            music84_Jump07:
000B98FC E105                       	smpsAlterNote       $05
000B98FE 8001                       	dc.b	nRst, $01
000B9900 E1FD                       	smpsAlterNote       $FD
000B9902 01                         	dc.b	$01
000B9903 E1FA                       	smpsAlterNote       $FA
000B9905 01                         	dc.b	$01
000B9906 E1FC                       	smpsAlterNote       $FC
000B9908 01                         	dc.b	$01
000B9909 E1FD                       	smpsAlterNote       $FD
000B990B ECF5                       	smpsPSGAlterVol     $F5
000B990D 9206                       	dc.b	nF1, $06
000B990F EC04                       	smpsPSGAlterVol     $04
000B9911 E701                       	dc.b	smpsNoAttack, $01
000B9913 EC07                       	smpsPSGAlterVol     $07
000B9915 8003                       	dc.b	nRst, $03
000B9917 ECF5                       	smpsPSGAlterVol     $F5
000B9919 9206                       	dc.b	nF1, $06
000B991B EC04                       	smpsPSGAlterVol     $04
000B991D E701                       	dc.b	smpsNoAttack, $01
000B991F EC07                       	smpsPSGAlterVol     $07
000B9921 8006                       	dc.b	nRst, $06
000B9923 E100                       	smpsAlterNote       $00
000B9925 01                         	dc.b	$01
000B9926 E104                       	smpsAlterNote       $04
000B9928 01                         	dc.b	$01
000B9929 E100                       	smpsAlterNote       $00
000B992B 01                         	dc.b	$01
000B992C E1FB                       	smpsAlterNote       $FB
000B992E 01                         	dc.b	$01
000B992F E1FD                       	smpsAlterNote       $FD
000B9931 ECF5                       	smpsPSGAlterVol     $F5
000B9933 9406                       	dc.b	nG1, $06
000B9935 EC04                       	smpsPSGAlterVol     $04
000B9937 E701                       	dc.b	smpsNoAttack, $01
000B9939 EC07                       	smpsPSGAlterVol     $07
000B993B 8003                       	dc.b	nRst, $03
000B993D ECF5                       	smpsPSGAlterVol     $F5
000B993F 9407                       	dc.b	nG1, $07
000B9941 EC0B                       	smpsPSGAlterVol     $0B
000B9943 8006                       	dc.b	nRst, $06
000B9945 E100                       	smpsAlterNote       $00
000B9947 01                         	dc.b	$01
000B9948 E103                       	smpsAlterNote       $03
000B994A 0101                       	dc.b	$01, $01
000B994C E1FD                       	smpsAlterNote       $FD
000B994E 01                         	dc.b	$01
000B994F ECF5                       	smpsPSGAlterVol     $F5
000B9951 9207                       	dc.b	nF1, $07
000B9953 EC0B                       	smpsPSGAlterVol     $0B
000B9955 8004                       	dc.b	nRst, $04
000B9957 ECF5                       	smpsPSGAlterVol     $F5
000B9959 9206                       	dc.b	nF1, $06
000B995B EC04                       	smpsPSGAlterVol     $04
000B995D E701                       	dc.b	smpsNoAttack, $01
000B995F EC07                       	smpsPSGAlterVol     $07
000B9961 8006                       	dc.b	nRst, $06
000B9963 E103                       	smpsAlterNote       $03
000B9965 01                         	dc.b	$01
000B9966 E104                       	smpsAlterNote       $04
000B9968 01                         	dc.b	$01
000B9969 E100                       	smpsAlterNote       $00
000B996B 01                         	dc.b	$01
000B996C E1FA                       	smpsAlterNote       $FA
000B996E 01                         	dc.b	$01
000B996F E1FD                       	smpsAlterNote       $FD
000B9971 ECF5                       	smpsPSGAlterVol     $F5
000B9973 9206                       	dc.b	nF1, $06
000B9975 EC04                       	smpsPSGAlterVol     $04
000B9977 E701                       	dc.b	smpsNoAttack, $01
000B9979 EC07                       	smpsPSGAlterVol     $07
000B997B 8003                       	dc.b	nRst, $03
000B997D ECF5                       	smpsPSGAlterVol     $F5
000B997F 9106                       	dc.b	nE1, $06
000B9981 EC04                       	smpsPSGAlterVol     $04
000B9983 E701                       	dc.b	smpsNoAttack, $01
000B9985 EC07                       	smpsPSGAlterVol     $07
000B9987 8006                       	dc.b	nRst, $06
000B9989 E100                       	smpsAlterNote       $00
000B998B 01                         	dc.b	$01
000B998C E104                       	smpsAlterNote       $04
000B998E 01                         	dc.b	$01
000B998F E100                       	smpsAlterNote       $00
000B9991 01                         	dc.b	$01
000B9992 E1FD                       	smpsAlterNote       $FD
000B9994 01                         	dc.b	$01
000B9995 ECF5                       	smpsPSGAlterVol     $F5
000B9997 9206                       	dc.b	nF1, $06
000B9999 EC04                       	smpsPSGAlterVol     $04
000B999B E701                       	dc.b	smpsNoAttack, $01
000B999D EC07                       	smpsPSGAlterVol     $07
000B999F 8003                       	dc.b	nRst, $03
000B99A1 ECF5                       	smpsPSGAlterVol     $F5
000B99A3 9207                       	dc.b	nF1, $07
000B99A5 EC0B                       	smpsPSGAlterVol     $0B
000B99A7 8007                       	dc.b	nRst, $07
000B99A9 E103                       	smpsAlterNote       $03
000B99AB 0101                       	dc.b	$01, $01
000B99AD E1FD                       	smpsAlterNote       $FD
000B99AF 01                         	dc.b	$01
000B99B0 E1FB                       	smpsAlterNote       $FB
000B99B2 01                         	dc.b	$01
000B99B3 E1FD                       	smpsAlterNote       $FD
000B99B5 ECF5                       	smpsPSGAlterVol     $F5
000B99B7 9406                       	dc.b	nG1, $06
000B99B9 EC0B                       	smpsPSGAlterVol     $0B
000B99BB 8004                       	dc.b	nRst, $04
000B99BD ECF5                       	smpsPSGAlterVol     $F5
000B99BF 9406                       	dc.b	nG1, $06
000B99C1 EC04                       	smpsPSGAlterVol     $04
000B99C3 E701                       	dc.b	smpsNoAttack, $01
000B99C5 EC07                       	smpsPSGAlterVol     $07
000B99C7 8006                       	dc.b	nRst, $06
000B99C9 E100                       	smpsAlterNote       $00
000B99CB 01                         	dc.b	$01
000B99CC E104                       	smpsAlterNote       $04
000B99CE 01                         	dc.b	$01
000B99CF E100                       	smpsAlterNote       $00
000B99D1 01                         	dc.b	$01
000B99D2 E1F9                       	smpsAlterNote       $F9
000B99D4 01                         	dc.b	$01
000B99D5 E1FD                       	smpsAlterNote       $FD
000B99D7 ECF5                       	smpsPSGAlterVol     $F5
000B99D9 9206                       	dc.b	nF1, $06
000B99DB EC04                       	smpsPSGAlterVol     $04
000B99DD E701                       	dc.b	smpsNoAttack, $01
000B99DF EC07                       	smpsPSGAlterVol     $07
000B99E1 8003                       	dc.b	nRst, $03
000B99E3 ECF5                       	smpsPSGAlterVol     $F5
000B99E5 9207                       	dc.b	nF1, $07
000B99E7 EC0B                       	smpsPSGAlterVol     $0B
000B99E9 8006                       	dc.b	nRst, $06
000B99EB E100                       	smpsAlterNote       $00
000B99ED 01                         	dc.b	$01
000B99EE E104                       	smpsAlterNote       $04
000B99F0 01                         	dc.b	$01
000B99F1 E103                       	smpsAlterNote       $03
000B99F3 01                         	dc.b	$01
000B99F4 E1FD                       	smpsAlterNote       $FD
000B99F6 01                         	dc.b	$01
000B99F7 ECF5                       	smpsPSGAlterVol     $F5
000B99F9 9207                       	dc.b	nF1, $07
000B99FB EC0B                       	smpsPSGAlterVol     $0B
000B99FD 8004                       	dc.b	nRst, $04
000B99FF ECF5                       	smpsPSGAlterVol     $F5
000B9A01 9206                       	dc.b	nF1, $06
000B9A03 EC0B                       	smpsPSGAlterVol     $0B
000B9A05 8007                       	dc.b	nRst, $07
000B9A07 E103                       	smpsAlterNote       $03
000B9A09 0101                       	dc.b	$01, $01
000B9A0B E100                       	smpsAlterNote       $00
000B9A0D 01                         	dc.b	$01
000B9A0E E1FA                       	smpsAlterNote       $FA
000B9A10 01                         	dc.b	$01
000B9A11 E1FD                       	smpsAlterNote       $FD
000B9A13 ECF5                       	smpsPSGAlterVol     $F5
000B9A15 9206                       	dc.b	nF1, $06
000B9A17 EC04                       	smpsPSGAlterVol     $04
000B9A19 E701                       	dc.b	smpsNoAttack, $01
000B9A1B EC07                       	smpsPSGAlterVol     $07
000B9A1D 8003                       	dc.b	nRst, $03
000B9A1F ECF5                       	smpsPSGAlterVol     $F5
000B9A21 9206                       	dc.b	nF1, $06
000B9A23 EC04                       	smpsPSGAlterVol     $04
000B9A25 E701                       	dc.b	smpsNoAttack, $01
000B9A27 EC07                       	smpsPSGAlterVol     $07
000B9A29 8006                       	dc.b	nRst, $06
000B9A2B E100                       	smpsAlterNote       $00
000B9A2D 01                         	dc.b	$01
000B9A2E E104                       	smpsAlterNote       $04
000B9A30 01                         	dc.b	$01
000B9A31 E100                       	smpsAlterNote       $00
000B9A33 01                         	dc.b	$01
000B9A34 E1FD                       	smpsAlterNote       $FD
000B9A36 01                         	dc.b	$01
000B9A37 ECF5                       	smpsPSGAlterVol     $F5
000B9A39 9206                       	dc.b	nF1, $06
000B9A3B EC04                       	smpsPSGAlterVol     $04
000B9A3D E701                       	dc.b	smpsNoAttack, $01
000B9A3F EC07                       	smpsPSGAlterVol     $07
000B9A41 8003                       	dc.b	nRst, $03
000B9A43 ECF5                       	smpsPSGAlterVol     $F5
000B9A45 9207                       	dc.b	nF1, $07
000B9A47 EC0B                       	smpsPSGAlterVol     $0B
000B9A49 8007                       	dc.b	nRst, $07
000B9A4B E103                       	smpsAlterNote       $03
000B9A4D 0101                       	dc.b	$01, $01
000B9A4F E1FD                       	smpsAlterNote       $FD
000B9A51 01                         	dc.b	$01
000B9A52 E1FA                       	smpsAlterNote       $FA
000B9A54 01                         	dc.b	$01
000B9A55 E1FD                       	smpsAlterNote       $FD
000B9A57 ECF5                       	smpsPSGAlterVol     $F5
000B9A59 9206                       	dc.b	nF1, $06
000B9A5B EC0B                       	smpsPSGAlterVol     $0B
000B9A5D 8004                       	dc.b	nRst, $04
000B9A5F ECF5                       	smpsPSGAlterVol     $F5
000B9A61 9206                       	dc.b	nF1, $06
000B9A63 EC04                       	smpsPSGAlterVol     $04
000B9A65 E701                       	dc.b	smpsNoAttack, $01
000B9A67 EC07                       	smpsPSGAlterVol     $07
000B9A69 8006                       	dc.b	nRst, $06
000B9A6B E103                       	smpsAlterNote       $03
000B9A6D 01                         	dc.b	$01
000B9A6E E104                       	smpsAlterNote       $04
000B9A70 01                         	dc.b	$01
000B9A71 E100                       	smpsAlterNote       $00
000B9A73 01                         	dc.b	$01
000B9A74 E1FA                       	smpsAlterNote       $FA
000B9A76 01                         	dc.b	$01
000B9A77 E1FD                       	smpsAlterNote       $FD
000B9A79 ECF5                       	smpsPSGAlterVol     $F5
000B9A7B 9206                       	dc.b	nF1, $06
000B9A7D EC04                       	smpsPSGAlterVol     $04
000B9A7F E701                       	dc.b	smpsNoAttack, $01
000B9A81 EC07                       	smpsPSGAlterVol     $07
000B9A83 8003                       	dc.b	nRst, $03
000B9A85 ECF5                       	smpsPSGAlterVol     $F5
000B9A87 9206                       	dc.b	nF1, $06
000B9A89 EC04                       	smpsPSGAlterVol     $04
000B9A8B E701                       	dc.b	smpsNoAttack, $01
000B9A8D EC07                       	smpsPSGAlterVol     $07
000B9A8F 8006                       	dc.b	nRst, $06
000B9A91 E100                       	smpsAlterNote       $00
000B9A93 01                         	dc.b	$01
000B9A94 E104                       	smpsAlterNote       $04
000B9A96 01                         	dc.b	$01
000B9A97 E103                       	smpsAlterNote       $03
000B9A99 01                         	dc.b	$01
000B9A9A E1FD                       	smpsAlterNote       $FD
000B9A9C 01                         	dc.b	$01
000B9A9D ECF5                       	smpsPSGAlterVol     $F5
000B9A9F 9107                       	dc.b	nE1, $07
000B9AA1 EC0B                       	smpsPSGAlterVol     $0B
000B9AA3 8004                       	dc.b	nRst, $04
000B9AA5 ECF5                       	smpsPSGAlterVol     $F5
000B9AA7 9106                       	dc.b	nE1, $06
000B9AA9 EC0B                       	smpsPSGAlterVol     $0B
000B9AAB 8007                       	dc.b	nRst, $07
000B9AAD E103                       	smpsAlterNote       $03
000B9AAF 0101                       	dc.b	$01, $01
000B9AB1 E100                       	smpsAlterNote       $00
000B9AB3 01                         	dc.b	$01
000B9AB4 E1FA                       	smpsAlterNote       $FA
000B9AB6 01                         	dc.b	$01
000B9AB7 E1FD                       	smpsAlterNote       $FD
000B9AB9 ECF5                       	smpsPSGAlterVol     $F5
000B9ABB 9106                       	dc.b	nE1, $06
000B9ABD EC04                       	smpsPSGAlterVol     $04
000B9ABF E701                       	dc.b	smpsNoAttack, $01
000B9AC1 EC07                       	smpsPSGAlterVol     $07
000B9AC3 8003                       	dc.b	nRst, $03
000B9AC5 ECF5                       	smpsPSGAlterVol     $F5
000B9AC7 9106                       	dc.b	nE1, $06
000B9AC9 EC04                       	smpsPSGAlterVol     $04
000B9ACB E701                       	dc.b	smpsNoAttack, $01
000B9ACD EC07                       	smpsPSGAlterVol     $07
000B9ACF 8006                       	dc.b	nRst, $06
000B9AD1 E100                       	smpsAlterNote       $00
000B9AD3 01                         	dc.b	$01
000B9AD4 E104                       	smpsAlterNote       $04
000B9AD6 01                         	dc.b	$01
000B9AD7 E100                       	smpsAlterNote       $00
000B9AD9 01                         	dc.b	$01
000B9ADA E1FA                       	smpsAlterNote       $FA
000B9ADC 01                         	dc.b	$01
000B9ADD E1FD                       	smpsAlterNote       $FD
000B9ADF ECF5                       	smpsPSGAlterVol     $F5
000B9AE1 9106                       	dc.b	nE1, $06
000B9AE3 EC04                       	smpsPSGAlterVol     $04
000B9AE5 E701                       	dc.b	smpsNoAttack, $01
000B9AE7 EC07                       	smpsPSGAlterVol     $07
000B9AE9 8003                       	dc.b	nRst, $03
000B9AEB ECF5                       	smpsPSGAlterVol     $F5
000B9AED 9107 9106                  	dc.b	nE1, $07, nE1, $06
000B9AF1 EC04                       	smpsPSGAlterVol     $04
000B9AF3 E701                       	dc.b	smpsNoAttack, $01
000B9AF5 ECFC                       	smpsPSGAlterVol     $FC
000B9AF7 9103 9103                  	dc.b	nE1, $03, nE1, $03
000B9AFB EC04                       	smpsPSGAlterVol     $04
000B9AFD E701                       	dc.b	smpsNoAttack, $01
000B9AFF ECFC                       	smpsPSGAlterVol     $FC
000B9B01 9106                       	dc.b	nE1, $06
000B9B03 EC04                       	smpsPSGAlterVol     $04
000B9B05 E701                       	dc.b	smpsNoAttack, $01
000B9B07 EC07                       	smpsPSGAlterVol     $07
000B9B09 8006                       	dc.b	nRst, $06
000B9B0B E100                       	smpsAlterNote       $00
000B9B0D 01                         	dc.b	$01
000B9B0E E104                       	smpsAlterNote       $04
000B9B10 01                         	dc.b	$01
000B9B11 E100                       	smpsAlterNote       $00
000B9B13 01                         	dc.b	$01
000B9B14 E1FA                       	smpsAlterNote       $FA
000B9B16 01                         	dc.b	$01
000B9B17 E1F9                       	smpsAlterNote       $F9
000B9B19 01                         	dc.b	$01
000B9B1A E1FD                       	smpsAlterNote       $FD
000B9B1C 01                         	dc.b	$01
000B9B1D E103                       	smpsAlterNote       $03
000B9B1F 01                         	dc.b	$01
000B9B20 E104                       	smpsAlterNote       $04
000B9B22 01                         	dc.b	$01
000B9B23 E100                       	smpsAlterNote       $00
000B9B25 01                         	dc.b	$01
000B9B26 E1FA                       	smpsAlterNote       $FA
000B9B28 0101                       	dc.b	$01, $01
000B9B2A E1FD                       	smpsAlterNote       $FD
000B9B2C ECF5                       	smpsPSGAlterVol     $F5
000B9B2E 9206                       	dc.b	nF1, $06
000B9B30 EC04                       	smpsPSGAlterVol     $04
000B9B32 E701                       	dc.b	smpsNoAttack, $01
000B9B34 EC07                       	smpsPSGAlterVol     $07
000B9B36 8003                       	dc.b	nRst, $03
000B9B38 ECF5                       	smpsPSGAlterVol     $F5
000B9B3A 9206                       	dc.b	nF1, $06
000B9B3C EC04                       	smpsPSGAlterVol     $04
000B9B3E E701                       	dc.b	smpsNoAttack, $01
000B9B40 EC07                       	smpsPSGAlterVol     $07
000B9B42 8006                       	dc.b	nRst, $06
000B9B44 E100                       	smpsAlterNote       $00
000B9B46 01                         	dc.b	$01
000B9B47 E104                       	smpsAlterNote       $04
000B9B49 01                         	dc.b	$01
000B9B4A E103                       	smpsAlterNote       $03
000B9B4C 01                         	dc.b	$01
000B9B4D E1FD                       	smpsAlterNote       $FD
000B9B4F 01                         	dc.b	$01
000B9B50 ECF5                       	smpsPSGAlterVol     $F5
000B9B52 9407                       	dc.b	nG1, $07
000B9B54 EC0B                       	smpsPSGAlterVol     $0B
000B9B56 8004                       	dc.b	nRst, $04
000B9B58 ECF5                       	smpsPSGAlterVol     $F5
000B9B5A 9406                       	dc.b	nG1, $06
000B9B5C EC0B                       	smpsPSGAlterVol     $0B
000B9B5E 8007                       	dc.b	nRst, $07
000B9B60 E103                       	smpsAlterNote       $03
000B9B62 0101                       	dc.b	$01, $01
000B9B64 E1FD                       	smpsAlterNote       $FD
000B9B66 01                         	dc.b	$01
000B9B67 E1F9                       	smpsAlterNote       $F9
000B9B69 01                         	dc.b	$01
000B9B6A E1FD                       	smpsAlterNote       $FD
000B9B6C ECF5                       	smpsPSGAlterVol     $F5
000B9B6E 9206                       	dc.b	nF1, $06
000B9B70 EC04                       	smpsPSGAlterVol     $04
000B9B72 E701                       	dc.b	smpsNoAttack, $01
000B9B74 EC07                       	smpsPSGAlterVol     $07
000B9B76 8003                       	dc.b	nRst, $03
000B9B78 ECF5                       	smpsPSGAlterVol     $F5
000B9B7A 9206                       	dc.b	nF1, $06
000B9B7C EC04                       	smpsPSGAlterVol     $04
000B9B7E E701                       	dc.b	smpsNoAttack, $01
000B9B80 EC07                       	smpsPSGAlterVol     $07
000B9B82 8006                       	dc.b	nRst, $06
000B9B84 E100                       	smpsAlterNote       $00
000B9B86 01                         	dc.b	$01
000B9B87 E104                       	smpsAlterNote       $04
000B9B89 01                         	dc.b	$01
000B9B8A E100                       	smpsAlterNote       $00
000B9B8C 01                         	dc.b	$01
000B9B8D E1FA                       	smpsAlterNote       $FA
000B9B8F 01                         	dc.b	$01
000B9B90 E1FD                       	smpsAlterNote       $FD
000B9B92 ECF5                       	smpsPSGAlterVol     $F5
000B9B94 9206                       	dc.b	nF1, $06
000B9B96 EC04                       	smpsPSGAlterVol     $04
000B9B98 E701                       	dc.b	smpsNoAttack, $01
000B9B9A EC07                       	smpsPSGAlterVol     $07
000B9B9C 8003                       	dc.b	nRst, $03
000B9B9E ECF5                       	smpsPSGAlterVol     $F5
000B9BA0 9107                       	dc.b	nE1, $07
000B9BA2 EC0B                       	smpsPSGAlterVol     $0B
000B9BA4 8006                       	dc.b	nRst, $06
000B9BA6 E100                       	smpsAlterNote       $00
000B9BA8 01                         	dc.b	$01
000B9BA9 E103                       	smpsAlterNote       $03
000B9BAB 0101                       	dc.b	$01, $01
000B9BAD E1FD                       	smpsAlterNote       $FD
000B9BAF 01                         	dc.b	$01
000B9BB0 ECF5                       	smpsPSGAlterVol     $F5
000B9BB2 9207                       	dc.b	nF1, $07
000B9BB4 EC0B                       	smpsPSGAlterVol     $0B
000B9BB6 8004                       	dc.b	nRst, $04
000B9BB8 ECF5                       	smpsPSGAlterVol     $F5
000B9BBA 9206                       	dc.b	nF1, $06
000B9BBC EC04                       	smpsPSGAlterVol     $04
000B9BBE E701                       	dc.b	smpsNoAttack, $01
000B9BC0 EC07                       	smpsPSGAlterVol     $07
000B9BC2 8006                       	dc.b	nRst, $06
000B9BC4 E103                       	smpsAlterNote       $03
000B9BC6 01                         	dc.b	$01
000B9BC7 E104                       	smpsAlterNote       $04
000B9BC9 01                         	dc.b	$01
000B9BCA E100                       	smpsAlterNote       $00
000B9BCC 01                         	dc.b	$01
000B9BCD E1FB                       	smpsAlterNote       $FB
000B9BCF 01                         	dc.b	$01
000B9BD0 E1FD                       	smpsAlterNote       $FD
000B9BD2 ECF5                       	smpsPSGAlterVol     $F5
000B9BD4 9406                       	dc.b	nG1, $06
000B9BD6 EC04                       	smpsPSGAlterVol     $04
000B9BD8 E701                       	dc.b	smpsNoAttack, $01
000B9BDA EC07                       	smpsPSGAlterVol     $07
000B9BDC 8003                       	dc.b	nRst, $03
000B9BDE ECF5                       	smpsPSGAlterVol     $F5
000B9BE0 9406                       	dc.b	nG1, $06
000B9BE2 EC04                       	smpsPSGAlterVol     $04
000B9BE4 E701                       	dc.b	smpsNoAttack, $01
000B9BE6 EC07                       	smpsPSGAlterVol     $07
000B9BE8 8006                       	dc.b	nRst, $06
000B9BEA E100                       	smpsAlterNote       $00
000B9BEC 01                         	dc.b	$01
000B9BED E104                       	smpsAlterNote       $04
000B9BEF 01                         	dc.b	$01
000B9BF0 E100                       	smpsAlterNote       $00
000B9BF2 01                         	dc.b	$01
000B9BF3 E1FD                       	smpsAlterNote       $FD
000B9BF5 01                         	dc.b	$01
000B9BF6 ECF5                       	smpsPSGAlterVol     $F5
000B9BF8 9206                       	dc.b	nF1, $06
000B9BFA EC04                       	smpsPSGAlterVol     $04
000B9BFC E701                       	dc.b	smpsNoAttack, $01
000B9BFE EC07                       	smpsPSGAlterVol     $07
000B9C00 8003                       	dc.b	nRst, $03
000B9C02 ECF5                       	smpsPSGAlterVol     $F5
000B9C04 9207                       	dc.b	nF1, $07
000B9C06 EC0B                       	smpsPSGAlterVol     $0B
000B9C08 8007                       	dc.b	nRst, $07
000B9C0A E103                       	smpsAlterNote       $03
000B9C0C 0101                       	dc.b	$01, $01
000B9C0E E1FD                       	smpsAlterNote       $FD
000B9C10 01                         	dc.b	$01
000B9C11 E1FA                       	smpsAlterNote       $FA
000B9C13 01                         	dc.b	$01
000B9C14 E1FD                       	smpsAlterNote       $FD
000B9C16 ECF5                       	smpsPSGAlterVol     $F5
000B9C18 9206                       	dc.b	nF1, $06
000B9C1A EC0B                       	smpsPSGAlterVol     $0B
000B9C1C 8004                       	dc.b	nRst, $04
000B9C1E ECF5                       	smpsPSGAlterVol     $F5
000B9C20 9206                       	dc.b	nF1, $06
000B9C22 EC04                       	smpsPSGAlterVol     $04
000B9C24 E701                       	dc.b	smpsNoAttack, $01
000B9C26 EC07                       	smpsPSGAlterVol     $07
000B9C28 8006                       	dc.b	nRst, $06
000B9C2A E100                       	smpsAlterNote       $00
000B9C2C 01                         	dc.b	$01
000B9C2D E104                       	smpsAlterNote       $04
000B9C2F 01                         	dc.b	$01
000B9C30 E100                       	smpsAlterNote       $00
000B9C32 01                         	dc.b	$01
000B9C33 E1FA                       	smpsAlterNote       $FA
000B9C35 01                         	dc.b	$01
000B9C36 E1FD                       	smpsAlterNote       $FD
000B9C38 ECF5                       	smpsPSGAlterVol     $F5
000B9C3A 9206                       	dc.b	nF1, $06
000B9C3C EC04                       	smpsPSGAlterVol     $04
000B9C3E E704                       	dc.b	smpsNoAttack, $04
000B9C40 ECFC                       	smpsPSGAlterVol     $FC
000B9C42 9207                       	dc.b	nF1, $07
000B9C44 EC0B                       	smpsPSGAlterVol     $0B
000B9C46 8006                       	dc.b	nRst, $06
000B9C48 E100                       	smpsAlterNote       $00
000B9C4A 01                         	dc.b	$01
000B9C4B E104                       	smpsAlterNote       $04
000B9C4D 01                         	dc.b	$01
000B9C4E E103                       	smpsAlterNote       $03
000B9C50 01                         	dc.b	$01
000B9C51 E1FD                       	smpsAlterNote       $FD
000B9C53 01                         	dc.b	$01
000B9C54 ECF5                       	smpsPSGAlterVol     $F5
000B9C56 9207                       	dc.b	nF1, $07
000B9C58 EC0B                       	smpsPSGAlterVol     $0B
000B9C5A 8004                       	dc.b	nRst, $04
000B9C5C ECF5                       	smpsPSGAlterVol     $F5
000B9C5E 9206                       	dc.b	nF1, $06
000B9C60 EC0B                       	smpsPSGAlterVol     $0B
000B9C62 8007                       	dc.b	nRst, $07
000B9C64 E103                       	smpsAlterNote       $03
000B9C66 0101                       	dc.b	$01, $01
000B9C68 E100                       	smpsAlterNote       $00
000B9C6A 01                         	dc.b	$01
000B9C6B E1FA                       	smpsAlterNote       $FA
000B9C6D 01                         	dc.b	$01
000B9C6E E1FD                       	smpsAlterNote       $FD
000B9C70 ECF5                       	smpsPSGAlterVol     $F5
000B9C72 9206                       	dc.b	nF1, $06
000B9C74 EC04                       	smpsPSGAlterVol     $04
000B9C76 E704                       	dc.b	smpsNoAttack, $04
000B9C78 ECFC                       	smpsPSGAlterVol     $FC
000B9C7A 9206                       	dc.b	nF1, $06
000B9C7C EC04                       	smpsPSGAlterVol     $04
000B9C7E E701                       	dc.b	smpsNoAttack, $01
000B9C80 EC07                       	smpsPSGAlterVol     $07
000B9C82 8006                       	dc.b	nRst, $06
000B9C84 E100                       	smpsAlterNote       $00
000B9C86 01                         	dc.b	$01
000B9C87 E104                       	smpsAlterNote       $04
000B9C89 01                         	dc.b	$01
000B9C8A E100                       	smpsAlterNote       $00
000B9C8C 01                         	dc.b	$01
000B9C8D E1FD                       	smpsAlterNote       $FD
000B9C8F 01                         	dc.b	$01
000B9C90 ECF5                       	smpsPSGAlterVol     $F5
000B9C92 9206                       	dc.b	nF1, $06
000B9C94 EC04                       	smpsPSGAlterVol     $04
000B9C96 E701                       	dc.b	smpsNoAttack, $01
000B9C98 EC07                       	smpsPSGAlterVol     $07
000B9C9A 8003                       	dc.b	nRst, $03
000B9C9C ECF5                       	smpsPSGAlterVol     $F5
000B9C9E 9207                       	dc.b	nF1, $07
000B9CA0 EC0B                       	smpsPSGAlterVol     $0B
000B9CA2 8007                       	dc.b	nRst, $07
000B9CA4 E103                       	smpsAlterNote       $03
000B9CA6 0101                       	dc.b	$01, $01
000B9CA8 E1FD                       	smpsAlterNote       $FD
000B9CAA 01                         	dc.b	$01
000B9CAB E1FA                       	smpsAlterNote       $FA
000B9CAD 01                         	dc.b	$01
000B9CAE E1FD                       	smpsAlterNote       $FD
000B9CB0 ECF5                       	smpsPSGAlterVol     $F5
000B9CB2 9106                       	dc.b	nE1, $06
000B9CB4 EC0B                       	smpsPSGAlterVol     $0B
000B9CB6 8004                       	dc.b	nRst, $04
000B9CB8 ECF5                       	smpsPSGAlterVol     $F5
000B9CBA 9106                       	dc.b	nE1, $06
000B9CBC EC04                       	smpsPSGAlterVol     $04
000B9CBE E701                       	dc.b	smpsNoAttack, $01
000B9CC0 EC07                       	smpsPSGAlterVol     $07
000B9CC2 8006                       	dc.b	nRst, $06
000B9CC4 E100                       	smpsAlterNote       $00
000B9CC6 01                         	dc.b	$01
000B9CC7 E104                       	smpsAlterNote       $04
000B9CC9 01                         	dc.b	$01
000B9CCA E100                       	smpsAlterNote       $00
000B9CCC 01                         	dc.b	$01
000B9CCD E1FA                       	smpsAlterNote       $FA
000B9CCF 01                         	dc.b	$01
000B9CD0 E1FD                       	smpsAlterNote       $FD
000B9CD2 ECF5                       	smpsPSGAlterVol     $F5
000B9CD4 9106                       	dc.b	nE1, $06
000B9CD6 EC04                       	smpsPSGAlterVol     $04
000B9CD8 E701                       	dc.b	smpsNoAttack, $01
000B9CDA EC07                       	smpsPSGAlterVol     $07
000B9CDC 8003                       	dc.b	nRst, $03
000B9CDE ECF5                       	smpsPSGAlterVol     $F5
000B9CE0 9106                       	dc.b	nE1, $06
000B9CE2 EC04                       	smpsPSGAlterVol     $04
000B9CE4 E701                       	dc.b	smpsNoAttack, $01
000B9CE6 EC07                       	smpsPSGAlterVol     $07
000B9CE8 8006                       	dc.b	nRst, $06
000B9CEA E100                       	smpsAlterNote       $00
000B9CEC 01                         	dc.b	$01
000B9CED E104                       	smpsAlterNote       $04
000B9CEF 01                         	dc.b	$01
000B9CF0 E103                       	smpsAlterNote       $03
000B9CF2 01                         	dc.b	$01
000B9CF3 E1FD                       	smpsAlterNote       $FD
000B9CF5 01                         	dc.b	$01
000B9CF6 ECF5                       	smpsPSGAlterVol     $F5
000B9CF8 9107                       	dc.b	nE1, $07
000B9CFA EC0B                       	smpsPSGAlterVol     $0B
000B9CFC 8004                       	dc.b	nRst, $04
000B9CFE ECF5                       	smpsPSGAlterVol     $F5
000B9D00 9106                       	dc.b	nE1, $06
000B9D02 EC0B                       	smpsPSGAlterVol     $0B
000B9D04 8007                       	dc.b	nRst, $07
000B9D06 E103                       	smpsAlterNote       $03
000B9D08 0101                       	dc.b	$01, $01
000B9D0A E100                       	smpsAlterNote       $00
000B9D0C 01                         	dc.b	$01
000B9D0D E1FA                       	smpsAlterNote       $FA
000B9D0F 01                         	dc.b	$01
000B9D10 E1FD                       	smpsAlterNote       $FD
000B9D12 ECF5                       	smpsPSGAlterVol     $F5
000B9D14 9106                       	dc.b	nE1, $06
000B9D16 EC04                       	smpsPSGAlterVol     $04
000B9D18 E701                       	dc.b	smpsNoAttack, $01
000B9D1A EC07                       	smpsPSGAlterVol     $07
000B9D1C 8003                       	dc.b	nRst, $03
000B9D1E ECF5                       	smpsPSGAlterVol     $F5
000B9D20 9106                       	dc.b	nE1, $06
000B9D22 EC04                       	smpsPSGAlterVol     $04
000B9D24 E701                       	dc.b	smpsNoAttack, $01
000B9D26 EC07                       	smpsPSGAlterVol     $07
000B9D28 8003                       	dc.b	nRst, $03
000B9D2A ECF5                       	smpsPSGAlterVol     $F5
000B9D2C 9207                       	dc.b	nF1, $07
000B9D2E EC0B                       	smpsPSGAlterVol     $0B
000B9D30 8006                       	dc.b	nRst, $06
000B9D32 E100                       	smpsAlterNote       $00
000B9D34 01                         	dc.b	$01
000B9D35 E104                       	smpsAlterNote       $04
000B9D37 01                         	dc.b	$01
000B9D38 E103                       	smpsAlterNote       $03
000B9D3A 01                         	dc.b	$01
000B9D3B E1FD                       	smpsAlterNote       $FD
000B9D3D 01                         	dc.b	$01
000B9D3E E1F9                       	smpsAlterNote       $F9
000B9D40 01                         	dc.b	$01
000B9D41 E1FD                       	smpsAlterNote       $FD
000B9D43 01                         	dc.b	$01
000B9D44 E100                       	smpsAlterNote       $00
000B9D46 01                         	dc.b	$01
000B9D47 E104                       	smpsAlterNote       $04
000B9D49 01                         	dc.b	$01
000B9D4A E1FD                       	smpsAlterNote       $FD
000B9D4C ECF5                       	smpsPSGAlterVol     $F5
000B9D4E 9203 9203                  	dc.b	nF1, $03, nF1, $03
000B9D52 EC04                       	smpsPSGAlterVol     $04
000B9D54 E701                       	dc.b	smpsNoAttack, $01
000B9D56 EC07                       	smpsPSGAlterVol     $07
000B9D58 8009                       	dc.b	nRst, $09
000B9D5A E100                       	smpsAlterNote       $00
000B9D5C 01                         	dc.b	$01
000B9D5D E104                       	smpsAlterNote       $04
000B9D5F 01                         	dc.b	$01
000B9D60 E103                       	smpsAlterNote       $03
000B9D62 01                         	dc.b	$01
000B9D63 E1FD                       	smpsAlterNote       $FD
000B9D65 01                         	dc.b	$01
000B9D66 E1F9                       	smpsAlterNote       $F9
000B9D68 01                         	dc.b	$01
000B9D69 E1FD                       	smpsAlterNote       $FD
000B9D6B 01                         	dc.b	$01
000B9D6C E100                       	smpsAlterNote       $00
000B9D6E 01                         	dc.b	$01
000B9D6F E104                       	smpsAlterNote       $04
000B9D71 01                         	dc.b	$01
000B9D72 E100                       	smpsAlterNote       $00
000B9D74 01                         	dc.b	$01
000B9D75 E1FA                       	smpsAlterNote       $FA
000B9D77 01                         	dc.b	$01
000B9D78 E1F9                       	smpsAlterNote       $F9
000B9D7A 01                         	dc.b	$01
000B9D7B E1FD                       	smpsAlterNote       $FD
000B9D7D 01                         	dc.b	$01
000B9D7E E103                       	smpsAlterNote       $03
000B9D80 0101                       	dc.b	$01, $01
000B9D82 E100                       	smpsAlterNote       $00
000B9D84 01                         	dc.b	$01
000B9D85 E1FD                       	smpsAlterNote       $FD
000B9D87 ECF5                       	smpsPSGAlterVol     $F5
000B9D89 9202                       	dc.b	nF1, $02
000B9D8B EC04                       	smpsPSGAlterVol     $04
000B9D8D E701                       	dc.b	smpsNoAttack, $01
000B9D8F ECFC                       	smpsPSGAlterVol     $FC
000B9D91 9106                       	dc.b	nE1, $06
000B9D93 EC04                       	smpsPSGAlterVol     $04
000B9D95 E701                       	dc.b	smpsNoAttack, $01
000B9D97 EC07                       	smpsPSGAlterVol     $07
000B9D99 8006                       	dc.b	nRst, $06
000B9D9B E100                       	smpsAlterNote       $00
000B9D9D 01                         	dc.b	$01
000B9D9E E104                       	smpsAlterNote       $04
000B9DA0 01                         	dc.b	$01
000B9DA1 E100                       	smpsAlterNote       $00
000B9DA3 01                         	dc.b	$01
000B9DA4 E1FD                       	smpsAlterNote       $FD
000B9DA6 01                         	dc.b	$01
000B9DA7 E1F9                       	smpsAlterNote       $F9
000B9DA9 01                         	dc.b	$01
000B9DAA E1FD                       	smpsAlterNote       $FD
000B9DAC 01                         	dc.b	$01
000B9DAD E103                       	smpsAlterNote       $03
000B9DAF 01                         	dc.b	$01
000B9DB0 E104                       	smpsAlterNote       $04
000B9DB2 01                         	dc.b	$01
000B9DB3 E1FD                       	smpsAlterNote       $FD
000B9DB5 ECF5                       	smpsPSGAlterVol     $F5
000B9DB7 9102                       	dc.b	nE1, $02
000B9DB9 EC04                       	smpsPSGAlterVol     $04
000B9DBB E701                       	dc.b	smpsNoAttack, $01
000B9DBD ECFC                       	smpsPSGAlterVol     $FC
000B9DBF 920D                       	dc.b	nF1, $0D
000B9DC1 E100                       	smpsAlterNote       $00
000B9DC3 E701                       	dc.b	smpsNoAttack, $01
000B9DC5 E104                       	smpsAlterNote       $04
000B9DC7 E701                       	dc.b	smpsNoAttack, $01
000B9DC9 E100                       	smpsAlterNote       $00
000B9DCB E701                       	dc.b	smpsNoAttack, $01
000B9DCD E1FD                       	smpsAlterNote       $FD
000B9DCF E701                       	dc.b	smpsNoAttack, $01
000B9DD1 E1F9                       	smpsAlterNote       $F9
000B9DD3 E701                       	dc.b	smpsNoAttack, $01
000B9DD5 E1FD                       	smpsAlterNote       $FD
000B9DD7 E701                       	dc.b	smpsNoAttack, $01
000B9DD9 E103                       	smpsAlterNote       $03
000B9DDB E701                       	dc.b	smpsNoAttack, $01
000B9DDD E104                       	smpsAlterNote       $04
000B9DDF E701                       	dc.b	smpsNoAttack, $01
000B9DE1 E100                       	smpsAlterNote       $00
000B9DE3 E701                       	dc.b	smpsNoAttack, $01
000B9DE5 E1FA                       	smpsAlterNote       $FA
000B9DE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9DEB E1FD                       	smpsAlterNote       $FD
000B9DED E701                       	dc.b	smpsNoAttack, $01
000B9DEF E103                       	smpsAlterNote       $03
000B9DF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9DF5 E1FD                       	smpsAlterNote       $FD
000B9DF7 E701                       	dc.b	smpsNoAttack, $01
000B9DF9 E1F9                       	smpsAlterNote       $F9
000B9DFB E701                       	dc.b	smpsNoAttack, $01
000B9DFD E1FA                       	smpsAlterNote       $FA
000B9DFF E701                       	dc.b	smpsNoAttack, $01
000B9E01 E100                       	smpsAlterNote       $00
000B9E03 EC04                       	smpsPSGAlterVol     $04
000B9E05 E701                       	dc.b	smpsNoAttack, $01
000B9E07 EC07                       	smpsPSGAlterVol     $07
000B9E09 E104                       	smpsAlterNote       $04
000B9E0B 8001                       	dc.b	nRst, $01
000B9E0D E100                       	smpsAlterNote       $00
000B9E0F 01                         	dc.b	$01
000B9E10 E1FD                       	smpsAlterNote       $FD
000B9E12 01                         	dc.b	$01
000B9E13 E1F9                       	smpsAlterNote       $F9
000B9E15 01                         	dc.b	$01
000B9E16 E1FD                       	smpsAlterNote       $FD
000B9E18 01                         	dc.b	$01
000B9E19 E103                       	smpsAlterNote       $03
000B9E1B 01                         	dc.b	$01
000B9E1C E104                       	smpsAlterNote       $04
000B9E1E 01                         	dc.b	$01
000B9E1F E1FD                       	smpsAlterNote       $FD
000B9E21 ECF5                       	smpsPSGAlterVol     $F5
000B9E23 9106                       	dc.b	nE1, $06
000B9E25 EC04                       	smpsPSGAlterVol     $04
000B9E27 E701                       	dc.b	smpsNoAttack, $01
000B9E29 EC07                       	smpsPSGAlterVol     $07
000B9E2B 8003                       	dc.b	nRst, $03
000B9E2D ECF5                       	smpsPSGAlterVol     $F5
000B9E2F 9106                       	dc.b	nE1, $06
000B9E31 EC04                       	smpsPSGAlterVol     $04
000B9E33 E701                       	dc.b	smpsNoAttack, $01
000B9E35 EC07                       	smpsPSGAlterVol     $07
000B9E37 8006                       	dc.b	nRst, $06
000B9E39 E100                       	smpsAlterNote       $00
000B9E3B 01                         	dc.b	$01
000B9E3C E104                       	smpsAlterNote       $04
000B9E3E 01                         	dc.b	$01
000B9E3F E100                       	smpsAlterNote       $00
000B9E41 01                         	dc.b	$01
000B9E42 E1FA                       	smpsAlterNote       $FA
000B9E44 01                         	dc.b	$01
000B9E45 E1FD                       	smpsAlterNote       $FD
000B9E47 ECF5                       	smpsPSGAlterVol     $F5
000B9E49 9206                       	dc.b	nF1, $06
000B9E4B EC04                       	smpsPSGAlterVol     $04
000B9E4D E701                       	dc.b	smpsNoAttack, $01
000B9E4F EC07                       	smpsPSGAlterVol     $07
000B9E51 8003                       	dc.b	nRst, $03
000B9E53 ECF5                       	smpsPSGAlterVol     $F5
000B9E55 9207                       	dc.b	nF1, $07
000B9E57 EC0B                       	smpsPSGAlterVol     $0B
000B9E59 8006                       	dc.b	nRst, $06
000B9E5B E100                       	smpsAlterNote       $00
000B9E5D 01                         	dc.b	$01
000B9E5E E103                       	smpsAlterNote       $03
000B9E60 0101                       	dc.b	$01, $01
000B9E62 E1FD                       	smpsAlterNote       $FD
000B9E64 01                         	dc.b	$01
000B9E65 ECF5                       	smpsPSGAlterVol     $F5
000B9E67 9107                       	dc.b	nE1, $07
000B9E69 EC0B                       	smpsPSGAlterVol     $0B
000B9E6B 8004                       	dc.b	nRst, $04
000B9E6D ECF5                       	smpsPSGAlterVol     $F5
000B9E6F 9106                       	dc.b	nE1, $06
000B9E71 EC04                       	smpsPSGAlterVol     $04
000B9E73 E701                       	dc.b	smpsNoAttack, $01
000B9E75 EC07                       	smpsPSGAlterVol     $07
000B9E77 8006                       	dc.b	nRst, $06
000B9E79 E103                       	smpsAlterNote       $03
000B9E7B 01                         	dc.b	$01
000B9E7C E104                       	smpsAlterNote       $04
000B9E7E 01                         	dc.b	$01
000B9E7F E100                       	smpsAlterNote       $00
000B9E81 01                         	dc.b	$01
000B9E82 E1FA                       	smpsAlterNote       $FA
000B9E84 01                         	dc.b	$01
000B9E85 E1FD                       	smpsAlterNote       $FD
000B9E87 ECF5                       	smpsPSGAlterVol     $F5
000B9E89 9106                       	dc.b	nE1, $06
000B9E8B EC04                       	smpsPSGAlterVol     $04
000B9E8D E701                       	dc.b	smpsNoAttack, $01
000B9E8F EC07                       	smpsPSGAlterVol     $07
000B9E91 8003                       	dc.b	nRst, $03
000B9E93 ECF5                       	smpsPSGAlterVol     $F5
000B9E95 9106                       	dc.b	nE1, $06
000B9E97 EC04                       	smpsPSGAlterVol     $04
000B9E99 E701                       	dc.b	smpsNoAttack, $01
000B9E9B EC07                       	smpsPSGAlterVol     $07
000B9E9D 8003                       	dc.b	nRst, $03
000B9E9F ECF5                       	smpsPSGAlterVol     $F5
000B9EA1 9207                       	dc.b	nF1, $07
000B9EA3 EC0B                       	smpsPSGAlterVol     $0B
000B9EA5 8006                       	dc.b	nRst, $06
000B9EA7 E100                       	smpsAlterNote       $00
000B9EA9 01                         	dc.b	$01
000B9EAA E103                       	smpsAlterNote       $03
000B9EAC 0101                       	dc.b	$01, $01
000B9EAE E1FD                       	smpsAlterNote       $FD
000B9EB0 01                         	dc.b	$01
000B9EB1 E1F9                       	smpsAlterNote       $F9
000B9EB3 01                         	dc.b	$01
000B9EB4 E1FA                       	smpsAlterNote       $FA
000B9EB6 01                         	dc.b	$01
000B9EB7 E100                       	smpsAlterNote       $00
000B9EB9 01                         	dc.b	$01
000B9EBA E104                       	smpsAlterNote       $04
000B9EBC 01                         	dc.b	$01
000B9EBD E1FD                       	smpsAlterNote       $FD
000B9EBF ECF5                       	smpsPSGAlterVol     $F5
000B9EC1 9203 9203                  	dc.b	nF1, $03, nF1, $03
000B9EC5 EC04                       	smpsPSGAlterVol     $04
000B9EC7 E701                       	dc.b	smpsNoAttack, $01
000B9EC9 EC07                       	smpsPSGAlterVol     $07
000B9ECB 8009                       	dc.b	nRst, $09
000B9ECD E100                       	smpsAlterNote       $00
000B9ECF 01                         	dc.b	$01
000B9ED0 E103                       	smpsAlterNote       $03
000B9ED2 0101                       	dc.b	$01, $01
000B9ED4 E1FD                       	smpsAlterNote       $FD
000B9ED6 01                         	dc.b	$01
000B9ED7 E1F9                       	smpsAlterNote       $F9
000B9ED9 01                         	dc.b	$01
000B9EDA E1FA                       	smpsAlterNote       $FA
000B9EDC 01                         	dc.b	$01
000B9EDD E100                       	smpsAlterNote       $00
000B9EDF 01                         	dc.b	$01
000B9EE0 E104                       	smpsAlterNote       $04
000B9EE2 01                         	dc.b	$01
000B9EE3 E100                       	smpsAlterNote       $00
000B9EE5 01                         	dc.b	$01
000B9EE6 E1FD                       	smpsAlterNote       $FD
000B9EE8 01                         	dc.b	$01
000B9EE9 E1F9                       	smpsAlterNote       $F9
000B9EEB 01                         	dc.b	$01
000B9EEC E1FD                       	smpsAlterNote       $FD
000B9EEE 01                         	dc.b	$01
000B9EEF E103                       	smpsAlterNote       $03
000B9EF1 01                         	dc.b	$01
000B9EF2 E104                       	smpsAlterNote       $04
000B9EF4 01                         	dc.b	$01
000B9EF5 E100                       	smpsAlterNote       $00
000B9EF7 01                         	dc.b	$01
000B9EF8 E1FD                       	smpsAlterNote       $FD
000B9EFA ECF5                       	smpsPSGAlterVol     $F5
000B9EFC 9203 9106                  	dc.b	nF1, $03, nE1, $06
000B9F00 EC04                       	smpsPSGAlterVol     $04
000B9F02 E701                       	dc.b	smpsNoAttack, $01
000B9F04 EC07                       	smpsPSGAlterVol     $07
000B9F06 8006                       	dc.b	nRst, $06
000B9F08 E100                       	smpsAlterNote       $00
000B9F0A 01                         	dc.b	$01
000B9F0B E104                       	smpsAlterNote       $04
000B9F0D 01                         	dc.b	$01
000B9F0E E103                       	smpsAlterNote       $03
000B9F10 01                         	dc.b	$01
000B9F11 E1FD                       	smpsAlterNote       $FD
000B9F13 01                         	dc.b	$01
000B9F14 E1F9                       	smpsAlterNote       $F9
000B9F16 01                         	dc.b	$01
000B9F17 E1FD                       	smpsAlterNote       $FD
000B9F19 01                         	dc.b	$01
000B9F1A E100                       	smpsAlterNote       $00
000B9F1C 01                         	dc.b	$01
000B9F1D E104                       	smpsAlterNote       $04
000B9F1F 01                         	dc.b	$01
000B9F20 E1FD                       	smpsAlterNote       $FD
000B9F22 ECF5                       	smpsPSGAlterVol     $F5
000B9F24 9103 920D                  	dc.b	nE1, $03, nF1, $0D
000B9F28 E100                       	smpsAlterNote       $00
000B9F2A E701                       	dc.b	smpsNoAttack, $01
000B9F2C E104                       	smpsAlterNote       $04
000B9F2E E701                       	dc.b	smpsNoAttack, $01
000B9F30 E100                       	smpsAlterNote       $00
000B9F32 E701                       	dc.b	smpsNoAttack, $01
000B9F34 E1FD                       	smpsAlterNote       $FD
000B9F36 E701                       	dc.b	smpsNoAttack, $01
000B9F38 E1F9                       	smpsAlterNote       $F9
000B9F3A E701                       	dc.b	smpsNoAttack, $01
000B9F3C E1FD                       	smpsAlterNote       $FD
000B9F3E E701                       	dc.b	smpsNoAttack, $01
000B9F40 E103                       	smpsAlterNote       $03
000B9F42 E701                       	dc.b	smpsNoAttack, $01
000B9F44 E104                       	smpsAlterNote       $04
000B9F46 E701                       	dc.b	smpsNoAttack, $01
000B9F48 E100                       	smpsAlterNote       $00
000B9F4A E701                       	dc.b	smpsNoAttack, $01
000B9F4C E1FA                       	smpsAlterNote       $FA
000B9F4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9F52 E1FD                       	smpsAlterNote       $FD
000B9F54 E701                       	dc.b	smpsNoAttack, $01
000B9F56 E103                       	smpsAlterNote       $03
000B9F58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9F5C E100                       	smpsAlterNote       $00
000B9F5E E701                       	dc.b	smpsNoAttack, $01
000B9F60 E1FA                       	smpsAlterNote       $FA
000B9F62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000B9F66 E100                       	smpsAlterNote       $00
000B9F68 EC04                       	smpsPSGAlterVol     $04
000B9F6A E701                       	dc.b	smpsNoAttack, $01
000B9F6C EC07                       	smpsPSGAlterVol     $07
000B9F6E E104                       	smpsAlterNote       $04
000B9F70 8001                       	dc.b	nRst, $01
000B9F72 E103                       	smpsAlterNote       $03
000B9F74 01                         	dc.b	$01
000B9F75 E1FD                       	smpsAlterNote       $FD
000B9F77 01                         	dc.b	$01
000B9F78 E1F9                       	smpsAlterNote       $F9
000B9F7A 01                         	dc.b	$01
000B9F7B E1FD                       	smpsAlterNote       $FD
000B9F7D 01                         	dc.b	$01
000B9F7E E100                       	smpsAlterNote       $00
000B9F80 01                         	dc.b	$01
000B9F81 E104                       	smpsAlterNote       $04
000B9F83 01                         	dc.b	$01
000B9F84 E1FD                       	smpsAlterNote       $FD
000B9F86 ECF5                       	smpsPSGAlterVol     $F5
000B9F88 9106                       	dc.b	nE1, $06
000B9F8A EC04                       	smpsPSGAlterVol     $04
000B9F8C E701                       	dc.b	smpsNoAttack, $01
000B9F8E EC07                       	smpsPSGAlterVol     $07
000B9F90 8003                       	dc.b	nRst, $03
000B9F92 ECF5                       	smpsPSGAlterVol     $F5
000B9F94 9106                       	dc.b	nE1, $06
000B9F96 EC04                       	smpsPSGAlterVol     $04
000B9F98 E701                       	dc.b	smpsNoAttack, $01
000B9F9A EC07                       	smpsPSGAlterVol     $07
000B9F9C 8006                       	dc.b	nRst, $06
000B9F9E E100                       	smpsAlterNote       $00
000B9FA0 01                         	dc.b	$01
000B9FA1 E104                       	smpsAlterNote       $04
000B9FA3 01                         	dc.b	$01
000B9FA4 E100                       	smpsAlterNote       $00
000B9FA6 01                         	dc.b	$01
000B9FA7 E1FD                       	smpsAlterNote       $FD
000B9FA9 01                         	dc.b	$01
000B9FAA ECF5                       	smpsPSGAlterVol     $F5
000B9FAC 9206                       	dc.b	nF1, $06
000B9FAE EC04                       	smpsPSGAlterVol     $04
000B9FB0 E701                       	dc.b	smpsNoAttack, $01
000B9FB2 EC07                       	smpsPSGAlterVol     $07
000B9FB4 8003                       	dc.b	nRst, $03
000B9FB6 ECF5                       	smpsPSGAlterVol     $F5
000B9FB8 9207                       	dc.b	nF1, $07
000B9FBA EC0B                       	smpsPSGAlterVol     $0B
000B9FBC 8007                       	dc.b	nRst, $07
000B9FBE E103                       	smpsAlterNote       $03
000B9FC0 0101                       	dc.b	$01, $01
000B9FC2 E1FD                       	smpsAlterNote       $FD
000B9FC4 01                         	dc.b	$01
000B9FC5 E1FA                       	smpsAlterNote       $FA
000B9FC7 01                         	dc.b	$01
000B9FC8 E1FD                       	smpsAlterNote       $FD
000B9FCA ECF5                       	smpsPSGAlterVol     $F5
000B9FCC 9106                       	dc.b	nE1, $06
000B9FCE EC0B                       	smpsPSGAlterVol     $0B
000B9FD0 8004                       	dc.b	nRst, $04
000B9FD2 ECF5                       	smpsPSGAlterVol     $F5
000B9FD4 9106                       	dc.b	nE1, $06
000B9FD6 EC04                       	smpsPSGAlterVol     $04
000B9FD8 E701                       	dc.b	smpsNoAttack, $01
000B9FDA EC07                       	smpsPSGAlterVol     $07
000B9FDC 8006                       	dc.b	nRst, $06
000B9FDE E100                       	smpsAlterNote       $00
000B9FE0 01                         	dc.b	$01
000B9FE1 E104                       	smpsAlterNote       $04
000B9FE3 01                         	dc.b	$01
000B9FE4 E100                       	smpsAlterNote       $00
000B9FE6 01                         	dc.b	$01
000B9FE7 E1FA                       	smpsAlterNote       $FA
000B9FE9 01                         	dc.b	$01
000B9FEA E1FD                       	smpsAlterNote       $FD
000B9FEC ECF5                       	smpsPSGAlterVol     $F5
000B9FEE 9206                       	dc.b	nF1, $06
000B9FF0 EC04                       	smpsPSGAlterVol     $04
000B9FF2 E701                       	dc.b	smpsNoAttack, $01
000B9FF4 EC07                       	smpsPSGAlterVol     $07
000B9FF6 8003                       	dc.b	nRst, $03
000B9FF8 ECF5                       	smpsPSGAlterVol     $F5
000B9FFA 9206                       	dc.b	nF1, $06
000B9FFC EC04                       	smpsPSGAlterVol     $04
000B9FFE E701                       	dc.b	smpsNoAttack, $01
000BA000 EC07                       	smpsPSGAlterVol     $07
000BA002 8006                       	dc.b	nRst, $06
000BA004 E100                       	smpsAlterNote       $00
000BA006 01                         	dc.b	$01
000BA007 E104                       	smpsAlterNote       $04
000BA009 01                         	dc.b	$01
000BA00A E103                       	smpsAlterNote       $03
000BA00C 01                         	dc.b	$01
000BA00D E1FD                       	smpsAlterNote       $FD
000BA00F 01                         	dc.b	$01
000BA010 ECF5                       	smpsPSGAlterVol     $F5
000BA012 9107                       	dc.b	nE1, $07
000BA014 EC0B                       	smpsPSGAlterVol     $0B
000BA016 8004                       	dc.b	nRst, $04
000BA018 ECF5                       	smpsPSGAlterVol     $F5
000BA01A 9106                       	dc.b	nE1, $06
000BA01C EC0B                       	smpsPSGAlterVol     $0B
000BA01E 8007                       	dc.b	nRst, $07
000BA020 E103                       	smpsAlterNote       $03
000BA022 0101                       	dc.b	$01, $01
000BA024 E100                       	smpsAlterNote       $00
000BA026 01                         	dc.b	$01
000BA027 E1FA                       	smpsAlterNote       $FA
000BA029 01                         	dc.b	$01
000BA02A E1FD                       	smpsAlterNote       $FD
000BA02C ECF5                       	smpsPSGAlterVol     $F5
000BA02E 9206                       	dc.b	nF1, $06
000BA030 EC04                       	smpsPSGAlterVol     $04
000BA032 E701                       	dc.b	smpsNoAttack, $01
000BA034 EC07                       	smpsPSGAlterVol     $07
000BA036 8003                       	dc.b	nRst, $03
000BA038 ECF5                       	smpsPSGAlterVol     $F5
000BA03A 9206                       	dc.b	nF1, $06
000BA03C EC04                       	smpsPSGAlterVol     $04
000BA03E E701                       	dc.b	smpsNoAttack, $01
000BA040 EC07                       	smpsPSGAlterVol     $07
000BA042 8006                       	dc.b	nRst, $06
000BA044 E100                       	smpsAlterNote       $00
000BA046 01                         	dc.b	$01
000BA047 E104                       	smpsAlterNote       $04
000BA049 01                         	dc.b	$01
000BA04A E100                       	smpsAlterNote       $00
000BA04C 01                         	dc.b	$01
000BA04D E1FD                       	smpsAlterNote       $FD
000BA04F 01                         	dc.b	$01
000BA050 ECF5                       	smpsPSGAlterVol     $F5
000BA052 9106                       	dc.b	nE1, $06
000BA054 EC04                       	smpsPSGAlterVol     $04
000BA056 E701                       	dc.b	smpsNoAttack, $01
000BA058 EC07                       	smpsPSGAlterVol     $07
000BA05A 8003                       	dc.b	nRst, $03
000BA05C ECF5                       	smpsPSGAlterVol     $F5
000BA05E 9107 9106                  	dc.b	nE1, $07, nE1, $06
000BA062 EC04                       	smpsPSGAlterVol     $04
000BA064 E701                       	dc.b	smpsNoAttack, $01
000BA066 ECFC                       	smpsPSGAlterVol     $FC
000BA068 9103                       	dc.b	nE1, $03
000BA06A EC04                       	smpsPSGAlterVol     $04
000BA06C E701                       	dc.b	smpsNoAttack, $01
000BA06E ECFC                       	smpsPSGAlterVol     $FC
000BA070 9102                       	dc.b	nE1, $02
000BA072 EC04                       	smpsPSGAlterVol     $04
000BA074 E701                       	dc.b	smpsNoAttack, $01
000BA076 ECFC                       	smpsPSGAlterVol     $FC
000BA078 9103                       	dc.b	nE1, $03
000BA07A EC0B                       	smpsPSGAlterVol     $0B
000BA07C 800A                       	dc.b	nRst, $0A
000BA07E E100                       	smpsAlterNote       $00
000BA080 01                         	dc.b	$01
000BA081 E104                       	smpsAlterNote       $04
000BA083 01                         	dc.b	$01
000BA084 E100                       	smpsAlterNote       $00
000BA086 01                         	dc.b	$01
000BA087 E1FA                       	smpsAlterNote       $FA
000BA089 01                         	dc.b	$01
000BA08A E1F9                       	smpsAlterNote       $F9
000BA08C 01                         	dc.b	$01
000BA08D E1FD                       	smpsAlterNote       $FD
000BA08F 01                         	dc.b	$01
000BA090 E103                       	smpsAlterNote       $03
000BA092 0101                       	dc.b	$01, $01
000BA094 E100                       	smpsAlterNote       $00
000BA096 01                         	dc.b	$01
000BA097 E1FA                       	smpsAlterNote       $FA
000BA099 0101                       	dc.b	$01, $01
000BA09B E1FD                       	smpsAlterNote       $FD
000BA09D ECF5                       	smpsPSGAlterVol     $F5
000BA09F 9206                       	dc.b	nF1, $06
000BA0A1 EC04                       	smpsPSGAlterVol     $04
000BA0A3 E704                       	dc.b	smpsNoAttack, $04
000BA0A5 ECFC                       	smpsPSGAlterVol     $FC
000BA0A7 9206                       	dc.b	nF1, $06
000BA0A9 EC04                       	smpsPSGAlterVol     $04
000BA0AB E701                       	dc.b	smpsNoAttack, $01
000BA0AD EC07                       	smpsPSGAlterVol     $07
000BA0AF 8006                       	dc.b	nRst, $06
000BA0B1 E100                       	smpsAlterNote       $00
000BA0B3 01                         	dc.b	$01
000BA0B4 E104                       	smpsAlterNote       $04
000BA0B6 01                         	dc.b	$01
000BA0B7 E103                       	smpsAlterNote       $03
000BA0B9 01                         	dc.b	$01
000BA0BA E1FD                       	smpsAlterNote       $FD
000BA0BC 01                         	dc.b	$01
000BA0BD ECF5                       	smpsPSGAlterVol     $F5
000BA0BF 9407                       	dc.b	nG1, $07
000BA0C1 EC0B                       	smpsPSGAlterVol     $0B
000BA0C3 8004                       	dc.b	nRst, $04
000BA0C5 ECF5                       	smpsPSGAlterVol     $F5
000BA0C7 9406                       	dc.b	nG1, $06
000BA0C9 EC0B                       	smpsPSGAlterVol     $0B
000BA0CB 8007                       	dc.b	nRst, $07
000BA0CD E103                       	smpsAlterNote       $03
000BA0CF 0101                       	dc.b	$01, $01
000BA0D1 E1FD                       	smpsAlterNote       $FD
000BA0D3 01                         	dc.b	$01
000BA0D4 E1F9                       	smpsAlterNote       $F9
000BA0D6 01                         	dc.b	$01
000BA0D7 E1FD                       	smpsAlterNote       $FD
000BA0D9 ECF5                       	smpsPSGAlterVol     $F5
000BA0DB 9206                       	dc.b	nF1, $06
000BA0DD EC04                       	smpsPSGAlterVol     $04
000BA0DF E701                       	dc.b	smpsNoAttack, $01
000BA0E1 EC07                       	smpsPSGAlterVol     $07
000BA0E3 8003                       	dc.b	nRst, $03
000BA0E5 ECF5                       	smpsPSGAlterVol     $F5
000BA0E7 9206                       	dc.b	nF1, $06
000BA0E9 EC04                       	smpsPSGAlterVol     $04
000BA0EB E701                       	dc.b	smpsNoAttack, $01
000BA0ED EC07                       	smpsPSGAlterVol     $07
000BA0EF 8006                       	dc.b	nRst, $06
000BA0F1 E100                       	smpsAlterNote       $00
000BA0F3 01                         	dc.b	$01
000BA0F4 E104                       	smpsAlterNote       $04
000BA0F6 01                         	dc.b	$01
000BA0F7 E100                       	smpsAlterNote       $00
000BA0F9 01                         	dc.b	$01
000BA0FA E1FA                       	smpsAlterNote       $FA
000BA0FC 01                         	dc.b	$01
000BA0FD E1FD                       	smpsAlterNote       $FD
000BA0FF ECF5                       	smpsPSGAlterVol     $F5
000BA101 9206                       	dc.b	nF1, $06
000BA103 EC04                       	smpsPSGAlterVol     $04
000BA105 E701                       	dc.b	smpsNoAttack, $01
000BA107 EC07                       	smpsPSGAlterVol     $07
000BA109 8003                       	dc.b	nRst, $03
000BA10B ECF5                       	smpsPSGAlterVol     $F5
000BA10D 9107                       	dc.b	nE1, $07
000BA10F EC0B                       	smpsPSGAlterVol     $0B
000BA111 8006                       	dc.b	nRst, $06
000BA113 E100                       	smpsAlterNote       $00
000BA115 01                         	dc.b	$01
000BA116 E103                       	smpsAlterNote       $03
000BA118 0101                       	dc.b	$01, $01
000BA11A E1FD                       	smpsAlterNote       $FD
000BA11C 01                         	dc.b	$01
000BA11D ECF5                       	smpsPSGAlterVol     $F5
000BA11F 9207                       	dc.b	nF1, $07
000BA121 EC0B                       	smpsPSGAlterVol     $0B
000BA123 8004                       	dc.b	nRst, $04
000BA125 ECF5                       	smpsPSGAlterVol     $F5
000BA127 9206                       	dc.b	nF1, $06
000BA129 EC04                       	smpsPSGAlterVol     $04
000BA12B E701                       	dc.b	smpsNoAttack, $01
000BA12D EC07                       	smpsPSGAlterVol     $07
000BA12F 8006                       	dc.b	nRst, $06
000BA131 E103                       	smpsAlterNote       $03
000BA133 01                         	dc.b	$01
000BA134 E104                       	smpsAlterNote       $04
000BA136 01                         	dc.b	$01
000BA137 E100                       	smpsAlterNote       $00
000BA139 01                         	dc.b	$01
000BA13A E1FB                       	smpsAlterNote       $FB
000BA13C 01                         	dc.b	$01
000BA13D E1FD                       	smpsAlterNote       $FD
000BA13F ECF5                       	smpsPSGAlterVol     $F5
000BA141 9406                       	dc.b	nG1, $06
000BA143 EC04                       	smpsPSGAlterVol     $04
000BA145 E701                       	dc.b	smpsNoAttack, $01
000BA147 EC07                       	smpsPSGAlterVol     $07
000BA149 8003                       	dc.b	nRst, $03
000BA14B ECF5                       	smpsPSGAlterVol     $F5
000BA14D 9406                       	dc.b	nG1, $06
000BA14F EC04                       	smpsPSGAlterVol     $04
000BA151 E701                       	dc.b	smpsNoAttack, $01
000BA153 EC07                       	smpsPSGAlterVol     $07
000BA155 8006                       	dc.b	nRst, $06
000BA157 E100                       	smpsAlterNote       $00
000BA159 01                         	dc.b	$01
000BA15A E104                       	smpsAlterNote       $04
000BA15C 01                         	dc.b	$01
000BA15D E100                       	smpsAlterNote       $00
000BA15F 01                         	dc.b	$01
000BA160 E1FD                       	smpsAlterNote       $FD
000BA162 01                         	dc.b	$01
000BA163 ECF5                       	smpsPSGAlterVol     $F5
000BA165 9206                       	dc.b	nF1, $06
000BA167 EC04                       	smpsPSGAlterVol     $04
000BA169 E701                       	dc.b	smpsNoAttack, $01
000BA16B EC07                       	smpsPSGAlterVol     $07
000BA16D 8003                       	dc.b	nRst, $03
000BA16F ECF5                       	smpsPSGAlterVol     $F5
000BA171 9207                       	dc.b	nF1, $07
000BA173 EC0B                       	smpsPSGAlterVol     $0B
000BA175 8007                       	dc.b	nRst, $07
000BA177 E103                       	smpsAlterNote       $03
000BA179 0101                       	dc.b	$01, $01
000BA17B E1FD                       	smpsAlterNote       $FD
000BA17D 01                         	dc.b	$01
000BA17E E1FA                       	smpsAlterNote       $FA
000BA180 01                         	dc.b	$01
000BA181 E1FD                       	smpsAlterNote       $FD
000BA183 ECF5                       	smpsPSGAlterVol     $F5
000BA185 9206                       	dc.b	nF1, $06
000BA187 EC0B                       	smpsPSGAlterVol     $0B
000BA189 8004                       	dc.b	nRst, $04
000BA18B ECF5                       	smpsPSGAlterVol     $F5
000BA18D 9206                       	dc.b	nF1, $06
000BA18F EC04                       	smpsPSGAlterVol     $04
000BA191 E701                       	dc.b	smpsNoAttack, $01
000BA193 EC07                       	smpsPSGAlterVol     $07
000BA195 8006                       	dc.b	nRst, $06
000BA197 E100                       	smpsAlterNote       $00
000BA199 01                         	dc.b	$01
000BA19A E104                       	smpsAlterNote       $04
000BA19C 01                         	dc.b	$01
000BA19D E100                       	smpsAlterNote       $00
000BA19F 01                         	dc.b	$01
000BA1A0 E1FA                       	smpsAlterNote       $FA
000BA1A2 01                         	dc.b	$01
000BA1A3 E1FD                       	smpsAlterNote       $FD
000BA1A5 ECF5                       	smpsPSGAlterVol     $F5
000BA1A7 9206                       	dc.b	nF1, $06
000BA1A9 EC04                       	smpsPSGAlterVol     $04
000BA1AB E701                       	dc.b	smpsNoAttack, $01
000BA1AD EC07                       	smpsPSGAlterVol     $07
000BA1AF 8003                       	dc.b	nRst, $03
000BA1B1 ECF5                       	smpsPSGAlterVol     $F5
000BA1B3 9207                       	dc.b	nF1, $07
000BA1B5 EC0B                       	smpsPSGAlterVol     $0B
000BA1B7 8006                       	dc.b	nRst, $06
000BA1B9 E100                       	smpsAlterNote       $00
000BA1BB 01                         	dc.b	$01
000BA1BC E103                       	smpsAlterNote       $03
000BA1BE 0101                       	dc.b	$01, $01
000BA1C0 E1FD                       	smpsAlterNote       $FD
000BA1C2 01                         	dc.b	$01
000BA1C3 ECF5                       	smpsPSGAlterVol     $F5
000BA1C5 9207                       	dc.b	nF1, $07
000BA1C7 EC0B                       	smpsPSGAlterVol     $0B
000BA1C9 8004                       	dc.b	nRst, $04
000BA1CB ECF5                       	smpsPSGAlterVol     $F5
000BA1CD 9206                       	dc.b	nF1, $06
000BA1CF EC0B                       	smpsPSGAlterVol     $0B
000BA1D1 8007                       	dc.b	nRst, $07
000BA1D3 E103                       	smpsAlterNote       $03
000BA1D5 0101                       	dc.b	$01, $01
000BA1D7 E100                       	smpsAlterNote       $00
000BA1D9 01                         	dc.b	$01
000BA1DA E1FA                       	smpsAlterNote       $FA
000BA1DC 01                         	dc.b	$01
000BA1DD E1FD                       	smpsAlterNote       $FD
000BA1DF ECF5                       	smpsPSGAlterVol     $F5
000BA1E1 9206                       	dc.b	nF1, $06
000BA1E3 EC04                       	smpsPSGAlterVol     $04
000BA1E5 E701                       	dc.b	smpsNoAttack, $01
000BA1E7 EC07                       	smpsPSGAlterVol     $07
000BA1E9 8003                       	dc.b	nRst, $03
000BA1EB ECF5                       	smpsPSGAlterVol     $F5
000BA1ED 9206                       	dc.b	nF1, $06
000BA1EF EC04                       	smpsPSGAlterVol     $04
000BA1F1 E701                       	dc.b	smpsNoAttack, $01
000BA1F3 EC07                       	smpsPSGAlterVol     $07
000BA1F5 8006                       	dc.b	nRst, $06
000BA1F7 E100                       	smpsAlterNote       $00
000BA1F9 01                         	dc.b	$01
000BA1FA E104                       	smpsAlterNote       $04
000BA1FC 01                         	dc.b	$01
000BA1FD E100                       	smpsAlterNote       $00
000BA1FF 01                         	dc.b	$01
000BA200 E1FD                       	smpsAlterNote       $FD
000BA202 01                         	dc.b	$01
000BA203 ECF5                       	smpsPSGAlterVol     $F5
000BA205 9206                       	dc.b	nF1, $06
000BA207 EC04                       	smpsPSGAlterVol     $04
000BA209 E701                       	dc.b	smpsNoAttack, $01
000BA20B EC07                       	smpsPSGAlterVol     $07
000BA20D 8003                       	dc.b	nRst, $03
000BA20F ECF5                       	smpsPSGAlterVol     $F5
000BA211 9207                       	dc.b	nF1, $07
000BA213 EC0B                       	smpsPSGAlterVol     $0B
000BA215 8007                       	dc.b	nRst, $07
000BA217 E104                       	smpsAlterNote       $04
000BA219 0101                       	dc.b	$01, $01
000BA21B E1FB                       	smpsAlterNote       $FB
000BA21D 01                         	dc.b	$01
000BA21E E1F6                       	smpsAlterNote       $F6
000BA220 0101                       	dc.b	$01, $01
000BA222 E1FF                       	smpsAlterNote       $FF
000BA224 01                         	dc.b	$01
000BA225 E105                       	smpsAlterNote       $05
000BA227 01                         	dc.b	$01
000BA228 E104                       	smpsAlterNote       $04
000BA22A 01                         	dc.b	$01
000BA22B E1FB                       	smpsAlterNote       $FB
000BA22D 01                         	dc.b	$01
000BA22E E1F5                       	smpsAlterNote       $F5
000BA230 01                         	dc.b	$01
000BA231 E1FC                       	smpsAlterNote       $FC
000BA233 ECF5                       	smpsPSGAlterVol     $F5
000BA235 8B0E                       	dc.b	nBb0, $0E
000BA237 E102                       	smpsAlterNote       $02
000BA239 EC0B                       	smpsPSGAlterVol     $0B
000BA23B 8001                       	dc.b	nRst, $01
000BA23D E101                       	smpsAlterNote       $01
000BA23F 01                         	dc.b	$01
000BA240 E1FC                       	smpsAlterNote       $FC
000BA242 01                         	dc.b	$01
000BA243 E1F9                       	smpsAlterNote       $F9
000BA245 0101                       	dc.b	$01, $01
000BA247 E1FF                       	smpsAlterNote       $FF
000BA249 01                         	dc.b	$01
000BA24A E102                       	smpsAlterNote       $02
000BA24C 01                         	dc.b	$01
000BA24D E1FF                       	smpsAlterNote       $FF
000BA24F 01                         	dc.b	$01
000BA250 E1FC                       	smpsAlterNote       $FC
000BA252 01                         	dc.b	$01
000BA253 E1F8                       	smpsAlterNote       $F8
000BA255 01                         	dc.b	$01
000BA256 E1FC                       	smpsAlterNote       $FC
000BA258 01                         	dc.b	$01
000BA259 E101                       	smpsAlterNote       $01
000BA25B 01                         	dc.b	$01
000BA25C E102                       	smpsAlterNote       $02
000BA25E 01                         	dc.b	$01
000BA25F E1FF                       	smpsAlterNote       $FF
000BA261 01                         	dc.b	$01
000BA262 E1FB                       	smpsAlterNote       $FB
000BA264 ECF5                       	smpsPSGAlterVol     $F5
000BA266 8D0D                       	dc.b	nC1, $0D
000BA268 E101                       	smpsAlterNote       $01
000BA26A EC0B                       	smpsPSGAlterVol     $0B
000BA26C 8001                       	dc.b	nRst, $01
000BA26E E102                       	smpsAlterNote       $02
000BA270 01                         	dc.b	$01
000BA271 E1FF                       	smpsAlterNote       $FF
000BA273 01                         	dc.b	$01
000BA274 E1F9                       	smpsAlterNote       $F9
000BA276 0101                       	dc.b	$01, $01
000BA278 E1FC                       	smpsAlterNote       $FC
000BA27A 01                         	dc.b	$01
000BA27B E101                       	smpsAlterNote       $01
000BA27D 0101                       	dc.b	$01, $01
000BA27F E1FC                       	smpsAlterNote       $FC
000BA281 01                         	dc.b	$01
000BA282 E1F9                       	smpsAlterNote       $F9
000BA284 0101                       	dc.b	$01, $01
000BA286 E1FF                       	smpsAlterNote       $FF
000BA288 01                         	dc.b	$01
000BA289 E102                       	smpsAlterNote       $02
000BA28B 01                         	dc.b	$01
000BA28C E101                       	smpsAlterNote       $01
000BA28E 01                         	dc.b	$01
000BA28F E1FC                       	smpsAlterNote       $FC
000BA291 ECF5                       	smpsPSGAlterVol     $F5
000BA293 8F0D                       	dc.b	nD1, $0D
000BA295 E1FF                       	smpsAlterNote       $FF
000BA297 EC04                       	smpsPSGAlterVol     $04
000BA299 E701                       	dc.b	smpsNoAttack, $01
000BA29B EC07                       	smpsPSGAlterVol     $07
000BA29D E103                       	smpsAlterNote       $03
000BA29F 8001                       	dc.b	nRst, $01
000BA2A1 E102                       	smpsAlterNote       $02
000BA2A3 01                         	dc.b	$01
000BA2A4 E1FD                       	smpsAlterNote       $FD
000BA2A6 01                         	dc.b	$01
000BA2A7 E1F9                       	smpsAlterNote       $F9
000BA2A9 01                         	dc.b	$01
000BA2AA E1FD                       	smpsAlterNote       $FD
000BA2AC 01                         	dc.b	$01
000BA2AD E100                       	smpsAlterNote       $00
000BA2AF 01                         	dc.b	$01
000BA2B0 E103                       	smpsAlterNote       $03
000BA2B2 01                         	dc.b	$01
000BA2B3 E100                       	smpsAlterNote       $00
000BA2B5 01                         	dc.b	$01
000BA2B6 E1FA                       	smpsAlterNote       $FA
000BA2B8 01                         	dc.b	$01
000BA2B9 E1F9                       	smpsAlterNote       $F9
000BA2BB 01                         	dc.b	$01
000BA2BC E1FD                       	smpsAlterNote       $FD
000BA2BE 01                         	dc.b	$01
000BA2BF E102                       	smpsAlterNote       $02
000BA2C1 0101                       	dc.b	$01, $01
000BA2C3 E100                       	smpsAlterNote       $00
000BA2C5 01                         	dc.b	$01
000BA2C6 E1FD                       	smpsAlterNote       $FD
000BA2C8 ECF5                       	smpsPSGAlterVol     $F5
000BA2CA 910D                       	dc.b	nE1, $0D
000BA2CC E103                       	smpsAlterNote       $03
000BA2CE EC0B                       	smpsPSGAlterVol     $0B
000BA2D0 8001 01                    	dc.b	nRst, $01, $01
000BA2D3 E100                       	smpsAlterNote       $00
000BA2D5 01                         	dc.b	$01
000BA2D6 E1FA                       	smpsAlterNote       $FA
000BA2D8 0101                       	dc.b	$01, $01
000BA2DA E100                       	smpsAlterNote       $00
000BA2DC 01                         	dc.b	$01
000BA2DD E103                       	smpsAlterNote       $03
000BA2DF 01                         	dc.b	$01
000BA2E0 E1FD                       	smpsAlterNote       $FD
000BA2E2 ECF5                       	smpsPSGAlterVol     $F5
000BA2E4 9206                       	dc.b	nF1, $06
000BA2E6 EC04                       	smpsPSGAlterVol     $04
000BA2E8 E701                       	dc.b	smpsNoAttack, $01
000BA2EA EC07                       	smpsPSGAlterVol     $07
000BA2EC 8003                       	dc.b	nRst, $03
000BA2EE ECF5                       	smpsPSGAlterVol     $F5
000BA2F0 9207                       	dc.b	nF1, $07
000BA2F2 EC0B                       	smpsPSGAlterVol     $0B
000BA2F4 8006                       	dc.b	nRst, $06
000BA2F6 E100                       	smpsAlterNote       $00
000BA2F8 01                         	dc.b	$01
000BA2F9 E103                       	smpsAlterNote       $03
000BA2FB 0101                       	dc.b	$01, $01
000BA2FD E1FD                       	smpsAlterNote       $FD
000BA2FF 01                         	dc.b	$01
000BA300 ECF5                       	smpsPSGAlterVol     $F5
000BA302 9407                       	dc.b	nG1, $07
000BA304 EC0B                       	smpsPSGAlterVol     $0B
000BA306 8004                       	dc.b	nRst, $04
000BA308 ECF5                       	smpsPSGAlterVol     $F5
000BA30A 9406                       	dc.b	nG1, $06
000BA30C EC04                       	smpsPSGAlterVol     $04
000BA30E E701                       	dc.b	smpsNoAttack, $01
000BA310 EC07                       	smpsPSGAlterVol     $07
000BA312 8006                       	dc.b	nRst, $06
000BA314 E103                       	smpsAlterNote       $03
000BA316 01                         	dc.b	$01
000BA317 E104                       	smpsAlterNote       $04
000BA319 01                         	dc.b	$01
000BA31A E100                       	smpsAlterNote       $00
000BA31C 01                         	dc.b	$01
000BA31D E1F9                       	smpsAlterNote       $F9
000BA31F 01                         	dc.b	$01
000BA320 E1FD                       	smpsAlterNote       $FD
000BA322 ECF5                       	smpsPSGAlterVol     $F5
000BA324 9206                       	dc.b	nF1, $06
000BA326 EC04                       	smpsPSGAlterVol     $04
000BA328 E701                       	dc.b	smpsNoAttack, $01
000BA32A EC07                       	smpsPSGAlterVol     $07
000BA32C 8003                       	dc.b	nRst, $03
000BA32E ECF5                       	smpsPSGAlterVol     $F5
000BA330 9206                       	dc.b	nF1, $06
000BA332 EC04                       	smpsPSGAlterVol     $04
000BA334 E701                       	dc.b	smpsNoAttack, $01
000BA336 EC07                       	smpsPSGAlterVol     $07
000BA338 8006                       	dc.b	nRst, $06
000BA33A E100                       	smpsAlterNote       $00
000BA33C 01                         	dc.b	$01
000BA33D E104                       	smpsAlterNote       $04
000BA33F 01                         	dc.b	$01
000BA340 E103                       	smpsAlterNote       $03
000BA342 01                         	dc.b	$01
000BA343 E1FD                       	smpsAlterNote       $FD
000BA345 01                         	dc.b	$01
000BA346 ECF5                       	smpsPSGAlterVol     $F5
000BA348 9407                       	dc.b	nG1, $07
000BA34A EC0B                       	smpsPSGAlterVol     $0B
000BA34C 8004                       	dc.b	nRst, $04
000BA34E ECF5                       	smpsPSGAlterVol     $F5
000BA350 9406                       	dc.b	nG1, $06
000BA352 EC0B                       	smpsPSGAlterVol     $0B
000BA354 8007                       	dc.b	nRst, $07
000BA356 E103                       	smpsAlterNote       $03
000BA358 0101                       	dc.b	$01, $01
000BA35A E100                       	smpsAlterNote       $00
000BA35C 01                         	dc.b	$01
000BA35D E1F9                       	smpsAlterNote       $F9
000BA35F 01                         	dc.b	$01
000BA360 E1FD                       	smpsAlterNote       $FD
000BA362 ECF5                       	smpsPSGAlterVol     $F5
000BA364 9206                       	dc.b	nF1, $06
000BA366 EC04                       	smpsPSGAlterVol     $04
000BA368 E701                       	dc.b	smpsNoAttack, $01
000BA36A EC07                       	smpsPSGAlterVol     $07
000BA36C 8003                       	dc.b	nRst, $03
000BA36E ECF5                       	smpsPSGAlterVol     $F5
000BA370 9206                       	dc.b	nF1, $06
000BA372 EC04                       	smpsPSGAlterVol     $04
000BA374 E701                       	dc.b	smpsNoAttack, $01
000BA376 EC07                       	smpsPSGAlterVol     $07
000BA378 8006                       	dc.b	nRst, $06
000BA37A E100                       	smpsAlterNote       $00
000BA37C 01                         	dc.b	$01
000BA37D E104                       	smpsAlterNote       $04
000BA37F 01                         	dc.b	$01
000BA380 E100                       	smpsAlterNote       $00
000BA382 01                         	dc.b	$01
000BA383 E1FB                       	smpsAlterNote       $FB
000BA385 01                         	dc.b	$01
000BA386 E1FD                       	smpsAlterNote       $FD
000BA388 ECF5                       	smpsPSGAlterVol     $F5
000BA38A 9406                       	dc.b	nG1, $06
000BA38C EC04                       	smpsPSGAlterVol     $04
000BA38E E701                       	dc.b	smpsNoAttack, $01
000BA390 EC07                       	smpsPSGAlterVol     $07
000BA392 8003                       	dc.b	nRst, $03
000BA394 ECF5                       	smpsPSGAlterVol     $F5
000BA396 9407                       	dc.b	nG1, $07
000BA398 EC0B                       	smpsPSGAlterVol     $0B
000BA39A 8006                       	dc.b	nRst, $06
000BA39C E100                       	smpsAlterNote       $00
000BA39E 01                         	dc.b	$01
000BA39F E103                       	smpsAlterNote       $03
000BA3A1 0101                       	dc.b	$01, $01
000BA3A3 E1FD                       	smpsAlterNote       $FD
000BA3A5 01                         	dc.b	$01
000BA3A6 ECF5                       	smpsPSGAlterVol     $F5
000BA3A8 9207                       	dc.b	nF1, $07
000BA3AA EC0B                       	smpsPSGAlterVol     $0B
000BA3AC 8004                       	dc.b	nRst, $04
000BA3AE ECF5                       	smpsPSGAlterVol     $F5
000BA3B0 9206                       	dc.b	nF1, $06
000BA3B2 EC04                       	smpsPSGAlterVol     $04
000BA3B4 E701                       	dc.b	smpsNoAttack, $01
000BA3B6 ECFC                       	smpsPSGAlterVol     $FC
000BA3B8 E1FC                       	smpsAlterNote       $FC
000BA3BA 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
000BA3BE EC04                       	smpsPSGAlterVol     $04
000BA3C0 E701                       	dc.b	smpsNoAttack, $01
000BA3C2 ECFC                       	smpsPSGAlterVol     $FC
000BA3C4 9003                       	dc.b	nEb1, $03
000BA3C6 E1FD                       	smpsAlterNote       $FD
000BA3C8 9403                       	dc.b	nG1, $03
000BA3CA EC04                       	smpsPSGAlterVol     $04
000BA3CC E701                       	dc.b	smpsNoAttack, $01
000BA3CE E1FE                       	smpsAlterNote       $FE
000BA3D0 ECFC                       	smpsPSGAlterVol     $FC
000BA3D2 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000BA3D6 EC04                       	smpsPSGAlterVol     $04
000BA3D8 E701                       	dc.b	smpsNoAttack, $01
000BA3DA EC07                       	smpsPSGAlterVol     $07
000BA3DC 8009                       	dc.b	nRst, $09
000BA3DE E100                       	smpsAlterNote       $00
000BA3E0 01                         	dc.b	$01
000BA3E1 F6F5 19                    	smpsJump            music84_Jump07
000BA3E4                            
000BA3E4                            ; PSG2 Data
000BA3E4                            music84_PSG2:
000BA3E4 E1FC                       	smpsAlterNote       $FC
000BA3E6 EC04                       	smpsPSGAlterVol     $04
000BA3E8 8F03                       	dc.b	nD1, $03
000BA3EA E1FD                       	smpsAlterNote       $FD
000BA3EC 9203                       	dc.b	nF1, $03
000BA3EE EC04                       	smpsPSGAlterVol     $04
000BA3F0 E701                       	dc.b	smpsNoAttack, $01
000BA3F2 E1FE                       	smpsAlterNote       $FE
000BA3F4 ECFC                       	smpsPSGAlterVol     $FC
000BA3F6 9603                       	dc.b	nA1, $03
000BA3F8 E1FD                       	smpsAlterNote       $FD
000BA3FA 9103                       	dc.b	nE1, $03
000BA3FC EC04                       	smpsPSGAlterVol     $04
000BA3FE E701                       	dc.b	smpsNoAttack, $01
000BA400 ECFC                       	smpsPSGAlterVol     $FC
000BA402 9403                       	dc.b	nG1, $03
000BA404 E1FE                       	smpsAlterNote       $FE
000BA406 9703                       	dc.b	nBb1, $03
000BA408 EC04                       	smpsPSGAlterVol     $04
000BA40A E701                       	dc.b	smpsNoAttack, $01
000BA40C E1FF                       	smpsAlterNote       $FF
000BA40E ECFC                       	smpsPSGAlterVol     $FC
000BA410 9B02                       	dc.b	nD2, $02
000BA412 EC04                       	smpsPSGAlterVol     $04
000BA414 E701                       	dc.b	smpsNoAttack, $01
000BA416 ECFC                       	smpsPSGAlterVol     $FC
000BA418 E1FE                       	smpsAlterNote       $FE
000BA41A 9A03                       	dc.b	nCs2, $03
000BA41C EC0B                       	smpsPSGAlterVol     $0B
000BA41E 800A                       	dc.b	nRst, $0A
000BA420 E102                       	smpsAlterNote       $02
000BA422 01                         	dc.b	$01
000BA423 E10A                       	smpsAlterNote       $0A
000BA425 01                         	dc.b	$01
000BA426 E102                       	smpsAlterNote       $02
000BA428 01                         	dc.b	$01
000BA429 E1FC                       	smpsAlterNote       $FC
000BA42B 01                         	dc.b	$01
000BA42C E10A                       	smpsAlterNote       $0A
000BA42E 01                         	dc.b	$01
000BA42F E1FC                       	smpsAlterNote       $FC
000BA431 01                         	dc.b	$01
000BA432 E108                       	smpsAlterNote       $08
000BA434 01                         	dc.b	$01
000BA435 E10A                       	smpsAlterNote       $0A
000BA437 01                         	dc.b	$01
000BA438 E102                       	smpsAlterNote       $02
000BA43A 01                         	dc.b	$01
000BA43B E1F7                       	smpsAlterNote       $F7
000BA43D 0101                       	dc.b	$01, $01
000BA43F E102                       	smpsAlterNote       $02
000BA441 01                         	dc.b	$01
000BA442 E108                       	smpsAlterNote       $08
000BA444 0101                       	dc.b	$01, $01
000BA446 E1FC                       	smpsAlterNote       $FC
000BA448 01                         	dc.b	$01
000BA449 E10A                       	smpsAlterNote       $0A
000BA44B 01                         	dc.b	$01
000BA44C E1F7                       	smpsAlterNote       $F7
000BA44E 01                         	dc.b	$01
000BA44F E102                       	smpsAlterNote       $02
000BA451 01                         	dc.b	$01
000BA452 E10A                       	smpsAlterNote       $0A
000BA454 01                         	dc.b	$01
000BA455 E102                       	smpsAlterNote       $02
000BA457 01                         	dc.b	$01
000BA458 E1FC                       	smpsAlterNote       $FC
000BA45A 01                         	dc.b	$01
000BA45B                            
000BA45B                            music84_Jump06:
000BA45B E10A                       	smpsAlterNote       $0A
000BA45D 8001                       	dc.b	nRst, $01
000BA45F E1FC                       	smpsAlterNote       $FC
000BA461 01                         	dc.b	$01
000BA462 E108                       	smpsAlterNote       $08
000BA464 01                         	dc.b	$01
000BA465 E10A                       	smpsAlterNote       $0A
000BA467 01                         	dc.b	$01
000BA468 E1FC                       	smpsAlterNote       $FC
000BA46A ECF5                       	smpsPSGAlterVol     $F5
000BA46C 8F06                       	dc.b	nD1, $06
000BA46E EC04                       	smpsPSGAlterVol     $04
000BA470 E701                       	dc.b	smpsNoAttack, $01
000BA472 EC07                       	smpsPSGAlterVol     $07
000BA474 8003                       	dc.b	nRst, $03
000BA476 ECF5                       	smpsPSGAlterVol     $F5
000BA478 8F06                       	dc.b	nD1, $06
000BA47A EC04                       	smpsPSGAlterVol     $04
000BA47C E701                       	dc.b	smpsNoAttack, $01
000BA47E EC07                       	smpsPSGAlterVol     $07
000BA480 8006                       	dc.b	nRst, $06
000BA482 E1FF                       	smpsAlterNote       $FF
000BA484 01                         	dc.b	$01
000BA485 E102                       	smpsAlterNote       $02
000BA487 01                         	dc.b	$01
000BA488 E1FF                       	smpsAlterNote       $FF
000BA48A 01                         	dc.b	$01
000BA48B E1F9                       	smpsAlterNote       $F9
000BA48D 01                         	dc.b	$01
000BA48E E1FC                       	smpsAlterNote       $FC
000BA490 ECF5                       	smpsPSGAlterVol     $F5
000BA492 9006                       	dc.b	nEb1, $06
000BA494 EC04                       	smpsPSGAlterVol     $04
000BA496 E701                       	dc.b	smpsNoAttack, $01
000BA498 EC07                       	smpsPSGAlterVol     $07
000BA49A 8003                       	dc.b	nRst, $03
000BA49C ECF5                       	smpsPSGAlterVol     $F5
000BA49E 9007                       	dc.b	nEb1, $07
000BA4A0 EC0B                       	smpsPSGAlterVol     $0B
000BA4A2 8006                       	dc.b	nRst, $06
000BA4A4 E1FF                       	smpsAlterNote       $FF
000BA4A6 01                         	dc.b	$01
000BA4A7 E103                       	smpsAlterNote       $03
000BA4A9 0101                       	dc.b	$01, $01
000BA4AB E1FC                       	smpsAlterNote       $FC
000BA4AD 01                         	dc.b	$01
000BA4AE ECF5                       	smpsPSGAlterVol     $F5
000BA4B0 8F07                       	dc.b	nD1, $07
000BA4B2 EC0B                       	smpsPSGAlterVol     $0B
000BA4B4 8004                       	dc.b	nRst, $04
000BA4B6 ECF5                       	smpsPSGAlterVol     $F5
000BA4B8 8F06                       	dc.b	nD1, $06
000BA4BA EC04                       	smpsPSGAlterVol     $04
000BA4BC E701                       	dc.b	smpsNoAttack, $01
000BA4BE EC07                       	smpsPSGAlterVol     $07
000BA4C0 8006                       	dc.b	nRst, $06
000BA4C2 E102                       	smpsAlterNote       $02
000BA4C4 01                         	dc.b	$01
000BA4C5 E103                       	smpsAlterNote       $03
000BA4C7 01                         	dc.b	$01
000BA4C8 E1FF                       	smpsAlterNote       $FF
000BA4CA 01                         	dc.b	$01
000BA4CB E1F9                       	smpsAlterNote       $F9
000BA4CD 01                         	dc.b	$01
000BA4CE E1FC                       	smpsAlterNote       $FC
000BA4D0 ECF5                       	smpsPSGAlterVol     $F5
000BA4D2 8F06                       	dc.b	nD1, $06
000BA4D4 EC04                       	smpsPSGAlterVol     $04
000BA4D6 E701                       	dc.b	smpsNoAttack, $01
000BA4D8 EC07                       	smpsPSGAlterVol     $07
000BA4DA 8003                       	dc.b	nRst, $03
000BA4DC ECF5                       	smpsPSGAlterVol     $F5
000BA4DE 8F06                       	dc.b	nD1, $06
000BA4E0 EC04                       	smpsPSGAlterVol     $04
000BA4E2 E701                       	dc.b	smpsNoAttack, $01
000BA4E4 EC07                       	smpsPSGAlterVol     $07
000BA4E6 8006                       	dc.b	nRst, $06
000BA4E8 E1FF                       	smpsAlterNote       $FF
000BA4EA 01                         	dc.b	$01
000BA4EB E103                       	smpsAlterNote       $03
000BA4ED 01                         	dc.b	$01
000BA4EE E1FF                       	smpsAlterNote       $FF
000BA4F0 01                         	dc.b	$01
000BA4F1 E1FC                       	smpsAlterNote       $FC
000BA4F3 01                         	dc.b	$01
000BA4F4 ECF5                       	smpsPSGAlterVol     $F5
000BA4F6 8F06                       	dc.b	nD1, $06
000BA4F8 EC04                       	smpsPSGAlterVol     $04
000BA4FA E701                       	dc.b	smpsNoAttack, $01
000BA4FC EC07                       	smpsPSGAlterVol     $07
000BA4FE 8003                       	dc.b	nRst, $03
000BA500 ECF5                       	smpsPSGAlterVol     $F5
000BA502 8F07                       	dc.b	nD1, $07
000BA504 EC0B                       	smpsPSGAlterVol     $0B
000BA506 8007                       	dc.b	nRst, $07
000BA508 E101                       	smpsAlterNote       $01
000BA50A 0101                       	dc.b	$01, $01
000BA50C E1FC                       	smpsAlterNote       $FC
000BA50E 01                         	dc.b	$01
000BA50F E1F9                       	smpsAlterNote       $F9
000BA511 01                         	dc.b	$01
000BA512 E1FC                       	smpsAlterNote       $FC
000BA514 ECF5                       	smpsPSGAlterVol     $F5
000BA516 9006                       	dc.b	nEb1, $06
000BA518 EC0B                       	smpsPSGAlterVol     $0B
000BA51A 8004                       	dc.b	nRst, $04
000BA51C ECF5                       	smpsPSGAlterVol     $F5
000BA51E 9006                       	dc.b	nEb1, $06
000BA520 EC04                       	smpsPSGAlterVol     $04
000BA522 E701                       	dc.b	smpsNoAttack, $01
000BA524 EC07                       	smpsPSGAlterVol     $07
000BA526 8006                       	dc.b	nRst, $06
000BA528 E100                       	smpsAlterNote       $00
000BA52A 01                         	dc.b	$01
000BA52B E102                       	smpsAlterNote       $02
000BA52D 01                         	dc.b	$01
000BA52E E100                       	smpsAlterNote       $00
000BA530 01                         	dc.b	$01
000BA531 E1FD                       	smpsAlterNote       $FD
000BA533 01                         	dc.b	$01
000BA534 E1FF                       	smpsAlterNote       $FF
000BA536 ECF5                       	smpsPSGAlterVol     $F5
000BA538 9B06                       	dc.b	nD2, $06
000BA53A EC04                       	smpsPSGAlterVol     $04
000BA53C E701                       	dc.b	smpsNoAttack, $01
000BA53E EC07                       	smpsPSGAlterVol     $07
000BA540 8003                       	dc.b	nRst, $03
000BA542 ECF5                       	smpsPSGAlterVol     $F5
000BA544 9B07                       	dc.b	nD2, $07
000BA546 EC0B                       	smpsPSGAlterVol     $0B
000BA548 8006                       	dc.b	nRst, $06
000BA54A E102                       	smpsAlterNote       $02
000BA54C 01                         	dc.b	$01
000BA54D E106                       	smpsAlterNote       $06
000BA54F 01                         	dc.b	$01
000BA550 E105                       	smpsAlterNote       $05
000BA552 01                         	dc.b	$01
000BA553 E1FF                       	smpsAlterNote       $FF
000BA555 01                         	dc.b	$01
000BA556 ECF5                       	smpsPSGAlterVol     $F5
000BA558 9B07                       	dc.b	nD2, $07
000BA55A EC0B                       	smpsPSGAlterVol     $0B
000BA55C 8004                       	dc.b	nRst, $04
000BA55E ECF5                       	smpsPSGAlterVol     $F5
000BA560 9B06                       	dc.b	nD2, $06
000BA562 EC0B                       	smpsPSGAlterVol     $0B
000BA564 8007                       	dc.b	nRst, $07
000BA566 E105                       	smpsAlterNote       $05
000BA568 0101                       	dc.b	$01, $01
000BA56A E102                       	smpsAlterNote       $02
000BA56C 01                         	dc.b	$01
000BA56D E1FC                       	smpsAlterNote       $FC
000BA56F 01                         	dc.b	$01
000BA570 E1FF                       	smpsAlterNote       $FF
000BA572 ECF5                       	smpsPSGAlterVol     $F5
000BA574 9B06                       	dc.b	nD2, $06
000BA576 EC04                       	smpsPSGAlterVol     $04
000BA578 E701                       	dc.b	smpsNoAttack, $01
000BA57A EC07                       	smpsPSGAlterVol     $07
000BA57C 8003                       	dc.b	nRst, $03
000BA57E ECF5                       	smpsPSGAlterVol     $F5
000BA580 9B06                       	dc.b	nD2, $06
000BA582 EC04                       	smpsPSGAlterVol     $04
000BA584 E701                       	dc.b	smpsNoAttack, $01
000BA586 EC07                       	smpsPSGAlterVol     $07
000BA588 8006                       	dc.b	nRst, $06
000BA58A E102                       	smpsAlterNote       $02
000BA58C 01                         	dc.b	$01
000BA58D E106                       	smpsAlterNote       $06
000BA58F 01                         	dc.b	$01
000BA590 E102                       	smpsAlterNote       $02
000BA592 01                         	dc.b	$01
000BA593 E1FF                       	smpsAlterNote       $FF
000BA595 01                         	dc.b	$01
000BA596 ECF5                       	smpsPSGAlterVol     $F5
000BA598 9B06                       	dc.b	nD2, $06
000BA59A EC04                       	smpsPSGAlterVol     $04
000BA59C E701                       	dc.b	smpsNoAttack, $01
000BA59E EC07                       	smpsPSGAlterVol     $07
000BA5A0 8003                       	dc.b	nRst, $03
000BA5A2 ECF5                       	smpsPSGAlterVol     $F5
000BA5A4 9B07                       	dc.b	nD2, $07
000BA5A6 EC0B                       	smpsPSGAlterVol     $0B
000BA5A8 8007                       	dc.b	nRst, $07
000BA5AA E105                       	smpsAlterNote       $05
000BA5AC 0101                       	dc.b	$01, $01
000BA5AE E1FF                       	smpsAlterNote       $FF
000BA5B0 01                         	dc.b	$01
000BA5B1 E1FC                       	smpsAlterNote       $FC
000BA5B3 01                         	dc.b	$01
000BA5B4 E1FF                       	smpsAlterNote       $FF
000BA5B6 ECF5                       	smpsPSGAlterVol     $F5
000BA5B8 9B06                       	dc.b	nD2, $06
000BA5BA EC0B                       	smpsPSGAlterVol     $0B
000BA5BC 8004                       	dc.b	nRst, $04
000BA5BE ECF5                       	smpsPSGAlterVol     $F5
000BA5C0 9B06                       	dc.b	nD2, $06
000BA5C2 EC04                       	smpsPSGAlterVol     $04
000BA5C4 E701                       	dc.b	smpsNoAttack, $01
000BA5C6 EC07                       	smpsPSGAlterVol     $07
000BA5C8 8006                       	dc.b	nRst, $06
000BA5CA E105                       	smpsAlterNote       $05
000BA5CC 01                         	dc.b	$01
000BA5CD E106                       	smpsAlterNote       $06
000BA5CF 01                         	dc.b	$01
000BA5D0 E102                       	smpsAlterNote       $02
000BA5D2 01                         	dc.b	$01
000BA5D3 E1FC                       	smpsAlterNote       $FC
000BA5D5 01                         	dc.b	$01
000BA5D6 E1FF                       	smpsAlterNote       $FF
000BA5D8 ECF5                       	smpsPSGAlterVol     $F5
000BA5DA 9B06                       	dc.b	nD2, $06
000BA5DC EC04                       	smpsPSGAlterVol     $04
000BA5DE E701                       	dc.b	smpsNoAttack, $01
000BA5E0 EC07                       	smpsPSGAlterVol     $07
000BA5E2 8003                       	dc.b	nRst, $03
000BA5E4 ECF5                       	smpsPSGAlterVol     $F5
000BA5E6 9B06                       	dc.b	nD2, $06
000BA5E8 EC04                       	smpsPSGAlterVol     $04
000BA5EA E701                       	dc.b	smpsNoAttack, $01
000BA5EC EC07                       	smpsPSGAlterVol     $07
000BA5EE 8006                       	dc.b	nRst, $06
000BA5F0 E102                       	smpsAlterNote       $02
000BA5F2 01                         	dc.b	$01
000BA5F3 E106                       	smpsAlterNote       $06
000BA5F5 01                         	dc.b	$01
000BA5F6 E105                       	smpsAlterNote       $05
000BA5F8 01                         	dc.b	$01
000BA5F9 E1FF                       	smpsAlterNote       $FF
000BA5FB 01                         	dc.b	$01
000BA5FC ECF5                       	smpsPSGAlterVol     $F5
000BA5FE 9B07                       	dc.b	nD2, $07
000BA600 EC0B                       	smpsPSGAlterVol     $0B
000BA602 8004                       	dc.b	nRst, $04
000BA604 ECF5                       	smpsPSGAlterVol     $F5
000BA606 9B06                       	dc.b	nD2, $06
000BA608 EC0B                       	smpsPSGAlterVol     $0B
000BA60A 8007                       	dc.b	nRst, $07
000BA60C E105                       	smpsAlterNote       $05
000BA60E 0101                       	dc.b	$01, $01
000BA610 E102                       	smpsAlterNote       $02
000BA612 01                         	dc.b	$01
000BA613 E1FC                       	smpsAlterNote       $FC
000BA615 01                         	dc.b	$01
000BA616 E1FF                       	smpsAlterNote       $FF
000BA618 ECF5                       	smpsPSGAlterVol     $F5
000BA61A 9B06                       	dc.b	nD2, $06
000BA61C EC04                       	smpsPSGAlterVol     $04
000BA61E E701                       	dc.b	smpsNoAttack, $01
000BA620 EC07                       	smpsPSGAlterVol     $07
000BA622 8003                       	dc.b	nRst, $03
000BA624 ECF5                       	smpsPSGAlterVol     $F5
000BA626 9B06                       	dc.b	nD2, $06
000BA628 EC04                       	smpsPSGAlterVol     $04
000BA62A E701                       	dc.b	smpsNoAttack, $01
000BA62C EC07                       	smpsPSGAlterVol     $07
000BA62E 8006                       	dc.b	nRst, $06
000BA630 E102                       	smpsAlterNote       $02
000BA632 01                         	dc.b	$01
000BA633 E106                       	smpsAlterNote       $06
000BA635 01                         	dc.b	$01
000BA636 E102                       	smpsAlterNote       $02
000BA638 01                         	dc.b	$01
000BA639 E1FF                       	smpsAlterNote       $FF
000BA63B 01                         	dc.b	$01
000BA63C ECF5                       	smpsPSGAlterVol     $F5
000BA63E 9B06                       	dc.b	nD2, $06
000BA640 EC04                       	smpsPSGAlterVol     $04
000BA642 E701                       	dc.b	smpsNoAttack, $01
000BA644 EC07                       	smpsPSGAlterVol     $07
000BA646 8003                       	dc.b	nRst, $03
000BA648 ECF5                       	smpsPSGAlterVol     $F5
000BA64A 9B07                       	dc.b	nD2, $07
000BA64C E1FE                       	smpsAlterNote       $FE
000BA64E 9706                       	dc.b	nBb1, $06
000BA650 EC04                       	smpsPSGAlterVol     $04
000BA652 E701                       	dc.b	smpsNoAttack, $01
000BA654 ECFC                       	smpsPSGAlterVol     $FC
000BA656 9703                       	dc.b	nBb1, $03
000BA658 EC04                       	smpsPSGAlterVol     $04
000BA65A E701                       	dc.b	smpsNoAttack, $01
000BA65C ECFC                       	smpsPSGAlterVol     $FC
000BA65E 9702                       	dc.b	nBb1, $02
000BA660 EC04                       	smpsPSGAlterVol     $04
000BA662 E701                       	dc.b	smpsNoAttack, $01
000BA664 ECFC                       	smpsPSGAlterVol     $FC
000BA666 9606                       	dc.b	nA1, $06
000BA668 EC04                       	smpsPSGAlterVol     $04
000BA66A E701                       	dc.b	smpsNoAttack, $01
000BA66C EC07                       	smpsPSGAlterVol     $07
000BA66E 8006                       	dc.b	nRst, $06
000BA670 E101                       	smpsAlterNote       $01
000BA672 01                         	dc.b	$01
000BA673 E107                       	smpsAlterNote       $07
000BA675 01                         	dc.b	$01
000BA676 E101                       	smpsAlterNote       $01
000BA678 01                         	dc.b	$01
000BA679 E1F8                       	smpsAlterNote       $F8
000BA67B 01                         	dc.b	$01
000BA67C E1F7                       	smpsAlterNote       $F7
000BA67E 01                         	dc.b	$01
000BA67F E1FC                       	smpsAlterNote       $FC
000BA681 01                         	dc.b	$01
000BA682 E106                       	smpsAlterNote       $06
000BA684 01                         	dc.b	$01
000BA685 E107                       	smpsAlterNote       $07
000BA687 01                         	dc.b	$01
000BA688 E101                       	smpsAlterNote       $01
000BA68A 01                         	dc.b	$01
000BA68B E1F8                       	smpsAlterNote       $F8
000BA68D 0101                       	dc.b	$01, $01
000BA68F E1FC                       	smpsAlterNote       $FC
000BA691 ECF5                       	smpsPSGAlterVol     $F5
000BA693 8F06                       	dc.b	nD1, $06
000BA695 EC04                       	smpsPSGAlterVol     $04
000BA697 E701                       	dc.b	smpsNoAttack, $01
000BA699 EC07                       	smpsPSGAlterVol     $07
000BA69B 8003                       	dc.b	nRst, $03
000BA69D ECF5                       	smpsPSGAlterVol     $F5
000BA69F 8F06                       	dc.b	nD1, $06
000BA6A1 EC04                       	smpsPSGAlterVol     $04
000BA6A3 E701                       	dc.b	smpsNoAttack, $01
000BA6A5 EC07                       	smpsPSGAlterVol     $07
000BA6A7 8006                       	dc.b	nRst, $06
000BA6A9 E1FF                       	smpsAlterNote       $FF
000BA6AB 01                         	dc.b	$01
000BA6AC E102                       	smpsAlterNote       $02
000BA6AE 01                         	dc.b	$01
000BA6AF E101                       	smpsAlterNote       $01
000BA6B1 01                         	dc.b	$01
000BA6B2 E1FC                       	smpsAlterNote       $FC
000BA6B4 01                         	dc.b	$01
000BA6B5 ECF5                       	smpsPSGAlterVol     $F5
000BA6B7 9007                       	dc.b	nEb1, $07
000BA6B9 EC0B                       	smpsPSGAlterVol     $0B
000BA6BB 8004                       	dc.b	nRst, $04
000BA6BD ECF5                       	smpsPSGAlterVol     $F5
000BA6BF 9006                       	dc.b	nEb1, $06
000BA6C1 EC0B                       	smpsPSGAlterVol     $0B
000BA6C3 8007                       	dc.b	nRst, $07
000BA6C5 E103                       	smpsAlterNote       $03
000BA6C7 0101                       	dc.b	$01, $01
000BA6C9 E1FC                       	smpsAlterNote       $FC
000BA6CB 01                         	dc.b	$01
000BA6CC E1F9                       	smpsAlterNote       $F9
000BA6CE 01                         	dc.b	$01
000BA6CF E1FC                       	smpsAlterNote       $FC
000BA6D1 ECF5                       	smpsPSGAlterVol     $F5
000BA6D3 8F06                       	dc.b	nD1, $06
000BA6D5 EC04                       	smpsPSGAlterVol     $04
000BA6D7 E701                       	dc.b	smpsNoAttack, $01
000BA6D9 EC07                       	smpsPSGAlterVol     $07
000BA6DB 8003                       	dc.b	nRst, $03
000BA6DD ECF5                       	smpsPSGAlterVol     $F5
000BA6DF 8F06                       	dc.b	nD1, $06
000BA6E1 EC04                       	smpsPSGAlterVol     $04
000BA6E3 E701                       	dc.b	smpsNoAttack, $01
000BA6E5 EC07                       	smpsPSGAlterVol     $07
000BA6E7 8006                       	dc.b	nRst, $06
000BA6E9 E1FF                       	smpsAlterNote       $FF
000BA6EB 01                         	dc.b	$01
000BA6EC E103                       	smpsAlterNote       $03
000BA6EE 01                         	dc.b	$01
000BA6EF E1FF                       	smpsAlterNote       $FF
000BA6F1 01                         	dc.b	$01
000BA6F2 E1F9                       	smpsAlterNote       $F9
000BA6F4 01                         	dc.b	$01
000BA6F5 E1FC                       	smpsAlterNote       $FC
000BA6F7 ECF5                       	smpsPSGAlterVol     $F5
000BA6F9 8F06                       	dc.b	nD1, $06
000BA6FB EC04                       	smpsPSGAlterVol     $04
000BA6FD E701                       	dc.b	smpsNoAttack, $01
000BA6FF EC07                       	smpsPSGAlterVol     $07
000BA701 8003                       	dc.b	nRst, $03
000BA703 ECF5                       	smpsPSGAlterVol     $F5
000BA705 8F07                       	dc.b	nD1, $07
000BA707 EC0B                       	smpsPSGAlterVol     $0B
000BA709 8006                       	dc.b	nRst, $06
000BA70B E1FF                       	smpsAlterNote       $FF
000BA70D 01                         	dc.b	$01
000BA70E E102                       	smpsAlterNote       $02
000BA710 0101                       	dc.b	$01, $01
000BA712 E1FC                       	smpsAlterNote       $FC
000BA714 01                         	dc.b	$01
000BA715 ECF5                       	smpsPSGAlterVol     $F5
000BA717 8F07                       	dc.b	nD1, $07
000BA719 EC0B                       	smpsPSGAlterVol     $0B
000BA71B 8004                       	dc.b	nRst, $04
000BA71D ECF5                       	smpsPSGAlterVol     $F5
000BA71F 8F06                       	dc.b	nD1, $06
000BA721 EC04                       	smpsPSGAlterVol     $04
000BA723 E701                       	dc.b	smpsNoAttack, $01
000BA725 EC07                       	smpsPSGAlterVol     $07
000BA727 8006                       	dc.b	nRst, $06
000BA729 E101                       	smpsAlterNote       $01
000BA72B 01                         	dc.b	$01
000BA72C E102                       	smpsAlterNote       $02
000BA72E 01                         	dc.b	$01
000BA72F E1FF                       	smpsAlterNote       $FF
000BA731 01                         	dc.b	$01
000BA732 E1F9                       	smpsAlterNote       $F9
000BA734 01                         	dc.b	$01
000BA735 E1FC                       	smpsAlterNote       $FC
000BA737 ECF5                       	smpsPSGAlterVol     $F5
000BA739 9006                       	dc.b	nEb1, $06
000BA73B EC04                       	smpsPSGAlterVol     $04
000BA73D E701                       	dc.b	smpsNoAttack, $01
000BA73F EC07                       	smpsPSGAlterVol     $07
000BA741 8003                       	dc.b	nRst, $03
000BA743 ECF5                       	smpsPSGAlterVol     $F5
000BA745 9006                       	dc.b	nEb1, $06
000BA747 EC04                       	smpsPSGAlterVol     $04
000BA749 E701                       	dc.b	smpsNoAttack, $01
000BA74B EC07                       	smpsPSGAlterVol     $07
000BA74D 8006                       	dc.b	nRst, $06
000BA74F E100                       	smpsAlterNote       $00
000BA751 01                         	dc.b	$01
000BA752 E102                       	smpsAlterNote       $02
000BA754 01                         	dc.b	$01
000BA755 E100                       	smpsAlterNote       $00
000BA757 01                         	dc.b	$01
000BA758 E1FF                       	smpsAlterNote       $FF
000BA75A 01                         	dc.b	$01
000BA75B ECF5                       	smpsPSGAlterVol     $F5
000BA75D 9B06                       	dc.b	nD2, $06
000BA75F EC04                       	smpsPSGAlterVol     $04
000BA761 E701                       	dc.b	smpsNoAttack, $01
000BA763 EC07                       	smpsPSGAlterVol     $07
000BA765 8003                       	dc.b	nRst, $03
000BA767 ECF5                       	smpsPSGAlterVol     $F5
000BA769 9B07                       	dc.b	nD2, $07
000BA76B EC0B                       	smpsPSGAlterVol     $0B
000BA76D 8007                       	dc.b	nRst, $07
000BA76F E105                       	smpsAlterNote       $05
000BA771 0101                       	dc.b	$01, $01
000BA773 E1FF                       	smpsAlterNote       $FF
000BA775 01                         	dc.b	$01
000BA776 E1FC                       	smpsAlterNote       $FC
000BA778 01                         	dc.b	$01
000BA779 E1FF                       	smpsAlterNote       $FF
000BA77B ECF5                       	smpsPSGAlterVol     $F5
000BA77D 9B06                       	dc.b	nD2, $06
000BA77F EC0B                       	smpsPSGAlterVol     $0B
000BA781 8004                       	dc.b	nRst, $04
000BA783 ECF5                       	smpsPSGAlterVol     $F5
000BA785 9B06                       	dc.b	nD2, $06
000BA787 EC04                       	smpsPSGAlterVol     $04
000BA789 E701                       	dc.b	smpsNoAttack, $01
000BA78B EC07                       	smpsPSGAlterVol     $07
000BA78D 8006                       	dc.b	nRst, $06
000BA78F E102                       	smpsAlterNote       $02
000BA791 01                         	dc.b	$01
000BA792 E106                       	smpsAlterNote       $06
000BA794 01                         	dc.b	$01
000BA795 E102                       	smpsAlterNote       $02
000BA797 01                         	dc.b	$01
000BA798 E1FC                       	smpsAlterNote       $FC
000BA79A 01                         	dc.b	$01
000BA79B E1FF                       	smpsAlterNote       $FF
000BA79D ECF5                       	smpsPSGAlterVol     $F5
000BA79F 9B06                       	dc.b	nD2, $06
000BA7A1 EC04                       	smpsPSGAlterVol     $04
000BA7A3 E701                       	dc.b	smpsNoAttack, $01
000BA7A5 EC07                       	smpsPSGAlterVol     $07
000BA7A7 8003                       	dc.b	nRst, $03
000BA7A9 ECF5                       	smpsPSGAlterVol     $F5
000BA7AB 9B07                       	dc.b	nD2, $07
000BA7AD EC0B                       	smpsPSGAlterVol     $0B
000BA7AF 8006                       	dc.b	nRst, $06
000BA7B1 E102                       	smpsAlterNote       $02
000BA7B3 01                         	dc.b	$01
000BA7B4 E105                       	smpsAlterNote       $05
000BA7B6 0101                       	dc.b	$01, $01
000BA7B8 E1FF                       	smpsAlterNote       $FF
000BA7BA 01                         	dc.b	$01
000BA7BB ECF5                       	smpsPSGAlterVol     $F5
000BA7BD 9B07                       	dc.b	nD2, $07
000BA7BF EC0B                       	smpsPSGAlterVol     $0B
000BA7C1 8004                       	dc.b	nRst, $04
000BA7C3 ECF5                       	smpsPSGAlterVol     $F5
000BA7C5 9B06                       	dc.b	nD2, $06
000BA7C7 EC0B                       	smpsPSGAlterVol     $0B
000BA7C9 8007                       	dc.b	nRst, $07
000BA7CB E105                       	smpsAlterNote       $05
000BA7CD 0101                       	dc.b	$01, $01
000BA7CF E102                       	smpsAlterNote       $02
000BA7D1 01                         	dc.b	$01
000BA7D2 E1FC                       	smpsAlterNote       $FC
000BA7D4 01                         	dc.b	$01
000BA7D5 E1FF                       	smpsAlterNote       $FF
000BA7D7 ECF5                       	smpsPSGAlterVol     $F5
000BA7D9 9B06                       	dc.b	nD2, $06
000BA7DB EC04                       	smpsPSGAlterVol     $04
000BA7DD E701                       	dc.b	smpsNoAttack, $01
000BA7DF EC07                       	smpsPSGAlterVol     $07
000BA7E1 8003                       	dc.b	nRst, $03
000BA7E3 ECF5                       	smpsPSGAlterVol     $F5
000BA7E5 9B06                       	dc.b	nD2, $06
000BA7E7 EC04                       	smpsPSGAlterVol     $04
000BA7E9 E701                       	dc.b	smpsNoAttack, $01
000BA7EB EC07                       	smpsPSGAlterVol     $07
000BA7ED 8006                       	dc.b	nRst, $06
000BA7EF E102                       	smpsAlterNote       $02
000BA7F1 01                         	dc.b	$01
000BA7F2 E106                       	smpsAlterNote       $06
000BA7F4 01                         	dc.b	$01
000BA7F5 E102                       	smpsAlterNote       $02
000BA7F7 01                         	dc.b	$01
000BA7F8 E1FF                       	smpsAlterNote       $FF
000BA7FA 01                         	dc.b	$01
000BA7FB ECF5                       	smpsPSGAlterVol     $F5
000BA7FD 9B06                       	dc.b	nD2, $06
000BA7FF EC04                       	smpsPSGAlterVol     $04
000BA801 E701                       	dc.b	smpsNoAttack, $01
000BA803 EC07                       	smpsPSGAlterVol     $07
000BA805 8003                       	dc.b	nRst, $03
000BA807 ECF5                       	smpsPSGAlterVol     $F5
000BA809 9B07                       	dc.b	nD2, $07
000BA80B EC0B                       	smpsPSGAlterVol     $0B
000BA80D 8007                       	dc.b	nRst, $07
000BA80F E105                       	smpsAlterNote       $05
000BA811 0101                       	dc.b	$01, $01
000BA813 E1FF                       	smpsAlterNote       $FF
000BA815 01                         	dc.b	$01
000BA816 E1FC                       	smpsAlterNote       $FC
000BA818 01                         	dc.b	$01
000BA819 E1FF                       	smpsAlterNote       $FF
000BA81B ECF5                       	smpsPSGAlterVol     $F5
000BA81D 9B06                       	dc.b	nD2, $06
000BA81F EC0B                       	smpsPSGAlterVol     $0B
000BA821 8004                       	dc.b	nRst, $04
000BA823 ECF5                       	smpsPSGAlterVol     $F5
000BA825 9B06                       	dc.b	nD2, $06
000BA827 EC04                       	smpsPSGAlterVol     $04
000BA829 E701                       	dc.b	smpsNoAttack, $01
000BA82B EC07                       	smpsPSGAlterVol     $07
000BA82D 8006                       	dc.b	nRst, $06
000BA82F E102                       	smpsAlterNote       $02
000BA831 01                         	dc.b	$01
000BA832 E106                       	smpsAlterNote       $06
000BA834 01                         	dc.b	$01
000BA835 E102                       	smpsAlterNote       $02
000BA837 01                         	dc.b	$01
000BA838 E1FC                       	smpsAlterNote       $FC
000BA83A 01                         	dc.b	$01
000BA83B E1FF                       	smpsAlterNote       $FF
000BA83D ECF5                       	smpsPSGAlterVol     $F5
000BA83F 9B06                       	dc.b	nD2, $06
000BA841 EC04                       	smpsPSGAlterVol     $04
000BA843 E701                       	dc.b	smpsNoAttack, $01
000BA845 EC07                       	smpsPSGAlterVol     $07
000BA847 8003                       	dc.b	nRst, $03
000BA849 ECF5                       	smpsPSGAlterVol     $F5
000BA84B 9B06                       	dc.b	nD2, $06
000BA84D EC04                       	smpsPSGAlterVol     $04
000BA84F E701                       	dc.b	smpsNoAttack, $01
000BA851 EC07                       	smpsPSGAlterVol     $07
000BA853 8006                       	dc.b	nRst, $06
000BA855 E102                       	smpsAlterNote       $02
000BA857 01                         	dc.b	$01
000BA858 E106                       	smpsAlterNote       $06
000BA85A 01                         	dc.b	$01
000BA85B E105                       	smpsAlterNote       $05
000BA85D 01                         	dc.b	$01
000BA85E E1FF                       	smpsAlterNote       $FF
000BA860 01                         	dc.b	$01
000BA861 ECF5                       	smpsPSGAlterVol     $F5
000BA863 9B07                       	dc.b	nD2, $07
000BA865 EC0B                       	smpsPSGAlterVol     $0B
000BA867 8004                       	dc.b	nRst, $04
000BA869 ECF5                       	smpsPSGAlterVol     $F5
000BA86B 9B06                       	dc.b	nD2, $06
000BA86D EC0B                       	smpsPSGAlterVol     $0B
000BA86F 8007                       	dc.b	nRst, $07
000BA871 E105                       	smpsAlterNote       $05
000BA873 0101                       	dc.b	$01, $01
000BA875 E101                       	smpsAlterNote       $01
000BA877 01                         	dc.b	$01
000BA878 E1FB                       	smpsAlterNote       $FB
000BA87A 01                         	dc.b	$01
000BA87B E1FE                       	smpsAlterNote       $FE
000BA87D ECF5                       	smpsPSGAlterVol     $F5
000BA87F 9A06                       	dc.b	nCs2, $06
000BA881 EC04                       	smpsPSGAlterVol     $04
000BA883 E701                       	dc.b	smpsNoAttack, $01
000BA885 EC07                       	smpsPSGAlterVol     $07
000BA887 8003                       	dc.b	nRst, $03
000BA889 ECF5                       	smpsPSGAlterVol     $F5
000BA88B 9A06                       	dc.b	nCs2, $06
000BA88D EC04                       	smpsPSGAlterVol     $04
000BA88F E701                       	dc.b	smpsNoAttack, $01
000BA891 EC07                       	smpsPSGAlterVol     $07
000BA893 8003                       	dc.b	nRst, $03
000BA895 E1FC                       	smpsAlterNote       $FC
000BA897 ECF5                       	smpsPSGAlterVol     $F5
000BA899 8F07                       	dc.b	nD1, $07
000BA89B EC0B                       	smpsPSGAlterVol     $0B
000BA89D 8006                       	dc.b	nRst, $06
000BA89F E1FF                       	smpsAlterNote       $FF
000BA8A1 01                         	dc.b	$01
000BA8A2 E103                       	smpsAlterNote       $03
000BA8A4 01                         	dc.b	$01
000BA8A5 E102                       	smpsAlterNote       $02
000BA8A7 01                         	dc.b	$01
000BA8A8 E1FC                       	smpsAlterNote       $FC
000BA8AA 01                         	dc.b	$01
000BA8AB E1F8                       	smpsAlterNote       $F8
000BA8AD 01                         	dc.b	$01
000BA8AE E1FC                       	smpsAlterNote       $FC
000BA8B0 01                         	dc.b	$01
000BA8B1 E1FF                       	smpsAlterNote       $FF
000BA8B3 01                         	dc.b	$01
000BA8B4 E103                       	smpsAlterNote       $03
000BA8B6 01                         	dc.b	$01
000BA8B7 E1FC                       	smpsAlterNote       $FC
000BA8B9 ECF5                       	smpsPSGAlterVol     $F5
000BA8BB 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000BA8BF EC04                       	smpsPSGAlterVol     $04
000BA8C1 E701                       	dc.b	smpsNoAttack, $01
000BA8C3 EC07                       	smpsPSGAlterVol     $07
000BA8C5 8009                       	dc.b	nRst, $09
000BA8C7 E1FF                       	smpsAlterNote       $FF
000BA8C9 01                         	dc.b	$01
000BA8CA E103                       	smpsAlterNote       $03
000BA8CC 01                         	dc.b	$01
000BA8CD E102                       	smpsAlterNote       $02
000BA8CF 01                         	dc.b	$01
000BA8D0 E1FC                       	smpsAlterNote       $FC
000BA8D2 01                         	dc.b	$01
000BA8D3 E1F8                       	smpsAlterNote       $F8
000BA8D5 01                         	dc.b	$01
000BA8D6 E1FC                       	smpsAlterNote       $FC
000BA8D8 01                         	dc.b	$01
000BA8D9 E1FF                       	smpsAlterNote       $FF
000BA8DB 01                         	dc.b	$01
000BA8DC E103                       	smpsAlterNote       $03
000BA8DE 01                         	dc.b	$01
000BA8DF E1FF                       	smpsAlterNote       $FF
000BA8E1 01                         	dc.b	$01
000BA8E2 E1F9                       	smpsAlterNote       $F9
000BA8E4 01                         	dc.b	$01
000BA8E5 E1F8                       	smpsAlterNote       $F8
000BA8E7 01                         	dc.b	$01
000BA8E8 E1FC                       	smpsAlterNote       $FC
000BA8EA 01                         	dc.b	$01
000BA8EB E102                       	smpsAlterNote       $02
000BA8ED 0101                       	dc.b	$01, $01
000BA8EF E1FF                       	smpsAlterNote       $FF
000BA8F1 01                         	dc.b	$01
000BA8F2 E1FC                       	smpsAlterNote       $FC
000BA8F4 ECF5                       	smpsPSGAlterVol     $F5
000BA8F6 8F02                       	dc.b	nD1, $02
000BA8F8 EC04                       	smpsPSGAlterVol     $04
000BA8FA E701                       	dc.b	smpsNoAttack, $01
000BA8FC ECFC                       	smpsPSGAlterVol     $FC
000BA8FE E1FB                       	smpsAlterNote       $FB
000BA900 8D06                       	dc.b	nC1, $06
000BA902 EC04                       	smpsPSGAlterVol     $04
000BA904 E701                       	dc.b	smpsNoAttack, $01
000BA906 EC07                       	smpsPSGAlterVol     $07
000BA908 8006                       	dc.b	nRst, $06
000BA90A E1FE                       	smpsAlterNote       $FE
000BA90C 01                         	dc.b	$01
000BA90D E102                       	smpsAlterNote       $02
000BA90F 01                         	dc.b	$01
000BA910 E1FE                       	smpsAlterNote       $FE
000BA912 01                         	dc.b	$01
000BA913 E1FB                       	smpsAlterNote       $FB
000BA915 01                         	dc.b	$01
000BA916 E1F7                       	smpsAlterNote       $F7
000BA918 01                         	dc.b	$01
000BA919 E1FB                       	smpsAlterNote       $FB
000BA91B 01                         	dc.b	$01
000BA91C E101                       	smpsAlterNote       $01
000BA91E 01                         	dc.b	$01
000BA91F E102                       	smpsAlterNote       $02
000BA921 01                         	dc.b	$01
000BA922 E1FB                       	smpsAlterNote       $FB
000BA924 ECF5                       	smpsPSGAlterVol     $F5
000BA926 8D02                       	dc.b	nC1, $02
000BA928 EC04                       	smpsPSGAlterVol     $04
000BA92A E701                       	dc.b	smpsNoAttack, $01
000BA92C E1FC                       	smpsAlterNote       $FC
000BA92E ECFC                       	smpsPSGAlterVol     $FC
000BA930 8F0D                       	dc.b	nD1, $0D
000BA932 E1FF                       	smpsAlterNote       $FF
000BA934 E701                       	dc.b	smpsNoAttack, $01
000BA936 E103                       	smpsAlterNote       $03
000BA938 E701                       	dc.b	smpsNoAttack, $01
000BA93A E1FF                       	smpsAlterNote       $FF
000BA93C E701                       	dc.b	smpsNoAttack, $01
000BA93E E1FC                       	smpsAlterNote       $FC
000BA940 E701                       	dc.b	smpsNoAttack, $01
000BA942 E1F8                       	smpsAlterNote       $F8
000BA944 E701                       	dc.b	smpsNoAttack, $01
000BA946 E1FC                       	smpsAlterNote       $FC
000BA948 E701                       	dc.b	smpsNoAttack, $01
000BA94A E102                       	smpsAlterNote       $02
000BA94C E701                       	dc.b	smpsNoAttack, $01
000BA94E E103                       	smpsAlterNote       $03
000BA950 E701                       	dc.b	smpsNoAttack, $01
000BA952 E1FF                       	smpsAlterNote       $FF
000BA954 E701                       	dc.b	smpsNoAttack, $01
000BA956 E1F9                       	smpsAlterNote       $F9
000BA958 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000BA95C E1FC                       	smpsAlterNote       $FC
000BA95E E701                       	dc.b	smpsNoAttack, $01
000BA960 E102                       	smpsAlterNote       $02
000BA962 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000BA966 E1FC                       	smpsAlterNote       $FC
000BA968 E701                       	dc.b	smpsNoAttack, $01
000BA96A E1F9                       	smpsAlterNote       $F9
000BA96C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000BA970 E1FF                       	smpsAlterNote       $FF
000BA972 EC04                       	smpsPSGAlterVol     $04
000BA974 E701                       	dc.b	smpsNoAttack, $01
000BA976 EC07                       	smpsPSGAlterVol     $07
000BA978 E103                       	smpsAlterNote       $03
000BA97A 8001                       	dc.b	nRst, $01
000BA97C E102                       	smpsAlterNote       $02
000BA97E 01                         	dc.b	$01
000BA97F E1FB                       	smpsAlterNote       $FB
000BA981 01                         	dc.b	$01
000BA982 E1F7                       	smpsAlterNote       $F7
000BA984 01                         	dc.b	$01
000BA985 E1FB                       	smpsAlterNote       $FB
000BA987 01                         	dc.b	$01
000BA988 E102                       	smpsAlterNote       $02
000BA98A 01                         	dc.b	$01
000BA98B E103                       	smpsAlterNote       $03
000BA98D 01                         	dc.b	$01
000BA98E E1FB                       	smpsAlterNote       $FB
000BA990 ECF5                       	smpsPSGAlterVol     $F5
000BA992 8E06                       	dc.b	nCs1, $06
000BA994 EC04                       	smpsPSGAlterVol     $04
000BA996 E701                       	dc.b	smpsNoAttack, $01
000BA998 EC07                       	smpsPSGAlterVol     $07
000BA99A 8003                       	dc.b	nRst, $03
000BA99C ECF5                       	smpsPSGAlterVol     $F5
000BA99E 8E06                       	dc.b	nCs1, $06
000BA9A0 EC04                       	smpsPSGAlterVol     $04
000BA9A2 E701                       	dc.b	smpsNoAttack, $01
000BA9A4 EC07                       	smpsPSGAlterVol     $07
000BA9A6 8006                       	dc.b	nRst, $06
000BA9A8 E1FE                       	smpsAlterNote       $FE
000BA9AA 01                         	dc.b	$01
000BA9AB E102                       	smpsAlterNote       $02
000BA9AD 01                         	dc.b	$01
000BA9AE E1FE                       	smpsAlterNote       $FE
000BA9B0 01                         	dc.b	$01
000BA9B1 E1F9                       	smpsAlterNote       $F9
000BA9B3 01                         	dc.b	$01
000BA9B4 E1FC                       	smpsAlterNote       $FC
000BA9B6 ECF5                       	smpsPSGAlterVol     $F5
000BA9B8 8F06                       	dc.b	nD1, $06
000BA9BA EC04                       	smpsPSGAlterVol     $04
000BA9BC E701                       	dc.b	smpsNoAttack, $01
000BA9BE EC07                       	smpsPSGAlterVol     $07
000BA9C0 8003                       	dc.b	nRst, $03
000BA9C2 ECF5                       	smpsPSGAlterVol     $F5
000BA9C4 8F07                       	dc.b	nD1, $07
000BA9C6 EC0B                       	smpsPSGAlterVol     $0B
000BA9C8 8006                       	dc.b	nRst, $06
000BA9CA E1FF                       	smpsAlterNote       $FF
000BA9CC 01                         	dc.b	$01
000BA9CD E102                       	smpsAlterNote       $02
000BA9CF 0101                       	dc.b	$01, $01
000BA9D1 E1FB                       	smpsAlterNote       $FB
000BA9D3 01                         	dc.b	$01
000BA9D4 ECF5                       	smpsPSGAlterVol     $F5
000BA9D6 8E07                       	dc.b	nCs1, $07
000BA9D8 EC0B                       	smpsPSGAlterVol     $0B
000BA9DA 8004                       	dc.b	nRst, $04
000BA9DC ECF5                       	smpsPSGAlterVol     $F5
000BA9DE 8E06                       	dc.b	nCs1, $06
000BA9E0 EC04                       	smpsPSGAlterVol     $04
000BA9E2 E701                       	dc.b	smpsNoAttack, $01
000BA9E4 EC07                       	smpsPSGAlterVol     $07
000BA9E6 8006                       	dc.b	nRst, $06
000BA9E8 E101                       	smpsAlterNote       $01
000BA9EA 01                         	dc.b	$01
000BA9EB E102                       	smpsAlterNote       $02
000BA9ED 01                         	dc.b	$01
000BA9EE E1FE                       	smpsAlterNote       $FE
000BA9F0 01                         	dc.b	$01
000BA9F1 E1F8                       	smpsAlterNote       $F8
000BA9F3 01                         	dc.b	$01
000BA9F4 E1FB                       	smpsAlterNote       $FB
000BA9F6 ECF5                       	smpsPSGAlterVol     $F5
000BA9F8 8E06                       	dc.b	nCs1, $06
000BA9FA EC04                       	smpsPSGAlterVol     $04
000BA9FC E701                       	dc.b	smpsNoAttack, $01
000BA9FE EC07                       	smpsPSGAlterVol     $07
000BAA00 8003                       	dc.b	nRst, $03
000BAA02 ECF5                       	smpsPSGAlterVol     $F5
000BAA04 8E06                       	dc.b	nCs1, $06
000BAA06 EC04                       	smpsPSGAlterVol     $04
000BAA08 E701                       	dc.b	smpsNoAttack, $01
000BAA0A EC07                       	smpsPSGAlterVol     $07
000BAA0C 8004                       	dc.b	nRst, $04
000BAA0E E1FC                       	smpsAlterNote       $FC
000BAA10 ECF5                       	smpsPSGAlterVol     $F5
000BAA12 8F06                       	dc.b	nD1, $06
000BAA14 EC0B                       	smpsPSGAlterVol     $0B
000BAA16 8006                       	dc.b	nRst, $06
000BAA18 E1FF                       	smpsAlterNote       $FF
000BAA1A 01                         	dc.b	$01
000BAA1B E102                       	smpsAlterNote       $02
000BAA1D 0101                       	dc.b	$01, $01
000BAA1F E1FC                       	smpsAlterNote       $FC
000BAA21 01                         	dc.b	$01
000BAA22 E1F8                       	smpsAlterNote       $F8
000BAA24 01                         	dc.b	$01
000BAA25 E1F9                       	smpsAlterNote       $F9
000BAA27 01                         	dc.b	$01
000BAA28 E1FF                       	smpsAlterNote       $FF
000BAA2A 01                         	dc.b	$01
000BAA2B E103                       	smpsAlterNote       $03
000BAA2D 01                         	dc.b	$01
000BAA2E E1FC                       	smpsAlterNote       $FC
000BAA30 ECF5                       	smpsPSGAlterVol     $F5
000BAA32 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000BAA36 EC04                       	smpsPSGAlterVol     $04
000BAA38 E701                       	dc.b	smpsNoAttack, $01
000BAA3A EC07                       	smpsPSGAlterVol     $07
000BAA3C 8009                       	dc.b	nRst, $09
000BAA3E E1FF                       	smpsAlterNote       $FF
000BAA40 01                         	dc.b	$01
000BAA41 E102                       	smpsAlterNote       $02
000BAA43 0101                       	dc.b	$01, $01
000BAA45 E1FC                       	smpsAlterNote       $FC
000BAA47 01                         	dc.b	$01
000BAA48 E1F8                       	smpsAlterNote       $F8
000BAA4A 01                         	dc.b	$01
000BAA4B E1F9                       	smpsAlterNote       $F9
000BAA4D 01                         	dc.b	$01
000BAA4E E1FF                       	smpsAlterNote       $FF
000BAA50 01                         	dc.b	$01
000BAA51 E103                       	smpsAlterNote       $03
000BAA53 01                         	dc.b	$01
000BAA54 E1FF                       	smpsAlterNote       $FF
000BAA56 01                         	dc.b	$01
000BAA57 E1FC                       	smpsAlterNote       $FC
000BAA59 01                         	dc.b	$01
000BAA5A E1F8                       	smpsAlterNote       $F8
000BAA5C 01                         	dc.b	$01
000BAA5D E1FC                       	smpsAlterNote       $FC
000BAA5F 01                         	dc.b	$01
000BAA60 E102                       	smpsAlterNote       $02
000BAA62 01                         	dc.b	$01
000BAA63 E103                       	smpsAlterNote       $03
000BAA65 01                         	dc.b	$01
000BAA66 E1FF                       	smpsAlterNote       $FF
000BAA68 01                         	dc.b	$01
000BAA69 E1FC                       	smpsAlterNote       $FC
000BAA6B ECF5                       	smpsPSGAlterVol     $F5
000BAA6D 8F03                       	dc.b	nD1, $03
000BAA6F E1FB                       	smpsAlterNote       $FB
000BAA71 8D06                       	dc.b	nC1, $06
000BAA73 EC04                       	smpsPSGAlterVol     $04
000BAA75 E701                       	dc.b	smpsNoAttack, $01
000BAA77 EC07                       	smpsPSGAlterVol     $07
000BAA79 8006                       	dc.b	nRst, $06
000BAA7B E1FE                       	smpsAlterNote       $FE
000BAA7D 01                         	dc.b	$01
000BAA7E E102                       	smpsAlterNote       $02
000BAA80 01                         	dc.b	$01
000BAA81 E101                       	smpsAlterNote       $01
000BAA83 01                         	dc.b	$01
000BAA84 E1FB                       	smpsAlterNote       $FB
000BAA86 01                         	dc.b	$01
000BAA87 E1F7                       	smpsAlterNote       $F7
000BAA89 01                         	dc.b	$01
000BAA8A E1FB                       	smpsAlterNote       $FB
000BAA8C 01                         	dc.b	$01
000BAA8D E1FE                       	smpsAlterNote       $FE
000BAA8F 01                         	dc.b	$01
000BAA90 E102                       	smpsAlterNote       $02
000BAA92 01                         	dc.b	$01
000BAA93 E1FB                       	smpsAlterNote       $FB
000BAA95 ECF5                       	smpsPSGAlterVol     $F5
000BAA97 8D03                       	dc.b	nC1, $03
000BAA99 E1FC                       	smpsAlterNote       $FC
000BAA9B 8F0D                       	dc.b	nD1, $0D
000BAA9D E1FF                       	smpsAlterNote       $FF
000BAA9F E701                       	dc.b	smpsNoAttack, $01
000BAAA1 E103                       	smpsAlterNote       $03
000BAAA3 E701                       	dc.b	smpsNoAttack, $01
000BAAA5 E1FF                       	smpsAlterNote       $FF
000BAAA7 E701                       	dc.b	smpsNoAttack, $01
000BAAA9 E1FC                       	smpsAlterNote       $FC
000BAAAB E701                       	dc.b	smpsNoAttack, $01
000BAAAD E1F8                       	smpsAlterNote       $F8
000BAAAF E701                       	dc.b	smpsNoAttack, $01
000BAAB1 E1FC                       	smpsAlterNote       $FC
000BAAB3 E701                       	dc.b	smpsNoAttack, $01
000BAAB5 E102                       	smpsAlterNote       $02
000BAAB7 E701                       	dc.b	smpsNoAttack, $01
000BAAB9 E103                       	smpsAlterNote       $03
000BAABB E701                       	dc.b	smpsNoAttack, $01
000BAABD E1FF                       	smpsAlterNote       $FF
000BAABF E701                       	dc.b	smpsNoAttack, $01
000BAAC1 E1F9                       	smpsAlterNote       $F9
000BAAC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000BAAC7 E1FC                       	smpsAlterNote       $FC
000BAAC9 E701                       	dc.b	smpsNoAttack, $01
000BAACB E102                       	smpsAlterNote       $02
000BAACD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000BAAD1 E1FF                       	smpsAlterNote       $FF
000BAAD3 E701                       	dc.b	smpsNoAttack, $01
000BAAD5 E1F9                       	smpsAlterNote       $F9
000BAAD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000BAADB E1FF                       	smpsAlterNote       $FF
000BAADD EC04                       	smpsPSGAlterVol     $04
000BAADF E701                       	dc.b	smpsNoAttack, $01
000BAAE1 EC07                       	smpsPSGAlterVol     $07
000BAAE3 E103                       	smpsAlterNote       $03
000BAAE5 8001                       	dc.b	nRst, $01
000BAAE7 E102                       	smpsAlterNote       $02
000BAAE9 01                         	dc.b	$01
000BAAEA E1FB                       	smpsAlterNote       $FB
000BAAEC 01                         	dc.b	$01
000BAAED E1F7                       	smpsAlterNote       $F7
000BAAEF 01                         	dc.b	$01
000BAAF0 E1FB                       	smpsAlterNote       $FB
000BAAF2 01                         	dc.b	$01
000BAAF3 E1FF                       	smpsAlterNote       $FF
000BAAF5 01                         	dc.b	$01
000BAAF6 E103                       	smpsAlterNote       $03
000BAAF8 01                         	dc.b	$01
000BAAF9 E1FB                       	smpsAlterNote       $FB
000BAAFB ECF5                       	smpsPSGAlterVol     $F5
000BAAFD 8E06                       	dc.b	nCs1, $06
000BAAFF EC04                       	smpsPSGAlterVol     $04
000BAB01 E701                       	dc.b	smpsNoAttack, $01
000BAB03 EC07                       	smpsPSGAlterVol     $07
000BAB05 8003                       	dc.b	nRst, $03
000BAB07 ECF5                       	smpsPSGAlterVol     $F5
000BAB09 8E06                       	dc.b	nCs1, $06
000BAB0B EC04                       	smpsPSGAlterVol     $04
000BAB0D E701                       	dc.b	smpsNoAttack, $01
000BAB0F EC07                       	smpsPSGAlterVol     $07
000BAB11 8006                       	dc.b	nRst, $06
000BAB13 E1FE                       	smpsAlterNote       $FE
000BAB15 01                         	dc.b	$01
000BAB16 E102                       	smpsAlterNote       $02
000BAB18 01                         	dc.b	$01
000BAB19 E1FE                       	smpsAlterNote       $FE
000BAB1B 01                         	dc.b	$01
000BAB1C E1FC                       	smpsAlterNote       $FC
000BAB1E 01                         	dc.b	$01
000BAB1F ECF5                       	smpsPSGAlterVol     $F5
000BAB21 8F06                       	dc.b	nD1, $06
000BAB23 EC04                       	smpsPSGAlterVol     $04
000BAB25 E701                       	dc.b	smpsNoAttack, $01
000BAB27 EC07                       	smpsPSGAlterVol     $07
000BAB29 8003                       	dc.b	nRst, $03
000BAB2B ECF5                       	smpsPSGAlterVol     $F5
000BAB2D 8F07                       	dc.b	nD1, $07
000BAB2F EC0B                       	smpsPSGAlterVol     $0B
000BAB31 8007                       	dc.b	nRst, $07
000BAB33 E102                       	smpsAlterNote       $02
000BAB35 0101                       	dc.b	$01, $01
000BAB37 E1FB                       	smpsAlterNote       $FB
000BAB39 01                         	dc.b	$01
000BAB3A E1F8                       	smpsAlterNote       $F8
000BAB3C 01                         	dc.b	$01
000BAB3D E1FB                       	smpsAlterNote       $FB
000BAB3F ECF5                       	smpsPSGAlterVol     $F5
000BAB41 8E06                       	dc.b	nCs1, $06
000BAB43 EC0B                       	smpsPSGAlterVol     $0B
000BAB45 8004                       	dc.b	nRst, $04
000BAB47 ECF5                       	smpsPSGAlterVol     $F5
000BAB49 8E06                       	dc.b	nCs1, $06
000BAB4B EC04                       	smpsPSGAlterVol     $04
000BAB4D E701                       	dc.b	smpsNoAttack, $01
000BAB4F EC07                       	smpsPSGAlterVol     $07
000BAB51 8006                       	dc.b	nRst, $06
000BAB53 E1FE                       	smpsAlterNote       $FE
000BAB55 01                         	dc.b	$01
000BAB56 E102                       	smpsAlterNote       $02
000BAB58 01                         	dc.b	$01
000BAB59 E1FE                       	smpsAlterNote       $FE
000BAB5B 01                         	dc.b	$01
000BAB5C E1F9                       	smpsAlterNote       $F9
000BAB5E 01                         	dc.b	$01
000BAB5F E1FC                       	smpsAlterNote       $FC
000BAB61 ECF5                       	smpsPSGAlterVol     $F5
000BAB63 8F06                       	dc.b	nD1, $06
000BAB65 EC04                       	smpsPSGAlterVol     $04
000BAB67 E701                       	dc.b	smpsNoAttack, $01
000BAB69 EC07                       	smpsPSGAlterVol     $07
000BAB6B 8003                       	dc.b	nRst, $03
000BAB6D ECF5                       	smpsPSGAlterVol     $F5
000BAB6F 8F06                       	dc.b	nD1, $06
000BAB71 EC04                       	smpsPSGAlterVol     $04
000BAB73 E701                       	dc.b	smpsNoAttack, $01
000BAB75 EC07                       	smpsPSGAlterVol     $07
000BAB77 8006                       	dc.b	nRst, $06
000BAB79 E1FF                       	smpsAlterNote       $FF
000BAB7B 01                         	dc.b	$01
000BAB7C E103                       	smpsAlterNote       $03
000BAB7E 01                         	dc.b	$01
000BAB7F E102                       	smpsAlterNote       $02
000BAB81 01                         	dc.b	$01
000BAB82 E1FB                       	smpsAlterNote       $FB
000BAB84 01                         	dc.b	$01
000BAB85 ECF5                       	smpsPSGAlterVol     $F5
000BAB87 8E07                       	dc.b	nCs1, $07
000BAB89 EC0B                       	smpsPSGAlterVol     $0B
000BAB8B 8004                       	dc.b	nRst, $04
000BAB8D ECF5                       	smpsPSGAlterVol     $F5
000BAB8F 8E06                       	dc.b	nCs1, $06
000BAB91 EC0B                       	smpsPSGAlterVol     $0B
000BAB93 8007                       	dc.b	nRst, $07
000BAB95 E101                       	smpsAlterNote       $01
000BAB97 0101                       	dc.b	$01, $01
000BAB99 E1FE                       	smpsAlterNote       $FE
000BAB9B 01                         	dc.b	$01
000BAB9C E1F9                       	smpsAlterNote       $F9
000BAB9E 01                         	dc.b	$01
000BAB9F E1FC                       	smpsAlterNote       $FC
000BABA1 ECF5                       	smpsPSGAlterVol     $F5
000BABA3 8F06                       	dc.b	nD1, $06
000BABA5 EC04                       	smpsPSGAlterVol     $04
000BABA7 E701                       	dc.b	smpsNoAttack, $01
000BABA9 EC07                       	smpsPSGAlterVol     $07
000BABAB 8003                       	dc.b	nRst, $03
000BABAD ECF5                       	smpsPSGAlterVol     $F5
000BABAF 8F06                       	dc.b	nD1, $06
000BABB1 EC04                       	smpsPSGAlterVol     $04
000BABB3 E701                       	dc.b	smpsNoAttack, $01
000BABB5 EC07                       	smpsPSGAlterVol     $07
000BABB7 8006                       	dc.b	nRst, $06
000BABB9 E1FF                       	smpsAlterNote       $FF
000BABBB 01                         	dc.b	$01
000BABBC E103                       	smpsAlterNote       $03
000BABBE 01                         	dc.b	$01
000BABBF E1FF                       	smpsAlterNote       $FF
000BABC1 01                         	dc.b	$01
000BABC2 E1FB                       	smpsAlterNote       $FB
000BABC4 01                         	dc.b	$01
000BABC5 ECF5                       	smpsPSGAlterVol     $F5
000BABC7 8E06                       	dc.b	nCs1, $06
000BABC9 EC04                       	smpsPSGAlterVol     $04
000BABCB E701                       	dc.b	smpsNoAttack, $01
000BABCD EC07                       	smpsPSGAlterVol     $07
000BABCF 8003                       	dc.b	nRst, $03
000BABD1 ECF5                       	smpsPSGAlterVol     $F5
000BABD3 8E07                       	dc.b	nCs1, $07
000BABD5 E1FF                       	smpsAlterNote       $FF
000BABD7 9B06                       	dc.b	nD2, $06
000BABD9 EC04                       	smpsPSGAlterVol     $04
000BABDB E701                       	dc.b	smpsNoAttack, $01
000BABDD ECFC                       	smpsPSGAlterVol     $FC
000BABDF 9B03                       	dc.b	nD2, $03
000BABE1 EC04                       	smpsPSGAlterVol     $04
000BABE3 E701                       	dc.b	smpsNoAttack, $01
000BABE5 ECFC                       	smpsPSGAlterVol     $FC
000BABE7 9B02                       	dc.b	nD2, $02
000BABE9 EC04                       	smpsPSGAlterVol     $04
000BABEB E701                       	dc.b	smpsNoAttack, $01
000BABED ECFC                       	smpsPSGAlterVol     $FC
000BABEF E1FE                       	smpsAlterNote       $FE
000BABF1 9A03                       	dc.b	nCs2, $03
000BABF3 EC0B                       	smpsPSGAlterVol     $0B
000BABF5 800A                       	dc.b	nRst, $0A
000BABF7 E102                       	smpsAlterNote       $02
000BABF9 01                         	dc.b	$01
000BABFA E10A                       	smpsAlterNote       $0A
000BABFC 01                         	dc.b	$01
000BABFD E102                       	smpsAlterNote       $02
000BABFF 01                         	dc.b	$01
000BAC00 E1F7                       	smpsAlterNote       $F7
000BAC02 01                         	dc.b	$01
000BAC03 E10A                       	smpsAlterNote       $0A
000BAC05 01                         	dc.b	$01
000BAC06 E1FC                       	smpsAlterNote       $FC
000BAC08 01                         	dc.b	$01
000BAC09 E108                       	smpsAlterNote       $08
000BAC0B 0101                       	dc.b	$01, $01
000BAC0D E102                       	smpsAlterNote       $02
000BAC0F 01                         	dc.b	$01
000BAC10 E1F7                       	smpsAlterNote       $F7
000BAC12 0101                       	dc.b	$01, $01
000BAC14 E1FC                       	smpsAlterNote       $FC
000BAC16 ECF5                       	smpsPSGAlterVol     $F5
000BAC18 8F06                       	dc.b	nD1, $06
000BAC1A EC04                       	smpsPSGAlterVol     $04
000BAC1C E701                       	dc.b	smpsNoAttack, $01
000BAC1E EC07                       	smpsPSGAlterVol     $07
000BAC20 8003                       	dc.b	nRst, $03
000BAC22 ECF5                       	smpsPSGAlterVol     $F5
000BAC24 8F06                       	dc.b	nD1, $06
000BAC26 EC04                       	smpsPSGAlterVol     $04
000BAC28 E701                       	dc.b	smpsNoAttack, $01
000BAC2A EC07                       	smpsPSGAlterVol     $07
000BAC2C 8006                       	dc.b	nRst, $06
000BAC2E E1FF                       	smpsAlterNote       $FF
000BAC30 01                         	dc.b	$01
000BAC31 E102                       	smpsAlterNote       $02
000BAC33 01                         	dc.b	$01
000BAC34 E101                       	smpsAlterNote       $01
000BAC36 01                         	dc.b	$01
000BAC37 E1FC                       	smpsAlterNote       $FC
000BAC39 01                         	dc.b	$01
000BAC3A ECF5                       	smpsPSGAlterVol     $F5
000BAC3C 9007                       	dc.b	nEb1, $07
000BAC3E EC0B                       	smpsPSGAlterVol     $0B
000BAC40 8004                       	dc.b	nRst, $04
000BAC42 ECF5                       	smpsPSGAlterVol     $F5
000BAC44 9006                       	dc.b	nEb1, $06
000BAC46 EC0B                       	smpsPSGAlterVol     $0B
000BAC48 8007                       	dc.b	nRst, $07
000BAC4A E103                       	smpsAlterNote       $03
000BAC4C 0101                       	dc.b	$01, $01
000BAC4E E1FF                       	smpsAlterNote       $FF
000BAC50 01                         	dc.b	$01
000BAC51 E1F9                       	smpsAlterNote       $F9
000BAC53 01                         	dc.b	$01
000BAC54 E1FC                       	smpsAlterNote       $FC
000BAC56 ECF5                       	smpsPSGAlterVol     $F5
000BAC58 8F06                       	dc.b	nD1, $06
000BAC5A EC04                       	smpsPSGAlterVol     $04
000BAC5C E701                       	dc.b	smpsNoAttack, $01
000BAC5E EC07                       	smpsPSGAlterVol     $07
000BAC60 8003                       	dc.b	nRst, $03
000BAC62 ECF5                       	smpsPSGAlterVol     $F5
000BAC64 8F06                       	dc.b	nD1, $06
000BAC66 EC04                       	smpsPSGAlterVol     $04
000BAC68 E701                       	dc.b	smpsNoAttack, $01
000BAC6A EC07                       	smpsPSGAlterVol     $07
000BAC6C 8006                       	dc.b	nRst, $06
000BAC6E E1FF                       	smpsAlterNote       $FF
000BAC70 01                         	dc.b	$01
000BAC71 E103                       	smpsAlterNote       $03
000BAC73 01                         	dc.b	$01
000BAC74 E1FF                       	smpsAlterNote       $FF
000BAC76 01                         	dc.b	$01
000BAC77 E1F9                       	smpsAlterNote       $F9
000BAC79 01                         	dc.b	$01
000BAC7A E1FC                       	smpsAlterNote       $FC
000BAC7C ECF5                       	smpsPSGAlterVol     $F5
000BAC7E 8F06                       	dc.b	nD1, $06
000BAC80 EC04                       	smpsPSGAlterVol     $04
000BAC82 E701                       	dc.b	smpsNoAttack, $01
000BAC84 EC07                       	smpsPSGAlterVol     $07
000BAC86 8003                       	dc.b	nRst, $03
000BAC88 ECF5                       	smpsPSGAlterVol     $F5
000BAC8A 8F07                       	dc.b	nD1, $07
000BAC8C EC0B                       	smpsPSGAlterVol     $0B
000BAC8E 8006                       	dc.b	nRst, $06
000BAC90 E1FF                       	smpsAlterNote       $FF
000BAC92 01                         	dc.b	$01
000BAC93 E102                       	smpsAlterNote       $02
000BAC95 0101                       	dc.b	$01, $01
000BAC97 E1FC                       	smpsAlterNote       $FC
000BAC99 01                         	dc.b	$01
000BAC9A ECF5                       	smpsPSGAlterVol     $F5
000BAC9C 8F07                       	dc.b	nD1, $07
000BAC9E EC0B                       	smpsPSGAlterVol     $0B
000BACA0 8004                       	dc.b	nRst, $04
000BACA2 ECF5                       	smpsPSGAlterVol     $F5
000BACA4 8F06                       	dc.b	nD1, $06
000BACA6 EC04                       	smpsPSGAlterVol     $04
000BACA8 E701                       	dc.b	smpsNoAttack, $01
000BACAA EC07                       	smpsPSGAlterVol     $07
000BACAC 8006                       	dc.b	nRst, $06
000BACAE E101                       	smpsAlterNote       $01
000BACB0 01                         	dc.b	$01
000BACB1 E102                       	smpsAlterNote       $02
000BACB3 01                         	dc.b	$01
000BACB4 E1FF                       	smpsAlterNote       $FF
000BACB6 01                         	dc.b	$01
000BACB7 E1F9                       	smpsAlterNote       $F9
000BACB9 01                         	dc.b	$01
000BACBA E1FC                       	smpsAlterNote       $FC
000BACBC ECF5                       	smpsPSGAlterVol     $F5
000BACBE 9006                       	dc.b	nEb1, $06
000BACC0 EC04                       	smpsPSGAlterVol     $04
000BACC2 E701                       	dc.b	smpsNoAttack, $01
000BACC4 EC07                       	smpsPSGAlterVol     $07
000BACC6 8003                       	dc.b	nRst, $03
000BACC8 ECF5                       	smpsPSGAlterVol     $F5
000BACCA 9006                       	dc.b	nEb1, $06
000BACCC EC04                       	smpsPSGAlterVol     $04
000BACCE E701                       	dc.b	smpsNoAttack, $01
000BACD0 EC07                       	smpsPSGAlterVol     $07
000BACD2 8006                       	dc.b	nRst, $06
000BACD4 E100                       	smpsAlterNote       $00
000BACD6 01                         	dc.b	$01
000BACD7 E102                       	smpsAlterNote       $02
000BACD9 01                         	dc.b	$01
000BACDA E100                       	smpsAlterNote       $00
000BACDC 01                         	dc.b	$01
000BACDD E1FF                       	smpsAlterNote       $FF
000BACDF 01                         	dc.b	$01
000BACE0 ECF5                       	smpsPSGAlterVol     $F5
000BACE2 9B06                       	dc.b	nD2, $06
000BACE4 EC04                       	smpsPSGAlterVol     $04
000BACE6 E701                       	dc.b	smpsNoAttack, $01
000BACE8 EC07                       	smpsPSGAlterVol     $07
000BACEA 8003                       	dc.b	nRst, $03
000BACEC ECF5                       	smpsPSGAlterVol     $F5
000BACEE 9B07                       	dc.b	nD2, $07
000BACF0 EC0B                       	smpsPSGAlterVol     $0B
000BACF2 8007                       	dc.b	nRst, $07
000BACF4 E105                       	smpsAlterNote       $05
000BACF6 0101                       	dc.b	$01, $01
000BACF8 E1FF                       	smpsAlterNote       $FF
000BACFA 01                         	dc.b	$01
000BACFB E1FC                       	smpsAlterNote       $FC
000BACFD 01                         	dc.b	$01
000BACFE E1FF                       	smpsAlterNote       $FF
000BAD00 ECF5                       	smpsPSGAlterVol     $F5
000BAD02 9B06                       	dc.b	nD2, $06
000BAD04 EC0B                       	smpsPSGAlterVol     $0B
000BAD06 8004                       	dc.b	nRst, $04
000BAD08 ECF5                       	smpsPSGAlterVol     $F5
000BAD0A 9B06                       	dc.b	nD2, $06
000BAD0C EC04                       	smpsPSGAlterVol     $04
000BAD0E E701                       	dc.b	smpsNoAttack, $01
000BAD10 EC07                       	smpsPSGAlterVol     $07
000BAD12 8006                       	dc.b	nRst, $06
000BAD14 E102                       	smpsAlterNote       $02
000BAD16 01                         	dc.b	$01
000BAD17 E106                       	smpsAlterNote       $06
000BAD19 01                         	dc.b	$01
000BAD1A E102                       	smpsAlterNote       $02
000BAD1C 01                         	dc.b	$01
000BAD1D E1FC                       	smpsAlterNote       $FC
000BAD1F 01                         	dc.b	$01
000BAD20 E1FF                       	smpsAlterNote       $FF
000BAD22 ECF5                       	smpsPSGAlterVol     $F5
000BAD24 9B06                       	dc.b	nD2, $06
000BAD26 EC04                       	smpsPSGAlterVol     $04
000BAD28 E701                       	dc.b	smpsNoAttack, $01
000BAD2A EC07                       	smpsPSGAlterVol     $07
000BAD2C 8003                       	dc.b	nRst, $03
000BAD2E ECF5                       	smpsPSGAlterVol     $F5
000BAD30 9B07                       	dc.b	nD2, $07
000BAD32 EC0B                       	smpsPSGAlterVol     $0B
000BAD34 8006                       	dc.b	nRst, $06
000BAD36 E102                       	smpsAlterNote       $02
000BAD38 01                         	dc.b	$01
000BAD39 E105                       	smpsAlterNote       $05
000BAD3B 0101                       	dc.b	$01, $01
000BAD3D E1FF                       	smpsAlterNote       $FF
000BAD3F 01                         	dc.b	$01
000BAD40 ECF5                       	smpsPSGAlterVol     $F5
000BAD42 9B07                       	dc.b	nD2, $07
000BAD44 EC0B                       	smpsPSGAlterVol     $0B
000BAD46 8004                       	dc.b	nRst, $04
000BAD48 ECF5                       	smpsPSGAlterVol     $F5
000BAD4A 9B06                       	dc.b	nD2, $06
000BAD4C EC04                       	smpsPSGAlterVol     $04
000BAD4E E701                       	dc.b	smpsNoAttack, $01
000BAD50 EC07                       	smpsPSGAlterVol     $07
000BAD52 8006                       	dc.b	nRst, $06
000BAD54 E105                       	smpsAlterNote       $05
000BAD56 0101                       	dc.b	$01, $01
000BAD58 E102                       	smpsAlterNote       $02
000BAD5A 01                         	dc.b	$01
000BAD5B E1FC                       	smpsAlterNote       $FC
000BAD5D 01                         	dc.b	$01
000BAD5E E1FF                       	smpsAlterNote       $FF
000BAD60 ECF5                       	smpsPSGAlterVol     $F5
000BAD62 9B06                       	dc.b	nD2, $06
000BAD64 EC04                       	smpsPSGAlterVol     $04
000BAD66 E701                       	dc.b	smpsNoAttack, $01
000BAD68 EC07                       	smpsPSGAlterVol     $07
000BAD6A 8003                       	dc.b	nRst, $03
000BAD6C ECF5                       	smpsPSGAlterVol     $F5
000BAD6E 9B06                       	dc.b	nD2, $06
000BAD70 EC04                       	smpsPSGAlterVol     $04
000BAD72 E701                       	dc.b	smpsNoAttack, $01
000BAD74 EC07                       	smpsPSGAlterVol     $07
000BAD76 8006                       	dc.b	nRst, $06
000BAD78 E102                       	smpsAlterNote       $02
000BAD7A 01                         	dc.b	$01
000BAD7B E106                       	smpsAlterNote       $06
000BAD7D 01                         	dc.b	$01
000BAD7E E102                       	smpsAlterNote       $02
000BAD80 01                         	dc.b	$01
000BAD81 E1FF                       	smpsAlterNote       $FF
000BAD83 01                         	dc.b	$01
000BAD84 ECF5                       	smpsPSGAlterVol     $F5
000BAD86 9B06                       	dc.b	nD2, $06
000BAD88 EC04                       	smpsPSGAlterVol     $04
000BAD8A E701                       	dc.b	smpsNoAttack, $01
000BAD8C EC07                       	smpsPSGAlterVol     $07
000BAD8E 8003                       	dc.b	nRst, $03
000BAD90 ECF5                       	smpsPSGAlterVol     $F5
000BAD92 9B07                       	dc.b	nD2, $07
000BAD94 EC0B                       	smpsPSGAlterVol     $0B
000BAD96 8007                       	dc.b	nRst, $07
000BAD98 E107                       	smpsAlterNote       $07
000BAD9A 0101                       	dc.b	$01, $01
000BAD9C E1FE                       	smpsAlterNote       $FE
000BAD9E 01                         	dc.b	$01
000BAD9F E1FA                       	smpsAlterNote       $FA
000BADA1 0101                       	dc.b	$01, $01
000BADA3 E103                       	smpsAlterNote       $03
000BADA5 01                         	dc.b	$01
000BADA6 E109                       	smpsAlterNote       $09
000BADA8 01                         	dc.b	$01
000BADA9 E107                       	smpsAlterNote       $07
000BADAB 01                         	dc.b	$01
000BADAC E1FE                       	smpsAlterNote       $FE
000BADAE 01                         	dc.b	$01
000BADAF E108                       	smpsAlterNote       $08
000BADB1 01                         	dc.b	$01
000BADB2 E1FD                       	smpsAlterNote       $FD
000BADB4 ECF5                       	smpsPSGAlterVol     $F5
000BADB6 940E                       	dc.b	nG1, $0E
000BADB8 E103                       	smpsAlterNote       $03
000BADBA EC0B                       	smpsPSGAlterVol     $0B
000BADBC 8001 01                    	dc.b	nRst, $01, $01
000BADBF E1FD                       	smpsAlterNote       $FD
000BADC1 01                         	dc.b	$01
000BADC2 E1FB                       	smpsAlterNote       $FB
000BADC4 0101                       	dc.b	$01, $01
000BADC6 E100                       	smpsAlterNote       $00
000BADC8 01                         	dc.b	$01
000BADC9 E103                       	smpsAlterNote       $03
000BADCB 01                         	dc.b	$01
000BADCC E100                       	smpsAlterNote       $00
000BADCE 01                         	dc.b	$01
000BADCF E1FD                       	smpsAlterNote       $FD
000BADD1 01                         	dc.b	$01
000BADD2 E1FA                       	smpsAlterNote       $FA
000BADD4 01                         	dc.b	$01
000BADD5 E1FD                       	smpsAlterNote       $FD
000BADD7 01                         	dc.b	$01
000BADD8 E103                       	smpsAlterNote       $03
000BADDA 0101                       	dc.b	$01, $01
000BADDC E100                       	smpsAlterNote       $00
000BADDE 01                         	dc.b	$01
000BADDF E1FE                       	smpsAlterNote       $FE
000BADE1 ECF5                       	smpsPSGAlterVol     $F5
000BADE3 960D                       	dc.b	nA1, $0D
000BADE5 E104                       	smpsAlterNote       $04
000BADE7 EC0B                       	smpsPSGAlterVol     $0B
000BADE9 8001 01                    	dc.b	nRst, $01, $01
000BADEC E101                       	smpsAlterNote       $01
000BADEE 01                         	dc.b	$01
000BADEF E1FB                       	smpsAlterNote       $FB
000BADF1 0101                       	dc.b	$01, $01
000BADF3 E1FE                       	smpsAlterNote       $FE
000BADF5 01                         	dc.b	$01
000BADF6 E104                       	smpsAlterNote       $04
000BADF8 0101                       	dc.b	$01, $01
000BADFA E1FE                       	smpsAlterNote       $FE
000BADFC 01                         	dc.b	$01
000BADFD E1FB                       	smpsAlterNote       $FB
000BADFF 0101                       	dc.b	$01, $01
000BAE01 E101                       	smpsAlterNote       $01
000BAE03 01                         	dc.b	$01
000BAE04 E104                       	smpsAlterNote       $04
000BAE06 0101                       	dc.b	$01, $01
000BAE08 E1FE                       	smpsAlterNote       $FE
000BAE0A ECF5                       	smpsPSGAlterVol     $F5
000BAE0C 970D                       	dc.b	nBb1, $0D
000BAE0E E101                       	smpsAlterNote       $01
000BAE10 EC04                       	smpsPSGAlterVol     $04
000BAE12 E701                       	dc.b	smpsNoAttack, $01
000BAE14 EC07                       	smpsPSGAlterVol     $07
000BAE16 E104                       	smpsAlterNote       $04
000BAE18 8001                       	dc.b	nRst, $01
000BAE1A E103                       	smpsAlterNote       $03
000BAE1C 01                         	dc.b	$01
000BAE1D E1FE                       	smpsAlterNote       $FE
000BAE1F 01                         	dc.b	$01
000BAE20 E1FA                       	smpsAlterNote       $FA
000BAE22 01                         	dc.b	$01
000BAE23 E1FE                       	smpsAlterNote       $FE
000BAE25 01                         	dc.b	$01
000BAE26 E101                       	smpsAlterNote       $01
000BAE28 01                         	dc.b	$01
000BAE29 E104                       	smpsAlterNote       $04
000BAE2B 01                         	dc.b	$01
000BAE2C E101                       	smpsAlterNote       $01
000BAE2E 01                         	dc.b	$01
000BAE2F E1FB                       	smpsAlterNote       $FB
000BAE31 01                         	dc.b	$01
000BAE32 E1FA                       	smpsAlterNote       $FA
000BAE34 01                         	dc.b	$01
000BAE35 E1FE                       	smpsAlterNote       $FE
000BAE37 01                         	dc.b	$01
000BAE38 E103                       	smpsAlterNote       $03
000BAE3A 0101                       	dc.b	$01, $01
000BAE3C E101                       	smpsAlterNote       $01
000BAE3E 01                         	dc.b	$01
000BAE3F E1FE                       	smpsAlterNote       $FE
000BAE41 ECF5                       	smpsPSGAlterVol     $F5
000BAE43 990D                       	dc.b	nC2, $0D
000BAE45 E104                       	smpsAlterNote       $04
000BAE47 EC0B                       	smpsPSGAlterVol     $0B
000BAE49 8001 01                    	dc.b	nRst, $01, $01
000BAE4C E102                       	smpsAlterNote       $02
000BAE4E 01                         	dc.b	$01
000BAE4F E1FC                       	smpsAlterNote       $FC
000BAE51 0101                       	dc.b	$01, $01
000BAE53 E102                       	smpsAlterNote       $02
000BAE55 01                         	dc.b	$01
000BAE56 E104                       	smpsAlterNote       $04
000BAE58 01                         	dc.b	$01
000BAE59 E1FF                       	smpsAlterNote       $FF
000BAE5B ECF5                       	smpsPSGAlterVol     $F5
000BAE5D 9B06                       	dc.b	nD2, $06
000BAE5F EC04                       	smpsPSGAlterVol     $04
000BAE61 E701                       	dc.b	smpsNoAttack, $01
000BAE63 EC07                       	smpsPSGAlterVol     $07
000BAE65 8003                       	dc.b	nRst, $03
000BAE67 ECF5                       	smpsPSGAlterVol     $F5
000BAE69 9B07                       	dc.b	nD2, $07
000BAE6B EC0B                       	smpsPSGAlterVol     $0B
000BAE6D 8006                       	dc.b	nRst, $06
000BAE6F E101                       	smpsAlterNote       $01
000BAE71 01                         	dc.b	$01
000BAE72 E104                       	smpsAlterNote       $04
000BAE74 0101                       	dc.b	$01, $01
000BAE76 E1FE                       	smpsAlterNote       $FE
000BAE78 01                         	dc.b	$01
000BAE79 E1FC                       	smpsAlterNote       $FC
000BAE7B 01                         	dc.b	$01
000BAE7C E1FE                       	smpsAlterNote       $FE
000BAE7E ECF5                       	smpsPSGAlterVol     $F5
000BAE80 9C06                       	dc.b	nEb2, $06
000BAE82 EC0B                       	smpsPSGAlterVol     $0B
000BAE84 8004                       	dc.b	nRst, $04
000BAE86 ECF5                       	smpsPSGAlterVol     $F5
000BAE88 9C06                       	dc.b	nEb2, $06
000BAE8A EC04                       	smpsPSGAlterVol     $04
000BAE8C E701                       	dc.b	smpsNoAttack, $01
000BAE8E EC07                       	smpsPSGAlterVol     $07
000BAE90 8006                       	dc.b	nRst, $06
000BAE92 E105                       	smpsAlterNote       $05
000BAE94 01                         	dc.b	$01
000BAE95 E106                       	smpsAlterNote       $06
000BAE97 01                         	dc.b	$01
000BAE98 E102                       	smpsAlterNote       $02
000BAE9A 01                         	dc.b	$01
000BAE9B E1FB                       	smpsAlterNote       $FB
000BAE9D 01                         	dc.b	$01
000BAE9E E1FF                       	smpsAlterNote       $FF
000BAEA0 ECF5                       	smpsPSGAlterVol     $F5
000BAEA2 9B06                       	dc.b	nD2, $06
000BAEA4 EC04                       	smpsPSGAlterVol     $04
000BAEA6 E701                       	dc.b	smpsNoAttack, $01
000BAEA8 EC07                       	smpsPSGAlterVol     $07
000BAEAA 8003                       	dc.b	nRst, $03
000BAEAC ECF5                       	smpsPSGAlterVol     $F5
000BAEAE 9B06                       	dc.b	nD2, $06
000BAEB0 EC04                       	smpsPSGAlterVol     $04
000BAEB2 E701                       	dc.b	smpsNoAttack, $01
000BAEB4 EC07                       	smpsPSGAlterVol     $07
000BAEB6 8006                       	dc.b	nRst, $06
000BAEB8 E101                       	smpsAlterNote       $01
000BAEBA 01                         	dc.b	$01
000BAEBB E105                       	smpsAlterNote       $05
000BAEBD 01                         	dc.b	$01
000BAEBE E104                       	smpsAlterNote       $04
000BAEC0 01                         	dc.b	$01
000BAEC1 E1FE                       	smpsAlterNote       $FE
000BAEC3 01                         	dc.b	$01
000BAEC4 ECF5                       	smpsPSGAlterVol     $F5
000BAEC6 9C07                       	dc.b	nEb2, $07
000BAEC8 EC0B                       	smpsPSGAlterVol     $0B
000BAECA 8004                       	dc.b	nRst, $04
000BAECC ECF5                       	smpsPSGAlterVol     $F5
000BAECE 9C06                       	dc.b	nEb2, $06
000BAED0 EC0B                       	smpsPSGAlterVol     $0B
000BAED2 8007                       	dc.b	nRst, $07
000BAED4 E105                       	smpsAlterNote       $05
000BAED6 0101                       	dc.b	$01, $01
000BAED8 E102                       	smpsAlterNote       $02
000BAEDA 01                         	dc.b	$01
000BAEDB E1FB                       	smpsAlterNote       $FB
000BAEDD 01                         	dc.b	$01
000BAEDE E1FF                       	smpsAlterNote       $FF
000BAEE0 ECF5                       	smpsPSGAlterVol     $F5
000BAEE2 9B06                       	dc.b	nD2, $06
000BAEE4 EC04                       	smpsPSGAlterVol     $04
000BAEE6 E701                       	dc.b	smpsNoAttack, $01
000BAEE8 EC07                       	smpsPSGAlterVol     $07
000BAEEA 8003                       	dc.b	nRst, $03
000BAEEC ECF5                       	smpsPSGAlterVol     $F5
000BAEEE 9B06                       	dc.b	nD2, $06
000BAEF0 EC04                       	smpsPSGAlterVol     $04
000BAEF2 E701                       	dc.b	smpsNoAttack, $01
000BAEF4 EC07                       	smpsPSGAlterVol     $07
000BAEF6 8006                       	dc.b	nRst, $06
000BAEF8 E101                       	smpsAlterNote       $01
000BAEFA 01                         	dc.b	$01
000BAEFB E105                       	smpsAlterNote       $05
000BAEFD 01                         	dc.b	$01
000BAEFE E101                       	smpsAlterNote       $01
000BAF00 01                         	dc.b	$01
000BAF01 E1FC                       	smpsAlterNote       $FC
000BAF03 01                         	dc.b	$01
000BAF04 E1FE                       	smpsAlterNote       $FE
000BAF06 ECF5                       	smpsPSGAlterVol     $F5
000BAF08 9C06                       	dc.b	nEb2, $06
000BAF0A EC04                       	smpsPSGAlterVol     $04
000BAF0C E701                       	dc.b	smpsNoAttack, $01
000BAF0E EC07                       	smpsPSGAlterVol     $07
000BAF10 8003                       	dc.b	nRst, $03
000BAF12 ECF5                       	smpsPSGAlterVol     $F5
000BAF14 9C07                       	dc.b	nEb2, $07
000BAF16 EC0B                       	smpsPSGAlterVol     $0B
000BAF18 8006                       	dc.b	nRst, $06
000BAF1A E102                       	smpsAlterNote       $02
000BAF1C 01                         	dc.b	$01
000BAF1D E105                       	smpsAlterNote       $05
000BAF1F 0101                       	dc.b	$01, $01
000BAF21 E1FF                       	smpsAlterNote       $FF
000BAF23 01                         	dc.b	$01
000BAF24 ECF5                       	smpsPSGAlterVol     $F5
000BAF26 9B07                       	dc.b	nD2, $07
000BAF28 EC0B                       	smpsPSGAlterVol     $0B
000BAF2A 8004                       	dc.b	nRst, $04
000BAF2C ECF5                       	smpsPSGAlterVol     $F5
000BAF2E 9B06                       	dc.b	nD2, $06
000BAF30 EC04                       	smpsPSGAlterVol     $04
000BAF32 E701                       	dc.b	smpsNoAttack, $01
000BAF34 EC07                       	smpsPSGAlterVol     $07
000BAF36 8002                       	dc.b	nRst, $02
000BAF38 E1FC                       	smpsAlterNote       $FC
000BAF3A ECF5                       	smpsPSGAlterVol     $F5
000BAF3C 9006                       	dc.b	nEb1, $06
000BAF3E EC04                       	smpsPSGAlterVol     $04
000BAF40 E701                       	dc.b	smpsNoAttack, $01
000BAF42 ECFC                       	smpsPSGAlterVol     $FC
000BAF44 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
000BAF48 EC04                       	smpsPSGAlterVol     $04
000BAF4A E701                       	dc.b	smpsNoAttack, $01
000BAF4C E1FD                       	smpsAlterNote       $FD
000BAF4E ECFC                       	smpsPSGAlterVol     $FC
000BAF50 9402                       	dc.b	nG1, $02
000BAF52 EC04                       	smpsPSGAlterVol     $04
000BAF54 E701                       	dc.b	smpsNoAttack, $01
000BAF56 E1FE                       	smpsAlterNote       $FE
000BAF58 ECFC                       	smpsPSGAlterVol     $FC
000BAF5A 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000BAF5E EC04                       	smpsPSGAlterVol     $04
000BAF60 E701                       	dc.b	smpsNoAttack, $01
000BAF62 EC07                       	smpsPSGAlterVol     $07
000BAF64 8008                       	dc.b	nRst, $08
000BAF66 F6F4 F3                    	smpsJump            music84_Jump06
000BAF69                            
000BAF69                            ; PSG3 Data
000BAF69                            music84_PSG3:
000BAF69 F500                       	smpsPSGvoice        $00
000BAF6B E1FF                       	smpsAlterNote       $FF
000BAF6D EC0F                       	smpsPSGAlterVol     $0F
000BAF6F 803A                       	dc.b	nRst, $3A
000BAF71                            
000BAF71                            music84_Jump05:
000BAF71 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
000BAF7D 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
000BAF87 F6FF E8                    	smpsJump            music84_Jump05
000BAF8A                            
000BAF8A                            ; DAC Data
000BAF8A                            music84_DAC:
000BAF8A E0C0                       	smpsPan             panCenter, $00
000BAF8C 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
000BAF98 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
000BAFA4 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
000BAFB0 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
000BAFBC 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
000BAFC8 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
000BAFD4 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
000BAFE0 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
000BAFEC 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
000BAFF8 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
000BB004 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
000BB010 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
000BB01C 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
000BB028 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
000BB034 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
000BB040 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
000BB04C 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
000BB058 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
000BB064 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
000BB070 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000BB07C 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000BB088 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
000BB094 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
000BB0A0 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
000BB0AC 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
000BB0B8 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
000BB0C4 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
000BB0D0 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000BB0DC 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
000BB0E8 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
000BB0F4 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000BB100 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
000BB10C 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
000BB118 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
000BB124 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
000BB130 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000BB13C 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
000BB148 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
000BB154 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
000BB160 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
000BB16C 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
000BB178 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
000BB184 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000BB190 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
000BB19C 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
000BB1A8 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000BB1B4 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
000BB1C0 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
000BB1CC 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
000BB1D8 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
000BB1E4 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
000BB1F0 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
000BB1FC 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
000BB208 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
000BB214 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000BB220 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
000BB22C 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
000BB238 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
000BB244 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000BB250 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000BB25C 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
000BB268 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
000BB274 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
000BB280 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
000BB28C 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
000BB298 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
000BB2A4 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
000BB2B0 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
000BB2BC 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
000BB2C8 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
000BB2D4 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
000BB2E0 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000BB2EC 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
000BB2F8 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
000BB304 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
000BB310 E0C0                       	smpsPan             panCenter, $00
000BB312 F2                         	smpsStop
000BB313                            
000BB313                            music84_Voices:
000BB313                            ;	Voice $00
000BB313                            ;	$3D
000BB313                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
000BB313                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
000BB313                            	smpsVcAlgorithm     $05
000BB313                            	smpsVcFeedback      $07
000BB313                            	smpsVcUnusedBits    $00
000BB313                            	smpsVcDetune        $05, $04, $03, $04
000BB313                            	smpsVcCoarseFreq    $01, $01, $01, $01
000BB313                            	smpsVcRateScale     $00, $00, $00, $00
000BB313                            	smpsVcAttackRate    $11, $11, $11, $11
000BB313                            	smpsVcAmpMod        $00, $00, $00, $00
000BB313                            	smpsVcDecayRate1    $00, $00, $00, $0A
000BB313                            	smpsVcDecayRate2    $00, $00, $00, $0B
000BB313                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000BB313                            	smpsVcReleaseRate   $08, $08, $08, $07
000BB313 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
000BB32C                            
000BB32C                            ;	Voice $01
000BB32C                            ;	$04
000BB32C                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
000BB32C                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
000BB32C                            	smpsVcAlgorithm     $04
000BB32C                            	smpsVcFeedback      $00
000BB32C                            	smpsVcUnusedBits    $00
000BB32C                            	smpsVcDetune        $04, $03, $04, $05
000BB32C                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
000BB32C                            	smpsVcRateScale     $00, $01, $00, $01
000BB32C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000BB32C                            	smpsVcAmpMod        $00, $00, $00, $00
000BB32C                            	smpsVcDecayRate1    $0E, $00, $0E, $00
000BB32C                            	smpsVcDecayRate2    $05, $00, $05, $00
000BB32C                            	smpsVcDecayLevel    $08, $0E, $08, $0E
000BB32C                            	smpsVcReleaseRate   $06, $06, $06, $06
000BB32C 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
000BB345                            
000BB345                            ;	Voice $02
000BB345                            ;	$30
000BB345                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
000BB345                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
000BB345                            	smpsVcAlgorithm     $00
000BB345                            	smpsVcFeedback      $06
000BB345                            	smpsVcUnusedBits    $00
000BB345                            	smpsVcDetune        $04, $02, $00, $06
000BB345                            	smpsVcCoarseFreq    $01, $01, $03, $0C
000BB345                            	smpsVcRateScale     $00, $00, $00, $00
000BB345                            	smpsVcAttackRate    $1F, $1F, $1F, $14
000BB345                            	smpsVcAmpMod        $00, $00, $00, $00
000BB345                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
000BB345                            	smpsVcDecayRate2    $01, $01, $01, $01
000BB345                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
000BB345                            	smpsVcReleaseRate   $09, $0B, $08, $0F
000BB345 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
000BB35E                            
000BB35E                            ;	Voice $03
000BB35E                            ;	$3A
000BB35E                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
000BB35E                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
000BB35E                            	smpsVcAlgorithm     $02
000BB35E                            	smpsVcFeedback      $07
000BB35E                            	smpsVcUnusedBits    $00
000BB35E                            	smpsVcDetune        $04, $06, $02, $00
000BB35E                            	smpsVcCoarseFreq    $01, $01, $01, $01
000BB35E                            	smpsVcRateScale     $00, $00, $00, $00
000BB35E                            	smpsVcAttackRate    $18, $19, $14, $14
000BB35E                            	smpsVcAmpMod        $00, $00, $00, $00
000BB35E                            	smpsVcDecayRate1    $09, $0D, $09, $09
000BB35E                            	smpsVcDecayRate2    $00, $00, $00, $00
000BB35E                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
000BB35E                            	smpsVcReleaseRate   $08, $0F, $0F, $07
000BB35E 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
000BB377                            
000BB377                            ;	Voice $04
000BB377                            ;	$3C
000BB377                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
000BB377                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
000BB377                            	smpsVcAlgorithm     $04
000BB377                            	smpsVcFeedback      $07
000BB377                            	smpsVcUnusedBits    $00
000BB377                            	smpsVcDetune        $07, $00, $00, $03
000BB377                            	smpsVcCoarseFreq    $00, $00, $02, $0A
000BB377                            	smpsVcRateScale     $00, $00, $00, $00
000BB377                            	smpsVcAttackRate    $10, $1F, $10, $1F
000BB377                            	smpsVcAmpMod        $00, $00, $00, $00
000BB377                            	smpsVcDecayRate1    $00, $00, $00, $00
000BB377                            	smpsVcDecayRate2    $00, $00, $00, $00
000BB377                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000BB377                            	smpsVcReleaseRate   $0A, $02, $0A, $02
000BB377 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
000BB390                            
000BB390                            ;	Voice $05
000BB390                            ;	$38
000BB390                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
000BB390                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
000BB390                            	smpsVcAlgorithm     $00
000BB390                            	smpsVcFeedback      $07
000BB390                            	smpsVcUnusedBits    $00
000BB390                            	smpsVcDetune        $04, $06, $02, $00
000BB390                            	smpsVcCoarseFreq    $01, $01, $01, $00
000BB390                            	smpsVcRateScale     $00, $00, $00, $00
000BB390                            	smpsVcAttackRate    $1F, $1F, $1F, $10
000BB390                            	smpsVcAmpMod        $00, $00, $00, $00
000BB390                            	smpsVcDecayRate1    $00, $03, $00, $17
000BB390                            	smpsVcDecayRate2    $00, $08, $08, $0B
000BB390                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
000BB390                            	smpsVcReleaseRate   $08, $05, $05, $05
000BB390 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
000BB3A9                            
000BB3A9                            
000BB3AA 00                         		even
000BB3AA                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
000BF5BA                            		even
000BF5BA                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000C3112 00                         		even
000C3112                            Music87:	include	sound\music87.asm; Invincibility
000C3112                            triple_Header:
000C3112 =00000001                  smpsHeaderStartSong = 1
000C3112 0000                       	smpsHeaderVoice     triple_Voices
000C3114 0501                       	smpsHeaderChan      $05, $01
000C3116 0200                       	smpsHeaderTempo     $02, $00
000C3118                            
000C311C 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000C3120 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000C3124 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000C3128 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000C312C 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000C3132                            
000C3132                            ; DAC Data
000C3132                            triple_DAC:
000C3132 E0C0                       	smpsPan             panCenter, $00
000C3134 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000C313A                            
000C313A                            triple_Loop01:
000C313A 8282 82                    	dc.b	dSnare, dSnare, dSnare
000C313D                            
000C313D                            triple_Loop00:
000C313D 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000C3149 06                         	dc.b	$06
000C314A F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000C314F 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000C315B 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000C3162 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000C3167 0303 1B                    	dc.b	$03, $03, $1B
000C316A E0C0                       	smpsPan             panCenter, $00
000C316C F6FF C4                    	smpsJump triple_DAC
000C316F                            
000C316F                            ; FM1 Data
000C316F                            triple_FM1:
000C316F E0C0                       	smpsPan             panCenter, $00
000C3173 8018                       	dc.b	nRst, $18
000C3175                            
000C3175                            triple_Loop0B:
000C3175 AC06 B8                    	dc.b	nG3, $06, nG4
000C3178 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000C317D                            
000C317D                            triple_Loop0C:
000C317D A7B3                       	dc.b	nD3, nD4
000C317F F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000C3184                            
000C3184                            triple_Loop0D:
000C3184 A9B5                       	dc.b	nE3, nE4
000C3186 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000C318B A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000C3193 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000C3198 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000C31A4 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000C31B0 AD                         	dc.b	nAb3
000C31B1 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000C31B6 8018                       	dc.b	nRst, $18
000C31B8 E0C0                       	smpsPan             panCenter, $00
000C31BC F6FF B1                    	smpsJump triple_FM1
000C31BF                            
000C31BF                            ; FM2 Data
000C31BF                            triple_FM2:
000C31BF E0C0                       	smpsPan             panCenter, $00
000C31C3 8018                       	dc.b	nRst, $18
000C31C5                            
000C31C5                            triple_Loop07:
000C31C5 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000C31D1 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000C31DD F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000C31E2 8003                       	dc.b	nRst, $03
000C31E4                            
000C31E4                            triple_Loop08:
000C31E4 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000C31EA F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000C31EF B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000C31F5                            
000C31F5                            triple_Loop09:
000C31F5 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000C3201 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000C320D F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000C3212 8003                       	dc.b	nRst, $03
000C3214                            
000C3214                            triple_Loop0A:
000C3214 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000C321A F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000C321F B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000C3225 E0C0                       	smpsPan             panCenter, $00
000C3229 F6FF 94                    	smpsJump triple_FM2
000C322C                            
000C322C                            ; FM3 Data
000C322C                            triple_FM3:
000C322C E0C0                       	smpsPan             panCenter, $00
000C3230 8018                       	dc.b	nRst, $18
000C3232                            
000C3232                            triple_Loop06:
000C3232 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000C3239 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000C323E 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000C324A BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000C3256 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000C3259 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000C325E 8018                       	dc.b	nRst, $18
000C3260 E0C0                       	smpsPan             panCenter, $00
000C3264 F6FF C6                    	smpsJump triple_FM3
000C3267                            
000C3267                            ; FM4 Data
000C3267                            triple_FM4:
000C3267 E103                       	smpsAlterNote       $03
000C326B E0C0                       	smpsPan             panCenter, $00
000C326D 8018                       	dc.b	nRst, $18
000C326F                            
000C326F                            triple_Loop02:
000C326F C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000C327B C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000C3287 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000C328C 8003                       	dc.b	nRst, $03
000C328E                            
000C328E                            triple_Loop03:
000C328E B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000C3294 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000C3299 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000C329F                            
000C329F                            triple_Loop04:
000C329F C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000C32AB C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000C32B7 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000C32BC 8003                       	dc.b	nRst, $03
000C32BE                            
000C32BE                            triple_Loop05:
000C32BE B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000C32C4 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000C32C9 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000C32CF E0C0                       	smpsPan             panCenter, $00
000C32D1 F6FF 94                    	smpsJump triple_FM4
000C32D4                            
000C32D4                            ; PSG1 Data
000C32D4                            triple_PSG1:
000C32D4 8018                       	dc.b	nRst, $18
000C32D6                            
000C32D6                            triple_Loop0E:
000C32D6 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000C32E2 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000C32EE 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000C32FA 9402 8004                  	dc.b	nG1, $02, nRst, $04
000C32FE F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000C3303 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000C330F 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000C331B 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000C3327 9402 8007                  	dc.b	nG1, $02, nRst, $07
000C332B                            
000C332B                            triple_Loop0F:
000C332B 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000C3331 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000C3336 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000C333C                            
000C333C                            triple_Loop10:
000C333C A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000C3348 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000C3354 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000C3360 9402 8004                  	dc.b	nG1, $02, nRst, $04
000C3364 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000C3369 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000C3375 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000C3381 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000C338D 9402 8007                  	dc.b	nG1, $02, nRst, $07
000C3391                            
000C3391                            triple_Loop11:
000C3391 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000C3397 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000C339C 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000C33A2 F500                       	smpsPSGvoice        $00
000C33A4 F6FF 2E                    	smpsJump triple_PSG1
000C33A7                            
000C33A7                            triple_Voices:
000C33A7                            ;	Voice $00
000C33A7                            ;	$3A
000C33A7                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000C33A7                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000C33A7                            	smpsVcAlgorithm     $02
000C33A7                            	smpsVcFeedback      $07
000C33A7                            	smpsVcUnusedBits    $00
000C33A7                            	smpsVcDetune        $00, $00, $00, $00
000C33A7                            	smpsVcCoarseFreq    $01, $01, $07, $01
000C33A7                            	smpsVcRateScale     $01, $02, $02, $02
000C33A7                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000C33A7                            	smpsVcAmpMod        $00, $00, $00, $00
000C33A7                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000C33A7                            	smpsVcDecayRate2    $00, $00, $00, $00
000C33A7                            	smpsVcDecayLevel    $00, $01, $0F, $01
000C33A7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000C33A7 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000C33C0                            
000C33C0                            ;	Voice $01
000C33C0                            ;	$20
000C33C0                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000C33C0                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000C33C0                            	smpsVcAlgorithm     $00
000C33C0                            	smpsVcFeedback      $04
000C33C0                            	smpsVcUnusedBits    $00
000C33C0                            	smpsVcDetune        $00, $00, $03, $07
000C33C0                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000C33C0                            	smpsVcRateScale     $03, $03, $03, $02
000C33C0                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000C33C0                            	smpsVcAmpMod        $00, $00, $00, $00
000C33C0                            	smpsVcDecayRate1    $04, $04, $0A, $10
000C33C0                            	smpsVcDecayRate2    $08, $08, $08, $0F
000C33C0                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000C33C0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000C33C0 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000C33C0 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000C33DA 00                         		even
000C33DA                            Music88:	incbin	sound\music88.bin; Extra Life
000C34C8                            		even
000C34C8                            Music89:	incbin	sound\music89.bin; Special Stage
000C7390 00                         		even
000C7390                            Music8A:	incbin	sound\music8A.bin; Title Screen
000C755A                            		even
000C755A                            Music8B:	incbin	sound\music8B.bin; Ending Theme
000C77F4                            		even
000C77F4                            Music8C:	incbin	sound\music8C.bin; VS Boss
000C7A92                            		even
000C7A92                            Music8D:	incbin	sound\music8D.bin; Final Zone
000CDD0A 00                         		even
000CDD0A                            Music8E:	include	sound\merry.asm ; Act Clear
000CDD0A =0000008B                  dMerryWtf1 = dVLowTimpani ; $87
000CDD0A =0000008A                  dMerryWtf2 = dLowTimpani  ; $85
000CDD0A =0000008B                  dMerryWtf3 = dVLowTimpani ; $84
000CDD0A =0000008A                  dMerryClap = dLowTimpani
000CDD0A                            
000CDD0A                            MerrysLittleLamb_Header:
000CDD0A 0000                       	smpsHeaderVoice     MerrysLittleLamb_Voices
000CDD0C 0603                       	smpsHeaderChan      $06, $03
000CDD0E 0100                       	smpsHeaderTempo     $01, $00
000CDD10                            
000CDD14 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM1,	$00, $00
000CDD18 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM2,	$00, $00
000CDD1C 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM3,	$00, $00
000CDD20 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM4,	$00, $00
000CDD24 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM5,	$00, $00
000CDD28 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG1,	$00, $00, $00, $00
000CDD2E 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG2,	$00, $00, $00, $00
000CDD34 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG3,	$00, $00, $00, $00
000CDD3A                            
000CDD3A                            MerrysLittleLamb_FM1:
000CDD3A E0C0                       	smpsPan             panCenter, $00
000CDD3C 807F 7F7F 20               	dc.b	nRst, $7F, $7F, $7F, $20
000CDD43 E60F                       	smpsAlterVol        $0F
000CDD45 A704                       	dc.b	nD3, $04
000CDD47 E606                       	smpsAlterVol        $06
000CDD49 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000CDD4E E6FA                       	smpsAlterVol        $FA
000CDD50 A705                       	dc.b	nD3, $05
000CDD52 E606                       	smpsAlterVol        $06
000CDD54 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000CDD59 E6FA                       	smpsAlterVol        $FA
000CDD5B A704                       	dc.b	nD3, $04
000CDD5D E606                       	smpsAlterVol        $06
000CDD5F A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000CDD65 E6FA                       	smpsAlterVol        $FA
000CDD67 A7                         	dc.b	nD3
000CDD68 E606                       	smpsAlterVol        $06
000CDD6A A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000CDD6F E6FA                       	smpsAlterVol        $FA
000CDD71 A704                       	dc.b	nD3, $04
000CDD73 E606                       	smpsAlterVol        $06
000CDD75 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000CDD7B E6FA                       	smpsAlterVol        $FA
000CDD7D A7                         	dc.b	nD3
000CDD7E E606                       	smpsAlterVol        $06
000CDD80 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000CDD86 E6FA                       	smpsAlterVol        $FA
000CDD88 A705                       	dc.b	nD3, $05
000CDD8A E606                       	smpsAlterVol        $06
000CDD8C A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000CDD91 E6FA                       	smpsAlterVol        $FA
000CDD93 A7                         	dc.b	nD3
000CDD94 E606                       	smpsAlterVol        $06
000CDD96 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000CDD9C E6FA                       	smpsAlterVol        $FA
000CDD9E A705                       	dc.b	nD3, $05
000CDDA0 E606                       	smpsAlterVol        $06
000CDDA2 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000CDDA7 E6FA                       	smpsAlterVol        $FA
000CDDA9 A704                       	dc.b	nD3, $04
000CDDAB E606                       	smpsAlterVol        $06
000CDDAD A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000CDDB2 E6FA                       	smpsAlterVol        $FA
000CDDB4 A705                       	dc.b	nD3, $05
000CDDB6 E606                       	smpsAlterVol        $06
000CDDB8 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000CDDBD E6FA                       	smpsAlterVol        $FA
000CDDBF A704                       	dc.b	nD3, $04
000CDDC1 E606                       	smpsAlterVol        $06
000CDDC3 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000CDDC8 E6FA                       	smpsAlterVol        $FA
000CDDCA A705                       	dc.b	nD3, $05
000CDDCC E606                       	smpsAlterVol        $06
000CDDCE A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000CDDD3 E6FA                       	smpsAlterVol        $FA
000CDDD5 A704                       	dc.b	nD3, $04
000CDDD7 E606                       	smpsAlterVol        $06
000CDDD9 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000CDDDF E6FA                       	smpsAlterVol        $FA
000CDDE1 A7                         	dc.b	nD3
000CDDE2 E606                       	smpsAlterVol        $06
000CDDE4 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000CDDEA E6FA                       	smpsAlterVol        $FA
000CDDEC A705                       	dc.b	nD3, $05
000CDDEE E606                       	smpsAlterVol        $06
000CDDF0 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000CDDF5 E6FA                       	smpsAlterVol        $FA
000CDDF7 A7                         	dc.b	nD3
000CDDF8 E606                       	smpsAlterVol        $06
000CDDFA A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000CDE00 E6FA                       	smpsAlterVol        $FA
000CDE02 A705                       	dc.b	nD3, $05
000CDE04 E606                       	smpsAlterVol        $06
000CDE06 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000CDE0B E6FA                       	smpsAlterVol        $FA
000CDE0D A704                       	dc.b	nD3, $04
000CDE0F E606                       	smpsAlterVol        $06
000CDE11 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000CDE16 E6FA                       	smpsAlterVol        $FA
000CDE18 A705                       	dc.b	nD3, $05
000CDE1A E606                       	smpsAlterVol        $06
000CDE1C A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000CDE21 E6FA                       	smpsAlterVol        $FA
000CDE23 A704                       	dc.b	nD3, $04
000CDE25 E606                       	smpsAlterVol        $06
000CDE27 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000CDE2C E6FA                       	smpsAlterVol        $FA
000CDE2E A705                       	dc.b	nD3, $05
000CDE30 E606                       	smpsAlterVol        $06
000CDE32 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000CDE37 E6FA                       	smpsAlterVol        $FA
000CDE39 A704                       	dc.b	nD3, $04
000CDE3B E606                       	smpsAlterVol        $06
000CDE3D A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000CDE43 E6FA                       	smpsAlterVol        $FA
000CDE45 A7                         	dc.b	nD3
000CDE46 E606                       	smpsAlterVol        $06
000CDE48 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000CDE4D E6FA                       	smpsAlterVol        $FA
000CDE4F A704                       	dc.b	nD3, $04
000CDE51 E606                       	smpsAlterVol        $06
000CDE53 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000CDE59 E6FA                       	smpsAlterVol        $FA
000CDE5B A7                         	dc.b	nD3
000CDE5C E606                       	smpsAlterVol        $06
000CDE5E A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000CDE64 E6FA                       	smpsAlterVol        $FA
000CDE66 A705                       	dc.b	nD3, $05
000CDE68 E606                       	smpsAlterVol        $06
000CDE6A A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000CDE6F E6FA                       	smpsAlterVol        $FA
000CDE71 A704                       	dc.b	nD3, $04
000CDE73 E606                       	smpsAlterVol        $06
000CDE75 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000CDE7A E6FA                       	smpsAlterVol        $FA
000CDE7C A705                       	dc.b	nD3, $05
000CDE7E E606                       	smpsAlterVol        $06
000CDE80 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000CDE85 E6FA                       	smpsAlterVol        $FA
000CDE87 A704                       	dc.b	nD3, $04
000CDE89 E606                       	smpsAlterVol        $06
000CDE8B A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000CDE90 E6FA                       	smpsAlterVol        $FA
000CDE92 A705                       	dc.b	nD3, $05
000CDE94 E606                       	smpsAlterVol        $06
000CDE96 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000CDE9B E6FA                       	smpsAlterVol        $FA
000CDE9D A704                       	dc.b	nD3, $04
000CDE9F E606                       	smpsAlterVol        $06
000CDEA1 A705 A7A7 7FE7 19          	dc.b	nD3, $05, nD3, nD3, $7F, smpsNoAttack, $19
000CDEA8 F2                         	smpsStop
000CDEA9                            
000CDEA9                            MerrysLittleLamb_FM2:
000CDEA9 E0C0                       	smpsPan             panCenter, $00
000CDEAB 807F 7F7F 7F30             	dc.b	nRst, $7F, $7F, $7F, $7F, $30
000CDEB3 E610                       	smpsAlterVol        $10
000CDEB5 A87F E719 807F 7F7F 3E     	dc.b	nEb3, $7F, smpsNoAttack, $19, nRst, $7F, $7F, $7F, $3E
000CDEBE                            
000CDEBE                            MerrysLittleLamb_FM3:
000CDEBE                            MerrysLittleLamb_FM4:
000CDEBE                            MerrysLittleLamb_FM5:
000CDEBE F2                         	smpsStop
000CDEBF                            
000CDEBF                            MerrysLittleLamb_PSG1:
000CDEBF 807F 7F7F 7F06 B701        	dc.b	nRst, $7F, $7F, $7F, $7F, $06, nFs4, $01
000CDEC7 EC02                       	smpsPSGAlterVol     $02
000CDEC9 B7                         	dc.b	nFs4
000CDECA EC03                       	smpsPSGAlterVol     $03
000CDECC B7                         	dc.b	nFs4
000CDECD EC03                       	smpsPSGAlterVol     $03
000CDECF B7                         	dc.b	nFs4
000CDED0 EC03                       	smpsPSGAlterVol     $03
000CDED2 B7                         	dc.b	nFs4
000CDED3 ECF5                       	smpsPSGAlterVol     $F5
000CDED5 B7                         	dc.b	nFs4
000CDED6 EC02                       	smpsPSGAlterVol     $02
000CDED8 B7                         	dc.b	nFs4
000CDED9 EC03                       	smpsPSGAlterVol     $03
000CDEDB B7                         	dc.b	nFs4
000CDEDC EC03                       	smpsPSGAlterVol     $03
000CDEDE B7                         	dc.b	nFs4
000CDEDF ECF8                       	smpsPSGAlterVol     $F8
000CDEE1 B7                         	dc.b	nFs4
000CDEE2 EC02                       	smpsPSGAlterVol     $02
000CDEE4 B7                         	dc.b	nFs4
000CDEE5 EC03                       	smpsPSGAlterVol     $03
000CDEE7 B7                         	dc.b	nFs4
000CDEE8 EC03                       	smpsPSGAlterVol     $03
000CDEEA B7                         	dc.b	nFs4
000CDEEB EC03                       	smpsPSGAlterVol     $03
000CDEED B7                         	dc.b	nFs4
000CDEEE ECF5                       	smpsPSGAlterVol     $F5
000CDEF0 B7                         	dc.b	nFs4
000CDEF1 EC02                       	smpsPSGAlterVol     $02
000CDEF3 B7                         	dc.b	nFs4
000CDEF4 EC03                       	smpsPSGAlterVol     $03
000CDEF6 B7                         	dc.b	nFs4
000CDEF7 EC03                       	smpsPSGAlterVol     $03
000CDEF9 B7                         	dc.b	nFs4
000CDEFA EC03                       	smpsPSGAlterVol     $03
000CDEFC B7                         	dc.b	nFs4
000CDEFD ECF5                       	smpsPSGAlterVol     $F5
000CDEFF B7                         	dc.b	nFs4
000CDF00 EC02                       	smpsPSGAlterVol     $02
000CDF02 B7                         	dc.b	nFs4
000CDF03 EC06                       	smpsPSGAlterVol     $06
000CDF05 B7                         	dc.b	nFs4
000CDF06 EC03                       	smpsPSGAlterVol     $03
000CDF08 B7                         	dc.b	nFs4
000CDF09 ECF5                       	smpsPSGAlterVol     $F5
000CDF0B B7                         	dc.b	nFs4
000CDF0C EC02                       	smpsPSGAlterVol     $02
000CDF0E B7                         	dc.b	nFs4
000CDF0F EC03                       	smpsPSGAlterVol     $03
000CDF11 B7                         	dc.b	nFs4
000CDF12 EC03                       	smpsPSGAlterVol     $03
000CDF14 B7                         	dc.b	nFs4
000CDF15 EC03                       	smpsPSGAlterVol     $03
000CDF17 B7                         	dc.b	nFs4
000CDF18 ECF5                       	smpsPSGAlterVol     $F5
000CDF1A B7                         	dc.b	nFs4
000CDF1B EC02                       	smpsPSGAlterVol     $02
000CDF1D B7                         	dc.b	nFs4
000CDF1E EC03                       	smpsPSGAlterVol     $03
000CDF20 B7                         	dc.b	nFs4
000CDF21 EC03                       	smpsPSGAlterVol     $03
000CDF23 B7                         	dc.b	nFs4
000CDF24 EC03                       	smpsPSGAlterVol     $03
000CDF26 B780 7F2B                  	dc.b	nFs4, nRst, $7F, $2B
000CDF2A ECF7                       	smpsPSGAlterVol     $F7
000CDF2C A008 8006 9E08 8006 A308+  	dc.b	nG2, $08, nRst, $06, nF2, $08, nRst, $06, nBb2, $08, nRst, $0A
000CDF38 A006 8004 A005 8004 A205+  	dc.b	nG2, $06, nRst, $04, nG2, $05, nRst, $04, nA2, $05, nRst, $04
000CDF44 A005 8004 A208 8001 A305+  	dc.b	nG2, $05, nRst, $04, nA2, $08, nRst, $01, nBb2, $05, nRst, $01
000CDF50 A305 8003 A305 8001 A304+  	dc.b	nBb2, $05, nRst, $03, nBb2, $05, nRst, $01, nBb2, $04, nRst, nBb2
000CDF5C 0580 01A3 0480 A308 807F+  	dc.b	$05, nRst, $01, nBb2, $04, nRst, nBb2, $08, nRst, $7F, $7F, $26
000CDF68 F2                         	smpsStop
000CDF69                            
000CDF69                            MerrysLittleLamb_PSG2:
000CDF69 807F 7F7F 7F7F 52          	dc.b	nRst, $7F, $7F, $7F, $7F, $7F, $52
000CDF70 EC02                       	smpsPSGAlterVol     $02
000CDF72 A708 8006 A908 8006 A908+  	dc.b	nD3, $08, nRst, $06, nE3, $08, nRst, $06, nE3, $08, nRst, $0A
000CDF7E E101                       	smpsAlterNote       $01
000CDF80 AB06 8004                  	dc.b	nFs3, $06, nRst, $04
000CDF84 E101                       	smpsAlterNote       $01
000CDF86 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000CDF8A E101                       	smpsAlterNote       $01
000CDF8C AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000CDF90 E101                       	smpsAlterNote       $01
000CDF92 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000CDF96 E101                       	smpsAlterNote       $01
000CDF98 AB08 8001                  	dc.b	nFs3, $08, nRst, $01
000CDF9C E101                       	smpsAlterNote       $01
000CDF9E AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000CDFA2 E101                       	smpsAlterNote       $01
000CDFA4 AB05 8003                  	dc.b	nFs3, $05, nRst, $03
000CDFA8 E101                       	smpsAlterNote       $01
000CDFAA AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000CDFAE E101                       	smpsAlterNote       $01
000CDFB0 AB04 80                    	dc.b	nFs3, $04, nRst
000CDFB3 E101                       	smpsAlterNote       $01
000CDFB5 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000CDFB9 E101                       	smpsAlterNote       $01
000CDFBB AB04 80                    	dc.b	nFs3, $04, nRst
000CDFBE E101                       	smpsAlterNote       $01
000CDFC0 AB08 807F 7F26             	dc.b	nFs3, $08, nRst, $7F, $7F, $26
000CDFC6 F2                         	smpsStop
000CDFC7                            
000CDFC7                            MerrysLittleLamb_PSG3:
000CDFC7 807F 7F7F 7F39             	dc.b	nRst, $7F, $7F, $7F, $7F, $39
000CDFCD F3E7                       	smpsPSGform         $E7
000CDFCF E108                       	smpsAlterNote       $08
000CDFD1 0002                       	dc.b	nMaxPSG, $02
000CDFD3 EC01                       	smpsPSGAlterVol     $01
000CDFD5 E108                       	smpsAlterNote       $08
000CDFD7 0005                       	dc.b	nMaxPSG, $05
000CDFD9 EC01                       	smpsPSGAlterVol     $01
000CDFDB E108                       	smpsAlterNote       $08
000CDFDD 0008                       	dc.b	nMaxPSG, $08
000CDFDF EC01                       	smpsPSGAlterVol     $01
000CDFE1 E108                       	smpsAlterNote       $08
000CDFE3 00                         	dc.b	nMaxPSG
000CDFE4 EC01                       	smpsPSGAlterVol     $01
000CDFE6 E108                       	smpsAlterNote       $08
000CDFE8 00                         	dc.b	nMaxPSG
000CDFE9 EC01                       	smpsPSGAlterVol     $01
000CDFEB E108                       	smpsAlterNote       $08
000CDFED 0007                       	dc.b	nMaxPSG, $07
000CDFEF EC01                       	smpsPSGAlterVol     $01
000CDFF1 E108                       	smpsAlterNote       $08
000CDFF3 0005                       	dc.b	nMaxPSG, $05
000CDFF5 EC01                       	smpsPSGAlterVol     $01
000CDFF7 E108                       	smpsAlterNote       $08
000CDFF9 0007                       	dc.b	nMaxPSG, $07
000CDFFB EC01                       	smpsPSGAlterVol     $01
000CDFFD E108                       	smpsAlterNote       $08
000CDFFF 0004                       	dc.b	nMaxPSG, $04
000CE001 EC01                       	smpsPSGAlterVol     $01
000CE003 E108                       	smpsAlterNote       $08
000CE005 0007                       	dc.b	nMaxPSG, $07
000CE007 EC01                       	smpsPSGAlterVol     $01
000CE009 E108                       	smpsAlterNote       $08
000CE00B 0006                       	dc.b	nMaxPSG, $06
000CE00D EC01                       	smpsPSGAlterVol     $01
000CE00F E108                       	smpsAlterNote       $08
000CE011 0009                       	dc.b	nMaxPSG, $09
000CE013 EC01                       	smpsPSGAlterVol     $01
000CE015 E108                       	smpsAlterNote       $08
000CE017 0007                       	dc.b	nMaxPSG, $07
000CE019 EC01                       	smpsPSGAlterVol     $01
000CE01B E108                       	smpsAlterNote       $08
000CE01D 0001                       	dc.b	nMaxPSG, $01
000CE01F ECFF                       	smpsPSGAlterVol     $FF
000CE021 E108                       	smpsAlterNote       $08
000CE023 00                         	dc.b	nMaxPSG
000CE024 EC01                       	smpsPSGAlterVol     $01
000CE026 E108                       	smpsAlterNote       $08
000CE028 0009                       	dc.b	nMaxPSG, $09
000CE02A EC01                       	smpsPSGAlterVol     $01
000CE02C E108                       	smpsAlterNote       $08
000CE02E 0007 807F 7F7F 68          	dc.b	nMaxPSG, $07, nRst, $7F, $7F, $7F, $68
000CE035 F2                         	smpsStop
000CE036                            
000CE036                            MerrysLittleLamb_DAC:
000CE036 8913 8A06 8B0D 8A89 8989+  	dc.b	dMidTimpani, $13, dLowTimpani, $06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, $1A, dLowTimpani
000CE042 0D8A 8A19 890D 8888 1A89+  	dc.b	$0D, dLowTimpani, dLowTimpani, $19, dMidTimpani, $0D, dHiTimpani, dHiTimpani, $1A, dMidTimpani, $14, dLowTimpani
000CE04E 068B 0D8A 8989 898A 0C8A+  	dc.b	$06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, dLowTimpani, $0C, dLowTimpani, $0D, dLowTimpani
000CE05A 898A 8B34 890E 8A04 8B09+  	dc.b	dMidTimpani, dLowTimpani, dMerryWtf1, $34, dMidTimpani, $0E, dLowTimpani, $04, dVLowTimpani, $09, dLowTimpani, $0A
000CE066 8909 8989 8A0A 8A09 8A8A+  	dc.b	dMidTimpani, $09, dMidTimpani, dMidTimpani, dMerryWtf2, $0A, dLowTimpani, $09, dLowTimpani, dLowTimpani, dMerryWtf3, dMidTimpani
000CE072 0A88 0988 8289 0581 098A+  	dc.b	$0A, dHiTimpani, $09, dHiTimpani, dSnare, dMidTimpani, $05, dKick, $09, dLowTimpani, $05, dVLowTimpani
000CE07E 098A 8989 0A89 098A 8805+  	dc.b	$09, dLowTimpani, dMidTimpani, dMidTimpani, $0A, dMidTimpani, $09, dLowTimpani, dHiTimpani, $05, dMidTimpani, $04
000CE08A 8A0A 8909 8A82 0182 0482+  	dc.b	dLowTimpani, $0A, dMidTimpani, $09, dLowTimpani, dSnare, $01, dSnare, $04, dSnare, $01, dSnare
000CE096 0382 0181 0481 0182 0382+  	dc.b	$03, dSnare, $01, dKick, $04, dKick, $01, dSnare, $03, dSnare, $01, dKick
000CE0A2 0481 0182 0482 0181 0381+  	dc.b	$04, dKick, $01, dSnare, $04, dSnare, $01, dKick, $03, dKick, $01, dSnare
000CE0AE 0489 0582 0482 058A 048B+  	dc.b	$04, dMidTimpani, $05, dSnare, $04, dSnare, $05, dLowTimpani, $04, dVLowTimpani, $05, dSnare
000CE0BA 8A04 8205 8904 8205 8982+  	dc.b	dLowTimpani, $04, dSnare, $05, dMidTimpani, $04, dSnare, $05, dMidTimpani, dSnare, $04, dMidTimpani
000CE0C6 0582 8A04 8205 8A04 8205+  	dc.b	$05, dSnare, dMerryWtf2, $04, dSnare, $05, dLowTimpani, $04, dSnare, $05, dLowTimpani, dSnare
000CE0D2 048A 0582 0486 0582 8904+  	dc.b	$04, dLowTimpani, $05, dSnare, $04, $86, $05, dSnare, dMidTimpani, $04, dSnare, $05
000CE0DE 8804 8205 8882 0482 0582+  	dc.b	dHiTimpani, $04, dSnare, $05, dHiTimpani, dSnare, $04, dSnare, $05, dSnare, dMidTimpani, $04
000CE0EA 8205 8204 8A05 8B82 048A+  	dc.b	dSnare, $05, dSnare, $04, dLowTimpani, $05, dVLowTimpani, dSnare, $04, dLowTimpani, $05, dSnare
000CE0F6 0489 0582 8909 8904 8205+  	dc.b	$04, dMidTimpani, $05, dSnare, dMidTimpani, $09, dMidTimpani, $04, dSnare, $05, dLowTimpani, $09
000CE102 8801 8804 8801 8904 8988+  	dc.b	dHiTimpani, $01, dHiTimpani, $04, dHiTimpani, $01, dMidTimpani, $04, dMidTimpani, dHiTimpani, $01, dHiTimpani
000CE10E 0488 0189 0389 0189 0488+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dHiTimpani, $01, dHiTimpani
000CE11A 0488 0189 0389 0189 048A+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dMerryClap, $01, dMerryClap
000CE126 038A 018B 048B 018B 0482+  	dc.b	$03, dMerryClap, $01, dVLowTimpani, $04, dVLowTimpani, $01, dVLowTimpani, $04, dSnare, $01, dKick
000CE132 0381 0182 0482 0181 0482+  	dc.b	$03, dKick, $01, dSnare, $04, dSnare, $01, dKick, $04, dSnare, $7F, nRst
000CE13E F2                         	smpsStop
000CE13F                            
000CE13F                            MerrysLittleLamb_Voices:
000CE13F                            ;	Voice $00
000CE13F                            ;	$00
000CE13F                            ;	$70, $70, $70, $70, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $1F
000CE13F                            ;	$00, $00, $00, $12, 	$F0, $F0, $F0, $0F, 	$00, $00, $00, $00
000CE13F                            	smpsVcAlgorithm     $00
000CE13F                            	smpsVcFeedback      $00
000CE13F                            	smpsVcUnusedBits    $00
000CE13F                            	smpsVcDetune        $07, $07, $07, $07
000CE13F                            	smpsVcCoarseFreq    $00, $00, $00, $00
000CE13F                            	smpsVcRateScale     $00, $00, $00, $00
000CE13F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000CE13F                            	smpsVcAmpMod        $00, $00, $00, $00
000CE13F                            	smpsVcDecayRate1    $1F, $00, $00, $00
000CE13F                            	smpsVcDecayRate2    $12, $00, $00, $00
000CE13F                            	smpsVcDecayLevel    $00, $0F, $0F, $0F
000CE13F                            	smpsVcReleaseRate   $0F, $00, $00, $00
000CE13F 0070 7070 701F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000CE158                            
000CE158                            ;	Voice $01
000CE158                            ;	$25
000CE158                            ;	$01, $01, $01, $71, 	$1E, $1E, $1E, $1E, 	$08, $06, $0B, $03
000CE158                            ;	$00, $00, $00, $00, 	$4F, $4F, $AF, $0F, 	$08, $16, $06, $00
000CE158                            	smpsVcAlgorithm     $05
000CE158                            	smpsVcFeedback      $04
000CE158                            	smpsVcUnusedBits    $00
000CE158                            	smpsVcDetune        $07, $00, $00, $00
000CE158                            	smpsVcCoarseFreq    $01, $01, $01, $01
000CE158                            	smpsVcRateScale     $00, $00, $00, $00
000CE158                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000CE158                            	smpsVcAmpMod        $00, $00, $00, $00
000CE158                            	smpsVcDecayRate1    $03, $0B, $06, $08
000CE158                            	smpsVcDecayRate2    $00, $00, $00, $00
000CE158                            	smpsVcDecayLevel    $00, $0A, $04, $04
000CE158                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CE158 2501 0101 711E 1E1E 1E08+  	smpsVcTotalLevel    $00, $06, $16, $08
000CE171                            
000CE171                            
000CE172 00                         		even
000CE172                            Music8F:	incbin	sound\music8F.bin ; Game Over
000CE7B2 00                         		even
000CE7B2                            Music90:	incbin	sound\music90.bin ; Continue
000CEB4C 00                         		even
000CEB4C                            Music91:	include	sound\mus91.asm ; Megurine Luka I mean Credits
000CEB4C                            Mus91_Credits_Header:
000CEB4C =00000001                  smpsHeaderStartSong = 1
000CEB4C 0000                       	smpsHeaderVoice     Mus91_Credits_Voices
000CEB4E 0603                       	smpsHeaderChan      $06, $03
000CEB50 0133                       	smpsHeaderTempo     $01, $33
000CEB52                            
000CEB56 0000 F412                  	smpsHeaderFM        Mus91_Credits_FM1,	$F4, $12
000CEB5A 0000 000B                  	smpsHeaderFM        Mus91_Credits_FM2,	$00, $0B
000CEB5E 0000 F414                  	smpsHeaderFM        Mus91_Credits_FM3,	$F4, $14
000CEB62 0000 F408                  	smpsHeaderFM        Mus91_Credits_FM4,	$F4, $08
000CEB66 0000 F420                  	smpsHeaderFM        Mus91_Credits_FM5,	$F4, $20
000CEB6A 0000 D001 0000             	smpsHeaderPSG       Mus91_Credits_PSG1,	$D0, $01, $00, $00
000CEB70 0000 D003 0000             	smpsHeaderPSG       Mus91_Credits_PSG2,	$D0, $03, $00, $00
000CEB76 0000 0003 0004             	smpsHeaderPSG       Mus91_Credits_PSG3,	$00, $03, $00, fTone_04
000CEB7C                            ;	this is just a rip of the track
000CEB7C                            ;	ripper, 	part,		joke
000CEB7C                            ;	undecided, 	intro,		undecided
000CEB7C                            ;	coninight, 	ghz,		luka luka night fever -FM1 done
000CEB7C                            ;	coninight, 	lz,		the cleveland show (callback) - COMPLETE!
000CEB7C                            ;	undecided, 	mz,		undecided
000CEB7C                            ;	carlos, 	slz,		meltdown
000CEB7C                            ;	undecided, 	sbz,		undecided
000CEB7C                            ;	undecided, 	ccz,		undecided
000CEB7C                            ;	undecided, 	ending,		undecided
000CEB7C                            
000CEB7C                            ; FM1 Data
000CEB7C                            Mus91_Credits_FM1:
000CEB7C E201                       	smpsNop             $01
000CEB7E 8060                       	dc.b	nRst, $60
000CEB82 E6F8                       	smpsAlterVol        $F8
000CEB84 E806                       	smpsNoteFill        $06
000CEB86 F800 00                    	smpsCall            Mus91_Credits_Call11
000CEB89 E0C0                       	smpsPan             panCenter, $00
000CEB8B E800                       	smpsNoteFill        $00
000CEB8F F00D 0107 04               	smpsModSet          $0D, $01, $07, $04
000CEB94                            ; conis turn
000CEB94 F800 00                    	smpsCall            Mus91_Credits_Call12	;ruka ruka
000CEB97 C40C C5C7 18C5 30          	dc.b	nG5, $0C, nAb5, nBb5, $18, nAb5, $30	;โ naito fiibaa
000CEB9E                            
000CEB9E F800 00                    	smpsCall            Mus91_Credits_Call12	;watashi wa 
000CEBA1 CC0C CAC9 CA               	dc.b	nEb6, $0C, nCs6, nC6, nCs6		;koko ni
000CEBA6 C9C9 C7C5 80               	dc.b	nC6, nC6, nBb5, nAb5, nRst		;iru kara
000CEBAB                            
000CEBAB C2C2 C4C5 C718             	dc.b	nF5, nF5, nG5, nAb5, nBb5, $18		;sukoshi de mo
000CEBB1 C4C5 0CC7 18C5 80          	dc.b	nG5, nAb5, $0C, nBb5, $18, nAb5, nRst	;shisen o
000CEBB8                            
000CEBB8 C2C4 C5C7 0C               	dc.b	nF5, nG5, nAb5, nBb5, $0C		;sorashicha
000CEBBD F800 00                    	smpsCall           Mus91_Credits_DameDameYo	;dame dame yo
000CEBC0 8060 6060 18               	dc.b	nRst, $60, $60, $60, $18
000CEBC5 F800 00                    	smpsCall           Mus91_Credits_DameDameYo	;dame dame yo
000CEBC8                            ;	dc.b	nRst, $30
000CEBC8                            ; conis turn again
000CEBC8 F4                         	smpsModOff
000CEBC9 E201                       	smpsNop             $01
000CEBCD E602                       	smpsAlterVol        $02
000CEBCF C10C C4C1                  	dc.b	nE5, $0C, nG5, nE5			;My name is
000CEBD3                            ;cut for tempo change
000CEBD3 EA0F                       	smpsSetTempoMod     $0F
000CEBD5                            ;perfect now continue
000CEBD5 C409 C4C6 0C               	dc.b	nG5, $09, nG5, nA5, $0C			;Cleveland Brown
000CEBDA                            
000CEBDA C106 C103 BFBD 06          	dc.b	nE5, $06, nE5, $03, nD5, nC5, $06	;and I am
000CEBE1 BD09 BDBA 0680             	dc.b	nC5, $09, nC5, nA4, $06, nRst		;proud to be
000CEBE7                            
000CEBE7 CD06 CBC8                  	dc.b	nE6, $06, nD6, nB5			; and silence
000CEBEB CB09 C9C6 0C               	dc.b	nD6, $09, nC6, nA5, $0C
000CEBF0                            
000CEBF0 C806 C603 C4C6 06          	dc.b	nB5, $06, nA5, $03, nG5, nA5, $06
000CEBF7 C609 C6C8 0680 0C          	dc.b	nA5, $09, nA5, nB5, $06, nRst, $0C
000CEBFE                            
000CEBFE C9CB 04C9 CBC9 24          	dc.b	nC6, nD6, $04, nC6, nD6, nC6, $24	;welcome back to labyrinth zone from sonic 1
000CEC05 E9F4                       	smpsAlterPitch      $F4
000CEC07 E609                       	smpsAlterVol        $09
000CEC0B 8018 C606 C8C9 CD          	dc.b	nRst, $18, nA5, $06, nB5, nC6, nE6
000CEC12 F800 00                    	smpsCall            Mus91_Credits_Call0C
000CEC17 E6EB                       	smpsAlterVol        $EB
000CEC19 800C C4C6 D0               	dc.b	nRst, $0C, nG5, nA5, nG6
000CEC1E F800 00                    	smpsCall            Mus91_Credits_Call0D
000CEC21 CD1E D906 D518 8024        	dc.b	nE6, $1E, nE7, $06, nC7, $18, nRst, $24
000CEC29 E201                       	smpsNop             $01
000CEC2B EA0A                       	smpsSetTempoMod     $0A
000CEC2F E90C                       	smpsAlterPitch      $0C
000CEC31 E60B                       	smpsAlterVol        $0B
000CEC33 F800 00                    	smpsCall            Mus91_Credits_Call0E
000CEC36 E201                       	smpsNop             $01
000CEC38 EA07                       	smpsSetTempoMod     $07
000CEC3A 8060                       	dc.b	nRst, $60
000CEC3C E201                       	smpsNop             $01
000CEC3E EA03                       	smpsSetTempoMod     $03
000CEC40 8030                       	dc.b	nRst, $30
000CEC44 E60E                       	smpsAlterVol        $0E
000CEC46 8004 CE08 CD03 80CB 80C9+  	dc.b	nRst, $04, nF6, $08, nE6, $03, nRst, nD6, nRst, nC6, nRst, nD6
000CEC52 80C9 04C6 8002 C780 04C7+  	dc.b	nRst, nC6, $04, nA5, nRst, $02, nBb5, nRst, $04, nBb5, $08, nC6
000CEC5E 0380 C780 C604 C780 02C9+  	dc.b	$03, nRst, nBb5, nRst, nA5, $04, nBb5, nRst, $02, nC6, $0E, nRst
000CEC6A 06CD 0280 04CD 0CCE CD0A+  	dc.b	$06, nE6, $02, nRst, $04, nE6, $0C, nF6, nE6, $0A, nD6, $02
000CEC76 E201                       	smpsNop             $01
000CEC78 EA04                       	smpsSetTempoMod     $04
000CEC7A E6F5                       	smpsAlterVol        $F5
000CEC7E 8060                       	dc.b	nRst, $60
000CEC80 F800 00                    	smpsCall            Mus91_Credits_Call07
000CEC83 E609                       	smpsAlterVol        $09
000CEC85 E103                       	smpsAlterNote       $03
000CEC89 F000 0106 04               	smpsModSet          $00, $01, $06, $04
000CEC8E F800 00                    	smpsCall            Mus91_Credits_Call0B
000CEC91 E6EF                       	smpsAlterVol        $EF
000CEC95 E102                       	smpsAlterNote       $02
000CEC97 966C E760                  	dc.b	nA1, $6C, smpsNoAttack, $60
000CEC9B E201                       	smpsNop             $01
000CEC9D F2                         	smpsStop
000CEC9E                            
000CEC9E                            Mus91_Credits_Call12:
000CEC9E                            	;whats the name of the pink haired vocaloid just askin'
000CEC9E                            	;and twice as well
000CEC9E                            	;them:
000CEC9E C218 C9C2 C9               	dc.b	nF5, $18, nC6, nF5, nC6
000CECA3 E3                         	smpsReturn
000CECA4                            
000CECA4                            Mus91_Credits_DameDameYo:
000CECA4 C418 C50C C4C5 C2          	dc.b	nG5, $18, nAb5, $0C, nG5, nAb5, nF5	
000CECAB E3                         	smpsReturn
000CECAC                            
000CECAC                            Mus91_Credits_Call07:
000CECAC 800C CA15 8003 CA06 80CB+  	dc.b	nRst, $0C, nCs6, $15, nRst, $03, nCs6, $06, nRst, nD6, $0F, nRst
000CECB8 03C8 1880 06CA 0680 CA80+  	dc.b	$03, nB5, $18, nRst, $06, nCs6, $06, nRst, nCs6, nRst, nCs6, nRst
000CECC4 C680 C40F 8003 C818 8006   	dc.b	nA5, nRst, nG5, $0F, nRst, $03, nB5, $18, nRst, $06
000CECCE F700 02FF DA               	smpsLoop            $00, $02, Mus91_Credits_Call07
000CECD3 E3                         	smpsReturn
000CECD4                            
000CECD4                            ; FM2 Data
000CECD4                            Mus91_Credits_FM2:
000CECD4 8060                       	dc.b	nRst, $60
000CECD8                            
000CECD8                            Mus91_Credits_Loop0F:
000CECD8 A70C A7B0 B0AC ACAE AEA7+  	dc.b	nD3, $0C, nD3, nB3, nB3, nG3, nG3, nA3, nA3, nD3, nD3, nA3
000CECE4 AEAB ABAC ACA5 A5AC ACAB+  	dc.b	nA3, nFs3, nFs3, nG3, nG3, nC3, nC3, nG3, nG3, nFs3, nFs3, nG3
000CECF0 ACA2 A2A2 A2A7 A7A7 A9     	dc.b	nG3, nA2, nA2, nA2, nA2, nD3, nD3, nD3, nE3
000CECF9 F700 02FF DB               	smpsLoop            $00, $02, Mus91_Credits_Loop0F
000CED00                            
000CED00                            Mus91_Credits_Loop10:
000CED00 E805                       	smpsNoteFill        $05
000CED02 AA0C                       	dc.b	nF3, $0C
000CED04 F800 00                    	smpsCall            Mus91_Credits_Call0F
000CED07 E805                       	smpsNoteFill        $05
000CED09 A90C 0C0C 0C0C             	dc.b	nE3, $0C, $0C, $0C, $0C, $0C
000CED0F E800                       	smpsNoteFill        $00
000CED11 A5A7 A9                    	dc.b	nC3, nD3, nE3
000CED14 F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop10
000CED19 E805                       	smpsNoteFill        $05
000CED1B AA                         	dc.b	nF3
000CED1C F800 00                    	smpsCall            Mus91_Credits_Call0F
000CED1F E805                       	smpsNoteFill        $05
000CED21 A9                         	dc.b	nE3
000CED22 F800 00                    	smpsCall            Mus91_Credits_Call0F
000CED25 E805                       	smpsNoteFill        $05
000CED27 A7                         	dc.b	nD3
000CED28 F800 00                    	smpsCall            Mus91_Credits_Call0F
000CED2B E805                       	smpsNoteFill        $05
000CED2D A50C 0C0C 0C0C             	dc.b	nC3, $0C, $0C, $0C, $0C, $0C
000CED33 E800                       	smpsNoteFill        $00
000CED35 A0A2 A4                    	dc.b	nG2, nA2, nB2
000CED38 E805                       	smpsNoteFill        $05
000CED3A                            
000CED3A                            Mus91_Credits_Loop11:
000CED3A A5                         	dc.b	nC3
000CED3B F700 18FF FB               	smpsLoop            $00, $18, Mus91_Credits_Loop11
000CED40 E800                       	smpsNoteFill        $00
000CED42 A506 80A5 0CA2 0680 A20C+  	dc.b	nC3, $06, nRst, nC3, $0C, nA2, $06, nRst, nA2, $0C, nBb2, $06
000CED4E 80A3 0CA4 0680 A40C        	dc.b	nRst, nBb2, $0C, nB2, $06, nRst, nB2, $0C
000CED58 E9E8                       	smpsAlterPitch      $E8
000CED5A E602                       	smpsAlterVol        $02
000CED5C                            
000CED5C                            Mus91_Credits_Loop12:
000CED5C B10F 8003 B580 B809 8003+  	dc.b	nC4, $0F, nRst, $03, nE4, nRst, nG4, $09, nRst, $03, nA4, $09
000CED68 8003 BC0F 8003 BA80 B809+  	dc.b	nRst, $03, nB4, $0F, nRst, $03, nA4, nRst, nG4, $09, nRst, $03
000CED74 B509 8003                  	dc.b	nE4, $09, nRst, $03
000CED78 E905                       	smpsAlterPitch      $05
000CED7A F700 02FF DE               	smpsLoop            $00, $02, Mus91_Credits_Loop12
000CED7F E9F6                       	smpsAlterPitch      $F6
000CED81 B10F 8003 B580 B809 8003+  	dc.b	nC4, $0F, nRst, $03, nE4, nRst, nG4, $09, nRst, $03, nE4, $09
000CED8D 8003 B106 8012 B518        	dc.b	nRst, $03, nC4, $06, nRst, $12, nE4, $18
000CED95 E601                       	smpsAlterVol        $01
000CED99                            
000CED99                            Mus91_Credits_Loop13:
000CED99 AE03 80AE 06B5 0380 B506+  	dc.b	nA3, $03, nRst, nA3, $06, nE4, $03, nRst, nE4, $06, nD4, $03
000CEDA5 80B3 06B5 0380 B506        	dc.b	nRst, nD4, $06, nE4, $03, nRst, nE4, $06
000CEDAD F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop13
000CEDB2                            
000CEDB2                            Mus91_Credits_Loop14:
000CEDB2 B303 80B3 06BA 0380 BA06+  	dc.b	nD4, $03, nRst, nD4, $06, nA4, $03, nRst, nA4, $06, nF4, $03
000CEDBE 80B6 06BA 0380 BA06        	dc.b	nRst, nF4, $06, nA4, $03, nRst, nA4, $06
000CEDC6 F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop14
000CEDCB B003 80B0 06B6 0380 B606+  	dc.b	nB3, $03, nRst, nB3, $06, nF4, $03, nRst, nF4, $06, nD4, $03
000CEDD7 80B3 06B6 0380 B606 B503+  	dc.b	nRst, nD4, $06, nF4, $03, nRst, nF4, $06, nE4, $03, nRst, nE4
000CEDE3 06BC 0380 BC06 B903 80B9+  	dc.b	$06, nB4, $03, nRst, nB4, $06, nAb4, $03, nRst, nAb4, $06, nB4
000CEDEF 0380 BC06 AE03 80AE 06B5+  	dc.b	$03, nRst, nB4, $06, nA3, $03, nRst, nA3, $06, nE4, $03, nRst
000CEDFB B506 B103 80B1 06B5 0380+  	dc.b	nE4, $06, nC4, $03, nRst, nC4, $06, nE4, $03, nRst, nE4, $06
000CEE07 AE03 8009 8024             	dc.b	nA3, $03, nRst, $09, nRst, $24
000CEE0D E6F8                       	smpsAlterVol        $F8
000CEE0F B106 8003 B180 06B1 1280+  	dc.b	nC4, $06, nRst, $03, nC4, nRst, $06, nC4, $12, nRst, $06, nC4
000CEE1B 0280 01B1 0280 01AF 0680+  	dc.b	$02, nRst, $01, nC4, $02, nRst, $01, nBb3, $06, nRst, $03, nBb3
000CEE27 0380 06AE 1280 06AE 0280+  	dc.b	$03, nRst, $06, nA3, $12, nRst, $06, nA3, $02, nRst, $01, nA3
000CEE33 0280 01                    	dc.b	$02, nRst, $01
000CEE36                            
000CEE36                            Mus91_Credits_Loop15:
000CEE36 B306 8003 B306 8003 B302+  	dc.b	nD4, $06, nRst, $03, nD4, $06, nRst, $03, nD4, $02, nRst, $01
000CEE42 B302 8001                  	dc.b	nD4, $02, nRst, $01
000CEE46 E9FF                       	smpsAlterPitch      $FF
000CEE48 F700 04FF EA               	smpsLoop            $00, $04, Mus91_Credits_Loop15
000CEE4D E904                       	smpsAlterPitch      $04
000CEE4F AC06 8003 AC80 06AC 1280+  	dc.b	nG3, $06, nRst, $03, nG3, nRst, $06, nG3, $12, nRst, $06, nG3
000CEE5B 0280 01AC 0280 01B0 0680+  	dc.b	$02, nRst, $01, nG3, $02, nRst, $01, nB3, $06, nRst, $03, nB3
000CEE67 8006 B012 8006 B302 8001+  	dc.b	nRst, $06, nB3, $12, nRst, $06, nD4, $02, nRst, $01, nB3, $02
000CEE73 8001 B106 8003 B180 06B1+  	dc.b	nRst, $01, nC4, $06, nRst, $03, nC4, nRst, $06, nC4, $12, nRst
000CEE7F 06B5 0280 01B6 0280 01B8+  	dc.b	$06, nE4, $02, nRst, $01, nF4, $02, nRst, $01, nG4, $06, nRst
000CEE8B AC24                       	dc.b	nG3, $24
000CEE8F E90C                       	smpsAlterPitch      $0C
000CEE91 E607                       	smpsAlterVol        $07
000CEE93 E806                       	smpsNoteFill        $06
000CEE95                            
000CEE95                            Mus91_Credits_Loop16:
000CEE95 F800 00                    	smpsCall            Mus91_Credits_Call10
000CEE98 E906                       	smpsAlterPitch      $06
000CEE9A F800 00                    	smpsCall            Mus91_Credits_Call10
000CEE9D E9FF                       	smpsAlterPitch      $FF
000CEE9F F800 00                    	smpsCall            Mus91_Credits_Call10
000CEEA2 E902                       	smpsAlterPitch      $02
000CEEA4 F800 00                    	smpsCall            Mus91_Credits_Call10
000CEEA7 E9F9                       	smpsAlterPitch      $F9
000CEEA9 F702 02FF E8               	smpsLoop            $02, $02, Mus91_Credits_Loop16
000CEEAE E800                       	smpsNoteFill        $00
000CEEB0 E9F4                       	smpsAlterPitch      $F4
000CEEB2 E6FC                       	smpsAlterVol        $FC
000CEEB6 8030 8030 BA03 80BA 80B8+  	dc.b	nRst, $30, nRst, $30, nA4, $03, nRst, nA4, nRst, nG4, nRst, nG4
000CEEC2 80B6 80B6 80B5 80B5 0280+  	dc.b	nRst, nF4, nRst, nF4, nRst, nE4, nRst, nE4, $02, nRst, nBb4
000CEECD E602                       	smpsAlterVol        $02
000CEECF 8004 BB08 BD03 80BB 80BA+  	dc.b	nRst, $04, nBb4, $08, nC5, $03, nRst, nBb4, nRst, nA4, $06, nRst
000CEEDB BB04 BA80 02B8 8004 B808+  	dc.b	nBb4, $04, nA4, nRst, $02, nG4, nRst, $04, nG4, $08, nA4, $03
000CEEE7 80B8 80B6 80B6 80B8 04B6+  	dc.b	nRst, nG4, nRst, nF4, nRst, nF4, nRst, nG4, $04, nF4, nRst, $02
000CEEF3 B580 04B5 08B5 0380 B580+  	dc.b	nE4, nRst, $04, nE4, $08, nE4, $03, nRst, nE4, nRst, nA4, $09
000CEEFF 8003 BA0A B302             	dc.b	nRst, $03, nA4, $0A, nD4, $02
000CEF05 E90C                       	smpsAlterPitch      $0C
000CEF07 E6FE                       	smpsAlterVol        $FE
000CEF0B 8060                       	dc.b	nRst, $60
000CEF0D                            
000CEF0D                            Mus91_Credits_Loop17:
000CEF0D AE06 80AE 80A9 80A9 80AC+  	dc.b	nA3, $06, nRst, nA3, nRst, nE3, nRst, nE3, nRst, nG3, $12, nFs3
000CEF19 0CAC 06AB 0CAE 0680 AE80+  	dc.b	$0C, nG3, $06, nFs3, $0C, nA3, $06, nRst, nA3, nRst, nE3, nRst
000CEF25 A980 B312 B20C B306 B20C   	dc.b	nE3, nRst, nD4, $12, nCs4, $0C, nD4, $06, nCs4, $0C
000CEF2F F700 02FF DA               	smpsLoop            $00, $02, Mus91_Credits_Loop17
000CEF34 AC06 80A9 80AA 80AB 80AC+  	dc.b	nG3, $06, nRst, nE3, nRst, nF3, nRst, nFs3, nRst, nG3, $06, nG3
000CEF40 06A9 0680 AA80 AC80 A906+  	dc.b	$06, nE3, $06, nRst, nF3, nRst, nG3, nRst, nE3, $06, nRst, nE3
000CEF4C 80AD 80AD 80B0 0680 B080+  	dc.b	nRst, nAb3, nRst, nAb3, nRst, nB3, $06, nRst, nB3, nRst, nD4, nRst
000CEF58 B380 800C AE12 8006 AE12+  	dc.b	nD4, nRst, nRst, $0C, nA3, $12, nRst, $06, nA3, $12, nAb3, $12
000CEF64 AE06 80                    	dc.b	nA3, $06, nRst
000CEF67 E6FD                       	smpsAlterVol        $FD
000CEF69 A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000CEF6D F2                         	smpsStop
000CEF6E                            
000CEF6E                            	; Unused data
000CEF6E                            	; Could this be a blanked-out 'smpsNop $01'? It's near an smpsStop.
000CEF6E 0001                       	dc.b	$00, $01
000CEF70                            
000CEF70                            Mus91_Credits_Call0F:
000CEF70 0C0C 0C0C 0C0C             	dc.b	$0C, $0C, $0C, $0C, $0C, $0C
000CEF76 E800                       	smpsNoteFill        $00
000CEF78 0C                         	dc.b	$0C
000CEF79 E3                         	smpsReturn
000CEF7A                            
000CEF7A                            Mus91_Credits_Call10:
000CEF7A B103 B1AC ACAE AEAC AC     	dc.b	nC4, $03, nC4, nG3, nG3, nA3, nA3, nG3, nG3
000CEF83 F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Call10
000CEF88 E3                         	smpsReturn
000CEF89                            
000CEF89                            ; FM3 Data
000CEF89                            Mus91_Credits_FM3:
000CEF89 8060                       	dc.b	nRst, $60
000CEF8B F700 08FF FA               	smpsLoop            $00, $08, Mus91_Credits_FM3
000CEF92 E601                       	smpsAlterVol        $01
000CEF94 E040                       	smpsPan             panRight, $00
000CEF96 CB06 CDCF D0CD CFD0 D2CF+  	dc.b	nD6, $06, nE6, nFs6, nG6, nE6, nFs6, nG6, nA6, nFs6, nG6, nA6
000CEFA2 D4D2 D4D5 D7               	dc.b	nB6, nA6, nB6, nC7, nD7
000CEFA7                            
000CEFA7                            Mus91_Credits_Loop0C:
000CEFA7 E080                       	smpsPan             panLeft, $00
000CEFA9 D9                         	dc.b	nE7
000CEFAA E040                       	smpsPan             panRight, $00
000CEFAC D5                         	dc.b	nC7
000CEFAD E602                       	smpsAlterVol        $02
000CEFAF F700 0DFF F4               	smpsLoop            $00, $0D, Mus91_Credits_Loop0C
000CEFB4 E0C0                       	smpsPan             panCenter, $00
000CEFB8 E6E5                       	smpsAlterVol        $E5
000CEFBA E9E8                       	smpsAlterPitch      $E8
000CEFBC D006 D2D5 0CD2 804E 80D0+  	dc.b	nG6, $06, nA6, nC7, $0C, nA6, nRst, $4E, nRst, nG6, $06, nA6
000CEFC8 D50C D980 4E80 D006 D2D5+  	dc.b	nC7, $0C, nE7, nRst, $4E, nRst, nG6, $06, nA6, nC7, $0C, nA6
000CEFD4 8036 80D5 0680 12D2 18D0+  	dc.b	nRst, $36, nRst, nC7, $06, nRst, $12, nA6, $18, nG6, $06, nRst
000CEFE0 D280 D580                  	dc.b	nA6, nRst, nC7, nRst
000CEFE4 F4                         	smpsModOff
000CEFE7 E6FE                       	smpsAlterVol        $FE
000CEFE9                            
000CEFE9                            Mus91_Credits_Loop0D:
000CEFE9 C901 E7C8 1B80 08C7 01E7+  	dc.b	nC6, $01, smpsNoAttack, nB5, $1B, nRst, $08, nBb5, $01, smpsNoAttack, nA5, $1B
000CEFF5 8008                       	dc.b	nRst, $08
000CEFF7 F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop0D
000CEFFC C901 E7C8 0B80 0CC7 01E7+  	dc.b	nC6, $01, smpsNoAttack, nB5, $0B, nRst, $0C, nBb5, $01, smpsNoAttack, nA5, $0B
000CF008 800C CA01 E7C9 1B80 08C9+  	dc.b	nRst, $0C, nCs6, $01, smpsNoAttack, nC6, $1B, nRst, $08, nC6, $01, smpsNoAttack
000CF014 C824 E718 E75A 8006        	dc.b	nB5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000CF01C E918                       	smpsAlterPitch      $18
000CF01E 8060 8080 30               	dc.b	nRst, $60, nRst, nRst, $30
000CF023 E9E8                       	smpsAlterPitch      $E8
000CF027 E90C                       	smpsAlterPitch      $0C
000CF029 E603                       	smpsAlterVol        $03
000CF02B E102                       	smpsAlterNote       $02
000CF02D 8018 C606 C8C9 CD          	dc.b	nRst, $18, nA5, $06, nB5, nC6, nE6
000CF034 F800 00                    	smpsCall            Mus91_Credits_Call0C
000CF039 E90C                       	smpsAlterPitch      $0C
000CF03B E60B                       	smpsAlterVol        $0B
000CF03D 800C C4C6 D0               	dc.b	nRst, $0C, nG5, nA5, nG6
000CF042 F800 00                    	smpsCall            Mus91_Credits_Call0D
000CF047 E6EC                       	smpsAlterVol        $EC
000CF049 8006                       	dc.b	nRst, $06
000CF04B E114                       	smpsAlterNote       $14
000CF04D C401 E7                    	dc.b	nG5, $01, smpsNoAttack
000CF050 E100                       	smpsAlterNote       $00
000CF052 02C6 03                    	dc.b	$02, nA5, $03
000CF055 E805                       	smpsNoteFill        $05
000CF057 C903 C906 C603 C9          	dc.b	nC6, $03, nC6, $06, nA5, $03, nC6
000CF05E E800                       	smpsNoteFill        $00
000CF060 C9                         	dc.b	nC6
000CF061 E6FC                       	smpsAlterVol        $FC
000CF063 E933                       	smpsAlterPitch      $33
000CF067 B403                       	dc.b	nEb4, $03
000CF069 E607                       	smpsAlterVol        $07
000CF06B B4                         	dc.b	nEb4
000CF06C E607                       	smpsAlterVol        $07
000CF06E B4                         	dc.b	nEb4
000CF06F E607                       	smpsAlterVol        $07
000CF071 B4                         	dc.b	nEb4
000CF074 E6EF                       	smpsAlterVol        $EF
000CF076 E9CD                       	smpsAlterPitch      $CD
000CF078 CD03 CED0 8009             	dc.b	nE6, $03, nF6, nG6, nRst, $09
000CF07E E1EC                       	smpsAlterNote       $EC
000CF080 D501 E7                    	dc.b	nC7, $01, smpsNoAttack
000CF083 E100                       	smpsAlterNote       $00
000CF085 F02C 0104 04               	smpsModSet          $2C, $01, $04, $04
000CF08A D523                       	dc.b	nC7, $23
000CF08C F4                         	smpsModOff
000CF08F E6FF                       	smpsAlterVol        $FF
000CF091 E103                       	smpsAlterNote       $03
000CF093 F800 00                    	smpsCall            Mus91_Credits_Call0E
000CF096 E100                       	smpsAlterNote       $00
000CF09A E609                       	smpsAlterVol        $09
000CF09C 8030 8030 802E C202 8004+  	dc.b	nRst, $30, nRst, $30, nRst, $2E, nF5, $02, nRst, $04, nF5, $08
000CF0A8 C203 80C2 80C1 0380 13BF+  	dc.b	nF5, $03, nRst, nF5, nRst, nE5, $03, nRst, $13, nD5, $02, nRst
000CF0B4 04BF 08BF 0380 BF80 BD03+  	dc.b	$04, nD5, $08, nD5, $03, nRst, nD5, nRst, nC5, $03, nRst, $15
000CF0C0 8004 D208 D003 80D0 80CE+  	dc.b	nRst, $04, nA6, $08, nG6, $03, nRst, nG6, nRst, nF6, nRst, nF6
000CF0CC 80CD 04CE 02CD 04CB 02     	dc.b	nRst, nE6, $04, nF6, $02, nE6, $04, nD6, $02
000CF0D7 E6F9                       	smpsAlterVol        $F9
000CF0D9 8060                       	dc.b	nRst, $60
000CF0DB                            
000CF0DB                            Mus91_Credits_Loop0E:
000CF0DB CD06 80CD 80CA 80CA 80CB+  	dc.b	nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nD6, $12, nD6
000CF0E7 1ECD 0680 CD80 CA80 CA80+  	dc.b	$1E, nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nG6, $12
000CF0F3 D01E                       	dc.b	nG6, $1E
000CF0F5 F700 02FF E2               	smpsLoop            $00, $02, Mus91_Credits_Loop0E
000CF0FA 800C CB12 8006 CB80 CA12+  	dc.b	nRst, $0C, nD6, $12, nRst, $06, nD6, nRst, nCs6, $12, nD6, nCs6
000CF106 0CC5 18C8 CBD1 800C CD80+  	dc.b	$0C, nAb5, $18, nB5, nD6, nAb6, nRst, $0C, nE6, nRst, nE6, $12
000CF112 CCCD 0680                  	dc.b	nEb6, nE6, $06, nRst
000CF118 E6F8                       	smpsAlterVol        $F8
000CF11A E103                       	smpsAlterNote       $03
000CF11C A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000CF120 F2                         	smpsStop
000CF121                            
000CF121                            Mus91_Credits_Call14:
000CF121 CB06 CDCF D0CD CFD0 D2CF+  	dc.b	nD6, $06, nE6, nFs6, nG6, nE6, nFs6, nG6, nA6, nFs6, nG6, nA6
000CF12D D4D2 D4D5 D7               	dc.b	nB6, nA6, nB6, nC7, nD7
000CF132 E3                         	smpsReturn
000CF133                            
000CF133                            ; FM4 Data
000CF133                            Mus91_Credits_FM4:
000CF135 8060                       	dc.b	nRst, $60
000CF137 E608                       	smpsAlterVol        $08
000CF139 F800 00                    	smpsCall            Mus91_Credits_Call08
000CF13C C30C C380 80C6 C680 80     	dc.b	nFs5, $0C, nFs5, nRst, nRst, nA5, nA5, nRst, nRst
000CF145 F800 00                    	smpsCall            Mus91_Credits_Call08
000CF148 C624 2418                  	dc.b	nA5, $24, $24, $18
000CF14C E080                       	smpsPan             panLeft, $00
000CF14E F800 00                    	smpsCall            Mus91_Credits_Call03
000CF151 E6F2                       	smpsAlterVol        $F2
000CF153                            
000CF153                            Mus91_Credits_Loop09:
000CF153 C501 E7C4 1B80 08C3 01E7+  	dc.b	nAb5, $01, smpsNoAttack, nG5, $1B, nRst, $08, nFs5, $01, smpsNoAttack, nF5, $1B
000CF15F 8008                       	dc.b	nRst, $08
000CF161 F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop09
000CF166 C501 E7C4 0B80 0CC3 01E7+  	dc.b	nAb5, $01, smpsNoAttack, nG5, $0B, nRst, $0C, nFs5, $01, smpsNoAttack, nF5, $0B
000CF172 800C C701 E7C6 1B80 08C5+  	dc.b	nRst, $0C, nBb5, $01, smpsNoAttack, nA5, $1B, nRst, $08, nAb5, $01, smpsNoAttack
000CF17E C424 E718 E75A 8006        	dc.b	nG5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000CF186 E918                       	smpsAlterPitch      $18
000CF188 8060 8080 5A               	dc.b	nRst, $60, nRst, nRst, $5A
000CF18D E0C0                       	smpsPan             panCenter, $00
000CF191 E9F4                       	smpsAlterPitch      $F4
000CF193 E605                       	smpsAlterVol        $05
000CF195                            
000CF195                            Mus91_Credits_Loop0A:
000CF195 D409 8003 D480 D506 80D4+  	dc.b	nB6, $09, nRst, $03, nB6, nRst, nC7, $06, nRst, nB6, $0C, nRst
000CF1A1 06                         	dc.b	$06
000CF1A2 F700 02FF EF               	smpsLoop            $00, $02, Mus91_Credits_Loop0A
000CF1A7 8012 D503 800F D503 801B+  	dc.b	nRst, $12, nC7, $03, nRst, $0F, nC7, $03, nRst, $1B, nC7, $03
000CF1B3 800F D503 8009 CE09 8003+  	dc.b	nRst, $0F, nC7, $03, nRst, $09, nF6, $09, nRst, $03, nF6, nRst
000CF1BF D206 80CE 0C80 06D1 0980+  	dc.b	nA6, $06, nRst, nF6, $0C, nRst, $06, nAb6, $09, nRst, $03, nAb6
000CF1CB 80D4 0680 D10C 8006 8080+  	dc.b	nRst, nB6, $06, nRst, nAb6, $0C, nRst, $06, nRst, nRst, $0C, nC7
000CF1D7 0380 0FD5 0380 0FD5 0380+  	dc.b	$03, nRst, $0F, nC7, $03, nRst, $0F, nC7, $03, nRst, $2D
000CF1E2 E9F4                       	smpsAlterPitch      $F4
000CF1E4 E603                       	smpsAlterVol        $03
000CF1E8 E080                       	smpsPan             panLeft, $00
000CF1EA F800 00                    	smpsCall            Mus91_Credits_Call09
000CF1EF E6F6                       	smpsAlterVol        $F6
000CF1F1 E918                       	smpsAlterPitch      $18
000CF1F3 F800 00                    	smpsCall            Mus91_Credits_Call0A
000CF1F6 800C                       	dc.b	nRst, $0C
000CF1F8 E1EC                       	smpsAlterNote       $EC
000CF1FA C602                       	dc.b	nA5, $02
000CF1FC E100                       	smpsAlterNote       $00
000CF1FE E70A 8003 C680 80C6 8009   	dc.b	smpsNoAttack, $0A, nRst, $03, nA5, nRst, nRst, nA5, nRst, $09
000CF208 F800 00                    	smpsCall            Mus91_Credits_Call0A
000CF20B E1EC                       	smpsAlterNote       $EC
000CF20D C602                       	dc.b	nA5, $02
000CF20F E100                       	smpsAlterNote       $00
000CF211 0A80 06                    	dc.b	$0A, nRst, $06
000CF214 F018 0107 04               	smpsModSet          $18, $01, $07, $04
000CF219 E1E2                       	smpsAlterNote       $E2
000CF21B C602 E7                    	dc.b	nA5, $02, smpsNoAttack
000CF21E E100                       	smpsAlterNote       $00
000CF220 1C                         	dc.b	$1C
000CF221 E100                       	smpsAlterNote       $00
000CF223 E103                       	smpsAlterNote       $03
000CF225 F800 00                    	smpsCall            Mus91_Credits_Call06
000CF228 E100                       	smpsAlterNote       $00
000CF22A E0C0                       	smpsPan             panCenter, $00
000CF22E E6F5                       	smpsAlterVol        $F5
000CF230 8060                       	dc.b	nRst, $60
000CF232                            
000CF232                            Mus91_Credits_Loop0B:
000CF232 CA06 80CA 80C6 80C6 80C8+  	dc.b	nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nB5, $12, nB5
000CF23E 1ECA 0680 CA80 C680 C680+  	dc.b	$1E, nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nD6, $12
000CF24A CB1E                       	dc.b	nD6, $1E
000CF24C F700 02FF E2               	smpsLoop            $00, $02, Mus91_Credits_Loop0B
000CF253 E103                       	smpsAlterNote       $03
000CF255 E608                       	smpsAlterVol        $08
000CF257 F800 00                    	smpsCall            Mus91_Credits_Call0B
000CF25C E6F0                       	smpsAlterVol        $F0
000CF25E F000 0106 04               	smpsModSet          $00, $01, $06, $04
000CF263 A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000CF267 F2                         	smpsStop
000CF268                            
000CF268                            Mus91_Credits_Call08:
000CF268 C824 2418 C624 2418 C424+  	dc.b	nB5, $24, $24, $18, nA5, $24, $24, $18, nG5, $24, $24, $18
000CF274 E3                         	smpsReturn
000CF275                            
000CF275                            Mus91_Credits_Call03:
000CF277 E9E8                       	smpsAlterPitch      $E8
000CF279 E60D                       	smpsAlterVol        $0D
000CF27B                            
000CF27B                            Mus91_Credits_Loop2D:
000CF27B F800 00                    	smpsCall            Mus91_Credits_Call1B
000CF27E BFBF                       	dc.b	nD5, nD5
000CF280 F700 02FF F7               	smpsLoop            $00, $02, Mus91_Credits_Loop2D
000CF285 F800 00                    	smpsCall            Mus91_Credits_Call1B
000CF288 B5B5 BDBD BABA B6B6 B3B3+  	dc.b	nE4, nE4, nC5, nC5, nA4, nA4, nF4, nF4, nD4, nD4, nB4, nB4
000CF294 E603                       	smpsAlterVol        $03
000CF296 E90C                       	smpsAlterPitch      $0C
000CF29A D018 D2D4                  	dc.b	nG6, $18, nA6, nB6
000CF29E E9F4                       	smpsAlterPitch      $F4
000CF2A2 E3                         	smpsReturn
000CF2A3                            
000CF2A3                            Mus91_Credits_Call1B:
000CF2A3 C10C C1BD BDBA BAB6 B6BF+  	dc.b	nE5, $0C, nE5, nC5, nC5, nA4, nA4, nF4, nF4, nD5, nD5, nB4
000CF2AF BCB8 B8                    	dc.b	nB4, nG4, nG4
000CF2B2 E3                         	smpsReturn
000CF2B3                            
000CF2B3                            Mus91_Credits_Call0A:
000CF2B3 800C                       	dc.b	nRst, $0C
000CF2B5 E1EC                       	smpsAlterNote       $EC
000CF2B7 C402                       	dc.b	nG5, $02
000CF2B9 E100                       	smpsAlterNote       $00
000CF2BB E706 8001 C403 8018 800C   	dc.b	smpsNoAttack, $06, nRst, $01, nG5, $03, nRst, $18, nRst, $0C
000CF2C5 E1EC                       	smpsAlterNote       $EC
000CF2C7 CA02                       	dc.b	nCs6, $02
000CF2C9 E100                       	smpsAlterNote       $00
000CF2CB E706 8001 CA03 8018 800C   	dc.b	smpsNoAttack, $06, nRst, $01, nCs6, $03, nRst, $18, nRst, $0C
000CF2D5 E1EC                       	smpsAlterNote       $EC
000CF2D7 C902                       	dc.b	nC6, $02
000CF2D9 E100                       	smpsAlterNote       $00
000CF2DB E706 8001 C903 8018        	dc.b	smpsNoAttack, $06, nRst, $01, nC6, $03, nRst, $18
000CF2E3 E3                         	smpsReturn
000CF2E4                            
000CF2E4                            Mus91_Credits_Call06:
000CF2E4 E608                       	smpsAlterVol        $08
000CF2E8 8030 8030                  	dc.b	nRst, $30, nRst, $30
000CF2EC E501                       	smpsChanTempoDiv    $01
000CF2EE F800 00                    	smpsCall            Mus91_Credits_Call17
000CF2F1 E502                       	smpsChanTempoDiv    $02
000CF2F5 F001 0101 04               	smpsModSet          $01, $01, $01, $04
000CF2FA CB02 8004 CB08 CB03 80CB+  	dc.b	nD6, $02, nRst, $04, nD6, $08, nD6, $03, nRst, nD6, nRst, nC6
000CF306 80D2 80CE 8007 C702 8004+  	dc.b	nRst, nA6, nRst, nF6, nRst, $07, nBb5, $02, nRst, $04, nBb5, $08
000CF312 C703 80C7 80C6 0380 13C6+  	dc.b	nBb5, $03, nRst, nBb5, nRst, nA5, $03, nRst, $13, nA5, $0E, nCs6
000CF31E 0CCD D60A D702             	dc.b	$0C, nE6, nCs7, $0A, nD7, $02
000CF324 E3                         	smpsReturn
000CF325                            
000CF325                            Mus91_Credits_Call17:
000CF325 AF01 E7AE 0480 07AF 01E7+  	dc.b	nBb3, $01, smpsNoAttack, nA3, $04, nRst, $07, nBb3, $01, smpsNoAttack, nA3, $04
000CF331 8007 B101 E7B0 0480 07B1+  	dc.b	nRst, $07, nC4, $01, smpsNoAttack, nB3, $04, nRst, $07, nC4, $01, smpsNoAttack
000CF33D B004 8007 B201 E7B1 0480+  	dc.b	nB3, $04, nRst, $07, nCs4, $01, smpsNoAttack, nC4, $04, nRst, $07, nCs4
000CF349 01E7 B104 8007 B301 E7B2+  	dc.b	$01, smpsNoAttack, nC4, $04, nRst, $07, nD4, $01, smpsNoAttack, nCs4, $04, nRst
000CF355 07B3 01E7 B204 8003        	dc.b	$07, nD4, $01, smpsNoAttack, nCs4, $04, nRst, $03
000CF35D E3                         	smpsReturn
000CF35E                            
000CF35E                            Mus91_Credits_Call0B:
000CF35E 800C D0D4 D7DB 8006 DB0C+  	dc.b	nRst, $0C, nG6, nB6, nD7, nFs7, nRst, $06, nFs7, $0C, nG7, $06
000CF36A DB0C DD54 800C DE80 DE80+  	dc.b	nFs7, $0C, nAb7, $54, nRst, $0C, nA7, nRst, nA7, nRst, $12, nAb7
000CF376 DE0C                       	dc.b	nA7, $0C
000CF378 E3                         	smpsReturn
000CF379                            
000CF379                            ; FM5 Data
000CF379                            Mus91_Credits_FM5:
000CF37B 8060                       	dc.b	nRst, $60
000CF37D E6F0                       	smpsAlterVol        $F0
000CF37F F800 00                    	smpsCall            Mus91_Credits_Call02
000CF382 BF0C 0C80 18C3 0C0C 8018   	dc.b	nD5, $0C, $0C, nRst, $18, nFs5, $0C, $0C, nRst, $18
000CF38C F800 00                    	smpsCall            Mus91_Credits_Call02
000CF38F C324 2418                  	dc.b	nFs5, $24, $24, $18
000CF393 E040                       	smpsPan             panRight, $00
000CF395 F8FE DE                    	smpsCall            Mus91_Credits_Call03
000CF398 E6F2                       	smpsAlterVol        $F2
000CF39A                            
000CF39A                            Mus91_Credits_Loop07:
000CF39A C201 E7C1 1B80 08C0 01E7+  	dc.b	nF5, $01, smpsNoAttack, nE5, $1B, nRst, $08, nEb5, $01, smpsNoAttack, nD5, $1B
000CF3A6 8008                       	dc.b	nRst, $08
000CF3A8 F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop07
000CF3AD C201 E7C1 0B80 0CC0 01E7+  	dc.b	nF5, $01, smpsNoAttack, nE5, $0B, nRst, $0C, nEb5, $01, smpsNoAttack, nD5, $0B
000CF3B9 800C C301 E7C2 1B80 08C2+  	dc.b	nRst, $0C, nFs5, $01, smpsNoAttack, nF5, $1B, nRst, $08, nF5, $01, smpsNoAttack
000CF3C5 C124 E718 E75A 8006        	dc.b	nE5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000CF3CD E918                       	smpsAlterPitch      $18
000CF3CF E0C0                       	smpsPan             panCenter, $00
000CF3D1 E603                       	smpsAlterVol        $03
000CF3D3 E90C                       	smpsAlterPitch      $0C
000CF3D7 804E B803 BABD 80BA 8051+  	dc.b	nRst, $4E, nG4, $03, nA4, nC5, nRst, nA4, nRst, $51, nA5, $03
000CF3E3 C2BD 80C2 805D             	dc.b	nF5, nC5, nRst, nF5, nRst, $5D
000CF3EB E9E8                       	smpsAlterPitch      $E8
000CF3ED E602                       	smpsAlterVol        $02
000CF3EF                            
000CF3EF                            Mus91_Credits_Loop08:
000CF3EF D009 8003 D080 D206 80D0+  	dc.b	nG6, $09, nRst, $03, nG6, nRst, nA6, $06, nRst, nG6, $0C, nRst
000CF3FB 06                         	dc.b	$06
000CF3FC F700 02FF EF               	smpsLoop            $00, $02, Mus91_Credits_Loop08
000CF401 8012 D203 800F D203 801B+  	dc.b	nRst, $12, nA6, $03, nRst, $0F, nA6, $03, nRst, $1B, nA6, $03
000CF40D 800F D203 8009 CB09 8003+  	dc.b	nRst, $0F, nA6, $03, nRst, $09, nD6, $09, nRst, $03, nD6, nRst
000CF419 CE06 80CB 0C80 06CD 0980+  	dc.b	nF6, $06, nRst, nD6, $0C, nRst, $06, nE6, $09, nRst, $03, nE6
000CF425 80D1 0680 CD0C 8018 D203+  	dc.b	nRst, nAb6, $06, nRst, nE6, $0C, nRst, $18, nA6, $03, nRst, $0F
000CF431 D203 800F D203 802D        	dc.b	nA6, $03, nRst, $0F, nA6, $03, nRst, $2D
000CF43B E040                       	smpsPan             panRight, $00
000CF43D E9F4                       	smpsAlterPitch      $F4
000CF43F E603                       	smpsAlterVol        $03
000CF441 F800 00                    	smpsCall            Mus91_Credits_Call04
000CF446 E924                       	smpsAlterPitch      $24
000CF448 E6F4                       	smpsAlterVol        $F4
000CF44A F800 00                    	smpsCall            Mus91_Credits_Call05
000CF44D CDCE D0                    	dc.b	nE6, nF6, nG6
000CF450 F800 00                    	smpsCall            Mus91_Credits_Call05
000CF453 D0CE CD                    	dc.b	nG6, nF6, nE6
000CF456 E9F4                       	smpsAlterPitch      $F4
000CF458 F8FE 8A                    	smpsCall            Mus91_Credits_Call06
000CF45B E0C0                       	smpsPan             panCenter, $00
000CF45F E103                       	smpsAlterNote       $03
000CF461 E6F8                       	smpsAlterVol        $F8
000CF463 8060                       	dc.b	nRst, $60
000CF465 F8F8 45                    	smpsCall            Mus91_Credits_Call07
000CF468 E600                       	smpsAlterVol        $00
000CF46C 8060 800C CD06 80D4 CD06+  	dc.b	nRst, $60, nRst, $0C, nE6, $06, nRst, nB6, nE6, $06, nRst, $0C
000CF478 CD06 80D4 CD06 8018        	dc.b	nE6, $06, nRst, nB6, nE6, $06, nRst, $18
000CF480 E605                       	smpsAlterVol        $05
000CF482 800C AE80 AE               	dc.b	nRst, $0C, nA3, nRst, nA3
000CF487 F2                         	smpsStop
000CF488                            
000CF488                            Mus91_Credits_Call02:
000CF488 C424 2418 C324 2418 C124+  	dc.b	nG5, $24, $24, $18, nFs5, $24, $24, $18, nE5, $24, $24, $18
000CF494 E3                         	smpsReturn
000CF495                            
000CF495                            ; PSG1 Data
000CF495                            Mus91_Credits_PSG1:
000CF495 8060                       	dc.b	nRst, $60
000CF497 F508                       	smpsPSGvoice        fTone_08
000CF499 EC03                       	smpsPSGAlterVol     $03
000CF49B E806                       	smpsNoteFill        $06
000CF49D F800 00                    	smpsCall            Mus91_Credits_Call11
000CF4A0 F501                       	smpsPSGvoice        fTone_01
000CF4A2 E800                       	smpsNoteFill        $00
000CF4A4 ECFD                       	smpsPSGAlterVol     $FD
000CF4A6                            
000CF4A6                            Mus91_Credits_Loop2A:
000CF4A6 8018 C906 801E C90C 8018+  	dc.b	nRst, $18, nC6, $06, nRst, $1E, nC6, $0C, nRst, $18, nRst, $18
000CF4B2 C806 801E C80C 8018        	dc.b	nB5, $06, nRst, $1E, nB5, $0C, nRst, $18
000CF4BA F700 03FF E8               	smpsLoop            $00, $03, Mus91_Credits_Loop2A
000CF4BF 8018 C606 801E C60C 8018+  	dc.b	nRst, $18, nA5, $06, nRst, $1E, nA5, $0C, nRst, $18, nRst, $18
000CF4CB C406 801E C40C 8018        	dc.b	nG5, $06, nRst, $1E, nG5, $0C, nRst, $18
000CF4D3 F505                       	smpsPSGvoice        fTone_05
000CF4D5 F00E 0101 03               	smpsModSet          $0E, $01, $01, $03
000CF4DA E810                       	smpsNoteFill        $10
000CF4DC C124 BFC1 BFC1 0C80 BF80+  	dc.b	nE5, $24, nD5, nE5, nD5, nE5, $0C, nRst, nD5, nRst, nF5, $24
000CF4E8 E800                       	smpsNoteFill        $00
000CF4EA C160 E73C                  	dc.b	nE5, $60, smpsNoAttack, $3C
000CF4EE F4                         	smpsModOff
000CF4EF F508                       	smpsPSGvoice        fTone_08 ; changed from 9 to 8 for cleveland rip
000CF4F1 EC01                       	smpsPSGAlterVol     $01
000CF4F3                            
000CF4F3                            Mus91_Credits_Loop2B:
000CF4F3 8006 CD0C CDCD CD06 80CD+  	dc.b	nRst, $06, nE6, $0C, nE6, nE6, nE6, $06, nRst, nE6, $0C, nE6
000CF4FF CD03 0906                  	dc.b	nE6, $03, $09, $06
000CF503 E905                       	smpsAlterPitch      $05
000CF505 F700 02FF EA               	smpsLoop            $00, $02, Mus91_Credits_Loop2B
000CF50A E9F6                       	smpsAlterPitch      $F6
000CF50C 8006 CD0C CDCD CD06 8030   	dc.b	nRst, $06, nE6, $0C, nE6, nE6, nE6, $06, nRst, $30
000CF516 F508                       	smpsPSGvoice        fTone_08
000CF518 EC01                       	smpsPSGAlterVol     $01
000CF51A F800 00                    	smpsCall            Mus91_Credits_Call15
000CF51D 8002 8030                  	dc.b	nRst, $02, nRst, $30
000CF521 EC03                       	smpsPSGAlterVol     $03
000CF523 E9F4                       	smpsAlterPitch      $F4
000CF525 F505                       	smpsPSGvoice        fTone_05
000CF527 F800 00                    	smpsCall            Mus91_Credits_Call09
000CF52A E90C                       	smpsAlterPitch      $0C
000CF52C ECFC                       	smpsPSGAlterVol     $FC
000CF52E F500                       	smpsPSGvoice        $00
000CF530 F800 00                    	smpsCall            Mus91_Credits_Call16
000CF533 800C C280 03C2 8080 C280+  	dc.b	nRst, $0C, nF5, nRst, $03, nF5, nRst, nRst, nF5, nRst, $09
000CF53E F800 00                    	smpsCall            Mus91_Credits_Call16
000CF541 C20C 8006 C21E             	dc.b	nF5, $0C, nRst, $06, nF5, $1E
000CF547 F506                       	smpsPSGvoice        fTone_06
000CF549 EC04                       	smpsPSGAlterVol     $04
000CF54B 8030 8030                  	dc.b	nRst, $30, nRst, $30
000CF54F E501                       	smpsChanTempoDiv    $01
000CF551 F8FD D2                    	smpsCall            Mus91_Credits_Call17
000CF554 E502                       	smpsChanTempoDiv    $02
000CF556 CB02 8004 CB08 CB03 80CB+  	dc.b	nD6, $02, nRst, $04, nD6, $08, nD6, $03, nRst, nD6, nRst, nC6
000CF562 80D2 80CE 8007 C702 8004+  	dc.b	nRst, nA6, nRst, nF6, nRst, $07, nBb5, $02, nRst, $04, nBb5, $08
000CF56E C703 80C7 80C6 0380 13C6+  	dc.b	nBb5, $03, nRst, nBb5, nRst, nA5, $03, nRst, $13, nA5, $0E, nCs6
000CF57A 0CCD D60A D702 8060 8080+  	dc.b	$0C, nE6, nCs7, $0A, nD7, $02, nRst, $60, nRst, nRst, nRst, nRst
000CF586 ECFF                       	smpsPSGAlterVol     $FF
000CF588 800C C812 8006 C880 C612+  	dc.b	nRst, $0C, nB5, $12, nRst, $06, nB5, nRst, nA5, $12, nB5, nA5
000CF594 0CC1 18C5 C8CB 800C CA80+  	dc.b	$0C, nE5, $18, nAb5, nB5, nD6, nRst, $0C, nCs6, nRst, nCs6, $12
000CF5A0 C9CA 06                    	dc.b	nC6, nCs6, $06
000CF5A3 F2                         	smpsStop
000CF5A4                            
000CF5A4                            Mus91_Credits_Call16:
000CF5A4 800C C107 8002 C103 8018+  	dc.b	nRst, $0C, nE5, $07, nRst, $02, nE5, $03, nRst, $18, nRst, $0C
000CF5B0 C707 8002 C703 8018 800C+  	dc.b	nBb5, $07, nRst, $02, nBb5, $03, nRst, $18, nRst, $0C, nA5, $07
000CF5BC 8002 C603 8018             	dc.b	nRst, $02, nA5, $03, nRst, $18
000CF5C2 E3                         	smpsReturn
000CF5C3                            
000CF5C3                            ; PSG2 Data
000CF5C3                            Mus91_Credits_PSG2:
000CF5C3 8060                       	dc.b	nRst, $60
000CF5C5 F700 08FF FA               	smpsLoop            $00, $08, Mus91_Credits_PSG2
000CF5CA 8002                       	dc.b	nRst, $02
000CF5CC F8FB 53                    	smpsCall            Mus91_Credits_Call14
000CF5CF ECFE                       	smpsPSGAlterVol     $FE
000CF5D1 F501                       	smpsPSGvoice        fTone_01
000CF5D3 8016 CD06 801E CD0C 8018+  	dc.b	nRst, $16, nE6, $06, nRst, $1E, nE6, $0C, nRst, $18, nRst, $18
000CF5DF CB06 801E CB0C 8018        	dc.b	nD6, $06, nRst, $1E, nD6, $0C, nRst, $18
000CF5E7                            Mus91_Credits_Loop24:
000CF5E7 8018 CD06 801E CD0C 8018+  	dc.b	nRst, $18, nE6, $06, nRst, $1E, nE6, $0C, nRst, $18, nRst, $18
000CF5F3 CB06 801E CB0C 8018        	dc.b	nD6, $06, nRst, $1E, nD6, $0C, nRst, $18
000CF5FB F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop24
000CF600 8018 C906 801E C90C 8018+  	dc.b	nRst, $18, nC6, $06, nRst, $1E, nC6, $0C, nRst, $18, nRst, $18
000CF60C C806 801E C80C 8018        	dc.b	nB5, $06, nRst, $1E, nB5, $0C, nRst, $18
000CF614 E806                       	smpsNoteFill        $06
000CF616 F506                       	smpsPSGvoice        fTone_06
000CF618                            
000CF618                            Mus91_Credits_Loop25:
000CF618 D50C D4D2 D0               	dc.b	nC7, $0C, nB6, nA6, nG6
000CF61D F700 08FF F7               	smpsLoop            $00, $08, Mus91_Credits_Loop25
000CF622 E800                       	smpsNoteFill        $00
000CF624 F508                       	smpsPSGvoice        fTone_08 ; changed from 9 to 8 for cleveland rip
000CF626 EC01                       	smpsPSGAlterVol     $01
000CF628                            
000CF628                            Mus91_Credits_Loop26:
000CF628 8006 D00C D0D0 D006 80D0+  	dc.b	nRst, $06, nG6, $0C, nG6, nG6, nG6, $06, nRst, nG6, $0C, nG6
000CF634 D003 0906                  	dc.b	nG6, $03, $09, $06
000CF638 E905                       	smpsAlterPitch      $05
000CF63A F700 02FF EA               	smpsLoop            $00, $02, Mus91_Credits_Loop26
000CF63F E9F6                       	smpsAlterPitch      $F6
000CF641 8006 D00C D0D0 D006 8030+  	dc.b	nRst, $06, nG6, $0C, nG6, nG6, nG6, $06, nRst, $30, nRst, $02
000CF64D E101                       	smpsAlterNote       $01
000CF64F EC03                       	smpsPSGAlterVol     $03
000CF651 F800 00                    	smpsCall            Mus91_Credits_Call15
000CF654 E100                       	smpsAlterNote       $00
000CF656 8030                       	dc.b	nRst, $30
000CF658 EC01                       	smpsPSGAlterVol     $01
000CF65A E9F4                       	smpsAlterPitch      $F4
000CF65C F505                       	smpsPSGvoice        fTone_05
000CF65E F800 00                    	smpsCall            Mus91_Credits_Call04
000CF661 E90C                       	smpsAlterPitch      $0C
000CF663 ECFD                       	smpsPSGAlterVol     $FD
000CF665 E803                       	smpsNoteFill        $03
000CF667                            
000CF667                            Mus91_Credits_Loop27:
000CF667 D503 D5DC D5DA D5D9 D5     	dc.b	nC7, $03, nC7, nG7, nC7, nF7, nC7, nE7, nC7
000CF670 F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Loop27
000CF675                            
000CF675                            Mus91_Credits_Loop28:
000CF675 D3D3 DAD3 D8D3 D6D3        	dc.b	nBb6, nBb6, nF7, nBb6, nEb7, nBb6, nCs7, nBb6
000CF67D F700 02FF F4               	smpsLoop            $00, $02, Mus91_Credits_Loop28
000CF682                            
000CF682                            Mus91_Credits_Loop29:
000CF682 D2D2 D9D2 D7D2 D5D2        	dc.b	nA6, nA6, nE7, nA6, nD7, nA6, nC7, nA6
000CF68A F700 04FF F4               	smpsLoop            $00, $04, Mus91_Credits_Loop29
000CF68F F701 02FF D4               	smpsLoop            $01, $02, Mus91_Credits_Loop27
000CF694 8060 8080 8080 80          	dc.b	nRst, $60, nRst, nRst, nRst, nRst, nRst
000CF69B                            ;	; These rests are unnecessary, and cause the following notes to play way too late.
000CF69B                            ;	; Delete these three notes to fix this.
000CF69B                            ;	dc.b	nRst, nRst, nRst
000CF69B                            ;	; This erroneous FM-only command causes the following notes to be inaudible.
000CF69B                            ;	smpsAlterVol        $0C
000CF69B                            ; there we go i fixed it - coni
000CF69B E102                       	smpsAlterNote       $02
000CF69D EC02                       	smpsPSGAlterVol     $02
000CF69F 800C CD06 80D4 CD06 800C+  	dc.b	nRst, $0C, nE6, $06, nRst, nB6, nE6, $06, nRst, $0C, nE6, $06
000CF6AB 80D4 CD                    	dc.b	nRst, nB6, nE6
000CF6AE F2                         	smpsStop
000CF6AF                            
000CF6AF                            ; PSG3 Data
000CF6AF                            Mus91_Credits_PSG3:
000CF6AF F3E7                       	smpsPSGform         $E7
000CF6B1 E804                       	smpsNoteFill        $04
000CF6B3                            
000CF6B3                            Mus91_Credits_Loop18:
000CF6B3 000C                       	dc.b	nMaxPSG, $0C
000CF6B5 F700 48FF FA               	smpsLoop            $00, $48, Mus91_Credits_Loop18
000CF6BA E806                       	smpsNoteFill        $06
000CF6BC                            
000CF6BC                            Mus91_Credits_Loop19:
000CF6BC 0C                         	dc.b	$0C
000CF6BD F700 60FF FB               	smpsLoop            $00, $60, Mus91_Credits_Loop19
000CF6C2 ECFF                       	smpsPSGAlterVol     $FF
000CF6C4 F800 00                    	smpsCall            Mus91_Credits_Call13
000CF6C7 E80E                       	smpsNoteFill        $0E
000CF6C9 0C                         	dc.b	$0C
000CF6CA E803                       	smpsNoteFill        $03
000CF6CC 0606 0303 0603 0306        	dc.b	$06, $06, $03, $03, $06, $03, $03, $06
000CF6D4                            
000CF6D4                            Mus91_Credits_Loop1A:
000CF6D4 F800 00                    	smpsCall            Mus91_Credits_Call13
000CF6D7 F700 04FF F9               	smpsLoop            $00, $04, Mus91_Credits_Loop1A
000CF6DC F509                       	smpsPSGvoice        fTone_09
000CF6DE EC01                       	smpsPSGAlterVol     $01
000CF6E0 E90B                       	smpsAlterPitch      $0B
000CF6E2                            
000CF6E2                            Mus91_Credits_Loop1B:
000CF6E2 AE06 AEB5 B5B3 B3B5 B5     	dc.b	nA3, $06, nA3, nE4, nE4, nD4, nD4, nE4, nE4
000CF6EB F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Loop1B
000CF6F0                            
000CF6F0                            Mus91_Credits_Loop1C:
000CF6F0 B3B3 BABA B6B6 BABA        	dc.b	nD4, nD4, nA4, nA4, nF4, nF4, nA4, nA4
000CF6F8 F700 02FF F4               	smpsLoop            $00, $02, Mus91_Credits_Loop1C
000CF6FD B0B0 B6B6 B3B3 B6B6 B5B5+  	dc.b	nB3, nB3, nF4, nF4, nD4, nD4, nF4, nF4, nE4, nE4, nB4, nB4
000CF709 B9B9 BCBC AEAE B5B5 B1B1+  	dc.b	nAb4, nAb4, nB4, nB4, nA3, nA3, nE4, nE4, nC4, nC4, nE4, nE4
000CF715 AE06 801E                  	dc.b	nA3, $06, nRst, $1E
000CF719 E802                       	smpsNoteFill        $02
000CF71B E9F5                       	smpsAlterPitch      $F5
000CF71D                            
000CF71D                            Mus91_Credits_Loop1D:
000CF71D F504                       	smpsPSGvoice        fTone_04
000CF71F 0003 03                    	dc.b	nMaxPSG, $03, $03
000CF722 EC02                       	smpsPSGAlterVol     $02
000CF724 F508                       	smpsPSGvoice        fTone_08
000CF726 E808                       	smpsNoteFill        $08
000CF728 06                         	dc.b	$06
000CF729 E803                       	smpsNoteFill        $03
000CF72B ECFE                       	smpsPSGAlterVol     $FE
000CF72D F700 1EFF EC               	smpsLoop            $00, $1E, Mus91_Credits_Loop1D
000CF732 8024                       	dc.b	nRst, $24
000CF734                            
000CF734                            Mus91_Credits_Loop1E:
000CF734 F504                       	smpsPSGvoice        fTone_04
000CF736 0303                       	dc.b	$03, $03
000CF738 EC02                       	smpsPSGAlterVol     $02
000CF73A F508                       	smpsPSGvoice        fTone_08
000CF73C E808                       	smpsNoteFill        $08
000CF73E 06                         	dc.b	$06
000CF73F E803                       	smpsNoteFill        $03
000CF741 ECFE                       	smpsPSGAlterVol     $FE
000CF743 F700 20FF ED               	smpsLoop            $00, $20, Mus91_Credits_Loop1E
000CF748 8030                       	dc.b	nRst, $30
000CF74A E801                       	smpsNoteFill        $01
000CF74C F504                       	smpsPSGvoice        fTone_04
000CF74E EC03                       	smpsPSGAlterVol     $03
000CF750                            
000CF750                            Mus91_Credits_Loop1F:
000CF750 0002 8000                  	dc.b	nMaxPSG, $02, nRst, nMaxPSG
000CF754 F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop1F
000CF759                            
000CF759                            Mus91_Credits_Loop20:
000CF759 8004 0002                  	dc.b	nRst, $04, nMaxPSG, $02
000CF75D F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop20
000CF762 ECFF                       	smpsPSGAlterVol     $FF
000CF764                            
000CF764                            Mus91_Credits_Loop21:
000CF764 0002 8000                  	dc.b	nMaxPSG, $02, nRst, nMaxPSG
000CF768 F700 18FF F8               	smpsLoop            $00, $18, Mus91_Credits_Loop21
000CF76D ECFE                       	smpsPSGAlterVol     $FE
000CF76F                            
000CF76F                            Mus91_Credits_Loop22:
000CF76F 0004 8000                  	dc.b	nMaxPSG, $04, nRst, nMaxPSG
000CF773 F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop22
000CF778                            
000CF778                            Mus91_Credits_Loop23:
000CF778 E803                       	smpsNoteFill        $03
000CF77A 0C                         	dc.b	$0C
000CF77B E80C                       	smpsNoteFill        $0C
000CF77D 0C                         	dc.b	$0C
000CF77E E803                       	smpsNoteFill        $03
000CF780 0C                         	dc.b	$0C
000CF781 E80C                       	smpsNoteFill        $0C
000CF783 0C                         	dc.b	$0C
000CF784 F700 0DFF F0               	smpsLoop            $00, $0D, Mus91_Credits_Loop23
000CF789 E803                       	smpsNoteFill        $03
000CF78B 06                         	dc.b	$06
000CF78C E80E                       	smpsNoteFill        $0E
000CF78E 12                         	dc.b	$12
000CF78F E803                       	smpsNoteFill        $03
000CF791 0C                         	dc.b	$0C
000CF792 E80F                       	smpsNoteFill        $0F
000CF794 0C                         	dc.b	$0C
000CF795 F2                         	smpsStop
000CF796                            
000CF796                            ; DAC Data
000CF796                            Mus91_Credits_DAC:
000CF796 8206 8282 8282 0C06 0C06+  	dc.b	dSnare, $06, dSnare, dSnare, dSnare, dSnare, $0C, $06, $0C, $06, $0C, $0C
000CF7A2 0C                         	dc.b	$0C
000CF7A3 F800 00                    	smpsCall            Mus91_Credits_Call00
000CF7A6 8118 820C 8281 1882 0C82   	dc.b	dKick, $18, dSnare, $0C, dSnare, dKick, $18, dSnare, $0C, dSnare
000CF7B0 F800 00                    	smpsCall            Mus91_Credits_Call00
000CF7B3 810C 8282 8282 8282 82     	dc.b	dKick, $0C, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare
000CF7BC                            
000CF7BC                            Mus91_Credits_Loop00:
000CF7BC 8118 820C 8118 0C82 18     	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, $18
000CF7C5 F700 07FF F3               	smpsLoop            $00, $07, Mus91_Credits_Loop00
000CF7CA 8118 820C 8118 820C 0C0C   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, $0C, $0C
000CF7D4                            
000CF7D4                            Mus91_Credits_Loop01:
000CF7D4 8118 820C 8118 0C82 18     	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, $18
000CF7DD F700 03FF F3               	smpsLoop            $00, $03, Mus91_Credits_Loop01
000CF7E2 8118 820C 8118 820C 8282   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, dSnare, dSnare
000CF7EC EB02                       	smpsSetTempoDiv     $02
000CF7EE                            
000CF7EE                            Mus91_Credits_Loop02:
000CF7EE 8112 8106 810C 82          	dc.b	dKick, $12, dKick, $06, dKick, $0C, dSnare
000CF7F5 F700 05FF F5               	smpsLoop            $00, $05, Mus91_Credits_Loop02
000CF7FA 8112 8106 8106 8282 82     	dc.b	dKick, $12, dKick, $06, dKick, $06, dSnare, dSnare, dSnare
000CF803                            
000CF803                            Mus91_Credits_Loop03:
000CF803 810C                       	dc.b	dKick, $0C
000CF805 F700 18FF FA               	smpsLoop            $00, $18, Mus91_Credits_Loop03
000CF80A 810C 8181 8106 8102 8182+  	dc.b	dKick, $0C, dKick, dKick, dKick, $06, dKick, $02, dKick, dSnare, dSnare, $0C
000CF816 8024                       	dc.b	nRst, $24
000CF818                            
000CF818                            Mus91_Credits_Loop04:
000CF818 810C 8181 81               	dc.b	dKick, $0C, dKick, dKick, dKick
000CF81D F700 07FF F7               	smpsLoop            $00, $07, Mus91_Credits_Loop04
000CF822 810C 8182 0382 8282 8282+  	dc.b	dKick, $0C, dKick, dSnare, $03, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare
000CF82E F800 00                    	smpsCall            Mus91_Credits_Call01
000CF831 8802 8101 8905 8201 8805+  	dc.b	dHiTimpani, $02, dKick, $01, dMidTimpani, $05, dSnare, $01, dHiTimpani, $05, dMidTimpani, $06
000CF83D F800 00                    	smpsCall            Mus91_Credits_Call01
000CF840 8902 8201 8805 8201 8905+  	dc.b	dMidTimpani, $02, dSnare, $01, dHiTimpani, $05, dSnare, $01, dMidTimpani, $05, dSnare, $01
000CF84C 8802 8203 8203 8281 8182+  	dc.b	dHiTimpani, $02, dSnare, $03, dSnare, $03, dSnare, dKick, dKick, dSnare, dSnare, dKick
000CF858 8181 8209 8206 0303 8109+  	dc.b	dKick, dKick, dSnare, $09, dSnare, $06, $03, $03, dKick, $09, $03, dSnare
000CF864 0981 0606 0382 0603 0382+  	dc.b	$09, dKick, $06, $06, $03, dSnare, $06, $03, $03, dSnare, $06, dSnare
000CF870 8282 8282 8204 0204 8102   	dc.b	dSnare, dSnare, dSnare, dSnare, dSnare, $04, $02, $04, dKick, $02
000CF87A                            
000CF87A                            Mus91_Credits_Loop05:
000CF87A 8004 8108 8206 8181 0C82+  	dc.b	nRst, $04, dKick, $08, dSnare, $06, dKick, dKick, $0C, dSnare, $0A, dKick
000CF886 02                         	dc.b	$02
000CF887 F700 03FF EF               	smpsLoop            $00, $03, Mus91_Credits_Loop05
000CF88C EB01                       	smpsSetTempoDiv     $01
000CF88E 8018 8214 8104 820C 8282+  	dc.b	nRst, $18, dSnare, $14, dKick, $04, dSnare, $0C, dSnare, dSnare, $0C, $08
000CF89A 8104                       	dc.b	dKick, $04
000CF89C                            
000CF89C                            Mus91_Credits_Loop06:
000CF89C 810C 8281 82               	dc.b	dKick, $0C, dSnare, dKick, dSnare
000CF8A1 F701 03FF F7               	smpsLoop            $01, $03, Mus91_Credits_Loop06
000CF8A6 810C 8281 0680 0282 8282+  	dc.b	dKick, $0C, dSnare, dKick, $06, nRst, $02, dSnare, dSnare, dSnare, $09, dSnare
000CF8B2 03                         	dc.b	$03
000CF8B3 F700 03FF E5               	smpsLoop            $00, $03, Mus91_Credits_Loop06
000CF8B8 810C 8281 8281 0682 1282+  	dc.b	dKick, $0C, dSnare, dKick, dSnare, dKick, $06, dSnare, $12, dSnare, $0C, dKick
000CF8C4 F2                         	smpsStop
000CF8C5                            
000CF8C5                            Mus91_Credits_Call00:
000CF8C5 8118 820C 8118 810C 8281   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dKick, $0C, dSnare, dKick
000CF8CF F700 03FF F2               	smpsLoop            $00, $03, Mus91_Credits_Call00
000CF8D4 E3                         	smpsReturn
000CF8D5                            
000CF8D5                            Mus91_Credits_Call01:
000CF8D5 810C 8209 8106 0381 0188+  	dc.b	dKick, $0C, dSnare, $09, dKick, $06, $03, dKick, $01, dHiTimpani, $02, dMidTimpani
000CF8E1 0382 0188 0B81 0C82 0981+  	dc.b	$03, dSnare, $01, dHiTimpani, $0B, dKick, $0C, dSnare, $09, dKick, $06, $03
000CF8ED 8101 8802 8903 8201 880B+  	dc.b	dKick, $01, dHiTimpani, $02, dMidTimpani, $03, dSnare, $01, dHiTimpani, $0B, dKick, $0C
000CF8F9 8209 8106 0381 0188 0289+  	dc.b	dSnare, $09, dKick, $06, $03, dKick, $01, dHiTimpani, $02, dMidTimpani, $03, dSnare
000CF905 0188 0B81 0C82 0981 0682+  	dc.b	$01, dHiTimpani, $0B, dKick, $0C, dSnare, $09, dKick, $06, dSnare, $01
000CF910 E3                         	smpsReturn
000CF911                            
000CF911                            Mus91_Credits_Call11:
000CF911 F800 00                    	smpsCall            Mus91_Credits_Call1A
000CF914 C3BF C1C3 BF               	dc.b	nFs5, nD5, nE5, nFs5, nD5
000CF919 F800 00                    	smpsCall            Mus91_Credits_Call1A
000CF91C C8C6 C8C9 CB               	dc.b	nB5, nA5, nB5, nC6, nD6
000CF921 E3                         	smpsReturn
000CF922                            
000CF922                            Mus91_Credits_Call1A:
000CF922 C80C C4C8 CBC9 C8C6 C8C6+  	dc.b	nB5, $0C, nG5, nB5, nD6, nC6, nB5, nA5, nB5, nA5, nFs5, nA5
000CF92E C9C8 C6C4 C6C4 C1C4 C8C6+  	dc.b	nC6, nB5, nA5, nG5, nA5, nG5, nE5, nG5, nB5, nA5, nG5, nFs5
000CF93A C4C3 C4C6                  	dc.b	nG5, nFs5, nG5, nA5
000CF93E E3                         	smpsReturn
000CF93F                            
000CF93F                            ; Unused alternate version of Mus91_Credits_Call0B
000CF93F                            ; Mus91_Credits_CallUnk:
000CF93F 800C D0D4 D7DB 0C80 06DB+  	dc.b	nRst, $0C, nG6, nB6, nD7, nFs7, $0C, nRst, $06, nFs7, $0C, nG7
000CF94B 06DB 0CD9 6080 0CD0 D4D7+  	dc.b	$06, nFs7, $0C, nE7, $60, nRst, $0C, nG6, nB6, nD7, nFs7, $0C
000CF957 8006 DB0C DC06 DB0C DD5D+  	dc.b	nRst, $06, nFs7, $0C, nG7, $06, nFs7, $0C, nAb7, $5D, nRst, $03
000CF963 DE12 8006 DE12 8006 8006+  	dc.b	nA7, $12, nRst, $06, nA7, $12, nRst, $06, nRst, $06, nAb7, $12
000CF96F DE06 8012                  	dc.b	nA7, $06, nRst, $12
000CF973 E3                         	smpsReturn
000CF974                            
000CF974                            Mus91_Credits_Call13:
000CF974 E80E                       	smpsNoteFill        $0E
000CF976 0C                         	dc.b	$0C
000CF977 E803                       	smpsNoteFill        $03
000CF979 0606 0606 0606             	dc.b	$06, $06, $06, $06, $06, $06
000CF97F E3                         	smpsReturn
000CF980                            
000CF980                            Mus91_Credits_Call0C:
000CF980 D409 8003 D406 D2          	dc.b	nB6, $09, nRst, $03, nB6, $06, nA6
000CF987 F700 03FF F5               	smpsLoop            $00, $03, Mus91_Credits_Call0C
000CF98C D4D2 CDC9 D00C D206 E7CE+  	dc.b	nB6, nA6, nE6, nC6, nG6, $0C, nA6, $06, smpsNoAttack, nF6, $4D, nRst
000CF998 01D2 24D4 0CD1 24D4 0980+  	dc.b	$01, nA6, $24, nB6, $0C, nAb6, $24, nB6, $09, nRst, $03, nB6
000CF9A4 12D2 1E                    	dc.b	$12, nA6, $1E
000CF9A7 E3                         	smpsReturn
000CF9A8                            
000CF9A8                            Mus91_Credits_Call15:
000CF9A8 8030 8080 DA03 D7D2 CED7+  	dc.b	nRst, $30, nRst, nRst, nF7, $03, nD7, nA6, nF6, nD7, nA6, nF6
000CF9B4 CBD2 CECB C6CE CBC6 C233+  	dc.b	nD6, nA6, nF6, nD6, nA5, nF6, nD6, nA5, nF5, $33, nRst, $5E
000CF9C0 E3                         	smpsReturn
000CF9C1                            
000CF9C1                            Mus91_Credits_Call0D:
000CF9C1 CD2A CD03 CED0 09D2 D306+  	dc.b	nE6, $2A, nE6, $03, nF6, nG6, $09, nA6, nBb6, $06, nA6, $0C
000CF9CD D0CE 1ECE 06CD CE1E CB0C+  	dc.b	nG6, nF6, $1E, nF6, $06, nE6, nF6, $1E, nD6, $0C, nE6, nF6
000CF9D9 2ACB 03CD CE09 D0D1 06D0+  	dc.b	$2A, nD6, $03, nE6, nF6, $09, nG6, nAb6, $06, nG6, $0C, nF6
000CF9E5 E3                         	smpsReturn
000CF9E6                            
000CF9E6                            Mus91_Credits_Call04:
000CF9E6 F800 00                    	smpsCall            Mus91_Credits_Call19
000CF9E9 CB06 8003 CB80 06CA 1880+  	dc.b	nD6, $06, nRst, $03, nD6, nRst, $06, nCs6, $18, nRst, $06
000CF9F4                            
000CF9F4                            Mus91_Credits_Loop2C:
000CF9F4 CE06 8003 CD06 8003 CB80   	dc.b	nF6, $06, nRst, $03, nE6, $06, nRst, $03, nD6, nRst
000CF9FE F700 02FF F2               	smpsLoop            $00, $02, Mus91_Credits_Loop2C
000CFA03 CE06 8003 CD06 8003 CB18+  	dc.b	nF6, $06, nRst, $03, nE6, $06, nRst, $03, nD6, $18, nRst, $06
000CFA0F E9FE                       	smpsAlterPitch      $FE
000CFA11 F800 00                    	smpsCall            Mus91_Credits_Call19
000CFA14 E903                       	smpsAlterPitch      $03
000CFA16 F800 00                    	smpsCall            Mus91_Credits_Call19
000CFA19 E9FF                       	smpsAlterPitch      $FF
000CFA1B 8006                       	dc.b	nRst, $06
000CFA1D E808                       	smpsNoteFill        $08
000CFA1F D009 0909 09               	dc.b	nG6, $09, $09, $09, $09
000CFA24 E805                       	smpsNoteFill        $05
000CFA26 0303                       	dc.b	$03, $03
000CFA28 E800                       	smpsNoteFill        $00
000CFA2A 800C CE24                  	dc.b	nRst, $0C, nF6, $24
000CFA2E E3                         	smpsReturn
000CFA2F                            
000CFA2F                            Mus91_Credits_Call19:
000CFA2F CD06 8003 CD80 06CD 1880+  	dc.b	nE6, $06, nRst, $03, nE6, nRst, $06, nE6, $18, nRst, $06
000CFA3A E3                         	smpsReturn
000CFA3B                            
000CFA3B                            Mus91_Credits_Call09:
000CFA3B D006 8003 D080 06D0 1880+  	dc.b	nG6, $06, nRst, $03, nG6, nRst, $06, nG6, $18, nRst, $06, nF6
000CFA47 0680 03CE 8006 CD18 8006+  	dc.b	$06, nRst, $03, nF6, nRst, $06, nE6, $18, nRst, $06, nA6, $06
000CFA53 8003 D006 8003 CE80 D206+  	dc.b	nRst, $03, nG6, $06, nRst, $03, nF6, nRst, nA6, $06, nRst, $03
000CFA5F D006 8003 CE80 D206 8003+  	dc.b	nG6, $06, nRst, $03, nF6, nRst, nA6, $06, nRst, $03, nG6, $06
000CFA6B 8003 CE18 8006 CE06 8003+  	dc.b	nRst, $03, nF6, $18, nRst, $06, nF6, $06, nRst, $03, nF6, nRst
000CFA77 06CE 1880 06D1 0680 03D1+  	dc.b	$06, nF6, $18, nRst, $06, nAb6, $06, nRst, $03, nAb6, nRst, $06
000CFA83 D118 8006 8006             	dc.b	nAb6, $18, nRst, $06, nRst, $06
000CFA89 E808                       	smpsNoteFill        $08
000CFA8B D409 0909 09               	dc.b	nB6, $09, $09, $09, $09
000CFA90 E805                       	smpsNoteFill        $05
000CFA92 0303                       	dc.b	$03, $03
000CFA94 E800                       	smpsNoteFill        $00
000CFA96 800C D224                  	dc.b	nRst, $0C, nA6, $24
000CFA9A E3                         	smpsReturn
000CFA9B                            
000CFA9B                            Mus91_Credits_Call0E:
000CFA9B F800 00                    	smpsCall            Mus91_Credits_Call18
000CFA9E D012 D206 D012 CD0C        	dc.b	nG6, $12, nA6, $06, nG6, $12, nE6, $0C
000CFAA6 F800 00                    	smpsCall            Mus91_Credits_Call18
000CFAA9 D030 8006                  	dc.b	nG6, $30, nRst, $06
000CFAAD E3                         	smpsReturn
000CFAAE                            
000CFAAE                            Mus91_Credits_Call18:
000CFAAE D01E CD06 C9D5 D30C D506+  	dc.b	nG6, $1E, nE6, $06, nC6, nC7, nBb6, $0C, nC7, $06, nBb6, $0C
000CFABA D006 D3D2 24CD 06CE        	dc.b	nG6, $06, nBb6, nA6, $24, nE6, $06, nF6
000CFAC2 E3                         	smpsReturn
000CFAC3                            
000CFAC3                            Mus91_Credits_Call05:
000CFAC3 8003 CDC9 0606 C4C9 09CD+  	dc.b	nRst, $03, nE6, nC6, $06, $06, nG5, nC6, $09, nE6, $09, nRst
000CFACF 0680 03CE CA06 06C7 CA09+  	dc.b	$06, nRst, $03, nF6, nCs6, $06, $06, nBb5, nCs6, $09, nF6, $09
000CFADB 8006 8003 CDC9 0606 C6C9+  	dc.b	nRst, $06, nRst, $03, nE6, nC6, $06, $06, nA5, nC6, $09, nE6
000CFAE7 0FCB 0C                    	dc.b	$0F, nD6, $0C
000CFAEA E3                         	smpsReturn
000CFAEB                            
000CFAEB                            Mus91_Credits_Voices:
000CFAEB                            ;	Voice $00
000CFAEB                            ;	$20
000CFAEB                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000CFAEB                            ;	$07, $06, $06, $08, 	$20, $10, $10, $F8, 	$19, $37, $13, $80
000CFAEB                            	smpsVcAlgorithm     $00
000CFAEB                            	smpsVcFeedback      $04
000CFAEB                            	smpsVcUnusedBits    $00
000CFAEB                            	smpsVcDetune        $03, $03, $03, $03
000CFAEB                            	smpsVcCoarseFreq    $01, $00, $05, $06
000CFAEB                            	smpsVcRateScale     $02, $02, $03, $03
000CFAEB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000CFAEB                            	smpsVcAmpMod        $00, $00, $00, $00
000CFAEB                            	smpsVcDecayRate1    $06, $09, $06, $07
000CFAEB                            	smpsVcDecayRate2    $08, $06, $06, $07
000CFAEB                            	smpsVcDecayLevel    $0F, $01, $01, $02
000CFAEB                            	smpsVcReleaseRate   $08, $00, $00, $00
000CFAEB 2036 3530 31DF DF9F 9F07+  	smpsVcTotalLevel    $00, $13, $37, $19
000CFB04                            
000CFB04                            ;	Voice $01
000CFB04                            ;	$2C
000CFB04                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000CFB04                            ;	$00, $00, $00, $00, 	$0F, $1F, $0F, $1F, 	$16, $80, $17, $80
000CFB04                            	smpsVcAlgorithm     $04
000CFB04                            	smpsVcFeedback      $05
000CFB04                            	smpsVcUnusedBits    $00
000CFB04                            	smpsVcDetune        $03, $03, $07, $07
000CFB04                            	smpsVcCoarseFreq    $04, $04, $08, $02
000CFB04                            	smpsVcRateScale     $00, $00, $00, $00
000CFB04                            	smpsVcAttackRate    $12, $1F, $12, $1F
000CFB04                            	smpsVcAmpMod        $00, $00, $00, $00
000CFB04                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000CFB04                            	smpsVcDecayRate2    $00, $00, $00, $00
000CFB04                            	smpsVcDecayLevel    $01, $00, $01, $00
000CFB04                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFB04 2C72 7834 341F 121F 1200+  	smpsVcTotalLevel    $00, $17, $00, $16
000CFB1D                            
000CFB1D                            ;	Voice $02
000CFB1D                            ;	$2C
000CFB1D                            ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $00, $00, $00
000CFB1D                            ;	$00, $01, $00, $01, 	$0F, $3F, $0F, $3F, 	$16, $80, $17, $80
000CFB1D                            	smpsVcAlgorithm     $04
000CFB1D                            	smpsVcFeedback      $05
000CFB1D                            	smpsVcUnusedBits    $00
000CFB1D                            	smpsVcDetune        $03, $03, $07, $07
000CFB1D                            	smpsVcCoarseFreq    $04, $04, $04, $04
000CFB1D                            	smpsVcRateScale     $00, $00, $00, $00
000CFB1D                            	smpsVcAttackRate    $1F, $1F, $12, $1F
000CFB1D                            	smpsVcAmpMod        $00, $00, $00, $00
000CFB1D                            	smpsVcDecayRate1    $00, $00, $00, $00
000CFB1D                            	smpsVcDecayRate2    $01, $00, $01, $00
000CFB1D                            	smpsVcDecayLevel    $03, $00, $03, $00
000CFB1D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFB1D 2C74 7434 341F 121F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000CFB36                            
000CFB36                            ;	Voice $03
000CFB36                            ;	$04
000CFB36                            ;	$72, $42, $32, $32, 	$12, $12, $12, $12, 	$00, $08, $00, $08
000CFB36                            ;	$00, $08, $00, $08, 	$0F, $1F, $0F, $1F, 	$23, $80, $23, $80
000CFB36                            	smpsVcAlgorithm     $04
000CFB36                            	smpsVcFeedback      $00
000CFB36                            	smpsVcUnusedBits    $00
000CFB36                            	smpsVcDetune        $03, $03, $04, $07
000CFB36                            	smpsVcCoarseFreq    $02, $02, $02, $02
000CFB36                            	smpsVcRateScale     $00, $00, $00, $00
000CFB36                            	smpsVcAttackRate    $12, $12, $12, $12
000CFB36                            	smpsVcAmpMod        $00, $00, $00, $00
000CFB36                            	smpsVcDecayRate1    $08, $00, $08, $00
000CFB36                            	smpsVcDecayRate2    $08, $00, $08, $00
000CFB36                            	smpsVcDecayLevel    $01, $00, $01, $00
000CFB36                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFB36 0472 4232 3212 1212 1200+  	smpsVcTotalLevel    $00, $23, $00, $23
000CFB4F                            
000CFB4F                            ;	Voice $04
000CFB4F                            ;	$2C
000CFB4F                            ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $07, $00, $07
000CFB4F                            ;	$00, $07, $00, $07, 	$00, $38, $00, $38, 	$16, $80, $17, $80
000CFB4F                            	smpsVcAlgorithm     $04
000CFB4F                            	smpsVcFeedback      $05
000CFB4F                            	smpsVcUnusedBits    $00
000CFB4F                            	smpsVcDetune        $03, $03, $07, $07
000CFB4F                            	smpsVcCoarseFreq    $04, $04, $04, $04
000CFB4F                            	smpsVcRateScale     $00, $00, $00, $00
000CFB4F                            	smpsVcAttackRate    $1F, $1F, $12, $1F
000CFB4F                            	smpsVcAmpMod        $00, $00, $00, $00
000CFB4F                            	smpsVcDecayRate1    $07, $00, $07, $00
000CFB4F                            	smpsVcDecayRate2    $07, $00, $07, $00
000CFB4F                            	smpsVcDecayLevel    $03, $00, $03, $00
000CFB4F                            	smpsVcReleaseRate   $08, $00, $08, $00
000CFB4F 2C74 7434 341F 121F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000CFB68                            
000CFB68                            ;	Voice $05
000CFB68                            ;	$31
000CFB68                            ;	$34, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$0C, $07, $0C, $09
000CFB68                            ;	$07, $07, $07, $08, 	$2F, $1F, $1F, $2F, 	$17, $32, $14, $80
000CFB68                            	smpsVcAlgorithm     $01
000CFB68                            	smpsVcFeedback      $06
000CFB68                            	smpsVcUnusedBits    $00
000CFB68                            	smpsVcDetune        $03, $03, $03, $03
000CFB68                            	smpsVcCoarseFreq    $01, $00, $05, $04
000CFB68                            	smpsVcRateScale     $02, $02, $03, $03
000CFB68                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000CFB68                            	smpsVcAmpMod        $00, $00, $00, $00
000CFB68                            	smpsVcDecayRate1    $09, $0C, $07, $0C
000CFB68                            	smpsVcDecayRate2    $08, $07, $07, $07
000CFB68                            	smpsVcDecayLevel    $02, $01, $01, $02
000CFB68                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFB68 3134 3530 31DF DF9F 9F0C+  	smpsVcTotalLevel    $00, $14, $32, $17
000CFB81                            
000CFB81                            ;	Voice $06
000CFB81                            ;	$18
000CFB81                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000CFB81                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$2C, $22, $14, $80
000CFB81                            	smpsVcAlgorithm     $00
000CFB81                            	smpsVcFeedback      $03
000CFB81                            	smpsVcUnusedBits    $00
000CFB81                            	smpsVcDetune        $03, $03, $03, $03
000CFB81                            	smpsVcCoarseFreq    $01, $00, $00, $07
000CFB81                            	smpsVcRateScale     $02, $00, $03, $02
000CFB81                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000CFB81                            	smpsVcAmpMod        $00, $00, $00, $00
000CFB81                            	smpsVcDecayRate1    $01, $04, $06, $0D
000CFB81                            	smpsVcDecayRate2    $05, $03, $0A, $08
000CFB81                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000CFB81                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFB81 1837 3030 319E DC1C 9C0D+  	smpsVcTotalLevel    $00, $14, $22, $2C
000CFB9A                            
000CFB9A                            ;	Voice $07
000CFB9A                            ;	$3C
000CFB9A                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000CFB9A                            ;	$04, $00, $04, $00, 	$1F, $0F, $1F, $0F, 	$1A, $80, $16, $80
000CFB9A                            	smpsVcAlgorithm     $04
000CFB9A                            	smpsVcFeedback      $07
000CFB9A                            	smpsVcUnusedBits    $00
000CFB9A                            	smpsVcDetune        $03, $05, $05, $03
000CFB9A                            	smpsVcCoarseFreq    $00, $00, $02, $01
000CFB9A                            	smpsVcRateScale     $01, $01, $01, $01
000CFB9A                            	smpsVcAttackRate    $13, $12, $13, $12
000CFB9A                            	smpsVcAmpMod        $00, $00, $00, $00
000CFB9A                            	smpsVcDecayRate1    $00, $08, $00, $08
000CFB9A                            	smpsVcDecayRate2    $00, $04, $00, $04
000CFB9A                            	smpsVcDecayLevel    $00, $01, $00, $01
000CFB9A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFB9A 3C31 5250 3052 5352 5308+  	smpsVcTotalLevel    $00, $16, $00, $1A
000CFBB3                            
000CFBB3                            ;	Voice $08
000CFBB3                            ;	$22
000CFBB3                            ;	$0A, $13, $05, $11, 	$03, $12, $12, $11, 	$00, $13, $13, $00
000CFBB3                            ;	$03, $02, $02, $01, 	$1F, $1F, $0F, $0F, 	$1E, $18, $26, $81
000CFBB3                            	smpsVcAlgorithm     $02
000CFBB3                            	smpsVcFeedback      $04
000CFBB3                            	smpsVcUnusedBits    $00
000CFBB3                            	smpsVcDetune        $01, $00, $01, $00
000CFBB3                            	smpsVcCoarseFreq    $01, $05, $03, $0A
000CFBB3                            	smpsVcRateScale     $00, $00, $00, $00
000CFBB3                            	smpsVcAttackRate    $11, $12, $12, $03
000CFBB3                            	smpsVcAmpMod        $00, $00, $00, $00
000CFBB3                            	smpsVcDecayRate1    $00, $13, $13, $00
000CFBB3                            	smpsVcDecayRate2    $01, $02, $02, $03
000CFBB3                            	smpsVcDecayLevel    $00, $00, $01, $01
000CFBB3                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFBB3 220A 1305 1103 1212 1100+  	smpsVcTotalLevel    $01, $26, $18, $1E
000CFBCC                            
000CFBCC                            ;	Voice $09
000CFBCC                            ;	$3A
000CFBCC                            ;	$61, $3C, $14, $31, 	$9C, $DB, $9C, $DA, 	$04, $09, $04, $03
000CFBCC                            ;	$03, $01, $03, $00, 	$1F, $0F, $0F, $AF, 	$21, $47, $31, $80
000CFBCC                            	smpsVcAlgorithm     $02
000CFBCC                            	smpsVcFeedback      $07
000CFBCC                            	smpsVcUnusedBits    $00
000CFBCC                            	smpsVcDetune        $03, $01, $03, $06
000CFBCC                            	smpsVcCoarseFreq    $01, $04, $0C, $01
000CFBCC                            	smpsVcRateScale     $03, $02, $03, $02
000CFBCC                            	smpsVcAttackRate    $1A, $1C, $1B, $1C
000CFBCC                            	smpsVcAmpMod        $00, $00, $00, $00
000CFBCC                            	smpsVcDecayRate1    $03, $04, $09, $04
000CFBCC                            	smpsVcDecayRate2    $00, $03, $01, $03
000CFBCC                            	smpsVcDecayLevel    $0A, $00, $00, $01
000CFBCC                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFBCC 3A61 3C14 319C DB9C DA04+  	smpsVcTotalLevel    $00, $31, $47, $21
000CFBE5                            
000CFBE5                            ;	Voice $0A
000CFBE5                            ;	$3A
000CFBE5                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000CFBE5                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000CFBE5                            	smpsVcAlgorithm     $02
000CFBE5                            	smpsVcFeedback      $07
000CFBE5                            	smpsVcUnusedBits    $00
000CFBE5                            	smpsVcDetune        $00, $00, $00, $00
000CFBE5                            	smpsVcCoarseFreq    $01, $01, $07, $01
000CFBE5                            	smpsVcRateScale     $01, $02, $02, $02
000CFBE5                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000CFBE5                            	smpsVcAmpMod        $00, $00, $00, $00
000CFBE5                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000CFBE5                            	smpsVcDecayRate2    $00, $00, $00, $00
000CFBE5                            	smpsVcDecayLevel    $00, $01, $0F, $01
000CFBE5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFBE5 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000CFBFE                            
000CFBFE                            ;	Voice $0B
000CFBFE                            ;	$34
000CFBFE                            ;	$33, $41, $7E, $74, 	$5B, $9F, $5F, $1F, 	$04, $07, $07, $08
000CFBFE                            ;	$00, $00, $00, $00, 	$FF, $FF, $EF, $FF, 	$23, $90, $29, $97
000CFBFE                            	smpsVcAlgorithm     $04
000CFBFE                            	smpsVcFeedback      $06
000CFBFE                            	smpsVcUnusedBits    $00
000CFBFE                            	smpsVcDetune        $07, $07, $04, $03
000CFBFE                            	smpsVcCoarseFreq    $04, $0E, $01, $03
000CFBFE                            	smpsVcRateScale     $00, $01, $02, $01
000CFBFE                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
000CFBFE                            	smpsVcAmpMod        $00, $00, $00, $00
000CFBFE                            	smpsVcDecayRate1    $08, $07, $07, $04
000CFBFE                            	smpsVcDecayRate2    $00, $00, $00, $00
000CFBFE                            	smpsVcDecayLevel    $0F, $0E, $0F, $0F
000CFBFE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFBFE 3433 417E 745B 9F5F 1F04+  	smpsVcTotalLevel    $17, $29, $10, $23
000CFC17                            
000CFC17                            ;	Voice $0C
000CFC17                            ;	$04
000CFC17                            ;	$72, $42, $32, $32, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000CFC17                            ;	$00, $00, $00, $00, 	$00, $07, $00, $07, 	$23, $80, $23, $80
000CFC17                            	smpsVcAlgorithm     $04
000CFC17                            	smpsVcFeedback      $00
000CFC17                            	smpsVcUnusedBits    $00
000CFC17                            	smpsVcDetune        $03, $03, $04, $07
000CFC17                            	smpsVcCoarseFreq    $02, $02, $02, $02
000CFC17                            	smpsVcRateScale     $00, $00, $00, $00
000CFC17                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000CFC17                            	smpsVcAmpMod        $00, $00, $00, $00
000CFC17                            	smpsVcDecayRate1    $00, $00, $00, $00
000CFC17                            	smpsVcDecayRate2    $00, $00, $00, $00
000CFC17                            	smpsVcDecayLevel    $00, $00, $00, $00
000CFC17                            	smpsVcReleaseRate   $07, $00, $07, $00
000CFC17 0472 4232 321F 1F1F 1F00+  	smpsVcTotalLevel    $00, $23, $00, $23
000CFC30                            
000CFC30                            ;	Voice $0D
000CFC30                            ;	$3C
000CFC30                            ;	$38, $74, $76, $33, 	$10, $10, $10, $10, 	$02, $07, $04, $07
000CFC30                            ;	$03, $09, $03, $09, 	$2F, $2F, $2F, $2F, 	$1E, $80, $1E, $80
000CFC30                            	smpsVcAlgorithm     $04
000CFC30                            	smpsVcFeedback      $07
000CFC30                            	smpsVcUnusedBits    $00
000CFC30                            	smpsVcDetune        $03, $07, $07, $03
000CFC30                            	smpsVcCoarseFreq    $03, $06, $04, $08
000CFC30                            	smpsVcRateScale     $00, $00, $00, $00
000CFC30                            	smpsVcAttackRate    $10, $10, $10, $10
000CFC30                            	smpsVcAmpMod        $00, $00, $00, $00
000CFC30                            	smpsVcDecayRate1    $07, $04, $07, $02
000CFC30                            	smpsVcDecayRate2    $09, $03, $09, $03
000CFC30                            	smpsVcDecayLevel    $02, $02, $02, $02
000CFC30                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFC30 3C38 7476 3310 1010 1002+  	smpsVcTotalLevel    $00, $1E, $00, $1E
000CFC49                            
000CFC49                            ;	Voice $0E
000CFC49                            ;	$F4
000CFC49                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
000CFC49                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$15, $85, $02, $8A
000CFC49                            	smpsVcAlgorithm     $04
000CFC49                            	smpsVcFeedback      $06
000CFC49                            	smpsVcUnusedBits    $03
000CFC49                            	smpsVcDetune        $00, $00, $00, $00
000CFC49                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
000CFC49                            	smpsVcRateScale     $00, $00, $00, $00
000CFC49                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000CFC49                            	smpsVcAmpMod        $00, $00, $00, $00
000CFC49                            	smpsVcDecayRate1    $0B, $0B, $00, $00
000CFC49                            	smpsVcDecayRate2    $08, $05, $00, $00
000CFC49                            	smpsVcDecayLevel    $0F, $0F, $00, $00
000CFC49                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFC49 F406 040F 0E1F 1F1F 1F00+  	smpsVcTotalLevel    $0A, $02, $05, $15
000CFC62                            
000CFC62                            ;	Voice $0F
000CFC62                            ;	$29
000CFC62                            ;	$36, $74, $71, $31, 	$04, $04, $05, $1D, 	$12, $0E, $1F, $1F
000CFC62                            ;	$04, $06, $03, $01, 	$5F, $6F, $0F, $0F, 	$27, $27, $2E, $80
000CFC62                            	smpsVcAlgorithm     $01
000CFC62                            	smpsVcFeedback      $05
000CFC62                            	smpsVcUnusedBits    $00
000CFC62                            	smpsVcDetune        $03, $07, $07, $03
000CFC62                            	smpsVcCoarseFreq    $01, $01, $04, $06
000CFC62                            	smpsVcRateScale     $00, $00, $00, $00
000CFC62                            	smpsVcAttackRate    $1D, $05, $04, $04
000CFC62                            	smpsVcAmpMod        $00, $00, $00, $00
000CFC62                            	smpsVcDecayRate1    $1F, $1F, $0E, $12
000CFC62                            	smpsVcDecayRate2    $01, $03, $06, $04
000CFC62                            	smpsVcDecayLevel    $00, $00, $06, $05
000CFC62                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFC62 2936 7471 3104 0405 1D12+  	smpsVcTotalLevel    $00, $2E, $27, $27
000CFC7B                            
000CFC7B                            ;	Voice $10
000CFC7B                            ;	$08
000CFC7B                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
000CFC7B                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
000CFC7B                            	smpsVcAlgorithm     $00
000CFC7B                            	smpsVcFeedback      $01
000CFC7B                            	smpsVcUnusedBits    $00
000CFC7B                            	smpsVcDetune        $00, $03, $07, $00
000CFC7B                            	smpsVcCoarseFreq    $00, $00, $00, $0A
000CFC7B                            	smpsVcRateScale     $01, $01, $00, $00
000CFC7B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000CFC7B                            	smpsVcAmpMod        $00, $00, $00, $00
000CFC7B                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
000CFC7B                            	smpsVcDecayRate2    $03, $04, $04, $00
000CFC7B                            	smpsVcDecayLevel    $02, $02, $02, $02
000CFC7B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFC7B 080A 7030 001F 1F5F 5F12+  	smpsVcTotalLevel    $00, $13, $2D, $24
000CFC94                            
000CFC94                            ;	Voice $11
000CFC94                            ;	$3D
000CFC94                            ;	$01, $01, $01, $01, 	$8E, $52, $14, $4C, 	$08, $08, $0E, $03
000CFC94                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1B, $80, $80, $9B
000CFC94                            	smpsVcAlgorithm     $05
000CFC94                            	smpsVcFeedback      $07
000CFC94                            	smpsVcUnusedBits    $00
000CFC94                            	smpsVcDetune        $00, $00, $00, $00
000CFC94                            	smpsVcCoarseFreq    $01, $01, $01, $01
000CFC94                            	smpsVcRateScale     $01, $00, $01, $02
000CFC94                            	smpsVcAttackRate    $0C, $14, $12, $0E
000CFC94                            	smpsVcAmpMod        $00, $00, $00, $00
000CFC94                            	smpsVcDecayRate1    $03, $0E, $08, $08
000CFC94                            	smpsVcDecayRate2    $00, $00, $00, $00
000CFC94                            	smpsVcDecayLevel    $01, $01, $01, $01
000CFC94                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFC94 3D01 0101 018E 5214 4C08+  	smpsVcTotalLevel    $1B, $00, $00, $1B
000CFCAD                            
000CFCAD                            ;	Voice $12
000CFCAD                            ;	$3D
000CFCAD                            ;	$01, $02, $00, $01, 	$1F, $0E, $0E, $0E, 	$07, $1F, $1F, $1F
000CFCAD                            ;	$00, $00, $00, $00, 	$1F, $0F, $0F, $0F, 	$17, $8D, $8C, $8C
000CFCAD                            	smpsVcAlgorithm     $05
000CFCAD                            	smpsVcFeedback      $07
000CFCAD                            	smpsVcUnusedBits    $00
000CFCAD                            	smpsVcDetune        $00, $00, $00, $00
000CFCAD                            	smpsVcCoarseFreq    $01, $00, $02, $01
000CFCAD                            	smpsVcRateScale     $00, $00, $00, $00
000CFCAD                            	smpsVcAttackRate    $0E, $0E, $0E, $1F
000CFCAD                            	smpsVcAmpMod        $00, $00, $00, $00
000CFCAD                            	smpsVcDecayRate1    $1F, $1F, $1F, $07
000CFCAD                            	smpsVcDecayRate2    $00, $00, $00, $00
000CFCAD                            	smpsVcDecayLevel    $00, $00, $00, $01
000CFCAD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFCAD 3D01 0200 011F 0E0E 0E07+  	smpsVcTotalLevel    $0C, $0C, $0D, $17
000CFCC6                            
000CFCC6                            ;	Voice $13
000CFCC6                            ;	$3C
000CFCC6                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000CFCC6                            ;	$04, $00, $04, $00, 	$10, $07, $10, $07, 	$1A, $80, $16, $80
000CFCC6                            	smpsVcAlgorithm     $04
000CFCC6                            	smpsVcFeedback      $07
000CFCC6                            	smpsVcUnusedBits    $00
000CFCC6                            	smpsVcDetune        $03, $05, $05, $03
000CFCC6                            	smpsVcCoarseFreq    $00, $00, $02, $01
000CFCC6                            	smpsVcRateScale     $01, $01, $01, $01
000CFCC6                            	smpsVcAttackRate    $13, $12, $13, $12
000CFCC6                            	smpsVcAmpMod        $00, $00, $00, $00
000CFCC6                            	smpsVcDecayRate1    $00, $08, $00, $08
000CFCC6                            	smpsVcDecayRate2    $00, $04, $00, $04
000CFCC6                            	smpsVcDecayLevel    $00, $01, $00, $01
000CFCC6                            	smpsVcReleaseRate   $07, $00, $07, $00
000CFCC6 3C31 5250 3052 5352 5308+  	smpsVcTotalLevel    $00, $16, $00, $1A
000CFCDF                            
000CFCDF                            ;	Voice $14
000CFCDF                            ;	$18
000CFCDF                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000CFCDF                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $80
000CFCDF                            	smpsVcAlgorithm     $00
000CFCDF                            	smpsVcFeedback      $03
000CFCDF                            	smpsVcUnusedBits    $00
000CFCDF                            	smpsVcDetune        $03, $03, $03, $03
000CFCDF                            	smpsVcCoarseFreq    $01, $00, $00, $07
000CFCDF                            	smpsVcRateScale     $02, $00, $03, $02
000CFCDF                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000CFCDF                            	smpsVcAmpMod        $00, $00, $00, $00
000CFCDF                            	smpsVcDecayRate1    $01, $04, $06, $0D
000CFCDF                            	smpsVcDecayRate2    $05, $03, $0A, $08
000CFCDF                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000CFCDF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFCDF 1837 3030 319E DC1C 9C0D+  	smpsVcTotalLevel    $00, $14, $22, $32
000CFCF8                            
000CFCF8                            ;	Voice $15
000CFCF8                            ;	$3A
000CFCF8                            ;	$01, $01, $01, $02, 	$8D, $07, $07, $52, 	$09, $00, $00, $03
000CFCF8                            ;	$01, $02, $02, $00, 	$5F, $0F, $0F, $2F, 	$18, $22, $18, $80
000CFCF8                            	smpsVcAlgorithm     $02
000CFCF8                            	smpsVcFeedback      $07
000CFCF8                            	smpsVcUnusedBits    $00
000CFCF8                            	smpsVcDetune        $00, $00, $00, $00
000CFCF8                            	smpsVcCoarseFreq    $02, $01, $01, $01
000CFCF8                            	smpsVcRateScale     $01, $00, $00, $02
000CFCF8                            	smpsVcAttackRate    $12, $07, $07, $0D
000CFCF8                            	smpsVcAmpMod        $00, $00, $00, $00
000CFCF8                            	smpsVcDecayRate1    $03, $00, $00, $09
000CFCF8                            	smpsVcDecayRate2    $00, $02, $02, $01
000CFCF8                            	smpsVcDecayLevel    $02, $00, $00, $05
000CFCF8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFCF8 3A01 0101 028D 0707 5209+  	smpsVcTotalLevel    $00, $18, $22, $18
000CFD11                            
000CFD11                            ;	Voice $16
000CFD11                            ;	$2C
000CFD11                            ;	$74, $74, $34, $34, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000CFD11                            ;	$00, $01, $00, $01, 	$0F, $3F, $0F, $3F, 	$16, $80, $17, $80
000CFD11                            	smpsVcAlgorithm     $04
000CFD11                            	smpsVcFeedback      $05
000CFD11                            	smpsVcUnusedBits    $00
000CFD11                            	smpsVcDetune        $03, $03, $07, $07
000CFD11                            	smpsVcCoarseFreq    $04, $04, $04, $04
000CFD11                            	smpsVcRateScale     $00, $00, $00, $00
000CFD11                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000CFD11                            	smpsVcAmpMod        $00, $00, $00, $00
000CFD11                            	smpsVcDecayRate1    $00, $00, $00, $00
000CFD11                            	smpsVcDecayRate2    $01, $00, $01, $00
000CFD11                            	smpsVcDecayLevel    $03, $00, $03, $00
000CFD11                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFD11 2C74 7434 341F 1F1F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000CFD2A                            
000CFD2A                            ;	Voice $17
000CFD2A                            ;	$04
000CFD2A                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000CFD2A                            ;	$00, $00, $00, $00, 	$10, $07, $10, $07, 	$23, $80, $23, $80
000CFD2A                            	smpsVcAlgorithm     $04
000CFD2A                            	smpsVcFeedback      $00
000CFD2A                            	smpsVcUnusedBits    $00
000CFD2A                            	smpsVcDetune        $04, $07, $07, $03
000CFD2A                            	smpsVcCoarseFreq    $09, $07, $02, $07
000CFD2A                            	smpsVcRateScale     $00, $00, $00, $00
000CFD2A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000CFD2A                            	smpsVcAmpMod        $00, $00, $00, $00
000CFD2A                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000CFD2A                            	smpsVcDecayRate2    $00, $00, $00, $00
000CFD2A                            	smpsVcDecayLevel    $00, $01, $00, $01
000CFD2A                            	smpsVcReleaseRate   $07, $00, $07, $00
000CFD2A 0437 7277 491F 1F1F 1F07+  	smpsVcTotalLevel    $00, $23, $00, $23
000CFD43                            
000CFD43                            ;	Voice $18
000CFD43                            ;	$3D
000CFD43                            ;	$01, $02, $02, $02, 	$14, $0E, $8C, $0E, 	$08, $05, $02, $05
000CFD43                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1A, $80, $80, $80
000CFD43                            	smpsVcAlgorithm     $05
000CFD43                            	smpsVcFeedback      $07
000CFD43                            	smpsVcUnusedBits    $00
000CFD43                            	smpsVcDetune        $00, $00, $00, $00
000CFD43                            	smpsVcCoarseFreq    $02, $02, $02, $01
000CFD43                            	smpsVcRateScale     $00, $02, $00, $00
000CFD43                            	smpsVcAttackRate    $0E, $0C, $0E, $14
000CFD43                            	smpsVcAmpMod        $00, $00, $00, $00
000CFD43                            	smpsVcDecayRate1    $05, $02, $05, $08
000CFD43                            	smpsVcDecayRate2    $00, $00, $00, $00
000CFD43                            	smpsVcDecayLevel    $01, $01, $01, $01
000CFD43                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFD43 3D01 0202 0214 0E8C 0E08+  	smpsVcTotalLevel    $00, $00, $00, $1A
000CFD5C                            
000CFD5C                            ;	Voice $19
000CFD5C                            ;	$20
000CFD5C                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000CFD5C                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $37, $13, $80
000CFD5C                            	smpsVcAlgorithm     $00
000CFD5C                            	smpsVcFeedback      $04
000CFD5C                            	smpsVcUnusedBits    $00
000CFD5C                            	smpsVcDetune        $03, $03, $03, $03
000CFD5C                            	smpsVcCoarseFreq    $01, $00, $05, $06
000CFD5C                            	smpsVcRateScale     $02, $02, $03, $03
000CFD5C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000CFD5C                            	smpsVcAmpMod        $00, $00, $00, $00
000CFD5C                            	smpsVcDecayRate1    $06, $09, $06, $07
000CFD5C                            	smpsVcDecayRate2    $08, $06, $06, $07
000CFD5C                            	smpsVcDecayLevel    $0F, $01, $01, $02
000CFD5C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFD5C 2036 3530 31DF DF9F 9F07+  	smpsVcTotalLevel    $00, $13, $37, $19
000CFD75                            
000CFD75                            ;	Voice $1A
000CFD75                            ;	$3A
000CFD75                            ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
000CFD75                            ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
000CFD75                            	smpsVcAlgorithm     $02
000CFD75                            	smpsVcFeedback      $07
000CFD75                            	smpsVcUnusedBits    $00
000CFD75                            	smpsVcDetune        $00, $05, $00, $05
000CFD75                            	smpsVcCoarseFreq    $02, $01, $08, $01
000CFD75                            	smpsVcRateScale     $00, $00, $00, $00
000CFD75                            	smpsVcAttackRate    $10, $1E, $1E, $1E
000CFD75                            	smpsVcAmpMod        $00, $00, $00, $00
000CFD75                            	smpsVcDecayRate1    $0F, $1F, $1F, $1F
000CFD75                            	smpsVcDecayRate2    $02, $00, $00, $00
000CFD75                            	smpsVcDecayLevel    $01, $00, $00, $00
000CFD75                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFD75 3A51 0851 021E 1E1E 101F+  	smpsVcTotalLevel    $01, $22, $24, $18
000CFD8E                            
000CFD8E                            ;	Voice $1B
000CFD8E                            ;	$3A
000CFD8E                            ;	$32, $56, $32, $42, 	$8D, $4F, $15, $52, 	$06, $08, $07, $04
000CFD8E                            ;	$02, $00, $00, $00, 	$1F, $1F, $2F, $2F, 	$19, $20, $2A, $80
000CFD8E                            	smpsVcAlgorithm     $02
000CFD8E                            	smpsVcFeedback      $07
000CFD8E                            	smpsVcUnusedBits    $00
000CFD8E                            	smpsVcDetune        $04, $03, $05, $03
000CFD8E                            	smpsVcCoarseFreq    $02, $02, $06, $02
000CFD8E                            	smpsVcRateScale     $01, $00, $01, $02
000CFD8E                            	smpsVcAttackRate    $12, $15, $0F, $0D
000CFD8E                            	smpsVcAmpMod        $00, $00, $00, $00
000CFD8E                            	smpsVcDecayRate1    $04, $07, $08, $06
000CFD8E                            	smpsVcDecayRate2    $00, $00, $00, $02
000CFD8E                            	smpsVcDecayLevel    $02, $02, $01, $01
000CFD8E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFD8E 3A32 5632 428D 4F15 5206+  	smpsVcTotalLevel    $00, $2A, $20, $19
000CFDA7                            
000CFDA7                            ;	Voice $1C
000CFDA7                            ;	$3A
000CFDA7                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000CFDA7                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000CFDA7                            	smpsVcAlgorithm     $02
000CFDA7                            	smpsVcFeedback      $07
000CFDA7                            	smpsVcUnusedBits    $00
000CFDA7                            	smpsVcDetune        $00, $00, $00, $00
000CFDA7                            	smpsVcCoarseFreq    $01, $01, $07, $01
000CFDA7                            	smpsVcRateScale     $01, $02, $02, $02
000CFDA7                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000CFDA7                            	smpsVcAmpMod        $00, $00, $00, $00
000CFDA7                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000CFDA7                            	smpsVcDecayRate2    $00, $00, $00, $00
000CFDA7                            	smpsVcDecayLevel    $00, $01, $0F, $01
000CFDA7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFDA7 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000CFDC0                            
000CFDC0                            ;	Voice $1D
000CFDC0                            ;	$08
000CFDC0                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
000CFDC0                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
000CFDC0                            	smpsVcAlgorithm     $00
000CFDC0                            	smpsVcFeedback      $01
000CFDC0                            	smpsVcUnusedBits    $00
000CFDC0                            	smpsVcDetune        $00, $03, $07, $00
000CFDC0                            	smpsVcCoarseFreq    $00, $00, $00, $0A
000CFDC0                            	smpsVcRateScale     $01, $01, $00, $00
000CFDC0                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000CFDC0                            	smpsVcAmpMod        $00, $00, $00, $00
000CFDC0                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
000CFDC0                            	smpsVcDecayRate2    $03, $04, $04, $00
000CFDC0                            	smpsVcDecayLevel    $02, $02, $02, $02
000CFDC0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFDC0 080A 7030 001F 1F5F 5F12+  	smpsVcTotalLevel    $00, $13, $2D, $24
000CFDD9                            
000CFDD9                            ;	Voice $1E
000CFDD9                            ;	$3A
000CFDD9                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000CFDD9                            ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000CFDD9                            	smpsVcAlgorithm     $02
000CFDD9                            	smpsVcFeedback      $07
000CFDD9                            	smpsVcUnusedBits    $00
000CFDD9                            	smpsVcDetune        $00, $00, $00, $00
000CFDD9                            	smpsVcCoarseFreq    $01, $01, $07, $01
000CFDD9                            	smpsVcRateScale     $01, $02, $02, $02
000CFDD9                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000CFDD9                            	smpsVcAmpMod        $00, $00, $00, $00
000CFDD9                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000CFDD9                            	smpsVcDecayRate2    $07, $00, $00, $00
000CFDD9                            	smpsVcDecayLevel    $00, $01, $0F, $01
000CFDD9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFDD9 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000CFDF2                            
000CFDF2                            ;	Voice $1F
000CFDF2                            ;	$36
000CFDF2                            ;	$0F, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$12, $11, $0E, $00
000CFDF2                            ;	$00, $0A, $07, $09, 	$FF, $0F, $1F, $0F, 	$18, $80, $80, $80
000CFDF2                            	smpsVcAlgorithm     $06
000CFDF2                            	smpsVcFeedback      $06
000CFDF2                            	smpsVcUnusedBits    $00
000CFDF2                            	smpsVcDetune        $00, $00, $00, $00
000CFDF2                            	smpsVcCoarseFreq    $01, $01, $01, $0F
000CFDF2                            	smpsVcRateScale     $00, $00, $00, $00
000CFDF2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000CFDF2                            	smpsVcAmpMod        $00, $00, $00, $00
000CFDF2                            	smpsVcDecayRate1    $00, $0E, $11, $12
000CFDF2                            	smpsVcDecayRate2    $09, $07, $0A, $00
000CFDF2                            	smpsVcDecayLevel    $00, $01, $00, $0F
000CFDF2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFDF2 360F 0101 011F 1F1F 1F12+  	smpsVcTotalLevel    $00, $00, $00, $18
000CFE0B                            
000CFE0B                            ;	Voice $20
000CFE0B                            ;	$3A
000CFE0B                            ;	$03, $19, $01, $53, 	$1F, $DF, $1F, $9F, 	$0C, $02, $0C, $05
000CFE0B                            ;	$04, $04, $04, $07, 	$1F, $FF, $0F, $2F, 	$1D, $36, $1B, $80
000CFE0B                            	smpsVcAlgorithm     $02
000CFE0B                            	smpsVcFeedback      $07
000CFE0B                            	smpsVcUnusedBits    $00
000CFE0B                            	smpsVcDetune        $05, $00, $01, $00
000CFE0B                            	smpsVcCoarseFreq    $03, $01, $09, $03
000CFE0B                            	smpsVcRateScale     $02, $00, $03, $00
000CFE0B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000CFE0B                            	smpsVcAmpMod        $00, $00, $00, $00
000CFE0B                            	smpsVcDecayRate1    $05, $0C, $02, $0C
000CFE0B                            	smpsVcDecayRate2    $07, $04, $04, $04
000CFE0B                            	smpsVcDecayLevel    $02, $00, $0F, $01
000CFE0B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000CFE0B 3A03 1901 531F DF1F 9F0C+  	smpsVcTotalLevel    $00, $1B, $36, $1D
000CFE24                            
000CFE24                            
000CFE24                            		even
000CFE24                            Music92:	incbin	sound\music92.bin ; Drowning
000D0166 00                         		even
000D0166                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000D0236                            		even
000D0236                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000D0F0C 00                         		even
000D0F0C                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000D105C 00                         		even
000D105C                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000D1096 00                         		even
000D1096                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000D13FE                            		even
000D13FE                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000D1438 00                         		even
000D1438                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000D1472 00                         		even
000D1472                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000D14AC 00                         		even
000D14AC                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000D14E6 00                         		even
000D14E6                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000D1520 00                         		even
000D1520                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000D155A 00                         		even
000D155A                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000D1A4A                            		even
000D1A4A                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000D1A4A                            GentleBreeze_Header:
000D1A4A =00000001                  smpsHeaderStartSong = 1
000D1A4A 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000D1A4C 0603                       	smpsHeaderChan      $06, $03
000D1A4E 0100                       	smpsHeaderTempo     $01, $00
000D1A50                            
000D1A54 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000D1A58 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000D1A5C 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000D1A60 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000D1A64 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000D1A68 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000D1A6E 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000D1A74 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000D1A7A                            
000D1A7A                            ; PSG3 Data
000D1A7A                            GentleBreeze_PSG3:
000D1A7A F2                         	smpsStop
000D1A7B                            
000D1A7B                            ; FM1 Data
000D1A7B                            GentleBreeze_FM1:
000D1A7D E0C0                       	smpsPan             panCenter, $00
000D1A7F E1FF                       	smpsAlterNote       $FF
000D1A81 C410                       	dc.b	nG5, $10
000D1A83 E60F                       	smpsAlterVol        $0F
000D1A85 C4                         	dc.b	nG5
000D1A86 E6F1                       	smpsAlterVol        $F1
000D1A88 E100                       	smpsAlterNote       $00
000D1A8A C2                         	dc.b	nF5
000D1A8B E60F                       	smpsAlterVol        $0F
000D1A8D 08                         	dc.b	$08
000D1A8E E6F1                       	smpsAlterVol        $F1
000D1A90 C010                       	dc.b	nEb5, $10
000D1A92 E60F                       	smpsAlterVol        $0F
000D1A94 C0                         	dc.b	nEb5
000D1A95 E6F1                       	smpsAlterVol        $F1
000D1A97 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000D1A9D E60F                       	smpsAlterVol        $0F
000D1A9F C9                         	dc.b	nC6
000D1AA0 E6F1                       	smpsAlterVol        $F1
000D1AA2 C5                         	dc.b	nAb5
000D1AA3 E60F                       	smpsAlterVol        $0F
000D1AA5 08                         	dc.b	$08
000D1AA6 E6F1                       	smpsAlterVol        $F1
000D1AA8 C010                       	dc.b	nEb5, $10
000D1AAA E60F                       	smpsAlterVol        $0F
000D1AAC C0                         	dc.b	nEb5
000D1AAD E6F1                       	smpsAlterVol        $F1
000D1AAF C208                       	dc.b	nF5, $08
000D1AB1 E1FF                       	smpsAlterNote       $FF
000D1AB3 C410                       	dc.b	nG5, $10
000D1AB5 E100                       	smpsAlterNote       $00
000D1AB7 C5C7                       	dc.b	nAb5, nBb5
000D1AB9 E60F                       	smpsAlterVol        $0F
000D1ABB C7                         	dc.b	nBb5
000D1ABC E6F1                       	smpsAlterVol        $F1
000D1ABE C5                         	dc.b	nAb5
000D1ABF E60F                       	smpsAlterVol        $0F
000D1AC1 08                         	dc.b	$08
000D1AC2 E6F1                       	smpsAlterVol        $F1
000D1AC4 E1FF                       	smpsAlterNote       $FF
000D1AC6 C410                       	dc.b	nG5, $10
000D1AC8 E60F                       	smpsAlterVol        $0F
000D1ACA C4                         	dc.b	nG5
000D1ACB E6F1                       	smpsAlterVol        $F1
000D1ACD C4                         	dc.b	nG5
000D1ACE E100                       	smpsAlterNote       $00
000D1AD0 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000D1AD5 E60F                       	smpsAlterVol        $0F
000D1AD7 C2                         	dc.b	nF5
000D1AD8 E6F1                       	smpsAlterVol        $F1
000D1ADA E1FF                       	smpsAlterNote       $FF
000D1ADC C4                         	dc.b	nG5
000D1ADD E60F                       	smpsAlterVol        $0F
000D1ADF 08                         	dc.b	$08
000D1AE0 E6F1                       	smpsAlterVol        $F1
000D1AE2 10                         	dc.b	$10
000D1AE3 E60F                       	smpsAlterVol        $0F
000D1AE5 38                         	dc.b	$38
000D1AE6 E6F1                       	smpsAlterVol        $F1
000D1AE8 10                         	dc.b	$10
000D1AE9 E60F                       	smpsAlterVol        $0F
000D1AEB C4                         	dc.b	nG5
000D1AEC E6F1                       	smpsAlterVol        $F1
000D1AEE E100                       	smpsAlterNote       $00
000D1AF0 C2                         	dc.b	nF5
000D1AF1 E60F                       	smpsAlterVol        $0F
000D1AF3 08                         	dc.b	$08
000D1AF4 E6F1                       	smpsAlterVol        $F1
000D1AF6 C010                       	dc.b	nEb5, $10
000D1AF8 E60F                       	smpsAlterVol        $0F
000D1AFA C0                         	dc.b	nEb5
000D1AFB E6F1                       	smpsAlterVol        $F1
000D1AFD BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000D1B03 E60F                       	smpsAlterVol        $0F
000D1B05 C9                         	dc.b	nC6
000D1B06 E6F1                       	smpsAlterVol        $F1
000D1B08 C5                         	dc.b	nAb5
000D1B09 E60F                       	smpsAlterVol        $0F
000D1B0B 08                         	dc.b	$08
000D1B0C E6F1                       	smpsAlterVol        $F1
000D1B0E C010                       	dc.b	nEb5, $10
000D1B10 E60F                       	smpsAlterVol        $0F
000D1B12 C0                         	dc.b	nEb5
000D1B13 E6F1                       	smpsAlterVol        $F1
000D1B15 C208                       	dc.b	nF5, $08
000D1B17 E1FF                       	smpsAlterNote       $FF
000D1B19 C410                       	dc.b	nG5, $10
000D1B1B E100                       	smpsAlterNote       $00
000D1B1D C5C7                       	dc.b	nAb5, nBb5
000D1B1F E60F                       	smpsAlterVol        $0F
000D1B21 C7                         	dc.b	nBb5
000D1B22 E6F1                       	smpsAlterVol        $F1
000D1B24 C5                         	dc.b	nAb5
000D1B25 E60F                       	smpsAlterVol        $0F
000D1B27 08                         	dc.b	$08
000D1B28 E6F1                       	smpsAlterVol        $F1
000D1B2A E1FF                       	smpsAlterNote       $FF
000D1B2C C410                       	dc.b	nG5, $10
000D1B2E E60F                       	smpsAlterVol        $0F
000D1B30 C4                         	dc.b	nG5
000D1B31 E6F1                       	smpsAlterVol        $F1
000D1B33 C4                         	dc.b	nG5
000D1B34 E100                       	smpsAlterNote       $00
000D1B36 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000D1B3B E60F                       	smpsAlterVol        $0F
000D1B3D 28                         	dc.b	$28
000D1B3E E6F1                       	smpsAlterVol        $F1
000D1B40 C008 10                    	dc.b	nEb5, $08, $10
000D1B43 E60F                       	smpsAlterVol        $0F
000D1B45 21                         	dc.b	$21
000D1B46                            
000D1B46                            GentleBreeze_Loop12:
000D1B46 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000D1B49 F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000D1B4E E717                       	dc.b	smpsNoAttack, $17
000D1B50 E6F1                       	smpsAlterVol        $F1
000D1B52 E1FF                       	smpsAlterNote       $FF
000D1B54 C410                       	dc.b	nG5, $10
000D1B56 E60F                       	smpsAlterVol        $0F
000D1B58 C4                         	dc.b	nG5
000D1B59 E6F1                       	smpsAlterVol        $F1
000D1B5B E100                       	smpsAlterNote       $00
000D1B5D C2                         	dc.b	nF5
000D1B5E E60F                       	smpsAlterVol        $0F
000D1B60 08                         	dc.b	$08
000D1B61 E6F1                       	smpsAlterVol        $F1
000D1B63 C010                       	dc.b	nEb5, $10
000D1B65 E60F                       	smpsAlterVol        $0F
000D1B67 C0                         	dc.b	nEb5
000D1B68 E6F1                       	smpsAlterVol        $F1
000D1B6A BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000D1B70 E60F                       	smpsAlterVol        $0F
000D1B72 C9                         	dc.b	nC6
000D1B73 E6F1                       	smpsAlterVol        $F1
000D1B75 C5                         	dc.b	nAb5
000D1B76 E60F                       	smpsAlterVol        $0F
000D1B78 08                         	dc.b	$08
000D1B79 E6F1                       	smpsAlterVol        $F1
000D1B7B C010                       	dc.b	nEb5, $10
000D1B7D E60F                       	smpsAlterVol        $0F
000D1B7F C0                         	dc.b	nEb5
000D1B80 E6F1                       	smpsAlterVol        $F1
000D1B82 C208                       	dc.b	nF5, $08
000D1B84 E1FF                       	smpsAlterNote       $FF
000D1B86 C410                       	dc.b	nG5, $10
000D1B88 E100                       	smpsAlterNote       $00
000D1B8A C5C7                       	dc.b	nAb5, nBb5
000D1B8C E60F                       	smpsAlterVol        $0F
000D1B8E C7                         	dc.b	nBb5
000D1B8F E6F1                       	smpsAlterVol        $F1
000D1B91 C5                         	dc.b	nAb5
000D1B92 E60F                       	smpsAlterVol        $0F
000D1B94 08                         	dc.b	$08
000D1B95 E6F1                       	smpsAlterVol        $F1
000D1B97 E1FF                       	smpsAlterNote       $FF
000D1B99 C410                       	dc.b	nG5, $10
000D1B9B E60F                       	smpsAlterVol        $0F
000D1B9D C4                         	dc.b	nG5
000D1B9E E6F1                       	smpsAlterVol        $F1
000D1BA0 C4                         	dc.b	nG5
000D1BA1 E100                       	smpsAlterNote       $00
000D1BA3 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000D1BA8 E60F                       	smpsAlterVol        $0F
000D1BAA C2                         	dc.b	nF5
000D1BAB E6F1                       	smpsAlterVol        $F1
000D1BAD E1FF                       	smpsAlterNote       $FF
000D1BAF C4                         	dc.b	nG5
000D1BB0 E60F                       	smpsAlterVol        $0F
000D1BB2 08                         	dc.b	$08
000D1BB3 E6F1                       	smpsAlterVol        $F1
000D1BB5 10                         	dc.b	$10
000D1BB6 E60F                       	smpsAlterVol        $0F
000D1BB8 38                         	dc.b	$38
000D1BB9 E6F1                       	smpsAlterVol        $F1
000D1BBB 10                         	dc.b	$10
000D1BBC E60F                       	smpsAlterVol        $0F
000D1BBE C4                         	dc.b	nG5
000D1BBF E6F1                       	smpsAlterVol        $F1
000D1BC1 E100                       	smpsAlterNote       $00
000D1BC3 C2                         	dc.b	nF5
000D1BC4 E60F                       	smpsAlterVol        $0F
000D1BC6 08                         	dc.b	$08
000D1BC7 E6F1                       	smpsAlterVol        $F1
000D1BC9 C010                       	dc.b	nEb5, $10
000D1BCB E60F                       	smpsAlterVol        $0F
000D1BCD C0                         	dc.b	nEb5
000D1BCE E6F1                       	smpsAlterVol        $F1
000D1BD0 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000D1BD6 E60F                       	smpsAlterVol        $0F
000D1BD8 C9                         	dc.b	nC6
000D1BD9 E6F1                       	smpsAlterVol        $F1
000D1BDB C5                         	dc.b	nAb5
000D1BDC E60F                       	smpsAlterVol        $0F
000D1BDE 08                         	dc.b	$08
000D1BDF E6F1                       	smpsAlterVol        $F1
000D1BE1 C010                       	dc.b	nEb5, $10
000D1BE3 E60F                       	smpsAlterVol        $0F
000D1BE5 C0                         	dc.b	nEb5
000D1BE6 E6F1                       	smpsAlterVol        $F1
000D1BE8 C208                       	dc.b	nF5, $08
000D1BEA E1FF                       	smpsAlterNote       $FF
000D1BEC C410                       	dc.b	nG5, $10
000D1BEE E100                       	smpsAlterNote       $00
000D1BF0 C5C7                       	dc.b	nAb5, nBb5
000D1BF2 E60F                       	smpsAlterVol        $0F
000D1BF4 C7                         	dc.b	nBb5
000D1BF5 E6F1                       	smpsAlterVol        $F1
000D1BF7 C5                         	dc.b	nAb5
000D1BF8 E60F                       	smpsAlterVol        $0F
000D1BFA 08                         	dc.b	$08
000D1BFB E6F1                       	smpsAlterVol        $F1
000D1BFD E1FF                       	smpsAlterNote       $FF
000D1BFF C410                       	dc.b	nG5, $10
000D1C01 E60F                       	smpsAlterVol        $0F
000D1C03 C4                         	dc.b	nG5
000D1C04 E6F1                       	smpsAlterVol        $F1
000D1C06 C4                         	dc.b	nG5
000D1C07 E100                       	smpsAlterNote       $00
000D1C09 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000D1C0E E60F                       	smpsAlterVol        $0F
000D1C10 28                         	dc.b	$28
000D1C11 E6F1                       	smpsAlterVol        $F1
000D1C13 C008 10                    	dc.b	nEb5, $08, $10
000D1C16 E60F                       	smpsAlterVol        $0F
000D1C18 21                         	dc.b	$21
000D1C19 E0C0                       	smpsPan             panCenter, $00
000D1C1B F6FF 29                    	smpsJump            GentleBreeze_Loop12
000D1C1E                            
000D1C1E                            ; FM2 Data
000D1C1E                            GentleBreeze_FM2:
000D1C20 E60C                       	smpsAlterVol        $0C
000D1C22 E0C0                       	smpsPan             panCenter, $00
000D1C24 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000D1C30 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000D1C3C 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000D1C48 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000D1C54 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000D1C60 A039                       	dc.b	nG2, $39
000D1C62                            
000D1C62                            GentleBreeze_Jump04:
000D1C62 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000D1C65                            
000D1C65                            GentleBreeze_Loop11:
000D1C65 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000D1C71 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000D1C7D 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000D1C89 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000D1C95 A3                         	dc.b	nBb2
000D1C96 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000D1C9B 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000D1CA7 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000D1CB3 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000D1CBF 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000D1CCB 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000D1CD7 A039                       	dc.b	nG2, $39
000D1CD9 E0C0                       	smpsPan             panCenter, $00
000D1CDB F6FF 85                    	smpsJump            GentleBreeze_Jump04
000D1CDE                            
000D1CDE                            ; FM3 Data
000D1CDE                            GentleBreeze_FM3:
000D1CE0 E0C0                       	smpsPan             panCenter, $00
000D1CE2 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000D1CEA E616                       	smpsAlterVol        $16
000D1CEC F000 0207 03               	smpsModSet          $00, $02, $07, $03
000D1CF1                            
000D1CF1                            GentleBreeze_Loop0F:
000D1CF1 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000D1CF5 E1FF                       	smpsAlterNote       $FF
000D1CF7 C4                         	dc.b	nG5
000D1CF8 E100                       	smpsAlterNote       $00
000D1CFA C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000D1CFF E608                       	smpsAlterVol        $08
000D1D01 C080 08                    	dc.b	nEb5, nRst, $08
000D1D04 E6F8                       	smpsAlterVol        $F8
000D1D06 C7                         	dc.b	nBb5
000D1D07 E1FF                       	smpsAlterNote       $FF
000D1D09 C4                         	dc.b	nG5
000D1D0A E100                       	smpsAlterNote       $00
000D1D0C C0BB                       	dc.b	nEb5, nBb4
000D1D0E F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000D1D13 C0BD C9                    	dc.b	nEb5, nC5, nC6
000D1D16 E1FF                       	smpsAlterNote       $FF
000D1D18 C4                         	dc.b	nG5
000D1D19 E100                       	smpsAlterNote       $00
000D1D1B C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000D1D20 E608                       	smpsAlterVol        $08
000D1D22 C080 08                    	dc.b	nEb5, nRst, $08
000D1D25 E6F8                       	smpsAlterVol        $F8
000D1D27 E1FF                       	smpsAlterNote       $FF
000D1D29 C4                         	dc.b	nG5
000D1D2A E100                       	smpsAlterNote       $00
000D1D2C C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000D1D33 E1FF                       	smpsAlterNote       $FF
000D1D35 C4                         	dc.b	nG5
000D1D36 E100                       	smpsAlterNote       $00
000D1D38 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000D1D3D E1FF                       	smpsAlterNote       $FF
000D1D3F C4                         	dc.b	nG5
000D1D40 E100                       	smpsAlterNote       $00
000D1D42 C7                         	dc.b	nBb5
000D1D43 E1FF                       	smpsAlterNote       $FF
000D1D45 C4                         	dc.b	nG5
000D1D46 E100                       	smpsAlterNote       $00
000D1D48 C2C0 01                    	dc.b	nF5, nEb5, $01
000D1D4B                            
000D1D4B                            GentleBreeze_Jump03:
000D1D4B E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000D1D52 E6FA                       	smpsAlterVol        $FA
000D1D54 F4                         	smpsModOff
000D1D55 E1FF                       	smpsAlterNote       $FF
000D1D57 B850                       	dc.b	nG4, $50
000D1D59 E100                       	smpsAlterNote       $00
000D1D5B B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000D1D67 E1FF                       	smpsAlterNote       $FF
000D1D69 B810                       	dc.b	nG4, $10
000D1D6B E100                       	smpsAlterNote       $00
000D1D6D BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000D1D72 E1FF                       	smpsAlterNote       $FF
000D1D74 B8                         	dc.b	nG4
000D1D75 E100                       	smpsAlterNote       $00
000D1D77 B610                       	dc.b	nF4, $10
000D1D79 E1FF                       	smpsAlterNote       $FF
000D1D7B B850                       	dc.b	nG4, $50
000D1D7D E100                       	smpsAlterNote       $00
000D1D7F B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000D1D87 E1FF                       	smpsAlterNote       $FF
000D1D89 AC08                       	dc.b	nG3, $08
000D1D8B E100                       	smpsAlterNote       $00
000D1D8D AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000D1D92 E1FF                       	smpsAlterNote       $FF
000D1D94 B850                       	dc.b	nG4, $50
000D1D96 E100                       	smpsAlterNote       $00
000D1D98 BB08                       	dc.b	nBb4, $08
000D1D9A E1FF                       	smpsAlterNote       $FF
000D1D9C B8                         	dc.b	nG4
000D1D9D E100                       	smpsAlterNote       $00
000D1D9F BDBB B6                    	dc.b	nC5, nBb4, nF4
000D1DA2 E1FF                       	smpsAlterNote       $FF
000D1DA4 B810 08                    	dc.b	nG4, $10, $08
000D1DA7 E100                       	smpsAlterNote       $00
000D1DA9 B6                         	dc.b	nF4
000D1DAA E1FF                       	smpsAlterNote       $FF
000D1DAC B880                       	dc.b	nG4, nRst
000D1DAE E100                       	smpsAlterNote       $00
000D1DB0 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000D1DB3 E1FF                       	smpsAlterNote       $FF
000D1DB5 B810                       	dc.b	nG4, $10
000D1DB7 E100                       	smpsAlterNote       $00
000D1DB9 B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000D1DC0 E1FF                       	smpsAlterNote       $FF
000D1DC2 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000D1DD0 E606                       	smpsAlterVol        $06
000D1DD2 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000D1DD7 E100                       	smpsAlterNote       $00
000D1DD9                            
000D1DD9                            GentleBreeze_Loop10:
000D1DD9 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000D1DDD E1FF                       	smpsAlterNote       $FF
000D1DDF C4                         	dc.b	nG5
000D1DE0 E100                       	smpsAlterNote       $00
000D1DE2 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000D1DE7 E608                       	smpsAlterVol        $08
000D1DE9 C080 08                    	dc.b	nEb5, nRst, $08
000D1DEC E6F8                       	smpsAlterVol        $F8
000D1DEE C7                         	dc.b	nBb5
000D1DEF E1FF                       	smpsAlterNote       $FF
000D1DF1 C4                         	dc.b	nG5
000D1DF2 E100                       	smpsAlterNote       $00
000D1DF4 C0BB                       	dc.b	nEb5, nBb4
000D1DF6 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000D1DFB C0BD C9                    	dc.b	nEb5, nC5, nC6
000D1DFE E1FF                       	smpsAlterNote       $FF
000D1E00 C4                         	dc.b	nG5
000D1E01 E100                       	smpsAlterNote       $00
000D1E03 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000D1E08 E608                       	smpsAlterVol        $08
000D1E0A C080 08                    	dc.b	nEb5, nRst, $08
000D1E0D E6F8                       	smpsAlterVol        $F8
000D1E0F E1FF                       	smpsAlterNote       $FF
000D1E11 C4                         	dc.b	nG5
000D1E12 E100                       	smpsAlterNote       $00
000D1E14 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000D1E1B E1FF                       	smpsAlterNote       $FF
000D1E1D C4                         	dc.b	nG5
000D1E1E E100                       	smpsAlterNote       $00
000D1E20 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000D1E25 E1FF                       	smpsAlterNote       $FF
000D1E27 C4                         	dc.b	nG5
000D1E28 E100                       	smpsAlterNote       $00
000D1E2A C7                         	dc.b	nBb5
000D1E2B E1FF                       	smpsAlterNote       $FF
000D1E2D C4                         	dc.b	nG5
000D1E2E E100                       	smpsAlterNote       $00
000D1E30 C2C0 01                    	dc.b	nF5, nEb5, $01
000D1E33 E0C0                       	smpsPan             panCenter, $00
000D1E35 F1                         	smpsModOn
000D1E36 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000D1E39                            
000D1E39                            ; FM4 Data
000D1E39                            GentleBreeze_FM4:
000D1E3B E0C0                       	smpsPan             panCenter, $00
000D1E3D 80                         	dc.b	nRst
000D1E3E                            
000D1E3E                            GentleBreeze_Loop0D:
000D1E3E 7F                         	dc.b	$7F
000D1E3F F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000D1E44 77                         	dc.b	$77
000D1E47 E609                       	smpsAlterVol        $09
000D1E49 C001                       	dc.b	nEb5, $01
000D1E4B                            
000D1E4B                            GentleBreeze_Jump02:
000D1E4B E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000D1E50 E607                       	smpsAlterVol        $07
000D1E52 E1FF                       	smpsAlterNote       $FF
000D1E54 C450                       	dc.b	nG5, $50
000D1E56 E100                       	smpsAlterNote       $00
000D1E58 C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000D1E64 E1FF                       	smpsAlterNote       $FF
000D1E66 C410                       	dc.b	nG5, $10
000D1E68 E100                       	smpsAlterNote       $00
000D1E6A C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000D1E6F E1FF                       	smpsAlterNote       $FF
000D1E71 C4                         	dc.b	nG5
000D1E72 E100                       	smpsAlterNote       $00
000D1E74 C210                       	dc.b	nF5, $10
000D1E76 E1FF                       	smpsAlterNote       $FF
000D1E78 C450                       	dc.b	nG5, $50
000D1E7A E100                       	smpsAlterNote       $00
000D1E7C C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000D1E84 E1FF                       	smpsAlterNote       $FF
000D1E86 B808                       	dc.b	nG4, $08
000D1E88 E100                       	smpsAlterNote       $00
000D1E8A BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000D1E8F E1FF                       	smpsAlterNote       $FF
000D1E91 C450                       	dc.b	nG5, $50
000D1E93 E100                       	smpsAlterNote       $00
000D1E95 C708                       	dc.b	nBb5, $08
000D1E97 E1FF                       	smpsAlterNote       $FF
000D1E99 C4                         	dc.b	nG5
000D1E9A E100                       	smpsAlterNote       $00
000D1E9C C9C7 C2                    	dc.b	nC6, nBb5, nF5
000D1E9F E1FF                       	smpsAlterNote       $FF
000D1EA1 C410 08                    	dc.b	nG5, $10, $08
000D1EA4 E100                       	smpsAlterNote       $00
000D1EA6 C2                         	dc.b	nF5
000D1EA7 E1FF                       	smpsAlterNote       $FF
000D1EA9 C480                       	dc.b	nG5, nRst
000D1EAB E100                       	smpsAlterNote       $00
000D1EAD C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000D1EB0 E1FF                       	smpsAlterNote       $FF
000D1EB2 C410                       	dc.b	nG5, $10
000D1EB4 E100                       	smpsAlterNote       $00
000D1EB6 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000D1EBD E1FF                       	smpsAlterNote       $FF
000D1EBF C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000D1EC7                            
000D1EC7                            GentleBreeze_Loop0E:
000D1EC7 7F                         	dc.b	$7F
000D1EC8 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000D1ECD 77                         	dc.b	$77
000D1ECE E100                       	smpsAlterNote       $00
000D1ED0 C001                       	dc.b	nEb5, $01
000D1ED2 E6F9                       	smpsAlterVol        $F9
000D1ED4 E0C0                       	smpsPan             panCenter, $00
000D1ED6 E100                       	smpsAlterNote       $00
000D1ED8 F6FF 71                    	smpsJump            GentleBreeze_Jump02
000D1EDB                            
000D1EDB                            ; FM5 Data
000D1EDB                            GentleBreeze_FM5:
000D1EDD E0C0                       	smpsPan             panCenter, $00
000D1EDF A5                         	dc.b	nC3
000D1EE0                            
000D1EE0                            GentleBreeze_Loop06:
000D1EE0 10                         	dc.b	$10
000D1EE1 E607                       	smpsAlterVol        $07
000D1EE3 A5                         	dc.b	nC3
000D1EE4 E6F9                       	smpsAlterVol        $F9
000D1EE6 08                         	dc.b	$08
000D1EE7 E607                       	smpsAlterVol        $07
000D1EE9 A5                         	dc.b	nC3
000D1EEA E608                       	smpsAlterVol        $08
000D1EEC A5                         	dc.b	nC3
000D1EED E6F1                       	smpsAlterVol        $F1
000D1EEF 18                         	dc.b	$18
000D1EF0 E607                       	smpsAlterVol        $07
000D1EF2 10                         	dc.b	$10
000D1EF3 E608                       	smpsAlterVol        $08
000D1EF5 A5                         	dc.b	nC3
000D1EF6 E6F1                       	smpsAlterVol        $F1
000D1EF8 A5                         	dc.b	nC3
000D1EF9 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000D1EFE A5                         	dc.b	nC3
000D1EFF                            
000D1EFF                            GentleBreeze_Loop07:
000D1EFF E607                       	smpsAlterVol        $07
000D1F01 A5                         	dc.b	nC3
000D1F02 E6F9                       	smpsAlterVol        $F9
000D1F04 08                         	dc.b	$08
000D1F05 E607                       	smpsAlterVol        $07
000D1F07 A5                         	dc.b	nC3
000D1F08 E608                       	smpsAlterVol        $08
000D1F0A A5                         	dc.b	nC3
000D1F0B E6F1                       	smpsAlterVol        $F1
000D1F0D 10                         	dc.b	$10
000D1F0E F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000D1F13                            
000D1F13                            GentleBreeze_Loop08:
000D1F13 A5                         	dc.b	nC3
000D1F14 E607                       	smpsAlterVol        $07
000D1F16 A5                         	dc.b	nC3
000D1F17 E6F9                       	smpsAlterVol        $F9
000D1F19 08                         	dc.b	$08
000D1F1A E607                       	smpsAlterVol        $07
000D1F1C A5                         	dc.b	nC3
000D1F1D E608                       	smpsAlterVol        $08
000D1F1F A5                         	dc.b	nC3
000D1F20 E6F1                       	smpsAlterVol        $F1
000D1F22 18                         	dc.b	$18
000D1F23 E607                       	smpsAlterVol        $07
000D1F25 10                         	dc.b	$10
000D1F26 E608                       	smpsAlterVol        $08
000D1F28 A5                         	dc.b	nC3
000D1F29 E6F1                       	smpsAlterVol        $F1
000D1F2B A5                         	dc.b	nC3
000D1F2C F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000D1F31 A5                         	dc.b	nC3
000D1F32 E607                       	smpsAlterVol        $07
000D1F34 A5                         	dc.b	nC3
000D1F35 E6F9                       	smpsAlterVol        $F9
000D1F37 08                         	dc.b	$08
000D1F38 E607                       	smpsAlterVol        $07
000D1F3A A5                         	dc.b	nC3
000D1F3B E608                       	smpsAlterVol        $08
000D1F3D A5                         	dc.b	nC3
000D1F3E E6F1                       	smpsAlterVol        $F1
000D1F40 10                         	dc.b	$10
000D1F41 E607                       	smpsAlterVol        $07
000D1F43 A5                         	dc.b	nC3
000D1F44 E6F9                       	smpsAlterVol        $F9
000D1F46 08                         	dc.b	$08
000D1F47 E607                       	smpsAlterVol        $07
000D1F49 A5                         	dc.b	nC3
000D1F4A E608                       	smpsAlterVol        $08
000D1F4C A5                         	dc.b	nC3
000D1F4D E6F1                       	smpsAlterVol        $F1
000D1F4F 01                         	dc.b	$01
000D1F50                            
000D1F50                            GentleBreeze_Jump01:
000D1F50 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000D1F53 E607                       	smpsAlterVol        $07
000D1F55                            
000D1F55                            GentleBreeze_Loop09:
000D1F55 10                         	dc.b	$10
000D1F56 E608                       	smpsAlterVol        $08
000D1F58 A5                         	dc.b	nC3
000D1F59 E6F1                       	smpsAlterVol        $F1
000D1F5B 08                         	dc.b	$08
000D1F5C E60F                       	smpsAlterVol        $0F
000D1F5E 18                         	dc.b	$18
000D1F5F E6F8                       	smpsAlterVol        $F8
000D1F61 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000D1F66 10                         	dc.b	$10
000D1F67 E608                       	smpsAlterVol        $08
000D1F69 A5                         	dc.b	nC3
000D1F6A E6F1                       	smpsAlterVol        $F1
000D1F6C 08                         	dc.b	$08
000D1F6D E60F                       	smpsAlterVol        $0F
000D1F6F 18                         	dc.b	$18
000D1F70 E6F1                       	smpsAlterVol        $F1
000D1F72                            
000D1F72                            GentleBreeze_Loop0A:
000D1F72 10                         	dc.b	$10
000D1F73 E607                       	smpsAlterVol        $07
000D1F75 A5                         	dc.b	nC3
000D1F76 E6F9                       	smpsAlterVol        $F9
000D1F78 08                         	dc.b	$08
000D1F79 E607                       	smpsAlterVol        $07
000D1F7B A5                         	dc.b	nC3
000D1F7C E608                       	smpsAlterVol        $08
000D1F7E A5                         	dc.b	nC3
000D1F7F E6F1                       	smpsAlterVol        $F1
000D1F81 18                         	dc.b	$18
000D1F82 E607                       	smpsAlterVol        $07
000D1F84 10                         	dc.b	$10
000D1F85 E608                       	smpsAlterVol        $08
000D1F87 A5                         	dc.b	nC3
000D1F88 E6F1                       	smpsAlterVol        $F1
000D1F8A A5                         	dc.b	nC3
000D1F8B F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000D1F90 A5                         	dc.b	nC3
000D1F91                            
000D1F91                            GentleBreeze_Loop0B:
000D1F91 E607                       	smpsAlterVol        $07
000D1F93 A5                         	dc.b	nC3
000D1F94 E6F9                       	smpsAlterVol        $F9
000D1F96 08                         	dc.b	$08
000D1F97 E607                       	smpsAlterVol        $07
000D1F99 A5                         	dc.b	nC3
000D1F9A E608                       	smpsAlterVol        $08
000D1F9C A5                         	dc.b	nC3
000D1F9D E6F1                       	smpsAlterVol        $F1
000D1F9F 10                         	dc.b	$10
000D1FA0 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000D1FA5                            
000D1FA5                            GentleBreeze_Loop0C:
000D1FA5 A5                         	dc.b	nC3
000D1FA6 E607                       	smpsAlterVol        $07
000D1FA8 A5                         	dc.b	nC3
000D1FA9 E6F9                       	smpsAlterVol        $F9
000D1FAB 08                         	dc.b	$08
000D1FAC E607                       	smpsAlterVol        $07
000D1FAE A5                         	dc.b	nC3
000D1FAF E608                       	smpsAlterVol        $08
000D1FB1 A5                         	dc.b	nC3
000D1FB2 E6F1                       	smpsAlterVol        $F1
000D1FB4 18                         	dc.b	$18
000D1FB5 E607                       	smpsAlterVol        $07
000D1FB7 10                         	dc.b	$10
000D1FB8 E608                       	smpsAlterVol        $08
000D1FBA A5                         	dc.b	nC3
000D1FBB E6F1                       	smpsAlterVol        $F1
000D1FBD A5                         	dc.b	nC3
000D1FBE F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000D1FC3 A5                         	dc.b	nC3
000D1FC4 E607                       	smpsAlterVol        $07
000D1FC6 A5                         	dc.b	nC3
000D1FC7 E6F9                       	smpsAlterVol        $F9
000D1FC9 08                         	dc.b	$08
000D1FCA E607                       	smpsAlterVol        $07
000D1FCC A5                         	dc.b	nC3
000D1FCD E608                       	smpsAlterVol        $08
000D1FCF A5                         	dc.b	nC3
000D1FD0 E6F1                       	smpsAlterVol        $F1
000D1FD2 10                         	dc.b	$10
000D1FD3 E607                       	smpsAlterVol        $07
000D1FD5 A5                         	dc.b	nC3
000D1FD6 E6F9                       	smpsAlterVol        $F9
000D1FD8 08                         	dc.b	$08
000D1FD9 E607                       	smpsAlterVol        $07
000D1FDB A5                         	dc.b	nC3
000D1FDC E608                       	smpsAlterVol        $08
000D1FDE A5                         	dc.b	nC3
000D1FDF E6F1                       	smpsAlterVol        $F1
000D1FE1 01                         	dc.b	$01
000D1FE2 E0C0                       	smpsPan             panCenter, $00
000D1FE4 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000D1FE7                            
000D1FE7                            ; DAC Data
000D1FE7                            GentleBreeze_DAC:
000D1FE7 81                         	dc.b	dKick
000D1FE8                            
000D1FE8                            GentleBreeze_Loop00:
000D1FE8 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000D1FEE F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000D1FF3 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000D1FFE                            
000D1FFE                            GentleBreeze_Loop01:
000D1FFE 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000D2004 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000D2009 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000D2013                            
000D2013                            GentleBreeze_Jump00:
000D2013 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000D2017                            
000D2017                            GentleBreeze_Loop02:
000D2017 81                         	dc.b	dKick
000D2018                            
000D2018                            GentleBreeze_Loop03:
000D2018 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000D2024 088A                       	dc.b	$08, dLowTimpani
000D2026 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000D202B 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000D2037 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000D203C F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000D2041                            
000D2041                            GentleBreeze_Loop04:
000D2041 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000D2047 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000D204C 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000D2057                            
000D2057                            GentleBreeze_Loop05:
000D2057 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000D205D F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000D2062 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000D206C F6FF A5                    	smpsJump            GentleBreeze_Jump00
000D206F                            
000D206F                            ; PSG 1 Data
000D206F                            GentleBreeze_PSG1:
000D206F 80                         	dc.b	nRst
000D2070                            
000D2070                            GentleBreeze_LoopPSG02:
000D2070 7F                         	dc.b	$7F
000D2071 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000D2076 08                         	dc.b	$08
000D2077 EC04                       	smpsPSGAlterVol     $04
000D2079                            
000D2079                            GentleBreeze_JumpPSG01:
000D2079 A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000D2085 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000D208D                            
000D208D                            GentleBreeze_LoopPSG03:
000D208D 7F                         	dc.b	$7F
000D208E F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000D2093 08A3 01                    	dc.b	$08, nBb2, $01
000D2096 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000D2099                            
000D2099                            ; PSG2 Data
000D2099                            GentleBreeze_PSG2:
000D2099 80                         	dc.b	nRst
000D209A                            
000D209A                            GentleBreeze_LoopPSG00:
000D209A 7F                         	dc.b	$7F
000D209B F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000D20A0 08                         	dc.b	$08
000D20A1 EC04                       	smpsPSGAlterVol     $04
000D20A3                            
000D20A3                            GentleBreeze_JumpPSG00:
000D20A3 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000D20AF A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000D20B7                            
000D20B7                            GentleBreeze_LoopPSG01:
000D20B7 7F                         	dc.b	$7F
000D20B8 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000D20BD 08A8 01                    	dc.b	$08, nEb3, $01
000D20C0 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000D20C3                            
000D20C3                            GentleBreeze_Voices:
000D20C3                            ;	Voice $00
000D20C3                            ;	$0C
000D20C3                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000D20C3                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000D20C3                            	smpsVcAlgorithm     $04
000D20C3                            	smpsVcFeedback      $01
000D20C3                            	smpsVcUnusedBits    $00
000D20C3                            	smpsVcDetune        $07, $02, $07, $02
000D20C3                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000D20C3                            	smpsVcRateScale     $00, $00, $00, $00
000D20C3                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000D20C3                            	smpsVcAmpMod        $00, $00, $00, $00
000D20C3                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000D20C3                            	smpsVcDecayRate2    $01, $00, $00, $00
000D20C3                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000D20C3                            	smpsVcReleaseRate   $09, $01, $04, $03
000D20C3 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000D20DC                            
000D20DC                            ;	Voice $01
000D20DC                            ;	$38
000D20DC                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000D20DC                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000D20DC                            	smpsVcAlgorithm     $00
000D20DC                            	smpsVcFeedback      $07
000D20DC                            	smpsVcUnusedBits    $00
000D20DC                            	smpsVcDetune        $03, $07, $01, $05
000D20DC                            	smpsVcCoarseFreq    $00, $00, $07, $04
000D20DC                            	smpsVcRateScale     $00, $02, $00, $02
000D20DC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000D20DC                            	smpsVcAmpMod        $00, $00, $00, $00
000D20DC                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000D20DC                            	smpsVcDecayRate2    $00, $00, $10, $00
000D20DC                            	smpsVcDecayLevel    $00, $00, $00, $00
000D20DC                            	smpsVcReleaseRate   $08, $05, $05, $05
000D20DC 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000D20F5                            
000D20F5                            ;	Voice $02
000D20F5                            ;	$00
000D20F5                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000D20F5                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000D20F5                            	smpsVcAlgorithm     $00
000D20F5                            	smpsVcFeedback      $00
000D20F5                            	smpsVcUnusedBits    $00
000D20F5                            	smpsVcDetune        $00, $00, $00, $00
000D20F5                            	smpsVcCoarseFreq    $00, $00, $00, $00
000D20F5                            	smpsVcRateScale     $00, $00, $00, $00
000D20F5                            	smpsVcAttackRate    $00, $00, $00, $00
000D20F5                            	smpsVcAmpMod        $00, $00, $00, $00
000D20F5                            	smpsVcDecayRate1    $00, $00, $00, $00
000D20F5                            	smpsVcDecayRate2    $00, $00, $00, $00
000D20F5                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000D20F5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000D20F5 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000D210E                            
000D210E                            ;	Voice $03
000D210E                            ;	$36
000D210E                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000D210E                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000D210E                            	smpsVcAlgorithm     $06
000D210E                            	smpsVcFeedback      $06
000D210E                            	smpsVcUnusedBits    $00
000D210E                            	smpsVcDetune        $00, $00, $00, $00
000D210E                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000D210E                            	smpsVcRateScale     $00, $00, $00, $00
000D210E                            	smpsVcAttackRate    $1F, $00, $18, $16
000D210E                            	smpsVcAmpMod        $00, $00, $00, $00
000D210E                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000D210E                            	smpsVcDecayRate2    $00, $00, $12, $00
000D210E                            	smpsVcDecayLevel    $04, $04, $02, $00
000D210E                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000D210E 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000D2127                            
000D2127                            ;	Voice $04
000D2127                            ;	$07
000D2127                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000D2127                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000D2127                            	smpsVcAlgorithm     $07
000D2127                            	smpsVcFeedback      $00
000D2127                            	smpsVcUnusedBits    $00
000D2127                            	smpsVcDetune        $07, $06, $05, $00
000D2127                            	smpsVcCoarseFreq    $05, $04, $03, $05
000D2127                            	smpsVcRateScale     $00, $01, $01, $01
000D2127                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000D2127                            	smpsVcAmpMod        $00, $00, $00, $00
000D2127                            	smpsVcDecayRate1    $17, $17, $17, $17
000D2127                            	smpsVcDecayRate2    $00, $00, $00, $00
000D2127                            	smpsVcDecayLevel    $02, $02, $02, $02
000D2127                            	smpsVcReleaseRate   $06, $06, $06, $06
000D2127 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000D2140                            
000D2140                            ;	Voice $05
000D2140                            ;	$3C
000D2140                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000D2140                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000D2140                            	smpsVcAlgorithm     $04
000D2140                            	smpsVcFeedback      $07
000D2140                            	smpsVcUnusedBits    $00
000D2140                            	smpsVcDetune        $06, $06, $02, $02
000D2140                            	smpsVcCoarseFreq    $01, $03, $01, $01
000D2140                            	smpsVcRateScale     $00, $00, $00, $00
000D2140                            	smpsVcAttackRate    $0E, $14, $10, $13
000D2140                            	smpsVcAmpMod        $00, $00, $00, $00
000D2140                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000D2140                            	smpsVcDecayRate2    $04, $04, $04, $04
000D2140                            	smpsVcDecayLevel    $02, $01, $01, $01
000D2140                            	smpsVcReleaseRate   $07, $07, $07, $07
000D2140 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000D2159                            
000D2159                            
000D215A 00                         		even
000D215A                            ; ---------------------------------------------------------------------------
000D215A                            ; Sound	effect pointers
000D215A                            ; ---------------------------------------------------------------------------
000D215A 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000D2166 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000D2172 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000D217E 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000D218A 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000D2196 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000D21A2 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000D21AE 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000D21BA 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000D21C6 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000D21D2 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000D21DE 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000D21EA 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000D21F6 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000D2202 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000D220E 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000D221A 0000 0000                  SoundD0Index:	dc.l SoundD0
000D221E 0000 0000 0000 0000        		dc.l SoundD1, SoundD2
000D2226                            SoundA0:	include	sound\jump.asm
000D2226                            SndA0_Jump_Header:
000D2226 =00000001                  smpsHeaderStartSong = 1
000D2226 0000                       	smpsHeaderVoice     SndA0_Jump_Voices
000D2228 01                         	smpsHeaderTempoSFX  $01
000D2229 01                         	smpsHeaderChanSFX   $01
000D222A                            
000D2230                            
000D2230                            ; PSG1 Data
000D2230                            SndA0_Jump_PSG1:
000D2230 F500                       	smpsPSGvoice        $00
000D2232 A201                       	dc.b	nA2, $01
000D2234 F002 01F8 65               	smpsModSet          $02, $01, $F8, $65
000D2239 9C15                       	dc.b	nEb2, $15
000D223B F2                         	smpsStop
000D223C                            
000D223C                            ; Song seems to not use any FM voices
000D223C                            SndA0_Jump_Voices:
000D223C                            SndA0_Jump_Voices:
000D223C                            		even
000D223C                            SoundA1:	incbin	sound\soundA1.bin
000D2266                            		even
000D2266                            SoundA2:	incbin	sound\soundA2.bin
000D2286                            		even
000D2286                            SoundA3:	incbin	sound\soundA3.bin
000D22B8                            		even
000D22B8                            SoundA4:	incbin	sound\soundA4.bin
000D22EE                            		even
000D22EE                            SoundA5:	include	sound\fart.asm
000D22EE                            Fart_Header:
000D22EE =00000001                  smpsHeaderStartSong = 1
000D22EE 0000                       	smpsHeaderVoice     Fart_Voices
000D22F0 01                         	smpsHeaderTempoSFX  $01
000D22F1 04                         	smpsHeaderChanSFX   $04
000D22F2                            
000D230A                            
000D230A                            Fart_FM3:
000D230C E607                       	smpsAlterVol        $07
000D230E E0C0                       	smpsPan             panCenter, $00
000D2310 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000D2315 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000D2318 E1FE                       	smpsAlterNote       $FE
000D231A A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000D231D E100                       	smpsAlterNote       $00
000D231F A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000D2324 F2                         	smpsStop
000D2325                            
000D2325                            ; FM4 Data
000D2325                            Fart_FM4:
000D2327 E0C0                       	smpsPan             panCenter, $00
000D2329 8006                       	dc.b	nRst, $06
000D232D E616                       	smpsAlterVol        $16
000D232F E080                       	smpsPan             panLeft, $00
000D2331 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000D2336 A212                       	dc.b	nA2, $12
000D2338 E60A                       	smpsAlterVol        $0A
000D233A E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000D233D E603                       	smpsAlterVol        $03
000D233F E7A2                       	dc.b	smpsNoAttack, nA2
000D2341 E603                       	smpsAlterVol        $03
000D2343 E7A2                       	dc.b	smpsNoAttack, nA2
000D2345 E604                       	smpsAlterVol        $04
000D2347 E7A2                       	dc.b	smpsNoAttack, nA2
000D2349 E606                       	smpsAlterVol        $06
000D234B E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000D234E E610                       	smpsAlterVol        $10
000D2350 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000D2353 E610                       	smpsAlterVol        $10
000D2355 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000D235A F2                         	smpsStop
000D235B                            
000D235B                            ; FM5 Data
000D235B                            Fart_FM5:
000D235D E0C0                       	smpsPan             panCenter, $00
000D235F 8009                       	dc.b	nRst, $09
000D2363 E616                       	smpsAlterVol        $16
000D2365 E040                       	smpsPan             panRight, $00
000D2367 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000D236C A215                       	dc.b	nA2, $15
000D236E E60A                       	smpsAlterVol        $0A
000D2370 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000D2373 E603                       	smpsAlterVol        $03
000D2375 E7A2                       	dc.b	smpsNoAttack, nA2
000D2377 E603                       	smpsAlterVol        $03
000D2379 E7A2                       	dc.b	smpsNoAttack, nA2
000D237B E604                       	smpsAlterVol        $04
000D237D E7A2                       	dc.b	smpsNoAttack, nA2
000D237F E606                       	smpsAlterVol        $06
000D2381 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000D2384 E610                       	smpsAlterVol        $10
000D2386 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000D2389 E610                       	smpsAlterVol        $10
000D238B E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000D2390 F2                         	smpsStop
000D2391                            
000D2391                            ; PSG3 Data
000D2391                            Fart_PSG3:
000D2391 F2                         	smpsStop
000D2392                            
000D2392                            ; FM Voices
000D2392                            Fart_Voices:
000D2392                            ;	Voice $00
000D2392                            ;	$39
000D2392                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000D2392                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000D2392                            	smpsVcAlgorithm     $01
000D2392                            	smpsVcFeedback      $07
000D2392                            	smpsVcUnusedBits    $00
000D2392                            	smpsVcDetune        $00, $07, $03, $07
000D2392                            	smpsVcCoarseFreq    $01, $01, $02, $00
000D2392                            	smpsVcRateScale     $00, $03, $03, $03
000D2392                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000D2392                            	smpsVcAmpMod        $00, $00, $00, $00
000D2392                            	smpsVcDecayRate1    $00, $00, $00, $04
000D2392                            	smpsVcDecayRate2    $00, $00, $16, $1F
000D2392                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000D2392                            	smpsVcReleaseRate   $0A, $09, $00, $00
000D2392 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000D23AB                            
000D23AB                            ;	Voice $01
000D23AB                            ;	$00
000D23AB                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000D23AB                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000D23AB                            	smpsVcAlgorithm     $00
000D23AB                            	smpsVcFeedback      $00
000D23AB                            	smpsVcUnusedBits    $00
000D23AB                            	smpsVcDetune        $00, $00, $00, $00
000D23AB                            	smpsVcCoarseFreq    $00, $00, $00, $00
000D23AB                            	smpsVcRateScale     $00, $00, $00, $00
000D23AB                            	smpsVcAttackRate    $00, $00, $00, $00
000D23AB                            	smpsVcAmpMod        $00, $00, $00, $00
000D23AB                            	smpsVcDecayRate1    $00, $00, $00, $00
000D23AB                            	smpsVcDecayRate2    $00, $00, $00, $00
000D23AB                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000D23AB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000D23AB 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000D23AB 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000D23C4                            		even
000D23C4                            SoundA6:	incbin	sound\soundA6.bin
000D23F4                            		even
000D23F4                            SoundA7:	incbin	sound\soundA7.bin
000D2424                            		even
000D2424                            SoundA8:	incbin	sound\soundA8.bin
000D2458                            		even
000D2458                            SoundA9:	incbin	sound\soundA9.bin
000D246A                            		even
000D246A                            SoundAA:	incbin	sound\soundAA.bin
000D24AC                            		even
000D24AC                            SoundAB:	incbin	sound\soundAB.bin
000D24CC                            		even
000D24CC                            SoundAC:	incbin	sound\soundAC.bin
000D2500                            		even
000D2500                            SoundAD:	incbin	sound\soundAD.bin
000D2536                            		even
000D2536                            SoundAE:	incbin	sound\soundAE.bin
000D2580                            		even
000D2580                            SoundAF:	incbin	sound\soundAF.bin
000D25AE                            		even
000D25AE                            SoundB0:	incbin	sound\soundB0.bin
000D25E0                            		even
000D25E0                            SoundB1:	incbin	sound\soundB1.bin
000D260C                            		even
000D260C                            SoundB2:	incbin	sound\soundB2.bin
000D265C                            		even
000D265C                            SoundB3:	incbin	sound\soundB3.bin
000D26A6                            		even
000D26A6                            SoundB4:	include	sound\soundB4.asm
000D26A6                            SndB4_Bumper_Header:
000D26A6 =00000001                  smpsHeaderStartSong = 1
000D26A6 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000D26A8 01                         	smpsHeaderTempoSFX  $01
000D26A9 03                         	smpsHeaderChanSFX   $03
000D26AA                            
000D26BC                            
000D26BC                            ; FM5 Data
000D26BC                            SndB4_Bumper_FM5:
000D26BE F600 00                    	smpsJump            SndB4_Bumper_Jump00
000D26C1                            
000D26C1                            ; FM4 Data
000D26C1                            SndB4_Bumper_FM4:
000D26C1 F2                         	smpsStop
000D26C2                            
000D26C2                            SndB4_Bumper_Jump00:
000D26C2 A020                       	dc.b	nG2, $20
000D26C4 F2                         	smpsStop
000D26C5                            
000D26C5                            ; FM3 Data
000D26C5                            SndB4_Bumper_FM3:
000D26C5 F2                         	smpsStop
000D26C6                            
000D26C6                            SndB4_Bumper_Voices:
000D26C6                            ;	Voice $00
000D26C6                            ;	$32
000D26C6                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000D26C6                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000D26C6                            	smpsVcAlgorithm     $02
000D26C6                            	smpsVcFeedback      $06
000D26C6                            	smpsVcUnusedBits    $00
000D26C6                            	smpsVcDetune        $07, $07, $02, $00
000D26C6                            	smpsVcCoarseFreq    $00, $00, $00, $04
000D26C6                            	smpsVcRateScale     $00, $00, $00, $00
000D26C6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000D26C6                            	smpsVcAmpMod        $00, $00, $00, $00
000D26C6                            	smpsVcDecayRate1    $08, $00, $00, $09
000D26C6                            	smpsVcDecayRate2    $0B, $00, $00, $09
000D26C6                            	smpsVcDecayLevel    $00, $00, $00, $00
000D26C6                            	smpsVcReleaseRate   $0F, $00, $00, $00
000D26C6 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000D26C6 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000D26E0 00                         		even
000D26E0                            SoundB5:	incbin	sound\soundB5.bin
000D26FE 00                         		even
000D26FE                            SoundB6:	incbin	sound\soundB6.bin
000D271C                            		even
000D271C                            SoundB7:	incbin	sound\soundB7.bin
000D2758                            		even
000D2758                            SoundB8:	incbin	sound\soundB8.bin
000D2776                            		even
000D2776                            SoundB9:	incbin	sound\soundB9.bin
000D27DA                            		even
000D27DA                            SoundBA:	incbin	sound\soundBA.bin
000D283E                            		even
000D283E                            SoundBB:	incbin	sound\soundBB.bin
000D286A                            		even
000D286A                            SoundBC:	incbin	sound\soundBC.bin
000D28AC                            		even
000D28AC                            SoundBD:	incbin	sound\soundBD.bin
000D2900                            		even
000D2900                            SoundBE:	incbin	sound\soundBE.bin
000D293A                            		even
000D293A                            SoundBF:	incbin	sound\soundBF.bin
000D29AC                            		even
000D29AC                            SoundC0:	incbin	sound\soundC0.bin
000D29DA                            		even
000D29DA                            SoundC1:	incbin	sound\soundC1.bin
000D2A34                            		even
000D2A34                            SoundC2:	incbin	sound\soundC2.bin
000D2A5E                            		even
000D2A5E                            SoundC3:	incbin	sound\soundC3.bin
000D2AD8                            		even
000D2AD8                            SoundC4:	incbin	sound\soundC4.bin
000D2BD6                            		even
000D2BD6                            SoundC5:	incbin	sound\soundC5.bin
000D2C3E                            		even
000D2C3E                            SoundC6:	incbin	sound\soundC6.bin
000D2C80                            		even
000D2C80                            SoundC7:	incbin	sound\soundC7.bin
000D2CAE                            		even
000D2CAE                            SoundC8:	incbin	sound\soundC8.bin
000D2CC0                            		even
000D2CC0                            SoundC9:	incbin	sound\soundC9.bin
000D2CEE                            		even
000D2CEE                            SoundCA:	incbin	sound\soundCA.bin
000D2D1C                            		even
000D2D1C                            SoundCB:	incbin	sound\soundCB.bin
000D2D68                            		even
000D2D68                            SoundCC:	incbin	sound\C9.ssf
000D2D96                            		even
000D2D96                            SoundCD:	incbin	sound\soundCD.bin
000D2DC2                            		even
000D2DC2                            SoundCE:	incbin	sound\soundCE.bin
000D2DE0 00                         		even
000D2DE0                            SoundCF:	incbin	sound\soundCF.bin
000D2E18                            		even
000D2E18                            SoundD0:	incbin	sound\soundD0.bin
000D2E52                            		even
000D2E52                            SoundD1:	incbin	sound\MenuBIT.bin
000D2E60                            		even
000D2E60                            SoundD2:	incbin	sound\MenuAffirm.bin
000D2EC8 00                         		even
000D2EC8                            
000D2EC8                            IdiotPCM:	incbin	sound\youare.bin
000DCF99                            IdiotPCM_end:
000DCF9A 00                         	even
000DCF9A                            GM_AntiTMSS:	include _inc\GM_AntiTMSS.asm
000DCF9A                            ;GM_AntiTMSS:
000DCF9A 4EB8 1BA8                  		jsr	ClearScreen
000DCF9E                            
000DCF9E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000DCFA8 41FA 0000                  		lea	@nem(pc),a0		; load Gomer patterns
000DCFAC 4EB8 1D26                  		jsr	NemDec
000DCFB0 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
000DCFBA 41F9 0006 F586             		lea	(Nem_CreditText).l,a0	; load alphabet
000DCFC0 4EB8 1D26                  		jsr	NemDec
000DCFC4 43F9 00FF 0000             		lea	($FF0000).l,a1
000DCFCA 41FA 0000                  		lea	@eni(pc),a0		; load mappings for Gomer credits
000DCFCE 7000                       		moveq	#0,d0
000DCFD0 4EB8 2004                  		jsr	EniDec
000DCFD4 43F9 00FF 0000             		lea	($FF0000).l,a1
000DCFDA 203C 4000 0003             		move.l	#$40000003,d0
000DCFE0 7227                       		moveq	#$27,d1
000DCFE2 741B                       		moveq	#$1B,d2
000DCFE4 4EB8 1D06                  		jsr	ShowVDPGraphics
000DCFE8 41FA 0000                  		lea	@pal(pc),a0
000DCFEC 43F8 FB80                  		lea	($FFFFFB80).w,a1
000DCFF0 701F                       		moveq	#$1F,d0
000DCFF2                            @palset:
000DCFF2 22D8                       		move.l	(a0)+,(a1)+
000DCFF4 51C8 FFFC                  		dbf	d0,@palset
000DCFF8                            
000DCFF8 33FC 8C8B 00C0 0004        		move.w	#$8C8B,($C00004).l	; S/H mode, single res interlace
000DD000 1E38 F600                  		move.b	($FFFFF600).w,d7	; save game mode
000DD004 11FC 0000 F600             		move.b	#0,($FFFFF600).w	; make sure it's not using title screen code
000DD00A 31FC 000B FFF4             		move.w	#$B,($FFFFFFF4).w	; set frame
000DD010 41F8 D080                  		lea	($FFFFD080).w,a0
000DD014 10BC 0001                  		move.b	#1,(a0)
000DD018 4EB9 0001 84A8             		jsr	Obj8A
000DD01E 11C7 F600                  		move.b	d7,($FFFFF600).w	; restore game mode
000DD022 0068 E000 0002             		or.w	#$E000,2(a0)		; S/H brightness, palette 4
000DD028 4EB9 0000 E7AA             		jsr	BuildSprites
000DD02E                            
000DD02E 3038 F60C                  		move.w	($FFFFF60C).w,d0
000DD032 0000 0040                  		ori.b	#$40,d0
000DD036 0880 0003                  		bclr	#3,d0
000DD03A 33C0 00C0 0004             		move.w	d0,($C00004).l
000DD040 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w	; SMPS needs a frame to init
000DD046 4EB8 33F2                  		jsr	DelayProgram
000DD04A 303C 0086                  		move.w	#$86,d0			; play title screen music
000DD04E 4EB8 1C7C                  		jsr	PlaySound
000DD052                            
000DD052 4EB8 2662                  		jsr	Pal_FadeTo
000DD056 31FC 00B4 F614             		move.w	#180,($FFFFF614).w
000DD05C                            @mainloop:
000DD05C 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000DD062 4EB8 33F2                  		jsr	DelayProgram
000DD066 4A78 F614                  		tst.w	($FFFFF614).w		; if timer isn't up, loop
000DD06A 66F0                       		bne.s	@mainloop
000DD06C 303C 0080                  		move.w	#$80,d0			; if player is holding start, exit
000DD070 C038 F604                  		and.b	($FFFFF604).w,d0
000DD074 67E6                       		beq.s	@mainloop
000DD076 4E75                       		rts
000DD078                            @nem:	incbin artnem\tmss.bin
000DEC08                            	even
000DEC08                            @eni:	incbin mapeni\tmss.bin
000DED10                            	even
000DED10                            @pal:	incbin pallet\tmss.bin
000DED90                            	even
000DED90                            	even
000DED90                            
000DED90                            Minecraft:	include	minecraft\code\main.asm
000DED90                            ; Minecraft: Very Legacy Console Edition
000DED90                            ; Main file
000DED90                            
000DED90                            ;	align	$20000
000DED90                            	opt	l.
000DED90                            	include	"minecraft\code\variables.asm"
000DED90                            ; Minecraft: Very Legacy Console Edition
000DED90                            ; Variable Definitions
000DED90                            
000DED90 =00000040                  MAP_HEIGHT	equ	64
000DED90 =00000100                  MAP_WIDTH	equ	256
000DED90                            
000DED90                            		rsset	$FF0000
000DED90 =00FF0000                  mcRAM		rs.b	0
000DED90 =00FF0000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000DED90 =00FF4000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000DED90                            
000DED90                            		rsset	$FFFF8000
000DED90 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000DED90 =FFFF8E80                  planeBuffer_End	rs.b	0
000DED90 =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
000DED90                            
000DED90 =FFFF8E80                  scrollBuffer	rs.l	256
000DED90                            
000DED90 =FFFF9280                  camXPosFG	rs.w	1			; camera foreground layout x position
000DED90 =FFFF9282                  camYposFG	rs.w	1			; camera foreground layout y position
000DED90 =FFFF9284                  camXPosBG	rs.w	1			; camera background layout x position
000DED90 =FFFF9286                  camYposBG	rs.w	1			; camera background layout y position
000DED90                            
000DED90 =FFFF9288                  vblankWait	rs.w	1
000DED90 =FFFF928A                  cloudFrameCnt	rs.w	1
000DED90 =FFFF928C                  cloudSkew	rs.l	36
000DED90                            
000DED90                            
000DED90                            		rsset	__rs&$FFFFFF
000DED90 =00FF931C                  mcRAM_End	rs.b	0
000DED90                            
000DED90                            ; VRAM Definitions
000DED90 =00000020                  TILE		equ	32			; number of bytes a single tile occupies in VRAM
000DED90                            
000DED90                            		rsreset
000DED90 =00000000                  vramEmptyTile	rs.b	TILE
000DED90 =00000020                  vramTerrain	rs.b	255*TILE
000DED90 =00002000                  vramBackground	rs.b	408*TILE
000DED90                            
000DED90 =0000C000                  VRAM_PLANE_A	equ	$C000
000DED90 =0000D000                  VRAM_PLANE_W	equ	$D000
000DED90 =0000E000                  VRAM_PLANE_B	equ	$E000
000DED90                            
000DED90 =0000F800                  VRAM_SPR_LIST	equ	$F800
000DED90 =0000FC00                  VRAM_HSCROLL	equ	$FC00
000DED90 =0000FC00                  VRAM_HSCROLL	equ	$FC00
000DED90                            	include	"minecraft\code\macros.asm"
000DED90                            ; =========================================================================================================================================================
000DED90                            ; MegaDrive macros
000DED90                            ; =========================================================================================================================================================
000DED90                            clrRAM		macro	starta, enda
000DED90                            		local	endaddr
000DED90                            		if narg<2
000DED90                            endaddr			EQUS	"\starta\_End"
000DED90                            		else
000DED90                            endaddr			EQUS	"\enda"
000DED90                            		endif
000DED90                            		moveq	#0,d0
000DED90                            		if ((\starta)&$8000)=0
000DED90                            			lea	\starta,a1
000DED90                            		else
000DED90                            			lea	(\starta).w,a1
000DED90                            		endif
000DED90                            		if (\starta)&1
000DED90                            			move.b	d0,(a1)+
000DED90                            		endif
000DED90                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
000DED90                            .Clear\@:	move.l	d0,(a1)+
000DED90                            		dbf	d1,.Clear\@
000DED90                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
000DED90                            			move.w	d0,(a1)+
000DED90                            		endif
000DED90                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
000DED90                            			move.b	d0,(a1)+
000DED90                            		endif
000DED90                            		endm
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90                            ; Disable interrupts
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90                            ; ARGUMENTS:
000DED90                            ;	Nothing
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90                            ; RETURNS:
000DED90                            ;	Nothing
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90                            intsOff		macros
000DED90                            		ori	#$700,sr
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90                            ; Enable interrupts
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90                            ; ARGUMENTS:
000DED90                            ;	Nothing
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90                            ; RETURNS:
000DED90                            ;	Nothing
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90                            intsOn		macros
000DED90                            		andi	#$F8FF,sr
000DED90                            
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90                            ; VDP command instruction
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90                            ; ARGUMENTS:
000DED90                            ;	addr	- Address in VDP memory
000DED90                            ;	type	- Type of VDP memory
000DED90                            ;	rwd	- VDP command
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90                            ; RETURNS:
000DED90                            ;	Nothing
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90 =00000021                  VRAM		EQU	%100001		; VRAM
000DED90 =0000002B                  CRAM		EQU	%101011		; CRAM
000DED90 =00000025                  VSRAM		EQU	%100101		; VSRAM
000DED90 =0000000C                  READ		EQU	%001100		; VDP read
000DED90 =00000007                  WRITE		EQU	%000111		; VDP write
000DED90 =00000027                  DMA		EQU	%100111		; VDP DMA
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90                            vdpCmd		macro	ins, addr, type, rwd, end, end2
000DED90                            		if narg=5
000DED90                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
000DED90                            		elseif narg>=6
000DED90                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
000DED90                            		else
000DED90                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
000DED90                            		endif
000DED90                            		endm
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90                            ; VDP DMA from 68000 memory to VDP memory
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90                            ; ARGUMENTS:
000DED90                            ;	src	- Source address in 68000 memory
000DED90                            ;	dest	- Destination address in VDP memory
000DED90                            ;	len	- Length of data in bytes
000DED90                            ;	type	- Type of VDP memory
000DED90                            ;	a6.l	- VDP control port
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90                            ; RETURNS:
000DED90                            ;	Nothing
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90                            dma68k		macro	src, dest, len, type
000DED90                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
000DED90                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
000DED90                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
000DED90                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
000DED90                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
000DED90                            		move.w	(sp)+,(a6)
000DED90                            		endm
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DED90                            
000DED90                            MC_Init:
000DED90 007C 0700                  		intsOff						; disable CPU interrupts
000DED94 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
000DED9C                            
000DED9C 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
000DEDA2 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
000DEDA6                            
000DEDA6 3CBC 8230                  		move.w	#$8200+(VRAM_PLANE_A>>10),(a6)		; set plane A address
000DEDAA 3CBC 8334                  		move.w	#$8300+(VRAM_PLANE_W>>10),(a6)		; set plane W address
000DEDAE 3CBC 8407                  		move.w	#$8400+(VRAM_PLANE_B>>13),(a6)		; set plane B address
000DEDB2 3CBC 857C                  		move.w	#$8500+(VRAM_SPR_LIST>>9),(a6)		; set sprite table address
000DEDB6                            		
000DEDB6 3CBC 8B03                  		move.w	#$8B03,(a6)				; EXT-INT off, VScroll by screen, HScroll by line
000DEDBA 3CBC 8D3F                  		move.w	#$8D00+(VRAM_HSCROLL>>10),(a6)		; set HScroll table address
000DEDBE 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000DEDC2 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
000DEDC6                            
000DEDD8 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
000DEDDC                            
000DEDDC                            .waitVBlank:	
000DEDDC 44D6                       		move.w	(a6),ccr				; is v-blank active?
000DEDDE 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
000DEDE0                            
000DEE14 6100 0000                  		bsr.w	MC_LoadBackground
000DEE18 6100 0000                  		bsr.w	MC_LoadWorld
000DEE1C                            
000DEE1C 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
000DEE20 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
000DEE24 027C F8FF                  		intsOn						; enable CPU interrupts
000DEE28                            
000DEE28 4278 928A                  		clr.w	(cloudFrameCnt).w		
000DEE2C                            
000DEE2C                            .gameLoop:
000DEE2C 50F8 9288                  		st.b	(vblankWait).w
000DEE30 6100 0000                  		bsr.w	MC_UpdateScrollBuffer
000DEE34 6100                       		bsr.s	MC_RenderBlocks
000DEE36                            
000DEE36                            .spin:
000DEE36 4A38 9288                  		tst.b	(vblankWait).w
000DEE3A 67F0                       		beq.s	.gameLoop
000DEE3C 60F8                       		bra.s	.spin
000DEE3E                            ; ---------------------------------------------------------------------------
000DEE3E                            
000DEE3E                            ; ===========================================================================
000DEE3E                            ; ---------------------------------------------------------------------------
000DEE3E                            ; Render the Visible Portion of the World to the Screen
000DEE3E                            ; ---------------------------------------------------------------------------
000DEE3E                            MC_RenderBlocks:
000DEE3E 3038 9280                  		move.w	(camXPosFG).w,d0	; Get the camera's x coordinate
000DEE42 E648                       		lsr.w	#3,d0			; Divide by 8 to get the index of the tile within the row
000DEE44 0240 00FF                  		andi.w	#$FF,d0			; Cap to a maximum index value of 0xFF
000DEE48                            
000DEE48 3238 9282                  		move.w	(camYPosFG).w,d1	; Get the camera's y coordinate
000DEE4C EB49                       		lsl.w	#5,d1			; Make into row offset
000DEE4E 0241 3F00                  		andi.w	#$3F00,d1		; ^
000DEE52                            
000DEE52 41F9 00FF 0000             		lea	(mapCollBlocks).l,a0	; Load the world map collision layer into a0
000DEE58 43F9 00FF 0000             		lea	(mapCollBlocks).l,a1	; Load the world map wall layer into a1
000DEE5E 45F8 8000                  		lea	(planeBuffer).w,a2	; Load the plane A buffer into a2
000DEE62 7600                       		moveq	#0,d3			; Clear d3
000DEE64 7C1C                       		moveq	#28,d6			; Load the number of rows as the outer loop counter
000DEE66                            
000DEE66                            .renderScreen:
000DEE66 7E28                       		moveq	#40,d7			; Load the number of blocks in each row as the inner loop counter
000DEE68 3401                       		move.w	d1,d2			; Load the offset into the current row into d2
000DEE6A 1400                       		move.b	d0,d2			; ^
000DEE6C                            
000DEE6C                            .renderRow:
000DEE6C 1630 2000                  		move.b	(a0,d2.w),d3		; Get the block ID at the current main layout coordinates
000DEE70 6700                       		beq.s	.renderWall
000DEE72                            
000DEE72 383C 8000                  		move.w	#$8000,d4			; Set the priority bit
000DEE76 D643                       		add.w	d3,d3				; Turn tile ID into index
000DEE78 887B 3000                  		or.w	.renderProperties(pc,d3.w),d4	; Combine with the tile render properties
000DEE7C 34C4                       		move.w	d4,(a2)+			; Load the corresponding tile to the plane A buffer
000DEE7E                            		
000DEE7E 5202                       		addq.b	#1,d2			; Increment the index with wrap-around within the current row
000DEE80 51CF FFEA                  		dbf	d7,.renderRow		; Loop until the entire visible row is rendered
000DEE84 6000                       		bra.s	.endRenderRow		; Branch
000DEE86                            
000DEE86                            .renderWall:
000DEE86 1631 2000                  		move.b	(a1,d2.w),d3				; Get the block ID at the current wall layout coordinates
000DEE8A D643                       		add.w	d3,d3					; Turn tile ID into index
000DEE8C 34FB 3000                  		move.w	.renderProperties(pc,d3.w),(a2)+	; Load the corresponding tile to the plane A buffer
000DEE90                            
000DEE90 5202                       		addq.b	#1,d2			; Increment the index with wrap-around within the current row
000DEE92 51CF FFD8                  		dbf	d7,.renderRow		; Loop until the entire visible row is rendered
000DEE96                            
000DEE96                            .endRenderRow:
000DEE96 D4FC 002E                  		adda.w	#(64-41)*2,a2		; Skip the rest of the row in the plane buffer
000DEE9A 0641 0100                  		add.w	#$100,d1		; Increment to the next row
000DEE9E 0C41 3F00                  		cmpi.w	#$3F00,d1		; Check to make sure we're still in bounds
000DEEA2 6200                       		bhi.s	.inBounds		; If so, branch
000DEEA4 323C 3F00                  		move.w	#$3F00,d1		; If not, render the last row for the rest of the screen (Bedrock)
000DEEA8                            
000DEEA8                            .inBounds:	
000DEEA8 51CE FFBC                  		dbf	d6,.renderScreen	; Loop until the entire screen is rendered
000DEEAC 4E75                       		rts
000DEEAE                            
000DEEAE                            ; ---------------------------------------------------------------------------
000DEEAE                            block_entry	macro	tileID, palLine, priority
000DEEAE                            	if (narg<3)
000DEEAE                            		dc.w	(palLine<<13)|tileID
000DEEAE                            	else
000DEEAE                            		dc.w	$8000|(palLine<<13)|tileID
000DEEAE                            	endif
000DEEAE                            		endm
000DEEAE                            
000DEEAE                            .renderProperties:
000DEEEE                            
000DEF0C                            ; ---------------------------------------------------------------------------
000DEF0C                            
000DEF0C                            ; ===========================================================================
000DEF0C                            ; ---------------------------------------------------------------------------
000DEF0C                            ; Update Foreground and Background Scrolling
000DEF0C                            ; ---------------------------------------------------------------------------
000DEF0C =00000500                  CLOUD_SCROLL_RATE	equ	1280
000DEF0C                            
000DEF0C                            MC_UpdateScrollBuffer:
000DEF0C 41F8 8E80                  		lea	(scrollBuffer).w,a0
000DEF10 7E13                       		moveq	#20-1,d7
000DEF12 3038 9280                  		move.w	(camXPosFG).w,d0			; update scrolling
000DEF16 0240 0007                  		andi.w	#7,d0					; ^
000DEF1A 4440                       		neg.w	d0					; ^
000DEF1C 4840                       		swap	d0					; ^
000DEF1E 4240                       		clr.w	d0
000DEF20                            
000DEF20                            .blankBGSegment:
000DEF20 20C0                       		move.l	d0,(a0)+
000DEF22 51CF FFFC                  		dbf	d7,.blankBGSegment
000DEF26                            
000DEF26 43F8 928C                  		lea	(cloudSkew).w,a1
000DEF2A 7200                       		moveq	#0,d1
000DEF2C 7E23                       		moveq	#36-1,d7
000DEF2E                            
000DEF2E 5378 928A                  		subq.w	#1,(cloudFrameCnt).w
000DEF32 6A00                       		bpl.s	.cloudBGSegment
000DEF34                            	
000DEF34 31FC 04FF 928A             		move.w	#CLOUD_SCROLL_RATE-1,(cloudFrameCnt).w
000DEF3A                            
000DEF3A                            .resetClouds:
000DEF3A 20C0                       		move.l	d0,(a0)+
000DEF3C 4299                       		clr.l	(a1)+
000DEF3E 51CF FFFA                  		dbf	d7,.resetClouds
000DEF42 6000                       		bra.s	.return
000DEF44                            
000DEF44                            .cloudBGSegment:
000DEF44 2411                       		move.l	(a1),d2
000DEF46 D4BB 1000                  		add.l	.cloudSkewFactor(pc,d1.w),d2
000DEF4A 22C2                       		move.l	d2,(a1)+
000DEF4C                            
000DEF4C 4842                       		swap	d2
000DEF4E 3002                       		move.w	d2,d0
000DEF50 4440                       		neg.w	d0
000DEF52 20C0                       		move.l	d0,(a0)+
000DEF54                            		
000DEF54 5841                       		addq.w	#4,d1
000DEF56 51CF FFEC                  		dbf	d7,.cloudBGSegment
000DEF5A                            
000DEF5A                            .return:
000DEF5A 4E75                       		rts
000DEF5C                            ; ---------------------------------------------------------------------------
000DEF5C                            .cloudSkewFactor:
000DEF5C =00000080                  	.i: = 128
000DEF5C                            
000DEF5C                            	rept	36
000DEF5C                            	dc.l	(.i<<16)/CLOUD_SCROLL_RATE
000DEF5C                            	.i: = .i-2
000DEF5C 0000 1999 0000 1933 0000+  	endr
000DEFEC                            
000DEFEC                            ; ===========================================================================
000DEFEC                            ; ---------------------------------------------------------------------------
000DEFEC                            ; Clear The Screen
000DEFEC                            ; ---------------------------------------------------------------------------
000DEFEC                            MC_ClearScreen:
000DEFEC 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
000DEFF0                            
000DEFF0 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
000DEFF6 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000DEFFA 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
000DF000 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000DF006                            
000DF006 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000DF008 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
000DF00A                            
000DF00A 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
000DF010 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000DF014 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
000DF01A 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000DF020                            
000DF020 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000DF022 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
000DF024                            
000DF024 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
000DF02A 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000DF02E 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
000DF034 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000DF03A                            
000DF03A 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000DF03C 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
000DF03E                            
000DF03E 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000DF042 4E75                       		rts						; return
000DF044                            ; ---------------------------------------------------------------------------
000DF044                            
000DF044                            ; ===========================================================================
000DF044                            ; ---------------------------------------------------------------------------
000DF044                            ; Load the Background
000DF044                            ; ---------------------------------------------------------------------------
000DF044                            MC_LoadBackground:
000DF05E                            
000DF064 41F9 0000 0000             		lea	MC_BGMap,a0
000DF06A 3E3C 07FF                  		move.w	#(32*64)-1,d7				; Set loop count to plane size - 1
000DF06E                            
000DF06E                            .loop:
000DF06E 3018                       		move.w	(a0)+,d0
000DF070 6700                       		beq.s	.empty
000DF072 0640 0100                  		add.w	#(vramBackground>>5),d0
000DF076 0040 6000                  		ori.w	#(3<<13),d0
000DF07A                            
000DF07A                            .empty:
000DF07A 3D40 FFFC                  		move.w	d0,-4(a6)
000DF07E 51CF FFEE                  		dbf	d7,.loop
000DF082 4E75                       		rts						; return
000DF084                            ; ---------------------------------------------------------------------------
000DF084                            
000DF084                            ; ===========================================================================
000DF084                            ; ---------------------------------------------------------------------------
000DF084                            ; Load the World
000DF084                            ; ---------------------------------------------------------------------------
000DF084                            MC_LoadWorld:
000DF084 41F9 0000 0000             		lea	MC_TestMap,a0
000DF08A 43F9 00FF 4000             		lea	mapWallBlocks,a1
000DF090 3E3C 0000                  		move.w	#((MC_TestMap_End-MC_TestMap)>>2)-1,d7
000DF094                            
000DF094                            .loadWalls:
000DF094 22D8                       		move.l	(a0)+,(a1)+
000DF096 51CF FFFC                  		dbf	d7,.loadWalls
000DF09A                            
000DF09A 41F9 0000 0000             		lea	MC_TestMap,a0
000DF0A0 43F9 00FF 0000             		lea	mapCollBlocks,a1
000DF0A6 3E3C 0000                  		move.w	#((MC_TestMap_End-MC_TestMap)>>2)-1,d7
000DF0AA                            
000DF0AA                            .loadBlocks:
000DF0AA 22D8                       		move.l	(a0)+,(a1)+
000DF0AC 51CF FFFC                  		dbf	d7,.loadBlocks
000DF0B0 4E75                       		rts						; return
000DF0B2                            ; ---------------------------------------------------------------------------
000DF0B2                            
000DF0B2                            ; ===========================================================================
000DF0B2                            ; ---------------------------------------------------------------------------
000DF0B2                            ; VBlank Interrupt
000DF0B2                            ; ---------------------------------------------------------------------------
000DF0B2                            MC_VInt:
000DF0E6                            
000DF0E6                            ;		move.w	(camXPosFG).w,d0			; update scrolling
000DF0E6                            ;		andi.w	#7,d0					; ^
000DF0E6                            ;		neg.w	d0					; ^
000DF0E6                            ;	vdpCmd	move.l, VRAM_HSCROLL, VRAM, WRITE, (a6)		; ^
000DF0E6                            ;		move.w	d0,-4(a6)				; ^
000DF0E6                            
000DF0E6                            ;		addq.w	#1,(camXPosFG).w			
000DF0E6 51F8 9288                  		sf.b	(vblankWait).w
000DF0EA 4E73                       		rte						; return
000DF0EC                            ; ---------------------------------------------------------------------------
000DF0EC                            
000DF0EC                            ; ---------------------------------------------------------------------------
000DF0EC                            MC_Palette:
000DF0EC 0E84 08AE 068E 046C 0EE0+  	dc.w	$E84, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
000DF10C 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
000DF12C 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
000DF14C 0000 0EEE 0CAA 0A88 0866+  	dc.w	$000, $EEE, $CAA, $A88, $866, $644, $422, $46A, $448, $226, $6C4, $680, $8CE, $6AC, $EA6, $E44
000DF16C                            ; ---------------------------------------------------------------------------
000DF16C                            MC_Terrain:
000DF16C                            	incbin	"minecraft\assets\bin\terrain.bin"
000DF5EC                            MC_Terrain_End:
000DF5EC                            	even
000DF5EC                            ; ---------------------------------------------------------------------------
000DF5EC                            MC_BGArt:
000DF5EC                            	incbin	"minecraft\assets\bin\bgArt.bin"
000E28EC                            MC_BGArt_End:
000E28EC                            	even
000E28EC                            ; ---------------------------------------------------------------------------
000E28EC                            MC_BGMap:
000E28EC                            	incbin	"minecraft\assets\bin\bgMap.bin"
000E38EC                            MC_BGMap_End:
000E38EC                            	even
000E38EC                            ; ---------------------------------------------------------------------------
000E38EC                            MC_TestMap:
000E38EC 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 00
000E39EC 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 01
000E3AEC 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 02
000E3BEC 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 03
000E3CEC 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 04
000E3DEC 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 05
000E3EEC 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 06
000E3FEC 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 07
000E40EC 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 09
000E41EC 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0A
000E42EC 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0B
000E43EC 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0C
000E44EC 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0E
000E45EC                            	
000E45EC                            ;	dcb.b	32,$01	; Row 0F
000E45EC                            ;	dcb.b	32,$02	; Row 0F
000E45EC                            ;	dcb.b	32,$03	; Row 0F
000E45EC                            ;	dcb.b	32,$04	; Row 0F
000E45EC                            ;	dcb.b	32,$05	; Row 0F
000E45EC                            ;	dcb.b	32,$06	; Row 0F
000E45EC                            ;	dcb.b	32,$07	; Row 0F
000E45EC                            ;	dcb.b	32,$08	; Row 0F
000E45EC                            
000E45EC                            ;	dcb.b	256,$03	; Row 10
000E45EC                            ;	dcb.b	256,$02	; Row 11
000E45EC                            ;	dcb.b	256,$02	; Row 12
000E45EC                            ;	dcb.b	256,$02	; Row 13
000E45EC                            ;	dcb.b	256,$01	; Row 14
000E45EC                            ;	dcb.b	256,$01	; Row 15
000E45EC                            ;	dcb.b	256,$01	; Row 16
000E45EC                            ;	dcb.b	256,$01	; Row 17
000E45EC                            ;	dcb.b	256,$01	; Row 19
000E45EC                            ;	dcb.b	256,$01	; Row 1A
000E45EC                            ;	dcb.b	256,$01	; Row 1B
000E45EC                            ;	dcb.b	256,$01	; Row 1C
000E45EC                            ;	dcb.b	256,$01	; Row 1E
000E45EC                            ;	dcb.b	256,$01	; Row 1F
000E45EC                            MC_TestMap_End:
000E45EC                            MC_TestMap_End:
000E45EC                            		
000E45EC                            		include beebush\_BEEBUSH.68k
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            ; I'm Glenn Quagmire, and this is Code Bush.
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            
000E45EC                                    include "beebush/Mega Drive.inc"
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            ; Basic system memory location equates
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            
000E45EC =00000000                  CARTRIDGE       EQU     $0                    
000E45EC =00080000                  CARTRIDGEE      EQU     $80000
000E45EC =00080000                  CARTRIDGESZ     EQU     CARTRIDGEE-CARTRIDGE
000E45EC                            
000E45EC =00FF0000                  WORKRAM         EQU     $FF0000
000E45EC =01000000                  WORKRAME        EQU     $1000000
000E45EC =00010000                  WORKRAMSZ       EQU     WORKRAME-WORKRAM
000E45EC                            
000E45EC =00A00000                  Z80RAM          EQU     $A00000
000E45EC =00A02000                  Z80RAME		EQU	$A02000
000E45EC =00002000                  Z80RAMSZ	EQU	Z80RAME-Z80RAM
000E45EC =00A11100                  Z80BUS		EQU	$A11100
000E45EC =00A11200                  Z80RES	        EQU	$A11200
000E45EC                            
000E45EC =00080000                  CARTRAM         EQU     CARTRIDGEE	
000E45EC                            	
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            ; System and VDP registers 
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            
000E45EC                            ; I/O
000E45EC                            
000E45EC                            ; Word
000E45EC =00A10000                  VERSION_	EQU	$A10000		; Hardware version
000E45EC =00A10002                  IODATA1_	EQU	$A10002		; Pad 1 Data
000E45EC =00A10004                  IODATA2_	EQU	$A10004         ; Pad 2 Data
000E45EC =00A10006                  IODATA3_	EQU	$A10006         ; EXT Data
000E45EC =00A10008                  IOCTRL1_	EQU	$A10008         ; Pad 1 Ctrl
000E45EC =00A1000A                  IOCTRL2_	EQU	$A1000A         ; Pad 2 Ctrl
000E45EC =00A1000C                  IOCTRL3_	EQU	$A1000C         ; EXT Ctrl
000E45EC                            
000E45EC                            ; Byte
000E45EC =00A10001                  VERSION         EQU     VERSION_+1
000E45EC =00A10003                  IODATA1         EQU     IODATA1_+1
000E45EC =00A10005                  IODATA2         EQU     IODATA2_+1
000E45EC =00A10007                  IODATA3         EQU     IODATA3_+1
000E45EC =00A10009                  IOCTRL1         EQU     IOCTRL1_+1
000E45EC =00A1000B                  IOCTRL2         EQU     IOCTRL2_+1
000E45EC =00A1000D                  IOCTRL3         EQU     IOCTRL3_+1
000E45EC                            
000E45EC                            ; Sound
000E45EC =00A04000                  YMADDR0		EQU	$A04000		; YM2612 address port 0
000E45EC =00A04001                  YMDATA0		EQU	$A04001		; YM2612 data port 0
000E45EC =00A04002                  YMADDR1		EQU	$A04002		; YM2612 address port 1
000E45EC =00A04003                  YMDATA1		EQU	$A04003		; YM2612 data port 1
000E45EC =00C00011                  PSGCTRL		EQU	$C00011		; PSG control port
000E45EC                            
000E45EC                            ; VDP
000E45EC =00C00000                  VDPDATA		EQU	$C00000		; VDP data port
000E45EC =00C00004                  VDPCTRL		EQU	$C00004		; VDP control port
000E45EC =00C00008                  VDPHVCNT	EQU	$C00008		; VDP H/V counter
000E45EC =00C0001C                  VDPDEBUG	EQU	$C0001C		; VDP debug register
000E45EC                            
000E45EC                            ; TMSS
000E45EC =00A14000                  TMSSSEGA	EQU	$A14000		; TMSS "SEGA" register
000E45EC =00A14100                  TMSSMODE	EQU	$A14100		; TMSS bus mode
000E45EC                            
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            ; VDP operation codes
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            
000E45EC =40000000                  VRAMWRITE	EQU	$40000000		; VRAM write
000E45EC =C0000000                  CRAMWRITE	EQU	$C0000000		; CRAM write
000E45EC =40000010                  VSRAMWRITE	EQU	$40000010		; VSRAM write
000E45EC =00000000                  VRAMREAD	EQU	$00000000		; VRAM read
000E45EC =00000020                  CRAMREAD	EQU	$00000020		; CRAM read
000E45EC =00000010                  VSRAMREAD	EQU	$00000010		; VSRAM read
000E45EC =40000080                  VRAMDMA		EQU	$40000080		; VRAM DMA
000E45EC =C0000080                  CRAMDMA		EQU	$C0000080		; CRAM DMA
000E45EC =40000090                  VSRAMDMA	EQU	$40000090		; VSRAM DMA
000E45EC =000000C0                  VRAMCOPY	EQU	$000000C0		; VRAM DMA copy
000E45EC                            
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            ; VDP status codes
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            
000E45EC =00000000                  PAL_CLOCK:          EQU 0
000E45EC =00000001                  DMA_RUNNING:        EQU 1 
000E45EC =00000002                  HBLANKING:       	EQU 2
000E45EC =00000003                  VBLANKING:       	EQU 3
000E45EC =00000004                  ODDFRAME:        	EQU 4
000E45EC =00000005                  SPRITE_COLLIDE:		EQU 5
000E45EC =00000006                  SPRITE_OVERFLOW: 	EQU 6
000E45EC =00000007                  VBLANK_PENDING:  	EQU 7
000E45EC =00000008                  FIFO_FULL:       	EQU 8
000E45EC =00000009                  FIFO_EMPTY:      	EQU 9
000E45EC                            
000E45EC                            
000E45EC                            
000E45EC                                    include "beebush/Macros.inc"
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            ; General purpose macros for defining pointer data
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            
000E45EC                            dclww	macro	long, word1, word2
000E45EC                            	dc.l 	\long
000E45EC                            	dc.w 	\word1
000E45EC                            	dc.w 	\word2
000E45EC                            	endm
000E45EC                            
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            ; Stop the Z80
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            
000E45EC                            Z80STOP macro
000E45EC                            	move.w	#$100,Z80BUS			; Request Z80 bus access
000E45EC                            .Wait\@:
000E45EC                            	btst	#0,Z80BUS			; Was the request acknowledged?
000E45EC                            	bne.s	.Wait\@				; If not, wait
000E45EC                            	endm
000E45EC                            
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            ; Stop the Z80
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            
000E45EC                            Z80START macro
000E45EC                            	move.w	#0,Z80BUS
000E45EC                            	endm
000E45EC                            
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            ; VDP command set
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            
000E45EC                            VDPCMD macro ins, addr, type, rwd, end, end2
000E45EC                            	local	cmd
000E45EC                            cmd	= (\type\\rwd\)|(((\addr)&$3FFF)<<16)|((\addr)/$4000)
000E45EC                            	if narg=5
000E45EC                            		\ins	#\#cmd,\end
000E45EC                            	elseif narg>=6
000E45EC                            		\ins	#(\#cmd)\end,\end2
000E45EC                            	else
000E45EC                            		\ins	cmd
000E45EC                            	endif
000E45EC                            	endm
000E45EC                            
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            ; Wait for DMA
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            
000E45EC                            DMAWAIT macro ctrl
000E45EC                            .Wait\@:
000E45EC                            	if narg>0
000E45EC                            		btst	#1,1(\ctrl)		; Is DMA active?
000E45EC                            	else
000E45EC                            		move.w	VDPCTRL,d0		; Is DMA active?
000E45EC                            		btst	#1,d0
000E45EC                            	endif
000E45EC                            	bne.s	.Wait\@				; If so, wait
000E45EC                            	endm
000E45EC                            
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            ; VDP DMA from 68000 memory to VDP memory
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            ; PARAMETERS:
000E45EC                            ;	src  - Source address in 68000 memory
000E45EC                            ;	dest - Destination address in VDP memory
000E45EC                            ;	len  - Length of data in bytes
000E45EC                            ;	type - Type of VDP memory
000E45EC                            ;	port - Address register for the VDP port
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            ; kys
000E45EC =FFFFF644                  vdpIntBuffer = $FFFFF644
000E45EC                            
000E45EC                            VDPDMA  macro src, dest, len, type, port
000E45EC                            	; DMA data
000E45EC                            	lea	VDPCTRL,\port
000E45EC                            	move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(\port)
000E45EC                            	move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(\port)
000E45EC                            	move.w	#$9700|(((\src)>>17)&$7F),(\port)
000E45EC                            	VDPCMD	move.w,\dest,\type,DMA,>>16,(\port)
000E45EC                            	VDPCMD	move.w,\dest,\type,DMA,&$FFFF,vdpIntBuffer.w
000E45EC                            	move.w	vdpIntBuffer.w,(\port)
000E45EC                            	endm
000E45EC                            
000E45EC                            ; -------------------------------------------------------------------------
000E45EC                            ; VDP DMA fill VRAM with byte
000E45EC                            ; -------------------------------------------------------------------------
000E45EC                            ; PARAMETERS:
000E45EC                            ;	addr - Address in VRAM
000E45EC                            ;	len  - Length of fill in bytes
000E45EC                            ;	byte - Byte to fill VRAM with
000E45EC                            ;	inc  - VDP autoincrement value
000E45EC                            ;	port - Control port address register
000E45EC                            ; -------------------------------------------------------------------------
000E45EC                            
000E45EC                            VDPFILL macro addr, len, byte, inc, port
000E45EC                            	; DMA fill
000E45EC                            	lea	VDPCTRL,\port
000E45EC                            	move.w	#$8F00+\inc,(\port)
000E45EC                            	move.l	#$93009400|((((\len)-1)&$FF00)>>8)|((((\len)-1)&$FF)<<16),(\port)
000E45EC                            	move.w	#$9780,(\port)
000E45EC                            	VDPCMD	move.l,\addr,VRAM,DMA,(\port)
000E45EC                            	move.w	#(\byte)<<8,VDPDATA
000E45EC                            	DMAWAIT	\port
000E45EC                            	endm
000E45EC                            
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            ; Macro to create ids from objects
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            
000E45EC                            OBJDEF      macro   addr, id
000E45EC                                    dc.l    \addr
000E45EC                            \id     rs.b    1
000E45EC                                    endm
000E45EC                                    endm
000E45EC                            
000E45EC                                    opt     l.
000E45EC =FFFFCC00                  hscroll =       $FFFFCC00
000E45EC =FFFFF800                  vdpSprites =    $FFFFF800
000E45EC =FFFFFB00                  palette =       $FFFFFB00
000E45EC =FFFFFE04                  frameCntr =     $FFFFFE04
000E45EC                                    rsset   $FFFFF600
000E45EC                            
000E45EC =FFFFF600                  gamemode:               rs.b 1  
000E45EC =FFFFF601                  submode                 rs.b 1
000E45EC =FFFFF602                  joypadMirr:             rs.b 1    
000E45EC =FFFFF603                  joypadPressMirr:        rs.b 1  
000E45EC =FFFFF604                  joypad:                 rs.b 1    
000E45EC =FFFFF605                  joypadPress:            rs.b 1  
000E45EC                                                    rs.b 2  
000E45EC =FFFFF608                  distance:               rs.b 4
000E45EC =FFFFF60C                  displayMode:            rs.b 2    
000E45EC                                                    rs.b 6
000E45EC =FFFFF614                  genericTimer:           rs.b 2    
000E45EC =FFFFF616                  mainAPosY:              rs.b 2    
000E45EC =FFFFF618                  mainBPosY:              rs.b 2    
000E45EC =FFFFF61A                  mainAPosX:              rs.b 2    
000E45EC =FFFFF61C                  mainBPosX:              rs.b 2    
000E45EC =FFFFF61E                  mainZPosY:              rs.b 2    
000E45EC =FFFFF620                  mainZPosX:              rs.b 2    
000E45EC =FFFFF622                  mainCPosX:              rs.b 2    
000E45EC =FFFFF624                  mainCPosY:              rs.b 2    
000E45EC =FFFFF626                  palFadeArgs:            rs.b 0
000E45EC =FFFFF626                  palFadeOff:             rs.b 1    
000E45EC =FFFFF627                  palFadeSize:            rs.b 1    
000E45EC =FFFFF628                  vblankUnk1:             rs.b 1    
000E45EC =FFFFF629                  vblankUnk2:             rs.b 1    
000E45EC =FFFFF62A                  vblankCmd:              rs.b 1   
000E45EC                                    rsset   $FFFFF700
000E45EC =FFFFF700                  cameraAPosX:            rs.b 4                  
000E45EC =FFFFF704                  cameraAPosY:            rs.b 4                  
000E45EC =FFFFF708                  cameraBPosX:            rs.b 4                  
000E45EC =FFFFF70C                  cameraBPosY:            rs.b 4                  
000E45EC =FFFFF710                  cameraCPosX:            rs.b 4                  
000E45EC =FFFFF714                  cameraCPosY:            rs.b 4                  
000E45EC =FFFFF718                  cameraZPosX:            rs.b 4                  
000E45EC =FFFFF71C                  cameraZPosY:            rs.b 4  
000E45EC                            
000E45EC =FFFFD000                  OBJECTRAM               EQU $FFFFD000 
000E45EC =00000040                  OBJSZ                   EQU 64
000E45EC                            OBJECTRAMSZ             EQU OBJECTRAME-OBJECTRAM    
000E45EC                            
000E45EC                                    rsset           $FFFFD000 
000E45EC =FFFFD000                  objSlot00:      rs.b    OBJSZ
000E45EC =FFFFD040                  objSlot01:      rs.b    OBJSZ
000E45EC =FFFFD080                  objSlot02:      rs.b    OBJSZ
000E45EC =FFFFD0C0                  objSlot03:      rs.b    OBJSZ
000E45EC =FFFFD100                  objSlot04:      rs.b    OBJSZ
000E45EC =FFFFD140                  objSlot05:      rs.b    OBJSZ
000E45EC =FFFFD180                  objSlot06:      rs.b    OBJSZ
000E45EC =FFFFD1C0                  objSlot07:      rs.b    OBJSZ  
000E45EC =FFFFD200                  objSlot08:      rs.b    OBJSZ  
000E45EC =FFFFD240                  objSlot09:      rs.b    OBJSZ  
000E45EC =FFFFD280                  objSlot0A:      rs.b    OBJSZ  
000E45EC =FFFFD2C0                  objSlot0B:      rs.b    OBJSZ  
000E45EC =FFFFD300                  objSlot0C:      rs.b    OBJSZ
000E45EC =FFFFD340                  objSlot0D:      rs.b    OBJSZ
000E45EC =FFFFD380                  objSlot0E:      rs.b    OBJSZ
000E45EC =FFFFD3C0                  objSlot0F:      rs.b    OBJSZ
000E45EC =FFFFD400                  objSlot10:      rs.b    OBJSZ  
000E45EC =FFFFD440                  objSlot11:      rs.b    OBJSZ
000E45EC =FFFFD480                  objSlot12:      rs.b    OBJSZ
000E45EC =FFFFD4C0                  objSlot13:      rs.b    OBJSZ
000E45EC =FFFFD500                  objSlot14:      rs.b    OBJSZ  
000E45EC =FFFFD540                  objSlot15:      rs.b    OBJSZ
000E45EC =FFFFD580                  objSlot16:      rs.b    OBJSZ
000E45EC =FFFFD5C0                  objSlot17:      rs.b    OBJSZ
000E45EC =FFFFD600                  objSlot18:      rs.b    OBJSZ  
000E45EC =FFFFD640                  objSlot19:      rs.b    OBJSZ
000E45EC =FFFFD680                  objSlot1A:      rs.b    OBJSZ
000E45EC =FFFFD6C0                  objSlot1B:      rs.b    OBJSZ
000E45EC =FFFFD700                  objSlot1C:      rs.b    OBJSZ
000E45EC =FFFFD740                  objSlot1D:      rs.b    OBJSZ
000E45EC =FFFFD780                  objSlot1E:      rs.b    OBJSZ
000E45EC =FFFFD7C0                  objSlot1F:      rs.b    OBJSZ
000E45EC =FFFFD800                  objsAlloc:              rs.b    OBJSZ*96
000E45EC                            OBJECTRAME:
000E45EC                            
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            ; Start of main "beebush" program
000E45EC                            ; ---------------------------------------------------------------------------
000E45EC                            
000E45EC                            GM_BEEBUSH:  
000E45EC 1038 F601                        	move.b  submode.w,d0
000E45F0 0240 001C                          andi.w  #$1C,d0
000E45F4 4EBB 0000                          jsr     .Index(pc,d0.w)
000E45F8 4E75                               rts
000E45FA                            
000E45FA                            ; ---------------------------------------------------------------------------
000E45FA                            
000E45FA =00000000                  SMNO_BEEBUSH_INIT       = 0*4   ; Init 
000E45FA =00000004                  SMNO_BEEBUSH_INTRO      = 1*4   ; Intro seq.
000E45FA =00000008                  SMNO_BEEBUSH_STATIC     = 2*4   ; Static scr.
000E45FA =0000000C                  SMNO_BEEBUSH_INITMAIN   = 3*4   ; Main Init
000E45FA =00000010                  SMNO_BEEBUSH_MAIN       = 4*4   ; Main game
000E45FA                            
000E45FA                            .Index:      
000E45FA 6000 0000                          bra.w   BEEBUSH_INIT
000E45FE 6000 0000                          bra.w   BEEBUSH_INTRO
000E4602 6000 0000                          bra.w   BEEBUSH_STATIC
000E4606 6000 0000                          bra.w   BEEBUSH_INITMAIN
000E460A 6000 0000                          bra.w   BEEBUSH_MAIN
000E460E                            .Null:
000E460E 4E75                               rts 
000E4610                            
000E4610                            ; ---------------------------------------------------------------------------
000E4610                            ; Initialization
000E4610                            ; ---------------------------------------------------------------------------
000E4610                            
000E4610                            BEEBUSH_INIT:   
000E4610 46FC 2700                  	move    #$2700,sr  		; interrupt disable               
000E4614 4EB8 1EC4                          jsr     ClearArtListQueue	; clr art lists, we're not using them
000E4618 4EB8 270C                          jsr     PalFadeOut		; fade palette out
000E461C 4EB8 1BA8                          jsr     InitScreen		
000E4620 4DF9 00C0 0004                     lea     VDPCTRL,a6		; init regs
000E4626 3038 F60C                          move.w  displayMode.w,d0	; Get mode reg. 1 info
000E462A 0200 00BF                          andi.b  #%10111111,d0           ; Mask display enable bit
000E462E 33C0 00C0 0004                     move.w  d0,VDPCTRL              ; Set mode reg. 1 
000E4634 3CBC 8004                          move.w  #$8000+%00000100,(a6)
000E4638 3CBC 8230                          move.w  #$8230,(a6)
000E463C 3CBC 8407                          move.w  #$8407,(a6)
000E4640 3CBC 857C                          move.w  #$857C,(a6)
000E4644 3CBC 8720                          move.w  #$8720,(a6)
000E4648 3CBC 8B00                          move.w  #$8B00+%00000000,(a6)
000E464C 43F8 D000                          lea     OBJECTRAM.w,a1
000E4650 7000                               moveq   #0,d0
000E4652 323C 013F                          move.w  #((OBJSZ*20)/4)-1,d1
000E4656                            
000E4656                            .ClearObjects:                         
000E4656 22C0                               move.l  d0,(a1)+
000E4658 51C9 FFFC                          dbf     d1,.ClearObjects
000E465C 43F8 F700                          lea     cameraAPosX.w,a1
000E4660 7000                               moveq   #0,d0
000E4662 323C 0007                          move.w  #$8-1,d1
000E4666                            
000E4666                            .ClearCams:                            
000E4666 22C0                               move.l  d0,(a1)+
000E4668 51C9 FFFC                          dbf     d1,.ClearCams
000E466C                            
000E466C 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
000E4672 4EB8 33F2                          jsr     VSync
000E4676                            
000E4676 11FC 0000 D000                     move.b  #BBUSH_OBJNO_BODY,objSlot00.w        
000E467C 11FC 0000 D040                     move.b  #BBUSH_OBJNO_HEAD,objSlot01.w      
000E4682 11FC 0000 D080                     move.b  #BBUSH_OBJNO_EYES,objSlot02.w     
000E4688 11FC 0000 D0C0                     move.b  #BBUSH_OBJNO_MOUTH,objSlot03.w   
000E468E 11FC 0000 D100                     move.b  #BBUSH_OBJNO_DBUG,objSlot04.w
000E4694                            
000E4694 =FFFFD000                  membushBody  = objSlot00
000E4694 =FFFFD040                  membushHead  = objSlot01       
000E4694 =FFFFD080                  membushEyes  = objSlot02
000E4694 =FFFFD0C0                  membushMouth = objSlot03    
000E4694                                                    
000E4694 31FC 0000 F602                     move.w  #0,joypadMirr.w
000E469A 31FC 0000 F604                     move.w  #0,joypad.w
000E46A0                            
000E46A0                                    ; Load art direct
000E46A0                            
000E46AA 41F9 0000 0000                     lea     ArtNem_BEEBUSH,a0                       ; Get compressed bitstream
000E46B0 4EB8 1D26                          jsr     NemDec
000E46B4                            
000E46BE 41F9 0000 0000                     lea     ArtNem_QUAGMIRE,a0                      ; Get compressed bitstream
000E46C4 4EB8 1D26                          jsr     NemDec
000E46C8                            
000E46D2 3E3C 01FF                          move.w  #(8*64)-1,d7
000E46D6                            
000E46D6                            .FillStatic:
000E46D6 4EB8 33FE                          jsr     CalcRandom
000E46DA 23C0 00C0 0000                     move.l  d0,VDPDATA
000E46E0 D280                               add.l   d0,d1
000E46E2 23C1 00C0 0000                     move.l  d1,VDPDATA
000E46E8                            
000E46E8 51CF FFEC                          dbf     d7,.FillStatic
000E46EC                            
000E46EC                                    ; Load screen A tilemap
000E46EC                            
000E46EC 43F9 0000 0000                     lea     MapScrA_BEEBUSH,a1
000E46F8 7227                               moveq   #40-1,d1                     ; Set Width
000E46FA 741B                               moveq   #28-1,d2                     ; Set Height
000E46FC 4EB8 1D06                          jsr     DrawTileMap                  ; Draw Tilemap to location
000E4700                            
000E4700                                    ; Load screen B tilemap
000E4700                            
000E4700 43F9 0000 0000                     lea     MapScrB_BEEBUSH,a1
000E470C 7227                               moveq   #40-1,d1                     ; Set Width
000E470E 741B                               moveq   #28-1,d2                     ; Set Height
000E4710 4EB8 1D06                          jsr     DrawTileMap                  ; Draw Tilemap to location
000E4714                            
000E4714                                    ; Load palette into buffer directly
000E4714                            
000E4714 7E3F                               moveq   #64-1,d7
000E4716 45F9 0000 0000                     lea     Pal_BEEBUSH,a2
000E471C 47F8 FB00                          lea     palette,a3
000E4720                            
000E4720                            .LoadToBuffer:                         
000E4720 26DA                               move.l  (a2)+,(a3)+
000E4722 51CF FFFC                          dbf     d7,.LoadToBuffer
000E4726                            
000E4726                                    ; !!!DEBUG!!!
000E4726                            
000E4726 4EB9 0000 0000                     jsr     _beebushDbugLoad
000E472C                            
000E472C 3038 F60C                          move.w  displayMode.w,d0          
000E4730 0000 0040                          ori.b   #%1000000,d0
000E4734                            
000E4734 33C0 00C0 0004                     move.w  d0,VDPCTRL		     ; Enable display when ready
000E473A 11FC 0004 F601                     move.b  #SMNO_BEEBUSH_INTRO,submode.w ; Move to next mode
000E4740 4E75                               rts
000E4742                            
000E4742                            ; ---------------------------------------------------------------------------
000E4742                            ; Main cutscene loop
000E4742                            ; ---------------------------------------------------------------------------
000E4742                            
000E4742                            BEEBUSH_INTRO:                              
000E4742 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
000E4748 4EB8 33F2                          jsr     VSync
000E474C 5278 FE04                          addq.w  #1,frameCntr.w
000E4750 6100 0000                          bsr.w   _beebushCamShake
000E4754 6100 0000                          bsr.w   _beebushRunObjects    
000E4758 4EB9 0000 E7AA                     jsr     DrawObjects
000E475E                            
000E475E 4A38 D070                          tst.b   membushHead+$30
000E4762 6700                               beq.s   .NoChg
000E4764 11FC 0008 F601                     move.b  #SMNO_BEEBUSH_STATIC,submode.w ; Move to next mode
000E476A 31FC 003C F614                     move.w  #60,genericTimer.w
000E4770 6100 0000                          bsr.w   _beebushClrSprites
000E4774                            
000E4774                            .NoChg: 
000E4774 4E75                               rts 
000E4776                            
000E4776                            ; ---------------------------------------------------------------------------
000E4776                            ; Static Transition sequence
000E4776                            ; ---------------------------------------------------------------------------
000E4776                            
000E4776                            BEEBUSH_STATIC:                              
000E4776 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
000E477C 4EB8 33F2                          jsr     VSync
000E4780 5278 FE04                          addq.w  #1,frameCntr.w
000E4784 6100 0000                          bsr.w   _beebushDrawStatic
000E4788 5378 F614                          subq.w  #1,genericTimer.w
000E478C 6600 0000                          bne.w   .Exit
000E4790 11FC 000C F601                     move.b  #SMNO_BEEBUSH_INITMAIN,submode.w ; Move to next mode
000E4796 4E75                               rts
000E4798                            .Exit:
000E4798                            
000E4798 4E75                               rts
000E479A                            
000E479A                            ; ---------------------------------------------------------------------------
000E479A                            ; Initialize main sequence
000E479A                            ; ---------------------------------------------------------------------------
000E479A                            
000E479A =FFFFD000                  membushPlayer = objSlot00
000E479A                            
000E479A                            BEEBUSH_INITMAIN:                              
000E479A 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
000E47A0 4EB8 33F2                          jsr     VSync
000E47A4 43F9 0000 0000                     lea     MapScrB_BEEBUSHMAIN,a1
000E47AA 33FC 8B00 00C0 0004                move.w  #$8B00+%00000000,VDPCTRL
000E47B8 723F                               moveq   #64-1,d1                     ; Set Width
000E47BA 741B                               moveq   #28-1,d2                     ; Set Height
000E47BC 4EB8 1D06                          jsr     DrawTileMap                  ; Draw Tilemap to location
000E47C0 43F8 D000                          lea     OBJECTRAM.w,a1
000E47C4 7000                               moveq   #0,d0
000E47C6 323C 013F                          move.w  #((OBJSZ*20)/4)-1,d1
000E47CA                            
000E47CA                            .ClearObjects:                         
000E47CA 22C0                               move.l  d0,(a1)+
000E47CC 51C9 FFFC                          dbf     d1,.ClearObjects
000E47D0 11FC 0000 D000                     move.b  #BBUSH_OBJNO_PLAYER,objSlot00.w
000E47D6 21FC 0000 0100 F608                move.l  #$100,distance
000E47DE 11FC 0010 F601                     move.b  #SMNO_BEEBUSH_MAIN,submode.w ; Move to next mode
000E47E4 4E75                               rts
000E47E6                            
000E47E6                            ; ---------------------------------------------------------------------------
000E47E6                            ; Main    lGod wfyuck ioff
000E47E6                            ; ---------------------------------------------------------------------------
000E47E6                            
000E47E6                            BEEBUSH_MAIN:                              
000E47E6 11FC 001C F62A                     move.b  #VBLNO_BEEBUSHSCR,vblankCmd.w
000E47EC 4EB8 33F2                          jsr     VSync
000E47F0 5278 FE04                          addq.w  #1,frameCntr.w
000E47F4 6100 0000                          bsr.w   _beebushScroll
000E47F8 6100 0000                          bsr.w   _beebushRunObjects    
000E47FC 4EB9 0000 E7AA                     jsr     DrawObjects
000E4802 4E75                               rts
000E4804                            
000E4804                            ; ---------------------------------------------------------------------------
000E4804                            
000E4804                            Pal_BEEBUSH:
000E4804                                    incbin	"beebush/Data/BEEBUSH.PAL"
000E4884                                    even
000E4884                            
000E4884                            MapScrA_BEEBUSH:
000E4884                                    incbin  "beebush/Data/BEEBUSH_SCR_A.MAP"
000E5144                                    even
000E5144                            
000E5144                            MapScrB_BEEBUSH:
000E5144                                    incbin  "beebush/Data/BEEBUSH_SCR_B.MAP"
000E5A04                                    even
000E5A04                            
000E5A04                            MapScrB_BEEBUSHMAIN:
000E5A04                                    incbin  "beebush/Data/BEEBUSH_MAIN_B.MAP"
000E6804                                    even
000E6804                            
000E6804                            ArtNem_BEEBUSH:
000E6804                                    incbin  "beebush/Data/BEEBUSH_ART.NEM"
000E6B68                                    even
000E6B68                            
000E6B68                            ArtNem_QUAGMIRE:
000E6B68                                    incbin  "beebush/Data/QUAGMIRE_ART.NEM"
000E7B40                                    even
000E7B40                            
000E7B40                            ; ---------------------------------------------------------------------------
000E7B40                            ; Do camera unsteadiness movement
000E7B40                            ;
000E7B40                            ; camera A = REC. and camera overlay
000E7B40                            ; camera B = background (moves)
000E7B40                            ; ---------------------------------------------------------------------------
000E7B40                            
000E7B40 =FFFFF760                  beeSinCntr = $FFFFF760
000E7B40 =FFFFF762                  beeSin     = $FFFFF762      
000E7B40 =FFFFF764                  beeCos     = $FFFFF764
000E7B40                            
000E7B40                            _beebushCamShake:
000E7B40 5438 F760                          add.b   #2,beeSinCntr.w
000E7B44 1038 F760                          move.b  beeSinCntr.w,d0
000E7B48 4EB8 3424                          jsr     CalcSinCos
000E7B4C 31C0 F764                          move.w  d0,beeCos.w
000E7B50 31C1 F762                          move.w  d1,beeSin.w
000E7B54 EE40                               asr.w   #7,d0
000E7B56 EC41                               asr.w   #6,d1
000E7B58                            
000E7B58                                    
000E7B58 31C0 F61C                          move.w  d0,mainBPosX
000E7B5C 4440                               neg.w   d0
000E7B5E 31C0 F708                          move.w  d0,cameraBPosX
000E7B62                            
000E7B62 31C1 F618                          move.w  d1,mainBPosY
000E7B66 31C1 F70C                          move.w  d1,cameraBPosY
000E7B6A 4E75                               rts
000E7B6C                            
000E7B6C                            ; ---------------------------------------------------------------------------
000E7B6C                            ; Main scrolling for gameplay
000E7B6C                            ; ---------------------------------------------------------------------------
000E7B6C                            
000E7B6C                            
000E7B6C                            _beebushScroll:                    
000E7B6C 43F8 CC00                          lea     hscroll.w,a1
000E7B70                            
000E7B70 3238 F700                          move.w  cameraAPosX.w,d1
000E7B74 E241                               asr.w   #1,d1
000E7B76 31C1 F708                          move.w  d1,cameraBPosX
000E7B7A                            
000E7B7A 3238 F710                          move.w  cameraCPosX.w,d1
000E7B7E D241                               add.w   d1,d1
000E7B80 31C1 F718                          move.w  d1,cameraZPosX.w
000E7B84                            
000E7B84 3038 F708                          move.w  cameraBPosX.w,d0
000E7B88                            
000E7B88                                    ; Far away BG segment
000E7B88                            
000E7B88 323C 0047                          move.w  #72-1,d1
000E7B8C E480                               asr.l   #2,d0
000E7B8E                            .FarBG:                         
000E7B8E 22C0                               move.l  d0,(a1)+
000E7B90 51C9 FFFC                          dbf     d1,.FarBG
000E7B94                            
000E7B94                                    ; Sidewalk perspective effect
000E7B94                            
000E7B94 3038 F710                          move.w  cameraCPosX.w,d0
000E7B98 E440                               asr.w   #2,d0
000E7B9A 31C0 F622                          move.w  d0,mainCPosX.w
000E7B9E 0C40 0021                          cmp.w   #32+1,d0
000E7BA2 6600                               bne.s   .SkipBRes
000E7BA4 31FC 0000 F710                     move.w  #0,cameraCPosX.w
000E7BAA 31FC 0000 F718                     move.w  #0,cameraZPosX.w
000E7BB0 303C 0000                          move.w  #0,d0
000E7BB4                            .SkipBRes
000E7BB4 4440                               neg     d0
000E7BB6 3438 F718                          move.w  cameraZPosX.w,d2
000E7BBA E442                               asr.w   #2,d2
000E7BBC 31C2 F620                          move.w  d2,mainZPosX.w
000E7BC0 4442                               neg     d2
000E7BC2 9440                               sub.w   d0,d2
000E7BC4 48C2                               ext.l   d2
000E7BC6 E182                               asl.l   #8,d2
000E7BC8 85FC 0068                          divs.w  #$68,d2
000E7BCC 48C2                               ext.l   d2
000E7BCE E182                               asl.l   #8,d2
000E7BD0 3600                               move.w  d0,d3
000E7BD2 323C 001F                          move.w  #32-1,d1
000E7BD6                            
000E7BD6                            .Road:                                                    
000E7BD6 3003                               move.w  d3,d0
000E7BD8 4440                               neg.w   d0
000E7BDA 22C0                               move.l  d0,(a1)+
000E7BDC 4843                               swap    d3
000E7BDE D682                               add.l   d2,d3
000E7BE0 4843                               swap    d3
000E7BE2 51C9 FFF2                          dbf     d1,.Road
000E7BE6                            
000E7BE6                                    ; Grass (far away)
000E7BE6                            
000E7BE6 3038 F708                          move.w  cameraBPosX.w,d0
000E7BEA 2400                               move.l  d0,d2
000E7BEC E482                               asr.l   #2,d2
000E7BEE 9082                               sub.l   d2,d0
000E7BF0 323C 001F                          move.w  #32-1,d1
000E7BF4                            
000E7BF4                            .GrassFar
000E7BF4                            
000E7BF4 22C0                               move.l  d0,(a1)+
000E7BF6 51C9 FFFC                          dbf     d1,.GrassFar
000E7BFA                            
000E7BFA 3038 F708                          move.w  cameraBPosX.w,d0
000E7BFE 323C 001F                          move.w  #32-1,d1
000E7C02                                    
000E7C02                            .GrassMid
000E7C02                            
000E7C02 22C0                               move.l  d0,(a1)+
000E7C04 51C9 FFFC                          dbf     d1,.GrassMid
000E7C08                            
000E7C08 3038 F708                          move.w  cameraBPosX.w,d0
000E7C0C 2400                               move.l  d0,d2
000E7C0E E482                               asr.l   #2,d2
000E7C10 D082                               add.l   d2,d0
000E7C12 323C 001F                          move.w  #32-1,d1
000E7C16                            
000E7C16                            .GrassClose
000E7C16                            
000E7C16 22C0                               move.l  d0,(a1)+
000E7C18 51C9 FFFC                          dbf     d1,.GrassClose
000E7C1C 31F8 F700 F61A                     move.w  cameraAPosX.w,mainAPosX
000E7C22 31F8 F708 F61C                     move.w  cameraBPosX.w,mainBPosX
000E7C28 4E75                               rts
000E7C2A                            
000E7C2A                            ; ---------------------------------------------------------------------------
000E7C2A                            ; Clear screen sprites
000E7C2A                            ; ---------------------------------------------------------------------------
000E7C2A                            
000E7C2A                            _beebushClrSprites:
000E7C2A 21FC 0000 0000 F616                move.l  #0,mainAPosY.w
000E7C32 21FC 0000 0000 F61A                move.l  #0,mainAPosX.w
000E7C3A                            
000E7C3A 43F8 F800                          lea     vdpSprites.w,a1
000E7C3E 7000                               moveq   #0,d0
000E7C40 323C 009F                          move.w  #$A0-1,d1               ; Clear all sprites
000E7C44                            
000E7C44                            .ClearSprites:
000E7C44 22C0                               move.l  d0,(a1)+
000E7C46 51C9 FFFC                          dbf     d1,.ClearSprites
000E7C4A 43F8 CC00                          lea     hscroll.w,a1
000E7C4E 7000                               moveq   #0,d0
000E7C50 323C 0100                          move.w  #$100,d1
000E7C54                            
000E7C54                            .ClearHScroll:
000E7C54 22C0                               move.l  d0,(a1)+
000E7C56 51C9 FFFC                          dbf     d1,.ClearHScroll
000E7C5A 4E75                               rts
000E7C5C                            
000E7C5C                            ; ---------------------------------------------------------------------------
000E7C5C                            ; Draw tilemap static for transitory sequences
000E7C5C                            ; Draws 2 "random" tiles out of a memory space location (document later idk)
000E7C5C                            ; ---------------------------------------------------------------------------
000E7C5C                            
000E7C5C                            _beebushDrawStatic:
000E7C5C 4DF9 00C0 0000                     lea     VDPDATA,a6                      ; a6 = VDPDATA        
000E7C68 383C 000E                          move.w  #(30/2)-1,d4                    ; d4 = width / 2
000E7C6C 3A3C 0013                          move.w  #20-1,d5                        ; d5 = height
000E7C70 2C3C 0080 0000                     move.l  #$800000,d6                     ; d6 = cmd row delta 
000E7C76                            
000E7C76                            .LoopRow:                              
000E7C76 2D43 0004                          move.l  d3,VDPCTRL-VDPDATA(a6)          ; set addr
000E7C7A 3E04                               move.w  d4,d7                           ; copy width to d7
000E7C7C                            
000E7C7C                            .LoopColumn:            
000E7C7C 4EB8 33FE                          jsr     CalcRandom                      ; get rand
000E7C80 0240 003F                          andi.w  #$003F,d0                       ; mask high bits of tile no.
000E7C84 0040 2200                          ori.w   #$2200,d0                       ; set line 2 and id $1XX
000E7C88 3C80                               move.w  d0,(a6)                         ; write 1 tile
000E7C8A D007                               add.b   d7,d0                           ; add whatever d7 is to d0
000E7C8C 0240 003F                          andi.w  #$003F,d0                       ; do the same to it
000E7C90 0040 2200                          ori.w   #$2200,d0
000E7C94 3C80                               move.w  d0,(a6)                         ; write 1 tile
000E7C96                            
000E7C96 51CF FFE4                          dbf     d7,.LoopColumn                  ; loop for width
000E7C9A D686                               add.l   d6,d3                           ; move to next row
000E7C9C 51CD FFD8                          dbf     d5,.LoopRow                     ; loop for height
000E7CA0 4E75                               rts
000E7CA2                            
000E7CA2                            ; ---------------------------------------------------------------------------
000E7CA2                            ; local memory usage derived from global (this sucks)
000E7CA2                            
000E7CA2                            
000E7CA2                                    include 'beebush/Objects.asm'
000E7CA2                            ; ---------------------------------------------------------------------------
000E7CA2                            ; Bee Bush Screen objects library
000E7CA2                            ; Depends on Stock Sonic 1 object library and sprite renderer
000E7CA2                            ; ---------------------------------------------------------------------------
000E7CA2                            
000E7CA2 =00000038                  OBJ.GRAVITY    EQU     56              ; Gravity delta
000E7CA2                            
000E7CA2                                                rsreset
000E7CA2 =00000000                  obj.No:             rs.b 1                  
000E7CA2 =00000001                  obj.Render:         rs.b 1                  
000E7CA2 =00000002                  obj.Tile:           rs.b 2                  
000E7CA2 =00000004                  obj.Map:            rs.b 4                  
000E7CA2 =00000008                  obj.X:              rs.b 2                  
000E7CA2 =0000000A                  obj.YScr:           rs.b 2                  
000E7CA2 =0000000C                  obj.Y:              rs.b 2                  
000E7CA2 =0000000E                  obj.YSub:           rs.b 2                  
000E7CA2 =00000010                  obj.XSpeed:         rs.b 2                  
000E7CA2 =00000012                  obj.YSpeed:         rs.b 2                  
000E7CA2 =00000014                  obj.Momentum:       rs.b 2                  
000E7CA2 =00000016                  obj.YRad:           rs.b 1                  
000E7CA2 =00000017                  obj.XRad:           rs.b 1                  
000E7CA2 =00000018                  obj.XDraw:          rs.b 1                  
000E7CA2 =00000019                  obj.Priority:       rs.b 1                  
000E7CA2 =0000001A                  obj.Frame:          rs.b 1                  
000E7CA2 =0000001B                  obj.AnimFrame:      rs.b 1                  
000E7CA2 =0000001C                  obj.Anim:           rs.b 1                  
000E7CA2 =0000001D                  obj.LastAnim:       rs.b 1                  
000E7CA2 =0000001E                  obj.FrameTimer:     rs.b 1                  
000E7CA2 =0000001F                  obj.FrameMirr:      rs.b 1                  
000E7CA2 =00000020                  obj.Collision:      rs.b 1                  
000E7CA2 =00000021                  obj.ColliCnt:       rs.b 1                  
000E7CA2 =00000022                  obj.Status:         rs.b 1                  
000E7CA2 =00000023                  obj.Respawn:        rs.b 1                  
000E7CA2 =00000024                  obj.Action:         rs.b 1                  
000E7CA2 =00000025                  obj.SubAction:      rs.b 1                  
000E7CA2 =00000026                  obj.Angle:          rs.b 2                  
000E7CA2 =00000028                  obj.Arg:            rs.b 1                   
000E7CA2                            
000E7CA2                            ; --------------------------------------------------------------------------- 
000E7CA2                            
000E7CA2 =00000000                  STAT.XDIR:       equ 0
000E7CA2 =00000001                  STAT.YDIR:       equ 1                  
000E7CA2 =00000003                  STAT.HOISTING:   equ 3                  
000E7CA2 =00000005                  STAT.PUSHED:     equ 5                  
000E7CA2 =00000007                  STAT.FLAG:       equ 7
000E7CA2                            
000E7CA2                            ; ---------------------------------------------------------------------------
000E7CA2                            
000E7CA2 =00000000                  PHYS.DIR:        equ 0                  
000E7CA2 =00000001                  PHYS.AIRBORNE:   equ 1                  
000E7CA2 =00000002                  PHYS.ROLLING:    equ 2                  
000E7CA2 =00000003                  PHYS.HOISTED:    equ 3                  
000E7CA2 =00000004                  PHYS.ROLLJUMP:   equ 4                  
000E7CA2 =00000005                  PHYS.PUSH:       equ 5                  
000E7CA2 =00000006                  PHYS.WATER:      equ 6
000E7CA2 =00000007                  PHYS.FLAG:       equ 7
000E7CA2                            
000E7CA2                            ; ---------------------------------------------------------------------------
000E7CA2                            
000E7CA2 =00000000                  REND.XMIRR:      equ 0
000E7CA2 =00000001                  REND.YMIRR:      equ 1
000E7CA2 =00000002                  REND.CAMOFF:     equ 2
000E7CA2 =00000003                  REND.CAMOFF2:    equ 3
000E7CA2 =00000004                  REND.HEIGHT:     equ 4
000E7CA2 =00000005                  REND.SPTYPE:     equ 5
000E7CA2 =00000006                  REND.BEHIND:     equ 6                  
000E7CA2 =00000007                  REND.ONSCREEN:   equ 7
000E7CA2                            
000E7CA2                            ; ---------------------------------------------------------------------------
000E7CA2                            
000E7CA2                            _beebushRunObjects:                             
000E7CA2 41F8 D000                          lea     OBJECTRAM.w,a0
000E7CA6 7E5F                               moveq   #96-1,d7
000E7CA8 7000                               moveq   #0,d0
000E7CAA                            
000E7CAA                            .RunObjLoop:                       
000E7CAA 1010                               move.b  obj.No(a0),d0
000E7CAC 6700                               beq.s   .EmptySlot
000E7CAE D040                               add.w   d0,d0
000E7CB0 D040                               add.w   d0,d0
000E7CB2 227B 0000                          movea.l .ObjectIndex-4(pc,d0.w),a1       ; No zero offset - start at 1
000E7CB6 4E91                               jsr     (a1)
000E7CB8 7000                               moveq   #0,d0
000E7CBA                            
000E7CBA                            .EmptySlot:                            
000E7CBA 41E8 0040                          lea     OBJSZ(a0),a0            ; Move into next object memory space
000E7CBE 51CF FFEA                          dbf     d7,.RunObjLoop
000E7CC2 4E75                               rts
000E7CC4                            
000E7CC4                            ; ---------------------------------------------------------------------------
000E7CC4                            ; Object Index for Bee Bush
000E7CC4                            ; ---------------------------------------------------------------------------
000E7CC4 =00000001                  BBUSH_OBJNO_PLAYER      = 1
000E7CC4 =00000002                  BBUSH_OBJNO_BODY        = 2
000E7CC4 =00000003                  BBUSH_OBJNO_HEAD        = 3
000E7CC4 =00000004                  BBUSH_OBJNO_EYES        = 4
000E7CC4 =00000005                  BBUSH_OBJNO_MOUTH       = 5
000E7CC4 =00000006                  BBUSH_OBJNO_DBUG        = 6
000E7CC4                            
000E7CC4                            
000E7CC4                            .ObjectIndex:    
000E7CC4 0000 0000                          dc.l BbushObj_Player
000E7CC8 0000 0000                          dc.l BbushObj_QuagmireBody
000E7CCC 0000 0000                          dc.l BbushObj_QuagmireHead
000E7CD0 0000 0000                          dc.l BbushObj_QuagmireEyes
000E7CD4 0000 0000                          dc.l BbushObj_QuagmireMouth
000E7CD8 0000 0000                          dc.l BbushObj_Dbug
000E7CDC                            .Null:
000E7CDC 4E75                               rts 
000E7CDE                            
000E7CDE                                    include  "beebush/Objects/OBJ_QUAGMIRE.asm"
000E7CDE                            ; ---------------------------------------------------------------------------
000E7CDE                            ; Body
000E7CDE                            ; ---------------------------------------------------------------------------
000E7CDE                            
000E7CDE =00000030                  bbush.Flag  = $30
000E7CDE =00000032                  bbush.orgX  = $32
000E7CDE =00000034                  bbush.orgY  = $34
000E7CDE =00000036                  bbush.Cntr  = $36
000E7CDE =00000038                  bbush.Timer = $38
000E7CDE =00000039                  bbush.MvChk = $39
000E7CDE                            
000E7CDE                            
000E7CDE =00000300                  QUAGTILE = $300
000E7CDE                            
000E7CDE                            BbushObj_QuagmireBody:                          
000E7CDE 7000                               moveq   #0,d0
000E7CE0 1028 0024                          move.b  obj.Action(a0),d0
000E7CE4 323B 0000                          move.w  .Index(pc,d0.w),d1
000E7CE8 4EFB 1000                          jmp     .Index(pc,d1.w)
000E7CEC                            
000E7CEC                            ; ---------------------------------------------------------------------------
000E7CEC                            .Index:                                
000E7CEC 0000                               dc.w QuagmireBody_Init-.Index
000E7CEE 0000                               dc.w QuagmireBody_Display-.Index
000E7CF0                            ; ---------------------------------------------------------------------------
000E7CF0                            
000E7CF0                            QuagmireBody_Init:                         
000E7CF0 5428 0024                          addq.b  #2,obj.Action(a0)
000E7CF4 317C 00A8 0008                     move.w  #168,obj.X(a0)
000E7CFA 317C 00A0 000C                     move.w  #160,obj.Y(a0)
000E7D00 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
000E7D08 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E7D0E 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
000E7D14 117C 0007 0019                     move.b  #7,obj.Priority(a0)
000E7D1A 117C 0002 001A                     move.b  #2,obj.Frame(a0)
000E7D20 43F8 D040                          lea     membushHead,a1
000E7D24 3368 0008 0008                     move.w  obj.X(a0),obj.X(a1)
000E7D2A 3368 000C 000C                     move.w  obj.Y(a0),obj.Y(a1)
000E7D30 0469 003C 000C                     sub.w   #60,obj.Y(a1)
000E7D36 5169 0008                          sub.w   #8,obj.X(a1)    
000E7D3A 3369 0008 0032                     move.w  obj.X(a1),bbush.orgX(a1)
000E7D40 3369 000C 0034                     move.w  obj.Y(a1),bbush.orgY(a1)
000E7D46                                  
000E7D46                            
000E7D46                            QuagmireBody_Display:                           
000E7D46 4EB9 0000 E750                     jsr     _objectDraw  
000E7D4C 4E75                               rts
000E7D4E                            
000E7D4E                            ; ---------------------------------------------------------------------------
000E7D4E                            ; Head
000E7D4E                            ; ---------------------------------------------------------------------------
000E7D4E                            
000E7D4E                            BbushObj_QuagmireHead:                          
000E7D4E 7000                               moveq   #0,d0
000E7D50 1028 0024                          move.b  obj.Action(a0),d0
000E7D54 323B 0000                          move.w  .Index(pc,d0.w),d1
000E7D58 4EFB 1000                          jmp     .Index(pc,d1.w)
000E7D5C                            
000E7D5C                            ; ---------------------------------------------------------------------------
000E7D5C                            .Index:                                
000E7D5C 0000                               dc.w QuagmireHead_Init-.Index
000E7D5E 0000                               dc.w QuagmireHead_Display-.Index
000E7D60 0000                               dc.w QuagmireHead_InitBck-.Index
000E7D62 0000                               dc.w QuagmireHead_MoveBck-.Index
000E7D64 0000                               dc.w QuagmireHead_WaitInit-.Index
000E7D66 0000                               dc.w QuagmireHead_Wait-.Index
000E7D68                            ; ---------------------------------------------------------------------------
000E7D68                            
000E7D68                            QuagmireHead_Init:                         
000E7D68 5428 0024                          addq.b  #2,obj.Action(a0)
000E7D6C 117C 0012 0016                     move.b  #18,obj.YRad(a0)
000E7D72 117C 0009 0017                     move.b  #9,obj.XRad(a0)
000E7D78 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
000E7D80 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E7D86 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
000E7D8C 117C 0006 0019                     move.b  #6,obj.Priority(a0)
000E7D92 117C 0001 001A                     move.b  #1,obj.Frame(a0)
000E7D98                            
000E7D98                            QuagmireHead_Display:  
000E7D98 11FC 0003 D09A                     move.b  #3,(membushEyes+obj.Frame)
000E7D9E 3168 0032 0008                     move.w  bbush.orgX(a0),obj.X(a0)
000E7DA4 3168 0034 000C                     move.w  bbush.orgY(a0),obj.Y(a0)                    
000E7DAA 4EB9 0000 E750                     jsr     _objectDraw  
000E7DB0 4E75                               rts
000E7DB2                            
000E7DB2                            QuagmireHead_InitBck:
000E7DB2 117C 009A 0036                     move.b  #$9A,bbush.Cntr(a0)     ; set initial "phase" of sine
000E7DB8 117C 003C 0038                     move.b  #60,bbush.Timer(a0)  
000E7DBE 5428 0024                          addq.b  #2,obj.Action(a0)   
000E7DC2 11FC 0004 D09A                     move.b  #4,(membushEyes+obj.Frame)
000E7DC8                                
000E7DC8                            QuagmireHead_MoveBck:
000E7DC8 1028 0036                          move.b  bbush.Cntr(a0),d0
000E7DCC 5028 0036                          add.b   #8,bbush.Cntr(a0)
000E7DD0 4EB8 3424                          jsr     CalcSinCos              ; note: d0 yshift div. needs to be 6 so adj.
000E7DD4                            
000E7DD4                            
000E7DD4 E840                               asr.w   #4,d0
000E7DD6 0C68 00B0 0008                     cmpi.w  #$B0,obj.X(a0)
000E7DDC                            
000E7DDC 3428 0032                          move.w  bbush.orgX(a0),d2
000E7DE0 9440                               sub.w   d0,d2
000E7DE2                            
000E7DE2 0C42 00B0                          cmpi.w  #$B0,d2
000E7DE6 6200                               bhi.s   .SkipSet
000E7DE8 0C42 0091                          cmpi.w  #$91,d2
000E7DEC 6500                               blo.s   .SkipSet
000E7DEE                            
000E7DEE 3142 0008                          move.w  d2,obj.X(a0)
000E7DF2                            
000E7DF2                            
000E7DF2 E640                               asr.w   #3,d0        
000E7DF4 3628 0034                          move.w  bbush.orgY(a0),d3
000E7DF8 D640                               add.w   d0,d3
000E7DFA 3143 000C                          move.w  d3,obj.Y(a0) 
000E7DFE                            
000E7DFE                            .SkipSet:
000E7DFE 4EB9 0000 E750                     jsr     _objectDraw 
000E7E04 5328 0038                          sub.b   #1,bbush.Timer(a0) 
000E7E08 6700                               beq.s   .Exit
000E7E0A 4E75                               rts
000E7E0C                            .Exit:
000E7E0C 5428 0024                          addq.b  #2,obj.Action(a0)
000E7E10 4E75                               rts  
000E7E12                            
000E7E12                            QuagmireHead_WaitInit:  
000E7E12 5428 0024                          addq.b  #2,obj.Action(a0)     
000E7E16 117C 001E 0038                     move.b  #30,bbush.Timer(a0) 
000E7E1C                            
000E7E1C                            QuagmireHead_Wait:
000E7E1C 4EB9 0000 E750                     jsr     _objectDraw                    
000E7E22 5328 0038                          sub.b   #1,bbush.Timer(a0) 
000E7E26 6600                               bne.s   .Exit
000E7E28 50E8 0030                          st      bbush.Flag(a0)
000E7E2C                            
000E7E2C                            .Exit:
000E7E2C 4E75                               rts
000E7E2E                            
000E7E2E                            ; ---------------------------------------------------------------------------
000E7E2E                            ; Eyes
000E7E2E                            ; ---------------------------------------------------------------------------
000E7E2E                            
000E7E2E                            BbushObj_QuagmireEyes:                          
000E7E2E 7000                               moveq   #0,d0
000E7E30 1028 0024                          move.b  obj.Action(a0),d0
000E7E34 323B 0000                          move.w  .Index(pc,d0.w),d1
000E7E38 4EFB 1000                          jmp     .Index(pc,d1.w)
000E7E3C                            
000E7E3C                            ; ---------------------------------------------------------------------------
000E7E3C                            .Index:                                
000E7E3C 0000                               dc.w QuagmireEyes_Init-.Index
000E7E3E 0000                               dc.w QuagmireEyes_Display-.Index
000E7E40                            ; ---------------------------------------------------------------------------
000E7E40                            
000E7E40                            QuagmireEyes_Init:                         
000E7E40 5428 0024                          addq.b  #2,obj.Action(a0)
000E7E44 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
000E7E4C 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E7E52 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
000E7E58 117C 0005 0019                     move.b  #5,obj.Priority(a0)
000E7E5E 117C 0003 001A                     move.b  #3,obj.Frame(a0)
000E7E64                            
000E7E64                            QuagmireEyes_Display:   
000E7E64 43F8 D040                          lea     membushHead,a1
000E7E68 3169 0008 0008                     move.w  obj.X(a1),obj.X(a0)
000E7E6E 3169 000C 000C                     move.w  obj.Y(a1),obj.Y(a0)
000E7E74 0468 0016 000C                     sub.w   #22,obj.Y(a0)                        
000E7E7A 4EB9 0000 E750                     jsr     _objectDraw  
000E7E80 4E75                               rts
000E7E82                            
000E7E82                            ; ---------------------------------------------------------------------------
000E7E82                            ; Mouth
000E7E82                            ; ---------------------------------------------------------------------------
000E7E82                            
000E7E82                            BbushObj_QuagmireMouth:
000E7E82 7000                               moveq   #0,d0
000E7E84 1028 0024                          move.b  obj.Action(a0),d0
000E7E88 323B 0000                          move.w  .Index(pc,d0.w),d1
000E7E8C 4EFB 1000                          jmp     .Index(pc,d1.w)
000E7E90                            
000E7E90                            ; ---------------------------------------------------------------------------
000E7E90                            .Index:                                
000E7E90 0000                               dc.w QuagmireMouth_Init1-.Index
000E7E92 0000                               dc.w QuagmireMouth_Speak1-.Index
000E7E94 0000                               dc.w QuagmireMouth_Init2-.Index
000E7E96 0000                               dc.w QuagmireMouth_Speak2-.Index
000E7E98                            ; ---------------------------------------------------------------------------
000E7E98                            
000E7E98                            QuagmireMouth_Init1:                         
000E7E98 5428 0024                          addq.b  #2,obj.Action(a0)
000E7E9C 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
000E7EA4 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E7EAA 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
000E7EB0 117C 0005 0019                     move.b  #5,obj.Priority(a0)
000E7EB6 117C 0008 001A                     move.b  #8,obj.Frame(a0)
000E7EBC                            
000E7EBC                            QuagmireMouth_Speak1:   
000E7EBC 6100 0000                          bsr.w   _quagEyeAdjToHead
000E7EC0 43F9 0000 0000                     lea     AniSpr_QuagmireMouth,a1
000E7EC6 6100 0000                          bsr.w   _objectAnimate
000E7ECA 4EB9 0000 E750                     jsr     _objectDraw  
000E7ED0 4E75                               rts
000E7ED2                            
000E7ED2                            QuagmireMouth_Init2:   
000E7ED2 5228 001C                          addq.b  #1,obj.Anim(a0)
000E7ED6 5428 0024                          addq.b  #2,obj.Action(a0)
000E7EDA 5438 D064                          add.b   #2,(membushHead+obj.Action)
000E7EDE                            
000E7EDE                            QuagmireMouth_Speak2:
000E7EDE 6100 0000                          bsr.w   _quagEyeAdjToHead
000E7EE2 43F9 0000 0000                     lea     AniSpr_QuagmireMouth,a1
000E7EE8 6100 0000                          bsr.w   _objectAnimate
000E7EEC 4EB9 0000 E750                     jsr     _objectDraw  
000E7EF2 4E75                               rts        
000E7EF4                            
000E7EF4                            _quagEyeAdjToHead:
000E7EF4 43F8 D040                          lea     membushHead,a1
000E7EF8 3169 0008 0008                     move.w  obj.X(a1),obj.X(a0)
000E7EFE 3169 000C 000C                     move.w  obj.Y(a1),obj.Y(a0)
000E7F04 0668 000A 000C                     add.w   #10,obj.Y(a0)   
000E7F0A 4E75                               rts
000E7F0C                            
000E7F0C                            ; ---------------------------------------------------------------------------
000E7F0C                            AniSpr_QuagmireMouth:
000E7F0C                            .tbl
000E7F0C 0000                               dc.w quagvocal_imglennqua-.tbl
000E7F0E 0000                               dc.w quagvocal_beebush-.tbl
000E7F10                            
000E7F10                            quagvocal_imglennqua: 
000E7F10                            
000E7F10                                    ; playback speed delta (wait time)
000E7F10 04                                 dc.b   4
000E7F11                            
000E7F11                                    ; "...im glenn quagmire"
000E7F11 0808 0808 0806 0807 0506+          dc.b   8, 8, 8, 8, 8, 6, 8, 7, 5, 6, 8, 5, 6, 7, 8, 6, 5
000E7F22                            
000E7F22                                    ; "...and this is-"
000E7F22 0808 0808 0806 0706 0706+          dc.b   8, 8, 8, 8, 8, 6, 7, 6, 7, 6, 7
000E7F2D                            
000E7F2D                                    ; routine chg
000E7F2D FC                                 dc.b   $FC
000E7F2E                            
000E7F2E                                    even
000E7F2E                            
000E7F2E                            quagvocal_beebush:
000E7F2E                            
000E7F2E                                    ; playback speed delta (wait time)
000E7F2E 04                                 dc.b   4
000E7F2F                            
000E7F2F                                    ; "bee bush"
000E7F2F 0708 0806 0608 0805 0507+          dc.b   7, 8, 8, 6, 6, 8, 8, 5, 5, 7, 7, 8, 8, 8, 8
000E7F3E                            
000E7F3E                                    ; loop 8 forever
000E7F3E FE01                               dc.b   $FE, 1
000E7F40                                    even
000E7F40                            
000E7F40                            ; ---------------------------------------------------------------------------      
000E7F40                            ; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
000E7F40                            ; DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG 
000E7F40                            ; ---------------------------------------------------------------------------  
000E7F40                            
000E7F40                            BbushObj_Dbug:                          
000E7F40 4E75                               rts
000E7F42                            
000E7F42                            SprPat_Quagmire:
000E7F42                                    include "beebush/Objects/SPRPAT_QUAGMIRE.asm"
000E7F42                            Map_879c:
000E7F42 0000                       Map_879c_0: 	dc.w Map_879c_12-Map_879c
000E7F44 0000                       Map_879c_2: 	dc.w Map_879c_13-Map_879c
000E7F46 0000                       Map_879c_4: 	dc.w Map_879c_3C-Map_879c
000E7F48 0000                       Map_879c_6: 	dc.w Map_879c_56-Map_879c
000E7F4A 0000                       Map_879c_8: 	dc.w Map_879c_61-Map_879c
000E7F4C 0000                       Map_879c_A: 	dc.w Map_879c_6C-Map_879c
000E7F4E 0000                       Map_879c_C: 	dc.w Map_879c_72-Map_879c
000E7F50 0000                       Map_879c_E: 	dc.w Map_879c_7D-Map_879c
000E7F52 0000                       Map_879c_10: 	dc.w Map_879c_88-Map_879c
000E7F54 00                         Map_879c_12: 	dc.b $0
000E7F55 08                         Map_879c_13: 	dc.b $8
000E7F56 D20F 0000 E7               	dc.b $D2, $F, $0, $0, $E7
000E7F5B D20F 0010 07               	dc.b $D2, $F, $0, $10, $7
000E7F60 F20F 0020 D7               	dc.b $F2, $F, $0, $20, $D7
000E7F65 F20F 0030 F7               	dc.b $F2, $F, $0, $30, $F7
000E7F6A F207 0040 17               	dc.b $F2, $7, $0, $40, $17
000E7F6F 120E 0048 D7               	dc.b $12, $E, $0, $48, $D7
000E7F74 120E 0054 F7               	dc.b $12, $E, $0, $54, $F7
000E7F79 1205 0060 17               	dc.b $12, $5, $0, $60, $17
000E7F7E 05                         Map_879c_3C: 	dc.b $5
000E7F7F E70F 0064 E7               	dc.b $E7, $F, $0, $64, $E7
000E7F84 070F 0074 E7               	dc.b $7, $F, $0, $74, $E7
000E7F89 E70B 0084 07               	dc.b $E7, $B, $0, $84, $7
000E7F8E 070B 0090 07               	dc.b $7, $B, $0, $90, $7
000E7F93 D709 00DD EF               	dc.b $D7, $9, $0, $DD, $EF
000E7F98 02                         Map_879c_56: 	dc.b $2
000E7F99 F306 00A8 ED               	dc.b $F3, $6, $0, $A8, $ED
000E7F9E F306 00AE 01               	dc.b $F3, $6, $0, $AE, $1
000E7FA3 02                         Map_879c_61: 	dc.b $2
000E7FA4 F306 009C ED               	dc.b $F3, $6, $0, $9C, $ED
000E7FA9 F306 00A2 01               	dc.b $F3, $6, $0, $A2, $1
000E7FAE 01                         Map_879c_6C: 	dc.b $1
000E7FAF FD09 00B4 F2               	dc.b $FD, $9, $0, $B4, $F2
000E7FB4 02                         Map_879c_72: 	dc.b $2
000E7FB5 F70E 00BA F0               	dc.b $F7, $E, $0, $BA, $F0
000E7FBA EF00 00C6 08               	dc.b $EF, $0, $0, $C6, $8
000E7FBF 02                         Map_879c_7D: 	dc.b $2
000E7FC0 F306 00C7 00               	dc.b $F3, $6, $0, $C7, $0
000E7FC5 FB06 00CD F0               	dc.b $FB, $6, $0, $CD, $F0
000E7FCA 02                         Map_879c_88: 	dc.b $2
000E7FCB FC0D 00D3 EC               	dc.b $FC, $D, $0, $D3, $EC
000E7FD0 F404 00DB 04               	dc.b $F4, $4, $0, $DB, $4
000E7FD6 00                         	even
000E7FD6 00                         	even
000E7FD6 00                         	even
000E7FD6                                    include  "beebush/Objects/OBJ_PLAYER.asm"
000E7FD6                                   
000E7FD6 =00000030                  bbplay.WindowSz        equ     $30
000E7FD6 =00000031                  bbplay.WindowCnt       equ     $31
000E7FD6 =00000034                  bbplay.Xorg            equ     $34
000E7FD6 =00000036                  bbplay.Yorg            equ     $36
000E7FD6                            
000E7FD6                            BbushObj_Player:                          
000E7FD6 7000                               moveq   #0,d0
000E7FD8 1028 0024                          move.b  obj.Action(a0),d0
000E7FDC 323B 0000                          move.w  .Index(pc,d0.w),d1
000E7FE0 4EFB 1000                          jmp     .Index(pc,d1.w)
000E7FE4                            ; ---------------------------------------------------------------------------
000E7FE4                            .Index:                                
000E7FE4 0000                               dc.w BbushPlayer_InitMain-.Index
000E7FE6 0000                               dc.w BbushPlayer_Main-.Index
000E7FE8                            ; ---------------------------------------------------------------------------
000E7FE8                            
000E7FE8                            BbushPlayer_InitMain:                         
000E7FE8 5428 0024                          addq.b  #2,obj.Action(a0)
000E7FEC 117C 0012 0016                     move.b  #18,obj.YRad(a0)
000E7FF2 117C 0009 0017                     move.b  #9,obj.XRad(a0)
000E7FF8 217C 0000 0000 0004                move.l  #SprPat_BBushPlayer,obj.Map(a0)
000E8000 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E8006 117C 0000 0001                     move.b  #0,obj.Render(a0)
000E800C 317C 014A 0008                     move.w  #160+42+128,obj.X(a0)
000E8012 317C 00E4 000A                     move.w  #100+128,obj.YScr(a0)
000E8018 117C 0002 0019                     move.b  #2,obj.Priority(a0)
000E801E 117C 0003 001A                     move.b  #3,obj.Frame(a0)
000E8024 317C 9204 0030                     move.w  #$9204,bbplay.WindowSz(a0)
000E802A 6000                               bra.s   BbushPlayer_Main
000E802C                            
000E802C                            .strCams:
000E802C 2070 6C61 7920 6361 6D42+          dc.b    ' play camB camC camZ   dist                 ', -1
000E805A 00                                 even
000E805A                            
000E805A                            ; ---------------------------------------------------------------------------
000E805A                            
000E805A                            BbushPlayer_Main:                           
000E805A 1838 F604                          move.b  joypad.w,d4         ;SACBRLDU
000E805E 1A38 F605                          move.b  joypadPress.w,d5    
000E8062 6100 0000                          bsr.w   _bbplayNormalCtrl 
000E8066 4EF9 0000 E750                     jmp     _objectDraw   
000E806C                            
000E806C                            ; ---------------------------------------------------------------------------
000E806C                            ; Control window vertical location  (VDPREG $12)
000E806C                            ; ---------------------------------------------------------------------------
000E806C                            
000E806C                            _bbplayNormalCtrl:                                                 
000E806C 0804 0002                          btst    #2,d4
000E8070 6700                               beq.s   .NoLeft
000E8072 5278 F700                          addi.w  #1,cameraAPosX
000E8076 5278 F710                          addi.w  #1,cameraCPosX
000E807A 53B8 F608                          subi.l  #1,distance
000E807E 43F9 0000 0000                     lea     AniSpr_QuagmirePlayer,a1
000E8084 4EF9 0000 0000                     jmp    _objectAnimate
000E808A                            .NoLeft:                                             
000E808A 4E75                               rts
000E808C                            
000E808C                            AniSpr_QuagmirePlayer:
000E808C                            .tbl
000E808C 0000                               dc.w .qaugplaywalk-.tbl
000E808E                            
000E808E                            .qaugplaywalk: 
000E808E 08                                 dc.b   8
000E808F 0102 0304 0506 07FF                dc.b   1, 2, 3, 4, 5, 6, 7, $FF
000E8098 00                                 even 
000E8098                            
000E8098                            ; ---------------------------------------------------------------------------
000E8098                            
000E8098                            _bbplayPrintCams:
000E8098 4E75                               rts
000E809A                            
000E809A                            ; ---------------------------------------------------------------------------
000E809A                            
000E809A                            SprPat_BBushPlayer:
000E809A                                    include "beebush/Objects/SPRPAT_PLAYER.asm"
000E809A                            Map_ffc1:
000E809A 0000                       Map_ffc1_0: 	dc.w Map_ffc1_14-Map_ffc1
000E809C 0000                       Map_ffc1_2: 	dc.w Map_ffc1_15-Map_ffc1
000E809E 0000                       Map_ffc1_4: 	dc.w Map_ffc1_43-Map_ffc1
000E80A0 0000                       Map_ffc1_6: 	dc.w Map_ffc1_71-Map_ffc1
000E80A2 0000                       Map_ffc1_8: 	dc.w Map_ffc1_9F-Map_ffc1
000E80A4 0000                       Map_ffc1_A: 	dc.w Map_ffc1_CD-Map_ffc1
000E80A6 0000                       Map_ffc1_C: 	dc.w Map_ffc1_FB-Map_ffc1
000E80A8 0000                       Map_ffc1_E: 	dc.w Map_ffc1_129-Map_ffc1
000E80AA 0000                       Map_ffc1_10: 	dc.w Map_ffc1_157-Map_ffc1
000E80AC 0000                       Map_ffc1_12: 	dc.w Map_ffc1_15D-Map_ffc1
000E80AE 00                         Map_ffc1_14: 	dc.b $0
000E80AF 09                         Map_ffc1_15: 	dc.b $9
000E80B0 D10F 0103 EF               	dc.b $D1, $F, $1, $3, $EF
000E80B5 F309 0113 FB               	dc.b $F3, $9, $1, $13, $FB
000E80BA E40E 0119 0B               	dc.b $E4, $E, $1, $19, $B
000E80BF E40E 0919 DE               	dc.b $E4, $E, $9, $19, $DE
000E80C4 EE04 007E FC               	dc.b $EE, $4, $0, $7E, $FC
000E80C9 000A 0165 ED               	dc.b $0, $A, $1, $65, $ED
000E80CE 1806 016E ED               	dc.b $18, $6, $1, $6E, $ED
000E80D3 000E 0931 04               	dc.b $0, $E, $9, $31, $4
000E80D8 160A 093D 0C               	dc.b $16, $A, $9, $3D, $C
000E80DD 09                         Map_ffc1_43: 	dc.b $9
000E80DE D00F 00E3 F1               	dc.b $D0, $F, $0, $E3, $F1
000E80E3 F309 0113 FC               	dc.b $F3, $9, $1, $13, $FC
000E80E8 E40E 0119 0B               	dc.b $E4, $E, $1, $19, $B
000E80ED E40E 0919 DF               	dc.b $E4, $E, $9, $19, $DF
000E80F2 EE04 007E FD               	dc.b $EE, $4, $0, $7E, $FD
000E80F7 000A 0165 EE               	dc.b $0, $A, $1, $65, $EE
000E80FC 1806 016E EE               	dc.b $18, $6, $1, $6E, $EE
000E8101 000A 0956 04               	dc.b $0, $A, $9, $56, $4
000E8106 1806 095F 0C               	dc.b $18, $6, $9, $5F, $C
000E810B 09                         Map_ffc1_71: 	dc.b $9
000E810C D00F 00E3 F3               	dc.b $D0, $F, $0, $E3, $F3
000E8111 F309 0113 FC               	dc.b $F3, $9, $1, $13, $FC
000E8116 E40E 0119 0C               	dc.b $E4, $E, $1, $19, $C
000E811B E40E 0919 DF               	dc.b $E4, $E, $9, $19, $DF
000E8120 EE04 007E FE               	dc.b $EE, $4, $0, $7E, $FE
000E8125 FF0A 0156 EE               	dc.b $FF, $A, $1, $56, $EE
000E812A 1706 015F EE               	dc.b $17, $6, $1, $5F, $EE
000E812F 000A 0956 05               	dc.b $0, $A, $9, $56, $5
000E8134 1806 095F 0D               	dc.b $18, $6, $9, $5F, $D
000E8139 09                         Map_ffc1_9F: 	dc.b $9
000E813A D00F 00E3 F5               	dc.b $D0, $F, $0, $E3, $F5
000E813F F309 0113 FD               	dc.b $F3, $9, $1, $13, $FD
000E8144 E40E 0119 0D               	dc.b $E4, $E, $1, $19, $D
000E8149 E40E 0919 E0               	dc.b $E4, $E, $9, $19, $E0
000E814E EE04 007E FF               	dc.b $EE, $4, $0, $7E, $FF
000E8153 FF0A 0174 EF               	dc.b $FF, $A, $1, $74, $EF
000E8158 1706 017D EF               	dc.b $17, $6, $1, $7D, $EF
000E815D 000A 0956 06               	dc.b $0, $A, $9, $56, $6
000E8162 1806 095F 0E               	dc.b $18, $6, $9, $5F, $E
000E8167 09                         Map_ffc1_CD: 	dc.b $9
000E8168 D10F 00F3 F7               	dc.b $D1, $F, $0, $F3, $F7
000E816D F309 0113 FE               	dc.b $F3, $9, $1, $13, $FE
000E8172 E40E 0119 0E               	dc.b $E4, $E, $1, $19, $E
000E8177 E40E 0919 E1               	dc.b $E4, $E, $9, $19, $E1
000E817C EE04 007E 00               	dc.b $EE, $4, $0, $7E, $0
000E8181 FF0E 0131 E8               	dc.b $FF, $E, $1, $31, $E8
000E8186 1706 013D E8               	dc.b $17, $6, $1, $3D, $E8
000E818B 000A 0956 07               	dc.b $0, $A, $9, $56, $7
000E8190 1806 095F 0F               	dc.b $18, $6, $9, $5F, $F
000E8195 09                         Map_ffc1_FB: 	dc.b $9
000E8196 D10F 00E3 F3               	dc.b $D1, $F, $0, $E3, $F3
000E819B F309 0113 FA               	dc.b $F3, $9, $1, $13, $FA
000E81A0 E40E 0119 0A               	dc.b $E4, $E, $1, $19, $A
000E81A5 E40E 0919 DF               	dc.b $E4, $E, $9, $19, $DF
000E81AA EE04 007E FB               	dc.b $EE, $4, $0, $7E, $FB
000E81AF 000A 0156 EC               	dc.b $0, $A, $1, $56, $EC
000E81B4 1806 015F EC               	dc.b $18, $6, $1, $5F, $EC
000E81B9 100B 0943 0B               	dc.b $10, $B, $9, $43, $B
000E81BE 0009 094F 04               	dc.b $0, $9, $9, $4F, $4
000E81C3 09                         Map_ffc1_129: 	dc.b $9
000E81C4 D00F 00E3 F2               	dc.b $D0, $F, $0, $E3, $F2
000E81C9 F309 0113 FA               	dc.b $F3, $9, $1, $13, $FA
000E81CE E40E 0119 0A               	dc.b $E4, $E, $1, $19, $A
000E81D3 E40E 0919 DE               	dc.b $E4, $E, $9, $19, $DE
000E81D8 EE04 007E FD               	dc.b $EE, $4, $0, $7E, $FD
000E81DD 000A 0165 EC               	dc.b $0, $A, $1, $65, $EC
000E81E2 1806 016E EC               	dc.b $18, $6, $1, $6E, $EC
000E81E7 000A 0974 04               	dc.b $0, $A, $9, $74, $4
000E81EC 1806 097D 0C               	dc.b $18, $6, $9, $7D, $C
000E81F1 01                         Map_ffc1_157: 	dc.b $1
000E81F2 F00F 0183 F0               	dc.b $F0, $F, $1, $83, $F0
000E81F7 01                         Map_ffc1_15D: 	dc.b $1
000E81F8 F00F 0193 F0               	dc.b $F0, $F, $1, $93, $F0
000E81FE 00                         	even
000E81FE 00                         	even
000E81FE 00                         	even
000E81FE                            
000E81FE                            ; ---------------------------------------------------------------------------
000E81FE                            ; Animate an object based on an animation script
000E81FE                            ; !!!TODO: document script
000E81FE                            ; ---------------------------------------------------------------------------
000E81FE                            
000E81FE                            _objectAnimate:                         
000E81FE 7000                               moveq   #0,d0
000E8200 1028 001C                          move.b  obj.Anim(a0),d0
000E8204 B028 001D                          cmp.b   obj.LastAnim(a0),d0
000E8208 6700                               beq.s   .DoAnim
000E820A 1140 001D                          move.b  d0,obj.LastAnim(a0)
000E820E 117C 0000 001B                     move.b  #0,obj.AnimFrame(a0)
000E8214 117C 0000 001E                     move.b  #0,obj.FrameTimer(a0)
000E821A                            
000E821A                            .DoAnim:                               
000E821A D040                               add.w   d0,d0
000E821C D2F1 0000                          adda.w  (a1,d0.w),a1
000E8220 5328 001E                          subq.b  #1,obj.FrameTimer(a0)
000E8224 6A00                               bpl.s   .Exit
000E8226 1151 001E                          move.b  (a1),obj.FrameTimer(a0)
000E822A 7200                               moveq   #0,d1
000E822C 1228 001B                          move.b  obj.AnimFrame(a0),d1
000E8230 1031 1001                          move.b  1(a1,d1.w),d0
000E8234 6B00                               bmi.s   .HandleFlags
000E8236                            
000E8236                            .Finish:                               
000E8236 1200                               move.b  d0,d1
000E8238 0200 001F                          andi.b  #$1F,d0
000E823C 1140 001A                          move.b  d0,obj.Frame(a0)
000E8240 1028 0022                          move.b  obj.Status(a0),d0
000E8244 0200 0003                          andi.b  #3,d0
000E8248 0228 00FC 0001                     andi.b  #$FC,obj.Render(a0)
000E824E EA09                               lsr.b   #5,d1
000E8250 B101                               eor.b   d0,d1
000E8252 8328 0001                          or.b    d1,obj.Render(a0)
000E8256 5228 001B                          addq.b  #1,obj.AnimFrame(a0)
000E825A                            
000E825A                            .Exit:                                 
000E825A 4E75                               rts
000E825C                            
000E825C                            .HandleFlags:                          
000E825C 5200                               addq.b  #1,d0
000E825E 6600                               bne.s   .NotLoop
000E8260 117C 0000 001B                     move.b  #0,obj.AnimFrame(a0)
000E8266 1029 0001                          move.b  1(a1),d0
000E826A 60CA                               bra.s   .Finish
000E826C                            
000E826C                            .NotLoop:                              
000E826C 5200                               addq.b  #1,d0
000E826E 6600                               bne.s   .NotBack
000E8270 1031 1002                          move.b  2(a1,d1.w),d0
000E8274 9128 001B                          sub.b   d0,obj.AnimFrame(a0)
000E8278 9200                               sub.b   d0,d1
000E827A 1031 1001                          move.b  1(a1,d1.w),d0
000E827E 60B6                               bra.s   .Finish
000E8280                            
000E8280                            .NotBack:                              
000E8280 5200                               addq.b  #1,d0
000E8282 6600                               bne.s   .NotChgAni
000E8284 1171 1002 001C                     move.b  2(a1,d1.w),obj.Anim(a0)
000E828A                            
000E828A                            .NotChgAni:                            
000E828A 5200                               addq.b  #1,d0
000E828C 6600                               bne.s   .NotRoutine
000E828E 5428 0024                          addq.b  #2,obj.Action(a0)
000E8292                            
000E8292                            .NotRoutine:                           
000E8292 5200                               addq.b  #1,d0
000E8294 6600                               bne.s   .NotReset
000E8296 117C 0000 001B                     move.b  #0,obj.AnimFrame(a0)
000E829C 4228 0025                          clr.b   obj.SubAction(a0)
000E82A0                            
000E82A0                            .NotReset:                             
000E82A0 4E75                               rts
000E82A0 4E75                               rts
000E82A2                            
000E82A2                            ; ---------------------------------------------------------------------------
000E82A2                            
000E82A2                            _beebushDbugLoad:
000E82A2 4E75                               rts
000E82A4                            ; ---------------------------------------------------------------------------   
000E82A4                            ; VBlank code relocation from main file (called from Jmptos)
000E82A4                            ; ---------------------------------------------------------------------------
000E82A4                            
000E82A4                            VBLANK_BEEBUSH:                               
000E82A4 4EB8 1ABE                          jsr   ReadJoypads
000E82A8                            
000E82A8 33FC 0100 00A1 1100                move.w  #$100,Z80BUS
000E82B0                            .WaitZ80:                              
000E82B0 0839 0000 00A1 1100                btst    #0,Z80BUS
000E82B8 66F6                               bne.s   .WaitZ80
000E82BA                            
000E82BA 33FC 8B00 00C0 0004                move.w  #$8B00+%0000,VDPCTRL
000E8314 23F8 F61A 00C0 0000                move.l  mainAPosX.w,VDPDATA
000E831C                            
000E831C 33FC 0000 00A1 1100                move.w  #0,Z80BUS
000E8324 4E75                               rts
000E8326                            
000E8326                            ; ---------------------------------------------------------------------------
000E8326                            
000E8326                            VBLANK_BEEBUSHSCR:                               
000E8326 4EB8 1ABE                          jsr  ReadJoypads
000E832A                            
000E832A 33FC 0100 00A1 1100                move.w  #$100,Z80BUS
000E8332                            .WaitZ80:                              
000E8332 0839 0000 00A1 1100                btst    #0,Z80BUS
000E833A 66F6                               bne.s   .WaitZ80
000E833C                            
000E833C 33FC 8B03 00C0 0004                move.w  #$8B00+%0011,VDPCTRL
000E83B0                            
000E83B0 33FC 0000 00A1 1100                move.w  #0,Z80BUS
000E83B8 4E75                               rts
000E83B8 4E75                               rts
000E83BA                            ; end of 'ROM'
000E83BA                            EndOfRom:
000E83BA                            
000E83BA                            
