00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            		include "MapMacros.asm"
00000000 =00000001                  SonicMappingsVer = 1
00000000 =00000001                  SonicDplcVer = 1
00000000                            
00000000                            ; macro to declare a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTable macro
00000000                            ;@current_mappings_table = *
00000000                            ;	endm
00000000                            
00000000 =00000005                  MappingSize		= 5
00000000 =00000001                  MappingHeaderSize	= 1
00000000                            
00000000                            ; macro to declare an entry in a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTableEntry macro ptr
00000000                            ;	dc.ATTRIBUTE ptr-.current_mappings_table
00000000                            ;	endm
00000000                            
00000000                            ;spriteHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicMappingsVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	elseif SonicMappingsVer=4
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / MappingSize)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            spritePiece macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(((tile)>>1)|((tile)&$8000))
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            spritePiece2P macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri,tile2,xflip2,yflip2,pal2,pri2
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri2&1)<<15)|((pal2&3)<<13)|((yflip2&1)<<12)|((xflip2&1)<<11))+(tile2)
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ;dplcHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicDplcVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	elseif SonicDplcVer=3
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / 2)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            dplcEntry macro tiles,offset
00000000                            	if SonicDplcVer=3
00000000                            	dc.w	((offset&$FFF)<<4)|((tiles-1)&$F)
00000000                            	elseif SonicDplcVer=4
00000000                            	dc.w	(((tiles-1)&$F)<<12)|((offset&$FFF)<<4)
00000000                            	else
00000000                            	dc.w	(((tiles-1)&$F)<<12)|(offset&$FFF)
00000000                            	endif
00000000                            	endm
00000000                            	endm
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow1size+8
00000000                            lswifi: equ lsrow1size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            ; options menu
00000000                            optamm: equ ((OMTEnd-OptionMenuText)/16)-1
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l PalToCRAM,	ErrorTrap, vBlankRoutine, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320                            ;		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000320                            ;		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000320                            ;		move.l	(a1),d0
00000320                            ;		moveq	#0,d1
00000320                            ;
00000320                            ;loc_32C:
00000320                            ;		add.w	(a0)+,d1
00000320                            ;		cmp.l	a0,d0
00000320                            ;		bcc.s	loc_32C
00000320                            ;		movea.l	#Checksum,a1	; read the checksum
00000320                            ;		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
00000320                            ;		bne.w	CheckSumError	; if they don't match, branch
00000320 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000324 7E00                       		moveq	#0,d7
00000326 3C3C 007F                  		move.w	#$7F,d6
0000032A                            
0000032A                            loc_348:
0000032A 2CC7                       		move.l	d7,(a6)+
0000032C 51CE FFFC                  		dbf	d6,loc_348
00000330 1039 00A1 0001             		move.b	($A10001).l,d0
00000336 0200 00C0                  		andi.b	#$C0,d0
0000033A 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000033E 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000346                            
00000346                            GameInit:
00000346 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000034C 7E00                       		moveq	#0,d7
0000034E 3C3C 3F7F                  		move.w	#$3F7F,d6
00000352                            
00000352                            GameClrRAM:
00000352 2CC7                       		move.l	d7,(a6)+
00000354 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000358                            
00000358 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
0000035E 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
00000366                            
00000366 6100 0000                  		bsr.w	VDPSetupGame
0000036A 6100 0000                  		bsr.w	SoundDriverLoad
0000036E 6100 0000                  		bsr.w	JoypadInit
00000372 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000378                            
00000378 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
0000037E                            
0000037E                            MainGameLoop:
0000037E 707E                       		moveq	#$7E,d0
00000380 C038 F600                  		and.b	($FFFFF600).w,d0 ; load	Game Mode
00000384 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000388 60F4                       		bra.s	MainGameLoop
0000038A                            ; ===========================================================================
0000038A                            ; ---------------------------------------------------------------------------
0000038A                            ; Main game mode array
0000038A                            ; ---------------------------------------------------------------------------
0000038A                            
0000038A                            GameModeArray:
0000038A 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000038E                            ; ===========================================================================
0000038E 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
00000392                            ; ===========================================================================
00000392 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000396                            ; ===========================================================================
00000396 6000 0000                  		bra.w	Level	; Normal Level ($0C)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	jmpto_Minecraft	; Minecraft ($20)
000003AE                            ; ===========================================================================	
000003AE 6000 0000                  		bra.w	jmpto_BeeBush   ; BeeBush ($24)	
000003B2                            ; ===========================================================================
000003B2                            ; uuuuuuuuuuuuuuuuuuuuuuuuuuuuu
000003B2                            
000003B2                            jmpto_Minecraft:
000003B2 4EF9 0000 0000             		jmp     Minecraft
000003B8                            
000003B8                            jmpto_BeeBush:
000003B8 4EF9 0000 0000             		jmp     GM_BEEBUSH
000003BE                            
000003BE                            
000003BE                            CheckSumError:
000003BE 6100 0000                  		bsr.w	VDPSetupGame
000003C2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003CC 7E3F                       		moveq	#$3F,d7
000003CE                            
000003CE                            CheckSum_Red:
000003CE 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D6 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003DA                            
000003DA                            CheckSum_Loop:
000003DA 60FE                       		bra.s	CheckSum_Loop
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            BusError:
000003DC 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003E2 6000                       		bra.s	loc_43A
000003E4                            ; ===========================================================================
000003E4                            
000003E4                            AddressError:
000003E4 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003EA 6000                       		bra.s	loc_43A
000003EC                            ; ===========================================================================
000003EC                            
000003EC                            IllegalInstr:
000003EC 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003F2 54AF 0002                  		addq.l	#2,2(sp)
000003F6 6000                       		bra.s	loc_462
000003F8                            ; ===========================================================================
000003F8                            
000003F8                            ZeroDivide:
000003F8 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003FE 6000                       		bra.s	loc_462
00000400                            ; ===========================================================================
00000400                            
00000400                            ChkInstr:
00000400 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000406 6000                       		bra.s	loc_462
00000408                            ; ===========================================================================
00000408                            
00000408                            TrapvInstr:
00000408 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000040E 6000                       		bra.s	loc_462
00000410                            ; ===========================================================================
00000410                            
00000410                            PrivilegeViol:
00000410 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000416 6000                       		bra.s	loc_462
00000418                            ; ===========================================================================
00000418                            
00000418                            Trace:
00000418 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000041E 6000                       		bra.s	loc_462
00000420                            ; ===========================================================================
00000420                            
00000420                            Line1010Emu:
00000420 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000426 54AF 0002                  		addq.l	#2,2(sp)
0000042A 6000                       		bra.s	loc_462
0000042C                            ; ===========================================================================
0000042C                            
0000042C                            Line1111Emu:
0000042C 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000432 54AF 0002                  		addq.l	#2,2(sp)
00000436 6000                       		bra.s	loc_462
00000438                            ; ===========================================================================
00000438                            
00000438                            ErrorExcept:
00000438 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000043E 6000                       		bra.s	loc_462
00000440                            ; ===========================================================================
00000440                            
00000440                            loc_43A:
00000440 46FC 2700                  		move	#$2700,sr
00000444 544F                       		addq.w	#2,sp
00000446 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
0000044A 544F                       		addq.w	#2,sp
0000044C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000452 6100 0000                  		bsr.w	ShowErrorMsg
00000456 202F 0002                  		move.l	2(sp),d0
0000045A 6100 0000                  		bsr.w	sub_5BA
0000045E 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000462 6100 0000                  		bsr.w	sub_5BA
00000466 6000                       		bra.s	loc_478
00000468                            ; ===========================================================================
00000468                            
00000468                            loc_462:
00000468 46FC 2700                  		move	#$2700,sr
0000046C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000472 6100 0000                  		bsr.w	ShowErrorMsg
00000476 202F 0002                  		move.l	2(sp),d0
0000047A 6100 0000                  		bsr.w	sub_5BA
0000047E                            
0000047E                            loc_478:
0000047E 6100 0000                  		bsr.w	ErrorWaitForC
00000482 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000488 46FC 2300                  		move	#$2300,sr
0000048C 4E73                       		rte	
0000048E                            
0000048E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000048E                            
0000048E                            
0000048E                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000048E 4DF9 00C0 0000             		lea	($C00000).l,a6
00000494 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000049E 41F9 0000 0000             		lea	(Art_Text).l,a0
000004A4 323C 027F                  		move.w	#$27F,d1
000004A8                            
000004A8                            Error_LoadGfx:
000004A8 3C98                       		move.w	(a0)+,(a6)
000004AA 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004AE 7000                       		moveq	#0,d0		; clear	d0
000004B0 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004B4 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B8 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004BC 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C6 7212                       		moveq	#$12,d1		; number of characters
000004C8                            
000004C8                            Error_LoopChars:
000004C8 7000                       		moveq	#0,d0
000004CA 1018                       		move.b	(a0)+,d0
000004CC 0640 0790                  		addi.w	#$790,d0
000004D0 3C80                       		move.w	d0,(a6)
000004D2 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D6 4E75                       		rts	
000004D8                            ; End of function ShowErrorMsg
000004D8                            
000004D8                            ; ===========================================================================
000004D8 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004DC 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004E0 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004E4 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E8 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004EC 0000                       		dc.w asc_5A6-ErrorText
000004EE 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000501 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000514 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000527 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
0000053A 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000054D 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
00000560 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000573 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000586 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000599 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005AC 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005C0 00                         		even
000005C0                            
000005C0                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005C0                            
000005C0                            
000005C0                            sub_5BA:				; XREF: loc_43A; loc_462
000005C0 3CBC 07CA                  		move.w	#$7CA,(a6)
000005C4 7407                       		moveq	#7,d2
000005C6                            
000005C6                            loc_5C0:
000005C6 E998                       		rol.l	#4,d0
000005C8 6100                       		bsr.s	sub_5CA
000005CA 51CA FFFA                  		dbf	d2,loc_5C0
000005CE 4E75                       		rts	
000005D0                            ; End of function sub_5BA
000005D0                            
000005D0                            
000005D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005D0                            
000005D0                            
000005D0                            sub_5CA:				; XREF: sub_5BA
000005D0 3200                       		move.w	d0,d1
000005D2 0241 000F                  		andi.w	#$F,d1
000005D6 0C41 000A                  		cmpi.w	#$A,d1
000005DA 6500                       		bcs.s	loc_5D8
000005DC 5E41                       		addq.w	#7,d1
000005DE                            
000005DE                            loc_5D8:
000005DE 0641 07C0                  		addi.w	#$7C0,d1
000005E2 3C81                       		move.w	d1,(a6)
000005E4 4E75                       		rts	
000005E6                            ; End of function sub_5CA
000005E6                            
000005E6                            
000005E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E6                            
000005E6                            
000005E6                            ErrorWaitForC:				; XREF: loc_478
000005E6 6100 0000                  		bsr.w	ReadJoypads
000005EA 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005F0 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005F4 4E75                       		rts	
000005F6                            ; End of function ErrorWaitForC
000005F6                            
000005F6                            ; ===========================================================================
000005F6                            
000005F6                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000B16                            Art_Text_end:		even
00000B16                            
00000B16                            ; ===========================================================================
00000B16                            ;VBlank
00000B16                            loc_B10:				; XREF: Vectors
00000B16 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000B1A 4A38 F62A                  		tst.b	($FFFFF62A).w
00000B1E 6700                       		beq.s	loc_B88
00000B20 3039 00C0 0004             		move.w	($C00004).l,d0
00000B26 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000B30 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000B38                            ;		btst	#6,($FFFFFFF8).w
00000B38                            ;		beq.s	loc_B42
00000B38                            ;		move.w	#$700,d0
00000B38                            ;
00000B38                            ;loc_B3E:
00000B38                            ;		dbf	d0,loc_B3E
00000B38                            
00000B38                            ;loc_B42:
00000B38 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000B3C 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000B42 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B48 0240 003E                  		andi.w	#$3E,d0
00000B4C 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000B50 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000B54                            
00000B54                            loc_B5E:				; XREF: loc_B88
00000B54 4EB9 0000 0000             		jsr	sub_71B4C
00000B5A                            
00000B5A                            loc_B64:				; XREF: loc_D50
00000B5A 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B5E 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B62 4E73                       		rte	
00000B64                            ; ===========================================================================
00000B64                            ; THIS SUCKS
00000B64 =0000001A                  VBLNO_BEEBUSH        EQU         13*2
00000B64 =0000001C                  VBLNO_BEEBUSHSCR     EQU         14*2
00000B64                            
00000B64 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B68 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B6C 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B70 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B74 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B78 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B7C 0000                       		dc.w loc_E72-off_B6E
00000B7E 0000                       		dc.w jmpto_VBLANK_BEEBUSH-off_B6E
00000B80 0000                       		dc.w jmpto_VBLANK_BEEBUSHSCR-off_B6E
00000B82                            
00000B82                            ; ===========================================================================
00000B82                            
00000B82                            loc_B88:				; XREF: loc_B10; off_B6E
00000B82 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B88 6700                       		beq.s	loc_B9A
00000B8A 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B90 6600 FFC2                  		bne.w	loc_B5E
00000B94                            
00000B94                            loc_B9A:
00000B94 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B9A 6600 FFB8                  		bne.w	loc_B5E		; if not, branch
00000B9E 3039 00C0 0004             		move.w	($C00004).l,d0
00000BA4                            ;		btst	#6,($FFFFFFF8).w
00000BA4                            ;		beq.s	loc_BBA
00000BA4                            ;		move.w	#$700,d0
00000BA4                            ;
00000BA4                            ;loc_BB6:
00000BA4                            ;		dbf	d0,loc_BB6
00000BA4                            ;
00000BA4                            ;loc_BBA:
00000BA4 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000BAA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000BB2                            
00000BB2                            loc_BC8:
00000BB2 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000BBA 66F6                       		bne.s	loc_BC8
00000BBC 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BC0 6600                       		bne.s	loc_BFE
00000BC2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BC8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BCE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BD4 3ABC 977F                  		move.w	#$977F,(a5)
00000BD8 3ABC C000                  		move.w	#$C000,(a5)
00000BDC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BE2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BE6 6000                       		bra.s	loc_C22
00000BE8                            ; ===========================================================================
00000BE8                            
00000BE8                            loc_BFE:				; XREF: loc_BC8
00000BE8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BEE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BF4 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000BFA 3ABC 977F                  		move.w	#$977F,(a5)
00000BFE 3ABC C000                  		move.w	#$C000,(a5)
00000C02 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C08 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C0C                            
00000C0C                            loc_C22:				; XREF: loc_BC8
00000C0C 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C10 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000C18 6000 FF3A                  		bra.w	loc_B5E
00000C1C                            ; ===========================================================================
00000C1C                            
00000C1C                            loc_C32:				; XREF: off_B6E
00000C1C 6100 0000                  		bsr.w	sub_106E
00000C20                            
00000C20                            loc_C36:				; XREF: off_B6E
00000C20 4A78 F614                  		tst.w	($FFFFF614).w
00000C24 6700 0000                  		beq.w	locret_C42
00000C28 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C2C                            
00000C2C                            locret_C42:
00000C2C 4E75                       		rts	
00000C2E                            ; ===========================================================================
00000C2E                            
00000C2E                            loc_C44:				; XREF: off_B6E
00000C2E 6100 0000                  		bsr.w	sub_106E
00000C32 6100 0000                  		bsr.w	sub_6886
00000C36 6100 0000                  		bsr.w	sub_1642
00000C3A 4A78 F614                  		tst.w	($FFFFF614).w
00000C3E 6700 0000                  		beq.w	locret_C5C
00000C42 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C46                            
00000C46                            locret_C5C:
00000C46 4E75                       		rts	
00000C48                            
00000C48                            ; ---------------------------------------------------------------------------
00000C48                            ; SOOOO GROSS!!!
00000C48                            ; ---------------------------------------------------------------------------
00000C48                            jmpto_VBLANK_BEEBUSH:
00000C48 4EF9 0000 0000             	jmp VBLANK_BEEBUSH
00000C4E                            
00000C4E                            jmpto_VBLANK_BEEBUSHSCR:
00000C4E 4EF9 0000 0000             	jmp VBLANK_BEEBUSHSCR
00000C54                            
00000C54                            ; ---------------------------------------------------------------------------
00000C54                            
00000C54                            ; ===========================================================================
00000C54                            
00000C54                            loc_C5E:				; XREF: off_B6E
00000C54 6100 0000                  		bsr.w	sub_106E
00000C58 4E75                       		rts	
00000C5A                            ; ===========================================================================
00000C5A                            
00000C5A                            loc_C64:				; XREF: off_B6E
00000C5A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C60 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C64                            
00000C64                            loc_C6E:				; XREF: off_B6E
00000C64 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C6C                            
00000C6C                            loc_C76:
00000C6C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C74 66F6                       		bne.s	loc_C76		; if not, branch
00000C76 6100 0000                  		bsr.w	ReadJoypads
00000C7A 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C7E 6600                       		bne.s	loc_CB0
00000C80 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C86 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C8C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C92 3ABC 977F                  		move.w	#$977F,(a5)
00000C96 3ABC C000                  		move.w	#$C000,(a5)
00000C9A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CA0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CA4 6000                       		bra.s	loc_CD4
00000CA6                            ; ===========================================================================
00000CA6                            
00000CA6                            loc_CB0:				; XREF: loc_C76
00000CA6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CAC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CB2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000CB8 3ABC 977F                  		move.w	#$977F,(a5)
00000CBC 3ABC C000                  		move.w	#$C000,(a5)
00000CC0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CC6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CCA                            
00000CCA                            loc_CD4:				; XREF: loc_C76
00000CCA 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CCE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CD4 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CDA 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CE0 3ABC 977F                  		move.w	#$977F,(a5)
00000CE4 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CE8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CEE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CF2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CF8 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CFE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D04 3ABC 977F                  		move.w	#$977F,(a5)
00000D08 3ABC 7800                  		move.w	#$7800,(a5)
00000D0C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D12 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D16 4A38 F767                  		tst.b	($FFFFF767).w
00000D1A 6700                       		beq.s	loc_D50
00000D1C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D22 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000D28 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000D2E 3ABC 977F                  		move.w	#$977F,(a5)
00000D32 3ABC 7000                  		move.w	#$7000,(a5)
00000D36 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D3C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D40 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000D46                            
00000D46                            loc_D50:
00000D46 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000D4E 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D54 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D5A 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D60 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D66 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D6C 6400                       		bcc.s	Demo_Time
00000D6E 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D74 588F                       		addq.l	#4,sp
00000D76 6000 FDE2                  		bra.w	loc_B64
00000D7A                            
00000D7A                            ; ---------------------------------------------------------------------------
00000D7A                            ; Subroutine to	run a demo for an amount of time
00000D7A                            ; ---------------------------------------------------------------------------
00000D7A                            
00000D7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D7A                            
00000D7A                            
00000D7A                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000D7A 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D7E 4EB9 0000 0000             		jsr	AniArt_Load
00000D84 4EB9 0000 0000             		jsr	HudUpdate
00000D8A 6100 0000                  		bsr.w	sub_165E
00000D8E 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D92 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000D96 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000D9A                            
00000D9A                            Demo_TimeEnd:
00000D9A 4E75                       		rts	
00000D9C                            ; End of function Demo_Time
00000D9C                            
00000D9C                            ; ===========================================================================
00000D9C                            
00000D9C                            loc_DA6:				; XREF: off_B6E
00000D9C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000DA4                            
00000DA4                            loc_DAE:
00000DA4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000DAC 66F6                       		bne.s	loc_DAE		; if not, branch
00000DAE 6100 0000                  		bsr.w	ReadJoypads
00000DB2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DB8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DBE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DC4 3ABC 977F                  		move.w	#$977F,(a5)
00000DC8 3ABC C000                  		move.w	#$C000,(a5)
00000DCC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DD2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DD6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DDC 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DE2 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DE8 3ABC 977F                  		move.w	#$977F,(a5)
00000DEC 3ABC 7800                  		move.w	#$7800,(a5)
00000DF0 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000DF6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DFA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E00 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E06 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E0C 3ABC 977F                  		move.w	#$977F,(a5)
00000E10 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E14 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E1A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E1E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E26 6100 0000                  		bsr.w	PalCycle_SS
00000E2A 4A38 F767                  		tst.b	($FFFFF767).w
00000E2E 6700                       		beq.s	loc_E64
00000E30 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E36 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000E3C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000E42 3ABC 977F                  		move.w	#$977F,(a5)
00000E46 3ABC 7000                  		move.w	#$7000,(a5)
00000E4A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E50 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E54 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000E5A                            
00000E5A                            loc_E64:
00000E5A 4A78 F614                  		tst.w	($FFFFF614).w
00000E5E 6700 0000                  		beq.w	locret_E70
00000E62 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E66                            
00000E66                            locret_E70:
00000E66 4E75                       		rts	
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_E72:				; XREF: off_B6E
00000E68 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E70                            
00000E70                            loc_E7A:
00000E70 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E78 66F6                       		bne.s	loc_E7A		; if not, branch
00000E7A 6100 0000                  		bsr.w	ReadJoypads
00000E7E 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E82 6600                       		bne.s	loc_EB4
00000E84 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E8A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E90 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E96 3ABC 977F                  		move.w	#$977F,(a5)
00000E9A 3ABC C000                  		move.w	#$C000,(a5)
00000E9E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EA4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EA8 6000                       		bra.s	loc_ED8
00000EAA                            ; ===========================================================================
00000EAA                            
00000EAA                            loc_EB4:				; XREF: loc_E7A
00000EAA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EB6 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EBC 3ABC 977F                  		move.w	#$977F,(a5)
00000EC0 3ABC C000                  		move.w	#$C000,(a5)
00000EC4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ECE                            
00000ECE                            loc_ED8:				; XREF: loc_E7A
00000ECE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000ED2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED8 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000EDE 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EE4                            
00000EE4                            loc_EEE:
00000EE4 3ABC 977F                  		move.w	#$977F,(a5)
00000EE8 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EEC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EF2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EFC 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F02 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F08 3ABC 977F                  		move.w	#$977F,(a5)
00000F0C 3ABC 7800                  		move.w	#$7800,(a5)
00000F10 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F16 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F1A 4A38 F767                  		tst.b	($FFFFF767).w
00000F1E 6700                       		beq.s	loc_F54
00000F20 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F26 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F2C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F32 3ABC 977F                  		move.w	#$977F,(a5)
00000F36 3ABC 7000                  		move.w	#$7000,(a5)
00000F3A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F40 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F44 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F4A                            
00000F4A                            loc_F54:
00000F4A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F52 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F58 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F5E 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F64 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F6A 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F6E 4EB9 0000 0000             		jsr	AniArt_Load
00000F74 4EB9 0000 0000             		jsr	HudUpdate
00000F7A 6100 0000                  		bsr.w	sub_1642
00000F7E 4E75                       		rts	
00000F80                            ; ===========================================================================
00000F80                            
00000F80                            loc_F8A:				; XREF: off_B6E
00000F80 6100 0000                  		bsr.w	sub_106E
00000F84 5238 F628                  		addq.b	#1,($FFFFF628).w
00000F88 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000F8E 4E75                       		rts	
00000F90                            ; ===========================================================================
00000F90                            
00000F90                            loc_F9A:				; XREF: off_B6E
00000F90 6100 0000                  		bsr.w	sub_106E
00000F94 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000F98 6000 0000                  		bra.w	sub_1642
00000F9C                            ; ===========================================================================
00000F9C                            
00000F9C                            loc_FA6:				; XREF: off_B6E
00000F9C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FA4                            
00000FA4                            loc_FAE:
00000FA4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FAC 66F6                       		bne.s	loc_FAE		; if not, branch
00000FAE 6100 0000                  		bsr.w	ReadJoypads
00000FB2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FB8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FBE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FC4 3ABC 977F                  		move.w	#$977F,(a5)
00000FC8 3ABC C000                  		move.w	#$C000,(a5)
00000FCC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FD2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FD6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FDC 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FE2 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FE8 3ABC 977F                  		move.w	#$977F,(a5)
00000FEC 3ABC 7800                  		move.w	#$7800,(a5)
00000FF0 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000FF6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FFA 4BF9 00C0 0004             		lea	($C00004).l,a5
00001000 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001006 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000100C 3ABC 977F                  		move.w	#$977F,(a5)
00001010 3ABC 7C00                  		move.w	#$7C00,(a5)
00001014 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000101A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000101E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001026 4A38 F767                  		tst.b	($FFFFF767).w
0000102A 6700                       		beq.s	loc_1060
0000102C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001032 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001038 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000103E 3ABC 977F                  		move.w	#$977F,(a5)
00001042 3ABC 7000                  		move.w	#$7000,(a5)
00001046 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000104C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001050 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001056                            
00001056                            loc_1060:
00001056 4A78 F614                  		tst.w	($FFFFF614).w
0000105A 6700 0000                  		beq.w	locret_106C
0000105E 5378 F614                  		subq.w	#1,($FFFFF614).w
00001062                            
00001062                            locret_106C:
00001062 4E75                       		rts	
00001064                            
00001064                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001064                            
00001064                            
00001064                            sub_106E:				; XREF: loc_C32; et al
00001064 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000106C                            
0000106C                            loc_1076:
0000106C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00001074 66F6                       		bne.s	loc_1076	; if not, branch
00001076 6100 0000                  		bsr.w	ReadJoypads
0000107A 4A38 F64E                  		tst.b	($FFFFF64E).w
0000107E 6600                       		bne.s	loc_10B0
00001080 4BF9 00C0 0004             		lea	($C00004).l,a5
00001086 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000108C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001092 3ABC 977F                  		move.w	#$977F,(a5)
00001096 3ABC C000                  		move.w	#$C000,(a5)
0000109A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010A0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010A4 6000                       		bra.s	loc_10D4
000010A6                            ; ===========================================================================
000010A6                            
000010A6                            loc_10B0:				; XREF: sub_106E
000010A6 4BF9 00C0 0004             		lea	($C00004).l,a5
000010AC 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010B2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010B8 3ABC 977F                  		move.w	#$977F,(a5)
000010BC 3ABC C000                  		move.w	#$C000,(a5)
000010C0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010C6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010CA                            
000010CA                            loc_10D4:				; XREF: sub_106E
000010CA 4BF9 00C0 0004             		lea	($C00004).l,a5
000010D0 2ABC 9401 9340             		move.l	#$94019340,(a5)
000010D6 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000010DC 3ABC 977F                  		move.w	#$977F,(a5)
000010E0 3ABC 7800                  		move.w	#$7800,(a5)
000010E4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010EA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010EE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010F4 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000010FA 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001100 3ABC 977F                  		move.w	#$977F,(a5)
00001104 3ABC 7C00                  		move.w	#$7C00,(a5)
00001108 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000110E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001112 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000111A 4E75                       		rts	
0000111C                            ; End of function sub_106E
0000111C                            
0000111C                            ; ---------------------------------------------------------------------------
0000111C                            ; Subroutine to	move pallets from the RAM to CRAM
0000111C                            ; ---------------------------------------------------------------------------
0000111C                            
0000111C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000111C                            
0000111C                            
0000111C                            PalToCRAM:
0000111C 46FC 2700                  		move	#$2700,sr
00001120 4A78 F644                  		tst.w	($FFFFF644).w
00001124 6700                       		beq.s	locret_119C
00001126 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000112C 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001130 43F9 00C0 0000             		lea	($C00000).l,a1
00001136 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
0000113A 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001142 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001144 2298                       		move.l	(a0)+,(a1)
00001146 2298                       		move.l	(a0)+,(a1)
00001148 2298                       		move.l	(a0)+,(a1)
0000114A 2298                       		move.l	(a0)+,(a1)
0000114C 2298                       		move.l	(a0)+,(a1)
0000114E 2298                       		move.l	(a0)+,(a1)
00001150 2298                       		move.l	(a0)+,(a1)
00001152 2298                       		move.l	(a0)+,(a1)
00001154 2298                       		move.l	(a0)+,(a1)
00001156 2298                       		move.l	(a0)+,(a1)
00001158 2298                       		move.l	(a0)+,(a1)
0000115A 2298                       		move.l	(a0)+,(a1)
0000115C 2298                       		move.l	(a0)+,(a1)
0000115E 2298                       		move.l	(a0)+,(a1)
00001160 2298                       		move.l	(a0)+,(a1)
00001162 2298                       		move.l	(a0)+,(a1)
00001164 2298                       		move.l	(a0)+,(a1)
00001166 2298                       		move.l	(a0)+,(a1)
00001168 2298                       		move.l	(a0)+,(a1)
0000116A 2298                       		move.l	(a0)+,(a1)
0000116C 2298                       		move.l	(a0)+,(a1)
0000116E 2298                       		move.l	(a0)+,(a1)
00001170 2298                       		move.l	(a0)+,(a1)
00001172 2298                       		move.l	(a0)+,(a1)
00001174 2298                       		move.l	(a0)+,(a1)
00001176 2298                       		move.l	(a0)+,(a1)
00001178 2298                       		move.l	(a0)+,(a1)
0000117A 2298                       		move.l	(a0)+,(a1)
0000117C 2298                       		move.l	(a0)+,(a1)
0000117E 2298                       		move.l	(a0)+,(a1)
00001180 2298                       		move.l	(a0)+,(a1)
00001182 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001188 4CDF 0300                  		movem.l	(sp)+,a0-a1
0000118C 4A38 F64F                  		tst.b	($FFFFF64F).w
00001190 6600                       		bne.s	loc_119E
00001192                            
00001192                            locret_119C:
00001192 4E73                       		rte	
00001194                            ; ===========================================================================
00001194                            
00001194                            loc_119E:				; XREF: PalToCRAM
00001194 4238 F64F                  		clr.b	($FFFFF64F).w
00001198 48E7 FFFE                  		movem.l	d0-a6,-(sp)
0000119C 6100 FBDC                  		bsr.w	Demo_Time
000011A0 4EB9 0000 0000             		jsr	sub_71B4C
000011A6 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000011AA 4E73                       		rte	
000011AC                            ; End of function PalToCRAM
000011AC                            
000011AC                            ; ---------------------------------------------------------------------------
000011AC                            ; Subroutine to	initialise joypads
000011AC                            ; ---------------------------------------------------------------------------
000011AC                            
000011AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011AC                            
000011AC                            
000011AC                            JoypadInit:				; XREF: GameClrRAM
000011AC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011B4                            
000011B4                            Joypad_WaitZ80:
000011B4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000011BC 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000011BE 7040                       		moveq	#$40,d0
000011C0 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000011C6 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000011CC 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000011D2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000011DA 4E75                       		rts	
000011DC                            ; End of function JoypadInit
000011DC                            
000011DC                            ; ---------------------------------------------------------------------------
000011DC                            ; Subroutine to	read joypad input, and send it to the RAM
000011DC                            ; ---------------------------------------------------------------------------
000011DC                            
000011DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011DC                            
000011DC                            
000011DC                            ReadJoypads:
000011DC 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000011E0 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000011E6 6100                       		bsr.s	Joypad_Read	; do the first joypad
000011E8 5449                       		addq.w	#2,a1		; do the second	joypad
000011EA                            
000011EA                            Joypad_Read:
000011EA 12BC 0000                  		move.b	#0,(a1)
000011EE 4E71                       		nop	
000011F0 4E71                       		nop	
000011F2 1011                       		move.b	(a1),d0
000011F4 E508                       		lsl.b	#2,d0
000011F6 0200 00C0                  		andi.b	#$C0,d0
000011FA 12BC 0040                  		move.b	#$40,(a1)
000011FE 4E71                       		nop	
00001200 4E71                       		nop	
00001202 1211                       		move.b	(a1),d1
00001204 0201 003F                  		andi.b	#$3F,d1
00001208 8001                       		or.b	d1,d0
0000120A 4600                       		not.b	d0
0000120C 1210                       		move.b	(a0),d1
0000120E B101                       		eor.b	d0,d1
00001210 10C0                       		move.b	d0,(a0)+
00001212 C200                       		and.b	d0,d1
00001214 10C1                       		move.b	d1,(a0)+
00001216 4E75                       		rts	
00001218                            ; End of function ReadJoypads
00001218                            
00001218                            
00001218                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001218                            
00001218                            
00001218                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001218 41F9 00C0 0004             		lea	($C00004).l,a0
0000121E 43F9 00C0 0000             		lea	($C00000).l,a1
00001224 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
0000122A 7E12                       		moveq	#$12,d7
0000122C                            
0000122C                            VDP_Loop:
0000122C 309A                       		move.w	(a2)+,(a0)
0000122E 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001232                            
00001232 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001238 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; Is this a PAL console?
0000123E 6700                       		beq.s	.UseV28			; If not, skip
00001240 08C0 0003                  		bset	#3,d0			; set v30 and pretend nothing happened
00001244                            .UseV28:
00001244 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001248 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000124E 7000                       		moveq	#0,d0
00001250 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000125A 3E3C 003F                  		move.w	#$3F,d7
0000125E                            
0000125E                            VDP_ClrCRAM:
0000125E 3280                       		move.w	d0,(a1)
00001260 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001264                            
00001264 42B8 F616                  		clr.l	($FFFFF616).w
00001268 42B8 F61A                  		clr.l	($FFFFF61A).w
0000126C 2F01                       		move.l	d1,-(sp)
0000126E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001274 3ABC 8F01                  		move.w	#$8F01,(a5)
00001278 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000127E 3ABC 9780                  		move.w	#$9780,(a5)
00001282 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001288 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
00001290                            
00001290                            loc_128E:
00001290 3215                       		move.w	(a5),d1
00001292 0801 0001                  		btst	#1,d1
00001296 66F8                       		bne.s	loc_128E
00001298                            
00001298 3ABC 8F02                  		move.w	#$8F02,(a5)
0000129C 221F                       		move.l	(sp)+,d1
0000129E 4E75                       		rts	
000012A0                            ; End of function VDPSetupGame
000012A0                            
000012A0                            ; ===========================================================================
000012A0 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000012A8 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000012B0 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000012B8 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000012C0 9001 9100 9200             		dc.w $9001, $9100, $9200
000012C6                            
000012C6                            ; ---------------------------------------------------------------------------
000012C6                            ; Subroutine to	clear the screen
000012C6                            ; ---------------------------------------------------------------------------
000012C6                            
000012C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012C6                            
000012C6                            InitScreen:
000012C6                            ClearScreen:
000012C6 4BF9 00C0 0004             		lea	($C00004).l,a5
000012CC 3ABC 8F01                  		move.w	#$8F01,(a5)
000012D0 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000012D6 3ABC 9780                  		move.w	#$9780,(a5)
000012DA 2ABC 4000 0083             		move.l	#$40000083,(a5)
000012E0 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000012E8                            
000012E8                            loc_12E6:
000012E8 3215                       		move.w	(a5),d1
000012EA 0801 0001                  		btst	#1,d1
000012EE 66F8                       		bne.s	loc_12E6
000012F0                            
000012F0 3ABC 8F02                  		move.w	#$8F02,(a5)
000012F4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FA 3ABC 8F01                  		move.w	#$8F01,(a5)
000012FE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001304 3ABC 9780                  		move.w	#$9780,(a5)
00001308 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000130E 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001316                            
00001316                            loc_1314:
00001316 3215                       		move.w	(a5),d1
00001318 0801 0001                  		btst	#1,d1
0000131C 66F8                       		bne.s	loc_1314
0000131E                            
0000131E 3ABC 8F02                  		move.w	#$8F02,(a5)
00001322 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000132A 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001332 43F8 F800                  		lea	($FFFFF800).w,a1
00001336 7000                       		moveq	#0,d0
00001338 323C 009F                  		move.w	#$9F,d1
0000133C                            
0000133C                            loc_133A:
0000133C 22C0                       		move.l	d0,(a1)+
0000133E 51C9 FFFC                  		dbf	d1,loc_133A
00001342                            
00001342 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001346 7000                       		moveq	#0,d0
00001348 323C 00FF                  		move.w	#$FF,d1
0000134C                            
0000134C                            loc_134A:
0000134C 22C0                       		move.l	d0,(a1)+
0000134E 51C9 FFFC                  		dbf	d1,loc_134A
00001352 4E75                       		rts	
00001354                            ; End of function ClearScreen
00001354                            
00001354                            ; ---------------------------------------------------------------------------
00001354                            ; Subroutine to	load the sound driver
00001354                            ; ---------------------------------------------------------------------------
00001354                            
00001354                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001354                            
00001354                            
00001354                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001354 4E71                       		nop	
00001356 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000135E 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001366 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000136C 43F9 00A0 0000             		lea	($A00000).l,a1
00001372 6100 0000                  		bsr.w	KosDec		; decompress
00001376 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000137E 4E71                       		nop	
00001380 4E71                       		nop	
00001382 4E71                       		nop	
00001384 4E71                       		nop	
00001386 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000138E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001396 4E75                       		rts	
00001398                            ; End of function SoundDriverLoad
00001398                            
00001398                            ; ---------------------------------------------------------------------------
00001398                            ; Subroutine to	play a sound or	music track
00001398                            ; ---------------------------------------------------------------------------
00001398                            
00001398                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001398                            
00001398                            
00001398                            PlaySound:
00001398 11C0 F00A                  		move.b	d0,($FFFFF00A).w
0000139C 4E75                       		rts	
0000139E                            ; End of function PlaySound
0000139E                            
0000139E                            ; ---------------------------------------------------------------------------
0000139E                            ; Subroutine to	play a special sound/music (E0-E4)
0000139E                            ;
0000139E                            ; E0 - Fade out
0000139E                            ; E1 - Sega
0000139E                            ; E2 - Speed up
0000139E                            ; E3 - Normal speed
0000139E                            ; E4 - Stop
0000139E                            ; ---------------------------------------------------------------------------
0000139E                            
0000139E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000139E                            
0000139E                            
0000139E                            PlaySound_Special:
0000139E 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000013A2 4E75                       		rts	
000013A4                            ; End of function PlaySound_Special
000013A4                            
000013A4                            ; ===========================================================================
000013A4                            ; ---------------------------------------------------------------------------
000013A4                            ; Unused sound/music subroutine
000013A4                            ; ---------------------------------------------------------------------------
000013A4                            
000013A4                            PlaySound_Unk:
000013A4 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000013A8 4E75                       		rts	
000013AA                            
000013AA                            ; ---------------------------------------------------------------------------
000013AA                            ; Subroutine to	pause the game
000013AA                            ; ---------------------------------------------------------------------------
000013AA                            
000013AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013AA                            
000013AA                            
000013AA                            PauseGame:				; XREF: Level_MainLoop; et al
000013AA 4E71                       		nop	
000013AC 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000013B0 6700                       		beq.s	Unpause		; if not, branch
000013B2 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000013B6 6600                       		bne.s	loc_13BE	; if yes, branch
000013B8 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000013BE 6700                       		beq.s	Pause_DoNothing	; if not, branch
000013C0                            
000013C0                            loc_13BE:
000013C0 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000013C6 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000013CC                            
000013CC                            loc_13CA:
000013CC 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000013D2 6100 0000                  		bsr.w	DelayProgram
000013D6 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000013DA 6700                       		beq.s	Pause_ChkStart	; if not, branch
000013DC 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000013E2 6700                       		beq.s	Pause_ChkBC	; if not, branch
000013E4 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000013EA 4E71                       		nop	
000013EC 6000                       		bra.s	loc_1404
000013EE                            ; ===========================================================================
000013EE                            
000013EE                            Pause_ChkBC:				; XREF: PauseGame
000013EE 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000013F4 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000013F6 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000013FC 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000013FE                            
000013FE                            Pause_ChkStart:				; XREF: PauseGame
000013FE 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001404 67C6                       		beq.s	loc_13CA	; if not, branch
00001406                            
00001406                            loc_1404:				; XREF: PauseGame
00001406 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000140C                            
0000140C                            Unpause:				; XREF: PauseGame
0000140C 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001412                            
00001412                            Pause_DoNothing:			; XREF: PauseGame
00001412 4E75                       		rts	
00001414                            ; ===========================================================================
00001414                            
00001414                            Pause_SlowMo:				; XREF: PauseGame
00001414 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000141A 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001420 4E75                       		rts	
00001422                            ; End of function PauseGame
00001422                            
00001422                            ; ---------------------------------------------------------------------------
00001422                            ; Subroutine to	display	patterns via the VDP
00001422                            ; ---------------------------------------------------------------------------
00001422                            
00001422                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001422                            
00001422                            DrawTileMap:
00001422                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001422 4DF9 00C0 0000             		lea	($C00000).l,a6
00001428 283C 0080 0000             		move.l	#$800000,d4
0000142E                            
0000142E                            loc_142C:
0000142E 2D40 0004                  		move.l	d0,4(a6)
00001432 3601                       		move.w	d1,d3
00001434                            
00001434                            loc_1432:
00001434 3C99                       		move.w	(a1)+,(a6)
00001436 51CB FFFC                  		dbf	d3,loc_1432
0000143A D084                       		add.l	d4,d0
0000143C 51CA FFF0                  		dbf	d2,loc_142C
00001440 4E75                       		rts	
00001442                            ; End of function ShowVDPGraphics
00001442                            
00001442                            ; ---------------------------------------------------------------------------
00001442                            ; Nemesis decompression	algorithm
00001442                            ; ---------------------------------------------------------------------------
00001442                            
00001442                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001442                            
00001442                            
00001442                            NemDec:
00001442 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001446 47F9 0000 0000             		lea	(loc_1502).l,a3
0000144C 49F9 00C0 0000             		lea	($C00000).l,a4
00001452 6000                       		bra.s	loc_145C
00001454                            ; ===========================================================================
00001454 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001458 47F9 0000 0000             		lea	(loc_1518).l,a3
0000145E                            
0000145E                            loc_145C:				; XREF: NemDec
0000145E 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001462 3418                       		move.w	(a0)+,d2
00001464 E34A                       		lsl.w	#1,d2
00001466 6400                       		bcc.s	loc_146A
00001468 D6FC 000A                  		adda.w	#$A,a3
0000146C                            
0000146C                            loc_146A:
0000146C E54A                       		lsl.w	#2,d2
0000146E 3A42                       		movea.w	d2,a5
00001470 7608                       		moveq	#8,d3
00001472 7400                       		moveq	#0,d2
00001474 7800                       		moveq	#0,d4
00001476 6100 0000                  		bsr.w	NemDec4
0000147A 1A18                       		move.b	(a0)+,d5
0000147C E145                       		asl.w	#8,d5
0000147E 1A18                       		move.b	(a0)+,d5
00001480 3C3C 0010                  		move.w	#$10,d6
00001484 6100                       		bsr.s	NemDec2
00001486 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
0000148A 4E75                       		rts	
0000148C                            ; End of function NemDec
0000148C                            
0000148C                            
0000148C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000148C                            
0000148C                            
0000148C                            NemDec2:				; XREF: NemDec
0000148C 3E06                       		move.w	d6,d7
0000148E 5147                       		subq.w	#8,d7
00001490 3205                       		move.w	d5,d1
00001492 EE69                       		lsr.w	d7,d1
00001494 0C01 00FC                  		cmpi.b	#-4,d1
00001498 6400                       		bcc.s	loc_14D6
0000149A 0241 00FF                  		andi.w	#$FF,d1
0000149E D241                       		add.w	d1,d1
000014A0 1031 1000                  		move.b	(a1,d1.w),d0
000014A4 4880                       		ext.w	d0
000014A6 9C40                       		sub.w	d0,d6
000014A8 0C46 0009                  		cmpi.w	#9,d6
000014AC 6400                       		bcc.s	loc_14B2
000014AE 5046                       		addq.w	#8,d6
000014B0 E145                       		asl.w	#8,d5
000014B2 1A18                       		move.b	(a0)+,d5
000014B4                            
000014B4                            loc_14B2:
000014B4 1231 1001                  		move.b	1(a1,d1.w),d1
000014B8 3001                       		move.w	d1,d0
000014BA 0241 000F                  		andi.w	#$F,d1
000014BE 0240 00F0                  		andi.w	#$F0,d0
000014C2                            
000014C2                            loc_14C0:				; XREF: NemDec3
000014C2 E848                       		lsr.w	#4,d0
000014C4                            
000014C4                            loc_14C2:				; XREF: NemDec3
000014C4 E98C                       		lsl.l	#4,d4
000014C6 8801                       		or.b	d1,d4
000014C8 5343                       		subq.w	#1,d3
000014CA 6600                       		bne.s	loc_14D0
000014CC 4ED3                       		jmp	(a3)
000014CE                            ; End of function NemDec2
000014CE                            
000014CE                            
000014CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014CE                            
000014CE                            
000014CE                            NemDec3:				; XREF: loc_1502
000014CE 7800                       		moveq	#0,d4
000014D0 7608                       		moveq	#8,d3
000014D2                            
000014D2                            loc_14D0:				; XREF: NemDec2
000014D2 51C8 FFF0                  		dbf	d0,loc_14C2
000014D6 60B4                       		bra.s	NemDec2
000014D8                            ; ===========================================================================
000014D8                            
000014D8                            loc_14D6:				; XREF: NemDec2
000014D8 5D46                       		subq.w	#6,d6
000014DA 0C46 0009                  		cmpi.w	#9,d6
000014DE 6400                       		bcc.s	loc_14E4
000014E0 5046                       		addq.w	#8,d6
000014E2 E145                       		asl.w	#8,d5
000014E4 1A18                       		move.b	(a0)+,d5
000014E6                            
000014E6                            loc_14E4:				; XREF: NemDec3
000014E6 5F46                       		subq.w	#7,d6
000014E8 3205                       		move.w	d5,d1
000014EA EC69                       		lsr.w	d6,d1
000014EC 3001                       		move.w	d1,d0
000014EE 0241 000F                  		andi.w	#$F,d1
000014F2 0240 0070                  		andi.w	#$70,d0
000014F6 0C46 0009                  		cmpi.w	#9,d6
000014FA 64C6                       		bcc.s	loc_14C0
000014FC 5046                       		addq.w	#8,d6
000014FE E145                       		asl.w	#8,d5
00001500 1A18                       		move.b	(a0)+,d5
00001502 60BE                       		bra.s	loc_14C0
00001504                            ; End of function NemDec3
00001504                            
00001504                            ; ===========================================================================
00001504                            
00001504                            loc_1502:				; XREF: NemDec
00001504 2884                       		move.l	d4,(a4)
00001506 534D                       		subq.w	#1,a5
00001508 380D                       		move.w	a5,d4
0000150A 66C2                       		bne.s	NemDec3
0000150C 4E75                       		rts	
0000150E                            ; ===========================================================================
0000150E B982                       		eor.l	d4,d2
00001510 2882                       		move.l	d2,(a4)
00001512 534D                       		subq.w	#1,a5
00001514 380D                       		move.w	a5,d4
00001516 66B6                       		bne.s	NemDec3
00001518 4E75                       		rts	
0000151A                            ; ===========================================================================
0000151A                            
0000151A                            loc_1518:				; XREF: NemDec
0000151A 28C4                       		move.l	d4,(a4)+
0000151C 534D                       		subq.w	#1,a5
0000151E 380D                       		move.w	a5,d4
00001520 66AC                       		bne.s	NemDec3
00001522 4E75                       		rts	
00001524                            ; ===========================================================================
00001524 B982                       		eor.l	d4,d2
00001526 28C2                       		move.l	d2,(a4)+
00001528 534D                       		subq.w	#1,a5
0000152A 380D                       		move.w	a5,d4
0000152C 66A0                       		bne.s	NemDec3
0000152E 4E75                       		rts	
00001530                            
00001530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001530                            
00001530                            
00001530                            NemDec4:				; XREF: NemDec
00001530 1018                       		move.b	(a0)+,d0
00001532                            
00001532                            loc_1530:
00001532 0C00 00FF                  		cmpi.b	#-1,d0
00001536 6600                       		bne.s	loc_1538
00001538 4E75                       		rts	
0000153A                            ; ===========================================================================
0000153A                            
0000153A                            loc_1538:				; XREF: NemDec4
0000153A 3E00                       		move.w	d0,d7
0000153C                            
0000153C                            loc_153A:
0000153C 1018                       		move.b	(a0)+,d0
0000153E 0C00 0080                  		cmpi.b	#$80,d0
00001542 64EE                       		bcc.s	loc_1530
00001544 1200                       		move.b	d0,d1
00001546 0247 000F                  		andi.w	#$F,d7
0000154A 0241 0070                  		andi.w	#$70,d1
0000154E 8E41                       		or.w	d1,d7
00001550 0240 000F                  		andi.w	#$F,d0
00001554 1200                       		move.b	d0,d1
00001556 E149                       		lsl.w	#8,d1
00001558 8E41                       		or.w	d1,d7
0000155A 7208                       		moveq	#8,d1
0000155C 9240                       		sub.w	d0,d1
0000155E 6600                       		bne.s	loc_1568
00001560 1018                       		move.b	(a0)+,d0
00001562 D040                       		add.w	d0,d0
00001564 3387 0000                  		move.w	d7,(a1,d0.w)
00001568 60D2                       		bra.s	loc_153A
0000156A                            ; ===========================================================================
0000156A                            
0000156A                            loc_1568:				; XREF: NemDec4
0000156A 1018                       		move.b	(a0)+,d0
0000156C E368                       		lsl.w	d1,d0
0000156E D040                       		add.w	d0,d0
00001570 7A01                       		moveq	#1,d5
00001572 E36D                       		lsl.w	d1,d5
00001574 5345                       		subq.w	#1,d5
00001576                            
00001576                            loc_1574:
00001576 3387 0000                  		move.w	d7,(a1,d0.w)
0000157A 5440                       		addq.w	#2,d0
0000157C 51CD FFF8                  		dbf	d5,loc_1574
00001580 60BA                       		bra.s	loc_153A
00001582                            ; End of function NemDec4
00001582                            
00001582                            ; ---------------------------------------------------------------------------
00001582                            ; Subroutine to	load pattern load cues
00001582                            ; ---------------------------------------------------------------------------
00001582                            
00001582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001582                            
00001582                            LoadArtList: 
00001582                            LoadPLC:
00001582 48E7 0060                  		movem.l	a1-a2,-(sp)
00001586 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000158C D040                       		add.w	d0,d0
0000158E 3031 0000                  		move.w	(a1,d0.w),d0
00001592 43F1 0000                  		lea	(a1,d0.w),a1
00001596 45F8 F680                  		lea	($FFFFF680).w,a2
0000159A                            
0000159A                            loc_1598:
0000159A 4A92                       		tst.l	(a2)
0000159C 6700                       		beq.s	loc_15A0
0000159E 5C4A                       		addq.w	#6,a2
000015A0 60F8                       		bra.s	loc_1598
000015A2                            ; ===========================================================================
000015A2                            
000015A2                            loc_15A0:				; XREF: LoadPLC
000015A2 3019                       		move.w	(a1)+,d0
000015A4 6B00                       		bmi.s	loc_15AC
000015A6                            
000015A6                            loc_15A4:
000015A6 24D9                       		move.l	(a1)+,(a2)+
000015A8 34D9                       		move.w	(a1)+,(a2)+
000015AA 51C8 FFFA                  		dbf	d0,loc_15A4
000015AE                            
000015AE                            loc_15AC:
000015AE 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015B2 4E75                       		rts	
000015B4                            ; End of function LoadPLC
000015B4                            
000015B4                            
000015B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B4                            
000015B4                            InitArtList: 
000015B4                            LoadPLC2:
000015B4 48E7 0060                  		movem.l	a1-a2,-(sp)
000015B8 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000015BE D040                       		add.w	d0,d0
000015C0 3031 0000                  		move.w	(a1,d0.w),d0
000015C4 43F1 0000                  		lea	(a1,d0.w),a1
000015C8 6100                       		bsr.s	ClearPLC
000015CA 45F8 F680                  		lea	($FFFFF680).w,a2
000015CE 3019                       		move.w	(a1)+,d0
000015D0 6B00                       		bmi.s	loc_15D8
000015D2                            
000015D2                            loc_15D0:
000015D2 24D9                       		move.l	(a1)+,(a2)+
000015D4 34D9                       		move.w	(a1)+,(a2)+
000015D6 51C8 FFFA                  		dbf	d0,loc_15D0
000015DA                            
000015DA                            loc_15D8:
000015DA 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015DE 4E75                       		rts	
000015E0                            ; End of function LoadPLC2
000015E0                            
000015E0                            ; ---------------------------------------------------------------------------
000015E0                            ; Subroutine to	clear the pattern load cues
000015E0                            ; ---------------------------------------------------------------------------
000015E0                            
000015E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015E0                            
000015E0                            ClearArtListQueue:
000015E0                            ClearPLC:				; XREF: LoadPLC2
000015E0 45F8 F680                  		lea	($FFFFF680).w,a2
000015E4 701F                       		moveq	#$1F,d0
000015E6                            
000015E6                            ClearPLC_Loop:
000015E6 429A                       		clr.l	(a2)+
000015E8 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000015EC 4E75                       		rts	
000015EE                            ; End of function ClearPLC
000015EE                            
000015EE                            ; ---------------------------------------------------------------------------
000015EE                            ; Subroutine to	use graphics listed in a pattern load cue
000015EE                            ; ---------------------------------------------------------------------------
000015EE                            
000015EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015EE                            
000015EE                            ProcessArtLoading: 
000015EE                            RunPLC_RAM:				; XREF: Pal_FadeTo
000015EE 4AB8 F680                  		tst.l	($FFFFF680).w
000015F2 6700                       		beq.s	locret_1640
000015F4 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000015F8 6600                       		bne.s	locret_1640
000015FA 2078 F680                  		movea.l	($FFFFF680).w,a0
000015FE 47F9 0000 1504             		lea	(loc_1502).l,a3
00001604 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001608 3418                       		move.w	(a0)+,d2
0000160A 6A00                       		bpl.s	loc_160E
0000160C D6FC 000A                  		adda.w	#$A,a3
00001610                            
00001610                            loc_160E:
00001610 0242 7FFF                  		andi.w	#$7FFF,d2
00001614 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001618 6100 FF16                  		bsr.w	NemDec4
0000161C 1A18                       		move.b	(a0)+,d5
0000161E E145                       		asl.w	#8,d5
00001620 1A18                       		move.b	(a0)+,d5
00001622 7C10                       		moveq	#$10,d6
00001624 7000                       		moveq	#0,d0
00001626 21C8 F680                  		move.l	a0,($FFFFF680).w
0000162A 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000162E 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001632 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001636 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000163A 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000163E 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001642                            
00001642                            locret_1640:
00001642 4E75                       		rts	
00001644                            ; End of function RunPLC_RAM
00001644                            
00001644                            
00001644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001644                            
00001644                            
00001644                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001644 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001648 6700 0000                  		beq.w	locret_16DA
0000164C 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001652 7000                       		moveq	#0,d0
00001654 3038 F684                  		move.w	($FFFFF684).w,d0
00001658 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000165E 6000                       		bra.s	loc_1676
00001660                            ; End of function sub_1642
00001660                            
00001660                            
00001660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001660                            
00001660                            
00001660                            sub_165E:				; XREF: Demo_Time
00001660 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001664 6700                       		beq.s	locret_16DA
00001666 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000166C 7000                       		moveq	#0,d0
0000166E 3038 F684                  		move.w	($FFFFF684).w,d0
00001672 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001678                            
00001678                            loc_1676:				; XREF: sub_1642
00001678 49F9 00C0 0004             		lea	($C00004).l,a4
0000167E E588                       		lsl.l	#2,d0
00001680 E448                       		lsr.w	#2,d0
00001682 0040 4000                  		ori.w	#$4000,d0
00001686 4840                       		swap	d0
00001688 2880                       		move.l	d0,(a4)
0000168A 594C                       		subq.w	#4,a4
0000168C 2078 F680                  		movea.l	($FFFFF680).w,a0
00001690 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001694 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001698 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
0000169C 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000016A0 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000016A4 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000016A8 43F8 AA00                  		lea	($FFFFAA00).w,a1
000016AC                            
000016AC                            loc_16AA:				; XREF: sub_165E
000016AC 3A7C 0008                  		movea.w	#8,a5
000016B0 6100 FE1C                  		bsr.w	NemDec3
000016B4 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000016B8 6700                       		beq.s	loc_16DC
000016BA 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000016BE 66EC                       		bne.s	loc_16AA
000016C0 21C8 F680                  		move.l	a0,($FFFFF680).w
000016C4 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000016C8 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000016CC 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000016D0 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000016D4 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000016D8 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000016DC                            
000016DC                            locret_16DA:				; XREF: sub_1642
000016DC 4E75                       		rts	
000016DE                            ; ===========================================================================
000016DE                            
000016DE                            loc_16DC:				; XREF: sub_165E
000016DE 41F8 F680                  		lea	($FFFFF680).w,a0
000016E2 7015                       		moveq	#$15,d0
000016E4                            
000016E4                            loc_16E2:				; XREF: sub_165E
000016E4 20E8 0006                  		move.l	6(a0),(a0)+
000016E8 51C8 FFFA                  		dbf	d0,loc_16E2
000016EC 4E75                       		rts	
000016EE                            ; End of function sub_165E
000016EE                            
000016EE                            ; ---------------------------------------------------------------------------
000016EE                            ; Subroutine to	execute	the pattern load cue
000016EE                            ; ---------------------------------------------------------------------------
000016EE                            
000016EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EE                            
000016EE                            
000016EE                            RunPLC_ROM:
000016EE 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000016F4 D040                       		add.w	d0,d0
000016F6 3031 0000                  		move.w	(a1,d0.w),d0
000016FA 43F1 0000                  		lea	(a1,d0.w),a1
000016FE 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001700                            
00001700                            RunPLC_Loop:
00001700 2059                       		movea.l	(a1)+,a0	; get art pointer
00001702 7000                       		moveq	#0,d0
00001704 3019                       		move.w	(a1)+,d0	; get VRAM address
00001706 E588                       		lsl.l	#2,d0		; divide address by $20
00001708 E448                       		lsr.w	#2,d0
0000170A 0040 4000                  		ori.w	#$4000,d0
0000170E 4840                       		swap	d0
00001710 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001716 6100 FD2A                  		bsr.w	NemDec		; decompress
0000171A 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000171E 4E75                       		rts	
00001720                            ; End of function RunPLC_ROM
00001720                            
00001720                            ; ---------------------------------------------------------------------------
00001720                            ; Enigma decompression algorithm
00001720                            ; ---------------------------------------------------------------------------
00001720                            
00001720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001720                            
00001720                            
00001720                            EniDec:
00001720 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001724 3640                       		movea.w	d0,a3
00001726 1018                       		move.b	(a0)+,d0
00001728 4880                       		ext.w	d0
0000172A 3A40                       		movea.w	d0,a5
0000172C 1818                       		move.b	(a0)+,d4
0000172E E70C                       		lsl.b	#3,d4
00001730 3458                       		movea.w	(a0)+,a2
00001732 D4CB                       		adda.w	a3,a2
00001734 3858                       		movea.w	(a0)+,a4
00001736 D8CB                       		adda.w	a3,a4
00001738 1A18                       		move.b	(a0)+,d5
0000173A E145                       		asl.w	#8,d5
0000173C 1A18                       		move.b	(a0)+,d5
0000173E 7C10                       		moveq	#$10,d6
00001740                            
00001740                            loc_173E:				; XREF: loc_1768
00001740 7007                       		moveq	#7,d0
00001742 3E06                       		move.w	d6,d7
00001744 9E40                       		sub.w	d0,d7
00001746 3205                       		move.w	d5,d1
00001748 EE69                       		lsr.w	d7,d1
0000174A 0241 007F                  		andi.w	#$7F,d1
0000174E 3401                       		move.w	d1,d2
00001750 0C41 0040                  		cmpi.w	#$40,d1
00001754 6400                       		bcc.s	loc_1758
00001756 7006                       		moveq	#6,d0
00001758 E24A                       		lsr.w	#1,d2
0000175A                            
0000175A                            loc_1758:
0000175A 6100 0000                  		bsr.w	sub_188C
0000175E 0242 000F                  		andi.w	#$F,d2
00001762 E849                       		lsr.w	#4,d1
00001764 D241                       		add.w	d1,d1
00001766 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000176A                            ; End of function EniDec
0000176A                            
0000176A                            ; ===========================================================================
0000176A                            
0000176A                            loc_1768:				; XREF: loc_17B4
0000176A 32CA                       		move.w	a2,(a1)+
0000176C 524A                       		addq.w	#1,a2
0000176E 51CA FFFA                  		dbf	d2,loc_1768
00001772 60CC                       		bra.s	loc_173E
00001774                            ; ===========================================================================
00001774                            
00001774                            loc_1772:				; XREF: loc_17B4
00001774 32CC                       		move.w	a4,(a1)+
00001776 51CA FFFC                  		dbf	d2,loc_1772
0000177A 60C4                       		bra.s	loc_173E
0000177C                            ; ===========================================================================
0000177C                            
0000177C                            loc_177A:				; XREF: loc_17B4
0000177C 6100 0000                  		bsr.w	loc_17DC
00001780                            
00001780                            loc_177E:
00001780 32C1                       		move.w	d1,(a1)+
00001782 51CA FFFC                  		dbf	d2,loc_177E
00001786 60B8                       		bra.s	loc_173E
00001788                            ; ===========================================================================
00001788                            
00001788                            loc_1786:				; XREF: loc_17B4
00001788 6100 0000                  		bsr.w	loc_17DC
0000178C                            
0000178C                            loc_178A:
0000178C 32C1                       		move.w	d1,(a1)+
0000178E 5241                       		addq.w	#1,d1
00001790 51CA FFFA                  		dbf	d2,loc_178A
00001794 60AA                       		bra.s	loc_173E
00001796                            ; ===========================================================================
00001796                            
00001796                            loc_1794:				; XREF: loc_17B4
00001796 6100 0000                  		bsr.w	loc_17DC
0000179A                            
0000179A                            loc_1798:
0000179A 32C1                       		move.w	d1,(a1)+
0000179C 5341                       		subq.w	#1,d1
0000179E 51CA FFFA                  		dbf	d2,loc_1798
000017A2 609C                       		bra.s	loc_173E
000017A4                            ; ===========================================================================
000017A4                            
000017A4                            loc_17A2:				; XREF: loc_17B4
000017A4 0C42 000F                  		cmpi.w	#$F,d2
000017A8 6700                       		beq.s	loc_17C4
000017AA                            
000017AA                            loc_17A8:
000017AA 6100 0000                  		bsr.w	loc_17DC
000017AE 32C1                       		move.w	d1,(a1)+
000017B0 51CA FFF8                  		dbf	d2,loc_17A8
000017B4 608A                       		bra.s	loc_173E
000017B6                            ; ===========================================================================
000017B6                            
000017B6                            loc_17B4:				; XREF: EniDec
000017B6 60B2                       		bra.s	loc_1768
000017B8                            ; ===========================================================================
000017B8 60B0                       		bra.s	loc_1768
000017BA                            ; ===========================================================================
000017BA 60B8                       		bra.s	loc_1772
000017BC                            ; ===========================================================================
000017BC 60B6                       		bra.s	loc_1772
000017BE                            ; ===========================================================================
000017BE 60BC                       		bra.s	loc_177A
000017C0                            ; ===========================================================================
000017C0 60C6                       		bra.s	loc_1786
000017C2                            ; ===========================================================================
000017C2 60D2                       		bra.s	loc_1794
000017C4                            ; ===========================================================================
000017C4 60DE                       		bra.s	loc_17A2
000017C6                            ; ===========================================================================
000017C6                            
000017C6                            loc_17C4:				; XREF: loc_17A2
000017C6 5348                       		subq.w	#1,a0
000017C8 0C46 0010                  		cmpi.w	#$10,d6
000017CC 6600                       		bne.s	loc_17CE
000017CE 5348                       		subq.w	#1,a0
000017D0                            
000017D0                            loc_17CE:
000017D0 3008                       		move.w	a0,d0
000017D2 E248                       		lsr.w	#1,d0
000017D4 6400                       		bcc.s	loc_17D6
000017D6 5248                       		addq.w	#1,a0
000017D8                            
000017D8                            loc_17D6:
000017D8 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000017DC 4E75                       		rts	
000017DE                            ; ===========================================================================
000017DE                            
000017DE                            loc_17DC:				; XREF: loc_17A2
000017DE 360B                       		move.w	a3,d3
000017E0 1204                       		move.b	d4,d1
000017E2 D201                       		add.b	d1,d1
000017E4 6400                       		bcc.s	loc_17EE
000017E6 5346                       		subq.w	#1,d6
000017E8 0D05                       		btst	d6,d5
000017EA 6700                       		beq.s	loc_17EE
000017EC 0043 8000                  		ori.w	#-$8000,d3
000017F0                            
000017F0                            loc_17EE:
000017F0 D201                       		add.b	d1,d1
000017F2 6400                       		bcc.s	loc_17FC
000017F4 5346                       		subq.w	#1,d6
000017F6 0D05                       		btst	d6,d5
000017F8 6700                       		beq.s	loc_17FC
000017FA 0643 4000                  		addi.w	#$4000,d3
000017FE                            
000017FE                            loc_17FC:
000017FE D201                       		add.b	d1,d1
00001800 6400                       		bcc.s	loc_180A
00001802 5346                       		subq.w	#1,d6
00001804 0D05                       		btst	d6,d5
00001806 6700                       		beq.s	loc_180A
00001808 0643 2000                  		addi.w	#$2000,d3
0000180C                            
0000180C                            loc_180A:
0000180C D201                       		add.b	d1,d1
0000180E 6400                       		bcc.s	loc_1818
00001810 5346                       		subq.w	#1,d6
00001812 0D05                       		btst	d6,d5
00001814 6700                       		beq.s	loc_1818
00001816 0043 1000                  		ori.w	#$1000,d3
0000181A                            
0000181A                            loc_1818:
0000181A D201                       		add.b	d1,d1
0000181C 6400                       		bcc.s	loc_1826
0000181E 5346                       		subq.w	#1,d6
00001820 0D05                       		btst	d6,d5
00001822 6700                       		beq.s	loc_1826
00001824 0043 0800                  		ori.w	#$800,d3
00001828                            
00001828                            loc_1826:
00001828 3205                       		move.w	d5,d1
0000182A 3E06                       		move.w	d6,d7
0000182C 9E4D                       		sub.w	a5,d7
0000182E 6400                       		bcc.s	loc_1856
00001830 3C07                       		move.w	d7,d6
00001832 0646 0010                  		addi.w	#$10,d6
00001836 4447                       		neg.w	d7
00001838 EF69                       		lsl.w	d7,d1
0000183A 1A10                       		move.b	(a0),d5
0000183C EF3D                       		rol.b	d7,d5
0000183E DE47                       		add.w	d7,d7
00001840 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001844 D245                       		add.w	d5,d1
00001846                            
00001846                            loc_1844:				; XREF: loc_1868
00001846 300D                       		move.w	a5,d0
00001848 D040                       		add.w	d0,d0
0000184A C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000184E D243                       		add.w	d3,d1
00001850 1A18                       		move.b	(a0)+,d5
00001852 E14D                       		lsl.w	#8,d5
00001854 1A18                       		move.b	(a0)+,d5
00001856 4E75                       		rts	
00001858                            ; ===========================================================================
00001858                            
00001858                            loc_1856:				; XREF: loc_1826
00001858 6700                       		beq.s	loc_1868
0000185A EE69                       		lsr.w	d7,d1
0000185C 300D                       		move.w	a5,d0
0000185E D040                       		add.w	d0,d0
00001860 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001864 D243                       		add.w	d3,d1
00001866 300D                       		move.w	a5,d0
00001868 6000                       		bra.s	sub_188C
0000186A                            ; ===========================================================================
0000186A                            
0000186A                            loc_1868:				; XREF: loc_1856
0000186A 7C10                       		moveq	#$10,d6
0000186C                            
0000186C                            loc_186A:
0000186C 60D8                       		bra.s	loc_1844
0000186E                            ; ===========================================================================
0000186E 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001884 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
0000188E                            
0000188E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000188E                            
0000188E                            
0000188E                            sub_188C:				; XREF: EniDec
0000188E 9C40                       		sub.w	d0,d6
00001890 0C46 0009                  		cmpi.w	#9,d6
00001894 6400                       		bcc.s	locret_189A
00001896 5046                       		addq.w	#8,d6
00001898 E145                       		asl.w	#8,d5
0000189A 1A18                       		move.b	(a0)+,d5
0000189C                            
0000189C                            locret_189A:
0000189C 4E75                       		rts	
0000189E                            ; End of function sub_188C
0000189E                            
0000189E                            ; ---------------------------------------------------------------------------
0000189E                            ; Kosinski decompression algorithm
0000189E                            ; ---------------------------------------------------------------------------
0000189E                            
0000189E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000189E                            
0000189E                            
0000189E                            KosDec:
0000189E                            
0000189E =FFFFFFFE                  var_2		= -2
0000189E =FFFFFFFF                  var_1		= -1
0000189E                            
0000189E 558F                       		subq.l	#2,sp
000018A0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018A4 1E98                       		move.b	(a0)+,(sp)
000018A6 3A17                       		move.w	(sp),d5
000018A8 780F                       		moveq	#$F,d4
000018AA                            
000018AA                            loc_18A8:
000018AA E24D                       		lsr.w	#1,d5
000018AC 40C6                       		move	sr,d6
000018AE 51CC 0000                  		dbf	d4,loc_18BA
000018B2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018B6 1E98                       		move.b	(a0)+,(sp)
000018B8 3A17                       		move.w	(sp),d5
000018BA 780F                       		moveq	#$F,d4
000018BC                            
000018BC                            loc_18BA:
000018BC 44C6                       		move	d6,ccr
000018BE 6400                       		bcc.s	loc_18C2
000018C0 12D8                       		move.b	(a0)+,(a1)+
000018C2 60E6                       		bra.s	loc_18A8
000018C4                            ; ===========================================================================
000018C4                            
000018C4                            loc_18C2:				; XREF: KosDec
000018C4 7600                       		moveq	#0,d3
000018C6 E24D                       		lsr.w	#1,d5
000018C8 40C6                       		move	sr,d6
000018CA 51CC 0000                  		dbf	d4,loc_18D6
000018CE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018D2 1E98                       		move.b	(a0)+,(sp)
000018D4 3A17                       		move.w	(sp),d5
000018D6 780F                       		moveq	#$F,d4
000018D8                            
000018D8                            loc_18D6:
000018D8 44C6                       		move	d6,ccr
000018DA 6500                       		bcs.s	loc_1906
000018DC E24D                       		lsr.w	#1,d5
000018DE 51CC 0000                  		dbf	d4,loc_18EA
000018E2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018E6 1E98                       		move.b	(a0)+,(sp)
000018E8 3A17                       		move.w	(sp),d5
000018EA 780F                       		moveq	#$F,d4
000018EC                            
000018EC                            loc_18EA:
000018EC E353                       		roxl.w	#1,d3
000018EE E24D                       		lsr.w	#1,d5
000018F0 51CC 0000                  		dbf	d4,loc_18FC
000018F4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018F8 1E98                       		move.b	(a0)+,(sp)
000018FA 3A17                       		move.w	(sp),d5
000018FC 780F                       		moveq	#$F,d4
000018FE                            
000018FE                            loc_18FC:
000018FE E353                       		roxl.w	#1,d3
00001900 5243                       		addq.w	#1,d3
00001902 74FF                       		moveq	#-1,d2
00001904 1418                       		move.b	(a0)+,d2
00001906 6000                       		bra.s	loc_191C
00001908                            ; ===========================================================================
00001908                            
00001908                            loc_1906:				; XREF: loc_18C2
00001908 1018                       		move.b	(a0)+,d0
0000190A 1218                       		move.b	(a0)+,d1
0000190C 74FF                       		moveq	#-1,d2
0000190E 1401                       		move.b	d1,d2
00001910 EB4A                       		lsl.w	#5,d2
00001912 1400                       		move.b	d0,d2
00001914 0241 0007                  		andi.w	#7,d1
00001918 6700                       		beq.s	loc_1928
0000191A 1601                       		move.b	d1,d3
0000191C 5243                       		addq.w	#1,d3
0000191E                            
0000191E                            loc_191C:
0000191E 1031 2000                  		move.b	(a1,d2.w),d0
00001922 12C0                       		move.b	d0,(a1)+
00001924 51CB FFF8                  		dbf	d3,loc_191C
00001928 6080                       		bra.s	loc_18A8
0000192A                            ; ===========================================================================
0000192A                            
0000192A                            loc_1928:				; XREF: loc_1906
0000192A 1218                       		move.b	(a0)+,d1
0000192C 6700                       		beq.s	loc_1938
0000192E 0C01 0001                  		cmpi.b	#1,d1
00001932 6700 FF76                  		beq.w	loc_18A8
00001936 1601                       		move.b	d1,d3
00001938 60E4                       		bra.s	loc_191C
0000193A                            ; ===========================================================================
0000193A                            
0000193A                            loc_1938:				; XREF: loc_1928
0000193A 548F                       		addq.l	#2,sp
0000193C 4E75                       		rts	
0000193E                            ; End of function KosDec
0000193E                            
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            ; Pallet cycling routine loading subroutine
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            
0000193E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193E                            
0000193E                            
0000193E                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
0000193E 7400                       		moveq	#0,d2
00001940 7000                       		moveq	#0,d0
00001942 4A38 FFF9                  		tst.b	($FFFFFFF9).w	; GMZ: Is truth nuke flag set?
00001946 6600                       		bne.s	PalCycle_Stop	; GMZ: If yes, branch
00001948 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
0000194C D040                       		add.w	d0,d0		; multiply by 2
0000194E 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001952 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001956                            
00001956                            PalCycle_Stop:
00001956 4E75                       		rts
00001958                            ; End of function PalCycle_Load
00001958                            
00001958                            ; ===========================================================================
00001958                            ; ---------------------------------------------------------------------------
00001958                            ; Pallet cycling routines
00001958                            ; ---------------------------------------------------------------------------
00001958 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
0000195A 0000                       		dc.w PalCycle_LZ-PalCycle
0000195C 0000                       		dc.w PalCycle_MZ-PalCycle
0000195E 0000                       		dc.w PalCycle_SLZ-PalCycle
00001960 0000                       		dc.w PalCycle_SYZ-PalCycle
00001962 0000                       		dc.w PalCycle_SBZ-PalCycle
00001964 0000                       		dc.w PalCycle_GHZ-PalCycle
00001966 0000                       		dc.w PalCycle_GHZ-PalCycle
00001968                            
00001968                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001968                            
00001968                            
00001968                            PalCycle_Title:				; XREF: TitleScreen
00001968 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
0000196E 6000                       		bra.s	loc_196A
00001970                            ; ===========================================================================
00001970                            
00001970                            PalCycle_GHZ:				; XREF: PalCycle
00001970 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001976                            
00001976                            loc_196A:				; XREF: PalCycle_Title
00001976 5378 F634                  		subq.w	#1,($FFFFF634).w
0000197A 6A00                       		bpl.s	locret_1990
0000197C 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001982 3038 F632                  		move.w	($FFFFF632).w,d0
00001986 5278 F632                  		addq.w	#1,($FFFFF632).w
0000198A 0240 0003                  		andi.w	#3,d0
0000198E E748                       		lsl.w	#3,d0
00001990 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001994 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001998 22B0 0004                  		move.l	4(a0,d0.w),(a1)
0000199C                            
0000199C                            locret_1990:
0000199C 4E75                       		rts	
0000199E                            ; End of function PalCycle_Title
0000199E                            
0000199E                            
0000199E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000199E                            
0000199E                            
0000199E                            PalCycle_LZ:				; XREF: PalCycle
0000199E 5378 F634                  		subq.w	#1,($FFFFF634).w
000019A2 6A00                       		bpl.s	loc_19D8
000019A4 31FC 0002 F634             		move.w	#2,($FFFFF634).w
000019AA 3038 F632                  		move.w	($FFFFF632).w,d0
000019AE 5278 F632                  		addq.w	#1,($FFFFF632).w
000019B2 0240 0003                  		andi.w	#3,d0
000019B6 E748                       		lsl.w	#3,d0
000019B8 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
000019BE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
000019C4 6600                       		bne.s	loc_19C0
000019C6 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000019CC                            
000019CC                            loc_19C0:
000019CC 43F8 FB56                  		lea	($FFFFFB56).w,a1
000019D0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019D4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019D8 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
000019DC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019E0 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019E4                            
000019E4                            loc_19D8:
000019E4 3038 FE04                  		move.w	($FFFFFE04).w,d0
000019E8 0240 0007                  		andi.w	#7,d0
000019EC 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
000019F0 6700                       		beq.s	locret_1A3A
000019F2 7201                       		moveq	#1,d1
000019F4 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000019F8 6700                       		beq.s	loc_19F0
000019FA 4441                       		neg.w	d1
000019FC                            
000019FC                            loc_19F0:
000019FC 3038 F650                  		move.w	($FFFFF650).w,d0
00001A00 0240 0003                  		andi.w	#3,d0
00001A04 D041                       		add.w	d1,d0
00001A06 0C40 0003                  		cmpi.w	#3,d0
00001A0A 6500                       		bcs.s	loc_1A0A
00001A0C 3200                       		move.w	d0,d1
00001A0E 7000                       		moveq	#0,d0
00001A10 4A41                       		tst.w	d1
00001A12 6A00                       		bpl.s	loc_1A0A
00001A14 7002                       		moveq	#2,d0
00001A16                            
00001A16                            loc_1A0A:
00001A16 31C0 F650                  		move.w	d0,($FFFFF650).w
00001A1A D040                       		add.w	d0,d0
00001A1C 3200                       		move.w	d0,d1
00001A1E D040                       		add.w	d0,d0
00001A20 D041                       		add.w	d1,d0
00001A22 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001A28 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001A2C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A30 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A34 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001A3A 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001A3E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A42 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A46                            
00001A46                            locret_1A3A:
00001A46 4E75                       		rts	
00001A48                            ; End of function PalCycle_LZ
00001A48                            
00001A48                            ; ===========================================================================
00001A48 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001A50                            ; ===========================================================================
00001A50                            
00001A50                            PalCycle_MZ:				; XREF: PalCycle
00001A50 4E75                       		rts	
00001A52                            
00001A52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A52                            
00001A52                            
00001A52                            PalCycle_SLZ:				; XREF: PalCycle
00001A52 4E75                       		rts	
00001A54                            ; End of function PalCycle_SLZ
00001A54                            
00001A54                            
00001A54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A54                            
00001A54                            
00001A54                            PalCycle_SYZ:				; XREF: PalCycle
00001A54 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A58 6A00                       		bpl.s	locret_1AC6
00001A5A 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001A60 3038 F632                  		move.w	($FFFFF632).w,d0
00001A64 5278 F632                  		addq.w	#1,($FFFFF632).w
00001A68 0240 0003                  		andi.w	#3,d0
00001A6C E548                       		lsl.w	#2,d0
00001A6E 3200                       		move.w	d0,d1
00001A70 D040                       		add.w	d0,d0
00001A72 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001A78 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001A7C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A80 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001A84 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001A8A 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001A8E 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001A92 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001A98                            
00001A98                            locret_1AC6:
00001A98 4E75                       		rts	
00001A9A                            ; End of function PalCycle_SYZ
00001A9A                            
00001A9A                            
00001A9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A9A                            
00001A9A                            
00001A9A                            PalCycle_SBZ:				; XREF: PalCycle
00001A9A 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001AA0 4A38 FE11                  		tst.b	($FFFFFE11).w
00001AA4 6700                       		beq.s	loc_1ADA
00001AA6 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001AAC                            
00001AAC                            loc_1ADA:
00001AAC 43F8 F650                  		lea	($FFFFF650).w,a1
00001AB0 321A                       		move.w	(a2)+,d1
00001AB2                            
00001AB2                            loc_1AE0:
00001AB2 5311                       		subq.b	#1,(a1)
00001AB4 6B00                       		bmi.s	loc_1AEA
00001AB6 5489                       		addq.l	#2,a1
00001AB8 5C8A                       		addq.l	#6,a2
00001ABA 6000                       		bra.s	loc_1B06
00001ABC                            ; ===========================================================================
00001ABC                            
00001ABC                            loc_1AEA:				; XREF: PalCycle_SBZ
00001ABC 12DA                       		move.b	(a2)+,(a1)+
00001ABE 1011                       		move.b	(a1),d0
00001AC0 5200                       		addq.b	#1,d0
00001AC2 B01A                       		cmp.b	(a2)+,d0
00001AC4 6500                       		bcs.s	loc_1AF6
00001AC6 7000                       		moveq	#0,d0
00001AC8                            
00001AC8                            loc_1AF6:
00001AC8 12C0                       		move.b	d0,(a1)+
00001ACA 0240 000F                  		andi.w	#$F,d0
00001ACE D040                       		add.w	d0,d0
00001AD0 305A                       		movea.w	(a2)+,a0
00001AD2 365A                       		movea.w	(a2)+,a3
00001AD4 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001AD8                            
00001AD8                            loc_1B06:				; XREF: PalCycle_SBZ
00001AD8 51C9 FFD8                  		dbf	d1,loc_1AE0
00001ADC 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AE0 6A00                       		bpl.s	locret_1B64
00001AE2 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001AE8 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001AEE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001AF2 6700                       		beq.s	loc_1B2E
00001AF4 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001AFA 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001B00                            
00001B00                            loc_1B2E:
00001B00 72FF                       		moveq	#-1,d1
00001B02 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B06 6700                       		beq.s	loc_1B38
00001B08 4441                       		neg.w	d1
00001B0A                            
00001B0A                            loc_1B38:
00001B0A 3038 F632                  		move.w	($FFFFF632).w,d0
00001B0E 0240 0003                  		andi.w	#3,d0
00001B12 D041                       		add.w	d1,d0
00001B14 0C40 0003                  		cmpi.w	#3,d0
00001B18 6500                       		bcs.s	loc_1B52
00001B1A 3200                       		move.w	d0,d1
00001B1C 7000                       		moveq	#0,d0
00001B1E 4A41                       		tst.w	d1
00001B20 6A00                       		bpl.s	loc_1B52
00001B22 7002                       		moveq	#2,d0
00001B24                            
00001B24                            loc_1B52:
00001B24 31C0 F632                  		move.w	d0,($FFFFF632).w
00001B28 D040                       		add.w	d0,d0
00001B2A 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001B2E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B32 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B36                            
00001B36                            locret_1B64:
00001B36 4E75                       		rts	
00001B38                            ; End of function PalCycle_SBZ
00001B38                            
00001B38                            ; ===========================================================================
00001B38                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001B58                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001B78                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001B98                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001BAA                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001BBC                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001C24                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001C48                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001C68                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001C78                            
00001C78                            Pal_SBZCycList:
00001C78                            	include "_inc\SBZ pallet script 1.asm"
00001C78                            ; ---------------------------------------------------------------------------
00001C78                            ; Scrap Brain Zone 1 pallet cycling script
00001C78                            ; ---------------------------------------------------------------------------
00001C78 0008                       	dc.w 8			; number of entries - 1
00001C7A 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001C7C 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001C7E FB50                       	dc.w $FB50		; RAM address
00001C80 0D08                       	dc.b $D, 8
00001C82 0000                       	dc.w Pal_SBZCyc2
00001C84 FB52                       	dc.w $FB52
00001C86 0E08                       	dc.b $E, 8
00001C88 0000                       	dc.w Pal_SBZCyc3
00001C8A FB6E                       	dc.w $FB6E
00001C8C 0B08                       	dc.b $B, 8
00001C8E 0000                       	dc.w Pal_SBZCyc5
00001C90 FB70                       	dc.w $FB70
00001C92 0708                       	dc.b 7,	8
00001C94 0000                       	dc.w Pal_SBZCyc6
00001C96 FB72                       	dc.w $FB72
00001C98 1C10                       	dc.b $1C, $10
00001C9A 0000                       	dc.w Pal_SBZCyc7
00001C9C FB7E                       	dc.w $FB7E
00001C9E 0303                       	dc.b 3,	3
00001CA0 0000                       	dc.w Pal_SBZCyc8
00001CA2 FB78                       	dc.w $FB78
00001CA4 0303                       	dc.b 3,	3
00001CA6 0000                       	dc.w Pal_SBZCyc8+2
00001CA8 FB7A                       	dc.w $FB7A
00001CAA 0303                       	dc.b 3,	3
00001CAC 0000                       	dc.w Pal_SBZCyc8+4
00001CAE FB7C                       	dc.w $FB7C
00001CB0                            	even
00001CB0                            	even
00001CB0                            
00001CB0                            Pal_SBZCycList2:
00001CB0                            	include "_inc\SBZ pallet script 2.asm"
00001CB0                            ; ---------------------------------------------------------------------------
00001CB0                            ; Scrap Brain Zone 2 pallet cycling script
00001CB0                            ; ---------------------------------------------------------------------------
00001CB0 0006                       	dc.w 6
00001CB2 0708                       	dc.b 7,	8
00001CB4 0000                       	dc.w Pal_SBZCyc1
00001CB6 FB50                       	dc.w $FB50
00001CB8 0D08                       	dc.b $D, 8
00001CBA 0000                       	dc.w Pal_SBZCyc2
00001CBC FB52                       	dc.w $FB52
00001CBE 0908                       	dc.b 9,	8
00001CC0 0000                       	dc.w Pal_SBZCyc9
00001CC2 FB70                       	dc.w $FB70
00001CC4 0708                       	dc.b 7,	8
00001CC6 0000                       	dc.w Pal_SBZCyc6
00001CC8 FB72                       	dc.w $FB72
00001CCA 0303                       	dc.b 3,	3
00001CCC 0000                       	dc.w Pal_SBZCyc8
00001CCE FB78                       	dc.w $FB78
00001CD0 0303                       	dc.b 3,	3
00001CD2 0000                       	dc.w Pal_SBZCyc8+2
00001CD4 FB7A                       	dc.w $FB7A
00001CD6 0303                       	dc.b 3,	3
00001CD8 0000                       	dc.w Pal_SBZCyc8+4
00001CDA FB7C                       	dc.w $FB7C
00001CDC                            	even
00001CDC                            	even
00001CDC                            
00001CDC                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001CEC                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001CFC                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001D0C                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001D18                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001D28                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001D38                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001D58                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001D62                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001D72                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001D7E                            ; ---------------------------------------------------------------------------
00001D7E                            ; Subroutine to	fade out and fade in
00001D7E                            ; ---------------------------------------------------------------------------
00001D7E                            
00001D7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D7E                            
00001D7E                            
00001D7E                            Pal_FadeTo:
00001D7E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001D84                            
00001D84                            Pal_FadeTo2:
00001D84 7000                       		moveq	#0,d0
00001D86 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001D8A 1038 F626                  		move.b	($FFFFF626).w,d0
00001D8E D0C0                       		adda.w	d0,a0
00001D90 7200                       		moveq	#0,d1
00001D92 1038 F627                  		move.b	($FFFFF627).w,d0
00001D96                            
00001D96                            Pal_ToBlack:
00001D96 30C1                       		move.w	d1,(a0)+
00001D98 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001D9C                            
00001D9C 383C 0015                  		move.w	#$15,d4
00001DA0 1A3C 0009                  		move.b	#9,d5
00001DA4                            
00001DA4                            loc_1DCE:
00001DA4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001DAA 6100 0000                  		bsr.w	DelayProgram
00001DAE 6100                       		bsr.s	Pal_FadeIn
00001DB0 6100 F83C                  		bsr.w	RunPLC_RAM
00001DB4 51CC FFEE                  		dbf	d4,loc_1DCE
00001DB8 4E75                       		rts	
00001DBA                            ; End of function Pal_FadeTo
00001DBA                            
00001DBA                            ; ---------------------------------------------------------------------------
00001DBA                            ; Pallet fade-in subroutine
00001DBA                            ; ---------------------------------------------------------------------------
00001DBA                            
00001DBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DBA                            
00001DBA                            
00001DBA                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001DBA 7000                       		moveq	#0,d0
00001DBC 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DC0 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001DC4 1038 F626                  		move.b	($FFFFF626).w,d0
00001DC8 D0C0                       		adda.w	d0,a0
00001DCA D2C0                       		adda.w	d0,a1
00001DCC 1038 F627                  		move.b	($FFFFF627).w,d0
00001DD0                            
00001DD0                            loc_1DFA:
00001DD0 6100                       		bsr.s	Pal_AddColor
00001DD2 51C8 FFFC                  		dbf	d0,loc_1DFA
00001DD6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001DDC 6600                       		bne.s	locret_1E24
00001DDE 7000                       		moveq	#0,d0
00001DE0 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001DE4 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001DE8 1038 F626                  		move.b	($FFFFF626).w,d0
00001DEC D0C0                       		adda.w	d0,a0
00001DEE D2C0                       		adda.w	d0,a1
00001DF0 1038 F627                  		move.b	($FFFFF627).w,d0
00001DF4                            
00001DF4                            loc_1E1E:
00001DF4 6100                       		bsr.s	Pal_AddColor
00001DF6 51C8 FFFC                  		dbf	d0,loc_1E1E
00001DFA                            
00001DFA                            locret_1E24:
00001DFA 4E75                       		rts	
00001DFC                            ; End of function Pal_FadeIn
00001DFC                            
00001DFC                            
00001DFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DFC                            
00001DFC                            
00001DFC                            Pal_AddColor:				; XREF: Pal_FadeIn
00001DFC 3419                       		move.w	(a1)+,d2
00001DFE 3610                       		move.w	(a0),d3
00001E00 B642                       		cmp.w	d2,d3
00001E02 6700                       		beq.s	loc_1E4E
00001E04 3203                       		move.w	d3,d1
00001E06 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001E0A B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001E0C 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001E0E 30C1                       		move.w	d1,(a0)+	; update pallet
00001E10 4E75                       		rts	
00001E12                            ; ===========================================================================
00001E12                            
00001E12                            Pal_AddGreen:				; XREF: Pal_AddColor
00001E12 3203                       		move.w	d3,d1
00001E14 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E18 B242                       		cmp.w	d2,d1
00001E1A 6200                       		bhi.s	Pal_AddRed
00001E1C 30C1                       		move.w	d1,(a0)+	; update pallet
00001E1E 4E75                       		rts	
00001E20                            ; ===========================================================================
00001E20                            
00001E20                            Pal_AddRed:				; XREF: Pal_AddGreen
00001E20 5458                       		addq.w	#2,(a0)+	; increase red value
00001E22 4E75                       		rts	
00001E24                            ; ===========================================================================
00001E24                            
00001E24                            loc_1E4E:				; XREF: Pal_AddColor
00001E24 5448                       		addq.w	#2,a0
00001E26 4E75                       		rts	
00001E28                            ; End of function Pal_AddColor
00001E28                            
00001E28                            
00001E28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E28                            
00001E28                            PalFadeOut:
00001E28                            Pal_FadeFrom:
00001E28 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001E2E 383C 0015                  		move.w	#$15,d4
00001E32                            loc_1E5C:
00001E32 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E38 6100 0000                  		bsr.w	DelayProgram
00001E3C 6100                       		bsr.s	Pal_FadeOut
00001E3E 6100 F7AE                  		bsr.w	RunPLC_RAM
00001E42 51CC FFEE                  		dbf	d4,loc_1E5C
00001E46 4E75                       		rts	
00001E48                            ; End of function Pal_FadeFrom
00001E48                            
00001E48                            ; ---------------------------------------------------------------------------
00001E48                            ; Pallet fade-out subroutine
00001E48                            ; ---------------------------------------------------------------------------
00001E48                            
00001E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E48                            
00001E48                            
00001E48                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001E48 7000                       		moveq	#0,d0
00001E4A 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E4E 1038 F626                  		move.b	($FFFFF626).w,d0
00001E52 D0C0                       		adda.w	d0,a0
00001E54 1038 F627                  		move.b	($FFFFF627).w,d0
00001E58                            
00001E58                            loc_1E82:
00001E58 6100                       		bsr.s	Pal_DecColor
00001E5A 51C8 FFFC                  		dbf	d0,loc_1E82
00001E5E                            
00001E5E 7000                       		moveq	#0,d0
00001E60 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E64 1038 F626                  		move.b	($FFFFF626).w,d0
00001E68 D0C0                       		adda.w	d0,a0
00001E6A 1038 F627                  		move.b	($FFFFF627).w,d0
00001E6E                            
00001E6E                            loc_1E98:
00001E6E 6100                       		bsr.s	Pal_DecColor
00001E70 51C8 FFFC                  		dbf	d0,loc_1E98
00001E74 4E75                       		rts	
00001E76                            ; End of function Pal_FadeOut
00001E76                            
00001E76                            
00001E76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E76                            
00001E76                            
00001E76                            Pal_DecColor:				; XREF: Pal_FadeOut
00001E76 3410                       		move.w	(a0),d2
00001E78 6700                       		beq.s	loc_1ECC
00001E7A 3202                       		move.w	d2,d1
00001E7C 0241 000E                  		andi.w	#$E,d1
00001E80 6700                       		beq.s	Pal_DecGreen
00001E82 5558                       		subq.w	#2,(a0)+	; decrease red value
00001E84 4E75                       		rts	
00001E86                            ; ===========================================================================
00001E86                            
00001E86                            Pal_DecGreen:				; XREF: Pal_DecColor
00001E86 3202                       		move.w	d2,d1
00001E88 0241 00E0                  		andi.w	#$E0,d1
00001E8C 6700                       		beq.s	Pal_DecBlue
00001E8E 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001E92 4E75                       		rts	
00001E94                            ; ===========================================================================
00001E94                            
00001E94                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001E94 3202                       		move.w	d2,d1
00001E96 0241 0E00                  		andi.w	#$E00,d1
00001E9A 6700                       		beq.s	loc_1ECC
00001E9C 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001EA0 4E75                       		rts	
00001EA2                            ; ===========================================================================
00001EA2                            
00001EA2                            loc_1ECC:				; XREF: Pal_DecColor
00001EA2 5448                       		addq.w	#2,a0
00001EA4 4E75                       		rts	
00001EA6                            ; End of function Pal_DecColor
00001EA6                            
00001EA6                            ; ---------------------------------------------------------------------------
00001EA6                            ; Subroutine to	fill the pallet	with white (special stage)
00001EA6                            ; ---------------------------------------------------------------------------
00001EA6                            
00001EA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EA6                            
00001EA6                            
00001EA6                            Pal_MakeWhite:				; XREF: SpecialStage
00001EA6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001EAC 7000                       		moveq	#0,d0
00001EAE 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EB2 1038 F626                  		move.b	($FFFFF626).w,d0
00001EB6 D0C0                       		adda.w	d0,a0
00001EB8 323C 0EEE                  		move.w	#$EEE,d1
00001EBC 1038 F627                  		move.b	($FFFFF627).w,d0
00001EC0                            
00001EC0                            PalWhite_Loop:
00001EC0 30C1                       		move.w	d1,(a0)+
00001EC2 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001EC6 383C 0015                  		move.w	#$15,d4
00001ECA                            
00001ECA                            loc_1EF4:
00001ECA 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001ED0 6100 0000                  		bsr.w	DelayProgram
00001ED4 6100                       		bsr.s	Pal_WhiteToBlack
00001ED6 6100 F716                  		bsr.w	RunPLC_RAM
00001EDA 51CC FFEE                  		dbf	d4,loc_1EF4
00001EDE 4E75                       		rts	
00001EE0                            ; End of function Pal_MakeWhite
00001EE0                            
00001EE0                            
00001EE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EE0                            
00001EE0                            
00001EE0                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001EE0 7000                       		moveq	#0,d0
00001EE2 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EE6 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001EEA 1038 F626                  		move.b	($FFFFF626).w,d0
00001EEE D0C0                       		adda.w	d0,a0
00001EF0 D2C0                       		adda.w	d0,a1
00001EF2 1038 F627                  		move.b	($FFFFF627).w,d0
00001EF6                            
00001EF6                            loc_1F20:
00001EF6 6100                       		bsr.s	Pal_DecColor2
00001EF8 51C8 FFFC                  		dbf	d0,loc_1F20
00001EFC                            
00001EFC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001F02 6600                       		bne.s	locret_1F4A
00001F04 7000                       		moveq	#0,d0
00001F06 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001F0A 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001F0E 1038 F626                  		move.b	($FFFFF626).w,d0
00001F12 D0C0                       		adda.w	d0,a0
00001F14 D2C0                       		adda.w	d0,a1
00001F16 1038 F627                  		move.b	($FFFFF627).w,d0
00001F1A                            
00001F1A                            loc_1F44:
00001F1A 6100                       		bsr.s	Pal_DecColor2
00001F1C 51C8 FFFC                  		dbf	d0,loc_1F44
00001F20                            
00001F20                            locret_1F4A:
00001F20 4E75                       		rts	
00001F22                            ; End of function Pal_WhiteToBlack
00001F22                            
00001F22                            
00001F22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F22                            
00001F22                            
00001F22                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001F22 3419                       		move.w	(a1)+,d2
00001F24 3610                       		move.w	(a0),d3
00001F26 B642                       		cmp.w	d2,d3
00001F28 6700                       		beq.s	loc_1F78
00001F2A 3203                       		move.w	d3,d1
00001F2C 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F30 6500                       		bcs.s	loc_1F64
00001F32 B242                       		cmp.w	d2,d1
00001F34 6500                       		bcs.s	loc_1F64
00001F36 30C1                       		move.w	d1,(a0)+
00001F38 4E75                       		rts	
00001F3A                            ; ===========================================================================
00001F3A                            
00001F3A                            loc_1F64:				; XREF: Pal_DecColor2
00001F3A 3203                       		move.w	d3,d1
00001F3C 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F40 6500                       		bcs.s	loc_1F74
00001F42 B242                       		cmp.w	d2,d1
00001F44 6500                       		bcs.s	loc_1F74
00001F46 30C1                       		move.w	d1,(a0)+
00001F48 4E75                       		rts	
00001F4A                            ; ===========================================================================
00001F4A                            
00001F4A                            loc_1F74:				; XREF: loc_1F64
00001F4A 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F4C 4E75                       		rts	
00001F4E                            ; ===========================================================================
00001F4E                            
00001F4E                            loc_1F78:				; XREF: Pal_DecColor2
00001F4E 5448                       		addq.w	#2,a0
00001F50 4E75                       		rts	
00001F52                            ; End of function Pal_DecColor2
00001F52                            
00001F52                            ; ---------------------------------------------------------------------------
00001F52                            ; Subroutine to	make a white flash when	you enter a special stage
00001F52                            ; ---------------------------------------------------------------------------
00001F52                            
00001F52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F52                            
00001F52                            
00001F52                            Pal_MakeFlash:				; XREF: SpecialStage
00001F52 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F58 383C 0015                  		move.w	#$15,d4
00001F5C                            
00001F5C                            loc_1F86:
00001F5C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F62 6100 0000                  		bsr.w	DelayProgram
00001F66 6100                       		bsr.s	Pal_ToWhite
00001F68 6100 F684                  		bsr.w	RunPLC_RAM
00001F6C 51CC FFEE                  		dbf	d4,loc_1F86
00001F70 4E75                       		rts	
00001F72                            ; End of function Pal_MakeFlash
00001F72                            
00001F72                            
00001F72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F72                            
00001F72                            
00001F72                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001F72 7000                       		moveq	#0,d0
00001F74 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F78 1038 F626                  		move.b	($FFFFF626).w,d0
00001F7C D0C0                       		adda.w	d0,a0
00001F7E 1038 F627                  		move.b	($FFFFF627).w,d0
00001F82                            
00001F82                            loc_1FAC:
00001F82 6100                       		bsr.s	Pal_AddColor2
00001F84 51C8 FFFC                  		dbf	d0,loc_1FAC
00001F88 7000                       		moveq	#0,d0
00001F8A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001F8E 1038 F626                  		move.b	($FFFFF626).w,d0
00001F92 D0C0                       		adda.w	d0,a0
00001F94 1038 F627                  		move.b	($FFFFF627).w,d0
00001F98                            
00001F98                            loc_1FC2:
00001F98 6100                       		bsr.s	Pal_AddColor2
00001F9A 51C8 FFFC                  		dbf	d0,loc_1FC2
00001F9E 4E75                       		rts	
00001FA0                            ; End of function Pal_ToWhite
00001FA0                            
00001FA0                            
00001FA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FA0                            
00001FA0                            
00001FA0                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001FA0 3410                       		move.w	(a0),d2
00001FA2 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001FA6 6700                       		beq.s	loc_2006
00001FA8 3202                       		move.w	d2,d1
00001FAA 0241 000E                  		andi.w	#$E,d1
00001FAE 0C41 000E                  		cmpi.w	#$E,d1
00001FB2 6700                       		beq.s	loc_1FE2
00001FB4 5458                       		addq.w	#2,(a0)+	; increase red value
00001FB6 4E75                       		rts	
00001FB8                            ; ===========================================================================
00001FB8                            
00001FB8                            loc_1FE2:				; XREF: Pal_AddColor2
00001FB8 3202                       		move.w	d2,d1
00001FBA 0241 00E0                  		andi.w	#$E0,d1
00001FBE 0C41 00E0                  		cmpi.w	#$E0,d1
00001FC2 6700                       		beq.s	loc_1FF4
00001FC4 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001FC8 4E75                       		rts	
00001FCA                            ; ===========================================================================
00001FCA                            
00001FCA                            loc_1FF4:				; XREF: loc_1FE2
00001FCA 3202                       		move.w	d2,d1
00001FCC 0241 0E00                  		andi.w	#$E00,d1
00001FD0 0C41 0E00                  		cmpi.w	#$E00,d1
00001FD4 6700                       		beq.s	loc_2006
00001FD6 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00001FDA 4E75                       		rts	
00001FDC                            ; ===========================================================================
00001FDC                            
00001FDC                            loc_2006:				; XREF: Pal_AddColor2
00001FDC 5448                       		addq.w	#2,a0
00001FDE 4E75                       		rts	
00001FE0                            ; End of function Pal_AddColor2
00001FE0                            
00001FE0                            ; ---------------------------------------------------------------------------
00001FE0                            ; Pallet cycling routine - Sega	logo
00001FE0                            ; ---------------------------------------------------------------------------
00001FE0                            
00001FE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FE0                            
00001FE0                            
00001FE0                            PalCycle_Sega:				; XREF: SegaScreen
00001FE0 4A38 F635                  		tst.b	($FFFFF635).w
00001FE4 6600                       		bne.s	loc_206A
00001FE6 43F8 FB20                  		lea	($FFFFFB20).w,a1
00001FEA 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00001FF0 7205                       		moveq	#5,d1
00001FF2 3038 F632                  		move.w	($FFFFF632).w,d0
00001FF6                            
00001FF6                            loc_2020:
00001FF6 6A00                       		bpl.s	loc_202A
00001FF8 5448                       		addq.w	#2,a0
00001FFA 5341                       		subq.w	#1,d1
00001FFC 5440                       		addq.w	#2,d0
00001FFE 60F6                       		bra.s	loc_2020
00002000                            ; ===========================================================================
00002000                            
00002000                            loc_202A:				; XREF: PalCycle_Sega
00002000 3400                       		move.w	d0,d2
00002002 0242 001E                  		andi.w	#$1E,d2
00002006 6600                       		bne.s	loc_2034
00002008 5440                       		addq.w	#2,d0
0000200A                            
0000200A                            loc_2034:
0000200A 0C40 0060                  		cmpi.w	#$60,d0
0000200E 6400                       		bcc.s	loc_203E
00002010 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002014                            
00002014                            loc_203E:
00002014 5440                       		addq.w	#2,d0
00002016 51C9 FFE8                  		dbf	d1,loc_202A
0000201A 3038 F632                  		move.w	($FFFFF632).w,d0
0000201E 5440                       		addq.w	#2,d0
00002020 3400                       		move.w	d0,d2
00002022 0242 001E                  		andi.w	#$1E,d2
00002026 6600                       		bne.s	loc_2054
00002028 5440                       		addq.w	#2,d0
0000202A                            
0000202A                            loc_2054:
0000202A 0C40 0064                  		cmpi.w	#$64,d0
0000202E 6D00                       		blt.s	loc_2062
00002030 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002036 70F4                       		moveq	#-$C,d0
00002038                            
00002038                            loc_2062:
00002038 31C0 F632                  		move.w	d0,($FFFFF632).w
0000203C 7001                       		moveq	#1,d0
0000203E 4E75                       		rts	
00002040                            ; ===========================================================================
00002040                            
00002040                            loc_206A:				; XREF: loc_202A
00002040 5338 F634                  		subq.b	#1,($FFFFF634).w
00002044 6A00                       		bpl.s	loc_20BC
00002046 11FC 0004 F634             		move.b	#4,($FFFFF634).w
0000204C 3038 F632                  		move.w	($FFFFF632).w,d0
00002050 0640 000C                  		addi.w	#$C,d0
00002054 0C40 0030                  		cmpi.w	#$30,d0
00002058 6500                       		bcs.s	loc_2088
0000205A 7000                       		moveq	#0,d0
0000205C 4E75                       		rts	
0000205E                            ; ===========================================================================
0000205E                            
0000205E                            loc_2088:				; XREF: loc_206A
0000205E 31C0 F632                  		move.w	d0,($FFFFF632).w
00002062 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002068 41F0 0000                  		lea	(a0,d0.w),a0
0000206C 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002070 22D8                       		move.l	(a0)+,(a1)+
00002072 22D8                       		move.l	(a0)+,(a1)+
00002074 3298                       		move.w	(a0)+,(a1)
00002076 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000207A 7000                       		moveq	#0,d0
0000207C 722C                       		moveq	#$2C,d1
0000207E                            
0000207E                            loc_20A8:
0000207E 3400                       		move.w	d0,d2
00002080 0242 001E                  		andi.w	#$1E,d2
00002084 6600                       		bne.s	loc_20B2
00002086 5440                       		addq.w	#2,d0
00002088                            
00002088                            loc_20B2:
00002088 3390 0000                  		move.w	(a0),(a1,d0.w)
0000208C 5440                       		addq.w	#2,d0
0000208E 51C9 FFEE                  		dbf	d1,loc_20A8
00002092                            
00002092                            loc_20BC:
00002092 7001                       		moveq	#1,d0
00002094 4E75                       		rts	
00002096                            ; End of function PalCycle_Sega
00002096                            
00002096                            ; ===========================================================================
00002096                            
00002096                            Pal_Sega1:	incbin	pallet\sega1.bin
000020A2                            Pal_Sega2:	incbin	pallet\sega2.bin
000020D2                            
000020D2                            ; ---------------------------------------------------------------------------
000020D2                            ; Subroutines to load pallets
000020D2                            ; ---------------------------------------------------------------------------
000020D2                            
000020D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020D2                            
000020D2                            
000020D2                            PalLoad1:
000020D2 43F9 0000 0000             		lea	(PalPointers).l,a1
000020D8 E748                       		lsl.w	#3,d0
000020DA D2C0                       		adda.w	d0,a1
000020DC 2459                       		movea.l	(a1)+,a2
000020DE 3659                       		movea.w	(a1)+,a3
000020E0 D6FC 0080                  		adda.w	#$80,a3
000020E4 3E19                       		move.w	(a1)+,d7
000020E6                            
000020E6                            loc_2110:
000020E6 26DA                       		move.l	(a2)+,(a3)+
000020E8 51CF FFFC                  		dbf	d7,loc_2110
000020EC 4E75                       		rts	
000020EE                            ; End of function PalLoad1
000020EE                            
000020EE                            
000020EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020EE                            
000020EE                            
000020EE                            PalLoad2:
000020EE 43F9 0000 0000             		lea	(PalPointers).l,a1
000020F4 E748                       		lsl.w	#3,d0
000020F6 D2C0                       		adda.w	d0,a1
000020F8 2459                       		movea.l	(a1)+,a2
000020FA 3659                       		movea.w	(a1)+,a3
000020FC 3E19                       		move.w	(a1)+,d7
000020FE                            
000020FE                            loc_2128:
000020FE 26DA                       		move.l	(a2)+,(a3)+
00002100 51CF FFFC                  		dbf	d7,loc_2128
00002104 4E75                       		rts	
00002106                            ; End of function PalLoad2
00002106                            
00002106                            ; ---------------------------------------------------------------------------
00002106                            ; Underwater pallet loading subroutine
00002106                            ; ---------------------------------------------------------------------------
00002106                            
00002106                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002106                            
00002106                            
00002106                            PalLoad3_Water:
00002106 43F9 0000 0000             		lea	(PalPointers).l,a1
0000210C E748                       		lsl.w	#3,d0
0000210E D2C0                       		adda.w	d0,a1
00002110 2459                       		movea.l	(a1)+,a2
00002112 3659                       		movea.w	(a1)+,a3
00002114 96FC 0080                  		suba.w	#$80,a3
00002118 3E19                       		move.w	(a1)+,d7
0000211A                            
0000211A                            loc_2144:
0000211A 26DA                       		move.l	(a2)+,(a3)+
0000211C 51CF FFFC                  		dbf	d7,loc_2144
00002120 4E75                       		rts	
00002122                            ; End of function PalLoad3_Water
00002122                            
00002122                            
00002122                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002122                            
00002122                            
00002122                            PalLoad4_Water:
00002122 43F9 0000 0000             		lea	(PalPointers).l,a1
00002128 E748                       		lsl.w	#3,d0
0000212A D2C0                       		adda.w	d0,a1
0000212C 2459                       		movea.l	(a1)+,a2
0000212E 3659                       		movea.w	(a1)+,a3
00002130 96FC 0100                  		suba.w	#$100,a3
00002134 3E19                       		move.w	(a1)+,d7
00002136                            
00002136                            loc_2160:
00002136 26DA                       		move.l	(a2)+,(a3)+
00002138 51CF FFFC                  		dbf	d7,loc_2160
0000213C 4E75                       		rts	
0000213E                            ; End of function PalLoad4_Water
0000213E                            
0000213E                            ; ===========================================================================
0000213E                            ; ---------------------------------------------------------------------------
0000213E                            ; Pallet pointers
0000213E                            ; ---------------------------------------------------------------------------
0000213E                            PalPointers:
0000213E                            	include "_inc\Pallet pointers.asm"
0000213E                            ; ---------------------------------------------------------------------------
0000213E                            ; Pallet pointers
0000213E                            ; ---------------------------------------------------------------------------
0000213E 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002142 FB00                       	dc.w $FB00		; RAM address
00002144 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002146 0000 0000                  	dc.l Pal_Title
0000214A FB00                       	dc.w $FB00
0000214C 001F                       	dc.w $1F
0000214E 0000 0000                  	dc.l Pal_LevelSel
00002152 FB00                       	dc.w $FB00
00002154 001F                       	dc.w $1F
00002156 0000 0000                  	dc.l Pal_Sonic
0000215A FB00                       	dc.w $FB00
0000215C 0007                       	dc.w 7
0000215E 0000 0000                  	dc.l Pal_GHZ
00002162 FB20                       	dc.w $FB20
00002164 0017                       	dc.w $17
00002166 0000 0000                  	dc.l Pal_LZ
0000216A FB20                       	dc.w $FB20
0000216C 0017                       	dc.w $17
0000216E 0000 0000                  	dc.l Pal_MZ
00002172 FB20                       	dc.w $FB20
00002174 0017                       	dc.w $17
00002176 0000 0000                  	dc.l Pal_SLZ
0000217A FB20                       	dc.w $FB20
0000217C 0017                       	dc.w $17
0000217E 0000 0000                  	dc.l Pal_SYZ
00002182 FB20                       	dc.w $FB20
00002184 0017                       	dc.w $17
00002186 0000 0000                  	dc.l Pal_SBZ1
0000218A FB20                       	dc.w $FB20
0000218C 0017                       	dc.w $17
0000218E 0000 0000                  	dc.l Pal_Special
00002192 FB00                       	dc.w $FB00
00002194 001F                       	dc.w $1F
00002196 0000 0000                  	dc.l Pal_LZWater
0000219A FB00                       	dc.w $FB00
0000219C 001F                       	dc.w $1F
0000219E 0000 0000                  	dc.l Pal_SBZ3
000021A2 FB20                       	dc.w $FB20
000021A4 0017                       	dc.w $17
000021A6 0000 0000                  	dc.l Pal_SBZ3Water
000021AA FB00                       	dc.w $FB00
000021AC 001F                       	dc.w $1F
000021AE 0000 0000                  	dc.l Pal_SBZ2
000021B2 FB20                       	dc.w $FB20
000021B4 0017                       	dc.w $17
000021B6 0000 0000                  	dc.l Pal_LZSonWater
000021BA FB00                       	dc.w $FB00
000021BC 0007                       	dc.w 7
000021BE 0000 0000                  	dc.l Pal_SBZ3SonWat
000021C2 FB00                       	dc.w $FB00
000021C4 0007                       	dc.w 7
000021C6 0000 0000                  	dc.l Pal_SpeResult
000021CA FB00                       	dc.w $FB00
000021CC 001F                       	dc.w $1F
000021CE 0000 0000                  	dc.l Pal_SpeContinue
000021D2 FB00                       	dc.w $FB00
000021D4 000F                       	dc.w $F
000021D6 0000 0000                  	dc.l Pal_Ending
000021DA FB00                       	dc.w $FB00
000021DC 001F                       	dc.w $1F
000021DE 0000 0000                  	dc.l Pal_Idiot
000021E2 FB20                       	dc.w $FB20
000021E4 0007                       	dc.w 7
000021E6 0000 0000                  	dc.l Pal_BHZ
000021EA FB20                       	dc.w $FB20
000021EC 0017                       	dc.w $17
000021EE 0000 0000                  	dc.l Pal_Gronic
000021F2 FB00                       	dc.w $FB00
000021F4 0007                       	dc.w 7
000021F6 0000 0000                  	dc.l Pal_LZGroWater
000021FA FB00                       	dc.w $FB00
000021FC 0007                       	dc.w 7
000021FE 0000 0000                  	dc.l Pal_SBZ3GroWat
00002202 FB00                       	dc.w $FB00
00002204 0007                       	dc.w 7
00002206 0000 0000                  	dc.l Pal_Anakama
0000220A FB00                       	dc.w $FB00
0000220C 0007                       	dc.w 7
0000220C 0007                       	dc.w 7
0000220E                            
0000220E                            ; ---------------------------------------------------------------------------
0000220E                            ; Pallet data
0000220E                            ; ---------------------------------------------------------------------------
0000220E                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
0000228E                            Pal_Title:	incbin	pallet\title.bin
0000230E                            Pal_LevelSel:	incbin	pallet\levelsel.bin
0000238E                            Pal_Sonic:	incbin	pallet\sonic.bin
000023AE                            Pal_GHZ:	incbin	pallet\ghz.bin
0000240E                            Pal_LZ:		incbin	pallet\lz.bin
0000246E                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000024EE                            Pal_MZ:		incbin	pallet\mz.bin
0000254E                            Pal_SLZ:	incbin	pallet\slz.bin
000025AE                            Pal_SYZ:	incbin	pallet\syz.bin
0000260E                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
0000266E                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000026CE                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000274E                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000027AE                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
0000282E                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
0000284E                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
0000286E                            Pal_BHZ:	incbin	pallet\bhz.bin
000028CE                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
0000294E                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
0000298E                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002A0E                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002A2E                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002A4E                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002A6E                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002A8E                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002B0E                            
00002B0E                            ; ---------------------------------------------------------------------------
00002B0E                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002B0E                            ; ---------------------------------------------------------------------------
00002B0E                            
00002B0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B0E                            
00002B0E                            VSync:
00002B0E                            DelayProgram:				; XREF: PauseGame
00002B0E 46FC 2300                  		move	#$2300,sr
00002B12                            
00002B12                            loc_29AC:
00002B12 4A38 F62A                  		tst.b	($FFFFF62A).w
00002B16 66FA                       		bne.s	loc_29AC
00002B18 4E75                       		rts	
00002B1A                            ; End of function DelayProgram
00002B1A                            
00002B1A                            ; ---------------------------------------------------------------------------
00002B1A                            ; Subroutine to	generate a pseudo-random number	in d0
00002B1A                            ; ---------------------------------------------------------------------------
00002B1A                            
00002B1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B1A                            
00002B1A                            CalcRandom: 
00002B1A                            RandomNumber:
00002B1A 2238 F636                  		move.l	($FFFFF636).w,d1
00002B1E 6600                       		bne.s	loc_29C0
00002B20 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002B26                            
00002B26                            loc_29C0:
00002B26 2001                       		move.l	d1,d0
00002B28 E581                       		asl.l	#2,d1
00002B2A D280                       		add.l	d0,d1
00002B2C E781                       		asl.l	#3,d1
00002B2E D280                       		add.l	d0,d1
00002B30 3001                       		move.w	d1,d0
00002B32 4841                       		swap	d1
00002B34 D041                       		add.w	d1,d0
00002B36 3200                       		move.w	d0,d1
00002B38 4841                       		swap	d1
00002B3A 21C1 F636                  		move.l	d1,($FFFFF636).w
00002B3E 4E75                       		rts	
00002B40                            ; End of function RandomNumber
00002B40                            
00002B40                            
00002B40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B40                            
00002B40                            CalcSinCos:
00002B40                            CalcSine:				; XREF: SS_BGAnimate; et al
00002B40 0240 00FF                  		andi.w	#$FF,d0
00002B44 D040                       		add.w	d0,d0
00002B46 0640 0080                  		addi.w	#$80,d0
00002B4A 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002B4E 0440 0080                  		subi.w	#$80,d0
00002B52 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002B56 4E75                       		rts	
00002B58                            ; End of function CalcSine
00002B58                            
00002B58                            ; ===========================================================================
00002B58                            
00002B58                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002DD8                            
00002DD8                            ; ===========================================================================
00002DD8 48E7 6000                  		movem.l	d1-d2,-(sp)
00002DDC 3200                       		move.w	d0,d1
00002DDE 4841                       		swap	d1
00002DE0 7000                       		moveq	#0,d0
00002DE2 3200                       		move.w	d0,d1
00002DE4 7407                       		moveq	#7,d2
00002DE6                            
00002DE6                            loc_2C80:
00002DE6 E599                       		rol.l	#2,d1
00002DE8 D040                       		add.w	d0,d0
00002DEA 5240                       		addq.w	#1,d0
00002DEC 9240                       		sub.w	d0,d1
00002DEE 6400                       		bcc.s	loc_2C9A
00002DF0 D240                       		add.w	d0,d1
00002DF2 5340                       		subq.w	#1,d0
00002DF4 51CA FFF0                  		dbf	d2,loc_2C80
00002DF8 E248                       		lsr.w	#1,d0
00002DFA 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002DFE 4E75                       		rts	
00002E00                            ; ===========================================================================
00002E00                            
00002E00                            loc_2C9A:
00002E00 5240                       		addq.w	#1,d0
00002E02 51CA FFE2                  		dbf	d2,loc_2C80
00002E06 E248                       		lsr.w	#1,d0
00002E08 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002E0C 4E75                       		rts	
00002E0E                            
00002E0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002E0E                            
00002E0E                            
00002E0E                            CalcAngle:
00002E0E 48E7 1800                  		movem.l	d3-d4,-(sp)
00002E12 7600                       		moveq	#0,d3
00002E14 7800                       		moveq	#0,d4
00002E16 3601                       		move.w	d1,d3
00002E18 3802                       		move.w	d2,d4
00002E1A 8843                       		or.w	d3,d4
00002E1C 6700                       		beq.s	loc_2D04
00002E1E 3802                       		move.w	d2,d4
00002E20 4A43                       		tst.w	d3
00002E22 6A00 0000                  		bpl.w	loc_2CC2
00002E26 4443                       		neg.w	d3
00002E28                            
00002E28                            loc_2CC2:
00002E28 4A44                       		tst.w	d4
00002E2A 6A00 0000                  		bpl.w	loc_2CCA
00002E2E 4444                       		neg.w	d4
00002E30                            
00002E30                            loc_2CCA:
00002E30 B843                       		cmp.w	d3,d4
00002E32 6400 0000                  		bcc.w	loc_2CDC
00002E36 E18C                       		lsl.l	#8,d4
00002E38 88C3                       		divu.w	d3,d4
00002E3A 7000                       		moveq	#0,d0
00002E3C 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002E40 6000                       		bra.s	loc_2CE6
00002E42                            ; ===========================================================================
00002E42                            
00002E42                            loc_2CDC:				; XREF: CalcAngle
00002E42 E18B                       		lsl.l	#8,d3
00002E44 86C4                       		divu.w	d4,d3
00002E46 7040                       		moveq	#$40,d0
00002E48 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002E4C                            
00002E4C                            loc_2CE6:
00002E4C 4A41                       		tst.w	d1
00002E4E 6A00 0000                  		bpl.w	loc_2CF2
00002E52 4440                       		neg.w	d0
00002E54 0640 0080                  		addi.w	#$80,d0
00002E58                            
00002E58                            loc_2CF2:
00002E58 4A42                       		tst.w	d2
00002E5A 6A00 0000                  		bpl.w	loc_2CFE
00002E5E 4440                       		neg.w	d0
00002E60 0640 0100                  		addi.w	#$100,d0
00002E64                            
00002E64                            loc_2CFE:
00002E64 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002E68 4E75                       		rts	
00002E6A                            ; ===========================================================================
00002E6A                            
00002E6A                            loc_2D04:				; XREF: CalcAngle
00002E6A 303C 0040                  		move.w	#$40,d0
00002E6E 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002E72 4E75                       		rts	
00002E74                            ; End of function CalcAngle
00002E74                            
00002E74                            ; ===========================================================================
00002E74                            
00002E74                            Angle_Data:	incbin	misc\angles.bin
00002F76                            
00002F76                            ; ===========================================================================
00002F76                            
00002F76                            ; ---------------------------------------------------------------------------
00002F76                            ; Sega screen
00002F76                            ; ---------------------------------------------------------------------------
00002F76                            
00002F76                            SegaScreen:				; XREF: GameModeArray
00002F76 103C 00E4                  		move.b	#$E4,d0
00002F7A 6100 E422                  		bsr.w	PlaySound_Special ; stop music
00002F7E 6100 E660                  		bsr.w	ClearPLC
00002F82 6100 EEA4                  		bsr.w	Pal_FadeFrom
00002F86 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F8C 3CBC 8004                  		move.w	#$8004,(a6)
00002F90 3CBC 8230                  		move.w	#$8230,(a6)
00002F94 3CBC 8407                  		move.w	#$8407,(a6)
00002F98 3CBC 8700                  		move.w	#$8700,(a6)
00002F9C 3CBC 8B00                  		move.w	#$8B00,(a6)
00002FA0 4238 F64E                  		clr.b	($FFFFF64E).w
00002FA4 46FC 2700                  		move	#$2700,sr
00002FA8 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002FAC 0200 00BF                  		andi.b	#$BF,d0
00002FB0 33C0 00C0 0004             		move.w	d0,($C00004).l
00002FB6 6100 E30E                  		bsr.w	ClearScreen
00002FBA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002FC4 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002FCA 6100 E476                  		bsr.w	NemDec
00002FCE 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FD4 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002FDA 303C 0000                  		move.w	#0,d0
00002FDE 6100 E740                  		bsr.w	EniDec
00002FE2 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FE8 203C 6510 0003             		move.l	#$65100003,d0
00002FEE 7217                       		moveq	#$17,d1
00002FF0 7407                       		moveq	#7,d2
00002FF2 6100 E42E                  		bsr.w	ShowVDPGraphics
00002FF6 43F9 00FF 0180             		lea	($FF0180).l,a1
00002FFC 203C 4000 0003             		move.l	#$40000003,d0
00003002 7227                       		moveq	#$27,d1
00003004 741B                       		moveq	#$1B,d2
00003006 6100 E41A                  		bsr.w	ShowVDPGraphics
0000300A 7000                       		moveq	#0,d0
0000300C 6100 F0E0                  		bsr.w	PalLoad2	; load Sega logo pallet
00003010 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00003016 31FC 0000 F634             		move.w	#0,($FFFFF634).w
0000301C 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003022 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00003028 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000302C 0000 0040                  		ori.b	#$40,d0
00003030 33C0 00C0 0004             		move.w	d0,($C00004).l
00003036                            
00003036                            Sega_WaitPallet:
00003036 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000303C 6100 FAD0                  		bsr.w	DelayProgram
00003040 6100 EF9E                  		bsr.w	PalCycle_Sega
00003044 66F0                       		bne.s	Sega_WaitPallet
00003046                            
00003046 103C 00E1                  		move.b	#$E1,d0
0000304A 6100 E352                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
0000304E 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003054 6100 FAB8                  		bsr.w	DelayProgram
00003058 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000305E                            
0000305E                            Sega_WaitEnd:
0000305E 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003064 6100 FAA8                  		bsr.w	DelayProgram
00003068 4A78 F614                  		tst.w	($FFFFF614).w
0000306C 6700                       		beq.s	Sega_GotoTitle
0000306E 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003074 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003076                            
00003076                            Sega_GotoTitle:
00003076 11FC 0004 F600             		move.b	#$4,($FFFFF600).w ; go to title screen
0000307C 4E75                       		rts	
0000307E                            ; ===========================================================================
0000307E                            
0000307E                            ; ---------------------------------------------------------------------------
0000307E                            ; Title	screen
0000307E                            ; ---------------------------------------------------------------------------
0000307E                            
0000307E                            TitleScreen:				; XREF: GameModeArray
0000307E 103C 00E4                  		move.b	#$E4,d0
00003082 6100 E31A                  		bsr.w	PlaySound_Special ; stop music
00003086 6100 EDA0                  		bsr.w	Pal_FadeFrom
0000308A 6100 E554                  		bsr.w	ClearPLC
0000308E 46FC 2700                  		move	#$2700,sr
00003092 6100 E2C0                  		bsr.w	SoundDriverLoad
00003096 4DF9 00C0 0004             		lea	($C00004).l,a6
0000309C 3CBC 8004                  		move.w	#$8004,(a6)
000030A0 3CBC 8230                  		move.w	#$8230,(a6)
000030A4 3CBC 8407                  		move.w	#$8407,(a6)
000030A8 3CBC 9001                  		move.w	#$9001,(a6)
000030AC 3CBC 9200                  		move.w	#$9200,(a6)
000030B0 3CBC 8B03                  		move.w	#$8B03,(a6)
000030B4 3CBC 8720                  		move.w	#$8720,(a6)
000030B8 4238 F64E                  		clr.b	($FFFFF64E).w
000030BC 6100 E208                  		bsr.w	ClearScreen
000030C0 43F8 D000                  		lea	($FFFFD000).w,a1
000030C4 7000                       		moveq	#0,d0
000030C6 323C 07FF                  		move.w	#$7FF,d1
000030CA                            
000030CA                            Title_ClrObjRam:
000030CA 22C0                       		move.l	d0,(a1)+
000030CC 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000030D0                            
000030D0                            ; gomer
000030D0 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030DA 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
000030E0 6100 E360                  		bsr.w	NemDec
000030E4 7003                       		moveq	#3,d0		; load Sonic's pallet
000030E6 6100 EFEA                  		bsr.w	PalLoad1
000030EA                            
000030EA 43F9 00FF 0000             		lea	($FF0000).l,a1
000030F0 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
000030F6 303C 0000                  		move.w	#0,d0
000030FA 6100 E624                  		bsr.w	EniDec
000030FE                            ; help how the fuck can i do this IT SHOWS NOTHING
000030FE 6100 EC7E                  		bsr.w	Pal_FadeTo
00003102 43F9 00FF 0000             		lea	($FF0000).l,a1
00003108 203C 4000 0003             		move.l	#$40000003,d0
0000310E 7227                       		moveq	#$27,d1
00003110 741B                       		moveq	#$1B,d2
00003112 6100 E30E                  		bsr.w	ShowVDPGraphics
00003116                            
00003116                            
00003116 43F9 00FF 0000             		lea	($FF0000).l,a1
0000311C 203C 6000 0003             		move.l	#$60000003,d0
00003122 7227                       		moveq	#$27,d1
00003124 741B                       		moveq	#$1B,d2
00003126                            
00003126 6100 ED00                  		bsr.w	Pal_FadeFrom
0000312A                            
0000312A                            
0000312A 6100 E19A                  		bsr.w	ClearScreen
0000312E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003138 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000313E 6100 E302                  		bsr.w	NemDec
00003142 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
0000314C 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003152 6100 E2EE                  		bsr.w	NemDec
00003156 43F9 00FF 0000             		lea	($FF0000).l,a1
0000315C 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003162 303C 0000                  		move.w	#0,d0
00003166 6100 E5B8                  		bsr.w	EniDec
0000316A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003170 203C 4000 0003             		move.l	#$40000003,d0
00003176 7227                       		moveq	#$27,d1
00003178 741B                       		moveq	#$1B,d2
0000317A 6100 E2A6                  		bsr.w	ShowVDPGraphics
0000317E 6100 ECA8                  		bsr.w	Pal_FadeFrom
00003182 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003186 7000                       		moveq	#0,d0
00003188 323C 001F                  		move.w	#$1F,d1
0000318C                            
0000318C                            
0000318C                            Title_ClrPallet:
0000318C 22C0                       		move.l	d0,(a1)+
0000318E 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003192                            
00003192 7003                       		moveq	#3,d0		; load Sonic's pallet
00003194 6100 EF3C                  		bsr.w	PalLoad1
00003198 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
0000319E 4EB9 0000 0000             		jsr	ObjectsLoad
000031A4 4EB9 0000 0000             		jsr	BuildSprites
000031AA 6100 EBD2                  		bsr.w	Pal_FadeTo
000031AE 46FC 2700                  		move	#$2700,sr
000031B2 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000031BC 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000031C2 6100 E27E                  		bsr.w	NemDec
000031C6 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
000031D0 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000031D6 6100 E26A                  		bsr.w	NemDec
000031DA 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
000031E4 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
000031EA 6100 E256                  		bsr.w	NemDec
000031EE 4DF9 00C0 0000             		lea	($C00000).l,a6
000031F4 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000031FC 4BF9 0000 05F6             		lea	(Art_Text).l,a5
00003202 323C 0998                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003206                            
00003206                            Title_LoadText:
00003206 2C9D                       		move.l	(a5)+,(a6)
00003208 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
0000320C                            
0000320C 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003212 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003218 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000321E 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003224 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
0000322A 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003230 6100 0000                  		bsr.w	LevelSizeLoad
00003234 6100 0000                  		bsr.w	DeformBgLayer
00003238                            
00003238 43F8 B000                  		lea	($FFFFB000).w,a1
0000323C 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003242 303C 0000                  		move.w	#0,d0
00003246 6100 E4D8                  		bsr.w	EniDec
0000324A 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003250 43F9 00FF 0000             		lea	($FF0000).l,a1
00003256 6100 E646                  		bsr.w	KosDec
0000325A 6100 0000                  		bsr.w	LevelLayoutLoad
0000325E                            
0000325E 46FC 2700                  		move	#$2700,sr
00003262 6100 E062                  		bsr.w	ClearScreen
00003266 4BF9 00C0 0004             		lea	($C00004).l,a5
0000326C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003272 47F8 F708                  		lea	($FFFFF708).w,a3
00003276 49F8 A440                  		lea	($FFFFA440).w,a4
0000327A 343C 6000                  		move.w	#$6000,d2
0000327E 6100 0000                  		bsr.w	LoadTilesFromStart2
00003282 43F9 00FF 0000             		lea	($FF0000).l,a1
00003288 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
0000328E 303C 0000                  		move.w	#0,d0
00003292 6100 E48C                  		bsr.w	EniDec
00003296 43F9 00FF 0000             		lea	($FF0000).l,a1
0000329C 203C 4206 0003             		move.l	#$42060003,d0
000032A2 7221                       		moveq	#$21,d1
000032A4 7415                       		moveq	#$15,d2
000032A6 6100 E17A                  		bsr.w	ShowVDPGraphics
000032AA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000032B4 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000032BA 6100 E186                  		bsr.w	NemDec
000032BE 7001                       		moveq	#1,d0		; load title screen pallet
000032C0 6100 EE10                  		bsr.w	PalLoad1
000032C4 103C 008A                  		move.b	#$8A,d0		; play title screen music
000032C8 6100 E0D4                  		bsr.w	PlaySound_Special
000032CC 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000032D2 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
000032D8 43F8 D080                  		lea	($FFFFD080).w,a1
000032DC 7000                       		moveq	#0,d0
000032DE 323C 000F                  		move.w	#$F,d1
000032E2                            
000032E2                            Title_ClrObjRam2:
000032E2 22C0                       		move.l	d0,(a1)+
000032E4 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000032E8                            
000032E8 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
000032EE 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000032F4 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000032FA 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003300 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003306 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
0000330C 4EB9 0000 0000             		jsr	ObjectsLoad
00003312 6100 0000                  		bsr.w	DeformBgLayer
00003316 4EB9 0000 0000             		jsr	BuildSprites
0000331C 7000                       		moveq	#0,d0
0000331E 6100 E294                  		bsr.w	LoadPLC2
00003322 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003328 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000332E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003332 0000 0040                  		ori.b	#$40,d0
00003336 33C0 00C0 0004             		move.w	d0,($C00004).l
0000333C 6100 EA40                  		bsr.w	Pal_FadeTo
00003340                            
00003340                            loc_317C:
00003340 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003346 6100 F7C6                  		bsr.w	DelayProgram
0000334A 4EB9 0000 0000             		jsr	ObjectsLoad
00003350 6100 0000                  		bsr.w	DeformBgLayer
00003354 4EB9 0000 0000             		jsr	BuildSprites
0000335A 6100 E60C                  		bsr.w	PalCycle_Title
0000335E 6100 E28E                  		bsr.w	RunPLC_RAM
00003362 3038 D008                  		move.w	($FFFFD008).w,d0
00003366 5440                       		addq.w	#2,d0
00003368 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
0000336C 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003370 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003372 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003378 4E75                       		rts	
0000337A                            ; ===========================================================================
0000337A                            
0000337A                            Title_ChkRegion:
0000337A 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
0000337E 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003380 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003386 6000                       		bra.s	Title_EnterCheat
00003388                            ; ===========================================================================
00003388                            
00003388                            Title_RegionJ:				; XREF: Title_ChkRegion
00003388 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
0000338E                            
0000338E                            Title_EnterCheat:			; XREF: Title_ChkRegion
0000338E 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003392 D0C0                       		adda.w	d0,a0
00003394 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003398 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
0000339C B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
0000339E 6600                       		bne.s	loc_3210	; if not, branch
000033A0 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000033A4 4A00                       		tst.b	d0
000033A6 6600                       		bne.s	Title_CountC
000033A8 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000033AC 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000033B0 E249                       		lsr.w	#1,d1
000033B2 0241 0003                  		andi.w	#3,d1
000033B6 6700                       		beq.s	Title_PlayRing
000033B8 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000033BC 6A00                       		bpl.s	Title_PlayRing
000033BE 7201                       		moveq	#1,d1
000033C0 1181 1001                  		move.b	d1,1(a0,d1.w)
000033C4                            
000033C4                            Title_PlayRing:
000033C4 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000033CA 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000033CE 6100 DFCE                  		bsr.w	PlaySound_Special
000033D2 6000                       		bra.s	Title_CountC
000033D4                            ; ===========================================================================
000033D4                            
000033D4                            loc_3210:				; XREF: Title_EnterCheat
000033D4 4A00                       		tst.b	d0
000033D6 6700                       		beq.s	Title_CountC
000033D8 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000033DE 6700                       		beq.s	Title_CountC
000033E0 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000033E6                            
000033E6                            Title_CountC:
000033E6 1038 F605                  		move.b	($FFFFF605).w,d0
000033EA 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000033EE 6700                       		beq.s	loc_3230	; if not, branch
000033F0 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000033F4                            
000033F4                            loc_3230:
000033F4 4A78 F614                  		tst.w	($FFFFF614).w
000033F8 6700 0000                  		beq.w	Demo
000033FC                            		; (temporary until we have an actual options screen)
000033FC 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
00003402 6700                       		beq.s	@notc
00003404                            
00003404 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
00003408 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
0000340E 6D00                       		blt.s	@notoverflow
00003410 11FC 0000 FFE8             		move.b	#0,(v_character).w
00003416                            	@notoverflow:
00003416 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000341A 6100 DF82                  		bsr.w	PlaySound_Special
0000341E                            	@notc:
0000341E 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003424 6700 FF1A                  		beq.w	loc_317C	; if not, branch
00003428                            
00003428                            Title_ChkLevSel:
00003428 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
0000342E 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003432                            		
00003432                            		
00003432 7002                       		moveq	#2,d0
00003434 6100 ECB8                  		bsr.w	PalLoad2	; load level select pallet
00003438 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000343C 7000                       		moveq	#0,d0
0000343E 323C 00DF                  		move.w	#$DF,d1
00003442                            
00003442                            Title_ClrScroll:
00003442 22C0                       		move.l	d0,(a1)+
00003444 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003448                            
00003448 21C0 F616                  		move.l	d0,($FFFFF616).w
0000344C 46FC 2700                  		move	#$2700,sr
00003450 4DF9 00C0 0000             		lea	($C00000).l,a6
00003456 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003460 323C 03FF                  		move.w	#$3FF,d1
00003464                            
00003464                            Title_ClrVram:
00003464 2C80                       		move.l	d0,(a6)
00003466 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000346A                            
0000346A 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
0000346E 6700 0000                  		beq.w	GotoOptions	; if not, play level
00003472                            
00003472 6100 0000                  		bsr.w	LevSelTextLoad
00003476                            		
00003476                            		; sound test fix
00003476 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000347A 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
00003480                            		
00003480 363C C65F                  		move.w	#$C680-$21,d3 ; selected
00003484 0C46 0014                  		cmpi.w	#$14,d6
00003488 6700                       		beq.s	@issndtst
0000348A 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
0000348E                            	@issndtst:
0000348E 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
00003492 31C6 FF82                  		move.w	d6,($FFFFFF82).w
00003496                            		
00003496 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
0000349A 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000034A2                            		
000034A2 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000034A8 6700                       		beq.s	@issndtst2
000034AA                            		
000034AA 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
000034B0 6100 0000                  		bsr.w	CStringSlop
000034B4 6000                       		bra.s	LevelSelect
000034B6                            	@issndtst2:
000034B6 43F9 0000 0000             		lea	(Controls_SND).l,a1
000034BC 6100 0000                  		bsr.w	CStringSlop
000034C0                            		
000034C0                            ; ---------------------------------------------------------------------------
000034C0                            ; Level	Select
000034C0                            ; ---------------------------------------------------------------------------
000034C0                            LevelSelect:
000034C0 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000034C6 6100 F646                  		bsr.w	DelayProgram
000034CA 6100 0000                  		bsr.w	LevSelControls
000034CE 6100 E11E                  		bsr.w	RunPLC_RAM
000034D2 4AB8 F680                  		tst.l	($FFFFF680).w
000034D6 66E8                       		bne.s	LevelSelect
000034D8 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000034DE 67E0                       		beq.s	LevelSelect	; if not, branch
000034E0 3038 FF82                  		move.w	($FFFFFF82).w,d0
000034E4 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
000034E8 6600                       		bne.s	@dont	; if not, dont blow this place up
000034EA                            			
000034EA 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
000034F0 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000034F6 6100 F616                  		bsr.w	DelayProgram
000034FA                            	@dont:
000034FA 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
000034FE 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003500                            		
00003500 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
00003506 67B8                       		beq.s	LevelSelect	; if not, branch
00003508                            		
00003508 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
0000350E 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
00003510                            		
00003510 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003514 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003518                            		
00003518 4EB9 0000 0000             		jsr		ShowNow_Playing
0000351E 60A0                       		bra.s	LevelSelect
00003520                            ; ===========================================================================
00003520                            
00003520                            LevSel_SEGA:				; XREF: LevelSelect
00003520 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
00003526 4E75                       		rts	
00003528                            ; ===========================================================================
00003528                            
00003528                            LevSel_Ending:				; XREF: LevelSelect
00003528 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
0000352E 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003534 4E75                       		rts	
00003536                            ; ===========================================================================
00003536                            
00003536                            LevSel_Credits:				; XREF: LevelSelect
00003536 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
0000353C 103C 0091                  		move.b	#$91,d0
00003540 6100 DE5C                  		bsr.w	PlaySound_Special ; play credits music
00003544 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
0000354A 4E75                       		rts	
0000354C                            ; ===========================================================================
0000354C                            
0000354C                            LevSel_Level_SS:			; XREF: LevelSelect
0000354C D040                       		add.w	d0,d0
0000354E 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003552 6B00 FF6C                  		bmi.w	LevelSelect
00003556 0C40 FFFF                  		cmpi.w	#$FFFF,d0	; check	if level is 0700 (Special Stage)
0000355A 6600                       		bne.s	LevSel_Level	; if not, branch
0000355C 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003562 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003566 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000356C 7000                       		moveq	#0,d0
0000356E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003572 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003576 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000357A 4E75                       		rts	
0000357C                            ; ===========================================================================
0000357C                            
0000357C                            LevSel_Level:				; XREF: LevSel_Level_SS
0000357C 0240 3FFF                  		andi.w	#$3FFF,d0
00003580 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003584                            
00003584                            PlayLevel:				; XREF: ROM:00003246j ...
00003584 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000358A 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003590 7000                       		moveq	#0,d0
00003592 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003596 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000359A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000359E 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
000035A2 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000035A6 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
000035AA 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000035AE 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000035B2 103C 00E0                  		move.b	#$E0,d0
000035B6 6100 DDE6                  		bsr.w	PlaySound_Special ; fade out music
000035BA 4E75                       		rts	
000035BC                            ; ===========================================================================
000035BC                            ; ---------------------------------------------------------------------------
000035BC                            ; Level	select - level pointers
000035BC                            ; ---------------------------------------------------------------------------
000035BC                            LSelectPointers:
000035BC 0000                       		dc.w $0000 ; crz
000035BE 0001                       		dc.w $0001
000035C0 0002                       		dc.w $0002
000035C2 0100                       		dc.w $0100 ; ilfez
000035C4 0101                       		dc.w $0101
000035C6 0102                       		dc.w $0102
000035C8 0200                       		dc.w $0200 ; mz
000035CA 0201                       		dc.w $0201
000035CC 0202                       		dc.w $0202
000035CE 0300                       		dc.w $0300 ; dgrotz
000035D0 0301                       		dc.w $0301 
000035D2 0302                       		dc.w $0302 
000035D4 0700                       		dc.w $0700 ; the other mz...
000035D6 0701                       		dc.w $0701 
000035D8 0702                       		dc.w $0702 
000035DA 0400                       		dc.w $0400 ; tpfbz
000035DC 0401                       		dc.w $0401
000035DE 0402                       		dc.w $0402
000035E0 0500                       		dc.w $0500 ; zzzzz
000035E2 0501                       		dc.w $0501 
000035E4 0103                       		dc.w $0103 
000035E6 0502                       		dc.w $0502 ; fz
000035E8 FFFF                       		dc.w $FFFF ; special
000035EA 8000                       		dc.w $8000 ; sound test
000035EC                            		even
000035EC                            ; --------------------------------------
000035EC                            ; ---------------------------------------------------------------------------
000035EC                            ; Level	select codes
000035EC                            ; ---------------------------------------------------------------------------
000035EC                            LevelSelectCode_J:
000035EC                            		incbin	misc\ls_jcode.bin
000035F2                            		even
000035F2                            
000035F2                            LevelSelectCode_US:
000035F2                            		incbin	misc\ls_ucode.bin
000035F8                            		even
000035F8                            ; ===========================================================================
000035F8                            
000035F8                            ; ---------------------------------------------------------------------------
000035F8                            ; Demo mode
000035F8                            ; ---------------------------------------------------------------------------
000035F8                            
000035F8                            Demo:					; XREF: TitleScreen
000035F8 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000035FE                            
000035FE                            loc_33B6:				; XREF: loc_33E4
000035FE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003604 6100 F508                  		bsr.w	DelayProgram
00003608 6100 0000                  		bsr.w	DeformBgLayer
0000360C 6100 E330                  		bsr.w	PalCycle_Load
00003610 6100 DFDC                  		bsr.w	RunPLC_RAM
00003614 3038 D008                  		move.w	($FFFFD008).w,d0
00003618 5440                       		addq.w	#2,d0
0000361A 31C0 D008                  		move.w	d0,($FFFFD008).w
0000361E 0C40 1C00                  		cmpi.w	#$1C00,d0
00003622 6500                       		bcs.s	loc_33E4
00003624 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
0000362A 4E75                       		rts	
0000362C                            ; ===========================================================================
0000362C                            
0000362C                            loc_33E4:				; XREF: Demo
0000362C 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003632 6600 FDF4                  		bne.w	Title_ChkLevSel	; if yes, branch
00003636 4A78 F614                  		tst.w	($FFFFF614).w
0000363A 6600 FFC2                  		bne.w	loc_33B6
0000363E 103C 00E0                  		move.b	#$E0,d0
00003642 6100 DD5A                  		bsr.w	PlaySound_Special ; fade out music
00003646 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
0000364A 0240 0007                  		andi.w	#7,d0
0000364E D040                       		add.w	d0,d0
00003650 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003654 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003658 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
0000365C 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003662 6500                       		bcs.s	loc_3422	; if yes, branch
00003664 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
0000366A                            
0000366A                            loc_3422:
0000366A 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003670 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003676 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
0000367A 6600                       		bne.s	Demo_Level	; if not, branch
0000367C 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003682 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003686 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
0000368A                            
0000368A                            Demo_Level:
0000368A 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003690 7000                       		moveq	#0,d0
00003692 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003696 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000369A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000369E 4E75                       		rts	
000036A0                            ; ===========================================================================
000036A0                            ; ---------------------------------------------------------------------------
000036A0                            ; Levels used in demos
000036A0                            ; ---------------------------------------------------------------------------
000036A0                            Demo_Levels:	incbin	misc\dm_ord1.bin
000036A8                            		even
000036A8                            
000036A8                            ; ---------------------------------------------------------------------------
000036A8                            ; Subroutine to	change what you're selecting in the level select
000036A8                            ; ---------------------------------------------------------------------------
000036A8                            
000036A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000036A8                            
000036A8                            
000036A8                            LevSelControls:				; XREF: LevelSelect
000036A8 1238 F605                  		move.b	($FFFFF605).w,d1
000036AC 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000036B0 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000036B2 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000036B6 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
000036BA                            
000036BA                            LevSel_UpDown:
000036BA 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000036C0 1238 F604                  		move.b	($FFFFF604).w,d1
000036C4 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000036C8 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
000036CC 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000036D0 0801 0000                  		btst	#0,d1		; is up	pressed?
000036D4 6700                       		beq.s	LevSel_Down	; if not, branch
000036D6 5346                       		subq.w	#1,d6		; move up 1 selection
000036D8 6400                       		bcc.s	LevSel_Down
000036DA 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
000036DC                            
000036DC                            LevSel_Down:
000036DC 0801 0001                  		btst	#1,d1		; is down pressed?
000036E0 6700                       		beq.s	LevSel_Refresh	; if not, branch
000036E2 5246                       		addq.w	#1,d6		; move down 1 selection
000036E4 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000036E8 6500                       		bcs.s	LevSel_Refresh
000036EA 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
000036EC 6000                       		bra.s	LevSel_Refresh
000036EE                            		
000036EE                            LevSel_LR:
000036EE 0801 0002                  		btst	#2,d1		; is left pressed?
000036F2 6700                       		beq.s	LevSel_Right	; if not, branch
000036F4 0446 0000                  		sub.w	#lsrow2size,d6
000036F8 64E2                       		bcc.s	LevSel_Down
000036FA 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
000036FE                            LevSel_Right:
000036FE 0801 0003                  		btst	#3,d1		; is right pressed?
00003702 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003704 0646 0000                  		add.w	#lsrow1size,d6
00003708 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000370C 6500                       		bcs.s	LevSel_Refresh
0000370E 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003712                            ; ===========================================================================
00003712                            LevSel_Refresh:
00003712                            		
00003712 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003716 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000371A                            		
0000371A 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003720 6600                       		bne.s	@exitsndtest
00003722                            		
00003722 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003726 43F9 0000 0000             		lea	(Controls_Normal).l,a1
0000372C 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003734 6100 0000                  		bsr.w	CStringSlop
00003738                            	@exitsndtest:
00003738                            	
00003738 363C C65F                  		move.w	#$C680-$21,d3
0000373C 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003740 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003744                            		
00003744 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
0000374A 6600                       		bne.s	@entersndtest
0000374C                            		
0000374C 363C C65F                  		move.w	#$C680-$21,d3
00003750 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003756 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000375E 6100 0000                  		bsr.w	CStringSlop
00003762                            	@entersndtest:
00003762 4E75                       		rts	
00003764                            		
00003764                            LevSel_SndTest:				; XREF: LevSelControls
00003764 1238 F605                  		move.b	($FFFFF605).w,d1
00003768 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
0000376C 6700                       		beq.s	LevSel_NoMove	; if not, branch
0000376E 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
00003774 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
00003778                            		
00003778 1038 FF84                  		move.b	($FFFFFF84).w,d0
0000377C 0801 0002                  		btst	#2,d1		; is left pressed?
00003780 6700                       		beq.s	SndTest_Right	; if not, branch
00003782 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
00003784                            		; no need the fact it's a byte does the trick
00003784                            
00003784                            SndTest_Right:
00003784 0801 0003                  		btst	#3,d1		; is right pressed?
00003788 6700                       		beq.s	SndTest_A	; if not, branch
0000378A 5200                       		addq.b	#1,d0		; add 1	to sound test
0000378C                            		; same here
0000378C                            		
0000378C                            SndTest_A:
0000378C 0801 0006                  		btst	#6,d1		; is A pressed?
00003790 6700                       		beq.s	SndTest_B	; if not, branch
00003792 5100                       		subq.b	#8,d0		; subtract $10 to sound test
00003794 5100                       		subq.b	#8,d0
00003796                            		
00003796                            SndTest_B:
00003796 0801 0004                  		btst	#4,d1		; is B pressed?
0000379A 6700                       		beq.s	SndTest_Refresh	; if not, branch
0000379C 5000                       		addq.b	#8,d0		; add $10 to sound test
0000379E 5000                       		addq.b	#8,d0
000037A0                            
000037A0                            SndTest_Refresh:
000037A0 363C C65F                  		move.w	#$C680-$21,d3
000037A4 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
000037A8 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000037AC                            
000037AC                            LevSel_NoMove:
000037AC 4E75                       		rts	
000037AE                            ; End of function LevSelControls
000037AE                            
000037AE                            ; ---------------------------------------------------------------------------
000037AE                            ; Subroutine to load level select text
000037AE                            ; ---------------------------------------------------------------------------
000037AE                            
000037AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037AE                            
000037AE                            LevSelTextLoad_loop:
000037AE 2D44 0004                  		move.l	d4,4(a6)
000037B2 6100 0000                  		bsr.w	LevSel_ChgLine
000037B6 0684 0080 0000             		addi.l	#$800000,d4
000037BC 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000037C0 4E75                       		rts
000037C2                            LevSelTextLoad:				; XREF: TitleScreen
000037C2 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000037C8 4DF9 00C0 0000             		lea	($C00000).l,a6
000037CE 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000037D2 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000037D8                            		
000037D8 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000037DC 61D0                       		bsr.s	LevSelTextLoad_loop
000037DE                            		
000037DE                            		
000037DE 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
000037E4 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
000037E8 61C4                       		bsr.s	LevSelTextLoad_loop
000037EA 363C C65F                  		move.w	#$C680-$21,d3
000037EE                            		
000037EE                            LevSelHighlightCode:
000037EE 4DF9 00C0 0000             		lea	($C00000).l,a6
000037F4 7000                       		moveq	#0,d0
000037F6 3038 FF82                  		move.w	($FFFFFF82).w,d0
000037FA 3200                       		move.w	d0,d1
000037FC 283C 6086 0003             		move.l	#lsscrpos,d4
00003802                            		
00003802 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003806 6D00                       		blt.s	@notsecond
00003808                            		
00003808 0440 0000                  		sub.w	#lsrow1size,d0
0000380C 0684 0024 0000             		addi.l	#lsoff,d4
00003812                            	@notsecond:
00003812 EF48                       		lsl.w	#7,d0
00003814 4840                       		swap	d0
00003816 D880                       		add.l	d0,d4
00003818 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000381E E749                       		lsl.w	#3,d1
00003820 D241                       		add.w	d1,d1
00003822 D2C1                       		adda.w	d1,a1
00003824 2D44 0004                  		move.l	d4,4(a6)
00003828 6100 0000                  		bsr.w	LevSel_ChgLine
0000382C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003832 6700                       		beq.s	LevSelSndTest
00003834 4E75                       		rts
00003836                            
00003836                            LevSelSndTest:
00003836 0643 0030                  		add.w	#$30,d3
0000383A 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003844 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003848 1400                       		move.b	d0,d2
0000384A E808                       		lsr.b	#4,d0
0000384C 6100 0000                  		bsr.w	LevSel_ChgSnd
00003850 1002                       		move.b	d2,d0
00003852 6100 0000                  		bsr.w	LevSel_ChgSnd
00003856 4E75                       		rts	
00003858                            ; End of function LevSelTextLoad
00003858                            
00003858                            
00003858                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003858                            
00003858                            
00003858                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003858 0240 000F                  		andi.w	#$F,d0
0000385C 0C00 000A                  		cmpi.b	#$A,d0
00003860 6500                       		bcs.s	loc_3580
00003862 5E00                       		addi.b	#7,d0
00003864                            
00003864                            loc_3580:
00003864 D043                       		add.w	d3,d0
00003866 3C80                       		move.w	d0,(a6)
00003868 4E75                       		rts	
0000386A                            ; End of function LevSel_ChgSnd
0000386A                            
0000386A                            
0000386A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000386A                            
0000386A                            
0000386A                            LevSel_ChgLine:				; XREF: LevSelTextLoad
0000386A 740F                       		moveq	#$10-1,d2		; number of characters per line
0000386C                            
0000386C                            @loop:
0000386C 7000                       		moveq	#0,d0
0000386E 1019                       		move.b	(a1)+,d0
00003870 0C00 0020                  		cmpi.b	#$20,d0
00003874 6E00                       		bgt.s	@draw
00003876 3CBC 0000                  		move.w	#0,(a6)
0000387A 51CA FFF0                  		dbf	d2,@loop
0000387E 4E75                       		rts	
00003880                            ; ===========================================================================
00003880                            
00003880                            @draw:				; XREF: LevSel_ChgLine
00003880 D043                       		add.w	d3,d0
00003882 3C80                       		move.w	d0,(a6)
00003884 51CA FFE6                  		dbf	d2,@loop
00003888 4E75                       		rts	
0000388A                            ; End of function LevSel_ChgLine
0000388A                            		
0000388A                            CStringSlop_draw:
0000388A D043                       		add.w	d3,d0
0000388C 3C80                       		move.w	d0,(a6)
0000388E                            CStringSlop:				; XREF: LevSelTextLoad
0000388E 7000                       		moveq	#0,d0
00003890 1019                       		move.b	(a1)+,d0
00003892 0C00 0020                  		cmpi.b	#$20,d0
00003896 6EF2                       		bgt.s	CStringSlop_draw
00003898                            		
00003898 0C00 0001                  		cmpi.b	#1,d0
0000389C 6700                       		beq.s	@InsertSpaces
0000389E 6500                       		blo.s	@end
000038A0                            		
000038A0 3CBC 0000                  		move.w	#0,(a6)
000038A4 60E8                       		bra.s	CStringSlop
000038A6                            	@end:
000038A6 4E75                       		rts
000038A8                            	@InsertSpaces:
000038A8 7000                       		moveq	#0,d0
000038AA 1019                       		move.b	(a1)+,d0
000038AC                            		
000038AC                            	@insert:
000038AC 3CBC 0000                  		move.w	#0,(a6)
000038B0 51C8 FFFA                  		dbf.w	d0,@insert
000038B4 60D8                       		bra.s	CStringSlop
000038B6                            ; End of function LevSel_ChgLine
000038B6                            
000038B6                            ; ===========================================================================
000038B6                            ; ---------------------------------------------------------------------------
000038B6                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
000038B6                            ; ---------------------------------------------------------------------------
000038B6                            LevelMenuText:	
000038B6 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
000038C6 2020 2020 2020 2020 2020+          dc.b    "               2"
000038D6 2020 2020 2020 2020 2020+          dc.b    "               3"
000038E6 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
000038F6 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003906 2020 2020 2020 2020 2020+          dc.b    "               3"
00003916 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003926 2020 2020 2020 2020 2020+          dc.b    "               2"
00003936 2020 2020 2020 2020 2020+          dc.b    "               3"
00003946 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003956 2020 2020 2020 2020 2020+          dc.b    "               2"
00003966 2020 2020 2020 2020 2020+          dc.b    "               3"
00003976 4D41 4B4F 544F 2020 2020+          dc.b    "MAKOTO         1"
00003986 2020 2020 2020 2020 2020+          dc.b    "               2"
00003996 2020 2020 2020 2020 2020+          dc.b    "               3"
000039A6                            LMTSecondRow:
000039A6 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
000039B6 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
000039C6 2020 2020 2020 2020 2020+          dc.b    "               3"
000039D6 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
000039E6 2020 2020 2020 2020 2020+          dc.b    "               2"
000039F6 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A06 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003A16 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003A26 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003A36 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003A46 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003A56                            LMTSelectableEnd:
00003A56 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003A66                            LMTEnd:
00003A66                            
00003A66                            Now_Playing:
00003A66 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003A76                            		even
00003A76                            NP_Track:
00003A76 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003A7E                            		even
00003A7E                            NP_SFX:
00003A7E 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003A86                            		even
00003A86                            
00003A86                            ShowNow_Playing:
00003A86 1C00                       		move.b	d0,d6
00003A88 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003A8C 43FA FFD8                  		lea	Now_Playing(pc),a1
00003A90 4DF9 00C0 0000             		lea		($C00000).l,a6
00003A96 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003A9E 6100 FDEE                  		bsr.w	CStringSlop
00003AA2                            		
00003AA2 43FA FFD2                  		lea	NP_Track(pc),a1
00003AA6 0C06 00A0                  		cmpi.b	#$A0,d6
00003AAA 6D00                       		blt.s	@track
00003AAC                            		
00003AAC 43FA FFD0                  		lea	NP_SFX(pc),a1
00003AB0                            	@track:
00003AB0 6100 FDDC                  		bsr.w	CStringSlop
00003AB4                            		
00003AB4 0643 0030                  		add.w	#$30,d3
00003AB8 1006                       		move.b	d6,d0
00003ABA 1400                       		move.b	d0,d2
00003ABC E808                       		lsr.b	#4,d0
00003ABE 6100 FD98                  		bsr.w	LevSel_ChgSnd
00003AC2 1002                       		move.b	d2,d0
00003AC4 6100 FD92                  		bsr.w	LevSel_ChgSnd
00003AC8 4E75                       		rts	
00003ACA                            
00003ACA                            ; 1 is insert spaces btw
00003ACA                            Controls_Normal:
00003ACA 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003AD6                            		even		
00003AD6                            Controls_SND:
00003AD6 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003AFC 00                         		even
00003AFC                            		
00003AFC                            OptionMenuText:	
00003AFC 504C 4159 2054 4845 2047+  		dc.b    "PLAY THE GAME!!!"
00003B0C 4348 4152 4143 5445 5220+          dc.b    "CHARACTER       "
00003B1C                            OMTEnd:
00003B1C                            		
00003B1C                            ; ---------------------------------------------------------------------------
00003B1C                            ; Level	Select
00003B1C                            ; ---------------------------------------------------------------------------
00003B1C                            GotoOptions:
00003B1C 43F9 0000 3AFC             		lea	(OptionMenuText).l,a1
00003B22 4DF9 00C0 0000             		lea	($C00000).l,a6
00003B28 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003B2C 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003B32                            		
00003B32 323C 0000                  		move.w	#optamm-1,d1		; number of lines of text (first row)
00003B36 6100 FC76                  		bsr.w	LevSelTextLoad_loop
00003B3A                            
00003B3A                            OptionsMenu:
00003B3A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003B40 6100 EFCC                  		bsr.w	DelayProgram
00003B44 6100 0000                  		bsr.w	OptControls
00003B48 6100 DAA4                  		bsr.w	RunPLC_RAM
00003B4C 4AB8 F680                  		tst.l	($FFFFF680).w
00003B50 66E8                       		bne.s	OptionsMenu
00003B52 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003B58 67E0                       		beq.s	OptionsMenu	; if not, branch
00003B5A 4E71                       		nop
00003B5C 60DC                       		bra.s	OptionsMenu
00003B5E                            		
00003B5E                            OptReturn:
00003B5E 4E75                       		rts
00003B60                            OptControls:				; XREF: LevelSelect
00003B60 1238 F605                  		move.b	($FFFFF605).w,d1
00003B64 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003B68 6600                       		bne.s	Opt_UpDown	; if yes, branch
00003B6A 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003B6E 6AEE                       		bpl.s	OptReturn	; if time remains, branch
00003B70                            Opt_UpDown:
00003B70 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003B76 1238 F604                  		move.b	($FFFFF604).w,d1
00003B7A 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003B7E 0801 0000                  		btst	#0,d1		; is up	pressed?
00003B82 6700                       		beq.s	Opt_Down	; if not, branch
00003B84 5346                       		subq.w	#1,d6		; move up 1 selection
00003B86 6400                       		bcc.s	Opt_Down
00003B88 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003B8A                            
00003B8A                            Opt_Down:
00003B8A 0801 0001                  		btst	#1,d1		; is down pressed?
00003B8E 6700                       		beq.s	Opt_Refresh	; if not, branch
00003B90 5246                       		addq.w	#1,d6		; move down 1 selection
00003B92 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003B96 6500                       		bcs.s	Opt_Refresh
00003B98 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003B9A                            Opt_Refresh:
00003B9A                            		
00003B9A                            ; ---------------------------------------------------------------------------
00003B9A                            ; Music	playlist
00003B9A                            ; ---------------------------------------------------------------------------
00003B9A                            MusicList1:	incbin	misc\muslist1.bin
00003BA2                            		even
00003BA2                            MusicList2:	incbin	misc\muslist2.bin
00003BAA                            		even
00003BAA                            MusicList3:	incbin	misc\muslist3.bin
00003BB2                            		even
00003BB2                            MusicList4:	incbin	misc\muslist4.bin
00003BBA                            		even
00003BBA                            ; ===========================================================================
00003BBA                            
00003BBA                            ; ---------------------------------------------------------------------------
00003BBA                            ; Level
00003BBA                            ; ---------------------------------------------------------------------------
00003BBA                            
00003BBA                            Level:					; XREF: GameModeArray
00003BBA 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003BC0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003BC4 6B00                       		bmi.s	loc_37B6
00003BC6 103C 00E0                  		move.b	#$E0,d0
00003BCA 6100 D7D2                  		bsr.w	PlaySound_Special ; fade out music
00003BCE                            
00003BCE                            loc_37B6:
00003BCE 6100 DA10                  		bsr.w	ClearPLC
00003BD2 6100 E254                  		bsr.w	Pal_FadeFrom
00003BD6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003BDA 6B00                       		bmi.s	Level_ClrRam
00003BDC 46FC 2700                  		move	#$2700,sr
00003BE0 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003BEA 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003BF0 6100 D850                  		bsr.w	NemDec
00003BF4 46FC 2300                  		move	#$2300,sr
00003BF8 7000                       		moveq	#0,d0
00003BFA 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003BFE E948                       		lsl.w	#4,d0
00003C00 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003C06 45F2 0000                  		lea	(a2,d0.w),a2
00003C0A 7000                       		moveq	#0,d0
00003C0C 1012                       		move.b	(a2),d0
00003C0E 6700                       		beq.s	loc_37FC
00003C10 6100 D970                  		bsr.w	LoadPLC		; load level patterns
00003C14                            
00003C14                            loc_37FC:
00003C14 7001                       		moveq	#1,d0
00003C16 6100 D96A                  		bsr.w	LoadPLC		; load standard	patterns
00003C1A                            
00003C1A                            Level_ClrRam:
00003C1A 43F8 D000                  		lea	($FFFFD000).w,a1
00003C1E 7000                       		moveq	#0,d0
00003C20 323C 07FF                  		move.w	#$7FF,d1
00003C24                            
00003C24                            Level_ClrObjRam:
00003C24 22C0                       		move.l	d0,(a1)+
00003C26 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003C2A                            
00003C2A 43F8 F628                  		lea	($FFFFF628).w,a1
00003C2E 7000                       		moveq	#0,d0
00003C30 323C 0015                  		move.w	#$15,d1
00003C34                            
00003C34                            Level_ClrVars:
00003C34 22C0                       		move.l	d0,(a1)+
00003C36 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003C3A                            
00003C3A 43F8 F700                  		lea	($FFFFF700).w,a1
00003C3E 7000                       		moveq	#0,d0
00003C40 323C 003F                  		move.w	#$3F,d1
00003C44                            
00003C44                            Level_ClrVars2:
00003C44 22C0                       		move.l	d0,(a1)+
00003C46 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003C4A                            
00003C4A 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003C4E 7000                       		moveq	#0,d0
00003C50 323C 0047                  		move.w	#$47,d1
00003C54                            
00003C54                            Level_ClrVars3:
00003C54 22C0                       		move.l	d0,(a1)+
00003C56 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003C5A                            
00003C5A 46FC 2700                  		move	#$2700,sr
00003C5E 6100 D666                  		bsr.w	ClearScreen
00003C62 4DF9 00C0 0004             		lea	($C00004).l,a6
00003C68 3CBC 8B03                  		move.w	#$8B03,(a6)
00003C6C 3CBC 8230                  		move.w	#$8230,(a6)
00003C70 3CBC 8407                  		move.w	#$8407,(a6)
00003C74 3CBC 857C                  		move.w	#$857C,(a6)
00003C78 3CBC 9001                  		move.w	#$9001,(a6)
00003C7C 3CBC 8004                  		move.w	#$8004,(a6)
00003C80 3CBC 8720                  		move.w	#$8720,(a6)
00003C84 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003C8A 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003C8E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003C94 6600                       		bne.s	Level_LoadPal	; if not, branch
00003C96 3CBC 8014                  		move.w	#$8014,(a6)
00003C9A 7000                       		moveq	#0,d0
00003C9C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003CA0 D040                       		add.w	d0,d0
00003CA2 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003CA8 3031 0000                  		move.w	(a1,d0.w),d0
00003CAC 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003CB0 31C0 F648                  		move.w	d0,($FFFFF648).w
00003CB4 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003CB8 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003CBC 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003CC0 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003CC6 6000 0000                  		bra.w	Level_LoadPal
00003CCA                            Player_Palette:
00003CCA                            		; normal, lz, sbz, blank
00003CCA 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003CD2                            		
00003CD2 0016 0017 0018 0000        		dc.w	22,23,24,0 ; Pal_Gronic 
00003CDA 0019 0017 0018 0000        		dc.w	25,23,24,0 ; Pal_Anakama 
00003CE2 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
00003CEA                            
00003CEA                            		; add more player palettes
00003CEA                            Level_LoadPal:
00003CEA 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003CF0 46FC 2300                  		move	#$2300,sr
00003CF4                            
00003CF4 7200                       		moveq	#0,d1
00003CF6 1238 FFE8                  		move.b	(v_character),d1
00003CFA D241                       		add.w	d1,d1
00003CFC D241                       		add.w	d1,d1
00003CFE D241                       		add.w	d1,d1
00003D00 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003D04                            		
00003D04 6100 E3E8                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003D08 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D0E 6600                       		bne.s	Level_GetBgm	; if not, branch
00003D10 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003D14 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003D1A 6600                       		bne.s	Level_WaterPal	; if not, branch
00003D1C 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003D20                            
00003D20                            Level_WaterPal:
00003D20 6100 E3E4                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003D24 4A38 FE30                  		tst.b	($FFFFFE30).w
00003D28 6700                       		beq.s	Level_GetBgm
00003D2A 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003D30                            
00003D30                            ; NineKode begins here - How to play different songs on different acts
00003D30                             
00003D30                            Level_GetBgm:
00003D30 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003D34 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003D38 7000                       		moveq	#0,d0
00003D3A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003D3E                             
00003D3E 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003D44 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003D46 43F9 0000 3B9A             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003D4C 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D4E                             
00003D4E                            Level_GetBgm2:
00003D4E 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003D54 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003D56 43F9 0000 3BA2             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003D5C 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D5E                             
00003D5E                            Level_GetBgm3:
00003D5E 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003D64 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003D66 43F9 0000 3BAA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003D6C 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D6E                             
00003D6E                            Level_GetBgm4:
00003D6E 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003D74 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003D76 43F9 0000 3BB2             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003D7C                             
00003D7C                            Level_PlayBgm:
00003D7C 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003D80 6100 D616                  		bsr.w	PlaySound	; play music
00003D84 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003D8A                             
00003D8A                            ; NineKode ends here
00003D8A                            
00003D8A                            Level_TtlCard:
00003D8A 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003D90 6100 ED7C                  		bsr.w	DelayProgram
00003D94 4EB9 0000 0000             		jsr	ObjectsLoad
00003D9A 4EB9 0000 0000             		jsr	BuildSprites
00003DA0 6100 D84C                  		bsr.w	RunPLC_RAM
00003DA4 3038 D108                  		move.w	($FFFFD108).w,d0
00003DA8 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003DAC 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003DAE 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003DB2 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003DB4 4EB9 0000 0000             		jsr	Hud_Base
00003DBA                            
00003DBA                            loc_3946:
00003DBA 7003                       		moveq	#3,d0
00003DBC 6100 E314                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003DC0 6100 0000                  		bsr.w	LevelSizeLoad
00003DC4 6100 0000                  		bsr.w	DeformBgLayer
00003DC8 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003DCE 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003DD2 6100 0000                  		bsr.w	LoadTilesFromStart
00003DD6 4EB9 0000 0000             		jsr	FloorLog_Unk
00003DDC 6100 0000                  		bsr.w	ColIndexLoad
00003DE0 6100 0000                  		bsr.w	LZWaterEffects
00003DE4 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003DEA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DEE 6B00                       		bmi.s	Level_ChkDebug
00003DF0 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003DF6                            
00003DF6                            Level_ChkDebug:
00003DF6 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003DFA 6700                       		beq.s	Level_ChkWater	; if not, branch
00003DFC 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003E02 6700                       		beq.s	Level_ChkWater	; if not, branch
00003E04 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003E0A                            
00003E0A                            Level_ChkWater:
00003E0A 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003E10 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003E16 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003E1C 6600                       		bne.s	Level_LoadObj	; if not, branch
00003E1E 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003E24 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003E2A 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003E30 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003E36                            
00003E36                            Level_LoadObj:
00003E36 4EB9 0000 0000             		jsr	ObjPosLoad
00003E3C 4EB9 0000 0000             		jsr	ObjectsLoad
00003E42 4EB9 0000 0000             		jsr	BuildSprites
00003E48 7000                       		moveq	#0,d0
00003E4A 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003E4E 6600                       		bne.s	loc_39E8	; if yes, branch
00003E50 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E54 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E58 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003E5C                            
00003E5C                            loc_39E8:
00003E5C 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003E60 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003E64 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003E68 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003E6C                            		; move.b	d0,($FFFFFE2F).w
00003E6C 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003E72 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003E76 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003E7A 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003E7E 11C0 FFF9                  		move.b	d0,($FFFFFFF9).w	; GMZ: Clear truth nuke flag
00003E82 6100 0000                  		bsr.w	OscillateNumInit
00003E86 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003E8C 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003E92 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003E98 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003E9E 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003EA4 7000                       		moveq	#0,d0
00003EA6 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003EAA E548                       		lsl.w	#2,d0
00003EAC 2271 0000                  		movea.l	(a1,d0.w),a1
00003EB0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003EB4 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003EB6 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003EBC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003EC0 5340                       		subq.w	#1,d0
00003EC2 E548                       		lsl.w	#2,d0
00003EC4 2271 0000                  		movea.l	(a1,d0.w),a1
00003EC8                            
00003EC8                            Level_Demo:
00003EC8 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003ECE 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003ED2 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003ED8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003EDC 6A00                       		bpl.s	Level_ChkWaterPal
00003EDE 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003EE4 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003EEA 6600                       		bne.s	Level_ChkWaterPal
00003EEC 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003EF2                            
00003EF2                            Level_ChkWaterPal:
00003EF2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003EF8 6600                       		bne.s	Level_Delay	; if not, branch
00003EFA 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003EFC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003F02 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003F04 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003F06                            
00003F06                            Level_WaterPal2:
00003F06 6100 E21A                  		bsr.w	PalLoad4_Water
00003F0A                            
00003F0A                            Level_Delay:
00003F0A 323C 0003                  		move.w	#3,d1
00003F0E                            
00003F0E                            Level_DelayLoop:
00003F0E 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F14 6100 EBF8                  		bsr.w	DelayProgram
00003F18 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003F1C                            
00003F1C 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003F22 6100 DE60                  		bsr.w	Pal_FadeTo2
00003F26 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F2A 6B00                       		bmi.s	Level_ClrCardArt
00003F2C 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003F30 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003F34 5838 D124                  		addq.b	#4,($FFFFD124).w
00003F38 5838 D164                  		addq.b	#4,($FFFFD164).w
00003F3C 6000                       		bra.s	Level_StartGame
00003F3E                            ; ===========================================================================
00003F3E                            
00003F3E                            Level_ClrCardArt:
00003F3E 7002                       		moveq	#2,d0
00003F40 4EB9 0000 1582             		jsr	(LoadPLC).l	; load explosion patterns
00003F46 7000                       		moveq	#0,d0
00003F48 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F4C 0640 0015                  		addi.w	#$15,d0
00003F50 4EB9 0000 1582             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003F56                            
00003F56                            Level_StartGame:
00003F56 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003F5C                            
00003F5C                            ; ---------------------------------------------------------------------------
00003F5C                            ; Main level loop (when	all title card and loading sequences are finished)
00003F5C                            ; ---------------------------------------------------------------------------
00003F5C                            
00003F5C                            Level_MainLoop:
00003F5C 6100 D44C                  		bsr.w	PauseGame
00003F60 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F66 6100 EBA6                  		bsr.w	DelayProgram
00003F6A 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003F6E 6100 0000                  		bsr.w	MoveSonicInDemo
00003F72 6100 0000                  		bsr.w	LZWaterEffects
00003F76 4EB9 0000 0000             		jsr	ObjectsLoad
00003F7C 4A78 FE08                  		tst.w	($FFFFFE08).w
00003F80 6600                       		bne.s	loc_3B10
00003F82 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003F88 6400                       		bcc.s	loc_3B14
00003F8A                            
00003F8A                            loc_3B10:
00003F8A 6100 0000                  		bsr.w	DeformBgLayer
00003F8E                            
00003F8E                            loc_3B14:
00003F8E 4EB9 0000 0000             		jsr	BuildSprites
00003F94 4EB9 0000 0000             		jsr	ObjPosLoad
00003F9A 6100 D9A2                  		bsr.w	PalCycle_Load
00003F9E 6100 D64E                  		bsr.w	RunPLC_RAM
00003FA2 6100 0000                  		bsr.w	OscillateNumDo
00003FA6 6100 0000                  		bsr.w	ChangeRingFrame
00003FAA 6100 0000                  		bsr.w	SignpostArtLoad
00003FAE 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003FB4 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003FB6 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003FBA 6600 FBFE                  		bne.w	Level		; if yes, branch
00003FBE 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003FC4 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003FC8 4E75                       		rts	
00003FCA                            ; ===========================================================================
00003FCA                            
00003FCA                            Level_ChkDemo:				; XREF: Level_MainLoop
00003FCA 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003FCE 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003FD0 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003FD4 6700                       		beq.s	Level_EndDemo	; if not, branch
00003FD6 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003FDC 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003FE0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003FE6 4E75                       		rts	
00003FE8                            ; ===========================================================================
00003FE8                            
00003FE8                            Level_EndDemo:				; XREF: Level_ChkDemo
00003FE8 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003FEE 6600                       		bne.s	loc_3B88	; if not, branch
00003FF0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003FF6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003FFA 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003FFC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00004002                            
00004002                            loc_3B88:
00004002 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00004008 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000400E 4278 F794                  		clr.w	($FFFFF794).w
00004012                            
00004012                            loc_3B98:
00004012 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004018 6100 EAF4                  		bsr.w	DelayProgram
0000401C 6100 0000                  		bsr.w	MoveSonicInDemo
00004020 4EB9 0000 0000             		jsr	ObjectsLoad
00004026 4EB9 0000 0000             		jsr	BuildSprites
0000402C 4EB9 0000 0000             		jsr	ObjPosLoad
00004032 5378 F794                  		subq.w	#1,($FFFFF794).w
00004036 6A00                       		bpl.s	loc_3BC8
00004038 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000403E 6100 DE08                  		bsr.w	Pal_FadeOut
00004042                            
00004042                            loc_3BC8:
00004042 4A78 F614                  		tst.w	($FFFFF614).w
00004046 66CA                       		bne.s	loc_3B98
00004048 4E75                       		rts	
0000404A                            ; ===========================================================================
0000404A                            ; ---------------------------------------------------------------------------
0000404A                            ; Subroutine to	do special water effects in Labyrinth Zone
0000404A                            ; ---------------------------------------------------------------------------
0000404A                            
0000404A                            LZWaterEffects:				; XREF: Level
0000404A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004050 6600                       		bne.s	locret_3C28	; if not, branch
00004052 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004058 6400                       		bcc.s	LZMoveWater
0000405A 6100 0000                  		bsr.w	LZWindTunnels
0000405E 6100 0000                  		bsr.w	LZWaterSlides
00004062 6100 0000                  		bsr.w	LZDynamicWater
00004066                            
00004066                            LZMoveWater:
00004066 4238 F64E                  		clr.b	($FFFFF64E).w
0000406A 7000                       		moveq	#0,d0
0000406C 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004070 E248                       		lsr.w	#1,d0
00004072 D078 F648                  		add.w	($FFFFF648).w,d0
00004076 31C0 F646                  		move.w	d0,($FFFFF646).w
0000407A 3038 F646                  		move.w	($FFFFF646).w,d0
0000407E 9078 F704                  		sub.w	($FFFFF704).w,d0
00004082 6400                       		bcc.s	loc_3C1A
00004084 4A40                       		tst.w	d0
00004086 6A00                       		bpl.s	loc_3C1A
00004088 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
0000408E 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00004094                            
00004094                            loc_3C1A:
00004094 0C40 00DF                  		cmpi.w	#$DF,d0
00004098 6500                       		bcs.s	loc_3C24
0000409A 303C 00DF                  		move.w	#$DF,d0
0000409E                            
0000409E                            loc_3C24:
0000409E 11C0 F625                  		move.b	d0,($FFFFF625).w
000040A2                            
000040A2                            locret_3C28:
000040A2 4E75                       		rts	
000040A4                            ; ===========================================================================
000040A4                            ; ---------------------------------------------------------------------------
000040A4                            ; Labyrinth default water heights
000040A4                            ; ---------------------------------------------------------------------------
000040A4                            WaterHeight:	incbin	misc\lz_heigh.bin
000040AC                            		even
000040AC                            ; ===========================================================================
000040AC                            
000040AC                            ; ---------------------------------------------------------------------------
000040AC                            ; Labyrinth dynamic water routines
000040AC                            ; ---------------------------------------------------------------------------
000040AC                            
000040AC                            LZDynamicWater:				; XREF: LZWaterEffects
000040AC 7000                       		moveq	#0,d0
000040AE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000040B2 D040                       		add.w	d0,d0
000040B4 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000040B8 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000040BC 7200                       		moveq	#0,d1
000040BE 1238 F64C                  		move.b	($FFFFF64C).w,d1
000040C2 3038 F64A                  		move.w	($FFFFF64A).w,d0
000040C6 9078 F648                  		sub.w	($FFFFF648).w,d0
000040CA 6700                       		beq.s	locret_3C5A
000040CC 6400                       		bcc.s	loc_3C56
000040CE 4441                       		neg.w	d1
000040D0                            
000040D0                            loc_3C56:
000040D0 D378 F648                  		add.w	d1,($FFFFF648).w
000040D4                            
000040D4                            locret_3C5A:
000040D4 4E75                       		rts	
000040D6                            ; ===========================================================================
000040D6 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000040D8 0000                       		dc.w DynWater_LZ2-DynWater_Index
000040DA 0000                       		dc.w DynWater_LZ3-DynWater_Index
000040DC 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000040DE                            ; ===========================================================================
000040DE                            
000040DE                            DynWater_LZ1:				; XREF: DynWater_Index
000040DE 3038 F700                  		move.w	($FFFFF700).w,d0
000040E2 1438 F64D                  		move.b	($FFFFF64D).w,d2
000040E6 6600                       		bne.s	loc_3CD0
000040E8 323C 00B8                  		move.w	#$B8,d1
000040EC 0C40 0600                  		cmpi.w	#$600,d0
000040F0 6500                       		bcs.s	loc_3CB4
000040F2 323C 0108                  		move.w	#$108,d1
000040F6 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000040FC 6500                       		bcs.s	loc_3CBA
000040FE 0C40 0C00                  		cmpi.w	#$C00,d0
00004102 6500                       		bcs.s	loc_3CB4
00004104 323C 0318                  		move.w	#$318,d1
00004108 0C40 1080                  		cmpi.w	#$1080,d0
0000410C 6500                       		bcs.s	loc_3CB4
0000410E 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00004114 323C 05C8                  		move.w	#$5C8,d1
00004118 0C40 1380                  		cmpi.w	#$1380,d0
0000411C 6500                       		bcs.s	loc_3CB4
0000411E 323C 03A8                  		move.w	#$3A8,d1
00004122 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004126 6600                       		bne.s	loc_3CB4
00004128 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000412E                            
0000412E                            loc_3CB4:
0000412E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004132 4E75                       		rts	
00004134                            ; ===========================================================================
00004134                            
00004134                            loc_3CBA:				; XREF: DynWater_LZ1
00004134 0C40 0C80                  		cmpi.w	#$C80,d0
00004138 65F4                       		bcs.s	loc_3CB4
0000413A 323C 00E8                  		move.w	#$E8,d1
0000413E 0C40 1500                  		cmpi.w	#$1500,d0
00004142 65EA                       		bcs.s	loc_3CB4
00004144 323C 0108                  		move.w	#$108,d1
00004148 60E4                       		bra.s	loc_3CB4
0000414A                            ; ===========================================================================
0000414A                            
0000414A                            loc_3CD0:				; XREF: DynWater_LZ1
0000414A 5302                       		subq.b	#1,d2
0000414C 6600                       		bne.s	locret_3CF4
0000414E 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004154 6400                       		bcc.s	locret_3CF4
00004156 323C 03A8                  		move.w	#$3A8,d1
0000415A 0C40 1300                  		cmpi.w	#$1300,d0
0000415E 6500                       		bcs.s	loc_3CF0
00004160 323C 0108                  		move.w	#$108,d1
00004164 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000416A                            
0000416A                            loc_3CF0:
0000416A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000416E                            
0000416E                            locret_3CF4:
0000416E 4E75                       		rts	
00004170                            ; ===========================================================================
00004170                            
00004170                            DynWater_LZ2:				; XREF: DynWater_Index
00004170 3038 F700                  		move.w	($FFFFF700).w,d0
00004174 323C 0328                  		move.w	#$328,d1
00004178 0C40 0500                  		cmpi.w	#$500,d0
0000417C 6500                       		bcs.s	loc_3D12
0000417E 323C 03C8                  		move.w	#$3C8,d1
00004182 0C40 0B00                  		cmpi.w	#$B00,d0
00004186 6500                       		bcs.s	loc_3D12
00004188 323C 0428                  		move.w	#$428,d1
0000418C                            
0000418C                            loc_3D12:
0000418C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004190 4E75                       		rts	
00004192                            ; ===========================================================================
00004192                            
00004192                            DynWater_LZ3:				; XREF: DynWater_Index
00004192 3038 F700                  		move.w	($FFFFF700).w,d0
00004196 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000419A 6600                       		bne.s	loc_3D5E
0000419C 323C 0500                  		move.w	#$500,d1
000041A0 0C40 0600                  		cmpi.w	#$600,d0
000041A4 6500                       		bcs.s	loc_3D54
000041A6 0C40 1B00                  		cmpi.w	#$1B00,d0
000041AA 6500                       		bcs.s	loc_3D54
000041AC 323C 0850                  		move.w	#$850,d1
000041B0                            
000041B0                            loc_3D54:
000041B0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041B4 31C1 F648                  		move.w	d1,($FFFFF648).w
000041B8 4E75                       		rts	
000041BA                            ; ===========================================================================
000041BA                            
000041BA                            loc_3D5E:				; XREF: DynWater_LZ3
000041BA 5302                       		subq.b	#1,d2
000041BC 6600                       		bne.s	loc_3DA8
000041BE 323C 04C8                  		move.w	#$4C8,d1
000041C2 0C40 0770                  		cmpi.w	#$770,d0
000041C6 6500                       		bcs.s	loc_3DA2
000041C8 323C 0308                  		move.w	#$308,d1
000041CC 0C40 1400                  		cmpi.w	#$1400,d0
000041D0 6500                       		bcs.s	loc_3DA2
000041D2 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000041D8 6700                       		beq.s	loc_3D8E
000041DA 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000041E0 6400                       		bcc.s	loc_3D8E
000041E2 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000041E8 6400                       		bcc.s	loc_3DA2
000041EA                            
000041EA                            loc_3D8E:
000041EA 323C 0508                  		move.w	#$508,d1
000041EE 31C1 F648                  		move.w	d1,($FFFFF648).w
000041F2 0C40 1770                  		cmpi.w	#$1770,d0
000041F6 6500                       		bcs.s	loc_3DA2
000041F8 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000041FE                            
000041FE                            loc_3DA2:
000041FE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004202 4E75                       		rts	
00004204                            ; ===========================================================================
00004204                            
00004204                            loc_3DA8:
00004204 5302                       		subq.b	#1,d2
00004206 6600                       		bne.s	loc_3DD2
00004208 323C 0508                  		move.w	#$508,d1
0000420C 0C40 1860                  		cmpi.w	#$1860,d0
00004210 6500                       		bcs.s	loc_3DCC
00004212 323C 0188                  		move.w	#$188,d1
00004216 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000421A 6400                       		bcc.s	loc_3DC6
0000421C B278 F648                  		cmp.w	($FFFFF648).w,d1
00004220 6600                       		bne.s	loc_3DCC
00004222                            
00004222                            loc_3DC6:
00004222 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004228                            
00004228                            loc_3DCC:
00004228 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000422C 4E75                       		rts	
0000422E                            ; ===========================================================================
0000422E                            
0000422E                            loc_3DD2:
0000422E 5302                       		subq.b	#1,d2
00004230 6600                       		bne.s	loc_3E0E
00004232 323C 0188                  		move.w	#$188,d1
00004236 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000423A 6500                       		bcs.s	loc_3E04
0000423C 323C 0900                  		move.w	#$900,d1
00004240 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004244 6500                       		bcs.s	loc_3E04
00004246 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000424C 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004252 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004258 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000425E 4E75                       		rts	
00004260                            ; ===========================================================================
00004260                            
00004260                            loc_3E04:
00004260 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004264 31C1 F648                  		move.w	d1,($FFFFF648).w
00004268 4E75                       		rts	
0000426A                            ; ===========================================================================
0000426A                            
0000426A                            loc_3E0E:
0000426A 0C40 1E00                  		cmpi.w	#$1E00,d0
0000426E 6500                       		bcs.s	locret_3E1A
00004270 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004276                            
00004276                            locret_3E1A:
00004276 4E75                       		rts	
00004278                            ; ===========================================================================
00004278                            
00004278                            DynWater_SBZ3:				; XREF: DynWater_Index
00004278 323C 0228                  		move.w	#$228,d1
0000427C 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004282 6500                       		bcs.s	loc_3E2C
00004284 323C 04C8                  		move.w	#$4C8,d1
00004288                            
00004288                            loc_3E2C:
00004288 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000428C 4E75                       		rts
0000428E                            
0000428E                            ; ---------------------------------------------------------------------------
0000428E                            ; Labyrinth Zone "wind tunnels"	subroutine
0000428E                            ; ---------------------------------------------------------------------------
0000428E                            
0000428E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000428E                            
0000428E                            
0000428E                            LZWindTunnels:				; XREF: LZWaterEffects
0000428E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004292 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004296 45F9 0000 0000             		lea	(LZWind_Data).l,a2
0000429C 7000                       		moveq	#0,d0
0000429E 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042A2 E748                       		lsl.w	#3,d0
000042A4 D4C0                       		adda.w	d0,a2
000042A6 7200                       		moveq	#0,d1
000042A8 4A38 FE11                  		tst.b	($FFFFFE11).w
000042AC 6600                       		bne.s	loc_3E56
000042AE 7201                       		moveq	#1,d1
000042B0 514A                       		subq.w	#8,a2
000042B2                            
000042B2                            loc_3E56:
000042B2 43F8 D000                  		lea	($FFFFD000).w,a1
000042B6                            
000042B6                            LZWind_Loop:
000042B6 3029 0008                  		move.w	8(a1),d0
000042BA B052                       		cmp.w	(a2),d0
000042BC 6500 0000                  		bcs.w	loc_3EF4
000042C0 B06A 0004                  		cmp.w	4(a2),d0
000042C4 6400 0000                  		bcc.w	loc_3EF4
000042C8 3429 000C                  		move.w	$C(a1),d2
000042CC B46A 0002                  		cmp.w	2(a2),d2
000042D0 6500                       		bcs.s	loc_3EF4
000042D2 B46A 0006                  		cmp.w	6(a2),d2
000042D6 6400                       		bcc.s	loc_3EF4
000042D8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000042DC 0200 003F                  		andi.b	#$3F,d0
000042E0 6600                       		bne.s	loc_3E90
000042E2 303C 00D0                  		move.w	#$D0,d0
000042E6 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play rushing water sound
000042EC                            
000042EC                            loc_3E90:
000042EC 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000042F0 6600 0000                  		bne.w	locret_3F0A
000042F4 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000042FA 6400                       		bcc.s	loc_3F06
000042FC 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00004302 0440 0080                  		subi.w	#$80,d0
00004306 B052                       		cmp.w	(a2),d0
00004308 6400                       		bcc.s	LZWind_Move
0000430A 7002                       		moveq	#2,d0
0000430C 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004312 6600                       		bne.s	loc_3EBA
00004314 4440                       		neg.w	d0
00004316                            
00004316                            loc_3EBA:
00004316 D169 000C                  		add.w	d0,$C(a1)
0000431A                            
0000431A                            LZWind_Move:
0000431A 5869 0008                  		addq.w	#4,8(a1)
0000431E 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004324 337C 0000 0012             		move.w	#0,$12(a1)
0000432A 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004330 08E9 0001 0022             		bset	#1,$22(a1)
00004336 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000433C 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000433E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004342                            
00004342                            LZWind_MoveDown:
00004342 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004348 6700                       		beq.s	locret_3EF2	; if not, branch
0000434A 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000434E                            
0000434E                            locret_3EF2:
0000434E 4E75                       		rts	
00004350                            ; ===========================================================================
00004350                            
00004350                            loc_3EF4:				; XREF: LZWindTunnels
00004350 504A                       		addq.w	#8,a2
00004352 51C9 FF62                  		dbf	d1,LZWind_Loop
00004356 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000435A 6700                       		beq.s	locret_3F0A
0000435C 137C 0000 001C             		move.b	#0,$1C(a1)
00004362                            
00004362                            loc_3F06:
00004362 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004366                            
00004366                            locret_3F0A:
00004366 4E75                       		rts	
00004368                            ; End of function LZWindTunnels
00004368                            
00004368                            ; ===========================================================================
00004368 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004370 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004382 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004390                            					; XREF: LZWindTunnels
00004390                            		even
00004390                            
00004390                            ; ---------------------------------------------------------------------------
00004390                            ; Labyrinth Zone water slide subroutine
00004390                            ; ---------------------------------------------------------------------------
00004390                            
00004390                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004390                            
00004390                            
00004390                            LZWaterSlides:				; XREF: LZWaterEffects
00004390 43F8 D000                  		lea	($FFFFD000).w,a1
00004394 0829 0001 0022             		btst	#1,$22(a1)
0000439A 6600                       		bne.s	loc_3F6A
0000439C 3029 000C                  		move.w	$C(a1),d0
000043A0 E248                       		lsr.w	#1,d0
000043A2 0240 0380                  		andi.w	#$380,d0
000043A6 1229 0008                  		move.b	8(a1),d1
000043AA 0241 007F                  		andi.w	#$7F,d1
000043AE D041                       		add.w	d1,d0
000043B0 45F8 A400                  		lea	($FFFFA400).w,a2
000043B4 1032 0000                  		move.b	(a2,d0.w),d0
000043B8 45FA 0000                  		lea	byte_3FCF(pc),a2
000043BC 7206                       		moveq	#6,d1
000043BE                            
000043BE                            loc_3F62:
000043BE B022                       		cmp.b	-(a2),d0
000043C0 57C9 FFFC                  		dbeq	d1,loc_3F62
000043C4 6700                       		beq.s	LZSlide_Move
000043C6                            
000043C6                            loc_3F6A:
000043C6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000043CA 6700                       		beq.s	locret_3F7A
000043CC 337C 0005 003E             		move.w	#5,$3E(a1)
000043D2 4238 F7CA                  		clr.b	($FFFFF7CA).w
000043D6                            
000043D6                            locret_3F7A:
000043D6 4E75                       		rts	
000043D8                            ; ===========================================================================
000043D8                            
000043D8                            LZSlide_Move:				; XREF: LZWaterSlides
000043D8 0C41 0003                  		cmpi.w	#3,d1
000043DC 6400                       		bcc.s	loc_3F84
000043DE 4E71                       		nop	
000043E0                            
000043E0                            loc_3F84:
000043E0 08A9 0000 0022             		bclr	#0,$22(a1)
000043E6 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000043EA 1340 0014                  		move.b	d0,$14(a1)
000043EE 6A00                       		bpl.s	loc_3F9A
000043F0 08E9 0000 0022             		bset	#0,$22(a1)
000043F6                            
000043F6                            loc_3F9A:
000043F6 4229 0015                  		clr.b	$15(a1)
000043FA 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004400 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004406 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000440A 0200 001F                  		andi.b	#$1F,d0
0000440E 6600                       		bne.s	locret_3FBE
00004410 303C 00D0                  		move.w	#$D0,d0
00004414 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play water sound
0000441A                            
0000441A                            locret_3FBE:
0000441A 4E75                       		rts	
0000441C                            ; End of function LZWaterSlides
0000441C                            
0000441C                            ; ===========================================================================
0000441C 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
0000442B 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
0000442C                            		even
0000442C                            
0000442C                            ; ---------------------------------------------------------------------------
0000442C                            ; Subroutine to	move Sonic in demo mode
0000442C                            ; ---------------------------------------------------------------------------
0000442C                            
0000442C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000442C                            
0000442C                            
0000442C                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000442C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004430 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004432 4E75                       		rts	
00004434                            ; ===========================================================================
00004434                            
00004434                            ; This is an unused subroutine for recording a demo
00004434                            
00004434                            MoveDemo_Record:
00004434 43F9 0008 0000             		lea	($80000).l,a1
0000443A 3038 F790                  		move.w	($FFFFF790).w,d0
0000443E D2C0                       		adda.w	d0,a1
00004440 1038 F604                  		move.b	($FFFFF604).w,d0
00004444 B011                       		cmp.b	(a1),d0
00004446 6600                       		bne.s	loc_3FFA
00004448 5229 0001                  		addq.b	#1,1(a1)
0000444C 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004452 6700                       		beq.s	loc_3FFA
00004454 4E75                       		rts	
00004456                            ; ===========================================================================
00004456                            
00004456                            loc_3FFA:				; XREF: MoveDemo_Record
00004456 1340 0002                  		move.b	d0,2(a1)
0000445A 137C 0000 0003             		move.b	#0,3(a1)
00004460 5478 F790                  		addq.w	#2,($FFFFF790).w
00004464 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000446A 4E75                       		rts	
0000446C                            ; ===========================================================================
0000446C                            
0000446C                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000446C 4A38 F604                  		tst.b	($FFFFF604).w
00004470 6A00                       		bpl.s	loc_4022
00004472 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004476 6B00                       		bmi.s	loc_4022
00004478 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000447E                            
0000447E                            loc_4022:
0000447E 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004484 7000                       		moveq	#0,d0
00004486 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000448A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004490 6600                       		bne.s	loc_4038
00004492 7006                       		moveq	#6,d0
00004494                            
00004494                            loc_4038:
00004494 E548                       		lsl.w	#2,d0
00004496 2271 0000                  		movea.l	(a1,d0.w),a1
0000449A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000449E 6A00                       		bpl.s	loc_4056
000044A0 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000044A6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000044AA 5340                       		subq.w	#1,d0
000044AC E548                       		lsl.w	#2,d0
000044AE 2271 0000                  		movea.l	(a1,d0.w),a1
000044B2                            
000044B2                            loc_4056:
000044B2 3038 F790                  		move.w	($FFFFF790).w,d0
000044B6 D2C0                       		adda.w	d0,a1
000044B8 1011                       		move.b	(a1),d0
000044BA 41F8 F604                  		lea	($FFFFF604).w,a0
000044BE 1200                       		move.b	d0,d1
000044C0 1410                       		move.b	(a0),d2
000044C2 B500                       		eor.b	d2,d0
000044C4 10C1                       		move.b	d1,(a0)+
000044C6 C001                       		and.b	d1,d0
000044C8 10C0                       		move.b	d0,(a0)+
000044CA 5338 F792                  		subq.b	#1,($FFFFF792).w
000044CE 6400                       		bcc.s	locret_407E
000044D0 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000044D6 5478 F790                  		addq.w	#2,($FFFFF790).w
000044DA                            
000044DA                            locret_407E:
000044DA 4E75                       		rts	
000044DC                            ; End of function MoveSonicInDemo
000044DC                            
000044DC                            ; ===========================================================================
000044DC                            ; ---------------------------------------------------------------------------
000044DC                            ; Demo sequence	pointers
000044DC                            ; ---------------------------------------------------------------------------
000044DC                            Demo_Index:
000044DC                            	include "_inc\Demo pointers for intro.asm"
000044DC                            ; ---------------------------------------------------------------------------
000044DC                            ; Demo sequence	pointers
000044DC                            ; ---------------------------------------------------------------------------
000044DC 0000 0000                  	dc.l Demo_GHZ
000044E0 0000 0000                  	dc.l Demo_GHZ
000044E4 0000 0000                  	dc.l Demo_MZ
000044E8 0000 0000                  	dc.l Demo_MZ
000044EC 0000 0000                  	dc.l Demo_SYZ
000044F0 0000 0000                  	dc.l Demo_SYZ
000044F4 0000 0000                  	dc.l Demo_SS
000044F8 0000 0000                  	dc.l Demo_SS
000044F8 0000 0000                  	dc.l Demo_SS
000044FC                            
000044FC                            Demo_EndIndex:
000044FC                            	include "_inc\Demo pointers for ending.asm"
000044FC                            ; ---------------------------------------------------------------------------
000044FC                            ; Demo (ending) sequence pointers
000044FC                            ; ---------------------------------------------------------------------------
000044FC 0000 0000                  	dc.l Demo_EndGHZ1
00004500 0000 0000                  	dc.l Demo_EndMZ
00004504 0000 0000                  	dc.l Demo_EndSYZ
00004508 0000 0000                  	dc.l Demo_EndLZ
0000450C 0000 0000                  	dc.l Demo_EndSLZ
00004510 0000 0000                  	dc.l Demo_EndSBZ1
00004514 0000 0000                  	dc.l Demo_EndSBZ2
00004518 0000 0000                  	dc.l Demo_EndGHZ2
00004518 0000 0000                  	dc.l Demo_EndGHZ2
0000451C                            
0000451C 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000452C 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000453C 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000454C                            		even
0000454C                            
0000454C                            ; ---------------------------------------------------------------------------
0000454C                            ; Collision index loading subroutine
0000454C                            ; ---------------------------------------------------------------------------
0000454C                            
0000454C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000454C                            
0000454C                            
0000454C                            ColIndexLoad:				; XREF: Level
0000454C 7000                       		moveq	#0,d0
0000454E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004552 E548                       		lsl.w	#2,d0
00004554 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
0000455A 4E75                       		rts	
0000455C                            ; End of function ColIndexLoad
0000455C                            
0000455C                            ; ===========================================================================
0000455C                            ; ---------------------------------------------------------------------------
0000455C                            ; Collision index pointers
0000455C                            ; ---------------------------------------------------------------------------
0000455C                            ColPointers:
0000455C                            	include "_inc\Collision index pointers.asm"
0000455C                            ; ---------------------------------------------------------------------------
0000455C                            ; Collision index pointers
0000455C                            ; ---------------------------------------------------------------------------
0000455C 0000 0000                  	dc.l Col_GHZ
00004560 0000 0000                  	dc.l Col_LZ
00004564 0000 0000                  	dc.l Col_MZ
00004568 0000 0000                  	dc.l Col_SLZ
0000456C 0000 0000                  	dc.l Col_SYZ
00004570 0000 0000                  	dc.l Col_SBZ
00004574 0000 0000                  	dc.l Col_GHZ ; this is the ending just so it does not fuck up
00004578 0000 0000                  	dc.l Col_BHZ
00004578 0000 0000                  	dc.l Col_BHZ
0000457C                            
0000457C                            ; ---------------------------------------------------------------------------
0000457C                            ; Oscillating number subroutine
0000457C                            ; ---------------------------------------------------------------------------
0000457C                            
0000457C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000457C                            
0000457C                            
0000457C                            OscillateNumInit:			; XREF: Level
0000457C 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004580 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004586 7220                       		moveq	#$20,d1
00004588                            
00004588                            Osc_Loop:
00004588 32DA                       		move.w	(a2)+,(a1)+
0000458A 51C9 FFFC                  		dbf	d1,Osc_Loop
0000458E 4E75                       		rts	
00004590                            ; End of function OscillateNumInit
00004590                            
00004590                            ; ===========================================================================
00004590 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004594 0000 0080                  		dc.w 0,	$80
00004598 0000 0080                  		dc.w 0,	$80
0000459C 0000 0080                  		dc.w 0,	$80
000045A0 0000 0080                  		dc.w 0,	$80
000045A4 0000 0080                  		dc.w 0,	$80
000045A8 0000 0080                  		dc.w 0,	$80
000045AC 0000 0080                  		dc.w 0,	$80
000045B0 0000 0080                  		dc.w 0,	$80
000045B4 0000 50F0                  		dc.w 0,	$50F0
000045B8 011E 2080                  		dc.w $11E, $2080
000045BC 00B4 3080                  		dc.w $B4, $3080
000045C0 010E 5080                  		dc.w $10E, $5080
000045C4 01C2 7080                  		dc.w $1C2, $7080
000045C8 0276 0080                  		dc.w $276, $80
000045CC 0000 0080                  		dc.w 0,	$80
000045D0 0000                       		dc.w 0
000045D2                            		even
000045D2                            
000045D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045D2                            
000045D2                            
000045D2                            OscillateNumDo:				; XREF: Level
000045D2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000045D8 6400                       		bcc.s	locret_41C4
000045DA 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000045DE 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000045E4 3619                       		move.w	(a1)+,d3
000045E6 720F                       		moveq	#$F,d1
000045E8                            
000045E8                            loc_4184:
000045E8 341A                       		move.w	(a2)+,d2
000045EA 381A                       		move.w	(a2)+,d4
000045EC 0303                       		btst	d1,d3
000045EE 6600                       		bne.s	loc_41A4
000045F0 3029 0002                  		move.w	2(a1),d0
000045F4 D042                       		add.w	d2,d0
000045F6 3340 0002                  		move.w	d0,2(a1)
000045FA D151                       		add.w	d0,0(a1)
000045FC B811                       		cmp.b	0(a1),d4
000045FE 6200                       		bhi.s	loc_41BA
00004600 03C3                       		bset	d1,d3
00004602 6000                       		bra.s	loc_41BA
00004604                            ; ===========================================================================
00004604                            
00004604                            loc_41A4:				; XREF: OscillateNumDo
00004604 3029 0002                  		move.w	2(a1),d0
00004608 9042                       		sub.w	d2,d0
0000460A 3340 0002                  		move.w	d0,2(a1)
0000460E D151                       		add.w	d0,0(a1)
00004610 B811                       		cmp.b	0(a1),d4
00004612 6300                       		bls.s	loc_41BA
00004614 0383                       		bclr	d1,d3
00004616                            
00004616                            loc_41BA:
00004616 5849                       		addq.w	#4,a1
00004618 51C9 FFCE                  		dbf	d1,loc_4184
0000461C 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004620                            
00004620                            locret_41C4:
00004620 4E75                       		rts	
00004622                            ; End of function OscillateNumDo
00004622                            
00004622                            ; ===========================================================================
00004622 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004626 0002 0018                  		dc.w 2,	$18
0000462A 0002 0020                  		dc.w 2,	$20
0000462E 0002 0030                  		dc.w 2,	$30
00004632 0004 0020                  		dc.w 4,	$20
00004636 0008 0008                  		dc.w 8,	8
0000463A 0008 0040                  		dc.w 8,	$40
0000463E 0004 0040                  		dc.w 4,	$40
00004642 0002 0050                  		dc.w 2,	$50
00004646 0002 0050                  		dc.w 2,	$50
0000464A 0002 0020                  		dc.w 2,	$20
0000464E 0003 0030                  		dc.w 3,	$30
00004652 0005 0050                  		dc.w 5,	$50
00004656 0007 0070                  		dc.w 7,	$70
0000465A 0002 0010                  		dc.w 2,	$10
0000465E 0002 0010                  		dc.w 2,	$10
00004662                            		even
00004662                            
00004662                            ; ---------------------------------------------------------------------------
00004662                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004662                            ; ---------------------------------------------------------------------------
00004662                            
00004662                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004662                            
00004662                            
00004662                            ChangeRingFrame:			; XREF: Level
00004662 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004666 6A00                       		bpl.s	loc_421C
00004668 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000466E 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004672 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004678                            
00004678                            loc_421C:
00004678 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000467C 6A00                       		bpl.s	loc_4232
0000467E 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004684 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004688 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000468E                            
0000468E                            loc_4232:
0000468E 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004692 6A00                       		bpl.s	loc_4250
00004694 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0000469A 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000469E 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
000046A4 6500                       		bcs.s	loc_4250
000046A6 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
000046AC                            
000046AC                            loc_4250:
000046AC 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000046B0 6700                       		beq.s	locret_4272
000046B2 7000                       		moveq	#0,d0
000046B4 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000046B8 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000046BC 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000046C0 EF58                       		rol.w	#7,d0
000046C2 0240 0003                  		andi.w	#3,d0
000046C6 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000046CA 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000046CE                            
000046CE                            locret_4272:
000046CE 4E75                       		rts	
000046D0                            ; End of function ChangeRingFrame
000046D0                            
000046D0                            ; ---------------------------------------------------------------------------
000046D0                            ; End-of-act signpost pattern loading subroutine
000046D0                            ; ---------------------------------------------------------------------------
000046D0                            
000046D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046D0                            
000046D0                            
000046D0                            SignpostArtLoad:			; XREF: Level
000046D0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000046D4 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000046D8 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000046DE 6700                       		beq.s	Signpost_Exit	; if yes, branch
000046E0 3038 F700                  		move.w	($FFFFF700).w,d0
000046E4 3238 F72A                  		move.w	($FFFFF72A).w,d1
000046E8 0441 0100                  		subi.w	#$100,d1
000046EC B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000046EE 6D00                       		blt.s	Signpost_Exit	; if not, branch
000046F0 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000046F4 6700                       		beq.s	Signpost_Exit
000046F6 B278 F728                  		cmp.w	($FFFFF728).w,d1
000046FA 6700                       		beq.s	Signpost_Exit
000046FC 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004700 7012                       		moveq	#$12,d0
00004702 6000 CEB0                  		bra.w	LoadPLC2	; load signpost	patterns
00004706                            ; ===========================================================================
00004706                            
00004706                            Signpost_Exit:
00004706 4E75                       		rts	
00004708                            ; End of function SignpostArtLoad
00004708                            
00004708                            ; ===========================================================================
00004708                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004788                            Demo_MZ:	incbin	demodata\i_mz.bin
000048B8                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004938                            Demo_SS:	incbin	demodata\i_ss.bin
00004A38                            ; ===========================================================================
00004A38                            
00004A38                            ; ---------------------------------------------------------------------------
00004A38                            ; Special Stage
00004A38                            ; ---------------------------------------------------------------------------
00004A38                            
00004A38                            SpecialStage:				; XREF: GameModeArray
00004A38 303C 00CA                  		move.w	#$CA,d0
00004A3C 6100 C960                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004A40 6100 D510                  		bsr.w	Pal_MakeFlash
00004A44 46FC 2700                  		move	#$2700,sr
00004A48 4DF9 00C0 0004             		lea	($C00004).l,a6
00004A4E 3CBC 8B03                  		move.w	#$8B03,(a6)
00004A52 3CBC 8004                  		move.w	#$8004,(a6)
00004A56 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004A5C 3CBC 9011                  		move.w	#$9011,(a6)
00004A60 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004A64 0200 00BF                  		andi.b	#$BF,d0
00004A68 33C0 00C0 0004             		move.w	d0,($C00004).l
00004A6E 6100 C856                  		bsr.w	ClearScreen
00004A72 46FC 2300                  		move	#$2300,sr
00004A76 4BF9 00C0 0004             		lea	($C00004).l,a5
00004A7C 3ABC 8F01                  		move.w	#$8F01,(a5)
00004A80 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004A86 3ABC 9780                  		move.w	#$9780,(a5)
00004A8A 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004A90 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004A98                            
00004A98                            loc_463C:
00004A98 3215                       		move.w	(a5),d1
00004A9A 0801 0001                  		btst	#1,d1
00004A9E 66F8                       		bne.s	loc_463C
00004AA0 3ABC 8F02                  		move.w	#$8F02,(a5)
00004AA4 6100 0000                  		bsr.w	SS_BGLoad
00004AA8 7014                       		moveq	#$14,d0
00004AAA 6100 CC42                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004AAE 43F8 D000                  		lea	($FFFFD000).w,a1
00004AB2 7000                       		moveq	#0,d0
00004AB4 323C 07FF                  		move.w	#$7FF,d1
00004AB8                            
00004AB8                            SS_ClrObjRam:
00004AB8 22C0                       		move.l	d0,(a1)+
00004ABA 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004ABE                            
00004ABE 43F8 F700                  		lea	($FFFFF700).w,a1
00004AC2 7000                       		moveq	#0,d0
00004AC4 323C 003F                  		move.w	#$3F,d1
00004AC8                            
00004AC8                            SS_ClrRam:
00004AC8 22C0                       		move.l	d0,(a1)+
00004ACA 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004ACE                            
00004ACE 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004AD2 7000                       		moveq	#0,d0
00004AD4 323C 0027                  		move.w	#$27,d1
00004AD8                            
00004AD8                            SS_ClrRam2:
00004AD8 22C0                       		move.l	d0,(a1)+
00004ADA 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004ADE                            
00004ADE 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004AE2 7000                       		moveq	#0,d0
00004AE4 323C 007F                  		move.w	#$7F,d1
00004AE8                            
00004AE8                            SS_ClrNemRam:
00004AE8 22C0                       		move.l	d0,(a1)+
00004AEA 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004AEE                            
00004AEE 4238 F64E                  		clr.b	($FFFFF64E).w
00004AF2 4278 FE02                  		clr.w	($FFFFFE02).w
00004AF6 700A                       		moveq	#$A,d0
00004AF8 6100 D5D8                  		bsr.w	PalLoad1	; load special stage pallet
00004AFC 4EB9 0000 0000             		jsr	SS_Load
00004B02 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004B0A 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004B12 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004B18 6100 0000                  		bsr.w	PalCycle_SS
00004B1C 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004B20 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
00004B24 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00004B2A 303C 0089                  		move.w	#$89,d0
00004B2E 6100 C868                  		bsr.w	PlaySound	; play special stage BG	music
00004B32 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004B38 43F9 0000 44DC             		lea	(Demo_Index).l,a1
00004B3E 7006                       		moveq	#6,d0
00004B40 E548                       		lsl.w	#2,d0
00004B42 2271 0000                  		movea.l	(a1,d0.w),a1
00004B46 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004B4C 5338 F792                  		subq.b	#1,($FFFFF792).w
00004B50 4278 FE20                  		clr.w	($FFFFFE20).w
00004B54 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004B58 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004B5E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004B64                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004B64                            ;		beq.s	SS_NoDebug	; if not, branch
00004B64                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
00004B64                            ;		beq.s	SS_NoDebug	; if not, branch
00004B64                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004B64                            
00004B64                            SS_NoDebug:
00004B64 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004B68 0000 0040                  		ori.b	#$40,d0
00004B6C 33C0 00C0 0004             		move.w	d0,($C00004).l
00004B72 6100 D332                  		bsr.w	Pal_MakeWhite
00004B76                            
00004B76                            ; ---------------------------------------------------------------------------
00004B76                            ; Main Special Stage loop
00004B76                            ; ---------------------------------------------------------------------------
00004B76                            
00004B76                            SS_MainLoop:
00004B76 6100 C832                  		bsr.w	PauseGame
00004B7A 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004B80 6100 DF8C                  		bsr.w	DelayProgram
00004B84 4A78 F784                          tst.w   ($FFFFF784).w
00004B88 6700                               beq.s   SS_NotReversed
00004B8A 5378 F784                          subi.w  #1,($FFFFF784).w
00004B8E                            
00004B8E                            SS_NotReversed:
00004B8E 6100 F89C                  		bsr.w	MoveSonicInDemo
00004B92 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004B98 4EB9 0000 0000             		jsr	ObjectsLoad
00004B9E 4EB9 0000 0000             		jsr	BuildSprites
00004BA4 4EB9 0000 0000             		jsr	SS_ShowLayout
00004BAA 6100 0000                  		bsr.w	SS_BGAnimate
00004BAE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004BB2 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004BB4 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004BB8 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004BBC                            
00004BBC                            SS_ChkEnd:
00004BBC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004BC2 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
00004BC6                            
00004BC6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004BCA 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004BCE 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004BD4 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004BDA 6500                       		bcs.s	SS_End		; if not, branch
00004BDC 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004BE0                            
00004BE0                            SS_End:
00004BE0 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004BE6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004BEC 4278 F794                  		clr.w	($FFFFF794).w
00004BF0                            
00004BF0                            SS_EndLoop:
00004BF0 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004BF6 6100 DF16                  		bsr.w	DelayProgram
00004BFA 6100 F830                  		bsr.w	MoveSonicInDemo
00004BFE 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004C04 4EB9 0000 0000             		jsr	ObjectsLoad
00004C0A 4EB9 0000 0000             		jsr	BuildSprites
00004C10 4EB9 0000 0000             		jsr	SS_ShowLayout
00004C16 6100 0000                  		bsr.w	SS_BGAnimate
00004C1A 5378 F794                  		subq.w	#1,($FFFFF794).w
00004C1E 6A00                       		bpl.s	loc_47D4
00004C20 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004C26 6100 D34A                  		bsr.w	Pal_ToWhite
00004C2A                            
00004C2A                            loc_47D4:
00004C2A 4A78 F614                  		tst.w	($FFFFF614).w
00004C2E 66C0                       		bne.s	SS_EndLoop
00004C30                            
00004C30 46FC 2700                  		move	#$2700,sr
00004C34 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C3A 3CBC 8230                  		move.w	#$8230,(a6)
00004C3E 3CBC 8407                  		move.w	#$8407,(a6)
00004C42 3CBC 9001                  		move.w	#$9001,(a6)
00004C46 6100 C67E                  		bsr.w	ClearScreen
00004C4A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004C54 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004C5A 6100 C7E6                  		bsr.w	NemDec
00004C5E 4EB9 0000 0000             		jsr	Hud_Base
00004C64 46FC 2300                  		move	#$2300,sr
00004C68 7011                       		moveq	#$11,d0
00004C6A 6100 D482                  		bsr.w	PalLoad2	; load results screen pallet
00004C6E 7000                       		moveq	#0,d0
00004C70 6100 C942                  		bsr.w	LoadPLC2
00004C74 701B                       		moveq	#$1B,d0
00004C76 6100 C90A                  		bsr.w	LoadPLC		; load results screen patterns
00004C7A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004C80 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004C86 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004C8A C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004C8E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004C92 303C 008E                  		move.w	#$8E,d0
00004C96 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004C9C 43F8 D000                  		lea	($FFFFD000).w,a1
00004CA0 7000                       		moveq	#0,d0
00004CA2 323C 07FF                  		move.w	#$7FF,d1
00004CA6                            
00004CA6                            SS_EndClrObjRam:
00004CA6 22C0                       		move.l	d0,(a1)+
00004CA8 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004CAC                            
00004CAC 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004CB2                            
00004CB2                            SS_NormalExit:
00004CB2 6100 C6F6                  		bsr.w	PauseGame
00004CB6 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004CBC 6100 DE50                  		bsr.w	DelayProgram
00004CC0 4EB9 0000 0000             		jsr	ObjectsLoad
00004CC6 4EB9 0000 0000             		jsr	BuildSprites
00004CCC 6100 C920                  		bsr.w	RunPLC_RAM
00004CD0 4A78 FE02                  		tst.w	($FFFFFE02).w
00004CD4 67DC                       		beq.s	SS_NormalExit
00004CD6 4AB8 F680                  		tst.l	($FFFFF680).w
00004CDA 66D6                       		bne.s	SS_NormalExit
00004CDC 303C 00CA                  		move.w	#$CA,d0
00004CE0 6100 C6BC                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004CE4 6100 D26C                  		bsr.w	Pal_MakeFlash
00004CE8 4E75                       		rts	
00004CEA                            ; ===========================================================================
00004CEA                            
00004CEA                            SS_ToSegaScreen:
00004CEA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004CF0 4E75                       		rts
00004CF2                            
00004CF2                            ; ---------------------------------------------------------------------------
00004CF2                            ; Special stage	background loading subroutine
00004CF2                            ; ---------------------------------------------------------------------------
00004CF2                            
00004CF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CF2                            
00004CF2                            
00004CF2                            SS_BGLoad:				; XREF: SpecialStage
00004CF2 43F9 00FF 0000             		lea	($FF0000).l,a1
00004CF8 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004CFE 303C 4051                  		move.w	#$4051,d0
00004D02 6100 CA1C                  		bsr.w	EniDec
00004D06 263C 5000 0001             		move.l	#$50000001,d3
00004D0C 45F9 00FF 0080             		lea	($FF0080).l,a2
00004D12 7E06                       		moveq	#6,d7
00004D14                            
00004D14                            loc_48BE:
00004D14 2003                       		move.l	d3,d0
00004D16 7C03                       		moveq	#3,d6
00004D18 7800                       		moveq	#0,d4
00004D1A 0C47 0003                  		cmpi.w	#3,d7
00004D1E 6400                       		bcc.s	loc_48CC
00004D20 7801                       		moveq	#1,d4
00004D22                            
00004D22                            loc_48CC:
00004D22 7A07                       		moveq	#7,d5
00004D24                            
00004D24                            loc_48CE:
00004D24 224A                       		movea.l	a2,a1
00004D26 0A04 0001                  		eori.b	#1,d4
00004D2A 6600                       		bne.s	loc_48E2
00004D2C 0C47 0006                  		cmpi.w	#6,d7
00004D30 6600                       		bne.s	loc_48F2
00004D32 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D38                            
00004D38                            loc_48E2:
00004D38 48E7 F800                  		movem.l	d0-d4,-(sp)
00004D3C 7207                       		moveq	#7,d1
00004D3E 7407                       		moveq	#7,d2
00004D40 6100 C6E0                  		bsr.w	ShowVDPGraphics
00004D44 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004D48                            
00004D48                            loc_48F2:
00004D48 0680 0010 0000             		addi.l	#$100000,d0
00004D4E 51CD FFD4                  		dbf	d5,loc_48CE
00004D52 0680 0380 0000             		addi.l	#$3800000,d0
00004D58 0A04 0001                  		eori.b	#1,d4
00004D5C 51CE FFC4                  		dbf	d6,loc_48CC
00004D60 0683 1000 0000             		addi.l	#$10000000,d3
00004D66 6A00                       		bpl.s	loc_491C
00004D68 4843                       		swap	d3
00004D6A 0683 0000 C000             		addi.l	#$C000,d3
00004D70 4843                       		swap	d3
00004D72                            
00004D72                            loc_491C:
00004D72 D4FC 0080                  		adda.w	#$80,a2
00004D76 51CF FF9C                  		dbf	d7,loc_48BE
00004D7A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D80 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004D86 303C 4000                  		move.w	#$4000,d0
00004D8A 6100 C994                  		bsr.w	EniDec
00004D8E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D94 203C 4000 0003             		move.l	#$40000003,d0
00004D9A 723F                       		moveq	#$3F,d1
00004D9C 741F                       		moveq	#$1F,d2
00004D9E 6100 C682                  		bsr.w	ShowVDPGraphics
00004DA2 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DA8 203C 5000 0003             		move.l	#$50000003,d0
00004DAE 723F                       		moveq	#$3F,d1
00004DB0 743F                       		moveq	#$3F,d2
00004DB2 6100 C66E                  		bsr.w	ShowVDPGraphics
00004DB6 4E75                       		rts	
00004DB8                            ; End of function SS_BGLoad
00004DB8                            
00004DB8                            ; ---------------------------------------------------------------------------
00004DB8                            ; Pallet cycling routine - special stage
00004DB8                            ; ---------------------------------------------------------------------------
00004DB8                            
00004DB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DB8                            
00004DB8                            
00004DB8                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004DB8 4A78 F63A                  		tst.w	($FFFFF63A).w
00004DBC 6600                       		bne.s	locret_49E6
00004DBE 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004DC2 6A00                       		bpl.s	locret_49E6
00004DC4 4DF9 00C0 0004             		lea	($C00004).l,a6
00004DCA 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004DCE 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004DD2 0240 001F                  		andi.w	#$1F,d0
00004DD6 E548                       		lsl.w	#2,d0
00004DD8 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004DDE D0C0                       		adda.w	d0,a0
00004DE0 1018                       		move.b	(a0)+,d0
00004DE2 6A00                       		bpl.s	loc_4992
00004DE4 303C 01FF                  		move.w	#$1FF,d0
00004DE8                            
00004DE8                            loc_4992:
00004DE8 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004DEC 7000                       		moveq	#0,d0
00004DEE 1018                       		move.b	(a0)+,d0
00004DF0 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004DF4 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004DFA 43F1 0000                  		lea	(a1,d0.w),a1
00004DFE 303C 8200                  		move.w	#-$7E00,d0
00004E02 1019                       		move.b	(a1)+,d0
00004E04 3C80                       		move.w	d0,(a6)
00004E06 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004E0A 303C 8400                  		move.w	#-$7C00,d0
00004E0E 1018                       		move.b	(a0)+,d0
00004E10 3C80                       		move.w	d0,(a6)
00004E12 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004E1C 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004E24 7000                       		moveq	#0,d0
00004E26 1018                       		move.b	(a0)+,d0
00004E28 6B00                       		bmi.s	loc_49E8
00004E2A 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004E30 D2C0                       		adda.w	d0,a1
00004E32 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004E36 24D9                       		move.l	(a1)+,(a2)+
00004E38 24D9                       		move.l	(a1)+,(a2)+
00004E3A 24D9                       		move.l	(a1)+,(a2)+
00004E3C                            
00004E3C                            locret_49E6:
00004E3C 4E75                       		rts	
00004E3E                            ; ===========================================================================
00004E3E                            
00004E3E                            loc_49E8:				; XREF: PalCycle_SS
00004E3E 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004E42 0C40 008A                  		cmpi.w	#$8A,d0
00004E46 6500                       		bcs.s	loc_49F4
00004E48 5241                       		addq.w	#1,d1
00004E4A                            
00004E4A                            loc_49F4:
00004E4A C2FC 002A                  		mulu.w	#$2A,d1
00004E4E 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004E54 D2C1                       		adda.w	d1,a1
00004E56 0240 007F                  		andi.w	#$7F,d0
00004E5A 0880 0000                  		bclr	#0,d0
00004E5E 6700                       		beq.s	loc_4A18
00004E60 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004E64 24D1                       		move.l	(a1),(a2)+
00004E66 24E9 0004                  		move.l	4(a1),(a2)+
00004E6A 24E9 0008                  		move.l	8(a1),(a2)+
00004E6E                            
00004E6E                            loc_4A18:
00004E6E D2FC 000C                  		adda.w	#$C,a1
00004E72 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004E76 0C40 000A                  		cmpi.w	#$A,d0
00004E7A 6500                       		bcs.s	loc_4A2E
00004E7C 0440 000A                  		subi.w	#$A,d0
00004E80 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004E84                            
00004E84                            loc_4A2E:
00004E84 3200                       		move.w	d0,d1
00004E86 D040                       		add.w	d0,d0
00004E88 D041                       		add.w	d1,d0
00004E8A D2C0                       		adda.w	d0,a1
00004E8C 24D9                       		move.l	(a1)+,(a2)+
00004E8E 34D9                       		move.w	(a1)+,(a2)+
00004E90 4E75                       		rts	
00004E92                            ; End of function PalCycle_SS
00004E92                            
00004E92                            ; ===========================================================================
00004E92 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004EA2                            					; XREF: PalCycle_SS
00004EA2 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004EB2 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004EC2 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004ED2 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004EE2 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004EF2 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004F02 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004F12                            		even
00004F12 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004F20                            					; XREF: PalCycle_SS
00004F20                            		even
00004F20                            
00004F20                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004F68                            		even
00004F68                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
0000503A                            		even
0000503A                            
0000503A                            ; ---------------------------------------------------------------------------
0000503A                            ; Subroutine to	make the special stage background animated
0000503A                            ; ---------------------------------------------------------------------------
0000503A                            
0000503A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000503A                            
0000503A                            
0000503A                            SS_BGAnimate:				; XREF: SpecialStage
0000503A 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
0000503E 6600                       		bne.s	loc_4BF6
00005040 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005046 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000504C                            
0000504C                            loc_4BF6:
0000504C 0C40 0008                  		cmpi.w	#8,d0
00005050 6400                       		bcc.s	loc_4C4E
00005052 0C40 0006                  		cmpi.w	#6,d0
00005056 6600                       		bne.s	loc_4C10
00005058 5278 F718                  		addq.w	#1,($FFFFF718).w
0000505C 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005060 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005066                            
00005066                            loc_4C10:
00005066 7000                       		moveq	#0,d0
00005068 3038 F708                  		move.w	($FFFFF708).w,d0
0000506C 4440                       		neg.w	d0
0000506E 4840                       		swap	d0
00005070 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005076 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000507A 7609                       		moveq	#9,d3
0000507C                            
0000507C                            loc_4C26:
0000507C 302B 0002                  		move.w	2(a3),d0
00005080 6100 DABE                  		bsr.w	CalcSine
00005084 7400                       		moveq	#0,d2
00005086 1419                       		move.b	(a1)+,d2
00005088 C1C2                       		muls.w	d2,d0
0000508A E080                       		asr.l	#8,d0
0000508C 36C0                       		move.w	d0,(a3)+
0000508E 1419                       		move.b	(a1)+,d2
00005090 4882                       		ext.w	d2
00005092 D55B                       		add.w	d2,(a3)+
00005094 51CB FFE6                  		dbf	d3,loc_4C26
00005098 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000509C 45F9 0000 0000             		lea	(byte_4CB8).l,a2
000050A2 6000                       		bra.s	loc_4C7E
000050A4                            ; ===========================================================================
000050A4                            
000050A4                            loc_4C4E:				; XREF: SS_BGAnimate
000050A4 0C40 000C                  		cmpi.w	#$C,d0
000050A8 6600                       		bne.s	loc_4C74
000050AA 5378 F718                  		subq.w	#1,($FFFFF718).w
000050AE 47F8 AB00                  		lea	($FFFFAB00).w,a3
000050B2 243C 0001 8000             		move.l	#$18000,d2
000050B8 7206                       		moveq	#6,d1
000050BA                            
000050BA                            loc_4C64:
000050BA 2013                       		move.l	(a3),d0
000050BC 9082                       		sub.l	d2,d0
000050BE 26C0                       		move.l	d0,(a3)+
000050C0 0482 0000 2000             		subi.l	#$2000,d2
000050C6 51C9 FFF2                  		dbf	d1,loc_4C64
000050CA                            
000050CA                            loc_4C74:
000050CA 47F8 AB00                  		lea	($FFFFAB00).w,a3
000050CE 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000050D4                            
000050D4                            loc_4C7E:
000050D4 43F8 CC00                  		lea	($FFFFCC00).w,a1
000050D8 3038 F718                  		move.w	($FFFFF718).w,d0
000050DC 4440                       		neg.w	d0
000050DE 4840                       		swap	d0
000050E0 7600                       		moveq	#0,d3
000050E2 161A                       		move.b	(a2)+,d3
000050E4 3438 F70C                  		move.w	($FFFFF70C).w,d2
000050E8 4442                       		neg.w	d2
000050EA 0242 00FF                  		andi.w	#$FF,d2
000050EE E54A                       		lsl.w	#2,d2
000050F0                            
000050F0                            loc_4C9A:
000050F0 301B                       		move.w	(a3)+,d0
000050F2 544B                       		addq.w	#2,a3
000050F4 7200                       		moveq	#0,d1
000050F6 121A                       		move.b	(a2)+,d1
000050F8 5341                       		subq.w	#1,d1
000050FA                            
000050FA                            loc_4CA4:
000050FA 2380 2000                  		move.l	d0,(a1,d2.w)
000050FE 5842                       		addq.w	#4,d2
00005100 0242 03FC                  		andi.w	#$3FC,d2
00005104 51C9 FFF4                  		dbf	d1,loc_4CA4
00005108 51CB FFE6                  		dbf	d3,loc_4C9A
0000510C 4E75                       		rts	
0000510E                            ; End of function SS_BGAnimate
0000510E                            
0000510E                            ; ===========================================================================
0000510E 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
0000511A                            		even
0000511A 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005122                            		even
00005122 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005136                            		even
00005136                            					; XREF: SS_BGAnimate
00005136                            ; ===========================================================================
00005136                            
00005136                            ; ---------------------------------------------------------------------------
00005136                            ; Continue screen
00005136                            ; ---------------------------------------------------------------------------
00005136                            
00005136                            ContinueScreen:				; XREF: GameModeArray
00005136 6100 CCF0                  		bsr.w	Pal_FadeFrom
0000513A 46FC 2700                  		move	#$2700,sr
0000513E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005142 0200 00BF                  		andi.b	#$BF,d0
00005146 33C0 00C0 0004             		move.w	d0,($C00004).l
0000514C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005152 3CBC 8004                  		move.w	#$8004,(a6)
00005156 3CBC 8700                  		move.w	#$8700,(a6)
0000515A 6100 C16A                  		bsr.w	ClearScreen
0000515E 43F8 D000                  		lea	($FFFFD000).w,a1
00005162 7000                       		moveq	#0,d0
00005164 323C 07FF                  		move.w	#$7FF,d1
00005168                            
00005168                            Cont_ClrObjRam:
00005168 22C0                       		move.l	d0,(a1)+
0000516A 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000516E                            
0000516E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005178 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000517E 6100 C2C2                  		bsr.w	NemDec
00005182 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000518C 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005192 6100 C2AE                  		bsr.w	NemDec
00005196 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
000051A0 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
000051A6 6100 C29A                  		bsr.w	NemDec
000051AA 720A                       		moveq	#10,d1
000051AC 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000051B2 7012                       		moveq	#$12,d0
000051B4 6100 CF1C                  		bsr.w	PalLoad1	; load continue	screen pallet
000051B8 103C 0090                  		move.b	#$90,d0
000051BC 6100 C1DA                  		bsr.w	PlaySound	; play continue	music
000051C0 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000051C6 42B8 F700                  		clr.l	($FFFFF700).w
000051CA 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000051D2 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000051D8 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000051DE 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000051E4 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000051EA 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000051F0 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000051F6 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000051FC 4EB9 0000 0000             		jsr	ObjectsLoad
00005202 4EB9 0000 0000             		jsr	BuildSprites
00005208 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000520C 0000 0040                  		ori.b	#$40,d0
00005210 33C0 00C0 0004             		move.w	d0,($C00004).l
00005216 6100 CB66                  		bsr.w	Pal_FadeTo
0000521A                            
0000521A                            ; ---------------------------------------------------------------------------
0000521A                            ; Continue screen main loop
0000521A                            ; ---------------------------------------------------------------------------
0000521A                            
0000521A                            Cont_MainLoop:
0000521A 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005220 6100 D8EC                  		bsr.w	DelayProgram
00005224 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000522A 6400                       		bcc.s	loc_4DF2
0000522C 46FC 2700                  		move	#$2700,sr
00005230 3238 F614                  		move.w	($FFFFF614).w,d1
00005234 82FC 003C                  		divu.w	#$3C,d1
00005238 0281 0000 000F             		andi.l	#$F,d1
0000523E 4EB9 0000 0000             		jsr	ContScrCounter
00005244 46FC 2300                  		move	#$2300,sr
00005248                            
00005248                            loc_4DF2:
00005248 4EB9 0000 0000             		jsr	ObjectsLoad
0000524E 4EB9 0000 0000             		jsr	BuildSprites
00005254 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000525A 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000525C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005262 64B6                       		bcc.s	Cont_MainLoop
00005264 4A78 F614                  		tst.w	($FFFFF614).w
00005268 6600 FFB0                  		bne.w	Cont_MainLoop
0000526C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005272 4E75                       		rts	
00005274                            ; ===========================================================================
00005274                            
00005274                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005274 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000527A 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005280 7000                       		moveq	#0,d0
00005282 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005286 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000528A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000528E 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005292 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005296 4E75                       		rts	
00005298                            ; ===========================================================================
00005298                            
00005298                            ; ---------------------------------------------------------------------------
00005298                            ; Object 80 - Continue screen elements
00005298                            ; ---------------------------------------------------------------------------
00005298                            
00005298                            Obj80:					; XREF: Obj_Index
00005298 7000                       		moveq	#0,d0
0000529A 1028 0024                  		move.b	$24(a0),d0
0000529E 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
000052A2 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
000052A6                            ; ===========================================================================
000052A6 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
000052A8 0000                       		dc.w Obj80_Display-Obj80_Index
000052AA 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000052AC 0000                       		dc.w Obj80_ChkType-Obj80_Index
000052AE                            ; ===========================================================================
000052AE                            
000052AE                            Obj80_Main:				; XREF: Obj80_Index
000052AE 5428 0024                  		addq.b	#2,$24(a0)
000052B2 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000052BA 317C 8500 0002             		move.w	#$8500,2(a0)
000052C0 117C 0000 0001             		move.b	#0,1(a0)
000052C6 117C 003C 0019             		move.b	#$3C,$19(a0)
000052CC 317C 0120 0008             		move.w	#$120,8(a0)
000052D2 317C 00C0 000A             		move.w	#$C0,$A(a0)
000052D8 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000052DE                            
000052DE                            Obj80_Display:				; XREF: Obj80_Index
000052DE 4EF9 0000 0000             		jmp	DisplaySprite
000052E4                            ; ===========================================================================
000052E4                            Obj80_MiniSonicPos:
000052E4 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000052F6 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005302                            ; ===========================================================================
00005302                            
00005302                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00005302 2248                       		movea.l	a0,a1
00005304 45F9 0000 52E4             		lea	(Obj80_MiniSonicPos).l,a2
0000530A 7200                       		moveq	#0,d1
0000530C 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005310 5501                       		subq.b	#2,d1
00005312 6400                       		bcc.s	loc_4EC4
00005314 4EF9 0000 0000             		jmp	DeleteObject
0000531A                            ; ===========================================================================
0000531A                            
0000531A                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
0000531A 7601                       		moveq	#1,d3
0000531C 0C01 000E                  		cmpi.b	#$E,d1
00005320 6500                       		bcs.s	loc_4ED0
00005322 7600                       		moveq	#0,d3
00005324 720E                       		moveq	#$E,d1
00005326                            
00005326                            loc_4ED0:
00005326 1401                       		move.b	d1,d2
00005328 0202 0001                  		andi.b	#1,d2
0000532C                            
0000532C                            Obj80_MiniSonLoop:
0000532C 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005330 335A 0008                  		move.w	(a2)+,8(a1)
00005334 4A02                       		tst.b	d2
00005336 6700                       		beq.s	loc_4EEA
00005338 0469 000A 0008             		subi.w	#$A,8(a1)
0000533E                            
0000533E                            loc_4EEA:
0000533E 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005344 137C 0006 001A             		move.b	#6,$1A(a1)
0000534A 137C 0006 0024             		move.b	#6,$24(a1)
00005350 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005358 337C 8551 0002             		move.w	#$8551,2(a1)
0000535E 137C 0000 0001             		move.b	#0,1(a1)
00005364 43E9 0040                  		lea	$40(a1),a1
00005368 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000536C 43E9 FFC0                  		lea	-$40(a1),a1
00005370 1343 0028                  		move.b	d3,$28(a1)
00005374                            
00005374                            Obj80_ChkType:				; XREF: Obj80_Index
00005374 4A28 0028                  		tst.b	$28(a0)
00005378 6700                       		beq.s	loc_4F40
0000537A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005380 6500                       		bcs.s	loc_4F40
00005382 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005386 0200 0001                  		andi.b	#1,d0
0000538A 6600                       		bne.s	loc_4F40
0000538C 4A78 D010                  		tst.w	($FFFFD010).w
00005390 6600                       		bne.s	Obj80_Delete
00005392 4E75                       		rts	
00005394                            ; ===========================================================================
00005394                            
00005394                            loc_4F40:				; XREF: Obj80_ChkType
00005394 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005398 0200 000F                  		andi.b	#$F,d0
0000539C 6600                       		bne.s	Obj80_Display2
0000539E 0868 0000 001A             		bchg	#0,$1A(a0)
000053A4                            
000053A4                            Obj80_Display2:
000053A4 4EF9 0000 0000             		jmp	DisplaySprite
000053AA                            ; ===========================================================================
000053AA                            
000053AA                            Obj80_Delete:				; XREF: Obj80_ChkType
000053AA 4EF9 0000 0000             		jmp	DeleteObject
000053B0                            ; ===========================================================================
000053B0                            
000053B0                            ; ---------------------------------------------------------------------------
000053B0                            ; Object 81 - Sonic on the continue screen
000053B0                            ; ---------------------------------------------------------------------------
000053B0                            
000053B0                            Obj81:					; XREF: Obj_Index
000053B0 7000                       		moveq	#0,d0
000053B2 1028 0024                  		move.b	$24(a0),d0
000053B6 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000053BA 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000053BE 4EF9 0000 0000             		jmp	DisplaySprite
000053C4                            ; ===========================================================================
000053C4 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000053C6 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000053C8 0000                       		dc.w Obj81_Animate-Obj81_Index
000053CA 0000                       		dc.w Obj81_Run-Obj81_Index
000053CC                            ; ===========================================================================
000053CC                            
000053CC                            Obj81_Main:				; XREF: Obj81_Index
000053CC 5428 0024                  		addq.b	#2,$24(a0)
000053D0 317C 00A0 0008             		move.w	#$A0,8(a0)
000053D6 317C 00C0 000C             		move.w	#$C0,$C(a0)
000053DC 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000053E4 317C 0780 0002             		move.w	#$780,2(a0)
000053EA 117C 0004 0001             		move.b	#4,1(a0)
000053F0 117C 0002 0018             		move.b	#2,$18(a0)
000053F6 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000053FC 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005402                            
00005402                            Obj81_ChkLand:				; XREF: Obj81_Index
00005402 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005408 6600                       		bne.s	Obj81_ShowFall	; if not, branch
0000540A 5428 0024                  		addq.b	#2,$24(a0)
0000540E 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005412 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000541A 317C 8500 0002             		move.w	#$8500,2(a0)
00005420 117C 0000 001C             		move.b	#0,$1C(a0)
00005426 6000                       		bra.s	Obj81_Animate
00005428                            ; ===========================================================================
00005428                            
00005428                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005428 4EB9 0000 0000             		jsr	SpeedToPos
0000542E 4EB9 0000 0000             		jsr	Sonic_Animate
00005434 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000543A                            ; ===========================================================================
0000543A                            
0000543A                            Obj81_Animate:				; XREF: Obj81_Index
0000543A 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000543E 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005440 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005446 4EF9 0000 0000             		jmp	AnimateSprite
0000544C                            ; ===========================================================================
0000544C                            
0000544C                            Obj81_GetUp:				; XREF: Obj81_Animate
0000544C 5428 0024                  		addq.b	#2,$24(a0)
00005450 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005458 317C 0780 0002             		move.w	#$780,2(a0)
0000545E 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005464 4268 0014                  		clr.w	$14(a0)
00005468 5168 000C                  		subq.w	#8,$C(a0)
0000546C 103C 00E0                  		move.b	#$E0,d0
00005470 6100 BF2C                  		bsr.w	PlaySound_Special ; fade out music
00005474                            
00005474                            Obj81_Run:				; XREF: Obj81_Index
00005474 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000547A 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000547C 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005482 6000                       		bra.s	Obj81_ShowRun
00005484                            ; ===========================================================================
00005484                            
00005484                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005484 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000548A                            
0000548A                            Obj81_ShowRun:				; XREF: Obj81_Run
0000548A 4EB9 0000 0000             		jsr	SpeedToPos
00005490 4EB9 0000 0000             		jsr	Sonic_Animate
00005496 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000549C                            ; ===========================================================================
0000549C                            Ani_obj81:
0000549C                            	include "_anim\obj81.asm"
0000549C                            ; ---------------------------------------------------------------------------
0000549C                            ; Animation script - Sonic on the continue screen
0000549C                            ; ---------------------------------------------------------------------------
0000549C 0000                       		dc.w byte_504A-Ani_obj81
0000549E 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
000054AA 00                         		even
000054AA 00                         		even
000054AA                            
000054AA                            ; ---------------------------------------------------------------------------
000054AA                            ; Sprite mappings - Continue screen
000054AA                            ; ---------------------------------------------------------------------------
000054AA                            Map_obj80:
000054AA                            	include "_maps\obj80.asm"
000054AA                            ; ---------------------------------------------------------------------------
000054AA                            ; Sprite mappings - Continue screen
000054AA                            ; ---------------------------------------------------------------------------
000054AA 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
000054AE 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000054B2 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000054B6 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000054BA 0B                         byte_5066:	dc.b $B
000054BB F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000054C0 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000054C5 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000054CA F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000054CF F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000054D4 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000054D9 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000054DE F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000054E3 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000054E8 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000054ED 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000054F2 03                         byte_509E:	dc.b 3
000054F3 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000054F8 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000054FD F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005502 03                         byte_50AE:	dc.b 3
00005503 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005508 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000550D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005512 03                         byte_50BE:	dc.b 3
00005513 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005518 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000551D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005522 02                         byte_50CE:	dc.b 2
00005523 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005528 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000552D 01                         byte_50D9:	dc.b 1
0000552E 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005533 01                         byte_50DF:	dc.b 1
00005534 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
0000553A 00                         		even
0000553A 00                         		even
0000553A                            
0000553A                            ; ===========================================================================
0000553A                            ; ---------------------------------------------------------------------------
0000553A                            ; Ending sequence in Green Hill	Zone
0000553A                            ; ---------------------------------------------------------------------------
0000553A                            
0000553A                            EndingSequence:				; XREF: GameModeArray
0000553A 103C 00E4                  		move.b	#$E4,d0
0000553E 6100 BE5E                  		bsr.w	PlaySound_Special ; stop music
00005542 6100 C8E4                  		bsr.w	Pal_FadeFrom
00005546 43F8 D000                  		lea	($FFFFD000).w,a1
0000554A 7000                       		moveq	#0,d0
0000554C 323C 07FF                  		move.w	#$7FF,d1
00005550                            
00005550                            End_ClrObjRam:
00005550 22C0                       		move.l	d0,(a1)+
00005552 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005556                            
00005556 43F8 F628                  		lea	($FFFFF628).w,a1
0000555A 7000                       		moveq	#0,d0
0000555C 323C 0015                  		move.w	#$15,d1
00005560                            
00005560                            End_ClrRam:
00005560 22C0                       		move.l	d0,(a1)+
00005562 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005566                            
00005566 43F8 F700                  		lea	($FFFFF700).w,a1
0000556A 7000                       		moveq	#0,d0
0000556C 323C 003F                  		move.w	#$3F,d1
00005570                            
00005570                            End_ClrRam2:
00005570 22C0                       		move.l	d0,(a1)+
00005572 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005576                            
00005576 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000557A 7000                       		moveq	#0,d0
0000557C 323C 0047                  		move.w	#$47,d1
00005580                            
00005580                            End_ClrRam3:
00005580 22C0                       		move.l	d0,(a1)+
00005582 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005586                            
00005586 46FC 2700                  		move	#$2700,sr
0000558A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000558E 0200 00BF                  		andi.b	#$BF,d0
00005592 33C0 00C0 0004             		move.w	d0,($C00004).l
00005598 6100 BD2C                  		bsr.w	ClearScreen
0000559C 4DF9 00C0 0004             		lea	($C00004).l,a6
000055A2 3CBC 8B03                  		move.w	#$8B03,(a6)
000055A6 3CBC 8230                  		move.w	#$8230,(a6)
000055AA 3CBC 8407                  		move.w	#$8407,(a6)
000055AE 3CBC 857C                  		move.w	#$857C,(a6)
000055B2 3CBC 9001                  		move.w	#$9001,(a6)
000055B6 3CBC 8004                  		move.w	#$8004,(a6)
000055BA 3CBC 8720                  		move.w	#$8720,(a6)
000055BE 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000055C4 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000055C8 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000055CE 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000055D4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000055DA 6700                       		beq.s	End_LoadData	; if yes, branch
000055DC 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000055E2                            
000055E2                            End_LoadData:
000055E2 701C                       		moveq	#$1C,d0
000055E4 6100 C108                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000055E8 4EB9 0000 0000             		jsr	Hud_Base
000055EE 6100 0000                  		bsr.w	LevelSizeLoad
000055F2 6100 0000                  		bsr.w	DeformBgLayer
000055F6 08F8 0002 F754             		bset	#2,($FFFFF754).w
000055FC 6100 0000                  		bsr.w	MainLoadBlockLoad
00005600 6100 0000                  		bsr.w	LoadTilesFromStart
00005604 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
0000560C 46FC 2300                  		move	#$2300,sr
00005610 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005616 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
0000561A 6100 C282                  		bsr.w	KosDec
0000561E 7003                       		moveq	#3,d0
00005620 6100 CAB0                  		bsr.w	PalLoad1	; load Sonic's pallet
00005624 303C 008B                  		move.w	#$8B,d0
00005628 6100 BD6E                  		bsr.w	PlaySound	; play ending sequence music
0000562C 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005632 6700                       		beq.s	End_LoadSonic	; if not, branch
00005634 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000563A                            
0000563A                            End_LoadSonic:
0000563A 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005640 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005646 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000564C 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005652 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005658 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000565E 4EB9 0000 0000             		jsr	ObjPosLoad
00005664 4EB9 0000 0000             		jsr	ObjectsLoad
0000566A 4EB9 0000 0000             		jsr	BuildSprites
00005670 7000                       		moveq	#0,d0
00005672 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005676 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000567A 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000567E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005682 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005686 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000568A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000568E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005692 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005696 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000569A 6100 EEE0                  		bsr.w	OscillateNumInit
0000569E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
000056A4 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
000056AA 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000056B0 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000056B6 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000056BC 6100 D450                  		bsr.w	DelayProgram
000056C0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000056C4 0000 0040                  		ori.b	#$40,d0
000056C8 33C0 00C0 0004             		move.w	d0,($C00004).l
000056CE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000056D4 6100 C6A8                  		bsr.w	Pal_FadeTo
000056D8                            
000056D8                            ; ---------------------------------------------------------------------------
000056D8                            ; Main ending sequence loop
000056D8                            ; ---------------------------------------------------------------------------
000056D8                            
000056D8                            End_MainLoop:
000056D8 6100 BCD0                  		bsr.w	PauseGame
000056DC 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000056E2 6100 D42A                  		bsr.w	DelayProgram
000056E6 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000056EA 6100 0000                  		bsr.w	End_MoveSonic
000056EE 4EB9 0000 0000             		jsr	ObjectsLoad
000056F4 6100 0000                  		bsr.w	DeformBgLayer
000056F8 4EB9 0000 0000             		jsr	BuildSprites
000056FE 4EB9 0000 0000             		jsr	ObjPosLoad
00005704 6100 C238                  		bsr.w	PalCycle_Load
00005708 6100 EEC8                  		bsr.w	OscillateNumDo
0000570C 6100 EF54                  		bsr.w	ChangeRingFrame
00005710 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005716 6700                       		beq.s	loc_52DA	; if yes, branch
00005718 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000571E 103C 0091                  		move.b	#$91,d0
00005722 6100 BC7A                  		bsr.w	PlaySound_Special ; play credits music
00005726 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000572C 4E75                       		rts	
0000572E                            ; ===========================================================================
0000572E                            
0000572E                            loc_52DA:
0000572E 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005732 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005736                            
00005736 4278 FE02                  		clr.w	($FFFFFE02).w
0000573A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005740 4278 F794                  		clr.w	($FFFFF794).w
00005744                            
00005744                            End_AllEmlds:				; XREF: loc_5334
00005744 6100 BC64                  		bsr.w	PauseGame
00005748 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000574E 6100 D3BE                  		bsr.w	DelayProgram
00005752 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005756 6100 0000                  		bsr.w	End_MoveSonic
0000575A 4EB9 0000 0000             		jsr	ObjectsLoad
00005760 6100 0000                  		bsr.w	DeformBgLayer
00005764 4EB9 0000 0000             		jsr	BuildSprites
0000576A 4EB9 0000 0000             		jsr	ObjPosLoad
00005770 6100 EE60                  		bsr.w	OscillateNumDo
00005774 6100 EEEC                  		bsr.w	ChangeRingFrame
00005778 5378 F794                  		subq.w	#1,($FFFFF794).w
0000577C 6A00                       		bpl.s	loc_5334
0000577E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005784 6100 C7EC                  		bsr.w	Pal_ToWhite
00005788                            
00005788                            loc_5334:
00005788 4A78 FE02                  		tst.w	($FFFFFE02).w
0000578C 6700 FFB6                  		beq.w	End_AllEmlds
00005790 4278 FE02                  		clr.w	($FFFFFE02).w
00005794 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000579A 4BF9 00C0 0004             		lea	($C00004).l,a5
000057A0 4DF9 00C0 0000             		lea	($C00000).l,a6
000057A6 47F8 F700                  		lea	($FFFFF700).w,a3
000057AA 49F8 A400                  		lea	($FFFFA400).w,a4
000057AE 343C 4000                  		move.w	#$4000,d2
000057B2 6100 0000                  		bsr.w	LoadTilesFromStart2
000057B6 7013                       		moveq	#$13,d0
000057B8 6100 C918                  		bsr.w	PalLoad1	; load ending pallet
000057BC 6100 C6E8                  		bsr.w	Pal_MakeWhite
000057C0 6000 FF16                  		bra.w	End_MainLoop
000057C4                            
000057C4                            ; ---------------------------------------------------------------------------
000057C4                            ; Subroutine controlling Sonic on the ending sequence
000057C4                            ; ---------------------------------------------------------------------------
000057C4                            
000057C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000057C4                            
000057C4                            
000057C4                            End_MoveSonic:				; XREF: End_MainLoop
000057C4 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000057C8 6600                       		bne.s	End_MoveSonic2
000057CA 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000057D0 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000057D2 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000057D6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000057DC 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000057E2 4E75                       		rts	
000057E4                            ; ===========================================================================
000057E4                            
000057E4                            End_MoveSonic2:				; XREF: End_MoveSonic
000057E4 5500                       		subq.b	#2,d0
000057E6 6600                       		bne.s	End_MoveSonic3
000057E8 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000057EE 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000057F0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000057F4 7000                       		moveq	#0,d0
000057F6 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000057FA 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000057FE 31C0 D014                  		move.w	d0,($FFFFD014).w
00005802 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005808 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
0000580E 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005814 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
0000581A 4E75                       		rts	
0000581C                            ; ===========================================================================
0000581C                            
0000581C                            End_MoveSonic3:				; XREF: End_MoveSonic
0000581C 5500                       		subq.b	#2,d0
0000581E 6600                       		bne.s	End_MoveSonExit
00005820 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005824 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
0000582A 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005830 4278 D024                  		clr.w	($FFFFD024).w
00005834                            
00005834                            End_MoveSonExit:
00005834 4E75                       		rts	
00005836                            ; End of function End_MoveSonic
00005836                            
00005836                            ; ===========================================================================
00005836                            ; ---------------------------------------------------------------------------
00005836                            ; Object 87 - Sonic on ending sequence
00005836                            ; ---------------------------------------------------------------------------
00005836                            
00005836                            Obj87:					; XREF: Obj_Index
00005836 7000                       		moveq	#0,d0
00005838 1028 0025                  		move.b	$25(a0),d0
0000583C 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005840 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005844 4EF9 0000 0000             		jmp	DisplaySprite
0000584A                            ; ===========================================================================
0000584A 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000584E 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005852 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005856 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
0000585A 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000585E                            ; ===========================================================================
0000585E                            
0000585E                            Obj87_Main:				; XREF: Obj87_Index
0000585E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005864 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005866 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000586C 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005872 4E75                       		rts	
00005874                            ; ===========================================================================
00005874                            
00005874                            Obj87_Main2:				; XREF: Obj87_Main
00005874 5428 0025                  		addq.b	#2,$25(a0)
00005878 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005880 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005886 117C 0004 0001             		move.b	#4,1(a0)
0000588C 4228 0022                  		clr.b	$22(a0)
00005890 117C 0002 0018             		move.b	#2,$18(a0)
00005896 117C 0000 001A             		move.b	#0,$1A(a0)
0000589C 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
000058A2                            
000058A2                            Obj87_MakeEmlds:			; XREF: Obj87_Index
000058A2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000058A6 6600                       		bne.s	Obj87_Wait
000058A8 5428 0025                  		addq.b	#2,$25(a0)
000058AC 317C 0001 001C             		move.w	#1,$1C(a0)
000058B2 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000058B8                            
000058B8                            Obj87_Wait:
000058B8 4E75                       		rts	
000058BA                            ; ===========================================================================
000058BA                            
000058BA                            Obj87_LookUp:				; XREF: Obj87_Index
000058BA 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000058C2 6600                       		bne.s	locret_5480
000058C4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000058CA 317C 005A 0030             		move.w	#$5A,$30(a0)
000058D0 5428 0025                  		addq.b	#2,$25(a0)
000058D4                            
000058D4                            locret_5480:
000058D4 4E75                       		rts	
000058D6                            ; ===========================================================================
000058D6                            
000058D6                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000058D6 5368 0030                  		subq.w	#1,$30(a0)
000058DA 6600                       		bne.s	Obj87_Wait2
000058DC 43F8 D400                  		lea	($FFFFD400).w,a1
000058E0 323C 00FF                  		move.w	#$FF,d1
000058E4                            
000058E4                            Obj87_ClrLoop:
000058E4 4299                       		clr.l	(a1)+
000058E6 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000058EA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000058F0 5428 0025                  		addq.b	#2,$25(a0)
000058F4 117C 0001 001C             		move.b	#1,$1C(a0)
000058FA 317C 003C 0030             		move.w	#$3C,$30(a0)
00005900                            
00005900                            Obj87_Wait2:
00005900 4E75                       		rts	
00005902                            ; ===========================================================================
00005902                            
00005902                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005902 5368 0030                  		subq.w	#1,$30(a0)
00005906 6600                       		bne.s	Obj87_Wait3
00005908 5428 0025                  		addq.b	#2,$25(a0)
0000590C 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005912 117C 0002 001C             		move.b	#2,$1C(a0)
00005918 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000591E                            
0000591E                            Obj87_Wait3:
0000591E 4E75                       		rts	
00005920                            ; ===========================================================================
00005920                            
00005920                            Obj87_Animate:				; XREF: Obj87_Index
00005920 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005926 4EF9 0000 0000             		jmp	AnimateSprite
0000592C                            ; ===========================================================================
0000592C                            
0000592C                            Obj87_Leap:				; XREF: Obj87_Index
0000592C 5368 0030                  		subq.w	#1,$30(a0)
00005930 6600                       		bne.s	Obj87_Wait4
00005932 5428 0025                  		addq.b	#2,$25(a0)
00005936 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000593E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005944 117C 0004 0001             		move.b	#4,1(a0)
0000594A 4228 0022                  		clr.b	$22(a0)
0000594E 117C 0002 0018             		move.b	#2,$18(a0)
00005954 117C 0005 001A             		move.b	#5,$1A(a0)
0000595A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005960 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005966 60B8                       		bra.s	Obj87_Animate
00005968                            ; ===========================================================================
00005968                            
00005968                            Obj87_Wait4:				; XREF: Obj87_Leap
00005968 4E75                       		rts	
0000596A                            ; ===========================================================================
0000596A                            Ani_obj87:
0000596A                            	include "_anim\obj87.asm"
0000596A                            ; ---------------------------------------------------------------------------
0000596A                            ; Animation script - Sonic on the ending sequence
0000596A                            ; ---------------------------------------------------------------------------
0000596A 0000                       		dc.w byte_551C-Ani_obj87
0000596C 0000                       		dc.w byte_552A-Ani_obj87
0000596E 0000                       		dc.w byte_5534-Ani_obj87
00005970 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000597E 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005988 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005990                            		even
00005990                            		even
00005990                            
00005990                            ; ===========================================================================
00005990                            ; ---------------------------------------------------------------------------
00005990                            ; Object 88 - chaos emeralds on	the ending sequence
00005990                            ; ---------------------------------------------------------------------------
00005990                            
00005990                            Obj88:					; XREF: Obj_Index
00005990 7000                       		moveq	#0,d0
00005992 1028 0024                  		move.b	$24(a0),d0
00005996 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
0000599A 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000599E 4EF9 0000 0000             		jmp	DisplaySprite
000059A4                            ; ===========================================================================
000059A4 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
000059A6 0000                       		dc.w Obj88_Move-Obj88_Index
000059A8                            ; ===========================================================================
000059A8                            
000059A8                            Obj88_Main:				; XREF: Obj88_Index
000059A8 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
000059AE 6700                       		beq.s	Obj88_Main2
000059B0 588F                       		addq.l	#4,sp
000059B2 4E75                       		rts	
000059B4                            ; ===========================================================================
000059B4                            
000059B4                            Obj88_Main2:				; XREF: Obj88_Main
000059B4 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000059BA 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
000059C0 2248                       		movea.l	a0,a1
000059C2 7600                       		moveq	#0,d3
000059C4 7401                       		moveq	#1,d2
000059C6 7205                       		moveq	#5,d1
000059C8                            
000059C8                            Obj88_MainLoop:
000059C8 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000059CC 5429 0024                  		addq.b	#2,$24(a1)
000059D0 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000059D8 337C 03C5 0002             		move.w	#$3C5,2(a1)
000059DE 137C 0004 0001             		move.b	#4,1(a1)
000059E4 137C 0001 0018             		move.b	#1,$18(a1)
000059EA 3368 0008 0038             		move.w	8(a0),$38(a1)
000059F0 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000059F6 1342 001C                  		move.b	d2,$1C(a1)
000059FA 1342 001A                  		move.b	d2,$1A(a1)
000059FE 5202                       		addq.b	#1,d2
00005A00 1343 0026                  		move.b	d3,$26(a1)
00005A04 0603 002A                  		addi.b	#$2A,d3
00005A08 43E9 0040                  		lea	$40(a1),a1
00005A0C 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005A10                            
00005A10                            Obj88_Move:				; XREF: Obj88_Index
00005A10 3028 003E                  		move.w	$3E(a0),d0
00005A14 D168 0026                  		add.w	d0,$26(a0)
00005A18 1028 0026                  		move.b	$26(a0),d0
00005A1C 4EB9 0000 2B40             		jsr	(CalcSine).l
00005A22 7800                       		moveq	#0,d4
00005A24 1828 003C                  		move.b	$3C(a0),d4
00005A28 C3C4                       		muls.w	d4,d1
00005A2A E081                       		asr.l	#8,d1
00005A2C C1C4                       		muls.w	d4,d0
00005A2E E080                       		asr.l	#8,d0
00005A30 D268 0038                  		add.w	$38(a0),d1
00005A34 D068 003A                  		add.w	$3A(a0),d0
00005A38 3141 0008                  		move.w	d1,8(a0)
00005A3C 3140 000C                  		move.w	d0,$C(a0)
00005A40 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005A46 6700                       		beq.s	loc_55FA
00005A48 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005A4E                            
00005A4E                            loc_55FA:
00005A4E 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005A54 6700                       		beq.s	loc_5608
00005A56 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005A5C                            
00005A5C                            loc_5608:
00005A5C 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005A62 6700                       		beq.s	locret_5614
00005A64 5368 003A                  		subq.w	#1,$3A(a0)
00005A68                            
00005A68                            locret_5614:
00005A68 4E75                       		rts	
00005A6A                            ; ===========================================================================
00005A6A                            ; ---------------------------------------------------------------------------
00005A6A                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005A6A                            ; ---------------------------------------------------------------------------
00005A6A                            
00005A6A                            Obj89:					; XREF: Obj_Index
00005A6A 7000                       		moveq	#0,d0
00005A6C 1028 0024                  		move.b	$24(a0),d0
00005A70 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005A74 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005A78                            ; ===========================================================================
00005A78 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005A7A 0000                       		dc.w Obj89_Move-Obj89_Index
00005A7C 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005A7E                            ; ===========================================================================
00005A7E                            
00005A7E                            Obj89_Main:				; XREF: Obj89_Index
00005A7E 5428 0024                  		addq.b	#2,$24(a0)
00005A82 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005A88 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005A8E 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005A96 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005A9C 117C 0000 0001             		move.b	#0,1(a0)
00005AA2 117C 0000 0018             		move.b	#0,$18(a0)
00005AA8                            
00005AA8                            Obj89_Move:				; XREF: Obj89_Index
00005AA8 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005AAE 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005AB0 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005AB6 4EB9 0000 0000             		jsr	DisplaySprite
00005ABC                            ; ===========================================================================
00005ABC                            
00005ABC                            Obj89_Delay:				; XREF: Obj89_Move
00005ABC 5428 0024                  		addq.b	#2,$24(a0)
00005AC0 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005AC6                            
00005AC6                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005AC6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005ACA 6A00                       		bpl.s	Obj89_Display
00005ACC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005AD2                            
00005AD2                            Obj89_Display:
00005AD2 4EB9 0000 0000             		jsr	DisplaySprite
00005AD8                            ; ===========================================================================
00005AD8                            ; ---------------------------------------------------------------------------
00005AD8                            ; Sprite mappings - Sonic on the ending	sequence
00005AD8                            ; ---------------------------------------------------------------------------
00005AD8                            Map_obj87:
00005AD8                            	include "_maps\obj87.asm"
00005AD8                            ; ---------------------------------------------------------------------------
00005AD8                            ; Sprite mappings - Sonic on the ending	sequence
00005AD8                            ; ---------------------------------------------------------------------------
00005AD8 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005ADC 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005AE0 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005AE4 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005AE8 02                         byte_5690:	dc.b 2
00005AE9 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005AEE 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005AF3 03                         byte_569B:	dc.b 3
00005AF4 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005AF9 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005AFE 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005B03 02                         byte_56AB:	dc.b 2
00005B04 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005B09 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005B0E 02                         byte_56B6:	dc.b 2
00005B0F EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005B14 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005B19 02                         byte_56C1:	dc.b 2
00005B1A EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005B1F FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005B24 03                         byte_56CC:	dc.b 3
00005B25 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005B2A EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005B2F 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005B34 07                         byte_56DC:	dc.b 7
00005B35 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005B3A BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005B3F BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005B44 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005B49 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005B4E E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005B53 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005B58 18                         byte_5700:	dc.b $18
00005B59 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005B5E 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005B63 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005B68 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005B6D A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005B72 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005B77 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005B7C A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005B81 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005B86 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005B8B A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005B90 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005B95 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005B9A B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005B9F B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005BA4 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005BA9 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005BAE D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005BB3 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005BB8 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005BBD D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005BC2 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005BC7 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005BCC F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005BD2 00                         		even
00005BD2 00                         		even
00005BD2                            
00005BD2                            ; ---------------------------------------------------------------------------
00005BD2                            ; Sprite mappings - chaos emeralds on the ending sequence
00005BD2                            ; ---------------------------------------------------------------------------
00005BD2                            Map_obj88:
00005BD2                            	include "_maps\obj88.asm"
00005BD2                            ; ---------------------------------------------------------------------------
00005BD2                            ; Sprite mappings - chaos emeralds on the ending sequence
00005BD2                            ; ---------------------------------------------------------------------------
00005BD2 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005BD6 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005BDA 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005BDE 0000                       		dc.w byte_57AC-Map_obj88
00005BE0 01                         byte_5788:	dc.b 1
00005BE1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005BE6 01                         byte_578E:	dc.b 1
00005BE7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005BEC 01                         byte_5794:	dc.b 1
00005BED F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005BF2 01                         byte_579A:	dc.b 1
00005BF3 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005BF8 01                         byte_57A0:	dc.b 1
00005BF9 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005BFE 01                         byte_57A6:	dc.b 1
00005BFF F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005C04 01                         byte_57AC:	dc.b 1
00005C05 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005C0A                            		even
00005C0A                            		even
00005C0A                            
00005C0A                            ; ---------------------------------------------------------------------------
00005C0A                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005C0A                            ; ---------------------------------------------------------------------------
00005C0A                            Map_obj89:
00005C0A                            	include "_maps\obj89.asm"
00005C0A                            ; ---------------------------------------------------------------------------
00005C0A                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005C0A                            ; ---------------------------------------------------------------------------
00005C0A 0000                       		dc.w byte_57B4-Map_obj89
00005C0C 03                         byte_57B4:	dc.b 3
00005C0D F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005C12 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005C17 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005C1C                            		even
00005C1C                            		even
00005C1C                            
00005C1C                            ; ===========================================================================
00005C1C                            ; ---------------------------------------------------------------------------
00005C1C                            ; Credits ending sequence
00005C1C                            ; ---------------------------------------------------------------------------
00005C1C                            
00005C1C                            Credits:				; XREF: GameModeArray
00005C1C 6100 B9C2                  		bsr.w	ClearPLC
00005C20 6100 C206                  		bsr.w	Pal_FadeFrom
00005C24 4DF9 00C0 0004             		lea	($C00004).l,a6
00005C2A 3CBC 8004                  		move.w	#$8004,(a6)
00005C2E 3CBC 8230                  		move.w	#$8230,(a6)
00005C32 3CBC 8407                  		move.w	#$8407,(a6)
00005C36 3CBC 9001                  		move.w	#$9001,(a6)
00005C3A 3CBC 9200                  		move.w	#$9200,(a6)
00005C3E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005C42 3CBC 8720                  		move.w	#$8720,(a6)
00005C46 4238 F64E                  		clr.b	($FFFFF64E).w
00005C4A 6100 B67A                  		bsr.w	ClearScreen
00005C4E 43F8 D000                  		lea	($FFFFD000).w,a1
00005C52 7000                       		moveq	#0,d0
00005C54 323C 07FF                  		move.w	#$7FF,d1
00005C58                            
00005C58                            Cred_ClrObjRam:
00005C58 22C0                       		move.l	d0,(a1)+
00005C5A 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005C5E                            
00005C5E 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005C68 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005C6E 6100 B7D2                  		bsr.w	NemDec
00005C72 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005C76 7000                       		moveq	#0,d0
00005C78 323C 001F                  		move.w	#$1F,d1
00005C7C                            
00005C7C                            Cred_ClrPallet:
00005C7C 22C0                       		move.l	d0,(a1)+
00005C7E 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005C82                            
00005C82 7003                       		moveq	#3,d0
00005C84 6100 C44C                  		bsr.w	PalLoad1	; load Sonic's pallet
00005C88 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005C8E 4EB9 0000 0000             		jsr	ObjectsLoad
00005C94 4EB9 0000 0000             		jsr	BuildSprites
00005C9A 6100 0000                  		bsr.w	EndingDemoLoad
00005C9E 7000                       		moveq	#0,d0
00005CA0 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005CA4 E948                       		lsl.w	#4,d0
00005CA6 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005CAC 45F2 0000                  		lea	(a2,d0.w),a2
00005CB0 7000                       		moveq	#0,d0
00005CB2 1012                       		move.b	(a2),d0
00005CB4 6700                       		beq.s	loc_5862
00005CB6 6100 B8CA                  		bsr.w	LoadPLC		; load level patterns
00005CBA                            
00005CBA                            loc_5862:
00005CBA 7001                       		moveq	#1,d0
00005CBC 6100 B8C4                  		bsr.w	LoadPLC		; load standard	level patterns
00005CC0 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005CC6 6100 C0B6                  		bsr.w	Pal_FadeTo
00005CCA                            
00005CCA                            Cred_WaitLoop:
00005CCA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005CD0 6100 CE3C                  		bsr.w	DelayProgram
00005CD4 6100 B918                  		bsr.w	RunPLC_RAM
00005CD8 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005CDC 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005CDE 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005CE2 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005CE4 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005CEA 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005CEE 4E75                       		rts	
00005CF0                            
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            ; Ending sequence demo loading subroutine
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            
00005CF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005CF0                            
00005CF0                            
00005CF0                            EndingDemoLoad:				; XREF: Credits
00005CF0 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005CF4 0240 000F                  		andi.w	#$F,d0
00005CF8 D040                       		add.w	d0,d0
00005CFA 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005CFE 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005D02 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005D06 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005D0C 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005D0E 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005D14 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005D1A 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005D20 7000                       		moveq	#0,d0
00005D22 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005D26 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005D2A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005D2E 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005D32 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005D38 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005D3A 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005D40 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005D44 303C 0008                  		move.w	#8,d0
00005D48                            
00005D48                            EndDemo_LampLoad:
00005D48 24D9                       		move.l	(a1)+,(a2)+
00005D4A 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005D4E                            
00005D4E                            EndDemo_Exit:
00005D4E 4E75                       		rts	
00005D50                            ; End of function EndingDemoLoad
00005D50                            
00005D50                            ; ===========================================================================
00005D50                            ; ---------------------------------------------------------------------------
00005D50                            ; Levels used in the end sequence demos
00005D50                            ; ---------------------------------------------------------------------------
00005D50                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005D60                            
00005D60                            ; ---------------------------------------------------------------------------
00005D60                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005D60                            ; ---------------------------------------------------------------------------
00005D60                            EndDemo_LampVar:
00005D60 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005D62 0A00 062C 000D             		dc.w $A00, $62C, $D
00005D68 0000 0000                  		dc.l 0
00005D6C 0000                       		dc.b 0,	0
00005D6E 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005D82 0101                       		dc.b 1,	1
00005D84                            ; ===========================================================================
00005D84                            ; ---------------------------------------------------------------------------
00005D84                            ; "TRY AGAIN" and "END"	screens
00005D84                            ; ---------------------------------------------------------------------------
00005D84                            
00005D84                            TryAgainEnd:				; XREF: Credits
00005D84 6100 B85A                  		bsr.w	ClearPLC
00005D88 6100 C09E                  		bsr.w	Pal_FadeFrom
00005D8C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005D92 3CBC 8004                  		move.w	#$8004,(a6)
00005D96 3CBC 8230                  		move.w	#$8230,(a6)
00005D9A 3CBC 8407                  		move.w	#$8407,(a6)
00005D9E 3CBC 9001                  		move.w	#$9001,(a6)
00005DA2 3CBC 9200                  		move.w	#$9200,(a6)
00005DA6 3CBC 8B03                  		move.w	#$8B03,(a6)
00005DAA 3CBC 8720                  		move.w	#$8720,(a6)
00005DAE 4238 F64E                  		clr.b	($FFFFF64E).w
00005DB2 6100 B512                  		bsr.w	ClearScreen
00005DB6 43F8 D000                  		lea	($FFFFD000).w,a1
00005DBA 7000                       		moveq	#0,d0
00005DBC 323C 07FF                  		move.w	#$7FF,d1
00005DC0                            
00005DC0                            TryAg_ClrObjRam:
00005DC0 22C0                       		move.l	d0,(a1)+
00005DC2 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005DC6                            
00005DC6 701D                       		moveq	#$1D,d0
00005DC8 6100 B924                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005DCC 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005DD0 7000                       		moveq	#0,d0
00005DD2 323C 001F                  		move.w	#$1F,d1
00005DD6                            
00005DD6                            TryAg_ClrPallet:
00005DD6 22C0                       		move.l	d0,(a1)+
00005DD8 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005DDC                            
00005DDC 7013                       		moveq	#$13,d0
00005DDE 6100 C2F2                  		bsr.w	PalLoad1	; load ending pallet
00005DE2 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005DE6 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005DEC 4EB9 0000 0000             		jsr	ObjectsLoad
00005DF2 4EB9 0000 0000             		jsr	BuildSprites
00005DF8 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005DFE 6100 BF7E                  		bsr.w	Pal_FadeTo
00005E02                            
00005E02                            ; ---------------------------------------------------------------------------
00005E02                            ; "TRY AGAIN" and "END"	screen main loop
00005E02                            ; ---------------------------------------------------------------------------
00005E02                            TryAg_MainLoop:
00005E02 6100 B5A6                  		bsr.w	PauseGame
00005E06 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005E0C 6100 CD00                  		bsr.w	DelayProgram
00005E10 4EB9 0000 0000             		jsr	ObjectsLoad
00005E16 4EB9 0000 0000             		jsr	BuildSprites
00005E1C 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005E22 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005E24 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005E28 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005E2A 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005E30 67D0                       		beq.s	TryAg_MainLoop
00005E32                            
00005E32                            TryAg_Exit:
00005E32 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005E38 4E75                       		rts	
00005E3A                            
00005E3A                            ; ===========================================================================
00005E3A                            ; ---------------------------------------------------------------------------
00005E3A                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005E3A                            ; ---------------------------------------------------------------------------
00005E3A                            
00005E3A                            Obj8B:					; XREF: Obj_Index
00005E3A 7000                       		moveq	#0,d0
00005E3C 1028 0024                  		move.b	$24(a0),d0
00005E40 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005E44 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005E48 4EF9 0000 0000             		jmp	DisplaySprite
00005E4E                            ; ===========================================================================
00005E4E 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005E50 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005E52 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005E54 0000                       		dc.w loc_5A8E-Obj8B_Index
00005E56                            ; ===========================================================================
00005E56                            
00005E56                            Obj8B_Main:				; XREF: Obj8B_Index
00005E56 5428 0024                  		addq.b	#2,$24(a0)
00005E5A 317C 0120 0008             		move.w	#$120,8(a0)
00005E60 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005E66 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005E6E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005E74 117C 0000 0001             		move.b	#0,1(a0)
00005E7A 117C 0002 0018             		move.b	#2,$18(a0)
00005E80 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005E86 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005E8C 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005E8E 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005E94 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005E9A 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005EA0 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005EA6                            
00005EA6                            Obj8B_Animate:				; XREF: Obj8B_Index
00005EA6 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005EAC 4EF9 0000 0000             		jmp	AnimateSprite
00005EB2                            ; ===========================================================================
00005EB2                            
00005EB2                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005EB2 5428 0024                  		addq.b	#2,$24(a0)
00005EB6 7002                       		moveq	#2,d0
00005EB8 0828 0000 001C             		btst	#0,$1C(a0)
00005EBE 6700                       		beq.s	loc_5A6A
00005EC0 4440                       		neg.w	d0
00005EC2                            
00005EC2                            loc_5A6A:
00005EC2 43F8 D800                  		lea	($FFFFD800).w,a1
00005EC6 7205                       		moveq	#5,d1
00005EC8                            
00005EC8                            loc_5A70:
00005EC8 1340 003E                  		move.b	d0,$3E(a1)
00005ECC 3400                       		move.w	d0,d2
00005ECE E742                       		asl.w	#3,d2
00005ED0 D529 0026                  		add.b	d2,$26(a1)
00005ED4 43E9 0040                  		lea	$40(a1),a1
00005ED8 51C9 FFEE                  		dbf	d1,loc_5A70
00005EDC 5228 001A                  		addq.b	#1,$1A(a0)
00005EE0 317C 0070 0030             		move.w	#112,$30(a0)
00005EE6                            
00005EE6                            loc_5A8E:				; XREF: Obj8B_Index
00005EE6 5368 0030                  		subq.w	#1,$30(a0)
00005EEA 6A00                       		bpl.s	locret_5AA0
00005EEC 0868 0000 001C             		bchg	#0,$1C(a0)
00005EF2 117C 0002 0024             		move.b	#2,$24(a0)
00005EF8                            
00005EF8                            locret_5AA0:
00005EF8 4E75                       		rts	
00005EFA                            ; ===========================================================================
00005EFA                            Ani_obj8B:
00005EFA                            	include "_anim\obj8B.asm"
00005EFA                            ; ---------------------------------------------------------------------------
00005EFA                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005EFA                            ; ---------------------------------------------------------------------------
00005EFA 0000                       		dc.w byte_5AA8-Ani_obj8B
00005EFC 0000                       		dc.w byte_5AAC-Ani_obj8B
00005EFE 0000                       		dc.w byte_5AB0-Ani_obj8B
00005F00 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005F04 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005F08 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005F1A                            		even
00005F1A                            		even
00005F1A                            
00005F1A                            ; ===========================================================================
00005F1A                            ; ---------------------------------------------------------------------------
00005F1A                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005F1A                            ; ---------------------------------------------------------------------------
00005F1A                            
00005F1A                            Obj8C:					; XREF: Obj_Index
00005F1A 7000                       		moveq	#0,d0
00005F1C 1028 0024                  		move.b	$24(a0),d0
00005F20 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005F24 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005F28 4EF9 0000 0000             		jmp	DisplaySprite
00005F2E                            ; ===========================================================================
00005F2E 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005F30 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005F32                            ; ===========================================================================
00005F32                            
00005F32                            Obj8C_Main:				; XREF: Obj8C_Index
00005F32 2248                       		movea.l	a0,a1
00005F34 7400                       		moveq	#0,d2
00005F36 7600                       		moveq	#0,d3
00005F38 7205                       		moveq	#5,d1
00005F3A 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005F3E                            
00005F3E                            Obj8C_MakeEms:				; XREF: loc_5B42
00005F3E 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005F42 5429 0024                  		addq.b	#2,$24(a1)
00005F46 237C 0000 5BD2 0004        		move.l	#Map_obj88,4(a1)
00005F4E 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005F54 137C 0000 0001             		move.b	#0,1(a1)
00005F5A 137C 0001 0018             		move.b	#1,$18(a1)
00005F60 337C 0104 0008             		move.w	#$104,8(a1)
00005F66 337C 0120 0038             		move.w	#$120,$38(a1)
00005F6C 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005F72 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005F78 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005F7E 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005F82                            
00005F82                            Obj8C_ChkEms:
00005F82 7000                       		moveq	#0,d0
00005F84 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005F88 5340                       		subq.w	#1,d0
00005F8A 6500                       		bcs.s	loc_5B42
00005F8C                            
00005F8C                            Obj8C_ChkEmLoop:
00005F8C B433 0000                  		cmp.b	(a3,d0.w),d2
00005F90 6600                       		bne.s	loc_5B3E
00005F92 5202                       		addq.b	#1,d2
00005F94 60EC                       		bra.s	Obj8C_ChkEms
00005F96                            ; ===========================================================================
00005F96                            
00005F96                            loc_5B3E:
00005F96 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005F9A                            
00005F9A                            loc_5B42:
00005F9A 1342 001A                  		move.b	d2,$1A(a1)
00005F9E 5229 001A                  		addq.b	#1,$1A(a1)
00005FA2 5202                       		addq.b	#1,d2
00005FA4 137C 0080 0026             		move.b	#$80,$26(a1)
00005FAA 1343 001E                  		move.b	d3,$1E(a1)
00005FAE 1343 001F                  		move.b	d3,$1F(a1)
00005FB2 0643 000A                  		addi.w	#$A,d3
00005FB6 43E9 0040                  		lea	$40(a1),a1
00005FBA 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005FBE                            
00005FBE                            Obj8C_Move:				; XREF: Obj8C_Index
00005FBE 4A68 003E                  		tst.w	$3E(a0)
00005FC2 6700                       		beq.s	locret_5BBA
00005FC4 4A28 001E                  		tst.b	$1E(a0)
00005FC8 6700                       		beq.s	loc_5B78
00005FCA 5328 001E                  		subq.b	#1,$1E(a0)
00005FCE 6600                       		bne.s	loc_5B80
00005FD0                            
00005FD0                            loc_5B78:
00005FD0 3028 003E                  		move.w	$3E(a0),d0
00005FD4 D168 0026                  		add.w	d0,$26(a0)
00005FD8                            
00005FD8                            loc_5B80:
00005FD8 1028 0026                  		move.b	$26(a0),d0
00005FDC 6700                       		beq.s	loc_5B8C
00005FDE 0C00 0080                  		cmpi.b	#$80,d0
00005FE2 6600                       		bne.s	loc_5B96
00005FE4                            
00005FE4                            loc_5B8C:
00005FE4 4268 003E                  		clr.w	$3E(a0)
00005FE8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005FEE                            
00005FEE                            loc_5B96:
00005FEE 4EB9 0000 2B40             		jsr	(CalcSine).l
00005FF4 7800                       		moveq	#0,d4
00005FF6 1828 003C                  		move.b	$3C(a0),d4
00005FFA C3C4                       		muls.w	d4,d1
00005FFC E081                       		asr.l	#8,d1
00005FFE C1C4                       		muls.w	d4,d0
00006000 E080                       		asr.l	#8,d0
00006002 D268 0038                  		add.w	$38(a0),d1
00006006 D068 003A                  		add.w	$3A(a0),d0
0000600A 3141 0008                  		move.w	d1,8(a0)
0000600E 3140 000A                  		move.w	d0,$A(a0)
00006012                            
00006012                            locret_5BBA:
00006012 4E75                       		rts	
00006014                            ; ===========================================================================
00006014                            ; ---------------------------------------------------------------------------
00006014                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006014                            ; ---------------------------------------------------------------------------
00006014                            Map_obj8B:
00006014                            	include "_maps\obj8B.asm"
00006014                            ; ---------------------------------------------------------------------------
00006014                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006014                            ; ---------------------------------------------------------------------------
00006014 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006018 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
0000601C 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006020 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006024 08                         byte_5BCC:	dc.b 8
00006025 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
0000602A F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
0000602F E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006034 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006039 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000603E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006043 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006048 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000604D 08                         byte_5BF5:	dc.b 8
0000604E E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006053 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006058 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
0000605D F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006062 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006067 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000606C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006071 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006076 08                         byte_5C1E:	dc.b 8
00006077 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
0000607C F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006081 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006086 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
0000608B 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006090 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006095 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000609A 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000609F 08                         byte_5C47:	dc.b 8
000060A0 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
000060A5 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
000060AA E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000060AF F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000060B4 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000060B9 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000060BE 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000060C3 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000060C8 0C                         byte_5C70:	dc.b $C
000060C9 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000060CE F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000060D3 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000060D8 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000060DD ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000060E2 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000060E7 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000060EC 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000060F1 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000060F6 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000060FB 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006100 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006105 0A                         byte_5CAD:	dc.b $A
00006106 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
0000610B DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006110 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006115 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
0000611A DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000611F F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006124 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006129 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000612E 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006133 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006138 0A                         byte_5CE0:	dc.b $A
00006139 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000613E E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006143 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006148 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000614D E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006152 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006157 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000615C 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006161 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006166 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
0000616B 0C                         byte_5D13:	dc.b $C
0000616C F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006171 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006176 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
0000617B 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006180 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006185 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
0000618A 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000618F 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006194 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006199 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000619E 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000061A3 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000061A8                            		even
000061A8                            		even
000061A8                            
000061A8                            ; ---------------------------------------------------------------------------
000061A8                            ; Ending sequence demos
000061A8                            ; ---------------------------------------------------------------------------
000061A8                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000061D6                            		even
000061D6                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006216                            		even
00006216                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006246                            		even
00006246                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006276                            		even
00006276                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006296                            		even
00006296                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000062B6                            		even
000062B6                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000062E6                            		even
000062E6                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006316                            		even
00006316                            
00006316                            ; ---------------------------------------------------------------------------
00006316                            ; Subroutine to	load level boundaries and start	locations
00006316                            ; ---------------------------------------------------------------------------
00006316                            
00006316                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006316                            
00006316                            
00006316                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006316 7000                       		moveq	#0,d0
00006318 11C0 F740                  		move.b	d0,($FFFFF740).w
0000631C 11C0 F741                  		move.b	d0,($FFFFF741).w
00006320 11C0 F746                  		move.b	d0,($FFFFF746).w
00006324 11C0 F748                  		move.b	d0,($FFFFF748).w
00006328 11C0 F742                  		move.b	d0,($FFFFF742).w
0000632C 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006330 ED08                       		lsl.b	#6,d0
00006332 E848                       		lsr.w	#4,d0
00006334 3200                       		move.w	d0,d1
00006336 D040                       		add.w	d0,d0
00006338 D041                       		add.w	d1,d0
0000633A 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000633E 3018                       		move.w	(a0)+,d0
00006340 31C0 F730                  		move.w	d0,($FFFFF730).w
00006344 2018                       		move.l	(a0)+,d0
00006346 21C0 F728                  		move.l	d0,($FFFFF728).w
0000634A 21C0 F720                  		move.l	d0,($FFFFF720).w
0000634E 2018                       		move.l	(a0)+,d0
00006350 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006354 21C0 F724                  		move.l	d0,($FFFFF724).w
00006358 3038 F728                  		move.w	($FFFFF728).w,d0
0000635C 0640 0240                  		addi.w	#$240,d0
00006360 31C0 F732                  		move.w	d0,($FFFFF732).w
00006364 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000636A 3018                       		move.w	(a0)+,d0
0000636C 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006370 6000 0000                  		bra.w	LevSz_ChkLamp
00006374                            ; ===========================================================================
00006374                            ; ---------------------------------------------------------------------------
00006374                            ; Level size array and ending start location array
00006374                            ; ---------------------------------------------------------------------------
00006374                            LevelSizeArray:        ; GHZ
00006374 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006380 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
0000638C 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006398 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000063A4                                    ; LZ
000063A4 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
000063B0 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
000063BC 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
000063C8 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
000063D4                                    ; MZ
000063D4 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
000063E0 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
000063EC 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
000063F8 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
00006404                                    ; SLZ
00006404 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00006410 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
0000641C 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00006428 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006434                                    ; SYZ
00006434 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006440 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
0000644C 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00006458 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
00006464                                    ; SBZ
00006464 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006470 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
0000647C 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
00006488 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006494                                    ; Ending
00006494 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
000064A0 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
000064AC 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
000064B8 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
000064C4                                    ; BHZ
000064C4 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
000064D0 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
000064DC 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
000064E8 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000064F4                                    even
000064F4                            
000064F4                            ; ===========================================================================
000064F4                            
000064F4                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000064F4 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000064F8 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000064FA 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006500 3238 D008                  		move.w	($FFFFD008).w,d1
00006504 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006508 6000 0000                  		bra.w	loc_60D0
0000650C                            ; ===========================================================================
0000650C                            
0000650C                            
0000650C                            LevSz_StartLoc:				; XREF: LevelSizeLoad
0000650C 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006510 ED08                       		lsl.b	#6,d0
00006512 E848                       		lsr.w	#4,d0
00006514 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006518 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000651C 6A00 0000                  		bpl.w	LevSz_SonicPos	; if not, branch
00006520 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006524 5340                       		subq.w	#1,d0
00006526 E548                       		lsl.w	#2,d0
00006528 43FB 0000                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
0000652C 6000 0000                  		bra.w	LevSz_SonicPos
00006530                            
00006530                            EndingStLocArray:
00006530                            		incbin	misc\sloc_end.bin
00006550                            		even
00006550                            		
00006550                            ; ===========================================================================
00006550                            ; ---------------------------------------------------------------------------
00006550                            ; Sonic	start location array
00006550                            ; ---------------------------------------------------------------------------
00006550                            StartLocArray:	incbin	misc\sloc_lev.bin
000065D0                            		even
000065D0                            
000065D0                            LevSz_SonicPos:
000065D0 7200                       		moveq	#0,d1
000065D2 3219                       		move.w	(a1)+,d1
000065D4 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000065D8 7000                       		moveq	#0,d0
000065DA 3011                       		move.w	(a1),d0
000065DC 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000065E0                            
000065E0                            loc_60D0:				; XREF: LevSz_ChkLamp
000065E0 0441 00A0                  		subi.w	#$A0,d1
000065E4 6400                       		bcc.s	loc_60D8
000065E6 7200                       		moveq	#0,d1
000065E8                            
000065E8                            loc_60D8:
000065E8 3438 F72A                  		move.w	($FFFFF72A).w,d2
000065EC B242                       		cmp.w	d2,d1
000065EE 6500                       		bcs.s	loc_60E2
000065F0 3202                       		move.w	d2,d1
000065F2                            
000065F2                            loc_60E2:
000065F2 31C1 F700                  		move.w	d1,($FFFFF700).w
000065F6 0440 0060                  		subi.w	#$60,d0
000065FA 6400                       		bcc.s	loc_60EE
000065FC 7000                       		moveq	#0,d0
000065FE                            
000065FE                            loc_60EE:
000065FE B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006602 6D00                       		blt.s	loc_60F8
00006604 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006608                            
00006608                            loc_60F8:
00006608 31C0 F704                  		move.w	d0,($FFFFF704).w
0000660C 6100 0000                  		bsr.w	BgScrollSpeed
00006610 7000                       		moveq	#0,d0
00006612 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006616 E508                       		lsl.b	#2,d0
00006618 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000661E 6000 0000                  		bra.w	LevSz_Unk
00006622                            
00006622                            ; ---------------------------------------------------------------------------
00006622                            ; Which	256x256	tiles contain loops or roll-tunnels
00006622                            ; ---------------------------------------------------------------------------
00006622                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006622                            ; loop,	loop, tunnel, tunnel
00006622                            ; ---------------------------------------------------------------------------
00006622                            LoopTileNums:	incbin	misc\loopnums.bin
00006642                            		even
00006642                            ; this is from the cwa source code i will share kaito x gakupo mpreg if this does not work i swear t ogod if this does not
00006642                            ; ITS GONJE HELP
00006642                            ; ===========================================================================
00006642                            
00006642                            LevSz_Unk:				; XREF: LevelSizeLoad
00006642 7000                       		moveq	#0,d0
00006644 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006648 E748                       		lsl.w	#3,d0
0000664A 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000664E 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006652 24D9                       		move.l	(a1)+,(a2)+
00006654 24D9                       		move.l	(a1)+,(a2)+
00006656 4E75                       		rts	
00006658                            ; End of function LevelSizeLoad
00006658                            
00006658                            ; ===========================================================================
00006658 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006660 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006668 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006670 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006678 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006680 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006688 0070 0100 0100 0100        		dc.l $700100, $1000100
00006690                            
00006690                            ; ---------------------------------------------------------------------------
00006690                            ; Subroutine to	set scroll speed of some backgrounds
00006690                            ; ---------------------------------------------------------------------------
00006690                            
00006690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006690                            
00006690                            
00006690                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006690 4A38 FE30                  		tst.b	($FFFFFE30).w
00006694 6600                       		bne.s	loc_6206
00006696 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000669A 31C0 F714                  		move.w	d0,($FFFFF714).w
0000669E 31C1 F708                  		move.w	d1,($FFFFF708).w
000066A2 31C1 F710                  		move.w	d1,($FFFFF710).w
000066A6 31C1 F718                  		move.w	d1,($FFFFF718).w
000066AA                            
000066AA                            loc_6206:
000066AA 7400                       		moveq	#0,d2
000066AC 1438 FE10                  		move.b	($FFFFFE10).w,d2
000066B0 D442                       		add.w	d2,d2
000066B2 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000066B6 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000066BA                            ; End of function BgScrollSpeed
000066BA                            
000066BA                            ; ===========================================================================
000066BA 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000066BE 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000066C2 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000066C6 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_MZ-BgScroll_Index ; MAKOTO
000066CA                            ; ===========================================================================
000066CA                            
000066CA                            BgScroll_GHZ:				; XREF: BgScroll_Index
000066CA 6000 0000                  		bra.w	Deform_GHZ
000066CE                            ; ===========================================================================
000066CE                            
000066CE                            BgScroll_LZ:				; XREF: BgScroll_Index
000066CE E280                       		asr.l	#1,d0
000066D0 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066D4 4E75                       		rts	
000066D6                            ; ===========================================================================
000066D6                            
000066D6                            BgScroll_MZ:				; XREF: BgScroll_Index
000066D6 4E75                       		rts	
000066D8                            ; ===========================================================================
000066D8                            
000066D8                            BgScroll_SLZ:				; XREF: BgScroll_Index
000066D8 E280                       		asr.l	#1,d0
000066DA 0640 00C0                  		addi.w	#$C0,d0
000066DE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066E2 4E75                       		rts	
000066E4                            ; ===========================================================================
000066E4                            
000066E4                            BgScroll_SYZ:				; XREF: BgScroll_Index
000066E4 E980                       		asl.l	#4,d0
000066E6 2400                       		move.l	d0,d2
000066E8 E380                       		asl.l	#1,d0
000066EA D082                       		add.l	d2,d0
000066EC E080                       		asr.l	#8,d0
000066EE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066F2 31C0 F714                  		move.w	d0,($FFFFF714).w
000066F6 4E75                       		rts	
000066F8                            ; ===========================================================================
000066F8                            
000066F8                            BgScroll_SBZ:				; XREF: BgScroll_Index
000066F8 E980                       		asl.l	#4,d0
000066FA E380                       		asl.l	#1,d0
000066FC E080                       		asr.l	#8,d0
000066FE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006702 4E75                       		rts	
00006704                            ; ===========================================================================
00006704                            
00006704                            BgScroll_End:				; XREF: BgScroll_Index
00006704 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000670A 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006710 4E75                       		rts	
00006712                            ; ===========================================================================
00006712 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006718 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000671E 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006724 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000672A 4E75                       		rts
0000672C                            
0000672C                            ; ---------------------------------------------------------------------------
0000672C                            ; Background layer deformation subroutines
0000672C                            ; ---------------------------------------------------------------------------
0000672C                            
0000672C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000672C                            
0000672C                            
0000672C                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
0000672C 4A38 F744                  		tst.b	($FFFFF744).w
00006730 6700                       		beq.s	loc_628E
00006732 4E75                       		rts	
00006734                            ; ===========================================================================
00006734                            
00006734                            loc_628E:
00006734 4278 F754                  		clr.w	($FFFFF754).w
00006738 4278 F756                  		clr.w	($FFFFF756).w
0000673C 4278 F758                  		clr.w	($FFFFF758).w
00006740 4278 F75A                  		clr.w	($FFFFF75A).w
00006744 6100 0000                  		bsr.w	ScrollHoriz
00006748 6100 0000                  		bsr.w	ScrollVertical
0000674C 6100 0000                  		bsr.w	DynScrResizeLoad
00006750 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006756 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
0000675C 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006762 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006768 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000676E 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006774 7000                       		moveq	#0,d0
00006776 4A38 FFF9                  		tst.b	($FFFFFFF9).w	; GMZ
0000677A 6700                       		beq.s	GetDeformRoutine	; GMZ
0000677C 4EF9 0000 0000             		jmp	Deform_LZ	; GMZ
00006782                            
00006782                            GetDeformRoutine:	; GMZ
00006782 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006786 D040                       		add.w	d0,d0
00006788 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000678C 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006790                            ; End of function DeformBgLayer
00006790                            
00006790                            ; ===========================================================================
00006790                            ; ---------------------------------------------------------------------------
00006790                            ; Offset index for background layer deformation	code
00006790                            ; ---------------------------------------------------------------------------
00006790 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006794 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006798 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000679C 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_BHZ-Deform_Index ; MAKOTO
000067A0                            ; ---------------------------------------------------------------------------
000067A0                            ; Green	Hill Zone background layer deformation code
000067A0                            ; ---------------------------------------------------------------------------
000067A0                            
000067A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067A0                            
000067A0                            
000067A0                            Deform_GHZ:				; XREF: Deform_Index
000067A0 3838 F73A                  		move.w	($FFFFF73A).w,d4
000067A4 48C4                       		ext.l	d4
000067A6 EB84                       		asl.l	#5,d4
000067A8 2204                       		move.l	d4,d1
000067AA E384                       		asl.l	#1,d4
000067AC D881                       		add.l	d1,d4
000067AE 7A00                       		moveq	#0,d5
000067B0 6100 0000                  		bsr.w	ScrollBlock1
000067B4 6100 0000                  		bsr.w	ScrollBlock4
000067B8 43F8 CC00                  		lea	($FFFFCC00).w,a1
000067BC 3038 F704                  		move.w	($FFFFF704).w,d0
000067C0 0240 07FF                  		andi.w	#$7FF,d0
000067C4 EA48                       		lsr.w	#5,d0
000067C6 4440                       		neg.w	d0
000067C8 0640 0026                  		addi.w	#$26,d0
000067CC 31C0 F714                  		move.w	d0,($FFFFF714).w
000067D0 3800                       		move.w	d0,d4
000067D2 6100 0000                  		bsr.w	ScrollBlock3
000067D6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000067DC 323C 006F                  		move.w	#$6F,d1
000067E0 9244                       		sub.w	d4,d1
000067E2 3038 F700                  		move.w	($FFFFF700).w,d0
000067E6 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000067EC 6600                       		bne.s	loc_633C
000067EE 7000                       		moveq	#0,d0
000067F0                            
000067F0                            loc_633C:
000067F0 4440                       		neg.w	d0
000067F2 4840                       		swap	d0
000067F4 3038 F708                  		move.w	($FFFFF708).w,d0
000067F8 4440                       		neg.w	d0
000067FA                            
000067FA                            loc_6346:
000067FA 22C0                       		move.l	d0,(a1)+
000067FC 51C9 FFFC                  		dbf	d1,loc_6346
00006800 323C 0027                  		move.w	#$27,d1
00006804 3038 F710                  		move.w	($FFFFF710).w,d0
00006808 4440                       		neg.w	d0
0000680A                            
0000680A                            loc_6356:
0000680A 22C0                       		move.l	d0,(a1)+
0000680C 51C9 FFFC                  		dbf	d1,loc_6356
00006810 3038 F710                  		move.w	($FFFFF710).w,d0
00006814 0640 0000                  		addi.w	#0,d0
00006818 3438 F700                  		move.w	($FFFFF700).w,d2
0000681C 0642 FE00                  		addi.w	#-$200,d2
00006820 9440                       		sub.w	d0,d2
00006822 48C2                       		ext.l	d2
00006824 E182                       		asl.l	#8,d2
00006826 85FC 0068                  		divs.w	#$68,d2
0000682A 48C2                       		ext.l	d2
0000682C E182                       		asl.l	#8,d2
0000682E 7600                       		moveq	#0,d3
00006830 3600                       		move.w	d0,d3
00006832 323C 0047                  		move.w	#$47,d1
00006836 D244                       		add.w	d4,d1
00006838                            
00006838                            loc_6384:
00006838 3003                       		move.w	d3,d0
0000683A 4440                       		neg.w	d0
0000683C 22C0                       		move.l	d0,(a1)+
0000683E 4843                       		swap	d3
00006840 D682                       		add.l	d2,d3
00006842 4843                       		swap	d3
00006844 51C9 FFF2                  		dbf	d1,loc_6384
00006848 4E75                       		rts	
0000684A                            ; End of function Deform_GHZ
0000684A                            
0000684A                            ; ---------------------------------------------------------------------------
0000684A                            ; Labyrinth Zone background layer deformation code
0000684A                            ; ---------------------------------------------------------------------------
0000684A                            
0000684A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000684A                            
0000684A                            
0000684A                            Deform_LZ:				; XREF: Deform_Index
0000684A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000684E 48C4                       		ext.l	d4
00006850 EF84                       		asl.l	#7,d4
00006852 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006856 48C5                       		ext.l	d5
00006858 EF85                       		asl.l	#7,d5
0000685A 6100 0000                  		bsr.w	ScrollBlock1
0000685E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006864 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006868 323C 00DF                  		move.w	#$DF,d1
0000686C 3038 F700                  		move.w	($FFFFF700).w,d0
00006870 4440                       		neg.w	d0
00006872 4840                       		swap	d0
00006874 3038 F708                  		move.w	($FFFFF708).w,d0
00006878 4440                       		neg.w	d0
0000687A                            
0000687A                            loc_63C6:
0000687A 22C0                       		move.l	d0,(a1)+
0000687C 51C9 FFFC                  		dbf	d1,loc_63C6
00006880 3038 F646                  		move.w	($FFFFF646).w,d0
00006884 9078 F704                  		sub.w	($FFFFF704).w,d0
00006888 4E75                       		rts	
0000688A                            ; End of function Deform_LZ
0000688A                            
0000688A                            ; ---------------------------------------------------------------------------
0000688A                            ; Marble Zone background layer deformation code
0000688A                            ; ---------------------------------------------------------------------------
0000688A                            
0000688A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000688A                            
0000688A                            
0000688A                            Deform_MZ:				; XREF: Deform_Index
0000688A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000688E 48C4                       		ext.l	d4
00006890 ED84                       		asl.l	#6,d4
00006892 2204                       		move.l	d4,d1
00006894 E384                       		asl.l	#1,d4
00006896 D881                       		add.l	d1,d4
00006898 7A00                       		moveq	#0,d5
0000689A 6100 0000                  		bsr.w	ScrollBlock1
0000689E 303C 0200                  		move.w	#$200,d0
000068A2 3238 F704                  		move.w	($FFFFF704).w,d1
000068A6 0441 01C8                  		subi.w	#$1C8,d1
000068AA 6500                       		bcs.s	loc_6402
000068AC 3401                       		move.w	d1,d2
000068AE D241                       		add.w	d1,d1
000068B0 D242                       		add.w	d2,d1
000068B2 E441                       		asr.w	#2,d1
000068B4 D041                       		add.w	d1,d0
000068B6                            
000068B6                            loc_6402:
000068B6 31C0 F714                  		move.w	d0,($FFFFF714).w
000068BA 6100 0000                  		bsr.w	ScrollBlock3
000068BE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000068C4 43F8 CC00                  		lea	($FFFFCC00).w,a1
000068C8 323C 00DF                  		move.w	#$DF,d1
000068CC 3038 F700                  		move.w	($FFFFF700).w,d0
000068D0 4440                       		neg.w	d0
000068D2 4840                       		swap	d0
000068D4 3038 F708                  		move.w	($FFFFF708).w,d0
000068D8 4440                       		neg.w	d0
000068DA                            
000068DA                            loc_6426:
000068DA 22C0                       		move.l	d0,(a1)+
000068DC 51C9 FFFC                  		dbf	d1,loc_6426
000068E0 4E75                       		rts	
000068E2                            ; End of function Deform_MZ
000068E2                            
000068E2                            ; ---------------------------------------------------------------------------
000068E2                            ; Star Light Zone background layer deformation code
000068E2                            ; ---------------------------------------------------------------------------
000068E2                            
000068E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068E2                            
000068E2                            
000068E2                            Deform_SLZ:				; XREF: Deform_Index
000068E2 3838 F73A                  		move.w	($FFFFF73A).w,d4
000068E6 48C4                       		ext.l	d4
000068E8 EB84                       		asl.l	#5,d4
000068EA 2204                       		move.l	d4,d1
000068EC E384                       		asl.l	#1,d4
000068EE D881                       		add.l	d1,d4
000068F0 7A00                       		moveq	#0,d5
000068F2 6100 0000                  		bsr.w	ScrollBlock1
000068F6 6100 0000                  		bsr.w	ScrollBlock3
000068FA 43F8 CC00                  		lea	($FFFFCC00).w,a1
000068FE                            	;	move.w	($FFFFF704).w,d0
000068FE                            	;	andi.w	#$7FF,d0
000068FE EA48                       		lsr.w	#5,d0
00006900 4440                       		neg.w	d0
00006902 0640 0026                  		addi.w	#$26,d0
00006906 31C0 F714                  		move.w	d0,($FFFFF714).w
0000690A 3800                       		move.w	d0,d4
0000690C                            	;	bsr.w	ScrollBlock3
0000690C 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006912 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006916                            
00006916 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000691A 4440                       		neg.w	d0			; negate (positive to negative)
0000691C 4840                       		swap	d0			; send to the left side of d0
0000691E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006922 45F8 A800                  		lea	($FFFFA800).w,a2
00006926 069A 0000 5000             		addi.l	#$5000,(a2)+
0000692C 069A 0000 C000             		addi.l	#$C000,(a2)+
00006932 3038 A800                  		move.w	($FFFFA800).w,d0
00006936 4440                       		neg.w	d0			; negate (positive to negative)
00006938 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
0000693A 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000693E                            slz_DeformLoop_1:
0000693E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006940 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006944                            
00006944 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006948 4440                       		neg.w	d0			; negate (positive to negative)
0000694A 4840                       		swap	d0			; send to the left side of d0
0000694C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006950 45F8 A800                  		lea	($FFFFA800).w,a2
00006954 069A 0000 5000             		addi.l	#$5000,(a2)+
0000695A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006960 3038 A800                  		move.w	($FFFFA800).w,d0
00006964 4440                       		neg.w	d0			; negate (positive to negative)
00006966 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006968 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000696C                            slz_DeformLoop_2:
0000696C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000696E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006972                            
00006972 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006976 4440                       		neg.w	d0			; negate (positive to negative)
00006978 4840                       		swap	d0			; send to the left side of d0
0000697A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000697E 45F8 A800                  		lea	($FFFFA800).w,a2
00006982 069A 0000 5000             		addi.l	#$5000,(a2)+
00006988 069A 0000 C000             		addi.l	#$C000,(a2)+
0000698E 3038 A800                  		move.w	($FFFFA800).w,d0
00006992 4440                       		neg.w	d0			; negate (positive to negative)
00006994 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006996 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000699A                            slz_DeformLoop_3:
0000699A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000699C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
000069A0                            
000069A0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069A4 4440                       		neg.w	d0			; negate (positive to negative)
000069A6 4840                       		swap	d0			; send to the left side of d0
000069A8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069AC 45F8 A800                  		lea	($FFFFA800).w,a2
000069B0 069A 0000 5000             		addi.l	#$5000,(a2)+
000069B6 069A 0000 C000             		addi.l	#$C000,(a2)+
000069BC 3038 A800                  		move.w	($FFFFA800).w,d0
000069C0 4440                       		neg.w	d0			; negate (positive to negative)
000069C2 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000069C4 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069C8                            slz_DeformLoop_4:
000069C8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069CA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
000069CE                            
000069CE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069D2 4440                       		neg.w	d0			; negate (positive to negative)
000069D4 4840                       		swap	d0			; send to the left side of d0
000069D6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069DA 45F8 A800                  		lea	($FFFFA800).w,a2
000069DE 069A 0000 5000             		addi.l	#$5000,(a2)+
000069E4 069A 0000 C000             		addi.l	#$C000,(a2)+
000069EA 3038 A800                  		move.w	($FFFFA800).w,d0
000069EE 4440                       		neg.w	d0			; negate (positive to negative)
000069F0 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000069F2 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069F6                            slz_DeformLoop_5:
000069F6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069F8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
000069FC                            
000069FC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A00 4440                       		neg.w	d0			; negate (positive to negative)
00006A02 4840                       		swap	d0			; send to the left side of d0
00006A04 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A08 4440                       		neg.w	d0			; negate (positive to negative)
00006A0A EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006A0C 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A10                            slz_DeformLoop_6:
00006A10 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A12 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006A16                            
00006A16 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A1A 4440                       		neg.w	d0			; negate (positive to negative)
00006A1C 4840                       		swap	d0			; send to the left side of d0
00006A1E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A22 4440                       		neg.w	d0			; negate (positive to negative)
00006A24 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006A26 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A2A                            slz_DeformLoop_7:
00006A2A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A2C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006A30                            
00006A30 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A34 4440                       		neg.w	d0			; negate (positive to negative)
00006A36 4840                       		swap	d0			; send to the left side of d0
00006A38 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A3C 4440                       		neg.w	d0			; negate (positive to negative)
00006A3E EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006A40 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A44                            slz_DeformLoop_8:
00006A44 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A46 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006A4A                            
00006A4A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A4E 4440                       		neg.w	d0			; negate (positive to negative)
00006A50 4840                       		swap	d0			; send to the left side of d0
00006A52 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A56 4440                       		neg.w	d0			; negate (positive to negative)
00006A58 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006A5A 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A5E                            slz_DeformLoop_9:
00006A5E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A60 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006A64                            
00006A64 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A68 4440                       		neg.w	d0			; negate (positive to negative)
00006A6A 4840                       		swap	d0			; send to the left side of d0
00006A6C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A70 4440                       		neg.w	d0			; negate (positive to negative)
00006A72 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006A74 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A78                            slz_DeformLoop_10:
00006A78 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A7A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006A7E                            
00006A7E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A82 4440                       		neg.w	d0			; negate (positive to negative)
00006A84 4840                       		swap	d0			; send to the left side of d0
00006A86 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A8A 4440                       		neg.w	d0			; negate (positive to negative)
00006A8C E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006A8E 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A92                            slz_DeformLoop_11:
00006A92 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A94 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006A98                            
00006A98 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A9C 4440                       		neg.w	d0			; negate (positive to negative)
00006A9E 4840                       		swap	d0			; send to the left side of d0
00006AA0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AA4 4440                       		neg.w	d0			; negate (positive to negative)
00006AA6 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006AA8 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AAC                            slz_DeformLoop_12:
00006AAC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AAE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006AB2                            
00006AB2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AB6 4440                       		neg.w	d0			; negate (positive to negative)
00006AB8 4840                       		swap	d0			; send to the left side of d0
00006ABA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006ABE 4440                       		neg.w	d0			; negate (positive to negative)
00006AC0 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006AC2 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AC6                            slz_DeformLoop_13:
00006AC6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AC8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006ACC 4E75                       		rts	
00006ACE                            ; End of function Deform_SLZ
00006ACE 4E75                       		rts	
00006AD0                            ; End of function Deform_SLZ_2
00006AD0                            
00006AD0                            ; ---------------------------------------------------------------------------
00006AD0                            ; Spring Yard Zone background layer deformation	code
00006AD0                            ; ---------------------------------------------------------------------------
00006AD0                            
00006AD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AD0                            
00006AD0                            
00006AD0                            Deform_SYZ:				; XREF: Deform_Index
00006AD0 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006AD4 48C4                       		ext.l	d4
00006AD6 ED84                       		asl.l	#6,d4
00006AD8 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006ADC 48C5                       		ext.l	d5
00006ADE E985                       		asl.l	#4,d5
00006AE0 2205                       		move.l	d5,d1
00006AE2 E385                       		asl.l	#1,d5
00006AE4 DA81                       		add.l	d1,d5
00006AE6 6100 0000                  		bsr.w	ScrollBlock1
00006AEA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006AF0 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AF4 323C 00DF                  		move.w	#$DF,d1
00006AF8 3038 F700                  		move.w	($FFFFF700).w,d0
00006AFC 4440                       		neg.w	d0
00006AFE 4840                       		swap	d0
00006B00 3038 F708                  		move.w	($FFFFF708).w,d0
00006B04 4440                       		neg.w	d0
00006B06                            
00006B06                            loc_653C:
00006B06 22C0                       		move.l	d0,(a1)+
00006B08 51C9 FFFC                  		dbf	d1,loc_653C
00006B0C 4E75                       		rts	
00006B0E                            ; End of function Deform_SYZ
00006B0E                            
00006B0E                            ; ---------------------------------------------------------------------------
00006B0E                            ; Scrap	Brain Zone background layer deformation	code
00006B0E                            ; ---------------------------------------------------------------------------
00006B0E                            
00006B0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B0E                            
00006B0E                            
00006B0E                            Deform_SBZ:				; XREF: Deform_Index
00006B0E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B12 48C4                       		ext.l	d4
00006B14 ED84                       		asl.l	#6,d4
00006B16 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B1A 48C5                       		ext.l	d5
00006B1C E985                       		asl.l	#4,d5
00006B1E E385                       		asl.l	#1,d5
00006B20 6100 0000                  		bsr.w	ScrollBlock1
00006B24 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B2A 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B2E 323C 00DF                  		move.w	#$DF,d1
00006B32 3038 F700                  		move.w	($FFFFF700).w,d0
00006B36 4440                       		neg.w	d0
00006B38 4840                       		swap	d0
00006B3A 3038 F708                  		move.w	($FFFFF708).w,d0
00006B3E 4440                       		neg.w	d0
00006B40                            
00006B40                            loc_6576:
00006B40 22C0                       		move.l	d0,(a1)+
00006B42 51C9 FFFC                  		dbf	d1,loc_6576
00006B46 4E75                       		rts	
00006B48                            ; End of function Deform_SBZ
00006B48                            ; ---------------------------------------------------------------------------
00006B48                            ; Makoto Zone background layer deformation code
00006B48                            ; ---------------------------------------------------------------------------
00006B48                            
00006B48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B48                            
00006B48                            
00006B48                            Deform_BHZ:				; XREF: Deform_Index
00006B48 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B4C 48C4                       		ext.l	d4
00006B4E E984                       		asl.l	#4,d4
00006B50 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B54 48C5                       		ext.l	d5
00006B56 E985                       		asl.l	#4,d5
00006B58 7A00                       		moveq	#0,d5	; reset bg position in title screen
00006B5A 6100 0000                  		bsr.w	ScrollBlock1
00006B5E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B64 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B68 323C 00DF                  		move.w	#$DF,d1
00006B6C 3038 F700                  		move.w	($FFFFF700).w,d0
00006B70 4440                       		neg.w	d0
00006B72 4840                       		swap	d0
00006B74 3038 F708                  		move.w	($FFFFF708).w,d0
00006B78 4440                       		neg.w	d0
00006B7A                            
00006B7A                            loc_63COCK6:
00006B7A 22C0                       		move.l	d0,(a1)+
00006B7C 51C9 FFFC                  		dbf	d1,loc_63COCK6
00006B80 3038 F646                  		move.w	($FFFFF646).w,d0
00006B84 9078 F704                  		sub.w	($FFFFF704).w,d0
00006B88 4E75                       		rts	
00006B8A                            ; End of function Deform_BHZ
00006B8A                            ; ---------------------------------------------------------------------------
00006B8A                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006B8A                            ; ---------------------------------------------------------------------------
00006B8A                            
00006B8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B8A                            
00006B8A                            
00006B8A                            ScrollHoriz:				; XREF: DeformBgLayer
00006B8A 3838 F700                  		move.w	($FFFFF700).w,d4
00006B8E 6100                       		bsr.s	ScrollHoriz2
00006B90 3038 F700                  		move.w	($FFFFF700).w,d0
00006B94 0240 0010                  		andi.w	#$10,d0
00006B98 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006B9C B300                       		eor.b	d1,d0
00006B9E 6600                       		bne.s	locret_65B0
00006BA0 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006BA6 3038 F700                  		move.w	($FFFFF700).w,d0
00006BAA 9044                       		sub.w	d4,d0
00006BAC 6A00                       		bpl.s	loc_65AA
00006BAE 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006BB4 4E75                       		rts	
00006BB6                            ; ===========================================================================
00006BB6                            
00006BB6                            loc_65AA:
00006BB6 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006BBC                            
00006BBC                            locret_65B0:
00006BBC 4E75                       		rts	
00006BBE                            ; End of function ScrollHoriz
00006BBE                            
00006BBE                            
00006BBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BBE                            
00006BBE                            
00006BBE                            ScrollHoriz2:				; XREF: ScrollHoriz
00006BBE 3038 D008                  		move.w	($FFFFD008).w,d0
00006BC2 9078 F700                  		sub.w	($FFFFF700).w,d0
00006BC6 0440 0090                  		subi.w	#$90,d0
00006BCA 6500                       		bcs.s	loc_65F6
00006BCC 0440 0010                  		subi.w	#$10,d0
00006BD0 6400                       		bcc.s	loc_65CC
00006BD2 4278 F73A                  		clr.w	($FFFFF73A).w
00006BD6 4E75                       		rts	
00006BD8                            ; ===========================================================================
00006BD8                            
00006BD8                            loc_65CC:
00006BD8 0C40 0010                  		cmpi.w	#$10,d0
00006BDC 6500                       		bcs.s	loc_65D6
00006BDE 303C 0010                  		move.w	#$10,d0
00006BE2                            
00006BE2                            loc_65D6:
00006BE2 D078 F700                  		add.w	($FFFFF700).w,d0
00006BE6 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006BEA 6D00                       		blt.s	loc_65E4
00006BEC 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006BF0                            
00006BF0                            loc_65E4:
00006BF0 3200                       		move.w	d0,d1
00006BF2 9278 F700                  		sub.w	($FFFFF700).w,d1
00006BF6 E141                       		asl.w	#8,d1
00006BF8 31C0 F700                  		move.w	d0,($FFFFF700).w
00006BFC 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006C00 4E75                       		rts	
00006C02                            ; ===========================================================================
00006C02                            
00006C02                            loc_65F6:				; XREF: ScrollHoriz2
00006C02 D078 F700                  		add.w	($FFFFF700).w,d0
00006C06 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006C0A 6EE4                       		bgt.s	loc_65E4
00006C0C 3038 F728                  		move.w	($FFFFF728).w,d0
00006C10 60DE                       		bra.s	loc_65E4
00006C12                            ; End of function ScrollHoriz2
00006C12                            
00006C12                            ; ===========================================================================
00006C12 4A40                       		tst.w	d0
00006C14 6A00                       		bpl.s	loc_6610
00006C16 303C FFFE                  		move.w	#-2,d0
00006C1A 60E6                       		bra.s	loc_65F6
00006C1C                            ; ===========================================================================
00006C1C                            
00006C1C                            loc_6610:
00006C1C 303C 0002                  		move.w	#2,d0
00006C20 60B6                       		bra.s	loc_65CC
00006C22                            
00006C22                            ; ---------------------------------------------------------------------------
00006C22                            ; Subroutine to	scroll the level vertically as Sonic moves
00006C22                            ; ---------------------------------------------------------------------------
00006C22                            
00006C22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C22                            
00006C22                            
00006C22                            ScrollVertical:				; XREF: DeformBgLayer
00006C22 7200                       		moveq	#0,d1
00006C24 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006C28 9078 F704                  		sub.w	($FFFFF704).w,d0
00006C2C 0838 0002 D022             		btst	#2,($FFFFD022).w
00006C32 6700                       		beq.s	loc_662A
00006C34 5B40                       		subq.w	#5,d0
00006C36                            
00006C36                            loc_662A:
00006C36 0838 0001 D022             		btst	#1,($FFFFD022).w
00006C3C 6700                       		beq.s	loc_664A
00006C3E 0640 0020                  		addi.w	#$20,d0
00006C42 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C46 6500                       		bcs.s	loc_6696
00006C48 0440 0040                  		subi.w	#$40,d0
00006C4C 6400                       		bcc.s	loc_6696
00006C4E 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C52 6600                       		bne.s	loc_66A8
00006C54 6000                       		bra.s	loc_6656
00006C56                            ; ===========================================================================
00006C56                            
00006C56                            loc_664A:
00006C56 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C5A 6600                       		bne.s	loc_665C
00006C5C 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C60 6600                       		bne.s	loc_66A8
00006C62                            
00006C62                            loc_6656:
00006C62 4278 F73C                  		clr.w	($FFFFF73C).w
00006C66 4E75                       		rts	
00006C68                            ; ===========================================================================
00006C68                            
00006C68                            loc_665C:
00006C68 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006C6E 6600                       		bne.s	loc_6684
00006C70 3238 D014                  		move.w	($FFFFD014).w,d1
00006C74 6A00                       		bpl.s	loc_666C
00006C76 4441                       		neg.w	d1
00006C78                            
00006C78                            loc_666C:
00006C78 0C41 0800                  		cmpi.w	#$800,d1
00006C7C 6400                       		bcc.s	loc_6696
00006C7E 323C 0600                  		move.w	#$600,d1
00006C82 0C40 0006                  		cmpi.w	#6,d0
00006C86 6E00                       		bgt.s	loc_66F6
00006C88 0C40 FFFA                  		cmpi.w	#-6,d0
00006C8C 6D00                       		blt.s	loc_66C0
00006C8E 6000                       		bra.s	loc_66AE
00006C90                            ; ===========================================================================
00006C90                            
00006C90                            loc_6684:
00006C90 323C 0200                  		move.w	#$200,d1
00006C94 0C40 0002                  		cmpi.w	#2,d0
00006C98 6E00                       		bgt.s	loc_66F6
00006C9A 0C40 FFFE                  		cmpi.w	#-2,d0
00006C9E 6D00                       		blt.s	loc_66C0
00006CA0 6000                       		bra.s	loc_66AE
00006CA2                            ; ===========================================================================
00006CA2                            
00006CA2                            loc_6696:
00006CA2 323C 1000                  		move.w	#$1000,d1
00006CA6 0C40 0010                  		cmpi.w	#$10,d0
00006CAA 6E00                       		bgt.s	loc_66F6
00006CAC 0C40 FFF0                  		cmpi.w	#-$10,d0
00006CB0 6D00                       		blt.s	loc_66C0
00006CB2 6000                       		bra.s	loc_66AE
00006CB4                            ; ===========================================================================
00006CB4                            
00006CB4                            loc_66A8:
00006CB4 7000                       		moveq	#0,d0
00006CB6 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006CBA                            
00006CBA                            loc_66AE:
00006CBA 7200                       		moveq	#0,d1
00006CBC 3200                       		move.w	d0,d1
00006CBE D278 F704                  		add.w	($FFFFF704).w,d1
00006CC2 4A40                       		tst.w	d0
00006CC4 6A00 0000                  		bpl.w	loc_6700
00006CC8 6000 0000                  		bra.w	loc_66CC
00006CCC                            ; ===========================================================================
00006CCC                            
00006CCC                            loc_66C0:
00006CCC 4441                       		neg.w	d1
00006CCE 48C1                       		ext.l	d1
00006CD0 E181                       		asl.l	#8,d1
00006CD2 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006CD6 4841                       		swap	d1
00006CD8                            
00006CD8                            loc_66CC:
00006CD8 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006CDC 6E00                       		bgt.s	loc_6724
00006CDE 0C41 FF00                  		cmpi.w	#-$100,d1
00006CE2 6E00                       		bgt.s	loc_66F0
00006CE4 0241 07FF                  		andi.w	#$7FF,d1
00006CE8 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006CEE 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006CF4 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006CFA 6000                       		bra.s	loc_6724
00006CFC                            ; ===========================================================================
00006CFC                            
00006CFC                            loc_66F0:
00006CFC 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006D00 6000                       		bra.s	loc_6724
00006D02                            ; ===========================================================================
00006D02                            
00006D02                            loc_66F6:
00006D02 48C1                       		ext.l	d1
00006D04 E181                       		asl.l	#8,d1
00006D06 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006D0A 4841                       		swap	d1
00006D0C                            
00006D0C                            loc_6700:
00006D0C B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006D10 6D00                       		blt.s	loc_6724
00006D12 0441 0800                  		subi.w	#$800,d1
00006D16 6500                       		bcs.s	loc_6720
00006D18 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D1E 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006D24 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D2A 6000                       		bra.s	loc_6724
00006D2C                            ; ===========================================================================
00006D2C                            
00006D2C                            loc_6720:
00006D2C 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006D30                            
00006D30                            loc_6724:
00006D30 3838 F704                  		move.w	($FFFFF704).w,d4
00006D34 4841                       		swap	d1
00006D36 2601                       		move.l	d1,d3
00006D38 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006D3C E09B                       		ror.l	#8,d3
00006D3E 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006D42 21C1 F704                  		move.l	d1,($FFFFF704).w
00006D46 3038 F704                  		move.w	($FFFFF704).w,d0
00006D4A 0240 0010                  		andi.w	#$10,d0
00006D4E 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006D52 B300                       		eor.b	d1,d0
00006D54 6600                       		bne.s	locret_6766
00006D56 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006D5C 3038 F704                  		move.w	($FFFFF704).w,d0
00006D60 9044                       		sub.w	d4,d0
00006D62 6A00                       		bpl.s	loc_6760
00006D64 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006D6A 4E75                       		rts	
00006D6C                            ; ===========================================================================
00006D6C                            
00006D6C                            loc_6760:
00006D6C 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006D72                            
00006D72                            locret_6766:
00006D72 4E75                       		rts	
00006D74                            ; End of function ScrollVertical
00006D74                            
00006D74                            
00006D74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D74                            
00006D74                            
00006D74                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006D74 2438 F708                  		move.l	($FFFFF708).w,d2
00006D78 2002                       		move.l	d2,d0
00006D7A D084                       		add.l	d4,d0
00006D7C 21C0 F708                  		move.l	d0,($FFFFF708).w
00006D80 2200                       		move.l	d0,d1
00006D82 4841                       		swap	d1
00006D84 0241 0010                  		andi.w	#$10,d1
00006D88 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006D8C B701                       		eor.b	d3,d1
00006D8E 6600                       		bne.s	loc_679C
00006D90 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006D96 9082                       		sub.l	d2,d0
00006D98 6A00                       		bpl.s	loc_6796
00006D9A 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006DA0 6000                       		bra.s	loc_679C
00006DA2                            ; ===========================================================================
00006DA2                            
00006DA2                            loc_6796:
00006DA2 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006DA8                            
00006DA8                            loc_679C:
00006DA8 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006DAC 2003                       		move.l	d3,d0
00006DAE D085                       		add.l	d5,d0
00006DB0 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006DB4 2200                       		move.l	d0,d1
00006DB6 4841                       		swap	d1
00006DB8 0241 0010                  		andi.w	#$10,d1
00006DBC 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006DC0 B501                       		eor.b	d2,d1
00006DC2 6600                       		bne.s	locret_67D0
00006DC4 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006DCA 9083                       		sub.l	d3,d0
00006DCC 6A00                       		bpl.s	loc_67CA
00006DCE 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006DD4 4E75                       		rts	
00006DD6                            ; ===========================================================================
00006DD6                            
00006DD6                            loc_67CA:
00006DD6 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006DDC                            
00006DDC                            locret_67D0:
00006DDC 4E75                       		rts	
00006DDE                            ; End of function ScrollBlock1
00006DDE                            
00006DDE                            
00006DDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DDE                            
00006DDE                            
00006DDE                            ScrollBlock2:				; XREF: Deform_SLZ
00006DDE 2438 F708                  		move.l	($FFFFF708).w,d2
00006DE2 2002                       		move.l	d2,d0
00006DE4 D084                       		add.l	d4,d0
00006DE6 21C0 F708                  		move.l	d0,($FFFFF708).w
00006DEA 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006DEE 2003                       		move.l	d3,d0
00006DF0 D085                       		add.l	d5,d0
00006DF2 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006DF6 2200                       		move.l	d0,d1
00006DF8 4841                       		swap	d1
00006DFA 0241 0010                  		andi.w	#$10,d1
00006DFE 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E02 B501                       		eor.b	d2,d1
00006E04 6600                       		bne.s	locret_6812
00006E06 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E0C 9083                       		sub.l	d3,d0
00006E0E 6A00                       		bpl.s	loc_680C
00006E10 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E16 4E75                       		rts	
00006E18                            ; ===========================================================================
00006E18                            
00006E18                            loc_680C:
00006E18 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E1E                            
00006E1E                            locret_6812:
00006E1E 4E75                       		rts	
00006E20                            ; End of function ScrollBlock2
00006E20                            
00006E20                            
00006E20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E20                            
00006E20                            
00006E20                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006E20 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006E24 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006E28 3200                       		move.w	d0,d1
00006E2A 0241 0010                  		andi.w	#$10,d1
00006E2E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E32 B501                       		eor.b	d2,d1
00006E34 6600                       		bne.s	locret_6842
00006E36 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E3C 9043                       		sub.w	d3,d0
00006E3E 6A00                       		bpl.s	loc_683C
00006E40 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E46 4E75                       		rts	
00006E48                            ; ===========================================================================
00006E48                            
00006E48                            loc_683C:
00006E48 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E4E                            
00006E4E                            locret_6842:
00006E4E 4E75                       		rts	
00006E50                            ; End of function ScrollBlock3
00006E50                            
00006E50                            
00006E50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E50                            
00006E50                            
00006E50                            ScrollBlock4:				; XREF: Deform_GHZ
00006E50 3438 F710                  		move.w	($FFFFF710).w,d2
00006E54 3638 F714                  		move.w	($FFFFF714).w,d3
00006E58 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006E5C 48C0                       		ext.l	d0
00006E5E EF80                       		asl.l	#7,d0
00006E60 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006E64 3038 F710                  		move.w	($FFFFF710).w,d0
00006E68 0240 0010                  		andi.w	#$10,d0
00006E6C 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006E70 B300                       		eor.b	d1,d0
00006E72 6600                       		bne.s	locret_6884
00006E74 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006E7A 3038 F710                  		move.w	($FFFFF710).w,d0
00006E7E 9042                       		sub.w	d2,d0
00006E80 6A00                       		bpl.s	loc_687E
00006E82 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006E88 6000                       		bra.s	locret_6884
00006E8A                            ; ===========================================================================
00006E8A                            
00006E8A                            loc_687E:
00006E8A 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006E90                            
00006E90                            locret_6884:
00006E90 4E75                       		rts	
00006E92                            ; End of function ScrollBlock4
00006E92                            
00006E92                            
00006E92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E92                            
00006E92                            
00006E92                            sub_6886:				; XREF: loc_C44
00006E92 4BF9 00C0 0004             		lea	($C00004).l,a5
00006E98 4DF9 00C0 0000             		lea	($C00000).l,a6
00006E9E 45F8 F756                  		lea	($FFFFF756).w,a2
00006EA2 47F8 F708                  		lea	($FFFFF708).w,a3
00006EA6 49F8 A440                  		lea	($FFFFA440).w,a4
00006EAA 343C 6000                  		move.w	#$6000,d2
00006EAE 6100 0000                  		bsr.w	sub_6954
00006EB2 45F8 F758                  		lea	($FFFFF758).w,a2
00006EB6 47F8 F710                  		lea	($FFFFF710).w,a3
00006EBA 6000 0000                  		bra.w	sub_69F4
00006EBE                            ; End of function sub_6886
00006EBE                            
00006EBE                            ; ---------------------------------------------------------------------------
00006EBE                            ; Subroutine to	display	correct	tiles as you move
00006EBE                            ; ---------------------------------------------------------------------------
00006EBE                            
00006EBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EBE                            
00006EBE                            
00006EBE                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006EBE 4BF9 00C0 0004             		lea	($C00004).l,a5
00006EC4 4DF9 00C0 0000             		lea	($C00000).l,a6
00006ECA 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006ECE 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006ED2 49F8 A440                  		lea	($FFFFA440).w,a4
00006ED6 343C 6000                  		move.w	#$6000,d2
00006EDA 6100 0000                  		bsr.w	sub_6954
00006EDE 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006EE2 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006EE6 6100 0000                  		bsr.w	sub_69F4
00006EEA 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006EEE 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006EF2 49F8 A400                  		lea	($FFFFA400).w,a4
00006EF6 343C 4000                  		move.w	#$4000,d2
00006EFA 4A12                       		tst.b	(a2)
00006EFC 6700                       		beq.s	locret_6952
00006EFE 0892 0000                  		bclr	#0,(a2)
00006F02 6700                       		beq.s	loc_6908
00006F04 78F0                       		moveq	#-$10,d4
00006F06 7AF0                       		moveq	#-$10,d5
00006F08 6100 0000                  		bsr.w	sub_6C20
00006F0C 78F0                       		moveq	#-$10,d4
00006F0E 7AF0                       		moveq	#-$10,d5
00006F10 6100 0000                  		bsr.w	sub_6AD8
00006F14                            
00006F14                            loc_6908:
00006F14 0892 0001                  		bclr	#1,(a2)
00006F18 6700                       		beq.s	loc_6922
00006F1A 383C 00E0                  		move.w	#$E0,d4
00006F1E 7AF0                       		moveq	#-$10,d5
00006F20 6100 0000                  		bsr.w	sub_6C20
00006F24 383C 00E0                  		move.w	#$E0,d4
00006F28 7AF0                       		moveq	#-$10,d5
00006F2A 6100 0000                  		bsr.w	sub_6AD8
00006F2E                            
00006F2E                            loc_6922:
00006F2E 0892 0002                  		bclr	#2,(a2)
00006F32 6700                       		beq.s	loc_6938
00006F34 78F0                       		moveq	#-$10,d4
00006F36 7AF0                       		moveq	#-$10,d5
00006F38 6100 0000                  		bsr.w	sub_6C20
00006F3C 78F0                       		moveq	#-$10,d4
00006F3E 7AF0                       		moveq	#-$10,d5
00006F40 6100 0000                  		bsr.w	sub_6B04
00006F44                            
00006F44                            loc_6938:
00006F44 0892 0003                  		bclr	#3,(a2)
00006F48 6700                       		beq.s	locret_6952
00006F4A 78F0                       		moveq	#-$10,d4
00006F4C 3A3C 0140                  		move.w	#$140,d5
00006F50 6100 0000                  		bsr.w	sub_6C20
00006F54 78F0                       		moveq	#-$10,d4
00006F56 3A3C 0140                  		move.w	#$140,d5
00006F5A 6100 0000                  		bsr.w	sub_6B04
00006F5E                            
00006F5E                            locret_6952:
00006F5E 4E75                       		rts	
00006F60                            ; End of function LoadTilesAsYouMove
00006F60                            
00006F60                            
00006F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F60                            
00006F60                            
00006F60                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006F60 4A12                       		tst.b	(a2)
00006F62 6700 0000                  		beq.w	locret_69F2
00006F66 0892 0000                  		bclr	#0,(a2)
00006F6A 6700                       		beq.s	loc_6972
00006F6C 78F0                       		moveq	#-$10,d4
00006F6E 7AF0                       		moveq	#-$10,d5
00006F70 6100 0000                  		bsr.w	sub_6C20
00006F74 78F0                       		moveq	#-$10,d4
00006F76 7AF0                       		moveq	#-$10,d5
00006F78 7C1F                       		moveq	#$1F,d6
00006F7A 6100 0000                  		bsr.w	sub_6ADA
00006F7E                            
00006F7E                            loc_6972:
00006F7E 0892 0001                  		bclr	#1,(a2)
00006F82 6700                       		beq.s	loc_698E
00006F84 383C 00E0                  		move.w	#$E0,d4
00006F88 7AF0                       		moveq	#-$10,d5
00006F8A 6100 0000                  		bsr.w	sub_6C20
00006F8E 383C 00E0                  		move.w	#$E0,d4
00006F92 7AF0                       		moveq	#-$10,d5
00006F94 7C1F                       		moveq	#$1F,d6
00006F96 6100 0000                  		bsr.w	sub_6ADA
00006F9A                            
00006F9A                            loc_698E:
00006F9A 0892 0002                  		bclr	#2,(a2)
00006F9E 6700                       		beq.s	loc_69BE
00006FA0 78F0                       		moveq	#-$10,d4
00006FA2 7AF0                       		moveq	#-$10,d5
00006FA4 6100 0000                  		bsr.w	sub_6C20
00006FA8 78F0                       		moveq	#-$10,d4
00006FAA 7AF0                       		moveq	#-$10,d5
00006FAC 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006FB0 322B 0004                  		move.w	4(a3),d1
00006FB4 0241 FFF0                  		andi.w	#-$10,d1
00006FB8 9C41                       		sub.w	d1,d6
00006FBA 6D00                       		blt.s	loc_69BE
00006FBC E84E                       		lsr.w	#4,d6
00006FBE 0C46 000F                  		cmpi.w	#$F,d6
00006FC2 6500                       		bcs.s	loc_69BA
00006FC4 7C0F                       		moveq	#$F,d6
00006FC6                            
00006FC6                            loc_69BA:
00006FC6 6100 0000                  		bsr.w	sub_6B06
00006FCA                            
00006FCA                            loc_69BE:
00006FCA 0892 0003                  		bclr	#3,(a2)
00006FCE 6700                       		beq.s	locret_69F2
00006FD0 78F0                       		moveq	#-$10,d4
00006FD2 3A3C 0140                  		move.w	#$140,d5
00006FD6 6100 0000                  		bsr.w	sub_6C20
00006FDA 78F0                       		moveq	#-$10,d4
00006FDC 3A3C 0140                  		move.w	#$140,d5
00006FE0 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006FE4 322B 0004                  		move.w	4(a3),d1
00006FE8 0241 FFF0                  		andi.w	#-$10,d1
00006FEC 9C41                       		sub.w	d1,d6
00006FEE 6D00                       		blt.s	locret_69F2
00006FF0 E84E                       		lsr.w	#4,d6
00006FF2 0C46 000F                  		cmpi.w	#$F,d6
00006FF6 6500                       		bcs.s	loc_69EE
00006FF8 7C0F                       		moveq	#$F,d6
00006FFA                            
00006FFA                            loc_69EE:
00006FFA 6100 0000                  		bsr.w	sub_6B06
00006FFE                            
00006FFE                            locret_69F2:
00006FFE 4E75                       		rts	
00007000                            ; End of function sub_6954
00007000                            
00007000                            
00007000                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007000                            
00007000                            
00007000                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00007000 4A12                       		tst.b	(a2)
00007002 6700 0000                  		beq.w	locret_6A80
00007006 0892 0002                  		bclr	#2,(a2)
0000700A 6700                       		beq.s	loc_6A3E
0000700C 0C53 0010                  		cmpi.w	#$10,(a3)
00007010 6500                       		bcs.s	loc_6A3E
00007012 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007016 322B 0004                  		move.w	4(a3),d1
0000701A 0241 FFF0                  		andi.w	#-$10,d1
0000701E 9841                       		sub.w	d1,d4
00007020 3F04                       		move.w	d4,-(sp)
00007022 7AF0                       		moveq	#-$10,d5
00007024 6100 0000                  		bsr.w	sub_6C20
00007028 381F                       		move.w	(sp)+,d4
0000702A 7AF0                       		moveq	#-$10,d5
0000702C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007030 322B 0004                  		move.w	4(a3),d1
00007034 0241 FFF0                  		andi.w	#-$10,d1
00007038 9C41                       		sub.w	d1,d6
0000703A 6D00                       		blt.s	loc_6A3E
0000703C E84E                       		lsr.w	#4,d6
0000703E 0446 000E                  		subi.w	#$E,d6
00007042 6400                       		bcc.s	loc_6A3E
00007044 4446                       		neg.w	d6
00007046 6100 0000                  		bsr.w	sub_6B06
0000704A                            
0000704A                            loc_6A3E:
0000704A 0892 0003                  		bclr	#3,(a2)
0000704E 6700                       		beq.s	locret_6A80
00007050 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007054 322B 0004                  		move.w	4(a3),d1
00007058 0241 FFF0                  		andi.w	#-$10,d1
0000705C 9841                       		sub.w	d1,d4
0000705E 3F04                       		move.w	d4,-(sp)
00007060 3A3C 0140                  		move.w	#$140,d5
00007064 6100 0000                  		bsr.w	sub_6C20
00007068 381F                       		move.w	(sp)+,d4
0000706A 3A3C 0140                  		move.w	#$140,d5
0000706E 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007072 322B 0004                  		move.w	4(a3),d1
00007076 0241 FFF0                  		andi.w	#-$10,d1
0000707A 9C41                       		sub.w	d1,d6
0000707C 6D00                       		blt.s	locret_6A80
0000707E E84E                       		lsr.w	#4,d6
00007080 0446 000E                  		subi.w	#$E,d6
00007084 6400                       		bcc.s	locret_6A80
00007086 4446                       		neg.w	d6
00007088 6100 0000                  		bsr.w	sub_6B06
0000708C                            
0000708C                            locret_6A80:
0000708C 4E75                       		rts	
0000708E                            ; End of function sub_69F4
0000708E                            
0000708E                            ; ===========================================================================
0000708E 4A12                       		tst.b	(a2)
00007090 6700                       		beq.s	locret_6AD6
00007092 0892 0002                  		bclr	#2,(a2)
00007096 6700                       		beq.s	loc_6AAC
00007098 383C 00D0                  		move.w	#$D0,d4
0000709C 322B 0004                  		move.w	4(a3),d1
000070A0 0241 FFF0                  		andi.w	#-$10,d1
000070A4 9841                       		sub.w	d1,d4
000070A6 3F04                       		move.w	d4,-(sp)
000070A8 7AF0                       		moveq	#-$10,d5
000070AA 6100 0000                  		bsr.w	sub_6C3C
000070AE 381F                       		move.w	(sp)+,d4
000070B0 7AF0                       		moveq	#-$10,d5
000070B2 7C02                       		moveq	#2,d6
000070B4 6100 0000                  		bsr.w	sub_6B06
000070B8                            
000070B8                            loc_6AAC:
000070B8 0892 0003                  		bclr	#3,(a2)
000070BC 6700                       		beq.s	locret_6AD6
000070BE 383C 00D0                  		move.w	#$D0,d4
000070C2 322B 0004                  		move.w	4(a3),d1
000070C6 0241 FFF0                  		andi.w	#-$10,d1
000070CA 9841                       		sub.w	d1,d4
000070CC 3F04                       		move.w	d4,-(sp)
000070CE 3A3C 0140                  		move.w	#$140,d5
000070D2 6100 0000                  		bsr.w	sub_6C3C
000070D6 381F                       		move.w	(sp)+,d4
000070D8 3A3C 0140                  		move.w	#$140,d5
000070DC 7C02                       		moveq	#2,d6
000070DE 6100 0000                  		bsr.w	sub_6B06
000070E2                            
000070E2                            locret_6AD6:
000070E2 4E75                       		rts	
000070E4                            
000070E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070E4                            
000070E4                            
000070E4                            sub_6AD8:				; XREF: LoadTilesAsYouMove
000070E4 7C15                       		moveq	#$15,d6
000070E6                            ; End of function sub_6AD8
000070E6                            
000070E6                            
000070E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070E6                            
000070E6                            
000070E6                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
000070E6 2E3C 0080 0000             		move.l	#$800000,d7
000070EC 2200                       		move.l	d0,d1
000070EE                            
000070EE                            loc_6AE2:
000070EE 48E7 0C00                  		movem.l	d4-d5,-(sp)
000070F2 6100 0000                  		bsr.w	sub_6BD6
000070F6 2001                       		move.l	d1,d0
000070F8 6100 0000                  		bsr.w	sub_6B32
000070FC 5801                       		addq.b	#4,d1
000070FE 0201 007F                  		andi.b	#$7F,d1
00007102 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007106 0645 0010                  		addi.w	#$10,d5
0000710A 51CE FFE2                  		dbf	d6,loc_6AE2
0000710E 4E75                       		rts	
00007110                            ; End of function sub_6ADA
00007110                            
00007110                            
00007110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007110                            
00007110                            
00007110                            sub_6B04:				; XREF: LoadTilesAsYouMove
00007110 7C0F                       		moveq	#$F,d6
00007112                            ; End of function sub_6B04
00007112                            
00007112                            
00007112                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007112                            
00007112                            
00007112                            sub_6B06:				; XREF: sub_6954
00007112 2E3C 0080 0000             		move.l	#$800000,d7
00007118 2200                       		move.l	d0,d1
0000711A                            
0000711A                            loc_6B0E:
0000711A 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000711E 6100 0000                  		bsr.w	sub_6BD6
00007122 2001                       		move.l	d1,d0
00007124 6100 0000                  		bsr.w	sub_6B32
00007128 0641 0100                  		addi.w	#$100,d1
0000712C 0241 0FFF                  		andi.w	#$FFF,d1
00007130 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007134 0644 0010                  		addi.w	#$10,d4
00007138 51CE FFE0                  		dbf	d6,loc_6B0E
0000713C 4E75                       		rts	
0000713E                            ; End of function sub_6B06
0000713E                            
0000713E                            
0000713E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000713E                            
0000713E                            
0000713E                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
0000713E 8042                       		or.w	d2,d0
00007140 4840                       		swap	d0
00007142 0810 0004                  		btst	#4,(a0)
00007146 6600                       		bne.s	loc_6B6E
00007148 0810 0003                  		btst	#3,(a0)
0000714C 6600                       		bne.s	loc_6B4E
0000714E 2A80                       		move.l	d0,(a5)
00007150 2C99                       		move.l	(a1)+,(a6)
00007152 D087                       		add.l	d7,d0
00007154 2A80                       		move.l	d0,(a5)
00007156 2C99                       		move.l	(a1)+,(a6)
00007158 4E75                       		rts	
0000715A                            ; ===========================================================================
0000715A                            
0000715A                            loc_6B4E:
0000715A 2A80                       		move.l	d0,(a5)
0000715C 2819                       		move.l	(a1)+,d4
0000715E 0A84 0800 0800             		eori.l	#$8000800,d4
00007164 4844                       		swap	d4
00007166 2C84                       		move.l	d4,(a6)
00007168 D087                       		add.l	d7,d0
0000716A 2A80                       		move.l	d0,(a5)
0000716C 2819                       		move.l	(a1)+,d4
0000716E 0A84 0800 0800             		eori.l	#$8000800,d4
00007174 4844                       		swap	d4
00007176 2C84                       		move.l	d4,(a6)
00007178 4E75                       		rts	
0000717A                            ; ===========================================================================
0000717A                            
0000717A                            loc_6B6E:
0000717A 0810 0003                  		btst	#3,(a0)
0000717E 6600                       		bne.s	loc_6B90
00007180 2A80                       		move.l	d0,(a5)
00007182 2A19                       		move.l	(a1)+,d5
00007184 2819                       		move.l	(a1)+,d4
00007186 0A84 1000 1000             		eori.l	#$10001000,d4
0000718C 2C84                       		move.l	d4,(a6)
0000718E D087                       		add.l	d7,d0
00007190 2A80                       		move.l	d0,(a5)
00007192 0A85 1000 1000             		eori.l	#$10001000,d5
00007198 2C85                       		move.l	d5,(a6)
0000719A 4E75                       		rts	
0000719C                            ; ===========================================================================
0000719C                            
0000719C                            loc_6B90:
0000719C 2A80                       		move.l	d0,(a5)
0000719E 2A19                       		move.l	(a1)+,d5
000071A0 2819                       		move.l	(a1)+,d4
000071A2 0A84 1800 1800             		eori.l	#$18001800,d4
000071A8 4844                       		swap	d4
000071AA 2C84                       		move.l	d4,(a6)
000071AC D087                       		add.l	d7,d0
000071AE 2A80                       		move.l	d0,(a5)
000071B0 0A85 1800 1800             		eori.l	#$18001800,d5
000071B6 4845                       		swap	d5
000071B8 2C85                       		move.l	d5,(a6)
000071BA 4E75                       		rts	
000071BC                            ; End of function sub_6B32
000071BC                            
000071BC                            ; ===========================================================================
000071BC 4E75                       		rts	
000071BE                            ; ===========================================================================
000071BE 2A80                       		move.l	d0,(a5)
000071C0 3A3C 2000                  		move.w	#$2000,d5
000071C4 3819                       		move.w	(a1)+,d4
000071C6 D845                       		add.w	d5,d4
000071C8 3C84                       		move.w	d4,(a6)
000071CA 3819                       		move.w	(a1)+,d4
000071CC D845                       		add.w	d5,d4
000071CE 3C84                       		move.w	d4,(a6)
000071D0 D087                       		add.l	d7,d0
000071D2 2A80                       		move.l	d0,(a5)
000071D4 3819                       		move.w	(a1)+,d4
000071D6 D845                       		add.w	d5,d4
000071D8 3C84                       		move.w	d4,(a6)
000071DA 3819                       		move.w	(a1)+,d4
000071DC D845                       		add.w	d5,d4
000071DE 3C84                       		move.w	d4,(a6)
000071E0 4E75                       		rts	
000071E2                            
000071E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071E2                            
000071E2                            
000071E2                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
000071E2 43F8 B000                  		lea	($FFFFB000).w,a1
000071E6 D86B 0004                  		add.w	4(a3),d4
000071EA DA53                       		add.w	(a3),d5
000071EC 3604                       		move.w	d4,d3
000071EE E24B                       		lsr.w	#1,d3
000071F0 0243 0380                  		andi.w	#$380,d3
000071F4 E64D                       		lsr.w	#3,d5
000071F6 3005                       		move.w	d5,d0
000071F8 EA48                       		lsr.w	#5,d0
000071FA 0240 007F                  		andi.w	#$7F,d0
000071FE D043                       		add.w	d3,d0
00007200 76FF                       		moveq	#-1,d3
00007202 1634 0000                  		move.b	(a4,d0.w),d3
00007206 6700                       		beq.s	locret_6C1E
00007208 5303                       		subq.b	#1,d3
0000720A 0243 007F                  		andi.w	#$7F,d3
0000720E EE5B                       		ror.w	#7,d3
00007210 D844                       		add.w	d4,d4
00007212 0244 01E0                  		andi.w	#$1E0,d4
00007216 0245 001E                  		andi.w	#$1E,d5
0000721A D644                       		add.w	d4,d3
0000721C D645                       		add.w	d5,d3
0000721E 2043                       		movea.l	d3,a0
00007220 3610                       		move.w	(a0),d3
00007222 0243 03FF                  		andi.w	#$3FF,d3
00007226 E74B                       		lsl.w	#3,d3
00007228 D2C3                       		adda.w	d3,a1
0000722A                            
0000722A                            locret_6C1E:
0000722A 4E75                       		rts	
0000722C                            ; End of function sub_6BD6
0000722C                            
0000722C                            
0000722C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000722C                            
0000722C                            
0000722C                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
0000722C D86B 0004                  		add.w	4(a3),d4
00007230 DA53                       		add.w	(a3),d5
00007232 0244 00F0                  		andi.w	#$F0,d4
00007236 0245 01F0                  		andi.w	#$1F0,d5
0000723A E94C                       		lsl.w	#4,d4
0000723C E44D                       		lsr.w	#2,d5
0000723E D845                       		add.w	d5,d4
00007240 7003                       		moveq	#3,d0
00007242 4840                       		swap	d0
00007244 3004                       		move.w	d4,d0
00007246 4E75                       		rts	
00007248                            ; End of function sub_6C20
00007248                            
00007248                            
00007248                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007248                            ; not used
00007248                            
00007248                            
00007248                            sub_6C3C:
00007248 D86B 0004                  		add.w	4(a3),d4
0000724C DA53                       		add.w	(a3),d5
0000724E 0244 00F0                  		andi.w	#$F0,d4
00007252 0245 01F0                  		andi.w	#$1F0,d5
00007256 E94C                       		lsl.w	#4,d4
00007258 E44D                       		lsr.w	#2,d5
0000725A D845                       		add.w	d5,d4
0000725C 7002                       		moveq	#2,d0
0000725E 4840                       		swap	d0
00007260 3004                       		move.w	d4,d0
00007262 4E75                       		rts	
00007264                            ; End of function sub_6C3C
00007264                            
00007264                            ; ---------------------------------------------------------------------------
00007264                            ; Subroutine to	load tiles as soon as the level	appears
00007264                            ; ---------------------------------------------------------------------------
00007264                            
00007264                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007264                            
00007264                            
00007264                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007264 4BF9 00C0 0004             		lea	($C00004).l,a5
0000726A 4DF9 00C0 0000             		lea	($C00000).l,a6
00007270 47F8 F700                  		lea	($FFFFF700).w,a3
00007274 49F8 A400                  		lea	($FFFFA400).w,a4
00007278 343C 4000                  		move.w	#$4000,d2
0000727C 6100                       		bsr.s	LoadTilesFromStart2
0000727E 47F8 F708                  		lea	($FFFFF708).w,a3
00007282 49F8 A440                  		lea	($FFFFA440).w,a4
00007286 343C 6000                  		move.w	#$6000,d2
0000728A                            ; End of function LoadTilesFromStart
0000728A                            
0000728A                            
0000728A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000728A                            
0000728A                            
0000728A                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
0000728A 78F0                       		moveq	#-$10,d4
0000728C 7C0F                       		moveq	#$F,d6
0000728E                            
0000728E                            loc_6C82:
0000728E 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007292 7A00                       		moveq	#0,d5
00007294 3204                       		move.w	d4,d1
00007296 6100 FF94                  		bsr.w	sub_6C20
0000729A 3801                       		move.w	d1,d4
0000729C 7A00                       		moveq	#0,d5
0000729E 7C1F                       		moveq	#$1F,d6
000072A0 6100 FE44                  		bsr.w	sub_6ADA
000072A4 4CDF 0070                  		movem.l	(sp)+,d4-d6
000072A8 0644 0010                  		addi.w	#$10,d4
000072AC 51CE FFE0                  		dbf	d6,loc_6C82
000072B0 4E75                       		rts	
000072B2                            ; End of function LoadTilesFromStart2
000072B2                            
000072B2                            ; ---------------------------------------------------------------------------
000072B2                            ; Main Load Block loading subroutine
000072B2                            ; ---------------------------------------------------------------------------
000072B2                            
000072B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072B2                            
000072B2                            
000072B2                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000072B2 7000                       		moveq	#0,d0
000072B4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000072B8 E948                       		lsl.w	#4,d0
000072BA 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000072C0 45F2 0000                  		lea	(a2,d0.w),a2
000072C4 2F0A                       		move.l	a2,-(sp)
000072C6 588A                       		addq.l	#4,a2
000072C8 205A                       		movea.l	(a2)+,a0
000072CA 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000072CE 303C 0000                  		move.w	#0,d0
000072D2 6100 A44C                  		bsr.w	EniDec
000072D6 205A                       		movea.l	(a2)+,a0
000072D8 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
000072DE 6100 A5BE                  		bsr.w	KosDec
000072E2 6100 0000                  		bsr.w	LevelLayoutLoad
000072E6 301A                       		move.w	(a2)+,d0
000072E8 3012                       		move.w	(a2),d0
000072EA 0240 00FF                  		andi.w	#$FF,d0
000072EE 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
000072F4 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000072F6 700C                       		moveq	#$C,d0		; use SB3 pallet
000072F8                            
000072F8                            MLB_ChkSBZPal:
000072F8 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000072FE 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007300 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007306 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007308                            
00007308                            MLB_UsePal0E:
00007308 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000730A                            
0000730A                            MLB_NormalPal:
0000730A 6100 ADC6                  		bsr.w	PalLoad1	; load pallet (based on	d0)
0000730E 245F                       		movea.l	(sp)+,a2
00007310 584A                       		addq.w	#4,a2
00007312 7000                       		moveq	#0,d0
00007314 1012                       		move.b	(a2),d0
00007316 6700                       		beq.s	locret_6D10
00007318 6100 A268                  		bsr.w	LoadPLC		; load pattern load cues
0000731C                            
0000731C                            locret_6D10:
0000731C 4E75                       		rts	
0000731E                            ; End of function MainLoadBlockLoad
0000731E                            
0000731E                            ; ---------------------------------------------------------------------------
0000731E                            ; Level	layout loading subroutine
0000731E                            ; ---------------------------------------------------------------------------
0000731E                            
0000731E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000731E                            
0000731E                            
0000731E                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
0000731E 47F8 A400                  		lea	($FFFFA400).w,a3
00007322 323C 01FF                  		move.w	#$1FF,d1
00007326 7000                       		moveq	#0,d0
00007328                            
00007328                            LevLoad_ClrRam:
00007328 26C0                       		move.l	d0,(a3)+
0000732A 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
0000732E                            
0000732E 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007332 7200                       		moveq	#0,d1
00007334 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007338 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
0000733C 7202                       		moveq	#2,d1
0000733E                            ; End of function LevelLayoutLoad
0000733E                            
0000733E                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000733E                            
0000733E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000733E                            
0000733E                            
0000733E                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
0000733E 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007342 ED08                       		lsl.b	#6,d0
00007344 EA48                       		lsr.w	#5,d0
00007346 3400                       		move.w	d0,d2
00007348 D040                       		add.w	d0,d0
0000734A D042                       		add.w	d2,d0
0000734C D041                       		add.w	d1,d0
0000734E 43F9 0000 0000             		lea	(Level_Index).l,a1
00007354 3031 0000                  		move.w	(a1,d0.w),d0
00007358 43F1 0000                  		lea	(a1,d0.w),a1
0000735C 7200                       		moveq	#0,d1
0000735E 3401                       		move.w	d1,d2
00007360 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007362 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007364                            
00007364                            LevLoad_NumRows:
00007364 3001                       		move.w	d1,d0
00007366 204B                       		movea.l	a3,a0
00007368                            
00007368                            LevLoad_Row:
00007368 10D9                       		move.b	(a1)+,(a0)+
0000736A 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
0000736E 47EB 0080                  		lea	$80(a3),a3	; do next row
00007372 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007376 4E75                       		rts	
00007378                            ; End of function LevelLayoutLoad2
00007378                            
00007378                            ; ---------------------------------------------------------------------------
00007378                            ; Dynamic screen resize	loading	subroutine
00007378                            ; ---------------------------------------------------------------------------
00007378                            
00007378                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007378                            
00007378                            
00007378                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007378 7000                       		moveq	#0,d0
0000737A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000737E D040                       		add.w	d0,d0
00007380 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007384 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007388 7202                       		moveq	#2,d1
0000738A 3038 F726                  		move.w	($FFFFF726).w,d0
0000738E 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007392 6700                       		beq.s	locret_6DAA
00007394 6400                       		bcc.s	loc_6DAC
00007396 4441                       		neg.w	d1
00007398 3038 F704                  		move.w	($FFFFF704).w,d0
0000739C B078 F726                  		cmp.w	($FFFFF726).w,d0
000073A0 6300                       		bls.s	loc_6DA0
000073A2 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000073A6 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000073AC                            
000073AC                            loc_6DA0:
000073AC D378 F72E                  		add.w	d1,($FFFFF72E).w
000073B0 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000073B6                            
000073B6                            locret_6DAA:
000073B6 4E75                       		rts	
000073B8                            ; ===========================================================================
000073B8                            
000073B8                            loc_6DAC:				; XREF: DynScrResizeLoad
000073B8 3038 F704                  		move.w	($FFFFF704).w,d0
000073BC 5040                       		addq.w	#8,d0
000073BE B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000073C2 6500                       		bcs.s	loc_6DC4
000073C4 0838 0001 D022             		btst	#1,($FFFFD022).w
000073CA 6700                       		beq.s	loc_6DC4
000073CC D241                       		add.w	d1,d1
000073CE D241                       		add.w	d1,d1
000073D0                            
000073D0                            loc_6DC4:
000073D0 D378 F72E                  		add.w	d1,($FFFFF72E).w
000073D4 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000073DA 4E75                       		rts	
000073DC                            ; End of function DynScrResizeLoad
000073DC                            
000073DC                            ; ===========================================================================
000073DC                            ; ---------------------------------------------------------------------------
000073DC                            ; Offset index for dynamic screen resizing
000073DC                            ; ---------------------------------------------------------------------------
000073DC 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
000073E0 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
000073E4 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
000073E8 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_GHZ-Resize_Index
000073EC                            ; ===========================================================================
000073EC                            ; ---------------------------------------------------------------------------
000073EC                            ; Green	Hill Zone dynamic screen resizing
000073EC                            ; ---------------------------------------------------------------------------
000073EC                            
000073EC                            Resize_GHZ:				; XREF: Resize_Index
000073EC 7000                       		moveq	#0,d0
000073EE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000073F2 D040                       		add.w	d0,d0
000073F4 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000073F8 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000073FC                            ; ===========================================================================
000073FC 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000073FE 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007400 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007402                            ; ===========================================================================
00007402                            
00007402                            Resize_GHZ1:
00007402 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007408 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000740E 6500                       		bcs.s	locret_6E08	; if not, branch
00007410 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007416                            
00007416                            locret_6E08:
00007416 4E75                       		rts	
00007418                            ; ===========================================================================
00007418                            
00007418                            Resize_GHZ2:
00007418 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000741E 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007424 6500                       		bcs.s	locret_6E3A
00007426 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000742C 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007432 6500                       		bcs.s	locret_6E3A
00007434 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000743A 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
00007440 6500                       		bcs.s	locret_6E3A
00007442 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
00007448 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
0000744E 6500                       		bcs.s	locret_6E3A
00007450 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
00007456                            		
00007456                            locret_6E3A:
00007456 4E75                       		rts	
00007458                            ; ===========================================================================
00007458                            
00007458                            Resize_GHZ3:
00007458 7000                       		moveq	#0,d0
0000745A 1038 F742                  		move.b	($FFFFF742).w,d0
0000745E 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007462 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007466                            ; ===========================================================================
00007466 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007468 0000                       		dc.w Resize_GHZ3boss-off_6E4A
0000746A 0000                       		dc.w Resize_GHZ3end-off_6E4A
0000746C                            ; ===========================================================================
0000746C                            
0000746C                            Resize_GHZ3main:
0000746C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007472 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007478 6500                       		bcs.s	locret_6E96
0000747A 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007480 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007486 6500                       		bcs.s	locret_6E96
00007488 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
0000748E 6500                       		bcs.s	loc_6E98
00007490 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007496 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
0000749C 6400                       		bcc.s	loc_6E8E
0000749E 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000074A4 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000074AA                            
000074AA                            loc_6E8E:
000074AA 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000074B0 6400                       		bcc.s	loc_6E98
000074B2                            
000074B2                            locret_6E96:
000074B2 4E75                       		rts	
000074B4                            ; ===========================================================================
000074B4                            
000074B4                            loc_6E98:
000074B4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000074BA 5438 F742                  		addq.b	#2,($FFFFF742).w
000074BE 4E75                       		rts	
000074C0                            ; ===========================================================================
000074C0                            
000074C0                            Resize_GHZ3boss:
000074C0 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000074C6 6400                       		bcc.s	loc_6EB0
000074C8 5538 F742                  		subq.b	#2,($FFFFF742).w
000074CC                            
000074CC                            loc_6EB0:
000074CC 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000074D2 6500                       		bcs.s	locret_6EE8
000074D4 6100 0000                  		bsr.w	SingleObjLoad
000074D8 6600                       		bne.s	loc_6ED0
000074DA 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000074DE 337C 2A60 0008             		move.w	#$2A60,8(a1)
000074E4 337C 0280 000C             		move.w	#$280,$C(a1)
000074EA                            
000074EA                            loc_6ED0:
000074EA 303C 008C                  		move.w	#$8C,d0
000074EE 6100 9EA8                  		bsr.w	PlaySound	; play boss music
000074F2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000074F8 5438 F742                  		addq.b	#2,($FFFFF742).w
000074FC 7011                       		moveq	#$11,d0
000074FE 6000 A082                  		bra.w	LoadPLC		; load boss patterns
00007502                            ; ===========================================================================
00007502                            
00007502                            locret_6EE8:
00007502 4E75                       		rts	
00007504                            ; ===========================================================================
00007504                            
00007504                            Resize_GHZ3end:
00007504 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000750A 4E75                       		rts	
0000750C                            ; ===========================================================================
0000750C                            ; ---------------------------------------------------------------------------
0000750C                            ; Labyrinth Zone dynamic screen	resizing
0000750C                            ; ---------------------------------------------------------------------------
0000750C                            
0000750C                            Resize_LZ:				; XREF: Resize_Index
0000750C 7000                       		moveq	#0,d0
0000750E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007512 D040                       		add.w	d0,d0
00007514 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007518 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000751C                            ; ===========================================================================
0000751C 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000751E 0000                       		dc.w Resize_LZ12-Resize_LZx
00007520 0000                       		dc.w Resize_LZ3-Resize_LZx
00007522 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007524                            ; ===========================================================================
00007524                            
00007524                            Resize_LZ12:
00007524 4E75                       		rts	
00007526                            ; ===========================================================================
00007526                            
00007526                            Resize_LZ3:
00007526 7000                       		moveq	#0,d0
00007528 1038 F742                  		move.b	($FFFFF742).w,d0
0000752C 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
00007530 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
00007534                            ; ===========================================================================
00007534                            off_6E4A2:	
00007534 0000                       		dc.w Resize_LZ3boss-off_6E4A2
00007536 0000                       		dc.w Resize_LZ3end-off_6E4A2
00007538                            ; ===========================================================================
00007538                            Resize_LZ3boss:
00007538 4A38 F742                  		tst.b	($FFFFF742).w
0000753C 6600                       		bne.s	locret_6F62
0000753E 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007544 6500                       		bcs.s	locret_6F62
00007546 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
0000754C 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00007552                            
00007552 6100 0000                  		bsr.w	SingleObjLoad
00007556 6600                       		bne.s	loc_6F4A
00007558 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
0000755C 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
00007562 337C 06E0 000C             		move.w	#$6E0,$C(a1)
00007568                            loc_6F4A:
00007568 303C 008C                  		move.w	#$8C,d0
0000756C 6100 9E2A                  		bsr.w	PlaySound	; play boss music
00007570 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007576 5438 F742                  		addq.b	#2,($FFFFF742).w
0000757A 7022                       		moveq	#$22,d0
0000757C 6000 A004                  		bra.w	LoadPLC		; load boss patterns
00007580                            ; ===========================================================================
00007580                            
00007580                            locret_6F62:
00007580 4E75                       		rts	
00007582                            ; ===========================================================================
00007582                            
00007582                            Resize_LZ3end:
00007582 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007588 4E75                       		rts	
0000758A                            ; ===========================================================================
0000758A                            
0000758A                            Resize_SBZ3:
0000758A 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007590 6500                       		bcs.s	locret_6F8C
00007592 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007598 6400                       		bcc.s	locret_6F8C	; if not, branch
0000759A 4238 FE30                  		clr.b	($FFFFFE30).w
0000759E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000075A4 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000075AA 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000075B0                            
000075B0                            locret_6F8C:
000075B0 4E75                       		rts	
000075B2                            ; ===========================================================================
000075B2                            ; ---------------------------------------------------------------------------
000075B2                            ; Marble Zone dynamic screen resizing
000075B2                            ; ---------------------------------------------------------------------------
000075B2                            
000075B2                            Resize_MZ:				; XREF: Resize_Index
000075B2 7000                       		moveq	#0,d0
000075B4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075B8 D040                       		add.w	d0,d0
000075BA 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000075BE 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000075C2                            ; ===========================================================================
000075C2 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000075C4 0000                       		dc.w Resize_MZ2-Resize_MZx
000075C6 0000                       		dc.w Resize_MZ3-Resize_MZx
000075C8                            ; ===========================================================================
000075C8                            
000075C8                            Resize_MZ1:
000075C8 7000                       		moveq	#0,d0
000075CA 1038 F742                  		move.b	($FFFFF742).w,d0
000075CE 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000075D2 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000075D6                            ; ===========================================================================
000075D6 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000075D8 0000                       		dc.w loc_6FEA-off_6FB2
000075DA 0000                       		dc.w loc_702E-off_6FB2
000075DC 0000                       		dc.w loc_7050-off_6FB2
000075DE                            ; ===========================================================================
000075DE                            
000075DE                            loc_6FBA:
000075DE 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000075E4 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000075EA 6500                       		bcs.s	locret_6FE8
000075EC 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000075F2 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000075F8 6500                       		bcs.s	locret_6FE8
000075FA 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007600 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007606 6500                       		bcs.s	locret_6FE8
00007608 5438 F742                  		addq.b	#2,($FFFFF742).w
0000760C                            
0000760C                            locret_6FE8:
0000760C 4E75                       		rts	
0000760E                            ; ===========================================================================
0000760E                            
0000760E                            loc_6FEA:
0000760E 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007614 6400                       		bcc.s	loc_6FF8
00007616 5538 F742                  		subq.b	#2,($FFFFF742).w
0000761A 4E75                       		rts	
0000761C                            ; ===========================================================================
0000761C                            
0000761C                            loc_6FF8:
0000761C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007622 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007628 6400                       		bcc.s	locret_702C
0000762A 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007630 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007636 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
0000763C 6400                       		bcc.s	locret_702C
0000763E 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007644 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000764A 6500                       		bcs.s	locret_702C
0000764C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007650                            
00007650                            locret_702C:
00007650 4E75                       		rts	
00007652                            ; ===========================================================================
00007652                            
00007652                            loc_702E:
00007652 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007658 6400                       		bcc.s	loc_703C
0000765A 5538 F742                  		subq.b	#2,($FFFFF742).w
0000765E 4E75                       		rts	
00007660                            ; ===========================================================================
00007660                            
00007660                            loc_703C:
00007660 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007666 6500                       		bcs.s	locret_704E
00007668 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
0000766E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007672                            
00007672                            locret_704E:
00007672 4E75                       		rts	
00007674                            ; ===========================================================================
00007674                            
00007674                            loc_7050:
00007674 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
0000767A 6500                       		bcs.s	locret_7072
0000767C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007682 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007688 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
0000768E 6500                       		bcs.s	locret_7072
00007690 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007696                            
00007696                            locret_7072:
00007696 4E75                       		rts	
00007698                            ; ===========================================================================
00007698                            
00007698                            Resize_MZ2:
00007698 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000769E 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000076A4 6500                       		bcs.s	locret_7088
000076A6 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000076AC                            
000076AC                            locret_7088:
000076AC 4E75                       		rts	
000076AE                            ; ===========================================================================
000076AE                            
000076AE                            Resize_MZ3:
000076AE 7000                       		moveq	#0,d0
000076B0 1038 F742                  		move.b	($FFFFF742).w,d0
000076B4 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000076B8 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000076BC                            ; ===========================================================================
000076BC 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000076BE 0000                       		dc.w Resize_MZ3end-off_7098
000076C0                            ; ===========================================================================
000076C0                            
000076C0                            Resize_MZ3boss:
000076C0 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000076C6 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000076CC 6500                       		bcs.s	locret_70E8
000076CE 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000076D4 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000076DA 6500                       		bcs.s	locret_70E8
000076DC 6100 0000                  		bsr.w	SingleObjLoad
000076E0 6600                       		bne.s	loc_70D0
000076E2 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000076E6 337C 19F0 0008             		move.w	#$19F0,8(a1)
000076EC 337C 022C 000C             		move.w	#$22C,$C(a1)
000076F2                            
000076F2                            loc_70D0:
000076F2 303C 008C                  		move.w	#$8C,d0
000076F6 6100 9CA0                  		bsr.w	PlaySound	; play boss music
000076FA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007700 5438 F742                  		addq.b	#2,($FFFFF742).w
00007704 7011                       		moveq	#$11,d0
00007706 6000 9E7A                  		bra.w	LoadPLC		; load boss patterns
0000770A                            ; ===========================================================================
0000770A                            
0000770A                            locret_70E8:
0000770A 4E75                       		rts	
0000770C                            ; ===========================================================================
0000770C                            
0000770C                            Resize_MZ3end:
0000770C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007712 4E75                       		rts	
00007714                            ; ===========================================================================
00007714                            ; ---------------------------------------------------------------------------
00007714                            ; Star Light Zone dynamic screen resizing
00007714                            ; ---------------------------------------------------------------------------
00007714                            
00007714                            Resize_SLZ:				; XREF: Resize_Index
00007714 7000                       		moveq	#0,d0
00007716 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000771A D040                       		add.w	d0,d0
0000771C 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007720 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007724                            ; ===========================================================================
00007724 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
00007726 0000                       		dc.w Resize_SLZ2-Resize_SLZx
00007728 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000772A                            ; ===========================================================================
0000772A                            
0000772A                            Resize_SLZ1:
0000772A 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
00007730 4E75                       		rts	
00007732                            
00007732                            Resize_SLZ2:
00007732 4E75                       		rts	
00007734                            ; ===========================================================================
00007734                            
00007734                            Resize_SLZ3:
00007734 7000                       		moveq	#0,d0
00007736 1038 F742                  		move.b	($FFFFF742).w,d0
0000773A 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000773E 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007742                            ; ===========================================================================
00007742 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007744 0000                       		dc.w Resize_SLZ3boss-off_7118
00007746 0000                       		dc.w Resize_SLZ3end-off_7118
00007748                            ; ===========================================================================
00007748                            
00007748                            Resize_SLZ3main:
00007748 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000774E 6500                       		bcs.s	locret_7130
00007750 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007756 5438 F742                  		addq.b	#2,($FFFFF742).w
0000775A                            
0000775A                            locret_7130:
0000775A 4E75                       		rts	
0000775C                            ; ===========================================================================
0000775C                            
0000775C                            Resize_SLZ3boss:
0000775C 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007762 6500                       		bcs.s	locret_715C
00007764 6100 0000                  		bsr.w	SingleObjLoad
00007768 6600                       		bne.s	loc_7144
0000776A 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000776E                            
0000776E                            loc_7144:
0000776E 303C 008C                  		move.w	#$8C,d0
00007772 6100 9C24                  		bsr.w	PlaySound	; play boss music
00007776 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000777C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007780 7011                       		moveq	#$11,d0
00007782 6000 9DFE                  		bra.w	LoadPLC		; load boss patterns
00007786                            ; ===========================================================================
00007786                            
00007786                            locret_715C:
00007786 4E75                       		rts	
00007788                            ; ===========================================================================
00007788                            
00007788                            Resize_SLZ3end:
00007788 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000778E 4E75                       		rts
00007790 4E75                       		rts
00007792                            ; ===========================================================================
00007792                            ; ---------------------------------------------------------------------------
00007792                            ; Spring Yard Zone dynamic screen resizing
00007792                            ; ---------------------------------------------------------------------------
00007792                            
00007792                            Resize_SYZ:				; XREF: Resize_Index
00007792 7000                       		moveq	#0,d0
00007794 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007798 D040                       		add.w	d0,d0
0000779A 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000779E 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000077A2                            ; ===========================================================================
000077A2 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000077A4 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000077A6 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000077A8                            ; ===========================================================================
000077A8                            
000077A8                            Resize_SYZ1:
000077A8 4E75                       		rts	
000077AA                            ; ===========================================================================
000077AA                            
000077AA                            Resize_SYZ2:
000077AA 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000077B0 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000077B6 6500                       		bcs.s	locret_71A2
000077B8 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000077BE 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000077C4 6500                       		bcs.s	locret_71A2
000077C6 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000077CC                            
000077CC                            locret_71A2:
000077CC 4E75                       		rts	
000077CE                            ; ===========================================================================
000077CE                            
000077CE                            Resize_SYZ3:
000077CE 7000                       		moveq	#0,d0
000077D0 1038 F742                  		move.b	($FFFFF742).w,d0
000077D4 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000077D8 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000077DC                            ; ===========================================================================
000077DC 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000077DE 0000                       		dc.w Resize_SYZ3boss-off_71B2
000077E0 0000                       		dc.w Resize_SYZ3end-off_71B2
000077E2                            ; ===========================================================================
000077E2                            
000077E2                            Resize_SYZ3main:
000077E2 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000077E8 6500                       		bcs.s	locret_71CE
000077EA 6100 0000                  		bsr.w	SingleObjLoad
000077EE 6600                       		bne.s	locret_71CE
000077F0 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000077F4 5438 F742                  		addq.b	#2,($FFFFF742).w
000077F8                            
000077F8                            locret_71CE:
000077F8 4E75                       		rts	
000077FA                            ; ===========================================================================
000077FA                            
000077FA                            Resize_SYZ3boss:
000077FA 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007800 6500                       		bcs.s	locret_7200
00007802 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007808 6100 0000                  		bsr.w	SingleObjLoad
0000780C 6600                       		bne.s	loc_71EC
0000780E 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007812 5438 F742                  		addq.b	#2,($FFFFF742).w
00007816                            
00007816                            loc_71EC:
00007816 303C 008C                  		move.w	#$8C,d0
0000781A 6100 9B7C                  		bsr.w	PlaySound	; play boss music
0000781E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007824 7011                       		moveq	#$11,d0
00007826 6000 9D5A                  		bra.w	LoadPLC		; load boss patterns
0000782A                            ; ===========================================================================
0000782A                            
0000782A                            locret_7200:
0000782A 4E75                       		rts	
0000782C                            ; ===========================================================================
0000782C                            
0000782C                            Resize_SYZ3end:
0000782C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007832 4E75                       		rts	
00007834                            ; ===========================================================================
00007834                            ; ---------------------------------------------------------------------------
00007834                            ; Scrap	Brain Zone dynamic screen resizing
00007834                            ; ---------------------------------------------------------------------------
00007834                            
00007834                            Resize_SBZ:				; XREF: Resize_Index
00007834 7000                       		moveq	#0,d0
00007836 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000783A D040                       		add.w	d0,d0
0000783C 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007840 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007844                            ; ===========================================================================
00007844 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007846 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007848 0000                       		dc.w Resize_FZ-Resize_SBZx
0000784A                            ; ===========================================================================
0000784A                            
0000784A                            Resize_SBZ1:
0000784A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007850 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007856 6500                       		bcs.s	locret_7242
00007858 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000785E 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007864 6500                       		bcs.s	locret_7242
00007866 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000786C                            
0000786C                            locret_7242:
0000786C 4E75                       		rts	
0000786E                            ; ===========================================================================
0000786E                            
0000786E                            Resize_SBZ2:
0000786E 7000                       		moveq	#0,d0
00007870 1038 F742                  		move.b	($FFFFF742).w,d0
00007874 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007878 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000787C                            ; ===========================================================================
0000787C 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000787E 0000                       		dc.w Resize_SBZ2boss-off_7252
00007880 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007882 0000                       		dc.w Resize_SBZ2end-off_7252
00007884                            ; ===========================================================================
00007884                            
00007884                            Resize_SBZ2main:
00007884 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
0000788A 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007890 6500                       		bcs.s	locret_727A
00007892 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007898 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000789E 6500                       		bcs.s	locret_727A
000078A0 5438 F742                  		addq.b	#2,($FFFFF742).w
000078A4                            
000078A4                            locret_727A:
000078A4 4E75                       		rts	
000078A6                            ; ===========================================================================
000078A6                            
000078A6                            Resize_SBZ2boss:
000078A6 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000078AC 6500                       		bcs.s	locret_7298
000078AE 6100 0000                  		bsr.w	SingleObjLoad
000078B2 6600                       		bne.s	locret_7298
000078B4 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000078B8 5438 F742                  		addq.b	#2,($FFFFF742).w
000078BC 701E                       		moveq	#$1E,d0
000078BE 6000 9CC2                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000078C2                            ; ===========================================================================
000078C2                            
000078C2                            locret_7298:
000078C2 4E75                       		rts	
000078C4                            ; ===========================================================================
000078C4                            
000078C4                            Resize_SBZ2boss2:
000078C4 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000078CA 6500                       		bcs.s	loc_72B6
000078CC 6100 0000                  		bsr.w	SingleObjLoad
000078D0 6600                       		bne.s	loc_72B0
000078D2 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000078D6 5438 F742                  		addq.b	#2,($FFFFF742).w
000078DA                            
000078DA                            loc_72B0:
000078DA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000078E0                            
000078E0                            loc_72B6:
000078E0 6000                       		bra.s	loc_72C2
000078E2                            ; ===========================================================================
000078E2                            
000078E2                            Resize_SBZ2end:
000078E2 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000078E8 6500                       		bcs.s	loc_72C2
000078EA 4E75                       		rts	
000078EC                            ; ===========================================================================
000078EC                            
000078EC                            loc_72C2:
000078EC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000078F2 4E75                       		rts	
000078F4                            ; ===========================================================================
000078F4                            
000078F4                            Resize_FZ:
000078F4 7000                       		moveq	#0,d0
000078F6 1038 F742                  		move.b	($FFFFF742).w,d0
000078FA 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000078FE 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007902                            ; ===========================================================================
00007902 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007906 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
0000790A 0000                       		dc.w Resize_FZend2-off_72D8
0000790C                            ; ===========================================================================
0000790C                            
0000790C                            Resize_FZmain:
0000790C 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007912 6500                       		bcs.s	loc_72F4
00007914 5438 F742                  		addq.b	#2,($FFFFF742).w
00007918 701F                       		moveq	#$1F,d0
0000791A 6100 9C66                  		bsr.w	LoadPLC		; load FZ boss patterns
0000791E                            
0000791E                            loc_72F4:
0000791E 60CC                       		bra.s	loc_72C2
00007920                            ; ===========================================================================
00007920                            
00007920                            Resize_FZboss:
00007920 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007926 6500                       		bcs.s	loc_7312
00007928 6100 0000                  		bsr.w	SingleObjLoad
0000792C 6600                       		bne.s	loc_7312
0000792E 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007932 5438 F742                  		addq.b	#2,($FFFFF742).w
00007936 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000793C                            
0000793C                            loc_7312:
0000793C 60AE                       		bra.s	loc_72C2
0000793E                            ; ===========================================================================
0000793E                            
0000793E                            Resize_FZend:
0000793E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007944 6500                       		bcs.s	loc_7320
00007946 5438 F742                  		addq.b	#2,($FFFFF742).w
0000794A                            
0000794A                            loc_7320:
0000794A 60A0                       		bra.s	loc_72C2
0000794C                            ; ===========================================================================
0000794C                            
0000794C                            locret_7322:
0000794C 4E75                       		rts	
0000794E                            ; ===========================================================================
0000794E                            
0000794E                            Resize_FZend2:
0000794E 609C                       		bra.s	loc_72C2
00007950                            ; ===========================================================================
00007950                            ; ---------------------------------------------------------------------------
00007950                            ; Ending sequence dynamic screen resizing (empty)
00007950                            ; ---------------------------------------------------------------------------
00007950                            
00007950                            Resize_Ending:				; XREF: Resize_Index
00007950 4E75                       		rts	
00007952                            ; ===========================================================================
00007952                            ; ---------------------------------------------------------------------------
00007952                            ; Object 11 - GHZ bridge
00007952                            ; ---------------------------------------------------------------------------
00007952                            
00007952                            Obj11:					; XREF: Obj_Index
00007952 7000                       		moveq	#0,d0
00007954 1028 0024                  		move.b	$24(a0),d0
00007958 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
0000795C 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007960                            ; ===========================================================================
00007960 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007964 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007968 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
0000796C                            ; ===========================================================================
0000796C                            
0000796C                            Obj11_Main:				; XREF: Obj11_Index
0000796C 5428 0024                  		addq.b	#2,$24(a0)
00007970 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007978 317C 438E 0002             		move.w	#$438E,2(a0)
0000797E 117C 0004 0001             		move.b	#4,1(a0)
00007984 117C 0003 0018             		move.b	#3,$18(a0)
0000798A 117C 0080 0019             		move.b	#$80,$19(a0)
00007990 3428 000C                  		move.w	$C(a0),d2
00007994 3628 0008                  		move.w	8(a0),d3
00007998 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
0000799A 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
0000799E 7200                       		moveq	#0,d1
000079A0 1212                       		move.b	(a2),d1		; copy a2 to d1
000079A2 14FC 0000                  		move.b	#0,(a2)+
000079A6 3001                       		move.w	d1,d0
000079A8 E248                       		lsr.w	#1,d0
000079AA E948                       		lsl.w	#4,d0
000079AC 9640                       		sub.w	d0,d3
000079AE 5501                       		subq.b	#2,d1
000079B0 6500                       		bcs.s	Obj11_Action
000079B2                            
000079B2                            Obj11_MakeBdg:
000079B2 6100 0000                  		bsr.w	SingleObjLoad
000079B6 6600                       		bne.s	Obj11_Action
000079B8 5228 0028                  		addq.b	#1,$28(a0)
000079BC B668 0008                  		cmp.w	8(a0),d3
000079C0 6600                       		bne.s	loc_73B8
000079C2 0643 0010                  		addi.w	#$10,d3
000079C6 3142 000C                  		move.w	d2,$C(a0)
000079CA 3142 003C                  		move.w	d2,$3C(a0)
000079CE 3A08                       		move.w	a0,d5
000079D0 0445 D000                  		subi.w	#-$3000,d5
000079D4 EC4D                       		lsr.w	#6,d5
000079D6 0245 007F                  		andi.w	#$7F,d5
000079DA 14C5                       		move.b	d5,(a2)+
000079DC 5228 0028                  		addq.b	#1,$28(a0)
000079E0                            
000079E0                            loc_73B8:				; XREF: ROM:00007398j
000079E0 3A09                       		move.w	a1,d5
000079E2 0445 D000                  		subi.w	#-$3000,d5
000079E6 EC4D                       		lsr.w	#6,d5
000079E8 0245 007F                  		andi.w	#$7F,d5
000079EC 14C5                       		move.b	d5,(a2)+
000079EE 137C 000A 0024             		move.b	#$A,$24(a1)
000079F4 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000079F6 3342 000C                  		move.w	d2,$C(a1)
000079FA 3342 003C                  		move.w	d2,$3C(a1)
000079FE 3343 0008                  		move.w	d3,8(a1)
00007A02 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007A0A 337C 438E 0002             		move.w	#$438E,2(a1)
00007A10 137C 0004 0001             		move.b	#4,1(a1)
00007A16 137C 0003 0018             		move.b	#3,$18(a1)
00007A1C 137C 0008 0019             		move.b	#8,$19(a1)
00007A22 0643 0010                  		addi.w	#$10,d3
00007A26 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007A2A                            
00007A2A                            Obj11_Action:				; XREF: Obj11_Index
00007A2A 6100                       		bsr.s	Obj11_Solid
00007A2C 4A28 003E                  		tst.b	$3E(a0)
00007A30 6700                       		beq.s	Obj11_Display
00007A32 5928 003E                  		subq.b	#4,$3E(a0)
00007A36 6100 0000                  		bsr.w	Obj11_Bend
00007A3A                            
00007A3A                            Obj11_Display:
00007A3A 6100 0000                  		bsr.w	DisplaySprite
00007A3E 6000 0000                  		bra.w	Obj11_ChkDel
00007A42                            
00007A42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A42                            
00007A42                            
00007A42                            Obj11_Solid:				; XREF: Obj11_Action
00007A42 7200                       		moveq	#0,d1
00007A44 1228 0028                  		move.b	$28(a0),d1
00007A48 E749                       		lsl.w	#3,d1
00007A4A 3401                       		move.w	d1,d2
00007A4C 5041                       		addq.w	#8,d1
00007A4E D442                       		add.w	d2,d2
00007A50 43F8 D000                  		lea	($FFFFD000).w,a1
00007A54 4A69 0012                  		tst.w	$12(a1)
00007A58 6B00 0000                  		bmi.w	locret_751E
00007A5C 3029 0008                  		move.w	8(a1),d0
00007A60 9068 0008                  		sub.w	8(a0),d0
00007A64 D041                       		add.w	d1,d0
00007A66 6B00 0000                  		bmi.w	locret_751E
00007A6A B042                       		cmp.w	d2,d0
00007A6C 6400 0000                  		bcc.w	locret_751E
00007A70 6000                       		bra.s	Platform2
00007A72                            ; End of function Obj11_Solid
00007A72                            
00007A72                            ; ---------------------------------------------------------------------------
00007A72                            ; Platform subroutine
00007A72                            ; ---------------------------------------------------------------------------
00007A72                            
00007A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A72                            
00007A72                            
00007A72                            PlatformObject:
00007A72 43F8 D000                  		lea	($FFFFD000).w,a1
00007A76 4A69 0012                  		tst.w	$12(a1)
00007A7A 6B00 0000                  		bmi.w	locret_751E
00007A7E 3029 0008                  		move.w	8(a1),d0
00007A82 9068 0008                  		sub.w	8(a0),d0
00007A86 D041                       		add.w	d1,d0
00007A88 6B00 0000                  		bmi.w	locret_751E
00007A8C D241                       		add.w	d1,d1
00007A8E B041                       		cmp.w	d1,d0
00007A90 6400 0000                  		bcc.w	locret_751E
00007A94                            
00007A94                            Platform2:
00007A94 3028 000C                  		move.w	$C(a0),d0
00007A98 5140                       		subq.w	#8,d0
00007A9A                            
00007A9A                            Platform3:
00007A9A 3429 000C                  		move.w	$C(a1),d2
00007A9E 1229 0016                  		move.b	$16(a1),d1
00007AA2 4881                       		ext.w	d1
00007AA4 D242                       		add.w	d2,d1
00007AA6 5841                       		addq.w	#4,d1
00007AA8 9041                       		sub.w	d1,d0
00007AAA 6200 0000                  		bhi.w	locret_751E
00007AAE 0C40 FFF0                  		cmpi.w	#-$10,d0
00007AB2 6500 0000                  		bcs.w	locret_751E
00007AB6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007ABA 6B00 0000                  		bmi.w	locret_751E
00007ABE 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007AC4 6400 0000                  		bcc.w	locret_751E
00007AC8 D440                       		add.w	d0,d2
00007ACA 5642                       		addq.w	#3,d2
00007ACC 3342 000C                  		move.w	d2,$C(a1)
00007AD0 5428 0024                  		addq.b	#2,$24(a0)
00007AD4                            
00007AD4                            loc_74AE:
00007AD4 0829 0003 0022             		btst	#3,$22(a1)
00007ADA 6700                       		beq.s	loc_74DC
00007ADC 7000                       		moveq	#0,d0
00007ADE 1029 003D                  		move.b	$3D(a1),d0
00007AE2 ED48                       		lsl.w	#6,d0
00007AE4 0680 00FF D000             		addi.l	#$FFD000,d0
00007AEA 2440                       		movea.l	d0,a2
00007AEC 08AA 0003 0022             		bclr	#3,$22(a2)
00007AF2 422A 0025                  		clr.b	$25(a2)
00007AF6 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007AFC 6600                       		bne.s	loc_74DC
00007AFE 552A 0024                  		subq.b	#2,$24(a2)
00007B02                            
00007B02                            loc_74DC:
00007B02 3008                       		move.w	a0,d0
00007B04 0440 D000                  		subi.w	#-$3000,d0
00007B08 EC48                       		lsr.w	#6,d0
00007B0A 0240 007F                  		andi.w	#$7F,d0
00007B0E 1340 003D                  		move.b	d0,$3D(a1)
00007B12 137C 0000 0026             		move.b	#0,$26(a1)
00007B18 337C 0000 0012             		move.w	#0,$12(a1)
00007B1E 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007B24 0829 0001 0022             		btst	#1,$22(a1)
00007B2A 6700                       		beq.s	loc_7512
00007B2C 2F08                       		move.l	a0,-(sp)
00007B2E 2049                       		movea.l	a1,a0
00007B30 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007B36 205F                       		movea.l	(sp)+,a0
00007B38                            
00007B38                            loc_7512:
00007B38 08E9 0003 0022             		bset	#3,$22(a1)
00007B3E 08E8 0003 0022             		bset	#3,$22(a0)
00007B44                            
00007B44                            locret_751E:
00007B44 4E75                       		rts	
00007B46                            ; End of function PlatformObject
00007B46                            
00007B46                            ; ---------------------------------------------------------------------------
00007B46                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007B46                            ; ---------------------------------------------------------------------------
00007B46                            
00007B46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B46                            
00007B46                            
00007B46                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007B46 43F8 D000                  		lea	($FFFFD000).w,a1
00007B4A 4A69 0012                  		tst.w	$12(a1)
00007B4E 6B00 FFF4                  		bmi.w	locret_751E
00007B52 3029 0008                  		move.w	8(a1),d0
00007B56 9068 0008                  		sub.w	8(a0),d0
00007B5A D041                       		add.w	d1,d0
00007B5C 6BE6                       		bmi.s	locret_751E
00007B5E D241                       		add.w	d1,d1
00007B60 B041                       		cmp.w	d1,d0
00007B62 64E0                       		bcc.s	locret_751E
00007B64 0828 0000 0001             		btst	#0,1(a0)
00007B6A 6700                       		beq.s	loc_754A
00007B6C 4640                       		not.w	d0
00007B6E D041                       		add.w	d1,d0
00007B70                            
00007B70                            loc_754A:
00007B70 E248                       		lsr.w	#1,d0
00007B72 7600                       		moveq	#0,d3
00007B74 1632 0000                  		move.b	(a2,d0.w),d3
00007B78 3028 000C                  		move.w	$C(a0),d0
00007B7C 9043                       		sub.w	d3,d0
00007B7E 6000 FF1A                  		bra.w	Platform3
00007B82                            ; End of function SlopeObject
00007B82                            
00007B82                            
00007B82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B82                            
00007B82                            
00007B82                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007B82 43F8 D000                  		lea	($FFFFD000).w,a1
00007B86 4A69 0012                  		tst.w	$12(a1)
00007B8A 6B00 FFB8                  		bmi.w	locret_751E
00007B8E 3029 0008                  		move.w	8(a1),d0
00007B92 9068 0008                  		sub.w	8(a0),d0
00007B96 D041                       		add.w	d1,d0
00007B98 6B00 FFAA                  		bmi.w	locret_751E
00007B9C D241                       		add.w	d1,d1
00007B9E B041                       		cmp.w	d1,d0
00007BA0 6400 FFA2                  		bcc.w	locret_751E
00007BA4 3028 000C                  		move.w	$C(a0),d0
00007BA8 9043                       		sub.w	d3,d0
00007BAA 6000 FEEE                  		bra.w	Platform3
00007BAE                            ; End of function Obj15_Solid
00007BAE                            
00007BAE                            ; ===========================================================================
00007BAE                            
00007BAE                            Obj11_Action2:				; XREF: Obj11_Index
00007BAE 6100                       		bsr.s	Obj11_WalkOff
00007BB0 6100 0000                  		bsr.w	DisplaySprite
00007BB4 6000 0000                  		bra.w	Obj11_ChkDel
00007BB8                            
00007BB8                            ; ---------------------------------------------------------------------------
00007BB8                            ; Subroutine allowing Sonic to walk off a bridge
00007BB8                            ; ---------------------------------------------------------------------------
00007BB8                            
00007BB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BB8                            
00007BB8                            
00007BB8                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007BB8 7200                       		moveq	#0,d1
00007BBA 1228 0028                  		move.b	$28(a0),d1
00007BBE E749                       		lsl.w	#3,d1
00007BC0 3401                       		move.w	d1,d2
00007BC2 5041                       		addq.w	#8,d1
00007BC4 6100                       		bsr.s	ExitPlatform2
00007BC6 6400                       		bcc.s	locret_75BE
00007BC8 E848                       		lsr.w	#4,d0
00007BCA 1140 003F                  		move.b	d0,$3F(a0)
00007BCE 1028 003E                  		move.b	$3E(a0),d0
00007BD2 0C00 0040                  		cmpi.b	#$40,d0
00007BD6 6700                       		beq.s	loc_75B6
00007BD8 5828 003E                  		addq.b	#4,$3E(a0)
00007BDC                            
00007BDC                            loc_75B6:
00007BDC 6100 0000                  		bsr.w	Obj11_Bend
00007BE0 6100 0000                  		bsr.w	Obj11_MoveSonic
00007BE4                            
00007BE4                            locret_75BE:
00007BE4 4E75                       		rts	
00007BE6                            ; End of function Obj11_WalkOff
00007BE6                            
00007BE6                            ; ---------------------------------------------------------------------------
00007BE6                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007BE6                            ; ---------------------------------------------------------------------------
00007BE6                            
00007BE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BE6                            
00007BE6                            
00007BE6                            ExitPlatform:
00007BE6 3401                       		move.w	d1,d2
00007BE8                            
00007BE8                            ExitPlatform2:
00007BE8 D442                       		add.w	d2,d2
00007BEA 43F8 D000                  		lea	($FFFFD000).w,a1
00007BEE 0829 0001 0022             		btst	#1,$22(a1)
00007BF4 6600                       		bne.s	loc_75E0
00007BF6 3029 0008                  		move.w	8(a1),d0
00007BFA 9068 0008                  		sub.w	8(a0),d0
00007BFE D041                       		add.w	d1,d0
00007C00 6B00                       		bmi.s	loc_75E0
00007C02 B042                       		cmp.w	d2,d0
00007C04 6500                       		bcs.s	locret_75F2
00007C06                            
00007C06                            loc_75E0:
00007C06 08A9 0003 0022             		bclr	#3,$22(a1)
00007C0C 117C 0002 0024             		move.b	#2,$24(a0)
00007C12 08A8 0003 0022             		bclr	#3,$22(a0)
00007C18                            
00007C18                            locret_75F2:
00007C18 4E75                       		rts	
00007C1A                            ; End of function ExitPlatform
00007C1A                            
00007C1A                            
00007C1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C1A                            
00007C1A                            
00007C1A                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007C1A 7000                       		moveq	#0,d0
00007C1C 1028 003F                  		move.b	$3F(a0),d0
00007C20 1030 0029                  		move.b	$29(a0,d0.w),d0
00007C24 ED48                       		lsl.w	#6,d0
00007C26 0680 00FF D000             		addi.l	#$FFD000,d0
00007C2C 2440                       		movea.l	d0,a2
00007C2E 43F8 D000                  		lea	($FFFFD000).w,a1
00007C32 302A 000C                  		move.w	$C(a2),d0
00007C36 5140                       		subq.w	#8,d0
00007C38 7200                       		moveq	#0,d1
00007C3A 1229 0016                  		move.b	$16(a1),d1
00007C3E 9041                       		sub.w	d1,d0
00007C40 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007C44 4E75                       		rts	
00007C46                            ; End of function Obj11_MoveSonic
00007C46                            
00007C46                            
00007C46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C46                            
00007C46                            
00007C46                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007C46 1028 003E                  		move.b	$3E(a0),d0
00007C4A 6100 AEF4                  		bsr.w	CalcSine
00007C4E 3800                       		move.w	d0,d4
00007C50 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007C56 7000                       		moveq	#0,d0
00007C58 1028 0028                  		move.b	$28(a0),d0
00007C5C E948                       		lsl.w	#4,d0
00007C5E 7600                       		moveq	#0,d3
00007C60 1628 003F                  		move.b	$3F(a0),d3
00007C64 3403                       		move.w	d3,d2
00007C66 D640                       		add.w	d0,d3
00007C68 7A00                       		moveq	#0,d5
00007C6A 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007C70 1A35 3000                  		move.b	(a5,d3.w),d5
00007C74 0243 000F                  		andi.w	#$F,d3
00007C78 E94B                       		lsl.w	#4,d3
00007C7A 47F4 3000                  		lea	(a4,d3.w),a3
00007C7E 45E8 0029                  		lea	$29(a0),a2
00007C82                            
00007C82                            loc_765C:
00007C82 7000                       		moveq	#0,d0
00007C84 101A                       		move.b	(a2)+,d0
00007C86 ED48                       		lsl.w	#6,d0
00007C88 0680 00FF D000             		addi.l	#$FFD000,d0
00007C8E 2240                       		movea.l	d0,a1
00007C90 7000                       		moveq	#0,d0
00007C92 101B                       		move.b	(a3)+,d0
00007C94 5240                       		addq.w	#1,d0
00007C96 C0C5                       		mulu.w	d5,d0
00007C98 C0C4                       		mulu.w	d4,d0
00007C9A 4840                       		swap	d0
00007C9C D069 003C                  		add.w	$3C(a1),d0
00007CA0 3340 000C                  		move.w	d0,$C(a1)
00007CA4 51CA FFDC                  		dbf	d2,loc_765C
00007CA8 7000                       		moveq	#0,d0
00007CAA 1028 0028                  		move.b	$28(a0),d0
00007CAE 7600                       		moveq	#0,d3
00007CB0 1628 003F                  		move.b	$3F(a0),d3
00007CB4 5203                       		addq.b	#1,d3
00007CB6 9600                       		sub.b	d0,d3
00007CB8 4403                       		neg.b	d3
00007CBA 6B00                       		bmi.s	locret_76CA
00007CBC 3403                       		move.w	d3,d2
00007CBE E94B                       		lsl.w	#4,d3
00007CC0 47F4 3000                  		lea	(a4,d3.w),a3
00007CC4 D6C2                       		adda.w	d2,a3
00007CC6 5342                       		subq.w	#1,d2
00007CC8 6500                       		bcs.s	locret_76CA
00007CCA                            
00007CCA                            loc_76A4:
00007CCA 7000                       		moveq	#0,d0
00007CCC 101A                       		move.b	(a2)+,d0
00007CCE ED48                       		lsl.w	#6,d0
00007CD0 0680 00FF D000             		addi.l	#$FFD000,d0
00007CD6 2240                       		movea.l	d0,a1
00007CD8 7000                       		moveq	#0,d0
00007CDA 1023                       		move.b	-(a3),d0
00007CDC 5240                       		addq.w	#1,d0
00007CDE C0C5                       		mulu.w	d5,d0
00007CE0 C0C4                       		mulu.w	d4,d0
00007CE2 4840                       		swap	d0
00007CE4 D069 003C                  		add.w	$3C(a1),d0
00007CE8 3340 000C                  		move.w	d0,$C(a1)
00007CEC 51CA FFDC                  		dbf	d2,loc_76A4
00007CF0                            
00007CF0                            locret_76CA:
00007CF0 4E75                       		rts	
00007CF2                            ; End of function Obj11_Bend
00007CF2                            
00007CF2                            ; ===========================================================================
00007CF2                            ; ---------------------------------------------------------------------------
00007CF2                            ; GHZ bridge-bending data
00007CF2                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007CF2                            ; ---------------------------------------------------------------------------
00007CF2                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007E02                            		even
00007E02                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007F02                            		even
00007F02                            
00007F02                            ; ===========================================================================
00007F02                            
00007F02                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007F02 3028 0008                  		move.w	8(a0),d0
00007F06 0240 FF80                  		andi.w	#$FF80,d0
00007F0A 3238 F700                  		move.w	($FFFFF700).w,d1
00007F0E 0441 0080                  		subi.w	#$80,d1
00007F12 0241 FF80                  		andi.w	#$FF80,d1
00007F16 9041                       		sub.w	d1,d0
00007F18 0C40 0280                  		cmpi.w	#$280,d0
00007F1C 6200 0000                  		bhi.w	Obj11_DelAll
00007F20 4E75                       		rts	
00007F22                            ; ===========================================================================
00007F22                            
00007F22                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007F22 7400                       		moveq	#0,d2
00007F24 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007F28 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007F2A 5302                       		subq.b	#1,d2		; subtract 1
00007F2C 6500                       		bcs.s	Obj11_Delete
00007F2E                            
00007F2E                            Obj11_DelLoop:
00007F2E 7000                       		moveq	#0,d0
00007F30 101A                       		move.b	(a2)+,d0
00007F32 ED48                       		lsl.w	#6,d0
00007F34 0680 00FF D000             		addi.l	#$FFD000,d0
00007F3A 2240                       		movea.l	d0,a1
00007F3C B048                       		cmp.w	a0,d0
00007F3E 6700                       		beq.s	loc_791E
00007F40 6100 0000                  		bsr.w	DeleteObject2
00007F44                            
00007F44                            loc_791E:
00007F44 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007F48                            
00007F48                            Obj11_Delete:
00007F48 6100 0000                  		bsr.w	DeleteObject
00007F4C 4E75                       		rts	
00007F4E                            ; ===========================================================================
00007F4E                            
00007F4E                            Obj11_Delete2:				; XREF: Obj11_Index
00007F4E 6100 0000                  		bsr.w	DeleteObject
00007F52 4E75                       		rts	
00007F54                            ; ===========================================================================
00007F54                            
00007F54                            Obj11_Display2:				; XREF: Obj11_Index
00007F54 6100 0000                  		bsr.w	DisplaySprite
00007F58 4E75                       		rts	
00007F5A                            ; ===========================================================================
00007F5A                            ; ---------------------------------------------------------------------------
00007F5A                            ; Sprite mappings - GHZ	bridge
00007F5A                            ; ---------------------------------------------------------------------------
00007F5A                            Map_obj11:
00007F5A                            	include "_maps\obj11.asm"
00007F5A                            ; ---------------------------------------------------------------------------
00007F5A                            ; Sprite mappings - GHZ	bridge
00007F5A                            ; ---------------------------------------------------------------------------
00007F5A 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007F5E 0000                       		dc.w byte_794B-Map_obj11
00007F60 01                         byte_793A:	dc.b 1
00007F61 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007F66 02                         byte_7940:	dc.b 2
00007F67 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007F6C 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007F71 01                         byte_794B:	dc.b 1
00007F72 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007F78 00                         		even
00007F78 00                         		even
00007F78                            
00007F78                            ; ===========================================================================
00007F78                            ; ---------------------------------------------------------------------------
00007F78                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007F78                            ;	    - spiked ball on a chain (SBZ)
00007F78                            ; ---------------------------------------------------------------------------
00007F78                            
00007F78                            Obj15:					; XREF: Obj_Index
00007F78 7000                       		moveq	#0,d0
00007F7A 1028 0024                  		move.b	$24(a0),d0
00007F7E 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007F82 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007F86                            ; ===========================================================================
00007F86 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007F8A 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007F8E 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007F92 0000                       		dc.w Obj15_Action-Obj15_Index
00007F94                            ; ===========================================================================
00007F94                            
00007F94                            Obj15_Main:				; XREF: Obj15_Index
00007F94 5428 0024                  		addq.b	#2,$24(a0)
00007F98 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007FA0 317C 4380 0002             		move.w	#$4380,2(a0)
00007FA6 117C 0004 0001             		move.b	#4,1(a0)
00007FAC 117C 0003 0018             		move.b	#3,$18(a0)
00007FB2 117C 0018 0019             		move.b	#$18,$19(a0)
00007FB8 117C 0008 0016             		move.b	#8,$16(a0)
00007FBE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007FC4 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007FCA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007FD0 6600                       		bne.s	Obj15_NotSLZ
00007FD2 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007FDA 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007FE0 117C 0020 0019             		move.b	#$20,$19(a0)
00007FE6 117C 0010 0016             		move.b	#$10,$16(a0)
00007FEC 117C 0099 0020             		move.b	#$99,$20(a0)
00007FF2                            
00007FF2                            Obj15_NotSLZ:
00007FF2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007FF8 6600                       		bne.s	Obj15_SetLength
00007FFA 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008002 317C 0391 0002             		move.w	#$391,2(a0)
00008008 117C 0018 0019             		move.b	#$18,$19(a0)
0000800E 117C 0018 0016             		move.b	#$18,$16(a0)
00008014 117C 0086 0020             		move.b	#$86,$20(a0)
0000801A 117C 000C 0024             		move.b	#$C,$24(a0)
00008020                            
00008020                            Obj15_SetLength:
00008020 1810                       		move.b	0(a0),d4
00008022 7200                       		moveq	#0,d1
00008024 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008028 1212                       		move.b	(a2),d1		; move a2 to d1
0000802A 3F01                       		move.w	d1,-(sp)
0000802C 0241 000F                  		andi.w	#$F,d1
00008030 14FC 0000                  		move.b	#0,(a2)+
00008034 3601                       		move.w	d1,d3
00008036 E94B                       		lsl.w	#4,d3
00008038 5003                       		addq.b	#8,d3
0000803A 1143 003C                  		move.b	d3,$3C(a0)
0000803E 5103                       		subq.b	#8,d3
00008040 4A28 001A                  		tst.b	$1A(a0)
00008044 6700                       		beq.s	Obj15_MakeChain
00008046 5003                       		addq.b	#8,d3
00008048 5341                       		subq.w	#1,d1
0000804A                            
0000804A                            Obj15_MakeChain:
0000804A 6100 0000                  		bsr.w	SingleObjLoad
0000804E 6600                       		bne.s	loc_7A92
00008050 5228 0028                  		addq.b	#1,$28(a0)
00008054 3A09                       		move.w	a1,d5
00008056 0445 D000                  		subi.w	#-$3000,d5
0000805A EC4D                       		lsr.w	#6,d5
0000805C 0245 007F                  		andi.w	#$7F,d5
00008060 14C5                       		move.b	d5,(a2)+
00008062 137C 000A 0024             		move.b	#$A,$24(a1)
00008068 1284                       		move.b	d4,0(a1)	; load swinging	object
0000806A 2368 0004 0004             		move.l	4(a0),4(a1)
00008070 3368 0002 0002             		move.w	2(a0),2(a1)
00008076 08A9 0006 0002             		bclr	#6,2(a1)
0000807C 137C 0004 0001             		move.b	#4,1(a1)
00008082 137C 0004 0018             		move.b	#4,$18(a1)
00008088 137C 0008 0019             		move.b	#8,$19(a1)
0000808E 137C 0001 001A             		move.b	#1,$1A(a1)
00008094 1343 003C                  		move.b	d3,$3C(a1)
00008098 0403 0010                  		subi.b	#$10,d3
0000809C 6400                       		bcc.s	loc_7A8E
0000809E 137C 0002 001A             		move.b	#2,$1A(a1)
000080A4 137C 0003 0018             		move.b	#3,$18(a1)
000080AA 08E9 0006 0002             		bset	#6,2(a1)
000080B0                            
000080B0                            loc_7A8E:
000080B0 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
000080B4                            
000080B4                            loc_7A92:
000080B4 3A08                       		move.w	a0,d5
000080B6 0445 D000                  		subi.w	#-$3000,d5
000080BA EC4D                       		lsr.w	#6,d5
000080BC 0245 007F                  		andi.w	#$7F,d5
000080C0 14C5                       		move.b	d5,(a2)+
000080C2 317C 4080 0026             		move.w	#$4080,$26(a0)
000080C8 317C FE00 003E             		move.w	#-$200,$3E(a0)
000080CE 321F                       		move.w	(sp)+,d1
000080D0 0801 0004                  		btst	#4,d1		; is object type $8X ?
000080D4 6700                       		beq.s	loc_7AD4	; if not, branch
000080D6 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000080DE 317C 43AA 0002             		move.w	#$43AA,2(a0)
000080E4 117C 0001 001A             		move.b	#1,$1A(a0)
000080EA 117C 0002 0018             		move.b	#2,$18(a0)
000080F0 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
000080F6                            
000080F6                            loc_7AD4:
000080F6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
000080FC 6700                       		beq.s	Obj15_Action	; if yes, branch
000080FE                            
000080FE                            Obj15_SetSolid:				; XREF: Obj15_Index
000080FE 7200                       		moveq	#0,d1
00008100 1228 0019                  		move.b	$19(a0),d1
00008104 7600                       		moveq	#0,d3
00008106 1628 0016                  		move.b	$16(a0),d3
0000810A 6100 FA76                  		bsr.w	Obj15_Solid
0000810E                            
0000810E                            Obj15_Action:				; XREF: Obj15_Index
0000810E 6100 0000                  		bsr.w	Obj15_Move
00008112 6100 0000                  		bsr.w	DisplaySprite
00008116 6000 0000                  		bra.w	Obj15_ChkDel
0000811A                            ; ===========================================================================
0000811A                            
0000811A                            Obj15_Action2:				; XREF: Obj15_Index
0000811A 7200                       		moveq	#0,d1
0000811C 1228 0019                  		move.b	$19(a0),d1
00008120 6100 FAC4                  		bsr.w	ExitPlatform
00008124 3F28 0008                  		move.w	8(a0),-(sp)
00008128 6100 0000                  		bsr.w	Obj15_Move
0000812C 341F                       		move.w	(sp)+,d2
0000812E 7600                       		moveq	#0,d3
00008130 1628 0016                  		move.b	$16(a0),d3
00008134 5203                       		addq.b	#1,d3
00008136 6100 0000                  		bsr.w	MvSonicOnPtfm
0000813A 6100 0000                  		bsr.w	DisplaySprite
0000813E 6000 0000                  		bra.w	Obj15_ChkDel
00008142                            
00008142 4E75                       		rts
00008144                            
00008144                            ; ---------------------------------------------------------------------------
00008144                            ; Subroutine to	change Sonic's position with a platform
00008144                            ; ---------------------------------------------------------------------------
00008144                            
00008144                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008144                            
00008144                            
00008144                            MvSonicOnPtfm:
00008144 43F8 D000                  		lea	($FFFFD000).w,a1
00008148 3028 000C                  		move.w	$C(a0),d0
0000814C 9043                       		sub.w	d3,d0
0000814E 6000                       		bra.s	MvSonic2
00008150                            ; End of function MvSonicOnPtfm
00008150                            
00008150                            ; ---------------------------------------------------------------------------
00008150                            ; Subroutine to	change Sonic's position with a platform
00008150                            ; ---------------------------------------------------------------------------
00008150                            
00008150                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008150                            
00008150                            
00008150                            MvSonicOnPtfm2:
00008150 43F8 D000                  		lea	($FFFFD000).w,a1
00008154 3028 000C                  		move.w	$C(a0),d0
00008158 0440 0009                  		subi.w	#9,d0
0000815C                            
0000815C                            MvSonic2:
0000815C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008160 6B00                       		bmi.s	locret_7B62
00008162 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008168 6400                       		bcc.s	locret_7B62
0000816A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000816E 6600                       		bne.s	locret_7B62
00008170 7200                       		moveq	#0,d1
00008172 1229 0016                  		move.b	$16(a1),d1
00008176 9041                       		sub.w	d1,d0
00008178 3340 000C                  		move.w	d0,$C(a1)
0000817C 9468 0008                  		sub.w	8(a0),d2
00008180 9569 0008                  		sub.w	d2,8(a1)
00008184                            
00008184                            locret_7B62:
00008184 4E75                       		rts	
00008186                            ; End of function MvSonicOnPtfm2
00008186                            
00008186                            
00008186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008186                            
00008186                            
00008186                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008186 1038 FE78                  		move.b	($FFFFFE78).w,d0
0000818A 323C 0080                  		move.w	#$80,d1
0000818E 0828 0000 0022             		btst	#0,$22(a0)
00008194 6700                       		beq.s	loc_7B78
00008196 4440                       		neg.w	d0
00008198 D041                       		add.w	d1,d0
0000819A                            
0000819A                            loc_7B78:
0000819A 6000                       		bra.s	Obj15_Move2
0000819C                            ; End of function Obj15_Move
0000819C                            
0000819C                            
0000819C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000819C                            
0000819C                            
0000819C                            Obj48_Move:				; XREF: Obj48_Display2
0000819C 4A28 003D                  		tst.b	$3D(a0)
000081A0 6600                       		bne.s	loc_7B9C
000081A2 3028 003E                  		move.w	$3E(a0),d0
000081A6 5040                       		addq.w	#8,d0
000081A8 3140 003E                  		move.w	d0,$3E(a0)
000081AC D168 0026                  		add.w	d0,$26(a0)
000081B0 0C40 0200                  		cmpi.w	#$200,d0
000081B4 6600                       		bne.s	loc_7BB6
000081B6 117C 0001 003D             		move.b	#1,$3D(a0)
000081BC 6000                       		bra.s	loc_7BB6
000081BE                            ; ===========================================================================
000081BE                            
000081BE                            loc_7B9C:
000081BE 3028 003E                  		move.w	$3E(a0),d0
000081C2 5140                       		subq.w	#8,d0
000081C4 3140 003E                  		move.w	d0,$3E(a0)
000081C8 D168 0026                  		add.w	d0,$26(a0)
000081CC 0C40 FE00                  		cmpi.w	#-$200,d0
000081D0 6600                       		bne.s	loc_7BB6
000081D2 117C 0000 003D             		move.b	#0,$3D(a0)
000081D8                            
000081D8                            loc_7BB6:
000081D8 1028 0026                  		move.b	$26(a0),d0
000081DC                            ; End of function Obj48_Move
000081DC                            
000081DC                            
000081DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081DC                            
000081DC                            
000081DC                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
000081DC 6100 A962                  		bsr.w	CalcSine
000081E0 3428 0038                  		move.w	$38(a0),d2
000081E4 3628 003A                  		move.w	$3A(a0),d3
000081E8 45E8 0028                  		lea	$28(a0),a2
000081EC 7C00                       		moveq	#0,d6
000081EE 1C1A                       		move.b	(a2)+,d6
000081F0                            
000081F0                            loc_7BCE:
000081F0 7800                       		moveq	#0,d4
000081F2 181A                       		move.b	(a2)+,d4
000081F4 ED4C                       		lsl.w	#6,d4
000081F6 0684 00FF D000             		addi.l	#$FFD000,d4
000081FC 2244                       		movea.l	d4,a1
000081FE 7800                       		moveq	#0,d4
00008200 1829 003C                  		move.b	$3C(a1),d4
00008204 2A04                       		move.l	d4,d5
00008206 C9C0                       		muls.w	d0,d4
00008208 E084                       		asr.l	#8,d4
0000820A CBC1                       		muls.w	d1,d5
0000820C E085                       		asr.l	#8,d5
0000820E D842                       		add.w	d2,d4
00008210 DA43                       		add.w	d3,d5
00008212 3344 000C                  		move.w	d4,$C(a1)
00008216 3345 0008                  		move.w	d5,8(a1)
0000821A 51CE FFD4                  		dbf	d6,loc_7BCE
0000821E 4E75                       		rts	
00008220                            ; End of function Obj15_Move2
00008220                            
00008220                            ; ===========================================================================
00008220                            
00008220                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008220 3028 003A                  		move.w	$3A(a0),d0
00008224 0240 FF80                  		andi.w	#$FF80,d0
00008228 3238 F700                  		move.w	($FFFFF700).w,d1
0000822C 0441 0080                  		subi.w	#$80,d1
00008230 0241 FF80                  		andi.w	#$FF80,d1
00008234 9041                       		sub.w	d1,d0
00008236 0C40 0280                  		cmpi.w	#$280,d0
0000823A 6200 0000                  		bhi.w	Obj15_DelAll
0000823E 4E75                       		rts	
00008240                            ; ===========================================================================
00008240                            
00008240                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008240 7400                       		moveq	#0,d2
00008242 45E8 0028                  		lea	$28(a0),a2
00008246 141A                       		move.b	(a2)+,d2
00008248                            
00008248                            Obj15_DelLoop:
00008248 7000                       		moveq	#0,d0
0000824A 101A                       		move.b	(a2)+,d0
0000824C ED48                       		lsl.w	#6,d0
0000824E 0680 00FF D000             		addi.l	#$FFD000,d0
00008254 2240                       		movea.l	d0,a1
00008256 6100 0000                  		bsr.w	DeleteObject2
0000825A 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000825E 4E75                       		rts	
00008260                            ; ===========================================================================
00008260                            
00008260                            Obj15_Delete:				; XREF: Obj15_Index
00008260 6100 0000                  		bsr.w	DeleteObject
00008264 4E75                       		rts	
00008266                            ; ===========================================================================
00008266                            
00008266                            Obj15_Display:				; XREF: Obj15_Index
00008266 6000 0000                  		bra.w	DisplaySprite
0000826A                            ; ===========================================================================
0000826A                            ; ---------------------------------------------------------------------------
0000826A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000826A                            ; ---------------------------------------------------------------------------
0000826A                            Map_obj15:
0000826A                            	include "_maps\obj15ghz.asm"
0000826A                            ; ---------------------------------------------------------------------------
0000826A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000826A                            ; ---------------------------------------------------------------------------
0000826A 0000                       		dc.w byte_7C4E-Map_obj15
0000826C 0000                       		dc.w byte_7C59-Map_obj15
0000826E 0000                       		dc.w byte_7C5F-Map_obj15
00008270 02                         byte_7C4E:	dc.b 2
00008271 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008276 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000827B 01                         byte_7C59:	dc.b 1
0000827C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008281 01                         byte_7C5F:	dc.b 1
00008282 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008288 00                         		even
00008288 00                         		even
00008288                            
00008288                            ; ---------------------------------------------------------------------------
00008288                            ; Sprite mappings - SLZ	swinging platforms
00008288                            ; ---------------------------------------------------------------------------
00008288                            Map_obj15a:
00008288                            	include "_maps\obj15slz.asm"
00008288                            ; ---------------------------------------------------------------------------
00008288                            ; Sprite mappings - SLZ	swinging platforms
00008288                            ; ---------------------------------------------------------------------------
00008288 0000                       		dc.w byte_7C6C-Map_obj15a
0000828A 0000                       		dc.w byte_7C95-Map_obj15a
0000828C 0000                       		dc.w byte_7C9B-Map_obj15a
0000828E 08                         byte_7C6C:	dc.b 8
0000828F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008294 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008299 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
0000829E F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000082A3 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000082A8 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000082AD 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000082B2 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000082B7 01                         byte_7C95:	dc.b 1
000082B8 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000082BD 01                         byte_7C9B:	dc.b 1
000082BE F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000082C4 00                         		even
000082C4 00                         		even
000082C4                            
000082C4                            ; ===========================================================================
000082C4                            ; ---------------------------------------------------------------------------
000082C4                            ; Object 17 - helix of spikes on a pole	(GHZ)
000082C4                            ; ---------------------------------------------------------------------------
000082C4                            
000082C4                            Obj17:					; XREF: Obj_Index
000082C4 7000                       		moveq	#0,d0
000082C6 1028 0024                  		move.b	$24(a0),d0
000082CA 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000082CE 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000082D2                            ; ===========================================================================
000082D2 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
000082D4 0000                       		dc.w Obj17_Action-Obj17_Index
000082D6 0000                       		dc.w Obj17_Action-Obj17_Index
000082D8 0000                       		dc.w Obj17_Delete-Obj17_Index
000082DA 0000                       		dc.w Obj17_Display-Obj17_Index
000082DC                            ; ===========================================================================
000082DC                            
000082DC                            Obj17_Main:				; XREF: Obj17_Index
000082DC 5428 0024                  		addq.b	#2,$24(a0)
000082E0 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
000082E8 317C 4398 0002             		move.w	#$4398,2(a0)
000082EE 117C 0007 0022             		move.b	#7,$22(a0)
000082F4 117C 0004 0001             		move.b	#4,1(a0)
000082FA 117C 0003 0018             		move.b	#3,$18(a0)
00008300 117C 0008 0019             		move.b	#8,$19(a0)
00008306 3428 000C                  		move.w	$C(a0),d2
0000830A 3628 0008                  		move.w	8(a0),d3
0000830E 1810                       		move.b	0(a0),d4
00008310 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008314 7200                       		moveq	#0,d1
00008316 1212                       		move.b	(a2),d1		; move a2 to d1
00008318 14FC 0000                  		move.b	#0,(a2)+
0000831C 3001                       		move.w	d1,d0
0000831E E248                       		lsr.w	#1,d0
00008320 E948                       		lsl.w	#4,d0
00008322 9640                       		sub.w	d0,d3
00008324 5501                       		subq.b	#2,d1
00008326 6500                       		bcs.s	Obj17_Action
00008328 7C00                       		moveq	#0,d6
0000832A                            
0000832A                            Obj17_MakeHelix:
0000832A 6100 0000                  		bsr.w	SingleObjLoad
0000832E 6600                       		bne.s	Obj17_Action
00008330 5228 0028                  		addq.b	#1,$28(a0)
00008334 3A09                       		move.w	a1,d5
00008336 0445 D000                  		subi.w	#$D000,d5
0000833A EC4D                       		lsr.w	#6,d5
0000833C 0245 007F                  		andi.w	#$7F,d5
00008340 14C5                       		move.b	d5,(a2)+
00008342 137C 0008 0024             		move.b	#8,$24(a1)
00008348 1284                       		move.b	d4,0(a1)
0000834A 3342 000C                  		move.w	d2,$C(a1)
0000834E 3343 0008                  		move.w	d3,8(a1)
00008352 2368 0004 0004             		move.l	4(a0),4(a1)
00008358 337C 4398 0002             		move.w	#$4398,2(a1)
0000835E 137C 0004 0001             		move.b	#4,1(a1)
00008364 137C 0003 0018             		move.b	#3,$18(a1)
0000836A 137C 0008 0019             		move.b	#8,$19(a1)
00008370 1346 003E                  		move.b	d6,$3E(a1)
00008374 5206                       		addq.b	#1,d6
00008376 0206 0007                  		andi.b	#7,d6
0000837A 0643 0010                  		addi.w	#$10,d3
0000837E B668 0008                  		cmp.w	8(a0),d3
00008382 6600                       		bne.s	loc_7D78
00008384 1146 003E                  		move.b	d6,$3E(a0)
00008388 5206                       		addq.b	#1,d6
0000838A 0206 0007                  		andi.b	#7,d6
0000838E 0643 0010                  		addi.w	#$10,d3
00008392 5228 0028                  		addq.b	#1,$28(a0)
00008396                            
00008396                            loc_7D78:
00008396 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000839A                            
0000839A                            Obj17_Action:				; XREF: Obj17_Index
0000839A 6100 0000                  		bsr.w	Obj17_RotateSpikes
0000839E 6100 0000                  		bsr.w	DisplaySprite
000083A2 6000 0000                  		bra.w	Obj17_ChkDel
000083A6                            
000083A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083A6                            
000083A6                            
000083A6                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000083A6 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000083AA 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000083B0 D028 003E                  		add.b	$3E(a0),d0
000083B4 0200 0007                  		andi.b	#7,d0
000083B8 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000083BC 6600                       		bne.s	locret_7DA6
000083BE 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000083C4                            
000083C4                            locret_7DA6:
000083C4 4E75                       		rts	
000083C6                            ; End of function Obj17_RotateSpikes
000083C6                            
000083C6                            ; ===========================================================================
000083C6                            
000083C6                            Obj17_ChkDel:				; XREF: Obj17_Action
000083C6 3028 0008                  		move.w	8(a0),d0
000083CA 0240 FF80                  		andi.w	#$FF80,d0
000083CE 3238 F700                  		move.w	($FFFFF700).w,d1
000083D2 0441 0080                  		subi.w	#$80,d1
000083D6 0241 FF80                  		andi.w	#$FF80,d1
000083DA 9041                       		sub.w	d1,d0
000083DC 0C40 0280                  		cmpi.w	#$280,d0
000083E0 6200 0000                  		bhi.w	Obj17_DelAll
000083E4 4E75                       		rts	
000083E6                            ; ===========================================================================
000083E6                            
000083E6                            Obj17_DelAll:				; XREF: Obj17_ChkDel
000083E6 7400                       		moveq	#0,d2
000083E8 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000083EC 141A                       		move.b	(a2)+,d2	; move a2 to d2
000083EE 5502                       		subq.b	#2,d2
000083F0 6500                       		bcs.s	Obj17_Delete
000083F2                            
000083F2                            Obj17_DelLoop:
000083F2 7000                       		moveq	#0,d0
000083F4 101A                       		move.b	(a2)+,d0
000083F6 ED48                       		lsl.w	#6,d0
000083F8 0680 00FF D000             		addi.l	#$FFD000,d0
000083FE 2240                       		movea.l	d0,a1
00008400 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008404 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008408                            
00008408                            Obj17_Delete:				; XREF: Obj17_Index
00008408 6100 0000                  		bsr.w	DeleteObject
0000840C 4E75                       		rts	
0000840E                            ; ===========================================================================
0000840E                            
0000840E                            Obj17_Display:				; XREF: Obj17_Index
0000840E 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008412 6000 0000                  		bra.w	DisplaySprite
00008416                            ; ===========================================================================
00008416                            ; ---------------------------------------------------------------------------
00008416                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008416                            ; ---------------------------------------------------------------------------
00008416                            Map_obj17:
00008416                            	include "_maps\obj17.asm"
00008416                            ; ---------------------------------------------------------------------------
00008416                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008416                            ; ---------------------------------------------------------------------------
00008416 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
0000841A 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000841E 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008422 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008426 01                         byte_7E08:	dc.b 1
00008427 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
0000842C 01                         byte_7E0E:	dc.b 1
0000842D F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008432 01                         byte_7E14:	dc.b 1
00008433 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008438 01                         byte_7E1A:	dc.b 1
00008439 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000843E 01                         byte_7E20:	dc.b 1
0000843F 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008444 01                         byte_7E26:	dc.b 1
00008445 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
0000844A 01                         byte_7E2C:	dc.b 1
0000844B F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008450                            		even
00008450                            		even
00008450                            
00008450                            ; ===========================================================================
00008450                            ; ---------------------------------------------------------------------------
00008450                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008450                            ; ---------------------------------------------------------------------------
00008450                            
00008450                            Obj18:					; XREF: Obj_Index
00008450 7000                       		moveq	#0,d0
00008452 1028 0024                  		move.b	$24(a0),d0
00008456 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
0000845A 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000845E                            ; ===========================================================================
0000845E 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008460 0000                       		dc.w Obj18_Solid-Obj18_Index
00008462 0000                       		dc.w Obj18_Action2-Obj18_Index
00008464 0000                       		dc.w Obj18_Delete-Obj18_Index
00008466 0000                       		dc.w Obj18_Action-Obj18_Index
00008468                            ; ===========================================================================
00008468                            
00008468                            Obj18_Main:				; XREF: Obj18_Index
00008468 5428 0024                  		addq.b	#2,$24(a0)
0000846C 317C 4000 0002             		move.w	#$4000,2(a0)
00008472 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000847A 117C 0020 0019             		move.b	#$20,$19(a0)
00008480 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008486 6600                       		bne.s	Obj18_NotSYZ
00008488 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008490 117C 0020 0019             		move.b	#$20,$19(a0)
00008496                            
00008496                            Obj18_NotSYZ:
00008496 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000849C 6600                       		bne.s	Obj18_NotSLZ
0000849E 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000084A6 117C 0020 0019             		move.b	#$20,$19(a0)
000084AC 317C 4000 0002             		move.w	#$4000,2(a0)
000084B2 117C 0003 0028             		move.b	#3,$28(a0)
000084B8                            
000084B8                            Obj18_NotSLZ:
000084B8 117C 0004 0001             		move.b	#4,1(a0)
000084BE 117C 0004 0018             		move.b	#4,$18(a0)
000084C4 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000084CA 3168 000C 0034             		move.w	$C(a0),$34(a0)
000084D0 3168 0008 0032             		move.w	8(a0),$32(a0)
000084D6 317C 0080 0026             		move.w	#$80,$26(a0)
000084DC 7200                       		moveq	#0,d1
000084DE 1028 0028                  		move.b	$28(a0),d0
000084E2 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000084E6 6600                       		bne.s	Obj18_SetFrame	; if not, branch
000084E8 5201                       		addq.b	#1,d1		; use frame #1
000084EA 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
000084F0                            
000084F0                            Obj18_SetFrame:
000084F0 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
000084F4                            
000084F4                            Obj18_Solid:				; XREF: Obj18_Index
000084F4 4A28 0038                  		tst.b	$38(a0)
000084F8 6700                       		beq.s	loc_7EE0
000084FA 5928 0038                  		subq.b	#4,$38(a0)
000084FE                            
000084FE                            loc_7EE0:
000084FE 7200                       		moveq	#0,d1
00008500 1228 0019                  		move.b	$19(a0),d1
00008504 6100 F56C                  		bsr.w	PlatformObject
00008508                            
00008508                            Obj18_Action:				; XREF: Obj18_Index
00008508 6100 0000                  		bsr.w	Obj18_Move
0000850C 6100 0000                  		bsr.w	Obj18_Nudge
00008510 6100 0000                  		bsr.w	DisplaySprite
00008514 6000 0000                  		bra.w	Obj18_ChkDel
00008518                            ; ===========================================================================
00008518                            
00008518                            Obj18_Action2:				; XREF: Obj18_Index
00008518 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000851E 6700                       		beq.s	loc_7F06
00008520 5828 0038                  		addq.b	#4,$38(a0)
00008524                            
00008524                            loc_7F06:
00008524 7200                       		moveq	#0,d1
00008526 1228 0019                  		move.b	$19(a0),d1
0000852A 6100 F6BA                  		bsr.w	ExitPlatform
0000852E 3F28 0008                  		move.w	8(a0),-(sp)
00008532 6100 0000                  		bsr.w	Obj18_Move
00008536 6100 0000                  		bsr.w	Obj18_Nudge
0000853A 341F                       		move.w	(sp)+,d2
0000853C 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008540 6100 0000                  		bsr.w	DisplaySprite
00008544 6000 0000                  		bra.w	Obj18_ChkDel
00008548                            
00008548 4E75                       		rts
0000854A                            
0000854A                            ; ---------------------------------------------------------------------------
0000854A                            ; Subroutine to	move platform slightly when you	stand on it
0000854A                            ; ---------------------------------------------------------------------------
0000854A                            
0000854A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000854A                            
0000854A                            
0000854A                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000854A 1028 0038                  		move.b	$38(a0),d0
0000854E 6100 A5F0                  		bsr.w	CalcSine
00008552 323C 0400                  		move.w	#$400,d1
00008556 C1C1                       		muls.w	d1,d0
00008558 4840                       		swap	d0
0000855A D068 002C                  		add.w	$2C(a0),d0
0000855E 3140 000C                  		move.w	d0,$C(a0)
00008562 4E75                       		rts	
00008564                            ; End of function Obj18_Nudge
00008564                            
00008564                            ; ---------------------------------------------------------------------------
00008564                            ; Subroutine to	move platforms
00008564                            ; ---------------------------------------------------------------------------
00008564                            
00008564                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008564                            
00008564                            
00008564                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008564 7000                       		moveq	#0,d0
00008566 1028 0028                  		move.b	$28(a0),d0
0000856A 0240 000F                  		andi.w	#$F,d0
0000856E D040                       		add.w	d0,d0
00008570 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008574 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008578                            ; End of function Obj18_Move
00008578                            
00008578                            ; ===========================================================================
00008578 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000857C 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008580 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008584 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008588 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000858C 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008590 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008592                            ; ===========================================================================
00008592                            
00008592                            Obj18_Type00:
00008592 4E75                       		rts			; platform 00 doesn't move
00008594                            ; ===========================================================================
00008594                            
00008594                            Obj18_Type05:
00008594 3028 0032                  		move.w	$32(a0),d0
00008598 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000859C 4401                       		neg.b	d1		; reverse platform-motion
0000859E 0601 0040                  		addi.b	#$40,d1
000085A2 6000                       		bra.s	Obj18_01_Move
000085A4                            ; ===========================================================================
000085A4                            
000085A4                            Obj18_Type01:
000085A4 3028 0032                  		move.w	$32(a0),d0
000085A8 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085AC 0401 0040                  		subi.b	#$40,d1
000085B0                            
000085B0                            Obj18_01_Move:
000085B0 4881                       		ext.w	d1
000085B2 D041                       		add.w	d1,d0
000085B4 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000085B8 6000 0000                  		bra.w	Obj18_ChgMotion
000085BC                            ; ===========================================================================
000085BC                            
000085BC                            Obj18_Type0C:
000085BC 3028 0034                  		move.w	$34(a0),d0
000085C0 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000085C4 4401                       		neg.b	d1		; reverse platform-motion
000085C6 0601 0030                  		addi.b	#$30,d1
000085CA 6000                       		bra.s	Obj18_02_Move
000085CC                            ; ===========================================================================
000085CC                            
000085CC                            Obj18_Type0B:
000085CC 3028 0034                  		move.w	$34(a0),d0
000085D0 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000085D4 0401 0030                  		subi.b	#$30,d1
000085D8 6000                       		bra.s	Obj18_02_Move
000085DA                            ; ===========================================================================
000085DA                            
000085DA                            Obj18_Type06:
000085DA 3028 0034                  		move.w	$34(a0),d0
000085DE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085E2 4401                       		neg.b	d1		; reverse platform-motion
000085E4 0601 0040                  		addi.b	#$40,d1
000085E8 6000                       		bra.s	Obj18_02_Move
000085EA                            ; ===========================================================================
000085EA                            
000085EA                            Obj18_Type02:
000085EA 3028 0034                  		move.w	$34(a0),d0
000085EE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085F2 0401 0040                  		subi.b	#$40,d1
000085F6                            
000085F6                            Obj18_02_Move:
000085F6 4881                       		ext.w	d1
000085F8 D041                       		add.w	d1,d0
000085FA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000085FE 6000 0000                  		bra.w	Obj18_ChgMotion
00008602                            ; ===========================================================================
00008602                            
00008602                            Obj18_Type03:
00008602 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008606 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008608 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000860E 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008610 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008616                            
00008616                            Obj18_03_NoMove:
00008616 4E75                       		rts	
00008618                            ; ===========================================================================
00008618                            
00008618                            Obj18_03_Wait:
00008618 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
0000861C 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000861E 317C 0020 003A             		move.w	#32,$3A(a0)
00008624 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008628 4E75                       		rts	
0000862A                            ; ===========================================================================
0000862A                            
0000862A                            Obj18_Type04:
0000862A 4A68 003A                  		tst.w	$3A(a0)
0000862E 6700                       		beq.s	loc_8048
00008630 5368 003A                  		subq.w	#1,$3A(a0)
00008634 6600                       		bne.s	loc_8048
00008636 0828 0003 0022             		btst	#3,$22(a0)
0000863C 6700                       		beq.s	loc_8042
0000863E 08E9 0001 0022             		bset	#1,$22(a1)
00008644 08A9 0003 0022             		bclr	#3,$22(a1)
0000864A 137C 0002 0024             		move.b	#2,$24(a1)
00008650 08A8 0003 0022             		bclr	#3,$22(a0)
00008656 4228 0025                  		clr.b	$25(a0)
0000865A 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008660                            
00008660                            loc_8042:
00008660 117C 0008 0024             		move.b	#8,$24(a0)
00008666                            
00008666                            loc_8048:
00008666 2628 002C                  		move.l	$2C(a0),d3
0000866A 3028 0012                  		move.w	$12(a0),d0
0000866E 48C0                       		ext.l	d0
00008670 E180                       		asl.l	#8,d0
00008672 D680                       		add.l	d0,d3
00008674 2143 002C                  		move.l	d3,$2C(a0)
00008678 0668 0038 0012             		addi.w	#$38,$12(a0)
0000867E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008682 0640 00E0                  		addi.w	#$E0,d0
00008686 B068 002C                  		cmp.w	$2C(a0),d0
0000868A 6400                       		bcc.s	locret_8074
0000868C 117C 0006 0024             		move.b	#6,$24(a0)
00008692                            
00008692                            locret_8074:
00008692 4E75                       		rts	
00008694                            ; ===========================================================================
00008694                            
00008694                            Obj18_Type07:
00008694 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008698 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000869A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000869E 7000                       		moveq	#0,d0
000086A0 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000086A4 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000086A6 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000086AA 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000086AC 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000086B2                            
000086B2                            Obj18_07_NoMove:
000086B2 4E75                       		rts	
000086B4                            ; ===========================================================================
000086B4                            
000086B4                            Obj18_07_Wait:
000086B4 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000086B8 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000086BA 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000086BE 4E75                       		rts	
000086C0                            ; ===========================================================================
000086C0                            
000086C0                            Obj18_Type08:
000086C0 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000086C4 3028 0034                  		move.w	$34(a0),d0
000086C8 0440 0200                  		subi.w	#$200,d0
000086CC B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000086D0 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000086D2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000086D6                            
000086D6                            Obj18_08_NoStop:
000086D6 4E75                       		rts	
000086D8                            ; ===========================================================================
000086D8                            
000086D8                            Obj18_Type0A:
000086D8 3028 0034                  		move.w	$34(a0),d0
000086DC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000086E0 0401 0040                  		subi.b	#$40,d1
000086E4 4881                       		ext.w	d1
000086E6 E241                       		asr.w	#1,d1
000086E8 D041                       		add.w	d1,d0
000086EA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000086EE                            
000086EE                            Obj18_ChgMotion:
000086EE 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000086F4 4E75                       		rts	
000086F6                            ; ===========================================================================
000086F6                            
000086F6                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000086F6 3028 0032                  		move.w	$32(a0),d0
000086FA 0240 FF80                  		andi.w	#$FF80,d0
000086FE 3238 F700                  		move.w	($FFFFF700).w,d1
00008702 0441 0080                  		subi.w	#$80,d1
00008706 0241 FF80                  		andi.w	#$FF80,d1
0000870A 9041                       		sub.w	d1,d0
0000870C 0C40 0280                  		cmpi.w	#$280,d0
00008710 6200                       		bhi.s	Obj18_Delete
00008712 4E75                       		rts	
00008714                            ; ===========================================================================
00008714                            
00008714                            Obj18_Delete:				; XREF: Obj18_Index
00008714 6000 0000                  		bra.w	DeleteObject
00008718                            ; ===========================================================================
00008718                            ; ---------------------------------------------------------------------------
00008718                            ; Sprite mappings - unused
00008718                            ; ---------------------------------------------------------------------------
00008718                            Map_obj18x:
00008718                            	include "_maps\obj18x.asm"
00008718                            ; ---------------------------------------------------------------------------
00008718                            ; Sprite mappings - unused
00008718                            ; ---------------------------------------------------------------------------
00008718 0000                       		dc.w byte_80FE-Map_obj18x
0000871A 0000                       		dc.w byte_8109-Map_obj18x
0000871C 02                         byte_80FE:	dc.b 2
0000871D F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008722 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008727 0A                         byte_8109:	dc.b $A
00008728 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000872D 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008732 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008737 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
0000873C 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008741 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008746 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
0000874B 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008750 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008755 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000875A                            		even
0000875A                            		even
0000875A                            
0000875A                            ; ---------------------------------------------------------------------------
0000875A                            ; Sprite mappings - GHZ	platforms
0000875A                            ; ---------------------------------------------------------------------------
0000875A                            Map_obj18:
0000875A                            	include "_maps\obj18ghz.asm"
0000875A                            ; ---------------------------------------------------------------------------
0000875A                            ; Sprite mappings - GHZ	platforms
0000875A                            ; ---------------------------------------------------------------------------
0000875A 0000                       		dc.w byte_8140-Map_obj18
0000875C 0000                       		dc.w byte_8155-Map_obj18
0000875E 04                         byte_8140:	dc.b 4
0000875F F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008764 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008769 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000876E F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008773 0A                         byte_8155:	dc.b $A
00008774 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008779 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
0000877E 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008783 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008788 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000878D F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008792 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008797 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000879C 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000087A1 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000087A6                            		even
000087A6                            		even
000087A6                            
000087A6                            ; ---------------------------------------------------------------------------
000087A6                            ; Sprite mappings - SYZ	platforms
000087A6                            ; ---------------------------------------------------------------------------
000087A6                            Map_obj18a:
000087A6                            	include "_maps\obj18syz.asm"
000087A6                            ; ---------------------------------------------------------------------------
000087A6                            ; Sprite mappings - SYZ	platforms
000087A6                            ; ---------------------------------------------------------------------------
000087A6 0000                       		dc.w byte_818A-Map_obj18a
000087A8 03                         byte_818A:	dc.b 3
000087A9 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000087AE F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000087B3 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000087B8                            		even
000087B8                            		even
000087B8                            
000087B8                            ; ---------------------------------------------------------------------------
000087B8                            ; Sprite mappings - SLZ	platforms
000087B8                            ; ---------------------------------------------------------------------------
000087B8                            Map_obj18b:
000087B8                            	include "_maps\obj18slz.asm"
000087B8                            ; ---------------------------------------------------------------------------
000087B8                            ; Sprite mappings - SLZ	platforms
000087B8                            ; ---------------------------------------------------------------------------
000087B8 0000                       		dc.w byte_819C-Map_obj18b
000087BA 02                         byte_819C:	dc.b 2
000087BB F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000087C0 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000087C6 00                         		even
000087C6 00                         		even
000087C6                            
000087C6                            ; ===========================================================================
000087C6                            ; ---------------------------------------------------------------------------
000087C6                            ; Object 19 - Pearto bombs
000087C6                            ; ---------------------------------------------------------------------------
000087C6                            Obj19:					; XREF: Obj_Index
000087C6 7000                       		moveq	#0,d0
000087C8 1028 0024                  		move.b	$24(a0),d0
000087CC 323B 0000                  		move.w	off_7070(pc,d0.w),d1
000087D0 4EFB 1000                  		jmp	off_7070(pc,d1.w)
000087D4                            ; ---------------------------------------------------------------------------
000087D4                            
000087D4 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
000087DA                            ; ---------------------------------------------------------------------------
000087DA                            
000087DA                            loc_7076:
000087DA 5428 0024                  		addq.b	#2,$24(a0)
000087DE 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
000087E6 317C 0480 0002             		move.w	#($9000/$20),2(a0)
000087EC 117C 0004 0001             		move.b	#4,1(a0)
000087F2 117C 0003 0019             		move.b	#3,$19(a0)
000087F8 117C 0087 0020             		move.b	#$87,$20(a0)
000087FE 117C 0008 0018             		move.b	#8,$18(a0)
00008804 317C 0018 0030             		move.w	#$18,$30(a0)
0000880A                            
0000880A                            loc_70A6:
0000880A 0828 0007 0022             		btst	#7,$22(a0)
00008810 6600                       		bne.s	loc_70C2
00008812 4A68 0030                  		tst.w	$30(a0)
00008816 6600                       		bne.s	loc_70D2
00008818 4EB9 0000 0000             		jsr	ObjHitFloor
0000881E 4A41                       		tst.w	d1
00008820 6A00                       		bpl.s	loc_70D6
00008822 D368 000C                  		add.w	d1,$C(a0)
00008826                            
00008826                            loc_70C2:
00008826 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
0000882A 117C 0000 0024             		move.b	#0,$24(a0)
00008830                            ; ---------------------------------------------------------------------------
00008830                            
00008830                            loc_70D2:
00008830 5368 0030                  		subq.w	#1,$30(a0)
00008834                            
00008834                            loc_70D6:
00008834 6100 0000                  		bsr.w	ObjectFall
00008838 6100 0000                  		bsr.w	DisplaySprite
0000883C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008840 0640 00E0                  		addi.w	#$E0,d0
00008844 B068 000C                  		cmp.w	$C(a0),d0
00008848 6500                       		bcs.s	loc_70EE
0000884A 4E75                       		rts
0000884C                            ; ---------------------------------------------------------------------------
0000884C                            
0000884C                            loc_70EE:
0000884C 6100 0000                  		bsr.w	DeleteObject
00008850 4E75                       		rts
00008852                            		
00008852                            Map_obj19:
00008852                            	include "_maps\obj19.asm"
00008852                            Map_02b4:
00008852 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
00008854 01                         Map_02b4_2: 	dc.b $1
00008855 F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
0000885A                            	even
0000885A                            	even
0000885A                            ; ===========================================================================
0000885A                            ; ---------------------------------------------------------------------------
0000885A                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000885A                            ; ---------------------------------------------------------------------------
0000885A                            Map_obj48:
0000885A                            	include "_maps\obj48.asm"
0000885A                            ; ---------------------------------------------------------------------------
0000885A                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000885A                            ; ---------------------------------------------------------------------------
0000885A 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
0000885E 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008862 06                         byte_81B2:	dc.b 6
00008863 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008868 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000886D E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008872 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008877 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000887C 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008881 04                         byte_81D1:	dc.b 4
00008882 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008887 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
0000888C 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008891 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008896 04                         byte_81E6:	dc.b 4
00008897 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0000889C E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000088A1 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000088A6 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000088AB 04                         byte_81FB:	dc.b 4
000088AC E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000088B1 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000088B6 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000088BB 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000088C0                            		even
000088C0                            		even
000088C0                            
000088C0                            ; ===========================================================================
000088C0                            ; ---------------------------------------------------------------------------
000088C0                            ; Object 1A - GHZ collapsing ledge
000088C0                            ; ---------------------------------------------------------------------------
000088C0                            
000088C0                            Obj1A:					; XREF: Obj_Index
000088C0 7000                       		moveq	#0,d0
000088C2 1028 0024                  		move.b	$24(a0),d0
000088C6 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000088CA 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000088CE                            ; ===========================================================================
000088CE 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000088D2 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000088D6 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000088DA                            ; ===========================================================================
000088DA                            
000088DA                            Obj1A_Main:				; XREF: Obj1A_Index
000088DA 5428 0024                  		addq.b	#2,$24(a0)
000088DE 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
000088E6 317C 4000 0002             		move.w	#$4000,2(a0)
000088EC 0028 0004 0001             		ori.b	#4,1(a0)
000088F2 117C 0004 0018             		move.b	#4,$18(a0)
000088F8 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
000088FE 117C 0064 0019             		move.b	#$64,$19(a0)
00008904 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000890A 117C 0038 0016             		move.b	#$38,$16(a0)
00008910 08E8 0004 0001             		bset	#4,1(a0)
00008916                            
00008916                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008916 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
0000891A 6700                       		beq.s	Obj1A_Slope	; if not, branch
0000891C 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008920 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008924 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008928                            
00008928                            Obj1A_Slope:
00008928 323C 0030                  		move.w	#$30,d1
0000892C 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008932 6100 F212                  		bsr.w	SlopeObject
00008936 6000 0000                  		bra.w	MarkObjGone
0000893A                            ; ===========================================================================
0000893A                            
0000893A                            Obj1A_Touch:				; XREF: Obj1A_Index
0000893A 4A28 0038                  		tst.b	$38(a0)
0000893E 6700 0000                  		beq.w	loc_847A
00008942 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008948 5328 0038                  		subq.b	#1,$38(a0)
0000894C                            
0000894C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000894C                            
0000894C                            
0000894C                            Obj1A_WalkOff:				; XREF: Obj1A_Index
0000894C 323C 0030                  		move.w	#$30,d1
00008950 6100 F294                  		bsr.w	ExitPlatform
00008954 323C 0030                  		move.w	#$30,d1
00008958 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000895E 3428 0008                  		move.w	8(a0),d2
00008962 6100 0000                  		bsr.w	SlopeObject2
00008966 6000 0000                  		bra.w	MarkObjGone
0000896A                            ; End of function Obj1A_WalkOff
0000896A                            
0000896A                            ; ===========================================================================
0000896A                            
0000896A                            Obj1A_Display:				; XREF: Obj1A_Index
0000896A 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000896E 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008970 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008974 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008978 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000897C 6000 0000                  		bra.w	DisplaySprite
00008980                            ; ===========================================================================
00008980                            
00008980                            loc_82D0:				; XREF: Obj1A_Display
00008980 5328 0038                  		subq.b	#1,$38(a0)
00008984 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008988 43F8 D000                  		lea	($FFFFD000).w,a1
0000898C 0829 0003 0022             		btst	#3,$22(a1)
00008992 6700                       		beq.s	loc_82FC
00008994 4A28 0038                  		tst.b	$38(a0)
00008998 6600                       		bne.s	locret_8308
0000899A 08A9 0003 0022             		bclr	#3,$22(a1)
000089A0 08A9 0005 0022             		bclr	#5,$22(a1)
000089A6 137C 0001 001D             		move.b	#1,$1D(a1)
000089AC                            
000089AC                            loc_82FC:
000089AC 117C 0000 003A             		move.b	#0,$3A(a0)
000089B2 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000089B8                            
000089B8                            locret_8308:
000089B8 4E75                       		rts	
000089BA                            ; ===========================================================================
000089BA                            
000089BA                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000089BA 6100 0000                  		bsr.w	ObjectFall
000089BE 6100 0000                  		bsr.w	DisplaySprite
000089C2 4A28 0001                  		tst.b	1(a0)
000089C6 6A00                       		bpl.s	Obj1A_Delete
000089C8 4E75                       		rts	
000089CA                            ; ===========================================================================
000089CA                            
000089CA                            Obj1A_Delete:				; XREF: Obj1A_Index
000089CA 6100 0000                  		bsr.w	DeleteObject
000089CE 4E75                       		rts	
000089D0                            ; ===========================================================================
000089D0                            ; ---------------------------------------------------------------------------
000089D0                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000089D0                            ; ---------------------------------------------------------------------------
000089D0                            
000089D0                            Obj53:					; XREF: Obj_Index
000089D0 7000                       		moveq	#0,d0
000089D2 1028 0024                  		move.b	$24(a0),d0
000089D6 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000089DA 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000089DE                            ; ===========================================================================
000089DE 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000089E2 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
000089E6 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
000089EA                            ; ===========================================================================
000089EA                            
000089EA                            Obj53_Main:				; XREF: Obj53_Index
000089EA 5428 0024                  		addq.b	#2,$24(a0)
000089EE 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
000089F6 317C 42B8 0002             		move.w	#$42B8,2(a0)
000089FC 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008A02 6600                       		bne.s	Obj53_NotSLZ
00008A04 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008A0A 5428 001A                  		addq.b	#2,$1A(a0)
00008A0E                            
00008A0E                            Obj53_NotSLZ:
00008A0E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008A14 6600                       		bne.s	Obj53_NotSBZ
00008A16 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008A1C                            
00008A1C                            Obj53_NotSBZ:
00008A1C 0028 0004 0001             		ori.b	#4,1(a0)
00008A22 117C 0004 0018             		move.b	#4,$18(a0)
00008A28 117C 0007 0038             		move.b	#7,$38(a0)
00008A2E 117C 0044 0019             		move.b	#$44,$19(a0)
00008A34                            
00008A34                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008A34 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008A38 6700                       		beq.s	Obj53_Solid	; if not, branch
00008A3A 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008A3E 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008A42 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008A46                            
00008A46                            Obj53_Solid:
00008A46 323C 0020                  		move.w	#$20,d1
00008A4A 6100 F026                  		bsr.w	PlatformObject
00008A4E 4A28 0028                  		tst.b	$28(a0)
00008A52 6A00                       		bpl.s	Obj53_MarkAsGone
00008A54 0829 0003 0022             		btst	#3,$22(a1)
00008A5A 6700                       		beq.s	Obj53_MarkAsGone
00008A5C 08A8 0000 0001             		bclr	#0,1(a0)
00008A62 3029 0008                  		move.w	8(a1),d0
00008A66 9068 0008                  		sub.w	8(a0),d0
00008A6A 6400                       		bcc.s	Obj53_MarkAsGone
00008A6C 08E8 0000 0001             		bset	#0,1(a0)
00008A72                            
00008A72                            Obj53_MarkAsGone:
00008A72 6000 0000                  		bra.w	MarkObjGone
00008A76                            ; ===========================================================================
00008A76                            
00008A76                            Obj53_Touch:				; XREF: Obj53_Index
00008A76 4A28 0038                  		tst.b	$38(a0)
00008A7A 6700 0000                  		beq.w	loc_8458
00008A7E 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008A84 5328 0038                  		subq.b	#1,$38(a0)
00008A88                            
00008A88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A88                            
00008A88                            
00008A88                            Obj53_WalkOff:				; XREF: Obj53_Index
00008A88 323C 0020                  		move.w	#$20,d1
00008A8C 6100 F158                  		bsr.w	ExitPlatform
00008A90 3428 0008                  		move.w	8(a0),d2
00008A94 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008A98 6000 0000                  		bra.w	MarkObjGone
00008A9C                            ; End of function Obj53_WalkOff
00008A9C                            
00008A9C                            ; ===========================================================================
00008A9C                            
00008A9C                            Obj53_Display:				; XREF: Obj53_Index
00008A9C 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008AA0 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008AA2 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008AA6 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008AAA 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008AAE 6000 0000                  		bra.w	DisplaySprite
00008AB2                            ; ===========================================================================
00008AB2                            
00008AB2                            loc_8402:
00008AB2 5328 0038                  		subq.b	#1,$38(a0)
00008AB6 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008ABA 43F8 D000                  		lea	($FFFFD000).w,a1
00008ABE 0829 0003 0022             		btst	#3,$22(a1)
00008AC4 6700                       		beq.s	loc_842E
00008AC6 4A28 0038                  		tst.b	$38(a0)
00008ACA 6600                       		bne.s	locret_843A
00008ACC 08A9 0003 0022             		bclr	#3,$22(a1)
00008AD2 08A9 0005 0022             		bclr	#5,$22(a1)
00008AD8 137C 0001 001D             		move.b	#1,$1D(a1)
00008ADE                            
00008ADE                            loc_842E:
00008ADE 117C 0000 003A             		move.b	#0,$3A(a0)
00008AE4 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008AEA                            
00008AEA                            locret_843A:
00008AEA 4E75                       		rts	
00008AEC                            ; ===========================================================================
00008AEC                            
00008AEC                            Obj53_TimeZero:				; XREF: Obj53_Display
00008AEC 6100 0000                  		bsr.w	ObjectFall
00008AF0 6100 0000                  		bsr.w	DisplaySprite
00008AF4 4A28 0001                  		tst.b	1(a0)
00008AF8 6A00                       		bpl.s	Obj53_Delete
00008AFA 4E75                       		rts	
00008AFC                            ; ===========================================================================
00008AFC                            
00008AFC                            Obj53_Delete:				; XREF: Obj53_Index
00008AFC 6100 0000                  		bsr.w	DeleteObject
00008B00 4E75                       		rts	
00008B02                            ; ===========================================================================
00008B02                            
00008B02                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008B02 117C 0000 003A             		move.b	#0,$3A(a0)
00008B08                            
00008B08                            loc_8458:				; XREF: Obj53_Touch
00008B08 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008B0E 0828 0000 0028             		btst	#0,$28(a0)
00008B14 6700                       		beq.s	loc_846C
00008B16 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008B1C                            
00008B1C                            loc_846C:
00008B1C 7207                       		moveq	#7,d1
00008B1E 5228 001A                  		addq.b	#1,$1A(a0)
00008B22 6000                       		bra.s	loc_8486
00008B24                            ; ===========================================================================
00008B24                            
00008B24                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008B24 117C 0000 003A             		move.b	#0,$3A(a0)
00008B2A                            
00008B2A                            loc_847A:				; XREF: Obj1A_Touch
00008B2A 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008B30 7218                       		moveq	#$18,d1
00008B32 5428 001A                  		addq.b	#2,$1A(a0)
00008B36                            
00008B36                            loc_8486:				; XREF: Obj53_Collapse
00008B36 7000                       		moveq	#0,d0
00008B38 1028 001A                  		move.b	$1A(a0),d0
00008B3C D040                       		add.w	d0,d0
00008B3E 2668 0004                  		movea.l	4(a0),a3
00008B42 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008B46 524B                       		addq.w	#1,a3
00008B48 08E8 0005 0001             		bset	#5,1(a0)
00008B4E 1810                       		move.b	0(a0),d4
00008B50 1A28 0001                  		move.b	1(a0),d5
00008B54 2248                       		movea.l	a0,a1
00008B56 6000                       		bra.s	loc_84B2
00008B58                            ; ===========================================================================
00008B58                            
00008B58                            loc_84AA:
00008B58 6100 0000                  		bsr.w	SingleObjLoad
00008B5C 6600                       		bne.s	loc_84F2
00008B5E 5A4B                       		addq.w	#5,a3
00008B60                            
00008B60                            loc_84B2:
00008B60 137C 0006 0024             		move.b	#6,$24(a1)
00008B66 1284                       		move.b	d4,0(a1)
00008B68 234B 0004                  		move.l	a3,4(a1)
00008B6C 1345 0001                  		move.b	d5,1(a1)
00008B70 3368 0008 0008             		move.w	8(a0),8(a1)
00008B76 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008B7C 3368 0002 0002             		move.w	2(a0),2(a1)
00008B82 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008B88 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008B8E 135C 0038                  		move.b	(a4)+,$38(a1)
00008B92 B3C8                       		cmpa.l	a0,a1
00008B94 6400                       		bcc.s	loc_84EE
00008B96 6100 0000                  		bsr.w	DisplaySprite2
00008B9A                            
00008B9A                            loc_84EE:
00008B9A 51C9 FFBC                  		dbf	d1,loc_84AA
00008B9E                            
00008B9E                            loc_84F2:
00008B9E 6100 0000                  		bsr.w	DisplaySprite
00008BA2 303C 00B9                  		move.w	#$B9,d0
00008BA6 4EF9 0000 139E             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008BAC                            ; ===========================================================================
00008BAC                            ; ---------------------------------------------------------------------------
00008BAC                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008BAC                            ; ---------------------------------------------------------------------------
00008BAC 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008BBC 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008BC6 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008BCE 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008BD6                            
00008BD6                            ; ---------------------------------------------------------------------------
00008BD6                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008BD6                            ; ---------------------------------------------------------------------------
00008BD6                            
00008BD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BD6                            
00008BD6                            
00008BD6                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008BD6 43F8 D000                  		lea	($FFFFD000).w,a1
00008BDA 0829 0003 0022             		btst	#3,$22(a1)
00008BE0 6700                       		beq.s	locret_856E
00008BE2 3029 0008                  		move.w	8(a1),d0
00008BE6 9068 0008                  		sub.w	8(a0),d0
00008BEA D041                       		add.w	d1,d0
00008BEC E248                       		lsr.w	#1,d0
00008BEE 0828 0000 0001             		btst	#0,1(a0)
00008BF4 6700                       		beq.s	loc_854E
00008BF6 4640                       		not.w	d0
00008BF8 D041                       		add.w	d1,d0
00008BFA                            
00008BFA                            loc_854E:
00008BFA 7200                       		moveq	#0,d1
00008BFC 1232 0000                  		move.b	(a2,d0.w),d1
00008C00 3028 000C                  		move.w	$C(a0),d0
00008C04 9041                       		sub.w	d1,d0
00008C06 7200                       		moveq	#0,d1
00008C08 1229 0016                  		move.b	$16(a1),d1
00008C0C 9041                       		sub.w	d1,d0
00008C0E 3340 000C                  		move.w	d0,$C(a1)
00008C12 9468 0008                  		sub.w	8(a0),d2
00008C16 9569 0008                  		sub.w	d2,8(a1)
00008C1A                            
00008C1A                            locret_856E:
00008C1A 4E75                       		rts	
00008C1C                            ; End of function SlopeObject2
00008C1C                            
00008C1C                            ; ===========================================================================
00008C1C                            ; ---------------------------------------------------------------------------
00008C1C                            ; Collision data for GHZ collapsing ledge
00008C1C                            ; ---------------------------------------------------------------------------
00008C1C                            Obj1A_SlopeData:
00008C1C                            		incbin	misc\ghzledge.bin
00008C4C                            		even
00008C4C                            
00008C4C                            ; ---------------------------------------------------------------------------
00008C4C                            ; Sprite mappings - GHZ	collapsing ledge
00008C4C                            ; ---------------------------------------------------------------------------
00008C4C                            Map_obj1A:
00008C4C                            	include "_maps\obj1A.asm"
00008C4C                            ; ---------------------------------------------------------------------------
00008C4C                            ; Sprite mappings - GHZ	collapsing ledge
00008C4C                            ; ---------------------------------------------------------------------------
00008C4C 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008C50 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008C54 10                         byte_85A8:	dc.b $10
00008C55 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008C5A D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008C5F E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008C64 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008C69 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C6E D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008C73 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008C78 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008C7D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008C82 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008C87 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008C8C 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008C91 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008C96 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008C9B 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008CA0 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008CA5 10                         byte_85F9:	dc.b $10
00008CA6 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008CAB D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008CB0 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008CB5 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008CBA D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008CBF D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008CC4 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008CC9 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008CCE F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008CD3 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008CD8 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008CDD 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008CE2 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008CE7 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008CEC 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008CF1 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008CF6 19                         byte_864A:	dc.b $19
00008CF7 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008CFC C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008D01 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008D06 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008D0B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008D10 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008D15 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008D1A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008D1F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008D24 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008D29 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008D2E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008D33 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008D38 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008D3D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D42 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008D47 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008D4C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008D51 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D56 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008D5B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008D60 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008D65 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008D6A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008D6F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D74 19                         byte_86C8:	dc.b $19
00008D75 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008D7A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008D7F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008D84 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008D89 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008D8E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008D93 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008D98 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008D9D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008DA2 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008DA7 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008DAC F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008DB1 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008DB6 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008DBB F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008DC0 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008DC5 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008DCA 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008DCF 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008DD4 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008DD9 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008DDE 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008DE3 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008DE8 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008DED 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008DF2                            		even
00008DF2                            		even
00008DF2                            
00008DF2                            ; ---------------------------------------------------------------------------
00008DF2                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008DF2                            ; ---------------------------------------------------------------------------
00008DF2                            Map_obj53:
00008DF2                            	include "_maps\obj53.asm"
00008DF2                            ; ---------------------------------------------------------------------------
00008DF2                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008DF2                            ; ---------------------------------------------------------------------------
00008DF2 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008DF6 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008DFA 04                         byte_874E:	dc.b 4
00008DFB F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008E00 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008E05 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008E0A 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008E0F 08                         byte_8763:	dc.b 8
00008E10 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008E15 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008E1A F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008E1F F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008E24 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008E29 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008E2E 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008E33 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008E38 04                         byte_878C:	dc.b 4
00008E39 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008E3E 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008E43 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008E48 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008E4D 08                         byte_87A1:	dc.b 8
00008E4E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008E53 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008E58 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008E5D F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008E62 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008E67 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008E6C 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008E71 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008E76                            		even
00008E76                            		even
00008E76                            
00008E76                            ; ===========================================================================
00008E76                            ; ---------------------------------------------------------------------------
00008E76                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008E76                            ; ---------------------------------------------------------------------------
00008E76                            
00008E76                            Obj1C:					; XREF: Obj_Index
00008E76 7000                       		moveq	#0,d0
00008E78 1028 0024                  		move.b	$24(a0),d0
00008E7C 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008E80 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008E84                            ; ===========================================================================
00008E84 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008E86 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008E88                            ; ===========================================================================
00008E88                            
00008E88                            Obj1C_Main:				; XREF: Obj1C_Index
00008E88 5428 0024                  		addq.b	#2,$24(a0)
00008E8C 7000                       		moveq	#0,d0
00008E8E 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008E92 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008E96 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008E9A 2159 0004                  		move.l	(a1)+,4(a0)
00008E9E 3159 0002                  		move.w	(a1)+,2(a0)
00008EA2 0028 0004 0001             		ori.b	#4,1(a0)
00008EA8 1159 001A                  		move.b	(a1)+,$1A(a0)
00008EAC 1159 0019                  		move.b	(a1)+,$19(a0)
00008EB0 1159 0018                  		move.b	(a1)+,$18(a0)
00008EB4 1159 0020                  		move.b	(a1)+,$20(a0)
00008EB8                            
00008EB8                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008EB8 3028 0008                  		move.w	8(a0),d0
00008EBC 0240 FF80                  		andi.w	#$FF80,d0
00008EC0 3238 F700                  		move.w	($FFFFF700).w,d1
00008EC4 0441 0080                  		subi.w	#$80,d1
00008EC8 0241 FF80                  		andi.w	#$FF80,d1
00008ECC 9041                       		sub.w	d1,d0
00008ECE 0C40 0280                  		cmpi.w	#$280,d0
00008ED2 6200 0000                  		bhi.w	DeleteObject
00008ED6 6000 0000                  		bra.w	DisplaySprite
00008EDA                            ; ===========================================================================
00008EDA                            ; ---------------------------------------------------------------------------
00008EDA                            ; Variables for	object $1C are stored in an array
00008EDA                            ; ---------------------------------------------------------------------------
00008EDA 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008EDE 44D8                       		dc.w $44D8		; VRAM setting
00008EE0 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008EE4 0000 0000                  		dc.l Map_obj1C
00008EE8 44D8                       		dc.w $44D8
00008EEA 0008 0200                  		dc.b 0,	8, 2, 0
00008EEE 0000 0000                  		dc.l Map_obj1C
00008EF2 44D8                       		dc.w $44D8
00008EF4 0008 0200                  		dc.b 0,	8, 2, 0
00008EF8 0000 7F5A                  		dc.l Map_obj11
00008EFC 438E                       		dc.w $438E
00008EFE 0110 0100                  		dc.b 1,	$10, 1,	0
00008F02                            ; ---------------------------------------------------------------------------
00008F02                            ; Sprite mappings - SLZ	lava thrower
00008F02                            ; ---------------------------------------------------------------------------
00008F02                            Map_obj1C:
00008F02                            	include "_maps\obj1C.asm"
00008F02                            ; ---------------------------------------------------------------------------
00008F02                            ; Sprite mappings - SLZ	lava thrower
00008F02                            ; ---------------------------------------------------------------------------
00008F02 0000                       		dc.w byte_8858-Map_obj1C
00008F04 01                         byte_8858:	dc.b 1
00008F05 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008F0A                            		even
00008F0A                            		even
00008F0A                            
00008F0A                            ; ===========================================================================
00008F0A                            ; ---------------------------------------------------------------------------
00008F0A                            ; Object 1D - switch that activates when Sonic touches it
00008F0A                            ; (this	is not used anywhere in	the game)
00008F0A                            ; ---------------------------------------------------------------------------
00008F0A                            
00008F0A                            Obj1D:					; XREF: Obj_Index
00008F0A 7000                       		moveq	#0,d0
00008F0C 1028 0024                  		move.b	$24(a0),d0
00008F10 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008F14 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008F18                            ; ===========================================================================
00008F18 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008F1A 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008F1C 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008F1E                            ; ===========================================================================
00008F1E                            
00008F1E                            Obj1D_Main:				; XREF: Obj1D_Index
00008F1E 5428 0024                  		addq.b	#2,$24(a0)
00008F22 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008F2A 317C 4000 0002             		move.w	#$4000,2(a0)
00008F30 117C 0004 0001             		move.b	#4,1(a0)
00008F36 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008F3C 117C 0010 0019             		move.b	#$10,$19(a0)
00008F42 117C 0005 0018             		move.b	#5,$18(a0)
00008F48                            
00008F48                            Obj1D_Action:				; XREF: Obj1D_Index
00008F48 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008F4E 323C 0010                  		move.w	#$10,d1
00008F52 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008F56 6700                       		beq.s	Obj1D_ChkDel
00008F58 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008F5C 7001                       		moveq	#1,d0
00008F5E 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008F62                            
00008F62                            Obj1D_ChkDel:
00008F62 6100 0000                  		bsr.w	DisplaySprite
00008F66 3028 0008                  		move.w	8(a0),d0
00008F6A 0240 FF80                  		andi.w	#$FF80,d0
00008F6E 3238 F700                  		move.w	($FFFFF700).w,d1
00008F72 0441 0080                  		subi.w	#$80,d1
00008F76 0241 FF80                  		andi.w	#$FF80,d1
00008F7A 9041                       		sub.w	d1,d0
00008F7C 0C40 0280                  		cmpi.w	#$280,d0
00008F80 6200 0000                  		bhi.w	Obj1D_Delete
00008F84 4E75                       		rts	
00008F86                            ; ===========================================================================
00008F86                            
00008F86                            Obj1D_Delete:				; XREF: Obj1D_Index
00008F86 6100 0000                  		bsr.w	DeleteObject
00008F8A 4E75                       		rts	
00008F8C                            ; ---------------------------------------------------------------------------
00008F8C                            ; Subroutine to	check if Sonic touches the object
00008F8C                            ; ---------------------------------------------------------------------------
00008F8C                            
00008F8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F8C                            
00008F8C                            
00008F8C                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008F8C 43F8 D000                  		lea	($FFFFD000).w,a1
00008F90 3029 0008                  		move.w	8(a1),d0
00008F94 9068 0008                  		sub.w	8(a0),d0
00008F98 D041                       		add.w	d1,d0
00008F9A 6B00                       		bmi.s	loc_8918
00008F9C D241                       		add.w	d1,d1
00008F9E B041                       		cmp.w	d1,d0
00008FA0 6400                       		bcc.s	loc_8918
00008FA2 3429 000C                  		move.w	$C(a1),d2
00008FA6 1229 0016                  		move.b	$16(a1),d1
00008FAA 4881                       		ext.w	d1
00008FAC D242                       		add.w	d2,d1
00008FAE 3028 000C                  		move.w	$C(a0),d0
00008FB2 0440 0010                  		subi.w	#$10,d0
00008FB6 9041                       		sub.w	d1,d0
00008FB8 6200                       		bhi.s	loc_8918
00008FBA 0C40 FFF0                  		cmpi.w	#-$10,d0
00008FBE 6500                       		bcs.s	loc_8918
00008FC0 70FF                       		moveq	#-1,d0
00008FC2 4E75                       		rts	
00008FC4                            ; ===========================================================================
00008FC4                            
00008FC4                            loc_8918:
00008FC4 7000                       		moveq	#0,d0
00008FC6 4E75                       		rts	
00008FC8                            ; End of function Obj1D_ChkTouch
00008FC8                            
00008FC8                            ; ===========================================================================
00008FC8                            ; ---------------------------------------------------------------------------
00008FC8                            ; Sprite mappings - object 1D
00008FC8                            ; ---------------------------------------------------------------------------
00008FC8                            Map_obj1D:
00008FC8                            	include "_maps\obj1D.asm"
00008FC8                            ; ---------------------------------------------------------------------------
00008FC8                            ; Sprite mappings - object 1D
00008FC8                            ; ---------------------------------------------------------------------------
00008FC8 0000                       		dc.w byte_891E-Map_obj1D
00008FCA 04                         byte_891E:	dc.b 4
00008FCB E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008FD0 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008FD5 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008FDA 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008FE0 00                         		even
00008FE0 00                         		even
00008FE0                            
00008FE0                            ; ===========================================================================
00008FE0                            ; ---------------------------------------------------------------------------
00008FE0                            ; Object 2A - doors (SBZ)
00008FE0                            ; ---------------------------------------------------------------------------
00008FE0                            
00008FE0                            Obj2A:					; XREF: Obj_Index
00008FE0 7000                       		moveq	#0,d0
00008FE2 1028 0024                  		move.b	$24(a0),d0
00008FE6 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008FEA 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008FEE                            ; ===========================================================================
00008FEE 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008FF0 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008FF2                            ; ===========================================================================
00008FF2                            
00008FF2                            Obj2A_Main:				; XREF: Obj2A_Index
00008FF2 5428 0024                  		addq.b	#2,$24(a0)
00008FF6 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008FFE 317C 42E8 0002             		move.w	#$42E8,2(a0)
00009004 0028 0004 0001             		ori.b	#4,1(a0)
0000900A 117C 0008 0019             		move.b	#8,$19(a0)
00009010 117C 0004 0018             		move.b	#4,$18(a0)
00009016                            
00009016                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00009016 323C 0040                  		move.w	#$40,d1
0000901A 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000901E 3038 D008                  		move.w	($FFFFD008).w,d0
00009022 D041                       		add.w	d1,d0
00009024 B068 0008                  		cmp.w	8(a0),d0
00009028 6500                       		bcs.s	Obj2A_Animate
0000902A 9041                       		sub.w	d1,d0
0000902C 9041                       		sub.w	d1,d0
0000902E B068 0008                  		cmp.w	8(a0),d0
00009032 6400                       		bcc.s	Obj2A_Animate
00009034 D041                       		add.w	d1,d0
00009036 B068 0008                  		cmp.w	8(a0),d0
0000903A 6400                       		bcc.s	loc_899A
0000903C 0828 0000 0022             		btst	#0,$22(a0)
00009042 6600                       		bne.s	Obj2A_Animate
00009044 6000                       		bra.s	Obj2A_Open
00009046                            ; ===========================================================================
00009046                            
00009046                            loc_899A:				; XREF: Obj2A_OpenShut
00009046 0828 0000 0022             		btst	#0,$22(a0)
0000904C 6700                       		beq.s	Obj2A_Animate
0000904E                            
0000904E                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0000904E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009054                            
00009054                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009054 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000905A 6100 0000                  		bsr.w	AnimateSprite
0000905E 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009062 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009064 323C 0011                  		move.w	#$11,d1
00009068 343C 0020                  		move.w	#$20,d2
0000906C 3602                       		move.w	d2,d3
0000906E 5243                       		addq.w	#1,d3
00009070 3828 0008                  		move.w	8(a0),d4
00009074 6100 0000                  		bsr.w	SolidObject
00009078                            
00009078                            Obj2A_MarkAsUsed:
00009078 6000 0000                  		bra.w	MarkObjGone
0000907C                            ; ===========================================================================
0000907C                            Ani_obj2A:
0000907C                            	include "_anim\obj2A.asm"
0000907C                            ; ---------------------------------------------------------------------------
0000907C                            ; Animation script - doors (SBZ)
0000907C                            ; ---------------------------------------------------------------------------
0000907C 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
0000907E 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009080 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
0000908C 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009098                            		even
00009098                            		even
00009098                            
00009098                            ; ---------------------------------------------------------------------------
00009098                            ; Sprite mappings - doors (SBZ)
00009098                            ; ---------------------------------------------------------------------------
00009098                            Map_obj2A:
00009098                            	include "_maps\obj2A.asm"
00009098                            ; ---------------------------------------------------------------------------
00009098                            ; Sprite mappings - doors (SBZ)
00009098                            ; ---------------------------------------------------------------------------
00009098 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
0000909C 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
000090A0 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
000090A4 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
000090A8 0000                       		dc.w byte_8A56-Map_obj2A
000090AA 02                         byte_89FE:	dc.b 2
000090AB E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
000090B0 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
000090B5 02                         byte_8A09:	dc.b 2
000090B6 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
000090BB 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000090C0 02                         byte_8A14:	dc.b 2
000090C1 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000090C6 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000090CB 02                         byte_8A1F:	dc.b 2
000090CC D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000090D1 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000090D6 02                         byte_8A2A:	dc.b 2
000090D7 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000090DC 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000090E1 02                         byte_8A35:	dc.b 2
000090E2 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000090E7 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000090EC 02                         byte_8A40:	dc.b 2
000090ED C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
000090F2 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
000090F7 02                         byte_8A4B:	dc.b 2
000090F8 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
000090FD 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009102 02                         byte_8A56:	dc.b 2
00009103 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009108 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
0000910E 00                         		even
0000910E 00                         		even
0000910E                            
0000910E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000910E                            
0000910E                            
0000910E                            Obj44_SolidWall:			; XREF: Obj44_Solid
0000910E 6100 0000                  		bsr.w	Obj44_SolidWall2
00009112 6700                       		beq.s	loc_8AA8
00009114 6B00 0000                  		bmi.w	loc_8AC4
00009118 4A40                       		tst.w	d0
0000911A 6700 0000                  		beq.w	loc_8A92
0000911E 6B00                       		bmi.s	loc_8A7C
00009120 4A69 0010                  		tst.w	$10(a1)
00009124 6B00                       		bmi.s	loc_8A92
00009126 6000                       		bra.s	loc_8A82
00009128                            ; ===========================================================================
00009128                            
00009128                            loc_8A7C:
00009128 4A69 0010                  		tst.w	$10(a1)
0000912C 6A00                       		bpl.s	loc_8A92
0000912E                            
0000912E                            loc_8A82:
0000912E 9169 0008                  		sub.w	d0,8(a1)
00009132 337C 0000 0014             		move.w	#0,$14(a1)
00009138 337C 0000 0010             		move.w	#0,$10(a1)
0000913E                            
0000913E                            loc_8A92:
0000913E 0829 0001 0022             		btst	#1,$22(a1)
00009144 6600                       		bne.s	loc_8AB6
00009146 08E9 0005 0022             		bset	#5,$22(a1)
0000914C 08E8 0005 0022             		bset	#5,$22(a0)
00009152 4E75                       		rts	
00009154                            ; ===========================================================================
00009154                            
00009154                            loc_8AA8:
00009154 0828 0005 0022             		btst	#5,$22(a0)
0000915A 6700                       		beq.s	locret_8AC2
0000915C 337C 0001 001C             		move.w	#1,$1C(a1)
00009162                            
00009162                            loc_8AB6:
00009162 08A8 0005 0022             		bclr	#5,$22(a0)
00009168 08A9 0005 0022             		bclr	#5,$22(a1)
0000916E                            
0000916E                            locret_8AC2:
0000916E 4E75                       		rts	
00009170                            ; ===========================================================================
00009170                            
00009170                            loc_8AC4:
00009170 4A69 0012                  		tst.w	$12(a1)
00009174 6A00                       		bpl.s	locret_8AD8
00009176 4A43                       		tst.w	d3
00009178 6A00                       		bpl.s	locret_8AD8
0000917A 9769 000C                  		sub.w	d3,$C(a1)
0000917E 337C 0000 0012             		move.w	#0,$12(a1)
00009184                            
00009184                            locret_8AD8:
00009184 4E75                       		rts	
00009186                            ; End of function Obj44_SolidWall
00009186                            
00009186                            
00009186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009186                            
00009186                            
00009186                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009186 43F8 D000                  		lea	($FFFFD000).w,a1
0000918A 3029 0008                  		move.w	8(a1),d0
0000918E 9068 0008                  		sub.w	8(a0),d0
00009192 D041                       		add.w	d1,d0
00009194 6B00                       		bmi.s	loc_8B48
00009196 3601                       		move.w	d1,d3
00009198 D643                       		add.w	d3,d3
0000919A B043                       		cmp.w	d3,d0
0000919C 6200                       		bhi.s	loc_8B48
0000919E 1629 0016                  		move.b	$16(a1),d3
000091A2 4883                       		ext.w	d3
000091A4 D443                       		add.w	d3,d2
000091A6 3629 000C                  		move.w	$C(a1),d3
000091AA 9668 000C                  		sub.w	$C(a0),d3
000091AE D642                       		add.w	d2,d3
000091B0 6B00                       		bmi.s	loc_8B48
000091B2 3802                       		move.w	d2,d4
000091B4 D844                       		add.w	d4,d4
000091B6 B644                       		cmp.w	d4,d3
000091B8 6400                       		bcc.s	loc_8B48
000091BA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000091BE 6B00                       		bmi.s	loc_8B48
000091C0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000091C6 6400                       		bcc.s	loc_8B48
000091C8 4A78 FE08                  		tst.w	($FFFFFE08).w
000091CC 6600                       		bne.s	loc_8B48
000091CE 3A00                       		move.w	d0,d5
000091D0 B240                       		cmp.w	d0,d1
000091D2 6400                       		bcc.s	loc_8B30
000091D4 D241                       		add.w	d1,d1
000091D6 9041                       		sub.w	d1,d0
000091D8 3A00                       		move.w	d0,d5
000091DA 4445                       		neg.w	d5
000091DC                            
000091DC                            loc_8B30:
000091DC 3203                       		move.w	d3,d1
000091DE B443                       		cmp.w	d3,d2
000091E0 6400                       		bcc.s	loc_8B3C
000091E2 9644                       		sub.w	d4,d3
000091E4 3203                       		move.w	d3,d1
000091E6 4441                       		neg.w	d1
000091E8                            
000091E8                            loc_8B3C:
000091E8 BA41                       		cmp.w	d1,d5
000091EA 6200                       		bhi.s	loc_8B44
000091EC 7801                       		moveq	#1,d4
000091EE 4E75                       		rts	
000091F0                            ; ===========================================================================
000091F0                            
000091F0                            loc_8B44:
000091F0 78FF                       		moveq	#-1,d4
000091F2 4E75                       		rts	
000091F4                            ; ===========================================================================
000091F4                            
000091F4                            loc_8B48:
000091F4 7800                       		moveq	#0,d4
000091F6 4E75                       		rts	
000091F8                            ; End of function Obj44_SolidWall2
000091F8                            
000091F8                            ; ===========================================================================
000091F8                            ; ---------------------------------------------------------------------------
000091F8                            ; Object 1E - Ball Hog enemy (SBZ)
000091F8                            ; ---------------------------------------------------------------------------
000091F8                            
000091F8                            Obj1E:					; XREF: Obj_Index
000091F8 7000                       		moveq	#0,d0
000091FA 1028 0024                  		move.b	$24(a0),d0
000091FE 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009202 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009206                            ; ===========================================================================
00009206 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009208 0000                       		dc.w Obj1E_Action-Obj1E_Index
0000920A                            ; ===========================================================================
0000920A                            
0000920A                            Obj1E_Main:				; XREF: Obj1E_Index
0000920A 117C 0013 0016             		move.b	#$13,$16(a0)
00009210 117C 0008 0017             		move.b	#8,$17(a0)
00009216 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000921E 317C 2302 0002             		move.w	#$2302,2(a0)
00009224 117C 0004 0001             		move.b	#4,1(a0)
0000922A 117C 0004 0018             		move.b	#4,$18(a0)
00009230 117C 0005 0020             		move.b	#5,$20(a0)
00009236 117C 000C 0019             		move.b	#$C,$19(a0)
0000923C 6100 0000                  		bsr.w	ObjectFall
00009240 4EB9 0000 0000             		jsr	ObjHitFloor
00009246 4A41                       		tst.w	d1
00009248 6A00                       		bpl.s	locret_8BAC
0000924A D368 000C                  		add.w	d1,$C(a0)
0000924E 317C 0000 0012             		move.w	#0,$12(a0)
00009254 5428 0024                  		addq.b	#2,$24(a0)
00009258                            
00009258                            locret_8BAC:
00009258 4E75                       		rts	
0000925A                            ; ===========================================================================
0000925A                            
0000925A                            Obj1E_Action:				; XREF: Obj1E_Index
0000925A 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009260 6100 0000                  		bsr.w	AnimateSprite
00009264 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000926A 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000926C 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009270 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009272 6000                       		bra.s	Obj1E_MarkAsGone
00009274                            ; ===========================================================================
00009274                            
00009274                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009274 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009278                            
00009278                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009278 6000 0000                  		bra.w	MarkObjGone
0000927C                            ; ===========================================================================
0000927C                            
0000927C                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000927C 117C 0001 0032             		move.b	#1,$32(a0)
00009282 6100 0000                  		bsr.w	SingleObjLoad
00009286 6600                       		bne.s	loc_8C1A
00009288 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
0000928C 3368 0008 0008             		move.w	8(a0),8(a1)
00009292 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009298 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
0000929E 337C 0000 0012             		move.w	#0,$12(a1)
000092A4 70FC                       		moveq	#-4,d0
000092A6 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
000092AC 6700                       		beq.s	loc_8C0A	; if not, branch
000092AE 4440                       		neg.w	d0
000092B0 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
000092B4                            
000092B4                            loc_8C0A:
000092B4 D169 0008                  		add.w	d0,8(a1)
000092B8 0669 000C 000C             		addi.w	#$C,$C(a1)
000092BE 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
000092C4                            
000092C4                            loc_8C1A:
000092C4 60B2                       		bra.s	Obj1E_MarkAsGone
000092C6                            ; ===========================================================================
000092C6                            ; ---------------------------------------------------------------------------
000092C6                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000092C6                            ; ---------------------------------------------------------------------------
000092C6                            
000092C6                            Obj20:					; XREF: Obj_Index
000092C6 7000                       		moveq	#0,d0
000092C8 1028 0024                  		move.b	$24(a0),d0
000092CC 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000092D0 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000092D4                            ; ===========================================================================
000092D4 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000092D6 0000                       		dc.w Obj20_Bounce-Obj20_Index
000092D8                            ; ===========================================================================
000092D8                            
000092D8                            Obj20_Main:				; XREF: Obj20_Index
000092D8 5428 0024                  		addq.b	#2,$24(a0)
000092DC 117C 0007 0016             		move.b	#7,$16(a0)
000092E2 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000092EA 317C 2302 0002             		move.w	#$2302,2(a0)
000092F0 117C 0004 0001             		move.b	#4,1(a0)
000092F6 117C 0003 0018             		move.b	#3,$18(a0)
000092FC 117C 0087 0020             		move.b	#$87,$20(a0)
00009302 117C 0008 0019             		move.b	#8,$19(a0)
00009308 7000                       		moveq	#0,d0
0000930A 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000930E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009312 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009316 117C 0004 001A             		move.b	#4,$1A(a0)
0000931C                            
0000931C                            Obj20_Bounce:				; XREF: Obj20_Index
0000931C 4EB9 0000 0000             		jsr	ObjectFall
00009322 4A68 0012                  		tst.w	$12(a0)
00009326 6B00                       		bmi.s	Obj20_ChkExplode
00009328 4EB9 0000 0000             		jsr	ObjHitFloor
0000932E 4A41                       		tst.w	d1
00009330 6A00                       		bpl.s	Obj20_ChkExplode
00009332 D368 000C                  		add.w	d1,$C(a0)
00009336 317C FD00 0012             		move.w	#-$300,$12(a0)
0000933C 4A03                       		tst.b	d3
0000933E 6700                       		beq.s	Obj20_ChkExplode
00009340 6B00                       		bmi.s	loc_8CA4
00009342 4A68 0010                  		tst.w	$10(a0)
00009346 6A00                       		bpl.s	Obj20_ChkExplode
00009348 4468 0010                  		neg.w	$10(a0)
0000934C 6000                       		bra.s	Obj20_ChkExplode
0000934E                            ; ===========================================================================
0000934E                            
0000934E                            loc_8CA4:				; XREF: Obj20_Bounce
0000934E 4A68 0010                  		tst.w	$10(a0)
00009352 6B00                       		bmi.s	Obj20_ChkExplode
00009354 4468 0010                  		neg.w	$10(a0)
00009358                            
00009358                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009358 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000935C 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000935E 10BC 0024                  		move.b	#$24,0(a0)
00009362 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009366 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000936C 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009370                            ; ===========================================================================
00009370                            
00009370                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009370 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009374 6A00                       		bpl.s	Obj20_Display
00009376 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000937C 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009382                            
00009382                            Obj20_Display:
00009382 6100 0000                  		bsr.w	DisplaySprite
00009386 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000938A 0640 00E0                  		addi.w	#$E0,d0
0000938E B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009392 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009396 4E75                       		rts	
00009398                            ; ===========================================================================
00009398                            ; ---------------------------------------------------------------------------
00009398                            ; Object 24 - explosion	from a destroyed monitor
00009398                            ; ---------------------------------------------------------------------------
00009398                            
00009398                            Obj24:					; XREF: Obj_Index
00009398 7000                       		moveq	#0,d0
0000939A 1028 0024                  		move.b	$24(a0),d0
0000939E 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
000093A2 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
000093A6                            ; ===========================================================================
000093A6 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
000093A8 0000                       		dc.w Obj24_Animate-Obj24_Index
000093AA                            ; ===========================================================================
000093AA                            
000093AA                            Obj24_Main:				; XREF: Obj24_Index
000093AA 5428 0024                  		addq.b	#2,$24(a0)
000093AE 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
000093B6 317C 041C 0002             		move.w	#$41C,2(a0)
000093BC 117C 0004 0001             		move.b	#4,1(a0)
000093C2 117C 0001 0018             		move.b	#1,$18(a0)
000093C8 117C 0000 0020             		move.b	#0,$20(a0)
000093CE 117C 000C 0019             		move.b	#$C,$19(a0)
000093D4 117C 0009 001E             		move.b	#9,$1E(a0)
000093DA 117C 0000 001A             		move.b	#0,$1A(a0)
000093E0 303C 00A5                  		move.w	#$A5,d0
000093E4 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play explosion sound
000093EA                            
000093EA                            Obj24_Animate:				; XREF: Obj24_Index
000093EA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000093EE 6A00                       		bpl.s	Obj24_Display
000093F0 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
000093F6 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000093FA 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009400 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009404                            
00009404                            Obj24_Display:
00009404 6000 0000                  		bra.w	DisplaySprite
00009408                            ; ===========================================================================
00009408                            ; ---------------------------------------------------------------------------
00009408                            ; Object 27 - explosion	from a destroyed enemy
00009408                            ; ---------------------------------------------------------------------------
00009408                            
00009408                            Obj27:					; XREF: Obj_Index
00009408 7000                       		moveq	#0,d0
0000940A 1028 0024                  		move.b	$24(a0),d0
0000940E 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009412 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009416                            ; ===========================================================================
00009416 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009418 0000                       		dc.w Obj27_Main-Obj27_Index
0000941A 0000                       		dc.w Obj27_Animate-Obj27_Index
0000941C                            ; ===========================================================================
0000941C                            
0000941C                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000941C 5428 0024                  		addq.b	#2,$24(a0)
00009420 6100 0000                  		bsr.w	SingleObjLoad
00009424 6600                       		bne.s	Obj27_Main
00009426 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000942A 3368 0008 0008             		move.w	8(a0),8(a1)
00009430 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009436 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000943C                            
0000943C                            Obj27_Main:				; XREF: Obj27_Index
0000943C 5428 0024                  		addq.b	#2,$24(a0)
00009440 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009448 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000944E 117C 0004 0001             		move.b	#4,1(a0)
00009454 117C 0001 0018             		move.b	#1,$18(a0)
0000945A 117C 0000 0020             		move.b	#0,$20(a0)
00009460 117C 000C 0019             		move.b	#$C,$19(a0)
00009466                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009466 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
0000946C 117C 0000 001A             		move.b	#0,$1A(a0)
00009472 303C 00C1                  		move.w	#$C1,d0
00009476 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000947C                            
0000947C 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
00009482 1028 0028                  		move.b	$28(a0),d0
00009486 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
0000948C 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
00009492                            
00009492                            Obj27_Animate:				; XREF: Obj27_Index
00009492 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009496 6A00                       		bpl.s	Obj27_Display
00009498                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009498 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
0000949E 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000094A2 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
000094A8 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000094AC                            
000094AC                            Obj27_Display:
000094AC 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
000094B2 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
000094B8 6000 0000                  		bra.w	DisplaySprite
000094BC                            ; ===========================================================================
000094BC                            ; ---------------------------------------------------------------------------
000094BC                            Obj27_ExplosionXYSpd:
000094BC                            		; dc.w	-$350, -$300	; Left
000094BC                            		; dc.w	-$200, -$450	; Near middle (left)
000094BC                            		; dc.w	0, -$500	; Middle
000094BC                            		; dc.w	$200, -$450	; Near middle (right)
000094BC                            		; dc.w	$350, -$300	; Right
000094BC                            
000094BC FEB0 FC00                  		dc.w	-$150, -$400	; Left
000094C0 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
000094C4 0000 FA00                  		dc.w	0, -$600	; Middle
000094C8 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
000094CC 0150 FC00                  		dc.w	$150, -$400	; Right
000094D0                            
000094D0 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
000094EA                            ; ---------------------------------------------------------------------------
000094EA                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
000094EA                            ; ---------------------------------------------------------------------------
000094EA                            
000094EA                            Obj3F:					; XREF: Obj_Index
000094EA 7000                       		moveq	#0,d0
000094EC 1028 0024                  		move.b	$24(a0),d0
000094F0 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
000094F4 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
000094F8                            ; ===========================================================================
000094F8 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
000094FA FF9A                       		dc.w Obj27_Animate-Obj3F_Index
000094FC                            ; ===========================================================================
000094FC                            
000094FC                            Obj3F_Main:				; XREF: Obj3F_Index
000094FC 5428 0024                  		addq.b	#2,$24(a0)
00009500 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009508 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000950E 117C 0004 0001             		move.b	#4,1(a0)
00009514 117C 0001 0018             		move.b	#1,$18(a0)
0000951A 117C 0000 0020             		move.b	#0,$20(a0)
00009520 117C 000C 0019             		move.b	#$C,$19(a0)
00009526 117C 0007 001E             		move.b	#7,$1E(a0)
0000952C 117C 0000 001A             		move.b	#0,$1A(a0)
00009532 303C 00C4                  		move.w	#$C4,d0
00009536 4EF9 0000 139E             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000953C                            ; ===========================================================================
0000953C                            Ani_obj1E:
0000953C                            	include "_anim\obj1E.asm"
0000953C                            ; ---------------------------------------------------------------------------
0000953C                            ; Animation script - doors (SBZ)
0000953C                            ; ---------------------------------------------------------------------------
0000953C 0000                       		dc.w byte_8E4A-Ani_obj1E
0000953E 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009556 00                         		even
00009556 00                         		even
00009556                            
00009556                            ; ---------------------------------------------------------------------------
00009556                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009556                            ; ---------------------------------------------------------------------------
00009556                            Map_obj1E:
00009556                            	include "_maps\obj1E.asm"
00009556                            Map_a7ad:
00009556 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
00009558 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
0000955A 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
0000955C 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
0000955E 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
00009560 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
00009562 02                         Map_a7ad_C: 	dc.b $2
00009563 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009568 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
0000956D 02                         Map_a7ad_17: 	dc.b $2
0000956E EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009573 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009578 02                         Map_a7ad_22: 	dc.b $2
00009579 F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
0000957E 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
00009583 02                         Map_a7ad_2D: 	dc.b $2
00009584 E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
00009589 F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
0000958E 02                         Map_a7ad_38: 	dc.b $2
0000958F F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
00009594 E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
00009599 02                         Map_a7ad_43: 	dc.b $2
0000959A F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
0000959F E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
000095A4                            	even
000095A4                            	even
000095A4                            
000095A4                            ; ---------------------------------------------------------------------------
000095A4                            ; Sprite mappings - explosion
000095A4                            ; ---------------------------------------------------------------------------
000095A4                            Map_obj24:
000095A4                            	include "_maps\obj24.asm"
000095A4                            ; ---------------------------------------------------------------------------
000095A4                            ; Sprite mappings - explosion
000095A4                            ; ---------------------------------------------------------------------------
000095A4 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
000095A8 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
000095AC 01                         byte_8EAE:	dc.b 1
000095AD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000095B2 01                         byte_8EB4:	dc.b 1
000095B3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000095B8 01                         byte_8EBA:	dc.b 1
000095B9 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000095BE 01                         byte_8EC0:	dc.b 1
000095BF F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
000095C4                            		even
000095C4                            		even
000095C4                            
000095C4                            ; ---------------------------------------------------------------------------
000095C4                            ; Sprite mappings - explosion
000095C4                            ; ---------------------------------------------------------------------------
000095C4 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
000095C8 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
000095CC 0000                       		dc.w byte_8EF7-Map_obj27
000095CE 01                         byte_8ED0:	dc.b 1
000095CF F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000095D4 01                         byte_8ED6:	dc.b 1
000095D5 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
000095DA 01                         byte_8EDC:	dc.b 1
000095DB F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
000095E0 04                         byte_8EE2:	dc.b 4
000095E1 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
000095E6 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
000095EB 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
000095F0 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
000095F5 04                         byte_8EF7:	dc.b 4
000095F6 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
000095FB EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009600 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009605 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000960A                            		even
0000960A                            ; ---------------------------------------------------------------------------
0000960A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000960A                            ; ---------------------------------------------------------------------------
0000960A FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000960C 0000                       		dc.w byte_8F16-Map_obj3F
0000960E 0000                       		dc.w byte_8F1C-Map_obj3F
00009610 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009612 FFEB                       		dc.w byte_8EF7-Map_obj3F
00009614 01                         byte_8F16:	dc.b 1
00009615 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000961A 01                         byte_8F1C:	dc.b 1
0000961B F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009620                            		even
00009620                            ; ===========================================================================
00009620                            ; ---------------------------------------------------------------------------
00009620                            ; Object 28 - animals
00009620                            ; ---------------------------------------------------------------------------
00009620                            
00009620                            Obj28:					; XREF: Obj_Index
00009620 7000                       		moveq	#0,d0
00009622 1028 0024                  		move.b	$24(a0),d0
00009626 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000962A 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000962E                            ; ===========================================================================
0000962E 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009632 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009636 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000963A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000963E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009642 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009646 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000964A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000964E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009652 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009656 0000                       		dc.w loc_92D6-Obj28_Index
00009658                            
00009658 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1, 0,	5, 0,	5
00009668                            
00009668 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000966C 0000 0000                  		dc.l Map_obj28
00009670 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009674 0000 0000                  		dc.l Map_obj28a		; mappings address
00009678 FE80 FD00                  		dc.w $FE80, $FD00
0000967C 0000 0000                  		dc.l Map_obj28
00009680 FEC0 FE80                  		dc.w $FEC0, $FE80
00009684 0000 0000                  		dc.l Map_obj28a
00009688 FE40 FD00                  		dc.w $FE40, $FD00
0000968C 0000 0000                  		dc.l Map_obj28b
00009690 FD00 FC00                  		dc.w $FD00, $FC00
00009694 0000 0000                  		dc.l Map_obj28a
00009698 FD80 FC80                  		dc.w $FD80, $FC80
0000969C 0000 0000                  		dc.l Map_obj28b
000096A0                            
000096A0 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
000096B0 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000096C0 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000096CC                            
000096CC 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000096E0 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
000096F4 0000 0000                  		dc.l Map_obj28b
000096F8                            
000096F8 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000970A 0565 05B3                  		dc.w $565, $5B3
0000970E                            ; ===========================================================================
0000970E                            
0000970E                            Obj28_Ending:				; XREF: Obj28_Index
0000970E 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009712 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009716 7000                       		moveq	#0,d0
00009718 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000971C D040                       		add.w	d0,d0		; multiply d0 by 2
0000971E 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009722 0440 0014                  		subi.w	#$14,d0
00009726 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000972C D040                       		add.w	d0,d0
0000972E 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009734 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009738 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000973E 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009744 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000974A 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009750 117C 000C 0016             		move.b	#$C,$16(a0)
00009756 117C 0004 0001             		move.b	#4,1(a0)
0000975C 08E8 0000 0001             		bset	#0,1(a0)
00009762 117C 0006 0018             		move.b	#6,$18(a0)
00009768 117C 0008 0019             		move.b	#8,$19(a0)
0000976E 117C 0007 001E             		move.b	#7,$1E(a0)
00009774 6000 0000                  		bra.w	DisplaySprite
00009778                            ; ===========================================================================
00009778                            
00009778                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009778 5428 0024                  		addq.b	#2,$24(a0)
0000977C 6100 939C                  		bsr.w	RandomNumber
00009780 0240 0001                  		andi.w	#1,d0
00009784 7200                       		moveq	#0,d1
00009786 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000978A D241                       		add.w	d1,d1
0000978C D240                       		add.w	d0,d1
0000978E 43FA FEC8                  		lea	Obj28_VarIndex(pc),a1
00009792 1031 1000                  		move.b	(a1,d1.w),d0
00009796 1140 0030                  		move.b	d0,$30(a0)
0000979A E748                       		lsl.w	#3,d0
0000979C 43FA FECA                  		lea	Obj28_Variables(pc),a1
000097A0 D2C0                       		adda.w	d0,a1
000097A2 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
000097A6 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
000097AA 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
000097AE 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
000097B4 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000097BA 6700                       		beq.s	loc_90C0	; if yes, branch
000097BC 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000097C2                            
000097C2                            loc_90C0:
000097C2 117C 000C 0016             		move.b	#$C,$16(a0)
000097C8 117C 0004 0001             		move.b	#4,1(a0)
000097CE 08E8 0000 0001             		bset	#0,1(a0)
000097D4 117C 0006 0018             		move.b	#6,$18(a0)
000097DA 117C 0008 0019             		move.b	#8,$19(a0)
000097E0 117C 0007 001E             		move.b	#7,$1E(a0)
000097E6 117C 0002 001A             		move.b	#2,$1A(a0)
000097EC 317C FC00 0012             		move.w	#-$400,$12(a0)
000097F2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000097F6 6600                       		bne.s	loc_911C
000097F8 6100 0000                  		bsr.w	SingleObjLoad
000097FC 6600                       		bne.s	Obj28_Display
000097FE 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009802 3368 0008 0008             		move.w	8(a0),8(a1)
00009808 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000980E 3028 003E                  		move.w	$3E(a0),d0
00009812 E248                       		lsr.w	#1,d0
00009814 1340 001A                  		move.b	d0,$1A(a1)
00009818                            
00009818                            Obj28_Display:
00009818 6000 0000                  		bra.w	DisplaySprite
0000981C                            ; ===========================================================================
0000981C                            
0000981C                            loc_911C:
0000981C 117C 0012 0024             		move.b	#$12,$24(a0)
00009822 4268 0010                  		clr.w	$10(a0)
00009826 6000 0000                  		bra.w	DisplaySprite
0000982A                            ; ===========================================================================
0000982A                            
0000982A                            loc_912A:				; XREF: Obj28_Index
0000982A 4A28 0001                  		tst.b	1(a0)
0000982E 6A00 0000                  		bpl.w	DeleteObject
00009832 6100 0000                  		bsr.w	ObjectFall
00009836 4A68 0012                  		tst.w	$12(a0)
0000983A 6B00                       		bmi.s	loc_9180
0000983C 4EB9 0000 0000             		jsr	ObjHitFloor
00009842 4A41                       		tst.w	d1
00009844 6A00                       		bpl.s	loc_9180
00009846 D368 000C                  		add.w	d1,$C(a0)
0000984A 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009850 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009856 117C 0001 001A             		move.b	#1,$1A(a0)
0000985C 1028 0030                  		move.b	$30(a0),d0
00009860 D000                       		add.b	d0,d0
00009862 5800                       		addq.b	#4,d0
00009864 1140 0024                  		move.b	d0,$24(a0)
00009868 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000986C 6700                       		beq.s	loc_9180
0000986E 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009874 6700                       		beq.s	loc_9180
00009876 4468 0010                  		neg.w	$10(a0)
0000987A 0868 0000 0001             		bchg	#0,1(a0)
00009880                            
00009880                            loc_9180:
00009880 6000 0000                  		bra.w	DisplaySprite
00009884                            ; ===========================================================================
00009884                            
00009884                            loc_9184:				; XREF: Obj28_Index
00009884 6100 0000                  		bsr.w	ObjectFall
00009888 117C 0001 001A             		move.b	#1,$1A(a0)
0000988E 4A68 0012                  		tst.w	$12(a0)
00009892 6B00                       		bmi.s	loc_91AE
00009894 117C 0000 001A             		move.b	#0,$1A(a0)
0000989A 4EB9 0000 0000             		jsr	ObjHitFloor
000098A0 4A41                       		tst.w	d1
000098A2 6A00                       		bpl.s	loc_91AE
000098A4 D368 000C                  		add.w	d1,$C(a0)
000098A8 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098AE                            
000098AE                            loc_91AE:
000098AE 4A28 0028                  		tst.b	$28(a0)
000098B2 6600                       		bne.s	loc_9224
000098B4 4A28 0001                  		tst.b	1(a0)
000098B8 6A00 0000                  		bpl.w	DeleteObject
000098BC 6000 0000                  		bra.w	DisplaySprite
000098C0                            ; ===========================================================================
000098C0                            
000098C0                            loc_91C0:				; XREF: Obj28_Index
000098C0 6100 0000                  		bsr.w	SpeedToPos
000098C4 0668 0018 0012             		addi.w	#$18,$12(a0)
000098CA 4A68 0012                  		tst.w	$12(a0)
000098CE 6B00                       		bmi.s	loc_91FC
000098D0 4EB9 0000 0000             		jsr	ObjHitFloor
000098D6 4A41                       		tst.w	d1
000098D8 6A00                       		bpl.s	loc_91FC
000098DA D368 000C                  		add.w	d1,$C(a0)
000098DE 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098E4 4A28 0028                  		tst.b	$28(a0)
000098E8 6700                       		beq.s	loc_91FC
000098EA 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
000098F0 6700                       		beq.s	loc_91FC
000098F2 4468 0010                  		neg.w	$10(a0)
000098F6 0868 0000 0001             		bchg	#0,1(a0)
000098FC                            
000098FC                            loc_91FC:
000098FC 5328 001E                  		subq.b	#1,$1E(a0)
00009900 6A00                       		bpl.s	loc_9212
00009902 117C 0001 001E             		move.b	#1,$1E(a0)
00009908 5228 001A                  		addq.b	#1,$1A(a0)
0000990C 0228 0001 001A             		andi.b	#1,$1A(a0)
00009912                            
00009912                            loc_9212:
00009912 4A28 0028                  		tst.b	$28(a0)
00009916 6600                       		bne.s	loc_9224
00009918 4A28 0001                  		tst.b	1(a0)
0000991C 6A00 0000                  		bpl.w	DeleteObject
00009920 6000 0000                  		bra.w	DisplaySprite
00009924                            ; ===========================================================================
00009924                            
00009924                            loc_9224:				; XREF: Obj28_Index
00009924 3028 0008                  		move.w	8(a0),d0
00009928 9078 D008                  		sub.w	($FFFFD008).w,d0
0000992C 6500                       		bcs.s	loc_923C
0000992E 0440 0180                  		subi.w	#$180,d0
00009932 6A00                       		bpl.s	loc_923C
00009934 4A28 0001                  		tst.b	1(a0)
00009938 6A00 0000                  		bpl.w	DeleteObject
0000993C                            
0000993C                            loc_923C:
0000993C 6000 0000                  		bra.w	DisplaySprite
00009940                            ; ===========================================================================
00009940                            
00009940                            loc_9240:				; XREF: Obj28_Index
00009940 4A28 0001                  		tst.b	1(a0)
00009944 6A00 0000                  		bpl.w	DeleteObject
00009948 5368 0036                  		subq.w	#1,$36(a0)
0000994C 6600 0000                  		bne.w	loc_925C
00009950 117C 0002 0024             		move.b	#2,$24(a0)
00009956 117C 0003 0018             		move.b	#3,$18(a0)
0000995C                            
0000995C                            loc_925C:
0000995C 6000 0000                  		bra.w	DisplaySprite
00009960                            ; ===========================================================================
00009960                            
00009960                            loc_9260:				; XREF: Obj28_Index
00009960 6100 0000                  		bsr.w	sub_9404
00009964 6400                       		bcc.s	loc_927C
00009966 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000996C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009972 117C 000E 0024             		move.b	#$E,$24(a0)
00009978 6000 FF46                  		bra.w	loc_91C0
0000997C                            ; ===========================================================================
0000997C                            
0000997C                            loc_927C:
0000997C 6000 FFA6                  		bra.w	loc_9224
00009980                            ; ===========================================================================
00009980                            
00009980                            loc_9280:				; XREF: Obj28_Index
00009980 6100 0000                  		bsr.w	sub_9404
00009984 6A00                       		bpl.s	loc_92B6
00009986 4268 0010                  		clr.w	$10(a0)
0000998A 4268 0032                  		clr.w	$32(a0)
0000998E 6100 0000                  		bsr.w	SpeedToPos
00009992 0668 0018 0012             		addi.w	#$18,$12(a0)
00009998 6100 0000                  		bsr.w	loc_93C4
0000999C 6100 0000                  		bsr.w	loc_93EC
000099A0 5328 001E                  		subq.b	#1,$1E(a0)
000099A4 6A00                       		bpl.s	loc_92B6
000099A6 117C 0001 001E             		move.b	#1,$1E(a0)
000099AC 5228 001A                  		addq.b	#1,$1A(a0)
000099B0 0228 0001 001A             		andi.b	#1,$1A(a0)
000099B6                            
000099B6                            loc_92B6:
000099B6 6000 FF6C                  		bra.w	loc_9224
000099BA                            ; ===========================================================================
000099BA                            
000099BA                            loc_92BA:				; XREF: Obj28_Index
000099BA 6100 0000                  		bsr.w	sub_9404
000099BE 6A00                       		bpl.s	loc_9310
000099C0 3168 0032 0010             		move.w	$32(a0),$10(a0)
000099C6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099CC 117C 0004 0024             		move.b	#4,$24(a0)
000099D2 6000 FEB0                  		bra.w	loc_9184
000099D6                            ; ===========================================================================
000099D6                            
000099D6                            loc_92D6:				; XREF: Obj28_Index
000099D6 6100 0000                  		bsr.w	ObjectFall
000099DA 117C 0001 001A             		move.b	#1,$1A(a0)
000099E0 4A68 0012                  		tst.w	$12(a0)
000099E4 6B00                       		bmi.s	loc_9310
000099E6 117C 0000 001A             		move.b	#0,$1A(a0)
000099EC 4EB9 0000 0000             		jsr	ObjHitFloor
000099F2 4A41                       		tst.w	d1
000099F4 6A00                       		bpl.s	loc_9310
000099F6 4628 0029                  		not.b	$29(a0)
000099FA 6600                       		bne.s	loc_9306
000099FC 4468 0010                  		neg.w	$10(a0)
00009A00 0868 0000 0001             		bchg	#0,1(a0)
00009A06                            
00009A06                            loc_9306:
00009A06 D368 000C                  		add.w	d1,$C(a0)
00009A0A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A10                            
00009A10                            loc_9310:
00009A10 6000 FF12                  		bra.w	loc_9224
00009A14                            ; ===========================================================================
00009A14                            
00009A14                            loc_9314:				; XREF: Obj28_Index
00009A14 6100 0000                  		bsr.w	sub_9404
00009A18 6A00                       		bpl.s	loc_932E
00009A1A 4268 0010                  		clr.w	$10(a0)
00009A1E 4268 0032                  		clr.w	$32(a0)
00009A22 6100 0000                  		bsr.w	ObjectFall
00009A26 6100 0000                  		bsr.w	loc_93C4
00009A2A 6100 0000                  		bsr.w	loc_93EC
00009A2E                            
00009A2E                            loc_932E:
00009A2E 6000 FEF4                  		bra.w	loc_9224
00009A32                            ; ===========================================================================
00009A32                            
00009A32                            loc_9332:				; XREF: Obj28_Index
00009A32 6100 0000                  		bsr.w	sub_9404
00009A36 6A00                       		bpl.s	loc_936C
00009A38 6100 0000                  		bsr.w	ObjectFall
00009A3C 117C 0001 001A             		move.b	#1,$1A(a0)
00009A42 4A68 0012                  		tst.w	$12(a0)
00009A46 6B00                       		bmi.s	loc_936C
00009A48 117C 0000 001A             		move.b	#0,$1A(a0)
00009A4E 4EB9 0000 0000             		jsr	ObjHitFloor
00009A54 4A41                       		tst.w	d1
00009A56 6A00                       		bpl.s	loc_936C
00009A58 4468 0010                  		neg.w	$10(a0)
00009A5C 0868 0000 0001             		bchg	#0,1(a0)
00009A62 D368 000C                  		add.w	d1,$C(a0)
00009A66 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A6C                            
00009A6C                            loc_936C:
00009A6C 6000 FEB6                  		bra.w	loc_9224
00009A70                            ; ===========================================================================
00009A70                            
00009A70                            loc_9370:				; XREF: Obj28_Index
00009A70 6100 0000                  		bsr.w	sub_9404
00009A74 6A00                       		bpl.s	loc_93C0
00009A76 6100 0000                  		bsr.w	SpeedToPos
00009A7A 0668 0018 0012             		addi.w	#$18,$12(a0)
00009A80 4A68 0012                  		tst.w	$12(a0)
00009A84 6B00                       		bmi.s	loc_93AA
00009A86 4EB9 0000 0000             		jsr	ObjHitFloor
00009A8C 4A41                       		tst.w	d1
00009A8E 6A00                       		bpl.s	loc_93AA
00009A90 4628 0029                  		not.b	$29(a0)
00009A94 6600                       		bne.s	loc_93A0
00009A96 4468 0010                  		neg.w	$10(a0)
00009A9A 0868 0000 0001             		bchg	#0,1(a0)
00009AA0                            
00009AA0                            loc_93A0:
00009AA0 D368 000C                  		add.w	d1,$C(a0)
00009AA4 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009AAA                            
00009AAA                            loc_93AA:
00009AAA 5328 001E                  		subq.b	#1,$1E(a0)
00009AAE 6A00                       		bpl.s	loc_93C0
00009AB0 117C 0001 001E             		move.b	#1,$1E(a0)
00009AB6 5228 001A                  		addq.b	#1,$1A(a0)
00009ABA 0228 0001 001A             		andi.b	#1,$1A(a0)
00009AC0                            
00009AC0                            loc_93C0:
00009AC0 6000 FE62                  		bra.w	loc_9224
00009AC4                            ; ===========================================================================
00009AC4                            
00009AC4                            loc_93C4:
00009AC4 117C 0001 001A             		move.b	#1,$1A(a0)
00009ACA 4A68 0012                  		tst.w	$12(a0)
00009ACE 6B00                       		bmi.s	locret_93EA
00009AD0 117C 0000 001A             		move.b	#0,$1A(a0)
00009AD6 4EB9 0000 0000             		jsr	ObjHitFloor
00009ADC 4A41                       		tst.w	d1
00009ADE 6A00                       		bpl.s	locret_93EA
00009AE0 D368 000C                  		add.w	d1,$C(a0)
00009AE4 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009AEA                            
00009AEA                            locret_93EA:
00009AEA 4E75                       		rts	
00009AEC                            ; ===========================================================================
00009AEC                            
00009AEC                            loc_93EC:
00009AEC 08E8 0000 0001             		bset	#0,1(a0)
00009AF2 3028 0008                  		move.w	8(a0),d0
00009AF6 9078 D008                  		sub.w	($FFFFD008).w,d0
00009AFA 6400                       		bcc.s	locret_9402
00009AFC 08A8 0000 0001             		bclr	#0,1(a0)
00009B02                            
00009B02                            locret_9402:
00009B02 4E75                       		rts	
00009B04                            
00009B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B04                            
00009B04                            
00009B04                            sub_9404:
00009B04 3038 D008                  		move.w	($FFFFD008).w,d0
00009B08 9068 0008                  		sub.w	8(a0),d0
00009B0C 0440 00B8                  		subi.w	#$B8,d0
00009B10 4E75                       		rts	
00009B12                            ; End of function sub_9404
00009B12                            
00009B12                            ; ===========================================================================
00009B12                            ; ---------------------------------------------------------------------------
00009B12                            ; Object 29 - points that appear when you destroy something
00009B12                            ; ---------------------------------------------------------------------------
00009B12                            
00009B12                            Obj29:					; XREF: Obj_Index
00009B12 7000                       		moveq	#0,d0
00009B14 1028 0024                  		move.b	$24(a0),d0
00009B18 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009B1C 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009B20 6000 0000                  		bra.w	DisplaySprite
00009B24                            ; ===========================================================================
00009B24 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009B26 0000                       		dc.w Obj29_Slower-Obj29_Index
00009B28                            ; ===========================================================================
00009B28                            
00009B28                            Obj29_Main:				; XREF: Obj29_Index
00009B28 5428 0024                  		addq.b	#2,$24(a0)
00009B2C 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009B34 317C 2797 0002             		move.w	#$2797,2(a0)
00009B3A 117C 0004 0001             		move.b	#4,1(a0)
00009B40 117C 0001 0018             		move.b	#1,$18(a0)
00009B46 117C 0008 0019             		move.b	#8,$19(a0)
00009B4C 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009B52                            
00009B52                            Obj29_Slower:				; XREF: Obj29_Index
00009B52 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009B56 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009B5A 6100 0000                  		bsr.w	SpeedToPos
00009B5E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009B64 4E75                       		rts	
00009B66                            ; ===========================================================================
00009B66                            ; ---------------------------------------------------------------------------
00009B66                            ; Sprite mappings - animals
00009B66                            ; ---------------------------------------------------------------------------
00009B66                            Map_obj28:
00009B66                            	include "_maps\obj28.asm"
00009B66                            ; ---------------------------------------------------------------------------
00009B66                            ; Sprite mappings - animals
00009B66                            ; ---------------------------------------------------------------------------
00009B66 0000                       		dc.w byte_9472-Map_obj28
00009B68 0000                       		dc.w byte_9478-Map_obj28
00009B6A 0000                       		dc.w byte_946C-Map_obj28
00009B6C 01                         byte_946C:	dc.b 1
00009B6D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B72 01                         byte_9472:	dc.b 1
00009B73 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009B78 01                         byte_9478:	dc.b 1
00009B79 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009B7E                            		even
00009B7E                            		even
00009B7E                            
00009B7E                            Map_obj28a:
00009B7E                            	include "_maps\obj28a.asm"
00009B7E                            ; ---------------------------------------------------------------------------
00009B7E                            ; Sprite mappings - animals
00009B7E                            ; ---------------------------------------------------------------------------
00009B7E 0000                       		dc.w byte_948A-Map_obj28a
00009B80 0000                       		dc.w byte_9490-Map_obj28a
00009B82 0000                       		dc.w byte_9484-Map_obj28a
00009B84 01                         byte_9484:	dc.b 1
00009B85 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B8A 01                         byte_948A:	dc.b 1
00009B8B FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009B90 01                         byte_9490:	dc.b 1
00009B91 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009B96                            		even
00009B96                            		even
00009B96                            
00009B96                            Map_obj28b:
00009B96                            	include "_maps\obj28b.asm"
00009B96                            ; ---------------------------------------------------------------------------
00009B96                            ; Sprite mappings - animals
00009B96                            ; ---------------------------------------------------------------------------
00009B96 0000                       		dc.w byte_94A2-Map_obj28b
00009B98 0000                       		dc.w byte_94A8-Map_obj28b
00009B9A 0000                       		dc.w byte_949C-Map_obj28b
00009B9C 01                         byte_949C:	dc.b 1
00009B9D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009BA2 01                         byte_94A2:	dc.b 1
00009BA3 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009BA8 01                         byte_94A8:	dc.b 1
00009BA9 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009BAE                            		even
00009BAE                            		even
00009BAE                            
00009BAE                            ; ---------------------------------------------------------------------------
00009BAE                            ; Sprite mappings - points that	appear when you	destroy	something
00009BAE                            ; ---------------------------------------------------------------------------
00009BAE                            Map_obj29:
00009BAE                            	include "_maps\obj29.asm"
00009BAE                            ; ---------------------------------------------------------------------------
00009BAE                            ; Sprite mappings - points that	appear when you	destroy	something
00009BAE                            ; ---------------------------------------------------------------------------
00009BAE 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009BB2 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009BB6 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009BBA 0000                       		dc.w byte_94E5-Map_obj29
00009BBC 01                         byte_94BC:	dc.b 1
00009BBD FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009BC2 01                         byte_94C2:	dc.b 1
00009BC3 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009BC8 01                         byte_94C8:	dc.b 1
00009BC9 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009BCE 01                         byte_94CE:	dc.b 1
00009BCF FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009BD4 01                         byte_94D4:	dc.b 1
00009BD5 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009BDA 02                         byte_94DA:	dc.b 2
00009BDB FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009BE0 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009BE5 02                         byte_94E5:	dc.b 2
00009BE6 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009BEB FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009BF0                            		even
00009BF0                            		even
00009BF0                            
00009BF0                            ; ===========================================================================
00009BF0                            ; ---------------------------------------------------------------------------
00009BF0                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009BF0                            ; ---------------------------------------------------------------------------
00009BF0                            
00009BF0                            Obj1F:					; XREF: Obj_Index
00009BF0 7000                       		moveq	#0,d0
00009BF2 1028 0024                  		move.b	$24(a0),d0
00009BF6 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009BFA 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009BFE                            ; ===========================================================================
00009BFE 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009C00 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009C02 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009C04 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009C06 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009C08                            ; ===========================================================================
00009C08                            
00009C08                            Obj1F_Main:				; XREF: Obj1F_Index
00009C08 117C 0010 0016             		move.b	#$10,$16(a0)
00009C0E 117C 0008 0017             		move.b	#8,$17(a0)
00009C14 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009C1C 317C 0400 0002             		move.w	#$400,2(a0)
00009C22 117C 0004 0001             		move.b	#4,1(a0)
00009C28 117C 0003 0018             		move.b	#3,$18(a0)
00009C2E 117C 0006 0020             		move.b	#6,$20(a0)
00009C34 117C 0015 0019             		move.b	#$15,$19(a0)
00009C3A 6100 0000                  		bsr.w	ObjectFall
00009C3E 4EB9 0000 0000             		jsr	ObjHitFloor
00009C44 4A41                       		tst.w	d1
00009C46 6A00                       		bpl.s	locret_955A
00009C48 D368 000C                  		add.w	d1,$C(a0)
00009C4C 1143 0026                  		move.b	d3,$26(a0)
00009C50 317C 0000 0012             		move.w	#0,$12(a0)
00009C56 5428 0024                  		addq.b	#2,$24(a0)
00009C5A                            
00009C5A                            locret_955A:
00009C5A 4E75                       		rts	
00009C5C                            ; ===========================================================================
00009C5C                            
00009C5C                            Obj1F_Action:				; XREF: Obj1F_Index
00009C5C 7000                       		moveq	#0,d0
00009C5E 1028 0025                  		move.b	$25(a0),d0
00009C62 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009C66 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009C6A 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009C70 6100 0000                  		bsr.w	AnimateSprite
00009C74 6000 0000                  		bra.w	MarkObjGone
00009C78                            ; ===========================================================================
00009C78 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009C7A 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009C7C                            ; ===========================================================================
00009C7C                            
00009C7C                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009C7C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009C80 6A00                       		bpl.s	locret_95B6
00009C82 4A28 0001                  		tst.b	1(a0)
00009C86 6A00                       		bpl.s	Obj1F_Move
00009C88 0868 0001 0032             		bchg	#1,$32(a0)
00009C8E 6600                       		bne.s	Obj1F_MakeFire
00009C90                            
00009C90                            Obj1F_Move:
00009C90 5428 0025                  		addq.b	#2,$25(a0)
00009C94 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009C9A 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009CA0 6100 0000                  		bsr.w	Obj1F_SetAni
00009CA4 5600                       		addq.b	#3,d0
00009CA6 1140 001C                  		move.b	d0,$1C(a0)
00009CAA 0868 0000 0022             		bchg	#0,$22(a0)
00009CB0 6600                       		bne.s	locret_95B6
00009CB2 4468 0010                  		neg.w	$10(a0)		; change direction
00009CB6                            
00009CB6                            locret_95B6:
00009CB6 4E75                       		rts	
00009CB8                            ; ===========================================================================
00009CB8                            
00009CB8                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009CB8 317C 003B 0030             		move.w	#$3B,$30(a0)
00009CBE 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009CC4 6100 0000                  		bsr.w	SingleObjLoad
00009CC8 6600                       		bne.s	Obj1F_MakeFire2
00009CCA 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009CCE 137C 0006 0024             		move.b	#6,$24(a1)
00009CD4 3368 0008 0008             		move.w	8(a0),8(a1)
00009CDA 0469 0010 0008             		subi.w	#$10,8(a1)
00009CE0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009CE6 337C FF00 0010             		move.w	#-$100,$10(a1)
00009CEC                            
00009CEC                            Obj1F_MakeFire2:
00009CEC 6100 0000                  		bsr.w	SingleObjLoad
00009CF0 6600                       		bne.s	locret_9618
00009CF2 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009CF6 137C 0006 0024             		move.b	#6,$24(a1)
00009CFC 3368 0008 0008             		move.w	8(a0),8(a1)
00009D02 0669 0010 0008             		addi.w	#$10,8(a1)
00009D08 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D0E 337C 0100 0010             		move.w	#$100,$10(a1)
00009D14                            
00009D14                            locret_9618:
00009D14 4E75                       		rts	
00009D16                            ; ===========================================================================
00009D16                            
00009D16                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009D16 5368 0030                  		subq.w	#1,$30(a0)
00009D1A 6B00                       		bmi.s	loc_966E
00009D1C 6100 0000                  		bsr.w	SpeedToPos
00009D20 0868 0000 0032             		bchg	#0,$32(a0)
00009D26 6600                       		bne.s	loc_9654
00009D28 3628 0008                  		move.w	8(a0),d3
00009D2C 0643 0010                  		addi.w	#$10,d3
00009D30 0828 0000 0022             		btst	#0,$22(a0)
00009D36 6700                       		beq.s	loc_9640
00009D38 0443 0020                  		subi.w	#$20,d3
00009D3C                            
00009D3C                            loc_9640:
00009D3C 4EB9 0000 0000             		jsr	ObjHitFloor2
00009D42 0C41 FFF8                  		cmpi.w	#-8,d1
00009D46 6D00                       		blt.s	loc_966E
00009D48 0C41 000C                  		cmpi.w	#$C,d1
00009D4C 6C00                       		bge.s	loc_966E
00009D4E 4E75                       		rts	
00009D50                            ; ===========================================================================
00009D50                            
00009D50                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009D50 4EB9 0000 0000             		jsr	ObjHitFloor
00009D56 D368 000C                  		add.w	d1,$C(a0)
00009D5A 1143 0026                  		move.b	d3,$26(a0)
00009D5E 6100 0000                  		bsr.w	Obj1F_SetAni
00009D62 5600                       		addq.b	#3,d0
00009D64 1140 001C                  		move.b	d0,$1C(a0)
00009D68 4E75                       		rts	
00009D6A                            ; ===========================================================================
00009D6A                            
00009D6A                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009D6A 5528 0025                  		subq.b	#2,$25(a0)
00009D6E 317C 003B 0030             		move.w	#59,$30(a0)
00009D74 317C 0000 0010             		move.w	#0,$10(a0)
00009D7A 6100 0000                  		bsr.w	Obj1F_SetAni
00009D7E 1140 001C                  		move.b	d0,$1C(a0)
00009D82 4E75                       		rts	
00009D84                            ; ---------------------------------------------------------------------------
00009D84                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009D84                            ; ---------------------------------------------------------------------------
00009D84                            
00009D84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D84                            
00009D84                            
00009D84                            Obj1F_SetAni:				; XREF: loc_966E
00009D84 7000                       		moveq	#0,d0
00009D86 1628 0026                  		move.b	$26(a0),d3
00009D8A 6B00                       		bmi.s	loc_96A4
00009D8C 0C03 0006                  		cmpi.b	#6,d3
00009D90 6500                       		bcs.s	locret_96A2
00009D92 7001                       		moveq	#1,d0
00009D94 0828 0000 0022             		btst	#0,$22(a0)
00009D9A 6600                       		bne.s	locret_96A2
00009D9C 7002                       		moveq	#2,d0
00009D9E                            
00009D9E                            locret_96A2:
00009D9E 4E75                       		rts	
00009DA0                            ; ===========================================================================
00009DA0                            
00009DA0                            loc_96A4:				; XREF: Obj1F_SetAni
00009DA0 0C03 00FA                  		cmpi.b	#-6,d3
00009DA4 6200                       		bhi.s	locret_96B6
00009DA6 7002                       		moveq	#2,d0
00009DA8 0828 0000 0022             		btst	#0,$22(a0)
00009DAE 6600                       		bne.s	locret_96B6
00009DB0 7001                       		moveq	#1,d0
00009DB2                            
00009DB2                            locret_96B6:
00009DB2 4E75                       		rts	
00009DB4                            ; End of function Obj1F_SetAni
00009DB4                            
00009DB4                            ; ===========================================================================
00009DB4                            
00009DB4                            Obj1F_Delete:				; XREF: Obj1F_Index
00009DB4 6100 0000                  		bsr.w	DeleteObject
00009DB8 4E75                       		rts	
00009DBA                            ; ===========================================================================
00009DBA                            ; ---------------------------------------------------------------------------
00009DBA                            ; Sub-object - missile that the	Crabmeat throws
00009DBA                            ; ---------------------------------------------------------------------------
00009DBA                            
00009DBA                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009DBA 5428 0024                  		addq.b	#2,$24(a0)
00009DBE 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009DC6 317C 0400 0002             		move.w	#$400,2(a0)
00009DCC 117C 0004 0001             		move.b	#4,1(a0)
00009DD2 117C 0003 0018             		move.b	#3,$18(a0)
00009DD8 117C 0087 0020             		move.b	#$87,$20(a0)
00009DDE 117C 0008 0019             		move.b	#8,$19(a0)
00009DE4 317C FC00 0012             		move.w	#-$400,$12(a0)
00009DEA 117C 0007 001C             		move.b	#7,$1C(a0)
00009DF0                            
00009DF0                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009DF0 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009DF6 6100 0000                  		bsr.w	AnimateSprite
00009DFA 6100 0000                  		bsr.w	ObjectFall
00009DFE 6100 0000                  		bsr.w	DisplaySprite
00009E02 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E06 0640 00E0                  		addi.w	#$E0,d0
00009E0A B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009E0E 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009E10 4E75                       		rts	
00009E12                            ; ===========================================================================
00009E12                            
00009E12                            Obj1F_Delete2:
00009E12 6000 0000                  		bra.w	DeleteObject
00009E16                            ; ===========================================================================
00009E16                            Ani_obj1F:
00009E16                            	include "_anim\obj1F.asm"
00009E16                            ; ---------------------------------------------------------------------------
00009E16                            ; Animation script - Crabmeat enemy
00009E16                            ; ---------------------------------------------------------------------------
00009E16 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009E1C 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009E22 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009E26 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009E2A 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009E2E 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009E32 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009E38 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009E3E 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009E44 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009E48 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009E4C                            		even
00009E4C                            		even
00009E4C                            
00009E4C                            ; ---------------------------------------------------------------------------
00009E4C                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009E4C                            ; ---------------------------------------------------------------------------
00009E4C                            Map_obj1F:
00009E4C                            	include "_maps\obj1F.asm"
00009E4C                            Map_1514:
00009E4C 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009E4E 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009E50 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009E52 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009E54 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009E56 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009E58 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009E5A 03                         Map_1514_E: 	dc.b $3
00009E5B F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E60 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E65 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E6A 03                         Map_1514_1E: 	dc.b $3
00009E6B F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E70 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E75 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E7A 03                         Map_1514_2E: 	dc.b $3
00009E7B F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E80 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E85 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E8A 03                         Map_1514_3E: 	dc.b $3
00009E8B F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E90 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E95 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E9A 03                         Map_1514_4E: 	dc.b $3
00009E9B F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009EA0 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009EA5 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009EAA 01                         Map_1514_5E: 	dc.b $1
00009EAB F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009EB0 01                         Map_1514_64: 	dc.b $1
00009EB1 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009EB6                            	even
00009EB6                            	even
00009EB6                            
00009EB6                            ; ===========================================================================
00009EB6                            ; ---------------------------------------------------------------------------
00009EB6                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009EB6                            ; ---------------------------------------------------------------------------
00009EB6                            
00009EB6                            Obj22:					; XREF: Obj_Index
00009EB6 7000                       		moveq	#0,d0
00009EB8 1028 0024                  		move.b	$24(a0),d0
00009EBC 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009EC0 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009EC4                            ; ===========================================================================
00009EC4 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009EC6 0000                       		dc.w Obj22_Action-Obj22_Index
00009EC8 0000                       		dc.w Obj22_Delete-Obj22_Index
00009ECA                            ; ===========================================================================
00009ECA                            
00009ECA                            Obj22_Main:				; XREF: Obj22_Index
00009ECA 5428 0024                  		addq.b	#2,$24(a0)
00009ECE 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009ED6 317C 0444 0002             		move.w	#$444,2(a0)
00009EDC 117C 0004 0001             		move.b	#4,1(a0)
00009EE2 117C 0003 0018             		move.b	#3,$18(a0)
00009EE8 117C 0008 0020             		move.b	#8,$20(a0)
00009EEE 117C 0018 0019             		move.b	#$18,$19(a0)
00009EF4                            
00009EF4                            Obj22_Action:				; XREF: Obj22_Index
00009EF4 7000                       		moveq	#0,d0
00009EF6 1028 0025                  		move.b	$25(a0),d0
00009EFA 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009EFE 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009F02 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009F08 6100 0000                  		bsr.w	AnimateSprite
00009F0C 6000 0000                  		bra.w	MarkObjGone
00009F10                            ; ===========================================================================
00009F10 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009F12 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009F14                            ; ===========================================================================
00009F14                            
00009F14                            Obj22_Move:				; XREF: Obj22_Index2
00009F14 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009F18 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009F1A 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009F20 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009F22 5428 0025                  		addq.b	#2,$25(a0)
00009F26 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009F2C 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009F32 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009F38 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009F3E 6600                       		bne.s	locret_986C	; if not, branch
00009F40 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009F44                            
00009F44                            locret_986C:
00009F44 4E75                       		rts	
00009F46                            ; ===========================================================================
00009F46                            
00009F46                            Obj22_Fire:				; XREF: Obj22_Move
00009F46 6100 0000                  		bsr.w	SingleObjLoad
00009F4A 6600                       		bne.s	locret_98D0
00009F4C 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009F50 3368 0008 0008             		move.w	8(a0),8(a1)
00009F56 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F5C 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009F62 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009F68 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009F6E 303C 0018                  		move.w	#$18,d0
00009F72 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009F78 6600                       		bne.s	loc_98AA	; if not, branch
00009F7A 4440                       		neg.w	d0
00009F7C 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009F80                            
00009F80                            loc_98AA:
00009F80 D169 0008                  		add.w	d0,8(a1)
00009F84 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009F8A 337C 000E 0032             		move.w	#$E,$32(a1)
00009F90 2348 003C                  		move.l	a0,$3C(a1)
00009F94 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009F9A 317C 003B 0032             		move.w	#$3B,$32(a0)
00009FA0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009FA6                            
00009FA6                            locret_98D0:
00009FA6 4E75                       		rts	
00009FA8                            ; ===========================================================================
00009FA8                            
00009FA8                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009FA8 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009FAC 6B00                       		bmi.s	Obj22_ChgDir
00009FAE 6100 0000                  		bsr.w	SpeedToPos
00009FB2 4A28 0034                  		tst.b	$34(a0)
00009FB6 6600                       		bne.s	locret_992A
00009FB8 3038 D008                  		move.w	($FFFFD008).w,d0
00009FBC 9068 0008                  		sub.w	8(a0),d0
00009FC0 6A00                       		bpl.s	Obj22_SetNrSonic
00009FC2 4440                       		neg.w	d0
00009FC4                            
00009FC4                            Obj22_SetNrSonic:
00009FC4 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009FC8 6400                       		bcc.s	locret_992A	; if not, branch
00009FCA 4A28 0001                  		tst.b	1(a0)
00009FCE 6A00                       		bpl.s	locret_992A
00009FD0 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009FD6 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009FDC 6000                       		bra.s	Obj22_Stop
00009FDE                            ; ===========================================================================
00009FDE                            
00009FDE                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009FDE 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009FE4 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009FEA 317C 003B 0032             		move.w	#59,$32(a0)
00009FF0                            
00009FF0                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009FF0 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009FF4 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009FFA 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A000                            
0000A000                            locret_992A:
0000A000 4E75                       		rts	
0000A002                            ; ===========================================================================
0000A002                            
0000A002                            Obj22_Delete:				; XREF: Obj22_Index
0000A002 6100 0000                  		bsr.w	DeleteObject
0000A006 4E75                       		rts	
0000A008                            ; ===========================================================================
0000A008                            ; ---------------------------------------------------------------------------
0000A008                            ; Object 23 - missile that Buzz	Bomber throws
0000A008                            ; ---------------------------------------------------------------------------
0000A008                            
0000A008                            Obj23:					; XREF: Obj_Index
0000A008 7000                       		moveq	#0,d0
0000A00A 1028 0024                  		move.b	$24(a0),d0
0000A00E 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A012 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A016                            ; ===========================================================================
0000A016 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A018 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A01A 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A01C 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A01E 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A020                            ; ===========================================================================
0000A020                            
0000A020                            Obj23_Main:				; XREF: Obj23_Index
0000A020 5368 0032                  		subq.w	#1,$32(a0)
0000A024 6A00                       		bpl.s	Obj23_ChkCancel
0000A026 5428 0024                  		addq.b	#2,$24(a0)
0000A02A 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A032 317C 2444 0002             		move.w	#$2444,2(a0)
0000A038 117C 0004 0001             		move.b	#4,1(a0)
0000A03E 117C 0003 0018             		move.b	#3,$18(a0)
0000A044 117C 0008 0019             		move.b	#8,$19(a0)
0000A04A 0228 0003 0022             		andi.b	#3,$22(a0)
0000A050 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A054 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A056 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A05C 117C 0087 0020             		move.b	#$87,$20(a0)
0000A062 117C 0001 001C             		move.b	#1,$1C(a0)
0000A068 6000                       		bra.s	Obj23_Animate2
0000A06A                            ; ===========================================================================
0000A06A                            
0000A06A                            Obj23_Animate:				; XREF: Obj23_Index
0000A06A 6100                       		bsr.s	Obj23_ChkCancel
0000A06C 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A072 6100 0000                  		bsr.w	AnimateSprite
0000A076 6000 0000                  		bra.w	DisplaySprite
0000A07A                            ; ---------------------------------------------------------------------------
0000A07A                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A07A                            ; destroyed, and if it has, then cancel	the missile
0000A07A                            ; ---------------------------------------------------------------------------
0000A07A                            
0000A07A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A07A                            
0000A07A                            
0000A07A                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A07A 2268 003C                  		movea.l	$3C(a0),a1
0000A07E 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A082 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A084 4E75                       		rts	
0000A086                            ; End of function Obj23_ChkCancel
0000A086                            
0000A086                            ; ===========================================================================
0000A086                            
0000A086                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A086 0828 0007 0022             		btst	#7,$22(a0)
0000A08C 6600                       		bne.s	Obj23_Explode
0000A08E 117C 0087 0020             		move.b	#$87,$20(a0)
0000A094 117C 0001 001C             		move.b	#1,$1C(a0)
0000A09A 6100 0000                  		bsr.w	SpeedToPos
0000A09E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A0A4 6100 0000                  		bsr.w	AnimateSprite
0000A0A8 6100 0000                  		bsr.w	DisplaySprite
0000A0AC 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A0B0 0640 00E0                  		addi.w	#$E0,d0
0000A0B4 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A0B8 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A0BA 4E75                       		rts	
0000A0BC                            ; ===========================================================================
0000A0BC                            
0000A0BC                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A0BC 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A0C0 117C 0000 0024             		move.b	#0,$24(a0)
0000A0C6 6000 F2D0                  		bra.w	Obj24
0000A0CA                            ; ===========================================================================
0000A0CA                            
0000A0CA                            Obj23_Delete:				; XREF: Obj23_Index
0000A0CA 6100 0000                  		bsr.w	DeleteObject
0000A0CE 4E75                       		rts	
0000A0D0                            ; ===========================================================================
0000A0D0                            
0000A0D0                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A0D0 4A28 0001                  		tst.b	1(a0)
0000A0D4 6AF4                       		bpl.s	Obj23_Delete
0000A0D6 6100 0000                  		bsr.w	SpeedToPos
0000A0DA                            
0000A0DA                            Obj23_Animate2:				; XREF: Obj23_Main
0000A0DA 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A0E0 6100 0000                  		bsr.w	AnimateSprite
0000A0E4 6100 0000                  		bsr.w	DisplaySprite
0000A0E8 4E75                       		rts	
0000A0EA                            ; ===========================================================================
0000A0EA                            Ani_obj22:
0000A0EA                            	include "_anim\obj22.asm"
0000A0EA                            ; ---------------------------------------------------------------------------
0000A0EA                            ; Animation script - Buzz Bomber enemy
0000A0EA                            ; ---------------------------------------------------------------------------
0000A0EA 0000                       		dc.w byte_9A1E-Ani_obj22
0000A0EC 0000                       		dc.w byte_9A22-Ani_obj22
0000A0EE 0000                       		dc.w byte_9A26-Ani_obj22
0000A0F0 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A0F4 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A0F8 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A0FC                            		even
0000A0FC                            		even
0000A0FC                            
0000A0FC                            Ani_obj23:
0000A0FC                            	include "_anim\obj23.asm"
0000A0FC                            ; ---------------------------------------------------------------------------
0000A0FC                            ; Animation script - missile that Buzz Bomber throws
0000A0FC                            ; ---------------------------------------------------------------------------
0000A0FC 0000                       		dc.w byte_9A2E-Ani_obj23
0000A0FE 0000                       		dc.w byte_9A32-Ani_obj23
0000A100 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A104 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A108                            		even
0000A108                            		even
0000A108                            
0000A108                            ; ---------------------------------------------------------------------------
0000A108                            ; Sprite mappings - Buzz Bomber	enemy
0000A108                            ; ---------------------------------------------------------------------------
0000A108                            Map_obj22:
0000A108                            	include "_maps\obj22.asm"
0000A108                            Map_e97a:
0000A108 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A10A 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A10C 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A10E 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A110 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A112 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A114 06                         Map_e97a_C: 	dc.b $6
0000A115 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A11A F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A11F 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A124 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A129 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A12E F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A133 06                         Map_e97a_2B: 	dc.b $6
0000A134 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A139 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A13E 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A143 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A148 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A14D F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A152 07                         Map_e97a_4A: 	dc.b $7
0000A153 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A158 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A15D F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A162 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A167 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A16C F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A171 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A176 07                         Map_e97a_6E: 	dc.b $7
0000A177 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A17C F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A181 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A186 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A18B 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A190 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A195 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A19A 06                         Map_e97a_92: 	dc.b $6
0000A19B F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A1A0 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A1A5 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A1AA 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A1AF F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A1B4 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A1B9 04                         Map_e97a_B1: 	dc.b $4
0000A1BA F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A1BF 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A1C4 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A1C9 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A1CE                            	even
0000A1CE                            	even
0000A1CE                            
0000A1CE                            ; ---------------------------------------------------------------------------
0000A1CE                            ; Sprite mappings - missile that Buzz Bomber throws
0000A1CE                            ; ---------------------------------------------------------------------------
0000A1CE                            Map_obj23:
0000A1CE                            	include "_maps\obj23.asm"
0000A1CE                            ; ---------------------------------------------------------------------------
0000A1CE                            ; Sprite mappings - missile that Buzz Bomber throws
0000A1CE                            ; ---------------------------------------------------------------------------
0000A1CE 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A1D2 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A1D6 01                         byte_9B0E:	dc.b 1
0000A1D7 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A1DC 01                         byte_9B14:	dc.b 1
0000A1DD F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A1E2 01                         byte_9B1A:	dc.b 1
0000A1E3 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A1E8 01                         byte_9B20:	dc.b 1
0000A1E9 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A1EE                            		even
0000A1EE                            		even
0000A1EE                            
0000A1EE                            ; ===========================================================================
0000A1EE                            ; ---------------------------------------------------------------------------
0000A1EE                            ; Object 25 - rings
0000A1EE                            ; ---------------------------------------------------------------------------
0000A1EE                            
0000A1EE                            Obj25:					; XREF: Obj_Index
0000A1EE 7000                       		moveq	#0,d0
0000A1F0 1028 0024                  		move.b	$24(a0),d0
0000A1F4 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A1F8 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A1FC                            ; ===========================================================================
0000A1FC 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A1FE 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A200 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A202 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A204 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A206                            ; ---------------------------------------------------------------------------
0000A206                            ; Distances between rings (format: horizontal, vertical)
0000A206                            ; ---------------------------------------------------------------------------
0000A206 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A208 1800                       		dc.b $18, 0		; horizontal normal
0000A20A 2000                       		dc.b $20, 0		; horizontal wide
0000A20C 0010                       		dc.b 0,	$10		; vertical tight
0000A20E 0018                       		dc.b 0,	$18		; vertical normal
0000A210 0020                       		dc.b 0,	$20		; vertical wide
0000A212 1010                       		dc.b $10, $10		; diagonal
0000A214 1818                       		dc.b $18, $18
0000A216 2020                       		dc.b $20, $20
0000A218 F010                       		dc.b $F0, $10
0000A21A E818                       		dc.b $E8, $18
0000A21C E020                       		dc.b $E0, $20
0000A21E 1008                       		dc.b $10, 8
0000A220 1810                       		dc.b $18, $10
0000A222 F008                       		dc.b $F0, 8
0000A224 E810                       		dc.b $E8, $10
0000A226                            ; ===========================================================================
0000A226                            
0000A226                            Obj25_Main:				; XREF: Obj25_Index
0000A226 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A22A 7000                       		moveq	#0,d0
0000A22C 1028 0023                  		move.b	$23(a0),d0
0000A230 45F2 0002                  		lea	2(a2,d0.w),a2
0000A234 1812                       		move.b	(a2),d4
0000A236 1228 0028                  		move.b	$28(a0),d1
0000A23A 1001                       		move.b	d1,d0
0000A23C 0241 0007                  		andi.w	#7,d1
0000A240 0C41 0007                  		cmpi.w	#7,d1
0000A244 6600                       		bne.s	loc_9B80
0000A246 7206                       		moveq	#6,d1
0000A248                            
0000A248                            loc_9B80:
0000A248 4841                       		swap	d1
0000A24A 323C 0000                  		move.w	#0,d1
0000A24E E808                       		lsr.b	#4,d0
0000A250 D040                       		add.w	d0,d0
0000A252 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A256 4885                       		ext.w	d5
0000A258 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A25C 4886                       		ext.w	d6
0000A25E 2248                       		movea.l	a0,a1
0000A260 3428 0008                  		move.w	8(a0),d2
0000A264 3628 000C                  		move.w	$C(a0),d3
0000A268 E20C                       		lsr.b	#1,d4
0000A26A 6500                       		bcs.s	loc_9C02
0000A26C 0892 0007                  		bclr	#7,(a2)
0000A270 6000                       		bra.s	loc_9BBA
0000A272                            ; ===========================================================================
0000A272                            
0000A272                            Obj25_MakeRings:
0000A272 4841                       		swap	d1
0000A274 E20C                       		lsr.b	#1,d4
0000A276 6500                       		bcs.s	loc_9C02
0000A278 0892 0007                  		bclr	#7,(a2)
0000A27C 6100 0000                  		bsr.w	SingleObjLoad
0000A280 6600                       		bne.s	loc_9C0E
0000A282                            
0000A282                            loc_9BBA:				; XREF: Obj25_Main
0000A282 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A286 5429 0024                  		addq.b	#2,$24(a1)
0000A28A 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A28E 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A294 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A298 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A2A0 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A2A6 137C 0004 0001             		move.b	#4,1(a1)
0000A2AC 137C 0002 0018             		move.b	#2,$18(a1)
0000A2B2 137C 0047 0020             		move.b	#$47,$20(a1)
0000A2B8 137C 0008 0019             		move.b	#8,$19(a1)
0000A2BE 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A2C4 1341 0034                  		move.b	d1,$34(a1)
0000A2C8                            
0000A2C8                            loc_9C02:
0000A2C8 5241                       		addq.w	#1,d1
0000A2CA D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A2CC D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A2CE 4841                       		swap	d1
0000A2D0 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A2D4                            
0000A2D4                            loc_9C0E:
0000A2D4 0812 0000                  		btst	#0,(a2)
0000A2D8 6600 0000                  		bne.w	DeleteObject
0000A2DC                            
0000A2DC                            Obj25_Animate:				; XREF: Obj25_Index
0000A2DC 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A2E2 6100 0000                  		bsr.w	DisplaySprite
0000A2E6 3028 0032                  		move.w	$32(a0),d0
0000A2EA 0240 FF80                  		andi.w	#$FF80,d0
0000A2EE 3238 F700                  		move.w	($FFFFF700).w,d1
0000A2F2 0441 0080                  		subi.w	#$80,d1
0000A2F6 0241 FF80                  		andi.w	#$FF80,d1
0000A2FA 9041                       		sub.w	d1,d0
0000A2FC 0C40 0280                  		cmpi.w	#$280,d0
0000A300 6200                       		bhi.s	Obj25_Delete
0000A302 4E75                       		rts	
0000A304                            ; ===========================================================================
0000A304                            
0000A304                            Obj25_Collect:				; XREF: Obj25_Index
0000A304 5428 0024                  		addq.b	#2,$24(a0)
0000A308 117C 0000 0020             		move.b	#0,$20(a0)
0000A30E 117C 0001 0018             		move.b	#1,$18(a0)
0000A314 6100 0000                  		bsr.w	CollectRing
0000A318 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A31C 7000                       		moveq	#0,d0
0000A31E 1028 0023                  		move.b	$23(a0),d0
0000A322 1228 0034                  		move.b	$34(a0),d1
0000A326 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A32A                            
0000A32A                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A32A 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A330 6100 0000                  		bsr.w	AnimateSprite
0000A334 6000 0000                  		bra.w	DisplaySprite
0000A338                            ; ===========================================================================
0000A338                            
0000A338                            Obj25_Delete:				; XREF: Obj25_Index
0000A338 6000 0000                  		bra.w	DeleteObject
0000A33C                            
0000A33C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A33C                            
0000A33C                            
0000A33C                            CollectRing:				; XREF: Obj25_Collect
0000A33C 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A340 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A346 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A34A 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A350 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A352 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A358 6700                       		beq.s	loc_9CA4
0000A35A 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A360 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A362 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A368 6600                       		bne.s	Obj25_PlaySnd
0000A36A                            
0000A36A                            loc_9CA4:
0000A36A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A36E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A372 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A376                            
0000A376                            Obj25_PlaySnd:
0000A376 4EF9 0000 139E             		jmp	(PlaySound_Special).l
0000A37C                            ; End of function CollectRing
0000A37C                            
0000A37C                            ; ===========================================================================
0000A37C                            ; ---------------------------------------------------------------------------
0000A37C                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A37C                            ; ---------------------------------------------------------------------------
0000A37C                            
0000A37C                            Obj37:					; XREF: Obj_Index
0000A37C 7000                       		moveq	#0,d0
0000A37E 1028 0024                  		move.b	$24(a0),d0
0000A382 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A386 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A38A                            ; ===========================================================================
0000A38A 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A38C 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A38E 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A390 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A392 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A394                            ; ===========================================================================
0000A394                            
0000A394                            Obj37_CountRings:			; XREF: Obj37_Index
0000A394 2248                       		movea.l	a0,a1
0000A396 7A00                       		moveq	#0,d5
0000A398 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A39C 7020                       		moveq	#32,d0
0000A39E BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A3A0 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A3A2 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A3A4                            
0000A3A4                            loc_9CDE:
0000A3A4 5345                       		subq.w	#1,d5
0000A3A6 383C 0288                  		move.w	#$288,d4
0000A3AA 6000                       		bra.s	Obj37_MakeRings
0000A3AC                            ; ===========================================================================
0000A3AC                            
0000A3AC                            Obj37_Loop:
0000A3AC 6100 0000                  		bsr.w	SingleObjLoad
0000A3B0 6600 0000                  		bne.w	Obj37_ResetCounter
0000A3B4                            
0000A3B4                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A3B4 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A3B8 5429 0024                  		addq.b	#2,$24(a1)
0000A3BC 137C 0008 0016             		move.b	#8,$16(a1)
0000A3C2 137C 0008 0017             		move.b	#8,$17(a1)
0000A3C8 3368 0008 0008             		move.w	8(a0),8(a1)
0000A3CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A3D4 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A3DC 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A3E2 137C 0004 0001             		move.b	#4,1(a1)
0000A3E8 137C 0003 0018             		move.b	#3,$18(a1)
0000A3EE 137C 0047 0020             		move.b	#$47,$20(a1)
0000A3F4 137C 0008 0019             		move.b	#8,$19(a1)
0000A3FA 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A400 4A44                       		tst.w	d4
0000A402 6B00                       		bmi.s	loc_9D62
0000A404 3004                       		move.w	d4,d0
0000A406 6100 8738                  		bsr.w	CalcSine
0000A40A 3404                       		move.w	d4,d2
0000A40C E04A                       		lsr.w	#8,d2
0000A40E E560                       		asl.w	d2,d0
0000A410 E561                       		asl.w	d2,d1
0000A412 3400                       		move.w	d0,d2
0000A414 3601                       		move.w	d1,d3
0000A416 0604 0010                  		addi.b	#$10,d4
0000A41A 6400                       		bcc.s	loc_9D62
0000A41C 0444 0080                  		subi.w	#$80,d4
0000A420 6400                       		bcc.s	loc_9D62
0000A422 383C 0288                  		move.w	#$288,d4
0000A426                            
0000A426                            loc_9D62:
0000A426 3342 0010                  		move.w	d2,$10(a1)
0000A42A 3343 0012                  		move.w	d3,$12(a1)
0000A42E 4442                       		neg.w	d2
0000A430 4444                       		neg.w	d4
0000A432 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A436                            
0000A436                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A436 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A43C 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A442 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A448 303C 00C6                  		move.w	#$C6,d0
0000A44C 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A452                            
0000A452                            Obj37_Bounce:				; XREF: Obj37_Index
0000A452 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A458 6100 0000                  		bsr.w	SpeedToPos
0000A45C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A462 6B00                       		bmi.s	Obj37_ChkDel
0000A464 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A468 D007                       		add.b	d7,d0
0000A46A 0200 0003                  		andi.b	#3,d0
0000A46E 6600                       		bne.s	Obj37_ChkDel
0000A470 4EB9 0000 0000             		jsr	ObjHitFloor
0000A476 4A41                       		tst.w	d1
0000A478 6A00                       		bpl.s	Obj37_ChkDel
0000A47A D368 000C                  		add.w	d1,$C(a0)
0000A47E 3028 0012                  		move.w	$12(a0),d0
0000A482 E440                       		asr.w	#2,d0
0000A484 9168 0012                  		sub.w	d0,$12(a0)
0000A488 4468 0012                  		neg.w	$12(a0)
0000A48C                            
0000A48C                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A48C 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A490 6700                       		beq.s	Obj37_Delete
0000A492 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A496 0640 00E0                  		addi.w	#$E0,d0
0000A49A B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A49E 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A4A0 6000 0000                  		bra.w	DisplaySprite
0000A4A4                            ; ===========================================================================
0000A4A4                            
0000A4A4                            Obj37_Collect:				; XREF: Obj37_Index
0000A4A4 5428 0024                  		addq.b	#2,$24(a0)
0000A4A8 117C 0000 0020             		move.b	#0,$20(a0)
0000A4AE 117C 0001 0018             		move.b	#1,$18(a0)
0000A4B4 6100 FE86                  		bsr.w	CollectRing
0000A4B8                            
0000A4B8                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A4B8 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A4BE 6100 0000                  		bsr.w	AnimateSprite
0000A4C2 6000 0000                  		bra.w	DisplaySprite
0000A4C6                            ; ===========================================================================
0000A4C6                            
0000A4C6                            Obj37_Delete:				; XREF: Obj37_Index
0000A4C6 6000 0000                  		bra.w	DeleteObject
0000A4CA                            ; ===========================================================================
0000A4CA                            ; ---------------------------------------------------------------------------
0000A4CA                            ; Object 4B - giant ring for entry to special stage
0000A4CA                            ; ---------------------------------------------------------------------------
0000A4CA                            
0000A4CA                            Obj4B:					; XREF: Obj_Index
0000A4CA 7000                       		moveq	#0,d0
0000A4CC 1028 0024                  		move.b	$24(a0),d0
0000A4D0 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A4D4 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A4D8                            ; ===========================================================================
0000A4D8 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A4DA 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A4DC 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A4DE 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A4E0                            ; ===========================================================================
0000A4E0                            
0000A4E0                            Obj4B_Main:				; XREF: Obj4B_Index
0000A4E0 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A4E8 317C 2400 0002             		move.w	#$2400,2(a0)
0000A4EE 0028 0004 0001             		ori.b	#4,1(a0)
0000A4F4 117C 0040 0019             		move.b	#$40,$19(a0)
0000A4FA 4A28 0001                  		tst.b	1(a0)
0000A4FE 6A00                       		bpl.s	Obj4B_Animate
0000A500 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A506 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A50A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A510 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A512 4E75                       		rts	
0000A514                            ; ===========================================================================
0000A514                            
0000A514                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A514 5428 0024                  		addq.b	#2,$24(a0)
0000A518 117C 0002 0018             		move.b	#2,$18(a0)
0000A51E 117C 0052 0020             		move.b	#$52,$20(a0)
0000A524 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A52A                            
0000A52A                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A52A 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A530 3028 0008                  		move.w	8(a0),d0
0000A534 0240 FF80                  		andi.w	#$FF80,d0
0000A538 3238 F700                  		move.w	($FFFFF700).w,d1
0000A53C 0441 0080                  		subi.w	#$80,d1
0000A540 0241 FF80                  		andi.w	#$FF80,d1
0000A544 9041                       		sub.w	d1,d0
0000A546 0C40 0280                  		cmpi.w	#$280,d0
0000A54A 6200 0000                  		bhi.w	DeleteObject
0000A54E 6000 0000                  		bra.w	DisplaySprite
0000A552                            ; ===========================================================================
0000A552                            
0000A552                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A552 5528 0024                  		subq.b	#2,$24(a0)
0000A556 117C 0000 0020             		move.b	#0,$20(a0)
0000A55C 6100 0000                  		bsr.w	SingleObjLoad
0000A560 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A564 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A568 3368 0008 0008             		move.w	8(a0),8(a1)
0000A56E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A574 2348 003C                  		move.l	a0,$3C(a1)
0000A578 3038 D008                  		move.w	($FFFFD008).w,d0
0000A57C B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A580 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A582 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A588                            
0000A588                            Obj4B_PlaySnd:
0000A588 303C 00C3                  		move.w	#$C3,d0
0000A58C 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A592 6096                       		bra.s	Obj4B_Animate
0000A594                            ; ===========================================================================
0000A594                            
0000A594                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A594 6000 0000                  		bra.w	DeleteObject
0000A598                            ; ===========================================================================
0000A598                            ; ---------------------------------------------------------------------------
0000A598                            ; Object 7C - flash effect when	you collect the	giant ring
0000A598                            ; ---------------------------------------------------------------------------
0000A598                            
0000A598                            Obj7C:					; XREF: Obj_Index
0000A598 7000                       		moveq	#0,d0
0000A59A 1028 0024                  		move.b	$24(a0),d0
0000A59E 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A5A2 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A5A6                            ; ===========================================================================
0000A5A6 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A5A8 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A5AA 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A5AC                            ; ===========================================================================
0000A5AC                            
0000A5AC                            Obj7C_Main:				; XREF: Obj7C_Index
0000A5AC 5428 0024                  		addq.b	#2,$24(a0)
0000A5B0 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A5B8 317C 2462 0002             		move.w	#$2462,2(a0)
0000A5BE 0028 0004 0001             		ori.b	#4,1(a0)
0000A5C4 117C 0000 0018             		move.b	#0,$18(a0)
0000A5CA 117C 0020 0019             		move.b	#$20,$19(a0)
0000A5D0 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A5D6                            
0000A5D6                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A5D6 6100                       		bsr.s	Obj7C_Collect
0000A5D8 3028 0008                  		move.w	8(a0),d0
0000A5DC 0240 FF80                  		andi.w	#$FF80,d0
0000A5E0 3238 F700                  		move.w	($FFFFF700).w,d1
0000A5E4 0441 0080                  		subi.w	#$80,d1
0000A5E8 0241 FF80                  		andi.w	#$FF80,d1
0000A5EC 9041                       		sub.w	d1,d0
0000A5EE 0C40 0280                  		cmpi.w	#$280,d0
0000A5F2 6200 0000                  		bhi.w	DeleteObject
0000A5F6 6000 0000                  		bra.w	DisplaySprite
0000A5FA                            
0000A5FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A5FA                            
0000A5FA                            
0000A5FA                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A5FA 5328 001E                  		subq.b	#1,$1E(a0)
0000A5FE 6A00                       		bpl.s	locret_9F76
0000A600 117C 0001 001E             		move.b	#1,$1E(a0)
0000A606 5228 001A                  		addq.b	#1,$1A(a0)
0000A60A 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A610 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A612 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A618 6600                       		bne.s	locret_9F76	; if not, branch
0000A61A 2268 003C                  		movea.l	$3C(a0),a1
0000A61E 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A624 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A62A 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A630 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A634 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A638                            
0000A638                            locret_9F76:
0000A638 4E75                       		rts	
0000A63A                            ; ===========================================================================
0000A63A                            
0000A63A                            Obj7C_End:				; XREF: Obj7C_Collect
0000A63A 5428 0024                  		addq.b	#2,$24(a0)
0000A63E 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A644 588F                       		addq.l	#4,sp
0000A646 4E75                       		rts	
0000A648                            ; End of function Obj7C_Collect
0000A648                            
0000A648                            ; ===========================================================================
0000A648                            
0000A648                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A648 6000 0000                  		bra.w	DeleteObject
0000A64C                            ; ===========================================================================
0000A64C                            Ani_obj25:
0000A64C                            	include "_anim\obj25.asm"
0000A64C                            ; ---------------------------------------------------------------------------
0000A64C                            ; Animation script - ring
0000A64C                            ; ---------------------------------------------------------------------------
0000A64C 0000                       		dc.w byte_9F8C-Ani_obj25
0000A64E 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A654                            		even
0000A654                            		even
0000A654                            
0000A654                            ; ---------------------------------------------------------------------------
0000A654                            ; Sprite mappings - rings
0000A654                            ; ---------------------------------------------------------------------------
0000A654                            Map_obj25:
0000A654                            	include "_maps\obj25.asm"
0000A654                            ; ---------------------------------------------------------------------------
0000A654                            ; Sprite mappings - rings
0000A654                            ; ---------------------------------------------------------------------------
0000A654 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A658 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A65C 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A660 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A664 01                         byte_9FA2:	dc.b 1
0000A665 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A66A 01                         byte_9FA8:	dc.b 1
0000A66B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A670 01                         byte_9FAE:	dc.b 1
0000A671 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A676 01                         byte_9FB4:	dc.b 1
0000A677 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A67C 01                         byte_9FBA:	dc.b 1
0000A67D F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A682 01                         byte_9FC0:	dc.b 1
0000A683 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A688 01                         byte_9FC6:	dc.b 1
0000A689 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A68E 01                         byte_9FCC:	dc.b 1
0000A68F F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A694                            		even
0000A694                            		even
0000A694                            
0000A694                            ; ---------------------------------------------------------------------------
0000A694                            ; Sprite mappings - giant ring
0000A694                            ; ---------------------------------------------------------------------------
0000A694                            Map_obj4B:
0000A694                            	include "_maps\obj4B.asm"
0000A694                            ; ---------------------------------------------------------------------------
0000A694                            ; Sprite mappings - giant ring
0000A694                            ; ---------------------------------------------------------------------------
0000A694 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A698 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A69C 0A                         byte_9FDA:	dc.b $A
0000A69D E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A6A2 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A6A7 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A6AC E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A6B1 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A6B6 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A6BB 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A6C0 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A6C5 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A6CA 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A6CF 08                         byte_A00D:	dc.b 8
0000A6D0 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A6D5 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A6DA E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A6DF F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A6E4 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A6E9 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A6EE 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A6F3 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A6F8 04                         byte_A036:	dc.b 4
0000A6F9 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A6FE E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A703 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A708 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A70D 08                         byte_A04B:	dc.b 8
0000A70E E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A713 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A718 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A71D F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A722 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A727 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A72C 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A731 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A736                            		even
0000A736                            		even
0000A736                            
0000A736                            ; ---------------------------------------------------------------------------
0000A736                            ; Sprite mappings - flash effect when you collect the giant ring
0000A736                            ; ---------------------------------------------------------------------------
0000A736                            Map_obj7C:
0000A736                            	include "_maps\obj7C.asm"
0000A736                            ; ---------------------------------------------------------------------------
0000A736                            ; Sprite mappings - flash effect when you collect the giant ring
0000A736                            ; ---------------------------------------------------------------------------
0000A736 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A73A 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A73E 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A742 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A746 02                         byte_A084:	dc.b 2
0000A747 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A74C 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A751 04                         byte_A08F:	dc.b 4
0000A752 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A757 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A75C 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A761 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A766 04                         byte_A0A4:	dc.b 4
0000A767 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A76C E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A771 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A776 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A77B 04                         byte_A0B9:	dc.b 4
0000A77C E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A781 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A786 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A78B 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A790 04                         byte_A0CE:	dc.b 4
0000A791 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A796 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A79B 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A7A0 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A7A5 04                         byte_A0E3:	dc.b 4
0000A7A6 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A7AB E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A7B0 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A7B5 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A7BA 02                         byte_A0F8:	dc.b 2
0000A7BB E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A7C0 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A7C5 04                         byte_A103:	dc.b 4
0000A7C6 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A7CB E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A7D0 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A7D5 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A7DA                            		even
0000A7DA                            		even
0000A7DA                            
0000A7DA                            ; ===========================================================================
0000A7DA                            ; ---------------------------------------------------------------------------
0000A7DA                            ; Object 26 - monitors
0000A7DA                            ; ---------------------------------------------------------------------------
0000A7DA                            
0000A7DA                            Obj26:					; XREF: Obj_Index
0000A7DA 7000                       		moveq	#0,d0
0000A7DC 1028 0024                  		move.b	$24(a0),d0
0000A7E0 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A7E4 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A7E8                            ; ===========================================================================
0000A7E8 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A7EA 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A7EC 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A7EE 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A7F0 0000                       		dc.w Obj26_Display-Obj26_Index
0000A7F2                            ; ===========================================================================
0000A7F2                            
0000A7F2                            Obj26_Main:				; XREF: Obj26_Index
0000A7F2 5428 0024                  		addq.b	#2,$24(a0)
0000A7F6 117C 000E 0016             		move.b	#$E,$16(a0)
0000A7FC 117C 000E 0017             		move.b	#$E,$17(a0)
0000A802 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A80A 317C 0680 0002             		move.w	#$680,2(a0)
0000A810 117C 0004 0001             		move.b	#4,1(a0)
0000A816 117C 0003 0018             		move.b	#3,$18(a0)
0000A81C 117C 000F 0019             		move.b	#$F,$19(a0)
0000A822 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A826 7000                       		moveq	#0,d0
0000A828 1028 0023                  		move.b	$23(a0),d0
0000A82C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A832 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A838 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A83A 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A840 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A846 4E75                       		rts	
0000A848                            ; ===========================================================================
0000A848                            
0000A848                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A848 117C 0046 0020             		move.b	#$46,$20(a0)
0000A84E 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A854                            
0000A854                            Obj26_Solid:				; XREF: Obj26_Index
0000A854 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A858 6700                       		beq.s	loc_A1EC	; if not, branch
0000A85A 5500                       		subq.b	#2,d0
0000A85C 6600                       		bne.s	Obj26_Fall
0000A85E 7200                       		moveq	#0,d1
0000A860 1228 0019                  		move.b	$19(a0),d1
0000A864 0641 000B                  		addi.w	#$B,d1
0000A868 6100 D37C                  		bsr.w	ExitPlatform
0000A86C 0829 0003 0022             		btst	#3,$22(a1)
0000A872 6600 0000                  		bne.w	loc_A1BC
0000A876 4228 0025                  		clr.b	$25(a0)
0000A87A 6000 0000                  		bra.w	Obj26_Animate
0000A87E                            ; ===========================================================================
0000A87E                            
0000A87E                            loc_A1BC:				; XREF: Obj26_Solid
0000A87E 363C 0010                  		move.w	#$10,d3
0000A882 3428 0008                  		move.w	8(a0),d2
0000A886 6100 D8BC                  		bsr.w	MvSonicOnPtfm
0000A88A 6000 0000                  		bra.w	Obj26_Animate
0000A88E                            ; ===========================================================================
0000A88E                            
0000A88E                            Obj26_Fall:				; XREF: Obj26_Solid
0000A88E 6100 0000                  		bsr.w	ObjectFall
0000A892 4EB9 0000 0000             		jsr	ObjHitFloor
0000A898 4A41                       		tst.w	d1
0000A89A 6A00 0000                  		bpl.w	Obj26_Animate
0000A89E D368 000C                  		add.w	d1,$C(a0)
0000A8A2 4268 0012                  		clr.w	$12(a0)
0000A8A6 4228 0025                  		clr.b	$25(a0)
0000A8AA 6000 0000                  		bra.w	Obj26_Animate
0000A8AE                            ; ===========================================================================
0000A8AE                            
0000A8AE                            loc_A1EC:				; XREF: Obj26_Solid
0000A8AE 323C 001A                  		move.w	#$1A,d1
0000A8B2 343C 000F                  		move.w	#$F,d2
0000A8B6 6100 0000                  		bsr.w	Obj26_SolidSides
0000A8BA 6700 0000                  		beq.w	loc_A25C
0000A8BE 4A69 0012                  		tst.w	$12(a1)
0000A8C2 6B00                       		bmi.s	loc_A20A
0000A8C4 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A8CA 6700                       		beq.s	loc_A25C	; if yes, branch
0000A8CC                            
0000A8CC                            loc_A20A:
0000A8CC 4A41                       		tst.w	d1
0000A8CE 6A00                       		bpl.s	loc_A220
0000A8D0 9769 000C                  		sub.w	d3,$C(a1)
0000A8D4 6100 D1FE                  		bsr.w	loc_74AE
0000A8D8 117C 0002 0025             		move.b	#2,$25(a0)
0000A8DE 6000 0000                  		bra.w	Obj26_Animate
0000A8E2                            ; ===========================================================================
0000A8E2                            
0000A8E2                            loc_A220:
0000A8E2 4A40                       		tst.w	d0
0000A8E4 6700 0000                  		beq.w	loc_A246
0000A8E8 6B00                       		bmi.s	loc_A230
0000A8EA 4A69 0010                  		tst.w	$10(a1)
0000A8EE 6B00                       		bmi.s	loc_A246
0000A8F0 6000                       		bra.s	loc_A236
0000A8F2                            ; ===========================================================================
0000A8F2                            
0000A8F2                            loc_A230:
0000A8F2 4A69 0010                  		tst.w	$10(a1)
0000A8F6 6A00                       		bpl.s	loc_A246
0000A8F8                            
0000A8F8                            loc_A236:
0000A8F8 9169 0008                  		sub.w	d0,8(a1)
0000A8FC 337C 0000 0014             		move.w	#0,$14(a1)
0000A902 337C 0000 0010             		move.w	#0,$10(a1)
0000A908                            
0000A908                            loc_A246:
0000A908 0829 0001 0022             		btst	#1,$22(a1)
0000A90E 6600                       		bne.s	loc_A26A
0000A910 08E9 0005 0022             		bset	#5,$22(a1)
0000A916 08E8 0005 0022             		bset	#5,$22(a0)
0000A91C 6000                       		bra.s	Obj26_Animate
0000A91E                            ; ===========================================================================
0000A91E                            
0000A91E                            loc_A25C:
0000A91E 0828 0005 0022             		btst	#5,$22(a0)
0000A924 6700                       		beq.s	Obj26_Animate
0000A926 337C 0001 001C             		move.w	#1,$1C(a1)
0000A92C                            
0000A92C                            loc_A26A:
0000A92C 08A8 0005 0022             		bclr	#5,$22(a0)
0000A932 08A9 0005 0022             		bclr	#5,$22(a1)
0000A938                            
0000A938                            Obj26_Animate:				; XREF: Obj26_Index
0000A938 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A93E 6100 0000                  		bsr.w	AnimateSprite
0000A942                            
0000A942                            Obj26_Display:				; XREF: Obj26_Index
0000A942 6100 0000                  		bsr.w	DisplaySprite
0000A946 3028 0008                  		move.w	8(a0),d0
0000A94A 0240 FF80                  		andi.w	#$FF80,d0
0000A94E 3238 F700                  		move.w	($FFFFF700).w,d1
0000A952 0441 0080                  		subi.w	#$80,d1
0000A956 0241 FF80                  		andi.w	#$FF80,d1
0000A95A 9041                       		sub.w	d1,d0
0000A95C 0C40 0280                  		cmpi.w	#$280,d0
0000A960 6200 0000                  		bhi.w	DeleteObject
0000A964 4E75                       		rts	
0000A966                            ; ===========================================================================
0000A966                            
0000A966                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A966 5428 0024                  		addq.b	#2,$24(a0)
0000A96A 117C 0000 0020             		move.b	#0,$20(a0)
0000A970 6100 0000                  		bsr.w	SingleObjLoad
0000A974 6600                       		bne.s	Obj26_Explode
0000A976 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A97A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A980 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A986 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A98C 7400                       		moveq	#0,d2	; GMZ
0000A98E 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A990                            
0000A990                            Obj26_Explode:
0000A990 6100 0000                  		bsr.w	SingleObjLoad
0000A994 6600                       		bne.s	Obj26_SetBroken
0000A996 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A99A 5429 0024                  		addq.b	#2,$24(a1)
0000A99E 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A9A2 3368 0008 0008             		move.w	8(a0),8(a1)
0000A9A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A9AE                            
0000A9AE                            Obj26_NextExplosion:
0000A9AE 5802                       		addq.b	#4,d2
0000A9B0 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A9B4                            
0000A9B4                            Obj26_SetBroken:
0000A9B4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A9B8 7000                       		moveq	#0,d0
0000A9BA 1028 0023                  		move.b	$23(a0),d0
0000A9BE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A9C4 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A9CA 6000 0000                  		bra.w	DisplaySprite
0000A9CE                            ; ===========================================================================
0000A9CE                            ; ---------------------------------------------------------------------------
0000A9CE                            ; Object 2E - contents of monitors
0000A9CE                            ; ---------------------------------------------------------------------------
0000A9CE                            
0000A9CE                            Obj2E:					; XREF: Obj_Index
0000A9CE 7000                       		moveq	#0,d0
0000A9D0 1028 0024                  		move.b	$24(a0),d0
0000A9D4 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A9D8 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A9DC 6000 0000                  		bra.w	DisplaySprite
0000A9E0                            ; ===========================================================================
0000A9E0 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A9E2 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A9E4 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A9E6                            ; ===========================================================================
0000A9E6                            
0000A9E6                            Obj2E_Main:				; XREF: Obj2E_Index
0000A9E6 5428 0024                  		addq.b	#2,$24(a0)
0000A9EA 317C 0680 0002             		move.w	#$680,2(a0)
0000A9F0 117C 0024 0001             		move.b	#$24,1(a0)
0000A9F6 117C 0003 0018             		move.b	#3,$18(a0)
0000A9FC 117C 0008 0019             		move.b	#8,$19(a0)
0000AA02 317C FD00 0012             		move.w	#-$300,$12(a0)
0000AA08 7000                       		moveq	#0,d0
0000AA0A 1028 001C                  		move.b	$1C(a0),d0
0000AA0E 5400                       		addq.b	#2,d0
0000AA10 1140 001A                  		move.b	d0,$1A(a0)
0000AA14 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AA1A D000                       		add.b	d0,d0
0000AA1C D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AA20 5249                       		addq.w	#1,a1
0000AA22 2149 0004                  		move.l	a1,4(a0)
0000AA26                            
0000AA26                            Obj2E_Move:				; XREF: Obj2E_Index
0000AA26 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AA2A 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AA2E 6100 0000                  		bsr.w	SpeedToPos
0000AA32 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AA38 4E75                       		rts	
0000AA3A                            ; ===========================================================================
0000AA3A                            
0000AA3A                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AA3A 5428 0024                  		addq.b	#2,$24(a0)
0000AA3E 317C 001D 001E             		move.w	#29,$1E(a0)
0000AA44 1028 001C                  		move.b	$1C(a0),d0
0000AA48 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AA4C 6600                       		bne.s	Obj2E_ChkSonic
0000AA4E 4E75                       		rts			; Eggman monitor does nothing
0000AA50                            ; ===========================================================================
0000AA50                            
0000AA50                            Obj2E_ChkSonic:
0000AA50 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AA54 6600                       		bne.s	Obj2E_ChkShoes
0000AA56                            
0000AA56                            ExtraLife:
0000AA56 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AA5A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AA5E 303C 0088                  		move.w	#$88,d0
0000AA62 4EF9 0000 1398             		jmp	(PlaySound).l	; play extra life music
0000AA68                            ; ===========================================================================
0000AA68                            
0000AA68                            Obj2E_ChkShoes:
0000AA68 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AA6C 6600                       		bne.s	Obj2E_ChkShield
0000AA6E 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AA74 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AA7A 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AA80 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AA86 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AA8C 303C 00E2                  		move.w	#$E2,d0
0000AA90 4EF9 0000 1398             		jmp	(PlaySound).l	; Speed	up the music
0000AA96                            ; ===========================================================================
0000AA96                            
0000AA96                            Obj2E_ChkShield:
0000AA96 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AA9A 6600                       		bne.s	Obj2E_ChkInvinc
0000AA9C 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AAA2 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AAA8 303C 00AF                  		move.w	#$AF,d0
0000AAAC 4EF9 0000 1398             		jmp	(PlaySound).l	; play shield sound
0000AAB2                            ; ===========================================================================
0000AAB2                            
0000AAB2                            Obj2E_ChkInvinc:
0000AAB2 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AAB6 6600                       		bne.s	Obj2E_ChkRings
0000AAB8 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AABE 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AAC4 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AACA 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AAD0 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AAD6 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AADC 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AAE2 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AAE8 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AAEE 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AAF4 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AAF8 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AAFA 303C 0087                  		move.w	#$87,d0
0000AAFE 4EF9 0000 1398             		jmp	(PlaySound).l	; play invincibility music
0000AB04                            ; ===========================================================================
0000AB04                            
0000AB04                            Obj2E_NoMusic:
0000AB04 4E75                       		rts	
0000AB06                            ; ===========================================================================
0000AB06                            
0000AB06                            Obj2E_ChkRings:
0000AB06 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AB0A 6600                       		bne.s	Obj2E_ChkS
0000AB0C 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AB12 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AB18 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AB1E 6500                       		bcs.s	Obj2E_RingSound
0000AB20 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AB26 6700 FF2E                  		beq.w	ExtraLife
0000AB2A 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AB30 6500                       		bcs.s	Obj2E_RingSound
0000AB32 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AB38 6700 FF1C                  		beq.w	ExtraLife
0000AB3C                            
0000AB3C                            Obj2E_RingSound:
0000AB3C 303C 00B5                  		move.w	#$B5,d0
0000AB40 4EF9 0000 1398             		jmp	(PlaySound).l	; play ring sound
0000AB46                            ; ===========================================================================
0000AB46                            
0000AB46                            Obj2E_ChkS:
0000AB46 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AB4A 6600                       		bne.s	Obj2E_ChkEnd
0000AB4C                            		; nop	
0000AB4C 7201                       		moveq	#1,d1
0000AB4E B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AB52                            
0000AB52                            Obj2E_ChkEnd:
0000AB52 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AB54                            ; ===========================================================================
0000AB54                            
0000AB54                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AB54 5368 001E                  		subq.w	#1,$1E(a0)
0000AB58 6B00 0000                  		bmi.w	DeleteObject
0000AB5C 4E75                       		rts	
0000AB5E                            ; ---------------------------------------------------------------------------
0000AB5E                            ; Subroutine to	make the sides of a monitor solid
0000AB5E                            ; ---------------------------------------------------------------------------
0000AB5E                            
0000AB5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB5E                            
0000AB5E                            
0000AB5E                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AB5E 43F8 D000                  		lea	($FFFFD000).w,a1
0000AB62 3029 0008                  		move.w	8(a1),d0
0000AB66 9068 0008                  		sub.w	8(a0),d0
0000AB6A D041                       		add.w	d1,d0
0000AB6C 6B00                       		bmi.s	loc_A4E6
0000AB6E 3601                       		move.w	d1,d3
0000AB70 D643                       		add.w	d3,d3
0000AB72 B043                       		cmp.w	d3,d0
0000AB74 6200                       		bhi.s	loc_A4E6
0000AB76 1629 0016                  		move.b	$16(a1),d3
0000AB7A 4883                       		ext.w	d3
0000AB7C D443                       		add.w	d3,d2
0000AB7E 3629 000C                  		move.w	$C(a1),d3
0000AB82 9668 000C                  		sub.w	$C(a0),d3
0000AB86 D642                       		add.w	d2,d3
0000AB88 6B00                       		bmi.s	loc_A4E6
0000AB8A D442                       		add.w	d2,d2
0000AB8C B642                       		cmp.w	d2,d3
0000AB8E 6400                       		bcc.s	loc_A4E6
0000AB90 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AB94 6B00                       		bmi.s	loc_A4E6
0000AB96 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AB9C 6400                       		bcc.s	loc_A4E6
0000AB9E 4A78 FE08                  		tst.w	($FFFFFE08).w
0000ABA2 6600                       		bne.s	loc_A4E6
0000ABA4 B240                       		cmp.w	d0,d1
0000ABA6 6400                       		bcc.s	loc_A4DC
0000ABA8 D241                       		add.w	d1,d1
0000ABAA 9041                       		sub.w	d1,d0
0000ABAC                            
0000ABAC                            loc_A4DC:
0000ABAC 0C43 0010                  		cmpi.w	#$10,d3
0000ABB0 6500                       		bcs.s	loc_A4EA
0000ABB2                            
0000ABB2                            loc_A4E2:
0000ABB2 7201                       		moveq	#1,d1
0000ABB4 4E75                       		rts	
0000ABB6                            ; ===========================================================================
0000ABB6                            
0000ABB6                            loc_A4E6:
0000ABB6 7200                       		moveq	#0,d1
0000ABB8 4E75                       		rts	
0000ABBA                            ; ===========================================================================
0000ABBA                            
0000ABBA                            loc_A4EA:
0000ABBA 7200                       		moveq	#0,d1
0000ABBC 1228 0019                  		move.b	$19(a0),d1
0000ABC0 5841                       		addq.w	#4,d1
0000ABC2 3401                       		move.w	d1,d2
0000ABC4 D442                       		add.w	d2,d2
0000ABC6 D269 0008                  		add.w	8(a1),d1
0000ABCA 9268 0008                  		sub.w	8(a0),d1
0000ABCE 6BE2                       		bmi.s	loc_A4E2
0000ABD0 B242                       		cmp.w	d2,d1
0000ABD2 64DE                       		bcc.s	loc_A4E2
0000ABD4 72FF                       		moveq	#-1,d1
0000ABD6 4E75                       		rts	
0000ABD8                            ; End of function Obj26_SolidSides
0000ABD8                            
0000ABD8                            ; ===========================================================================
0000ABD8                            Ani_obj26:
0000ABD8                            	include "_anim\obj26.asm"
0000ABD8                            ; ---------------------------------------------------------------------------
0000ABD8                            ; Animation script - monitors
0000ABD8                            ; ---------------------------------------------------------------------------
0000ABD8 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000ABDE 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000ABE4 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000ABEA 0000                       		dc.w byte_A582-Ani_obj26
0000ABEC 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000ABF2 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000ABFE 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000AC0A 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000AC16 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AC22 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AC2E 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AC3A 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AC46 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AC52 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AC5A                            		even
0000AC5A                            		even
0000AC5A                            
0000AC5A                            ; ---------------------------------------------------------------------------
0000AC5A                            ; Sprite mappings - monitors
0000AC5A                            ; ---------------------------------------------------------------------------
0000AC5A                            Map_obj26:
0000AC5A                            	include "_maps\obj26.asm"
0000AC5A                            ; ================================================================================
0000AC5A                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AC5A                            ; ================================================================================
0000AC5A                            
0000AC5A                            DATAY1U343IF3L:
0000AC5A 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AC5E 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AC62 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AC66 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AC6A 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AC6E 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AC72 05                         DATAY1U343IF3L_0: dc.b $5
0000AC73 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC78 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC7D E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC82 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC87 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC8C 06                         DATAY1U343IF3L_1: dc.b $6
0000AC8D F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AC92 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC97 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC9C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACA1 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACA6 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACAB 05                         DATAY1U343IF3L_2: dc.b $5
0000ACAC E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACB1 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACB6 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACBB 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACC0 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACC5 05                         DATAY1U343IF3L_3: dc.b $5
0000ACC6 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACCB 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACD0 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACD5 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACDA 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACDF 06                         DATAY1U343IF3L_4: dc.b $6
0000ACE0 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000ACE5 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACEA 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACEF E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACF4 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACF9 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACFE 06                         DATAY1U343IF3L_5: dc.b $6
0000ACFF F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AD04 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD09 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD0E E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD13 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD18 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD1D 06                         DATAY1U343IF3L_6: dc.b $6
0000AD1E F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AD23 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD28 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD2D E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD32 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD37 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD3C 06                         DATAY1U343IF3L_7: dc.b $6
0000AD3D F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AD42 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD47 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD4C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD51 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD56 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD5B 06                         DATAY1U343IF3L_8: dc.b $6
0000AD5C F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AD61 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD66 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD6B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD70 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD75 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD7A 06                         DATAY1U343IF3L_9: dc.b $6
0000AD7B F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AD80 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD85 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD8A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD8F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD94 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD99 05                         DATAY1U343IF3L_A: dc.b $5
0000AD9A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD9F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ADA4 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ADA9 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ADAE 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ADB3 01                         DATAY1U343IF3L_B: dc.b $1
0000ADB4 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000ADBA 00                         	even
0000ADBA 00                         	even
0000ADBA                            
0000ADBA                            ; ===========================================================================
0000ADBA                            ; ---------------------------------------------------------------------------
0000ADBA                            ; Object 0E - Sonic on the title screen
0000ADBA                            ; ---------------------------------------------------------------------------
0000ADBA                            
0000ADBA                            Obj0E:					; XREF: Obj_Index
0000ADBA 7000                       		moveq	#0,d0
0000ADBC 1028 0024                  		move.b	$24(a0),d0
0000ADC0 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000ADC4 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000ADC8                            ; ===========================================================================
0000ADC8 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000ADCA 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000ADCC 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000ADCE 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000ADD0                            ; ===========================================================================
0000ADD0                            
0000ADD0                            Obj0E_Main:				; XREF: Obj0E_Index
0000ADD0 5428 0024                  		addq.b	#2,$24(a0)
0000ADD4 317C 00F0 0008             		move.w	#$F0,8(a0)
0000ADDA 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000ADE0 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000ADE8 317C 2300 0002             		move.w	#$2300,2(a0)
0000ADEE 117C 0001 0018             		move.b	#1,$18(a0)
0000ADF4 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000ADFA 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AE00 6100 0000                  		bsr.w	AnimateSprite
0000AE04                            
0000AE04                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AE04 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AE08 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AE0A 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AE0E 6000 0000                  		bra.w	DisplaySprite
0000AE12                            ; ===========================================================================
0000AE12                            
0000AE12                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AE12 4E75                       		rts	
0000AE14                            ; ===========================================================================
0000AE14                            
0000AE14                            Obj0E_Move:				; XREF: Obj0E_Index
0000AE14 5168 000A                  		subq.w	#8,$A(a0)
0000AE18 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AE1E 6600                       		bne.s	Obj0E_Display
0000AE20 5428 0024                  		addq.b	#2,$24(a0)
0000AE24                            
0000AE24                            Obj0E_Display:
0000AE24 6000 0000                  		bra.w	DisplaySprite
0000AE28                            ; ===========================================================================
0000AE28 4E75                       		rts	
0000AE2A                            ; ===========================================================================
0000AE2A                            
0000AE2A                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AE2A 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AE30 6100 0000                  		bsr.w	AnimateSprite
0000AE34 6000 0000                  		bra.w	DisplaySprite
0000AE38                            ; ===========================================================================
0000AE38 4E75                       		rts	
0000AE3A                            ; ===========================================================================
0000AE3A                            ; ---------------------------------------------------------------------------
0000AE3A                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AE3A                            ; ---------------------------------------------------------------------------
0000AE3A                            
0000AE3A                            Obj0F:					; XREF: Obj_Index
0000AE3A 7000                       		moveq	#0,d0
0000AE3C 1028 0024                  		move.b	$24(a0),d0
0000AE40 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AE44 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AE48 6000 0000                  		bra.w	DisplaySprite
0000AE4C                            ; ===========================================================================
0000AE4C 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AE4E 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AE50 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AE52                            ; ===========================================================================
0000AE52                            
0000AE52                            Obj0F_Main:				; XREF: Obj0F_Index
0000AE52 5428 0024                  		addq.b	#2,$24(a0)
0000AE56 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AE5C 317C 0130 000A             		move.w	#$130,$A(a0)
0000AE62 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AE6A 317C 0200 0002             		move.w	#$200,2(a0)
0000AE70 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AE76 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AE78 5428 0024                  		addq.b	#2,$24(a0)
0000AE7C 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AE82 6600                       		bne.s	locret_A6F8	; if not, branch
0000AE84 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AE8A 317C 0170 0008             		move.w	#$170,8(a0)
0000AE90 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AE96                            
0000AE96                            locret_A6F8:				; XREF: Obj0F_Index
0000AE96 4E75                       		rts	
0000AE98                            ; ===========================================================================
0000AE98                            
0000AE98                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AE98 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AE9E 6000 0000                  		bra.w	AnimateSprite
0000AEA2                            ; ===========================================================================
0000AEA2                            Ani_obj0E:
0000AEA2                            	include "_anim\obj0E.asm"
0000AEA2                            ; ---------------------------------------------------------------------------
0000AEA2                            ; Animation script - Sonic on the title screen
0000AEA2                            ; ---------------------------------------------------------------------------
0000AEA2 0000                       		dc.w byte_A706-Ani_obj0E
0000AEA4 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AEB0                            		even
0000AEB0                            		even
0000AEB0                            
0000AEB0                            Ani_obj0F:
0000AEB0                            	include "_anim\obj0F.asm"
0000AEB0                            ; ---------------------------------------------------------------------------
0000AEB0                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AEB0                            ; ---------------------------------------------------------------------------
0000AEB0 0000                       		dc.w byte_A714-Ani_obj0F
0000AEB2 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AEB6                            		even
0000AEB6                            		even
0000AEB6                            
0000AEB6                            ; ---------------------------------------------------------------------------
0000AEB6                            ; Subroutine to	animate	a sprite using an animation script
0000AEB6                            ; ---------------------------------------------------------------------------
0000AEB6                            
0000AEB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEB6                            
0000AEB6                            
0000AEB6                            AnimateSprite:
0000AEB6 7000                       		moveq	#0,d0
0000AEB8 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AEBC B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AEC0 6700                       		beq.s	Anim_Run	; if not, branch
0000AEC2 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AEC6 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AECC 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AED2                            
0000AED2                            Anim_Run:
0000AED2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AED6 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AED8 D040                       		add.w	d0,d0
0000AEDA D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AEDE 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AEE2 7200                       		moveq	#0,d1
0000AEE4 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AEE8 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AEEC 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AEEE                            
0000AEEE                            Anim_Next:
0000AEEE 1200                       		move.b	d0,d1
0000AEF0 0200 001F                  		andi.b	#$1F,d0
0000AEF4 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AEF8 1028 0022                  		move.b	$22(a0),d0
0000AEFC E719                       		rol.b	#3,d1
0000AEFE B101                       		eor.b	d0,d1
0000AF00 0201 0003                  		andi.b	#3,d1
0000AF04 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AF0A 8328 0001                  		or.b	d1,1(a0)
0000AF0E 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AF12                            
0000AF12                            Anim_Wait:
0000AF12 4E75                       		rts	
0000AF14                            ; ===========================================================================
0000AF14                            
0000AF14                            Anim_End_FF:
0000AF14 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AF16 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AF18 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AF1E 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AF22 60CA                       		bra.s	Anim_Next
0000AF24                            ; ===========================================================================
0000AF24                            
0000AF24                            Anim_End_FE:
0000AF24 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AF26 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AF28 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AF2C 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AF30 9200                       		sub.b	d0,d1
0000AF32 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AF36 60B6                       		bra.s	Anim_Next
0000AF38                            ; ===========================================================================
0000AF38                            
0000AF38                            Anim_End_FD:
0000AF38 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AF3A 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AF3C 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AF42                            
0000AF42                            Anim_End_FC:
0000AF42 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AF44 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AF46 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AF4A                            
0000AF4A                            Anim_End_FB:
0000AF4A 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AF4C 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AF4E 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AF54 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AF58                            
0000AF58                            Anim_End_FA:
0000AF58 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AF5A 6600                       		bne.s	Anim_End	; if not, branch
0000AF5C 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AF60                            
0000AF60                            Anim_End:
0000AF60 4E75                       		rts	
0000AF62                            ; End of function AnimateSprite
0000AF62                            
0000AF62                            ; ===========================================================================
0000AF62                            ; ---------------------------------------------------------------------------
0000AF62                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF62                            ; ---------------------------------------------------------------------------
0000AF62                            Map_obj0F:
0000AF62                            	include "_maps\obj0F.asm"
0000AF62                            ; ---------------------------------------------------------------------------
0000AF62                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF62                            ; ---------------------------------------------------------------------------
0000AF62 0000                       		dc.w byte_A7CD-Map_obj0F
0000AF64 0000                       		dc.w byte_A7CC-Map_obj0F
0000AF66 0000                       		dc.w byte_A7EB-Map_obj0F
0000AF68 0000                       		dc.w byte_A882-Map_obj0F
0000AF6A 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AF6B 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AF70 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AF75 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AF7A 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AF7F 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AF84 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AF89 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AF8A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF8F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF94 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF99 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF9E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFA3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFA8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFAD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFB2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFB7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFBC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFC1 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFC6 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFCB D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFD0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFD5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFDA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFDF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFE4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFE9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFEE F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFF3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFF8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFFD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B002 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B007 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B00C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B011 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B016 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B01B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B020 01                         byte_A882:	dc.b 1			; "TM"
0000B021 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B026                            		even
0000B026                            		even
0000B026                            
0000B026                            ; ---------------------------------------------------------------------------
0000B026                            ; Sprite mappings - Sonic on the title screen
0000B026                            ; ---------------------------------------------------------------------------
0000B026                            Map_obj0E:
0000B026                            	include "_maps\obj0E.asm"
0000B026                            ; ================================================================================
0000B026                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B026                            ; ================================================================================
0000B026                            
0000B026                            DATAGKI0HYDQBXP:
0000B026 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B02A 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B02E 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B032 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B036 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B037 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B03C 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B041 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B046 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B04B 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B050 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B055 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B05A 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B05F 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B060 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B065 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B06A 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B06F 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B074 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B079 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B07E 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B083 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B088 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B08D 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B092 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B097 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B098 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B09D F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B0A2 F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B0A7 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B0AC 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B0B1 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B0B6 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B0BB 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B0C0 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B0C5 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B0CA 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B0CF 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B0D0 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B0D5 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B0DA FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B0DF 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B0E4 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B0E9 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B0EE 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B0F3 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B0F8 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B0FD 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B102 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B103 F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B108 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B10D 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B112 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B117 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B11C 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B121 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B126 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B12B 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B130 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B135 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B13A 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B13F 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B144 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B149 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B14E 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B153 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B154 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B159 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B15E 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B163 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B168 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B16D 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B172 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B177 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B17C 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B181 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B186 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B18B 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B18C EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B191 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B196 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B19B EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B1A0 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B1A5 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B1AA EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B1AF 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B1B4 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B1B9 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B1BE 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B1C3 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B1C8 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B1CD 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B1D2 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B1D7 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B1D8 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B1DD 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B1E2 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B1E7 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B1EC 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B1F1 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B1F6 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B1FB 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B200 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B205 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B20A 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B20F 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B214 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B219 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B21E 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B224 00                         	even
0000B224 00                         	even
0000B224                            
0000B224                            ; ===========================================================================
0000B224                            ; ---------------------------------------------------------------------------
0000B224                            ; Object 2B - Chopper enemy (GHZ)
0000B224                            ; ---------------------------------------------------------------------------
0000B224                            
0000B224                            Obj2B:					; XREF: Obj_Index
0000B224 7000                       		moveq	#0,d0
0000B226 1028 0024                  		move.b	$24(a0),d0
0000B22A 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B22E 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B232 6000 0000                  		bra.w	MarkObjGone
0000B236                            ; ===========================================================================
0000B236 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B238 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B23A                            ; ===========================================================================
0000B23A                            
0000B23A                            Obj2B_Main:				; XREF: Obj2B_Index
0000B23A 5428 0024                  		addq.b	#2,$24(a0)
0000B23E 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B246 317C 047B 0002             		move.w	#$47B,2(a0)
0000B24C 117C 0004 0001             		move.b	#4,1(a0)
0000B252 117C 0004 0018             		move.b	#4,$18(a0)
0000B258 117C 0009 0020             		move.b	#9,$20(a0)
0000B25E 117C 0010 0019             		move.b	#$10,$19(a0)
0000B264 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B26A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B270                            
0000B270                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B270 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B276 6100 FC3E                  		bsr.w	AnimateSprite
0000B27A 6100 0000                  		bsr.w	SpeedToPos
0000B27E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B284 3028 0030                  		move.w	$30(a0),d0
0000B288 B068 000C                  		cmp.w	$C(a0),d0
0000B28C 6400                       		bcc.s	Obj2B_ChgAni
0000B28E 3140 000C                  		move.w	d0,$C(a0)
0000B292 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B298                            
0000B298                            Obj2B_ChgAni:
0000B298 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B29E 0440 00C0                  		subi.w	#$C0,d0
0000B2A2 B068 000C                  		cmp.w	$C(a0),d0
0000B2A6 6400                       		bcc.s	locret_ABB6
0000B2A8 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B2AE 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B2B2 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B2B4 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B2BA                            
0000B2BA                            locret_ABB6:
0000B2BA 4E75                       		rts	
0000B2BC                            ; ===========================================================================
0000B2BC                            Ani_obj2B:
0000B2BC                            	include "_anim\obj2B.asm"
0000B2BC                            ; ---------------------------------------------------------------------------
0000B2BC                            ; Animation script - Chopper enemy
0000B2BC                            ; ---------------------------------------------------------------------------
0000B2BC 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B2BE 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B2C0 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B2C2 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B2C6 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B2CA 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B2CE 00                         		even
0000B2CE 00                         		even
0000B2CE                            
0000B2CE                            ; ---------------------------------------------------------------------------
0000B2CE                            ; Sprite mappings - Chopper enemy (GHZ)
0000B2CE                            ; ---------------------------------------------------------------------------
0000B2CE                            Map_obj2B:
0000B2CE                            	include "_maps\obj2B.asm"
0000B2CE                            Map_1ff1:
0000B2CE 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B2D0 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B2D2 02                         Map_1ff1_4: 	dc.b $2
0000B2D3 E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B2D8 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B2DD 02                         Map_1ff1_F: 	dc.b $2
0000B2DE E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B2E3 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B2E8                            	even
0000B2E8                            	even
0000B2E8                            
0000B2E8                            ; ===========================================================================
0000B2E8                            ; ---------------------------------------------------------------------------
0000B2E8                            ; Object 2C - Jaws enemy (LZ)
0000B2E8                            ; ---------------------------------------------------------------------------
0000B2E8                            
0000B2E8                            Obj2C:					; XREF: Obj_Index
0000B2E8 7000                       		moveq	#0,d0
0000B2EA 1028 0024                  		move.b	$24(a0),d0
0000B2EE 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B2F2 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B2F6                            ; ===========================================================================
0000B2F6 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B2F8 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B2FA                            ; ===========================================================================
0000B2FA                            
0000B2FA                            Obj2C_Main:				; XREF: Obj2C_Index
0000B2FA 5428 0024                  		addq.b	#2,$24(a0)
0000B2FE 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B306 317C 2486 0002             		move.w	#$2486,2(a0)
0000B30C 0028 0004 0001             		ori.b	#4,1(a0)
0000B312 117C 000A 0020             		move.b	#$A,$20(a0)
0000B318 117C 0004 0018             		move.b	#4,$18(a0)
0000B31E 117C 0010 0019             		move.b	#$10,$19(a0)
0000B324 7000                       		moveq	#0,d0
0000B326 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B32A ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B32C 5340                       		subq.w	#1,d0
0000B32E 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B332 3140 0032                  		move.w	d0,$32(a0)
0000B336 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B33C 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B342 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B344 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B348                            
0000B348                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B348 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B34C 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B34E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B354 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B358 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B35E 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B364                            
0000B364                            Obj2C_Animate:
0000B364 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B36A 6100 FB4A                  		bsr.w	AnimateSprite
0000B36E 6100 0000                  		bsr.w	SpeedToPos
0000B372 6000 0000                  		bra.w	MarkObjGone
0000B376                            ; ===========================================================================
0000B376                            Ani_obj2C:
0000B376                            	include "_anim\obj2C.asm"
0000B376                            ; ---------------------------------------------------------------------------
0000B376                            ; Animation script - Jaws enemy
0000B376                            ; ---------------------------------------------------------------------------
0000B376 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B378 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B37E                            		even
0000B37E                            		even
0000B37E                            
0000B37E                            ; ---------------------------------------------------------------------------
0000B37E                            ; Sprite mappings - Jaws enemy (LZ)
0000B37E                            ; ---------------------------------------------------------------------------
0000B37E                            Map_obj2C:
0000B37E                            	include "_maps\obj2C.asm"
0000B37E                            ; ---------------------------------------------------------------------------
0000B37E                            ; Sprite mappings - Jaws enemy (LZ)
0000B37E                            ; ---------------------------------------------------------------------------
0000B37E 0000                       		dc.w byte_AC78-Map_obj2C
0000B380 0000                       		dc.w byte_AC83-Map_obj2C
0000B382 0000                       		dc.w byte_AC8E-Map_obj2C
0000B384 0000                       		dc.w byte_AC99-Map_obj2C
0000B386 02                         byte_AC78:	dc.b 2
0000B387 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B38C F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B391 02                         byte_AC83:	dc.b 2
0000B392 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B397 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B39C 02                         byte_AC8E:	dc.b 2
0000B39D F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B3A2 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B3A7 02                         byte_AC99:	dc.b 2
0000B3A8 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B3AD F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B3B2                            		even
0000B3B2                            		even
0000B3B2                            
0000B3B2                            ; ===========================================================================
0000B3B2                            ; ---------------------------------------------------------------------------
0000B3B2                            ; Object 2D - Burrobot enemy (LZ)
0000B3B2                            ; ---------------------------------------------------------------------------
0000B3B2                            
0000B3B2                            Obj2D:					; XREF: Obj_Index
0000B3B2 7000                       		moveq	#0,d0
0000B3B4 1028 0024                  		move.b	$24(a0),d0
0000B3B8 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B3BC 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B3C0                            ; ===========================================================================
0000B3C0 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B3C2 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B3C4                            ; ===========================================================================
0000B3C4                            
0000B3C4                            Obj2D_Main:				; XREF: Obj2D_Index
0000B3C4 5428 0024                  		addq.b	#2,$24(a0)
0000B3C8 117C 0013 0016             		move.b	#$13,$16(a0)
0000B3CE 117C 0008 0017             		move.b	#8,$17(a0)
0000B3D4 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B3DC 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B3E2 0028 0004 0001             		ori.b	#4,1(a0)
0000B3E8 117C 0004 0018             		move.b	#4,$18(a0)
0000B3EE 117C 0005 0020             		move.b	#5,$20(a0)
0000B3F4 117C 000C 0019             		move.b	#$C,$19(a0)
0000B3FA 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B3FE 117C 0002 001C             		move.b	#2,$1C(a0)
0000B404                            
0000B404                            Obj2D_Action:				; XREF: Obj2D_Index
0000B404 7000                       		moveq	#0,d0
0000B406 1028 0025                  		move.b	$25(a0),d0
0000B40A 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B40E 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B412 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B418 6100 FA9C                  		bsr.w	AnimateSprite
0000B41C 6000 0000                  		bra.w	MarkObjGone
0000B420                            ; ===========================================================================
0000B420 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B422 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B424 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B426 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B428                            ; ===========================================================================
0000B428                            
0000B428                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B428 5368 0030                  		subq.w	#1,$30(a0)
0000B42C 6A00                       		bpl.s	locret_AD42
0000B42E 5428 0025                  		addq.b	#2,$25(a0)
0000B432 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B438 317C 0080 0010             		move.w	#$80,$10(a0)
0000B43E 117C 0001 001C             		move.b	#1,$1C(a0)
0000B444 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B44A 6700                       		beq.s	locret_AD42
0000B44C 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B450                            
0000B450                            locret_AD42:
0000B450 4E75                       		rts	
0000B452                            ; ===========================================================================
0000B452                            
0000B452                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B452 5368 0030                  		subq.w	#1,$30(a0)
0000B456 6B00                       		bmi.s	loc_AD84
0000B458 6100 0000                  		bsr.w	SpeedToPos
0000B45C 0868 0000 0032             		bchg	#0,$32(a0)
0000B462 6600                       		bne.s	loc_AD78
0000B464 3628 0008                  		move.w	8(a0),d3
0000B468 0643 000C                  		addi.w	#$C,d3
0000B46C 0828 0000 0022             		btst	#0,$22(a0)
0000B472 6600                       		bne.s	loc_AD6A
0000B474 0443 0018                  		subi.w	#$18,d3
0000B478                            
0000B478                            loc_AD6A:
0000B478 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B47E 0C41 000C                  		cmpi.w	#$C,d1
0000B482 6C00                       		bge.s	loc_AD84
0000B484 4E75                       		rts	
0000B486                            ; ===========================================================================
0000B486                            
0000B486                            loc_AD78:				; XREF: Obj2D_Move
0000B486 4EB9 0000 0000             		jsr	ObjHitFloor
0000B48C D368 000C                  		add.w	d1,$C(a0)
0000B490 4E75                       		rts	
0000B492                            ; ===========================================================================
0000B492                            
0000B492                            loc_AD84:				; XREF: Obj2D_Move
0000B492 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B498 6700                       		beq.s	loc_ADA4
0000B49A 5528 0025                  		subq.b	#2,$25(a0)
0000B49E 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B4A4 317C 0000 0010             		move.w	#0,$10(a0)
0000B4AA 117C 0000 001C             		move.b	#0,$1C(a0)
0000B4B0 4E75                       		rts	
0000B4B2                            ; ===========================================================================
0000B4B2                            
0000B4B2                            loc_ADA4:
0000B4B2 5428 0025                  		addq.b	#2,$25(a0)
0000B4B6 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B4BC 117C 0002 001C             		move.b	#2,$1C(a0)
0000B4C2 4E75                       		rts	
0000B4C4                            ; ===========================================================================
0000B4C4                            
0000B4C4                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B4C4 6100 0000                  		bsr.w	SpeedToPos
0000B4C8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B4CE 6B00                       		bmi.s	locret_ADF0
0000B4D0 117C 0003 001C             		move.b	#3,$1C(a0)
0000B4D6 4EB9 0000 0000             		jsr	ObjHitFloor
0000B4DC 4A41                       		tst.w	d1
0000B4DE 6A00                       		bpl.s	locret_ADF0
0000B4E0 D368 000C                  		add.w	d1,$C(a0)
0000B4E4 317C 0000 0012             		move.w	#0,$12(a0)
0000B4EA 117C 0001 001C             		move.b	#1,$1C(a0)
0000B4F0 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B4F6 5528 0025                  		subq.b	#2,$25(a0)
0000B4FA 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B4FE                            
0000B4FE                            locret_ADF0:
0000B4FE 4E75                       		rts	
0000B500                            ; ===========================================================================
0000B500                            
0000B500                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B500 343C 0060                  		move.w	#$60,d2
0000B504 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B508 6400                       		bcc.s	locret_AE20
0000B50A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B50E 9068 000C                  		sub.w	$C(a0),d0
0000B512 6400                       		bcc.s	locret_AE20
0000B514 0C40 FF80                  		cmpi.w	#-$80,d0
0000B518 6500                       		bcs.s	locret_AE20
0000B51A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B51E 6600                       		bne.s	locret_AE20
0000B520 5528 0025                  		subq.b	#2,$25(a0)
0000B524 3141 0010                  		move.w	d1,$10(a0)
0000B528 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B52E                            
0000B52E                            locret_AE20:
0000B52E 4E75                       		rts	
0000B530                            
0000B530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B530                            
0000B530                            
0000B530                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B530 323C 0080                  		move.w	#$80,d1
0000B534 08E8 0000 0022             		bset	#0,$22(a0)
0000B53A 3038 D008                  		move.w	($FFFFD008).w,d0
0000B53E 9068 0008                  		sub.w	8(a0),d0
0000B542 6400                       		bcc.s	loc_AE40
0000B544 4440                       		neg.w	d0
0000B546 4441                       		neg.w	d1
0000B548 08A8 0000 0022             		bclr	#0,$22(a0)
0000B54E                            
0000B54E                            loc_AE40:
0000B54E B042                       		cmp.w	d2,d0
0000B550 4E75                       		rts	
0000B552                            ; End of function Obj2D_ChkSonic2
0000B552                            
0000B552                            ; ===========================================================================
0000B552                            Ani_obj2D:
0000B552                            	include "_anim\obj2D.asm"
0000B552                            ; ---------------------------------------------------------------------------
0000B552                            ; Animation script - Burrobot enemy but craig
0000B552                            ; ---------------------------------------------------------------------------
0000B552 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B554 0000                       		dc.w byte_AE50-Ani_obj2D
0000B556 0000                       		dc.w byte_AE54-Ani_obj2D
0000B558 0000                       		dc.w byte_AE58-Ani_obj2D
0000B55A 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B55D 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B561 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B56F 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B572                            		even
0000B572                            		even
0000B572                            
0000B572                            ; ---------------------------------------------------------------------------
0000B572                            ; Sprite mappings - Burrobot enemy (LZ)
0000B572                            ; ---------------------------------------------------------------------------
0000B572                            Map_obj2D:
0000B572                            	include "_maps\obj2D.asm"
0000B572                            Map_e3a3:
0000B572 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B574 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B576 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B578 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B57A 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B57C 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B57E 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B580 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B582 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B584 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B586 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B588 02                         Map_e3a3_16: 	dc.b $2
0000B589 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B58E 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B593 02                         Map_e3a3_21: 	dc.b $2
0000B594 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B599 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B59E 02                         Map_e3a3_2C: 	dc.b $2
0000B59F EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B5A4 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B5A9 02                         Map_e3a3_37: 	dc.b $2
0000B5AA EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B5AF FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B5B4 02                         Map_e3a3_42: 	dc.b $2
0000B5B5 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B5BA FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B5BF 02                         Map_e3a3_4D: 	dc.b $2
0000B5C0 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B5C5 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B5CA 02                         Map_e3a3_58: 	dc.b $2
0000B5CB EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B5D0 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B5D5 02                         Map_e3a3_63: 	dc.b $2
0000B5D6 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B5DB FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B5E0 02                         Map_e3a3_6E: 	dc.b $2
0000B5E1 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B5E6 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B5EB 02                         Map_e3a3_79: 	dc.b $2
0000B5EC EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B5F1 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B5F6 02                         Map_e3a3_84: 	dc.b $2
0000B5F7 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B5FC 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B602 00                         	even
0000B602 00                         	even
0000B602                            
0000B602                            ; ===========================================================================
0000B602                            ; ---------------------------------------------------------------------------
0000B602                            ; Object 2F - large moving platforms (MZ)
0000B602                            ; ---------------------------------------------------------------------------
0000B602                            
0000B602                            Obj2F:					; XREF: Obj_Index
0000B602 7000                       		moveq	#0,d0
0000B604 1028 0024                  		move.b	$24(a0),d0
0000B608 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B60C 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B610                            ; ===========================================================================
0000B610 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B612 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B614                            
0000B614 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B616 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B618 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B61A 0140                       		dc.b 1,	$40
0000B61C 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B61E 0220                       		dc.b 2,	$20
0000B620                            ; ===========================================================================
0000B620                            
0000B620                            Obj2F_Main:				; XREF: Obj2F_Index
0000B620 5428 0024                  		addq.b	#2,$24(a0)
0000B624 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B62C 317C C000 0002             		move.w	#$C000,2(a0)
0000B632 117C 0004 0001             		move.b	#4,1(a0)
0000B638 117C 0005 0018             		move.b	#5,$18(a0)
0000B63E 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B644 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B64A 7000                       		moveq	#0,d0
0000B64C 1028 0028                  		move.b	$28(a0),d0
0000B650 E448                       		lsr.w	#2,d0
0000B652 0240 001C                  		andi.w	#$1C,d0
0000B656 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B65A 3019                       		move.w	(a1)+,d0
0000B65C 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B660 214A 0030                  		move.l	a2,$30(a0)
0000B664 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B668 1151 0019                  		move.b	(a1),$19(a0)
0000B66C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B672 117C 0040 0016             		move.b	#$40,$16(a0)
0000B678 08E8 0004 0001             		bset	#4,1(a0)
0000B67E                            
0000B67E                            Obj2F_Action:				; XREF: Obj2F_Index
0000B67E 6100 0000                  		bsr.w	Obj2F_Types
0000B682 4A28 0025                  		tst.b	$25(a0)
0000B686 6700                       		beq.s	Obj2F_Solid
0000B688 7200                       		moveq	#0,d1
0000B68A 1228 0019                  		move.b	$19(a0),d1
0000B68E 0641 000B                  		addi.w	#$B,d1
0000B692 6100 C552                  		bsr.w	ExitPlatform
0000B696 0829 0003 0022             		btst	#3,$22(a1)
0000B69C 6600 0000                  		bne.w	Obj2F_Slope
0000B6A0 4228 0025                  		clr.b	$25(a0)
0000B6A4 6000                       		bra.s	Obj2F_Display
0000B6A6                            ; ===========================================================================
0000B6A6                            
0000B6A6                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B6A6 7200                       		moveq	#0,d1
0000B6A8 1228 0019                  		move.b	$19(a0),d1
0000B6AC 0641 000B                  		addi.w	#$B,d1
0000B6B0 2468 0030                  		movea.l	$30(a0),a2
0000B6B4 3428 0008                  		move.w	8(a0),d2
0000B6B8 6100 D51C                  		bsr.w	SlopeObject2
0000B6BC 6000                       		bra.s	Obj2F_Display
0000B6BE                            ; ===========================================================================
0000B6BE                            
0000B6BE                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B6BE 7200                       		moveq	#0,d1
0000B6C0 1228 0019                  		move.b	$19(a0),d1
0000B6C4 0641 000B                  		addi.w	#$B,d1
0000B6C8 343C 0020                  		move.w	#$20,d2
0000B6CC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B6D2 6600                       		bne.s	loc_AF8E
0000B6D4 343C 0030                  		move.w	#$30,d2
0000B6D8                            
0000B6D8                            loc_AF8E:
0000B6D8 2468 0030                  		movea.l	$30(a0),a2
0000B6DC 6100 0000                  		bsr.w	SolidObject2F
0000B6E0                            
0000B6E0                            Obj2F_Display:				; XREF: Obj2F_Action
0000B6E0 6100 0000                  		bsr.w	DisplaySprite
0000B6E4 6000 0000                  		bra.w	Obj2F_ChkDel
0000B6E8                            
0000B6E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B6E8                            
0000B6E8                            
0000B6E8                            Obj2F_Types:				; XREF: Obj2F_Action
0000B6E8 7000                       		moveq	#0,d0
0000B6EA 1028 0028                  		move.b	$28(a0),d0
0000B6EE 0240 0007                  		andi.w	#7,d0
0000B6F2 D040                       		add.w	d0,d0
0000B6F4 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B6F8 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B6FC                            ; End of function Obj2F_Types
0000B6FC                            
0000B6FC                            ; ===========================================================================
0000B6FC 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B6FE 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B700 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B702 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B704 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B706 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B708                            ; ===========================================================================
0000B708                            
0000B708                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B708 4E75                       		rts			; type 00 platform doesn't move
0000B70A                            ; ===========================================================================
0000B70A                            
0000B70A                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B70A 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B70E 323C 0020                  		move.w	#$20,d1
0000B712 6000                       		bra.s	Obj2F_Move
0000B714                            ; ===========================================================================
0000B714                            
0000B714                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B714 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B718 323C 0030                  		move.w	#$30,d1
0000B71C 6000                       		bra.s	Obj2F_Move
0000B71E                            ; ===========================================================================
0000B71E                            
0000B71E                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B71E 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B722 323C 0040                  		move.w	#$40,d1
0000B726 6000                       		bra.s	Obj2F_Move
0000B728                            ; ===========================================================================
0000B728                            
0000B728                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B728 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B72C 323C 0060                  		move.w	#$60,d1
0000B730                            
0000B730                            Obj2F_Move:
0000B730 0828 0003 0028             		btst	#3,$28(a0)
0000B736 6700                       		beq.s	loc_AFF2
0000B738 4440                       		neg.w	d0
0000B73A D041                       		add.w	d1,d0
0000B73C                            
0000B73C                            loc_AFF2:
0000B73C 3228 002C                  		move.w	$2C(a0),d1
0000B740 9240                       		sub.w	d0,d1
0000B742 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B746 4E75                       		rts	
0000B748                            ; ===========================================================================
0000B748                            
0000B748                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B748 1028 0034                  		move.b	$34(a0),d0
0000B74C 4A28 0025                  		tst.b	$25(a0)
0000B750 6600                       		bne.s	loc_B010
0000B752 5500                       		subq.b	#2,d0
0000B754 6400                       		bcc.s	loc_B01C
0000B756 7000                       		moveq	#0,d0
0000B758 6000                       		bra.s	loc_B01C
0000B75A                            ; ===========================================================================
0000B75A                            
0000B75A                            loc_B010:
0000B75A 5800                       		addq.b	#4,d0
0000B75C 0C00 0040                  		cmpi.b	#$40,d0
0000B760 6500                       		bcs.s	loc_B01C
0000B762 103C 0040                  		move.b	#$40,d0
0000B766                            
0000B766                            loc_B01C:
0000B766 1140 0034                  		move.b	d0,$34(a0)
0000B76A 4EB9 0000 2B40             		jsr	(CalcSine).l
0000B770 E848                       		lsr.w	#4,d0
0000B772 3200                       		move.w	d0,d1
0000B774 D068 002C                  		add.w	$2C(a0),d0
0000B778 3140 000C                  		move.w	d0,$C(a0)
0000B77C 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B782 6600                       		bne.s	loc_B07A
0000B784 4A28 0035                  		tst.b	$35(a0)
0000B788 6600                       		bne.s	loc_B07A
0000B78A 117C 0001 0035             		move.b	#1,$35(a0)
0000B790 6100 0000                  		bsr.w	SingleObjLoad2
0000B794 6600                       		bne.s	loc_B07A
0000B796 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B79A 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7A0 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B7A6 5069 002C                  		addq.w	#8,$2C(a1)
0000B7AA 5769 002C                  		subq.w	#3,$2C(a1)
0000B7AE 0469 0040 0008             		subi.w	#$40,8(a1)
0000B7B4 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B7BA 2348 0038                  		move.l	a0,$38(a1)
0000B7BE 2448                       		movea.l	a0,a2
0000B7C0 6100                       		bsr.s	sub_B09C
0000B7C2                            
0000B7C2                            loc_B07A:
0000B7C2 7400                       		moveq	#0,d2
0000B7C4 45E8 0036                  		lea	$36(a0),a2
0000B7C8 141A                       		move.b	(a2)+,d2
0000B7CA 5302                       		subq.b	#1,d2
0000B7CC 6500                       		bcs.s	locret_B09A
0000B7CE                            
0000B7CE                            loc_B086:
0000B7CE 7000                       		moveq	#0,d0
0000B7D0 101A                       		move.b	(a2)+,d0
0000B7D2 ED48                       		lsl.w	#6,d0
0000B7D4 0640 D000                  		addi.w	#-$3000,d0
0000B7D8 3240                       		movea.w	d0,a1
0000B7DA 3341 003C                  		move.w	d1,$3C(a1)
0000B7DE 51CA FFEE                  		dbf	d2,loc_B086
0000B7E2                            
0000B7E2                            locret_B09A:
0000B7E2 4E75                       		rts	
0000B7E4                            
0000B7E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B7E4                            
0000B7E4                            
0000B7E4                            sub_B09C:
0000B7E4 45EA 0036                  		lea	$36(a2),a2
0000B7E8 7000                       		moveq	#0,d0
0000B7EA 1012                       		move.b	(a2),d0
0000B7EC 5212                       		addq.b	#1,(a2)
0000B7EE 45F2 0001                  		lea	1(a2,d0.w),a2
0000B7F2 3009                       		move.w	a1,d0
0000B7F4 0440 D000                  		subi.w	#-$3000,d0
0000B7F8 EC48                       		lsr.w	#6,d0
0000B7FA 0240 007F                  		andi.w	#$7F,d0
0000B7FE 1480                       		move.b	d0,(a2)
0000B800 4E75                       		rts	
0000B802                            ; End of function sub_B09C
0000B802                            
0000B802                            ; ===========================================================================
0000B802                            
0000B802                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B802 4A28 0035                  		tst.b	$35(a0)
0000B806 6700                       		beq.s	loc_B0C6
0000B808 4A28 0001                  		tst.b	1(a0)
0000B80C 6A00                       		bpl.s	Obj2F_DelFlames
0000B80E                            
0000B80E                            loc_B0C6:
0000B80E 3028 002A                  		move.w	$2A(a0),d0
0000B812 0240 FF80                  		andi.w	#$FF80,d0
0000B816 3238 F700                  		move.w	($FFFFF700).w,d1
0000B81A 0441 0080                  		subi.w	#$80,d1
0000B81E 0241 FF80                  		andi.w	#$FF80,d1
0000B822 9041                       		sub.w	d1,d0
0000B824 0C40 0280                  		cmpi.w	#$280,d0
0000B828 6200 0000                  		bhi.w	DeleteObject
0000B82C 4E75                       		rts	
0000B82E                            ; ===========================================================================
0000B82E                            
0000B82E                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B82E 7400                       		moveq	#0,d2
0000B830                            
0000B830                            loc_B0E8:
0000B830 45E8 0036                  		lea	$36(a0),a2
0000B834 1412                       		move.b	(a2),d2
0000B836 421A                       		clr.b	(a2)+
0000B838 5302                       		subq.b	#1,d2
0000B83A 6500                       		bcs.s	locret_B116
0000B83C                            
0000B83C                            loc_B0F4:
0000B83C 7000                       		moveq	#0,d0
0000B83E 1012                       		move.b	(a2),d0
0000B840 421A                       		clr.b	(a2)+
0000B842 ED48                       		lsl.w	#6,d0
0000B844 0640 D000                  		addi.w	#-$3000,d0
0000B848 3240                       		movea.w	d0,a1
0000B84A 6100 0000                  		bsr.w	DeleteObject2
0000B84E 51CA FFEC                  		dbf	d2,loc_B0F4
0000B852 117C 0000 0035             		move.b	#0,$35(a0)
0000B858 117C 0000 0034             		move.b	#0,$34(a0)
0000B85E                            
0000B85E                            locret_B116:
0000B85E 4E75                       		rts	
0000B860                            ; ===========================================================================
0000B860                            ; ---------------------------------------------------------------------------
0000B860                            ; Collision data for large moving platforms (MZ)
0000B860                            ; ---------------------------------------------------------------------------
0000B860                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B8AC                            		even
0000B8AC                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B8D8                            		even
0000B8D8                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B924                            		even
0000B924                            ; ===========================================================================
0000B924                            ; ---------------------------------------------------------------------------
0000B924                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B924                            ; (appears when	you walk on sinking platforms)
0000B924                            ; ---------------------------------------------------------------------------
0000B924                            
0000B924                            Obj35:					; XREF: Obj_Index
0000B924 7000                       		moveq	#0,d0
0000B926 1028 0024                  		move.b	$24(a0),d0
0000B92A 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B92E 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B932                            ; ===========================================================================
0000B932 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B934 0000                       		dc.w loc_B238-Obj35_Index
0000B936 0000                       		dc.w Obj35_Move-Obj35_Index
0000B938                            ; ===========================================================================
0000B938                            
0000B938                            Obj35_Main:				; XREF: Obj35_Index
0000B938 5428 0024                  		addq.b	#2,$24(a0)
0000B93C 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B944 317C 0345 0002             		move.w	#$345,2(a0)
0000B94A 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B950 117C 0004 0001             		move.b	#4,1(a0)
0000B956 117C 0001 0018             		move.b	#1,$18(a0)
0000B95C 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B962 117C 0008 0019             		move.b	#8,$19(a0)
0000B968 303C 00C8                  		move.w	#$C8,d0
0000B96C 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play flame sound
0000B972 4A28 0028                  		tst.b	$28(a0)
0000B976 6700                       		beq.s	loc_B238
0000B978 5428 0024                  		addq.b	#2,$24(a0)
0000B97C 6000 0000                  		bra.w	Obj35_Move
0000B980                            ; ===========================================================================
0000B980                            
0000B980                            loc_B238:				; XREF: Obj35_Index
0000B980 2268 0030                  		movea.l	$30(a0),a1
0000B984 3228 0008                  		move.w	8(a0),d1
0000B988 9268 002A                  		sub.w	$2A(a0),d1
0000B98C 0641 000C                  		addi.w	#$C,d1
0000B990 3001                       		move.w	d1,d0
0000B992 E248                       		lsr.w	#1,d0
0000B994 1031 0000                  		move.b	(a1,d0.w),d0
0000B998 4440                       		neg.w	d0
0000B99A D068 002C                  		add.w	$2C(a0),d0
0000B99E 3400                       		move.w	d0,d2
0000B9A0 D068 003C                  		add.w	$3C(a0),d0
0000B9A4 3140 000C                  		move.w	d0,$C(a0)
0000B9A8 0C41 0084                  		cmpi.w	#$84,d1
0000B9AC 6400                       		bcc.s	loc_B2B0
0000B9AE 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B9B6 0C41 0080                  		cmpi.w	#$80,d1
0000B9BA 6400                       		bcc.s	loc_B2B0
0000B9BC 2028 0008                  		move.l	8(a0),d0
0000B9C0 0680 0008 0000             		addi.l	#$80000,d0
0000B9C6 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B9CC 6600                       		bne.s	loc_B2B0
0000B9CE 6100 0000                  		bsr.w	SingleObjLoad2
0000B9D2 6600                       		bne.s	loc_B2B0
0000B9D4 12BC 0035                  		move.b	#$35,0(a1)
0000B9D8 3368 0008 0008             		move.w	8(a0),8(a1)
0000B9DE 3342 002C                  		move.w	d2,$2C(a1)
0000B9E2 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B9E8 137C 0001 0028             		move.b	#1,$28(a1)
0000B9EE 2468 0038                  		movea.l	$38(a0),a2
0000B9F2 6100 FDF0                  		bsr.w	sub_B09C
0000B9F6                            
0000B9F6                            loc_B2B0:
0000B9F6 6000                       		bra.s	Obj35_Animate
0000B9F8                            ; ===========================================================================
0000B9F8                            
0000B9F8                            Obj35_Move:				; XREF: Obj35_Index
0000B9F8 3028 002C                  		move.w	$2C(a0),d0
0000B9FC D068 003C                  		add.w	$3C(a0),d0
0000BA00 3140 000C                  		move.w	d0,$C(a0)
0000BA04                            
0000BA04                            Obj35_Animate:				; XREF: loc_B238
0000BA04 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BA0A 6100 F4AA                  		bsr.w	AnimateSprite
0000BA0E 6000 0000                  		bra.w	DisplaySprite
0000BA12                            ; ===========================================================================
0000BA12                            Ani_obj35:
0000BA12                            	include "_anim\obj35.asm"
0000BA12                            ; ---------------------------------------------------------------------------
0000BA12                            ; Animation script - fireball that sits on the	floor (MZ)
0000BA12                            ; ---------------------------------------------------------------------------
0000BA12 0000                       		dc.w byte_B2CE-Ani_obj35
0000BA14 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BA1A                            		even
0000BA1A                            		even
0000BA1A                            
0000BA1A                            ; ---------------------------------------------------------------------------
0000BA1A                            ; Sprite mappings - large moving platforms (MZ)
0000BA1A                            ; ---------------------------------------------------------------------------
0000BA1A                            Map_obj2F:
0000BA1A                            	include "_maps\obj2F.asm"
0000BA1A                            ; ---------------------------------------------------------------------------
0000BA1A                            ; Sprite mappings - large moving platforms (MZ)
0000BA1A                            ; ---------------------------------------------------------------------------
0000BA1A 0000                       		dc.w byte_B2DA-Map_obj2F
0000BA1C 0000                       		dc.w byte_B31C-Map_obj2F
0000BA1E 0000                       		dc.w byte_B34F-Map_obj2F
0000BA20 0D                         byte_B2DA:	dc.b $D
0000BA21 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BA26 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BA2B 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA30 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BA35 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BA3A F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA3F D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BA44 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BA49 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BA4E F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BA53 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BA58 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BA5D F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BA62 0A                         byte_B31C:	dc.b $A
0000BA63 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BA68 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BA6D 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA72 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BA77 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BA7C F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA81 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BA86 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BA8B C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BA90 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BA95 06                         byte_B34F:	dc.b 6
0000BA96 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BA9B F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BAA0 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BAA5 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BAAA F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BAAF 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BAB4                            		even
0000BAB4                            		even
0000BAB4                            
0000BAB4                            ; ---------------------------------------------------------------------------
0000BAB4                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BAB4                            ; ---------------------------------------------------------------------------
0000BAB4                            Map_obj14:
0000BAB4                            	include "_maps\obj14.asm"
0000BAB4                            ; --------------------------------------------------------------------------------
0000BAB4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BAB4                            ; --------------------------------------------------------------------------------
0000BAB4                            
0000BAB4                            SME_C6wT7:	
0000BAB4 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BAB8 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BABC 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BAC0 01                         SME_C6wT7_C:	dc.b 1	
0000BAC1 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BAC6 01                         SME_C6wT7_12:	dc.b 1	
0000BAC7 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BACC 02                         SME_C6wT7_18:	dc.b 2	
0000BACD EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BAD2 E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BAD7 01                         SME_C6wT7_23:	dc.b 1	
0000BAD8 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BADD 01                         SME_C6wT7_29:	dc.b 1	
0000BADE F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BAE3 01                         SME_C6wT7_2F:	dc.b 1	
0000BAE4 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BAEA 00                         		even
0000BAEA 00                         		even
0000BAEA                            
0000BAEA                            ; ===========================================================================
0000BAEA                            ; ---------------------------------------------------------------------------
0000BAEA                            ; Object 30 - large green glassy blocks	(MZ)
0000BAEA                            ; ---------------------------------------------------------------------------
0000BAEA                            
0000BAEA                            Obj30:					; XREF: Obj_Index
0000BAEA 7000                       		moveq	#0,d0
0000BAEC 1028 0024                  		move.b	$24(a0),d0
0000BAF0 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BAF4 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BAF8 3028 0008                  		move.w	8(a0),d0
0000BAFC 0240 FF80                  		andi.w	#$FF80,d0
0000BB00 3238 F700                  		move.w	($FFFFF700).w,d1
0000BB04 0441 0080                  		subi.w	#$80,d1
0000BB08 0241 FF80                  		andi.w	#$FF80,d1
0000BB0C 9041                       		sub.w	d1,d0
0000BB0E 0C40 0280                  		cmpi.w	#$280,d0
0000BB12 6200 0000                  		bhi.w	Obj30_Delete
0000BB16 6000 0000                  		bra.w	DisplaySprite
0000BB1A                            ; ===========================================================================
0000BB1A                            
0000BB1A                            Obj30_Delete:
0000BB1A 6000 0000                  		bra.w	DeleteObject
0000BB1E                            ; ===========================================================================
0000BB1E 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BB20 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BB22 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BB24 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BB26 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BB28                            
0000BB28 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BB2B 0400 01                    		dc.b 4,	0, 1
0000BB2E 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BB31 0800 01                    		dc.b 8,	0, 1
0000BB34                            ; ===========================================================================
0000BB34                            
0000BB34                            Obj30_Main:				; XREF: Obj30_Index
0000BB34 45F9 0000 BB28             		lea	(Obj30_Vars1).l,a2
0000BB3A 7201                       		moveq	#1,d1
0000BB3C 117C 0048 0016             		move.b	#$48,$16(a0)
0000BB42 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BB48 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BB4A 45F9 0000 BB2E             		lea	(Obj30_Vars2).l,a2
0000BB50 7201                       		moveq	#1,d1
0000BB52 117C 0038 0016             		move.b	#$38,$16(a0)
0000BB58                            
0000BB58                            loc_B40C:
0000BB58 2248                       		movea.l	a0,a1
0000BB5A 6000                       		bra.s	Obj30_Load	; load main object
0000BB5C                            ; ===========================================================================
0000BB5C                            
0000BB5C                            Obj30_Loop:
0000BB5C 6100 0000                  		bsr.w	SingleObjLoad2
0000BB60 6600                       		bne.s	loc_B480
0000BB62                            
0000BB62                            Obj30_Load:				; XREF: Obj30_Main
0000BB62 135A 0024                  		move.b	(a2)+,$24(a1)
0000BB66 12BC 0030                  		move.b	#$30,0(a1)
0000BB6A 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB70 101A                       		move.b	(a2)+,d0
0000BB72 4880                       		ext.w	d0
0000BB74 D068 000C                  		add.w	$C(a0),d0
0000BB78 3340 000C                  		move.w	d0,$C(a1)
0000BB7C 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BB84 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BB8A 137C 0004 0001             		move.b	#4,1(a1)
0000BB90 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BB96 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BB9C 137C 0020 0019             		move.b	#$20,$19(a1)
0000BBA2 137C 0004 0018             		move.b	#4,$18(a1)
0000BBA8 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BBAC 2348 003C                  		move.l	a0,$3C(a1)
0000BBB0 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BBB4                            
0000BBB4 137C 0010 0019             		move.b	#$10,$19(a1)
0000BBBA 137C 0003 0018             		move.b	#3,$18(a1)
0000BBC0 5029 0028                  		addq.b	#8,$28(a1)
0000BBC4 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BBCA                            
0000BBCA                            loc_B480:
0000BBCA 317C 0090 0032             		move.w	#$90,$32(a0)
0000BBD0 08E8 0004 0001             		bset	#4,1(a0)
0000BBD6                            
0000BBD6                            Obj30_Block012:				; XREF: Obj30_Index
0000BBD6 6100 0000                  		bsr.w	Obj30_Types
0000BBDA 323C 002B                  		move.w	#$2B,d1
0000BBDE 343C 0048                  		move.w	#$48,d2
0000BBE2 363C 0049                  		move.w	#$49,d3
0000BBE6 3828 0008                  		move.w	8(a0),d4
0000BBEA 6000 0000                  		bra.w	SolidObject
0000BBEE                            ; ===========================================================================
0000BBEE                            
0000BBEE                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BBEE 2268 003C                  		movea.l	$3C(a0),a1
0000BBF2 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BBF8 6000 0000                  		bra.w	Obj30_Types
0000BBFC                            ; ===========================================================================
0000BBFC                            
0000BBFC                            Obj30_Block34:				; XREF: Obj30_Index
0000BBFC 6100 0000                  		bsr.w	Obj30_Types
0000BC00 323C 002B                  		move.w	#$2B,d1
0000BC04 343C 0038                  		move.w	#$38,d2
0000BC08 363C 0039                  		move.w	#$39,d3
0000BC0C 3828 0008                  		move.w	8(a0),d4
0000BC10 6000 0000                  		bra.w	SolidObject
0000BC14                            ; ===========================================================================
0000BC14                            
0000BC14                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BC14 2268 003C                  		movea.l	$3C(a0),a1
0000BC18 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BC1E 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BC24 6000 0002                  		bra.w	*+4
0000BC28                            
0000BC28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BC28                            
0000BC28                            
0000BC28                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BC28 7000                       		moveq	#0,d0
0000BC2A 1028 0028                  		move.b	$28(a0),d0
0000BC2E 0240 0007                  		andi.w	#7,d0
0000BC32 D040                       		add.w	d0,d0
0000BC34 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BC38 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BC3C                            ; End of function Obj30_Types
0000BC3C                            
0000BC3C                            ; ===========================================================================
0000BC3C 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BC3E 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BC40 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BC42 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BC44 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BC46                            ; ===========================================================================
0000BC46                            
0000BC46                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BC46 4E75                       		rts	
0000BC48                            ; ===========================================================================
0000BC48                            
0000BC48                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BC48 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC4C 323C 0040                  		move.w	#$40,d1
0000BC50 6000                       		bra.s	loc_B514
0000BC52                            ; ===========================================================================
0000BC52                            
0000BC52                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BC52 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC56 323C 0040                  		move.w	#$40,d1
0000BC5A 4440                       		neg.w	d0
0000BC5C D041                       		add.w	d1,d0
0000BC5E                            
0000BC5E                            loc_B514:				; XREF: Obj30_Type01
0000BC5E 0828 0003 0028             		btst	#3,$28(a0)
0000BC64 6700                       		beq.s	loc_B526
0000BC66 4440                       		neg.w	d0
0000BC68 D041                       		add.w	d1,d0
0000BC6A E208                       		lsr.b	#1,d0
0000BC6C 0640 0020                  		addi.w	#$20,d0
0000BC70                            
0000BC70                            loc_B526:
0000BC70 6000 0000                  		bra.w	loc_B5EE
0000BC74                            ; ===========================================================================
0000BC74                            
0000BC74                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BC74 0828 0003 0028             		btst	#3,$28(a0)
0000BC7A 6700                       		beq.s	loc_B53E
0000BC7C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC80 0440 0010                  		subi.w	#$10,d0
0000BC84 6000 0000                  		bra.w	loc_B5EE
0000BC88                            ; ===========================================================================
0000BC88                            
0000BC88                            loc_B53E:
0000BC88 0828 0003 0022             		btst	#3,$22(a0)
0000BC8E 6600                       		bne.s	loc_B54E
0000BC90 08A8 0000 0034             		bclr	#0,$34(a0)
0000BC96 6000                       		bra.s	loc_B582
0000BC98                            ; ===========================================================================
0000BC98                            
0000BC98                            loc_B54E:
0000BC98 4A28 0034                  		tst.b	$34(a0)
0000BC9C 6600                       		bne.s	loc_B582
0000BC9E 117C 0001 0034             		move.b	#1,$34(a0)
0000BCA4 08E8 0000 0035             		bset	#0,$35(a0)
0000BCAA 6700                       		beq.s	loc_B582
0000BCAC 08E8 0007 0034             		bset	#7,$34(a0)
0000BCB2 317C 0010 0036             		move.w	#$10,$36(a0)
0000BCB8 117C 000A 0038             		move.b	#$A,$38(a0)
0000BCBE 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BCC4 6600                       		bne.s	loc_B582
0000BCC6 317C 0040 0036             		move.w	#$40,$36(a0)
0000BCCC                            
0000BCCC                            loc_B582:
0000BCCC 4A28 0034                  		tst.b	$34(a0)
0000BCD0 6A00                       		bpl.s	loc_B5AA
0000BCD2 4A28 0038                  		tst.b	$38(a0)
0000BCD6 6700                       		beq.s	loc_B594
0000BCD8 5328 0038                  		subq.b	#1,$38(a0)
0000BCDC 6600                       		bne.s	loc_B5AA
0000BCDE                            
0000BCDE                            loc_B594:
0000BCDE 4A68 0032                  		tst.w	$32(a0)
0000BCE2 6700                       		beq.s	loc_B5A4
0000BCE4 5368 0032                  		subq.w	#1,$32(a0)
0000BCE8 5368 0036                  		subq.w	#1,$36(a0)
0000BCEC 6600                       		bne.s	loc_B5AA
0000BCEE                            
0000BCEE                            loc_B5A4:
0000BCEE 08A8 0007 0034             		bclr	#7,$34(a0)
0000BCF4                            
0000BCF4                            loc_B5AA:
0000BCF4 3028 0032                  		move.w	$32(a0),d0
0000BCF8 6000                       		bra.s	loc_B5EE
0000BCFA                            ; ===========================================================================
0000BCFA                            
0000BCFA                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BCFA 0828 0003 0028             		btst	#3,$28(a0)
0000BD00 6700                       		beq.s	Obj30_ChkSwitch
0000BD02 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BD06 0440 0010                  		subi.w	#$10,d0
0000BD0A 6000                       		bra.s	loc_B5EE
0000BD0C                            ; ===========================================================================
0000BD0C                            
0000BD0C                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BD0C 4A28 0034                  		tst.b	$34(a0)
0000BD10 6600                       		bne.s	loc_B5E0
0000BD12 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BD16 7000                       		moveq	#0,d0
0000BD18 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BD1C E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BD1E 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BD22 6700                       		beq.s	loc_B5EA	; if not, branch
0000BD24 117C 0001 0034             		move.b	#1,$34(a0)
0000BD2A                            
0000BD2A                            loc_B5E0:
0000BD2A 4A68 0032                  		tst.w	$32(a0)
0000BD2E 6700                       		beq.s	loc_B5EA
0000BD30 5568 0032                  		subq.w	#2,$32(a0)
0000BD34                            
0000BD34                            loc_B5EA:
0000BD34 3028 0032                  		move.w	$32(a0),d0
0000BD38                            
0000BD38                            loc_B5EE:
0000BD38 3228 0030                  		move.w	$30(a0),d1
0000BD3C 9240                       		sub.w	d0,d1
0000BD3E 3141 000C                  		move.w	d1,$C(a0)
0000BD42 4E75                       		rts	
0000BD44                            ; ===========================================================================
0000BD44                            ; ---------------------------------------------------------------------------
0000BD44                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD44                            ; ---------------------------------------------------------------------------
0000BD44                            Map_obj30:
0000BD44                            	include "_maps\obj30.asm"
0000BD44                            ; ---------------------------------------------------------------------------
0000BD44                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD44                            ; ---------------------------------------------------------------------------
0000BD44 0000                       		dc.w byte_B600-Map_obj30
0000BD46 0000                       		dc.w byte_B63D-Map_obj30
0000BD48 0000                       		dc.w byte_B648-Map_obj30
0000BD4A 0C                         byte_B600:	dc.b $C
0000BD4B B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BD50 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BD55 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BD5A C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BD5F E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BD64 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BD69 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BD6E 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BD73 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BD78 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BD7D 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BD82 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BD87 02                         byte_B63D:	dc.b 2
0000BD88 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BD8D 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BD92 0A                         byte_B648:	dc.b $A
0000BD93 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BD98 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BD9D D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BDA2 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BDA7 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BDAC F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BDB1 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BDB6 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BDBB 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BDC0 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BDC6 00                         		even
0000BDC6 00                         		even
0000BDC6                            
0000BDC6                            ; ===========================================================================
0000BDC6                            ; ---------------------------------------------------------------------------
0000BDC6                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BDC6                            ; ---------------------------------------------------------------------------
0000BDC6                            
0000BDC6                            Obj31:					; XREF: Obj_Index
0000BDC6 7000                       		moveq	#0,d0
0000BDC8 1028 0024                  		move.b	$24(a0),d0
0000BDCC 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BDD0 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BDD4                            ; ===========================================================================
0000BDD4 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BDD6 0000                       		dc.w loc_B798-Obj31_Index
0000BDD8 0000                       		dc.w loc_B7FE-Obj31_Index
0000BDDA 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BDDC 0000                       		dc.w loc_B7E2-Obj31_Index
0000BDDE                            
0000BDDE 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BDE0 0100                       		dc.b 1,	0
0000BDE2                            
0000BDE2 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BDE5 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BDE8 08CC 03                    		dc.b 8,	$CC, 3
0000BDEB 06F0 02                    		dc.b 6,	$F0, 2
0000BDEE                            
0000BDEE 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BDF2 5000 7800                  		dc.w $5000, $7800
0000BDF6 3800 5800                  		dc.w $3800, $5800
0000BDFA B800                       		dc.w $B800
0000BDFC                            ; ===========================================================================
0000BDFC                            
0000BDFC                            Obj31_Main:				; XREF: Obj31_Index
0000BDFC 7000                       		moveq	#0,d0
0000BDFE 1028 0028                  		move.b	$28(a0),d0
0000BE02 6A00                       		bpl.s	loc_B6CE
0000BE04 0240 007F                  		andi.w	#$7F,d0
0000BE08 D040                       		add.w	d0,d0
0000BE0A 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BE0E 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BE12 101A                       		move.b	(a2)+,d0
0000BE14 1140 0028                  		move.b	d0,$28(a0)
0000BE18                            
0000BE18                            loc_B6CE:
0000BE18 0200 000F                  		andi.b	#$F,d0
0000BE1C D040                       		add.w	d0,d0
0000BE1E 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BE22 4A40                       		tst.w	d0
0000BE24 6600                       		bne.s	loc_B6E0
0000BE26 3142 0032                  		move.w	d2,$32(a0)
0000BE2A                            
0000BE2A                            loc_B6E0:
0000BE2A 45F9 0000 BDE2             		lea	(Obj31_Var).l,a2
0000BE30 2248                       		movea.l	a0,a1
0000BE32 7203                       		moveq	#3,d1
0000BE34 6000                       		bra.s	Obj31_MakeStomper
0000BE36                            ; ===========================================================================
0000BE36                            
0000BE36                            Obj31_Loop:
0000BE36 6100 0000                  		bsr.w	SingleObjLoad2
0000BE3A 6600 0000                  		bne.w	Obj31_SetSize
0000BE3E                            
0000BE3E                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BE3E 135A 0024                  		move.b	(a2)+,$24(a1)
0000BE42 12BC 0031                  		move.b	#$31,0(a1)
0000BE46 3368 0008 0008             		move.w	8(a0),8(a1)
0000BE4C 101A                       		move.b	(a2)+,d0
0000BE4E 4880                       		ext.w	d0
0000BE50 D068 000C                  		add.w	$C(a0),d0
0000BE54 3340 000C                  		move.w	d0,$C(a1)
0000BE58 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BE60 337C 0300 0002             		move.w	#$300,2(a1)
0000BE66 137C 0004 0001             		move.b	#4,1(a1)
0000BE6C 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BE72 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BE78 137C 0010 0019             		move.b	#$10,$19(a1)
0000BE7E 3342 0034                  		move.w	d2,$34(a1)
0000BE82 137C 0004 0018             		move.b	#4,$18(a1)
0000BE88 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BE8C 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BE92 6600                       		bne.s	loc_B76A
0000BE94 5341                       		subq.w	#1,d1
0000BE96 1028 0028                  		move.b	$28(a0),d0
0000BE9A 0240 00F0                  		andi.w	#$F0,d0
0000BE9E 0C40 0020                  		cmpi.w	#$20,d0
0000BEA2 679A                       		beq.s	Obj31_MakeStomper
0000BEA4 137C 0038 0019             		move.b	#$38,$19(a1)
0000BEAA 137C 0090 0020             		move.b	#$90,$20(a1)
0000BEB0 5241                       		addq.w	#1,d1
0000BEB2                            
0000BEB2                            loc_B76A:
0000BEB2 2348 003C                  		move.l	a0,$3C(a1)
0000BEB6 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BEBA                            
0000BEBA 137C 0003 0018             		move.b	#3,$18(a1)
0000BEC0                            
0000BEC0                            Obj31_SetSize:
0000BEC0 7000                       		moveq	#0,d0
0000BEC2 1028 0028                  		move.b	$28(a0),d0
0000BEC6 E648                       		lsr.w	#3,d0
0000BEC8 0200 000E                  		andi.b	#$E,d0
0000BECC 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BED0 115A 0019                  		move.b	(a2)+,$19(a0)
0000BED4 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BED8 6000                       		bra.s	loc_B798
0000BEDA                            ; ===========================================================================
0000BEDA 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BEDC 3009                       		dc.b $30, 9
0000BEDE 100A                       		dc.b $10, $A
0000BEE0                            ; ===========================================================================
0000BEE0                            
0000BEE0                            loc_B798:				; XREF: Obj31_Index
0000BEE0 6100 0000                  		bsr.w	Obj31_Types
0000BEE4 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BEEA 7200                       		moveq	#0,d1
0000BEEC 1228 0019                  		move.b	$19(a0),d1
0000BEF0 0641 000B                  		addi.w	#$B,d1
0000BEF4 343C 000C                  		move.w	#$C,d2
0000BEF8 363C 000D                  		move.w	#$D,d3
0000BEFC 3828 0008                  		move.w	8(a0),d4
0000BF00 6100 0000                  		bsr.w	SolidObject
0000BF04 0828 0003 0022             		btst	#3,$22(a0)
0000BF0A 6700                       		beq.s	Obj31_Display
0000BF0C 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BF12 6400                       		bcc.s	Obj31_Display
0000BF14 2448                       		movea.l	a0,a2
0000BF16 41F8 D000                  		lea	($FFFFD000).w,a0
0000BF1A 4EB9 0000 0000             		jsr	KillSonic
0000BF20 204A                       		movea.l	a2,a0
0000BF22                            
0000BF22                            Obj31_Display:
0000BF22 6100 0000                  		bsr.w	DisplaySprite
0000BF26 6000 0000                  		bra.w	Obj31_ChkDel
0000BF2A                            ; ===========================================================================
0000BF2A                            
0000BF2A                            loc_B7E2:				; XREF: Obj31_Index
0000BF2A 117C 0080 0016             		move.b	#$80,$16(a0)
0000BF30 08E8 0004 0001             		bset	#4,1(a0)
0000BF36 2268 003C                  		movea.l	$3C(a0),a1
0000BF3A 1029 0032                  		move.b	$32(a1),d0
0000BF3E EA08                       		lsr.b	#5,d0
0000BF40 5600                       		addq.b	#3,d0
0000BF42 1140 001A                  		move.b	d0,$1A(a0)
0000BF46                            
0000BF46                            loc_B7FE:				; XREF: Obj31_Index
0000BF46 2268 003C                  		movea.l	$3C(a0),a1
0000BF4A 7000                       		moveq	#0,d0
0000BF4C 1029 0032                  		move.b	$32(a1),d0
0000BF50 D068 0030                  		add.w	$30(a0),d0
0000BF54 3140 000C                  		move.w	d0,$C(a0)
0000BF58                            
0000BF58                            Obj31_Display2:				; XREF: Obj31_Index
0000BF58 6100 0000                  		bsr.w	DisplaySprite
0000BF5C                            
0000BF5C                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BF5C 3028 0008                  		move.w	8(a0),d0
0000BF60 0240 FF80                  		andi.w	#$FF80,d0
0000BF64 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF68 0441 0080                  		subi.w	#$80,d1
0000BF6C 0241 FF80                  		andi.w	#$FF80,d1
0000BF70 9041                       		sub.w	d1,d0
0000BF72 0C40 0280                  		cmpi.w	#$280,d0
0000BF76 6200 0000                  		bhi.w	DeleteObject
0000BF7A 4E75                       		rts	
0000BF7C                            ; ===========================================================================
0000BF7C                            
0000BF7C                            Obj31_Types:				; XREF: loc_B798
0000BF7C 1028 0028                  		move.b	$28(a0),d0
0000BF80 0240 000F                  		andi.w	#$F,d0
0000BF84 D040                       		add.w	d0,d0
0000BF86 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BF8A 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BF8E                            ; ===========================================================================
0000BF8E 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BF90 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF92 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF94 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BF96 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF98 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BF9A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF9C                            ; ===========================================================================
0000BF9C                            
0000BF9C                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BF9C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BFA0 7000                       		moveq	#0,d0
0000BFA2 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BFA6 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BFAA 6700                       		beq.s	loc_B8A8	; if not, branch
0000BFAC 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BFB0 6A00                       		bpl.s	loc_B872
0000BFB2 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BFB8 6700                       		beq.s	loc_B8A0
0000BFBA                            
0000BFBA                            loc_B872:
0000BFBA 4A68 0032                  		tst.w	$32(a0)
0000BFBE 6700                       		beq.s	loc_B8A0
0000BFC0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BFC4 0200 000F                  		andi.b	#$F,d0
0000BFC8 6600                       		bne.s	loc_B892
0000BFCA 4A28 0001                  		tst.b	1(a0)
0000BFCE 6A00                       		bpl.s	loc_B892
0000BFD0 303C 00C7                  		move.w	#$C7,d0
0000BFD4 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BFDA                            
0000BFDA                            loc_B892:
0000BFDA 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFE0 6400                       		bcc.s	Obj31_Restart
0000BFE2 317C 0000 0032             		move.w	#0,$32(a0)
0000BFE8                            
0000BFE8                            loc_B8A0:
0000BFE8 317C 0000 0012             		move.w	#0,$12(a0)
0000BFEE 6000                       		bra.s	Obj31_Restart
0000BFF0                            ; ===========================================================================
0000BFF0                            
0000BFF0                            loc_B8A8:				; XREF: Obj31_Type00
0000BFF0 3228 0034                  		move.w	$34(a0),d1
0000BFF4 B268 0032                  		cmp.w	$32(a0),d1
0000BFF8 6700                       		beq.s	Obj31_Restart
0000BFFA 3028 0012                  		move.w	$12(a0),d0
0000BFFE 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C004 D168 0032                  		add.w	d0,$32(a0)
0000C008 B268 0032                  		cmp.w	$32(a0),d1
0000C00C 6200                       		bhi.s	Obj31_Restart
0000C00E 3141 0032                  		move.w	d1,$32(a0)
0000C012 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C018 4A28 0001                  		tst.b	1(a0)
0000C01C 6A00                       		bpl.s	Obj31_Restart
0000C01E 303C 00BD                  		move.w	#$BD,d0
0000C022 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C028                            
0000C028                            Obj31_Restart:
0000C028 7000                       		moveq	#0,d0
0000C02A 1028 0032                  		move.b	$32(a0),d0
0000C02E D068 0030                  		add.w	$30(a0),d0
0000C032 3140 000C                  		move.w	d0,$C(a0)
0000C036 4E75                       		rts	
0000C038                            ; ===========================================================================
0000C038                            
0000C038                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C038 4A68 0036                  		tst.w	$36(a0)
0000C03C 6700                       		beq.s	loc_B938
0000C03E 4A68 0038                  		tst.w	$38(a0)
0000C042 6700                       		beq.s	loc_B902
0000C044 5368 0038                  		subq.w	#1,$38(a0)
0000C048 6000                       		bra.s	loc_B97C
0000C04A                            ; ===========================================================================
0000C04A                            
0000C04A                            loc_B902:
0000C04A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C04E 0200 000F                  		andi.b	#$F,d0
0000C052 6600                       		bne.s	loc_B91C
0000C054 4A28 0001                  		tst.b	1(a0)
0000C058 6A00                       		bpl.s	loc_B91C
0000C05A 303C 00C7                  		move.w	#$C7,d0
0000C05E 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C064                            
0000C064                            loc_B91C:
0000C064 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C06A 6400                       		bcc.s	loc_B97C
0000C06C 317C 0000 0032             		move.w	#0,$32(a0)
0000C072 317C 0000 0012             		move.w	#0,$12(a0)
0000C078 317C 0000 0036             		move.w	#0,$36(a0)
0000C07E 6000                       		bra.s	loc_B97C
0000C080                            ; ===========================================================================
0000C080                            
0000C080                            loc_B938:				; XREF: Obj31_Type01
0000C080 3228 0034                  		move.w	$34(a0),d1
0000C084 B268 0032                  		cmp.w	$32(a0),d1
0000C088 6700                       		beq.s	loc_B97C
0000C08A 3028 0012                  		move.w	$12(a0),d0
0000C08E 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C094 D168 0032                  		add.w	d0,$32(a0)
0000C098 B268 0032                  		cmp.w	$32(a0),d1
0000C09C 6200                       		bhi.s	loc_B97C
0000C09E 3141 0032                  		move.w	d1,$32(a0)
0000C0A2 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C0A8 317C 0001 0036             		move.w	#1,$36(a0)
0000C0AE 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C0B4 4A28 0001                  		tst.b	1(a0)
0000C0B8 6A00                       		bpl.s	loc_B97C
0000C0BA 303C 00BD                  		move.w	#$BD,d0
0000C0BE 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C0C4                            
0000C0C4                            loc_B97C:
0000C0C4 6000 FF62                  		bra.w	Obj31_Restart
0000C0C8                            ; ===========================================================================
0000C0C8                            
0000C0C8                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C0C8 3038 D008                  		move.w	($FFFFD008).w,d0
0000C0CC 9068 0008                  		sub.w	8(a0),d0
0000C0D0 6400                       		bcc.s	loc_B98C
0000C0D2 4440                       		neg.w	d0
0000C0D4                            
0000C0D4                            loc_B98C:
0000C0D4 0C40 0090                  		cmpi.w	#$90,d0
0000C0D8 6400                       		bcc.s	loc_B996
0000C0DA 5228 0028                  		addq.b	#1,$28(a0)
0000C0DE                            
0000C0DE                            loc_B996:
0000C0DE 6000 FF48                  		bra.w	Obj31_Restart
0000C0E2                            ; ===========================================================================
0000C0E2                            ; ---------------------------------------------------------------------------
0000C0E2                            ; Object 45 - spiked metal block from beta version (MZ)
0000C0E2                            ; ---------------------------------------------------------------------------
0000C0E2                            
0000C0E2                            Obj45:					; XREF: Obj_Index
0000C0E2 7000                       		moveq	#0,d0
0000C0E4 1028 0024                  		move.b	$24(a0),d0
0000C0E8 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C0EC 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C0F0                            ; ===========================================================================
0000C0F0 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C0F2 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C0F4 0000                       		dc.w loc_BA8E-Obj45_Index
0000C0F6 0000                       		dc.w Obj45_Display-Obj45_Index
0000C0F8 0000                       		dc.w loc_BA7A-Obj45_Index
0000C0FA                            
0000C0FA 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C0FD 04E4 01                    		dc.b	4, $E4,	  1
0000C100 0834 03                    		dc.b	8, $34,	  3
0000C103 0628 02                    		dc.b	6, $28,	  2
0000C106                            
0000C106 3800                       word_B9BE:	dc.w $3800
0000C108 A000                       		dc.w -$6000
0000C10A 5000                       		dc.w $5000
0000C10C                            ; ===========================================================================
0000C10C                            
0000C10C                            Obj45_Main:				; XREF: Obj45_Index
0000C10C 7000                       		moveq	#0,d0
0000C10E 1028 0028                  		move.b	$28(a0),d0
0000C112 D040                       		add.w	d0,d0
0000C114 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C118 45F9 0000 C0FA             		lea	(Obj45_Var).l,a2
0000C11E 2248                       		movea.l	a0,a1
0000C120 7203                       		moveq	#3,d1
0000C122 6000                       		bra.s	Obj45_Load
0000C124                            ; ===========================================================================
0000C124                            
0000C124                            Obj45_Loop:
0000C124 6100 0000                  		bsr.w	SingleObjLoad2
0000C128 6600                       		bne.s	loc_BA52
0000C12A                            
0000C12A                            Obj45_Load:				; XREF: Obj45_Main
0000C12A 135A 0024                  		move.b	(a2)+,$24(a1)
0000C12E 12BC 0045                  		move.b	#$45,0(a1)
0000C132 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C138 101A                       		move.b	(a2)+,d0
0000C13A 4880                       		ext.w	d0
0000C13C D068 0008                  		add.w	8(a0),d0
0000C140 3340 0008                  		move.w	d0,8(a1)
0000C144 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C14C 337C 0300 0002             		move.w	#$300,2(a1)
0000C152 137C 0004 0001             		move.b	#4,1(a1)
0000C158 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C15E 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C164 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C16A 137C 0020 0019             		move.b	#$20,$19(a1)
0000C170 3342 0034                  		move.w	d2,$34(a1)
0000C174 137C 0004 0018             		move.b	#4,$18(a1)
0000C17A 0C12 0001                  		cmpi.b	#1,(a2)
0000C17E 6600                       		bne.s	loc_BA40
0000C180 137C 0091 0020             		move.b	#$91,$20(a1)
0000C186                            
0000C186                            loc_BA40:
0000C186 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C18A 2348 003C                  		move.l	a0,$3C(a1)
0000C18E 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C192                            
0000C192 137C 0003 0018             		move.b	#3,$18(a1)
0000C198                            
0000C198                            loc_BA52:
0000C198 117C 0010 0019             		move.b	#$10,$19(a0)
0000C19E                            
0000C19E                            Obj45_Solid:				; XREF: Obj45_Index
0000C19E 3F28 0008                  		move.w	8(a0),-(sp)
0000C1A2 6100 0000                  		bsr.w	Obj45_Move
0000C1A6 323C 0017                  		move.w	#$17,d1
0000C1AA 343C 0020                  		move.w	#$20,d2
0000C1AE 363C 0020                  		move.w	#$20,d3
0000C1B2 381F                       		move.w	(sp)+,d4
0000C1B4 6100 0000                  		bsr.w	SolidObject
0000C1B8 6100 0000                  		bsr.w	DisplaySprite
0000C1BC 6000 0000                  		bra.w	Obj45_ChkDel
0000C1C0                            ; ===========================================================================
0000C1C0                            
0000C1C0                            loc_BA7A:				; XREF: Obj45_Index
0000C1C0 2268 003C                  		movea.l	$3C(a0),a1
0000C1C4 1029 0032                  		move.b	$32(a1),d0
0000C1C8 0600 0010                  		addi.b	#$10,d0
0000C1CC EA08                       		lsr.b	#5,d0
0000C1CE 5600                       		addq.b	#3,d0
0000C1D0 1140 001A                  		move.b	d0,$1A(a0)
0000C1D4                            
0000C1D4                            loc_BA8E:				; XREF: Obj45_Index
0000C1D4 2268 003C                  		movea.l	$3C(a0),a1
0000C1D8 7000                       		moveq	#0,d0
0000C1DA 1029 0032                  		move.b	$32(a1),d0
0000C1DE 4440                       		neg.w	d0
0000C1E0 D068 0030                  		add.w	$30(a0),d0
0000C1E4 3140 0008                  		move.w	d0,8(a0)
0000C1E8                            
0000C1E8                            Obj45_Display:				; XREF: Obj45_Index
0000C1E8 6100 0000                  		bsr.w	DisplaySprite
0000C1EC                            
0000C1EC                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C1EC 3028 003A                  		move.w	$3A(a0),d0
0000C1F0 0240 FF80                  		andi.w	#$FF80,d0
0000C1F4 3238 F700                  		move.w	($FFFFF700).w,d1
0000C1F8 0441 0080                  		subi.w	#$80,d1
0000C1FC 0241 FF80                  		andi.w	#$FF80,d1
0000C200 9041                       		sub.w	d1,d0
0000C202 0C40 0280                  		cmpi.w	#$280,d0
0000C206 6200 0000                  		bhi.w	DeleteObject
0000C20A 4E75                       		rts	
0000C20C                            
0000C20C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C20C                            
0000C20C                            
0000C20C                            Obj45_Move:				; XREF: Obj45_Solid
0000C20C 7000                       		moveq	#0,d0
0000C20E 1028 0028                  		move.b	$28(a0),d0
0000C212 D040                       		add.w	d0,d0
0000C214 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C218 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C21C                            ; End of function Obj45_Move
0000C21C                            
0000C21C                            ; ===========================================================================
0000C21C 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C21E 0000                       		dc.w loc_BADA-off_BAD6
0000C220                            ; ===========================================================================
0000C220                            
0000C220                            loc_BADA:				; XREF: off_BAD6
0000C220 4A68 0036                  		tst.w	$36(a0)
0000C224 6700                       		beq.s	loc_BB08
0000C226 4A68 0038                  		tst.w	$38(a0)
0000C22A 6700                       		beq.s	loc_BAEC
0000C22C 5368 0038                  		subq.w	#1,$38(a0)
0000C230 6000                       		bra.s	loc_BB3C
0000C232                            ; ===========================================================================
0000C232                            
0000C232                            loc_BAEC:
0000C232 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C238 6400                       		bcc.s	loc_BB3C
0000C23A 317C 0000 0032             		move.w	#0,$32(a0)
0000C240 317C 0000 0010             		move.w	#0,$10(a0)
0000C246 317C 0000 0036             		move.w	#0,$36(a0)
0000C24C 6000                       		bra.s	loc_BB3C
0000C24E                            ; ===========================================================================
0000C24E                            
0000C24E                            loc_BB08:				; XREF: loc_BADA
0000C24E 3228 0034                  		move.w	$34(a0),d1
0000C252 B268 0032                  		cmp.w	$32(a0),d1
0000C256 6700                       		beq.s	loc_BB3C
0000C258 3028 0010                  		move.w	$10(a0),d0
0000C25C 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C262 D168 0032                  		add.w	d0,$32(a0)
0000C266 B268 0032                  		cmp.w	$32(a0),d1
0000C26A 6200                       		bhi.s	loc_BB3C
0000C26C 3141 0032                  		move.w	d1,$32(a0)
0000C270 317C 0000 0010             		move.w	#0,$10(a0)
0000C276 317C 0001 0036             		move.w	#1,$36(a0)
0000C27C 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C282                            
0000C282                            loc_BB3C:
0000C282 7000                       		moveq	#0,d0
0000C284 1028 0032                  		move.b	$32(a0),d0
0000C288 4440                       		neg.w	d0
0000C28A D068 0030                  		add.w	$30(a0),d0
0000C28E 3140 0008                  		move.w	d0,8(a0)
0000C292 4E75                       		rts	
0000C294                            ; ===========================================================================
0000C294                            ; ---------------------------------------------------------------------------
0000C294                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C294                            ; ---------------------------------------------------------------------------
0000C294                            Map_obj31:
0000C294                            	include "_maps\obj31.asm"
0000C294                            ; ---------------------------------------------------------------------------
0000C294                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C294                            ; ---------------------------------------------------------------------------
0000C294 0000                       		dc.w byte_BB64-Map_obj31
0000C296 0000                       		dc.w byte_BB7E-Map_obj31
0000C298 0000                       		dc.w byte_BB98-Map_obj31
0000C29A 0000                       		dc.w byte_BB9E-Map_obj31
0000C29C 0000                       		dc.w byte_BBA9-Map_obj31
0000C29E 0000                       		dc.w byte_BBBE-Map_obj31
0000C2A0 0000                       		dc.w byte_BBDD-Map_obj31
0000C2A2 0000                       		dc.w byte_BC06-Map_obj31
0000C2A4 0000                       		dc.w byte_BC06-Map_obj31
0000C2A6 0000                       		dc.w byte_BC39-Map_obj31
0000C2A8 0000                       		dc.w byte_BC53-Map_obj31
0000C2AA 05                         byte_BB64:	dc.b 5
0000C2AB F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C2B0 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C2B5 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C2BA F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C2BF F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C2C4 05                         byte_BB7E:	dc.b 5
0000C2C5 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C2CA F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C2CF F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C2D4 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C2D9 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C2DE 01                         byte_BB98:	dc.b 1
0000C2DF DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C2E4 02                         byte_BB9E:	dc.b 2
0000C2E5 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C2EA 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C2EF 04                         byte_BBA9:	dc.b 4
0000C2F0 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C2F5 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C2FA 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C2FF 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C304 06                         byte_BBBE:	dc.b 6
0000C305 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C30A D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C30F E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C314 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C319 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C31E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C323 08                         byte_BBDD:	dc.b 8
0000C324 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C329 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C32E C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C333 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C338 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C33D F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C342 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C347 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C34C 0A                         byte_BC06:	dc.b $A
0000C34D 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C352 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C357 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C35C B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C361 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C366 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C36B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C370 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C375 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C37A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C37F 05                         byte_BC39:	dc.b 5
0000C380 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C385 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C38A F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C38F F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C394 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C399 01                         byte_BC53:	dc.b 1
0000C39A EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C3A0 00                         		even
0000C3A0 00                         		even
0000C3A0                            
0000C3A0                            ; ---------------------------------------------------------------------------
0000C3A0                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C3A0                            ; ---------------------------------------------------------------------------
0000C3A0                            Map_obj45:
0000C3A0                            	include "_maps\obj45.asm"
0000C3A0                            ; ---------------------------------------------------------------------------
0000C3A0                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C3A0                            ; ---------------------------------------------------------------------------
0000C3A0 0000                       		dc.w byte_BC6C-Map_obj45
0000C3A2 0000                       		dc.w byte_BC7C-Map_obj45
0000C3A4 0000                       		dc.w byte_BC8C-Map_obj45
0000C3A6 0000                       		dc.w byte_BC92-Map_obj45
0000C3A8 0000                       		dc.w byte_BC9D-Map_obj45
0000C3AA 0000                       		dc.w byte_BCB2-Map_obj45
0000C3AC 0000                       		dc.w byte_BCD1-Map_obj45
0000C3AE 0000                       		dc.w byte_BCFA-Map_obj45
0000C3B0 0000                       		dc.w byte_BCFA-Map_obj45
0000C3B2 03                         byte_BC6C:	dc.b 3
0000C3B3 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C3B8 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C3BD F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C3C2 03                         byte_BC7C:	dc.b 3
0000C3C3 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C3C8 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C3CD 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C3D2 01                         byte_BC8C:	dc.b 1
0000C3D3 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C3D8 02                         byte_BC92:	dc.b 2
0000C3D9 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3DE F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3E3 04                         byte_BC9D:	dc.b 4
0000C3E4 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3E9 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3EE F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C3F3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C3F8 06                         byte_BCB2:	dc.b 6
0000C3F9 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3FE F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C403 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C408 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C40D F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C412 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C417 08                         byte_BCD1:	dc.b 8
0000C418 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C41D F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C422 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C427 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C42C F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C431 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C436 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C43B F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C440 08                         byte_BCFA:	dc.b 8
0000C441 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C446 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C44B F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C450 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C455 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C45A F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C45F F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C464 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C469 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C46E F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C474 00                         		even
0000C474 00                         		even
0000C474                            
0000C474                            ; ===========================================================================
0000C474                            ; ---------------------------------------------------------------------------
0000C474                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C474                            ; ---------------------------------------------------------------------------
0000C474                            
0000C474                            Obj32:					; XREF: Obj_Index
0000C474 7000                       		moveq	#0,d0
0000C476 1028 0024                  		move.b	$24(a0),d0
0000C47A 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C47E 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C482                            ; ===========================================================================
0000C482 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C484 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C486                            ; ===========================================================================
0000C486                            
0000C486                            Obj32_Main:				; XREF: Obj32_Index
0000C486 5428 0024                  		addq.b	#2,$24(a0)
0000C48A 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C492 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C498 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C49E 6700                       		beq.s	loc_BD60
0000C4A0 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C4A6                            
0000C4A6                            loc_BD60:
0000C4A6 117C 0004 0001             		move.b	#4,1(a0)
0000C4AC 117C 0010 0019             		move.b	#$10,$19(a0)
0000C4B2 117C 0004 0018             		move.b	#4,$18(a0)
0000C4B8 5668 000C                  		addq.w	#3,$C(a0)
0000C4BC                            
0000C4BC                            Obj32_Pressed:				; XREF: Obj32_Index
0000C4BC 4A28 0001                  		tst.b	1(a0)
0000C4C0 6A00                       		bpl.s	Obj32_Display
0000C4C2 323C 001B                  		move.w	#$1B,d1
0000C4C6 343C 0005                  		move.w	#5,d2
0000C4CA 363C 0005                  		move.w	#5,d3
0000C4CE 3828 0008                  		move.w	8(a0),d4
0000C4D2 6100 0000                  		bsr.w	SolidObject
0000C4D6 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C4DC 1028 0028                  		move.b	$28(a0),d0
0000C4E0 0240 000F                  		andi.w	#$F,d0
0000C4E4 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C4E8 47F3 0000                  		lea	(a3,d0.w),a3
0000C4EC 7600                       		moveq	#0,d3
0000C4EE 0828 0006 0028             		btst	#6,$28(a0)
0000C4F4 6700                       		beq.s	loc_BDB2
0000C4F6 7607                       		moveq	#7,d3
0000C4F8                            
0000C4F8                            loc_BDB2:
0000C4F8 4A28 0028                  		tst.b	$28(a0)
0000C4FC 6A00                       		bpl.s	loc_BDBE
0000C4FE 6100 0000                  		bsr.w	Obj32_MZBlock
0000C502 6600                       		bne.s	loc_BDC8
0000C504                            
0000C504                            loc_BDBE:
0000C504 4A28 0025                  		tst.b	$25(a0)
0000C508 6600                       		bne.s	loc_BDC8
0000C50A 0793                       		bclr	d3,(a3)
0000C50C 6000                       		bra.s	loc_BDDE
0000C50E                            ; ===========================================================================
0000C50E                            
0000C50E                            loc_BDC8:
0000C50E 4A13                       		tst.b	(a3)
0000C510 6600                       		bne.s	loc_BDD6
0000C512 303C 00CD                  		move.w	#$CD,d0
0000C516 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play switch sound
0000C51C                            
0000C51C                            loc_BDD6:
0000C51C 07D3                       		bset	d3,(a3)
0000C51E 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C524                            
0000C524                            loc_BDDE:
0000C524 0828 0005 0028             		btst	#5,$28(a0)
0000C52A 6700                       		beq.s	Obj32_Display
0000C52C 5328 001E                  		subq.b	#1,$1E(a0)
0000C530 6A00                       		bpl.s	Obj32_Display
0000C532 117C 0007 001E             		move.b	#7,$1E(a0)
0000C538 0868 0001 001A             		bchg	#1,$1A(a0)
0000C53E                            
0000C53E                            Obj32_Display:
0000C53E 6100 0000                  		bsr.w	DisplaySprite
0000C542 3028 0008                  		move.w	8(a0),d0
0000C546 0240 FF80                  		andi.w	#$FF80,d0
0000C54A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C54E 0441 0080                  		subi.w	#$80,d1
0000C552 0241 FF80                  		andi.w	#$FF80,d1
0000C556 9041                       		sub.w	d1,d0
0000C558 0C40 0280                  		cmpi.w	#$280,d0
0000C55C 6200 0000                  		bhi.w	Obj32_Delete
0000C560 4E75                       		rts	
0000C562                            ; ===========================================================================
0000C562                            
0000C562                            Obj32_Delete:
0000C562 6100 0000                  		bsr.w	DeleteObject
0000C566 4E75                       		rts	
0000C568                            
0000C568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C568                            
0000C568                            
0000C568                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C568 3F03                       		move.w	d3,-(sp)
0000C56A 3428 0008                  		move.w	8(a0),d2
0000C56E 3628 000C                  		move.w	$C(a0),d3
0000C572 0442 0010                  		subi.w	#$10,d2
0000C576 5143                       		subq.w	#8,d3
0000C578 383C 0020                  		move.w	#$20,d4
0000C57C 3A3C 0010                  		move.w	#$10,d5
0000C580 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C584 3C3C 005F                  		move.w	#$5F,d6
0000C588                            
0000C588                            Obj32_MZLoop:
0000C588 4A29 0001                  		tst.b	1(a1)
0000C58C 6A00                       		bpl.s	loc_BE4E
0000C58E 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C592 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C594                            
0000C594                            loc_BE4E:
0000C594 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C598 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C59C                            
0000C59C 361F                       		move.w	(sp)+,d3
0000C59E 7000                       		moveq	#0,d0
0000C5A0                            
0000C5A0                            locret_BE5A:
0000C5A0 4E75                       		rts	
0000C5A2                            ; ===========================================================================
0000C5A2 1010                       Obj32_MZData:	dc.b $10, $10
0000C5A4                            ; ===========================================================================
0000C5A4                            
0000C5A4                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C5A4 7001                       		moveq	#1,d0
0000C5A6 0240 003F                  		andi.w	#$3F,d0
0000C5AA D040                       		add.w	d0,d0
0000C5AC 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C5B0 121A                       		move.b	(a2)+,d1
0000C5B2 4881                       		ext.w	d1
0000C5B4 3029 0008                  		move.w	8(a1),d0
0000C5B8 9041                       		sub.w	d1,d0
0000C5BA 9042                       		sub.w	d2,d0
0000C5BC 6400                       		bcc.s	loc_BE80
0000C5BE D241                       		add.w	d1,d1
0000C5C0 D041                       		add.w	d1,d0
0000C5C2 6500                       		bcs.s	loc_BE84
0000C5C4 60CE                       		bra.s	loc_BE4E
0000C5C6                            ; ===========================================================================
0000C5C6                            
0000C5C6                            loc_BE80:
0000C5C6 B044                       		cmp.w	d4,d0
0000C5C8 62CA                       		bhi.s	loc_BE4E
0000C5CA                            
0000C5CA                            loc_BE84:
0000C5CA 121A                       		move.b	(a2)+,d1
0000C5CC 4881                       		ext.w	d1
0000C5CE 3029 000C                  		move.w	$C(a1),d0
0000C5D2 9041                       		sub.w	d1,d0
0000C5D4 9043                       		sub.w	d3,d0
0000C5D6 6400                       		bcc.s	loc_BE9A
0000C5D8 D241                       		add.w	d1,d1
0000C5DA D041                       		add.w	d1,d0
0000C5DC 6500                       		bcs.s	loc_BE9E
0000C5DE 60B4                       		bra.s	loc_BE4E
0000C5E0                            ; ===========================================================================
0000C5E0                            
0000C5E0                            loc_BE9A:
0000C5E0 B045                       		cmp.w	d5,d0
0000C5E2 62B0                       		bhi.s	loc_BE4E
0000C5E4                            
0000C5E4                            loc_BE9E:
0000C5E4 361F                       		move.w	(sp)+,d3
0000C5E6 7001                       		moveq	#1,d0
0000C5E8 4E75                       		rts	
0000C5EA                            ; End of function Obj32_MZBlock
0000C5EA                            
0000C5EA                            ; ===========================================================================
0000C5EA                            ; ---------------------------------------------------------------------------
0000C5EA                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C5EA                            ; ---------------------------------------------------------------------------
0000C5EA                            Map_obj32:
0000C5EA                            	include "_maps\obj32.asm"
0000C5EA                            ; ---------------------------------------------------------------------------
0000C5EA                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C5EA                            ; ---------------------------------------------------------------------------
0000C5EA 0000                       		dc.w byte_BEAC-Map_obj32
0000C5EC 0000                       		dc.w byte_BEB7-Map_obj32
0000C5EE 0000                       		dc.w byte_BEC2-Map_obj32
0000C5F0 0000                       		dc.w byte_BEB7-Map_obj32
0000C5F2 02                         byte_BEAC:	dc.b 2
0000C5F3 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C5F8 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C5FD 02                         byte_BEB7:	dc.b 2
0000C5FE F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C603 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C608 02                         byte_BEC2:	dc.b 2
0000C609 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C60E F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C613 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C618                            		even
0000C618                            		even
0000C618                            
0000C618                            ; ===========================================================================
0000C618                            ; ---------------------------------------------------------------------------
0000C618                            ; Object 33 - pushable blocks (MZ, LZ)
0000C618                            ; ---------------------------------------------------------------------------
0000C618                            
0000C618                            Obj33:					; XREF: Obj_Index
0000C618 7000                       		moveq	#0,d0
0000C61A 1028 0024                  		move.b	$24(a0),d0
0000C61E 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C622 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C626                            ; ===========================================================================
0000C626 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C628 0000                       		dc.w loc_BF6E-Obj33_Index
0000C62A 0000                       		dc.w loc_C02C-Obj33_Index
0000C62C                            
0000C62C 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C62E 4001                       		dc.b $40, 1
0000C630                            ; ===========================================================================
0000C630                            
0000C630                            Obj33_Main:				; XREF: Obj33_Index
0000C630 5428 0024                  		addq.b	#2,$24(a0)
0000C634 117C 000F 0016             		move.b	#$F,$16(a0)
0000C63A 117C 000F 0017             		move.b	#$F,$17(a0)
0000C640 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C648 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C64E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C654 6600                       		bne.s	loc_BF16
0000C656 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C65C                            
0000C65C                            loc_BF16:
0000C65C 117C 0004 0001             		move.b	#4,1(a0)
0000C662 117C 0003 0018             		move.b	#3,$18(a0)
0000C668 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C66E 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C674 7000                       		moveq	#0,d0
0000C676 1028 0028                  		move.b	$28(a0),d0
0000C67A D040                       		add.w	d0,d0
0000C67C 0240 000E                  		andi.w	#$E,d0
0000C680 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C684 115A 0019                  		move.b	(a2)+,$19(a0)
0000C688 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C68C 4A28 0028                  		tst.b	$28(a0)
0000C690 6700                       		beq.s	Obj33_ChkGone
0000C692 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C698                            
0000C698                            Obj33_ChkGone:
0000C698 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C69C 7000                       		moveq	#0,d0
0000C69E 1028 0023                  		move.b	$23(a0),d0
0000C6A2 6700                       		beq.s	loc_BF6E
0000C6A4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C6AA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C6B0 6600 0000                  		bne.w	DeleteObject
0000C6B4                            
0000C6B4                            loc_BF6E:				; XREF: Obj33_Index
0000C6B4 4A28 0032                  		tst.b	$32(a0)
0000C6B8 6600 0000                  		bne.w	loc_C046
0000C6BC 7200                       		moveq	#0,d1
0000C6BE 1228 0019                  		move.b	$19(a0),d1
0000C6C2 0641 000B                  		addi.w	#$B,d1
0000C6C6 343C 0010                  		move.w	#$10,d2
0000C6CA 363C 0011                  		move.w	#$11,d3
0000C6CE 3828 0008                  		move.w	8(a0),d4
0000C6D2 6100 0000                  		bsr.w	loc_C186
0000C6D6 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C6DC 6600                       		bne.s	loc_BFC6	; if not, branch
0000C6DE 08A8 0007 0028             		bclr	#7,$28(a0)
0000C6E4 3028 0008                  		move.w	8(a0),d0
0000C6E8 0C40 0A20                  		cmpi.w	#$A20,d0
0000C6EC 6500                       		bcs.s	loc_BFC6
0000C6EE 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C6F2 6400                       		bcc.s	loc_BFC6
0000C6F4 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C6F8 0440 001C                  		subi.w	#$1C,d0
0000C6FC 3140 000C                  		move.w	d0,$C(a0)
0000C700 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C706 08E8 0007 0028             		bset	#7,$28(a0)
0000C70C                            
0000C70C                            loc_BFC6:
0000C70C 3028 0008                  		move.w	8(a0),d0
0000C710 0240 FF80                  		andi.w	#$FF80,d0
0000C714 3238 F700                  		move.w	($FFFFF700).w,d1
0000C718 0441 0080                  		subi.w	#$80,d1
0000C71C 0241 FF80                  		andi.w	#$FF80,d1
0000C720 9041                       		sub.w	d1,d0
0000C722 0C40 0280                  		cmpi.w	#$280,d0
0000C726 6200                       		bhi.s	loc_BFE6
0000C728 6000 0000                  		bra.w	DisplaySprite
0000C72C                            ; ===========================================================================
0000C72C                            
0000C72C                            loc_BFE6:
0000C72C 3028 0034                  		move.w	$34(a0),d0
0000C730 0240 FF80                  		andi.w	#$FF80,d0
0000C734 3238 F700                  		move.w	($FFFFF700).w,d1
0000C738 0441 0080                  		subi.w	#$80,d1
0000C73C 0241 FF80                  		andi.w	#$FF80,d1
0000C740 9041                       		sub.w	d1,d0
0000C742 0C40 0280                  		cmpi.w	#$280,d0
0000C746 6200                       		bhi.s	loc_C016
0000C748 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C74E 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C754 117C 0004 0024             		move.b	#4,$24(a0)
0000C75A 6000                       		bra.s	loc_C02C
0000C75C                            ; ===========================================================================
0000C75C                            
0000C75C                            loc_C016:
0000C75C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C760 7000                       		moveq	#0,d0
0000C762 1028 0023                  		move.b	$23(a0),d0
0000C766 6700                       		beq.s	loc_C028
0000C768 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C76E                            
0000C76E                            loc_C028:
0000C76E 6000 0000                  		bra.w	DeleteObject
0000C772                            ; ===========================================================================
0000C772                            
0000C772                            loc_C02C:				; XREF: Obj33_Index
0000C772 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C776 6700                       		beq.s	locret_C044
0000C778 117C 0002 0024             		move.b	#2,$24(a0)
0000C77E 4228 0032                  		clr.b	$32(a0)
0000C782 4268 0010                  		clr.w	$10(a0)
0000C786 4268 0012                  		clr.w	$12(a0)
0000C78A                            
0000C78A                            locret_C044:
0000C78A 4E75                       		rts	
0000C78C                            ; ===========================================================================
0000C78C                            
0000C78C                            loc_C046:				; XREF: loc_BF6E
0000C78C 3F28 0008                  		move.w	8(a0),-(sp)
0000C790 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C796 6400                       		bcc.s	loc_C056
0000C798 6100 0000                  		bsr.w	SpeedToPos
0000C79C                            
0000C79C                            loc_C056:
0000C79C 0828 0001 0022             		btst	#1,$22(a0)
0000C7A2 6700                       		beq.s	loc_C0A0
0000C7A4 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C7AA 4EB9 0000 0000             		jsr	ObjHitFloor
0000C7B0 4A41                       		tst.w	d1
0000C7B2 6A00 0000                  		bpl.w	loc_C09E
0000C7B6 D368 000C                  		add.w	d1,$C(a0)
0000C7BA 4268 0012                  		clr.w	$12(a0)
0000C7BE 08A8 0001 0022             		bclr	#1,$22(a0)
0000C7C4 3011                       		move.w	(a1),d0
0000C7C6 0240 03FF                  		andi.w	#$3FF,d0
0000C7CA 0C40 016A                  		cmpi.w	#$16A,d0
0000C7CE 6500                       		bcs.s	loc_C09E
0000C7D0 3028 0030                  		move.w	$30(a0),d0
0000C7D4 E640                       		asr.w	#3,d0
0000C7D6 3140 0010                  		move.w	d0,$10(a0)
0000C7DA 117C 0001 0032             		move.b	#1,$32(a0)
0000C7E0 4268 000E                  		clr.w	$E(a0)
0000C7E4                            
0000C7E4                            loc_C09E:
0000C7E4 6000                       		bra.s	loc_C0E6
0000C7E6                            ; ===========================================================================
0000C7E6                            
0000C7E6                            loc_C0A0:
0000C7E6 4A68 0010                  		tst.w	$10(a0)
0000C7EA 6700 0000                  		beq.w	loc_C0D6
0000C7EE 6B00                       		bmi.s	loc_C0BC
0000C7F0 7600                       		moveq	#0,d3
0000C7F2 1628 0019                  		move.b	$19(a0),d3
0000C7F6 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C7FC 4A41                       		tst.w	d1		; has block touched a wall?
0000C7FE 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C800 6000                       		bra.s	loc_C0E6
0000C802                            ; ===========================================================================
0000C802                            
0000C802                            loc_C0BC:
0000C802 7600                       		moveq	#0,d3
0000C804 1628 0019                  		move.b	$19(a0),d3
0000C808 4643                       		not.w	d3
0000C80A 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C810 4A41                       		tst.w	d1		; has block touched a wall?
0000C812 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C814 6000                       		bra.s	loc_C0E6
0000C816                            ; ===========================================================================
0000C816                            
0000C816                            Obj33_StopPush:
0000C816 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C81A 6000                       		bra.s	loc_C0E6
0000C81C                            ; ===========================================================================
0000C81C                            
0000C81C                            loc_C0D6:
0000C81C 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C824 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C82A 6400                       		bcc.s	loc_C104
0000C82C                            
0000C82C                            loc_C0E6:
0000C82C 7200                       		moveq	#0,d1
0000C82E 1228 0019                  		move.b	$19(a0),d1
0000C832 0641 000B                  		addi.w	#$B,d1
0000C836 343C 0010                  		move.w	#$10,d2
0000C83A 363C 0011                  		move.w	#$11,d3
0000C83E 381F                       		move.w	(sp)+,d4
0000C840 6100 0000                  		bsr.w	loc_C186
0000C844 6100                       		bsr.s	Obj33_ChkLava
0000C846 6000 FEC4                  		bra.w	loc_BFC6
0000C84A                            ; ===========================================================================
0000C84A                            
0000C84A                            loc_C104:
0000C84A 381F                       		move.w	(sp)+,d4
0000C84C 43F8 D000                  		lea	($FFFFD000).w,a1
0000C850 08A9 0003 0022             		bclr	#3,$22(a1)
0000C856 08A8 0003 0022             		bclr	#3,$22(a0)
0000C85C 6000 FECE                  		bra.w	loc_BFE6
0000C860                            ; ===========================================================================
0000C860                            
0000C860                            Obj33_ChkLava:
0000C860 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C866 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C868 343C FFE0                  		move.w	#-$20,d2
0000C86C 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C872 6700                       		beq.s	Obj33_LoadLava
0000C874 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C87A 6700                       		beq.s	Obj33_LoadLava
0000C87C 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C882 6700                       		beq.s	Obj33_LoadLava
0000C884 4E75                       		rts	
0000C886                            ; ===========================================================================
0000C886                            
0000C886                            Obj33_ChkLava2:
0000C886 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C88C 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C88E 343C 0020                  		move.w	#$20,d2
0000C892 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C898 6700                       		beq.s	Obj33_LoadLava
0000C89A 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C8A0 6700                       		beq.s	Obj33_LoadLava
0000C8A2                            
0000C8A2                            Obj33_NoLava:
0000C8A2 4E75                       		rts	
0000C8A4                            ; ===========================================================================
0000C8A4                            
0000C8A4                            Obj33_LoadLava:
0000C8A4 6100 0000                  		bsr.w	SingleObjLoad
0000C8A8 6600                       		bne.s	locret_C184
0000C8AA 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C8AE 3368 0008 0008             		move.w	8(a0),8(a1)
0000C8B4 D569 0008                  		add.w	d2,8(a1)
0000C8B8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C8BE 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C8C4 2348 003C                  		move.l	a0,$3C(a1)
0000C8C8                            
0000C8C8                            locret_C184:
0000C8C8 4E75                       		rts	
0000C8CA                            ; ===========================================================================
0000C8CA                            
0000C8CA                            loc_C186:				; XREF: loc_BF6E
0000C8CA 1028 0025                  		move.b	$25(a0),d0
0000C8CE 6700 0000                  		beq.w	loc_C218
0000C8D2 5500                       		subq.b	#2,d0
0000C8D4 6600                       		bne.s	loc_C1AA
0000C8D6 6100 B30E                  		bsr.w	ExitPlatform
0000C8DA 0829 0003 0022             		btst	#3,$22(a1)
0000C8E0 6600                       		bne.s	loc_C1A4
0000C8E2 4228 0025                  		clr.b	$25(a0)
0000C8E6 4E75                       		rts	
0000C8E8                            ; ===========================================================================
0000C8E8                            
0000C8E8                            loc_C1A4:
0000C8E8 3404                       		move.w	d4,d2
0000C8EA 6000 B858                  		bra.w	MvSonicOnPtfm
0000C8EE                            ; ===========================================================================
0000C8EE                            
0000C8EE                            loc_C1AA:
0000C8EE 5500                       		subq.b	#2,d0
0000C8F0 6600                       		bne.s	loc_C1F2
0000C8F2 6100 0000                  		bsr.w	SpeedToPos
0000C8F6 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C8FC 4EB9 0000 0000             		jsr	ObjHitFloor
0000C902 4A41                       		tst.w	d1
0000C904 6A00 0000                  		bpl.w	locret_C1F0
0000C908 D368 000C                  		add.w	d1,$C(a0)
0000C90C 4268 0012                  		clr.w	$12(a0)
0000C910 4228 0025                  		clr.b	$25(a0)
0000C914 3011                       		move.w	(a1),d0
0000C916 0240 03FF                  		andi.w	#$3FF,d0
0000C91A 0C40 016A                  		cmpi.w	#$16A,d0
0000C91E 6500                       		bcs.s	locret_C1F0
0000C920 3028 0030                  		move.w	$30(a0),d0
0000C924 E640                       		asr.w	#3,d0
0000C926 3140 0010                  		move.w	d0,$10(a0)
0000C92A 117C 0001 0032             		move.b	#1,$32(a0)
0000C930 4268 000E                  		clr.w	$E(a0)
0000C934                            
0000C934                            locret_C1F0:
0000C934 4E75                       		rts	
0000C936                            ; ===========================================================================
0000C936                            
0000C936                            loc_C1F2:
0000C936 6100 0000                  		bsr.w	SpeedToPos
0000C93A 3028 0008                  		move.w	8(a0),d0
0000C93E 0240 000C                  		andi.w	#$C,d0
0000C942 6600 0000                  		bne.w	locret_C2E4
0000C946 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C94C 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C952 4268 0010                  		clr.w	$10(a0)
0000C956 5528 0025                  		subq.b	#2,$25(a0)
0000C95A 4E75                       		rts	
0000C95C                            ; ===========================================================================
0000C95C                            
0000C95C                            loc_C218:
0000C95C 6100 0000                  		bsr.w	loc_FAC8
0000C960 4A44                       		tst.w	d4
0000C962 6700 0000                  		beq.w	locret_C2E4
0000C966 6B00 0000                  		bmi.w	locret_C2E4
0000C96A 4A28 0032                  		tst.b	$32(a0)
0000C96E 6700                       		beq.s	loc_C230
0000C970 6000 0000                  		bra.w	locret_C2E4
0000C974                            ; ===========================================================================
0000C974                            
0000C974                            loc_C230:
0000C974 4A40                       		tst.w	d0
0000C976 6700 0000                  		beq.w	locret_C2E4
0000C97A 6B00                       		bmi.s	loc_C268
0000C97C 0829 0000 0022             		btst	#0,$22(a1)
0000C982 6600 0000                  		bne.w	locret_C2E4
0000C986 3F00                       		move.w	d0,-(sp)
0000C988 7600                       		moveq	#0,d3
0000C98A 1628 0019                  		move.b	$19(a0),d3
0000C98E 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C994 301F                       		move.w	(sp)+,d0
0000C996 4A41                       		tst.w	d1
0000C998 6B00 0000                  		bmi.w	locret_C2E4
0000C99C 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C9A4 7001                       		moveq	#1,d0
0000C9A6 323C 0040                  		move.w	#$40,d1
0000C9AA 6000                       		bra.s	loc_C294
0000C9AC                            ; ===========================================================================
0000C9AC                            
0000C9AC                            loc_C268:
0000C9AC 0829 0000 0022             		btst	#0,$22(a1)
0000C9B2 6700                       		beq.s	locret_C2E4
0000C9B4 3F00                       		move.w	d0,-(sp)
0000C9B6 7600                       		moveq	#0,d3
0000C9B8 1628 0019                  		move.b	$19(a0),d3
0000C9BC 4643                       		not.w	d3
0000C9BE 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C9C4 301F                       		move.w	(sp)+,d0
0000C9C6 4A41                       		tst.w	d1
0000C9C8 6B00                       		bmi.s	locret_C2E4
0000C9CA 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C9D2 70FF                       		moveq	#-1,d0
0000C9D4 323C FFC0                  		move.w	#-$40,d1
0000C9D8                            
0000C9D8                            loc_C294:
0000C9D8 43F8 D000                  		lea	($FFFFD000).w,a1
0000C9DC D169 0008                  		add.w	d0,8(a1)
0000C9E0 3341 0014                  		move.w	d1,$14(a1)
0000C9E4 337C 0000 0010             		move.w	#0,$10(a1)
0000C9EA 3F00                       		move.w	d0,-(sp)
0000C9EC 303C 00A7                  		move.w	#$A7,d0
0000C9F0 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C9F6 301F                       		move.w	(sp)+,d0
0000C9F8 4A28 0028                  		tst.b	$28(a0)
0000C9FC 6B00                       		bmi.s	locret_C2E4
0000C9FE 3F00                       		move.w	d0,-(sp)
0000CA00 4EB9 0000 0000             		jsr	ObjHitFloor
0000CA06 301F                       		move.w	(sp)+,d0
0000CA08 0C41 0004                  		cmpi.w	#4,d1
0000CA0C 6F00                       		ble.s	loc_C2E0
0000CA0E 317C 0400 0010             		move.w	#$400,$10(a0)
0000CA14 4A40                       		tst.w	d0
0000CA16 6A00                       		bpl.s	loc_C2D8
0000CA18 4468 0010                  		neg.w	$10(a0)
0000CA1C                            
0000CA1C                            loc_C2D8:
0000CA1C 117C 0006 0025             		move.b	#6,$25(a0)
0000CA22 6000                       		bra.s	locret_C2E4
0000CA24                            ; ===========================================================================
0000CA24                            
0000CA24                            loc_C2E0:
0000CA24 D368 000C                  		add.w	d1,$C(a0)
0000CA28                            
0000CA28                            locret_C2E4:
0000CA28 4E75                       		rts	
0000CA2A                            ; ===========================================================================
0000CA2A                            ; ---------------------------------------------------------------------------
0000CA2A                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CA2A                            ; ---------------------------------------------------------------------------
0000CA2A                            Map_obj33:
0000CA2A                            	include "_maps\obj33.asm"
0000CA2A                            ; ---------------------------------------------------------------------------
0000CA2A                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CA2A                            ; ---------------------------------------------------------------------------
0000CA2A 0000                       		dc.w byte_C2EA-Map_obj33
0000CA2C 0000                       		dc.w byte_C2F0-Map_obj33
0000CA2E 01                         byte_C2EA:	dc.b 1
0000CA2F F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CA34 04                         byte_C2F0:	dc.b 4
0000CA35 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CA3A F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CA3F F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CA44 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CA4A 00                         		even
0000CA4A 00                         		even
0000CA4A                            
0000CA4A                            ; ===========================================================================
0000CA4A                            ; ---------------------------------------------------------------------------
0000CA4A                            ; Object 34 - zone title cards
0000CA4A                            ; ---------------------------------------------------------------------------
0000CA4A                            Obj34:					; XREF: Obj_Index
0000CA4A 7000                       		moveq	#0,d0
0000CA4C 1028 0024                  		move.b	$24(a0),d0
0000CA50 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CA54 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CA58                            ; ===========================================================================
0000CA58 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CA5A 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CA5C 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA5E 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA60                            ; ===========================================================================
0000CA60                            
0000CA60                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CA60 2248                       		movea.l	a0,a1
0000CA62 7000                       		moveq	#0,d0
0000CA64 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CA68 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CA6E 6600                       		bne.s	Obj34_CheckFZ
0000CA70 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CA72                            
0000CA72                            Obj34_CheckFZ:
0000CA72 3400                       		move.w	d0,d2
0000CA74 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CA7A 6600                       		bne.s	Obj34_LoadConfig
0000CA7C 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CA7E 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CA80                            
0000CA80                            Obj34_LoadConfig:
0000CA80 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CA86 E948                       		lsl.w	#4,d0
0000CA88 D6C0                       		adda.w	d0,a3
0000CA8A 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CA90 7203                       		moveq	#3,d1
0000CA92                            
0000CA92                            Obj34_Loop:
0000CA92 12BC 0034                  		move.b	#$34,0(a1)
0000CA96 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CA9A 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CA9E 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CAA2 335A 000A                  		move.w	(a2)+,$A(a1)
0000CAA6 135A 0024                  		move.b	(a2)+,$24(a1)
0000CAAA 101A                       		move.b	(a2)+,d0
0000CAAC 6600                       		bne.s	Obj34_ActNumber
0000CAAE 1002                       		move.b	d2,d0
0000CAB0                            
0000CAB0                            Obj34_ActNumber:
0000CAB0 0C00 0007                  		cmpi.b	#7,d0
0000CAB4 6600                       		bne.s	Obj34_MakeSprite
0000CAB6 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CABA 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CAC0 6600                       		bne.s	Obj34_MakeSprite
0000CAC2 5300                       		subq.b	#1,d0
0000CAC4                            
0000CAC4                            Obj34_MakeSprite:
0000CAC4 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CAC8 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CAD0 337C 8580 0002             		move.w	#$8580,2(a1)
0000CAD6 137C 0078 0019             		move.b	#$78,$19(a1)
0000CADC 137C 0000 0001             		move.b	#0,1(a1)
0000CAE2 137C 0000 0018             		move.b	#0,$18(a1)
0000CAE8 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CAEE 43E9 0040                  		lea	$40(a1),a1	; next object
0000CAF2 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CAF6                            
0000CAF6                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CAF6 7210                       		moveq	#$10,d1		; set horizontal speed
0000CAF8 3028 0030                  		move.w	$30(a0),d0
0000CAFC B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CB00 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CB02 6C00                       		bge.s	Obj34_Move
0000CB04 4441                       		neg.w	d1
0000CB06                            
0000CB06                            Obj34_Move:
0000CB06 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB0A                            
0000CB0A                            loc_C3C8:
0000CB0A 3028 0008                  		move.w	8(a0),d0
0000CB0E 6B00                       		bmi.s	locret_C3D8
0000CB10 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB14 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CB16 6000 0000                  		bra.w	DisplaySprite
0000CB1A                            ; ===========================================================================
0000CB1A                            
0000CB1A                            locret_C3D8:
0000CB1A 4E75                       		rts	
0000CB1C                            ; ===========================================================================
0000CB1C                            
0000CB1C                            Obj34_Wait:				; XREF: Obj34_Index
0000CB1C 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CB20 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CB22 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CB26 6000 0000                  		bra.w	DisplaySprite
0000CB2A                            ; ===========================================================================
0000CB2A                            
0000CB2A                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CB2A 4A28 0001                  		tst.b	1(a0)
0000CB2E 6A00                       		bpl.s	Obj34_ChangeArt
0000CB30 7220                       		moveq	#$20,d1
0000CB32 3028 0032                  		move.w	$32(a0),d0
0000CB36 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CB3A 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CB3C 6C00                       		bge.s	Obj34_Move2
0000CB3E 4441                       		neg.w	d1
0000CB40                            
0000CB40                            Obj34_Move2:
0000CB40 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB44 3028 0008                  		move.w	8(a0),d0
0000CB48 6B00                       		bmi.s	locret_C412
0000CB4A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB4E 6400                       		bcc.s	locret_C412	; if yes, branch
0000CB50 6000 0000                  		bra.w	DisplaySprite
0000CB54                            ; ===========================================================================
0000CB54                            
0000CB54                            locret_C412:
0000CB54 4E75                       		rts	
0000CB56                            ; ===========================================================================
0000CB56                            
0000CB56                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CB56 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CB5C 6600                       		bne.s	Obj34_Delete
0000CB5E 7002                       		moveq	#2,d0
0000CB60 4EB9 0000 1582             		jsr	(LoadPLC).l	; load explosion patterns
0000CB66 7000                       		moveq	#0,d0
0000CB68 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CB6C 103B 0000                  		move.b	Obj34_AnimalPLC(pc,d0.w),d0
0000CB70 4EB9 0000 1582             		jsr	(LoadPLC).l	; load animal patterns
0000CB76                            
0000CB76                            Obj34_Delete:
0000CB76 6000 0000                  		bra.w	DeleteObject
0000CB7A                            
0000CB7A                            ; ===========================================================================
0000CB7A                            Obj34_AnimalPLC:
0000CB7A 15                         		dc.b $15	; "GHZ"
0000CB7B 16                         		dc.b $16
0000CB7C 17                         		dc.b $17
0000CB7D 18                         		dc.b $18
0000CB7E 19                         		dc.b $19
0000CB7F 1A                         		dc.b $1A	; "SBZ"
0000CB80 15                         		dc.b $15	; Ending (placeholder?
0000CB81 1A                         		dc.b $1A	; MAKOTO
0000CB82                            	even
0000CB82 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CB84 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CB86 00E4                       		dc.w $E4
0000CB88 0206                       		dc.b 2,	6
0000CB8A 00EA                       		dc.w $EA
0000CB8C 0207                       		dc.b 2,	7
0000CB8E 00E0                       		dc.w $E0
0000CB90 020A                       		dc.b 2,	$A
0000CB92                            ; ---------------------------------------------------------------------------
0000CB92                            ; Title	card configuration data
0000CB92                            ; Format:
0000CB92                            ; 4 bytes per item (YYYY XXXX)
0000CB92                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CB92                            ; ---------------------------------------------------------------------------
0000CB92 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CBA2 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CBB2 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CBC2 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CBD2 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CBE2 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CBF2 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CC02 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CC12 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CC22                            ; ===========================================================================
0000CC22                            ; ---------------------------------------------------------------------------
0000CC22                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CC22                            ; ---------------------------------------------------------------------------
0000CC22                            
0000CC22                            Obj39:					; XREF: Obj_Index
0000CC22 7000                       		moveq	#0,d0
0000CC24 1028 0024                  		move.b	$24(a0),d0
0000CC28 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CC2C 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CC30                            ; ===========================================================================
0000CC30 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CC32 0000                       		dc.w loc_C50C-Obj39_Index
0000CC34 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CC36                            ; ===========================================================================
0000CC36                            
0000CC36                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CC36 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CC3A 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CC3C 4E75                       		rts	
0000CC3E                            ; ===========================================================================
0000CC3E                            
0000CC3E                            Obj39_Main:
0000CC3E 5428 0024                  		addq.b	#2,$24(a0)
0000CC42 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CC48 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CC4E 6700                       		beq.s	loc_C4EC	; if not, branch
0000CC50 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CC56                            
0000CC56                            loc_C4EC:
0000CC56 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CC5C 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CC64 317C 855E 0002             		move.w	#$855E,2(a0)
0000CC6A 117C 0000 0001             		move.b	#0,1(a0)
0000CC70 117C 0000 0018             		move.b	#0,$18(a0)
0000CC76                            
0000CC76                            loc_C50C:				; XREF: Obj39_Index
0000CC76 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC78 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CC7E 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CC80 6500                       		bcs.s	Obj39_Move
0000CC82 4441                       		neg.w	d1
0000CC84                            
0000CC84                            Obj39_Move:
0000CC84 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC88 6000 0000                  		bra.w	DisplaySprite
0000CC8C                            ; ===========================================================================
0000CC8C                            
0000CC8C                            Obj39_SetWait:				; XREF: Obj39_Main
0000CC8C 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CC92 5428 0024                  		addq.b	#2,$24(a0)
0000CC96 4E75                       		rts	
0000CC98                            ; ===========================================================================
0000CC98                            
0000CC98                            Obj39_Wait:				; XREF: Obj39_Index
0000CC98 1038 F605                  		move.b	($FFFFF605).w,d0
0000CC9C 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CCA0 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CCA2 0828 0000 001A             		btst	#0,$1A(a0)
0000CCA8 6600                       		bne.s	Obj39_Display
0000CCAA 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CCAE 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CCB0 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CCB4 6000 0000                  		bra.w	DisplaySprite
0000CCB8                            ; ===========================================================================
0000CCB8                            
0000CCB8                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CCB8 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CCBC 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CCBE 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CCC4 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CCC8 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CCCA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CCD0 6000                       		bra.s	Obj39_Display
0000CCD2                            ; ===========================================================================
0000CCD2                            
0000CCD2                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CCD2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CCD8                            
0000CCD8                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CCD8 6000 0000                  		bra.w	DisplaySprite
0000CCDC                            ; ===========================================================================
0000CCDC                            ; ---------------------------------------------------------------------------
0000CCDC                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CCDC                            ; ---------------------------------------------------------------------------
0000CCDC                            
0000CCDC                            Obj3A:					; XREF: Obj_Index
0000CCDC 7000                       		moveq	#0,d0
0000CCDE 1028 0024                  		move.b	$24(a0),d0
0000CCE2 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CCE6 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CCEA                            ; ===========================================================================
0000CCEA 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CCEC 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CCEE 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CCF0 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CCF2 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CCF4 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CCF6 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CCF8 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CCFA 0000                       		dc.w loc_C766-Obj3A_Index
0000CCFC                            ; ===========================================================================
0000CCFC                            
0000CCFC                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CCFC 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CD00 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CD02 4E75                       		rts	
0000CD04                            ; ===========================================================================
0000CD04                            
0000CD04                            Obj3A_Main:
0000CD04 2248                       		movea.l	a0,a1
0000CD06 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CD0C 7206                       		moveq	#6,d1
0000CD0E                            
0000CD0E                            Obj3A_Loop:
0000CD0E 12BC 003A                  		move.b	#$3A,0(a1)
0000CD12 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CD16 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CD1A 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CD1E 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CD22 135A 0024                  		move.b	(a2)+,$24(a1)
0000CD26 101A                       		move.b	(a2)+,d0
0000CD28 0C00 0006                  		cmpi.b	#6,d0
0000CD2C 6600                       		bne.s	loc_C5CA
0000CD2E D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CD32                            
0000CD32                            loc_C5CA:
0000CD32 1340 001A                  		move.b	d0,$1A(a1)
0000CD36 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CD3E 337C 8580 0002             		move.w	#$8580,2(a1)
0000CD44 137C 0000 0001             		move.b	#0,1(a1)
0000CD4A 43E9 0040                  		lea	$40(a1),a1
0000CD4E 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CD52                            
0000CD52                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CD52 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD54 3028 0030                  		move.w	$30(a0),d0
0000CD58 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD5C 6700                       		beq.s	loc_C61A	; if yes, branch
0000CD5E 6C00                       		bge.s	Obj3A_Move
0000CD60 4441                       		neg.w	d1
0000CD62                            
0000CD62                            Obj3A_Move:
0000CD62 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD66                            
0000CD66                            loc_C5FE:				; XREF: loc_C61A
0000CD66 3028 0008                  		move.w	8(a0),d0
0000CD6A 6B00                       		bmi.s	locret_C60E
0000CD6C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD70 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CD72 6000 0000                  		bra.w	DisplaySprite
0000CD76                            ; ===========================================================================
0000CD76                            
0000CD76                            locret_C60E:
0000CD76 4E75                       		rts	
0000CD78                            ; ===========================================================================
0000CD78                            
0000CD78                            loc_C610:				; XREF: loc_C61A
0000CD78 117C 000E 0024             		move.b	#$E,$24(a0)
0000CD7E 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CD82                            ; ===========================================================================
0000CD82                            
0000CD82                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CD82 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CD88 67EE                       		beq.s	loc_C610
0000CD8A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CD90 66D4                       		bne.s	loc_C5FE
0000CD92 5428 0024                  		addq.b	#2,$24(a0)
0000CD96 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD9C                            
0000CD9C                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CD9C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CDA0 6600                       		bne.s	Obj3A_Display
0000CDA2 5428 0024                  		addq.b	#2,$24(a0)
0000CDA6                            
0000CDA6                            Obj3A_Display:
0000CDA6 6000 0000                  		bra.w	DisplaySprite
0000CDAA                            ; ===========================================================================
0000CDAA                            
0000CDAA                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CDAA 6100 0000                  		bsr.w	DisplaySprite
0000CDAE 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CDB4 7000                       		moveq	#0,d0
0000CDB6 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CDBA 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CDBC 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CDC0 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CDC6                            
0000CDC6                            Obj3A_RingBonus:
0000CDC6 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CDCA 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CDCC 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CDD0 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CDD6                            
0000CDD6                            Obj3A_ChkBonus:
0000CDD6 4A40                       		tst.w	d0		; is there any bonus?
0000CDD8 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CDDA 303C 00C5                  		move.w	#$C5,d0
0000CDDE 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CDE4 5428 0024                  		addq.b	#2,$24(a0)
0000CDE8 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CDEE 6600                       		bne.s	Obj3A_SetDelay
0000CDF0 5828 0024                  		addq.b	#4,$24(a0)
0000CDF4                            
0000CDF4                            Obj3A_SetDelay:
0000CDF4 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CDFA                            
0000CDFA                            locret_C692:
0000CDFA 4E75                       		rts	
0000CDFC                            ; ===========================================================================
0000CDFC                            
0000CDFC                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CDFC 4EB9 0000 0000             		jsr	AddPoints
0000CE02 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CE06 0200 0003                  		andi.b	#3,d0
0000CE0A 66EE                       		bne.s	locret_C692
0000CE0C 303C 00CD                  		move.w	#$CD,d0
0000CE10 4EF9 0000 139E             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CE16                            ; ===========================================================================
0000CE16                            
0000CE16                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CE16 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CE1A 0240 0007                  		andi.w	#7,d0
0000CE1E E748                       		lsl.w	#3,d0
0000CE20 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CE24 0241 0003                  		andi.w	#3,d1
0000CE28 D241                       		add.w	d1,d1
0000CE2A D041                       		add.w	d1,d0
0000CE2C 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CE30 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CE34 4A40                       		tst.w	d0
0000CE36 6600                       		bne.s	Obj3A_ChkSS
0000CE38 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CE3E 6000                       		bra.s	Obj3A_Display2
0000CE40                            ; ===========================================================================
0000CE40                            
0000CE40                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CE40 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CE44 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CE48 6700                       		beq.s	loc_C6EA	; if not, branch
0000CE4A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CE50 6000                       		bra.s	Obj3A_Display2
0000CE52                            ; ===========================================================================
0000CE52                            
0000CE52                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CE52 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE58                            
0000CE58                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CE58 6000 0000                  		bra.w	DisplaySprite
0000CE5C                            ; ===========================================================================
0000CE5C                            ; ---------------------------------------------------------------------------
0000CE5C                            ; Level	order array
0000CE5C                            ; ---------------------------------------------------------------------------
0000CE5C                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CE9C                            		even
0000CE9C                            ; ===========================================================================
0000CE9C                            
0000CE9C                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CE9C 7220                       		moveq	#$20,d1		; set horizontal speed
0000CE9E 3028 0032                  		move.w	$32(a0),d0
0000CEA2 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CEA6 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CEA8 6C00                       		bge.s	Obj3A_Move2
0000CEAA 4441                       		neg.w	d1
0000CEAC                            
0000CEAC                            Obj3A_Move2:
0000CEAC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CEB0 3028 0008                  		move.w	8(a0),d0
0000CEB4 6B00                       		bmi.s	locret_C748
0000CEB6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CEBA 6400                       		bcc.s	locret_C748	; if yes, branch
0000CEBC 6000 0000                  		bra.w	DisplaySprite
0000CEC0                            ; ===========================================================================
0000CEC0                            
0000CEC0                            locret_C748:
0000CEC0 4E75                       		rts	
0000CEC2                            ; ===========================================================================
0000CEC2                            
0000CEC2                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CEC2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CEC8 6600 0000                  		bne.w	DeleteObject
0000CECC 5428 0024                  		addq.b	#2,$24(a0)
0000CED0 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CED4 303C 008D                  		move.w	#$8D,d0
0000CED8 4EF9 0000 1398             		jmp	(PlaySound).l	; play FZ music
0000CEDE                            ; ===========================================================================
0000CEDE                            
0000CEDE                            loc_C766:				; XREF: Obj3A_Index
0000CEDE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CEE2 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CEE8 6700 0000                  		beq.w	DeleteObject
0000CEEC 4E75                       		rts	
0000CEEE                            ; ===========================================================================
0000CEEE 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CEF4 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CEF6 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CEFC 0201                       		dc.b 2,	1
0000CEFE 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CF04 0206                       		dc.b 2,	6
0000CF06 0520 0120 00EC             		dc.w $520, $120, $EC
0000CF0C 0202                       		dc.b 2,	2
0000CF0E 0540 0120 00FC             		dc.w $540, $120, $FC
0000CF14 0203                       		dc.b 2,	3
0000CF16 0560 0120 010C             		dc.w $560, $120, $10C
0000CF1C 0204                       		dc.b 2,	4
0000CF1E 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CF24 0205                       		dc.b 2,	5
0000CF26                            ; ===========================================================================
0000CF26                            ; ---------------------------------------------------------------------------
0000CF26                            ; Object 7E - special stage results screen
0000CF26                            ; ---------------------------------------------------------------------------
0000CF26                            
0000CF26                            Obj7E:					; XREF: Obj_Index
0000CF26 7000                       		moveq	#0,d0
0000CF28 1028 0024                  		move.b	$24(a0),d0
0000CF2C 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CF30 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CF34                            ; ===========================================================================
0000CF34 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CF36 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CF38 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF3A 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CF3C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF3E 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CF40 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF42 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CF44 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF46 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CF48 0000                       		dc.w loc_C91A-Obj7E_Index
0000CF4A                            ; ===========================================================================
0000CF4A                            
0000CF4A                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CF4A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CF4E 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CF50 4E75                       		rts	
0000CF52                            ; ===========================================================================
0000CF52                            
0000CF52                            Obj7E_Main:
0000CF52 2248                       		movea.l	a0,a1
0000CF54 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CF5A 7203                       		moveq	#3,d1
0000CF5C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CF62 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CF64 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CF66                            
0000CF66                            Obj7E_Loop:
0000CF66 12BC 007E                  		move.b	#$7E,0(a1)
0000CF6A 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CF6E 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CF72 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CF76 135A 0024                  		move.b	(a2)+,$24(a1)
0000CF7A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CF7E 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CF86 337C 8580 0002             		move.w	#$8580,2(a1)
0000CF8C 137C 0000 0001             		move.b	#0,1(a1)
0000CF92 43E9 0040                  		lea	$40(a1),a1
0000CF96 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CF9A                            
0000CF9A 7007                       		moveq	#7,d0
0000CF9C 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CFA0 6700                       		beq.s	loc_C842
0000CFA2 7000                       		moveq	#0,d0
0000CFA4 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CFA8 6600                       		bne.s	loc_C842	; if not, branch
0000CFAA 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CFAC 317C 0018 0008             		move.w	#$18,8(a0)
0000CFB2 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CFB8                            
0000CFB8                            loc_C842:
0000CFB8 1140 001A                  		move.b	d0,$1A(a0)
0000CFBC                            
0000CFBC                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CFBC 7210                       		moveq	#$10,d1		; set horizontal speed
0000CFBE 3028 0030                  		move.w	$30(a0),d0
0000CFC2 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CFC6 6700                       		beq.s	loc_C86C	; if yes, branch
0000CFC8 6C00                       		bge.s	Obj7E_Move
0000CFCA 4441                       		neg.w	d1
0000CFCC                            
0000CFCC                            Obj7E_Move:
0000CFCC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CFD0                            
0000CFD0                            loc_C85A:				; XREF: loc_C86C
0000CFD0 3028 0008                  		move.w	8(a0),d0
0000CFD4 6B00                       		bmi.s	locret_C86A
0000CFD6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CFDA 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CFDC 6000 0000                  		bra.w	DisplaySprite
0000CFE0                            ; ===========================================================================
0000CFE0                            
0000CFE0                            locret_C86A:
0000CFE0 4E75                       		rts	
0000CFE2                            ; ===========================================================================
0000CFE2                            
0000CFE2                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CFE2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CFE8 66E6                       		bne.s	loc_C85A
0000CFEA 5428 0024                  		addq.b	#2,$24(a0)
0000CFEE 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CFF4 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CFFA                            
0000CFFA                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CFFA 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CFFE 6600                       		bne.s	Obj7E_Display
0000D000 5428 0024                  		addq.b	#2,$24(a0)
0000D004                            
0000D004                            Obj7E_Display:
0000D004 6000 0000                  		bra.w	DisplaySprite
0000D008                            ; ===========================================================================
0000D008                            
0000D008                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D008 6100 0000                  		bsr.w	DisplaySprite
0000D00C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D012 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D016 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D018 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D01E 700A                       		moveq	#10,d0		; add 10 to score
0000D020 4EB9 0000 0000             		jsr	AddPoints
0000D026 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D02A 0200 0003                  		andi.b	#3,d0
0000D02E 6600                       		bne.s	locret_C8EA
0000D030 303C 00CD                  		move.w	#$CD,d0
0000D034 4EF9 0000 139E             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D03A                            ; ===========================================================================
0000D03A                            
0000D03A                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D03A 303C 00C5                  		move.w	#$C5,d0
0000D03E 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D044 5428 0024                  		addq.b	#2,$24(a0)
0000D048 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D04E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D054 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D056 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D05C 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D060                            
0000D060                            locret_C8EA:
0000D060 4E75                       		rts	
0000D062                            ; ===========================================================================
0000D062                            
0000D062                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D062 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D068 6000 0000                  		bra.w	DisplaySprite
0000D06C                            ; ===========================================================================
0000D06C                            
0000D06C                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D06C 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D072 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D078 303C 00BF                  		move.w	#$BF,d0
0000D07C 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play continues music
0000D082 5428 0024                  		addq.b	#2,$24(a0)
0000D086 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D08C 6000 0000                  		bra.w	DisplaySprite
0000D090                            ; ===========================================================================
0000D090                            
0000D090                            loc_C91A:				; XREF: Obj7E_Index
0000D090 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D094 0200 000F                  		andi.b	#$F,d0
0000D098 6600                       		bne.s	Obj7E_Display2
0000D09A 0868 0000 001A             		bchg	#0,$1A(a0)
0000D0A0                            
0000D0A0                            Obj7E_Display2:
0000D0A0 6000 0000                  		bra.w	DisplaySprite
0000D0A4                            ; ===========================================================================
0000D0A4 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D0AA 0200                       		dc.b 2,	0		; rountine number, frame number
0000D0AC 0320 0120 0118             		dc.w $320, $120, $118
0000D0B2 0201                       		dc.b 2,	1
0000D0B4 0360 0120 0128             		dc.w $360, $120, $128
0000D0BA 0202                       		dc.b 2,	2
0000D0BC 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D0C2 0203                       		dc.b 2,	3
0000D0C4 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D0CA 0206                       		dc.b 2,	6
0000D0CC                            ; ===========================================================================
0000D0CC                            ; ---------------------------------------------------------------------------
0000D0CC                            ; Object 7F - chaos emeralds from the special stage results screen
0000D0CC                            ; ---------------------------------------------------------------------------
0000D0CC                            
0000D0CC                            Obj7F:					; XREF: Obj_Index
0000D0CC 7000                       		moveq	#0,d0
0000D0CE 1028 0024                  		move.b	$24(a0),d0
0000D0D2 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D0D6 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D0DA                            ; ===========================================================================
0000D0DA 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D0DC 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D0DE                            
0000D0DE                            ; ---------------------------------------------------------------------------
0000D0DE                            ; X-axis positions for chaos emeralds
0000D0DE                            ; ---------------------------------------------------------------------------
0000D0DE 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D0EA                            ; ===========================================================================
0000D0EA                            
0000D0EA                            Obj7F_Main:				; XREF: Obj7F_Index
0000D0EA 2248                       		movea.l	a0,a1
0000D0EC 45F9 0000 D0DE             		lea	(Obj7F_PosData).l,a2
0000D0F2 7400                       		moveq	#0,d2
0000D0F4 7200                       		moveq	#0,d1
0000D0F6 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D0FA 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D0FC 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D100                            
0000D100                            Obj7F_Loop:
0000D100 12BC 007F                  		move.b	#$7F,0(a1)
0000D104 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D108 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D10E 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D112 1633 2000                  		move.b	(a3,d2.w),d3
0000D116 1343 001A                  		move.b	d3,$1A(a1)
0000D11A 1343 001C                  		move.b	d3,$1C(a1)
0000D11E 5202                       		addq.b	#1,d2
0000D120 5429 0024                  		addq.b	#2,$24(a1)
0000D124 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D12C 337C 8541 0002             		move.w	#$8541,2(a1)
0000D132 137C 0000 0001             		move.b	#0,1(a1)
0000D138 43E9 0040                  		lea	$40(a1),a1	; next object
0000D13C 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D140                            
0000D140                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D140 1028 001A                  		move.b	$1A(a0),d0
0000D144 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D14A 0C00 0006                  		cmpi.b	#6,d0
0000D14E 6600                       		bne.s	Obj7F_Display
0000D150 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D156                            
0000D156                            Obj7F_Display:
0000D156 6000 0000                  		bra.w	DisplaySprite
0000D15A                            ; ===========================================================================
0000D15A                            ; ---------------------------------------------------------------------------
0000D15A                            ; Sprite mappings - zone title cards
0000D15A                            ; ---------------------------------------------------------------------------
0000D15A                            Map_obj34:
0000D15A                                    include "_maps\obj34.asm"
0000D15A                            Map_c5df:
0000D15A 0000                       Map_c5df_0: 	dc.w Map_c5df_18-Map_c5df
0000D15C 0000                       Map_c5df_2: 	dc.w Map_c5df_55-Map_c5df
0000D15E 0000                       Map_c5df_4: 	dc.w Map_c5df_C4-Map_c5df
0000D160 0000                       Map_c5df_6: 	dc.w Map_c5df_DE-Map_c5df
0000D162 0000                       Map_c5df_8: 	dc.w Map_c5df_134-Map_c5df
0000D164 0000                       Map_c5df_A: 	dc.w Map_c5df_19E-Map_c5df
0000D166 0000                       Map_c5df_C: 	dc.w Map_c5df_1C2-Map_c5df
0000D168 0000                       Map_c5df_E: 	dc.w Map_c5df_1D7-Map_c5df
0000D16A 0000                       Map_c5df_10: 	dc.w Map_c5df_1E2-Map_c5df
0000D16C 0000                       Map_c5df_12: 	dc.w Map_c5df_1ED-Map_c5df
0000D16E 0000                       Map_c5df_14: 	dc.w Map_c5df_1F8-Map_c5df
0000D170 0000                       Map_c5df_16: 	dc.w Map_c5df_23A-Map_c5df
0000D172 0C                         Map_c5df_18: 	dc.b $C
0000D173 F805 0008 80               	dc.b $F8, $5, $0, $8, $80
0000D178 F805 003A 90               	dc.b $F8, $5, $0, $3A, $90
0000D17D F805 0046 A0               	dc.b $F8, $5, $0, $46, $A0
0000D182 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0000D187 F805 0008 C0               	dc.b $F8, $5, $0, $8, $C0
0000D18C F805 001C D0               	dc.b $F8, $5, $0, $1C, $D0
0000D191 F805 004A E0               	dc.b $F8, $5, $0, $4A, $E0
0000D196 F800 0056 F0               	dc.b $F8, $0, $0, $56, $F0
0000D19B F805 003A 00               	dc.b $F8, $5, $0, $3A, $0
0000D1A0 F805 0032 10               	dc.b $F8, $5, $0, $32, $10
0000D1A5 F805 0026 20               	dc.b $F8, $5, $0, $26, $20
0000D1AA F805 0026 30               	dc.b $F8, $5, $0, $26, $30
0000D1AF 16                         Map_c5df_55: 	dc.b $16
0000D1B0 F801 0020 80               	dc.b $F8, $1, $0, $20, $80
0000D1B5 F800 0056 88               	dc.b $F8, $0, $0, $56, $88
0000D1BA F805 0026 98               	dc.b $F8, $5, $0, $26, $98
0000D1BF F801 0020 A8               	dc.b $F8, $1, $0, $20, $A8
0000D1C4 F805 0022 B0               	dc.b $F8, $5, $0, $22, $B0
0000D1C9 F805 0010 C0               	dc.b $F8, $5, $0, $10, $C0
0000D1CE F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D1D3 F805 0014 E0               	dc.b $F8, $5, $0, $14, $E0
0000D1D8 F801 0020 F0               	dc.b $F8, $1, $0, $20, $F0
0000D1DD F805 0026 F8               	dc.b $F8, $5, $0, $26, $F8
0000D1E2 F805 0010 08               	dc.b $F8, $5, $0, $10, $8
0000D1E7 F800 0056 18               	dc.b $F8, $0, $0, $56, $18
0000D1EC F805 0010 28               	dc.b $F8, $5, $0, $10, $28
0000D1F1 F805 0018 38               	dc.b $F8, $5, $0, $18, $38
0000D1F6 F805 0018 48               	dc.b $F8, $5, $0, $18, $48
0000D1FB F805 003E 58               	dc.b $F8, $5, $0, $3E, $58
0000D200 F805 0036 68               	dc.b $F8, $5, $0, $36, $68
0000D205 F805 0026 78               	dc.b $F8, $5, $0, $26, $78
0000D20A F805 0032 88               	dc.b $F8, $5, $0, $32, $88
0000D20F F805 003A 98               	dc.b $F8, $5, $0, $3A, $98
0000D214 F805 0010 A8               	dc.b $F8, $5, $0, $10, $A8
0000D219 F805 003A B8               	dc.b $F8, $5, $0, $3A, $B8
0000D21E 05                         Map_c5df_C4: 	dc.b $5
0000D21F F805 002A 80               	dc.b $F8, $5, $0, $2A, $80
0000D224 F805 0000 90               	dc.b $F8, $5, $0, $0, $90
0000D229 F805 003A A0               	dc.b $F8, $5, $0, $3A, $A0
0000D22E F805 0004 B0               	dc.b $F8, $5, $0, $4, $B0
0000D233 F805 0026 C0               	dc.b $F8, $5, $0, $26, $C0
0000D238 11                         Map_c5df_DE: 	dc.b $11
0000D239 F805 000C 80               	dc.b $F8, $5, $0, $C, $80
0000D23E F805 0032 90               	dc.b $F8, $5, $0, $32, $90
0000D243 F805 002E A0               	dc.b $F8, $5, $0, $2E, $A0
0000D248 F805 0042 B0               	dc.b $F8, $5, $0, $42, $B0
0000D24D F800 0056 C0               	dc.b $F8, $0, $0, $56, $C0
0000D252 F805 0018 D0               	dc.b $F8, $5, $0, $18, $D0
0000D257 F805 0010 E0               	dc.b $F8, $5, $0, $10, $E0
0000D25C F805 0042 F0               	dc.b $F8, $5, $0, $42, $F0
0000D261 F800 0056 00               	dc.b $F8, $0, $0, $56, $0
0000D266 F805 003A 10               	dc.b $F8, $5, $0, $3A, $10
0000D26B F801 0020 20               	dc.b $F8, $1, $0, $20, $20
0000D270 F805 000C 28               	dc.b $F8, $5, $0, $C, $28
0000D275 F805 0032 38               	dc.b $F8, $5, $0, $32, $38
0000D27A F805 0042 48               	dc.b $F8, $5, $0, $42, $48
0000D27F F805 001C 58               	dc.b $F8, $5, $0, $1C, $58
0000D284 F801 0020 68               	dc.b $F8, $1, $0, $20, $68
0000D289 F805 003E 70               	dc.b $F8, $5, $0, $3E, $70
0000D28E 15                         Map_c5df_134: 	dc.b $15
0000D28F F805 0042 80               	dc.b $F8, $5, $0, $42, $80
0000D294 F805 001C 90               	dc.b $F8, $5, $0, $1C, $90
0000D299 F805 0010 A0               	dc.b $F8, $5, $0, $10, $A0
0000D29E F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D2A3 F805 0036 C0               	dc.b $F8, $5, $0, $36, $C0
0000D2A8 F801 0020 D0               	dc.b $F8, $1, $0, $20, $D0
0000D2AD F805 0018 D8               	dc.b $F8, $5, $0, $18, $D8
0000D2B2 F800 0056 E8               	dc.b $F8, $0, $0, $56, $E8
0000D2B7 F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
0000D2BC F805 003A 08               	dc.b $F8, $5, $0, $3A, $8
0000D2C1 F805 0032 18               	dc.b $F8, $5, $0, $32, $18
0000D2C6 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0000D2CB F800 0056 38               	dc.b $F8, $0, $0, $56, $38
0000D2D0 F805 0004 48               	dc.b $F8, $5, $0, $4, $48
0000D2D5 F805 0000 58               	dc.b $F8, $5, $0, $0, $58
0000D2DA F805 003A 68               	dc.b $F8, $5, $0, $3A, $68
0000D2DF F805 002E 78               	dc.b $F8, $5, $0, $2E, $78
0000D2E4 F805 004A 88               	dc.b $F8, $5, $0, $4A, $88
0000D2E9 F805 0000 98               	dc.b $F8, $5, $0, $0, $98
0000D2EE F805 003A A8               	dc.b $F8, $5, $0, $3A, $A8
0000D2F3 F805 000C B8               	dc.b $F8, $5, $0, $C, $B8
0000D2F8 07                         Map_c5df_19E: 	dc.b $7
0000D2F9 F805 004E 80               	dc.b $F8, $5, $0, $4E, $80
0000D2FE F800 0056 90               	dc.b $F8, $0, $0, $56, $90
0000D303 F805 004E A0               	dc.b $F8, $5, $0, $4E, $A0
0000D308 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D30D F805 004E C0               	dc.b $F8, $5, $0, $4E, $C0
0000D312 F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D317 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D31C 04                         Map_c5df_1C2: 	dc.b $4
0000D31D F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D322 F805 0032 F0               	dc.b $F8, $5, $0, $32, $F0
0000D327 F805 002E 00               	dc.b $F8, $5, $0, $2E, $0
0000D32C F805 0010 10               	dc.b $F8, $5, $0, $10, $10
0000D331 02                         Map_c5df_1D7: 	dc.b $2
0000D332 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D337 F402 0057 0C               	dc.b $F4, $2, $0, $57, $C
0000D33C 02                         Map_c5df_1E2: 	dc.b $2
0000D33D 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D342 F406 005A 08               	dc.b $F4, $6, $0, $5A, $8
0000D347 02                         Map_c5df_1ED: 	dc.b $2
0000D348 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D34D F406 0060 08               	dc.b $F4, $6, $0, $60, $8
0000D352 0D                         Map_c5df_1F8: 	dc.b $D
0000D353 E40C 0070 F4               	dc.b $E4, $C, $0, $70, $F4
0000D358 E402 0074 14               	dc.b $E4, $2, $0, $74, $14
0000D35D EC04 0077 EC               	dc.b $EC, $4, $0, $77, $EC
0000D362 F405 0079 E4               	dc.b $F4, $5, $0, $79, $E4
0000D367 140C 1870 EC               	dc.b $14, $C, $18, $70, $EC
0000D36C 0402 1874 E4               	dc.b $4, $2, $18, $74, $E4
0000D371 0C04 1877 04               	dc.b $C, $4, $18, $77, $4
0000D376 FC05 1879 0C               	dc.b $FC, $5, $18, $79, $C
0000D37B EC08 007D FC               	dc.b $EC, $8, $0, $7D, $FC
0000D380 F40C 007C F4               	dc.b $F4, $C, $0, $7C, $F4
0000D385 FC08 007C F4               	dc.b $FC, $8, $0, $7C, $F4
0000D38A 040C 007C EC               	dc.b $4, $C, $0, $7C, $EC
0000D38F 0C08 007C EC               	dc.b $C, $8, $0, $7C, $EC
0000D394 05                         Map_c5df_23A: 	dc.b $5
0000D395 F805 0014 DC               	dc.b $F8, $5, $0, $14, $DC
0000D39A F801 0020 EC               	dc.b $F8, $1, $0, $20, $EC
0000D39F F805 002E F4               	dc.b $F8, $5, $0, $2E, $F4
0000D3A4 F805 0000 04               	dc.b $F8, $5, $0, $0, $4
0000D3A9 F805 0026 14               	dc.b $F8, $5, $0, $26, $14
0000D3AE                            	even
0000D3AE                            	even
0000D3AE                            ; ---------------------------------------------------------------------------
0000D3AE                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D3AE                            ; ---------------------------------------------------------------------------
0000D3AE                            Map_obj39:
0000D3AE                            	include "_maps\obj39.asm"
0000D3AE                            ; ---------------------------------------------------------------------------
0000D3AE                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D3AE                            ; ---------------------------------------------------------------------------
0000D3AE 0000                       		dc.w byte_CBAC-Map_obj39
0000D3B0 0000                       		dc.w byte_CBB7-Map_obj39
0000D3B2 0000                       		dc.w byte_CBC2-Map_obj39
0000D3B4 0000                       		dc.w byte_CBCD-Map_obj39
0000D3B6 02                         byte_CBAC:	dc.b 2
0000D3B7 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D3BC F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D3C1 02                         byte_CBB7:	dc.b 2
0000D3C2 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D3C7 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D3CC 02                         byte_CBC2:	dc.b 2
0000D3CD F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D3D2 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D3D7 02                         byte_CBCD:	dc.b 2
0000D3D8 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D3DD F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D3E2                            		even
0000D3E2                            		even
0000D3E2                            
0000D3E2                            ; ---------------------------------------------------------------------------
0000D3E2                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D3E2                            ; ---------------------------------------------------------------------------
0000D3E2 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D3E4 0000                       		dc.w byte_CC13-Map_obj3A
0000D3E6 0000                       		dc.w byte_CC32-Map_obj3A
0000D3E8 0000                       		dc.w byte_CC51-Map_obj3A
0000D3EA 0000                       		dc.w byte_CC75-Map_obj3A
0000D3EC                            		;dc.w byte_CB47-Map_obj3A
0000D3EC                            		;dc.w byte_CB26-Map_obj3A
0000D3EC                            		;dc.w byte_CB31-Map_obj3A
0000D3EC                            		;dc.w byte_CB3C-Map_obj3A
0000D3EC 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D3ED F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D3F2 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D3F7 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D3FC F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D401 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D406 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D40B F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D410 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D415 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D41A F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D41F F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D424 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D429 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D42E F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D433 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D438 06                         byte_CC13:	dc.b 6			; PASSED
0000D439 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D43E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D443 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D448 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D44D F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D452 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D457 06                         byte_CC32:	dc.b 6			; SCORE
0000D458 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D45D F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D462 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D467 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D46C F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D471 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D476 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D477 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D47C F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D481 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D486 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D48B FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D490 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D495 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D49A 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D49B F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D4A0 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D4A5 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D4AA F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D4AF FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D4B4 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D4B9 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D4BE                            		even
0000D4BE                            ; ---------------------------------------------------------------------------
0000D4BE                            ; Sprite mappings - special stage results screen
0000D4BE                            ; ---------------------------------------------------------------------------
0000D4BE 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D4C0 0000                       		dc.w byte_CCEE-Map_obj7E
0000D4C2 0000                       		dc.w byte_CD0D-Map_obj7E
0000D4C4                            		;dc.w byte_CB47-Map_obj7E
0000D4C4 0000                       		dc.w byte_CD31-Map_obj7E
0000D4C6 0000                       		dc.w byte_CD46-Map_obj7E
0000D4C8 0000                       		dc.w byte_CD5B-Map_obj7E
0000D4CA 0000                       		dc.w byte_CD6B-Map_obj7E
0000D4CC 0000                       		dc.w byte_CDA8-Map_obj7E
0000D4CE 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D4CF F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D4D4 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D4D9 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D4DE F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D4E3 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D4E8 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D4ED F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D4F2 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D4F7 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D4FC F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D501 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D506 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D50B F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D510 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D511 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D516 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D51B F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D520 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D525 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D52A FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D52F 07                         byte_CD0D:	dc.b 7
0000D530 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D535 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D53A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D53F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D544 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D549 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D54E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D553 04                         byte_CD31:	dc.b 4
0000D554 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D559 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D55E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D563 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D568 04                         byte_CD46:	dc.b 4
0000D569 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D56E F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D573 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D578 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D57D 03                         byte_CD5B:	dc.b 3
0000D57E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D583 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D588 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D58D 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D58E F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D593 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D598 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D59D F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D5A2 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D5A7 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D5AC F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D5B1 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D5B6 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D5BB F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D5C0 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D5C5 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D5CA 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D5CB F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D5D0 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D5D5 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D5DA F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D5DF F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D5E4 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D5E9 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D5EE F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D5F3 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D5F8 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D5FD F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D602 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D607 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D60C F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D611 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D616                            		even
0000D616                            ; ---------------------------------------------------------------------------
0000D616                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D616                            ; ---------------------------------------------------------------------------
0000D616                            Map_obj7F:
0000D616                            	include "_maps\obj7F.asm"
0000D616                            ; ---------------------------------------------------------------------------
0000D616                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D616                            ; ---------------------------------------------------------------------------
0000D616 0000                       		dc.w byte_CE02-Map_obj7F
0000D618 0000                       		dc.w byte_CE08-Map_obj7F
0000D61A 0000                       		dc.w byte_CE0E-Map_obj7F
0000D61C 0000                       		dc.w byte_CE14-Map_obj7F
0000D61E 0000                       		dc.w byte_CE1A-Map_obj7F
0000D620 0000                       		dc.w byte_CE20-Map_obj7F
0000D622 0000                       		dc.w byte_CE26-Map_obj7F
0000D624 01                         byte_CE02:	dc.b 1
0000D625 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D62A 01                         byte_CE08:	dc.b 1
0000D62B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D630 01                         byte_CE0E:	dc.b 1
0000D631 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D636 01                         byte_CE14:	dc.b 1
0000D637 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D63C 01                         byte_CE1A:	dc.b 1
0000D63D F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D642 01                         byte_CE20:	dc.b 1
0000D643 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D648 00                         byte_CE26:	dc.b 0			; Blank frame
0000D64A 00                         		even
0000D64A 00                         		even
0000D64A                            
0000D64A                            ; ===========================================================================
0000D64A                            ; ---------------------------------------------------------------------------
0000D64A                            ; Object 36 - spikes
0000D64A                            ; ---------------------------------------------------------------------------
0000D64A                            
0000D64A                            Obj36:					; XREF: Obj_Index
0000D64A 7000                       		moveq	#0,d0
0000D64C 1028 0024                  		move.b	$24(a0),d0
0000D650 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D654 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D658                            ; ===========================================================================
0000D658 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D65A 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D65C                            
0000D65C 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D65E 0110                       		dc.b 1,	$10
0000D660 0204                       		dc.b 2,	4
0000D662 031C                       		dc.b 3,	$1C
0000D664 0440                       		dc.b 4,	$40
0000D666 0510                       		dc.b 5,	$10
0000D668                            ; ===========================================================================
0000D668                            
0000D668                            Obj36_Main:				; XREF: Obj36_Index
0000D668 5428 0024                  		addq.b	#2,$24(a0)
0000D66C 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D674 317C 051B 0002             		move.w	#$51B,2(a0)
0000D67A 0028 0004 0001             		ori.b	#4,1(a0)
0000D680 117C 0004 0018             		move.b	#4,$18(a0)
0000D686 1028 0028                  		move.b	$28(a0),d0
0000D68A 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D690 0240 00F0                  		andi.w	#$F0,d0
0000D694 43F9 0000 D65C             		lea	(Obj36_Var).l,a1
0000D69A E648                       		lsr.w	#3,d0
0000D69C D2C0                       		adda.w	d0,a1
0000D69E 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D6A2 1159 0019                  		move.b	(a1)+,$19(a0)
0000D6A6 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D6AC 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D6B2                            
0000D6B2                            Obj36_Solid:				; XREF: Obj36_Index
0000D6B2 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D6B6 343C 0004                  		move.w	#4,d2
0000D6BA 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D6C0 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D6C2 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D6C8 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D6CA 343C 0014                  		move.w	#$14,d2
0000D6CE                            
0000D6CE                            ; Spikes types $1x and $5x face	sideways
0000D6CE                            
0000D6CE                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D6CE 323C 001B                  		move.w	#$1B,d1
0000D6D2 3602                       		move.w	d2,d3
0000D6D4 5243                       		addq.w	#1,d3
0000D6D6 3828 0008                  		move.w	8(a0),d4
0000D6DA 6100 0000                  		bsr.w	SolidObject
0000D6DE 0828 0003 0022             		btst	#3,$22(a0)
0000D6E4 6600                       		bne.s	Obj36_Display
0000D6E6 0C44 0001                  		cmpi.w	#1,d4
0000D6EA 6700                       		beq.s	Obj36_Hurt
0000D6EC 6000                       		bra.s	Obj36_Display
0000D6EE                            ; ===========================================================================
0000D6EE                            
0000D6EE                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D6EE                            
0000D6EE                            Obj36_Upright:				; XREF: Obj36_Solid
0000D6EE 7200                       		moveq	#0,d1
0000D6F0 1228 0019                  		move.b	$19(a0),d1
0000D6F4 0641 000B                  		addi.w	#$B,d1
0000D6F8 343C 0010                  		move.w	#$10,d2
0000D6FC 363C 0011                  		move.w	#$11,d3
0000D700 3828 0008                  		move.w	8(a0),d4
0000D704 6100 0000                  		bsr.w	SolidObject
0000D708 0828 0003 0022             		btst	#3,$22(a0)
0000D70E 6600                       		bne.s	Obj36_Hurt
0000D710 4A44                       		tst.w	d4
0000D712 6A00                       		bpl.s	Obj36_Display
0000D714                            
0000D714                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D714 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D718 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D71A 2F08                       		move.l	a0,-(sp)
0000D71C 2448                       		movea.l	a0,a2
0000D71E 41F8 D000                  		lea	($FFFFD000).w,a0
0000D722 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D728 6400                       		bcc.s	loc_CF20
0000D72A 2628 000C                  		move.l	$C(a0),d3
0000D72E 3028 0012                  		move.w	$12(a0),d0
0000D732 48C0                       		ext.l	d0
0000D734 E180                       		asl.l	#8,d0
0000D736 9680                       		sub.l	d0,d3
0000D738 2143 000C                  		move.l	d3,$C(a0)
0000D73C 4EB9 0000 0000             		jsr	HurtSonic
0000D742                            
0000D742                            loc_CF20:
0000D742 205F                       		movea.l	(sp)+,a0
0000D744                            
0000D744                            Obj36_Display:
0000D744 6100 0000                  		bsr.w	DisplaySprite
0000D748 3028 0030                  		move.w	$30(a0),d0
0000D74C 0240 FF80                  		andi.w	#$FF80,d0
0000D750 3238 F700                  		move.w	($FFFFF700).w,d1
0000D754 0441 0080                  		subi.w	#$80,d1
0000D758 0241 FF80                  		andi.w	#$FF80,d1
0000D75C 9041                       		sub.w	d1,d0
0000D75E 0C40 0280                  		cmpi.w	#$280,d0
0000D762 6200 0000                  		bhi.w	DeleteObject
0000D766 4E75                       		rts	
0000D768                            ; ===========================================================================
0000D768                            
0000D768                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D768 7000                       		moveq	#0,d0
0000D76A 1028 0028                  		move.b	$28(a0),d0
0000D76E D040                       		add.w	d0,d0
0000D770 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D774 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D778                            ; ===========================================================================
0000D778 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D77A 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D77C 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D77E                            ; ===========================================================================
0000D77E                            
0000D77E                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D77E 4E75                       		rts			; don't move the object
0000D780                            ; ===========================================================================
0000D780                            
0000D780                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D780 6100 0000                  		bsr.w	Obj36_Wait
0000D784 7000                       		moveq	#0,d0
0000D786 1028 0034                  		move.b	$34(a0),d0
0000D78A D068 0032                  		add.w	$32(a0),d0
0000D78E 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D792 4E75                       		rts	
0000D794                            ; ===========================================================================
0000D794                            
0000D794                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D794 6100 0000                  		bsr.w	Obj36_Wait
0000D798 7000                       		moveq	#0,d0
0000D79A 1028 0034                  		move.b	$34(a0),d0
0000D79E D068 0030                  		add.w	$30(a0),d0
0000D7A2 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D7A6 4E75                       		rts	
0000D7A8                            ; ===========================================================================
0000D7A8                            
0000D7A8                            Obj36_Wait:
0000D7A8 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D7AC 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D7AE 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D7B2 6600                       		bne.s	locret_CFE6
0000D7B4 4A28 0001                  		tst.b	1(a0)
0000D7B8 6A00                       		bpl.s	locret_CFE6
0000D7BA 303C 00B6                  		move.w	#$B6,d0
0000D7BE 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D7C4 6000                       		bra.s	locret_CFE6
0000D7C6                            ; ===========================================================================
0000D7C6                            
0000D7C6                            loc_CFA4:
0000D7C6 4A68 0036                  		tst.w	$36(a0)
0000D7CA 6700                       		beq.s	loc_CFC6
0000D7CC 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D7D2 6400                       		bcc.s	locret_CFE6
0000D7D4 317C 0000 0034             		move.w	#0,$34(a0)
0000D7DA 317C 0000 0036             		move.w	#0,$36(a0)
0000D7E0 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D7E6 6000                       		bra.s	locret_CFE6
0000D7E8                            ; ===========================================================================
0000D7E8                            
0000D7E8                            loc_CFC6:
0000D7E8 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D7EE 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D7F4 6500                       		bcs.s	locret_CFE6
0000D7F6 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D7FC 317C 0001 0036             		move.w	#1,$36(a0)
0000D802 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D808                            
0000D808                            locret_CFE6:
0000D808 4E75                       		rts	
0000D80A                            ; ===========================================================================
0000D80A                            ; ---------------------------------------------------------------------------
0000D80A                            ; Sprite mappings - spikes
0000D80A                            ; ---------------------------------------------------------------------------
0000D80A                            Map_obj36:
0000D80A                            	include "_maps\obj36.asm"
0000D80A                            Map_obj36_inner:
0000D80A 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000D80C 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000D80E 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000D810 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000D812 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000D814 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000D816 03                         Map_obj36_inner_C: 	dc.b $3
0000D817 F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000D81C F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D821 F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000D826 03                         Map_obj36_inner_1C: 	dc.b $3
0000D827 EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000D82C FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D831 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000D836 01                         Map_obj36_inner_2C: 	dc.b $1
0000D837 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D83C 03                         Map_obj36_inner_32: 	dc.b $3
0000D83D F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000D842 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D847 F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000D84C 06                         Map_obj36_inner_42: 	dc.b $6
0000D84D F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000D852 F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000D857 F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000D85C F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000D861 F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000D866 F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000D86B 01                         Map_obj36_inner_61: 	dc.b $1
0000D86C FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D872 00                         	even
0000D872 00                         	even
0000D872                            
0000D872                            ; ===========================================================================
0000D872                            ; ---------------------------------------------------------------------------
0000D872                            ; Object 3B - purple rock (GHZ)
0000D872                            ; ---------------------------------------------------------------------------
0000D872                            
0000D872                            Obj3B:					; XREF: Obj_Index
0000D872 7000                       		moveq	#0,d0
0000D874 1028 0024                  		move.b	$24(a0),d0
0000D878 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D87C 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D880                            ; ===========================================================================
0000D880 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D882 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D884                            ; ===========================================================================
0000D884                            
0000D884                            Obj3B_Main:				; XREF: Obj3B_Index
0000D884 5428 0024                  		addq.b	#2,$24(a0)
0000D888 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D890 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D896 117C 0004 0001             		move.b	#4,1(a0)
0000D89C 117C 0013 0019             		move.b	#$13,$19(a0)
0000D8A2 117C 0004 0018             		move.b	#4,$18(a0)
0000D8A8                            
0000D8A8                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D8A8 323C 001B                  		move.w	#$1B,d1
0000D8AC 343C 0010                  		move.w	#$10,d2
0000D8B0 363C 0010                  		move.w	#$10,d3
0000D8B4 3828 0008                  		move.w	8(a0),d4
0000D8B8 6100 0000                  		bsr.w	SolidObject
0000D8BC 6100 0000                  		bsr.w	DisplaySprite
0000D8C0 3028 0008                  		move.w	8(a0),d0
0000D8C4 0240 FF80                  		andi.w	#$FF80,d0
0000D8C8 3238 F700                  		move.w	($FFFFF700).w,d1
0000D8CC 0441 0080                  		subi.w	#$80,d1
0000D8D0 0241 FF80                  		andi.w	#$FF80,d1
0000D8D4 9041                       		sub.w	d1,d0
0000D8D6 0C40 0280                  		cmpi.w	#$280,d0
0000D8DA 6200 0000                  		bhi.w	DeleteObject
0000D8DE 4E75                       		rts	
0000D8E0                            ; ===========================================================================
0000D8E0                            ; ---------------------------------------------------------------------------
0000D8E0                            ; Object 49 - waterfall	sound effect (GHZ)
0000D8E0                            ; ---------------------------------------------------------------------------
0000D8E0                            
0000D8E0                            Obj49:					; XREF: Obj_Index
0000D8E0 7000                       		moveq	#0,d0
0000D8E2 1028 0024                  		move.b	$24(a0),d0
0000D8E6 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D8EA 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D8EE                            ; ===========================================================================
0000D8EE 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D8F0 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D8F2                            ; ===========================================================================
0000D8F2                            
0000D8F2                            Obj49_Main:				; XREF: Obj49_Index
0000D8F2 5428 0024                  		addq.b	#2,$24(a0)
0000D8F6 117C 0004 0001             		move.b	#4,1(a0)
0000D8FC                            
0000D8FC                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D8FC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D900 0200 003F                  		andi.b	#$3F,d0
0000D904 6600                       		bne.s	Obj49_ChkDel
0000D906 303C 00D0                  		move.w	#$D0,d0
0000D90A 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D910                            
0000D910                            Obj49_ChkDel:
0000D910 3028 0008                  		move.w	8(a0),d0
0000D914 0240 FF80                  		andi.w	#$FF80,d0
0000D918 3238 F700                  		move.w	($FFFFF700).w,d1
0000D91C 0441 0080                  		subi.w	#$80,d1
0000D920 0241 FF80                  		andi.w	#$FF80,d1
0000D924 9041                       		sub.w	d1,d0
0000D926 0C40 0280                  		cmpi.w	#$280,d0
0000D92A 6200 0000                  		bhi.w	DeleteObject
0000D92E 4E75                       		rts	
0000D930                            ; ===========================================================================
0000D930                            ; ---------------------------------------------------------------------------
0000D930                            ; Sprite mappings - purple rock	(GHZ)
0000D930                            ; ---------------------------------------------------------------------------
0000D930                            Map_obj3B:
0000D930                            	include "_maps\obj3B.asm"
0000D930                            ; ---------------------------------------------------------------------------
0000D930                            ; Sprite mappings - purple rock	(GHZ)
0000D930                            ; ---------------------------------------------------------------------------
0000D930 0000                       		dc.w byte_D110-Map_obj3B
0000D932 02                         byte_D110:	dc.b 2
0000D933 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D938 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D93E 00                         		even
0000D93E 00                         		even
0000D93E                            
0000D93E                            ; ===========================================================================
0000D93E                            ; ---------------------------------------------------------------------------
0000D93E                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D93E                            ; ---------------------------------------------------------------------------
0000D93E                            
0000D93E                            Obj3C:					; XREF: Obj_Index
0000D93E 7000                       		moveq	#0,d0
0000D940 1028 0024                  		move.b	$24(a0),d0
0000D944 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D948 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D94C 6000 0000                  		bra.w	MarkObjGone
0000D950                            ; ===========================================================================
0000D950 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D952 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D954 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D956                            ; ===========================================================================
0000D956                            
0000D956                            Obj3C_Main:				; XREF: Obj3C_Index
0000D956 5428 0024                  		addq.b	#2,$24(a0)
0000D95A 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D962 317C 450F 0002             		move.w	#$450F,2(a0)
0000D968 117C 0004 0001             		move.b	#4,1(a0)
0000D96E 117C 0010 0019             		move.b	#$10,$19(a0)
0000D974 117C 0004 0018             		move.b	#4,$18(a0)
0000D97A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D980                            
0000D980                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D980 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D986 323C 001B                  		move.w	#$1B,d1
0000D98A 343C 0020                  		move.w	#$20,d2
0000D98E 363C 0020                  		move.w	#$20,d3
0000D992 3828 0008                  		move.w	8(a0),d4
0000D996 6100 0000                  		bsr.w	SolidObject
0000D99A 0828 0005 0022             		btst	#5,$22(a0)
0000D9A0 6600                       		bne.s	Obj3C_ChkRoll
0000D9A2                            
0000D9A2                            locret_D180:
0000D9A2 4E75                       		rts	
0000D9A4                            ; ===========================================================================
0000D9A4                            
0000D9A4                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D9A4 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D9AA 66F6                       		bne.s	locret_D180	; if not, branch
0000D9AC 3028 0030                  		move.w	$30(a0),d0
0000D9B0 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D9B2 4440                       		neg.w	d0
0000D9B4                            
0000D9B4                            Obj3C_ChkSpeed:
0000D9B4 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D9B8 65E8                       		bcs.s	locret_D180	; if not, branch
0000D9BA 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D9C0 5869 0008                  		addq.w	#4,8(a1)
0000D9C4 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D9CA 3028 0008                  		move.w	8(a0),d0
0000D9CE B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D9D2 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D9D4 5169 0008                  		subq.w	#8,8(a1)
0000D9D8 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D9DE                            
0000D9DE                            Obj3C_Smash:
0000D9DE 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D9E4 08A8 0005 0022             		bclr	#5,$22(a0)
0000D9EA 08A9 0005 0022             		bclr	#5,$22(a1)
0000D9F0 7207                       		moveq	#7,d1		; load 8 fragments
0000D9F2 343C 0070                  		move.w	#$70,d2
0000D9F6 6100                       		bsr.s	SmashObject
0000D9F8                            
0000D9F8                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D9F8 6100 0000                  		bsr.w	SpeedToPos
0000D9FC 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000DA02 6100 0000                  		bsr.w	DisplaySprite
0000DA06 4A28 0001                  		tst.b	1(a0)
0000DA0A 6A00 0000                  		bpl.w	DeleteObject
0000DA0E 4E75                       		rts	
0000DA10                            
0000DA10                            ; ---------------------------------------------------------------------------
0000DA10                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DA10                            ; ---------------------------------------------------------------------------
0000DA10                            
0000DA10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA10                            
0000DA10                            
0000DA10                            SmashObject:				; XREF: Obj3C_Smash
0000DA10 7000                       		moveq	#0,d0
0000DA12 1028 001A                  		move.b	$1A(a0),d0
0000DA16 D040                       		add.w	d0,d0
0000DA18 2668 0004                  		movea.l	4(a0),a3
0000DA1C D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DA20 524B                       		addq.w	#1,a3
0000DA22 08E8 0005 0001             		bset	#5,1(a0)
0000DA28 1810                       		move.b	0(a0),d4
0000DA2A 1A28 0001                  		move.b	1(a0),d5
0000DA2E 2248                       		movea.l	a0,a1
0000DA30 6000                       		bra.s	Smash_LoadFrag
0000DA32                            ; ===========================================================================
0000DA32                            
0000DA32                            Smash_Loop:
0000DA32 6100 0000                  		bsr.w	SingleObjLoad
0000DA36 6600                       		bne.s	Smash_PlaySnd
0000DA38 5A4B                       		addq.w	#5,a3
0000DA3A                            
0000DA3A                            Smash_LoadFrag:				; XREF: SmashObject
0000DA3A 137C 0004 0024             		move.b	#4,$24(a1)
0000DA40 1284                       		move.b	d4,0(a1)
0000DA42 234B 0004                  		move.l	a3,4(a1)
0000DA46 1345 0001                  		move.b	d5,1(a1)
0000DA4A 3368 0008 0008             		move.w	8(a0),8(a1)
0000DA50 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DA56 3368 0002 0002             		move.w	2(a0),2(a1)
0000DA5C 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DA62 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DA68 335C 0010                  		move.w	(a4)+,$10(a1)
0000DA6C 335C 0012                  		move.w	(a4)+,$12(a1)
0000DA70 B3C8                       		cmpa.l	a0,a1
0000DA72 6400                       		bcc.s	loc_D268
0000DA74 2F08                       		move.l	a0,-(sp)
0000DA76 2049                       		movea.l	a1,a0
0000DA78 6100 0000                  		bsr.w	SpeedToPos
0000DA7C D568 0012                  		add.w	d2,$12(a0)
0000DA80 205F                       		movea.l	(sp)+,a0
0000DA82 6100 0000                  		bsr.w	DisplaySprite2
0000DA86                            
0000DA86                            loc_D268:
0000DA86 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DA8A                            
0000DA8A                            Smash_PlaySnd:
0000DA8A 303C 00CB                  		move.w	#$CB,d0
0000DA8E 4EF9 0000 139E             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DA94                            ; End of function SmashObject
0000DA94                            
0000DA94                            ; ===========================================================================
0000DA94                            ; Smashed block	fragment speeds
0000DA94                            ;
0000DA94 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DA98 0600 FF00                  		dc.w $600, $FF00
0000DA9C 0600 0100                  		dc.w $600, $100
0000DAA0 0400 0500                  		dc.w $400, $500
0000DAA4 0600 FA00                  		dc.w $600, $FA00
0000DAA8 0800 FE00                  		dc.w $800, $FE00
0000DAAC 0800 0200                  		dc.w $800, $200
0000DAB0 0600 0600                  		dc.w $600, $600
0000DAB4                            
0000DAB4 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DAB8 F800 FE00                  		dc.w $F800, $FE00
0000DABC F800 0200                  		dc.w $F800, $200
0000DAC0 FA00 0600                  		dc.w $FA00, $600
0000DAC4 FC00 FB00                  		dc.w $FC00, $FB00
0000DAC8 FA00 FF00                  		dc.w $FA00, $FF00
0000DACC FA00 0100                  		dc.w $FA00, $100
0000DAD0 FC00 0500                  		dc.w $FC00, $500
0000DAD4                            ; ---------------------------------------------------------------------------
0000DAD4                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DAD4                            ; ---------------------------------------------------------------------------
0000DAD4                            Map_obj3C:
0000DAD4                            	include "_maps\obj3C.asm"
0000DAD4                            ; ---------------------------------------------------------------------------
0000DAD4                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DAD4                            ; ---------------------------------------------------------------------------
0000DAD4 0000                       		dc.w byte_D2BC-Map_obj3C
0000DAD6 0000                       		dc.w byte_D2E5-Map_obj3C
0000DAD8 0000                       		dc.w byte_D30E-Map_obj3C
0000DADA 08                         byte_D2BC:	dc.b 8
0000DADB E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DAE0 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DAE5 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DAEA 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DAEF E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DAF4 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DAF9 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DAFE 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DB03 08                         byte_D2E5:	dc.b 8
0000DB04 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DB09 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DB0E 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DB13 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DB18 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DB1D F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DB22 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DB27 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DB2C 08                         byte_D30E:	dc.b 8
0000DB2D E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DB32 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DB37 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DB3C 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DB41 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DB46 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DB4B 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DB50 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DB56 00                         		even
0000DB56 00                         		even
0000DB56                            
0000DB56                            ; ---------------------------------------------------------------------------
0000DB56                            ; Object code loading subroutine
0000DB56                            ; ---------------------------------------------------------------------------
0000DB56                            
0000DB56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB56                            
0000DB56                            
0000DB56                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DB56 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DB5A 7E7F                       		moveq	#$7F,d7
0000DB5C 7000                       		moveq	#0,d0
0000DB5E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DB64 6400                       		bcc.s	loc_D362
0000DB66                            
0000DB66                            loc_D348:
0000DB66 1010                       		move.b	(a0),d0		; load object number from RAM
0000DB68 6700                       		beq.s	loc_D358
0000DB6A D040                       		add.w	d0,d0
0000DB6C D040                       		add.w	d0,d0
0000DB6E 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DB72 4E91                       		jsr	(a1)		; run the object's code
0000DB74 7000                       		moveq	#0,d0
0000DB76                            
0000DB76                            loc_D358:
0000DB76 41E8 0040                  		lea	$40(a0),a0	; next object
0000DB7A 51CF FFEA                  		dbf	d7,loc_D348
0000DB7E 4E75                       		rts	
0000DB80                            ; ===========================================================================
0000DB80                            
0000DB80                            loc_D362:
0000DB80 7E1F                       		moveq	#$1F,d7
0000DB82 61E2                       		bsr.s	loc_D348
0000DB84 7E5F                       		moveq	#$5F,d7
0000DB86                            
0000DB86                            loc_D368:
0000DB86 7000                       		moveq	#0,d0
0000DB88 1010                       		move.b	(a0),d0
0000DB8A 6700                       		beq.s	loc_D378
0000DB8C 4A28 0001                  		tst.b	1(a0)
0000DB90 6A00                       		bpl.s	loc_D378
0000DB92 6100 0000                  		bsr.w	DisplaySprite
0000DB96                            
0000DB96                            loc_D378:
0000DB96 41E8 0040                  		lea	$40(a0),a0
0000DB9A                            
0000DB9A                            loc_D37C:
0000DB9A 51CF FFEA                  		dbf	d7,loc_D368
0000DB9E 4E75                       		rts	
0000DBA0                            ; End of function ObjectsLoad
0000DBA0                            
0000DBA0                            ; ===========================================================================
0000DBA0                            ; ---------------------------------------------------------------------------
0000DBA0                            ; Object pointers
0000DBA0                            ; ---------------------------------------------------------------------------
0000DBA0                            Obj_Index:
0000DBA0                            	include "_inc\Object pointers.asm"
0000DBA0                            ; ---------------------------------------------------------------------------
0000DBA0                            ; Object pointers
0000DBA0                            ; ---------------------------------------------------------------------------
0000DBA0 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DBB0 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DBC0 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DBD0 0000 0000 0000 ADBA 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DBE0 0000 7952 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DBF0 0000 7F78 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DC00 0000 87C6 0000 88C0 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DC10 0000 8F0A 0000 91F8 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DC20 0000 0000 0000 9EB6 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DC30 0000 A1EE 0000 A7DA 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DC40 0000 9B12 0000 8FE0 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DC50 0000 B3B2 0000 A9CE 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DC60 0000 BDC6 0000 C474 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DC70 0000 B924 0000 D64A 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DC80 0000 CC22 0000 CCDC 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DC90 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DCA0 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DCB0 0000 C0E2 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DCC0 0000 D8E0 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DCD0 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DCE0 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DCF0 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DD00 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DD10 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DD20 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DD30 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DD40 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DD50 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DD60 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DD70 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DD80 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DD90 0000 0000 0000 CF26 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DDA0 0000 53B0 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DDB0 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DDC0 0000 5A6A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DDC0 0000 5A6A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DDD0                            
0000DDD0                            ; ---------------------------------------------------------------------------
0000DDD0                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DDD0                            ; ---------------------------------------------------------------------------
0000DDD0                            
0000DDD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDD0                            
0000DDD0                            _objectFall: 
0000DDD0                            ObjectFall:
0000DDD0 2428 0008                  		move.l	8(a0),d2
0000DDD4 2628 000C                  		move.l	$C(a0),d3
0000DDD8 3028 0010                  		move.w	$10(a0),d0
0000DDDC 48C0                       		ext.l	d0
0000DDDE E180                       		asl.l	#8,d0
0000DDE0 D480                       		add.l	d0,d2
0000DDE2 3028 0012                  		move.w	$12(a0),d0
0000DDE6 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DDEC 48C0                       		ext.l	d0
0000DDEE E180                       		asl.l	#8,d0
0000DDF0 D680                       		add.l	d0,d3
0000DDF2 2142 0008                  		move.l	d2,8(a0)
0000DDF6 2143 000C                  		move.l	d3,$C(a0)
0000DDFA 4E75                       		rts	
0000DDFC                            ; End of function ObjectFall
0000DDFC                            
0000DDFC                            ; ---------------------------------------------------------------------------
0000DDFC                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DDFC                            ; ---------------------------------------------------------------------------
0000DDFC                            
0000DDFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDFC                            
0000DDFC                            
0000DDFC                            ObjectFallNoJump:
0000DDFC 2428 0008                  		move.l	8(a0),d2
0000DE00 2628 000C                  		move.l	$C(a0),d3
0000DE04 3028 0010                  		move.w	$10(a0),d0
0000DE08 48C0                       		ext.l	d0
0000DE0A E180                       		asl.l	#8,d0
0000DE0C D480                       		add.l	d0,d2
0000DE0E                            ;		cmpi.b	#1,obID(a0)
0000DE0E                            ;		beq.s	ObjectFallSonic
0000DE0E 3028 000C                  		move.w	$C(a0),d0
0000DE12 5868 000C                  		addi.w	#4,$C(a0)	; increase vertical speed
0000DE16                            ;		ext.l	d0
0000DE16                            ;		asl.l	#8,d0
0000DE16                            ;		add.l	d0,d3
0000DE16 2142 0008                  		move.l	d2,$8(a0)
0000DE1A                            ;		move.l	d3,obY(a0)
0000DE1A 4E75                       		rts	
0000DE1C                            
0000DE1C                            ; End of function ObjectFall
0000DE1C                            
0000DE1C                            JumpFallSonic:
0000DE1C 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000DE22                                    
0000DE22 E180                               asl.l    #8,d0                ; Apply X speed
0000DE24 D1A8 0008                          add.l    d0,$8(a0)
0000DE28                                    
0000DE28 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000DE2C 4A41                               tst.w    d1                ; Are we falling?
0000DE2E 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000DE30 4440                               neg.w    d0                ; Make Y movement go up
0000DE32                                    
0000DE32                            .SetYSpeed:
0000DE32 48C0                               ext.l    d0                ; Apply Y speed
0000DE34 E180                               asl.l    #8,d0
0000DE36 D1A8 000C                          add.l    d0,$C(a0)
0000DE3A 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000DE40 4E75                               rts
0000DE42                            
0000DE42                            ; ---------------------------------------------------------------------------
0000DE42                            ; Subroutine translating object	speed to update	object position
0000DE42                            ; ---------------------------------------------------------------------------
0000DE42                            
0000DE42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE42                            
0000DE42                            _objectSetSpeed:
0000DE42                            SpeedToPos:
0000DE42 2428 0008                  		move.l	8(a0),d2
0000DE46 2628 000C                  		move.l	$C(a0),d3
0000DE4A 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DE4E 48C0                       		ext.l	d0
0000DE50 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DE52 D480                       		add.l	d0,d2		; add to x-axis	position
0000DE54 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DE58 48C0                       		ext.l	d0
0000DE5A E180                       		asl.l	#8,d0		; multiply by $100
0000DE5C D680                       		add.l	d0,d3		; add to y-axis	position
0000DE5E 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DE62 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DE66 4E75                       		rts	
0000DE68                            ; End of function SpeedToPos
0000DE68                            
0000DE68                            ; ---------------------------------------------------------------------------
0000DE68                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DE68                            ; ---------------------------------------------------------------------------
0000DE68                            
0000DE68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE68                            
0000DE68                            _objectDraw:
0000DE68                            DisplaySprite:
0000DE68 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DE6C 3028 0018                  		move.w	$18(a0),d0
0000DE70 E248                       		lsr.w	#1,d0
0000DE72 0240 0380                  		andi.w	#$380,d0
0000DE76 D2C0                       		adda.w	d0,a1
0000DE78 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DE7C 6400                       		bcc.s	locret_D620
0000DE7E 5451                       		addq.w	#2,(a1)
0000DE80 D2D1                       		adda.w	(a1),a1
0000DE82 3288                       		move.w	a0,(a1)
0000DE84                            
0000DE84                            locret_D620:
0000DE84 4E75                       		rts	
0000DE86                            ; End of function DisplaySprite
0000DE86                            
0000DE86                            ; ---------------------------------------------------------------------------
0000DE86                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DE86                            ; ---------------------------------------------------------------------------
0000DE86                            
0000DE86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE86                            
0000DE86                            _objectDrawChild: 
0000DE86                            DisplaySprite2:
0000DE86 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DE8A 3029 0018                  		move.w	$18(a1),d0
0000DE8E E248                       		lsr.w	#1,d0
0000DE90 0240 0380                  		andi.w	#$380,d0
0000DE94 D4C0                       		adda.w	d0,a2
0000DE96 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DE9A 6400                       		bcc.s	locret_D63E
0000DE9C 5452                       		addq.w	#2,(a2)
0000DE9E D4D2                       		adda.w	(a2),a2
0000DEA0 3489                       		move.w	a1,(a2)
0000DEA2                            
0000DEA2                            locret_D63E:
0000DEA2 4E75                       		rts	
0000DEA4                            ; End of function DisplaySprite2
0000DEA4                            
0000DEA4                            ; ---------------------------------------------------------------------------
0000DEA4                            ; Subroutine to	delete an object
0000DEA4                            ; ---------------------------------------------------------------------------
0000DEA4                            
0000DEA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEA4                            
0000DEA4                            _objectDelete: 
0000DEA4                            DeleteObject:
0000DEA4 2248                       		movea.l	a0,a1
0000DEA6                            
0000DEA6                            DeleteObject2:
0000DEA6 7200                       		moveq	#0,d1
0000DEA8 700F                       		moveq	#$F,d0
0000DEAA                            
0000DEAA                            loc_D646:
0000DEAA 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DEAC 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DEB0 4E75                       		rts	
0000DEB2                            ; End of function DeleteObject
0000DEB2                            
0000DEB2                            ; ===========================================================================
0000DEB2 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DEB6 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DEBA 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DEBE 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DEC2                            ; ---------------------------------------------------------------------------
0000DEC2                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DEC2                            ; ---------------------------------------------------------------------------
0000DEC2                            
0000DEC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEC2                            
0000DEC2                            DrawObjects:
0000DEC2                            BuildSprites:				; XREF: TitleScreen; et al
0000DEC2 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DEC6 7A00                       		moveq	#0,d5
0000DEC8 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DECC 7E07                       		moveq	#7,d7
0000DECE                            
0000DECE                            loc_D66A:
0000DECE 4A54                       		tst.w	(a4)
0000DED0 6700 0000                  		beq.w	loc_D72E
0000DED4 7C02                       		moveq	#2,d6
0000DED6                            
0000DED6                            loc_D672:
0000DED6 3074 6000                  		movea.w	(a4,d6.w),a0
0000DEDA 4A10                       		tst.b	(a0)
0000DEDC 6700 0000                  		beq.w	loc_D726
0000DEE0 08A8 0007 0001             		bclr	#7,1(a0)
0000DEE6 1028 0001                  		move.b	1(a0),d0
0000DEEA 1800                       		move.b	d0,d4
0000DEEC 0240 000C                  		andi.w	#$C,d0
0000DEF0 6700                       		beq.s	loc_D6DE
0000DEF2 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DEF6 7000                       		moveq	#0,d0
0000DEF8 1028 0019                  		move.b	$19(a0),d0
0000DEFC 3628 0008                  		move.w	8(a0),d3
0000DF00 9651                       		sub.w	(a1),d3
0000DF02 3203                       		move.w	d3,d1
0000DF04 D240                       		add.w	d0,d1
0000DF06 6B00 0000                  		bmi.w	loc_D726
0000DF0A 3203                       		move.w	d3,d1
0000DF0C 9240                       		sub.w	d0,d1
0000DF0E 0C41 0140                  		cmpi.w	#$140,d1
0000DF12 6C00                       		bge.s	loc_D726
0000DF14 0643 0080                  		addi.w	#$80,d3
0000DF18 0804 0004                  		btst	#4,d4
0000DF1C 6700                       		beq.s	loc_D6E8
0000DF1E 7000                       		moveq	#0,d0
0000DF20 1028 0016                  		move.b	$16(a0),d0
0000DF24 3428 000C                  		move.w	$C(a0),d2
0000DF28 9469 0004                  		sub.w	4(a1),d2
0000DF2C 3202                       		move.w	d2,d1
0000DF2E D240                       		add.w	d0,d1
0000DF30 6B00                       		bmi.s	loc_D726
0000DF32 3202                       		move.w	d2,d1
0000DF34 9240                       		sub.w	d0,d1
0000DF36 0C41 00E0                  		cmpi.w	#$E0,d1
0000DF3A 6C00                       		bge.s	loc_D726
0000DF3C 0642 0080                  		addi.w	#$80,d2
0000DF40 6000                       		bra.s	loc_D700
0000DF42                            ; ===========================================================================
0000DF42                            
0000DF42                            loc_D6DE:
0000DF42 3428 000A                  		move.w	$A(a0),d2
0000DF46 3628 0008                  		move.w	8(a0),d3
0000DF4A 6000                       		bra.s	loc_D700
0000DF4C                            ; ===========================================================================
0000DF4C                            
0000DF4C                            loc_D6E8:
0000DF4C 3428 000C                  		move.w	$C(a0),d2
0000DF50 9469 0004                  		sub.w	4(a1),d2
0000DF54 0642 0080                  		addi.w	#$80,d2
0000DF58 0C42 0060                  		cmpi.w	#$60,d2
0000DF5C 6500                       		bcs.s	loc_D726
0000DF5E 0C42 0180                  		cmpi.w	#$180,d2
0000DF62 6400                       		bcc.s	loc_D726
0000DF64                            
0000DF64                            loc_D700:
0000DF64 2268 0004                  		movea.l	4(a0),a1
0000DF68 7200                       		moveq	#0,d1
0000DF6A 0804 0005                  		btst	#5,d4
0000DF6E 6600                       		bne.s	loc_D71C
0000DF70 1228 001A                  		move.b	$1A(a0),d1
0000DF74 D201                       		add.b	d1,d1
0000DF76 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DF7A 1219                       		move.b	(a1)+,d1
0000DF7C 5301                       		subq.b	#1,d1
0000DF7E 6B00                       		bmi.s	loc_D720
0000DF80                            
0000DF80                            loc_D71C:
0000DF80 6100 0000                  		bsr.w	sub_D750
0000DF84                            
0000DF84                            loc_D720:
0000DF84 08E8 0007 0001             		bset	#7,1(a0)
0000DF8A                            
0000DF8A                            loc_D726:
0000DF8A 5446                       		addq.w	#2,d6
0000DF8C 5554                       		subq.w	#2,(a4)
0000DF8E 6600 FF46                  		bne.w	loc_D672
0000DF92                            
0000DF92                            loc_D72E:
0000DF92 49EC 0080                  		lea	$80(a4),a4
0000DF96 51CF FF36                  		dbf	d7,loc_D66A
0000DF9A 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DF9E 0C05 0050                  		cmpi.b	#$50,d5
0000DFA2 6700                       		beq.s	loc_D748
0000DFA4 24BC 0000 0000             		move.l	#0,(a2)
0000DFAA 4E75                       		rts	
0000DFAC                            ; ===========================================================================
0000DFAC                            
0000DFAC                            loc_D748:
0000DFAC 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DFB2 4E75                       		rts	
0000DFB4                            ; End of function BuildSprites
0000DFB4                            
0000DFB4                            
0000DFB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFB4                            
0000DFB4                            
0000DFB4                            sub_D750:				; XREF: BuildSprites
0000DFB4 3668 0002                  		movea.w	2(a0),a3
0000DFB8 0804 0000                  		btst	#0,d4
0000DFBC 6600                       		bne.s	loc_D796
0000DFBE 0804 0001                  		btst	#1,d4
0000DFC2 6600 0000                  		bne.w	loc_D7E4
0000DFC6                            ; End of function sub_D750
0000DFC6                            
0000DFC6                            
0000DFC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFC6                            
0000DFC6                            
0000DFC6                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DFC6 0C05 0050                  		cmpi.b	#$50,d5
0000DFCA 6700                       		beq.s	locret_D794
0000DFCC 1019                       		move.b	(a1)+,d0
0000DFCE 4880                       		ext.w	d0
0000DFD0 D042                       		add.w	d2,d0
0000DFD2 34C0                       		move.w	d0,(a2)+
0000DFD4 14D9                       		move.b	(a1)+,(a2)+
0000DFD6 5205                       		addq.b	#1,d5
0000DFD8 14C5                       		move.b	d5,(a2)+
0000DFDA 1019                       		move.b	(a1)+,d0
0000DFDC E148                       		lsl.w	#8,d0
0000DFDE 1019                       		move.b	(a1)+,d0
0000DFE0 D04B                       		add.w	a3,d0
0000DFE2 34C0                       		move.w	d0,(a2)+
0000DFE4 1019                       		move.b	(a1)+,d0
0000DFE6 4880                       		ext.w	d0
0000DFE8 D043                       		add.w	d3,d0
0000DFEA 0240 01FF                  		andi.w	#$1FF,d0
0000DFEE 6600                       		bne.s	loc_D78E
0000DFF0 5240                       		addq.w	#1,d0
0000DFF2                            
0000DFF2                            loc_D78E:
0000DFF2 34C0                       		move.w	d0,(a2)+
0000DFF4 51C9 FFD0                  		dbf	d1,sub_D762
0000DFF8                            
0000DFF8                            locret_D794:
0000DFF8 4E75                       		rts	
0000DFFA                            ; End of function sub_D762
0000DFFA                            
0000DFFA                            ; ===========================================================================
0000DFFA                            
0000DFFA                            loc_D796:
0000DFFA 0804 0001                  		btst	#1,d4
0000DFFE 6600 0000                  		bne.w	loc_D82A
0000E002                            
0000E002                            loc_D79E:
0000E002 0C05 0050                  		cmpi.b	#$50,d5
0000E006 6700                       		beq.s	locret_D7E2
0000E008 1019                       		move.b	(a1)+,d0
0000E00A 4880                       		ext.w	d0
0000E00C D042                       		add.w	d2,d0
0000E00E 34C0                       		move.w	d0,(a2)+
0000E010 1819                       		move.b	(a1)+,d4
0000E012 14C4                       		move.b	d4,(a2)+
0000E014 5205                       		addq.b	#1,d5
0000E016 14C5                       		move.b	d5,(a2)+
0000E018 1019                       		move.b	(a1)+,d0
0000E01A E148                       		lsl.w	#8,d0
0000E01C 1019                       		move.b	(a1)+,d0
0000E01E D04B                       		add.w	a3,d0
0000E020 0A40 0800                  		eori.w	#$800,d0
0000E024 34C0                       		move.w	d0,(a2)+
0000E026 1019                       		move.b	(a1)+,d0
0000E028 4880                       		ext.w	d0
0000E02A 4440                       		neg.w	d0
0000E02C D804                       		add.b	d4,d4
0000E02E 0244 0018                  		andi.w	#$18,d4
0000E032 5044                       		addq.w	#8,d4
0000E034 9044                       		sub.w	d4,d0
0000E036 D043                       		add.w	d3,d0
0000E038 0240 01FF                  		andi.w	#$1FF,d0
0000E03C 6600                       		bne.s	loc_D7DC
0000E03E 5240                       		addq.w	#1,d0
0000E040                            
0000E040                            loc_D7DC:
0000E040 34C0                       		move.w	d0,(a2)+
0000E042 51C9 FFBE                  		dbf	d1,loc_D79E
0000E046                            
0000E046                            locret_D7E2:
0000E046 4E75                       		rts	
0000E048                            ; ===========================================================================
0000E048                            
0000E048                            loc_D7E4:				; XREF: sub_D750
0000E048 0C05 0050                  		cmpi.b	#$50,d5
0000E04C 6700                       		beq.s	locret_D828
0000E04E 1019                       		move.b	(a1)+,d0
0000E050 1811                       		move.b	(a1),d4
0000E052 4880                       		ext.w	d0
0000E054 4440                       		neg.w	d0
0000E056 E70C                       		lsl.b	#3,d4
0000E058 0244 0018                  		andi.w	#$18,d4
0000E05C 5044                       		addq.w	#8,d4
0000E05E 9044                       		sub.w	d4,d0
0000E060 D042                       		add.w	d2,d0
0000E062 34C0                       		move.w	d0,(a2)+
0000E064 14D9                       		move.b	(a1)+,(a2)+
0000E066 5205                       		addq.b	#1,d5
0000E068 14C5                       		move.b	d5,(a2)+
0000E06A 1019                       		move.b	(a1)+,d0
0000E06C E148                       		lsl.w	#8,d0
0000E06E 1019                       		move.b	(a1)+,d0
0000E070 D04B                       		add.w	a3,d0
0000E072 0A40 1000                  		eori.w	#$1000,d0
0000E076 34C0                       		move.w	d0,(a2)+
0000E078 1019                       		move.b	(a1)+,d0
0000E07A 4880                       		ext.w	d0
0000E07C D043                       		add.w	d3,d0
0000E07E 0240 01FF                  		andi.w	#$1FF,d0
0000E082 6600                       		bne.s	loc_D822
0000E084 5240                       		addq.w	#1,d0
0000E086                            
0000E086                            loc_D822:
0000E086 34C0                       		move.w	d0,(a2)+
0000E088 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E08C                            
0000E08C                            locret_D828:
0000E08C 4E75                       		rts	
0000E08E                            ; ===========================================================================
0000E08E                            
0000E08E                            loc_D82A:
0000E08E 0C05 0050                  		cmpi.b	#$50,d5
0000E092 6700                       		beq.s	locret_D87C
0000E094 1019                       		move.b	(a1)+,d0
0000E096 1811                       		move.b	(a1),d4
0000E098 4880                       		ext.w	d0
0000E09A 4440                       		neg.w	d0
0000E09C E70C                       		lsl.b	#3,d4
0000E09E 0244 0018                  		andi.w	#$18,d4
0000E0A2 5044                       		addq.w	#8,d4
0000E0A4 9044                       		sub.w	d4,d0
0000E0A6 D042                       		add.w	d2,d0
0000E0A8 34C0                       		move.w	d0,(a2)+
0000E0AA 1819                       		move.b	(a1)+,d4
0000E0AC 14C4                       		move.b	d4,(a2)+
0000E0AE 5205                       		addq.b	#1,d5
0000E0B0 14C5                       		move.b	d5,(a2)+
0000E0B2 1019                       		move.b	(a1)+,d0
0000E0B4 E148                       		lsl.w	#8,d0
0000E0B6 1019                       		move.b	(a1)+,d0
0000E0B8 D04B                       		add.w	a3,d0
0000E0BA 0A40 1800                  		eori.w	#$1800,d0
0000E0BE 34C0                       		move.w	d0,(a2)+
0000E0C0 1019                       		move.b	(a1)+,d0
0000E0C2 4880                       		ext.w	d0
0000E0C4 4440                       		neg.w	d0
0000E0C6 D804                       		add.b	d4,d4
0000E0C8 0244 0018                  		andi.w	#$18,d4
0000E0CC 5044                       		addq.w	#8,d4
0000E0CE 9044                       		sub.w	d4,d0
0000E0D0 D043                       		add.w	d3,d0
0000E0D2 0240 01FF                  		andi.w	#$1FF,d0
0000E0D6 6600                       		bne.s	loc_D876
0000E0D8 5240                       		addq.w	#1,d0
0000E0DA                            
0000E0DA                            loc_D876:
0000E0DA 34C0                       		move.w	d0,(a2)+
0000E0DC 51C9 FFB0                  		dbf	d1,loc_D82A
0000E0E0                            
0000E0E0                            locret_D87C:
0000E0E0 4E75                       		rts	
0000E0E2                            ; ---------------------------------------------------------------------------
0000E0E2                            ; Subroutine to	check if an object is on the screen
0000E0E2                            ; ---------------------------------------------------------------------------
0000E0E2                            
0000E0E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0E2                            
0000E0E2                            
0000E0E2                            ChkObjOnScreen:
0000E0E2 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E0E6 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E0EA 6B00                       		bmi.s	NotOnScreen
0000E0EC 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E0F0 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E0F2                            
0000E0F2 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E0F6 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E0FA 6B00                       		bmi.s	NotOnScreen
0000E0FC 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E100 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E102                            
0000E102 7000                       		moveq	#0,d0		; set flag to 0
0000E104 4E75                       		rts	
0000E106                            ; ===========================================================================
0000E106                            
0000E106                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E106 7001                       		moveq	#1,d0		; set flag to 1
0000E108 4E75                       		rts	
0000E10A                            ; End of function ChkObjOnScreen
0000E10A                            
0000E10A                            
0000E10A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E10A                            
0000E10A                            
0000E10A                            ChkObjOnScreen2:
0000E10A 7200                       		moveq	#0,d1
0000E10C 1228 0019                  		move.b	$19(a0),d1
0000E110 3028 0008                  		move.w	8(a0),d0
0000E114 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E118 D041                       		add.w	d1,d0
0000E11A 6B00                       		bmi.s	NotOnScreen2
0000E11C D241                       		add.w	d1,d1
0000E11E 9041                       		sub.w	d1,d0
0000E120 0C40 0140                  		cmpi.w	#320,d0
0000E124 6C00                       		bge.s	NotOnScreen2
0000E126                            
0000E126 3228 000C                  		move.w	$C(a0),d1
0000E12A 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E12E 6B00                       		bmi.s	NotOnScreen2
0000E130 0C41 00E0                  		cmpi.w	#224,d1
0000E134 6C00                       		bge.s	NotOnScreen2
0000E136                            
0000E136 7000                       		moveq	#0,d0
0000E138 4E75                       		rts	
0000E13A                            ; ===========================================================================
0000E13A                            
0000E13A                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E13A 7001                       		moveq	#1,d0
0000E13C 4E75                       		rts	
0000E13E                            ; End of function ChkObjOnScreen2
0000E13E                            
0000E13E                            ; ---------------------------------------------------------------------------
0000E13E                            ; Subroutine to	load a level's objects
0000E13E                            ; ---------------------------------------------------------------------------
0000E13E                            
0000E13E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E13E                            
0000E13E                            
0000E13E                            ObjPosLoad:				; XREF: Level; et al
0000E13E 7000                       		moveq	#0,d0
0000E140 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E144 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E148 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E14C                            ; End of function ObjPosLoad
0000E14C                            
0000E14C                            ; ===========================================================================
0000E14C 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E14E 0000                       		dc.w OPL_Next-OPL_Index
0000E150                            ; ===========================================================================
0000E150                            
0000E150                            OPL_Main:				; XREF: OPL_Index
0000E150 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E154 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E158 ED08                       		lsl.b	#6,d0
0000E15A E848                       		lsr.w	#4,d0
0000E15C 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E162 2248                       		movea.l	a0,a1
0000E164 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E168 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E16C 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E170 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E174 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E178 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E17C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E180 34FC 0101                  		move.w	#$101,(a2)+
0000E184 303C 005E                  		move.w	#$5E,d0
0000E188                            
0000E188                            OPL_ClrList:
0000E188 429A                       		clr.l	(a2)+
0000E18A 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E18E                            
0000E18E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E192 7400                       		moveq	#0,d2
0000E194 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E198 0446 0080                  		subi.w	#$80,d6
0000E19C 6400                       		bcc.s	loc_D93C
0000E19E 7C00                       		moveq	#0,d6
0000E1A0                            
0000E1A0                            loc_D93C:
0000E1A0 0246 FF80                  		andi.w	#$FF80,d6
0000E1A4 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E1A8                            
0000E1A8                            loc_D944:
0000E1A8 BC50                       		cmp.w	(a0),d6
0000E1AA 6300                       		bls.s	loc_D956
0000E1AC 4A28 0004                  		tst.b	4(a0)
0000E1B0 6A00                       		bpl.s	loc_D952
0000E1B2 1412                       		move.b	(a2),d2
0000E1B4 5212                       		addq.b	#1,(a2)
0000E1B6                            
0000E1B6                            loc_D952:
0000E1B6 5C48                       		addq.w	#6,a0
0000E1B8 60EE                       		bra.s	loc_D944
0000E1BA                            ; ===========================================================================
0000E1BA                            
0000E1BA                            loc_D956:
0000E1BA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E1BE 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E1C2 0446 0080                  		subi.w	#$80,d6
0000E1C6 6500                       		bcs.s	loc_D976
0000E1C8                            
0000E1C8                            loc_D964:
0000E1C8 BC50                       		cmp.w	(a0),d6
0000E1CA 6300                       		bls.s	loc_D976
0000E1CC 4A28 0004                  		tst.b	4(a0)
0000E1D0 6A00                       		bpl.s	loc_D972
0000E1D2 522A 0001                  		addq.b	#1,1(a2)
0000E1D6                            
0000E1D6                            loc_D972:
0000E1D6 5C48                       		addq.w	#6,a0
0000E1D8 60EE                       		bra.s	loc_D964
0000E1DA                            ; ===========================================================================
0000E1DA                            
0000E1DA                            loc_D976:
0000E1DA 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E1DE 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E1E4                            
0000E1E4                            OPL_Next:				; XREF: OPL_Index
0000E1E4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E1E8 7400                       		moveq	#0,d2
0000E1EA 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E1EE 0246 FF80                  		andi.w	#$FF80,d6
0000E1F2 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E1F6 6700 0000                  		beq.w	locret_DA3A
0000E1FA 6C00                       		bge.s	loc_D9F6
0000E1FC 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E200 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E204 0446 0080                  		subi.w	#$80,d6
0000E208 6500                       		bcs.s	loc_D9D2
0000E20A                            
0000E20A                            loc_D9A6:
0000E20A BC68 FFFA                  		cmp.w	-6(a0),d6
0000E20E 6C00                       		bge.s	loc_D9D2
0000E210 5D48                       		subq.w	#6,a0
0000E212 4A28 0004                  		tst.b	4(a0)
0000E216 6A00                       		bpl.s	loc_D9BC
0000E218 532A 0001                  		subq.b	#1,1(a2)
0000E21C 142A 0001                  		move.b	1(a2),d2
0000E220                            
0000E220                            loc_D9BC:
0000E220 6100 0000                  		bsr.w	loc_DA3C
0000E224 6600                       		bne.s	loc_D9C6
0000E226 5D48                       		subq.w	#6,a0
0000E228 60E0                       		bra.s	loc_D9A6
0000E22A                            ; ===========================================================================
0000E22A                            
0000E22A                            loc_D9C6:
0000E22A 4A28 0004                  		tst.b	4(a0)
0000E22E 6A00                       		bpl.s	loc_D9D0
0000E230 522A 0001                  		addq.b	#1,1(a2)
0000E234                            
0000E234                            loc_D9D0:
0000E234 5C48                       		addq.w	#6,a0
0000E236                            
0000E236                            loc_D9D2:
0000E236 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E23A 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E23E 0646 0300                  		addi.w	#$300,d6
0000E242                            
0000E242                            loc_D9DE:
0000E242 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E246 6E00                       		bgt.s	loc_D9F0
0000E248 4A28 FFFE                  		tst.b	-2(a0)
0000E24C 6A00                       		bpl.s	loc_D9EC
0000E24E 5312                       		subq.b	#1,(a2)
0000E250                            
0000E250                            loc_D9EC:
0000E250 5D48                       		subq.w	#6,a0
0000E252 60EE                       		bra.s	loc_D9DE
0000E254                            ; ===========================================================================
0000E254                            
0000E254                            loc_D9F0:
0000E254 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E258 4E75                       		rts	
0000E25A                            ; ===========================================================================
0000E25A                            
0000E25A                            loc_D9F6:
0000E25A 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E25E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E262 0646 0280                  		addi.w	#$280,d6
0000E266                            
0000E266                            loc_DA02:
0000E266 BC50                       		cmp.w	(a0),d6
0000E268 6300                       		bls.s	loc_DA16
0000E26A 4A28 0004                  		tst.b	4(a0)
0000E26E 6A00                       		bpl.s	loc_DA10
0000E270 1412                       		move.b	(a2),d2
0000E272 5212                       		addq.b	#1,(a2)
0000E274                            
0000E274                            loc_DA10:
0000E274 6100 0000                  		bsr.w	loc_DA3C
0000E278 67EC                       		beq.s	loc_DA02
0000E27A                            
0000E27A                            loc_DA16:
0000E27A 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E27E 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E282 0446 0300                  		subi.w	#$300,d6
0000E286 6500                       		bcs.s	loc_DA36
0000E288                            
0000E288                            loc_DA24:
0000E288 BC50                       		cmp.w	(a0),d6
0000E28A 6300                       		bls.s	loc_DA36
0000E28C 4A28 0004                  		tst.b	4(a0)
0000E290 6A00                       		bpl.s	loc_DA32
0000E292 522A 0001                  		addq.b	#1,1(a2)
0000E296                            
0000E296                            loc_DA32:
0000E296 5C48                       		addq.w	#6,a0
0000E298 60EE                       		bra.s	loc_DA24
0000E29A                            ; ===========================================================================
0000E29A                            
0000E29A                            loc_DA36:
0000E29A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E29E                            
0000E29E                            locret_DA3A:
0000E29E 4E75                       		rts	
0000E2A0                            ; ===========================================================================
0000E2A0                            
0000E2A0                            loc_DA3C:
0000E2A0 4A28 0004                  		tst.b	4(a0)
0000E2A4 6A00                       		bpl.s	OPL_MakeItem
0000E2A6 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E2AC 6700                       		beq.s	OPL_MakeItem
0000E2AE 5C48                       		addq.w	#6,a0
0000E2B0 7000                       		moveq	#0,d0
0000E2B2 4E75                       		rts	
0000E2B4                            ; ===========================================================================
0000E2B4                            
0000E2B4                            OPL_MakeItem:
0000E2B4 6100 0000                  		bsr.w	SingleObjLoad
0000E2B8 6600                       		bne.s	locret_DA8A
0000E2BA 3358 0008                  		move.w	(a0)+,8(a1)
0000E2BE 3018                       		move.w	(a0)+,d0
0000E2C0 3200                       		move.w	d0,d1
0000E2C2 0240 0FFF                  		andi.w	#$FFF,d0
0000E2C6 3340 000C                  		move.w	d0,$C(a1)
0000E2CA E559                       		rol.w	#2,d1
0000E2CC 0201 0003                  		andi.b	#3,d1
0000E2D0 1341 0001                  		move.b	d1,1(a1)
0000E2D4 1341 0022                  		move.b	d1,$22(a1)
0000E2D8 1018                       		move.b	(a0)+,d0
0000E2DA 6A00                       		bpl.s	loc_DA80
0000E2DC 0200 007F                  		andi.b	#$7F,d0
0000E2E0 1342 0023                  		move.b	d2,$23(a1)
0000E2E4                            
0000E2E4                            loc_DA80:
0000E2E4 1280                       		move.b	d0,0(a1)
0000E2E6 1358 0028                  		move.b	(a0)+,$28(a1)
0000E2EA 7000                       		moveq	#0,d0
0000E2EC                            
0000E2EC                            locret_DA8A:
0000E2EC 4E75                       		rts	
0000E2EE                            ; ---------------------------------------------------------------------------
0000E2EE                            ; Single object	loading	subroutine
0000E2EE                            ; ---------------------------------------------------------------------------
0000E2EE                            
0000E2EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2EE                            
0000E2EE                            
0000E2EE                            SingleObjLoad:
0000E2EE 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E2F2 303C 005F                  		move.w	#$5F,d0
0000E2F6                            
0000E2F6                            loc_DA94:
0000E2F6 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E2F8 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E2FA 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E2FE 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E302                            
0000E302                            locret_DAA0:
0000E302 4E75                       		rts	
0000E304                            ; End of function SingleObjLoad
0000E304                            
0000E304                            
0000E304                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E304                            
0000E304                            
0000E304                            SingleObjLoad2:
0000E304 2248                       		movea.l	a0,a1
0000E306 303C F000                  		move.w	#-$1000,d0
0000E30A 9048                       		sub.w	a0,d0
0000E30C EC48                       		lsr.w	#6,d0
0000E30E 5340                       		subq.w	#1,d0
0000E310 6500                       		bcs.s	locret_DABC
0000E312                            
0000E312                            loc_DAB0:
0000E312 4A11                       		tst.b	(a1)
0000E314 6700                       		beq.s	locret_DABC
0000E316 43E9 0040                  		lea	$40(a1),a1
0000E31A 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E31E                            
0000E31E                            locret_DABC:
0000E31E 4E75                       		rts	
0000E320                            ; End of function SingleObjLoad2
0000E320                            
0000E320                            ; ===========================================================================
0000E320                            ; ---------------------------------------------------------------------------
0000E320                            ; Object 41 - springs
0000E320                            ; ---------------------------------------------------------------------------
0000E320                            
0000E320                            Obj41:					; XREF: Obj_Index
0000E320 7000                       		moveq	#0,d0
0000E322 1028 0024                  		move.b	$24(a0),d0
0000E326 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E32A 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E32E 6100 FB38                  		bsr.w	DisplaySprite
0000E332 3028 0008                  		move.w	8(a0),d0
0000E336 0240 FF80                  		andi.w	#$FF80,d0
0000E33A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E33E 0441 0080                  		subi.w	#$80,d1
0000E342 0241 FF80                  		andi.w	#$FF80,d1
0000E346 9041                       		sub.w	d1,d0
0000E348 0C40 0280                  		cmpi.w	#$280,d0
0000E34C 6200 FB56                  		bhi.w	DeleteObject
0000E350 4E75                       		rts	
0000E352                            ; ===========================================================================
0000E352 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E354 0000                       		dc.w Obj41_Up-Obj41_Index
0000E356 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E358 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E35A 0000                       		dc.w Obj41_LR-Obj41_Index
0000E35C 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E35E 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E360 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E362 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E364 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E366                            
0000E366 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E368 F600                       		dc.w -$A00		; power	of yellow spring
0000E36A                            ; ===========================================================================
0000E36A                            
0000E36A                            Obj41_Main:				; XREF: Obj41_Index
0000E36A 5428 0024                  		addq.b	#2,$24(a0)
0000E36E 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E376 317C 0523 0002             		move.w	#$523,2(a0)
0000E37C 0028 0004 0001             		ori.b	#4,1(a0)
0000E382 117C 0010 0019             		move.b	#$10,$19(a0)
0000E388 117C 0004 0018             		move.b	#4,$18(a0)
0000E38E 1028 0028                  		move.b	$28(a0),d0
0000E392 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E396 6700                       		beq.s	loc_DB54	; if not, branch
0000E398 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E39E 117C 0001 001C             		move.b	#1,$1C(a0)
0000E3A4 117C 0003 001A             		move.b	#3,$1A(a0)
0000E3AA 317C 0533 0002             		move.w	#$533,2(a0)
0000E3B0 117C 0008 0019             		move.b	#8,$19(a0)
0000E3B6                            
0000E3B6                            loc_DB54:
0000E3B6 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E3BA 6700                       		beq.s	loc_DB66	; if not, branch
0000E3BC 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E3C2 08E8 0001 0022             		bset	#1,$22(a0)
0000E3C8                            
0000E3C8                            loc_DB66:
0000E3C8 0800 0001                  		btst	#1,d0
0000E3CC 6700                       		beq.s	loc_DB72
0000E3CE 08E8 0005 0002             		bset	#5,2(a0)
0000E3D4                            
0000E3D4                            loc_DB72:
0000E3D4 0240 000F                  		andi.w	#$F,d0
0000E3D8 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E3DE 4E75                       		rts	
0000E3E0                            ; ===========================================================================
0000E3E0                            
0000E3E0                            Obj41_Up:				; XREF: Obj41_Index
0000E3E0 323C 001B                  		move.w	#$1B,d1
0000E3E4 343C 0008                  		move.w	#8,d2
0000E3E8 363C 0010                  		move.w	#$10,d3
0000E3EC 3828 0008                  		move.w	8(a0),d4
0000E3F0 6100 0000                  		bsr.w	SolidObject
0000E3F4 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E3F8 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E3FA 4E75                       		rts	
0000E3FC                            ; ===========================================================================
0000E3FC                            
0000E3FC                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E3FC 5428 0024                  		addq.b	#2,$24(a0)
0000E400 5069 000C                  		addq.w	#8,$C(a1)
0000E404 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E40A 08E9 0001 0022             		bset	#1,$22(a1)
0000E410 08A9 0003 0022             		bclr	#3,$22(a1)
0000E416 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E41C 137C 0002 0024             		move.b	#2,$24(a1)
0000E422 08A8 0003 0022             		bclr	#3,$22(a0)
0000E428 4228 0025                  		clr.b	$25(a0)
0000E42C 303C 00CC                  		move.w	#$CC,d0
0000E430 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play spring sound
0000E436                            
0000E436                            Obj41_AniUp:				; XREF: Obj41_Index
0000E436 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E43C 6000 CA78                  		bra.w	AnimateSprite
0000E440                            ; ===========================================================================
0000E440                            
0000E440                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E440 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E446 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E44A 4E75                       		rts	
0000E44C                            ; ===========================================================================
0000E44C                            
0000E44C                            Obj41_LR:				; XREF: Obj41_Index
0000E44C 323C 0013                  		move.w	#$13,d1
0000E450 343C 000E                  		move.w	#$E,d2
0000E454 363C 000F                  		move.w	#$F,d3
0000E458 3828 0008                  		move.w	8(a0),d4
0000E45C 6100 0000                  		bsr.w	SolidObject
0000E460 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E466 6600                       		bne.s	loc_DC0C
0000E468 117C 0008 0024             		move.b	#8,$24(a0)
0000E46E                            
0000E46E                            loc_DC0C:
0000E46E 0828 0005 0022             		btst	#5,$22(a0)
0000E474 6600                       		bne.s	Obj41_BounceLR
0000E476 4E75                       		rts	
0000E478                            ; ===========================================================================
0000E478                            
0000E478                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E478 5428 0024                  		addq.b	#2,$24(a0)
0000E47C 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E482 5069 0008                  		addq.w	#8,8(a1)
0000E486 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E48C 6600                       		bne.s	loc_DC36	; if yes, branch
0000E48E 0469 0010 0008             		subi.w	#$10,8(a1)
0000E494 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E498                            
0000E498                            loc_DC36:
0000E498 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E49E 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E4A4 0869 0000 0022             		bchg	#0,$22(a1)
0000E4AA 0829 0002 0022             		btst	#2,$22(a1)
0000E4B0 6600                       		bne.s	loc_DC56
0000E4B2 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E4B8                            
0000E4B8                            loc_DC56:
0000E4B8 08A8 0005 0022             		bclr	#5,$22(a0)
0000E4BE 08A9 0005 0022             		bclr	#5,$22(a1)
0000E4C4 303C 00CC                  		move.w	#$CC,d0
0000E4C8 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play spring sound
0000E4CE                            
0000E4CE                            Obj41_AniLR:				; XREF: Obj41_Index
0000E4CE 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E4D4 6000 C9E0                  		bra.w	AnimateSprite
0000E4D8                            ; ===========================================================================
0000E4D8                            
0000E4D8                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E4D8 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E4DE 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E4E2 4E75                       		rts	
0000E4E4                            ; ===========================================================================
0000E4E4                            
0000E4E4                            Obj41_Dwn:				; XREF: Obj41_Index
0000E4E4 323C 001B                  		move.w	#$1B,d1
0000E4E8 343C 0008                  		move.w	#8,d2
0000E4EC 363C 0010                  		move.w	#$10,d3
0000E4F0 3828 0008                  		move.w	8(a0),d4
0000E4F4 6100 0000                  		bsr.w	SolidObject
0000E4F8 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E4FE 6600                       		bne.s	loc_DCA4
0000E500 117C 000E 0024             		move.b	#$E,$24(a0)
0000E506                            
0000E506                            loc_DCA4:
0000E506 4A28 0025                  		tst.b	$25(a0)
0000E50A 6600                       		bne.s	locret_DCAE
0000E50C 4A44                       		tst.w	d4
0000E50E 6B00                       		bmi.s	Obj41_BounceDwn
0000E510                            
0000E510                            locret_DCAE:
0000E510 4E75                       		rts	
0000E512                            ; ===========================================================================
0000E512                            
0000E512                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E512 5428 0024                  		addq.b	#2,$24(a0)
0000E516 5169 000C                  		subq.w	#8,$C(a1)
0000E51A 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E520 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E524 08E9 0001 0022             		bset	#1,$22(a1)
0000E52A 08A9 0003 0022             		bclr	#3,$22(a1)
0000E530 137C 0002 0024             		move.b	#2,$24(a1)
0000E536 08A8 0003 0022             		bclr	#3,$22(a0)
0000E53C 4228 0025                  		clr.b	$25(a0)
0000E540 303C 00CC                  		move.w	#$CC,d0
0000E544 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play spring sound
0000E54A                            
0000E54A                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E54A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E550 6000 C964                  		bra.w	AnimateSprite
0000E554                            ; ===========================================================================
0000E554                            
0000E554                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E554 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E55A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E55E 4E75                       		rts	
0000E560                            ; ===========================================================================
0000E560                            Ani_obj41:
0000E560                            	include "_anim\obj41.asm"
0000E560                            ; ---------------------------------------------------------------------------
0000E560                            ; Animation script - springs
0000E560                            ; ---------------------------------------------------------------------------
0000E560 0000                       		dc.w byte_DD02-Ani_obj41
0000E562 0000                       		dc.w byte_DD0E-Ani_obj41
0000E564 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E570 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E57C                            		even
0000E57C                            		even
0000E57C                            
0000E57C                            ; ---------------------------------------------------------------------------
0000E57C                            ; Sprite mappings - springs
0000E57C                            ; ---------------------------------------------------------------------------
0000E57C                            Map_obj41:
0000E57C                            	include "_maps\obj41.asm"
0000E57C                            ; ---------------------------------------------------------------------------
0000E57C                            ; Sprite mappings - springs
0000E57C                            ; ---------------------------------------------------------------------------
0000E57C 0000                       		dc.w byte_DD26-Map_obj41
0000E57E 0000                       		dc.w byte_DD31-Map_obj41
0000E580 0000                       		dc.w byte_DD37-Map_obj41
0000E582 0000                       		dc.w byte_DD47-Map_obj41
0000E584 0000                       		dc.w byte_DD4D-Map_obj41
0000E586 0000                       		dc.w byte_DD53-Map_obj41
0000E588 02                         byte_DD26:	dc.b 2
0000E589 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E58E 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E593 01                         byte_DD31:	dc.b 1
0000E594 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E599 03                         byte_DD37:	dc.b 3
0000E59A E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E59F F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E5A4 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E5A9 01                         byte_DD47:	dc.b 1
0000E5AA F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E5AF 01                         byte_DD4D:	dc.b 1
0000E5B0 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E5B5 04                         byte_DD53:	dc.b 4
0000E5B6 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E5BB F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E5C0 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E5C5 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E5CA                            		even
0000E5CA                            		even
0000E5CA                            
0000E5CA                            ; ===========================================================================
0000E5CA                            ; ---------------------------------------------------------------------------
0000E5CA                            ; Object 42 - Newtron enemy (GHZ)
0000E5CA                            ; ---------------------------------------------------------------------------
0000E5CA                            
0000E5CA                            Obj42:					; XREF: Obj_Index
0000E5CA 7000                       		moveq	#0,d0
0000E5CC 1028 0024                  		move.b	$24(a0),d0
0000E5D0 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E5D4 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E5D8                            ; ===========================================================================
0000E5D8 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E5DA 0000                       		dc.w Obj42_Action-Obj42_Index
0000E5DC 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E5DE                            ; ===========================================================================
0000E5DE                            
0000E5DE                            Obj42_Main:				; XREF: Obj42_Index
0000E5DE 5428 0024                  		addq.b	#2,$24(a0)
0000E5E2 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E5EA 317C 049B 0002             		move.w	#$49B,2(a0)
0000E5F0 117C 0004 0001             		move.b	#4,1(a0)
0000E5F6 117C 0004 0018             		move.b	#4,$18(a0)
0000E5FC 117C 0014 0019             		move.b	#$14,$19(a0)
0000E602 117C 0010 0016             		move.b	#$10,$16(a0)
0000E608 117C 0008 0017             		move.b	#8,$17(a0)
0000E60E                            
0000E60E                            Obj42_Action:				; XREF: Obj42_Index
0000E60E 7000                       		moveq	#0,d0
0000E610 1028 0025                  		move.b	$25(a0),d0
0000E614 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E618 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E61C 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E622 6100 C892                  		bsr.w	AnimateSprite
0000E626 6000 0000                  		bra.w	MarkObjGone
0000E62A                            ; ===========================================================================
0000E62A 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E62C 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E62E 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E630 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E632 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E634                            ; ===========================================================================
0000E634                            
0000E634                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E634 08E8 0000 0022             		bset	#0,$22(a0)
0000E63A 3038 D008                  		move.w	($FFFFD008).w,d0
0000E63E 9068 0008                  		sub.w	8(a0),d0
0000E642 6400                       		bcc.s	loc_DDEA
0000E644 4440                       		neg.w	d0
0000E646 08A8 0000 0022             		bclr	#0,$22(a0)
0000E64C                            
0000E64C                            loc_DDEA:
0000E64C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E650 6400                       		bcc.s	locret_DE12	; if not, branch
0000E652 5428 0025                  		addq.b	#2,$25(a0)
0000E656 117C 0001 001C             		move.b	#1,$1C(a0)
0000E65C 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E660 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E662 317C 249B 0002             		move.w	#$249B,2(a0)
0000E668 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E66E 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E674                            
0000E674                            locret_DE12:
0000E674 4E75                       		rts	
0000E676                            ; ===========================================================================
0000E676                            
0000E676                            Obj42_Type00:				; XREF: Obj42_Index2
0000E676 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E67C 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E67E 08E8 0000 0022             		bset	#0,$22(a0)
0000E684 3038 D008                  		move.w	($FFFFD008).w,d0
0000E688 9068 0008                  		sub.w	8(a0),d0
0000E68C 6400                       		bcc.s	locret_DE32
0000E68E 08A8 0000 0022             		bclr	#0,$22(a0)
0000E694                            
0000E694                            locret_DE32:
0000E694 4E75                       		rts	
0000E696                            ; ===========================================================================
0000E696                            
0000E696                            Obj42_Fall:				; XREF: Obj42_Type00
0000E696 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E69C 6600                       		bne.s	loc_DE42
0000E69E 117C 000C 0020             		move.b	#$C,$20(a0)
0000E6A4                            
0000E6A4                            loc_DE42:
0000E6A4 6100 F72A                  		bsr.w	ObjectFall
0000E6A8 6100 0000                  		bsr.w	ObjHitFloor
0000E6AC 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E6AE 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E6B0 D368 000C                  		add.w	d1,$C(a0)
0000E6B4 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E6BA 5428 0025                  		addq.b	#2,$25(a0)
0000E6BE 117C 0002 001C             		move.b	#2,$1C(a0)
0000E6C4 0828 0005 0002             		btst	#5,2(a0)
0000E6CA 6700                       		beq.s	Obj42_Move
0000E6CC 5228 001C                  		addq.b	#1,$1C(a0)
0000E6D0                            
0000E6D0                            Obj42_Move:
0000E6D0 117C 000D 0020             		move.b	#$D,$20(a0)
0000E6D6 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E6DC 0828 0000 0022             		btst	#0,$22(a0)
0000E6E2 6600                       		bne.s	locret_DE86
0000E6E4 4468 0010                  		neg.w	$10(a0)
0000E6E8                            
0000E6E8                            locret_DE86:
0000E6E8 4E75                       		rts	
0000E6EA                            ; ===========================================================================
0000E6EA                            
0000E6EA                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E6EA 6100 F756                  		bsr.w	SpeedToPos
0000E6EE 6100 0000                  		bsr.w	ObjHitFloor
0000E6F2 0C41 FFF8                  		cmpi.w	#-8,d1
0000E6F6 6D00                       		blt.s	loc_DEA2
0000E6F8 0C41 000C                  		cmpi.w	#$C,d1
0000E6FC 6C00                       		bge.s	loc_DEA2
0000E6FE D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E702 4E75                       		rts	
0000E704                            ; ===========================================================================
0000E704                            
0000E704                            loc_DEA2:
0000E704 5428 0025                  		addq.b	#2,$25(a0)
0000E708 4E75                       		rts	
0000E70A                            ; ===========================================================================
0000E70A                            
0000E70A                            Obj42_Speed:				; XREF: Obj42_Index2
0000E70A 6100 F736                  		bsr.w	SpeedToPos
0000E70E 4E75                       		rts	
0000E710                            ; ===========================================================================
0000E710                            
0000E710                            Obj42_Type01:				; XREF: Obj42_Index2
0000E710 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E716 6600                       		bne.s	Obj42_FireMissile
0000E718 117C 000C 0020             		move.b	#$C,$20(a0)
0000E71E                            
0000E71E                            Obj42_FireMissile:
0000E71E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E724 6600                       		bne.s	locret_DF14
0000E726 4A28 0032                  		tst.b	$32(a0)
0000E72A 6600                       		bne.s	locret_DF14
0000E72C 117C 0001 0032             		move.b	#1,$32(a0)
0000E732 6100 FBBA                  		bsr.w	SingleObjLoad
0000E736 6600                       		bne.s	locret_DF14
0000E738 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E73C 3368 0008 0008             		move.w	8(a0),8(a1)
0000E742 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E748 5169 000C                  		subq.w	#8,$C(a1)
0000E74C 337C 0200 0010             		move.w	#$200,$10(a1)
0000E752 303C 0014                  		move.w	#$14,d0
0000E756 0828 0000 0022             		btst	#0,$22(a0)
0000E75C 6600                       		bne.s	loc_DF04
0000E75E 4440                       		neg.w	d0
0000E760 4469 0010                  		neg.w	$10(a1)
0000E764                            
0000E764                            loc_DF04:
0000E764 D169 0008                  		add.w	d0,8(a1)
0000E768 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E76E 137C 0001 0028             		move.b	#1,$28(a1)
0000E774                            
0000E774                            locret_DF14:
0000E774 4E75                       		rts	
0000E776                            ; ===========================================================================
0000E776                            
0000E776                            Obj42_Delete:				; XREF: Obj42_Index
0000E776 6000 F72C                  		bra.w	DeleteObject
0000E77A                            ; ===========================================================================
0000E77A                            Ani_obj42:
0000E77A                            	include "_anim\obj42.asm"
0000E77A                            ; ---------------------------------------------------------------------------
0000E77A                            ; Animation script - Newtron enemy
0000E77A                            ; ---------------------------------------------------------------------------
0000E77A 0000                       		dc.w byte_DF24-Ani_obj42
0000E77C 0000                       		dc.w byte_DF28-Ani_obj42
0000E77E 0000                       		dc.w byte_DF30-Ani_obj42
0000E780 0000                       		dc.w byte_DF34-Ani_obj42
0000E782 0000                       		dc.w byte_DF38-Ani_obj42
0000E784 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E788 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E790 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E794 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E798 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E7A2                            		even
0000E7A2                            		even
0000E7A2                            
0000E7A2                            ; ---------------------------------------------------------------------------
0000E7A2                            ; Sprite mappings - Newtron enemy (GHZ)
0000E7A2                            ; ---------------------------------------------------------------------------
0000E7A2                            Map_obj42:
0000E7A2                            	include "_maps\obj42.asm"
0000E7A2                            ; ---------------------------------------------------------------------------
0000E7A2                            ; Sprite mappings - Newtron enemy (GHZ)
0000E7A2                            ; ---------------------------------------------------------------------------
0000E7A2 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E7A6 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E7AA 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E7AE 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E7B2 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E7B6 0000                       		dc.w byte_DFF8-Map_obj42
0000E7B8 03                         byte_DF58:	dc.b 3
0000E7B9 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E7BE F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E7C3 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E7C8 03                         byte_DF68:	dc.b 3
0000E7C9 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E7CE EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E7D3 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E7D8 03                         byte_DF78:	dc.b 3
0000E7D9 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E7DE EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E7E3 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E7E8 04                         byte_DF88:	dc.b 4
0000E7E9 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E7EE EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E7F3 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E7F8 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E7FD 03                         byte_DF9D:	dc.b 3
0000E7FE F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E803 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E808 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E80D 02                         byte_DFAD:	dc.b 2
0000E80E F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E813 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E818 03                         byte_DFB8:	dc.b 3
0000E819 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E81E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E823 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E828 03                         byte_DFC8:	dc.b 3
0000E829 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E82E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E833 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E838 03                         byte_DFD8:	dc.b 3
0000E839 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E83E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E843 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E848 03                         byte_DFE8:	dc.b 3
0000E849 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E84E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E853 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E858 00                         byte_DFF8:	dc.b 0
0000E85A 00                         		even
0000E85A 00                         		even
0000E85A                            
0000E85A                            ; ===========================================================================
0000E85A                            ; ---------------------------------------------------------------------------
0000E85A                            ; Object 43 - Roller enemy (SYZ)
0000E85A                            ; ---------------------------------------------------------------------------
0000E85A                            
0000E85A                            Obj43:					; XREF: Obj_Index
0000E85A 7000                       		moveq	#0,d0
0000E85C 1028 0024                  		move.b	$24(a0),d0
0000E860 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E864 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E868                            ; ===========================================================================
0000E868 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E86A 0000                       		dc.w Obj43_Action-Obj43_Index
0000E86C                            ; ===========================================================================
0000E86C                            
0000E86C                            Obj43_Main:				; XREF: Obj43_Index
0000E86C 117C 000E 0016             		move.b	#$E,$16(a0)
0000E872 117C 0008 0017             		move.b	#8,$17(a0)
0000E878 6100 F556                  		bsr.w	ObjectFall
0000E87C 6100 0000                  		bsr.w	ObjHitFloor
0000E880 4A41                       		tst.w	d1
0000E882 6A00                       		bpl.s	locret_E052
0000E884 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E888 317C 0000 0012             		move.w	#0,$12(a0)
0000E88E 5428 0024                  		addq.b	#2,$24(a0)
0000E892 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E89A 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E8A0 117C 0004 0001             		move.b	#4,1(a0)
0000E8A6 117C 0004 0018             		move.b	#4,$18(a0)
0000E8AC 117C 0010 0019             		move.b	#$10,$19(a0)
0000E8B2                            
0000E8B2                            locret_E052:
0000E8B2 4E75                       		rts	
0000E8B4                            ; ===========================================================================
0000E8B4                            
0000E8B4                            Obj43_Action:				; XREF: Obj43_Index
0000E8B4 7000                       		moveq	#0,d0
0000E8B6 1028 0025                  		move.b	$25(a0),d0
0000E8BA 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E8BE 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E8C2 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E8C8 6100 C5EC                  		bsr.w	AnimateSprite
0000E8CC 3028 0008                  		move.w	8(a0),d0
0000E8D0 0240 FF80                  		andi.w	#$FF80,d0
0000E8D4 3238 F700                  		move.w	($FFFFF700).w,d1
0000E8D8 0441 0080                  		subi.w	#$80,d1
0000E8DC 0241 FF80                  		andi.w	#$FF80,d1
0000E8E0 9041                       		sub.w	d1,d0
0000E8E2 0C40 0280                  		cmpi.w	#$280,d0
0000E8E6 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E8EA 6000 F57C                  		bra.w	DisplaySprite
0000E8EE                            ; ===========================================================================
0000E8EE                            
0000E8EE                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E8EE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E8F2 7000                       		moveq	#0,d0
0000E8F4 1028 0023                  		move.b	$23(a0),d0
0000E8F8 6700                       		beq.s	Obj43_Delete
0000E8FA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E900                            
0000E900                            Obj43_Delete:
0000E900 6000 F5A2                  		bra.w	DeleteObject
0000E904                            ; ===========================================================================
0000E904 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E906 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E908 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E90A 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E90C                            ; ===========================================================================
0000E90C                            
0000E90C                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E90C 3038 D008                  		move.w	($FFFFD008).w,d0
0000E910 0440 0100                  		subi.w	#$100,d0
0000E914 6500                       		bcs.s	loc_E0D2
0000E916 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E91A 6500                       		bcs.s	loc_E0D2
0000E91C 5828 0025                  		addq.b	#4,$25(a0)
0000E920 117C 0002 001C             		move.b	#2,$1C(a0)
0000E926 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E92C 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E932                            
0000E932                            loc_E0D2:
0000E932 588F                       		addq.l	#4,sp
0000E934 4E75                       		rts	
0000E936                            ; ===========================================================================
0000E936                            
0000E936                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E936 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E93C 6700                       		beq.s	loc_E0F8
0000E93E 5368 0030                  		subq.w	#1,$30(a0)
0000E942 6A00                       		bpl.s	locret_E0F6
0000E944 117C 0001 001C             		move.b	#1,$1C(a0)
0000E94A 317C 0700 0010             		move.w	#$700,$10(a0)
0000E950 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E956                            
0000E956                            locret_E0F6:
0000E956 4E75                       		rts	
0000E958                            ; ===========================================================================
0000E958                            
0000E958                            loc_E0F8:
0000E958 5428 0025                  		addq.b	#2,$25(a0)
0000E95C 4E75                       		rts	
0000E95E                            ; ===========================================================================
0000E95E                            
0000E95E                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E95E 6100 0000                  		bsr.w	Obj43_Stop
0000E962 6100 F4DE                  		bsr.w	SpeedToPos
0000E966 6100 0000                  		bsr.w	ObjHitFloor
0000E96A 0C41 FFF8                  		cmpi.w	#-8,d1
0000E96E 6D00                       		blt.s	Obj43_Jump
0000E970 0C41 000C                  		cmpi.w	#$C,d1
0000E974 6C00                       		bge.s	Obj43_Jump
0000E976 D368 000C                  		add.w	d1,$C(a0)
0000E97A 4E75                       		rts	
0000E97C                            ; ===========================================================================
0000E97C                            
0000E97C                            Obj43_Jump:
0000E97C 5428 0025                  		addq.b	#2,$25(a0)
0000E980 08E8 0000 0032             		bset	#0,$32(a0)
0000E986 6700                       		beq.s	locret_E12E
0000E988 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E98E                            
0000E98E                            locret_E12E:
0000E98E 4E75                       		rts	
0000E990                            ; ===========================================================================
0000E990                            
0000E990                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E990 6100 F43E                  		bsr.w	ObjectFall
0000E994 4A68 0012                  		tst.w	$12(a0)
0000E998 6B00                       		bmi.s	locret_E150
0000E99A 6100 0000                  		bsr.w	ObjHitFloor
0000E99E 4A41                       		tst.w	d1
0000E9A0 6A00                       		bpl.s	locret_E150
0000E9A2 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E9A6 5528 0025                  		subq.b	#2,$25(a0)
0000E9AA 317C 0000 0012             		move.w	#0,$12(a0)
0000E9B0                            
0000E9B0                            locret_E150:
0000E9B0 4E75                       		rts	
0000E9B2                            
0000E9B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E9B2                            
0000E9B2                            
0000E9B2                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E9B2 4A28 0032                  		tst.b	$32(a0)
0000E9B6 6B00                       		bmi.s	locret_E188
0000E9B8 3038 D008                  		move.w	($FFFFD008).w,d0
0000E9BC 0440 0030                  		subi.w	#$30,d0
0000E9C0 9068 0008                  		sub.w	8(a0),d0
0000E9C4 6400                       		bcc.s	locret_E188
0000E9C6 117C 0000 001C             		move.b	#0,$1C(a0)
0000E9CC 117C 000E 0020             		move.b	#$E,$20(a0)
0000E9D2 4268 0010                  		clr.w	$10(a0)
0000E9D6 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E9DC 117C 0002 0025             		move.b	#2,$25(a0)
0000E9E2 08E8 0007 0032             		bset	#7,$32(a0)
0000E9E8                            
0000E9E8                            locret_E188:
0000E9E8 4E75                       		rts	
0000E9EA                            ; End of function Obj43_Stop
0000E9EA                            
0000E9EA                            ; ===========================================================================
0000E9EA                            Ani_obj43:
0000E9EA                            	include "_anim\obj43.asm"
0000E9EA                            ; ---------------------------------------------------------------------------
0000E9EA                            ; Animation script - Roller enemy
0000E9EA                            ; ---------------------------------------------------------------------------
0000E9EA 0000                       		dc.w byte_E190-Ani_obj43
0000E9EC 0000                       		dc.w byte_E196-Ani_obj43
0000E9EE 0000                       		dc.w byte_E19C-Ani_obj43
0000E9F0 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E9F6 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E9FC 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000EA02 00                         		even
0000EA02 00                         		even
0000EA02                            
0000EA02                            ; ---------------------------------------------------------------------------
0000EA02                            ; Sprite mappings - Roller enemy (SYZ)
0000EA02                            ; ---------------------------------------------------------------------------
0000EA02                            Map_obj43:
0000EA02                            	include "_maps\obj43.asm"
0000EA02                            Map_61da:
0000EA02 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000EA04 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000EA06 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000EA08 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000EA0A 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000EA0C 02                         Map_61da_A: 	dc.b $2
0000EA0D DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000EA12 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000EA17 02                         Map_61da_15: 	dc.b $2
0000EA18 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000EA1D FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000EA22 01                         Map_61da_20: 	dc.b $1
0000EA23 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000EA28 01                         Map_61da_26: 	dc.b $1
0000EA29 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000EA2E 01                         Map_61da_2C: 	dc.b $1
0000EA2F F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000EA34                            	even
0000EA34                            	even
0000EA34                            
0000EA34                            ; ===========================================================================
0000EA34                            ; ---------------------------------------------------------------------------
0000EA34                            ; Object 44 - walls (GHZ)
0000EA34                            ; ---------------------------------------------------------------------------
0000EA34                            
0000EA34                            Obj44:					; XREF: Obj_Index
0000EA34 7000                       		moveq	#0,d0
0000EA36 1028 0024                  		move.b	$24(a0),d0
0000EA3A 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000EA3E 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000EA42                            ; ===========================================================================
0000EA42 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000EA44 0000                       		dc.w Obj44_Solid-Obj44_Index
0000EA46 0000                       		dc.w Obj44_Display-Obj44_Index
0000EA48                            ; ===========================================================================
0000EA48                            
0000EA48                            Obj44_Main:				; XREF: Obj44_Index
0000EA48 5428 0024                  		addq.b	#2,$24(a0)
0000EA4C 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000EA54 317C 434C 0002             		move.w	#$434C,2(a0)
0000EA5A 0028 0004 0001             		ori.b	#4,1(a0)
0000EA60 117C 0008 0019             		move.b	#8,$19(a0)
0000EA66 117C 0006 0018             		move.b	#6,$18(a0)
0000EA6C 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EA72 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EA78 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EA7A 5428 0024                  		addq.b	#2,$24(a0)
0000EA7E 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EA80                            ; ===========================================================================
0000EA80                            
0000EA80                            Obj44_Solid:				; XREF: Obj44_Index
0000EA80 323C 0013                  		move.w	#$13,d1
0000EA84 343C 0028                  		move.w	#$28,d2
0000EA88 6100 A684                  		bsr.w	Obj44_SolidWall
0000EA8C                            
0000EA8C                            Obj44_Display:				; XREF: Obj44_Index
0000EA8C 6100 F3DA                  		bsr.w	DisplaySprite
0000EA90 3028 0008                  		move.w	8(a0),d0
0000EA94 0240 FF80                  		andi.w	#$FF80,d0
0000EA98 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA9C 0441 0080                  		subi.w	#$80,d1
0000EAA0 0241 FF80                  		andi.w	#$FF80,d1
0000EAA4 9041                       		sub.w	d1,d0
0000EAA6 0C40 0280                  		cmpi.w	#$280,d0
0000EAAA 6200 F3F8                  		bhi.w	DeleteObject
0000EAAE 4E75                       		rts	
0000EAB0                            ; ===========================================================================
0000EAB0                            ; ---------------------------------------------------------------------------
0000EAB0                            ; Sprite mappings - walls (GHZ)
0000EAB0                            ; ---------------------------------------------------------------------------
0000EAB0                            Map_obj44:
0000EAB0                            	include "_maps\obj44.asm"
0000EAB0                            ; ---------------------------------------------------------------------------
0000EAB0                            ; Sprite mappings - walls (GHZ)
0000EAB0                            ; ---------------------------------------------------------------------------
0000EAB0 0000                       		dc.w byte_E256-Map_obj44
0000EAB2 0000                       		dc.w byte_E26B-Map_obj44
0000EAB4 0000                       		dc.w byte_E280-Map_obj44
0000EAB6 04                         byte_E256:	dc.b 4
0000EAB7 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EABC F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EAC1 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EAC6 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EACB 04                         byte_E26B:	dc.b 4
0000EACC E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000EAD1 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EAD6 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EADB 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EAE0 04                         byte_E280:	dc.b 4
0000EAE1 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EAE6 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EAEB 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EAF0 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EAF6 00                         		even
0000EAF6 00                         		even
0000EAF6                            
0000EAF6                            ; ===========================================================================
0000EAF6                            ; ---------------------------------------------------------------------------
0000EAF6                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EAF6                            ; ---------------------------------------------------------------------------
0000EAF6                            
0000EAF6                            Obj13:					; XREF: Obj_Index
0000EAF6 7000                       		moveq	#0,d0
0000EAF8 1028 0024                  		move.b	$24(a0),d0
0000EAFC 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EB00 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EB04 6000 0000                  		bra.w	Obj14_ChkDel
0000EB08                            ; ===========================================================================
0000EB08 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EB0A 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EB0C                            ; ---------------------------------------------------------------------------
0000EB0C                            ;
0000EB0C                            ; Lava ball production rates
0000EB0C                            ;
0000EB0C 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EB12                            ; ===========================================================================
0000EB12                            
0000EB12                            Obj13_Main:				; XREF: Obj13_Index
0000EB12 5428 0024                  		addq.b	#2,$24(a0)
0000EB16 1028 0028                  		move.b	$28(a0),d0
0000EB1A E848                       		lsr.w	#4,d0
0000EB1C 0240 000F                  		andi.w	#$F,d0
0000EB20 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EB26 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EB2C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EB32                            
0000EB32                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EB32 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EB36 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EB38 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EB3E 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000EB42 6600                       		bne.s	locret_E302
0000EB44 6100 F7A8                  		bsr.w	SingleObjLoad
0000EB48 6600                       		bne.s	locret_E302
0000EB4A 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EB4E 3368 0008 0008             		move.w	8(a0),8(a1)
0000EB54 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EB5A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EB60                            
0000EB60                            locret_E302:
0000EB60 4E75                       		rts	
0000EB62                            ; ===========================================================================
0000EB62                            ; ---------------------------------------------------------------------------
0000EB62                            ; Object 14 - lava balls (MZ, SLZ)
0000EB62                            ; ---------------------------------------------------------------------------
0000EB62                            
0000EB62                            Obj14:					; XREF: Obj_Index
0000EB62 7000                       		moveq	#0,d0
0000EB64 1028 0024                  		move.b	$24(a0),d0
0000EB68 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EB6C 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EB70 6000 F2F6                  		bra.w	DisplaySprite
0000EB74                            ; ===========================================================================
0000EB74 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EB76 0000                       		dc.w Obj14_Action-Obj14_Index
0000EB78 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EB7A                            
0000EB7A FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EB84 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EB8C                            ; ===========================================================================
0000EB8C                            
0000EB8C                            Obj14_Main:				; XREF: Obj14_Index
0000EB8C 5428 0024                  		addq.b	#2,$24(a0)
0000EB90 117C 0008 0016             		move.b	#8,$16(a0)
0000EB96 117C 0008 0017             		move.b	#8,$17(a0)
0000EB9C 217C 0000 BAB4 0004        		move.l	#Map_obj14,4(a0)
0000EBA4 317C 0345 0002             		move.w	#$345,2(a0)
0000EBAA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EBB0 6600                       		bne.s	loc_E35A
0000EBB2 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EBB8                            
0000EBB8                            loc_E35A:
0000EBB8 117C 0004 0001             		move.b	#4,1(a0)
0000EBBE 117C 0003 0018             		move.b	#3,$18(a0)
0000EBC4 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EBCA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EBD0 4A28 0029                  		tst.b	$29(a0)
0000EBD4 6700                       		beq.s	Obj14_SetSpeed
0000EBD6 5428 0018                  		addq.b	#2,$18(a0)
0000EBDA                            
0000EBDA                            Obj14_SetSpeed:
0000EBDA 7000                       		moveq	#0,d0
0000EBDC 1028 0028                  		move.b	$28(a0),d0
0000EBE0 D040                       		add.w	d0,d0
0000EBE2 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EBE8 117C 0008 0019             		move.b	#8,$19(a0)
0000EBEE 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EBF4 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EBF6 117C 0010 0019             		move.b	#$10,$19(a0)
0000EBFC 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EC02 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EC08 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EC0E                            
0000EC0E                            Obj14_PlaySnd:
0000EC0E 303C 00AE                  		move.w	#$AE,d0
0000EC12 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EC18                            
0000EC18                            Obj14_Action:				; XREF: Obj14_Index
0000EC18 7000                       		moveq	#0,d0
0000EC1A 1028 0028                  		move.b	$28(a0),d0
0000EC1E D040                       		add.w	d0,d0
0000EC20 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EC24 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EC28 6100 F218                  		bsr.w	SpeedToPos
0000EC2C 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EC32 6100 C282                  		bsr.w	AnimateSprite
0000EC36                            
0000EC36                            Obj14_ChkDel:				; XREF: Obj13
0000EC36 3028 0008                  		move.w	8(a0),d0
0000EC3A 0240 FF80                  		andi.w	#$FF80,d0
0000EC3E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC42 0441 0080                  		subi.w	#$80,d1
0000EC46 0241 FF80                  		andi.w	#$FF80,d1
0000EC4A 9041                       		sub.w	d1,d0
0000EC4C 0C40 0280                  		cmpi.w	#$280,d0
0000EC50 6200 F252                  		bhi.w	DeleteObject
0000EC54 4E75                       		rts	
0000EC56                            ; ===========================================================================
0000EC56 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EC5A 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EC5E 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EC62 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EC66 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EC68                            ; ===========================================================================
0000EC68                            ; lavaball types 00-03 fly up and fall back down
0000EC68                            
0000EC68                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EC68 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EC6E 3028 0030                  		move.w	$30(a0),d0
0000EC72 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EC76 6400                       		bcc.s	loc_E41E	; if not, branch
0000EC78 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EC7C                            
0000EC7C                            loc_E41E:
0000EC7C 08A8 0001 0022             		bclr	#1,$22(a0)
0000EC82 4A68 0012                  		tst.w	$12(a0)
0000EC86 6A00                       		bpl.s	locret_E430
0000EC88 08E8 0001 0022             		bset	#1,$22(a0)
0000EC8E                            
0000EC8E                            locret_E430:
0000EC8E 4E75                       		rts	
0000EC90                            ; ===========================================================================
0000EC90                            ; lavaball type	04 flies up until it hits the ceiling
0000EC90                            
0000EC90                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EC90 08E8 0001 0022             		bset	#1,$22(a0)
0000EC96 6100 0000                  		bsr.w	ObjHitCeiling
0000EC9A 4A41                       		tst.w	d1
0000EC9C 6A00                       		bpl.s	locret_E452
0000EC9E 117C 0008 0028             		move.b	#8,$28(a0)
0000ECA4 117C 0001 001C             		move.b	#1,$1C(a0)
0000ECAA 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000ECB0                            
0000ECB0                            locret_E452:
0000ECB0 4E75                       		rts	
0000ECB2                            ; ===========================================================================
0000ECB2                            ; lavaball type	05 falls down until it hits the	floor
0000ECB2                            
0000ECB2                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000ECB2 08A8 0001 0022             		bclr	#1,$22(a0)
0000ECB8 6100 0000                  		bsr.w	ObjHitFloor
0000ECBC 4A41                       		tst.w	d1
0000ECBE 6A00                       		bpl.s	locret_E474
0000ECC0 117C 0008 0028             		move.b	#8,$28(a0)
0000ECC6 117C 0001 001C             		move.b	#1,$1C(a0)
0000ECCC 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000ECD2                            
0000ECD2                            locret_E474:
0000ECD2 4E75                       		rts	
0000ECD4                            ; ===========================================================================
0000ECD4                            ; lavaball types 06-07 move sideways
0000ECD4                            
0000ECD4                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000ECD4 08E8 0000 0022             		bset	#0,$22(a0)
0000ECDA 76F8                       		moveq	#-8,d3
0000ECDC 6100 0000                  		bsr.w	ObjHitWallLeft
0000ECE0 4A41                       		tst.w	d1
0000ECE2 6A00                       		bpl.s	locret_E498
0000ECE4 117C 0008 0028             		move.b	#8,$28(a0)
0000ECEA 117C 0003 001C             		move.b	#3,$1C(a0)
0000ECF0 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000ECF6                            
0000ECF6                            locret_E498:
0000ECF6 4E75                       		rts	
0000ECF8                            ; ===========================================================================
0000ECF8                            
0000ECF8                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000ECF8 08A8 0000 0022             		bclr	#0,$22(a0)
0000ECFE 7608                       		moveq	#8,d3
0000ED00 6100 0000                  		bsr.w	ObjHitWallRight
0000ED04 4A41                       		tst.w	d1
0000ED06 6A00                       		bpl.s	locret_E4BC
0000ED08 117C 0008 0028             		move.b	#8,$28(a0)
0000ED0E 117C 0003 001C             		move.b	#3,$1C(a0)
0000ED14 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000ED1A                            
0000ED1A                            locret_E4BC:
0000ED1A 4E75                       		rts	
0000ED1C                            ; ===========================================================================
0000ED1C                            
0000ED1C                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000ED1C 4E75                       		rts	
0000ED1E                            ; ===========================================================================
0000ED1E                            
0000ED1E                            Obj14_Delete:				; XREF: Obj14_Index
0000ED1E 6000 F184                  		bra.w	DeleteObject
0000ED22                            ; ===========================================================================
0000ED22                            Ani_obj14:
0000ED22                            	include "_anim\obj14.asm"
0000ED22                            ; ---------------------------------------------------------------------------
0000ED22                            ; Animation script - lava balls
0000ED22                            ; ---------------------------------------------------------------------------
0000ED22 0000                       		dc.w byte_E4CC-Ani_obj14
0000ED24 0000                       		dc.w byte_E4D2-Ani_obj14
0000ED26 0000                       		dc.w byte_E4D6-Ani_obj14
0000ED28 0000                       		dc.w byte_E4DC-Ani_obj14
0000ED2A 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000ED30 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000ED34 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000ED3A 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000ED3E                            		even
0000ED3E                            		even
0000ED3E                            
0000ED3E                            ; ===========================================================================
0000ED3E                            ; ---------------------------------------------------------------------------
0000ED3E                            ; Object 6D - flame thrower (SBZ)
0000ED3E                            ; ---------------------------------------------------------------------------
0000ED3E                            
0000ED3E                            Obj6D:					; XREF: Obj_Index
0000ED3E 7000                       		moveq	#0,d0
0000ED40 1028 0024                  		move.b	$24(a0),d0
0000ED44 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000ED48 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000ED4C                            ; ===========================================================================
0000ED4C 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000ED4E 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000ED50                            ; ===========================================================================
0000ED50                            
0000ED50                            Obj6D_Main:				; XREF: Obj6D_Index
0000ED50 5428 0024                  		addq.b	#2,$24(a0)
0000ED54 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000ED5C 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000ED62 0028 0004 0001             		ori.b	#4,1(a0)
0000ED68 117C 0001 0018             		move.b	#1,$18(a0)
0000ED6E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ED74 117C 000C 0019             		move.b	#$C,$19(a0)
0000ED7A 1028 0028                  		move.b	$28(a0),d0
0000ED7E 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000ED82 D040                       		add.w	d0,d0		; multiply by 2
0000ED84 3140 0030                  		move.w	d0,$30(a0)
0000ED88 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000ED8C 1028 0028                  		move.b	$28(a0),d0
0000ED90 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000ED94 EB48                       		lsl.w	#5,d0		; multiply by $20
0000ED96 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000ED9A 117C 000A 0036             		move.b	#$A,$36(a0)
0000EDA0 0828 0001 0022             		btst	#1,$22(a0)
0000EDA6 6700                       		beq.s	Obj6D_Action
0000EDA8 117C 0002 001C             		move.b	#2,$1C(a0)
0000EDAE 117C 0015 0036             		move.b	#$15,$36(a0)
0000EDB4                            
0000EDB4                            Obj6D_Action:				; XREF: Obj6D_Index
0000EDB4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EDB8 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EDBA 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EDC0 0868 0000 001C             		bchg	#0,$1C(a0)
0000EDC6 6700                       		beq.s	loc_E57A
0000EDC8 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EDCE 303C 00B3                  		move.w	#$B3,d0
0000EDD2 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play flame sound
0000EDD8                            
0000EDD8                            loc_E57A:
0000EDD8 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EDDE 6100 C0D6                  		bsr.w	AnimateSprite
0000EDE2 117C 0000 0020             		move.b	#0,$20(a0)
0000EDE8 1028 0036                  		move.b	$36(a0),d0
0000EDEC B028 001A                  		cmp.b	$1A(a0),d0
0000EDF0 6600                       		bne.s	Obj6D_ChkDel
0000EDF2 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EDF8                            
0000EDF8                            Obj6D_ChkDel:
0000EDF8 3028 0008                  		move.w	8(a0),d0
0000EDFC 0240 FF80                  		andi.w	#$FF80,d0
0000EE00 3238 F700                  		move.w	($FFFFF700).w,d1
0000EE04 0441 0080                  		subi.w	#$80,d1
0000EE08 0241 FF80                  		andi.w	#$FF80,d1
0000EE0C 9041                       		sub.w	d1,d0
0000EE0E 0C40 0280                  		cmpi.w	#$280,d0
0000EE12 6200 F090                  		bhi.w	DeleteObject
0000EE16 6000 F050                  		bra.w	DisplaySprite
0000EE1A                            ; ===========================================================================
0000EE1A                            Ani_obj6D:
0000EE1A                            	include "_anim\obj6D.asm"
0000EE1A                            ; ---------------------------------------------------------------------------
0000EE1A                            ; Animation script - flamethrower (SBZ)
0000EE1A                            ; ---------------------------------------------------------------------------
0000EE1A 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EE1C 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EE1E 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EE20 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EE22 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EE30 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EE3A 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EE48 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EE52                            		even
0000EE52                            		even
0000EE52                            
0000EE52                            ; ---------------------------------------------------------------------------
0000EE52                            ; Sprite mappings - flame thrower (SBZ)
0000EE52                            ; ---------------------------------------------------------------------------
0000EE52                            Map_obj6D:
0000EE52                            	include "_maps\obj6D.asm"
0000EE52                            ; ---------------------------------------------------------------------------
0000EE52                            ; Sprite mappings - flame thrower (SBZ)
0000EE52                            ; ---------------------------------------------------------------------------
0000EE52 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EE56 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EE5A 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EE5E 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EE62 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EE66 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EE6A 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EE6E 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EE72 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EE76 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EE7A 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EE7E 01                         byte_E620:	dc.b 1
0000EE7F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE84 02                         byte_E626:	dc.b 2
0000EE85 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE8A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE8F 02                         byte_E631:	dc.b 2
0000EE90 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE95 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE9A 03                         byte_E63C:	dc.b 3
0000EE9B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EEA0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEA5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEAA 03                         byte_E64C:	dc.b 3
0000EEAB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEB0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEB5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEBA 04                         byte_E65C:	dc.b 4
0000EEBB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEC0 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EEC5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EECA 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EECF 04                         byte_E671:	dc.b 4
0000EED0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EED5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEDA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEDF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEE4 05                         byte_E686:	dc.b 5
0000EEE5 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EEEA 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEEF 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EEF4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEF9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEFE 05                         byte_E6A0:	dc.b 5
0000EEFF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF04 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EF09 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF0E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF13 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF18 06                         byte_E6BA:	dc.b 6
0000EF19 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EF1E F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EF23 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF28 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EF2D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF32 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF37 06                         byte_E6D9:	dc.b 6
0000EF38 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EF3D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF42 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EF47 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF4C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF51 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF56 01                         byte_E6F8:	dc.b 1
0000EF57 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF5C 02                         byte_E6FE:	dc.b 2
0000EF5D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF62 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF67 02                         byte_E709:	dc.b 2
0000EF68 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF6D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF72 03                         byte_E714:	dc.b 3
0000EF73 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF78 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF7D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF82 03                         byte_E724:	dc.b 3
0000EF83 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF88 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF8D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF92 04                         byte_E734:	dc.b 4
0000EF93 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF98 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF9D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFA2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EFA7 04                         byte_E749:	dc.b 4
0000EFA8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EFAD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EFB2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFB7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EFBC 05                         byte_E75E:	dc.b 5
0000EFBD F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EFC2 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EFC7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EFCC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFD1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EFD6 05                         byte_E778:	dc.b 5
0000EFD7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EFDC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EFE1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EFE6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFEB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EFF0 06                         byte_E792:	dc.b 6
0000EFF1 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EFF6 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EFFB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F000 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F005 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F00A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F00F 06                         byte_E7B1:	dc.b 6
0000F010 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F015 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F01A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F01F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F024 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F029 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F02E                            		even
0000F02E                            		even
0000F02E                            
0000F02E                            ; ===========================================================================
0000F02E                            ; ---------------------------------------------------------------------------
0000F02E                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F02E                            ; ---------------------------------------------------------------------------
0000F02E                            
0000F02E                            Obj46:					; XREF: Obj_Index
0000F02E 7000                       		moveq	#0,d0
0000F030 1028 0024                  		move.b	$24(a0),d0
0000F034 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F038 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F03C                            ; ===========================================================================
0000F03C 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F03E 0000                       		dc.w Obj46_Action-Obj46_Index
0000F040                            ; ===========================================================================
0000F040                            
0000F040                            Obj46_Main:				; XREF: Obj46_Index
0000F040 5428 0024                  		addq.b	#2,$24(a0)
0000F044 117C 000F 0016             		move.b	#$F,$16(a0)
0000F04A 117C 000F 0017             		move.b	#$F,$17(a0)
0000F050 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F058 317C 4000 0002             		move.w	#$4000,2(a0)
0000F05E 117C 0004 0001             		move.b	#4,1(a0)
0000F064 117C 0003 0018             		move.b	#3,$18(a0)
0000F06A 117C 0010 0019             		move.b	#$10,$19(a0)
0000F070 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F076 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F07C                            
0000F07C                            Obj46_Action:				; XREF: Obj46_Index
0000F07C 4A28 0001                  		tst.b	1(a0)
0000F080 6A00                       		bpl.s	Obj46_ChkDel
0000F082 7000                       		moveq	#0,d0
0000F084 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F088 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F08C D040                       		add.w	d0,d0
0000F08E 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F092 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F096 323C 001B                  		move.w	#$1B,d1
0000F09A 343C 0010                  		move.w	#$10,d2
0000F09E 363C 0011                  		move.w	#$11,d3
0000F0A2 3828 0008                  		move.w	8(a0),d4
0000F0A6 6100 0000                  		bsr.w	SolidObject
0000F0AA                            
0000F0AA                            Obj46_ChkDel:
0000F0AA 6100 EDBC                  		bsr.w	DisplaySprite
0000F0AE 3028 0008                  		move.w	8(a0),d0
0000F0B2 0240 FF80                  		andi.w	#$FF80,d0
0000F0B6 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0BA 0441 0080                  		subi.w	#$80,d1
0000F0BE 0241 FF80                  		andi.w	#$FF80,d1
0000F0C2 9041                       		sub.w	d1,d0
0000F0C4 0C40 0280                  		cmpi.w	#$280,d0
0000F0C8 6200 EDDA                  		bhi.w	DeleteObject
0000F0CC 4E75                       		rts	
0000F0CE                            ; ===========================================================================
0000F0CE 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F0D0 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F0D2 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F0D4 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F0D6 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F0D8                            ; ===========================================================================
0000F0D8                            
0000F0D8                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F0D8 4E75                       		rts	
0000F0DA                            ; ===========================================================================
0000F0DA                            
0000F0DA                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F0DA 3038 D008                  		move.w	($FFFFD008).w,d0
0000F0DE 9068 0008                  		sub.w	8(a0),d0
0000F0E2 6400                       		bcc.s	loc_E888
0000F0E4 4440                       		neg.w	d0
0000F0E6                            
0000F0E6                            loc_E888:
0000F0E6 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F0EA 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F0EC 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F0F2                            
0000F0F2                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F0F2 7000                       		moveq	#0,d0
0000F0F4 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F0F8 0828 0003 0028             		btst	#3,$28(a0)
0000F0FE 6700                       		beq.s	loc_E8A8
0000F100 4440                       		neg.w	d0
0000F102 0640 0010                  		addi.w	#$10,d0
0000F106                            
0000F106                            loc_E8A8:
0000F106 3228 0030                  		move.w	$30(a0),d1
0000F10A 9240                       		sub.w	d0,d1
0000F10C 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F110 4E75                       		rts	
0000F112                            ; ===========================================================================
0000F112                            
0000F112                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F112 6100 ED2E                  		bsr.w	SpeedToPos
0000F116 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F11C 6100 0000                  		bsr.w	ObjHitFloor
0000F120 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F122 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F126 D368 000C                  		add.w	d1,$C(a0)
0000F12A 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F12E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F134 117C 0004 0028             		move.b	#4,$28(a0)
0000F13A 3011                       		move.w	(a1),d0
0000F13C 0240 03FF                  		andi.w	#$3FF,d0
0000F140 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F144 6400                       		bcc.s	locret_E8EE
0000F146 117C 0000 0028             		move.b	#0,$28(a0)
0000F14C                            
0000F14C                            locret_E8EE:
0000F14C 4E75                       		rts	
0000F14E                            ; ===========================================================================
0000F14E                            
0000F14E                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F14E 7000                       		moveq	#0,d0
0000F150 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F154 E648                       		lsr.w	#3,d0
0000F156 3228 0030                  		move.w	$30(a0),d1
0000F15A 9240                       		sub.w	d0,d1
0000F15C 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F160 4E75                       		rts	
0000F162                            ; ===========================================================================
0000F162                            ; ---------------------------------------------------------------------------
0000F162                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F162                            ; ---------------------------------------------------------------------------
0000F162                            Map_obj46:
0000F162                            	include "_maps\obj46.asm"
0000F162                            ; ---------------------------------------------------------------------------
0000F162                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F162                            ; ---------------------------------------------------------------------------
0000F162 0000                       		dc.w byte_E906-Map_obj46
0000F164 01                         byte_E906:	dc.b 1
0000F165 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F16A                            		even
0000F16A                            		even
0000F16A                            
0000F16A                            ; ===========================================================================
0000F16A                            ; ---------------------------------------------------------------------------
0000F16A                            ; Object 12 - lamp (SYZ)
0000F16A                            ; ---------------------------------------------------------------------------
0000F16A                            
0000F16A                            Obj12:					; XREF: Obj_Index
0000F16A 7000                       		moveq	#0,d0
0000F16C 1028 0024                  		move.b	$24(a0),d0
0000F170 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F174 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F178                            ; ===========================================================================
0000F178 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F17A 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F17C                            ; ===========================================================================
0000F17C                            
0000F17C                            Obj12_Main:				; XREF: Obj12_Index
0000F17C 5428 0024                  		addq.b	#2,$24(a0)
0000F180 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F188 317C 0000 0002             		move.w	#0,2(a0)
0000F18E 117C 0004 0001             		move.b	#4,1(a0)
0000F194 117C 0010 0019             		move.b	#$10,$19(a0)
0000F19A 117C 0006 0018             		move.b	#6,$18(a0)
0000F1A0                            
0000F1A0                            Obj12_Animate:				; XREF: Obj12_Index
0000F1A0 5328 001E                  		subq.b	#1,$1E(a0)
0000F1A4 6A00                       		bpl.s	Obj12_ChkDel
0000F1A6 117C 0007 001E             		move.b	#7,$1E(a0)
0000F1AC 5228 001A                  		addq.b	#1,$1A(a0)
0000F1B0 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F1B6 6500                       		bcs.s	Obj12_ChkDel
0000F1B8 117C 0000 001A             		move.b	#0,$1A(a0)
0000F1BE                            
0000F1BE                            Obj12_ChkDel:
0000F1BE 3028 0008                  		move.w	8(a0),d0
0000F1C2 0240 FF80                  		andi.w	#$FF80,d0
0000F1C6 3238 F700                  		move.w	($FFFFF700).w,d1
0000F1CA 0441 0080                  		subi.w	#$80,d1
0000F1CE 0241 FF80                  		andi.w	#$FF80,d1
0000F1D2 9041                       		sub.w	d1,d0
0000F1D4 0C40 0280                  		cmpi.w	#$280,d0
0000F1D8 6200 ECCA                  		bhi.w	DeleteObject
0000F1DC 6000 EC8A                  		bra.w	DisplaySprite
0000F1E0                            ; ===========================================================================
0000F1E0                            ; ---------------------------------------------------------------------------
0000F1E0                            ; Sprite mappings - lamp (SYZ)
0000F1E0                            ; ---------------------------------------------------------------------------
0000F1E0                            Map_obj12:
0000F1E0                            	include "_maps\obj12.asm"
0000F1E0                            ; ---------------------------------------------------------------------------
0000F1E0                            ; Sprite mappings - lamp (SYZ)
0000F1E0                            ; ---------------------------------------------------------------------------
0000F1E0 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F1E4 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F1E8 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F1EC 02                         byte_E98E:	dc.b 2
0000F1ED F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F1F2 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F1F7 02                         byte_E999:	dc.b 2
0000F1F8 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F1FD 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F202 02                         byte_E9A4:	dc.b 2
0000F203 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F208 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F20D 02                         byte_E9AF:	dc.b 2
0000F20E F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F213 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F218 02                         byte_E9BA:	dc.b 2
0000F219 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F21E 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F223 02                         byte_E9C5:	dc.b 2
0000F224 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F229 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F22E                            		even
0000F22E                            		even
0000F22E                            
0000F22E                            ; ===========================================================================
0000F22E                            ; ---------------------------------------------------------------------------
0000F22E                            ; Object 47 - pinball bumper (SYZ)
0000F22E                            ; ---------------------------------------------------------------------------
0000F22E                            
0000F22E                            Obj47:					; XREF: Obj_Index
0000F22E 7000                       		moveq	#0,d0
0000F230 1028 0024                  		move.b	$24(a0),d0
0000F234 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F238 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F23C                            ; ===========================================================================
0000F23C 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F23E 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F240                            ; ===========================================================================
0000F240                            
0000F240                            Obj47_Main:				; XREF: Obj47_Index
0000F240 5428 0024                  		addq.b	#2,$24(a0)
0000F244 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F24C 317C 0380 0002             		move.w	#$380,2(a0)
0000F252 117C 0004 0001             		move.b	#4,1(a0)
0000F258 117C 0010 0019             		move.b	#$10,$19(a0)
0000F25E 117C 0001 0018             		move.b	#1,$18(a0)
0000F264 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F26A                            
0000F26A                            Obj47_Hit:				; XREF: Obj47_Index
0000F26A 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F26E 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F272 4228 0021                  		clr.b	$21(a0)
0000F276 43F8 D000                  		lea	($FFFFD000).w,a1
0000F27A 3228 0008                  		move.w	8(a0),d1
0000F27E 3428 000C                  		move.w	$C(a0),d2
0000F282 9269 0008                  		sub.w	8(a1),d1
0000F286 9469 000C                  		sub.w	$C(a1),d2
0000F28A 4EB9 0000 2E0E             		jsr	(CalcAngle).l
0000F290 4EB9 0000 2B40             		jsr	(CalcSine).l
0000F296 C3FC F900                  		muls.w	#-$700,d1
0000F29A E081                       		asr.l	#8,d1
0000F29C 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F2A0 C1FC F900                  		muls.w	#-$700,d0
0000F2A4 E080                       		asr.l	#8,d0
0000F2A6 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F2AA 08E9 0001 0022             		bset	#1,$22(a1)
0000F2B0 08A9 0004 0022             		bclr	#4,$22(a1)
0000F2B6 08A9 0005 0022             		bclr	#5,$22(a1)
0000F2BC 4229 003C                  		clr.b	$3C(a1)
0000F2C0 117C 0001 001C             		move.b	#1,$1C(a0)
0000F2C6 303C 00B4                  		move.w	#$B4,d0
0000F2CA 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F2D0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F2D4 7000                       		moveq	#0,d0
0000F2D6 1028 0023                  		move.b	$23(a0),d0
0000F2DA 6700                       		beq.s	Obj47_Score
0000F2DC 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F2E2 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F2E4 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F2E8                            
0000F2E8                            Obj47_Score:
0000F2E8 7001                       		moveq	#1,d0
0000F2EA 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F2F0 6100 EFFC                  		bsr.w	SingleObjLoad
0000F2F4 6600                       		bne.s	Obj47_Display
0000F2F6 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F2FA 3368 0008 0008             		move.w	8(a0),8(a1)
0000F300 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F306 137C 0004 001A             		move.b	#4,$1A(a1)
0000F30C                            
0000F30C                            Obj47_Display:
0000F30C 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F312 6100 BBA2                  		bsr.w	AnimateSprite
0000F316 3028 0008                  		move.w	8(a0),d0
0000F31A 0240 FF80                  		andi.w	#$FF80,d0
0000F31E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F322 0441 0080                  		subi.w	#$80,d1
0000F326 0241 FF80                  		andi.w	#$FF80,d1
0000F32A 9041                       		sub.w	d1,d0
0000F32C 0C40 0280                  		cmpi.w	#$280,d0
0000F330 6200                       		bhi.s	Obj47_ChkHit
0000F332 6000 EB34                  		bra.w	DisplaySprite
0000F336                            ; ===========================================================================
0000F336                            
0000F336                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F336 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F33A 7000                       		moveq	#0,d0
0000F33C 1028 0023                  		move.b	$23(a0),d0
0000F340 6700                       		beq.s	Obj47_Delete
0000F342 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F348                            
0000F348                            Obj47_Delete:
0000F348 6000 EB5A                  		bra.w	DeleteObject
0000F34C                            ; ===========================================================================
0000F34C                            Ani_obj47:
0000F34C                            	include "_anim\obj47.asm"
0000F34C                            ; ---------------------------------------------------------------------------
0000F34C                            ; Animation script - flamethrower (SBZ)
0000F34C                            ; ---------------------------------------------------------------------------
0000F34C 0000                       		dc.w byte_EAF4-Ani_obj47
0000F34E 0000                       		dc.w byte_EAF8-Ani_obj47
0000F350 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F354 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F35C                            		even
0000F35C                            		even
0000F35C                            
0000F35C                            ; ---------------------------------------------------------------------------
0000F35C                            ; Sprite mappings - pinball bumper (SYZ)
0000F35C                            ; ---------------------------------------------------------------------------
0000F35C                            Map_obj47:
0000F35C                            	include "_maps\obj47.asm"
0000F35C                            ; ---------------------------------------------------------------------------
0000F35C                            ; Sprite mappings - pinball bumper (SYZ)
0000F35C                            ; ---------------------------------------------------------------------------
0000F35C 0000                       		dc.w byte_EB06-Map_obj47
0000F35E 0000                       		dc.w byte_EB11-Map_obj47
0000F360 0000                       		dc.w byte_EB1C-Map_obj47
0000F362 02                         byte_EB06:	dc.b 2
0000F363 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F368 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F36D 02                         byte_EB11:	dc.b 2
0000F36E F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F373 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F378 02                         byte_EB1C:	dc.b 2
0000F379 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F37E F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F384 00                         		even
0000F384 00                         		even
0000F384                            
0000F384                            ; ===========================================================================
0000F384                            ; ---------------------------------------------------------------------------
0000F384                            ; Object 0D - signpost at the end of a level
0000F384                            ; ---------------------------------------------------------------------------
0000F384                            
0000F384                            Obj0D:					; XREF: Obj_Index
0000F384 7000                       		moveq	#0,d0
0000F386 1028 0024                  		move.b	$24(a0),d0
0000F38A 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F38E 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F392 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F398 6100 BB1C                  		bsr.w	AnimateSprite
0000F39C 6100 EACA                  		bsr.w	DisplaySprite
0000F3A0 3028 0008                  		move.w	8(a0),d0
0000F3A4 0240 FF80                  		andi.w	#$FF80,d0
0000F3A8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F3AC 0441 0080                  		subi.w	#$80,d1
0000F3B0 0241 FF80                  		andi.w	#$FF80,d1
0000F3B4 9041                       		sub.w	d1,d0
0000F3B6 0C40 0280                  		cmpi.w	#$280,d0
0000F3BA 6200 EAE8                  		bhi.w	DeleteObject
0000F3BE 4E75                       		rts	
0000F3C0                            ; ===========================================================================
0000F3C0 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F3C2 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F3C4 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F3C6 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F3C8 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F3CA                            ; ===========================================================================
0000F3CA                            
0000F3CA                            Obj0D_Main:				; XREF: Obj0D_Index
0000F3CA 5428 0024                  		addq.b	#2,$24(a0)
0000F3CE 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F3D6 317C 0680 0002             		move.w	#$680,2(a0)
0000F3DC 117C 0004 0001             		move.b	#4,1(a0)
0000F3E2 117C 0018 0019             		move.b	#$18,$19(a0)
0000F3E8 117C 0004 0018             		move.b	#4,$18(a0)
0000F3EE                            
0000F3EE                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F3EE 3038 D008                  		move.w	($FFFFD008).w,d0
0000F3F2 9068 0008                  		sub.w	8(a0),d0
0000F3F6 6500                       		bcs.s	locret_EBBA
0000F3F8 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F3FC 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F3FE 303C 00CF                  		move.w	#$CF,d0
0000F402 4EB9 0000 1398             		jsr	(PlaySound).l	; play signpost	sound
0000F408 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F40C 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F412 5428 0024                  		addq.b	#2,$24(a0)
0000F416                            
0000F416                            locret_EBBA:
0000F416 4E75                       		rts	
0000F418                            ; ===========================================================================
0000F418                            
0000F418                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F418 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F41C 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F41E 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F424 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F428 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F42E 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F430 5428 0024                  		addq.b	#2,$24(a0)
0000F434                            
0000F434                            Obj0D_Sparkle:
0000F434 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F438 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F43A 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F440 7000                       		moveq	#0,d0
0000F442 1028 0034                  		move.b	$34(a0),d0
0000F446 5428 0034                  		addq.b	#2,$34(a0)
0000F44A 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F450 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F454 6100 EE98                  		bsr.w	SingleObjLoad
0000F458 6600                       		bne.s	locret_EC42
0000F45A 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F45E 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F464 101A                       		move.b	(a2)+,d0
0000F466 4880                       		ext.w	d0
0000F468 D068 0008                  		add.w	8(a0),d0
0000F46C 3340 0008                  		move.w	d0,8(a1)
0000F470 101A                       		move.b	(a2)+,d0
0000F472 4880                       		ext.w	d0
0000F474 D068 000C                  		add.w	$C(a0),d0
0000F478 3340 000C                  		move.w	d0,$C(a1)
0000F47C 237C 0000 A654 0004        		move.l	#Map_obj25,4(a1)
0000F484 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F48A 137C 0004 0001             		move.b	#4,1(a1)
0000F490 137C 0002 0018             		move.b	#2,$18(a1)
0000F496 137C 0008 0019             		move.b	#8,$19(a1)
0000F49C                            
0000F49C                            locret_EC42:
0000F49C 4E75                       		rts	
0000F49E                            ; ===========================================================================
0000F49E E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F4A0 0808                       		dc.b	8,   8
0000F4A2 F000                       		dc.b -$10,   0
0000F4A4 18F8                       		dc.b  $18,  -8
0000F4A6 00F8                       		dc.b	0,  -8
0000F4A8 1000                       		dc.b  $10,   0
0000F4AA E808                       		dc.b -$18,   8
0000F4AC 1810                       		dc.b  $18, $10
0000F4AE                            ; ===========================================================================
0000F4AE                            
0000F4AE                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F4AE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F4B2 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F4B6 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F4BC 6600                       		bne.s	loc_EC70
0000F4BE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F4C4 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F4CA 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F4CC 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F4D2 6000                       		bra.s	loc_EC70
0000F4D4                            
0000F4D4                            Obj0D_MoveLeft:
0000F4D4 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F4DA                            
0000F4DA                            loc_EC70:
0000F4DA 4A38 D000                  		tst.b	($FFFFD000).w
0000F4DE 6700                       		beq.s	loc_EC86
0000F4E0 3038 D008                  		move.w	($FFFFD008).w,d0
0000F4E4 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F4E8 0641 0128                  		addi.w	#$128,d1
0000F4EC B041                       		cmp.w	d1,d0
0000F4EE 6500                       		bcs.s	locret_ECEE
0000F4F0                            
0000F4F0                            loc_EC86:
0000F4F0 5428 0024                  		addq.b	#2,$24(a0)
0000F4F4                            
0000F4F4                            ; ---------------------------------------------------------------------------
0000F4F4                            ; Subroutine to	set up bonuses at the end of an	act
0000F4F4                            ; ---------------------------------------------------------------------------
0000F4F4                            
0000F4F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F4F4                            
0000F4F4                            
0000F4F4                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F4F4 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F4F8 6600                       		bne.s	locret_ECEE
0000F4FA 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F500 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F504 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F508 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F50E 7010                       		moveq	#$10,d0
0000F510 4EB9 0000 15B4             		jsr	(LoadPLC2).l	; load title card patterns
0000F516 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F51C 7000                       		moveq	#0,d0
0000F51E 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F522 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F526 7200                       		moveq	#0,d1
0000F528 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F52C D041                       		add.w	d1,d0		; add up your time
0000F52E 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F532 7214                       		moveq	#$14,d1
0000F534 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F536 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F538 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F53A                            
0000F53A                            loc_ECD0:
0000F53A D040                       		add.w	d0,d0
0000F53C 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F542 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F546 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F54A 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F54E 303C 008E                  		move.w	#$8E,d0
0000F552 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F558                            
0000F558                            locret_ECEE:
0000F558 4E75                       		rts	
0000F55A                            ; End of function GotThroughAct
0000F55A                            
0000F55A                            ; ===========================================================================
0000F55A 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F56E 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F584                            ; ===========================================================================
0000F584                            
0000F584                            locret_ED1A:				; XREF: Obj0D_Index
0000F584 4E75                       		rts	
0000F586                            ; ===========================================================================
0000F586                            Ani_obj0D:
0000F586                            	include "_anim\obj0D.asm"
0000F586                            ; ---------------------------------------------------------------------------
0000F586                            ; Animation script - signpost
0000F586                            ; ---------------------------------------------------------------------------
0000F586 0000                       		dc.w byte_ED24-Ani_obj0D
0000F588 0000                       		dc.w byte_ED28-Ani_obj0D
0000F58A 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F58C 0000                       		dc.w byte_ED34-Ani_obj0D
0000F58E 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F592 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F598 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F59E 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F5A2 00                         		even
0000F5A2 00                         		even
0000F5A2                            
0000F5A2                            ; ---------------------------------------------------------------------------
0000F5A2                            ; Sprite mappings - signpost
0000F5A2                            ; ---------------------------------------------------------------------------
0000F5A2                            Map_obj0D:
0000F5A2                            	include "_maps\obj0D.asm"
0000F5A2                            ; ---------------------------------------------------------------------------
0000F5A2                            ; Sprite mappings - signpost
0000F5A2                            ; ---------------------------------------------------------------------------
0000F5A2 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F5A6 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F5AA 0000                       		dc.w byte_ED73-Map_obj0D
0000F5AC 03                         byte_ED42:	dc.b 3
0000F5AD F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F5B2 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F5B7 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F5BC 02                         byte_ED52:	dc.b 2
0000F5BD F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F5C2 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F5C7 02                         byte_ED5D:	dc.b 2
0000F5C8 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F5CD 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F5D2 02                         byte_ED68:	dc.b 2
0000F5D3 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F5D8 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F5DD 03                         byte_ED73:	dc.b 3
0000F5DE F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F5E3 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F5E8 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F5EE 00                         		even
0000F5EE 00                         		even
0000F5EE                            
0000F5EE                            ; ===========================================================================
0000F5EE                            ; ---------------------------------------------------------------------------
0000F5EE                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F5EE                            ; ---------------------------------------------------------------------------
0000F5EE                            
0000F5EE                            Obj4C:					; XREF: Obj_Index
0000F5EE 7000                       		moveq	#0,d0
0000F5F0 1028 0024                  		move.b	$24(a0),d0
0000F5F4 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F5F8 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F5FC 6000 0000                  		bra.w	Obj4D_ChkDel
0000F600                            ; ===========================================================================
0000F600 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F602 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F604 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F606 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F608 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F60A 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F60C                            ; ===========================================================================
0000F60C                            
0000F60C                            Obj4C_Main:				; XREF: Obj4C_Index
0000F60C 5428 0024                  		addq.b	#2,$24(a0)
0000F610 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F618 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F61E 117C 0004 0001             		move.b	#4,1(a0)
0000F624 117C 0001 0018             		move.b	#1,$18(a0)
0000F62A 117C 0038 0019             		move.b	#$38,$19(a0)
0000F630 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F636                            
0000F636                            loc_EDCC:				; XREF: Obj4C_Index
0000F636 5368 0032                  		subq.w	#1,$32(a0)
0000F63A 6A00                       		bpl.s	locret_EDF0
0000F63C 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F642 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F646 3228 000C                  		move.w	$C(a0),d1
0000F64A B041                       		cmp.w	d1,d0
0000F64C 6400                       		bcc.s	locret_EDF0
0000F64E 0441 0170                  		subi.w	#$170,d1
0000F652 B041                       		cmp.w	d1,d0
0000F654 6500                       		bcs.s	locret_EDF0
0000F656 5428 0024                  		addq.b	#2,$24(a0)
0000F65A                            
0000F65A                            locret_EDF0:
0000F65A 4E75                       		rts	
0000F65C                            ; ===========================================================================
0000F65C                            
0000F65C                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F65C 5428 0024                  		addq.b	#2,$24(a0)
0000F660 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F664 6600                       		bne.s	loc_EE18
0000F666 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F66A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F670 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F676 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F67C 2348 003C                  		move.l	a0,$3C(a1)
0000F680                            
0000F680                            loc_EE18:
0000F680 117C 0001 001C             		move.b	#1,$1C(a0)
0000F686 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F68A 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F68C 117C 0004 001C             		move.b	#4,$1C(a0)
0000F692 6000                       		bra.s	Obj4C_Display
0000F694                            ; ===========================================================================
0000F694                            
0000F694                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F694 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F698 08E9 0001 0022             		bset	#1,$22(a1)
0000F69E 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F6A4 6000                       		bra.s	Obj4C_Display
0000F6A6                            ; ===========================================================================
0000F6A6                            
0000F6A6                            loc_EE3E:				; XREF: Obj4C_Index
0000F6A6 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F6AA 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F6AC 5428 0024                  		addq.b	#2,$24(a0)
0000F6B0 4E75                       		rts	
0000F6B2                            ; ===========================================================================
0000F6B2                            
0000F6B2                            Obj4C_Display:				; XREF: Obj4C_Index
0000F6B2 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F6B8 6100 B7FC                  		bsr.w	AnimateSprite
0000F6BC 6100 E7AA                  		bsr.w	DisplaySprite
0000F6C0 4E75                       		rts	
0000F6C2                            ; ===========================================================================
0000F6C2                            
0000F6C2                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F6C2 117C 0000 001C             		move.b	#0,$1C(a0)
0000F6C8 117C 0002 0024             		move.b	#2,$24(a0)
0000F6CE 4A28 0028                  		tst.b	$28(a0)
0000F6D2 6700 E7D0                  		beq.w	DeleteObject
0000F6D6 4E75                       		rts	
0000F6D8                            ; ===========================================================================
0000F6D8                            ; ---------------------------------------------------------------------------
0000F6D8                            ; Object 4D - lava geyser / lavafall (MZ)
0000F6D8                            ; ---------------------------------------------------------------------------
0000F6D8                            
0000F6D8                            Obj4D:					; XREF: Obj_Index
0000F6D8 7000                       		moveq	#0,d0
0000F6DA 1028 0024                  		move.b	$24(a0),d0
0000F6DE 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F6E2 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F6E6 6000 E780                  		bra.w	DisplaySprite
0000F6EA                            ; ===========================================================================
0000F6EA 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F6EC 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F6EE 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F6F0 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F6F2                            
0000F6F2 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F6F6                            ; ===========================================================================
0000F6F6                            
0000F6F6                            Obj4D_Main:				; XREF: Obj4D_Index
0000F6F6 5428 0024                  		addq.b	#2,$24(a0)
0000F6FA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F700 4A28 0028                  		tst.b	$28(a0)
0000F704 6700                       		beq.s	loc_EEA4
0000F706 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F70C                            
0000F70C                            loc_EEA4:
0000F70C 7000                       		moveq	#0,d0
0000F70E 1028 0028                  		move.b	$28(a0),d0
0000F712 D040                       		add.w	d0,d0
0000F714 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F71A 2248                       		movea.l	a0,a1
0000F71C 7201                       		moveq	#1,d1
0000F71E 6100                       		bsr.s	Obj4D_MakeLava
0000F720 6000                       		bra.s	loc_EF10
0000F722                            ; ===========================================================================
0000F722                            
0000F722                            Obj4D_Loop:
0000F722 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F726 6600                       		bne.s	loc_EF0A
0000F728                            
0000F728                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F728 12BC 004D                  		move.b	#$4D,0(a1)
0000F72C 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F734 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F73A 137C 0004 0001             		move.b	#4,1(a1)
0000F740 137C 0020 0019             		move.b	#$20,$19(a1)
0000F746 3368 0008 0008             		move.w	8(a0),8(a1)
0000F74C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F752 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F758 137C 0001 0018             		move.b	#1,$18(a1)
0000F75E 137C 0005 001C             		move.b	#5,$1C(a1)
0000F764 4A28 0028                  		tst.b	$28(a0)
0000F768 6700                       		beq.s	loc_EF0A
0000F76A 137C 0002 001C             		move.b	#2,$1C(a1)
0000F770                            
0000F770                            loc_EF0A:
0000F770 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F774 4E75                       		rts	
0000F776                            ; ===========================================================================
0000F776                            
0000F776                            loc_EF10:				; XREF: Obj4D_Main
0000F776 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F77C 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F782 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F788 137C 0093 0020             		move.b	#$93,$20(a1)
0000F78E 137C 0080 0016             		move.b	#$80,$16(a1)
0000F794 08E9 0004 0001             		bset	#4,1(a1)
0000F79A 5829 0024                  		addq.b	#4,$24(a1)
0000F79E 2348 003C                  		move.l	a0,$3C(a1)
0000F7A2 4A28 0028                  		tst.b	$28(a0)
0000F7A6 6700                       		beq.s	Obj4D_PlaySnd
0000F7A8 7200                       		moveq	#0,d1
0000F7AA 6100 FF76                  		bsr.w	Obj4D_Loop
0000F7AE 5429 0024                  		addq.b	#2,$24(a1)
0000F7B2 08E9 0004 0002             		bset	#4,2(a1)
0000F7B8 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F7BE 137C 0000 0018             		move.b	#0,$18(a1)
0000F7C4 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F7CA 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F7D0 117C 0000 0028             		move.b	#0,$28(a0)
0000F7D6                            
0000F7D6                            Obj4D_PlaySnd:
0000F7D6 303C 00C8                  		move.w	#$C8,d0
0000F7DA 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play flame sound
0000F7E0                            
0000F7E0                            Obj4D_Action:				; XREF: Obj4D_Index
0000F7E0 7000                       		moveq	#0,d0
0000F7E2 1028 0028                  		move.b	$28(a0),d0
0000F7E6 D040                       		add.w	d0,d0
0000F7E8 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F7EC 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F7F0 6100 E650                  		bsr.w	SpeedToPos
0000F7F4 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F7FA 6100 B6BA                  		bsr.w	AnimateSprite
0000F7FE                            
0000F7FE                            Obj4D_ChkDel:				; XREF: Obj4C
0000F7FE 3028 0008                  		move.w	8(a0),d0
0000F802 0240 FF80                  		andi.w	#$FF80,d0
0000F806 3238 F700                  		move.w	($FFFFF700).w,d1
0000F80A 0441 0080                  		subi.w	#$80,d1
0000F80E 0241 FF80                  		andi.w	#$FF80,d1
0000F812 9041                       		sub.w	d1,d0
0000F814 0C40 0280                  		cmpi.w	#$280,d0
0000F818 6200 E68A                  		bhi.w	DeleteObject
0000F81C 4E75                       		rts	
0000F81E                            ; ===========================================================================
0000F81E 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F820 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F822                            ; ===========================================================================
0000F822                            
0000F822                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F822 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F828 3028 0030                  		move.w	$30(a0),d0
0000F82C B068 000C                  		cmp.w	$C(a0),d0
0000F830 6400                       		bcc.s	locret_EFDA
0000F832 5828 0024                  		addq.b	#4,$24(a0)
0000F836 2268 003C                  		movea.l	$3C(a0),a1
0000F83A 137C 0003 001C             		move.b	#3,$1C(a1)
0000F840                            
0000F840                            locret_EFDA:
0000F840 4E75                       		rts	
0000F842                            ; ===========================================================================
0000F842                            
0000F842                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F842 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F848 3028 0030                  		move.w	$30(a0),d0
0000F84C B068 000C                  		cmp.w	$C(a0),d0
0000F850 6400                       		bcc.s	locret_EFFA
0000F852 5828 0024                  		addq.b	#4,$24(a0)
0000F856 2268 003C                  		movea.l	$3C(a0),a1
0000F85A 137C 0001 001C             		move.b	#1,$1C(a1)
0000F860                            
0000F860                            locret_EFFA:
0000F860 4E75                       		rts	
0000F862                            ; ===========================================================================
0000F862                            
0000F862                            loc_EFFC:				; XREF: Obj4D_Index
0000F862 2268 003C                  		movea.l	$3C(a0),a1
0000F866 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F86C 6700 0000                  		beq.w	Obj4D_Delete
0000F870 3029 000C                  		move.w	$C(a1),d0
0000F874 0640 0060                  		addi.w	#$60,d0
0000F878 3140 000C                  		move.w	d0,$C(a0)
0000F87C 9068 0030                  		sub.w	$30(a0),d0
0000F880 4440                       		neg.w	d0
0000F882 7208                       		moveq	#8,d1
0000F884 0C40 0040                  		cmpi.w	#$40,d0
0000F888 6C00                       		bge.s	loc_F026
0000F88A 720B                       		moveq	#$B,d1
0000F88C                            
0000F88C                            loc_F026:
0000F88C 0C40 0080                  		cmpi.w	#$80,d0
0000F890 6F00                       		ble.s	loc_F02E
0000F892 720E                       		moveq	#$E,d1
0000F894                            
0000F894                            loc_F02E:
0000F894 5328 001E                  		subq.b	#1,$1E(a0)
0000F898 6A00                       		bpl.s	loc_F04C
0000F89A 117C 0007 001E             		move.b	#7,$1E(a0)
0000F8A0 5228 001B                  		addq.b	#1,$1B(a0)
0000F8A4 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F8AA 6500                       		bcs.s	loc_F04C
0000F8AC 117C 0000 001B             		move.b	#0,$1B(a0)
0000F8B2                            
0000F8B2                            loc_F04C:
0000F8B2 1028 001B                  		move.b	$1B(a0),d0
0000F8B6 D001                       		add.b	d1,d0
0000F8B8 1140 001A                  		move.b	d0,$1A(a0)
0000F8BC 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F8C0                            ; ===========================================================================
0000F8C0                            
0000F8C0                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F8C0 6000 E5E2                  		bra.w	DeleteObject
0000F8C4                            ; ===========================================================================
0000F8C4                            ; ---------------------------------------------------------------------------
0000F8C4                            ; Object 4E - advancing	wall of	lava (MZ)
0000F8C4                            ; ---------------------------------------------------------------------------
0000F8C4                            
0000F8C4                            Obj4E:					; XREF: Obj_Index
0000F8C4 7000                       		moveq	#0,d0
0000F8C6 1028 0024                  		move.b	$24(a0),d0
0000F8CA 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F8CE 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F8D2                            ; ===========================================================================
0000F8D2 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F8D4 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F8D6 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F8D8 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F8DA 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F8DC                            ; ===========================================================================
0000F8DC                            
0000F8DC                            Obj4E_Main:				; XREF: Obj4E_Index
0000F8DC 5828 0024                  		addq.b	#4,$24(a0)
0000F8E0 2248                       		movea.l	a0,a1
0000F8E2 7201                       		moveq	#1,d1
0000F8E4 6000                       		bra.s	Obj4E_Main2
0000F8E6                            ; ===========================================================================
0000F8E6                            
0000F8E6                            Obj4E_Loop:
0000F8E6 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F8EA 6600                       		bne.s	loc_F0C8
0000F8EC                            
0000F8EC                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F8EC 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F8F0 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F8F8 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F8FE 137C 0004 0001             		move.b	#4,1(a1)
0000F904 137C 0050 0019             		move.b	#$50,$19(a1)
0000F90A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F910 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F916 137C 0001 0018             		move.b	#1,$18(a1)
0000F91C 137C 0000 001C             		move.b	#0,$1C(a1)
0000F922 137C 0094 0020             		move.b	#$94,$20(a1)
0000F928 2348 003C                  		move.l	a0,$3C(a1)
0000F92C                            
0000F92C                            loc_F0C8:
0000F92C 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F930                            
0000F930 5C29 0024                  		addq.b	#6,$24(a1)
0000F934 137C 0004 001A             		move.b	#4,$1A(a1)
0000F93A                            
0000F93A                            Obj4E_Action:				; XREF: Obj4E_Index
0000F93A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F93E 9068 0008                  		sub.w	8(a0),d0
0000F942 6400                       		bcc.s	Obj4E_ChkSonic
0000F944 4440                       		neg.w	d0
0000F946                            
0000F946                            Obj4E_ChkSonic:
0000F946 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F94A 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F94C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F950 9068 000C                  		sub.w	$C(a0),d0
0000F954 6400                       		bcc.s	loc_F0F4
0000F956 4440                       		neg.w	d0
0000F958                            
0000F958                            loc_F0F4:
0000F958 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F95C 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F95E 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F964 6000                       		bra.s	Obj4E_Solid
0000F966                            ; ===========================================================================
0000F966                            
0000F966                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F966 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F96A 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F96C 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F972 5528 0024                  		subq.b	#2,$24(a0)
0000F976                            
0000F976                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F976 323C 002B                  		move.w	#$2B,d1
0000F97A 343C 0018                  		move.w	#$18,d2
0000F97E 3602                       		move.w	d2,d3
0000F980 5243                       		addq.w	#1,d3
0000F982 3828 0008                  		move.w	8(a0),d4
0000F986 1028 0024                  		move.b	$24(a0),d0
0000F98A 3F00                       		move.w	d0,-(sp)
0000F98C 6100 0000                  		bsr.w	SolidObject
0000F990 301F                       		move.w	(sp)+,d0
0000F992 1140 0024                  		move.b	d0,$24(a0)
0000F996 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F99C 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F99E 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F9A2 4228 0036                  		clr.b	$36(a0)
0000F9A6                            
0000F9A6                            Obj4E_Animate:
0000F9A6 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F9AC 6100 B508                  		bsr.w	AnimateSprite
0000F9B0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F9B6 6400                       		bcc.s	Obj4E_ChkDel
0000F9B8 6100 E488                  		bsr.w	SpeedToPos
0000F9BC                            
0000F9BC                            Obj4E_ChkDel:
0000F9BC 6100 E4AA                  		bsr.w	DisplaySprite
0000F9C0 4A28 0036                  		tst.b	$36(a0)
0000F9C4 6600                       		bne.s	locret_F17E
0000F9C6 3028 0008                  		move.w	8(a0),d0
0000F9CA 0240 FF80                  		andi.w	#$FF80,d0
0000F9CE 3238 F700                  		move.w	($FFFFF700).w,d1
0000F9D2 0441 0080                  		subi.w	#$80,d1
0000F9D6 0241 FF80                  		andi.w	#$FF80,d1
0000F9DA 9041                       		sub.w	d1,d0
0000F9DC 0C40 0280                  		cmpi.w	#$280,d0
0000F9E0 6200                       		bhi.s	Obj4E_ChkGone
0000F9E2                            
0000F9E2                            locret_F17E:
0000F9E2 4E75                       		rts	
0000F9E4                            ; ===========================================================================
0000F9E4                            
0000F9E4                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F9E4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F9E8 7000                       		moveq	#0,d0
0000F9EA 1028 0023                  		move.b	$23(a0),d0
0000F9EE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F9F4 117C 0008 0024             		move.b	#8,$24(a0)
0000F9FA 4E75                       		rts	
0000F9FC                            ; ===========================================================================
0000F9FC                            
0000F9FC                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F9FC 2268 003C                  		movea.l	$3C(a0),a1
0000FA00 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FA06 6700                       		beq.s	Obj4E_Delete
0000FA08 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FA0E 0468 0080 0008             		subi.w	#$80,8(a0)
0000FA14 6000 E452                  		bra.w	DisplaySprite
0000FA18                            ; ===========================================================================
0000FA18                            
0000FA18                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FA18 6000 E48A                  		bra.w	DeleteObject
0000FA1C                            ; ===========================================================================
0000FA1C                            ; ---------------------------------------------------------------------------
0000FA1C                            ; Object 54 - invisible	lava tag (MZ)
0000FA1C                            ; ---------------------------------------------------------------------------
0000FA1C                            
0000FA1C                            Obj54:					; XREF: Obj_Index
0000FA1C 7000                       		moveq	#0,d0
0000FA1E 1028 0024                  		move.b	$24(a0),d0
0000FA22 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FA26 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FA2A                            ; ===========================================================================
0000FA2A 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FA2C 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FA2E                            
0000FA2E 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FA32                            ; ===========================================================================
0000FA32                            
0000FA32                            Obj54_Main:				; XREF: Obj54_Index
0000FA32 5428 0024                  		addq.b	#2,$24(a0)
0000FA36 7000                       		moveq	#0,d0
0000FA38 1028 0028                  		move.b	$28(a0),d0
0000FA3C 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FA42 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FA4A 117C 0084 0001             		move.b	#$84,1(a0)
0000FA50                            
0000FA50                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FA50 3028 0008                  		move.w	8(a0),d0
0000FA54 0240 FF80                  		andi.w	#$FF80,d0
0000FA58 3238 F700                  		move.w	($FFFFF700).w,d1
0000FA5C 0441 0080                  		subi.w	#$80,d1
0000FA60 0241 FF80                  		andi.w	#$FF80,d1
0000FA64 9041                       		sub.w	d1,d0
0000FA66 6B00 E43C                  		bmi.w	DeleteObject
0000FA6A 0C40 0280                  		cmpi.w	#$280,d0
0000FA6E 6200 E434                  		bhi.w	DeleteObject
0000FA72 4E75                       		rts	
0000FA74                            ; ===========================================================================
0000FA74                            ; ---------------------------------------------------------------------------
0000FA74                            ; Sprite mappings - invisible lava tag (MZ)
0000FA74                            ; ---------------------------------------------------------------------------
0000FA74                            Map_obj54:
0000FA74                            	include "_maps\obj54.asm"
0000FA74                            ; ---------------------------------------------------------------------------
0000FA74                            ; Sprite mappings - invisible lava tag (MZ)
0000FA74                            ; ---------------------------------------------------------------------------
0000FA74 0000                       		dc.w byte_F212-Map_obj54
0000FA76 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FA78 00                         		even
0000FA78 00                         		even
0000FA78                            
0000FA78                            Ani_obj4C:
0000FA78                            	include "_anim\obj4C.asm"
0000FA78                            ; ---------------------------------------------------------------------------
0000FA78                            ; Animation script - geyser of lava (MZ)
0000FA78                            ; ---------------------------------------------------------------------------
0000FA78 0000                       		dc.w byte_F220-Ani_obj4C
0000FA7A 0000                       		dc.w byte_F22A-Ani_obj4C
0000FA7C 0000                       		dc.w byte_F22E-Ani_obj4C
0000FA7E 0000                       		dc.w byte_F232-Ani_obj4C
0000FA80 0000                       		dc.w byte_F23A-Ani_obj4C
0000FA82 0000                       		dc.w byte_F23E-Ani_obj4C
0000FA84 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FA8E 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FA92 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FA96 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FA9E 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FAA2 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FAA6                            		even
0000FAA6                            		even
0000FAA6                            
0000FAA6                            Ani_obj4E:
0000FAA6                            	include "_anim\obj4E.asm"
0000FAA6                            ; ---------------------------------------------------------------------------
0000FAA6                            ; Animation script - advancing wall of lava (MZ)
0000FAA6                            ; ---------------------------------------------------------------------------
0000FAA6 0000                       		dc.w byte_F244-Ani_obj4E
0000FAA8 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FAAE                            		even
0000FAAE                            		even
0000FAAE                            
0000FAAE                            ; ---------------------------------------------------------------------------
0000FAAE                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FAAE                            ; ---------------------------------------------------------------------------
0000FAAE                            Map_obj4C:
0000FAAE                            	include "_maps\obj4C.asm"
0000FAAE                            ; ---------------------------------------------------------------------------
0000FAAE                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FAAE                            ; ---------------------------------------------------------------------------
0000FAAE 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FAB2 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FAB6 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FABA 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FABE 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FAC2 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FAC6 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FACA 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FACE 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FAD2 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FAD6 02                         byte_F272:	dc.b 2
0000FAD7 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FADC EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FAE1 02                         byte_F27D:	dc.b 2
0000FAE2 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FAE7 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FAEC 04                         byte_F288:	dc.b 4
0000FAED EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FAF2 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FAF7 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FAFC EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FB01 04                         byte_F29D:	dc.b 4
0000FB02 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FB07 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FB0C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FB11 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FB16 06                         byte_F2B2:	dc.b 6
0000FB17 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FB1C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FB21 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FB26 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FB2B E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FB30 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FB35 06                         byte_F2D1:	dc.b 6
0000FB36 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FB3B F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FB40 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FB45 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FB4A E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FB4F E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FB54 02                         byte_F2F0:	dc.b 2
0000FB55 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FB5A E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FB5F 02                         byte_F2FB:	dc.b 2
0000FB60 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FB65 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FB6A 0A                         byte_F306:	dc.b $A
0000FB6B 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB70 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB75 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB7A B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB7F D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FB84 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FB89 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FB8E F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FB93 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FB98 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FB9D 0A                         byte_F339:	dc.b $A
0000FB9E 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FBA3 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FBA8 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FBAD B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FBB2 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FBB7 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FBBC F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FBC1 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FBC6 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FBCB 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FBD0 0A                         byte_F36C:	dc.b $A
0000FBD1 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FBD6 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FBDB B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FBE0 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FBE5 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FBEA D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FBEF F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FBF4 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FBF9 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FBFE 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FC03 06                         byte_F39F:	dc.b 6
0000FC04 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FC09 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FC0E B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FC13 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FC18 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FC1D D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FC22 06                         byte_F3BE:	dc.b 6
0000FC23 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FC28 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FC2D B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FC32 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FC37 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FC3C D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FC41 06                         byte_F3DD:	dc.b 6
0000FC42 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FC47 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FC4C B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FC51 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FC56 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FC5B D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FC60 10                         byte_F3FC:	dc.b $10
0000FC61 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FC66 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FC6B B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FC70 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FC75 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FC7A D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FC7F F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FC84 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FC89 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FC8E 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FC93 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FC98 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FC9D 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FCA2 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FCA7 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FCAC 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FCB1 10                         byte_F44D:	dc.b $10
0000FCB2 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FCB7 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FCBC B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FCC1 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FCC6 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FCCB D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FCD0 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FCD5 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FCDA 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FCDF 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FCE4 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FCE9 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FCEE 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FCF3 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FCF8 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FCFD 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FD02 10                         byte_F49E:	dc.b $10
0000FD03 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FD08 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FD0D B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FD12 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FD17 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FD1C D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FD21 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FD26 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FD2B 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FD30 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FD35 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FD3A 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FD3F 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FD44 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FD49 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FD4E 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FD53 06                         byte_F4EF:	dc.b 6
0000FD54 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FD59 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FD5E E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FD63 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FD68 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FD6D D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FD72 06                         byte_F50E:	dc.b 6
0000FD73 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FD78 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FD7D E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FD82 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FD87 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FD8C D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FD91 00                         byte_F52D:	dc.b 0
0000FD92                            		even
0000FD92                            		even
0000FD92                            
0000FD92                            ; ---------------------------------------------------------------------------
0000FD92                            ; Sprite mappings - advancing wall of lava (MZ)
0000FD92                            ; ---------------------------------------------------------------------------
0000FD92                            Map_obj4E:
0000FD92                            	include "_maps\obj4E.asm"
0000FD92                            ; ---------------------------------------------------------------------------
0000FD92                            ; Sprite mappings - advancing wall of lava (MZ)
0000FD92                            ; ---------------------------------------------------------------------------
0000FD92 0000                       		dc.w byte_F538-Map_obj4E
0000FD94 0000                       		dc.w byte_F566-Map_obj4E
0000FD96 0000                       		dc.w byte_F594-Map_obj4E
0000FD98 0000                       		dc.w byte_F5C2-Map_obj4E
0000FD9A 0000                       		dc.w byte_F5F0-Map_obj4E
0000FD9C 09                         byte_F538:	dc.b 9
0000FD9D E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FDA2 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FDA7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDAC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDB1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FDB6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FDBB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FDC0 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FDC5 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FDCA 09                         byte_F566:	dc.b 9
0000FDCB E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FDD0 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FDD5 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDDA E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDDF 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FDE4 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FDE9 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FDEE E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FDF3 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FDF8 09                         byte_F594:	dc.b 9
0000FDF9 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FDFE 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FE03 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FE08 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FE0D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FE12 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE17 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE1C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE21 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE26 09                         byte_F5C2:	dc.b 9
0000FE27 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FE2C 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FE31 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FE36 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FE3B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FE40 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE45 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE4A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE4F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE54 08                         byte_F5F0:	dc.b 8
0000FE55 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FE5A 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FE5F E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FE64 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FE69 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE6E 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE73 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE78 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE7E 00                         		even
0000FE7E 00                         		even
0000FE7E                            
0000FE7E                            ; ===========================================================================
0000FE7E                            ; ---------------------------------------------------------------------------
0000FE7E                            ; Object 40 - Moto Bug enemy (GHZ)
0000FE7E                            ; ---------------------------------------------------------------------------
0000FE7E                            
0000FE7E                            Obj40:					; XREF: Obj_Index
0000FE7E 7000                       		moveq	#0,d0
0000FE80 1028 0024                  		move.b	$24(a0),d0
0000FE84 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FE88 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FE8C                            ; ===========================================================================
0000FE8C 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FE8E 0000                       		dc.w Obj40_Action-Obj40_Index
0000FE90 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FE92 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FE94                            ; ===========================================================================
0000FE94                            
0000FE94                            Obj40_Main:				; XREF: Obj40_Index
0000FE94 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FE9C 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FEA2 117C 0004 0001             		move.b	#4,1(a0)
0000FEA8 117C 0004 0018             		move.b	#4,$18(a0)
0000FEAE 117C 0014 0019             		move.b	#$14,$19(a0)
0000FEB4 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FEB8 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FEBA 117C 000E 0016             		move.b	#$E,$16(a0)
0000FEC0 117C 0008 0017             		move.b	#8,$17(a0)
0000FEC6 117C 000C 0020             		move.b	#$C,$20(a0)
0000FECC 6100 DF02                  		bsr.w	ObjectFall
0000FED0 4EB9 0000 0000             		jsr	ObjHitFloor
0000FED6 4A41                       		tst.w	d1
0000FED8 6A00                       		bpl.s	locret_F68A
0000FEDA D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FEDE 317C 0000 0012             		move.w	#0,$12(a0)
0000FEE4 5428 0024                  		addq.b	#2,$24(a0)
0000FEE8 0868 0000 0022             		bchg	#0,$22(a0)
0000FEEE                            
0000FEEE                            locret_F68A:
0000FEEE 4E75                       		rts	
0000FEF0                            ; ===========================================================================
0000FEF0                            
0000FEF0                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FEF0 5828 0024                  		addq.b	#4,$24(a0)
0000FEF4 6000 0000                  		bra.w	Obj40_Animate
0000FEF8                            ; ===========================================================================
0000FEF8                            
0000FEF8                            Obj40_Action:				; XREF: Obj40_Index
0000FEF8 7000                       		moveq	#0,d0
0000FEFA 1028 0025                  		move.b	$25(a0),d0
0000FEFE 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FF02 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FF06 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FF0C 6100 AFA8                  		bsr.w	AnimateSprite
0000FF10                            
0000FF10                            ; ---------------------------------------------------------------------------
0000FF10                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FF10                            ; ---------------------------------------------------------------------------
0000FF10                            
0000FF10                            MarkObjGone:
0000FF10 3028 0008                  		move.w	8(a0),d0
0000FF14 0240 FF80                  		andi.w	#$FF80,d0
0000FF18 3238 F700                  		move.w	($FFFFF700).w,d1
0000FF1C 0441 0080                  		subi.w	#$80,d1
0000FF20 0241 FF80                  		andi.w	#$FF80,d1
0000FF24 9041                       		sub.w	d1,d0
0000FF26 0C40 0280                  		cmpi.w	#$280,d0
0000FF2A 6200 0000                  		bhi.w	Mark_ChkGone
0000FF2E 6000 DF38                  		bra.w	DisplaySprite
0000FF32                            ; ===========================================================================
0000FF32                            
0000FF32                            Mark_ChkGone:
0000FF32 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FF36 7000                       		moveq	#0,d0
0000FF38 1028 0023                  		move.b	$23(a0),d0
0000FF3C 6700                       		beq.s	Mark_Delete
0000FF3E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FF44                            
0000FF44                            Mark_Delete:
0000FF44 6000 DF5E                  		bra.w	DeleteObject
0000FF48                            
0000FF48                            ; ===========================================================================
0000FF48 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FF4A 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FF4C                            ; ===========================================================================
0000FF4C                            
0000FF4C                            Obj40_Move:				; XREF: Obj40_Index2
0000FF4C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FF50 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FF52 5428 0025                  		addq.b	#2,$25(a0)
0000FF56 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FF5C 117C 0001 001C             		move.b	#1,$1C(a0)
0000FF62 0868 0000 0022             		bchg	#0,$22(a0)
0000FF68 6600                       		bne.s	locret_F70A
0000FF6A 4468 0010                  		neg.w	$10(a0)		; change direction
0000FF6E                            
0000FF6E                            locret_F70A:
0000FF6E 4E75                       		rts	
0000FF70                            ; ===========================================================================
0000FF70                            
0000FF70                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FF70 6100 DED0                  		bsr.w	SpeedToPos
0000FF74 4EB9 0000 0000             		jsr	ObjHitFloor
0000FF7A 0C41 FFF8                  		cmpi.w	#-8,d1
0000FF7E 6D00                       		blt.s	Obj40_Pause
0000FF80 0C41 000C                  		cmpi.w	#$C,d1
0000FF84 6C00                       		bge.s	Obj40_Pause
0000FF86 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FF8A 5328 0033                  		subq.b	#1,$33(a0)
0000FF8E 6A00                       		bpl.s	locret_F756
0000FF90 117C 000F 0033             		move.b	#$F,$33(a0)
0000FF96 6100 E356                  		bsr.w	SingleObjLoad
0000FF9A 6600                       		bne.s	locret_F756
0000FF9C 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FFA0 3368 0008 0008             		move.w	8(a0),8(a1)
0000FFA6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FFAC 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FFB2 137C 0002 001C             		move.b	#2,$1C(a1)
0000FFB8                            
0000FFB8                            locret_F756:
0000FFB8 4E75                       		rts	
0000FFBA                            ; ===========================================================================
0000FFBA                            
0000FFBA                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FFBA 5528 0025                  		subq.b	#2,$25(a0)
0000FFBE 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FFC4 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FFCA 117C 0000 001C             		move.b	#0,$1C(a0)
0000FFD0 4E75                       		rts	
0000FFD2                            ; ===========================================================================
0000FFD2                            
0000FFD2                            Obj40_Animate:				; XREF: Obj40_Index
0000FFD2 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FFD8 6100 AEDC                  		bsr.w	AnimateSprite
0000FFDC 6000 DE8A                  		bra.w	DisplaySprite
0000FFE0                            ; ===========================================================================
0000FFE0                            
0000FFE0                            Obj40_Delete:				; XREF: Obj40_Index
0000FFE0 6000 DEC2                  		bra.w	DeleteObject
0000FFE4                            ; ===========================================================================
0000FFE4                            Ani_obj40:
0000FFE4                            	include "_anim\obj40.asm"
0000FFE4                            ; ---------------------------------------------------------------------------
0000FFE4                            ; Animation script - Motobug enemy
0000FFE4                            ; ---------------------------------------------------------------------------
0000FFE4 0000                       		dc.w byte_F788-Ani_obj40
0000FFE6 0000                       		dc.w byte_F78C-Ani_obj40
0000FFE8 0000                       		dc.w byte_F792-Ani_obj40
0000FFEA 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FFEE 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FFF4 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00010002                            		even
00010002                            		even
00010002                            
00010002                            ; ---------------------------------------------------------------------------
00010002                            ; Sprite mappings - Moto Bug enemy (GHZ)
00010002                            ; ---------------------------------------------------------------------------
00010002                            Map_obj40:
00010002                            	include "_maps\obj40.asm"
00010002                            Map_cedc:
00010002 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
00010004 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
00010006 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
00010008 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0001000A 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0001000C 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0001000E 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
00010010 04                         Map_cedc_E: 	dc.b $4
00010011 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
00010016 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0001001B F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00010020 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
00010025 04                         Map_cedc_23: 	dc.b $4
00010026 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0001002B 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
00010030 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
00010035 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0001003A 05                         Map_cedc_38: 	dc.b $5
0001003B F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
00010040 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
00010045 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0001004A 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0001004F 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
00010054 01                         Map_cedc_52: 	dc.b $1
00010055 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0001005A 01                         Map_cedc_58: 	dc.b $1
0001005B FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
00010060 01                         Map_cedc_5E: 	dc.b $1
00010061 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
00010066 00                         Map_cedc_64: 	dc.b $0
00010068 00                         	even
00010068 00                         	even
00010068                            
00010068                            ; ===========================================================================
00010068                            ; ---------------------------------------------------------------------------
00010068                            ; Object 4F - blank
00010068                            ; ---------------------------------------------------------------------------
00010068                            
00010068                            Obj4F:					; XREF: Obj_Index
00010068 4E75                       		rts	
0001006A                            
0001006A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001006A                            
0001006A                            
0001006A                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0001006A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001006E D047                       		add.w	d7,d0
00010070 0240 0003                  		andi.w	#3,d0
00010074 6600                       		bne.s	loc_F836
00010076 7600                       		moveq	#0,d3
00010078 1628 0019                  		move.b	$19(a0),d3
0001007C 4A68 0010                  		tst.w	$10(a0)
00010080 6B00                       		bmi.s	loc_F82C
00010082 6100 0000                  		bsr.w	ObjHitWallRight
00010086 4A41                       		tst.w	d1
00010088 6A00                       		bpl.s	loc_F836
0001008A                            
0001008A                            loc_F828:
0001008A 7001                       		moveq	#1,d0
0001008C 4E75                       		rts	
0001008E                            ; ===========================================================================
0001008E                            
0001008E                            loc_F82C:
0001008E 4643                       		not.w	d3
00010090 6100 0000                  		bsr.w	ObjHitWallLeft
00010094 4A41                       		tst.w	d1
00010096 6BF2                       		bmi.s	loc_F828
00010098                            
00010098                            loc_F836:
00010098 7000                       		moveq	#0,d0
0001009A 4E75                       		rts	
0001009C                            ; End of function Obj50_ChkWall
0001009C                            
0001009C                            ; ===========================================================================
0001009C                            ; ---------------------------------------------------------------------------
0001009C                            ; Object 50 - Yadrin enemy (SYZ)
0001009C                            ; ---------------------------------------------------------------------------
0001009C                            
0001009C                            Obj50:					; XREF: Obj_Index
0001009C 7000                       		moveq	#0,d0
0001009E 1028 0024                  		move.b	$24(a0),d0
000100A2 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
000100A6 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
000100AA                            ; ===========================================================================
000100AA 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
000100AC 0000                       		dc.w Obj50_Action-Obj50_Index
000100AE                            ; ===========================================================================
000100AE                            
000100AE                            Obj50_Main:				; XREF: Obj50_Index
000100AE 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
000100B6 317C 247B 0002             		move.w	#$247B,2(a0)
000100BC 117C 0004 0001             		move.b	#4,1(a0)
000100C2 117C 0004 0018             		move.b	#4,$18(a0)
000100C8 117C 0014 0019             		move.b	#$14,$19(a0)
000100CE 117C 0011 0016             		move.b	#$11,$16(a0)
000100D4 117C 0008 0017             		move.b	#8,$17(a0)
000100DA 117C 00CC 0020             		move.b	#$CC,$20(a0)
000100E0 6100 DCEE                  		bsr.w	ObjectFall
000100E4 6100 0000                  		bsr.w	ObjHitFloor
000100E8 4A41                       		tst.w	d1
000100EA 6A00                       		bpl.s	locret_F89E
000100EC D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000100F0 317C 0000 0012             		move.w	#0,$12(a0)
000100F6 5428 0024                  		addq.b	#2,$24(a0)
000100FA 0868 0000 0022             		bchg	#0,$22(a0)
00010100                            
00010100                            locret_F89E:
00010100 4E75                       		rts	
00010102                            ; ===========================================================================
00010102                            
00010102                            Obj50_Action:				; XREF: Obj50_Index
00010102 7000                       		moveq	#0,d0
00010104 1028 0025                  		move.b	$25(a0),d0
00010108 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0001010C 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00010110 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00010116 6100 AD9E                  		bsr.w	AnimateSprite
0001011A 6000 FDF4                  		bra.w	MarkObjGone
0001011E                            ; ===========================================================================
0001011E 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00010120 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00010122                            ; ===========================================================================
00010122                            
00010122                            Obj50_Move:				; XREF: Obj50_Index2
00010122 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010126 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010128 5428 0025                  		addq.b	#2,$25(a0)
0001012C 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00010132 117C 0001 001C             		move.b	#1,$1C(a0)
00010138 0868 0000 0022             		bchg	#0,$22(a0)
0001013E 6600                       		bne.s	locret_F8E2
00010140 4468 0010                  		neg.w	$10(a0)		; change direction
00010144                            
00010144                            locret_F8E2:
00010144 4E75                       		rts	
00010146                            ; ===========================================================================
00010146                            
00010146                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010146 6100 DCFA                  		bsr.w	SpeedToPos
0001014A 6100 0000                  		bsr.w	ObjHitFloor
0001014E 0C41 FFF8                  		cmpi.w	#-8,d1
00010152 6D00                       		blt.s	Obj50_Pause
00010154 0C41 000C                  		cmpi.w	#$C,d1
00010158 6C00                       		bge.s	Obj50_Pause
0001015A D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0001015E 6100 FF0A                  		bsr.w	Obj50_ChkWall
00010162 6600                       		bne.s	Obj50_Pause
00010164 4E75                       		rts	
00010166                            ; ===========================================================================
00010166                            
00010166                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010166 5528 0025                  		subq.b	#2,$25(a0)
0001016A 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010170 317C 0000 0010             		move.w	#0,$10(a0)
00010176 117C 0000 001C             		move.b	#0,$1C(a0)
0001017C 4E75                       		rts	
0001017E                            ; ===========================================================================
0001017E                            Ani_obj50:
0001017E                            	include "_anim\obj50.asm"
0001017E                            ; ---------------------------------------------------------------------------
0001017E                            ; Animation script - Yadrin enemy
0001017E                            ; ---------------------------------------------------------------------------
0001017E 0000                       		dc.w byte_F920-Ani_obj50
00010180 0000                       		dc.w byte_F924-Ani_obj50
00010182 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010186 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010190                            		even
00010190                            		even
00010190                            
00010190                            ; ---------------------------------------------------------------------------
00010190                            ; Sprite mappings - Yadrin enemy (SYZ)
00010190                            ; ---------------------------------------------------------------------------
00010190                            Map_obj50:
00010190                            	include "_maps\obj50.asm"
00010190                            Map_ff24:
00010190 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
00010192 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
00010194 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
00010196 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
00010198 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
0001019A 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
0001019C 05                         Map_ff24_C: 	dc.b $5
0001019D F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000101A2 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000101A7 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101AC F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101B1 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000101B6 05                         Map_ff24_26: 	dc.b $5
000101B7 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000101BC FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000101C1 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101C6 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101CB 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000101D0 05                         Map_ff24_40: 	dc.b $5
000101D1 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000101D6 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000101DB EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101E0 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101E5 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000101EA 05                         Map_ff24_5A: 	dc.b $5
000101EB F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000101F0 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000101F5 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101FA F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101FF 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010204 05                         Map_ff24_74: 	dc.b $5
00010205 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
0001020A FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
0001020F EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010214 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010219 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0001021E 05                         Map_ff24_8E: 	dc.b $5
0001021F F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010224 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010229 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001022E F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010233 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010238                            	even
00010238                            	even
00010238                            
00010238                            ; ---------------------------------------------------------------------------
00010238                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010238                            ;
00010238                            ; variables:
00010238                            ; d1 = width
00010238                            ; d2 = height /	2 (when	jumping)
00010238                            ; d3 = height /	2 (when	walking)
00010238                            ; d4 = x-axis position
00010238                            ; ---------------------------------------------------------------------------
00010238                            
00010238                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010238                            
00010238                            
00010238                            SolidObject:
00010238 4A28 0025                  		tst.b	$25(a0)
0001023C 6700 0000                  		beq.w	loc_FAC8
00010240 3401                       		move.w	d1,d2
00010242 D442                       		add.w	d2,d2
00010244 43F8 D000                  		lea	($FFFFD000).w,a1
00010248 0829 0001 0022             		btst	#1,$22(a1)
0001024E 6600                       		bne.s	loc_F9FE
00010250 3029 0008                  		move.w	8(a1),d0
00010254 9068 0008                  		sub.w	8(a0),d0
00010258 D041                       		add.w	d1,d0
0001025A 6B00                       		bmi.s	loc_F9FE
0001025C B042                       		cmp.w	d2,d0
0001025E 6500                       		bcs.s	loc_FA12
00010260                            
00010260                            loc_F9FE:
00010260 08A9 0003 0022             		bclr	#3,$22(a1)
00010266 08A8 0003 0022             		bclr	#3,$22(a0)
0001026C 4228 0025                  		clr.b	$25(a0)
00010270 7800                       		moveq	#0,d4
00010272 4E75                       		rts	
00010274                            ; ===========================================================================
00010274                            
00010274                            loc_FA12:
00010274 3404                       		move.w	d4,d2
00010276 4EB9 0000 8144             		jsr	MvSonicOnPtfm 
0001027C 7800                       		moveq	#0,d4
0001027E 4E75                       		rts	
00010280                            ; ===========================================================================
00010280                            
00010280                            SolidObject71:				; XREF: Obj71_Solid
00010280 4A28 0025                  		tst.b	$25(a0)
00010284 6700 0000                  		beq.w	loc_FAD0
00010288 3401                       		move.w	d1,d2
0001028A D442                       		add.w	d2,d2
0001028C 43F8 D000                  		lea	($FFFFD000).w,a1
00010290 0829 0001 0022             		btst	#1,$22(a1)
00010296 6600                       		bne.s	loc_FA44
00010298 3029 0008                  		move.w	8(a1),d0
0001029C 9068 0008                  		sub.w	8(a0),d0
000102A0 D041                       		add.w	d1,d0
000102A2 6B00                       		bmi.s	loc_FA44
000102A4 B042                       		cmp.w	d2,d0
000102A6 6500                       		bcs.s	loc_FA58
000102A8                            
000102A8                            loc_FA44:
000102A8 08A9 0003 0022             		bclr	#3,$22(a1)
000102AE 08A8 0003 0022             		bclr	#3,$22(a0)
000102B4 4228 0025                  		clr.b	$25(a0)
000102B8 7800                       		moveq	#0,d4
000102BA 4E75                       		rts	
000102BC                            ; ===========================================================================
000102BC                            
000102BC                            loc_FA58:
000102BC 3404                       		move.w	d4,d2
000102BE                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
000102BE 7800                       		moveq	#0,d4
000102C0 4E75                       		rts	
000102C2                            ; ===========================================================================
000102C2                            
000102C2                            SolidObject2F:				; XREF: Obj2F_Solid
000102C2 43F8 D000                  		lea	($FFFFD000).w,a1
000102C6 4A28 0001                  		tst.b	1(a0)
000102CA 6A00 0000                  		bpl.w	loc_FB92
000102CE 3029 0008                  		move.w	8(a1),d0
000102D2 9068 0008                  		sub.w	8(a0),d0
000102D6 D041                       		add.w	d1,d0
000102D8 6B00 0000                  		bmi.w	loc_FB92
000102DC 3601                       		move.w	d1,d3
000102DE D643                       		add.w	d3,d3
000102E0 B043                       		cmp.w	d3,d0
000102E2 6200 0000                  		bhi.w	loc_FB92
000102E6 3A00                       		move.w	d0,d5
000102E8 0828 0000 0001             		btst	#0,1(a0)
000102EE 6700                       		beq.s	loc_FA94
000102F0 4645                       		not.w	d5
000102F2 DA43                       		add.w	d3,d5
000102F4                            
000102F4                            loc_FA94:
000102F4 E24D                       		lsr.w	#1,d5
000102F6 7600                       		moveq	#0,d3
000102F8 1632 5000                  		move.b	(a2,d5.w),d3
000102FC 9612                       		sub.b	(a2),d3
000102FE 3A28 000C                  		move.w	$C(a0),d5
00010302 9A43                       		sub.w	d3,d5
00010304 1629 0016                  		move.b	$16(a1),d3
00010308 4883                       		ext.w	d3
0001030A D443                       		add.w	d3,d2
0001030C 3629 000C                  		move.w	$C(a1),d3
00010310 9645                       		sub.w	d5,d3
00010312 5843                       		addq.w	#4,d3
00010314 D642                       		add.w	d2,d3
00010316 6B00 0000                  		bmi.w	loc_FB92
0001031A 3802                       		move.w	d2,d4
0001031C D844                       		add.w	d4,d4
0001031E B644                       		cmp.w	d4,d3
00010320 6400 0000                  		bcc.w	loc_FB92
00010324 6000 0000                  		bra.w	loc_FB0E
00010328                            ; ===========================================================================
00010328                            
00010328                            loc_FAC8:
00010328 4A28 0001                  		tst.b	1(a0)
0001032C 6A00 0000                  		bpl.w	loc_FB92
00010330                            
00010330                            loc_FAD0:
00010330 43F8 D000                  		lea	($FFFFD000).w,a1
00010334 3029 0008                  		move.w	8(a1),d0
00010338 9068 0008                  		sub.w	8(a0),d0
0001033C D041                       		add.w	d1,d0
0001033E 6B00 0000                  		bmi.w	loc_FB92
00010342 3601                       		move.w	d1,d3
00010344 D643                       		add.w	d3,d3
00010346 B043                       		cmp.w	d3,d0
00010348 6200 0000                  		bhi.w	loc_FB92
0001034C 1629 0016                  		move.b	$16(a1),d3
00010350 4883                       		ext.w	d3
00010352 D443                       		add.w	d3,d2
00010354 3629 000C                  		move.w	$C(a1),d3
00010358 9668 000C                  		sub.w	$C(a0),d3
0001035C 5843                       		addq.w	#4,d3
0001035E D642                       		add.w	d2,d3
00010360 6B00 0000                  		bmi.w	loc_FB92
00010364 3802                       		move.w	d2,d4
00010366 D844                       		add.w	d4,d4
00010368 B644                       		cmp.w	d4,d3
0001036A 6400 0000                  		bcc.w	loc_FB92
0001036E                            
0001036E                            loc_FB0E:
0001036E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010372 6B00 0000                  		bmi.w	loc_FB92
00010376 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001037C 6400 0000                  		bcc.w	loc_FB92
00010380 4A78 FE08                  		tst.w	($FFFFFE08).w
00010384 6600 0000                  		bne.w	loc_FBAC
00010388 3A00                       		move.w	d0,d5
0001038A B240                       		cmp.w	d0,d1
0001038C 6400                       		bcc.s	loc_FB36
0001038E D241                       		add.w	d1,d1
00010390 9041                       		sub.w	d1,d0
00010392 3A00                       		move.w	d0,d5
00010394 4445                       		neg.w	d5
00010396                            
00010396                            loc_FB36:
00010396 3203                       		move.w	d3,d1
00010398 B443                       		cmp.w	d3,d2
0001039A 6400                       		bcc.s	loc_FB44
0001039C 5943                       		subq.w	#4,d3
0001039E 9644                       		sub.w	d4,d3
000103A0 3203                       		move.w	d3,d1
000103A2 4441                       		neg.w	d1
000103A4                            
000103A4                            loc_FB44:
000103A4 BA41                       		cmp.w	d1,d5
000103A6 6200 0000                  		bhi.w	loc_FBB0
000103AA 0C41 0004                  		cmpi.w	#4,d1
000103AE 6300                       		bls.s	loc_FB8C
000103B0 4A40                       		tst.w	d0
000103B2 6700                       		beq.s	loc_FB70
000103B4 6B00                       		bmi.s	loc_FB5E
000103B6 4A69 0010                  		tst.w	$10(a1)
000103BA 6B00                       		bmi.s	loc_FB70
000103BC 6000                       		bra.s	loc_FB64
000103BE                            ; ===========================================================================
000103BE                            
000103BE                            loc_FB5E:
000103BE 4A69 0010                  		tst.w	$10(a1)
000103C2 6A00                       		bpl.s	loc_FB70
000103C4                            
000103C4                            loc_FB64:
000103C4 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000103CA 337C 0000 0010             		move.w	#0,$10(a1)
000103D0                            
000103D0                            loc_FB70:
000103D0 9169 0008                  		sub.w	d0,8(a1)
000103D4 0829 0001 0022             		btst	#1,$22(a1)
000103DA 6600                       		bne.s	loc_FB8C
000103DC 08E9 0005 0022             		bset	#5,$22(a1)
000103E2 08E8 0005 0022             		bset	#5,$22(a0)
000103E8 7801                       		moveq	#1,d4
000103EA 4E75                       		rts	
000103EC                            ; ===========================================================================
000103EC                            
000103EC                            loc_FB8C:
000103EC 6100                       		bsr.s	loc_FBA0
000103EE 7801                       		moveq	#1,d4
000103F0 4E75                       		rts	
000103F2                            ; ===========================================================================
000103F2                            
000103F2                            loc_FB92:
000103F2 0828 0005 0022             		btst	#5,$22(a0)
000103F8 6700                       		beq.s	loc_FBAC
000103FA 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010400                            
00010400                            loc_FBA0:
00010400 08A8 0005 0022             		bclr	#5,$22(a0)
00010406 08A9 0005 0022             		bclr	#5,$22(a1)
0001040C                            
0001040C                            loc_FBAC:
0001040C 7800                       		moveq	#0,d4
0001040E 4E75                       		rts	
00010410                            ; ===========================================================================
00010410                            
00010410                            loc_FBB0:
00010410 4A43                       		tst.w	d3
00010412 6B00                       		bmi.s	loc_FBBC
00010414 0C43 0010                  		cmpi.w	#$10,d3
00010418 6500                       		bcs.s	loc_FBEE
0001041A 60D6                       		bra.s	loc_FB92
0001041C                            ; ===========================================================================
0001041C                            
0001041C                            loc_FBBC:
0001041C 4A69 0012                  		tst.w	$12(a1)
00010420 6700                       		beq.s	loc_FBD6
00010422 6A00                       		bpl.s	loc_FBD2
00010424 4A43                       		tst.w	d3
00010426 6A00                       		bpl.s	loc_FBD2
00010428 9769 000C                  		sub.w	d3,$C(a1)
0001042C 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010432                            
00010432                            loc_FBD2:
00010432 78FF                       		moveq	#-1,d4
00010434 4E75                       		rts	
00010436                            ; ===========================================================================
00010436                            
00010436                            loc_FBD6:
00010436 0829 0001 0022             		btst	#1,$22(a1)
0001043C 66F4                       		bne.s	loc_FBD2
0001043E 2F08                       		move.l	a0,-(sp)
00010440 2049                       		movea.l	a1,a0
00010442 4EB9 0000 0000             		jsr	KillSonic
00010448 205F                       		movea.l	(sp)+,a0
0001044A 78FF                       		moveq	#-1,d4
0001044C 4E75                       		rts	
0001044E                            ; ===========================================================================
0001044E                            
0001044E                            loc_FBEE:
0001044E 5943                       		subq.w	#4,d3
00010450 7200                       		moveq	#0,d1
00010452 1228 0019                  		move.b	$19(a0),d1
00010456 3401                       		move.w	d1,d2
00010458 D442                       		add.w	d2,d2
0001045A D269 0008                  		add.w	8(a1),d1
0001045E 9268 0008                  		sub.w	8(a0),d1
00010462 6B00                       		bmi.s	loc_FC28
00010464 B242                       		cmp.w	d2,d1
00010466 6400                       		bcc.s	loc_FC28
00010468 4A69 0012                  		tst.w	$12(a1)
0001046C 6B00                       		bmi.s	loc_FC28
0001046E 9769 000C                  		sub.w	d3,$C(a1)
00010472 5369 000C                  		subq.w	#1,$C(a1)
00010476 6100                       		bsr.s	sub_FC2C
00010478 117C 0002 0025             		move.b	#2,$25(a0)
0001047E 08E8 0003 0022             		bset	#3,$22(a0)
00010484 78FF                       		moveq	#-1,d4
00010486 4E75                       		rts	
00010488                            ; ===========================================================================
00010488                            
00010488                            loc_FC28:
00010488 7800                       		moveq	#0,d4
0001048A 4E75                       		rts	
0001048C                            ; End of function SolidObject
0001048C                            
0001048C                            
0001048C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001048C                            
0001048C                            
0001048C                            sub_FC2C:				; XREF: SolidObject
0001048C 0829 0003 0022             		btst	#3,$22(a1)
00010492 6700                       		beq.s	loc_FC4E
00010494 7000                       		moveq	#0,d0
00010496 1029 003D                  		move.b	$3D(a1),d0
0001049A ED48                       		lsl.w	#6,d0
0001049C 0680 00FF D000             		addi.l	#$FFD000,d0
000104A2 2440                       		movea.l	d0,a2
000104A4 08AA 0003 0022             		bclr	#3,$22(a2)
000104AA 422A 0025                  		clr.b	$25(a2)
000104AE                            
000104AE                            loc_FC4E:
000104AE 3008                       		move.w	a0,d0
000104B0 0440 D000                  		subi.w	#-$3000,d0
000104B4 EC48                       		lsr.w	#6,d0
000104B6 0240 007F                  		andi.w	#$7F,d0
000104BA 1340 003D                  		move.b	d0,$3D(a1)
000104BE 137C 0000 0026             		move.b	#0,$26(a1)
000104C4 337C 0000 0012             		move.w	#0,$12(a1)
000104CA 3369 0010 0014             		move.w	$10(a1),$14(a1)
000104D0 0829 0001 0022             		btst	#1,$22(a1)
000104D6 6700                       		beq.s	loc_FC84
000104D8 2F08                       		move.l	a0,-(sp)
000104DA 2049                       		movea.l	a1,a0
000104DC 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000104E2 205F                       		movea.l	(sp)+,a0
000104E4                            
000104E4                            loc_FC84:
000104E4 08E9 0003 0022             		bset	#3,$22(a1)
000104EA 08E8 0003 0022             		bset	#3,$22(a0)
000104F0 4E75                       		rts	
000104F2                            ; End of function sub_FC2C
000104F2                            
000104F2                            ; ===========================================================================
000104F2                            ; ---------------------------------------------------------------------------
000104F2                            ; Object 51 - smashable	green block (MZ)
000104F2                            ; ---------------------------------------------------------------------------
000104F2                            
000104F2                            Obj51:					; XREF: Obj_Index
000104F2 7000                       		moveq	#0,d0
000104F4 1028 0024                  		move.b	$24(a0),d0
000104F8 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000104FC 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010500 6000 FA0E                  		bra.w	MarkObjGone
00010504                            ; ===========================================================================
00010504 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010506 0000                       		dc.w Obj51_Solid-Obj51_Index
00010508 0000                       		dc.w Obj51_Display-Obj51_Index
0001050A                            ; ===========================================================================
0001050A                            
0001050A                            Obj51_Main:				; XREF: Obj51_Index
0001050A 5428 0024                  		addq.b	#2,$24(a0)
0001050E 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010516 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001051C 117C 0004 0001             		move.b	#4,1(a0)
00010522 117C 0010 0019             		move.b	#$10,$19(a0)
00010528 117C 0004 0018             		move.b	#4,$18(a0)
0001052E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010534                            
00010534                            Obj51_Solid:				; XREF: Obj51_Index
00010534 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0001053A 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010540 323C 001B                  		move.w	#$1B,d1
00010544 343C 0010                  		move.w	#$10,d2
00010548 363C 0011                  		move.w	#$11,d3
0001054C 3828 0008                  		move.w	8(a0),d4
00010550 6100 FCE6                  		bsr.w	SolidObject
00010554 0828 0003 0022             		btst	#3,$22(a0)
0001055A 6600                       		bne.s	Obj51_Smash
0001055C                            
0001055C                            locret_FCFC:
0001055C 4E75                       		rts	
0001055E                            ; ===========================================================================
0001055E                            
0001055E                            Obj51_Smash:				; XREF: Obj51_Solid
0001055E 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010564 66F6                       		bne.s	locret_FCFC	; if not, branch
00010566 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0001056C 08E9 0002 0022             		bset	#2,$22(a1)
00010572 137C 000E 0016             		move.b	#$E,$16(a1)
00010578 137C 0007 0017             		move.b	#7,$17(a1)
0001057E 137C 0002 001C             		move.b	#2,$1C(a1)
00010584 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0001058A 08E9 0001 0022             		bset	#1,$22(a1)
00010590 08A9 0003 0022             		bclr	#3,$22(a1)
00010596 137C 0002 0024             		move.b	#2,$24(a1)
0001059C 08A8 0003 0022             		bclr	#3,$22(a0)
000105A2 4228 0025                  		clr.b	$25(a0)
000105A6 117C 0001 001A             		move.b	#1,$1A(a0)
000105AC 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000105B2 7203                       		moveq	#3,d1		; set number of	fragments to 4
000105B4 343C 0038                  		move.w	#$38,d2
000105B8 6100 D456                  		bsr.w	SmashObject
000105BC 6100 DD30                  		bsr.w	SingleObjLoad
000105C0 6600                       		bne.s	Obj51_Display
000105C2 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000105C6 3368 0008 0008             		move.w	8(a0),8(a1)
000105CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000105D2 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000105D6 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000105DA 0C42 0006                  		cmpi.w	#6,d2
000105DE 6500                       		bcs.s	Obj51_Bonus
000105E0 7406                       		moveq	#6,d2
000105E2                            
000105E2                            Obj51_Bonus:
000105E2 7000                       		moveq	#0,d0
000105E4 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000105E8 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000105EE 6500                       		bcs.s	loc_FD98	; if not, branch
000105F0 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000105F4 740A                       		moveq	#10,d2
000105F6                            
000105F6                            loc_FD98:
000105F6 4EB9 0000 0000             		jsr	AddPoints
000105FC E24A                       		lsr.w	#1,d2
000105FE 1342 001A                  		move.b	d2,$1A(a1)
00010602                            
00010602                            Obj51_Display:				; XREF: Obj51_Index
00010602 6100 D83E                  		bsr.w	SpeedToPos
00010606 0668 0038 0012             		addi.w	#$38,$12(a0)
0001060C 6100 D85A                  		bsr.w	DisplaySprite
00010610 4A28 0001                  		tst.b	1(a0)
00010614 6A00 D88E                  		bpl.w	DeleteObject
00010618 4E75                       		rts	
0001061A                            ; ===========================================================================
0001061A FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0001061E FF00 FF00                  		dc.w $FF00, $FF00
00010622 0200 FE00                  		dc.w $200, $FE00
00010626 0100 FF00                  		dc.w $100, $FF00
0001062A                            
0001062A 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010632                            ; ---------------------------------------------------------------------------
00010632                            ; Sprite mappings - smashable green block (MZ)
00010632                            ; ---------------------------------------------------------------------------
00010632                            Map_obj51:
00010632                            	include "_maps\obj51.asm"
00010632                            ; ---------------------------------------------------------------------------
00010632                            ; Sprite mappings - smashable green block (MZ)
00010632                            ; ---------------------------------------------------------------------------
00010632 0000                       		dc.w byte_FDD8-Map_obj51
00010634 0000                       		dc.w byte_FDE3-Map_obj51
00010636 02                         byte_FDD8:	dc.b 2
00010637 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0001063C 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010641 04                         byte_FDE3:	dc.b 4
00010642 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010647 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0001064C F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010651 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010656                            		even
00010656                            		even
00010656                            
00010656                            ; ===========================================================================
00010656                            ; ---------------------------------------------------------------------------
00010656                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010656                            ; ---------------------------------------------------------------------------
00010656                            
00010656                            Obj52:					; XREF: Obj_Index
00010656 7000                       		moveq	#0,d0
00010658 1028 0024                  		move.b	$24(a0),d0
0001065C 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010660 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010664                            ; ===========================================================================
00010664 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010666 0000                       		dc.w Obj52_Platform-Obj52_Index
00010668 0000                       		dc.w Obj52_StandOn-Obj52_Index
0001066A                            
0001066A 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0001066C 2001                       		dc.b $20, 1
0001066E 2002                       		dc.b $20, 2
00010670 4003                       		dc.b $40, 3
00010672 3004                       		dc.b $30, 4
00010674                            ; ===========================================================================
00010674                            
00010674                            Obj52_Main:				; XREF: Obj52_Index
00010674 5428 0024                  		addq.b	#2,$24(a0)
00010678 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010680 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010686 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001068C 6600                       		bne.s	loc_FE44
0001068E 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010696 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001069C 117C 0007 0016             		move.b	#7,$16(a0)
000106A2                            
000106A2                            loc_FE44:
000106A2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000106A8 6600                       		bne.s	loc_FE60
000106AA 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000106B0 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000106B6 6700                       		beq.s	loc_FE60	; if yes, branch
000106B8 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000106BE                            
000106BE                            loc_FE60:
000106BE 117C 0004 0001             		move.b	#4,1(a0)
000106C4 7000                       		moveq	#0,d0
000106C6 1028 0028                  		move.b	$28(a0),d0
000106CA E648                       		lsr.w	#3,d0
000106CC 0240 001E                  		andi.w	#$1E,d0
000106D0 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000106D4 115A 0019                  		move.b	(a2)+,$19(a0)
000106D8 115A 001A                  		move.b	(a2)+,$1A(a0)
000106DC 117C 0004 0018             		move.b	#4,$18(a0)
000106E2 3168 0008 0030             		move.w	8(a0),$30(a0)
000106E8 3168 000C 0032             		move.w	$C(a0),$32(a0)
000106EE 0228 000F 0028             		andi.b	#$F,$28(a0)
000106F4                            
000106F4                            Obj52_Platform:				; XREF: Obj52_Index
000106F4 6100 0000                  		bsr.w	Obj52_Move
000106F8 7200                       		moveq	#0,d1
000106FA 1228 0019                  		move.b	$19(a0),d1
000106FE 4EB9 0000 7A72             		jsr	(PlatformObject).l
00010704 6000                       		bra.s	Obj52_ChkDel
00010706                            ; ===========================================================================
00010706                            
00010706                            Obj52_StandOn:				; XREF: Obj52_Index
00010706 7200                       		moveq	#0,d1
00010708 1228 0019                  		move.b	$19(a0),d1
0001070C 4EB9 0000 7BE6             		jsr	(ExitPlatform).l
00010712 3F28 0008                  		move.w	8(a0),-(sp)
00010716 6100 0000                  		bsr.w	Obj52_Move
0001071A 341F                       		move.w	(sp)+,d2
0001071C 4EB9 0000 8150             		jsr	(MvSonicOnPtfm2).l
00010722                            
00010722                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010722 3028 0030                  		move.w	$30(a0),d0
00010726 0240 FF80                  		andi.w	#$FF80,d0
0001072A 3238 F700                  		move.w	($FFFFF700).w,d1
0001072E 0441 0080                  		subi.w	#$80,d1
00010732 0241 FF80                  		andi.w	#$FF80,d1
00010736 9041                       		sub.w	d1,d0
00010738 0C40 0280                  		cmpi.w	#$280,d0
0001073C 6200 D766                  		bhi.w	DeleteObject
00010740 6000 D726                  		bra.w	DisplaySprite
00010744                            ; ===========================================================================
00010744                            
00010744                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010744 7000                       		moveq	#0,d0
00010746 1028 0028                  		move.b	$28(a0),d0
0001074A 0240 000F                  		andi.w	#$F,d0
0001074E D040                       		add.w	d0,d0
00010750 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010754 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010758                            ; ===========================================================================
00010758 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
0001075C 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010760 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010764 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010768 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
0001076C 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
0001076E                            ; ===========================================================================
0001076E                            
0001076E                            Obj52_Type00:				; XREF: Obj52_TypeIndex
0001076E 4E75                       		rts	
00010770                            ; ===========================================================================
00010770                            
00010770                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010770 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010774 323C 0060                  		move.w	#$60,d1
00010778 0828 0000 0022             		btst	#0,$22(a0)
0001077E 6700                       		beq.s	loc_FF26
00010780 4440                       		neg.w	d0
00010782 D041                       		add.w	d1,d0
00010784                            
00010784                            loc_FF26:
00010784 3228 0030                  		move.w	$30(a0),d1
00010788 9240                       		sub.w	d0,d1
0001078A 3141 0008                  		move.w	d1,8(a0)
0001078E 4E75                       		rts	
00010790                            ; ===========================================================================
00010790                            
00010790                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010790 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010796 6600                       		bne.s	Obj52_02_Wait
00010798 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001079C                            
0001079C                            Obj52_02_Wait:
0001079C 4E75                       		rts	
0001079E                            ; ===========================================================================
0001079E                            
0001079E                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0001079E 7600                       		moveq	#0,d3
000107A0 1628 0019                  		move.b	$19(a0),d3
000107A4 6100 0000                  		bsr.w	ObjHitWallRight
000107A8 4A41                       		tst.w	d1		; has the platform hit a wall?
000107AA 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000107AC 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000107B0 3168 0008 0030             		move.w	8(a0),$30(a0)
000107B6 4E75                       		rts	
000107B8                            ; ===========================================================================
000107B8                            
000107B8                            Obj52_03_End:
000107B8 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000107BC 4E75                       		rts	
000107BE                            ; ===========================================================================
000107BE                            
000107BE                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000107BE 7600                       		moveq	#0,d3
000107C0 1628 0019                  		move.b	$19(a0),d3
000107C4 6100 0000                  		bsr.w	ObjHitWallRight
000107C8 4A41                       		tst.w	d1		; has the platform hit a wall?
000107CA 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000107CC 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000107D0 3168 0008 0030             		move.w	8(a0),$30(a0)
000107D6 4E75                       		rts	
000107D8                            ; ===========================================================================
000107D8                            
000107D8                            Obj52_05_End:
000107D8 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000107DC 4E75                       		rts	
000107DE                            ; ===========================================================================
000107DE                            
000107DE                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000107DE 6100 D662                  		bsr.w	SpeedToPos
000107E2 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000107E8 6100 0000                  		bsr.w	ObjHitFloor
000107EC 4A41                       		tst.w	d1		; has platform hit the floor?
000107EE 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000107F2 D368 000C                  		add.w	d1,$C(a0)
000107F6 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000107FA 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000107FE                            
000107FE                            locret_FFA0:
000107FE 4E75                       		rts	
00010800                            ; ===========================================================================
00010800                            
00010800                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010800 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010804 6700                       		beq.s	Obj52_07_ChkDel
00010806 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
0001080A                            
0001080A                            Obj52_07_ChkDel:
0001080A 588F                       		addq.l	#4,sp
0001080C 3028 0030                  		move.w	$30(a0),d0
00010810 0240 FF80                  		andi.w	#$FF80,d0
00010814 3238 F700                  		move.w	($FFFFF700).w,d1
00010818 0441 0080                  		subi.w	#$80,d1
0001081C 0241 FF80                  		andi.w	#$FF80,d1
00010820 9041                       		sub.w	d1,d0
00010822 0C40 0280                  		cmpi.w	#$280,d0
00010826 6200 D67C                  		bhi.w	DeleteObject
0001082A 4E75                       		rts	
0001082C                            ; ===========================================================================
0001082C                            
0001082C                            Obj52_Type08:				; XREF: Obj52_TypeIndex
0001082C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010830 323C 0080                  		move.w	#$80,d1
00010834 0828 0000 0022             		btst	#0,$22(a0)
0001083A 6700                       		beq.s	loc_FFE2
0001083C 4440                       		neg.w	d0
0001083E D041                       		add.w	d1,d0
00010840                            
00010840                            loc_FFE2:
00010840 3228 0032                  		move.w	$32(a0),d1
00010844 9240                       		sub.w	d0,d1
00010846 3141 000C                  		move.w	d1,$C(a0)
0001084A 4E75                       		rts	
0001084C                            ; ===========================================================================
0001084C                            
0001084C                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
0001084C 7600                       		moveq	#0,d3
0001084E 1628 0019                  		move.b	$19(a0),d3
00010852 D643                       		add.w	d3,d3
00010854 7208                       		moveq	#8,d1
00010856 0828 0000 0022             		btst	#0,$22(a0)
0001085C 6700                       		beq.s	loc_10004
0001085E 4441                       		neg.w	d1
00010860 4443                       		neg.w	d3
00010862                            
00010862                            loc_10004:
00010862 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010866 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010868 3028 0008                  		move.w	8(a0),d0
0001086C 9068 0030                  		sub.w	$30(a0),d0
00010870 B043                       		cmp.w	d3,d0
00010872 6700                       		beq.s	Obj52_0A_Wait
00010874 D368 0008                  		add.w	d1,8(a0)	; move platform
00010878 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0001087E 4E75                       		rts	
00010880                            ; ===========================================================================
00010880                            
00010880                            Obj52_0A_Wait:
00010880 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010884 6600                       		bne.s	locret_1002E	; if time remains, branch
00010886 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0001088C                            
0001088C                            locret_1002E:
0001088C 4E75                       		rts	
0001088E                            ; ===========================================================================
0001088E                            
0001088E                            Obj52_0A_Back:
0001088E 3028 0008                  		move.w	8(a0),d0
00010892 9068 0030                  		sub.w	$30(a0),d0
00010896 6700                       		beq.s	Obj52_0A_Reset
00010898 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
0001089C 4E75                       		rts	
0001089E                            ; ===========================================================================
0001089E                            
0001089E                            Obj52_0A_Reset:
0001089E 4268 0036                  		clr.w	$36(a0)
000108A2 5328 0028                  		subq.b	#1,$28(a0)
000108A6 4E75                       		rts	
000108A8                            ; ===========================================================================
000108A8                            ; ---------------------------------------------------------------------------
000108A8                            ; Sprite mappings - moving blocks (MZ, SBZ)
000108A8                            ; ---------------------------------------------------------------------------
000108A8                            Map_obj52:
000108A8                            	include "_maps\obj52mz.asm"
000108A8                            ; ---------------------------------------------------------------------------
000108A8                            ; Sprite mappings - moving blocks (MZ, SBZ)
000108A8                            ; ---------------------------------------------------------------------------
000108A8 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000108AC 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000108B0 0000                       		dc.w byte_1008F-Map_obj52
000108B2 01                         byte_10054:	dc.b 1
000108B3 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000108B8 02                         byte_1005A:	dc.b 2
000108B9 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000108BE F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000108C3 04                         byte_10065:	dc.b 4
000108C4 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000108C9 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000108CE F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000108D3 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000108D8 04                         byte_1007A:	dc.b 4
000108D9 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000108DE F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000108E3 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000108E8 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000108ED 03                         byte_1008F:	dc.b 3
000108EE F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000108F3 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000108F8 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000108FE 00                         		even
000108FE 00                         		even
000108FE                            
000108FE                            ; ---------------------------------------------------------------------------
000108FE                            ; Sprite mappings - moving block (LZ)
000108FE                            ; ---------------------------------------------------------------------------
000108FE                            Map_obj52a:
000108FE                            	include "_maps\obj52lz.asm"
000108FE                            ; ---------------------------------------------------------------------------
000108FE                            ; Sprite mappings - moving block (LZ)
000108FE                            ; ---------------------------------------------------------------------------
000108FE 0000                       		dc.w byte_100A2-Map_obj52a
00010900 01                         byte_100A2:	dc.b 1
00010901 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010906                            		even
00010906                            		even
00010906                            
00010906                            ; ===========================================================================
00010906                            ; ---------------------------------------------------------------------------
00010906                            ; Object 55 - Basaran enemy (MZ)
00010906                            ; ---------------------------------------------------------------------------
00010906                            
00010906                            Obj55:					; XREF: Obj_Index
00010906 7000                       		moveq	#0,d0
00010908 1028 0024                  		move.b	$24(a0),d0
0001090C 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010910 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010914                            ; ===========================================================================
00010914 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010916 0000                       		dc.w Obj55_Action-Obj55_Index
00010918                            ; ===========================================================================
00010918                            
00010918                            Obj55_Main:				; XREF: Obj55_Index
00010918 5428 0024                  		addq.b	#2,$24(a0)
0001091C 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010924 317C 84B8 0002             		move.w	#$84B8,2(a0)
0001092A 117C 0004 0001             		move.b	#4,1(a0)
00010930 117C 000C 0016             		move.b	#$C,$16(a0)
00010936 117C 0002 0018             		move.b	#2,$18(a0)
0001093C 117C 000B 0020             		move.b	#$B,$20(a0)
00010942 117C 0010 0019             		move.b	#$10,$19(a0)
00010948                            
00010948                            Obj55_Action:				; XREF: Obj55_Index
00010948 7000                       		moveq	#0,d0
0001094A 1028 0025                  		move.b	$25(a0),d0
0001094E 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010952 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010956 43F9 0000 0000             		lea	(Ani_obj55).l,a1
0001095C 6100 A558                  		bsr.w	AnimateSprite
00010960 6000 F5AE                  		bra.w	MarkObjGone
00010964                            ; ===========================================================================
00010964 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010966 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010968 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
0001096A 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
0001096C                            ; ===========================================================================
0001096C                            
0001096C                            Obj55_ChkDrop:				; XREF: Obj55_Index2
0001096C 343C 0080                  		move.w	#$80,d2
00010970 6100 0000                  		bsr.w	Obj55_ChkSonic
00010974 6400                       		bcc.s	Obj55_NoDrop
00010976 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001097A 3140 0036                  		move.w	d0,$36(a0)
0001097E 9068 000C                  		sub.w	$C(a0),d0
00010982 6500                       		bcs.s	Obj55_NoDrop
00010984 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010988 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
0001098A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001098E 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010990 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010994 D007                       		add.b	d7,d0
00010996 0200 0007                  		andi.b	#7,d0
0001099A 6600                       		bne.s	Obj55_NoDrop
0001099C 117C 0001 001C             		move.b	#1,$1C(a0)
000109A2 5428 0025                  		addq.b	#2,$25(a0)
000109A6                            
000109A6                            Obj55_NoDrop:
000109A6 4E75                       		rts	
000109A8                            ; ===========================================================================
000109A8                            
000109A8                            Obj55_DropFly:				; XREF: Obj55_Index2
000109A8 6100 D498                  		bsr.w	SpeedToPos
000109AC 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000109B2 343C 0080                  		move.w	#$80,d2
000109B6 6100 0000                  		bsr.w	Obj55_ChkSonic
000109BA 3028 0036                  		move.w	$36(a0),d0
000109BE 9068 000C                  		sub.w	$C(a0),d0
000109C2 6500                       		bcs.s	Obj55_ChkDel
000109C4 0C40 0010                  		cmpi.w	#$10,d0
000109C8 6400                       		bcc.s	locret_10180
000109CA 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000109CE 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000109D4 117C 0002 001C             		move.b	#2,$1C(a0)
000109DA 5428 0025                  		addq.b	#2,$25(a0)
000109DE                            
000109DE                            locret_10180:
000109DE 4E75                       		rts	
000109E0                            ; ===========================================================================
000109E0                            
000109E0                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000109E0 4A28 0001                  		tst.b	1(a0)
000109E4 6A00 D4BE                  		bpl.w	DeleteObject
000109E8 4E75                       		rts	
000109EA                            ; ===========================================================================
000109EA                            
000109EA                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000109EA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000109EE 0200 000F                  		andi.b	#$F,d0
000109F2 6600                       		bne.s	loc_101A0
000109F4 303C 00C0                  		move.w	#$C0,d0
000109F8 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play flapping sound
000109FE                            
000109FE                            loc_101A0:
000109FE 6100 D442                  		bsr.w	SpeedToPos
00010A02 3038 D008                  		move.w	($FFFFD008).w,d0
00010A06 9068 0008                  		sub.w	8(a0),d0
00010A0A 6400                       		bcc.s	loc_101B0
00010A0C 4440                       		neg.w	d0
00010A0E                            
00010A0E                            loc_101B0:
00010A0E 0C40 0080                  		cmpi.w	#$80,d0
00010A12 6500                       		bcs.s	locret_101C6
00010A14 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010A18 D007                       		add.b	d7,d0
00010A1A 0200 0007                  		andi.b	#7,d0
00010A1E 6600                       		bne.s	locret_101C6
00010A20 5428 0025                  		addq.b	#2,$25(a0)
00010A24                            
00010A24                            locret_101C6:
00010A24 4E75                       		rts	
00010A26                            ; ===========================================================================
00010A26                            
00010A26                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010A26 6100 D41A                  		bsr.w	SpeedToPos
00010A2A 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010A30 6100 0000                  		bsr.w	ObjHitCeiling
00010A34 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010A36 6A00                       		bpl.s	locret_101F4	; if not, branch
00010A38 9368 000C                  		sub.w	d1,$C(a0)
00010A3C 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010A42 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010A46 4268 0012                  		clr.w	$12(a0)
00010A4A 4228 001C                  		clr.b	$1C(a0)
00010A4E 4228 0025                  		clr.b	$25(a0)
00010A52                            
00010A52                            locret_101F4:
00010A52 4E75                       		rts	
00010A54                            ; ===========================================================================
00010A54                            
00010A54                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010A54 323C 0100                  		move.w	#$100,d1
00010A58 08E8 0000 0022             		bset	#0,$22(a0)
00010A5E 3038 D008                  		move.w	($FFFFD008).w,d0
00010A62 9068 0008                  		sub.w	8(a0),d0
00010A66 6400                       		bcc.s	loc_10214
00010A68 4440                       		neg.w	d0
00010A6A 4441                       		neg.w	d1
00010A6C 08A8 0000 0022             		bclr	#0,$22(a0)
00010A72                            
00010A72                            loc_10214:
00010A72 B042                       		cmp.w	d2,d0
00010A74 4E75                       		rts	
00010A76                            ; ===========================================================================
00010A76 6100 D3CA                  		bsr.w	SpeedToPos
00010A7A 6100 D3EC                  		bsr.w	DisplaySprite
00010A7E 4A28 0001                  		tst.b	1(a0)
00010A82 6A00 D420                  		bpl.w	DeleteObject
00010A86 4E75                       		rts	
00010A88                            ; ===========================================================================
00010A88                            Ani_obj55:
00010A88                            	include "_anim\obj55.asm"
00010A88                            ; ---------------------------------------------------------------------------
00010A88                            ; Animation script - Basaran enemy
00010A88                            ; ---------------------------------------------------------------------------
00010A88 0000                       		dc.w byte_10230-Ani_obj55
00010A8A 0000                       		dc.w byte_10234-Ani_obj55
00010A8C 0000                       		dc.w byte_10238-Ani_obj55
00010A8E 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010A92 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010A96 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010A9C                            		even
00010A9C                            		even
00010A9C                            
00010A9C                            ; ---------------------------------------------------------------------------
00010A9C                            ; Sprite mappings - Basaran enemy (MZ)
00010A9C                            ; ---------------------------------------------------------------------------
00010A9C                            Map_obj55:
00010A9C                            	include "_maps\obj55.asm"
00010A9C                            ; ---------------------------------------------------------------------------
00010A9C                            ; Sprite mappings - Basaran enemy (MZ)
00010A9C                            ; ---------------------------------------------------------------------------
00010A9C 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010AA0 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010AA4 01                         byte_10246:	dc.b 1
00010AA5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010AAA 03                         byte_1024C:	dc.b 3
00010AAB F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010AB0 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010AB5 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010ABA 04                         byte_1025C:	dc.b 4
00010ABB F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010AC0 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010AC5 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010ACA 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010ACF 04                         byte_10271:	dc.b 4
00010AD0 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010AD5 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010ADA 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010ADF FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010AE4                            		even
00010AE4                            		even
00010AE4                            
00010AE4                            ; ===========================================================================
00010AE4                            ; ---------------------------------------------------------------------------
00010AE4                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010AE4                            ; ---------------------------------------------------------------------------
00010AE4                            
00010AE4                            Obj56:					; XREF: Obj_Index
00010AE4 7000                       		moveq	#0,d0
00010AE6 1028 0024                  		move.b	$24(a0),d0
00010AEA 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010AEE 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010AF2                            ; ===========================================================================
00010AF2 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010AF4 0000                       		dc.w Obj56_Action-Obj56_Index
00010AF6                            
00010AF6 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010AF8 2020                       		dc.b  $20, $20
00010AFA 1020                       		dc.b  $10, $20
00010AFC 201A                       		dc.b  $20, $1A
00010AFE 1027                       		dc.b  $10, $27
00010B00 1010                       		dc.b  $10, $10
00010B02 0820                       		dc.b	8, $20
00010B04 4010                       		dc.b  $40, $10
00010B06                            ; ===========================================================================
00010B06                            
00010B06                            Obj56_Main:				; XREF: Obj56_Index
00010B06 5428 0024                  		addq.b	#2,$24(a0)
00010B0A 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010B12 317C 4000 0002             		move.w	#$4000,2(a0)
00010B18 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010B1E 6600                       		bne.s	loc_102C8
00010B20 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010B26                            
00010B26                            loc_102C8:
00010B26 117C 0004 0001             		move.b	#4,1(a0)
00010B2C 117C 0003 0018             		move.b	#3,$18(a0)
00010B32 7000                       		moveq	#0,d0
00010B34 1028 0028                  		move.b	$28(a0),d0
00010B38 E648                       		lsr.w	#3,d0
00010B3A 0240 000E                  		andi.w	#$E,d0
00010B3E 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010B42 115A 0019                  		move.b	(a2)+,$19(a0)
00010B46 1152 0016                  		move.b	(a2),$16(a0)
00010B4A E248                       		lsr.w	#1,d0
00010B4C 1140 001A                  		move.b	d0,$1A(a0)
00010B50 3168 0008 0034             		move.w	8(a0),$34(a0)
00010B56 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010B5C 7000                       		moveq	#0,d0
00010B5E 1012                       		move.b	(a2),d0
00010B60 D040                       		add.w	d0,d0
00010B62 3140 003A                  		move.w	d0,$3A(a0)
00010B66 7000                       		moveq	#0,d0
00010B68 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010B6E 6700                       		beq.s	loc_10332
00010B70 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010B74 0240 000F                  		andi.w	#$F,d0
00010B78 5140                       		subq.w	#8,d0
00010B7A 6500                       		bcs.s	loc_10332
00010B7C E548                       		lsl.w	#2,d0
00010B7E 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010B82 45F2 0000                  		lea	(a2,d0.w),a2
00010B86 4A52                       		tst.w	(a2)
00010B88 6A00                       		bpl.s	loc_10332
00010B8A 0868 0000 0022             		bchg	#0,$22(a0)
00010B90                            
00010B90                            loc_10332:
00010B90 1028 0028                  		move.b	$28(a0),d0
00010B94 6A00                       		bpl.s	Obj56_Action
00010B96 0200 000F                  		andi.b	#$F,d0
00010B9A 1140 003C                  		move.b	d0,$3C(a0)
00010B9E 117C 0005 0028             		move.b	#5,$28(a0)
00010BA4 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010BAA 6600                       		bne.s	Obj56_ChkGone
00010BAC 117C 000C 0028             		move.b	#$C,$28(a0)
00010BB2 317C 0080 003A             		move.w	#$80,$3A(a0)
00010BB8                            
00010BB8                            Obj56_ChkGone:
00010BB8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010BBC 7000                       		moveq	#0,d0
00010BBE 1028 0023                  		move.b	$23(a0),d0
00010BC2 6700                       		beq.s	Obj56_Action
00010BC4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010BCA 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010BD0 6700                       		beq.s	Obj56_Action
00010BD2 5228 0028                  		addq.b	#1,$28(a0)
00010BD6 4268 003A                  		clr.w	$3A(a0)
00010BDA                            
00010BDA                            Obj56_Action:				; XREF: Obj56_Index
00010BDA 3F28 0008                  		move.w	8(a0),-(sp)
00010BDE 7000                       		moveq	#0,d0
00010BE0 1028 0028                  		move.b	$28(a0),d0	; get object type
00010BE4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010BE8 D040                       		add.w	d0,d0
00010BEA 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010BEE 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010BF2 381F                       		move.w	(sp)+,d4
00010BF4 4A28 0001                  		tst.b	1(a0)
00010BF8 6A00                       		bpl.s	Obj56_ChkDel
00010BFA 7200                       		moveq	#0,d1
00010BFC 1228 0019                  		move.b	$19(a0),d1
00010C00 0641 000B                  		addi.w	#$B,d1
00010C04 7400                       		moveq	#0,d2
00010C06 1428 0016                  		move.b	$16(a0),d2
00010C0A 3602                       		move.w	d2,d3
00010C0C 5243                       		addq.w	#1,d3
00010C0E 6100 F628                  		bsr.w	SolidObject
00010C12                            
00010C12                            Obj56_ChkDel:
00010C12 3028 0034                  		move.w	$34(a0),d0
00010C16 0240 FF80                  		andi.w	#$FF80,d0
00010C1A 3238 F700                  		move.w	($FFFFF700).w,d1
00010C1E 0441 0080                  		subi.w	#$80,d1
00010C22 0241 FF80                  		andi.w	#$FF80,d1
00010C26 9041                       		sub.w	d1,d0
00010C28 0C40 0280                  		cmpi.w	#$280,d0
00010C2C 6200 D276                  		bhi.w	DeleteObject
00010C30 6000 D236                  		bra.w	DisplaySprite
00010C34                            ; ===========================================================================
00010C34 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010C38 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010C3C 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010C40 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010C44 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010C48 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010C4C 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010C50                            ; ===========================================================================
00010C50                            
00010C50                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010C50 4E75                       		rts	
00010C52                            ; ===========================================================================
00010C52                            
00010C52                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010C52 323C 0040                  		move.w	#$40,d1
00010C56 7000                       		moveq	#0,d0
00010C58 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010C5C 6000                       		bra.s	Obj56_Move_LR
00010C5E                            ; ===========================================================================
00010C5E                            
00010C5E                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010C5E 323C 0080                  		move.w	#$80,d1
00010C62 7000                       		moveq	#0,d0
00010C64 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010C68                            
00010C68                            Obj56_Move_LR:
00010C68 0828 0000 0022             		btst	#0,$22(a0)
00010C6E 6700                       		beq.s	loc_10416
00010C70 4440                       		neg.w	d0
00010C72 D041                       		add.w	d1,d0
00010C74                            
00010C74                            loc_10416:
00010C74 3228 0034                  		move.w	$34(a0),d1
00010C78 9240                       		sub.w	d0,d1
00010C7A 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010C7E 4E75                       		rts	
00010C80                            ; ===========================================================================
00010C80                            
00010C80                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010C80 323C 0040                  		move.w	#$40,d1
00010C84 7000                       		moveq	#0,d0
00010C86 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010C8A 6000                       		bra.s	Obj56_Move_UD
00010C8C                            ; ===========================================================================
00010C8C                            
00010C8C                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010C8C 323C 0080                  		move.w	#$80,d1
00010C90 7000                       		moveq	#0,d0
00010C92 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010C96                            
00010C96                            Obj56_Move_UD:
00010C96 0828 0000 0022             		btst	#0,$22(a0)
00010C9C 6700                       		beq.s	loc_10444
00010C9E 4440                       		neg.w	d0
00010CA0 D041                       		add.w	d1,d0
00010CA2                            
00010CA2                            loc_10444:
00010CA2 3228 0030                  		move.w	$30(a0),d1
00010CA6 9240                       		sub.w	d0,d1
00010CA8 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010CAC 4E75                       		rts	
00010CAE                            ; ===========================================================================
00010CAE                            
00010CAE                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010CAE 4A28 0038                  		tst.b	$38(a0)
00010CB2 6600                       		bne.s	loc_104A4
00010CB4 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010CBA 6600                       		bne.s	loc_1047A	; if not, branch
00010CBC 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010CC2 6600                       		bne.s	loc_1047A
00010CC4 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010CC8 3038 D008                  		move.w	($FFFFD008).w,d0
00010CCC B068 0008                  		cmp.w	8(a0),d0
00010CD0 6400                       		bcc.s	loc_1047A
00010CD2 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010CD8                            
00010CD8                            loc_1047A:
00010CD8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010CDC 7000                       		moveq	#0,d0
00010CDE 1028 003C                  		move.b	$3C(a0),d0
00010CE2 0832 0000 0000             		btst	#0,(a2,d0.w)
00010CE8 6700                       		beq.s	loc_104AE
00010CEA 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010CF0 6600                       		bne.s	loc_1049E	; if not, branch
00010CF2 0C00 0003                  		cmpi.b	#3,d0
00010CF6 6600                       		bne.s	loc_1049E
00010CF8 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010CFC                            
00010CFC                            loc_1049E:
00010CFC 117C 0001 0038             		move.b	#1,$38(a0)
00010D02                            
00010D02                            loc_104A4:
00010D02 4A68 003A                  		tst.w	$3A(a0)
00010D06 6700                       		beq.s	loc_104C8
00010D08 5568 003A                  		subq.w	#2,$3A(a0)
00010D0C                            
00010D0C                            loc_104AE:
00010D0C 3028 003A                  		move.w	$3A(a0),d0
00010D10 0828 0000 0022             		btst	#0,$22(a0)
00010D16 6700                       		beq.s	loc_104BC
00010D18 4440                       		neg.w	d0
00010D1A                            
00010D1A                            loc_104BC:
00010D1A 3228 0030                  		move.w	$30(a0),d1
00010D1E D240                       		add.w	d0,d1
00010D20 3141 000C                  		move.w	d1,$C(a0)
00010D24 4E75                       		rts	
00010D26                            ; ===========================================================================
00010D26                            
00010D26                            loc_104C8:
00010D26 5228 0028                  		addq.b	#1,$28(a0)
00010D2A 4228 0038                  		clr.b	$38(a0)
00010D2E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D32 7000                       		moveq	#0,d0
00010D34 1028 0023                  		move.b	$23(a0),d0
00010D38 67D2                       		beq.s	loc_104AE
00010D3A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010D40 60CA                       		bra.s	loc_104AE
00010D42                            ; ===========================================================================
00010D42                            
00010D42                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010D42 4A28 0038                  		tst.b	$38(a0)
00010D46 6600                       		bne.s	loc_10500
00010D48 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010D4C 7000                       		moveq	#0,d0
00010D4E 1028 003C                  		move.b	$3C(a0),d0
00010D52 4A32 0000                  		tst.b	(a2,d0.w)
00010D56 6A00                       		bpl.s	loc_10512
00010D58 117C 0001 0038             		move.b	#1,$38(a0)
00010D5E                            
00010D5E                            loc_10500:
00010D5E 7000                       		moveq	#0,d0
00010D60 1028 0016                  		move.b	$16(a0),d0
00010D64 D040                       		add.w	d0,d0
00010D66 B068 003A                  		cmp.w	$3A(a0),d0
00010D6A 6700                       		beq.s	loc_1052C
00010D6C 5468 003A                  		addq.w	#2,$3A(a0)
00010D70                            
00010D70                            loc_10512:
00010D70 3028 003A                  		move.w	$3A(a0),d0
00010D74 0828 0000 0022             		btst	#0,$22(a0)
00010D7A 6700                       		beq.s	loc_10520
00010D7C 4440                       		neg.w	d0
00010D7E                            
00010D7E                            loc_10520:
00010D7E 3228 0030                  		move.w	$30(a0),d1
00010D82 D240                       		add.w	d0,d1
00010D84 3141 000C                  		move.w	d1,$C(a0)
00010D88 4E75                       		rts	
00010D8A                            ; ===========================================================================
00010D8A                            
00010D8A                            loc_1052C:
00010D8A 5328 0028                  		subq.b	#1,$28(a0)
00010D8E 4228 0038                  		clr.b	$38(a0)
00010D92 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D96 7000                       		moveq	#0,d0
00010D98 1028 0023                  		move.b	$23(a0),d0
00010D9C 67D2                       		beq.s	loc_10512
00010D9E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010DA4 60CA                       		bra.s	loc_10512
00010DA6                            ; ===========================================================================
00010DA6                            
00010DA6                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010DA6 4A28 0038                  		tst.b	$38(a0)
00010DAA 6600                       		bne.s	loc_1055E
00010DAC 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010DB0 6700                       		beq.s	locret_10578
00010DB2 117C 0001 0038             		move.b	#1,$38(a0)
00010DB8 4268 003A                  		clr.w	$3A(a0)
00010DBC                            
00010DBC                            loc_1055E:
00010DBC 5268 0008                  		addq.w	#1,8(a0)
00010DC0 3168 0008 0034             		move.w	8(a0),$34(a0)
00010DC6 5268 003A                  		addq.w	#1,$3A(a0)
00010DCA 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010DD0 6600                       		bne.s	locret_10578
00010DD2 4228 0028                  		clr.b	$28(a0)
00010DD6                            
00010DD6                            locret_10578:
00010DD6 4E75                       		rts	
00010DD8                            ; ===========================================================================
00010DD8                            
00010DD8                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010DD8 4A28 0038                  		tst.b	$38(a0)
00010DDC 6600                       		bne.s	loc_10598
00010DDE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010DE2 7000                       		moveq	#0,d0
00010DE4 1028 003C                  		move.b	$3C(a0),d0
00010DE8 0832 0000 0000             		btst	#0,(a2,d0.w)
00010DEE 6700                       		beq.s	loc_105A2
00010DF0 117C 0001 0038             		move.b	#1,$38(a0)
00010DF6                            
00010DF6                            loc_10598:
00010DF6 4A68 003A                  		tst.w	$3A(a0)
00010DFA 6700                       		beq.s	loc_105C0
00010DFC 5568 003A                  		subq.w	#2,$3A(a0)
00010E00                            
00010E00                            loc_105A2:
00010E00 3028 003A                  		move.w	$3A(a0),d0
00010E04 0828 0000 0022             		btst	#0,$22(a0)
00010E0A 6700                       		beq.s	loc_105B4
00010E0C 4440                       		neg.w	d0
00010E0E 0640 0080                  		addi.w	#$80,d0
00010E12                            
00010E12                            loc_105B4:
00010E12 3228 0034                  		move.w	$34(a0),d1
00010E16 D240                       		add.w	d0,d1
00010E18 3141 0008                  		move.w	d1,8(a0)
00010E1C 4E75                       		rts	
00010E1E                            ; ===========================================================================
00010E1E                            
00010E1E                            loc_105C0:
00010E1E 5228 0028                  		addq.b	#1,$28(a0)
00010E22 4228 0038                  		clr.b	$38(a0)
00010E26 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010E2A 7000                       		moveq	#0,d0
00010E2C 1028 0023                  		move.b	$23(a0),d0
00010E30 67CE                       		beq.s	loc_105A2
00010E32 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010E38 60C6                       		bra.s	loc_105A2
00010E3A                            ; ===========================================================================
00010E3A                            
00010E3A                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010E3A 4A28 0038                  		tst.b	$38(a0)
00010E3E 6600                       		bne.s	loc_105F8
00010E40 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010E44 7000                       		moveq	#0,d0
00010E46 1028 003C                  		move.b	$3C(a0),d0
00010E4A 4A32 0000                  		tst.b	(a2,d0.w)
00010E4E 6A00                       		bpl.s	loc_10606
00010E50 117C 0001 0038             		move.b	#1,$38(a0)
00010E56                            
00010E56                            loc_105F8:
00010E56 303C 0080                  		move.w	#$80,d0
00010E5A B068 003A                  		cmp.w	$3A(a0),d0
00010E5E 6700                       		beq.s	loc_10624
00010E60 5468 003A                  		addq.w	#2,$3A(a0)
00010E64                            
00010E64                            loc_10606:
00010E64 3028 003A                  		move.w	$3A(a0),d0
00010E68 0828 0000 0022             		btst	#0,$22(a0)
00010E6E 6700                       		beq.s	loc_10618
00010E70 4440                       		neg.w	d0
00010E72 0640 0080                  		addi.w	#$80,d0
00010E76                            
00010E76                            loc_10618:
00010E76 3228 0034                  		move.w	$34(a0),d1
00010E7A D240                       		add.w	d0,d1
00010E7C 3141 0008                  		move.w	d1,8(a0)
00010E80 4E75                       		rts	
00010E82                            ; ===========================================================================
00010E82                            
00010E82                            loc_10624:
00010E82 5328 0028                  		subq.b	#1,$28(a0)
00010E86 4228 0038                  		clr.b	$38(a0)
00010E8A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010E8E 7000                       		moveq	#0,d0
00010E90 1028 0023                  		move.b	$23(a0),d0
00010E94 67CE                       		beq.s	loc_10606
00010E96 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010E9C 60C6                       		bra.s	loc_10606
00010E9E                            ; ===========================================================================
00010E9E                            
00010E9E                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010E9E 323C 0010                  		move.w	#$10,d1
00010EA2 7000                       		moveq	#0,d0
00010EA4 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010EA8 E248                       		lsr.w	#1,d0
00010EAA 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010EAE 6000                       		bra.s	Obj56_Move_Sqr
00010EB0                            ; ===========================================================================
00010EB0                            
00010EB0                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010EB0 323C 0030                  		move.w	#$30,d1
00010EB4 7000                       		moveq	#0,d0
00010EB6 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010EBA 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010EBE 6000                       		bra.s	Obj56_Move_Sqr
00010EC0                            ; ===========================================================================
00010EC0                            
00010EC0                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010EC0 323C 0050                  		move.w	#$50,d1
00010EC4 7000                       		moveq	#0,d0
00010EC6 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010ECA 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010ECE 6000                       		bra.s	Obj56_Move_Sqr
00010ED0                            ; ===========================================================================
00010ED0                            
00010ED0                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010ED0 323C 0070                  		move.w	#$70,d1
00010ED4 7000                       		moveq	#0,d0
00010ED6 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010EDA 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010EDE                            
00010EDE                            Obj56_Move_Sqr:
00010EDE 4A43                       		tst.w	d3
00010EE0 6600                       		bne.s	loc_1068E
00010EE2 5228 0022                  		addq.b	#1,$22(a0)
00010EE6 0228 0003 0022             		andi.b	#3,$22(a0)
00010EEC                            
00010EEC                            loc_1068E:
00010EEC 1428 0022                  		move.b	$22(a0),d2
00010EF0 0202 0003                  		andi.b	#3,d2
00010EF4 6600                       		bne.s	loc_106AE
00010EF6 9041                       		sub.w	d1,d0
00010EF8 D068 0034                  		add.w	$34(a0),d0
00010EFC 3140 0008                  		move.w	d0,8(a0)
00010F00 4441                       		neg.w	d1
00010F02 D268 0030                  		add.w	$30(a0),d1
00010F06 3141 000C                  		move.w	d1,$C(a0)
00010F0A 4E75                       		rts	
00010F0C                            ; ===========================================================================
00010F0C                            
00010F0C                            loc_106AE:
00010F0C 5302                       		subq.b	#1,d2
00010F0E 6600                       		bne.s	loc_106CC
00010F10 5341                       		subq.w	#1,d1
00010F12 9041                       		sub.w	d1,d0
00010F14 4440                       		neg.w	d0
00010F16 D068 0030                  		add.w	$30(a0),d0
00010F1A 3140 000C                  		move.w	d0,$C(a0)
00010F1E 5241                       		addq.w	#1,d1
00010F20 D268 0034                  		add.w	$34(a0),d1
00010F24 3141 0008                  		move.w	d1,8(a0)
00010F28 4E75                       		rts	
00010F2A                            ; ===========================================================================
00010F2A                            
00010F2A                            loc_106CC:
00010F2A 5302                       		subq.b	#1,d2
00010F2C 6600                       		bne.s	loc_106EA
00010F2E 5341                       		subq.w	#1,d1
00010F30 9041                       		sub.w	d1,d0
00010F32 4440                       		neg.w	d0
00010F34 D068 0034                  		add.w	$34(a0),d0
00010F38 3140 0008                  		move.w	d0,8(a0)
00010F3C 5241                       		addq.w	#1,d1
00010F3E D268 0030                  		add.w	$30(a0),d1
00010F42 3141 000C                  		move.w	d1,$C(a0)
00010F46 4E75                       		rts	
00010F48                            ; ===========================================================================
00010F48                            
00010F48                            loc_106EA:
00010F48 9041                       		sub.w	d1,d0
00010F4A D068 0030                  		add.w	$30(a0),d0
00010F4E 3140 000C                  		move.w	d0,$C(a0)
00010F52 4441                       		neg.w	d1
00010F54 D268 0034                  		add.w	$34(a0),d1
00010F58 3141 0008                  		move.w	d1,8(a0)
00010F5C 4E75                       		rts	
00010F5E                            ; ===========================================================================
00010F5E                            ; ---------------------------------------------------------------------------
00010F5E                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010F5E                            ; ---------------------------------------------------------------------------
00010F5E                            Map_obj56:
00010F5E                            	include "_maps\obj56.asm"
00010F5E                            ; ---------------------------------------------------------------------------
00010F5E                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010F5E                            ; ---------------------------------------------------------------------------
00010F5E 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010F62 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010F66 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010F6A 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010F6E 01                         byte_10710:	dc.b 1
00010F6F F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010F74 04                         byte_10716:	dc.b 4
00010F75 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010F7A E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010F7F 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010F84 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010F89 02                         byte_1072B:	dc.b 2
00010F8A E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010F8F 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010F94 04                         byte_10736:	dc.b 4
00010F95 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010F9A E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010F9F 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010FA4 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010FA9 03                         byte_1074B:	dc.b 3
00010FAA D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010FAF F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010FB4 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010FB9 01                         byte_1075B:	dc.b 1
00010FBA F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010FBF 02                         byte_10761:	dc.b 2
00010FC0 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010FC5 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010FCA 04                         byte_1076C:	dc.b 4
00010FCB F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010FD0 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010FD5 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010FDA F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010FE0 00                         		even
00010FE0 00                         		even
00010FE0                            
00010FE0                            ; ===========================================================================
00010FE0                            ; ---------------------------------------------------------------------------
00010FE0                            ; Object 57 - spiked balls (SYZ, LZ)
00010FE0                            ; ---------------------------------------------------------------------------
00010FE0                            
00010FE0                            Obj57:					; XREF: Obj_Index
00010FE0 7000                       		moveq	#0,d0
00010FE2 1028 0024                  		move.b	$24(a0),d0
00010FE6 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010FEA 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010FEE                            ; ===========================================================================
00010FEE 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010FF0 0000                       		dc.w Obj57_Move-Obj57_Index
00010FF2 0000                       		dc.w Obj57_Display-Obj57_Index
00010FF4                            ; ===========================================================================
00010FF4                            
00010FF4                            Obj57_Main:				; XREF: Obj57_Index
00010FF4 5428 0024                  		addq.b	#2,$24(a0)
00010FF8 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00011000 317C 03BA 0002             		move.w	#$3BA,2(a0)
00011006 117C 0004 0001             		move.b	#4,1(a0)
0001100C 117C 0004 0018             		move.b	#4,$18(a0)
00011012 117C 0008 0019             		move.b	#8,$19(a0)
00011018 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001101E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011024 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
0001102A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011030 6600                       		bne.s	loc_107E8
00011032 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00011038 317C 0310 0002             		move.w	#$310,2(a0)
0001103E 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00011046                            
00011046                            loc_107E8:
00011046 1228 0028                  		move.b	$28(a0),d1	; get object type
0001104A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001104E 4881                       		ext.w	d1
00011050 E741                       		asl.w	#3,d1		; multiply by 8
00011052 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00011056 1028 0022                  		move.b	$22(a0),d0
0001105A E418                       		ror.b	#2,d0
0001105C 0200 00C0                  		andi.b	#-$40,d0
00011060 1140 0026                  		move.b	d0,$26(a0)
00011064 45E8 0029                  		lea	$29(a0),a2
00011068 1228 0028                  		move.b	$28(a0),d1	; get object type
0001106C 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00011070 14FC 0000                  		move.b	#0,(a2)+
00011074 3601                       		move.w	d1,d3
00011076 E94B                       		lsl.w	#4,d3
00011078 1143 003C                  		move.b	d3,$3C(a0)
0001107C 5341                       		subq.w	#1,d1		; set chain length (type-1)
0001107E 6500                       		bcs.s	loc_10894
00011080 0828 0003 0028             		btst	#3,$28(a0)
00011086 6700                       		beq.s	Obj57_MakeChain
00011088 5341                       		subq.w	#1,d1
0001108A 6500                       		bcs.s	loc_10894
0001108C                            
0001108C                            Obj57_MakeChain:
0001108C 6100 D260                  		bsr.w	SingleObjLoad
00011090 6600                       		bne.s	loc_10894
00011092 5228 0029                  		addq.b	#1,$29(a0)
00011096 3A09                       		move.w	a1,d5
00011098 0445 D000                  		subi.w	#-$3000,d5
0001109C EC4D                       		lsr.w	#6,d5
0001109E 0245 007F                  		andi.w	#$7F,d5
000110A2 14C5                       		move.b	d5,(a2)+
000110A4 137C 0004 0024             		move.b	#4,$24(a1)
000110AA 1290                       		move.b	0(a0),0(a1)
000110AC 2368 0004 0004             		move.l	4(a0),4(a1)
000110B2 3368 0002 0002             		move.w	2(a0),2(a1)
000110B8 1368 0001 0001             		move.b	1(a0),1(a1)
000110BE 1368 0018 0018             		move.b	$18(a0),$18(a1)
000110C4 1368 0019 0019             		move.b	$19(a0),$19(a1)
000110CA 1368 0020 0020             		move.b	$20(a0),$20(a1)
000110D0 0403 0010                  		subi.b	#$10,d3
000110D4 1343 003C                  		move.b	d3,$3C(a1)
000110D8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000110DE 6600                       		bne.s	loc_10890
000110E0 4A03                       		tst.b	d3
000110E2 6600                       		bne.s	loc_10890
000110E4 137C 0002 001A             		move.b	#2,$1A(a1)
000110EA                            
000110EA                            loc_10890:
000110EA 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000110EE                            
000110EE                            loc_10894:
000110EE 3A08                       		move.w	a0,d5
000110F0 0445 D000                  		subi.w	#-$3000,d5
000110F4 EC4D                       		lsr.w	#6,d5
000110F6 0245 007F                  		andi.w	#$7F,d5
000110FA 14C5                       		move.b	d5,(a2)+
000110FC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011102 6600                       		bne.s	Obj57_Move
00011104 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
0001110A 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00011110                            
00011110                            Obj57_Move:				; XREF: Obj57_Index
00011110 6100 0000                  		bsr.w	Obj57_MoveSub
00011114 6000 0000                  		bra.w	Obj57_ChkDel
00011118                            ; ===========================================================================
00011118                            
00011118                            Obj57_MoveSub:				; XREF: Obj57_Move
00011118 3028 003E                  		move.w	$3E(a0),d0
0001111C D168 0026                  		add.w	d0,$26(a0)
00011120 1028 0026                  		move.b	$26(a0),d0
00011124 4EB9 0000 2B40             		jsr	(CalcSine).l
0001112A 3428 0038                  		move.w	$38(a0),d2
0001112E 3628 003A                  		move.w	$3A(a0),d3
00011132 45E8 0029                  		lea	$29(a0),a2
00011136 7C00                       		moveq	#0,d6
00011138 1C1A                       		move.b	(a2)+,d6
0001113A                            
0001113A                            Obj57_MoveLoop:
0001113A 7800                       		moveq	#0,d4
0001113C 181A                       		move.b	(a2)+,d4
0001113E ED4C                       		lsl.w	#6,d4
00011140 0684 00FF D000             		addi.l	#$FFD000,d4
00011146 2244                       		movea.l	d4,a1
00011148 7800                       		moveq	#0,d4
0001114A 1829 003C                  		move.b	$3C(a1),d4
0001114E 2A04                       		move.l	d4,d5
00011150 C9C0                       		muls.w	d0,d4
00011152 E084                       		asr.l	#8,d4
00011154 CBC1                       		muls.w	d1,d5
00011156 E085                       		asr.l	#8,d5
00011158 D842                       		add.w	d2,d4
0001115A DA43                       		add.w	d3,d5
0001115C 3344 000C                  		move.w	d4,$C(a1)
00011160 3345 0008                  		move.w	d5,8(a1)
00011164 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011168 4E75                       		rts	
0001116A                            ; ===========================================================================
0001116A                            
0001116A                            Obj57_ChkDel:				; XREF: Obj57_Move
0001116A 3028 003A                  		move.w	$3A(a0),d0
0001116E 0240 FF80                  		andi.w	#$FF80,d0
00011172 3238 F700                  		move.w	($FFFFF700).w,d1
00011176 0441 0080                  		subi.w	#$80,d1
0001117A 0241 FF80                  		andi.w	#$FF80,d1
0001117E 9041                       		sub.w	d1,d0
00011180 0C40 0280                  		cmpi.w	#$280,d0
00011184 6200 0000                  		bhi.w	Obj57_Delete
00011188 6000 CCDE                  		bra.w	DisplaySprite
0001118C                            ; ===========================================================================
0001118C                            
0001118C                            Obj57_Delete:				; XREF: Obj57_ChkDel
0001118C 7400                       		moveq	#0,d2
0001118E 45E8 0029                  		lea	$29(a0),a2
00011192 141A                       		move.b	(a2)+,d2
00011194                            
00011194                            Obj57_DelLoop:
00011194 7000                       		moveq	#0,d0
00011196 101A                       		move.b	(a2)+,d0
00011198 ED48                       		lsl.w	#6,d0
0001119A 0680 00FF D000             		addi.l	#$FFD000,d0
000111A0 2240                       		movea.l	d0,a1
000111A2 6100 CD02                  		bsr.w	DeleteObject2
000111A6 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
000111AA                            
000111AA 4E75                       		rts	
000111AC                            ; ===========================================================================
000111AC                            
000111AC                            Obj57_Display:				; XREF: Obj57_Index
000111AC 6000 CCBA                  		bra.w	DisplaySprite
000111B0                            ; ===========================================================================
000111B0                            ; ---------------------------------------------------------------------------
000111B0                            ; Sprite mappings - chain of spiked balls (SYZ)
000111B0                            ; ---------------------------------------------------------------------------
000111B0                            Map_obj57:
000111B0                            	include "_maps\obj57syz.asm"
000111B0                            ; ---------------------------------------------------------------------------
000111B0                            ; Sprite mappings - chain of spiked balls (SYZ)
000111B0                            ; ---------------------------------------------------------------------------
000111B0 0000                       		dc.w byte_10958-Map_obj57
000111B2 01                         byte_10958:	dc.b 1
000111B3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000111B8                            		even
000111B8                            		even
000111B8                            
000111B8                            ; ---------------------------------------------------------------------------
000111B8                            ; Sprite mappings - spiked ball	on a chain (LZ)
000111B8                            ; ---------------------------------------------------------------------------
000111B8                            Map_obj57a:
000111B8                            	include "_maps\obj57lz.asm"
000111B8                            ; ---------------------------------------------------------------------------
000111B8                            ; Sprite mappings - spiked ball	on a chain (LZ)
000111B8                            ; ---------------------------------------------------------------------------
000111B8 0000                       		dc.w byte_10964-Map_obj57a
000111BA 0000                       		dc.w byte_1096A-Map_obj57a
000111BC 0000                       		dc.w byte_10970-Map_obj57a
000111BE 01                         byte_10964:	dc.b 1
000111BF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000111C4 01                         byte_1096A:	dc.b 1
000111C5 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
000111CA 01                         byte_10970:	dc.b 1
000111CB F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
000111D0                            		even
000111D0                            		even
000111D0                            
000111D0                            ; ===========================================================================
000111D0                            ; ---------------------------------------------------------------------------
000111D0                            ; Object 58 - giant spiked balls (SYZ)
000111D0                            ; ---------------------------------------------------------------------------
000111D0                            
000111D0                            Obj58:					; XREF: Obj_Index
000111D0 7000                       		moveq	#0,d0
000111D2 1028 0024                  		move.b	$24(a0),d0
000111D6 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000111DA 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000111DE                            ; ===========================================================================
000111DE 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000111E0 0000                       		dc.w Obj58_Move-Obj58_Index
000111E2                            ; ===========================================================================
000111E2                            
000111E2                            Obj58_Main:				; XREF: Obj58_Index
000111E2 5428 0024                  		addq.b	#2,$24(a0)
000111E6 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
000111EE 317C 0396 0002             		move.w	#$396,2(a0)
000111F4 117C 0004 0001             		move.b	#4,1(a0)
000111FA 117C 0004 0018             		move.b	#4,$18(a0)
00011200 117C 0018 0019             		move.b	#$18,$19(a0)
00011206 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001120C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011212 117C 0086 0020             		move.b	#$86,$20(a0)
00011218 1228 0028                  		move.b	$28(a0),d1	; get object type
0001121C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011220 4881                       		ext.w	d1
00011222 E741                       		asl.w	#3,d1		; multiply by 8
00011224 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00011228 1028 0022                  		move.b	$22(a0),d0
0001122C E418                       		ror.b	#2,d0
0001122E 0200 00C0                  		andi.b	#$C0,d0
00011232 1140 0026                  		move.b	d0,$26(a0)
00011236 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
0001123C                            
0001123C                            Obj58_Move:				; XREF: Obj58_Index
0001123C 7000                       		moveq	#0,d0
0001123E 1028 0028                  		move.b	$28(a0),d0	; get object type
00011242 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00011246 D040                       		add.w	d0,d0
00011248 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
0001124C 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011250 3028 003A                  		move.w	$3A(a0),d0
00011254 0240 FF80                  		andi.w	#$FF80,d0
00011258 3238 F700                  		move.w	($FFFFF700).w,d1
0001125C 0441 0080                  		subi.w	#$80,d1
00011260 0241 FF80                  		andi.w	#$FF80,d1
00011264 9041                       		sub.w	d1,d0
00011266 0C40 0280                  		cmpi.w	#$280,d0
0001126A 6200 CC38                  		bhi.w	DeleteObject
0001126E 6000 CBF8                  		bra.w	DisplaySprite
00011272                            ; ===========================================================================
00011272 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011274 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011276 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011278 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001127A                            ; ===========================================================================
0001127A                            
0001127A                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001127A 4E75                       		rts	
0001127C                            ; ===========================================================================
0001127C                            
0001127C                            Obj58_Type01:				; XREF: Obj58_TypeIndex
0001127C 323C 0060                  		move.w	#$60,d1
00011280 7000                       		moveq	#0,d0
00011282 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011286 0828 0000 0022             		btst	#0,$22(a0)
0001128C 6700                       		beq.s	loc_10A38
0001128E 4440                       		neg.w	d0
00011290 D041                       		add.w	d1,d0
00011292                            
00011292                            loc_10A38:
00011292 3228 003A                  		move.w	$3A(a0),d1
00011296 9240                       		sub.w	d0,d1
00011298 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001129C 4E75                       		rts	
0001129E                            ; ===========================================================================
0001129E                            
0001129E                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0001129E 323C 0060                  		move.w	#$60,d1
000112A2 7000                       		moveq	#0,d0
000112A4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000112A8 0828 0000 0022             		btst	#0,$22(a0)
000112AE 6700                       		beq.s	loc_10A5C
000112B0 4440                       		neg.w	d0
000112B2 0640 0080                  		addi.w	#$80,d0
000112B6                            
000112B6                            loc_10A5C:
000112B6 3228 0038                  		move.w	$38(a0),d1
000112BA 9240                       		sub.w	d0,d1
000112BC 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000112C0 4E75                       		rts	
000112C2                            ; ===========================================================================
000112C2                            
000112C2                            Obj58_Type03:				; XREF: Obj58_TypeIndex
000112C2 3028 003E                  		move.w	$3E(a0),d0
000112C6 D168 0026                  		add.w	d0,$26(a0)
000112CA 1028 0026                  		move.b	$26(a0),d0
000112CE 4EB9 0000 2B40             		jsr	(CalcSine).l
000112D4 3428 0038                  		move.w	$38(a0),d2
000112D8 3628 003A                  		move.w	$3A(a0),d3
000112DC 7800                       		moveq	#0,d4
000112DE 1828 003C                  		move.b	$3C(a0),d4
000112E2 2A04                       		move.l	d4,d5
000112E4 C9C0                       		muls.w	d0,d4
000112E6 E084                       		asr.l	#8,d4
000112E8 CBC1                       		muls.w	d1,d5
000112EA E085                       		asr.l	#8,d5
000112EC D842                       		add.w	d2,d4
000112EE DA43                       		add.w	d3,d5
000112F0 3144 000C                  		move.w	d4,$C(a0)
000112F4 3145 0008                  		move.w	d5,8(a0)
000112F8 4E75                       		rts	
000112FA                            ; ===========================================================================
000112FA                            ; ---------------------------------------------------------------------------
000112FA                            ; Sprite mappings - SBZ	spiked ball on a chain
000112FA                            ; ---------------------------------------------------------------------------
000112FA                            Map_obj15b:
000112FA                            	include "_maps\obj15sbz.asm"
000112FA                            ; ---------------------------------------------------------------------------
000112FA                            ; Sprite mappings - spiked ball on a chain (SBZ)
000112FA                            ; ---------------------------------------------------------------------------
000112FA 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000112FE 0000                       		dc.w byte_10AC6-Map_obj15b
00011300 05                         byte_10AA6:	dc.b 5
00011301 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011306 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001130B F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011310 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011315 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001131A 01                         byte_10AC0:	dc.b 1
0001131B F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011320 02                         byte_10AC6:	dc.b 2
00011321 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011326 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
0001132C 00                         		even
0001132C 00                         		even
0001132C                            
0001132C                            ; ===========================================================================
0001132C                            ; ---------------------------------------------------------------------------
0001132C                            ; Object 59 - platforms	that move when you stand on them (SLZ)
0001132C                            ; ---------------------------------------------------------------------------
0001132C                            
0001132C                            Obj59:					; XREF: Obj_Index
0001132C 7000                       		moveq	#0,d0
0001132E 1028 0024                  		move.b	$24(a0),d0
00011332 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011336 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0001133A 3028 0032                  		move.w	$32(a0),d0
0001133E 0240 FF80                  		andi.w	#$FF80,d0
00011342 3238 F700                  		move.w	($FFFFF700).w,d1
00011346 0441 0080                  		subi.w	#$80,d1
0001134A 0241 FF80                  		andi.w	#$FF80,d1
0001134E 9041                       		sub.w	d1,d0
00011350 0C40 0280                  		cmpi.w	#$280,d0
00011354 6200 CB4E                  		bhi.w	DeleteObject
00011358 6000 CB0E                  		bra.w	DisplaySprite
0001135C                            ; ===========================================================================
0001135C 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
0001135E 0000                       		dc.w Obj59_Platform-Obj59_Index
00011360 0000                       		dc.w Obj59_Action-Obj59_Index
00011362 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011364                            
00011364 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011366                            
00011366 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011368 2001                       		dc.b $20, 1
0001136A 3401                       		dc.b $34, 1
0001136C 1003                       		dc.b $10, 3
0001136E 2003                       		dc.b $20, 3
00011370 3403                       		dc.b $34, 3
00011372 1401                       		dc.b $14, 1
00011374 2401                       		dc.b $24, 1
00011376 2C01                       		dc.b $2C, 1
00011378 1403                       		dc.b $14, 3
0001137A 2403                       		dc.b $24, 3
0001137C 2C03                       		dc.b $2C, 3
0001137E 2005                       		dc.b $20, 5
00011380 2007                       		dc.b $20, 7
00011382 3009                       		dc.b $30, 9
00011384                            ; ===========================================================================
00011384                            
00011384                            Obj59_Main:				; XREF: Obj59_Index
00011384 5428 0024                  		addq.b	#2,$24(a0)
00011388 7000                       		moveq	#0,d0
0001138A 1028 0028                  		move.b	$28(a0),d0
0001138E 6A00                       		bpl.s	Obj59_Main2
00011390 5828 0024                  		addq.b	#4,$24(a0)
00011394 0240 007F                  		andi.w	#$7F,d0
00011398 C0FC 0006                  		mulu.w	#6,d0
0001139C 3140 003C                  		move.w	d0,$3C(a0)
000113A0 3140 003E                  		move.w	d0,$3E(a0)
000113A4 588F                       		addq.l	#4,sp
000113A6 4E75                       		rts	
000113A8                            ; ===========================================================================
000113A8                            
000113A8                            Obj59_Main2:
000113A8 E648                       		lsr.w	#3,d0
000113AA 0240 001E                  		andi.w	#$1E,d0
000113AE 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000113B2 115A 0019                  		move.b	(a2)+,$19(a0)
000113B6 115A 001A                  		move.b	(a2)+,$1A(a0)
000113BA 7000                       		moveq	#0,d0
000113BC 1028 0028                  		move.b	$28(a0),d0
000113C0 D040                       		add.w	d0,d0
000113C2 0240 001E                  		andi.w	#$1E,d0
000113C6 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000113CA 101A                       		move.b	(a2)+,d0
000113CC E548                       		lsl.w	#2,d0
000113CE 3140 003C                  		move.w	d0,$3C(a0)
000113D2 115A 0028                  		move.b	(a2)+,$28(a0)
000113D6 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000113DE 317C 4000 0002             		move.w	#$4000,2(a0)
000113E4 117C 0004 0001             		move.b	#4,1(a0)
000113EA 117C 0004 0018             		move.b	#4,$18(a0)
000113F0 3168 0008 0032             		move.w	8(a0),$32(a0)
000113F6 3168 000C 0030             		move.w	$C(a0),$30(a0)
000113FC                            
000113FC                            Obj59_Platform:				; XREF: Obj59_Index
000113FC 7200                       		moveq	#0,d1
000113FE 1228 0019                  		move.b	$19(a0),d1
00011402 4EB9 0000 7A72             		jsr	(PlatformObject).l
00011408 6000 0000                  		bra.w	Obj59_Types
0001140C                            ; ===========================================================================
0001140C                            
0001140C                            Obj59_Action:				; XREF: Obj59_Index
0001140C 7200                       		moveq	#0,d1
0001140E 1228 0019                  		move.b	$19(a0),d1
00011412 4EB9 0000 7BE6             		jsr	(ExitPlatform).l
00011418 3F28 0008                  		move.w	8(a0),-(sp)
0001141C 6100 0000                  		bsr.w	Obj59_Types
00011420 341F                       		move.w	(sp)+,d2
00011422 4A10                       		tst.b	0(a0)
00011424 6700                       		beq.s	locret_10BD4
00011426 4EF9 0000 8150             		jmp	(MvSonicOnPtfm2).l
0001142C                            ; ===========================================================================
0001142C                            
0001142C                            locret_10BD4:
0001142C 4E75                       		rts	
0001142E                            ; ===========================================================================
0001142E                            
0001142E                            Obj59_Types:
0001142E 7000                       		moveq	#0,d0
00011430 1028 0028                  		move.b	$28(a0),d0
00011434 0240 000F                  		andi.w	#$F,d0
00011438 D040                       		add.w	d0,d0
0001143A 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
0001143E 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011442                            ; ===========================================================================
00011442 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011446 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001144A 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001144E 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011452 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011456                            ; ===========================================================================
00011456                            
00011456                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011456 4E75                       		rts	
00011458                            ; ===========================================================================
00011458                            
00011458                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011458 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
0001145E 6600                       		bne.s	locret_10C0C
00011460 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011464                            
00011464                            locret_10C0C:
00011464 4E75                       		rts	
00011466                            ; ===========================================================================
00011466                            
00011466                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011466 6100 0000                  		bsr.w	Obj59_Move
0001146A 3028 0034                  		move.w	$34(a0),d0
0001146E 4440                       		neg.w	d0
00011470 D068 0030                  		add.w	$30(a0),d0
00011474 3140 000C                  		move.w	d0,$C(a0)
00011478 4E75                       		rts	
0001147A                            ; ===========================================================================
0001147A                            
0001147A                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001147A 6100 0000                  		bsr.w	Obj59_Move
0001147E 3028 0034                  		move.w	$34(a0),d0
00011482 D068 0030                  		add.w	$30(a0),d0
00011486 3140 000C                  		move.w	d0,$C(a0)
0001148A 4E75                       		rts	
0001148C                            ; ===========================================================================
0001148C                            
0001148C                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001148C 6100 0000                  		bsr.w	Obj59_Move
00011490 3028 0034                  		move.w	$34(a0),d0
00011494 E240                       		asr.w	#1,d0
00011496 4440                       		neg.w	d0
00011498 D068 0030                  		add.w	$30(a0),d0
0001149C 3140 000C                  		move.w	d0,$C(a0)
000114A0 3028 0034                  		move.w	$34(a0),d0
000114A4 D068 0032                  		add.w	$32(a0),d0
000114A8 3140 0008                  		move.w	d0,8(a0)
000114AC 4E75                       		rts	
000114AE                            ; ===========================================================================
000114AE                            
000114AE                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000114AE 6100 0000                  		bsr.w	Obj59_Move
000114B2 3028 0034                  		move.w	$34(a0),d0
000114B6 E240                       		asr.w	#1,d0
000114B8 D068 0030                  		add.w	$30(a0),d0
000114BC 3140 000C                  		move.w	d0,$C(a0)
000114C0 3028 0034                  		move.w	$34(a0),d0
000114C4 4440                       		neg.w	d0
000114C6 D068 0032                  		add.w	$32(a0),d0
000114CA 3140 0008                  		move.w	d0,8(a0)
000114CE 4E75                       		rts	
000114D0                            ; ===========================================================================
000114D0                            
000114D0                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000114D0 6100 0000                  		bsr.w	Obj59_Move
000114D4 3028 0034                  		move.w	$34(a0),d0
000114D8 4440                       		neg.w	d0
000114DA D068 0030                  		add.w	$30(a0),d0
000114DE 3140 000C                  		move.w	d0,$C(a0)
000114E2 4A28 0028                  		tst.b	$28(a0)
000114E6 6700 0000                  		beq.w	loc_10C94
000114EA 4E75                       		rts	
000114EC                            ; ===========================================================================
000114EC                            
000114EC                            loc_10C94:
000114EC 0828 0003 0022             		btst	#3,$22(a0)
000114F2 6700                       		beq.s	Obj59_Delete
000114F4 08E9 0001 0022             		bset	#1,$22(a1)
000114FA 08A9 0003 0022             		bclr	#3,$22(a1)
00011500 137C 0002 0024             		move.b	#2,$24(a1)
00011506                            
00011506                            Obj59_Delete:
00011506 6000 C99C                  		bra.w	DeleteObject
0001150A                            
0001150A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001150A                            
0001150A                            
0001150A                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001150A 3028 0038                  		move.w	$38(a0),d0
0001150E 4A28 003A                  		tst.b	$3A(a0)
00011512 6600                       		bne.s	loc_10CC8
00011514 0C40 0800                  		cmpi.w	#$800,d0
00011518 6400                       		bcc.s	loc_10CD0
0001151A 0640 0010                  		addi.w	#$10,d0
0001151E 6000                       		bra.s	loc_10CD0
00011520                            ; ===========================================================================
00011520                            
00011520                            loc_10CC8:
00011520 4A40                       		tst.w	d0
00011522 6700                       		beq.s	loc_10CD0
00011524 0440 0010                  		subi.w	#$10,d0
00011528                            
00011528                            loc_10CD0:
00011528 3140 0038                  		move.w	d0,$38(a0)
0001152C 48C0                       		ext.l	d0
0001152E E180                       		asl.l	#8,d0
00011530 D0A8 0034                  		add.l	$34(a0),d0
00011534 2140 0034                  		move.l	d0,$34(a0)
00011538 4840                       		swap	d0
0001153A 3428 003C                  		move.w	$3C(a0),d2
0001153E B042                       		cmp.w	d2,d0
00011540 6300                       		bls.s	loc_10CF0
00011542 117C 0001 003A             		move.b	#1,$3A(a0)
00011548                            
00011548                            loc_10CF0:
00011548 D442                       		add.w	d2,d2
0001154A B042                       		cmp.w	d2,d0
0001154C 6600                       		bne.s	locret_10CFA
0001154E 4228 0028                  		clr.b	$28(a0)
00011552                            
00011552                            locret_10CFA:
00011552 4E75                       		rts	
00011554                            ; End of function Obj59_Move
00011554                            
00011554                            ; ===========================================================================
00011554                            
00011554                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011554 5368 003C                  		subq.w	#1,$3C(a0)
00011558 6600                       		bne.s	Obj59_ChkDel
0001155A 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011560 6100 CD8C                  		bsr.w	SingleObjLoad
00011564 6600                       		bne.s	Obj59_ChkDel
00011566 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0001156A 3368 0008 0008             		move.w	8(a0),8(a1)
00011570 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011576 137C 000E 0028             		move.b	#$E,$28(a1)
0001157C                            
0001157C                            Obj59_ChkDel:
0001157C 588F                       		addq.l	#4,sp
0001157E 3028 0008                  		move.w	8(a0),d0
00011582 0240 FF80                  		andi.w	#$FF80,d0
00011586 3238 F700                  		move.w	($FFFFF700).w,d1
0001158A 0441 0080                  		subi.w	#$80,d1
0001158E 0241 FF80                  		andi.w	#$FF80,d1
00011592 9041                       		sub.w	d1,d0
00011594 0C40 0280                  		cmpi.w	#$280,d0
00011598 6200 C90A                  		bhi.w	DeleteObject
0001159C 4E75                       		rts	
0001159E                            ; ===========================================================================
0001159E                            ; ---------------------------------------------------------------------------
0001159E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001159E                            ; ---------------------------------------------------------------------------
0001159E                            Map_obj59:
0001159E                            	include "_maps\obj59.asm"
0001159E                            ; ---------------------------------------------------------------------------
0001159E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001159E                            ; ---------------------------------------------------------------------------
0001159E 0000                       		dc.w byte_10D4A-Map_obj59
000115A0 03                         byte_10D4A:	dc.b 3
000115A1 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000115A6 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000115AB F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000115B0                            		even
000115B0                            		even
000115B0                            
000115B0                            ; ===========================================================================
000115B0                            ; ---------------------------------------------------------------------------
000115B0                            ; Object 5A - platforms	moving in circles (SLZ)
000115B0                            ; ---------------------------------------------------------------------------
000115B0                            
000115B0                            Obj5A:					; XREF: Obj_Index
000115B0 7000                       		moveq	#0,d0
000115B2 1028 0024                  		move.b	$24(a0),d0
000115B6 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000115BA 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000115BE 3028 0032                  		move.w	$32(a0),d0
000115C2 0240 FF80                  		andi.w	#$FF80,d0
000115C6 3238 F700                  		move.w	($FFFFF700).w,d1
000115CA 0441 0080                  		subi.w	#$80,d1
000115CE 0241 FF80                  		andi.w	#$FF80,d1
000115D2 9041                       		sub.w	d1,d0
000115D4 0C40 0280                  		cmpi.w	#$280,d0
000115D8 6200 C8CA                  		bhi.w	DeleteObject
000115DC 6000 C88A                  		bra.w	DisplaySprite
000115E0                            ; ===========================================================================
000115E0 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000115E2 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000115E4 0000                       		dc.w Obj5A_Action-Obj5A_Index
000115E6                            ; ===========================================================================
000115E6                            
000115E6                            Obj5A_Main:				; XREF: Obj5A_Index
000115E6 5428 0024                  		addq.b	#2,$24(a0)
000115EA 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000115F2 317C 4000 0002             		move.w	#$4000,2(a0)
000115F8 117C 0004 0001             		move.b	#4,1(a0)
000115FE 117C 0004 0018             		move.b	#4,$18(a0)
00011604 117C 0018 0019             		move.b	#$18,$19(a0)
0001160A 3168 0008 0032             		move.w	8(a0),$32(a0)
00011610 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011616                            
00011616                            Obj5A_Platform:				; XREF: Obj5A_Index
00011616 7200                       		moveq	#0,d1
00011618 1228 0019                  		move.b	$19(a0),d1
0001161C 4EB9 0000 7A72             		jsr	(PlatformObject).l
00011622 6000 0000                  		bra.w	Obj5A_Types
00011626                            ; ===========================================================================
00011626                            
00011626                            Obj5A_Action:				; XREF: Obj5A_Index
00011626 7200                       		moveq	#0,d1
00011628 1228 0019                  		move.b	$19(a0),d1
0001162C 4EB9 0000 7BE6             		jsr	(ExitPlatform).l
00011632 3F28 0008                  		move.w	8(a0),-(sp)
00011636 6100 0000                  		bsr.w	Obj5A_Types
0001163A 341F                       		move.w	(sp)+,d2
0001163C 4EF9 0000 8150             		jmp	(MvSonicOnPtfm2).l
00011642                            ; ===========================================================================
00011642                            
00011642                            Obj5A_Types:
00011642 7000                       		moveq	#0,d0
00011644 1028 0028                  		move.b	$28(a0),d0
00011648 0240 000C                  		andi.w	#$C,d0
0001164C E248                       		lsr.w	#1,d0
0001164E 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011652 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011656                            ; ===========================================================================
00011656 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011658 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0001165A                            ; ===========================================================================
0001165A                            
0001165A                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0001165A 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001165E 0401 0050                  		subi.b	#$50,d1
00011662 4881                       		ext.w	d1
00011664 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011668 0402 0050                  		subi.b	#$50,d2
0001166C 4882                       		ext.w	d2
0001166E 0828 0000 0028             		btst	#0,$28(a0)
00011674 6700                       		beq.s	loc_10E24
00011676 4441                       		neg.w	d1
00011678 4442                       		neg.w	d2
0001167A                            
0001167A                            loc_10E24:
0001167A 0828 0001 0028             		btst	#1,$28(a0)
00011680 6700                       		beq.s	loc_10E30
00011682 4441                       		neg.w	d1
00011684 C342                       		exg	d1,d2
00011686                            
00011686                            loc_10E30:
00011686 D268 0032                  		add.w	$32(a0),d1
0001168A 3141 0008                  		move.w	d1,8(a0)
0001168E D468 0030                  		add.w	$30(a0),d2
00011692 3142 000C                  		move.w	d2,$C(a0)
00011696 4E75                       		rts	
00011698                            ; ===========================================================================
00011698                            
00011698                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011698 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001169C 0401 0050                  		subi.b	#$50,d1
000116A0 4881                       		ext.w	d1
000116A2 1438 FE84                  		move.b	($FFFFFE84).w,d2
000116A6 0402 0050                  		subi.b	#$50,d2
000116AA 4882                       		ext.w	d2
000116AC 0828 0000 0028             		btst	#0,$28(a0)
000116B2 6700                       		beq.s	loc_10E62
000116B4 4441                       		neg.w	d1
000116B6 4442                       		neg.w	d2
000116B8                            
000116B8                            loc_10E62:
000116B8 0828 0001 0028             		btst	#1,$28(a0)
000116BE 6700                       		beq.s	loc_10E6E
000116C0 4441                       		neg.w	d1
000116C2 C342                       		exg	d1,d2
000116C4                            
000116C4                            loc_10E6E:
000116C4 4441                       		neg.w	d1
000116C6 D268 0032                  		add.w	$32(a0),d1
000116CA 3141 0008                  		move.w	d1,8(a0)
000116CE D468 0030                  		add.w	$30(a0),d2
000116D2 3142 000C                  		move.w	d2,$C(a0)
000116D6 4E75                       		rts	
000116D8                            ; ===========================================================================
000116D8                            ; ---------------------------------------------------------------------------
000116D8                            ; Sprite mappings - platforms that move	in circles (SLZ)
000116D8                            ; ---------------------------------------------------------------------------
000116D8                            Map_obj5A:
000116D8                            	include "_maps\obj5A.asm"
000116D8                            ; ---------------------------------------------------------------------------
000116D8                            ; Sprite mappings - platforms that move	in circles (SLZ)
000116D8                            ; ---------------------------------------------------------------------------
000116D8 0000                       		dc.w byte_10E84-Map_obj5A
000116DA 02                         byte_10E84:	dc.b 2
000116DB F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000116E0 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000116E6 00                         		even
000116E6 00                         		even
000116E6                            
000116E6                            ; ===========================================================================
000116E6                            ; ---------------------------------------------------------------------------
000116E6                            ; Object 5B - blocks that form a staircase (SLZ)
000116E6                            ; ---------------------------------------------------------------------------
000116E6                            
000116E6                            Obj5B:					; XREF: Obj_Index
000116E6 7000                       		moveq	#0,d0
000116E8 1028 0024                  		move.b	$24(a0),d0
000116EC 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000116F0 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000116F4 3028 0030                  		move.w	$30(a0),d0
000116F8 0240 FF80                  		andi.w	#$FF80,d0
000116FC 3238 F700                  		move.w	($FFFFF700).w,d1
00011700 0441 0080                  		subi.w	#$80,d1
00011704 0241 FF80                  		andi.w	#$FF80,d1
00011708 9041                       		sub.w	d1,d0
0001170A 0C40 0280                  		cmpi.w	#$280,d0
0001170E 6200 C794                  		bhi.w	DeleteObject
00011712 6000 C754                  		bra.w	DisplaySprite
00011716                            ; ===========================================================================
00011716 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011718 0000                       		dc.w Obj5B_Move-Obj5B_Index
0001171A 0000                       		dc.w Obj5B_Solid-Obj5B_Index
0001171C                            ; ===========================================================================
0001171C                            
0001171C                            Obj5B_Main:				; XREF: Obj5B_Index
0001171C 5428 0024                  		addq.b	#2,$24(a0)
00011720 7638                       		moveq	#$38,d3
00011722 7801                       		moveq	#1,d4
00011724 0828 0000 0022             		btst	#0,$22(a0)
0001172A 6700                       		beq.s	loc_10EDA
0001172C 763B                       		moveq	#$3B,d3
0001172E 78FF                       		moveq	#-1,d4
00011730                            
00011730                            loc_10EDA:
00011730 3428 0008                  		move.w	8(a0),d2
00011734 2248                       		movea.l	a0,a1
00011736 7203                       		moveq	#3,d1
00011738 6000                       		bra.s	Obj5B_MakeBlocks
0001173A                            ; ===========================================================================
0001173A                            
0001173A                            Obj5B_Loop:
0001173A 6100 CBC8                  		bsr.w	SingleObjLoad2
0001173E 6600 0000                  		bne.w	Obj5B_Move
00011742 137C 0004 0024             		move.b	#4,$24(a1)
00011748                            
00011748                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011748 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
0001174C 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011754 337C 4000 0002             		move.w	#$4000,2(a1)
0001175A 137C 0004 0001             		move.b	#4,1(a1)
00011760 137C 0003 0018             		move.b	#3,$18(a1)
00011766 137C 0010 0019             		move.b	#$10,$19(a1)
0001176C 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011772 3342 0008                  		move.w	d2,8(a1)
00011776 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001177C 3368 0008 0030             		move.w	8(a0),$30(a1)
00011782 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011788 0642 0020                  		addi.w	#$20,d2
0001178C 1343 0037                  		move.b	d3,$37(a1)
00011790 2348 003C                  		move.l	a0,$3C(a1)
00011794 D604                       		add.b	d4,d3
00011796 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0001179A                            
0001179A                            Obj5B_Move:				; XREF: Obj5B_Index
0001179A 7000                       		moveq	#0,d0
0001179C 1028 0028                  		move.b	$28(a0),d0
000117A0 0240 0007                  		andi.w	#7,d0
000117A4 D040                       		add.w	d0,d0
000117A6 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000117AA 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000117AE                            
000117AE                            Obj5B_Solid:				; XREF: Obj5B_Index
000117AE 2468 003C                  		movea.l	$3C(a0),a2
000117B2 7000                       		moveq	#0,d0
000117B4 1028 0037                  		move.b	$37(a0),d0
000117B8 1032 0000                  		move.b	(a2,d0.w),d0
000117BC D068 0032                  		add.w	$32(a0),d0
000117C0 3140 000C                  		move.w	d0,$C(a0)
000117C4 7200                       		moveq	#0,d1
000117C6 1228 0019                  		move.b	$19(a0),d1
000117CA 0641 000B                  		addi.w	#$B,d1
000117CE 343C 0010                  		move.w	#$10,d2
000117D2 363C 0011                  		move.w	#$11,d3
000117D6 3828 0008                  		move.w	8(a0),d4
000117DA 6100 EA5C                  		bsr.w	SolidObject
000117DE 4A04                       		tst.b	d4
000117E0 6A00                       		bpl.s	loc_10F92
000117E2 1544 0036                  		move.b	d4,$36(a2)
000117E6                            
000117E6                            loc_10F92:
000117E6 0828 0003 0022             		btst	#3,$22(a0)
000117EC 6700                       		beq.s	locret_10FA0
000117EE 157C 0001 0036             		move.b	#1,$36(a2)
000117F4                            
000117F4                            locret_10FA0:
000117F4 4E75                       		rts	
000117F6                            ; ===========================================================================
000117F6 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000117F8 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000117FA 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000117FC 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000117FE                            ; ===========================================================================
000117FE                            
000117FE                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000117FE 4A68 0034                  		tst.w	$34(a0)
00011802 6600                       		bne.s	loc_10FC0
00011804 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001180A 6600                       		bne.s	locret_10FBE
0001180C 317C 001E 0034             		move.w	#$1E,$34(a0)
00011812                            
00011812                            locret_10FBE:
00011812 4E75                       		rts	
00011814                            ; ===========================================================================
00011814                            
00011814                            loc_10FC0:
00011814 5368 0034                  		subq.w	#1,$34(a0)
00011818 66F8                       		bne.s	locret_10FBE
0001181A 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001181E 4E75                       		rts	
00011820                            ; ===========================================================================
00011820                            
00011820                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011820 4A68 0034                  		tst.w	$34(a0)
00011824 6600                       		bne.s	loc_10FE0
00011826 4A28 0036                  		tst.b	$36(a0)
0001182A 6A00                       		bpl.s	locret_10FDE
0001182C 317C 003C 0034             		move.w	#$3C,$34(a0)
00011832                            
00011832                            locret_10FDE:
00011832 4E75                       		rts	
00011834                            ; ===========================================================================
00011834                            
00011834                            loc_10FE0:
00011834 5368 0034                  		subq.w	#1,$34(a0)
00011838 6600                       		bne.s	loc_10FEC
0001183A 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001183E 4E75                       		rts	
00011840                            ; ===========================================================================
00011840                            
00011840                            loc_10FEC:
00011840 43E8 0038                  		lea	$38(a0),a1
00011844 3028 0034                  		move.w	$34(a0),d0
00011848 E408                       		lsr.b	#2,d0
0001184A 0200 0001                  		andi.b	#1,d0
0001184E 12C0                       		move.b	d0,(a1)+
00011850 0A00 0001                  		eori.b	#1,d0
00011854 12C0                       		move.b	d0,(a1)+
00011856 0A00 0001                  		eori.b	#1,d0
0001185A 12C0                       		move.b	d0,(a1)+
0001185C 0A00 0001                  		eori.b	#1,d0
00011860 12C0                       		move.b	d0,(a1)+
00011862 4E75                       		rts	
00011864                            ; ===========================================================================
00011864                            
00011864                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011864 43E8 0038                  		lea	$38(a0),a1
00011868 0C11 0080                  		cmpi.b	#$80,(a1)
0001186C 6700                       		beq.s	locret_11038
0001186E 5211                       		addq.b	#1,(a1)
00011870 7200                       		moveq	#0,d1
00011872 1219                       		move.b	(a1)+,d1
00011874 4841                       		swap	d1
00011876 E289                       		lsr.l	#1,d1
00011878 2401                       		move.l	d1,d2
0001187A E289                       		lsr.l	#1,d1
0001187C 2601                       		move.l	d1,d3
0001187E D682                       		add.l	d2,d3
00011880 4841                       		swap	d1
00011882 4842                       		swap	d2
00011884 4843                       		swap	d3
00011886 12C3                       		move.b	d3,(a1)+
00011888 12C2                       		move.b	d2,(a1)+
0001188A 12C1                       		move.b	d1,(a1)+
0001188C                            
0001188C                            locret_11038:
0001188C 4E75                       		rts	
0001188E 4E75                       		rts	
00011890                            ; ===========================================================================
00011890                            ; ---------------------------------------------------------------------------
00011890                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011890                            ; ---------------------------------------------------------------------------
00011890                            Map_obj5B:
00011890                            	include "_maps\obj5B.asm"
00011890                            ; ---------------------------------------------------------------------------
00011890                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011890                            ; ---------------------------------------------------------------------------
00011890 0000                       		dc.w byte_1103E-Map_obj5B
00011892 01                         byte_1103E:	dc.b 1
00011893 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011898                            		even
00011898                            		even
00011898                            
00011898                            ; ===========================================================================
00011898                            ; ---------------------------------------------------------------------------
00011898                            ; Object 5C - metal girders in foreground (SLZ)
00011898                            ; ---------------------------------------------------------------------------
00011898                            
00011898                            Obj5C:					; XREF: Obj_Index
00011898 7000                       		moveq	#0,d0
0001189A 1028 0024                  		move.b	$24(a0),d0
0001189E 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000118A2 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000118A6                            ; ===========================================================================
000118A6 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000118A8 0000                       		dc.w Obj5C_Display-Obj5C_Index
000118AA                            ; ===========================================================================
000118AA                            
000118AA                            Obj5C_Main:				; XREF: Obj5C_Index
000118AA 5428 0024                  		addq.b	#2,$24(a0)
000118AE 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000118B6 317C 83CC 0002             		move.w	#$83CC,2(a0)
000118BC 117C 0010 0019             		move.b	#$10,$19(a0)
000118C2                            
000118C2                            Obj5C_Display:				; XREF: Obj5C_Index
000118C2 2238 F700                  		move.l	($FFFFF700).w,d1
000118C6 D281                       		add.l	d1,d1
000118C8 4841                       		swap	d1
000118CA 4441                       		neg.w	d1
000118CC 3141 0008                  		move.w	d1,8(a0)
000118D0 2238 F704                  		move.l	($FFFFF704).w,d1
000118D4 D281                       		add.l	d1,d1
000118D6 4841                       		swap	d1
000118D8 0241 003F                  		andi.w	#$3F,d1
000118DC 4441                       		neg.w	d1
000118DE 0641 0100                  		addi.w	#$100,d1
000118E2 3141 000A                  		move.w	d1,$A(a0)
000118E6 6000 C580                  		bra.w	DisplaySprite
000118EA                            ; ===========================================================================
000118EA                            ; ---------------------------------------------------------------------------
000118EA                            ; Sprite mappings - metal girders in foreground	(SLZ)
000118EA                            ; ---------------------------------------------------------------------------
000118EA                            Map_obj5C:
000118EA                            	include "_maps\obj5C.asm"
000118EA                            ; ---------------------------------------------------------------------------
000118EA                            ; Sprite mappings - metal girders in foreground	(SLZ)
000118EA                            ; ---------------------------------------------------------------------------
000118EA 0000                       		dc.w byte_11098-Map_obj5C
000118EC 09                         byte_11098:	dc.b 9
000118ED 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000118F2 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000118F7 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000118FC E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011901 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011906 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001190B 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011910 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011915 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001191A                            		even
0001191A                            		even
0001191A                            
0001191A                            ; ===========================================================================
0001191A                            ; ---------------------------------------------------------------------------
0001191A                            ; Object 1B - water surface (LZ)
0001191A                            ; ---------------------------------------------------------------------------
0001191A                            
0001191A                            Obj1B:					; XREF: Obj_Index
0001191A 7000                       		moveq	#0,d0
0001191C 1028 0024                  		move.b	$24(a0),d0
00011920 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011924 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011928                            ; ===========================================================================
00011928 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
0001192A 0000                       		dc.w Obj1B_Action-Obj1B_Index
0001192C                            ; ===========================================================================
0001192C                            
0001192C                            Obj1B_Main:				; XREF: Obj1B_Index
0001192C 5428 0024                  		addq.b	#2,$24(a0)
00011930 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011938 317C C300 0002             		move.w	#$C300,2(a0)
0001193E 117C 0004 0001             		move.b	#4,1(a0)
00011944 117C 0080 0019             		move.b	#$80,$19(a0)
0001194A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011950                            
00011950                            Obj1B_Action:				; XREF: Obj1B_Index
00011950 3238 F700                  		move.w	($FFFFF700).w,d1
00011954 0241 FFE0                  		andi.w	#$FFE0,d1
00011958 D268 0030                  		add.w	$30(a0),d1
0001195C 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011962 6700                       		beq.s	loc_11114
00011964 0641 0020                  		addi.w	#$20,d1
00011968                            
00011968                            loc_11114:
00011968 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
0001196C 3238 F646                  		move.w	($FFFFF646).w,d1
00011970 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011974 4A28 0032                  		tst.b	$32(a0)
00011978 6600                       		bne.s	Obj1B_Animate
0001197A 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011980 6700                       		beq.s	loc_1114A	; if not, branch
00011982 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011986 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
0001198C 6000                       		bra.s	Obj1B_Display
0001198E                            ; ===========================================================================
0001198E                            
0001198E                            Obj1B_Animate:				; XREF: loc_11114
0001198E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011992 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011994 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
0001199A 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
0001199E                            
0001199E                            loc_1114A:				; XREF: loc_11114
0001199E 5328 001E                  		subq.b	#1,$1E(a0)
000119A2 6A00                       		bpl.s	Obj1B_Display
000119A4 117C 0007 001E             		move.b	#7,$1E(a0)
000119AA 5228 001A                  		addq.b	#1,$1A(a0)
000119AE 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000119B4 6500                       		bcs.s	Obj1B_Display
000119B6 117C 0000 001A             		move.b	#0,$1A(a0)
000119BC                            
000119BC                            Obj1B_Display:
000119BC 6000 C4AA                  		bra.w	DisplaySprite
000119C0                            ; ===========================================================================
000119C0                            ; ---------------------------------------------------------------------------
000119C0                            ; Sprite mappings - water surface (LZ)
000119C0                            ; ---------------------------------------------------------------------------
000119C0                            Map_obj1B:
000119C0                            	include "_maps\obj1B.asm"
000119C0                            ; ---------------------------------------------------------------------------
000119C0                            ; Sprite mappings - water surface (LZ)
000119C0                            ; ---------------------------------------------------------------------------
000119C0 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000119C4 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000119C8 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000119CC 03                         byte_11178:	dc.b 3
000119CD FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000119D2 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000119D7 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000119DC 03                         byte_11188:	dc.b 3
000119DD FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000119E2 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000119E7 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000119EC 03                         byte_11198:	dc.b 3
000119ED FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000119F2 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000119F7 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000119FC 06                         byte_111A8:	dc.b 6
000119FD FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011A02 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011A07 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011A0C FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011A11 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011A16 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011A1B 06                         byte_111C7:	dc.b 6
00011A1C FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011A21 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011A26 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011A2B FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011A30 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011A35 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011A3A 06                         byte_111E6:	dc.b 6
00011A3B FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011A40 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011A45 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011A4A FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011A4F FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011A54 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011A5A 00                         		even
00011A5A 00                         		even
00011A5A                            
00011A5A                            ; ===========================================================================
00011A5A                            ; ---------------------------------------------------------------------------
00011A5A                            ; Object 0B - pole that	breaks (LZ)
00011A5A                            ; ---------------------------------------------------------------------------
00011A5A                            
00011A5A                            Obj0B:					; XREF: Obj_Index
00011A5A 7000                       		moveq	#0,d0
00011A5C 1028 0024                  		move.b	$24(a0),d0
00011A60 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011A64 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011A68                            ; ===========================================================================
00011A68 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011A6A 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011A6C 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011A6E                            ; ===========================================================================
00011A6E                            
00011A6E                            Obj0B_Main:				; XREF: Obj0B_Index
00011A6E 5428 0024                  		addq.b	#2,$24(a0)
00011A72 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011A7A 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011A80 117C 0004 0001             		move.b	#4,1(a0)
00011A86 117C 0008 0019             		move.b	#8,$19(a0)
00011A8C 117C 0004 0018             		move.b	#4,$18(a0)
00011A92 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011A98 7000                       		moveq	#0,d0
00011A9A 1028 0028                  		move.b	$28(a0),d0	; get object type
00011A9E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011AA2 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011AA6                            
00011AA6                            Obj0B_Action:				; XREF: Obj0B_Index
00011AA6 4A28 0032                  		tst.b	$32(a0)
00011AAA 6700                       		beq.s	Obj0B_Grab
00011AAC 4A68 0030                  		tst.w	$30(a0)
00011AB0 6700                       		beq.s	Obj0B_MoveUp
00011AB2 5368 0030                  		subq.w	#1,$30(a0)
00011AB6 6600                       		bne.s	Obj0B_MoveUp
00011AB8 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011ABE 6000                       		bra.s	Obj0B_Release
00011AC0                            ; ===========================================================================
00011AC0                            
00011AC0                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011AC0 43F8 D000                  		lea	($FFFFD000).w,a1
00011AC4 3028 000C                  		move.w	$C(a0),d0
00011AC8 0440 0018                  		subi.w	#$18,d0
00011ACC 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011AD2 6700                       		beq.s	Obj0B_MoveDown
00011AD4 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011AD8 B069 000C                  		cmp.w	$C(a1),d0
00011ADC 6500                       		bcs.s	Obj0B_MoveDown
00011ADE 3340 000C                  		move.w	d0,$C(a1)
00011AE2                            
00011AE2                            Obj0B_MoveDown:
00011AE2 0640 0024                  		addi.w	#$24,d0
00011AE6 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011AEC 6700                       		beq.s	Obj0B_LetGo
00011AEE 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011AF2 B069 000C                  		cmp.w	$C(a1),d0
00011AF6 6400                       		bcc.s	Obj0B_LetGo
00011AF8 3340 000C                  		move.w	d0,$C(a1)
00011AFC                            
00011AFC                            Obj0B_LetGo:
00011AFC 1038 F603                  		move.b	($FFFFF603).w,d0
00011B00 0240 0070                  		andi.w	#$70,d0
00011B04 6700                       		beq.s	Obj0B_Display
00011B06                            
00011B06                            Obj0B_Release:				; XREF: Obj0B_Action
00011B06 4228 0020                  		clr.b	$20(a0)
00011B0A 5428 0024                  		addq.b	#2,$24(a0)
00011B0E 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011B12 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011B16 4228 0032                  		clr.b	$32(a0)
00011B1A 6000                       		bra.s	Obj0B_Display
00011B1C                            ; ===========================================================================
00011B1C                            
00011B1C                            Obj0B_Grab:				; XREF: Obj0B_Action
00011B1C 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011B20 6700                       		beq.s	Obj0B_Display	; if not, branch
00011B22 43F8 D000                  		lea	($FFFFD000).w,a1
00011B26 3028 0008                  		move.w	8(a0),d0
00011B2A 0640 0014                  		addi.w	#$14,d0
00011B2E B069 0008                  		cmp.w	8(a1),d0
00011B32 6400                       		bcc.s	Obj0B_Display
00011B34 4228 0021                  		clr.b	$21(a0)
00011B38 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011B3E 6400                       		bcc.s	Obj0B_Display
00011B40 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011B44 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011B48 3028 0008                  		move.w	8(a0),d0
00011B4C 0640 0014                  		addi.w	#$14,d0
00011B50 3340 0008                  		move.w	d0,8(a1)
00011B54 08A9 0000 0022             		bclr	#0,$22(a1)
00011B5A 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011B60 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011B66 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011B6C 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011B72                            
00011B72                            Obj0B_Display:				; XREF: Obj0B_Index
00011B72 6000 E39C                  		bra.w	MarkObjGone
00011B76                            ; ===========================================================================
00011B76                            ; ---------------------------------------------------------------------------
00011B76                            ; Sprite mappings - pole that breaks (LZ)
00011B76                            ; ---------------------------------------------------------------------------
00011B76                            Map_obj0B:
00011B76                            	include "_maps\obj0B.asm"
00011B76                            ; ---------------------------------------------------------------------------
00011B76                            ; Sprite mappings - pole that breaks (LZ)
00011B76                            ; ---------------------------------------------------------------------------
00011B76 0000                       		dc.w byte_11326-Map_obj0B
00011B78 0000                       		dc.w byte_11331-Map_obj0B
00011B7A 02                         byte_11326:	dc.b 2			; normal pole
00011B7B E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011B80 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011B85 04                         byte_11331:	dc.b 4			; broken pole
00011B86 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011B8B F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011B90 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011B95 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011B9A                            		even
00011B9A                            		even
00011B9A                            
00011B9A                            ; ===========================================================================
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A                            ; Object 0C - flapping door (LZ)
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A                            
00011B9A                            Obj0C:					; XREF: Obj_Index
00011B9A 7000                       		moveq	#0,d0
00011B9C 1028 0024                  		move.b	$24(a0),d0
00011BA0 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011BA4 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011BA8                            ; ===========================================================================
00011BA8 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011BAA 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011BAC                            ; ===========================================================================
00011BAC                            
00011BAC                            Obj0C_Main:				; XREF: Obj0C_Index
00011BAC 5428 0024                  		addq.b	#2,$24(a0)
00011BB0 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011BB8 317C 4328 0002             		move.w	#$4328,2(a0)
00011BBE 0028 0004 0001             		ori.b	#4,1(a0)
00011BC4 117C 0028 0019             		move.b	#$28,$19(a0)
00011BCA 7000                       		moveq	#0,d0
00011BCC 1028 0028                  		move.b	$28(a0),d0	; get object type
00011BD0 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011BD4 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011BD8                            
00011BD8                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011BD8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011BDC 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011BDE 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011BE4 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011BEA 4A28 0001                  		tst.b	1(a0)
00011BEE 6A00                       		bpl.s	Obj0C_Solid
00011BF0 303C 00BB                  		move.w	#$BB,d0
00011BF4 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play door sound
00011BFA                            
00011BFA                            Obj0C_Solid:
00011BFA 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011C00 6100 92B4                  		bsr.w	AnimateSprite
00011C04 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011C08 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011C0C 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011C0E 3038 D008                  		move.w	($FFFFD008).w,d0
00011C12 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011C16 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011C18 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011C1E 323C 0013                  		move.w	#$13,d1
00011C22 343C 0020                  		move.w	#$20,d2
00011C26 3602                       		move.w	d2,d3
00011C28 5243                       		addq.w	#1,d3
00011C2A 3828 0008                  		move.w	8(a0),d4
00011C2E 6100 E608                  		bsr.w	SolidObject	; make the door	solid
00011C32                            
00011C32                            Obj0C_Display:
00011C32 6000 E2DC                  		bra.w	MarkObjGone
00011C36                            ; ===========================================================================
00011C36                            Ani_obj0C:
00011C36                            	include "_anim\obj0C.asm"
00011C36                            ; ---------------------------------------------------------------------------
00011C36                            ; Animation script - flapping door (LZ)
00011C36                            ; ---------------------------------------------------------------------------
00011C36 0000                       		dc.w byte_113E6-Ani_obj0C
00011C38 0000                       		dc.w byte_113EC-Ani_obj0C
00011C3A 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011C40 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011C46                            		even
00011C46                            		even
00011C46                            
00011C46                            ; ---------------------------------------------------------------------------
00011C46                            ; Sprite mappings - flapping door (LZ)
00011C46                            ; ---------------------------------------------------------------------------
00011C46                            Map_obj0C:
00011C46                            	include "_maps\obj0C.asm"
00011C46                            ; ---------------------------------------------------------------------------
00011C46                            ; Sprite mappings - flapping door (LZ)
00011C46                            ; ---------------------------------------------------------------------------
00011C46 0000                       		dc.w byte_113F8-Map_obj0C
00011C48 0000                       		dc.w byte_11403-Map_obj0C
00011C4A 0000                       		dc.w byte_1140E-Map_obj0C
00011C4C 02                         byte_113F8:	dc.b 2
00011C4D E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011C52 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011C57 02                         byte_11403:	dc.b 2
00011C58 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011C5D 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011C62 02                         byte_1140E:	dc.b 2
00011C63 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011C68 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011C6E 00                         		even
00011C6E 00                         		even
00011C6E                            
00011C6E                            ; ===========================================================================
00011C6E                            ; ---------------------------------------------------------------------------
00011C6E                            ; Object 71 - invisible	solid blocks
00011C6E                            ; ---------------------------------------------------------------------------
00011C6E                            
00011C6E                            Obj71:					; XREF: Obj_Index
00011C6E 7000                       		moveq	#0,d0
00011C70 1028 0024                  		move.b	$24(a0),d0
00011C74 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011C78 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011C7C                            ; ===========================================================================
00011C7C 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011C7E 0000                       		dc.w Obj71_Solid-Obj71_Index
00011C80                            ; ===========================================================================
00011C80                            
00011C80                            Obj71_Main:				; XREF: Obj71_Index
00011C80 5428 0024                  		addq.b	#2,$24(a0)
00011C84 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011C8C 317C 8680 0002             		move.w	#$8680,2(a0)
00011C92 0028 0004 0001             		ori.b	#4,1(a0)
00011C98 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C9C 1200                       		move.b	d0,d1
00011C9E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011CA2 0640 0010                  		addi.w	#$10,d0
00011CA6 E248                       		lsr.w	#1,d0
00011CA8 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011CAC 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011CB0 5241                       		addq.w	#1,d1
00011CB2 E749                       		lsl.w	#3,d1
00011CB4 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011CB8                            
00011CB8                            Obj71_Solid:				; XREF: Obj71_Index
00011CB8 6100 C428                  		bsr.w	ChkObjOnScreen
00011CBC 6600                       		bne.s	Obj71_ChkDel
00011CBE 7200                       		moveq	#0,d1
00011CC0 1228 0019                  		move.b	$19(a0),d1
00011CC4 0641 000B                  		addi.w	#$B,d1
00011CC8 7400                       		moveq	#0,d2
00011CCA 1428 0016                  		move.b	$16(a0),d2
00011CCE 3602                       		move.w	d2,d3
00011CD0 5243                       		addq.w	#1,d3
00011CD2 3828 0008                  		move.w	8(a0),d4
00011CD6 6100 E5A8                  		bsr.w	SolidObject71
00011CDA                            
00011CDA                            Obj71_ChkDel:
00011CDA 3028 0008                  		move.w	8(a0),d0
00011CDE 0240 FF80                  		andi.w	#$FF80,d0
00011CE2 3238 F700                  		move.w	($FFFFF700).w,d1
00011CE6 0441 0080                  		subi.w	#$80,d1
00011CEA 0241 FF80                  		andi.w	#$FF80,d1
00011CEE 9041                       		sub.w	d1,d0
00011CF0 0C40 0280                  		cmpi.w	#$280,d0
00011CF4 6200                       		bhi.s	Obj71_Delete
00011CF6 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011CFA 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011CFC 4EFA C16A                  		jmp	DisplaySprite	; if yes, display the object
00011D00                            ; ===========================================================================
00011D00                            
00011D00                            Obj71_NoDisplay:
00011D00 4E75                       		rts	
00011D02                            ; ===========================================================================
00011D02                            
00011D02                            Obj71_Delete:
00011D02 4EFA C1A0                  		jmp	DeleteObject
00011D06                            ; ===========================================================================
00011D06                            ; ---------------------------------------------------------------------------
00011D06                            ; Sprite mappings - invisible solid blocks
00011D06                            ; ---------------------------------------------------------------------------
00011D06                            Map_obj71:
00011D06                            	include "_maps\obj71.asm"
00011D06                            ; ---------------------------------------------------------------------------
00011D06                            ; Sprite mappings - invisible solid blocks
00011D06                            ; ---------------------------------------------------------------------------
00011D06 0000                       		dc.w byte_114BC-Map_obj71
00011D08 0000                       		dc.w byte_114D1-Map_obj71
00011D0A 0000                       		dc.w byte_114E6-Map_obj71
00011D0C 04                         byte_114BC:	dc.b 4
00011D0D F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011D12 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011D17 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011D1C 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011D21 04                         byte_114D1:	dc.b 4
00011D22 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011D27 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011D2C 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011D31 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011D36 04                         byte_114E6:	dc.b 4
00011D37 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011D3C E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011D41 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011D46 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011D4C 00                         		even
00011D4C 00                         		even
00011D4C                            
00011D4C                            ; ===========================================================================
00011D4C                            ; ---------------------------------------------------------------------------
00011D4C                            ; Object 5D - fans (SLZ)
00011D4C                            ; ---------------------------------------------------------------------------
00011D4C                            
00011D4C                            Obj5D:					; XREF: Obj_Index
00011D4C 7000                       		moveq	#0,d0
00011D4E 1028 0024                  		move.b	$24(a0),d0
00011D52 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011D56 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011D5A                            ; ===========================================================================
00011D5A 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011D5C 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011D5E                            ; ===========================================================================
00011D5E                            
00011D5E                            Obj5D_Main:				; XREF: Obj5D_Index
00011D5E 5428 0024                  		addq.b	#2,$24(a0)
00011D62 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011D6A 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011D70 0028 0004 0001             		ori.b	#4,1(a0)
00011D76 117C 0010 0019             		move.b	#$10,$19(a0)
00011D7C 117C 0004 0018             		move.b	#4,$18(a0)
00011D82                            
00011D82                            Obj5D_Delay:				; XREF: Obj5D_Index
00011D82 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011D88 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011D8A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011D8E 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011D90 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011D96 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011D9C 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011D9E 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011DA4                            
00011DA4                            Obj5D_Blow:
00011DA4 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011DA8 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011DAC 43F8 D000                  		lea	($FFFFD000).w,a1
00011DB0 3029 0008                  		move.w	8(a1),d0
00011DB4 9068 0008                  		sub.w	8(a0),d0
00011DB8 0828 0000 0022             		btst	#0,$22(a0)
00011DBE 6600                       		bne.s	Obj5D_ChkSonic
00011DC0 4440                       		neg.w	d0
00011DC2                            
00011DC2                            Obj5D_ChkSonic:
00011DC2 0640 0050                  		addi.w	#$50,d0
00011DC6 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011DCA 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011DCC 3229 000C                  		move.w	$C(a1),d1
00011DD0 0641 0060                  		addi.w	#$60,d1
00011DD4 9268 000C                  		sub.w	$C(a0),d1
00011DD8 6500                       		bcs.s	Obj5D_Animate
00011DDA 0C41 0070                  		cmpi.w	#$70,d1
00011DDE 6400                       		bcc.s	Obj5D_Animate
00011DE0 0440 0050                  		subi.w	#$50,d0
00011DE4 6400                       		bcc.s	loc_1159A
00011DE6 4640                       		not.w	d0
00011DE8 D040                       		add.w	d0,d0
00011DEA                            
00011DEA                            loc_1159A:
00011DEA 0640 0060                  		addi.w	#$60,d0
00011DEE 0828 0000 0022             		btst	#0,$22(a0)
00011DF4 6600                       		bne.s	loc_115A8
00011DF6 4440                       		neg.w	d0
00011DF8                            
00011DF8                            loc_115A8:
00011DF8 4400                       		neg.b	d0
00011DFA E840                       		asr.w	#4,d0
00011DFC 0828 0000 0028             		btst	#0,$28(a0)
00011E02 6700                       		beq.s	Obj5D_MoveSonic
00011E04 4440                       		neg.w	d0
00011E06                            
00011E06                            Obj5D_MoveSonic:
00011E06 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011E0A                            
00011E0A                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011E0A 5328 001E                  		subq.b	#1,$1E(a0)
00011E0E 6A00                       		bpl.s	Obj5D_ChkDel
00011E10 117C 0000 001E             		move.b	#0,$1E(a0)
00011E16 5228 001B                  		addq.b	#1,$1B(a0)
00011E1A 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011E20 6500                       		bcs.s	loc_115D8
00011E22 117C 0000 001B             		move.b	#0,$1B(a0)
00011E28                            
00011E28                            loc_115D8:
00011E28 7000                       		moveq	#0,d0
00011E2A 0828 0000 0028             		btst	#0,$28(a0)
00011E30 6700                       		beq.s	loc_115E4
00011E32 7002                       		moveq	#2,d0
00011E34                            
00011E34                            loc_115E4:
00011E34 D028 001B                  		add.b	$1B(a0),d0
00011E38 1140 001A                  		move.b	d0,$1A(a0)
00011E3C                            
00011E3C                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011E3C 6100 C02A                  		bsr.w	DisplaySprite
00011E40 3028 0008                  		move.w	8(a0),d0
00011E44 0240 FF80                  		andi.w	#$FF80,d0
00011E48 3238 F700                  		move.w	($FFFFF700).w,d1
00011E4C 0441 0080                  		subi.w	#$80,d1
00011E50 0241 FF80                  		andi.w	#$FF80,d1
00011E54 9041                       		sub.w	d1,d0
00011E56 0C40 0280                  		cmpi.w	#$280,d0
00011E5A 6200 C048                  		bhi.w	DeleteObject
00011E5E 4E75                       		rts	
00011E60                            ; ===========================================================================
00011E60                            ; ---------------------------------------------------------------------------
00011E60                            ; Sprite mappings - fans (SLZ)
00011E60                            ; ---------------------------------------------------------------------------
00011E60                            Map_obj5D:
00011E60                            	include "_maps\obj5D.asm"
00011E60                            ; ---------------------------------------------------------------------------
00011E60                            ; Sprite mappings - fans (SLZ)
00011E60                            ; ---------------------------------------------------------------------------
00011E60 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011E64 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011E68 0000                       		dc.w byte_1161A-Map_obj5D
00011E6A 02                         byte_1161A:	dc.b 2
00011E6B F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011E70 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011E75 02                         byte_11625:	dc.b 2
00011E76 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011E7B 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011E80 02                         byte_11630:	dc.b 2
00011E81 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011E86 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011E8C 00                         		even
00011E8C 00                         		even
00011E8C                            
00011E8C                            ; ===========================================================================
00011E8C                            ; ---------------------------------------------------------------------------
00011E8C                            ; Object 5E - seesaws (SLZ)
00011E8C                            ; ---------------------------------------------------------------------------
00011E8C                            
00011E8C                            Obj5E:					; XREF: Obj_Index
00011E8C 7000                       		moveq	#0,d0
00011E8E 1028 0024                  		move.b	$24(a0),d0
00011E92 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011E96 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011E9A 3028 0030                  		move.w	$30(a0),d0
00011E9E 0240 FF80                  		andi.w	#$FF80,d0
00011EA2 3238 F700                  		move.w	($FFFFF700).w,d1
00011EA6 0441 0080                  		subi.w	#$80,d1
00011EAA 0241 FF80                  		andi.w	#$FF80,d1
00011EAE 9041                       		sub.w	d1,d0
00011EB0 6B00 BFF2                  		bmi.w	DeleteObject
00011EB4 0C40 0280                  		cmpi.w	#$280,d0
00011EB8 6200 BFEA                  		bhi.w	DeleteObject
00011EBC 6000 BFAA                  		bra.w	DisplaySprite
00011EC0                            ; ===========================================================================
00011EC0 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011EC2 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011EC4 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011EC6 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011EC8 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011ECA 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011ECC                            ; ===========================================================================
00011ECC                            
00011ECC                            Obj5E_Main:				; XREF: Obj5E_Index
00011ECC 5428 0024                  		addq.b	#2,$24(a0)
00011ED0 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011ED8 317C 0374 0002             		move.w	#$374,2(a0)
00011EDE 0028 0004 0001             		ori.b	#4,1(a0)
00011EE4 117C 0004 0018             		move.b	#4,$18(a0)
00011EEA 117C 0030 0019             		move.b	#$30,$19(a0)
00011EF0 3168 0008 0030             		move.w	8(a0),$30(a0)
00011EF6 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011EFA 6600                       		bne.s	loc_116D2	; if not, branch
00011EFC 6100 C406                  		bsr.w	SingleObjLoad2
00011F00 6600                       		bne.s	loc_116D2
00011F02 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011F06 5C29 0024                  		addq.b	#6,$24(a1)
00011F0A 3368 0008 0008             		move.w	8(a0),8(a1)
00011F10 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011F16 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011F1C 2348 003C                  		move.l	a0,$3C(a1)
00011F20                            
00011F20                            loc_116D2:
00011F20 0828 0000 0022             		btst	#0,$22(a0)
00011F26 6700                       		beq.s	loc_116E0
00011F28 117C 0002 001A             		move.b	#2,$1A(a0)
00011F2E                            
00011F2E                            loc_116E0:
00011F2E 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011F34                            
00011F34                            Obj5E_Slope:				; XREF: Obj5E_Index
00011F34 1228 003A                  		move.b	$3A(a0),d1
00011F38 6100 0000                  		bsr.w	loc_11766
00011F3C 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011F42 0828 0000 001A             		btst	#0,$1A(a0)
00011F48 6700                       		beq.s	loc_11702
00011F4A 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011F50                            
00011F50                            loc_11702:
00011F50 43F8 D000                  		lea	($FFFFD000).w,a1
00011F54 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011F5A 323C 0030                  		move.w	#$30,d1
00011F5E 4EB9 0000 7B46             		jsr	(SlopeObject).l
00011F64 4E75                       		rts	
00011F66                            ; ===========================================================================
00011F66                            
00011F66                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011F66 6100 0000                  		bsr.w	loc_1174A
00011F6A 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011F70 0828 0000 001A             		btst	#0,$1A(a0)
00011F76 6700                       		beq.s	loc_11730
00011F78 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011F7E                            
00011F7E                            loc_11730:
00011F7E 323C 0030                  		move.w	#$30,d1
00011F82 4EB9 0000 7BE6             		jsr	(ExitPlatform).l
00011F88 323C 0030                  		move.w	#$30,d1
00011F8C 3428 0008                  		move.w	8(a0),d2
00011F90 4EB9 0000 8BD6             		jsr	SlopeObject2
00011F96 4E75                       		rts	
00011F98                            ; ===========================================================================
00011F98                            
00011F98                            loc_1174A:				; XREF: Obj5E_Slope2
00011F98 7202                       		moveq	#2,d1
00011F9A 43F8 D000                  		lea	($FFFFD000).w,a1
00011F9E 3028 0008                  		move.w	8(a0),d0
00011FA2 9069 0008                  		sub.w	8(a1),d0
00011FA6 6400                       		bcc.s	loc_1175E
00011FA8 4440                       		neg.w	d0
00011FAA 7200                       		moveq	#0,d1
00011FAC                            
00011FAC                            loc_1175E:
00011FAC 0C40 0008                  		cmpi.w	#8,d0
00011FB0 6400                       		bcc.s	loc_11766
00011FB2 7201                       		moveq	#1,d1
00011FB4                            
00011FB4                            loc_11766:
00011FB4 1028 001A                  		move.b	$1A(a0),d0
00011FB8 B001                       		cmp.b	d1,d0
00011FBA 6700                       		beq.s	locret_11790
00011FBC 6400                       		bcc.s	loc_11772
00011FBE 5400                       		addq.b	#2,d0
00011FC0                            
00011FC0                            loc_11772:
00011FC0 5300                       		subq.b	#1,d0
00011FC2 1140 001A                  		move.b	d0,$1A(a0)
00011FC6 1141 003A                  		move.b	d1,$3A(a0)
00011FCA 08A8 0000 0001             		bclr	#0,1(a0)
00011FD0 0828 0001 001A             		btst	#1,$1A(a0)
00011FD6 6700                       		beq.s	locret_11790
00011FD8 08E8 0000 0001             		bset	#0,1(a0)
00011FDE                            
00011FDE                            locret_11790:
00011FDE 4E75                       		rts	
00011FE0                            ; ===========================================================================
00011FE0                            
00011FE0                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011FE0 5428 0024                  		addq.b	#2,$24(a0)
00011FE4 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011FEC 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011FF2 0028 0004 0001             		ori.b	#4,1(a0)
00011FF8 117C 0004 0018             		move.b	#4,$18(a0)
00011FFE 117C 008B 0020             		move.b	#$8B,$20(a0)
00012004 117C 000C 0019             		move.b	#$C,$19(a0)
0001200A 3168 0008 0030             		move.w	8(a0),$30(a0)
00012010 0668 0028 0008             		addi.w	#$28,8(a0)
00012016 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001201C 117C 0001 001A             		move.b	#1,$1A(a0)
00012022 0828 0000 0022             		btst	#0,$22(a0)
00012028 6700                       		beq.s	Obj5E_MoveSpike
0001202A 0468 0050 0008             		subi.w	#$50,8(a0)
00012030 117C 0002 003A             		move.b	#2,$3A(a0)
00012036                            
00012036                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00012036 2268 003C                  		movea.l	$3C(a0),a1
0001203A 7000                       		moveq	#0,d0
0001203C 1028 003A                  		move.b	$3A(a0),d0
00012040 9029 003A                  		sub.b	$3A(a1),d0
00012044 6700                       		beq.s	loc_1183E
00012046 6400                       		bcc.s	loc_117FC
00012048 4400                       		neg.b	d0
0001204A                            
0001204A                            loc_117FC:
0001204A 323C F7E8                  		move.w	#-$818,d1
0001204E 343C FEEC                  		move.w	#-$114,d2
00012052 0C00 0001                  		cmpi.b	#1,d0
00012056 6700                       		beq.s	loc_11822
00012058 323C F510                  		move.w	#-$AF0,d1
0001205C 343C FF34                  		move.w	#-$CC,d2
00012060 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00012066 6D00                       		blt.s	loc_11822
00012068 323C F200                  		move.w	#-$E00,d1
0001206C 343C FF60                  		move.w	#-$A0,d2
00012070                            
00012070                            loc_11822:
00012070 3141 0012                  		move.w	d1,$12(a0)
00012074 3142 0010                  		move.w	d2,$10(a0)
00012078 3028 0008                  		move.w	8(a0),d0
0001207C 9068 0030                  		sub.w	$30(a0),d0
00012080 6400                       		bcc.s	loc_11838
00012082 4468 0010                  		neg.w	$10(a0)
00012086                            
00012086                            loc_11838:
00012086 5428 0024                  		addq.b	#2,$24(a0)
0001208A 6000                       		bra.s	Obj5E_SpikeFall
0001208C                            ; ===========================================================================
0001208C                            
0001208C                            loc_1183E:				; XREF: Obj5E_MoveSpike
0001208C 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012092 7000                       		moveq	#0,d0
00012094 1029 001A                  		move.b	$1A(a1),d0
00012098 343C 0028                  		move.w	#$28,d2
0001209C 3228 0008                  		move.w	8(a0),d1
000120A0 9268 0030                  		sub.w	$30(a0),d1
000120A4 6400                       		bcc.s	loc_1185C
000120A6 4442                       		neg.w	d2
000120A8 5440                       		addq.w	#2,d0
000120AA                            
000120AA                            loc_1185C:
000120AA D040                       		add.w	d0,d0
000120AC 3228 0034                  		move.w	$34(a0),d1
000120B0 D272 0000                  		add.w	(a2,d0.w),d1
000120B4 3141 000C                  		move.w	d1,$C(a0)
000120B8 D468 0030                  		add.w	$30(a0),d2
000120BC 3142 0008                  		move.w	d2,8(a0)
000120C0 4268 000E                  		clr.w	$E(a0)
000120C4 4268 000A                  		clr.w	$A(a0)
000120C8 4E75                       		rts	
000120CA                            ; ===========================================================================
000120CA                            
000120CA                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000120CA 4A68 0012                  		tst.w	$12(a0)
000120CE 6A00                       		bpl.s	loc_1189A
000120D0 6100 BCFE                  		bsr.w	ObjectFall
000120D4 3028 0034                  		move.w	$34(a0),d0
000120D8 0440 002F                  		subi.w	#$2F,d0
000120DC B068 000C                  		cmp.w	$C(a0),d0
000120E0 6E00                       		bgt.s	locret_11898
000120E2 6100 BCEC                  		bsr.w	ObjectFall
000120E6                            
000120E6                            locret_11898:
000120E6 4E75                       		rts	
000120E8                            ; ===========================================================================
000120E8                            
000120E8                            loc_1189A:				; XREF: Obj5E_SpikeFall
000120E8 6100 BCE6                  		bsr.w	ObjectFall
000120EC 2268 003C                  		movea.l	$3C(a0),a1
000120F0 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000120F6 7000                       		moveq	#0,d0
000120F8 1029 001A                  		move.b	$1A(a1),d0
000120FC 3228 0008                  		move.w	8(a0),d1
00012100 9268 0030                  		sub.w	$30(a0),d1
00012104 6400                       		bcc.s	loc_118BA
00012106 5440                       		addq.w	#2,d0
00012108                            
00012108                            loc_118BA:
00012108 D040                       		add.w	d0,d0
0001210A 3228 0034                  		move.w	$34(a0),d1
0001210E D272 0000                  		add.w	(a2,d0.w),d1
00012112 B268 000C                  		cmp.w	$C(a0),d1
00012116 6E00                       		bgt.s	locret_11938
00012118 2268 003C                  		movea.l	$3C(a0),a1
0001211C 7202                       		moveq	#2,d1
0001211E 4A68 0010                  		tst.w	$10(a0)
00012122 6B00                       		bmi.s	Obj5E_Spring
00012124 7200                       		moveq	#0,d1
00012126                            
00012126                            Obj5E_Spring:
00012126 1341 003A                  		move.b	d1,$3A(a1)
0001212A 1141 003A                  		move.b	d1,$3A(a0)
0001212E B229 001A                  		cmp.b	$1A(a1),d1
00012132 6700                       		beq.s	loc_1192C
00012134 08A9 0003 0022             		bclr	#3,$22(a1)
0001213A 6700                       		beq.s	loc_1192C
0001213C 4229 0025                  		clr.b	$25(a1)
00012140 137C 0002 0024             		move.b	#2,$24(a1)
00012146 45F8 D000                  		lea	($FFFFD000).w,a2
0001214A 3568 0012 0012             		move.w	$12(a0),$12(a2)
00012150 446A 0012                  		neg.w	$12(a2)
00012154 08EA 0001 0022             		bset	#1,$22(a2)
0001215A 08AA 0003 0022             		bclr	#3,$22(a2)
00012160 422A 003C                  		clr.b	$3C(a2)
00012164 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001216A 157C 0002 0024             		move.b	#2,$24(a2)
00012170 303C 00CC                  		move.w	#$CC,d0
00012174 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play spring sound
0001217A                            
0001217A                            loc_1192C:
0001217A 4268 0010                  		clr.w	$10(a0)
0001217E 4268 0012                  		clr.w	$12(a0)
00012182 5528 0024                  		subq.b	#2,$24(a0)
00012186                            
00012186                            locret_11938:
00012186 4E75                       		rts	
00012188                            ; ===========================================================================
00012188 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012192                            
00012192                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000121C2                            		even
000121C2                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000121F2                            		even
000121F2                            ; ---------------------------------------------------------------------------
000121F2                            ; Sprite mappings - seesaws (SLZ)
000121F2                            ; ---------------------------------------------------------------------------
000121F2                            Map_obj5E:
000121F2                            	include "_maps\obj5E.asm"
000121F2                            ; ---------------------------------------------------------------------------
000121F2                            ; Sprite mappings - seesaws (SLZ)
000121F2                            ; ---------------------------------------------------------------------------
000121F2 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000121F6 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000121FA 07                         byte_119AC:	dc.b 7
000121FB D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00012200 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00012205 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0001220A EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
0001220F FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00012214 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00012219 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
0001221E 04                         byte_119D0:	dc.b 4
0001221F E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00012224 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012229 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
0001222E E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00012234 00                         		even
00012234 00                         		even
00012234                            
00012234                            ; ---------------------------------------------------------------------------
00012234                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012234                            ; ---------------------------------------------------------------------------
00012234                            Map_obj5Ea:
00012234                            	include "_maps\obj5Eballs.asm"
00012234                            ; ---------------------------------------------------------------------------
00012234                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012234                            ; ---------------------------------------------------------------------------
00012234 0000                       		dc.w byte_119EA-Map_obj5Ea
00012236 0000                       		dc.w byte_119F0-Map_obj5Ea
00012238 01                         byte_119EA:	dc.b 1
00012239 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001223E 01                         byte_119F0:	dc.b 1
0001223F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00012244                            		even
00012244                            		even
00012244                            
00012244                            ; ===========================================================================
00012244                            ; ---------------------------------------------------------------------------
00012244                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00012244                            ; ---------------------------------------------------------------------------
00012244                            
00012244                            Obj5F:					; XREF: Obj_Index
00012244 7000                       		moveq	#0,d0
00012246 1028 0024                  		move.b	$24(a0),d0
0001224A 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
0001224E 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00012252                            ; ===========================================================================
00012252 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00012254 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012256 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012258 0000                       		dc.w Obj5F_End-Obj5F_Index
0001225A                            ; ===========================================================================
0001225A                            
0001225A                            Obj5F_Main:				; XREF: Obj5F_Index
0001225A 5428 0024                  		addq.b	#2,$24(a0)
0001225E 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012266 317C 0400 0002             		move.w	#$400,2(a0)
0001226C 0028 0004 0001             		ori.b	#4,1(a0)
00012272 117C 0003 0018             		move.b	#3,$18(a0)
00012278 117C 000C 0019             		move.b	#$C,$19(a0)
0001227E 1028 0028                  		move.b	$28(a0),d0
00012282 6700                       		beq.s	loc_11A3C
00012284 1140 0024                  		move.b	d0,$24(a0)
00012288 4E75                       		rts	
0001228A                            ; ===========================================================================
0001228A                            
0001228A                            loc_11A3C:
0001228A 117C 009A 0020             		move.b	#$9A,$20(a0)
00012290 0868 0000 0022             		bchg	#0,$22(a0)
00012296                            
00012296                            Obj5F_Action:				; XREF: Obj5F_Index
00012296 7000                       		moveq	#0,d0
00012298 1028 0025                  		move.b	$25(a0),d0
0001229C 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
000122A0 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
000122A4 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000122AA 6100 8C0A                  		bsr.w	AnimateSprite
000122AE 6000 DC60                  		bra.w	MarkObjGone
000122B2                            ; ===========================================================================
000122B2 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000122B4 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000122B6 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000122B8                            ; ===========================================================================
000122B8                            
000122B8                            Obj5F_Walk:				; XREF: Obj5F_Index2
000122B8 6100 0000                  		bsr.w	Obj5F_ChkSonic
000122BC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000122C0 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000122C2 5428 0025                  		addq.b	#2,$25(a0)
000122C6 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000122CC 317C 0010 0010             		move.w	#$10,$10(a0)
000122D2 117C 0001 001C             		move.b	#1,$1C(a0)
000122D8 0868 0000 0022             		bchg	#0,$22(a0)
000122DE 6700                       		beq.s	locret_11A96
000122E0 4468 0010                  		neg.w	$10(a0)		; change direction
000122E4                            
000122E4                            locret_11A96:
000122E4 4E75                       		rts	
000122E6                            ; ===========================================================================
000122E6                            
000122E6                            Obj5F_Wait:				; XREF: Obj5F_Index2
000122E6 6100 0000                  		bsr.w	Obj5F_ChkSonic
000122EA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000122EE 6B00                       		bmi.s	loc_11AA8
000122F0 6100 BB50                  		bsr.w	SpeedToPos
000122F4 4E75                       		rts	
000122F6                            ; ===========================================================================
000122F6                            
000122F6                            loc_11AA8:
000122F6 5528 0025                  		subq.b	#2,$25(a0)
000122FA 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012300 4268 0010                  		clr.w	$10(a0)		; stop walking
00012304 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
0001230A 4E75                       		rts	
0001230C                            ; ===========================================================================
0001230C                            
0001230C                            Obj5F_Explode:				; XREF: Obj5F_Index2
0001230C 5368 0030                  		subq.w	#1,$30(a0)
00012310 6A00                       		bpl.s	locret_11AD0
00012312 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012316 117C 0000 0024             		move.b	#0,$24(a0)
0001231C                            
0001231C                            locret_11AD0:
0001231C 4E75                       		rts	
0001231E                            ; ===========================================================================
0001231E                            
0001231E                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
0001231E 3038 D008                  		move.w	($FFFFD008).w,d0
00012322 9068 0008                  		sub.w	8(a0),d0
00012326 6400                       		bcc.s	loc_11ADE
00012328 4440                       		neg.w	d0
0001232A                            
0001232A                            loc_11ADE:
0001232A 0C40 0060                  		cmpi.w	#$60,d0
0001232E 6400                       		bcc.s	locret_11B5E
00012330 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012334 9068 000C                  		sub.w	$C(a0),d0
00012338 6400                       		bcc.s	Obj5F_MakeFuse
0001233A 4440                       		neg.w	d0
0001233C                            
0001233C                            Obj5F_MakeFuse:
0001233C 0C40 0060                  		cmpi.w	#$60,d0
00012340 6400                       		bcc.s	locret_11B5E
00012342 4A78 FE08                  		tst.w	($FFFFFE08).w
00012346 6600                       		bne.s	locret_11B5E
00012348 117C 0004 0025             		move.b	#4,$25(a0)
0001234E 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012354 4268 0010                  		clr.w	$10(a0)
00012358 117C 0002 001C             		move.b	#2,$1C(a0)
0001235E 6100 BFA4                  		bsr.w	SingleObjLoad2
00012362 6600                       		bne.s	locret_11B5E
00012364 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012368 3368 0008 0008             		move.w	8(a0),8(a1)
0001236E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012374 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001237A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012380 137C 0004 0028             		move.b	#4,$28(a1)
00012386 137C 0003 001C             		move.b	#3,$1C(a1)
0001238C 337C 0010 0012             		move.w	#$10,$12(a1)
00012392 0828 0001 0022             		btst	#1,$22(a0)
00012398 6700                       		beq.s	loc_11B54
0001239A 4469 0012                  		neg.w	$12(a1)
0001239E                            
0001239E                            loc_11B54:
0001239E 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000123A4 2348 003C                  		move.l	a0,$3C(a1)
000123A8                            
000123A8                            locret_11B5E:
000123A8 4E75                       		rts	
000123AA                            ; ===========================================================================
000123AA                            
000123AA                            Obj5F_Display:				; XREF: Obj5F_Index
000123AA 6100                       		bsr.s	loc_11B70
000123AC 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000123B2 6100 8B02                  		bsr.w	AnimateSprite
000123B6 6000 DB58                  		bra.w	MarkObjGone
000123BA                            ; ===========================================================================
000123BA                            
000123BA                            loc_11B70:
000123BA 5368 0030                  		subq.w	#1,$30(a0)
000123BE 6B00                       		bmi.s	loc_11B7C
000123C0 6100 BA80                  		bsr.w	SpeedToPos
000123C4 4E75                       		rts	
000123C6                            ; ===========================================================================
000123C6                            
000123C6                            loc_11B7C:
000123C6 4268 0030                  		clr.w	$30(a0)
000123CA 4228 0024                  		clr.b	$24(a0)
000123CE 3168 0034 000C             		move.w	$34(a0),$C(a0)
000123D4 7203                       		moveq	#3,d1
000123D6 2248                       		movea.l	a0,a1
000123D8 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000123DE 6000                       		bra.s	Obj5F_MakeShrap
000123E0                            ; ===========================================================================
000123E0                            
000123E0                            Obj5F_Loop:
000123E0 6100 BF22                  		bsr.w	SingleObjLoad2
000123E4 6600                       		bne.s	loc_11BCE
000123E6                            
000123E6                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000123E6 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000123EA 3368 0008 0008             		move.w	8(a0),8(a1)
000123F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000123F6 137C 0006 0028             		move.b	#6,$28(a1)
000123FC 137C 0004 001C             		move.b	#4,$1C(a1)
00012402 335A 0010                  		move.w	(a2)+,$10(a1)
00012406 335A 0012                  		move.w	(a2)+,$12(a1)
0001240A 137C 0098 0020             		move.b	#$98,$20(a1)
00012410 08E9 0007 0001             		bset	#7,1(a1)
00012416                            
00012416                            loc_11BCE:
00012416 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001241A                            
0001241A 117C 0006 0024             		move.b	#6,$24(a0)
00012420                            
00012420                            Obj5F_End:				; XREF: Obj5F_Index
00012420 6100 BA20                  		bsr.w	SpeedToPos
00012424 0668 0018 0012             		addi.w	#$18,$12(a0)
0001242A 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012430 6100 8A84                  		bsr.w	AnimateSprite
00012434 4A28 0001                  		tst.b	1(a0)
00012438 6A00 BA6A                  		bpl.w	DeleteObject
0001243C 6000 BA2A                  		bra.w	DisplaySprite
00012440                            ; ===========================================================================
00012440 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012450                            
00012450                            Ani_obj5F:
00012450                            	include "_anim\obj5F.asm"
00012450                            ; ---------------------------------------------------------------------------
00012450                            ; Animation script - Bomb enemy
00012450                            ; ---------------------------------------------------------------------------
00012450 0000                       		dc.w byte_11C12-Ani_obj5F
00012452 0000                       		dc.w byte_11C16-Ani_obj5F
00012454 0000                       		dc.w byte_11C1C-Ani_obj5F
00012456 0000                       		dc.w byte_11C20-Ani_obj5F
00012458 0000                       		dc.w byte_11C24-Ani_obj5F
0001245A 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
0001245E 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012464 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012468 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
0001246C 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012470                            		even
00012470                            		even
00012470                            
00012470                            ; ---------------------------------------------------------------------------
00012470                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012470                            ; ---------------------------------------------------------------------------
00012470                            Map_obj5F:
00012470                            	include "_maps\obj5F.asm"
00012470                            ; ---------------------------------------------------------------------------
00012470                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012470                            ; ---------------------------------------------------------------------------
00012470 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012474 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012478 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001247C 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012480 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012484 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012488 03                         byte_11C40:	dc.b 3
00012489 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001248E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012493 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012498 03                         byte_11C50:	dc.b 3
00012499 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001249E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000124A3 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000124A8 03                         byte_11C60:	dc.b 3
000124A9 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000124AE 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000124B3 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000124B8 03                         byte_11C70:	dc.b 3
000124B9 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000124BE 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000124C3 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000124C8 03                         byte_11C80:	dc.b 3
000124C9 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000124CE 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000124D3 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000124D8 03                         byte_11C90:	dc.b 3
000124D9 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000124DE 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000124E3 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000124E8 02                         byte_11CA0:	dc.b 2
000124E9 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000124EE 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000124F3 02                         byte_11CAB:	dc.b 2
000124F4 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000124F9 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000124FE 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000124FF E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012504 01                         byte_11CBC:	dc.b 1			; fuse
00012505 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001250A 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0001250B FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012510 01                         byte_11CC8:	dc.b 1			; fireball
00012511 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012516                            		even
00012516                            		even
00012516                            
00012516                            ; ===========================================================================
00012516                            ; ---------------------------------------------------------------------------
00012516                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012516                            ; ---------------------------------------------------------------------------
00012516                            
00012516                            Obj60:					; XREF: Obj_Index
00012516 7000                       		moveq	#0,d0
00012518 1028 0024                  		move.b	$24(a0),d0
0001251C 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012520 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012524                            ; ===========================================================================
00012524 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012526 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012528 0000                       		dc.w Obj60_Display-Obj60_Index
0001252A 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
0001252C 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
0001252E                            ; ===========================================================================
0001252E                            
0001252E                            Obj60_Main:				; XREF: Obj60_Index
0001252E 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012536 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
0001253C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012542 6700                       		beq.s	loc_11D02
00012544 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001254A                            
0001254A                            loc_11D02:
0001254A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012550 6600                       		bne.s	loc_11D10
00012552 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012558                            
00012558                            loc_11D10:
00012558 0028 0004 0001             		ori.b	#4,1(a0)
0001255E 117C 0004 0018             		move.b	#4,$18(a0)
00012564 117C 000B 0020             		move.b	#$B,$20(a0)
0001256A 117C 000C 0019             		move.b	#$C,$19(a0)
00012570 7400                       		moveq	#0,d2
00012572 45E8 0037                  		lea	$37(a0),a2
00012576 264A                       		movea.l	a2,a3
00012578 524A                       		addq.w	#1,a2
0001257A 7203                       		moveq	#3,d1
0001257C                            
0001257C                            Obj60_MakeOrbs:
0001257C 6100 BD86                  		bsr.w	SingleObjLoad2
00012580 6600                       		bne.s	loc_11D90
00012582 5213                       		addq.b	#1,(a3)
00012584 3A09                       		move.w	a1,d5
00012586 0445 D000                  		subi.w	#-$3000,d5
0001258A EC4D                       		lsr.w	#6,d5
0001258C 0245 007F                  		andi.w	#$7F,d5
00012590 14C5                       		move.b	d5,(a2)+
00012592 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012594 137C 0006 0024             		move.b	#6,$24(a1)
0001259A 2368 0004 0004             		move.l	4(a0),4(a1)
000125A0 3368 0002 0002             		move.w	2(a0),2(a1)
000125A6 0029 0004 0001             		ori.b	#4,1(a1)
000125AC 137C 0004 0018             		move.b	#4,$18(a1)
000125B2 137C 0008 0019             		move.b	#8,$19(a1)
000125B8 137C 0003 001A             		move.b	#3,$1A(a1)
000125BE 137C 0098 0020             		move.b	#$98,$20(a1)
000125C4 1342 0026                  		move.b	d2,$26(a1)
000125C8 0602 0040                  		addi.b	#$40,d2
000125CC 2348 003C                  		move.l	a0,$3C(a1)
000125D0 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000125D4                            
000125D4                            loc_11D90:
000125D4 7001                       		moveq	#1,d0
000125D6 0828 0000 0022             		btst	#0,$22(a0)
000125DC 6700                       		beq.s	Obj60_Move
000125DE 4440                       		neg.w	d0
000125E0                            
000125E0                            Obj60_Move:
000125E0 1140 0036                  		move.b	d0,$36(a0)
000125E4 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000125EA 5428 0024                  		addq.b	#2,$24(a0)
000125EE 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000125F4 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000125FA 6700                       		beq.s	locret_11DBC	; if not, branch
000125FC 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012600                            
00012600                            locret_11DBC:
00012600 4E75                       		rts	
00012602                            ; ===========================================================================
00012602                            
00012602                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012602 3038 D008                  		move.w	($FFFFD008).w,d0
00012606 9068 0008                  		sub.w	8(a0),d0
0001260A 6400                       		bcc.s	loc_11DCA
0001260C 4440                       		neg.w	d0
0001260E                            
0001260E                            loc_11DCA:
0001260E 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012612 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012614 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012618 9068 000C                  		sub.w	$C(a0),d0
0001261C 6400                       		bcc.s	loc_11DDC
0001261E 4440                       		neg.w	d0
00012620                            
00012620                            loc_11DDC:
00012620 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012624 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012626 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001262A 6600                       		bne.s	Obj60_Animate	; if yes, branch
0001262C 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012632                            
00012632                            Obj60_Animate:
00012632 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012638 6100 887C                  		bsr.w	AnimateSprite
0001263C 6000 0000                  		bra.w	Obj60_ChkDel
00012640                            ; ===========================================================================
00012640                            
00012640                            Obj60_Display:				; XREF: Obj60_Index
00012640 6100 B800                  		bsr.w	SpeedToPos
00012644                            
00012644                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012644 3028 0008                  		move.w	8(a0),d0
00012648 0240 FF80                  		andi.w	#$FF80,d0
0001264C 3238 F700                  		move.w	($FFFFF700).w,d1
00012650 0441 0080                  		subi.w	#$80,d1
00012654 0241 FF80                  		andi.w	#$FF80,d1
00012658 9041                       		sub.w	d1,d0
0001265A 0C40 0280                  		cmpi.w	#$280,d0
0001265E 6200 0000                  		bhi.w	Obj60_ChkGone
00012662 6000 B804                  		bra.w	DisplaySprite
00012666                            ; ===========================================================================
00012666                            
00012666                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012666 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001266A 7000                       		moveq	#0,d0
0001266C 1028 0023                  		move.b	$23(a0),d0
00012670 6700                       		beq.s	loc_11E34
00012672 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012678                            
00012678                            loc_11E34:
00012678 45E8 0037                  		lea	$37(a0),a2
0001267C 7400                       		moveq	#0,d2
0001267E 141A                       		move.b	(a2)+,d2
00012680 5342                       		subq.w	#1,d2
00012682 6500                       		bcs.s	Obj60_Delete
00012684                            
00012684                            loc_11E40:
00012684 7000                       		moveq	#0,d0
00012686 101A                       		move.b	(a2)+,d0
00012688 ED48                       		lsl.w	#6,d0
0001268A 0680 00FF D000             		addi.l	#$FFD000,d0
00012690 2240                       		movea.l	d0,a1
00012692 6100 B812                  		bsr.w	DeleteObject2
00012696 51CA FFEC                  		dbf	d2,loc_11E40
0001269A                            
0001269A                            Obj60_Delete:
0001269A 6000 B808                  		bra.w	DeleteObject
0001269E                            ; ===========================================================================
0001269E                            
0001269E                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001269E 2268 003C                  		movea.l	$3C(a0),a1
000126A2 0C11 0060                  		cmpi.b	#$60,0(a1)
000126A6 6600 B7FC                  		bne.w	DeleteObject
000126AA 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000126B0 6600                       		bne.s	Obj60_Circle
000126B2 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000126B8 6600                       		bne.s	Obj60_Circle
000126BA 5428 0024                  		addq.b	#2,$24(a0)
000126BE 5329 0037                  		subq.b	#1,$37(a1)
000126C2 6600                       		bne.s	Obj60_FireOrb
000126C4 5429 0024                  		addq.b	#2,$24(a1)
000126C8                            
000126C8                            Obj60_FireOrb:
000126C8 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000126CE 0829 0000 0022             		btst	#0,$22(a1)
000126D4 6700                       		beq.s	Obj60_Display2
000126D6 4468 0010                  		neg.w	$10(a0)
000126DA                            
000126DA                            Obj60_Display2:
000126DA 6000 B78C                  		bra.w	DisplaySprite
000126DE                            ; ===========================================================================
000126DE                            
000126DE                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000126DE 1028 0026                  		move.b	$26(a0),d0
000126E2 4EB9 0000 2B40             		jsr	(CalcSine).l
000126E8 E841                       		asr.w	#4,d1
000126EA D269 0008                  		add.w	8(a1),d1
000126EE 3141 0008                  		move.w	d1,8(a0)
000126F2 E840                       		asr.w	#4,d0
000126F4 D069 000C                  		add.w	$C(a1),d0
000126F8 3140 000C                  		move.w	d0,$C(a0)
000126FC 1029 0036                  		move.b	$36(a1),d0
00012700 D128 0026                  		add.b	d0,$26(a0)
00012704 6000 B762                  		bra.w	DisplaySprite
00012708                            ; ===========================================================================
00012708                            
00012708                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012708 6100 B738                  		bsr.w	SpeedToPos
0001270C 4A28 0001                  		tst.b	1(a0)
00012710 6A00 B792                  		bpl.w	DeleteObject
00012714 6000 B752                  		bra.w	DisplaySprite
00012718                            ; ===========================================================================
00012718                            Ani_obj60:
00012718                            	include "_anim\obj60.asm"
00012718                            ; ---------------------------------------------------------------------------
00012718                            ; Animation script - Orbinaut enemy
00012718                            ; ---------------------------------------------------------------------------
00012718 0000                       		dc.w byte_11EDA-Ani_obj60
0001271A 0000                       		dc.w byte_11EDE-Ani_obj60
0001271C 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012720 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012726                            		even
00012726                            		even
00012726                            
00012726                            ; ---------------------------------------------------------------------------
00012726                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012726                            ; ---------------------------------------------------------------------------
00012726                            Map_obj60:
00012726                            	include "_maps\obj60.asm"
00012726                            ; ---------------------------------------------------------------------------
00012726                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012726                            ; ---------------------------------------------------------------------------
00012726 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
0001272A 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
0001272E 01                         byte_11EEC:	dc.b 1
0001272F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012734 01                         byte_11EF2:	dc.b 1
00012735 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
0001273A 01                         byte_11EF8:	dc.b 1
0001273B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012740 01                         byte_11EFE:	dc.b 1
00012741 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012746                            		even
00012746                            		even
00012746                            
00012746                            ; ===========================================================================
00012746                            ; ---------------------------------------------------------------------------
00012746                            ; Object 16 - harpoon (LZ)
00012746                            ; ---------------------------------------------------------------------------
00012746                            
00012746                            Obj16:					; XREF: Obj_Index
00012746 7000                       		moveq	#0,d0
00012748 1028 0024                  		move.b	$24(a0),d0
0001274C 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012750 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012754                            ; ===========================================================================
00012754 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012756 0000                       		dc.w Obj16_Move-Obj16_Index
00012758 0000                       		dc.w Obj16_Wait-Obj16_Index
0001275A                            ; ===========================================================================
0001275A                            
0001275A                            Obj16_Main:				; XREF: Obj16_Index
0001275A 5428 0024                  		addq.b	#2,$24(a0)
0001275E 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012766 317C 03CC 0002             		move.w	#$3CC,2(a0)
0001276C 0028 0004 0001             		ori.b	#4,1(a0)
00012772 117C 0004 0018             		move.b	#4,$18(a0)
00012778 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0001277E 117C 0014 0019             		move.b	#$14,$19(a0)
00012784 317C 003C 0030             		move.w	#60,$30(a0)
0001278A                            
0001278A                            Obj16_Move:				; XREF: Obj16_Index
0001278A 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012790 6100 8724                  		bsr.w	AnimateSprite
00012794 7000                       		moveq	#0,d0
00012796 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0001279A 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000127A0 6000 D76E                  		bra.w	MarkObjGone
000127A4                            ; ===========================================================================
000127A4 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000127AA                            ; ===========================================================================
000127AA                            
000127AA                            Obj16_Wait:				; XREF: Obj16_Index
000127AA 5368 0030                  		subq.w	#1,$30(a0)
000127AE 6A00                       		bpl.s	Obj16_ChkDel
000127B0 317C 003C 0030             		move.w	#60,$30(a0)
000127B6 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000127BA 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000127C0                            
000127C0                            Obj16_ChkDel:
000127C0 6000 D74E                  		bra.w	MarkObjGone
000127C4                            ; ===========================================================================
000127C4                            Ani_obj16:
000127C4                            	include "_anim\obj16.asm"
000127C4                            ; ---------------------------------------------------------------------------
000127C4                            ; Animation script - harpoon (LZ)
000127C4                            ; ---------------------------------------------------------------------------
000127C4 0000                       		dc.w byte_11F8A-Ani_obj16
000127C6 0000                       		dc.w byte_11F8E-Ani_obj16
000127C8 0000                       		dc.w byte_11F92-Ani_obj16
000127CA 0000                       		dc.w byte_11F96-Ani_obj16
000127CC 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000127D0 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000127D4 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000127D8 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000127DC                            		even
000127DC                            		even
000127DC                            
000127DC                            ; ---------------------------------------------------------------------------
000127DC                            ; Sprite mappings - harpoon (LZ)
000127DC                            ; ---------------------------------------------------------------------------
000127DC                            Map_obj16:
000127DC                            	include "_maps\obj16.asm"
000127DC                            ; ---------------------------------------------------------------------------
000127DC                            ; Sprite mappings - harpoon (LZ)
000127DC                            ; ---------------------------------------------------------------------------
000127DC 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000127E0 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000127E4 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000127E8 01                         byte_11FA6:	dc.b 1
000127E9 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000127EE 01                         byte_11FAC:	dc.b 1
000127EF FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000127F4 02                         byte_11FB2:	dc.b 2
000127F5 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000127FA FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000127FF 01                         byte_11FBD:	dc.b 1
00012800 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012805 01                         byte_11FC3:	dc.b 1
00012806 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
0001280B 02                         byte_11FC9:	dc.b 2
0001280C D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012811 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012816                            		even
00012816                            		even
00012816                            
00012816                            ; ===========================================================================
00012816                            ; ---------------------------------------------------------------------------
00012816                            ; Object 61 - blocks (LZ)
00012816                            ; ---------------------------------------------------------------------------
00012816                            
00012816                            Obj61:					; XREF: Obj_Index
00012816 7000                       		moveq	#0,d0
00012818 1028 0024                  		move.b	$24(a0),d0
0001281C 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012820 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012824                            ; ===========================================================================
00012824 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012826 0000                       		dc.w Obj61_Action-Obj61_Index
00012828                            
00012828 1010                       Obj61_Var:	dc.b $10, $10		; width, height
0001282A 200C                       		dc.b $20, $C
0001282C 1010                       		dc.b $10, $10
0001282E 1010                       		dc.b $10, $10
00012830                            ; ===========================================================================
00012830                            
00012830                            Obj61_Main:				; XREF: Obj61_Index
00012830 5428 0024                  		addq.b	#2,$24(a0)
00012834 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
0001283C 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012842 117C 0004 0001             		move.b	#4,1(a0)
00012848 117C 0003 0018             		move.b	#3,$18(a0)
0001284E 7000                       		moveq	#0,d0
00012850 1028 0028                  		move.b	$28(a0),d0
00012854 E648                       		lsr.w	#3,d0
00012856 0240 000E                  		andi.w	#$E,d0
0001285A 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
0001285E 115A 0019                  		move.b	(a2)+,$19(a0)
00012862 1152 0016                  		move.b	(a2),$16(a0)
00012866 E248                       		lsr.w	#1,d0
00012868 1140 001A                  		move.b	d0,$1A(a0)
0001286C 3168 0008 0034             		move.w	8(a0),$34(a0)
00012872 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012878 1028 0028                  		move.b	$28(a0),d0
0001287C 0200 000F                  		andi.b	#$F,d0
00012880 6700                       		beq.s	Obj61_Action
00012882 0C00 0007                  		cmpi.b	#7,d0
00012886 6700                       		beq.s	Obj61_Action
00012888 117C 0001 0038             		move.b	#1,$38(a0)
0001288E                            
0001288E                            Obj61_Action:				; XREF: Obj61_Index
0001288E 3F28 0008                  		move.w	8(a0),-(sp)
00012892 7000                       		moveq	#0,d0
00012894 1028 0028                  		move.b	$28(a0),d0
00012898 0240 000F                  		andi.w	#$F,d0
0001289C D040                       		add.w	d0,d0
0001289E 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000128A2 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000128A6 381F                       		move.w	(sp)+,d4
000128A8 4A28 0001                  		tst.b	1(a0)
000128AC 6A00                       		bpl.s	Obj61_ChkDel
000128AE 7200                       		moveq	#0,d1
000128B0 1228 0019                  		move.b	$19(a0),d1
000128B4 0641 000B                  		addi.w	#$B,d1
000128B8 7400                       		moveq	#0,d2
000128BA 1428 0016                  		move.b	$16(a0),d2
000128BE 3602                       		move.w	d2,d3
000128C0 5243                       		addq.w	#1,d3
000128C2 6100 D974                  		bsr.w	SolidObject
000128C6 1144 003F                  		move.b	d4,$3F(a0)
000128CA 6100 0000                  		bsr.w	loc_12180
000128CE                            
000128CE                            Obj61_ChkDel:
000128CE 3028 0034                  		move.w	$34(a0),d0
000128D2 0240 FF80                  		andi.w	#$FF80,d0
000128D6 3238 F700                  		move.w	($FFFFF700).w,d1
000128DA 0441 0080                  		subi.w	#$80,d1
000128DE 0241 FF80                  		andi.w	#$FF80,d1
000128E2 9041                       		sub.w	d1,d0
000128E4 0C40 0280                  		cmpi.w	#$280,d0
000128E8 6200 B5BA                  		bhi.w	DeleteObject
000128EC 6000 B57A                  		bra.w	DisplaySprite
000128F0                            ; ===========================================================================
000128F0 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000128F4 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000128F8 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000128FC 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012900                            ; ===========================================================================
00012900                            
00012900                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012900 4E75                       		rts	
00012902                            ; ===========================================================================
00012902                            
00012902                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012902 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012906 6600                       		bne.s	loc_120D6	; if yes, branch
00012908 0828 0003 0022             		btst	#3,$22(a0)
0001290E 6700                       		beq.s	locret_120D4
00012910 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012916                            
00012916                            locret_120D4:
00012916 4E75                       		rts	
00012918                            ; ===========================================================================
00012918                            
00012918                            loc_120D6:
00012918 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
0001291C 66F8                       		bne.s	locret_120D4	; if time remains, branch
0001291E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012922 4228 0038                  		clr.b	$38(a0)
00012926 4E75                       		rts	
00012928                            ; ===========================================================================
00012928                            
00012928                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012928 6100 B518                  		bsr.w	SpeedToPos
0001292C 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012930 6100 0000                  		bsr.w	ObjHitFloor
00012934 4A41                       		tst.w	d1
00012936 6A00 0000                  		bpl.w	locret_12106
0001293A 5241                       		addq.w	#1,d1
0001293C D368 000C                  		add.w	d1,$C(a0)
00012940 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012944 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012948                            
00012948                            locret_12106:
00012948 4E75                       		rts	
0001294A                            ; ===========================================================================
0001294A                            
0001294A                            Obj61_Type04:				; XREF: Obj61_TypeIndex
0001294A 6100 B4F6                  		bsr.w	SpeedToPos
0001294E 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012952 6100 0000                  		bsr.w	ObjHitCeiling
00012956 4A41                       		tst.w	d1
00012958 6A00 0000                  		bpl.w	locret_12126
0001295C 9368 000C                  		sub.w	d1,$C(a0)
00012960 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012964 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012968                            
00012968                            locret_12126:
00012968 4E75                       		rts	
0001296A                            ; ===========================================================================
0001296A                            
0001296A                            Obj61_Type05:				; XREF: Obj61_TypeIndex
0001296A 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012970 6600                       		bne.s	locret_12138	; if not, branch
00012972 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012976 4228 0038                  		clr.b	$38(a0)
0001297A                            
0001297A                            locret_12138:
0001297A 4E75                       		rts	
0001297C                            ; ===========================================================================
0001297C                            
0001297C                            Obj61_Type07:				; XREF: Obj61_TypeIndex
0001297C 3038 F646                  		move.w	($FFFFF646).w,d0
00012980 9068 000C                  		sub.w	$C(a0),d0
00012984 6700                       		beq.s	locret_1217E
00012986 6400                       		bcc.s	loc_12162
00012988 0C40 FFFE                  		cmpi.w	#-2,d0
0001298C 6C00                       		bge.s	loc_1214E
0001298E 70FE                       		moveq	#-2,d0
00012990                            
00012990                            loc_1214E:
00012990 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012994 6100 0000                  		bsr.w	ObjHitCeiling
00012998 4A41                       		tst.w	d1
0001299A 6A00 0000                  		bpl.w	locret_12160
0001299E 9368 000C                  		sub.w	d1,$C(a0)
000129A2                            
000129A2                            locret_12160:
000129A2 4E75                       		rts	
000129A4                            ; ===========================================================================
000129A4                            
000129A4                            loc_12162:				; XREF: Obj61_Type07
000129A4 0C40 0002                  		cmpi.w	#2,d0
000129A8 6F00                       		ble.s	loc_1216A
000129AA 7002                       		moveq	#2,d0
000129AC                            
000129AC                            loc_1216A:
000129AC D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000129B0 6100 0000                  		bsr.w	ObjHitFloor
000129B4 4A41                       		tst.w	d1
000129B6 6A00 0000                  		bpl.w	locret_1217E
000129BA 5241                       		addq.w	#1,d1
000129BC D368 000C                  		add.w	d1,$C(a0)
000129C0                            
000129C0                            locret_1217E:
000129C0 4E75                       		rts	
000129C2                            ; ===========================================================================
000129C2                            
000129C2                            loc_12180:				; XREF: Obj61_Action
000129C2 4A28 0038                  		tst.b	$38(a0)
000129C6 6700                       		beq.s	locret_121C0
000129C8 0828 0003 0022             		btst	#3,$22(a0)
000129CE 6600                       		bne.s	loc_1219A
000129D0 4A28 003E                  		tst.b	$3E(a0)
000129D4 6700                       		beq.s	locret_121C0
000129D6 5928 003E                  		subq.b	#4,$3E(a0)
000129DA 6000                       		bra.s	loc_121A6
000129DC                            ; ===========================================================================
000129DC                            
000129DC                            loc_1219A:
000129DC 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000129E2 6700                       		beq.s	locret_121C0
000129E4 5828 003E                  		addq.b	#4,$3E(a0)
000129E8                            
000129E8                            loc_121A6:
000129E8 1028 003E                  		move.b	$3E(a0),d0
000129EC 4EB9 0000 2B40             		jsr	(CalcSine).l
000129F2 323C 0400                  		move.w	#$400,d1
000129F6 C1C1                       		muls.w	d1,d0
000129F8 4840                       		swap	d0
000129FA D068 0030                  		add.w	$30(a0),d0
000129FE 3140 000C                  		move.w	d0,$C(a0)
00012A02                            
00012A02                            locret_121C0:
00012A02 4E75                       		rts	
00012A04                            ; ===========================================================================
00012A04                            ; ---------------------------------------------------------------------------
00012A04                            ; Sprite mappings - blocks (LZ)
00012A04                            ; ---------------------------------------------------------------------------
00012A04                            Map_obj61:
00012A04                            	include "_maps\obj61.asm"
00012A04                            ; ---------------------------------------------------------------------------
00012A04                            ; Sprite mappings - blocks (LZ)
00012A04                            ; ---------------------------------------------------------------------------
00012A04 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012A08 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012A0C 01                         byte_121CA:	dc.b 1
00012A0D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012A12 02                         byte_121D0:	dc.b 2
00012A13 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012A18 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012A1D 01                         byte_121DB:	dc.b 1
00012A1E F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012A23 01                         byte_121E1:	dc.b 1
00012A24 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012A2A 00                         		even
00012A2A 00                         		even
00012A2A                            
00012A2A                            ; ===========================================================================
00012A2A                            ; ---------------------------------------------------------------------------
00012A2A                            ; Object 62 - gargoyle head (LZ)
00012A2A                            ; ---------------------------------------------------------------------------
00012A2A                            
00012A2A                            Obj62:					; XREF: Obj_Index
00012A2A 7000                       		moveq	#0,d0
00012A2C 1028 0024                  		move.b	$24(a0),d0
00012A30 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012A34 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012A38 6000 D4D6                  		bra.w	MarkObjGone
00012A3C                            ; ===========================================================================
00012A3C 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012A3E 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012A40 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012A42 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012A44                            
00012A44 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012A4C                            ; ===========================================================================
00012A4C                            
00012A4C                            Obj62_Main:				; XREF: Obj62_Index
00012A4C 5428 0024                  		addq.b	#2,$24(a0)
00012A50 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012A58 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012A5E 0028 0004 0001             		ori.b	#4,1(a0)
00012A64 117C 0003 0018             		move.b	#3,$18(a0)
00012A6A 117C 0010 0019             		move.b	#$10,$19(a0)
00012A70 1028 0028                  		move.b	$28(a0),d0	; get object type
00012A74 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012A78 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012A7E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012A84 0228 000F 0028             		andi.b	#$F,$28(a0)
00012A8A                            
00012A8A                            Obj62_MakeFire:				; XREF: Obj62_Index
00012A8A 5328 001E                  		subq.b	#1,$1E(a0)
00012A8E 6600                       		bne.s	Obj62_NoFire
00012A90 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012A96 6100 B64A                  		bsr.w	ChkObjOnScreen
00012A9A 6600                       		bne.s	Obj62_NoFire
00012A9C 6100 B850                  		bsr.w	SingleObjLoad
00012AA0 6600                       		bne.s	Obj62_NoFire
00012AA2 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012AA6 5829 0024                  		addq.b	#4,$24(a1)
00012AAA 3368 0008 0008             		move.w	8(a0),8(a1)
00012AB0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012AB6 1368 0001 0001             		move.b	1(a0),1(a1)
00012ABC 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012AC2                            
00012AC2                            Obj62_NoFire:
00012AC2 4E75                       		rts	
00012AC4                            ; ===========================================================================
00012AC4                            
00012AC4                            Obj62_FireBall:				; XREF: Obj62_Index
00012AC4 5428 0024                  		addq.b	#2,$24(a0)
00012AC8 117C 0008 0016             		move.b	#8,$16(a0)
00012ACE 117C 0008 0017             		move.b	#8,$17(a0)
00012AD4 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012ADC 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012AE2 0028 0004 0001             		ori.b	#4,1(a0)
00012AE8 117C 0004 0018             		move.b	#4,$18(a0)
00012AEE 117C 0098 0020             		move.b	#$98,$20(a0)
00012AF4 117C 0008 0019             		move.b	#8,$19(a0)
00012AFA 117C 0002 001A             		move.b	#2,$1A(a0)
00012B00 5068 000C                  		addq.w	#8,$C(a0)
00012B04 317C 0200 0010             		move.w	#$200,$10(a0)
00012B0A 0828 0000 0022             		btst	#0,$22(a0)
00012B10 6600                       		bne.s	Obj62_Sound
00012B12 4468 0010                  		neg.w	$10(a0)
00012B16                            
00012B16                            Obj62_Sound:
00012B16 303C 00AE                  		move.w	#$AE,d0
00012B1A 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012B20                            
00012B20                            Obj62_AniFire:				; XREF: Obj62_Index
00012B20 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012B24 0200 0007                  		andi.b	#7,d0
00012B28 6600                       		bne.s	Obj62_StopFire
00012B2A 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012B30                            
00012B30                            Obj62_StopFire:
00012B30 6100 B310                  		bsr.w	SpeedToPos
00012B34 0828 0000 0022             		btst	#0,$22(a0)
00012B3A 6600                       		bne.s	Obj62_StopFire2
00012B3C 76F8                       		moveq	#-8,d3
00012B3E 6100 0000                  		bsr.w	ObjHitWallLeft
00012B42 4A41                       		tst.w	d1
00012B44 6B00 B35E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012B48 4E75                       		rts	
00012B4A                            ; ===========================================================================
00012B4A                            
00012B4A                            Obj62_StopFire2:
00012B4A 7608                       		moveq	#8,d3
00012B4C 6100 0000                  		bsr.w	ObjHitWallRight
00012B50 4A41                       		tst.w	d1
00012B52 6B00 B350                  		bmi.w	DeleteObject
00012B56 4E75                       		rts	
00012B58                            ; ===========================================================================
00012B58                            ; ---------------------------------------------------------------------------
00012B58                            ; Sprite mappings - gargoyle head (LZ)
00012B58                            ; ---------------------------------------------------------------------------
00012B58                            Map_obj62:
00012B58                            	include "_maps\obj62.asm"
00012B58                            ; ---------------------------------------------------------------------------
00012B58                            ; Sprite mappings - gargoyle head (LZ)
00012B58                            ; ---------------------------------------------------------------------------
00012B58 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012B5C 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012B60 03                         byte_12320:	dc.b 3
00012B61 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012B66 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012B6B 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012B70 01                         byte_12330:	dc.b 1
00012B71 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012B76 01                         byte_12336:	dc.b 1
00012B77 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012B7C                            		even
00012B7C                            		even
00012B7C                            
00012B7C                            ; ===========================================================================
00012B7C                            ; ---------------------------------------------------------------------------
00012B7C                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012B7C                            ; ---------------------------------------------------------------------------
00012B7C                            
00012B7C                            Obj63:					; XREF: Obj_Index
00012B7C 7000                       		moveq	#0,d0
00012B7E 1028 0024                  		move.b	$24(a0),d0
00012B82 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012B86 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012B8A 3028 0030                  		move.w	$30(a0),d0
00012B8E 0240 FF80                  		andi.w	#$FF80,d0
00012B92 3238 F700                  		move.w	($FFFFF700).w,d1
00012B96 0441 0080                  		subi.w	#$80,d1
00012B9A 0241 FF80                  		andi.w	#$FF80,d1
00012B9E 9041                       		sub.w	d1,d0
00012BA0 0C40 0280                  		cmpi.w	#$280,d0
00012BA4 6200                       		bhi.s	loc_1236A
00012BA6                            
00012BA6                            Obj63_Display:				; XREF: loc_1236A
00012BA6 6000 B2C0                  		bra.w	DisplaySprite
00012BAA                            ; ===========================================================================
00012BAA                            
00012BAA                            loc_1236A:				; XREF: Obj63
00012BAA 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012BB0 6600                       		bne.s	loc_12378
00012BB2 0C40 FF80                  		cmpi.w	#-$80,d0
00012BB6 64EE                       		bcc.s	Obj63_Display
00012BB8                            
00012BB8                            loc_12378:
00012BB8 1028 002F                  		move.b	$2F(a0),d0
00012BBC 6A00 B2E6                  		bpl.w	DeleteObject
00012BC0 0240 007F                  		andi.w	#$7F,d0
00012BC4 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012BC8 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012BCE 6000 B2D4                  		bra.w	DeleteObject
00012BD2                            ; ===========================================================================
00012BD2 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012BD4 0000                       		dc.w loc_124B2-Obj63_Index
00012BD6 0000                       		dc.w loc_124C2-Obj63_Index
00012BD8 0000                       		dc.w loc_124DE-Obj63_Index
00012BDA                            ; ===========================================================================
00012BDA                            
00012BDA                            Obj63_Main:				; XREF: Obj63_Index
00012BDA 1028 0028                  		move.b	$28(a0),d0
00012BDE 6B00 0000                  		bmi.w	loc_12460
00012BE2 5428 0024                  		addq.b	#2,$24(a0)
00012BE6 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012BEE 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012BF4 0028 0004 0001             		ori.b	#4,1(a0)
00012BFA 117C 0010 0019             		move.b	#$10,$19(a0)
00012C00 117C 0004 0018             		move.b	#4,$18(a0)
00012C06 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012C0C 6600                       		bne.s	loc_123E2
00012C0E 5828 0024                  		addq.b	#4,$24(a0)
00012C12 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012C18 117C 0001 0018             		move.b	#1,$18(a0)
00012C1E 6000 0000                  		bra.w	loc_124DE
00012C22                            ; ===========================================================================
00012C22                            
00012C22                            loc_123E2:
00012C22 117C 0004 001A             		move.b	#4,$1A(a0)
00012C28 7000                       		moveq	#0,d0
00012C2A 1028 0028                  		move.b	$28(a0),d0
00012C2E 3200                       		move.w	d0,d1
00012C30 E648                       		lsr.w	#3,d0
00012C32 0240 001E                  		andi.w	#$1E,d0
00012C36 45FA 0000                  		lea	Obj63_Data(pc),a2
00012C3A D4F2 0000                  		adda.w	(a2,d0.w),a2
00012C3E 315A 0038                  		move.w	(a2)+,$38(a0)
00012C42 315A 0030                  		move.w	(a2)+,$30(a0)
00012C46 214A 003C                  		move.l	a2,$3C(a0)
00012C4A 0241 000F                  		andi.w	#$F,d1
00012C4E E549                       		lsl.w	#2,d1
00012C50 1141 0038                  		move.b	d1,$38(a0)
00012C54 117C 0004 003A             		move.b	#4,$3A(a0)
00012C5A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012C5E 6700                       		beq.s	loc_1244C
00012C60 117C 0001 003B             		move.b	#1,$3B(a0)
00012C66 4428 003A                  		neg.b	$3A(a0)
00012C6A 7200                       		moveq	#0,d1
00012C6C 1228 0038                  		move.b	$38(a0),d1
00012C70 D228 003A                  		add.b	$3A(a0),d1
00012C74 B228 0039                  		cmp.b	$39(a0),d1
00012C78 6500                       		bcs.s	loc_12448
00012C7A 1001                       		move.b	d1,d0
00012C7C 7200                       		moveq	#0,d1
00012C7E 4A00                       		tst.b	d0
00012C80 6A00                       		bpl.s	loc_12448
00012C82 1228 0039                  		move.b	$39(a0),d1
00012C86 5901                       		subq.b	#4,d1
00012C88                            
00012C88                            loc_12448:
00012C88 1141 0038                  		move.b	d1,$38(a0)
00012C8C                            
00012C8C                            loc_1244C:
00012C8C 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012C92 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012C98 6100 0000                  		bsr.w	Obj63_ChangeDir
00012C9C 6000 0000                  		bra.w	loc_124B2
00012CA0                            ; ===========================================================================
00012CA0                            
00012CA0                            loc_12460:				; XREF: Obj63_Main
00012CA0 1140 002F                  		move.b	d0,$2F(a0)
00012CA4 0240 007F                  		andi.w	#$7F,d0
00012CA8 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012CAC 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012CB2 6600 B1F0                  		bne.w	DeleteObject
00012CB6 D040                       		add.w	d0,d0
00012CB8 0240 001E                  		andi.w	#$1E,d0
00012CBC 45F9 0000 0000             		lea	(ObjPos_LZxpf_Index).l,a2
00012CC2 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012CC6 321A                       		move.w	(a2)+,d1
00012CC8 2248                       		movea.l	a0,a1
00012CCA 6000                       		bra.s	Obj63_MakePtfms
00012CCC                            ; ===========================================================================
00012CCC                            
00012CCC                            Obj63_Loop:
00012CCC 6100 B620                  		bsr.w	SingleObjLoad
00012CD0 6600                       		bne.s	loc_124AA
00012CD2                            
00012CD2                            Obj63_MakePtfms:			; XREF: loc_12460
00012CD2 12BC 0063                  		move.b	#$63,0(a1)
00012CD6 335A 0008                  		move.w	(a2)+,8(a1)
00012CDA 335A 000C                  		move.w	(a2)+,$C(a1)
00012CDE 301A                       		move.w	(a2)+,d0
00012CE0 1340 0028                  		move.b	d0,$28(a1)
00012CE4                            
00012CE4                            loc_124AA:
00012CE4 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012CE8                            
00012CE8 588F                       		addq.l	#4,sp
00012CEA 4E75                       		rts	
00012CEC                            ; ===========================================================================
00012CEC                            
00012CEC                            loc_124B2:				; XREF: Obj63_Index
00012CEC 7200                       		moveq	#0,d1
00012CEE 1228 0019                  		move.b	$19(a0),d1
00012CF2 4EB9 0000 7A72             		jsr	(PlatformObject).l
00012CF8 6000 0000                  		bra.w	sub_12502
00012CFC                            ; ===========================================================================
00012CFC                            
00012CFC                            loc_124C2:				; XREF: Obj63_Index
00012CFC 7200                       		moveq	#0,d1
00012CFE 1228 0019                  		move.b	$19(a0),d1
00012D02 4EB9 0000 7BE6             		jsr	(ExitPlatform).l
00012D08 3F28 0008                  		move.w	8(a0),-(sp)
00012D0C 6100 0000                  		bsr.w	sub_12502
00012D10 341F                       		move.w	(sp)+,d2
00012D12 4EF9 0000 8150             		jmp	(MvSonicOnPtfm2).l
00012D18                            ; ===========================================================================
00012D18                            
00012D18                            loc_124DE:				; XREF: Obj63_Index
00012D18 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012D1C 0240 0003                  		andi.w	#3,d0
00012D20 6600                       		bne.s	loc_124FC
00012D22 7201                       		moveq	#1,d1
00012D24 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012D28 6700                       		beq.s	loc_124F2
00012D2A 4401                       		neg.b	d1
00012D2C                            
00012D2C                            loc_124F2:
00012D2C D328 001A                  		add.b	d1,$1A(a0)
00012D30 0228 0003 001A             		andi.b	#3,$1A(a0)
00012D36                            
00012D36                            loc_124FC:
00012D36 588F                       		addq.l	#4,sp
00012D38 6000 D1D6                  		bra.w	MarkObjGone
00012D3C                            
00012D3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012D3C                            
00012D3C                            
00012D3C                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012D3C 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012D40 6700                       		beq.s	loc_12520
00012D42 4A28 003B                  		tst.b	$3B(a0)
00012D46 6600                       		bne.s	loc_12520
00012D48 117C 0001 003B             		move.b	#1,$3B(a0)
00012D4E 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012D54 4428 003A                  		neg.b	$3A(a0)
00012D58 6000                       		bra.s	loc_12534
00012D5A                            ; ===========================================================================
00012D5A                            
00012D5A                            loc_12520:
00012D5A 3028 0008                  		move.w	8(a0),d0
00012D5E B068 0034                  		cmp.w	$34(a0),d0
00012D62 6600                       		bne.s	loc_1256A
00012D64 3028 000C                  		move.w	$C(a0),d0
00012D68 B068 0036                  		cmp.w	$36(a0),d0
00012D6C 6600                       		bne.s	loc_1256A
00012D6E                            
00012D6E                            loc_12534:
00012D6E 7200                       		moveq	#0,d1
00012D70 1228 0038                  		move.b	$38(a0),d1
00012D74 D228 003A                  		add.b	$3A(a0),d1
00012D78 B228 0039                  		cmp.b	$39(a0),d1
00012D7C 6500                       		bcs.s	loc_12552
00012D7E 1001                       		move.b	d1,d0
00012D80 7200                       		moveq	#0,d1
00012D82 4A00                       		tst.b	d0
00012D84 6A00                       		bpl.s	loc_12552
00012D86 1228 0039                  		move.b	$39(a0),d1
00012D8A 5901                       		subq.b	#4,d1
00012D8C                            
00012D8C                            loc_12552:
00012D8C 1141 0038                  		move.b	d1,$38(a0)
00012D90 2268 003C                  		movea.l	$3C(a0),a1
00012D94 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012D9A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012DA0 6100 0000                  		bsr.w	Obj63_ChangeDir
00012DA4                            
00012DA4                            loc_1256A:
00012DA4 6100 B09C                  		bsr.w	SpeedToPos
00012DA8 4E75                       		rts	
00012DAA                            ; End of function sub_12502
00012DAA                            
00012DAA                            
00012DAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012DAA                            
00012DAA                            
00012DAA                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012DAA 7000                       		moveq	#0,d0
00012DAC 343C FF00                  		move.w	#-$100,d2
00012DB0 3028 0008                  		move.w	8(a0),d0
00012DB4 9068 0034                  		sub.w	$34(a0),d0
00012DB8 6400                       		bcc.s	loc_12584
00012DBA 4440                       		neg.w	d0
00012DBC 4442                       		neg.w	d2
00012DBE                            
00012DBE                            loc_12584:
00012DBE 7200                       		moveq	#0,d1
00012DC0 363C FF00                  		move.w	#-$100,d3
00012DC4 3228 000C                  		move.w	$C(a0),d1
00012DC8 9268 0036                  		sub.w	$36(a0),d1
00012DCC 6400                       		bcc.s	loc_12598
00012DCE 4441                       		neg.w	d1
00012DD0 4443                       		neg.w	d3
00012DD2                            
00012DD2                            loc_12598:
00012DD2 B240                       		cmp.w	d0,d1
00012DD4 6500                       		bcs.s	loc_125C2
00012DD6 3028 0008                  		move.w	8(a0),d0
00012DDA 9068 0034                  		sub.w	$34(a0),d0
00012DDE 6700                       		beq.s	loc_125AE
00012DE0 48C0                       		ext.l	d0
00012DE2 E180                       		asl.l	#8,d0
00012DE4 81C1                       		divs.w	d1,d0
00012DE6 4440                       		neg.w	d0
00012DE8                            
00012DE8                            loc_125AE:
00012DE8 3140 0010                  		move.w	d0,$10(a0)
00012DEC 3143 0012                  		move.w	d3,$12(a0)
00012DF0 4840                       		swap	d0
00012DF2 3140 000A                  		move.w	d0,$A(a0)
00012DF6 4268 000E                  		clr.w	$E(a0)
00012DFA 4E75                       		rts	
00012DFC                            ; ===========================================================================
00012DFC                            
00012DFC                            loc_125C2:				; XREF: Obj63_ChangeDir
00012DFC 3228 000C                  		move.w	$C(a0),d1
00012E00 9268 0036                  		sub.w	$36(a0),d1
00012E04 6700                       		beq.s	loc_125D4
00012E06 48C1                       		ext.l	d1
00012E08 E181                       		asl.l	#8,d1
00012E0A 83C0                       		divs.w	d0,d1
00012E0C 4441                       		neg.w	d1
00012E0E                            
00012E0E                            loc_125D4:
00012E0E 3141 0012                  		move.w	d1,$12(a0)
00012E12 3142 0010                  		move.w	d2,$10(a0)
00012E16 4841                       		swap	d1
00012E18 3141 000E                  		move.w	d1,$E(a0)
00012E1C 4268 000A                  		clr.w	$A(a0)
00012E20 4E75                       		rts	
00012E22                            ; End of function Obj63_ChangeDir
00012E22                            
00012E22                            ; ===========================================================================
00012E22 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012E24 0000                       		dc.w word_12610-Obj63_Data
00012E26 0000                       		dc.w word_12628-Obj63_Data
00012E28 0000                       		dc.w word_1263C-Obj63_Data
00012E2A 0000                       		dc.w word_12650-Obj63_Data
00012E2C 0000                       		dc.w word_12668-Obj63_Data
00012E2E 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012E3E 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012E4A 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012E5A 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012E62 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012E76 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012E8A 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012EA2 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012EB6                            
00012EB6                            ; ---------------------------------------------------------------------------
00012EB6                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012EB6                            ; ---------------------------------------------------------------------------
00012EB6                            Map_obj63:
00012EB6                            	include "_maps\obj63.asm"
00012EB6                            ; ---------------------------------------------------------------------------
00012EB6                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012EB6                            ; ---------------------------------------------------------------------------
00012EB6 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012EBA 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012EBE 0000                       		dc.w byte_1269E-Map_obj63
00012EC0 01                         byte_12686:	dc.b 1
00012EC1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012EC6 01                         byte_1268C:	dc.b 1
00012EC7 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012ECC 01                         byte_12692:	dc.b 1
00012ECD F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012ED2 01                         byte_12698:	dc.b 1
00012ED3 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012ED8 01                         byte_1269E:	dc.b 1
00012ED9 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012EDE                            		even
00012EDE                            		even
00012EDE                            
00012EDE                            ; ===========================================================================
00012EDE                            ; ---------------------------------------------------------------------------
00012EDE                            ; Object 64 - bubbles (LZ)
00012EDE                            ; ---------------------------------------------------------------------------
00012EDE                            
00012EDE                            Obj64:					; XREF: Obj_Index
00012EDE 7000                       		moveq	#0,d0
00012EE0 1028 0024                  		move.b	$24(a0),d0
00012EE4 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012EE8 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012EEC                            ; ===========================================================================
00012EEC 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012EEE 0000                       		dc.w Obj64_Animate-Obj64_Index
00012EF0 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012EF2 0000                       		dc.w Obj64_Display2-Obj64_Index
00012EF4 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012EF6 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012EF8                            ; ===========================================================================
00012EF8                            
00012EF8                            Obj64_Main:				; XREF: Obj64_Index
00012EF8 5428 0024                  		addq.b	#2,$24(a0)
00012EFC 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012F04 317C 8348 0002             		move.w	#$8348,2(a0)
00012F0A 117C 0084 0001             		move.b	#$84,1(a0)
00012F10 117C 0010 0019             		move.b	#$10,$19(a0)
00012F16 117C 0001 0018             		move.b	#1,$18(a0)
00012F1C 1028 0028                  		move.b	$28(a0),d0	; get object type
00012F20 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012F22 5028 0024                  		addq.b	#8,$24(a0)
00012F26 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012F2A 1140 0032                  		move.b	d0,$32(a0)
00012F2E 1140 0033                  		move.b	d0,$33(a0)
00012F32 117C 0006 001C             		move.b	#6,$1C(a0)
00012F38 6000 0000                  		bra.w	Obj64_BblMaker
00012F3C                            ; ===========================================================================
00012F3C                            
00012F3C                            Obj64_Bubble:				; XREF: Obj64_Main
00012F3C 1140 001C                  		move.b	d0,$1C(a0)
00012F40 3168 0008 0030             		move.w	8(a0),$30(a0)
00012F46 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012F4C 4EB9 0000 2B1A             		jsr	(RandomNumber).l
00012F52 1140 0026                  		move.b	d0,$26(a0)
00012F56                            
00012F56                            Obj64_Animate:				; XREF: Obj64_Index
00012F56 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012F5C 4EB9 0000 AEB6             		jsr	AnimateSprite
00012F62 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012F68 6600                       		bne.s	Obj64_ChkWater
00012F6A 117C 0001 002E             		move.b	#1,$2E(a0)
00012F70                            
00012F70                            Obj64_ChkWater:				; XREF: Obj64_Index
00012F70 3038 F646                  		move.w	($FFFFF646).w,d0
00012F74 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012F78 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012F7A                            
00012F7A                            Obj64_Burst:				; XREF: Obj64_Wobble
00012F7A 117C 0006 0024             		move.b	#6,$24(a0)
00012F80 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012F84 6000 0000                  		bra.w	Obj64_Display2
00012F88                            ; ===========================================================================
00012F88                            
00012F88                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012F88 1028 0026                  		move.b	$26(a0),d0
00012F8C 5228 0026                  		addq.b	#1,$26(a0)
00012F90 0240 007F                  		andi.w	#$7F,d0
00012F94 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012F9A 1031 0000                  		move.b	(a1,d0.w),d0
00012F9E 4880                       		ext.w	d0
00012FA0 D068 0030                  		add.w	$30(a0),d0
00012FA4 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012FA8 4A28 002E                  		tst.b	$2E(a0)
00012FAC 6700                       		beq.s	Obj64_Display
00012FAE 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012FB2 6700                       		beq.s	Obj64_Display	; if not, branch
00012FB4                            
00012FB4 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012FB8 303C 00AD                  		move.w	#$AD,d0
00012FBC 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012FC2 43F8 D000                  		lea	($FFFFD000).w,a1
00012FC6 4269 0010                  		clr.w	$10(a1)
00012FCA 4269 0012                  		clr.w	$12(a1)
00012FCE 4269 0014                  		clr.w	$14(a1)
00012FD2 137C 0015 001C             		move.b	#$15,$1C(a1)
00012FD8 337C 0023 003E             		move.w	#$23,$3E(a1)
00012FDE 137C 0000 003C             		move.b	#0,$3C(a1)
00012FE4 08A9 0005 0022             		bclr	#5,$22(a1)
00012FEA 08A9 0004 0022             		bclr	#4,$22(a1)
00012FF0 0829 0002 0022             		btst	#2,$22(a1)
00012FF6 6700 FF82                  		beq.w	Obj64_Burst
00012FFA 08A9 0002 0022             		bclr	#2,$22(a1)
00013000 137C 0013 0016             		move.b	#$13,$16(a1)
00013006 137C 0009 0017             		move.b	#9,$17(a1)
0001300C 5B69 000C                  		subq.w	#5,$C(a1)
00013010 6000 FF68                  		bra.w	Obj64_Burst
00013014                            ; ===========================================================================
00013014                            
00013014                            Obj64_Display:				; XREF: Obj64_Wobble
00013014 6100 AE2C                  		bsr.w	SpeedToPos
00013018 4A28 0001                  		tst.b	1(a0)
0001301C 6A00                       		bpl.s	Obj64_Delete
0001301E 4EFA AE48                  		jmp	DisplaySprite
00013022                            ; ===========================================================================
00013022                            
00013022                            Obj64_Delete:
00013022 4EFA AE80                  		jmp	DeleteObject
00013026                            ; ===========================================================================
00013026                            
00013026                            Obj64_Display2:				; XREF: Obj64_Index
00013026 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001302C 4EB9 0000 AEB6             		jsr	AnimateSprite
00013032 4A28 0001                  		tst.b	1(a0)
00013036 6A00                       		bpl.s	Obj64_Delete2
00013038 4EFA AE2E                  		jmp	DisplaySprite
0001303C                            ; ===========================================================================
0001303C                            
0001303C                            Obj64_Delete2:
0001303C 4EFA AE66                  		jmp	DeleteObject
00013040                            ; ===========================================================================
00013040                            
00013040                            Obj64_Delete3:				; XREF: Obj64_Index
00013040 6000 AE62                  		bra.w	DeleteObject
00013044                            ; ===========================================================================
00013044                            
00013044                            Obj64_BblMaker:				; XREF: Obj64_Index
00013044 4A68 0036                  		tst.w	$36(a0)
00013048 6600                       		bne.s	loc_12874
0001304A 3038 F646                  		move.w	($FFFFF646).w,d0
0001304E B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00013052 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00013056 4A28 0001                  		tst.b	1(a0)
0001305A 6A00 0000                  		bpl.w	Obj64_ChkDel
0001305E 5368 0038                  		subq.w	#1,$38(a0)
00013062 6A00 0000                  		bpl.w	loc_12914
00013066 317C 0001 0036             		move.w	#1,$36(a0)
0001306C                            
0001306C                            loc_1283A:
0001306C 4EB9 0000 2B1A             		jsr	(RandomNumber).l
00013072 3200                       		move.w	d0,d1
00013074 0240 0007                  		andi.w	#7,d0
00013078 0C40 0006                  		cmpi.w	#6,d0
0001307C 64EE                       		bcc.s	loc_1283A
0001307E                            
0001307E 1140 0034                  		move.b	d0,$34(a0)
00013082 0241 000C                  		andi.w	#$C,d1
00013086 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
0001308C D2C1                       		adda.w	d1,a1
0001308E 2149 003C                  		move.l	a1,$3C(a0)
00013092 5328 0032                  		subq.b	#1,$32(a0)
00013096 6A00                       		bpl.s	loc_12872
00013098 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001309E 08E8 0007 0036             		bset	#7,$36(a0)
000130A4                            
000130A4                            loc_12872:
000130A4 6000                       		bra.s	loc_1287C
000130A6                            ; ===========================================================================
000130A6                            
000130A6                            loc_12874:				; XREF: Obj64_BblMaker
000130A6 5368 0038                  		subq.w	#1,$38(a0)
000130AA 6A00 0000                  		bpl.w	loc_12914
000130AE                            
000130AE                            loc_1287C:
000130AE 4EB9 0000 2B1A             		jsr	(RandomNumber).l
000130B4 0240 001F                  		andi.w	#$1F,d0
000130B8 3140 0038                  		move.w	d0,$38(a0)
000130BC 6100 B230                  		bsr.w	SingleObjLoad
000130C0 6600                       		bne.s	loc_128F8
000130C2 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000130C6 3368 0008 0008             		move.w	8(a0),8(a1)
000130CC 4EB9 0000 2B1A             		jsr	(RandomNumber).l
000130D2 0240 000F                  		andi.w	#$F,d0
000130D6 5140                       		subq.w	#8,d0
000130D8 D169 0008                  		add.w	d0,8(a1)
000130DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000130E2 7000                       		moveq	#0,d0
000130E4 1028 0034                  		move.b	$34(a0),d0
000130E8 2468 003C                  		movea.l	$3C(a0),a2
000130EC 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000130F2 0828 0007 0036             		btst	#7,$36(a0)
000130F8 6700                       		beq.s	loc_128F8
000130FA 4EB9 0000 2B1A             		jsr	(RandomNumber).l
00013100 0240 0003                  		andi.w	#3,d0
00013104 6600                       		bne.s	loc_128E4
00013106 08E8 0006 0036             		bset	#6,$36(a0)
0001310C 6600                       		bne.s	loc_128F8
0001310E 137C 0002 0028             		move.b	#2,$28(a1)
00013114                            
00013114                            loc_128E4:
00013114 4A28 0034                  		tst.b	$34(a0)
00013118 6600                       		bne.s	loc_128F8
0001311A 08E8 0006 0036             		bset	#6,$36(a0)
00013120 6600                       		bne.s	loc_128F8
00013122 137C 0002 0028             		move.b	#2,$28(a1)
00013128                            
00013128                            loc_128F8:
00013128 5328 0034                  		subq.b	#1,$34(a0)
0001312C 6A00                       		bpl.s	loc_12914
0001312E 4EB9 0000 2B1A             		jsr	(RandomNumber).l
00013134 0240 007F                  		andi.w	#$7F,d0
00013138 0640 0080                  		addi.w	#$80,d0
0001313C D168 0038                  		add.w	d0,$38(a0)
00013140 4268 0036                  		clr.w	$36(a0)
00013144                            
00013144                            loc_12914:
00013144 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001314A 4EB9 0000 AEB6             		jsr	AnimateSprite
00013150                            
00013150                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00013150 3028 0008                  		move.w	8(a0),d0
00013154 0240 FF80                  		andi.w	#$FF80,d0
00013158 3238 F700                  		move.w	($FFFFF700).w,d1
0001315C 0441 0080                  		subi.w	#$80,d1
00013160 0241 FF80                  		andi.w	#$FF80,d1
00013164 9041                       		sub.w	d1,d0
00013166 0C40 0280                  		cmpi.w	#$280,d0
0001316A 6200 AD38                  		bhi.w	DeleteObject
0001316E 3038 F646                  		move.w	($FFFFF646).w,d0
00013172 B068 000C                  		cmp.w	$C(a0),d0
00013176 6500 ACF0                  		bcs.w	DisplaySprite
0001317A 4E75                       		rts	
0001317C                            ; ===========================================================================
0001317C                            ; bubble production sequence
0001317C                            
0001317C                            ; 0 = small bubble, 1 =	large bubble
0001317C                            
0001317C 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
0001318E                            
0001318E                            ; ===========================================================================
0001318E                            
0001318E                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
0001318E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013192 6B00                       		bmi.s	loc_12998
00013194 43F8 D000                  		lea	($FFFFD000).w,a1
00013198 3029 0008                  		move.w	8(a1),d0
0001319C 3228 0008                  		move.w	8(a0),d1
000131A0 0441 0010                  		subi.w	#$10,d1
000131A4 B240                       		cmp.w	d0,d1
000131A6 6400                       		bcc.s	loc_12998
000131A8 0641 0020                  		addi.w	#$20,d1
000131AC B240                       		cmp.w	d0,d1
000131AE 6500                       		bcs.s	loc_12998
000131B0 3029 000C                  		move.w	$C(a1),d0
000131B4 3228 000C                  		move.w	$C(a0),d1
000131B8 B240                       		cmp.w	d0,d1
000131BA 6400                       		bcc.s	loc_12998
000131BC 0641 0010                  		addi.w	#$10,d1
000131C0 B240                       		cmp.w	d0,d1
000131C2 6500                       		bcs.s	loc_12998
000131C4 7001                       		moveq	#1,d0
000131C6 4E75                       		rts	
000131C8                            ; ===========================================================================
000131C8                            
000131C8                            loc_12998:
000131C8 7000                       		moveq	#0,d0
000131CA 4E75                       		rts	
000131CC                            ; ===========================================================================
000131CC                            Ani_obj64:
000131CC                            	include "_anim\obj64.asm"
000131CC                            ; ---------------------------------------------------------------------------
000131CC                            ; Animation script - bubbles (LZ)
000131CC                            ; ---------------------------------------------------------------------------
000131CC 0000                       		dc.w byte_129AA-Ani_obj64
000131CE 0000                       		dc.w byte_129B0-Ani_obj64
000131D0 0000                       		dc.w byte_129B6-Ani_obj64
000131D2 0000                       		dc.w byte_129BE-Ani_obj64
000131D4 0000                       		dc.w byte_129BE-Ani_obj64
000131D6 0000                       		dc.w byte_129C0-Ani_obj64
000131D8 0000                       		dc.w byte_129C6-Ani_obj64
000131DA 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000131E0 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000131E6 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000131EE 04FC                       byte_129BE:	dc.b 4,	$FC
000131F0 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000131F6 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000131FC 00                         		even
000131FC 00                         		even
000131FC                            
000131FC                            ; ---------------------------------------------------------------------------
000131FC                            ; Sprite mappings - bubbles (LZ)
000131FC                            ; ---------------------------------------------------------------------------
000131FC                            Map_obj64:
000131FC                            	include "_maps\obj64.asm"
000131FC                            ; ---------------------------------------------------------------------------
000131FC                            ; Sprite mappings - bubbles (LZ)
000131FC                            ; ---------------------------------------------------------------------------
000131FC 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00013200 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00013204 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00013208 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
0001320C 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00013210 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00013214 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013218 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
0001321C 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00013220 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013224 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013228 0000                       		dc.w byte_12A9C-Map_obj64
0001322A 01                         byte_129FA:	dc.b 1
0001322B FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00013230 01                         byte_12A00:	dc.b 1
00013231 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013236 01                         byte_12A06:	dc.b 1
00013237 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
0001323C 01                         byte_12A0C:	dc.b 1
0001323D F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00013242 01                         byte_12A12:	dc.b 1
00013243 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013248 01                         byte_12A18:	dc.b 1
00013249 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
0001324E 01                         byte_12A1E:	dc.b 1
0001324F F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013254 04                         byte_12A24:	dc.b 4
00013255 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
0001325A F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
0001325F 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013264 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013269 04                         byte_12A39:	dc.b 4
0001326A F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
0001326F F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013274 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013279 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
0001327E 01                         byte_12A4E:	dc.b 1
0001327F F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013284 01                         byte_12A54:	dc.b 1
00013285 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
0001328A 01                         byte_12A5A:	dc.b 1
0001328B F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013290 01                         byte_12A60:	dc.b 1
00013291 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013296 01                         byte_12A66:	dc.b 1
00013297 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
0001329C 01                         byte_12A6C:	dc.b 1
0001329D F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
000132A2 01                         byte_12A72:	dc.b 1
000132A3 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
000132A8 01                         byte_12A78:	dc.b 1
000132A9 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
000132AE 01                         byte_12A7E:	dc.b 1
000132AF F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000132B4 01                         byte_12A84:	dc.b 1
000132B5 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000132BA 01                         byte_12A8A:	dc.b 1
000132BB F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000132C0 01                         byte_12A90:	dc.b 1
000132C1 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000132C6 01                         byte_12A96:	dc.b 1
000132C7 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000132CC 00                         byte_12A9C:	dc.b 0
000132CE 00                         		even
000132CE 00                         		even
000132CE                            
000132CE                            ; ===========================================================================
000132CE                            ; ---------------------------------------------------------------------------
000132CE                            ; Object 65 - waterfalls (LZ)
000132CE                            ; ---------------------------------------------------------------------------
000132CE                            
000132CE                            Obj65:					; XREF: Obj_Index
000132CE 7000                       		moveq	#0,d0
000132D0 1028 0024                  		move.b	$24(a0),d0
000132D4 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000132D8 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000132DC                            ; ===========================================================================
000132DC 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000132DE 0000                       		dc.w Obj65_Animate-Obj65_Index
000132E0 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000132E2 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000132E4 0000                       		dc.w loc_12B36-Obj65_Index
000132E6                            ; ===========================================================================
000132E6                            
000132E6                            Obj65_Main:				; XREF: Obj65_Index
000132E6 5828 0024                  		addq.b	#4,$24(a0)
000132EA 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000132F2 317C 4259 0002             		move.w	#$4259,2(a0)
000132F8 0028 0004 0001             		ori.b	#4,1(a0)
000132FE 117C 0018 0019             		move.b	#$18,$19(a0)
00013304 117C 0001 0018             		move.b	#1,$18(a0)
0001330A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001330E 6A00                       		bpl.s	loc_12AE6
00013310 08E8 0007 0002             		bset	#7,2(a0)
00013316                            
00013316                            loc_12AE6:
00013316 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
0001331A 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
0001331E 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013322 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013324 4228 0018                  		clr.b	$18(a0)
00013328 5528 0024                  		subq.b	#2,$24(a0)
0001332C 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013332 6700                       		beq.s	loc_12B0A	; if not, branch
00013334 117C 0006 0024             		move.b	#6,$24(a0)
0001333A                            
0001333A                            loc_12B0A:
0001333A 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013340 6700                       		beq.s	Obj65_Animate	; if not, branch
00013342 117C 0008 0024             		move.b	#8,$24(a0)
00013348                            
00013348                            Obj65_Animate:				; XREF: Obj65_Index
00013348 43F9 0000 0000             		lea	(Ani_obj65).l,a1
0001334E 4EB9 0000 AEB6             		jsr	AnimateSprite
00013354                            
00013354                            Obj65_ChkDel:				; XREF: Obj65_Index
00013354 6000 CBBA                  		bra.w	MarkObjGone
00013358                            ; ===========================================================================
00013358                            
00013358                            Obj65_FixHeight:			; XREF: Obj65_Index
00013358 3038 F646                  		move.w	($FFFFF646).w,d0
0001335C 0440 0010                  		subi.w	#$10,d0
00013360 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013364 60E2                       		bra.s	Obj65_Animate
00013366                            ; ===========================================================================
00013366                            
00013366                            loc_12B36:				; XREF: Obj65_Index
00013366 08A8 0007 0002             		bclr	#7,2(a0)
0001336C 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013372 6600                       		bne.s	Obj65_Animate2
00013374 08E8 0007 0002             		bset	#7,2(a0)
0001337A                            
0001337A                            Obj65_Animate2:
0001337A 60CC                       		bra.s	Obj65_Animate
0001337C                            ; ===========================================================================
0001337C                            Ani_obj65:
0001337C                            	include "_anim\obj65.asm"
0001337C                            ; ---------------------------------------------------------------------------
0001337C                            ; Animation script - waterfall (LZ)
0001337C                            ; ---------------------------------------------------------------------------
0001337C 0000                       		dc.w byte_12B4E-Ani_obj65
0001337E 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013384 00                         		even
00013384 00                         		even
00013384                            
00013384                            ; ---------------------------------------------------------------------------
00013384                            ; Sprite mappings - waterfalls (LZ)
00013384                            ; ---------------------------------------------------------------------------
00013384                            Map_obj65:
00013384                            	include "_maps\obj65.asm"
00013384                            ; ---------------------------------------------------------------------------
00013384                            ; Sprite mappings - waterfalls (LZ)
00013384                            ; ---------------------------------------------------------------------------
00013384 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013388 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001338C 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013390 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013394 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013398 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001339C 01                         byte_12B6C:	dc.b 1
0001339D F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000133A2 02                         byte_12B72:	dc.b 2
000133A3 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000133A8 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000133AD 02                         byte_12B7D:	dc.b 2
000133AE F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000133B3 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000133B8 01                         byte_12B88:	dc.b 1
000133B9 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000133BE 02                         byte_12B8E:	dc.b 2
000133BF F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000133C4 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000133C9 01                         byte_12B99:	dc.b 1
000133CA F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000133CF 01                         byte_12B9F:	dc.b 1
000133D0 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000133D5 01                         byte_12BA5:	dc.b 1
000133D6 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000133DB 02                         byte_12BAB:	dc.b 2
000133DC F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000133E1 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000133E6 02                         byte_12BB6:	dc.b 2
000133E7 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000133EC F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000133F1 02                         byte_12BC1:	dc.b 2
000133F2 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000133F7 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000133FC 02                         byte_12BCC:	dc.b 2
000133FD F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013402 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013408 00                         		even
00013408 00                         		even
00013408                            
00013408                            ; ===========================================================================
00013408                            ; ---------------------------------------------------------------------------
00013408                            ; Object 01 - Sonic
00013408                            ; ---------------------------------------------------------------------------
00013408                            
00013408                            Obj01:					; XREF: Obj_Index
00013408 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001340C 6700                       		beq.s	Obj01_Normal	; if not, branch
0001340E 4EF9 0000 0000             		jmp	DebugMode
00013414                            ; ===========================================================================
00013414                            
00013414                            Obj01_Normal:
00013414 7000                       		moveq	#0,d0
00013416 1028 0024                  		move.b	$24(a0),d0
0001341A 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
0001341E 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013422                            ; ===========================================================================
00013422 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013424 0000                       		dc.w Obj01_Control-Obj01_Index
00013426 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013428 0000                       		dc.w Obj01_Death-Obj01_Index
0001342A 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
0001342C                            ; ===========================================================================
0001342C                            
0001342C                            Player_Maps:
0001342C 0000 0000                  	dc.l	Map_Sonic
00013430 0000 0000                  	dc.l	Map_Sonic ; gronic
00013434 0000 0000                  	dc.l	Map_Sonic ; anakama
00013438 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
0001343C                            	; insert player mapping here
0001343C                            	
0001343C                            Obj01_Main:				; XREF: Obj01_Index
0001343C 5428 0024                  		addq.b	#2,$24(a0)
00013440 117C 0013 0016             		move.b	#$13,$16(a0)
00013446 117C 0009 0017             		move.b	#9,$17(a0)
0001344C                            		
0001344C 7000                       		moveq	#0,d0
0001344E 1038 FFE8                  		move.b	(v_character),d0
00013452 E548                       		lsl.w	#2,d0
00013454 43FA FFD6                  		lea 	Player_Maps(pc),a1
00013458 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
0001345E                            		
0001345E 317C 0780 0002             		move.w	#$780,2(a0)
00013464 117C 0002 0018             		move.b	#2,$18(a0)
0001346A 117C 0018 0019             		move.b	#$18,$19(a0)
00013470 117C 0004 0001             		move.b	#4,1(a0)
00013476 31FC 0FFF F760             		move.w	#$FFF,($FFFFF760).w ; Sonic's top speed
0001347C 31FC 000F F762             		move.w	#$F,($FFFFF762).w ; Sonic's acceleration
00013482 31FC 0AAA F764             		move.w	#$AAA,($FFFFF764).w ; Sonic's deceleration
00013488                            
00013488                            Obj01_Control:				; XREF: Obj01_Index
00013488 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
0001348C 6700                       		beq.s	loc_12C58	; if not, branch
0001348E 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013494 6700                       		beq.s	loc_12C58	; if not, branch
00013496 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
0001349C 4238 F7CC                  		clr.b	($FFFFF7CC).w
000134A0 4E75                       		rts	
000134A2                            ; ===========================================================================
000134A2                            
000134A2                            loc_12C58:
000134A2 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000134A6 6600                       		bne.s	loc_12C64	; if yes, branch
000134A8 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000134AE                            
000134AE                            loc_12C64:
000134AE 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000134B4 6600                       		bne.s	loc_12C7E	; if yes, branch
000134B6 7000                       		moveq	#0,d0
000134B8 1028 0022                  		move.b	$22(a0),d0
000134BC 0240 0006                  		andi.w	#6,d0
000134C0 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000134C4 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000134C8                            
000134C8                            loc_12C7E:
000134C8 6100                       		bsr.s	Sonic_Display
000134CA 6100 0000                  		bsr.w	Sonic_RecordPos
000134CE 6100 0000                  		bsr.w	Sonic_Water
000134D2 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000134D8 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000134DE 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000134E2 6700                       		beq.s	loc_12CA6
000134E4 4A28 001C                  		tst.b	$1C(a0)
000134E8 6600                       		bne.s	loc_12CA6
000134EA 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000134F0                            
000134F0                            loc_12CA6:
000134F0 6100 0000                  		bsr.w	Sonic_Animate
000134F4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000134F8 6B00                       		bmi.s	loc_12CB6
000134FA 4EB9 0000 0000             		jsr	TouchResponse
00013500                            
00013500                            loc_12CB6:
00013500 6100 0000                  		bsr.w	Sonic_Loops
00013504 6100 0000                  		bsr.w	LoadSonicDynPLC
00013508 4E75                       		rts	
0001350A                            ; ===========================================================================
0001350A 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
0001350C 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001350E 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013510 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013512                            ; ---------------------------------------------------------------------------
00013512                            ; Music	to play	after invincibility wears off
00013512                            ; ---------------------------------------------------------------------------
00013512                            ; ===========================================================================
00013512                            
00013512                            Sonic_Display:				; XREF: loc_12C7E
00013512 3028 0030                  		move.w	$30(a0),d0
00013516 6700                       		beq.s	Obj01_Display
00013518 5368 0030                  		subq.w	#1,$30(a0)
0001351C E648                       		lsr.w	#3,d0
0001351E 6400                       		bcc.s	Obj01_ChkInvin
00013520                            
00013520                            Obj01_Display:
00013520 4EBA A946                  		jsr	DisplaySprite
00013524                            
00013524                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013524                             
00013524                            Obj01_ChkInvin:
00013524 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013528 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
0001352C 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013530 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013534 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013538 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
0001353C 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013540 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013544 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001354A 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
0001354E 7000                       		moveq	#0,d0
00013550 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013554                             
00013554 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001355A 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
0001355C 43F9 0000 3B9A             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013562 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013564                             
00013564                            Obj01_GetBgm2:
00013564 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001356A 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
0001356C 43F9 0000 3BA2             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013572 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013574                             
00013574                            Obj01_GetBgm3:
00013574 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001357A 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
0001357C 43F9 0000 3BAA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013582 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013584                             
00013584                            Obj01_GetBgm4:
00013584 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001358A 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
0001358C 43F9 0000 3BB2             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013592                             
00013592                            Obj01_PlayMusic:
00013592 1031 0000                  		move.b	(a1,d0.w),d0
00013596 4EB9 0000 1398             		jsr	(PlaySound).l	; play normal music
0001359C                             
0001359C                            ; NineKode ends here.
0001359C                            
0001359C                            Obj01_RmvInvin:
0001359C 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000135A2                            
000135A2                            Obj01_ChkShoes:
000135A2 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000135A6 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000135A8 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000135AC 6700                       		beq.s	Obj01_ExitChk
000135AE 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000135B2 6600                       		bne.s	Obj01_ExitChk
000135B4 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000135BA 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000135C0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000135C6 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000135CC 303C 00E3                  		move.w	#$E3,d0
000135D0 4EF9 0000 1398             		jmp	(PlaySound).l	; run music at normal speed
000135D6                            ; ===========================================================================
000135D6                            
000135D6                            Obj01_ExitChk:
000135D6 4E75                       		rts	
000135D8                            
000135D8                            ; ---------------------------------------------------------------------------
000135D8                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000135D8                            ; ---------------------------------------------------------------------------
000135D8                            
000135D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135D8                            
000135D8                            
000135D8                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000135D8 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000135DC 43F8 CB00                  		lea	($FFFFCB00).w,a1
000135E0 43F1 0000                  		lea	(a1,d0.w),a1
000135E4 32E8 0008                  		move.w	8(a0),(a1)+
000135E8 32E8 000C                  		move.w	$C(a0),(a1)+
000135EC 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000135F0 4E75                       		rts	
000135F2                            ; End of function Sonic_RecordPos
000135F2                            
000135F2                            ; ---------------------------------------------------------------------------
000135F2                            ; Subroutine for Sonic when he's underwater
000135F2                            ; ---------------------------------------------------------------------------
000135F2                            
000135F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135F2                            
000135F2                            
000135F2                            Sonic_Water:				; XREF: loc_12C7E
000135F2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000135F8 6700                       		beq.s	Obj01_InWater	; if yes, branch
000135FA                            
000135FA                            locret_12D80:
000135FA 4E75                       		rts	
000135FC                            ; ===========================================================================
000135FC                            
000135FC                            Obj01_InWater:
000135FC 3038 F646                  		move.w	($FFFFF646).w,d0
00013600 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013604 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013606 08E8 0006 0022             		bset	#6,$22(a0)
0001360C 66EC                       		bne.s	locret_12D80
0001360E 6100 0000                  		bsr.w	ResumeMusic
00013612 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013618 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001361E 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013624 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
0001362A 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013630 E0E8 0010                  		asr	$10(a0)
00013634 E0E8 0012                  		asr	$12(a0)
00013638 E0E8 0012                  		asr	$12(a0)
0001363C 67BC                       		beq.s	locret_12D80
0001363E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013644 303C 00AA                  		move.w	#$AA,d0
00013648 4EF9 0000 139E             		jmp	(PlaySound_Special).l ;	play splash sound
0001364E                            ; ===========================================================================
0001364E                            
0001364E                            Obj01_OutWater:
0001364E 08A8 0006 0022             		bclr	#6,$22(a0)
00013654 67A4                       		beq.s	locret_12D80
00013656 6100 0000                  		bsr.w	ResumeMusic
0001365A 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013660 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013666 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001366C E1E8 0012                  		asl	$12(a0)
00013670 6700 FF88                  		beq.w	locret_12D80
00013674 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001367A 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013680 6E00                       		bgt.s	loc_12E0E
00013682 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013688                            
00013688                            loc_12E0E:
00013688 303C 00AA                  		move.w	#$AA,d0
0001368C 4EF9 0000 139E             		jmp	(PlaySound_Special).l ;	play splash sound
00013692                            ; End of function Sonic_Water
00013692                            
00013692                            ; ===========================================================================
00013692                            ; ---------------------------------------------------------------------------
00013692                            ; Modes	for controlling	Sonic
00013692                            ; ---------------------------------------------------------------------------
00013692                            
00013692                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013692 6100 0000                  		bsr.w	Sonic_Jump
00013696 6100 0000                  		bsr.w	Sonic_SlopeResist
0001369A 6100 0000                  		bsr.w	Sonic_Move
0001369E 6100 0000                  		bsr.w	Sonic_Roll
000136A2 6100 0000                  		bsr.w	Sonic_LevelBound
000136A6 4EBA A79A                  		jsr	SpeedToPos
000136AA 6100 0000                  		bsr.w	Sonic_AnglePos
000136AE 6100 0000                  		bsr.w	Sonic_SlopeRepel
000136B2 4E75                       		rts	
000136B4                            ; ===========================================================================
000136B4                            
000136B4                            Obj01_MdJump:				; XREF: Obj01_Modes
000136B4 6100 0000                  		bsr.w	Sonic_JumpHeight
000136B8 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000136BC 6100 0000                  		bsr.w	Sonic_LevelBound
000136C0 4EBA A70E                  		jsr	ObjectFall
000136C4 0828 0006 0022             		btst	#6,$22(a0)
000136CA 6700                       		beq.s	loc_12E5C
000136CC 0468 0028 0012             		subi.w	#$28,$12(a0)
000136D2                            
000136D2                            loc_12E5C:
000136D2 6100 0000                  		bsr.w	Sonic_JumpAngle
000136D6 6100 0000                  		bsr.w	Sonic_Floor
000136DA 4E75                       		rts	
000136DC                            ; ===========================================================================
000136DC                            
000136DC                            Obj01_MdRoll:				; XREF: Obj01_Modes
000136DC 6100 0000                  		bsr.w	Sonic_Jump
000136E0 6100 0000                  		bsr.w	Sonic_RollRepel
000136E4 6100 0000                  		bsr.w	Sonic_RollSpeed
000136E8 6100 0000                  		bsr.w	Sonic_LevelBound
000136EC 4EBA A754                  		jsr	SpeedToPos
000136F0 6100 0000                  		bsr.w	Sonic_AnglePos
000136F4 6100 0000                  		bsr.w	Sonic_SlopeRepel
000136F8 4E75                       		rts	
000136FA                            ; ===========================================================================
000136FA                            
000136FA                            Obj01_MdJump2:				; XREF: Obj01_Modes
000136FA 6100 0000                  		bsr.w	Sonic_JumpHeight
000136FE 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013702 6100 0000                  		bsr.w	Sonic_LevelBound
00013706 6100 0000                  		bsr.w	Sonic_AirUnroll
0001370A 4EBA A6C4                  		jsr	ObjectFall
0001370E 0828 0006 0022             		btst	#6,$22(a0)
00013714 6700                       		beq.s	loc_12EA6
00013716 0468 0028 0012             		subi.w	#$28,$12(a0)
0001371C                            
0001371C                            loc_12EA6:
0001371C 6100 0000                  		bsr.w	Sonic_JumpAngle
00013720 6100 0000                  		bsr.w	Sonic_Floor
00013724 4E75                       		rts	
00013726                            ; ---------------------------------------------------------------------------
00013726                            ; Subroutine to	make Sonic walk/run
00013726                            ; ---------------------------------------------------------------------------
00013726                            
00013726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013726                            
00013726                            
00013726                            Sonic_Move:				; XREF: Obj01_MdNormal
00013726 3C38 F760                  		move.w	($FFFFF760).w,d6
0001372A 3A38 F762                  		move.w	($FFFFF762).w,d5
0001372E 3838 F764                  		move.w	($FFFFF764).w,d4
00013732 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013736 6600 0000                  		bne.w	loc_12FEE
0001373A 4A68 003E                  		tst.w	$3E(a0)
0001373E 6600 0000                  		bne.w	Obj01_ResetScr
00013742 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013748 6700                       		beq.s	Obj01_NotLeft	; if not, branch
0001374A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013750 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013752 6100 0000                  		bsr.w	Sonic_MoveLeft
00013756                            
00013756                            Obj01_NotLeft:
00013756 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001375C 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001375E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013764 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013766 6100 0000                  		bsr.w	Sonic_MoveLeft
0001376A 6000                       		bra.s	Obj01_NotRight
0001376C                            
0001376C                            Obj01_MoveRight:
0001376C 6100 0000                  		bsr.w	Sonic_MoveRight
00013770                            
00013770                            Obj01_NotRight:
00013770 1028 0026                  		move.b	$26(a0),d0
00013774 0600 0020                  		addi.b	#$20,d0
00013778 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001377C 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013780 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013784 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013788 08A8 0005 0022             		bclr	#5,$22(a0)
0001378E 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013794 0828 0003 0022             		btst	#3,$22(a0)
0001379A 6700                       		beq.s	Sonic_Balance
0001379C 7000                       		moveq	#0,d0
0001379E 1028 003D                  		move.b	$3D(a0),d0
000137A2 ED48                       		lsl.w	#6,d0
000137A4 43F8 D000                  		lea	($FFFFD000).w,a1
000137A8 43F1 0000                  		lea	(a1,d0.w),a1
000137AC 4A29 0022                  		tst.b	$22(a1)
000137B0 6B00                       		bmi.s	Sonic_LookUp
000137B2 7200                       		moveq	#0,d1
000137B4 1229 0019                  		move.b	$19(a1),d1
000137B8 3401                       		move.w	d1,d2
000137BA D442                       		add.w	d2,d2
000137BC 5942                       		subq.w	#4,d2
000137BE D268 0008                  		add.w	8(a0),d1
000137C2 9269 0008                  		sub.w	8(a1),d1
000137C6 0C41 0004                  		cmpi.w	#4,d1
000137CA 6D00                       		blt.s	loc_12F6A
000137CC B242                       		cmp.w	d2,d1
000137CE 6C00                       		bge.s	loc_12F5A
000137D0 6000                       		bra.s	Sonic_LookUp
000137D2                            ; ===========================================================================
000137D2                            
000137D2                            Sonic_Balance:
000137D2 4EB9 0000 0000             		jsr	ObjHitFloor
000137D8 0C41 000C                  		cmpi.w	#$C,d1
000137DC 6D00                       		blt.s	Sonic_LookUp
000137DE 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000137E4 6600                       		bne.s	loc_12F62
000137E6                            
000137E6                            loc_12F5A:
000137E6 08A8 0000 0022             		bclr	#0,$22(a0)
000137EC 6000                       		bra.s	loc_12F70
000137EE                            ; ===========================================================================
000137EE                            
000137EE                            loc_12F62:
000137EE 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000137F4 6600                       		bne.s	Sonic_LookUp
000137F6                            
000137F6                            loc_12F6A:
000137F6 08E8 0000 0022             		bset	#0,$22(a0)
000137FC                            
000137FC                            loc_12F70:
000137FC 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013802 6000                       		bra.s	Obj01_ResetScr
00013804                            ; ===========================================================================
00013804                            
00013804                            Sonic_LookUp:
00013804 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001380A 6700                       		beq.s	Sonic_Duck	; if not, branch
0001380C 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013812 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013818 6700                       		beq.s	loc_12FC2
0001381A 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001381E 6000                       		bra.s	loc_12FC2
00013820                            ; ===========================================================================
00013820                            
00013820                            Sonic_Duck:
00013820 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013826 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013828 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001382E 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013834 6700                       		beq.s	loc_12FC2
00013836 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001383A 6000                       		bra.s	loc_12FC2
0001383C                            ; ===========================================================================
0001383C                            
0001383C                            Obj01_ResetScr:
0001383C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013842 6700                       		beq.s	loc_12FC2	; if yes, branch
00013844 6400                       		bcc.s	loc_12FBE
00013846 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001384A                            
0001384A                            loc_12FBE:
0001384A 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001384E                            
0001384E                            loc_12FC2:
0001384E 1038 F602                  		move.b	($FFFFF602).w,d0
00013852 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013856 6600                       		bne.s	loc_12FEE	; if yes, branch
00013858 3028 0014                  		move.w	$14(a0),d0
0001385C 6700                       		beq.s	loc_12FEE
0001385E 6B00                       		bmi.s	loc_12FE2
00013860 9045                       		sub.w	d5,d0
00013862 6400                       		bcc.s	loc_12FDC
00013864 303C 0000                  		move.w	#0,d0
00013868                            
00013868                            loc_12FDC:
00013868 3140 0014                  		move.w	d0,$14(a0)
0001386C 6000                       		bra.s	loc_12FEE
0001386E                            ; ===========================================================================
0001386E                            
0001386E                            loc_12FE2:
0001386E D045                       		add.w	d5,d0
00013870 6400                       		bcc.s	loc_12FEA
00013872 303C 0000                  		move.w	#0,d0
00013876                            
00013876                            loc_12FEA:
00013876 3140 0014                  		move.w	d0,$14(a0)
0001387A                            
0001387A                            loc_12FEE:
0001387A 1028 0026                  		move.b	$26(a0),d0
0001387E 4EB9 0000 2B40             		jsr	(CalcSine).l
00013884 C3E8 0014                  		muls.w	$14(a0),d1
00013888 E081                       		asr.l	#8,d1
0001388A 3141 0010                  		move.w	d1,$10(a0)
0001388E C1E8 0014                  		muls.w	$14(a0),d0
00013892 E080                       		asr.l	#8,d0
00013894 3140 0012                  		move.w	d0,$12(a0)
00013898                            
00013898                            loc_1300C:
00013898 1028 0026                  		move.b	$26(a0),d0
0001389C 0600 0040                  		addi.b	#$40,d0
000138A0 6B00                       		bmi.s	locret_1307C
000138A2 123C 0040                  		move.b	#$40,d1
000138A6 4A68 0014                  		tst.w	$14(a0)
000138AA 6700                       		beq.s	locret_1307C
000138AC 6B00                       		bmi.s	loc_13024
000138AE 4441                       		neg.w	d1
000138B0                            
000138B0                            loc_13024:
000138B0 1028 0026                  		move.b	$26(a0),d0
000138B4 D001                       		add.b	d1,d0
000138B6 3F00                       		move.w	d0,-(sp)
000138B8 6100 0000                  		bsr.w	Sonic_WalkSpeed
000138BC 301F                       		move.w	(sp)+,d0
000138BE 4A41                       		tst.w	d1
000138C0 6A00                       		bpl.s	locret_1307C
000138C2 E141                       		asl.w	#8,d1
000138C4 0600 0020                  		addi.b	#$20,d0
000138C8 0200 00C0                  		andi.b	#$C0,d0
000138CC 6700                       		beq.s	loc_13078
000138CE 0C00 0040                  		cmpi.b	#$40,d0
000138D2 6700                       		beq.s	loc_13066
000138D4 0C00 0080                  		cmpi.b	#$80,d0
000138D8 6700                       		beq.s	loc_13060
000138DA D368 0010                  		add.w	d1,$10(a0)
000138DE 08E8 0005 0022             		bset	#5,$22(a0)
000138E4 317C 0000 0014             		move.w	#0,$14(a0)
000138EA 4E75                       		rts	
000138EC                            ; ===========================================================================
000138EC                            
000138EC                            loc_13060:
000138EC 9368 0012                  		sub.w	d1,$12(a0)
000138F0 4E75                       		rts	
000138F2                            ; ===========================================================================
000138F2                            
000138F2                            loc_13066:
000138F2 9368 0010                  		sub.w	d1,$10(a0)
000138F6 08E8 0005 0022             		bset	#5,$22(a0)
000138FC 317C 0000 0014             		move.w	#0,$14(a0)
00013902 4E75                       		rts	
00013904                            ; ===========================================================================
00013904                            
00013904                            loc_13078:
00013904 D368 0012                  		add.w	d1,$12(a0)
00013908                            
00013908                            locret_1307C:
00013908 4E75                       		rts	
0001390A                            ; End of function Sonic_Move
0001390A                            
0001390A                            
0001390A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001390A                            
0001390A                            
0001390A                            Sonic_MoveLeft:				; XREF: Sonic_Move
0001390A 3028 0014                  		move.w	$14(a0),d0
0001390E 6700                       		beq.s	loc_13086
00013910 6A00                       		bpl.s	loc_130B2
00013912                            
00013912                            loc_13086:
00013912 08E8 0000 0022             		bset	#0,$22(a0)
00013918 6600                       		bne.s	loc_1309A
0001391A 08A8 0005 0022             		bclr	#5,$22(a0)
00013920 117C 0001 001D             		move.b	#1,$1D(a0)
00013926                            
00013926                            loc_1309A:
00013926 9045                       		sub.w	d5,d0
00013928 3206                       		move.w	d6,d1
0001392A 4441                       		neg.w	d1
0001392C B041                       		cmp.w	d1,d0
0001392E 6E00                       		bgt.s	loc_130A6
00013930 3001                       		move.w	d1,d0
00013932                            
00013932                            loc_130A6:
00013932 3140 0014                  		move.w	d0,$14(a0)
00013936 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001393C 4E75                       		rts	
0001393E                            ; ===========================================================================
0001393E                            
0001393E                            loc_130B2:				; XREF: Sonic_MoveLeft
0001393E 9044                       		sub.w	d4,d0
00013940 6400                       		bcc.s	loc_130BA
00013942 303C FF80                  		move.w	#-$80,d0
00013946                            
00013946                            loc_130BA:
00013946 3140 0014                  		move.w	d0,$14(a0)
0001394A 1028 0026                  		move.b	$26(a0),d0
0001394E 0600 0020                  		addi.b	#$20,d0
00013952 0200 00C0                  		andi.b	#$C0,d0
00013956 6600                       		bne.s	locret_130E8
00013958 0C40 0400                  		cmpi.w	#$400,d0
0001395C 6D00                       		blt.s	locret_130E8
0001395E 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013964 08A8 0000 0022             		bclr	#0,$22(a0)
0001396A 303C 00A4                  		move.w	#$A4,d0
0001396E 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play stopping sound
00013974                            
00013974                            locret_130E8:
00013974 4E75                       		rts	
00013976                            ; End of function Sonic_MoveLeft
00013976                            
00013976                            
00013976                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013976                            
00013976                            
00013976                            Sonic_MoveRight:			; XREF: Sonic_Move
00013976 3028 0014                  		move.w	$14(a0),d0
0001397A 6B00                       		bmi.s	loc_13118
0001397C 08A8 0000 0022             		bclr	#0,$22(a0)
00013982 6700                       		beq.s	loc_13104
00013984 08A8 0005 0022             		bclr	#5,$22(a0)
0001398A 117C 0001 001D             		move.b	#1,$1D(a0)
00013990                            
00013990                            loc_13104:
00013990 D045                       		add.w	d5,d0
00013992 B046                       		cmp.w	d6,d0
00013994 6D00                       		blt.s	loc_1310C
00013996 3006                       		move.w	d6,d0
00013998                            
00013998                            loc_1310C:
00013998 3140 0014                  		move.w	d0,$14(a0)
0001399C 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000139A2 4E75                       		rts	
000139A4                            ; ===========================================================================
000139A4                            
000139A4                            loc_13118:				; XREF: Sonic_MoveRight
000139A4 D044                       		add.w	d4,d0
000139A6 6400                       		bcc.s	loc_13120
000139A8 303C 0080                  		move.w	#$80,d0
000139AC                            
000139AC                            loc_13120:
000139AC 3140 0014                  		move.w	d0,$14(a0)
000139B0 1028 0026                  		move.b	$26(a0),d0
000139B4 0600 0020                  		addi.b	#$20,d0
000139B8 0200 00C0                  		andi.b	#$C0,d0
000139BC 6600                       		bne.s	locret_1314E
000139BE 0C40 FC00                  		cmpi.w	#-$400,d0
000139C2 6E00                       		bgt.s	locret_1314E
000139C4 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000139CA 08E8 0000 0022             		bset	#0,$22(a0)
000139D0 303C 00A4                  		move.w	#$A4,d0
000139D4 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play stopping sound
000139DA                            
000139DA                            locret_1314E:
000139DA 4E75                       		rts	
000139DC                            ; End of function Sonic_MoveRight
000139DC                            
000139DC                            ; ---------------------------------------------------------------------------
000139DC                            ; Subroutine to	change Sonic's speed as he rolls
000139DC                            ; ---------------------------------------------------------------------------
000139DC                            
000139DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139DC                            
000139DC                            
000139DC                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000139DC 3C38 F760                  		move.w	($FFFFF760).w,d6
000139E0 E346                       		asl.w	#1,d6
000139E2 3A38 F762                  		move.w	($FFFFF762).w,d5
000139E6 E245                       		asr.w	#1,d5
000139E8 3838 F764                  		move.w	($FFFFF764).w,d4
000139EC E444                       		asr.w	#2,d4
000139EE 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000139F2 6600 0000                  		bne.w	loc_131CC
000139F6 4A68 003E                  		tst.w	$3E(a0)
000139FA 6600                       		bne.s	loc_13188
000139FC 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013A02 6700                       		beq.s	loc_1317C	; if not, branch
00013A04 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013A0A 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013A0C 6100 0000                  		bsr.w	Sonic_RollLeft
00013A10                            
00013A10                            loc_1317C:
00013A10 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013A16 6700                       		beq.s	loc_13188	; if not, branch
00013A18 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013A1E 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013A20 6100 0000                  		bsr.w	Sonic_RollLeft
00013A24 6000                       		bra.s	loc_13188
00013A26                            
00013A26                            SonicRS_RollRight:
00013A26 6100 0000                  		bsr.w	Sonic_RollRight
00013A2A                            
00013A2A                            loc_13188:
00013A2A 3028 0014                  		move.w	$14(a0),d0
00013A2E 6700                       		beq.s	loc_131AA
00013A30 6B00                       		bmi.s	loc_1319E
00013A32 9045                       		sub.w	d5,d0
00013A34 6400                       		bcc.s	loc_13198
00013A36 303C 0000                  		move.w	#0,d0
00013A3A                            
00013A3A                            loc_13198:
00013A3A 3140 0014                  		move.w	d0,$14(a0)
00013A3E 6000                       		bra.s	loc_131AA
00013A40                            ; ===========================================================================
00013A40                            
00013A40                            loc_1319E:				; XREF: Sonic_RollSpeed
00013A40 D045                       		add.w	d5,d0
00013A42 6400                       		bcc.s	loc_131A6
00013A44 303C 0000                  		move.w	#0,d0
00013A48                            
00013A48                            loc_131A6:
00013A48 3140 0014                  		move.w	d0,$14(a0)
00013A4C                            
00013A4C                            loc_131AA:
00013A4C 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013A50 6600                       		bne.s	loc_131CC	; if yes, branch
00013A52 08A8 0002 0022             		bclr	#2,$22(a0)
00013A58 117C 0013 0016             		move.b	#$13,$16(a0)
00013A5E 117C 0009 0017             		move.b	#9,$17(a0)
00013A64 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013A6A 5B68 000C                  		subq.w	#5,$C(a0)
00013A6E                            
00013A6E                            loc_131CC:
00013A6E 1028 0026                  		move.b	$26(a0),d0
00013A72 4EB9 0000 2B40             		jsr	(CalcSine).l
00013A78 C1E8 0014                  		muls.w	$14(a0),d0
00013A7C E080                       		asr.l	#8,d0
00013A7E 3140 0012                  		move.w	d0,$12(a0)
00013A82 C3E8 0014                  		muls.w	$14(a0),d1
00013A86 E081                       		asr.l	#8,d1
00013A88 0C41 1000                  		cmpi.w	#$1000,d1
00013A8C 6F00                       		ble.s	loc_131F0
00013A8E 323C 1000                  		move.w	#$1000,d1
00013A92                            
00013A92                            loc_131F0:
00013A92 0C41 F000                  		cmpi.w	#-$1000,d1
00013A96 6C00                       		bge.s	loc_131FA
00013A98 323C F000                  		move.w	#-$1000,d1
00013A9C                            
00013A9C                            loc_131FA:
00013A9C 3141 0010                  		move.w	d1,$10(a0)
00013AA0 6000 FDF6                  		bra.w	loc_1300C
00013AA4                            ; End of function Sonic_RollSpeed
00013AA4                            
00013AA4                            
00013AA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AA4                            
00013AA4                            
00013AA4                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013AA4 3028 0014                  		move.w	$14(a0),d0
00013AA8 6700                       		beq.s	loc_1320A
00013AAA 6A00                       		bpl.s	loc_13218
00013AAC                            
00013AAC                            loc_1320A:
00013AAC 08E8 0000 0022             		bset	#0,$22(a0)
00013AB2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013AB8 4E75                       		rts	
00013ABA                            ; ===========================================================================
00013ABA                            
00013ABA                            loc_13218:
00013ABA 9044                       		sub.w	d4,d0
00013ABC 6400                       		bcc.s	loc_13220
00013ABE 303C FF80                  		move.w	#-$80,d0
00013AC2                            
00013AC2                            loc_13220:
00013AC2 3140 0014                  		move.w	d0,$14(a0)
00013AC6 4E75                       		rts	
00013AC8                            ; End of function Sonic_RollLeft
00013AC8                            
00013AC8                            
00013AC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AC8                            
00013AC8                            
00013AC8                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013AC8 3028 0014                  		move.w	$14(a0),d0
00013ACC 6B00                       		bmi.s	loc_1323A
00013ACE 08A8 0000 0022             		bclr	#0,$22(a0)
00013AD4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013ADA 4E75                       		rts	
00013ADC                            ; ===========================================================================
00013ADC                            
00013ADC                            loc_1323A:
00013ADC D044                       		add.w	d4,d0
00013ADE 6400                       		bcc.s	loc_13242
00013AE0 303C 0080                  		move.w	#$80,d0
00013AE4                            
00013AE4                            loc_13242:
00013AE4 3140 0014                  		move.w	d0,$14(a0)
00013AE8 4E75                       		rts	
00013AEA                            ; End of function Sonic_RollRight
00013AEA                            
00013AEA                            Sonic_AirUnroll:
00013AEA                            		
00013AEA 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013AEE 6600                       		bne.s	@timer
00013AF0 1038 F605                  		move.b	($FFFFF605).w,d0
00013AF4 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013AF8 6700                       		beq.s	@end	; if not, branch
00013AFA 08A8 0002 0022             		bclr	#2,$22(a0)
00013B00 117C 0013 0016             		move.b	#$13,$16(a0)
00013B06 117C 0009 0017             		move.b	#9,$17(a0)
00013B0C 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013B12 303C 00A5                  		move.w	#$A5,d0
00013B16 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play fart sound
00013B1C 2028 0010                  		move.l	$10(a0),d0
00013B20 D080                       		add.l	d0,d0
00013B22 2140 0010                  		move.l	d0,$10(a0)
00013B26 5B68 000C                  		subq.w	#5,$C(a0)
00013B2A                            	@end:
00013B2A 4E75                       		rts
00013B2C                            	@timer:
00013B2C 5328 003A                  		subq.b	#1,$3A(a0)
00013B30 4E75                       		rts
00013B32                            
00013B32                            ; ---------------------------------------------------------------------------
00013B32                            ; Subroutine to	change Sonic's direction while jumping
00013B32                            ; ---------------------------------------------------------------------------
00013B32                            
00013B32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B32                            
00013B32                            
00013B32                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013B32 3C38 F760                  		move.w	($FFFFF760).w,d6
00013B36 3A38 F762                  		move.w	($FFFFF762).w,d5
00013B3A E345                       		asl.w	#1,d5
00013B3C 0828 0004 0022             		btst	#4,$22(a0)
00013B42 6600                       		bne.s	Obj01_ResetScr2
00013B44 3028 0010                  		move.w	$10(a0),d0
00013B48 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013B4E 6700                       		beq.s	loc_13278	; if not, branch
00013B50 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B56 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013B58 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013B5C 6E00                       		bgt.s	loc_13278
00013B5E 3001                       		move.w	d1,d0
00013B60                            
00013B60                            loc_13278:
00013B60 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013B66 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013B68 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B6E 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013B70 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013B74 6E00                       		bgt.s	Obj01_JumpMove
00013B76 3001                       		move.w	d1,d0
00013B78 6000                       		bra.s	Obj01_JumpMove
00013B7A                            
00013B7A                            SonicCJD_JumpLeft:
00013B7A 08E8 0000 0022             		bset	#0,$22(a0)
00013B80 9045                       		sub.w	d5,d0
00013B82 3206                       		move.w	d6,d1
00013B84 4441                       		neg.w	d1
00013B86 B041                       		cmp.w	d1,d0
00013B88                            		; bgt.s	loc_13278
00013B88                            		; move.w	d1,d0
00013B88 4E75                       		rts
00013B8A                            
00013B8A                            SonicCJD_JumpRight:
00013B8A 08A8 0000 0022             		bclr	#0,$22(a0)
00013B90 D045                       		add.w	d5,d0
00013B92 B046                       		cmp.w	d6,d0
00013B94 6D00                       		blt.s	Obj01_JumpMove
00013B96 3006                       		move.w	d6,d0
00013B98                            
00013B98                            Obj01_JumpMove:
00013B98 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013B9C                            
00013B9C                            Obj01_ResetScr2:
00013B9C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013BA2 6700                       		beq.s	loc_132A4	; if yes, branch
00013BA4 6400                       		bcc.s	loc_132A0
00013BA6 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013BAA                            
00013BAA                            loc_132A0:
00013BAA 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013BAE                            
00013BAE                            loc_132A4:
00013BAE 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013BB4 6500                       		bcs.s	locret_132D2	; if yes, branch
00013BB6 3028 0010                  		move.w	$10(a0),d0
00013BBA 3200                       		move.w	d0,d1
00013BBC EA41                       		asr.w	#5,d1
00013BBE 6700                       		beq.s	locret_132D2
00013BC0 6B00                       		bmi.s	loc_132C6
00013BC2 9041                       		sub.w	d1,d0
00013BC4 6400                       		bcc.s	loc_132C0
00013BC6 303C 0000                  		move.w	#0,d0
00013BCA                            
00013BCA                            loc_132C0:
00013BCA 3140 0010                  		move.w	d0,$10(a0)
00013BCE 4E75                       		rts	
00013BD0                            ; ===========================================================================
00013BD0                            
00013BD0                            loc_132C6:
00013BD0 9041                       		sub.w	d1,d0
00013BD2 6500                       		bcs.s	loc_132CE
00013BD4 303C 0000                  		move.w	#0,d0
00013BD8                            
00013BD8                            loc_132CE:
00013BD8 3140 0010                  		move.w	d0,$10(a0)
00013BDC                            
00013BDC                            locret_132D2:
00013BDC 4E75                       		rts	
00013BDE                            ; End of function Sonic_ChgJumpDir
00013BDE                            
00013BDE                            ; ===========================================================================
00013BDE                            ; ---------------------------------------------------------------------------
00013BDE                            ; Unused subroutine to squash Sonic
00013BDE                            ; ---------------------------------------------------------------------------
00013BDE 1028 0026                  		move.b	$26(a0),d0
00013BE2 0600 0020                  		addi.b	#$20,d0
00013BE6 0200 00C0                  		andi.b	#$C0,d0
00013BEA 6600                       		bne.s	locret_13302
00013BEC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013BF0 4A41                       		tst.w	d1
00013BF2 6A00                       		bpl.s	locret_13302
00013BF4 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013BFA 317C 0000 0010             		move.w	#0,$10(a0)
00013C00 317C 0000 0012             		move.w	#0,$12(a0)
00013C06 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013C0C                            
00013C0C                            locret_13302:
00013C0C 4E75                       		rts	
00013C0E                            ; ---------------------------------------------------------------------------
00013C0E                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013C0E                            ; ---------------------------------------------------------------------------
00013C0E                            
00013C0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C0E                            
00013C0E                            
00013C0E                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013C0E 2228 0008                  		move.l	8(a0),d1
00013C12 3028 0010                  		move.w	$10(a0),d0
00013C16 48C0                       		ext.l	d0
00013C18 E180                       		asl.l	#8,d0
00013C1A D280                       		add.l	d0,d1
00013C1C 4841                       		swap	d1
00013C1E 3038 F728                  		move.w	($FFFFF728).w,d0
00013C22 0640 0010                  		addi.w	#$10,d0
00013C26 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013C28 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013C2A 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013C2E 0640 0128                  		addi.w	#$128,d0
00013C32 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013C36 6600                       		bne.s	loc_13332
00013C38 0640 0040                  		addi.w	#$40,d0
00013C3C                            
00013C3C                            loc_13332:
00013C3C B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013C3E 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013C40                            
00013C40                            loc_13336:
00013C40 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013C44 0640 00E0                  		addi.w	#$E0,d0
00013C48 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013C4C 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013C4E 4E75                       		rts	
00013C50                            ; ===========================================================================
00013C50                            
00013C50                            Boundary_Bottom:
00013C50 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013C56                            		; bne.w	KillSonic	; if not, kill Sonic
00013C56 6600 0000                  		bne.w	CallKillSonic	; GMZ
00013C5A 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013C60                            		; bcs.w	KillSonic
00013C60 6500 0000                  		bcs.w	CallKillSonic	; GMZ
00013C64 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013C68 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013C6E 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013C74 4E75                       		rts	
00013C76                            
00013C76                            CallKillSonic:
00013C76 4EF9 0000 0000             		jmp	KillSonic	; GMZ
00013C7C                            ; ===========================================================================
00013C7C                            
00013C7C                            Boundary_Sides:
00013C7C 3140 0008                  		move.w	d0,8(a0)
00013C80 317C 0000 000A             		move.w	#0,$A(a0)
00013C86 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013C8C 317C 0000 0014             		move.w	#0,$14(a0)
00013C92 60AC                       		bra.s	loc_13336
00013C94                            ; End of function Sonic_LevelBound
00013C94                            
00013C94                            ; ---------------------------------------------------------------------------
00013C94                            ; Subroutine allowing Sonic to roll when he's moving
00013C94                            ; ---------------------------------------------------------------------------
00013C94                            
00013C94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C94                            
00013C94                            
00013C94                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013C94 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013C98 6600                       		bne.s	Obj01_NoRoll
00013C9A 3028 0014                  		move.w	$14(a0),d0
00013C9E 6A00                       		bpl.s	loc_13392
00013CA0 4440                       		neg.w	d0
00013CA2                            
00013CA2                            loc_13392:
00013CA2 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013CA6 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013CA8 1038 F602                  		move.b	($FFFFF602).w,d0
00013CAC 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013CB0 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013CB2 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013CB8 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013CBA                            
00013CBA                            Obj01_NoRoll:
00013CBA 4E75                       		rts	
00013CBC                            ; ===========================================================================
00013CBC                            
00013CBC                            Obj01_ChkRoll:
00013CBC 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013CC2 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013CC4 4E75                       		rts	
00013CC6                            ; ===========================================================================
00013CC6                            
00013CC6                            Obj01_DoRoll:
00013CC6 08E8 0002 0022             		bset	#2,$22(a0)
00013CCC 117C 000E 0016             		move.b	#$E,$16(a0)
00013CD2 117C 0007 0017             		move.b	#7,$17(a0)
00013CD8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013CDE 5A68 000C                  		addq.w	#5,$C(a0)
00013CE2 303C 00BE                  		move.w	#$BE,d0
00013CE6 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play rolling sound
00013CEC 4A68 0014                  		tst.w	$14(a0)
00013CF0 6600                       		bne.s	locret_133E8
00013CF2 317C 0200 0014             		move.w	#$200,$14(a0)
00013CF8                            
00013CF8                            locret_133E8:
00013CF8 4E75                       		rts	
00013CFA                            ; End of function Sonic_Roll
00013CFA                            
00013CFA                            ; ---------------------------------------------------------------------------
00013CFA                            ; Subroutine allowing Sonic to jump
00013CFA                            ; ---------------------------------------------------------------------------
00013CFA                            
00013CFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CFA                            
00013CFA                            
00013CFA                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013CFA 1038 F603                  		move.b	($FFFFF603).w,d0
00013CFE 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013D02 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013D06 7000                       		moveq	#0,d0
00013D08 1028 0026                  		move.b	$26(a0),d0
00013D0C 0600 0080                  		addi.b	#$80,d0
00013D10 6100 0000                  		bsr.w	sub_14D48
00013D14 0C41 0006                  		cmpi.w	#6,d1
00013D18 6D00 0000                  		blt.w	locret_1348E
00013D1C 343C 0680                  		move.w	#$680,d2
00013D20 0828 0006 0022             		btst	#6,$22(a0)
00013D26 6700                       		beq.s	loc_1341C
00013D28 343C 0380                  		move.w	#$380,d2
00013D2C                            
00013D2C                            loc_1341C:
00013D2C 7000                       		moveq	#0,d0
00013D2E 1028 0026                  		move.b	$26(a0),d0
00013D32 0400 0040                  		subi.b	#$40,d0
00013D36 4EB9 0000 2B40             		jsr	(CalcSine).l
00013D3C C3C2                       		muls.w	d2,d1
00013D3E E081                       		asr.l	#8,d1
00013D40 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013D44 C1C2                       		muls.w	d2,d0
00013D46 E080                       		asr.l	#8,d0
00013D48 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013D4C 08E8 0001 0022             		bset	#1,$22(a0)
00013D52 08A8 0005 0022             		bclr	#5,$22(a0)
00013D58 588F                       		addq.l	#4,sp
00013D5A 117C 0001 003C             		move.b	#1,$3C(a0)
00013D60 4228 0038                  		clr.b	$38(a0)
00013D64 303C 00A0                  		move.w	#$A0,d0
00013D68 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play jumping sound
00013D6E 117C 0013 0016             		move.b	#$13,$16(a0)
00013D74 117C 0009 0017             		move.b	#9,$17(a0)
00013D7A 0828 0002 0022             		btst	#2,$22(a0)
00013D80 6600                       		bne.s	loc_13490
00013D82 117C 000E 0016             		move.b	#$E,$16(a0)
00013D88 117C 0007 0017             		move.b	#7,$17(a0)
00013D8E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013D94 08E8 0002 0022             		bset	#2,$22(a0)
00013D9A 5A68 000C                  		addq.w	#5,$C(a0)
00013D9E 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013DA4                            
00013DA4                            locret_1348E:
00013DA4 4E75                       		rts	
00013DA6                            ; ===========================================================================
00013DA6                            
00013DA6                            loc_13490:
00013DA6 08E8 0004 0022             		bset	#4,$22(a0)
00013DAC 4E75                       		rts	
00013DAE                            ; End of function Sonic_Jump
00013DAE                            
00013DAE                            
00013DAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DAE                            
00013DAE                            
00013DAE                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013DAE 4A28 003C                  		tst.b	$3C(a0)
00013DB2 6700                       		beq.s	loc_134C4
00013DB4 323C FC00                  		move.w	#-$400,d1
00013DB8 0828 0006 0022             		btst	#6,$22(a0)
00013DBE 6700                       		beq.s	loc_134AE
00013DC0 323C FE00                  		move.w	#-$200,d1
00013DC4                            
00013DC4                            loc_134AE:
00013DC4 B268 0012                  		cmp.w	$12(a0),d1
00013DC8 6F00                       		ble.s	locret_134C2
00013DCA 1038 F602                  		move.b	($FFFFF602).w,d0
00013DCE 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013DD2 6600                       		bne.s	locret_134C2	; if yes, branch
00013DD4 3141 0012                  		move.w	d1,$12(a0)
00013DD8                            
00013DD8                            locret_134C2:
00013DD8 4E75                       		rts	
00013DDA                            ; ===========================================================================
00013DDA                            
00013DDA                            loc_134C4:
00013DDA 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013DE0 6C00                       		bge.s	locret_134D2
00013DE2 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013DE8                            
00013DE8                            locret_134D2:
00013DE8 4E75                       		rts	
00013DEA                            ; End of function Sonic_JumpHeight
00013DEA                            
00013DEA                            ; ---------------------------------------------------------------------------
00013DEA                            ; Subroutine to	slow Sonic walking up a	slope
00013DEA                            ; ---------------------------------------------------------------------------
00013DEA                            
00013DEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DEA                            
00013DEA                            
00013DEA                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013DEA 1028 0026                  		move.b	$26(a0),d0
00013DEE 0600 0060                  		addi.b	#$60,d0
00013DF2 0C00 00C0                  		cmpi.b	#$C0,d0
00013DF6 6400                       		bcc.s	locret_13508
00013DF8 1028 0026                  		move.b	$26(a0),d0
00013DFC 4EB9 0000 2B40             		jsr	(CalcSine).l
00013E02 C1FC 0020                  		muls.w	#$20,d0
00013E06 E080                       		asr.l	#8,d0
00013E08 4A68 0014                  		tst.w	$14(a0)
00013E0C 6700                       		beq.s	locret_13508
00013E0E 6B00                       		bmi.s	loc_13504
00013E10 4A40                       		tst.w	d0
00013E12 6700                       		beq.s	locret_13502
00013E14 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013E18                            
00013E18                            locret_13502:
00013E18 4E75                       		rts	
00013E1A                            ; ===========================================================================
00013E1A                            
00013E1A                            loc_13504:
00013E1A D168 0014                  		add.w	d0,$14(a0)
00013E1E                            
00013E1E                            locret_13508:
00013E1E 4E75                       		rts	
00013E20                            ; End of function Sonic_SlopeResist
00013E20                            
00013E20                            ; ---------------------------------------------------------------------------
00013E20                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013E20                            ; ---------------------------------------------------------------------------
00013E20                            
00013E20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E20                            
00013E20                            
00013E20                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013E20 1028 0026                  		move.b	$26(a0),d0
00013E24 0600 0060                  		addi.b	#$60,d0
00013E28 0C00 00C0                  		cmpi.b	#-$40,d0
00013E2C 6400                       		bcc.s	locret_13544
00013E2E 1028 0026                  		move.b	$26(a0),d0
00013E32 4EB9 0000 2B40             		jsr	(CalcSine).l
00013E38 C1FC 0050                  		muls.w	#$50,d0
00013E3C E080                       		asr.l	#8,d0
00013E3E 4A68 0014                  		tst.w	$14(a0)
00013E42 6B00                       		bmi.s	loc_1353A
00013E44 4A40                       		tst.w	d0
00013E46 6A00                       		bpl.s	loc_13534
00013E48 E480                       		asr.l	#2,d0
00013E4A                            
00013E4A                            loc_13534:
00013E4A D168 0014                  		add.w	d0,$14(a0)
00013E4E 4E75                       		rts	
00013E50                            ; ===========================================================================
00013E50                            
00013E50                            loc_1353A:
00013E50 4A40                       		tst.w	d0
00013E52 6B00                       		bmi.s	loc_13540
00013E54 E480                       		asr.l	#2,d0
00013E56                            
00013E56                            loc_13540:
00013E56 D168 0014                  		add.w	d0,$14(a0)
00013E5A                            
00013E5A                            locret_13544:
00013E5A 4E75                       		rts	
00013E5C                            ; End of function Sonic_RollRepel
00013E5C                            
00013E5C                            ; ---------------------------------------------------------------------------
00013E5C                            ; Subroutine to	push Sonic down	a slope
00013E5C                            ; ---------------------------------------------------------------------------
00013E5C                            
00013E5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E5C                            
00013E5C                            
00013E5C                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013E5C 4E71                       		nop	
00013E5E 4A28 0038                  		tst.b	$38(a0)
00013E62 6600                       		bne.s	locret_13580
00013E64 4A68 003E                  		tst.w	$3E(a0)
00013E68 6600                       		bne.s	loc_13582
00013E6A 1028 0026                  		move.b	$26(a0),d0
00013E6E 0600 0020                  		addi.b	#$20,d0
00013E72 0200 00C0                  		andi.b	#$C0,d0
00013E76 6700                       		beq.s	locret_13580
00013E78 3028 0014                  		move.w	$14(a0),d0
00013E7C 6A00                       		bpl.s	loc_1356A
00013E7E 4440                       		neg.w	d0
00013E80                            
00013E80                            loc_1356A:
00013E80 0C40 0280                  		cmpi.w	#$280,d0
00013E84 6400                       		bcc.s	locret_13580
00013E86 4268 0014                  		clr.w	$14(a0)
00013E8A 08E8 0001 0022             		bset	#1,$22(a0)
00013E90 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013E96                            
00013E96                            locret_13580:
00013E96 4E75                       		rts	
00013E98                            ; ===========================================================================
00013E98                            
00013E98                            loc_13582:
00013E98 5368 003E                  		subq.w	#1,$3E(a0)
00013E9C 4E75                       		rts	
00013E9E                            ; End of function Sonic_SlopeRepel
00013E9E                            
00013E9E                            ; ---------------------------------------------------------------------------
00013E9E                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013E9E                            ; ---------------------------------------------------------------------------
00013E9E                            
00013E9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E9E                            
00013E9E                            
00013E9E                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013E9E 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013EA2 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013EA4 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013EA6                            
00013EA6 5400                       		addq.b	#2,d0		; increase angle
00013EA8 6400                       		bcc.s	loc_13596
00013EAA 7000                       		moveq	#0,d0
00013EAC                            
00013EAC                            loc_13596:
00013EAC 6000                       		bra.s	loc_1359E
00013EAE                            ; ===========================================================================
00013EAE                            
00013EAE                            loc_13598:
00013EAE 5500                       		subq.b	#2,d0		; decrease angle
00013EB0 6400                       		bcc.s	loc_1359E
00013EB2 7000                       		moveq	#0,d0
00013EB4                            
00013EB4                            loc_1359E:
00013EB4 1140 0026                  		move.b	d0,$26(a0)
00013EB8                            
00013EB8                            locret_135A2:
00013EB8 4E75                       		rts	
00013EBA                            ; End of function Sonic_JumpAngle
00013EBA                            
00013EBA                            ; ---------------------------------------------------------------------------
00013EBA                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013EBA                            ; ---------------------------------------------------------------------------
00013EBA                            
00013EBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EBA                            
00013EBA                            
00013EBA                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013EBA 3228 0010                  		move.w	$10(a0),d1
00013EBE 3428 0012                  		move.w	$12(a0),d2
00013EC2 4EB9 0000 2E0E             		jsr	(CalcAngle).l
00013EC8 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013ECC 0400 0020                  		subi.b	#$20,d0
00013ED0 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013ED4 0200 00C0                  		andi.b	#$C0,d0
00013ED8 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013EDC 0C00 0040                  		cmpi.b	#$40,d0
00013EE0 6700 0000                  		beq.w	loc_13680
00013EE4 0C00 0080                  		cmpi.b	#$80,d0
00013EE8 6700 0000                  		beq.w	loc_136E2
00013EEC 0C00 00C0                  		cmpi.b	#-$40,d0
00013EF0 6700 0000                  		beq.w	loc_1373E
00013EF4 6100 0000                  		bsr.w	Sonic_HitWall
00013EF8 4A41                       		tst.w	d1
00013EFA 6A00                       		bpl.s	loc_135F0
00013EFC 9368 0008                  		sub.w	d1,8(a0)
00013F00 317C 0000 0010             		move.w	#0,$10(a0)
00013F06                            
00013F06                            loc_135F0:
00013F06 6100 0000                  		bsr.w	sub_14EB4
00013F0A 4A41                       		tst.w	d1
00013F0C 6A00                       		bpl.s	loc_13602
00013F0E D368 0008                  		add.w	d1,8(a0)
00013F12 317C 0000 0010             		move.w	#0,$10(a0)
00013F18                            
00013F18                            loc_13602:
00013F18 6100 0000                  		bsr.w	Sonic_HitFloor
00013F1C 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013F20 4A41                       		tst.w	d1
00013F22 6A00                       		bpl.s	locret_1367E
00013F24 1428 0012                  		move.b	$12(a0),d2
00013F28 5002                       		addq.b	#8,d2
00013F2A 4402                       		neg.b	d2
00013F2C B202                       		cmp.b	d2,d1
00013F2E 6C00                       		bge.s	loc_1361E
00013F30 B002                       		cmp.b	d2,d0
00013F32 6D00                       		blt.s	locret_1367E
00013F34                            
00013F34                            loc_1361E:
00013F34 D368 000C                  		add.w	d1,$C(a0)
00013F38 1143 0026                  		move.b	d3,$26(a0)
00013F3C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F40 117C 0000 001C             		move.b	#0,$1C(a0)
00013F46 1003                       		move.b	d3,d0
00013F48 0600 0020                  		addi.b	#$20,d0
00013F4C 0200 0040                  		andi.b	#$40,d0
00013F50 6600                       		bne.s	loc_1365C
00013F52 1003                       		move.b	d3,d0
00013F54 0600 0010                  		addi.b	#$10,d0
00013F58 0200 0020                  		andi.b	#$20,d0
00013F5C 6700                       		beq.s	loc_1364E
00013F5E E0E8 0012                  		asr	$12(a0)
00013F62 6000                       		bra.s	loc_13670
00013F64                            ; ===========================================================================
00013F64                            
00013F64                            loc_1364E:
00013F64 317C 0000 0012             		move.w	#0,$12(a0)
00013F6A 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013F70 4E75                       		rts	
00013F72                            ; ===========================================================================
00013F72                            
00013F72                            loc_1365C:
00013F72 317C 0000 0010             		move.w	#0,$10(a0)
00013F78 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013F7E 6F00                       		ble.s	loc_13670
00013F80 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013F86                            
00013F86                            loc_13670:
00013F86 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F8C 4A03                       		tst.b	d3
00013F8E 6A00                       		bpl.s	locret_1367E
00013F90 4468 0014                  		neg.w	$14(a0)
00013F94                            
00013F94                            locret_1367E:
00013F94 4E75                       		rts	
00013F96                            ; ===========================================================================
00013F96                            
00013F96                            loc_13680:
00013F96 6100 0000                  		bsr.w	Sonic_HitWall
00013F9A 4A41                       		tst.w	d1
00013F9C 6A00                       		bpl.s	loc_1369A
00013F9E 9368 0008                  		sub.w	d1,8(a0)
00013FA2 317C 0000 0010             		move.w	#0,$10(a0)
00013FA8 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013FAE 4E75                       		rts	
00013FB0                            ; ===========================================================================
00013FB0                            
00013FB0                            loc_1369A:
00013FB0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013FB4 4A41                       		tst.w	d1
00013FB6 6A00                       		bpl.s	loc_136B4
00013FB8 9368 000C                  		sub.w	d1,$C(a0)
00013FBC 4A68 0012                  		tst.w	$12(a0)
00013FC0 6A00                       		bpl.s	locret_136B2
00013FC2 317C 0000 0012             		move.w	#0,$12(a0)
00013FC8                            
00013FC8                            locret_136B2:
00013FC8 4E75                       		rts	
00013FCA                            ; ===========================================================================
00013FCA                            
00013FCA                            loc_136B4:
00013FCA 4A68 0012                  		tst.w	$12(a0)
00013FCE 6B00                       		bmi.s	locret_136E0
00013FD0 6100 0000                  		bsr.w	Sonic_HitFloor
00013FD4 4A41                       		tst.w	d1
00013FD6 6A00                       		bpl.s	locret_136E0
00013FD8 D368 000C                  		add.w	d1,$C(a0)
00013FDC 1143 0026                  		move.b	d3,$26(a0)
00013FE0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013FE4 117C 0000 001C             		move.b	#0,$1C(a0)
00013FEA 317C 0000 0012             		move.w	#0,$12(a0)
00013FF0 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013FF6                            
00013FF6                            locret_136E0:
00013FF6 4E75                       		rts	
00013FF8                            ; ===========================================================================
00013FF8                            
00013FF8                            loc_136E2:
00013FF8 6100 0000                  		bsr.w	Sonic_HitWall
00013FFC 4A41                       		tst.w	d1
00013FFE 6A00                       		bpl.s	loc_136F4
00014000 9368 0008                  		sub.w	d1,8(a0)
00014004 317C 0000 0010             		move.w	#0,$10(a0)
0001400A                            
0001400A                            loc_136F4:
0001400A 6100 0000                  		bsr.w	sub_14EB4
0001400E 4A41                       		tst.w	d1
00014010 6A00                       		bpl.s	loc_13706
00014012 D368 0008                  		add.w	d1,8(a0)
00014016 317C 0000 0010             		move.w	#0,$10(a0)
0001401C                            
0001401C                            loc_13706:
0001401C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014020 4A41                       		tst.w	d1
00014022 6A00                       		bpl.s	locret_1373C
00014024 9368 000C                  		sub.w	d1,$C(a0)
00014028 1003                       		move.b	d3,d0
0001402A 0600 0020                  		addi.b	#$20,d0
0001402E 0200 0040                  		andi.b	#$40,d0
00014032 6600                       		bne.s	loc_13726
00014034 317C 0000 0012             		move.w	#0,$12(a0)
0001403A 4E75                       		rts	
0001403C                            ; ===========================================================================
0001403C                            
0001403C                            loc_13726:
0001403C 1143 0026                  		move.b	d3,$26(a0)
00014040 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014044 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001404A 4A03                       		tst.b	d3
0001404C 6A00                       		bpl.s	locret_1373C
0001404E 4468 0014                  		neg.w	$14(a0)
00014052                            
00014052                            locret_1373C:
00014052 4E75                       		rts	
00014054                            ; ===========================================================================
00014054                            
00014054                            loc_1373E:
00014054 6100 0000                  		bsr.w	sub_14EB4
00014058 4A41                       		tst.w	d1
0001405A 6A00                       		bpl.s	loc_13758
0001405C D368 0008                  		add.w	d1,8(a0)
00014060 317C 0000 0010             		move.w	#0,$10(a0)
00014066 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001406C 4E75                       		rts	
0001406E                            ; ===========================================================================
0001406E                            
0001406E                            loc_13758:
0001406E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014072 4A41                       		tst.w	d1
00014074 6A00                       		bpl.s	loc_13772
00014076 9368 000C                  		sub.w	d1,$C(a0)
0001407A 4A68 0012                  		tst.w	$12(a0)
0001407E 6A00                       		bpl.s	locret_13770
00014080 317C 0000 0012             		move.w	#0,$12(a0)
00014086                            
00014086                            locret_13770:
00014086 4E75                       		rts	
00014088                            ; ===========================================================================
00014088                            
00014088                            loc_13772:
00014088 4A68 0012                  		tst.w	$12(a0)
0001408C 6B00                       		bmi.s	locret_1379E
0001408E 6100 0000                  		bsr.w	Sonic_HitFloor
00014092 4A41                       		tst.w	d1
00014094 6A00                       		bpl.s	locret_1379E
00014096 D368 000C                  		add.w	d1,$C(a0)
0001409A 1143 0026                  		move.b	d3,$26(a0)
0001409E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000140A2 117C 0000 001C             		move.b	#0,$1C(a0)
000140A8 317C 0000 0012             		move.w	#0,$12(a0)
000140AE 3168 0010 0014             		move.w	$10(a0),$14(a0)
000140B4                            
000140B4                            locret_1379E:
000140B4 4E75                       		rts	
000140B6                            ; End of function Sonic_Floor
000140B6                            
000140B6                            ; ---------------------------------------------------------------------------
000140B6                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000140B6                            ; ---------------------------------------------------------------------------
000140B6                            
000140B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140B6                            
000140B6                            
000140B6                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000140B6 0828 0004 0022             		btst	#4,$22(a0)
000140BC 6700                       		beq.s	loc_137AE
000140BE 4E71                       		nop	
000140C0 4E71                       		nop	
000140C2 4E71                       		nop	
000140C4                            
000140C4                            loc_137AE:
000140C4 08A8 0005 0022             		bclr	#5,$22(a0)
000140CA 08A8 0001 0022             		bclr	#1,$22(a0)
000140D0 08A8 0004 0022             		bclr	#4,$22(a0)
000140D6 0828 0002 0022             		btst	#2,$22(a0)
000140DC 6700                       		beq.s	loc_137E4
000140DE 08A8 0002 0022             		bclr	#2,$22(a0)
000140E4 117C 0013 0016             		move.b	#$13,$16(a0)
000140EA 117C 0009 0017             		move.b	#9,$17(a0)
000140F0 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000140F6 5B68 000C                  		subq.w	#5,$C(a0)
000140FA                            
000140FA                            loc_137E4:
000140FA 117C 0000 003C             		move.b	#0,$3C(a0)
00014100 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00014106 4E75                       		rts	
00014108                            ; End of function Sonic_ResetOnFloor
00014108                            
00014108                            ; ===========================================================================
00014108                            ; ---------------------------------------------------------------------------
00014108                            ; Sonic	when he	gets hurt
00014108                            ; ---------------------------------------------------------------------------
00014108                            
00014108                            Obj01_Hurt:				; XREF: Obj01_Index
00014108 4EBA 9D38                  		jsr	SpeedToPos
0001410C 0668 0030 0012             		addi.w	#$30,$12(a0)
00014112 0828 0006 0022             		btst	#6,$22(a0)
00014118 6700                       		beq.s	loc_1380C
0001411A 0468 0020 0012             		subi.w	#$20,$12(a0)
00014120                            
00014120                            loc_1380C:
00014120 6100 0000                  		bsr.w	Sonic_HurtStop
00014124 6100 FAE8                  		bsr.w	Sonic_LevelBound
00014128 6100 F4AE                  		bsr.w	Sonic_RecordPos
0001412C 6100 0000                  		bsr.w	Sonic_Animate
00014130 6100 0000                  		bsr.w	LoadSonicDynPLC
00014134 4EFA 9D32                  		jmp	DisplaySprite
00014138                            
00014138                            ; ---------------------------------------------------------------------------
00014138                            ; Subroutine to	stop Sonic falling after he's been hurt
00014138                            ; ---------------------------------------------------------------------------
00014138                            
00014138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014138                            
00014138                            
00014138                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014138 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001413C 0640 00E0                  		addi.w	#$E0,d0
00014140 B068 000C                  		cmp.w	$C(a0),d0
00014144 6500 0000                  		bcs.w	KillSonic
00014148 6100 FD70                  		bsr.w	Sonic_Floor
0001414C 0828 0001 0022             		btst	#1,$22(a0)
00014152 6600                       		bne.s	locret_13860
00014154 7000                       		moveq	#0,d0
00014156 3140 0012                  		move.w	d0,$12(a0)
0001415A 3140 0010                  		move.w	d0,$10(a0)
0001415E 3140 0014                  		move.w	d0,$14(a0)
00014162 117C 0000 001C             		move.b	#0,$1C(a0)
00014168 5528 0024                  		subq.b	#2,$24(a0)
0001416C 317C 0078 0030             		move.w	#$78,$30(a0)
00014172                            
00014172                            locret_13860:
00014172 4E75                       		rts	
00014174                            ; End of function Sonic_HurtStop
00014174                            
00014174                            ; ===========================================================================
00014174                            ; ---------------------------------------------------------------------------
00014174                            ; Sonic	when he	dies
00014174                            ; ---------------------------------------------------------------------------
00014174                            
00014174                            Obj01_Death:				; XREF: Obj01_Index
00014174 6100 0000                  		bsr.w	GameOver
00014178 4EBA 9C56                  		jsr	ObjectFall
0001417C 6100 F45A                  		bsr.w	Sonic_RecordPos
00014180 6100 0000                  		bsr.w	Sonic_Animate
00014184 6100 0000                  		bsr.w	LoadSonicDynPLC
00014188 4EFA 9CDE                  		jmp	DisplaySprite
0001418C                            
0001418C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001418C                            
0001418C                            
0001418C                            GameOver:				; XREF: Obj01_Death
0001418C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014190 0640 0100                  		addi.w	#$100,d0
00014194 B068 000C                  		cmp.w	$C(a0),d0
00014198 6400 0000                  		bcc.w	locret_13900
0001419C 317C FFC8 0012             		move.w	#-$38,$12(a0)
000141A2 5428 0024                  		addq.b	#2,$24(a0)
000141A6 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000141AA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000141AE 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000141B2 6600                       		bne.s	loc_138D4
000141B4 317C 0000 003A             		move.w	#0,$3A(a0)
000141BA 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000141C0 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000141C6 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000141CC 4238 FE1A                  		clr.b	($FFFFFE1A).w
000141D0                            
000141D0                            loc_138C2:
000141D0 303C 008F                  		move.w	#$8F,d0
000141D4 4EB9 0000 1398             		jsr	(PlaySound).l	; play game over music
000141DA 7003                       		moveq	#3,d0
000141DC 4EF9 0000 1582             		jmp	(LoadPLC).l	; load game over patterns
000141E2                            ; ===========================================================================
000141E2                            
000141E2                            loc_138D4:
000141E2 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000141E8 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000141EC 6700                       		beq.s	locret_13900	; if not, branch
000141EE 317C 0000 003A             		move.w	#0,$3A(a0)
000141F4 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000141FA 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014200 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014206 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0001420C 60C2                       		bra.s	loc_138C2
0001420E                            ; ===========================================================================
0001420E                            
0001420E                            locret_13900:
0001420E 4E75                       		rts	
00014210                            ; End of function GameOver
00014210                            
00014210                            ; ===========================================================================
00014210                            ; ---------------------------------------------------------------------------
00014210                            ; Sonic	when the level is restarted
00014210                            ; ---------------------------------------------------------------------------
00014210                            
00014210                            Obj01_ResetLevel:			; XREF: Obj01_Index
00014210 4A68 003A                  		tst.w	$3A(a0)
00014214 6700                       		beq.s	locret_13914
00014216 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0001421A 6600                       		bne.s	locret_13914
0001421C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014222                            
00014222                            locret_13914:
00014222 4E75                       		rts	
00014224                            
00014224                            ; ---------------------------------------------------------------------------
00014224                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014224                            ; ---------------------------------------------------------------------------
00014224                            
00014224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014224                            
00014224                            
00014224                            Sonic_Loops:				; XREF: Obj01_Control
00014224                            ;		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014224                            ;		beq.s	loc_13926	; if yes, branch
00014224                            ;		tst.b	($FFFFFE10).w	; is level GHZ ?
00014224                            ;		bne.w	locret_139C2	; if not, branch
00014224                            ;		this is commented out, please do more plane messups id love that
00014224                            ;loc_13926:
00014224 3028 000C                  		move.w	$C(a0),d0
00014228 E248                       		lsr.w	#1,d0
0001422A 0240 0380                  		andi.w	#$380,d0
0001422E 1228 0008                  		move.b	8(a0),d1
00014232 0241 007F                  		andi.w	#$7F,d1
00014236 D041                       		add.w	d1,d0
00014238 43F8 A400                  		lea	($FFFFA400).w,a1
0001423C 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014240 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014244 6700 FA76                  		beq.w	Obj01_ChkRoll
00014248 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
0001424C 6700 FA6E                  		beq.w	Obj01_ChkRoll
00014250 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014254 6700                       		beq.s	loc_13976
00014256 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
0001425A 6700                       		beq.s	loc_13966
0001425C 08A8 0006 0001             		bclr	#6,1(a0)
00014262 4E75                       		rts	
00014264                            ; ===========================================================================
00014264                            
00014264                            loc_13966:
00014264 0828 0001 0022             		btst	#1,$22(a0)
0001426A 6700                       		beq.s	loc_13976
0001426C 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014272 4E75                       		rts	
00014274                            ; ===========================================================================
00014274                            
00014274                            loc_13976:
00014274 3428 0008                  		move.w	8(a0),d2
00014278 0C02 002C                  		cmpi.b	#$2C,d2
0001427C 6400                       		bcc.s	loc_13988
0001427E 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014284 4E75                       		rts	
00014286                            ; ===========================================================================
00014286                            
00014286                            loc_13988:
00014286 0C02 00E0                  		cmpi.b	#-$20,d2
0001428A 6500                       		bcs.s	loc_13996
0001428C 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014292 4E75                       		rts	
00014294                            ; ===========================================================================
00014294                            
00014294                            loc_13996:
00014294 0828 0006 0001             		btst	#6,1(a0)
0001429A 6600                       		bne.s	loc_139B2
0001429C 1228 0026                  		move.b	$26(a0),d1
000142A0 6700                       		beq.s	locret_139C2
000142A2 0C01 0080                  		cmpi.b	#-$80,d1
000142A6 6200                       		bhi.s	locret_139C2
000142A8 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000142AE 4E75                       		rts	
000142B0                            ; ===========================================================================
000142B0                            
000142B0                            loc_139B2:
000142B0 1228 0026                  		move.b	$26(a0),d1
000142B4 0C01 0080                  		cmpi.b	#-$80,d1
000142B8 6300                       		bls.s	locret_139C2
000142BA 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000142C0                            
000142C0                            locret_139C2:
000142C0 4E75                       		rts	
000142C2                            ; End of function Sonic_Loops
000142C2                            
000142C2                            ; ---------------------------------------------------------------------------
000142C2                            ; Subroutine to	animate	Sonic's sprites
000142C2                            ; ---------------------------------------------------------------------------
000142C2                            
000142C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142C2                            
000142C2                            Player_Anim:
000142C2 0000 0000                  	dc.l	SonicAniData
000142C6 0000 0000                  	dc.l	SonicAniData ; gronic
000142CA 0000 0000                  	dc.l	SonicAniData ; anakama
000142CE 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
000142D2                            
000142D2                            	; Insert more animation data for other characters here
000142D2                            	
000142D2                            Sonic_Animate:				; XREF: Obj01_Control; et al
000142D2 7000                       			moveq	#0,d0
000142D4 1038 FFE8                  		move.b	(v_character),d0
000142D8 E548                       		lsl.w	#2,d0
000142DA 43FA FFE6                  		lea 	Player_Anim(pc),a1
000142DE                            		
000142DE 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
000142E2                            	
000142E2 7000                       		moveq	#0,d0
000142E4 1028 001C                  		move.b	$1C(a0),d0
000142E8 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000142EC 6700                       		beq.s	SAnim_Do	; if not, branch
000142EE 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000142F2 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000142F8 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
000142FE                            
000142FE                            SAnim_Do:
000142FE D040                       		add.w	d0,d0
00014300 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00014304 1011                       		move.b	(a1),d0
00014306 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014308 1228 0022                  		move.b	$22(a0),d1
0001430C 0201 0001                  		andi.b	#1,d1
00014310 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014316 8328 0001                  		or.b	d1,1(a0)
0001431A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001431E 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00014320 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00014324                            
00014324                            SAnim_Do2:
00014324 7200                       		moveq	#0,d1
00014326 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0001432A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001432E 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014330                            
00014330                            SAnim_Next:
00014330 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014334 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00014338                            
00014338                            SAnim_Delay:
00014338 4E75                       		rts	
0001433A                            ; ===========================================================================
0001433A                            
0001433A                            SAnim_End_FF:
0001433A 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001433C 6600                       		bne.s	SAnim_End_FE	; if not, branch
0001433E 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014344 1029 0001                  		move.b	1(a1),d0	; read sprite number
00014348 60E6                       		bra.s	SAnim_Next
0001434A                            ; ===========================================================================
0001434A                            
0001434A                            SAnim_End_FE:
0001434A 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001434C 6600                       		bne.s	SAnim_End_FD	; if not, branch
0001434E 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014352 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014356 9200                       		sub.b	d0,d1
00014358 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0001435C 60D2                       		bra.s	SAnim_Next
0001435E                            ; ===========================================================================
0001435E                            
0001435E                            SAnim_End_FD:
0001435E 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014360 6600                       		bne.s	SAnim_End	; if not, branch
00014362 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014368                            
00014368                            SAnim_End:
00014368 4E75                       		rts	
0001436A                            ; ===========================================================================
0001436A                            
0001436A                            SAnim_WalkRun:				; XREF: SAnim_Do
0001436A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001436E 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014370 5200                       		addq.b	#1,d0		; is animation walking/running?
00014372 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014376 7200                       		moveq	#0,d1
00014378 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001437C 1428 0022                  		move.b	$22(a0),d2
00014380 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014384 6600                       		bne.s	loc_13A70	; if yes, branch
00014386 4600                       		not.b	d0		; reverse angle
00014388                            
00014388                            loc_13A70:
00014388 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001438C 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
0001438E 7203                       		moveq	#3,d1
00014390                            
00014390                            loc_13A78:
00014390 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014396 B302                       		eor.b	d1,d2
00014398 8528 0001                  		or.b	d2,1(a0)
0001439C 0828 0005 0022             		btst	#5,$22(a0)
000143A2 6600 0000                  		bne.w	SAnim_Push
000143A6 E808                       		lsr.b	#4,d0		; divide angle by $10
000143A8 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000143AC 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000143B0 6A00                       		bpl.s	loc_13A9C
000143B2 4442                       		neg.w	d2
000143B4                            
000143B4                            loc_13A9C:
000143B4 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000143BA 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000143BE 6400                       		bcc.s	loc_13AB4	; if yes, branch
000143C0 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000143C6 1200                       		move.b	d0,d1
000143C8 E209                       		lsr.b	#1,d1
000143CA D001                       		add.b	d1,d0
000143CC                            
000143CC                            loc_13AB4:
000143CC D000                       		add.b	d0,d0
000143CE 1600                       		move.b	d0,d3
000143D0 4442                       		neg.w	d2
000143D2 0642 0800                  		addi.w	#$800,d2
000143D6 6A00                       		bpl.s	loc_13AC2
000143D8 7400                       		moveq	#0,d2
000143DA                            
000143DA                            loc_13AC2:
000143DA E04A                       		lsr.w	#8,d2
000143DC 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000143E0 6100 FF42                  		bsr.w	SAnim_Do2
000143E4 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000143E8 4E75                       		rts	
000143EA                            ; ===========================================================================
000143EA                            
000143EA                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000143EA 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000143EC 6600                       		bne.s	SAnim_Push	; if not, branch
000143EE 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000143F2 6A00                       		bpl.s	loc_13ADE
000143F4 4442                       		neg.w	d2
000143F6                            
000143F6                            loc_13ADE:
000143F6 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000143FC 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00014400 6400                       		bcc.s	loc_13AF0	; if yes, branch
00014402 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014408                            
00014408                            loc_13AF0:
00014408 4442                       		neg.w	d2
0001440A 0642 0400                  		addi.w	#$400,d2
0001440E 6A00                       		bpl.s	loc_13AFA
00014410 7400                       		moveq	#0,d2
00014412                            
00014412                            loc_13AFA:
00014412 E04A                       		lsr.w	#8,d2
00014414 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014418 1228 0022                  		move.b	$22(a0),d1
0001441C 0201 0001                  		andi.b	#1,d1
00014420 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014426 8328 0001                  		or.b	d1,1(a0)
0001442A 6000 FEF8                  		bra.w	SAnim_Do2
0001442E                            ; ===========================================================================
0001442E                            
0001442E                            SAnim_Push:				; XREF: SAnim_RollJump
0001442E 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014432 6B00                       		bmi.s	loc_13B1E
00014434 4442                       		neg.w	d2
00014436                            
00014436                            loc_13B1E:
00014436 0642 0800                  		addi.w	#$800,d2
0001443A 6A00                       		bpl.s	loc_13B26
0001443C 7400                       		moveq	#0,d2
0001443E                            
0001443E                            loc_13B26:
0001443E EC4A                       		lsr.w	#6,d2
00014440 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014444 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001444A 1228 0022                  		move.b	$22(a0),d1
0001444E 0201 0001                  		andi.b	#1,d1
00014452 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014458 8328 0001                  		or.b	d1,1(a0)
0001445C 6000 FEC6                  		bra.w	SAnim_Do2
00014460                            ; End of function Sonic_Animate
00014460                            
00014460                            ; ===========================================================================
00014460                            SonicAniData:
00014460                            	include "_anim\Sonic.asm"
00014460                            ; ---------------------------------------------------------------------------
00014460                            ; Animation script - Sonic
00014460                            ; ---------------------------------------------------------------------------
00014460 0000                       		dc.w SonAni_Walk-SonicAniData
00014462 0000                       		dc.w SonAni_Run-SonicAniData
00014464 0000                       		dc.w SonAni_Roll-SonicAniData
00014466 0000                       		dc.w SonAni_Roll2-SonicAniData
00014468 0000                       		dc.w SonAni_Push-SonicAniData
0001446A 0000                       		dc.w SonAni_Wait-SonicAniData
0001446C 0000                       		dc.w SonAni_Balance-SonicAniData
0001446E 0000                       		dc.w SonAni_LookUp-SonicAniData
00014470 0000                       		dc.w SonAni_Duck-SonicAniData
00014472 0000                       		dc.w SonAni_Warp1-SonicAniData
00014474 0000                       		dc.w SonAni_Warp2-SonicAniData
00014476 0000                       		dc.w SonAni_Warp3-SonicAniData
00014478 0000                       		dc.w SonAni_Warp4-SonicAniData
0001447A 0000                       		dc.w SonAni_Stop-SonicAniData
0001447C 0000                       		dc.w SonAni_Float1-SonicAniData
0001447E 0000                       		dc.w SonAni_Float2-SonicAniData
00014480 0000                       		dc.w SonAni_Spring-SonicAniData
00014482 0000                       		dc.w SonAni_LZHang-SonicAniData
00014484 0000                       		dc.w SonAni_Leap1-SonicAniData
00014486 0000                       		dc.w SonAni_Leap2-SonicAniData
00014488 0000                       		dc.w SonAni_Surf-SonicAniData
0001448A 0000                       		dc.w SonAni_Bubble-SonicAniData
0001448C 0000                       		dc.w SonAni_Death1-SonicAniData
0001448E 0000                       		dc.w SonAni_Drown-SonicAniData
00014490 0000                       		dc.w SonAni_Death2-SonicAniData
00014492 0000                       		dc.w SonAni_Shrink-SonicAniData
00014494 0000                       		dc.w SonAni_Hurt-SonicAniData
00014496 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014498 0000                       		dc.w SonAni_Blank-SonicAniData
0001449A 0000                       		dc.w SonAni_Float3-SonicAniData
0001449C 0000                       		dc.w SonAni_Float4-SonicAniData
0001449E FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
000144A8 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
000144B0 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
000144B8 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
000144C0 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000144C8 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000144DE 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000144E2 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000144E6 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000144EA 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000144EE 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000144F2 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000144F6 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000144FA 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000144FE 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00014502 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
0001450A 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
0001450E 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014512 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014518 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
0001451E 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014522 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
0001452A 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
0001452E 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014532 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014536 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014540 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
00014544 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00014548 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001454C 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014554 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00014558                            		even
00014558                            		even
00014558                            
00014558                            ; ---------------------------------------------------------------------------
00014558                            ; Sonic	pattern	loading	subroutine
00014558                            ; ---------------------------------------------------------------------------
00014558                            
00014558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014558                            Player_DPLC:
00014558 0000 0000                  	dc.l	SonicDynPLC
0001455C 0000 0000                  	dc.l	SonicDynPLC ; gronic
00014560 0000 0000                  	dc.l	SonicDynPLC ; anakama
00014564 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
00014568                            	; add pointers for player dplc here
00014568                            Player_Art:
00014568 0000 0000                  	dc.l	Art_Sonic
0001456C 0000 0000                  	dc.l	Art_Sonic ; gronic
00014570 0000 0000                  	dc.l	Art_Sonic ; anakama
00014574 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
00014578                            	; add pointers for player art here
00014578                            
00014578                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014578 7000                       		moveq	#0,d0
0001457A 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001457E B038 F766                  		cmp.b	($FFFFF766).w,d0
00014582 6700                       		beq.s	locret_13C96
00014584 11C0 F766                  		move.b	d0,($FFFFF766).w
00014588                            		
00014588 323C 0000                  		move.w	#0,d1
0001458C 1238 FFE8                  		move.b	(v_character),d1
00014590 E549                       		lsl.w	#2,d1
00014592 45FA FFC4                  		lea 	Player_DPLC(pc),a2
00014596                            
00014596 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
0001459A                            		
0001459A D040                       		add.w	d0,d0
0001459C D4F2 0000                  		adda.w	(a2,d0.w),a2
000145A0 7200                       		moveq	#0,d1
000145A2 121A                       		move.b	(a2)+,d1	; read "number of entries" value
000145A4 5301                       		subq.b	#1,d1
000145A6 6B00                       		bmi.s	locret_13C96
000145A8 47F8 C800                  		lea	($FFFFC800).w,a3
000145AC 11FC 0001 F767             		move.b	#1,($FFFFF767).w
000145B2                            
000145B2                            SPLC_ReadEntry:
000145B2 303C 0000                  		move.w	#0,d0
000145B6 1038 FFE8                  		move.b	(v_character),d0
000145BA E548                       		lsl.w	#2,d0
000145BC 43FA FFAA                  		lea 	Player_Art(pc),a1
000145C0                            
000145C0 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
000145C4                            
000145C4 7400                       		moveq	#0,d2
000145C6 141A                       		move.b	(a2)+,d2
000145C8 3002                       		move.w	d2,d0
000145CA E808                       		lsr.b	#4,d0
000145CC E14A                       		lsl.w	#8,d2
000145CE 141A                       		move.b	(a2)+,d2
000145D0 EB4A                       		lsl.w	#5,d2
000145D2 D3C2                       		adda.l	d2,a1
000145D4                            
000145D4                            SPLC_LoadTile:
000145D4 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
000145D8 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
000145DC 47EB 0020                  		lea	$20(a3),a3	; next tile
000145E0 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
000145E4                            
000145E4 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
000145E8                            
000145E8                            locret_13C96:
000145E8 4E75                       		rts	
000145EA                            ; End of function LoadSonicDynPLC
000145EA                            
000145EA                            ; ===========================================================================
000145EA                            ; ---------------------------------------------------------------------------
000145EA                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
000145EA                            ; ---------------------------------------------------------------------------
000145EA                            
000145EA                            Obj0A:					; XREF: Obj_Index
000145EA 7000                       		moveq	#0,d0
000145EC 1028 0024                  		move.b	$24(a0),d0
000145F0 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000145F4 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
000145F8                            ; ===========================================================================
000145F8 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
000145FC 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014600 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014604 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014608 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
0001460A                            ; ===========================================================================
0001460A                            
0001460A                            Obj0A_Main:				; XREF: Obj0A_Index
0001460A 5428 0024                  		addq.b	#2,$24(a0)
0001460E 217C 0001 31FC 0004        		move.l	#Map_obj64,4(a0)
00014616 317C 8348 0002             		move.w	#$8348,2(a0)
0001461C 117C 0084 0001             		move.b	#$84,1(a0)
00014622 117C 0010 0019             		move.b	#$10,$19(a0)
00014628 117C 0001 0018             		move.b	#1,$18(a0)
0001462E 1028 0028                  		move.b	$28(a0),d0
00014632 6A00                       		bpl.s	loc_13D00
00014634 5028 0024                  		addq.b	#8,$24(a0)
00014638 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014640 317C 0440 0002             		move.w	#$440,2(a0)
00014646 0240 007F                  		andi.w	#$7F,d0
0001464A 1140 0033                  		move.b	d0,$33(a0)
0001464E 6000 0000                  		bra.w	Obj0A_Countdown
00014652                            ; ===========================================================================
00014652                            
00014652                            loc_13D00:
00014652 1140 001C                  		move.b	d0,$1C(a0)
00014656 3168 0008 0030             		move.w	8(a0),$30(a0)
0001465C 317C FF78 0012             		move.w	#-$88,$12(a0)
00014662                            
00014662                            Obj0A_Animate:				; XREF: Obj0A_Index
00014662 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014668 4EB9 0000 AEB6             		jsr	AnimateSprite
0001466E                            
0001466E                            Obj0A_ChkWater:				; XREF: Obj0A_Index
0001466E 3038 F646                  		move.w	($FFFFF646).w,d0
00014672 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014676 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014678 117C 0006 0024             		move.b	#6,$24(a0)
0001467E 5E28 001C                  		addq.b	#7,$1C(a0)
00014682 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014688 6700                       		beq.s	Obj0A_Display
0001468A 6000                       		bra.s	Obj0A_Display
0001468C                            ; ===========================================================================
0001468C                            
0001468C                            Obj0A_Wobble:
0001468C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014690 6700                       		beq.s	loc_13D44
00014692 5868 0030                  		addq.w	#4,$30(a0)
00014696                            
00014696                            loc_13D44:
00014696 1028 0026                  		move.b	$26(a0),d0
0001469A 5228 0026                  		addq.b	#1,$26(a0)
0001469E 0240 007F                  		andi.w	#$7F,d0
000146A2 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000146A8 1031 0000                  		move.b	(a1,d0.w),d0
000146AC 4880                       		ext.w	d0
000146AE D068 0030                  		add.w	$30(a0),d0
000146B2 3140 0008                  		move.w	d0,8(a0)
000146B6 6100                       		bsr.s	Obj0A_ShowNumber
000146B8 4EBA 9788                  		jsr	SpeedToPos
000146BC 4A28 0001                  		tst.b	1(a0)
000146C0 6A00                       		bpl.s	Obj0A_Delete
000146C2 4EFA 97A4                  		jmp	DisplaySprite
000146C6                            ; ===========================================================================
000146C6                            
000146C6                            Obj0A_Delete:
000146C6 4EFA 97DC                  		jmp	DeleteObject
000146CA                            ; ===========================================================================
000146CA                            
000146CA                            Obj0A_Display:				; XREF: Obj0A_Index
000146CA 6100                       		bsr.s	Obj0A_ShowNumber
000146CC 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000146D2 4EB9 0000 AEB6             		jsr	AnimateSprite
000146D8 4EFA 978E                  		jmp	DisplaySprite
000146DC                            ; ===========================================================================
000146DC                            
000146DC                            Obj0A_Delete2:				; XREF: Obj0A_Index
000146DC 4EFA 97C6                  		jmp	DeleteObject
000146E0                            ; ===========================================================================
000146E0                            
000146E0                            Obj0A_AirLeft:				; XREF: Obj0A_Index
000146E0 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
000146E6 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
000146E8 5368 0038                  		subq.w	#1,$38(a0)
000146EC 6600                       		bne.s	Obj0A_Display2
000146EE 117C 000E 0024             		move.b	#$E,$24(a0)
000146F4 5E28 001C                  		addq.b	#7,$1C(a0)
000146F8 60D0                       		bra.s	Obj0A_Display
000146FA                            ; ===========================================================================
000146FA                            
000146FA                            Obj0A_Display2:
000146FA 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014700 4EB9 0000 AEB6             		jsr	AnimateSprite
00014706 4A28 0001                  		tst.b	1(a0)
0001470A 6A00                       		bpl.s	Obj0A_Delete3
0001470C 4EFA 975A                  		jmp	DisplaySprite
00014710                            ; ===========================================================================
00014710                            
00014710                            Obj0A_Delete3:
00014710 4EFA 9792                  		jmp	DeleteObject
00014714                            ; ===========================================================================
00014714                            
00014714                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014714 4A68 0038                  		tst.w	$38(a0)
00014718 6700                       		beq.s	locret_13E1A
0001471A 5368 0038                  		subq.w	#1,$38(a0)
0001471E 6600                       		bne.s	locret_13E1A
00014720 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014726 6400                       		bcc.s	locret_13E1A
00014728 317C 000F 0038             		move.w	#$F,$38(a0)
0001472E 4268 0012                  		clr.w	$12(a0)
00014732 117C 0080 0001             		move.b	#$80,1(a0)
00014738 3028 0008                  		move.w	8(a0),d0
0001473C 9078 F700                  		sub.w	($FFFFF700).w,d0
00014740 0640 0080                  		addi.w	#$80,d0
00014744 3140 0008                  		move.w	d0,8(a0)
00014748 3028 000C                  		move.w	$C(a0),d0
0001474C 9078 F704                  		sub.w	($FFFFF704).w,d0
00014750 0640 0080                  		addi.w	#$80,d0
00014754 3140 000A                  		move.w	d0,$A(a0)
00014758 117C 000C 0024             		move.b	#$C,$24(a0)
0001475E                            
0001475E                            locret_13E1A:
0001475E 4E75                       		rts	
00014760                            ; ===========================================================================
00014760                            Obj0A_WobbleData:
00014760 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014771 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014782 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014793 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000147A3 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000147B0 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000147BD FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000147CA FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
000147D7 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
000147E0                            ; ===========================================================================
000147E0                            
000147E0                            Obj0A_Countdown:			; XREF: Obj0A_Index
000147E0 4A68 002C                  		tst.w	$2C(a0)
000147E4 6600 0000                  		bne.w	loc_13F86
000147E8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000147EE 6400 0000                  		bcc.w	locret_1408C
000147F2 0838 0006 D022             		btst	#6,($FFFFD022).w
000147F8 6700 0000                  		beq.w	locret_1408C
000147FC 5368 0038                  		subq.w	#1,$38(a0)
00014800 6A00 0000                  		bpl.w	loc_13FAC
00014804 317C 003B 0038             		move.w	#59,$38(a0)
0001480A 317C 0001 0036             		move.w	#1,$36(a0)
00014810 4EB9 0000 2B1A             		jsr	(RandomNumber).l
00014816 0240 0001                  		andi.w	#1,d0
0001481A 1140 0034                  		move.b	d0,$34(a0)
0001481E 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014822 0C40 0019                  		cmpi.w	#$19,d0
00014826 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014828 0C40 0014                  		cmpi.w	#$14,d0
0001482C 6700                       		beq.s	Obj0A_WarnSound
0001482E 0C40 000F                  		cmpi.w	#$F,d0
00014832 6700                       		beq.s	Obj0A_WarnSound
00014834 0C40 000C                  		cmpi.w	#$C,d0
00014838 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
0001483A 6600                       		bne.s	loc_13F02
0001483C 303C 0092                  		move.w	#$92,d0
00014840 4EB9 0000 1398             		jsr	(PlaySound).l	; play countdown music
00014846                            
00014846                            loc_13F02:
00014846 5328 0032                  		subq.b	#1,$32(a0)
0001484A 6A00                       		bpl.s	Obj0A_ReduceAir
0001484C 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014852 08E8 0007 0036             		bset	#7,$36(a0)
00014858 6000                       		bra.s	Obj0A_ReduceAir
0001485A                            ; ===========================================================================
0001485A                            
0001485A                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
0001485A 303C 00C2                  		move.w	#$C2,d0
0001485E 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014864                            
00014864                            Obj0A_ReduceAir:
00014864 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014868 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
0001486C 6100 0000                  		bsr.w	ResumeMusic
00014870 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014876 303C 00B2                  		move.w	#$B2,d0
0001487A 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play drowning sound
00014880 117C 000A 0034             		move.b	#$A,$34(a0)
00014886 317C 0001 0036             		move.w	#1,$36(a0)
0001488C 317C 0078 002C             		move.w	#$78,$2C(a0)
00014892 2F08                       		move.l	a0,-(sp)
00014894 41F8 D000                  		lea	($FFFFD000).w,a0
00014898 6100 F81C                  		bsr.w	Sonic_ResetOnFloor
0001489C 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000148A2 08E8 0001 0022             		bset	#1,$22(a0)
000148A8 08E8 0007 0002             		bset	#7,2(a0)
000148AE 317C 0000 0012             		move.w	#0,$12(a0)
000148B4 317C 0000 0010             		move.w	#0,$10(a0)
000148BA 317C 0000 0014             		move.w	#0,$14(a0)
000148C0 11FC 0001 F744             		move.b	#1,($FFFFF744).w
000148C6 205F                       		movea.l	(sp)+,a0
000148C8 4E75                       		rts	
000148CA                            ; ===========================================================================
000148CA                            
000148CA                            loc_13F86:
000148CA 5368 002C                  		subq.w	#1,$2C(a0)
000148CE 6600                       		bne.s	loc_13F94
000148D0 11FC 0006 D024             		move.b	#6,($FFFFD024).w
000148D6 4E75                       		rts	
000148D8                            ; ===========================================================================
000148D8                            
000148D8                            loc_13F94:
000148D8 2F08                       		move.l	a0,-(sp)
000148DA 41F8 D000                  		lea	($FFFFD000).w,a0
000148DE 4EBA 9562                  		jsr	SpeedToPos
000148E2 0668 0010 0012             		addi.w	#$10,$12(a0)
000148E8 205F                       		movea.l	(sp)+,a0
000148EA 6000                       		bra.s	loc_13FAC
000148EC                            ; ===========================================================================
000148EC                            
000148EC                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
000148EC 6000                       		bra.s	Obj0A_MakeItem
000148EE                            ; ===========================================================================
000148EE                            
000148EE                            loc_13FAC:
000148EE 4A68 0036                  		tst.w	$36(a0)
000148F2 6700 0000                  		beq.w	locret_1408C
000148F6 5368 003A                  		subq.w	#1,$3A(a0)
000148FA 6A00 0000                  		bpl.w	locret_1408C
000148FE                            
000148FE                            Obj0A_MakeItem:
000148FE 4EB9 0000 2B1A             		jsr	(RandomNumber).l
00014904 0240 000F                  		andi.w	#$F,d0
00014908 3140 003A                  		move.w	d0,$3A(a0)
0001490C 4EBA 99E0                  		jsr	SingleObjLoad
00014910 6600 0000                  		bne.w	locret_1408C
00014914 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014918 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
0001491E 7006                       		moveq	#6,d0
00014920 0838 0000 D022             		btst	#0,($FFFFD022).w
00014926 6700                       		beq.s	loc_13FF2
00014928 4440                       		neg.w	d0
0001492A 137C 0040 0026             		move.b	#$40,$26(a1)
00014930                            
00014930                            loc_13FF2:
00014930 D169 0008                  		add.w	d0,8(a1)
00014934 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
0001493A 137C 0006 0028             		move.b	#6,$28(a1)
00014940 4A68 002C                  		tst.w	$2C(a0)
00014944 6700 0000                  		beq.w	loc_1403E
00014948 0268 0007 003A             		andi.w	#7,$3A(a0)
0001494E 0668 0000 003A             		addi.w	#0,$3A(a0)
00014954 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014958 0440 000C                  		subi.w	#$C,d0
0001495C 3340 000C                  		move.w	d0,$C(a1)
00014960 4EB9 0000 2B1A             		jsr	(RandomNumber).l
00014966 1340 0026                  		move.b	d0,$26(a1)
0001496A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001496E 0200 0003                  		andi.b	#3,d0
00014972 6600                       		bne.s	loc_14082
00014974 137C 000E 0028             		move.b	#$E,$28(a1)
0001497A 6000                       		bra.s	loc_14082
0001497C                            ; ===========================================================================
0001497C                            
0001497C                            loc_1403E:
0001497C 0828 0007 0036             		btst	#7,$36(a0)
00014982 6700                       		beq.s	loc_14082
00014984 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014988 E24A                       		lsr.w	#1,d2
0001498A 4EB9 0000 2B1A             		jsr	(RandomNumber).l
00014990 0240 0003                  		andi.w	#3,d0
00014994 6600                       		bne.s	loc_1406A
00014996 08E8 0006 0036             		bset	#6,$36(a0)
0001499C 6600                       		bne.s	loc_14082
0001499E 1342 0028                  		move.b	d2,$28(a1)
000149A2 337C 001C 0038             		move.w	#$1C,$38(a1)
000149A8                            
000149A8                            loc_1406A:
000149A8 4A28 0034                  		tst.b	$34(a0)
000149AC 6600                       		bne.s	loc_14082
000149AE 08E8 0006 0036             		bset	#6,$36(a0)
000149B4 6600                       		bne.s	loc_14082
000149B6 1342 0028                  		move.b	d2,$28(a1)
000149BA 337C 001C 0038             		move.w	#$1C,$38(a1)
000149C0                            
000149C0                            loc_14082:
000149C0 5328 0034                  		subq.b	#1,$34(a0)
000149C4 6A00                       		bpl.s	locret_1408C
000149C6 4268 0036                  		clr.w	$36(a0)
000149CA                            
000149CA                            locret_1408C:
000149CA 4E75                       		rts	
000149CC                            
000149CC                            ; ---------------------------------------------------------------------------
000149CC                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000149CC                            ; ---------------------------------------------------------------------------
000149CC                            
000149CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000149CC                            
000149CC                            
000149CC                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
000149CC 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000149D2                             
000149D2                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
000149D2                             
000149D2 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
000149D6                             
000149D6 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000149DC 6600                       		bne.s	Air_GetBgm2	; if not, branch
000149DE 43F9 0000 3B9A             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000149E4 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000149E6                             
000149E6                            Air_GetBgm2:
000149E6 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000149EC 6600                       		bne.s	Air_GetBgm3	; if not, branch
000149EE 43F9 0000 3BA2             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000149F4 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000149F6                             
000149F6                            Air_GetBgm3:
000149F6 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
000149FC 6600                       		bne.s	Air_GetBgm4	; if not, branch
000149FE 43F9 0000 3BAA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014A04 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014A06                             
00014A06                            Air_GetBgm4:
00014A06 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014A0C 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014A0E 43F9 0000 3BB2             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014A14                             
00014A14                            Air_PlayMusic:
00014A14 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014A18                             
00014A18                            loc_140A6:
00014A18 4EB9 0000 1398             		jsr	(PlaySound).l
00014A1E                             
00014A1E                            ; NineKode ends here
00014A1E                            
00014A1E                            loc_140AC:
00014A1E 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014A24 4238 D372                  		clr.b	($FFFFD372).w
00014A28 4E75                       		rts	
00014A2A                            ; End of function ResumeMusic
00014A2A                            
00014A2A                            ; ===========================================================================
00014A2A                            Ani_obj0A:
00014A2A                            	include "_anim\obj0A.asm"
00014A2A                            ; ---------------------------------------------------------------------------
00014A2A                            ; Animation script - countdown numbers and bubbles (LZ)
00014A2A                            ; ---------------------------------------------------------------------------
00014A2A 0000                       		dc.w byte_140D6-Ani_obj0A
00014A2C 0000                       		dc.w byte_140E0-Ani_obj0A
00014A2E 0000                       		dc.w byte_140EA-Ani_obj0A
00014A30 0000                       		dc.w byte_140F4-Ani_obj0A
00014A32 0000                       		dc.w byte_140FE-Ani_obj0A
00014A34 0000                       		dc.w byte_14108-Ani_obj0A
00014A36 0000                       		dc.w byte_14112-Ani_obj0A
00014A38 0000                       		dc.w byte_14118-Ani_obj0A
00014A3A 0000                       		dc.w byte_14120-Ani_obj0A
00014A3C 0000                       		dc.w byte_14128-Ani_obj0A
00014A3E 0000                       		dc.w byte_14130-Ani_obj0A
00014A40 0000                       		dc.w byte_14138-Ani_obj0A
00014A42 0000                       		dc.w byte_14140-Ani_obj0A
00014A44 0000                       		dc.w byte_14148-Ani_obj0A
00014A46 0000                       		dc.w byte_1414A-Ani_obj0A
00014A48 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014A52 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014A5C 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014A66 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014A70 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014A7A 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014A84 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014A8A 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014A92 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014A9A 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014AA2 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014AAA 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014AB2 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014ABA 0EFC                       byte_14148:	dc.b $E, $FC
00014ABC 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014AC2                            		even
00014AC2                            		even
00014AC2                            
00014AC2                            ; ---------------------------------------------------------------------------
00014AC2                            ; Sprite mappings - drowning countdown numbers (LZ)
00014AC2                            ; ---------------------------------------------------------------------------
00014AC2                            Map_obj0A:
00014AC2                            	include "_maps\obj0A.asm"
00014AC2                            ; ---------------------------------------------------------------------------
00014AC2                            ; Sprite mappings - drowning countdown numbers (LZ)
00014AC2                            ; ---------------------------------------------------------------------------
00014AC2 0000                       		dc.w byte_14152-Map_obj0A
00014AC4 01                         byte_14152:	dc.b 1
00014AC5 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014ACA                            		even
00014ACA                            		even
00014ACA                            
00014ACA                            ; ===========================================================================
00014ACA                            ; ---------------------------------------------------------------------------
00014ACA                            ; Object 38 - shield and invincibility stars
00014ACA                            ; ---------------------------------------------------------------------------
00014ACA                            
00014ACA                            Obj38:					; XREF: Obj_Index
00014ACA 7000                       		moveq	#0,d0
00014ACC 1028 0024                  		move.b	$24(a0),d0
00014AD0 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014AD4 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014AD8                            ; ===========================================================================
00014AD8 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014ADA 0000                       		dc.w Obj38_Shield-Obj38_Index
00014ADC 0000                       		dc.w Obj38_Stars-Obj38_Index
00014ADE                            ; ===========================================================================
00014ADE                            
00014ADE                            Obj38_Main:				; XREF: Obj38_Index
00014ADE 5428 0024                  		addq.b	#2,$24(a0)
00014AE2 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014AEA 117C 0004 0001             		move.b	#4,1(a0)
00014AF0 117C 0001 0018             		move.b	#1,$18(a0)
00014AF6 117C 0010 0019             		move.b	#$10,$19(a0)
00014AFC 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014B00 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014B02 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014B08 4E75                       		rts	
00014B0A                            ; ===========================================================================
00014B0A                            
00014B0A                            Obj38_DoStars:
00014B0A 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014B0E 317C 055C 0002             		move.w	#$55C,2(a0)
00014B14 4E75                       		rts	
00014B16                            ; ===========================================================================
00014B16                            
00014B16                            Obj38_Shield:				; XREF: Obj38_Index
00014B16 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014B1A 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014B1C 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014B20 6700                       		beq.s	Obj38_Delete	; if not, branch
00014B22 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014B28 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014B2E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014B34 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014B3A 4EB9 0000 AEB6             		jsr	AnimateSprite
00014B40 4EFA 9326                  		jmp	DisplaySprite
00014B44                            ; ===========================================================================
00014B44                            
00014B44                            Obj38_RmvShield:
00014B44 4E75                       		rts	
00014B46                            ; ===========================================================================
00014B46                            
00014B46                            Obj38_Delete:
00014B46 4EFA 935C                  		jmp	DeleteObject
00014B4A                            ; ===========================================================================
00014B4A                            
00014B4A                            Obj38_Stars:				; XREF: Obj38_Index
00014B4A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014B4E 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014B50 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014B54 1228 001C                  		move.b	$1C(a0),d1
00014B58 5301                       		subq.b	#1,d1
00014B5A 6000                       		bra.s	Obj38_StarTrail
00014B5C                            ; ===========================================================================
00014B5C E909                       		lsl.b	#4,d1
00014B5E 5801                       		addq.b	#4,d1
00014B60 9001                       		sub.b	d1,d0
00014B62 1228 0030                  		move.b	$30(a0),d1
00014B66 9001                       		sub.b	d1,d0
00014B68 5801                       		addq.b	#4,d1
00014B6A 0201 000F                  		andi.b	#$F,d1
00014B6E 1141 0030                  		move.b	d1,$30(a0)
00014B72 6000                       		bra.s	Obj38_StarTrail2a
00014B74                            ; ===========================================================================
00014B74                            
00014B74                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014B74 E709                       		lsl.b	#3,d1
00014B76 1401                       		move.b	d1,d2
00014B78 D201                       		add.b	d1,d1
00014B7A D202                       		add.b	d2,d1
00014B7C 5801                       		addq.b	#4,d1
00014B7E 9001                       		sub.b	d1,d0
00014B80 1228 0030                  		move.b	$30(a0),d1
00014B84 9001                       		sub.b	d1,d0
00014B86 5801                       		addq.b	#4,d1
00014B88 0C01 0018                  		cmpi.b	#$18,d1
00014B8C 6500                       		bcs.s	Obj38_StarTrail2
00014B8E 7200                       		moveq	#0,d1
00014B90                            
00014B90                            Obj38_StarTrail2:
00014B90 1141 0030                  		move.b	d1,$30(a0)
00014B94                            
00014B94                            Obj38_StarTrail2a:
00014B94 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014B98 43F1 0000                  		lea	(a1,d0.w),a1
00014B9C 3159 0008                  		move.w	(a1)+,8(a0)
00014BA0 3159 000C                  		move.w	(a1)+,$C(a0)
00014BA4 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014BAA 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014BB0 4EB9 0000 AEB6             		jsr	AnimateSprite
00014BB6 4EFA 92B0                  		jmp	DisplaySprite
00014BBA                            ; ===========================================================================
00014BBA                            
00014BBA                            Obj38_Delete2:				; XREF: Obj38_Stars
00014BBA 4EFA 92E8                  		jmp	DeleteObject
00014BBE                            ; ===========================================================================
00014BBE                            ; ---------------------------------------------------------------------------
00014BBE                            ; Object 4A - special stage entry from beta
00014BBE                            ; ---------------------------------------------------------------------------
00014BBE                            
00014BBE                            Obj4A:					; XREF: Obj_Index
00014BBE 7000                       		moveq	#0,d0
00014BC0 1028 0024                  		move.b	$24(a0),d0
00014BC4 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014BC8 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014BCC                            ; ===========================================================================
00014BCC 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014BCE 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014BD0 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014BD2                            ; ===========================================================================
00014BD2                            
00014BD2                            Obj4A_Main:				; XREF: Obj4A_Index
00014BD2 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014BD6 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014BD8 4E75                       		rts	
00014BDA                            ; ===========================================================================
00014BDA                            
00014BDA                            Obj4A_Main2:
00014BDA 5428 0024                  		addq.b	#2,$24(a0)
00014BDE 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014BE6 117C 0004 0001             		move.b	#4,1(a0)
00014BEC 117C 0001 0018             		move.b	#1,$18(a0)
00014BF2 117C 0038 0019             		move.b	#$38,$19(a0)
00014BF8 317C 0541 0002             		move.w	#$541,2(a0)
00014BFE 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014C04                            
00014C04                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014C04 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014C0A 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014C10 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014C16 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014C1C 4EB9 0000 AEB6             		jsr	AnimateSprite
00014C22 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014C28 6600                       		bne.s	Obj4A_Display
00014C2A 4A38 D000                  		tst.b	($FFFFD000).w
00014C2E 6700                       		beq.s	Obj4A_Display
00014C30 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014C36 303C 00A8                  		move.w	#$A8,d0
00014C3A 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014C40                            
00014C40                            Obj4A_Display:
00014C40 4EFA 9226                  		jmp	DisplaySprite
00014C44                            ; ===========================================================================
00014C44                            
00014C44                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014C44 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014C48 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014C4A 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014C50 4EFA 9252                  		jmp	DeleteObject
00014C54                            ; ===========================================================================
00014C54                            
00014C54                            Obj4A_Wait:
00014C54 4E75                       		rts	
00014C56                            ; ===========================================================================
00014C56                            ; ---------------------------------------------------------------------------
00014C56                            ; Object 08 - water splash (LZ)
00014C56                            ; ---------------------------------------------------------------------------
00014C56                            
00014C56                            Obj08:					; XREF: Obj_Index
00014C56 7000                       		moveq	#0,d0
00014C58 1028 0024                  		move.b	$24(a0),d0
00014C5C 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014C60 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014C64                            ; ===========================================================================
00014C64 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014C66 0000                       		dc.w Obj08_Display-Obj08_Index
00014C68 0000                       		dc.w Obj08_Delete-Obj08_Index
00014C6A                            ; ===========================================================================
00014C6A                            
00014C6A                            Obj08_Main:				; XREF: Obj08_Index
00014C6A 5428 0024                  		addq.b	#2,$24(a0)
00014C6E 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014C76 0028 0004 0001             		ori.b	#4,1(a0)
00014C7C 117C 0001 0018             		move.b	#1,$18(a0)
00014C82 117C 0010 0019             		move.b	#$10,$19(a0)
00014C88 317C 4259 0002             		move.w	#$4259,2(a0)
00014C8E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014C94                            
00014C94                            Obj08_Display:				; XREF: Obj08_Index
00014C94 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014C9A 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014CA0 4EB9 0000 AEB6             		jsr	AnimateSprite
00014CA6 4EFA 91C0                  		jmp	DisplaySprite
00014CAA                            ; ===========================================================================
00014CAA                            
00014CAA                            Obj08_Delete:				; XREF: Obj08_Index
00014CAA 4EFA 91F8                  		jmp	DeleteObject	; delete when animation	is complete
00014CAE                            ; ===========================================================================
00014CAE                            Ani_obj38:
00014CAE                            	include "_anim\obj38.asm"
00014CAE                            ; ---------------------------------------------------------------------------
00014CAE                            ; Animation script - shield and invincibility stars
00014CAE                            ; ---------------------------------------------------------------------------
00014CAE 0000                       		dc.w byte_14356-Ani_obj38
00014CB0 0000                       		dc.w byte_1435E-Ani_obj38
00014CB2 0000                       		dc.w byte_14364-Ani_obj38
00014CB4 0000                       		dc.w byte_1437E-Ani_obj38
00014CB6 0000                       		dc.w byte_14398-Ani_obj38
00014CB8 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014CC0 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014CC6 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014CD7 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014CE0 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014CF1 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014CFA 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014D0B 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014D14                            		even
00014D14                            		even
00014D14                            
00014D14                            ; ---------------------------------------------------------------------------
00014D14                            ; Sprite mappings - shield and invincibility stars
00014D14                            ; ---------------------------------------------------------------------------
00014D14                            Map_obj38:
00014D14                            	include "_maps\obj38.asm"
00014D14                            ; ---------------------------------------------------------------------------
00014D14                            ; Sprite mappings - shield and invincibility stars
00014D14                            ; ---------------------------------------------------------------------------
00014D14 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014D18 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014D1C 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014D20 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014D24 04                         byte_143C2:	dc.b 4
00014D25 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014D2A E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014D2F 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014D34 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014D39 04                         byte_143D7:	dc.b 4
00014D3A E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014D3F E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014D44 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014D49 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014D4E 04                         byte_143EC:	dc.b 4
00014D4F E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014D54 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014D59 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014D5E 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014D63 04                         byte_14401:	dc.b 4
00014D64 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014D69 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014D6E 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014D73 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014D78 04                         byte_14416:	dc.b 4
00014D79 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014D7E E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014D83 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014D88 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014D8D 04                         byte_1442B:	dc.b 4
00014D8E E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014D93 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014D98 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014D9D 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014DA2 04                         byte_14440:	dc.b 4
00014DA3 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014DA8 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014DAD 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014DB2 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014DB8 00                         		even
00014DB8 00                         		even
00014DB8                            
00014DB8                            Ani_obj4A:
00014DB8                            	include "_anim\obj4A.asm"
00014DB8                            ; ---------------------------------------------------------------------------
00014DB8                            ; Animation script - special stage entry effect from beta
00014DB8                            ; ---------------------------------------------------------------------------
00014DB8 0000                       		dc.w byte_14458-Ani_obj4A
00014DBA 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014DCE                            		even
00014DCE                            		even
00014DCE                            
00014DCE                            ; ---------------------------------------------------------------------------
00014DCE                            ; Sprite mappings - special stage entry	from beta
00014DCE                            ; ---------------------------------------------------------------------------
00014DCE                            Map_obj4A:
00014DCE                            	include "_maps\obj4A.asm"
00014DCE                            ; ---------------------------------------------------------------------------
00014DCE                            ; Sprite mappings - special stage entry	from beta
00014DCE                            ; ---------------------------------------------------------------------------
00014DCE 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014DD2 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014DD6 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014DDA 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014DDE 03                         byte_1447C:	dc.b 3
00014DDF F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014DE4 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014DE9 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014DEE 03                         byte_1448C:	dc.b 3
00014DEF F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014DF4 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014DF9 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014DFE 05                         byte_1449C:	dc.b 5
00014DFF E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014E04 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014E09 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014E0E 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014E13 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014E18 09                         byte_144B6:	dc.b 9
00014E19 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014E1E F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014E23 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014E28 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014E2D F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014E32 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014E37 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014E3C 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014E41 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014E46 12                         byte_144E4:	dc.b $12
00014E47 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014E4C F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014E51 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014E56 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014E5B 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014E60 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014E65 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014E6A F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014E6F 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014E74 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014E79 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014E7E 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014E83 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014E88 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014E8D 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014E92 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014E97 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014E9C F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014EA1 11                         byte_1453F:	dc.b $11
00014EA2 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014EA7 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014EAC 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014EB1 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014EB6 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014EBB F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014EC0 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014EC5 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014ECA 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014ECF 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014ED4 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014ED9 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014EDE F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014EE3 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014EE8 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014EED 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014EF2 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014EF7 09                         byte_14595:	dc.b 9
00014EF8 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014EFD 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014F02 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014F07 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014F0C FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014F11 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014F16 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014F1B 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014F20 04                         		dc.b 4
00014F21 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014F26                            		even
00014F26                            		even
00014F26                            
00014F26                            Ani_obj08:
00014F26                            	include "_anim\obj08.asm"
00014F26                            ; ---------------------------------------------------------------------------
00014F26                            ; Animation script - water splash (LZ)
00014F26                            ; ---------------------------------------------------------------------------
00014F26 0000                       		dc.w byte_145C6-Ani_obj08
00014F28 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014F2E                            		even
00014F2E                            		even
00014F2E                            
00014F2E                            ; ---------------------------------------------------------------------------
00014F2E                            ; Sprite mappings - water splash (LZ)
00014F2E                            ; ---------------------------------------------------------------------------
00014F2E                            Map_obj08:
00014F2E                            	include "_maps\obj08.asm"
00014F2E                            ; ---------------------------------------------------------------------------
00014F2E                            ; Sprite mappings - water splash (LZ)
00014F2E                            ; ---------------------------------------------------------------------------
00014F2E 0000                       		dc.w byte_145D2-Map_obj08
00014F30 0000                       		dc.w byte_145DD-Map_obj08
00014F32 0000                       		dc.w byte_145E8-Map_obj08
00014F34 02                         byte_145D2:	dc.b 2
00014F35 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014F3A FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014F3F 02                         byte_145DD:	dc.b 2
00014F40 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014F45 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014F4A 01                         byte_145E8:	dc.b 1
00014F4B E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014F50                            		even
00014F50                            		even
00014F50                            
00014F50                            ; ---------------------------------------------------------------------------
00014F50                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014F50                            ; ---------------------------------------------------------------------------
00014F50                            
00014F50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F50                            
00014F50                            
00014F50                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014F50 0828 0003 0022             		btst	#3,$22(a0)
00014F56 6700                       		beq.s	loc_14602
00014F58 7000                       		moveq	#0,d0
00014F5A 11C0 F768                  		move.b	d0,($FFFFF768).w
00014F5E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014F62 4E75                       		rts	
00014F64                            ; ===========================================================================
00014F64                            
00014F64                            loc_14602:
00014F64 7003                       		moveq	#3,d0
00014F66 11C0 F768                  		move.b	d0,($FFFFF768).w
00014F6A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014F6E 1028 0026                  		move.b	$26(a0),d0
00014F72 0600 0020                  		addi.b	#$20,d0
00014F76 6A00                       		bpl.s	loc_14624
00014F78 1028 0026                  		move.b	$26(a0),d0
00014F7C 6A00                       		bpl.s	loc_1461E
00014F7E 5300                       		subq.b	#1,d0
00014F80                            
00014F80                            loc_1461E:
00014F80 0600 0020                  		addi.b	#$20,d0
00014F84 6000                       		bra.s	loc_14630
00014F86                            ; ===========================================================================
00014F86                            
00014F86                            loc_14624:
00014F86 1028 0026                  		move.b	$26(a0),d0
00014F8A 6A00                       		bpl.s	loc_1462C
00014F8C 5200                       		addq.b	#1,d0
00014F8E                            
00014F8E                            loc_1462C:
00014F8E 0600 001F                  		addi.b	#$1F,d0
00014F92                            
00014F92                            loc_14630:
00014F92 0200 00C0                  		andi.b	#$C0,d0
00014F96 0C00 0040                  		cmpi.b	#$40,d0
00014F9A 6700 0000                  		beq.w	Sonic_WalkVertL
00014F9E 0C00 0080                  		cmpi.b	#$80,d0
00014FA2 6700 0000                  		beq.w	Sonic_WalkCeiling
00014FA6 0C00 00C0                  		cmpi.b	#$C0,d0
00014FAA 6700 0000                  		beq.w	Sonic_WalkVertR
00014FAE 3428 000C                  		move.w	$C(a0),d2
00014FB2 3628 0008                  		move.w	8(a0),d3
00014FB6 7000                       		moveq	#0,d0
00014FB8 1028 0016                  		move.b	$16(a0),d0
00014FBC 4880                       		ext.w	d0
00014FBE D440                       		add.w	d0,d2
00014FC0 1028 0017                  		move.b	$17(a0),d0
00014FC4 4880                       		ext.w	d0
00014FC6 D640                       		add.w	d0,d3
00014FC8 49F8 F768                  		lea	($FFFFF768).w,a4
00014FCC 367C 0010                  		movea.w	#$10,a3
00014FD0 3C3C 0000                  		move.w	#0,d6
00014FD4 7A0D                       		moveq	#$D,d5
00014FD6 6100 0000                  		bsr.w	FindFloor
00014FDA 3F01                       		move.w	d1,-(sp)
00014FDC 3428 000C                  		move.w	$C(a0),d2
00014FE0 3628 0008                  		move.w	8(a0),d3
00014FE4 7000                       		moveq	#0,d0
00014FE6 1028 0016                  		move.b	$16(a0),d0
00014FEA 4880                       		ext.w	d0
00014FEC D440                       		add.w	d0,d2
00014FEE 1028 0017                  		move.b	$17(a0),d0
00014FF2 4880                       		ext.w	d0
00014FF4 4440                       		neg.w	d0
00014FF6 D640                       		add.w	d0,d3
00014FF8 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014FFC 367C 0010                  		movea.w	#$10,a3
00015000 3C3C 0000                  		move.w	#0,d6
00015004 7A0D                       		moveq	#$D,d5
00015006 6100 0000                  		bsr.w	FindFloor
0001500A 301F                       		move.w	(sp)+,d0
0001500C 6100 0000                  		bsr.w	Sonic_Angle
00015010 4A41                       		tst.w	d1
00015012 6700                       		beq.s	locret_146BE
00015014 6A00                       		bpl.s	loc_146C0
00015016 0C41 FFF2                  		cmpi.w	#-$E,d1
0001501A 6D00                       		blt.s	locret_146E6
0001501C D368 000C                  		add.w	d1,$C(a0)
00015020                            
00015020                            locret_146BE:
00015020 4E75                       		rts	
00015022                            ; ===========================================================================
00015022                            
00015022                            loc_146C0:
00015022 0C41 000E                  		cmpi.w	#$E,d1
00015026 6E00                       		bgt.s	loc_146CC
00015028                            
00015028                            loc_146C6:
00015028 D368 000C                  		add.w	d1,$C(a0)
0001502C 4E75                       		rts	
0001502E                            ; ===========================================================================
0001502E                            
0001502E                            loc_146CC:
0001502E 4A28 0038                  		tst.b	$38(a0)
00015032 66F4                       		bne.s	loc_146C6
00015034 08E8 0001 0022             		bset	#1,$22(a0)
0001503A 08A8 0005 0022             		bclr	#5,$22(a0)
00015040 117C 0001 001D             		move.b	#1,$1D(a0)
00015046 4E75                       		rts	
00015048                            ; ===========================================================================
00015048                            
00015048                            locret_146E6:
00015048 4E75                       		rts	
0001504A                            ; End of function Sonic_AnglePos
0001504A                            
0001504A                            ; ===========================================================================
0001504A 2428 0008                  		move.l	8(a0),d2
0001504E 3028 0010                  		move.w	$10(a0),d0
00015052 48C0                       		ext.l	d0
00015054 E180                       		asl.l	#8,d0
00015056 9480                       		sub.l	d0,d2
00015058 2142 0008                  		move.l	d2,8(a0)
0001505C 303C 0038                  		move.w	#$38,d0
00015060 48C0                       		ext.l	d0
00015062 E180                       		asl.l	#8,d0
00015064 9680                       		sub.l	d0,d3
00015066 2143 000C                  		move.l	d3,$C(a0)
0001506A 4E75                       		rts	
0001506C                            ; ===========================================================================
0001506C                            
0001506C                            locret_1470A:
0001506C 4E75                       		rts	
0001506E                            ; ===========================================================================
0001506E 2628 000C                  		move.l	$C(a0),d3
00015072 3028 0012                  		move.w	$12(a0),d0
00015076 0440 0038                  		subi.w	#$38,d0
0001507A 3140 0012                  		move.w	d0,$12(a0)
0001507E 48C0                       		ext.l	d0
00015080 E180                       		asl.l	#8,d0
00015082 9680                       		sub.l	d0,d3
00015084 2143 000C                  		move.l	d3,$C(a0)
00015088 4E75                       		rts	
0001508A 4E75                       		rts	
0001508C                            ; ===========================================================================
0001508C 2428 0008                  		move.l	8(a0),d2
00015090 2628 000C                  		move.l	$C(a0),d3
00015094 3028 0010                  		move.w	$10(a0),d0
00015098 48C0                       		ext.l	d0
0001509A E180                       		asl.l	#8,d0
0001509C 9480                       		sub.l	d0,d2
0001509E 3028 0012                  		move.w	$12(a0),d0
000150A2 48C0                       		ext.l	d0
000150A4 E180                       		asl.l	#8,d0
000150A6 9680                       		sub.l	d0,d3
000150A8 2142 0008                  		move.l	d2,8(a0)
000150AC 2143 000C                  		move.l	d3,$C(a0)
000150B0 4E75                       		rts	
000150B2                            
000150B2                            ; ---------------------------------------------------------------------------
000150B2                            ; Subroutine to	change Sonic's angle as he walks along the floor
000150B2                            ; ---------------------------------------------------------------------------
000150B2                            
000150B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150B2                            
000150B2                            
000150B2                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
000150B2 1438 F76A                  		move.b	($FFFFF76A).w,d2
000150B6 B240                       		cmp.w	d0,d1
000150B8 6F00                       		ble.s	loc_1475E
000150BA 1438 F768                  		move.b	($FFFFF768).w,d2
000150BE 3200                       		move.w	d0,d1
000150C0                            
000150C0                            loc_1475E:
000150C0 0802 0000                  		btst	#0,d2
000150C4 6600                       		bne.s	loc_1476A
000150C6 1142 0026                  		move.b	d2,$26(a0)
000150CA 4E75                       		rts	
000150CC                            ; ===========================================================================
000150CC                            
000150CC                            loc_1476A:
000150CC 1428 0026                  		move.b	$26(a0),d2
000150D0 0602 0020                  		addi.b	#$20,d2
000150D4 0202 00C0                  		andi.b	#$C0,d2
000150D8 1142 0026                  		move.b	d2,$26(a0)
000150DC 4E75                       		rts	
000150DE                            ; End of function Sonic_Angle
000150DE                            
000150DE                            ; ---------------------------------------------------------------------------
000150DE                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000150DE                            ; ---------------------------------------------------------------------------
000150DE                            
000150DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150DE                            
000150DE                            
000150DE                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000150DE 3428 000C                  		move.w	$C(a0),d2
000150E2 3628 0008                  		move.w	8(a0),d3
000150E6 7000                       		moveq	#0,d0
000150E8 1028 0017                  		move.b	$17(a0),d0
000150EC 4880                       		ext.w	d0
000150EE 4440                       		neg.w	d0
000150F0 D440                       		add.w	d0,d2
000150F2 1028 0016                  		move.b	$16(a0),d0
000150F6 4880                       		ext.w	d0
000150F8 D640                       		add.w	d0,d3
000150FA 49F8 F768                  		lea	($FFFFF768).w,a4
000150FE 367C 0010                  		movea.w	#$10,a3
00015102 3C3C 0000                  		move.w	#0,d6
00015106 7A0D                       		moveq	#$D,d5
00015108 6100 0000                  		bsr.w	FindWall
0001510C 3F01                       		move.w	d1,-(sp)
0001510E 3428 000C                  		move.w	$C(a0),d2
00015112 3628 0008                  		move.w	8(a0),d3
00015116 7000                       		moveq	#0,d0
00015118 1028 0017                  		move.b	$17(a0),d0
0001511C 4880                       		ext.w	d0
0001511E D440                       		add.w	d0,d2
00015120 1028 0016                  		move.b	$16(a0),d0
00015124 4880                       		ext.w	d0
00015126 D640                       		add.w	d0,d3
00015128 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001512C 367C 0010                  		movea.w	#$10,a3
00015130 3C3C 0000                  		move.w	#0,d6
00015134 7A0D                       		moveq	#$D,d5
00015136 6100 0000                  		bsr.w	FindWall
0001513A 301F                       		move.w	(sp)+,d0
0001513C 6100 FF74                  		bsr.w	Sonic_Angle
00015140 4A41                       		tst.w	d1
00015142 6700                       		beq.s	locret_147F0
00015144 6A00                       		bpl.s	loc_147F2
00015146 0C41 FFF2                  		cmpi.w	#-$E,d1
0001514A 6D00 FF20                  		blt.w	locret_1470A
0001514E D368 0008                  		add.w	d1,8(a0)
00015152                            
00015152                            locret_147F0:
00015152 4E75                       		rts	
00015154                            ; ===========================================================================
00015154                            
00015154                            loc_147F2:
00015154 0C41 000E                  		cmpi.w	#$E,d1
00015158 6E00                       		bgt.s	loc_147FE
0001515A                            
0001515A                            loc_147F8:
0001515A D368 0008                  		add.w	d1,8(a0)
0001515E 4E75                       		rts	
00015160                            ; ===========================================================================
00015160                            
00015160                            loc_147FE:
00015160 4A28 0038                  		tst.b	$38(a0)
00015164 66F4                       		bne.s	loc_147F8
00015166 08E8 0001 0022             		bset	#1,$22(a0)
0001516C 08A8 0005 0022             		bclr	#5,$22(a0)
00015172 117C 0001 001D             		move.b	#1,$1D(a0)
00015178 4E75                       		rts	
0001517A                            ; End of function Sonic_WalkVertR
0001517A                            
0001517A                            ; ---------------------------------------------------------------------------
0001517A                            ; Subroutine allowing Sonic to walk upside-down
0001517A                            ; ---------------------------------------------------------------------------
0001517A                            
0001517A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001517A                            
0001517A                            
0001517A                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0001517A 3428 000C                  		move.w	$C(a0),d2
0001517E 3628 0008                  		move.w	8(a0),d3
00015182 7000                       		moveq	#0,d0
00015184 1028 0016                  		move.b	$16(a0),d0
00015188 4880                       		ext.w	d0
0001518A 9440                       		sub.w	d0,d2
0001518C 0A42 000F                  		eori.w	#$F,d2
00015190 1028 0017                  		move.b	$17(a0),d0
00015194 4880                       		ext.w	d0
00015196 D640                       		add.w	d0,d3
00015198 49F8 F768                  		lea	($FFFFF768).w,a4
0001519C 367C FFF0                  		movea.w	#-$10,a3
000151A0 3C3C 1000                  		move.w	#$1000,d6
000151A4 7A0D                       		moveq	#$D,d5
000151A6 6100 0000                  		bsr.w	FindFloor
000151AA 3F01                       		move.w	d1,-(sp)
000151AC 3428 000C                  		move.w	$C(a0),d2
000151B0 3628 0008                  		move.w	8(a0),d3
000151B4 7000                       		moveq	#0,d0
000151B6 1028 0016                  		move.b	$16(a0),d0
000151BA 4880                       		ext.w	d0
000151BC 9440                       		sub.w	d0,d2
000151BE 0A42 000F                  		eori.w	#$F,d2
000151C2 1028 0017                  		move.b	$17(a0),d0
000151C6 4880                       		ext.w	d0
000151C8 9640                       		sub.w	d0,d3
000151CA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000151CE 367C FFF0                  		movea.w	#-$10,a3
000151D2 3C3C 1000                  		move.w	#$1000,d6
000151D6 7A0D                       		moveq	#$D,d5
000151D8 6100 0000                  		bsr.w	FindFloor
000151DC 301F                       		move.w	(sp)+,d0
000151DE 6100 FED2                  		bsr.w	Sonic_Angle
000151E2 4A41                       		tst.w	d1
000151E4 6700                       		beq.s	locret_14892
000151E6 6A00                       		bpl.s	loc_14894
000151E8 0C41 FFF2                  		cmpi.w	#-$E,d1
000151EC 6D00 FE5A                  		blt.w	locret_146E6
000151F0 9368 000C                  		sub.w	d1,$C(a0)
000151F4                            
000151F4                            locret_14892:
000151F4 4E75                       		rts	
000151F6                            ; ===========================================================================
000151F6                            
000151F6                            loc_14894:
000151F6 0C41 000E                  		cmpi.w	#$E,d1
000151FA 6E00                       		bgt.s	loc_148A0
000151FC                            
000151FC                            loc_1489A:
000151FC 9368 000C                  		sub.w	d1,$C(a0)
00015200 4E75                       		rts	
00015202                            ; ===========================================================================
00015202                            
00015202                            loc_148A0:
00015202 4A28 0038                  		tst.b	$38(a0)
00015206 66F4                       		bne.s	loc_1489A
00015208 08E8 0001 0022             		bset	#1,$22(a0)
0001520E 08A8 0005 0022             		bclr	#5,$22(a0)
00015214 117C 0001 001D             		move.b	#1,$1D(a0)
0001521A 4E75                       		rts	
0001521C                            ; End of function Sonic_WalkCeiling
0001521C                            
0001521C                            ; ---------------------------------------------------------------------------
0001521C                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
0001521C                            ; ---------------------------------------------------------------------------
0001521C                            
0001521C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001521C                            
0001521C                            
0001521C                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
0001521C 3428 000C                  		move.w	$C(a0),d2
00015220 3628 0008                  		move.w	8(a0),d3
00015224 7000                       		moveq	#0,d0
00015226 1028 0017                  		move.b	$17(a0),d0
0001522A 4880                       		ext.w	d0
0001522C 9440                       		sub.w	d0,d2
0001522E 1028 0016                  		move.b	$16(a0),d0
00015232 4880                       		ext.w	d0
00015234 9640                       		sub.w	d0,d3
00015236 0A43 000F                  		eori.w	#$F,d3
0001523A 49F8 F768                  		lea	($FFFFF768).w,a4
0001523E 367C FFF0                  		movea.w	#-$10,a3
00015242 3C3C 0800                  		move.w	#$800,d6
00015246 7A0D                       		moveq	#$D,d5
00015248 6100 0000                  		bsr.w	FindWall
0001524C 3F01                       		move.w	d1,-(sp)
0001524E 3428 000C                  		move.w	$C(a0),d2
00015252 3628 0008                  		move.w	8(a0),d3
00015256 7000                       		moveq	#0,d0
00015258 1028 0017                  		move.b	$17(a0),d0
0001525C 4880                       		ext.w	d0
0001525E D440                       		add.w	d0,d2
00015260 1028 0016                  		move.b	$16(a0),d0
00015264 4880                       		ext.w	d0
00015266 9640                       		sub.w	d0,d3
00015268 0A43 000F                  		eori.w	#$F,d3
0001526C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015270 367C FFF0                  		movea.w	#-$10,a3
00015274 3C3C 0800                  		move.w	#$800,d6
00015278 7A0D                       		moveq	#$D,d5
0001527A 6100 0000                  		bsr.w	FindWall
0001527E 301F                       		move.w	(sp)+,d0
00015280 6100 FE30                  		bsr.w	Sonic_Angle
00015284 4A41                       		tst.w	d1
00015286 6700                       		beq.s	locret_14934
00015288 6A00                       		bpl.s	loc_14936
0001528A 0C41 FFF2                  		cmpi.w	#-$E,d1
0001528E 6D00 FDDC                  		blt.w	locret_1470A
00015292 9368 0008                  		sub.w	d1,8(a0)
00015296                            
00015296                            locret_14934:
00015296 4E75                       		rts	
00015298                            ; ===========================================================================
00015298                            
00015298                            loc_14936:
00015298 0C41 000E                  		cmpi.w	#$E,d1
0001529C 6E00                       		bgt.s	loc_14942
0001529E                            
0001529E                            loc_1493C:
0001529E 9368 0008                  		sub.w	d1,8(a0)
000152A2 4E75                       		rts	
000152A4                            ; ===========================================================================
000152A4                            
000152A4                            loc_14942:
000152A4 4A28 0038                  		tst.b	$38(a0)
000152A8 66F4                       		bne.s	loc_1493C
000152AA 08E8 0001 0022             		bset	#1,$22(a0)
000152B0 08A8 0005 0022             		bclr	#5,$22(a0)
000152B6 117C 0001 001D             		move.b	#1,$1D(a0)
000152BC 4E75                       		rts	
000152BE                            ; End of function Sonic_WalkVertL
000152BE                            
000152BE                            ; ---------------------------------------------------------------------------
000152BE                            ; Subroutine to	find which tile	the object is standing on
000152BE                            ; ---------------------------------------------------------------------------
000152BE                            
000152BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152BE                            
000152BE                            
000152BE                            Floor_ChkTile:				; XREF: FindFloor; et al
000152BE 3002                       		move.w	d2,d0
000152C0 E248                       		lsr.w	#1,d0
000152C2 0240 0380                  		andi.w	#$380,d0
000152C6 3203                       		move.w	d3,d1
000152C8 E049                       		lsr.w	#8,d1
000152CA 0241 007F                  		andi.w	#$7F,d1
000152CE D041                       		add.w	d1,d0
000152D0 72FF                       		moveq	#-1,d1
000152D2 43F8 A400                  		lea	($FFFFA400).w,a1
000152D6 1231 0000                  		move.b	(a1,d0.w),d1
000152DA 6700                       		beq.s	loc_14996
000152DC 6B00                       		bmi.s	loc_1499A
000152DE 5301                       		subq.b	#1,d1
000152E0 4881                       		ext.w	d1
000152E2 EE59                       		ror.w	#7,d1
000152E4 3002                       		move.w	d2,d0
000152E6 D040                       		add.w	d0,d0
000152E8 0240 01E0                  		andi.w	#$1E0,d0
000152EC D240                       		add.w	d0,d1
000152EE 3003                       		move.w	d3,d0
000152F0 E648                       		lsr.w	#3,d0
000152F2 0240 001E                  		andi.w	#$1E,d0
000152F6 D240                       		add.w	d0,d1
000152F8                            
000152F8                            loc_14996:
000152F8 2241                       		movea.l	d1,a1
000152FA 4E75                       		rts	
000152FC                            ; ===========================================================================
000152FC                            
000152FC                            loc_1499A:
000152FC 0241 007F                  		andi.w	#$7F,d1
00015300 0828 0006 0001             		btst	#6,1(a0)
00015306 6700                       		beq.s	loc_149B2
00015308 5241                       		addq.w	#1,d1
0001530A 0C41 0029                  		cmpi.w	#$29,d1
0001530E 6600                       		bne.s	loc_149B2
00015310 323C 0051                  		move.w	#$51,d1
00015314                            
00015314                            loc_149B2:
00015314 5301                       		subq.b	#1,d1
00015316 EE59                       		ror.w	#7,d1
00015318 3002                       		move.w	d2,d0
0001531A D040                       		add.w	d0,d0
0001531C 0240 01E0                  		andi.w	#$1E0,d0
00015320 D240                       		add.w	d0,d1
00015322 3003                       		move.w	d3,d0
00015324 E648                       		lsr.w	#3,d0
00015326 0240 001E                  		andi.w	#$1E,d0
0001532A D240                       		add.w	d0,d1
0001532C 2241                       		movea.l	d1,a1
0001532E 4E75                       		rts	
00015330                            ; End of function Floor_ChkTile
00015330                            
00015330                            
00015330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015330                            
00015330                            
00015330                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015330 618C                       		bsr.s	Floor_ChkTile
00015332 3011                       		move.w	(a1),d0
00015334 3800                       		move.w	d0,d4
00015336 0240 07FF                  		andi.w	#$7FF,d0
0001533A 6700                       		beq.s	loc_149DE
0001533C 0B04                       		btst	d5,d4
0001533E 6600                       		bne.s	loc_149EC
00015340                            
00015340                            loc_149DE:
00015340 D44B                       		add.w	a3,d2
00015342 6100 0000                  		bsr.w	FindFloor2
00015346 944B                       		sub.w	a3,d2
00015348 0641 0010                  		addi.w	#$10,d1
0001534C 4E75                       		rts	
0001534E                            ; ===========================================================================
0001534E                            
0001534E                            loc_149EC:
0001534E 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015352 1032 0000                  		move.b	(a2,d0.w),d0
00015356 0240 00FF                  		andi.w	#$FF,d0
0001535A 67E4                       		beq.s	loc_149DE
0001535C 45F9 0000 0000             		lea	(AngleMap).l,a2
00015362 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015366 E948                       		lsl.w	#4,d0
00015368 3203                       		move.w	d3,d1
0001536A 0804 000B                  		btst	#$B,d4
0001536E 6700                       		beq.s	loc_14A12
00015370 4641                       		not.w	d1
00015372 4414                       		neg.b	(a4)
00015374                            
00015374                            loc_14A12:
00015374 0804 000C                  		btst	#$C,d4
00015378 6700                       		beq.s	loc_14A22
0001537A 0614 0040                  		addi.b	#$40,(a4)
0001537E 4414                       		neg.b	(a4)
00015380 0414 0040                  		subi.b	#$40,(a4)
00015384                            
00015384                            loc_14A22:
00015384 0241 000F                  		andi.w	#$F,d1
00015388 D240                       		add.w	d0,d1
0001538A 45F9 0000 0000             		lea	(CollArray1).l,a2
00015390 1032 1000                  		move.b	(a2,d1.w),d0
00015394 4880                       		ext.w	d0
00015396 BD44                       		eor.w	d6,d4
00015398 0804 000C                  		btst	#$C,d4
0001539C 6700                       		beq.s	loc_14A3E
0001539E 4440                       		neg.w	d0
000153A0                            
000153A0                            loc_14A3E:
000153A0 4A40                       		tst.w	d0
000153A2 679C                       		beq.s	loc_149DE
000153A4 6B00                       		bmi.s	loc_14A5A
000153A6 0C00 0010                  		cmpi.b	#$10,d0
000153AA 6700                       		beq.s	loc_14A66
000153AC 3202                       		move.w	d2,d1
000153AE 0241 000F                  		andi.w	#$F,d1
000153B2 D041                       		add.w	d1,d0
000153B4 323C 000F                  		move.w	#$F,d1
000153B8 9240                       		sub.w	d0,d1
000153BA 4E75                       		rts	
000153BC                            ; ===========================================================================
000153BC                            
000153BC                            loc_14A5A:
000153BC 3202                       		move.w	d2,d1
000153BE 0241 000F                  		andi.w	#$F,d1
000153C2 D041                       		add.w	d1,d0
000153C4 6A00 FF7A                  		bpl.w	loc_149DE
000153C8                            
000153C8                            loc_14A66:
000153C8 944B                       		sub.w	a3,d2
000153CA 6100 0000                  		bsr.w	FindFloor2
000153CE D44B                       		add.w	a3,d2
000153D0 0441 0010                  		subi.w	#$10,d1
000153D4 4E75                       		rts	
000153D6                            ; End of function FindFloor
000153D6                            
000153D6                            
000153D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153D6                            
000153D6                            
000153D6                            FindFloor2:				; XREF: FindFloor
000153D6 6100 FEE6                  		bsr.w	Floor_ChkTile
000153DA 3011                       		move.w	(a1),d0
000153DC 3800                       		move.w	d0,d4
000153DE 0240 07FF                  		andi.w	#$7FF,d0
000153E2 6700                       		beq.s	loc_14A86
000153E4 0B04                       		btst	d5,d4
000153E6 6600                       		bne.s	loc_14A94
000153E8                            
000153E8                            loc_14A86:
000153E8 323C 000F                  		move.w	#$F,d1
000153EC 3002                       		move.w	d2,d0
000153EE 0240 000F                  		andi.w	#$F,d0
000153F2 9240                       		sub.w	d0,d1
000153F4 4E75                       		rts	
000153F6                            ; ===========================================================================
000153F6                            
000153F6                            loc_14A94:
000153F6 2478 F796                  		movea.l	($FFFFF796).w,a2
000153FA 1032 0000                  		move.b	(a2,d0.w),d0
000153FE 0240 00FF                  		andi.w	#$FF,d0
00015402 67E4                       		beq.s	loc_14A86
00015404 45F9 0000 0000             		lea	(AngleMap).l,a2
0001540A 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001540E E948                       		lsl.w	#4,d0
00015410 3203                       		move.w	d3,d1
00015412 0804 000B                  		btst	#$B,d4
00015416 6700                       		beq.s	loc_14ABA
00015418 4641                       		not.w	d1
0001541A 4414                       		neg.b	(a4)
0001541C                            
0001541C                            loc_14ABA:
0001541C 0804 000C                  		btst	#$C,d4
00015420 6700                       		beq.s	loc_14ACA
00015422 0614 0040                  		addi.b	#$40,(a4)
00015426 4414                       		neg.b	(a4)
00015428 0414 0040                  		subi.b	#$40,(a4)
0001542C                            
0001542C                            loc_14ACA:
0001542C 0241 000F                  		andi.w	#$F,d1
00015430 D240                       		add.w	d0,d1
00015432 45F9 0000 0000             		lea	(CollArray1).l,a2
00015438 1032 1000                  		move.b	(a2,d1.w),d0
0001543C 4880                       		ext.w	d0
0001543E BD44                       		eor.w	d6,d4
00015440 0804 000C                  		btst	#$C,d4
00015444 6700                       		beq.s	loc_14AE6
00015446 4440                       		neg.w	d0
00015448                            
00015448                            loc_14AE6:
00015448 4A40                       		tst.w	d0
0001544A 679C                       		beq.s	loc_14A86
0001544C 6B00                       		bmi.s	loc_14AFC
0001544E 3202                       		move.w	d2,d1
00015450 0241 000F                  		andi.w	#$F,d1
00015454 D041                       		add.w	d1,d0
00015456 323C 000F                  		move.w	#$F,d1
0001545A 9240                       		sub.w	d0,d1
0001545C 4E75                       		rts	
0001545E                            ; ===========================================================================
0001545E                            
0001545E                            loc_14AFC:
0001545E 3202                       		move.w	d2,d1
00015460 0241 000F                  		andi.w	#$F,d1
00015464 D041                       		add.w	d1,d0
00015466 6A00 FF80                  		bpl.w	loc_14A86
0001546A 4641                       		not.w	d1
0001546C 4E75                       		rts	
0001546E                            ; End of function FindFloor2
0001546E                            
0001546E                            
0001546E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001546E                            
0001546E                            
0001546E                            FindWall:				; XREF: Sonic_WalkVertR; et al
0001546E 6100 FE4E                  		bsr.w	Floor_ChkTile
00015472 3011                       		move.w	(a1),d0
00015474 3800                       		move.w	d0,d4
00015476 0240 07FF                  		andi.w	#$7FF,d0
0001547A 6700                       		beq.s	loc_14B1E
0001547C 0B04                       		btst	d5,d4
0001547E 6600                       		bne.s	loc_14B2C
00015480                            
00015480                            loc_14B1E:
00015480 D64B                       		add.w	a3,d3
00015482 6100 0000                  		bsr.w	FindWall2
00015486 964B                       		sub.w	a3,d3
00015488 0641 0010                  		addi.w	#$10,d1
0001548C 4E75                       		rts	
0001548E                            ; ===========================================================================
0001548E                            
0001548E                            loc_14B2C:
0001548E 2478 F796                  		movea.l	($FFFFF796).w,a2
00015492 1032 0000                  		move.b	(a2,d0.w),d0
00015496 0240 00FF                  		andi.w	#$FF,d0
0001549A 67E4                       		beq.s	loc_14B1E
0001549C 45F9 0000 0000             		lea	(AngleMap).l,a2
000154A2 18B2 0000                  		move.b	(a2,d0.w),(a4)
000154A6 E948                       		lsl.w	#4,d0
000154A8 3202                       		move.w	d2,d1
000154AA 0804 000C                  		btst	#$C,d4
000154AE 6700                       		beq.s	loc_14B5A
000154B0 4641                       		not.w	d1
000154B2 0614 0040                  		addi.b	#$40,(a4)
000154B6 4414                       		neg.b	(a4)
000154B8 0414 0040                  		subi.b	#$40,(a4)
000154BC                            
000154BC                            loc_14B5A:
000154BC 0804 000B                  		btst	#$B,d4
000154C0 6700                       		beq.s	loc_14B62
000154C2 4414                       		neg.b	(a4)
000154C4                            
000154C4                            loc_14B62:
000154C4 0241 000F                  		andi.w	#$F,d1
000154C8 D240                       		add.w	d0,d1
000154CA 45F9 0000 0000             		lea	(CollArray2).l,a2
000154D0 1032 1000                  		move.b	(a2,d1.w),d0
000154D4 4880                       		ext.w	d0
000154D6 BD44                       		eor.w	d6,d4
000154D8 0804 000B                  		btst	#$B,d4
000154DC 6700                       		beq.s	loc_14B7E
000154DE 4440                       		neg.w	d0
000154E0                            
000154E0                            loc_14B7E:
000154E0 4A40                       		tst.w	d0
000154E2 679C                       		beq.s	loc_14B1E
000154E4 6B00                       		bmi.s	loc_14B9A
000154E6 0C00 0010                  		cmpi.b	#$10,d0
000154EA 6700                       		beq.s	loc_14BA6
000154EC 3203                       		move.w	d3,d1
000154EE 0241 000F                  		andi.w	#$F,d1
000154F2 D041                       		add.w	d1,d0
000154F4 323C 000F                  		move.w	#$F,d1
000154F8 9240                       		sub.w	d0,d1
000154FA 4E75                       		rts	
000154FC                            ; ===========================================================================
000154FC                            
000154FC                            loc_14B9A:
000154FC 3203                       		move.w	d3,d1
000154FE 0241 000F                  		andi.w	#$F,d1
00015502 D041                       		add.w	d1,d0
00015504 6A00 FF7A                  		bpl.w	loc_14B1E
00015508                            
00015508                            loc_14BA6:
00015508 964B                       		sub.w	a3,d3
0001550A 6100 0000                  		bsr.w	FindWall2
0001550E D64B                       		add.w	a3,d3
00015510 0441 0010                  		subi.w	#$10,d1
00015514 4E75                       		rts	
00015516                            ; End of function FindWall
00015516                            
00015516                            
00015516                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015516                            
00015516                            
00015516                            FindWall2:				; XREF: FindWall
00015516 6100 FDA6                  		bsr.w	Floor_ChkTile
0001551A 3011                       		move.w	(a1),d0
0001551C 3800                       		move.w	d0,d4
0001551E 0240 07FF                  		andi.w	#$7FF,d0
00015522 6700                       		beq.s	loc_14BC6
00015524 0B04                       		btst	d5,d4
00015526 6600                       		bne.s	loc_14BD4
00015528                            
00015528                            loc_14BC6:
00015528 323C 000F                  		move.w	#$F,d1
0001552C 3003                       		move.w	d3,d0
0001552E 0240 000F                  		andi.w	#$F,d0
00015532 9240                       		sub.w	d0,d1
00015534 4E75                       		rts	
00015536                            ; ===========================================================================
00015536                            
00015536                            loc_14BD4:
00015536 2478 F796                  		movea.l	($FFFFF796).w,a2
0001553A 1032 0000                  		move.b	(a2,d0.w),d0
0001553E 0240 00FF                  		andi.w	#$FF,d0
00015542 67E4                       		beq.s	loc_14BC6
00015544 45F9 0000 0000             		lea	(AngleMap).l,a2
0001554A 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001554E E948                       		lsl.w	#4,d0
00015550 3202                       		move.w	d2,d1
00015552 0804 000C                  		btst	#$C,d4
00015556 6700                       		beq.s	loc_14C02
00015558 4641                       		not.w	d1
0001555A 0614 0040                  		addi.b	#$40,(a4)
0001555E 4414                       		neg.b	(a4)
00015560 0414 0040                  		subi.b	#$40,(a4)
00015564                            
00015564                            loc_14C02:
00015564 0804 000B                  		btst	#$B,d4
00015568 6700                       		beq.s	loc_14C0A
0001556A 4414                       		neg.b	(a4)
0001556C                            
0001556C                            loc_14C0A:
0001556C 0241 000F                  		andi.w	#$F,d1
00015570 D240                       		add.w	d0,d1
00015572 45F9 0000 0000             		lea	(CollArray2).l,a2
00015578 1032 1000                  		move.b	(a2,d1.w),d0
0001557C 4880                       		ext.w	d0
0001557E BD44                       		eor.w	d6,d4
00015580 0804 000B                  		btst	#$B,d4
00015584 6700                       		beq.s	loc_14C26
00015586 4440                       		neg.w	d0
00015588                            
00015588                            loc_14C26:
00015588 4A40                       		tst.w	d0
0001558A 679C                       		beq.s	loc_14BC6
0001558C 6B00                       		bmi.s	loc_14C3C
0001558E 3203                       		move.w	d3,d1
00015590 0241 000F                  		andi.w	#$F,d1
00015594 D041                       		add.w	d1,d0
00015596 323C 000F                  		move.w	#$F,d1
0001559A 9240                       		sub.w	d0,d1
0001559C 4E75                       		rts	
0001559E                            ; ===========================================================================
0001559E                            
0001559E                            loc_14C3C:
0001559E 3203                       		move.w	d3,d1
000155A0 0241 000F                  		andi.w	#$F,d1
000155A4 D041                       		add.w	d1,d0
000155A6 6A00 FF80                  		bpl.w	loc_14BC6
000155AA 4641                       		not.w	d1
000155AC 4E75                       		rts	
000155AE                            ; End of function FindWall2
000155AE                            
000155AE                            ; ---------------------------------------------------------------------------
000155AE                            ; Unused floor/wall subroutine - logs something	to do with collision
000155AE                            ; ---------------------------------------------------------------------------
000155AE                            
000155AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155AE                            
000155AE                            
000155AE                            FloorLog_Unk:				; XREF: Level
000155AE 4E75                       		rts	
000155B0                            
000155B0 43F9 0000 0000             		lea	(CollArray1).l,a1
000155B6 45F9 0000 0000             		lea	(CollArray1).l,a2
000155BC 363C 00FF                  		move.w	#$FF,d3
000155C0                            
000155C0                            loc_14C5E:
000155C0 7A10                       		moveq	#$10,d5
000155C2 343C 000F                  		move.w	#$F,d2
000155C6                            
000155C6                            loc_14C64:
000155C6 7800                       		moveq	#0,d4
000155C8 323C 000F                  		move.w	#$F,d1
000155CC                            
000155CC                            loc_14C6A:
000155CC 3019                       		move.w	(a1)+,d0
000155CE EAA8                       		lsr.l	d5,d0
000155D0 D944                       		addx.w	d4,d4
000155D2 51C9 FFF8                  		dbf	d1,loc_14C6A
000155D6                            
000155D6 34C4                       		move.w	d4,(a2)+
000155D8 92FC 0020                  		suba.w	#$20,a1
000155DC 5345                       		subq.w	#1,d5
000155DE 51CA FFE6                  		dbf	d2,loc_14C64
000155E2                            
000155E2 D2FC 0020                  		adda.w	#$20,a1
000155E6 51CB FFD8                  		dbf	d3,loc_14C5E
000155EA                            
000155EA 43F9 0000 0000             		lea	(CollArray1).l,a1
000155F0 45F9 0000 0000             		lea	(CollArray2).l,a2
000155F6 6100                       		bsr.s	FloorLog_Unk2
000155F8 43F9 0000 0000             		lea	(CollArray1).l,a1
000155FE 45F9 0000 0000             		lea	(CollArray1).l,a2
00015604                            
00015604                            ; End of function FloorLog_Unk
00015604                            
00015604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015604                            
00015604                            
00015604                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015604 363C 0FFF                  		move.w	#$FFF,d3
00015608                            
00015608                            loc_14CA6:
00015608 7400                       		moveq	#0,d2
0001560A 323C 000F                  		move.w	#$F,d1
0001560E 3019                       		move.w	(a1)+,d0
00015610 6700                       		beq.s	loc_14CD4
00015612 6B00                       		bmi.s	loc_14CBE
00015614                            
00015614                            loc_14CB2:
00015614 E248                       		lsr.w	#1,d0
00015616 6400                       		bcc.s	loc_14CB8
00015618 5202                       		addq.b	#1,d2
0001561A                            
0001561A                            loc_14CB8:
0001561A 51C9 FFF8                  		dbf	d1,loc_14CB2
0001561E                            
0001561E 6000                       		bra.s	loc_14CD6
00015620                            ; ===========================================================================
00015620                            
00015620                            loc_14CBE:
00015620 0C40 FFFF                  		cmpi.w	#-1,d0
00015624 6700                       		beq.s	loc_14CD0
00015626                            
00015626                            loc_14CC4:
00015626 E348                       		lsl.w	#1,d0
00015628 6400                       		bcc.s	loc_14CCA
0001562A 5302                       		subq.b	#1,d2
0001562C                            
0001562C                            loc_14CCA:
0001562C 51C9 FFF8                  		dbf	d1,loc_14CC4
00015630                            
00015630 6000                       		bra.s	loc_14CD6
00015632                            ; ===========================================================================
00015632                            
00015632                            loc_14CD0:
00015632 303C 0010                  		move.w	#$10,d0
00015636                            
00015636                            loc_14CD4:
00015636 3400                       		move.w	d0,d2
00015638                            
00015638                            loc_14CD6:
00015638 14C2                       		move.b	d2,(a2)+
0001563A 51CB FFCC                  		dbf	d3,loc_14CA6
0001563E                            
0001563E 4E75                       		rts	
00015640                            
00015640                            ; End of function FloorLog_Unk2
00015640                            
00015640                            
00015640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015640                            
00015640                            
00015640                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015640 2628 0008                  		move.l	8(a0),d3
00015644 2428 000C                  		move.l	$C(a0),d2
00015648 3228 0010                  		move.w	$10(a0),d1
0001564C 48C1                       		ext.l	d1
0001564E E181                       		asl.l	#8,d1
00015650 D681                       		add.l	d1,d3
00015652 3228 0012                  		move.w	$12(a0),d1
00015656 48C1                       		ext.l	d1
00015658 E181                       		asl.l	#8,d1
0001565A D481                       		add.l	d1,d2
0001565C 4842                       		swap	d2
0001565E 4843                       		swap	d3
00015660 11C0 F768                  		move.b	d0,($FFFFF768).w
00015664 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015668 1200                       		move.b	d0,d1
0001566A 0600 0020                  		addi.b	#$20,d0
0001566E 6A00                       		bpl.s	loc_14D1A
00015670 1001                       		move.b	d1,d0
00015672 6A00                       		bpl.s	loc_14D14
00015674 5300                       		subq.b	#1,d0
00015676                            
00015676                            loc_14D14:
00015676 0600 0020                  		addi.b	#$20,d0
0001567A 6000                       		bra.s	loc_14D24
0001567C                            ; ===========================================================================
0001567C                            
0001567C                            loc_14D1A:
0001567C 1001                       		move.b	d1,d0
0001567E 6A00                       		bpl.s	loc_14D20
00015680 5200                       		addq.b	#1,d0
00015682                            
00015682                            loc_14D20:
00015682 0600 001F                  		addi.b	#$1F,d0
00015686                            
00015686                            loc_14D24:
00015686 0200 00C0                  		andi.b	#$C0,d0
0001568A 6700 0000                  		beq.w	loc_14DF0
0001568E 0C00 0080                  		cmpi.b	#$80,d0
00015692 6700 0000                  		beq.w	loc_14F7C
00015696 0201 0038                  		andi.b	#$38,d1
0001569A 6600                       		bne.s	loc_14D3C
0001569C 5042                       		addq.w	#8,d2
0001569E                            
0001569E                            loc_14D3C:
0001569E 0C00 0040                  		cmpi.b	#$40,d0
000156A2 6700 0000                  		beq.w	loc_1504A
000156A6 6000 0000                  		bra.w	loc_14EBC
000156AA                            
000156AA                            ; End of function Sonic_WalkSpeed
000156AA                            
000156AA                            
000156AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156AA                            
000156AA                            
000156AA                            sub_14D48:				; XREF: Sonic_Jump
000156AA 11C0 F768                  		move.b	d0,($FFFFF768).w
000156AE 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000156B2 0600 0020                  		addi.b	#$20,d0
000156B6 0200 00C0                  		andi.b	#$C0,d0
000156BA 0C00 0040                  		cmpi.b	#$40,d0
000156BE 6700 0000                  		beq.w	loc_14FD6
000156C2 0C00 0080                  		cmpi.b	#$80,d0
000156C6 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000156CA 0C00 00C0                  		cmpi.b	#$C0,d0
000156CE 6700 0000                  		beq.w	sub_14E50
000156D2                            
000156D2                            ; End of function sub_14D48
000156D2                            
000156D2                            ; ---------------------------------------------------------------------------
000156D2                            ; Subroutine to	make Sonic land	on the floor after jumping
000156D2                            ; ---------------------------------------------------------------------------
000156D2                            
000156D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156D2                            
000156D2                            
000156D2                            Sonic_HitFloor:				; XREF: Sonic_Floor
000156D2 3428 000C                  		move.w	$C(a0),d2
000156D6 3628 0008                  		move.w	8(a0),d3
000156DA 7000                       		moveq	#0,d0
000156DC 1028 0016                  		move.b	$16(a0),d0
000156E0 4880                       		ext.w	d0
000156E2 D440                       		add.w	d0,d2
000156E4 1028 0017                  		move.b	$17(a0),d0
000156E8 4880                       		ext.w	d0
000156EA D640                       		add.w	d0,d3
000156EC 49F8 F768                  		lea	($FFFFF768).w,a4
000156F0 367C 0010                  		movea.w	#$10,a3
000156F4 3C3C 0000                  		move.w	#0,d6
000156F8 7A0D                       		moveq	#$D,d5
000156FA 6100 FC34                  		bsr.w	FindFloor
000156FE 3F01                       		move.w	d1,-(sp)
00015700 3428 000C                  		move.w	$C(a0),d2
00015704 3628 0008                  		move.w	8(a0),d3
00015708 7000                       		moveq	#0,d0
0001570A 1028 0016                  		move.b	$16(a0),d0
0001570E 4880                       		ext.w	d0
00015710 D440                       		add.w	d0,d2
00015712 1028 0017                  		move.b	$17(a0),d0
00015716 4880                       		ext.w	d0
00015718 9640                       		sub.w	d0,d3
0001571A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001571E 367C 0010                  		movea.w	#$10,a3
00015722 3C3C 0000                  		move.w	#0,d6
00015726 7A0D                       		moveq	#$D,d5
00015728 6100 FC06                  		bsr.w	FindFloor
0001572C 301F                       		move.w	(sp)+,d0
0001572E 143C 0000                  		move.b	#0,d2
00015732                            
00015732                            loc_14DD0:
00015732 1638 F76A                  		move.b	($FFFFF76A).w,d3
00015736 B240                       		cmp.w	d0,d1
00015738 6F00                       		ble.s	loc_14DDE
0001573A 1638 F768                  		move.b	($FFFFF768).w,d3
0001573E C141                       		exg	d0,d1
00015740                            
00015740                            loc_14DDE:
00015740 0803 0000                  		btst	#0,d3
00015744 6700                       		beq.s	locret_14DE6
00015746 1602                       		move.b	d2,d3
00015748                            
00015748                            locret_14DE6:
00015748 4E75                       		rts	
0001574A                            
0001574A                            ; End of function Sonic_HitFloor
0001574A                            
0001574A                            ; ===========================================================================
0001574A 3428 000C                  		move.w	$C(a0),d2
0001574E 3628 0008                  		move.w	8(a0),d3
00015752                            
00015752                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015752 0642 000A                  		addi.w	#$A,d2
00015756 49F8 F768                  		lea	($FFFFF768).w,a4
0001575A 367C 0010                  		movea.w	#$10,a3
0001575E 3C3C 0000                  		move.w	#0,d6
00015762 7A0E                       		moveq	#$E,d5
00015764 6100 FBCA                  		bsr.w	FindFloor
00015768 143C 0000                  		move.b	#0,d2
0001576C                            
0001576C                            loc_14E0A:				; XREF: sub_14EB4
0001576C 1638 F768                  		move.b	($FFFFF768).w,d3
00015770 0803 0000                  		btst	#0,d3
00015774 6700                       		beq.s	locret_14E16
00015776 1602                       		move.b	d2,d3
00015778                            
00015778                            locret_14E16:
00015778 4E75                       		rts	
0001577A                            
0001577A                            ; ---------------------------------------------------------------------------
0001577A                            ; Subroutine allowing objects to interact with the floor
0001577A                            ; ---------------------------------------------------------------------------
0001577A                            
0001577A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001577A                            
0001577A                            
0001577A                            ObjHitFloor:
0001577A 3628 0008                  		move.w	8(a0),d3
0001577E                            
0001577E                            ; End of function ObjHitFloor
0001577E                            
0001577E                            
0001577E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001577E                            
0001577E                            
0001577E                            ObjHitFloor2:
0001577E 3428 000C                  		move.w	$C(a0),d2
00015782 7000                       		moveq	#0,d0
00015784 1028 0016                  		move.b	$16(a0),d0
00015788 4880                       		ext.w	d0
0001578A D440                       		add.w	d0,d2
0001578C 49F8 F768                  		lea	($FFFFF768).w,a4
00015790 18BC 0000                  		move.b	#0,(a4)
00015794 367C 0010                  		movea.w	#$10,a3
00015798 3C3C 0000                  		move.w	#0,d6
0001579C 7A0D                       		moveq	#$D,d5
0001579E 6100 FB90                  		bsr.w	FindFloor
000157A2 1638 F768                  		move.b	($FFFFF768).w,d3
000157A6 0803 0000                  		btst	#0,d3
000157AA 6700                       		beq.s	locret_14E4E
000157AC 163C 0000                  		move.b	#0,d3
000157B0                            
000157B0                            locret_14E4E:
000157B0 4E75                       		rts	
000157B2                            ; End of function ObjHitFloor2
000157B2                            
000157B2                            
000157B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157B2                            
000157B2                            
000157B2                            sub_14E50:				; XREF: sub_14D48
000157B2 3428 000C                  		move.w	$C(a0),d2
000157B6 3628 0008                  		move.w	8(a0),d3
000157BA 7000                       		moveq	#0,d0
000157BC 1028 0017                  		move.b	$17(a0),d0
000157C0 4880                       		ext.w	d0
000157C2 9440                       		sub.w	d0,d2
000157C4 1028 0016                  		move.b	$16(a0),d0
000157C8 4880                       		ext.w	d0
000157CA D640                       		add.w	d0,d3
000157CC 49F8 F768                  		lea	($FFFFF768).w,a4
000157D0 367C 0010                  		movea.w	#$10,a3
000157D4 3C3C 0000                  		move.w	#0,d6
000157D8 7A0E                       		moveq	#$E,d5
000157DA 6100 FC92                  		bsr.w	FindWall
000157DE 3F01                       		move.w	d1,-(sp)
000157E0 3428 000C                  		move.w	$C(a0),d2
000157E4 3628 0008                  		move.w	8(a0),d3
000157E8 7000                       		moveq	#0,d0
000157EA 1028 0017                  		move.b	$17(a0),d0
000157EE 4880                       		ext.w	d0
000157F0 D440                       		add.w	d0,d2
000157F2 1028 0016                  		move.b	$16(a0),d0
000157F6 4880                       		ext.w	d0
000157F8 D640                       		add.w	d0,d3
000157FA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000157FE 367C 0010                  		movea.w	#$10,a3
00015802 3C3C 0000                  		move.w	#0,d6
00015806 7A0E                       		moveq	#$E,d5
00015808 6100 FC64                  		bsr.w	FindWall
0001580C 301F                       		move.w	(sp)+,d0
0001580E 143C 00C0                  		move.b	#-$40,d2
00015812 6000 FF1E                  		bra.w	loc_14DD0
00015816                            
00015816                            ; End of function sub_14E50
00015816                            
00015816                            
00015816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015816                            
00015816                            
00015816                            sub_14EB4:				; XREF: Sonic_Floor
00015816 3428 000C                  		move.w	$C(a0),d2
0001581A 3628 0008                  		move.w	8(a0),d3
0001581E                            
0001581E                            loc_14EBC:
0001581E 0643 000A                  		addi.w	#$A,d3
00015822 49F8 F768                  		lea	($FFFFF768).w,a4
00015826 367C 0010                  		movea.w	#$10,a3
0001582A 3C3C 0000                  		move.w	#0,d6
0001582E 7A0E                       		moveq	#$E,d5
00015830 6100 FC3C                  		bsr.w	FindWall
00015834 143C 00C0                  		move.b	#-$40,d2
00015838 6000 FF32                  		bra.w	loc_14E0A
0001583C                            
0001583C                            ; End of function sub_14EB4
0001583C                            
0001583C                            ; ---------------------------------------------------------------------------
0001583C                            ; Subroutine to	detect when an object hits a wall to its right
0001583C                            ; ---------------------------------------------------------------------------
0001583C                            
0001583C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001583C                            
0001583C                            
0001583C                            ObjHitWallRight:
0001583C D668 0008                  		add.w	8(a0),d3
00015840 3428 000C                  		move.w	$C(a0),d2
00015844 49F8 F768                  		lea	($FFFFF768).w,a4
00015848 18BC 0000                  		move.b	#0,(a4)
0001584C 367C 0010                  		movea.w	#$10,a3
00015850 3C3C 0000                  		move.w	#0,d6
00015854 7A0E                       		moveq	#$E,d5
00015856 6100 FC16                  		bsr.w	FindWall
0001585A 1638 F768                  		move.b	($FFFFF768).w,d3
0001585E 0803 0000                  		btst	#0,d3
00015862 6700                       		beq.s	locret_14F06
00015864 163C 00C0                  		move.b	#-$40,d3
00015868                            
00015868                            locret_14F06:
00015868 4E75                       		rts	
0001586A                            
0001586A                            ; End of function ObjHitWallRight
0001586A                            
0001586A                            ; ---------------------------------------------------------------------------
0001586A                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
0001586A                            ; touches them
0001586A                            ; ---------------------------------------------------------------------------
0001586A                            
0001586A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001586A                            
0001586A                            
0001586A                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
0001586A 3428 000C                  		move.w	$C(a0),d2
0001586E 3628 0008                  		move.w	8(a0),d3
00015872 7000                       		moveq	#0,d0
00015874 1028 0016                  		move.b	$16(a0),d0
00015878 4880                       		ext.w	d0
0001587A 9440                       		sub.w	d0,d2
0001587C 0A42 000F                  		eori.w	#$F,d2
00015880 1028 0017                  		move.b	$17(a0),d0
00015884 4880                       		ext.w	d0
00015886 D640                       		add.w	d0,d3
00015888 49F8 F768                  		lea	($FFFFF768).w,a4
0001588C 367C FFF0                  		movea.w	#-$10,a3
00015890 3C3C 1000                  		move.w	#$1000,d6
00015894 7A0E                       		moveq	#$E,d5
00015896 6100 FA98                  		bsr.w	FindFloor
0001589A 3F01                       		move.w	d1,-(sp)
0001589C 3428 000C                  		move.w	$C(a0),d2
000158A0 3628 0008                  		move.w	8(a0),d3
000158A4 7000                       		moveq	#0,d0
000158A6 1028 0016                  		move.b	$16(a0),d0
000158AA 4880                       		ext.w	d0
000158AC 9440                       		sub.w	d0,d2
000158AE 0A42 000F                  		eori.w	#$F,d2
000158B2 1028 0017                  		move.b	$17(a0),d0
000158B6 4880                       		ext.w	d0
000158B8 9640                       		sub.w	d0,d3
000158BA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000158BE 367C FFF0                  		movea.w	#-$10,a3
000158C2 3C3C 1000                  		move.w	#$1000,d6
000158C6 7A0E                       		moveq	#$E,d5
000158C8 6100 FA66                  		bsr.w	FindFloor
000158CC 301F                       		move.w	(sp)+,d0
000158CE 143C 0080                  		move.b	#-$80,d2
000158D2 6000 FE5E                  		bra.w	loc_14DD0
000158D6                            ; End of function Sonic_DontRunOnWalls
000158D6                            
000158D6                            ; ===========================================================================
000158D6 3428 000C                  		move.w	$C(a0),d2
000158DA 3628 0008                  		move.w	8(a0),d3
000158DE                            
000158DE                            loc_14F7C:
000158DE 0442 000A                  		subi.w	#$A,d2
000158E2 0A42 000F                  		eori.w	#$F,d2
000158E6 49F8 F768                  		lea	($FFFFF768).w,a4
000158EA 367C FFF0                  		movea.w	#-$10,a3
000158EE 3C3C 1000                  		move.w	#$1000,d6
000158F2 7A0E                       		moveq	#$E,d5
000158F4 6100 FA3A                  		bsr.w	FindFloor
000158F8 143C 0080                  		move.b	#-$80,d2
000158FC 6000 FE6E                  		bra.w	loc_14E0A
00015900                            
00015900                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015900                            
00015900                            
00015900                            ObjHitCeiling:
00015900 3428 000C                  		move.w	$C(a0),d2
00015904 3628 0008                  		move.w	8(a0),d3
00015908 7000                       		moveq	#0,d0
0001590A 1028 0016                  		move.b	$16(a0),d0
0001590E 4880                       		ext.w	d0
00015910 9440                       		sub.w	d0,d2
00015912 0A42 000F                  		eori.w	#$F,d2
00015916 49F8 F768                  		lea	($FFFFF768).w,a4
0001591A 367C FFF0                  		movea.w	#-$10,a3
0001591E 3C3C 1000                  		move.w	#$1000,d6
00015922 7A0E                       		moveq	#$E,d5
00015924 6100 FA0A                  		bsr.w	FindFloor
00015928 1638 F768                  		move.b	($FFFFF768).w,d3
0001592C 0803 0000                  		btst	#0,d3
00015930 6700                       		beq.s	locret_14FD4
00015932 163C 0080                  		move.b	#-$80,d3
00015936                            
00015936                            locret_14FD4:
00015936 4E75                       		rts	
00015938                            ; End of function ObjHitCeiling
00015938                            
00015938                            ; ===========================================================================
00015938                            
00015938                            loc_14FD6:				; XREF: sub_14D48
00015938 3428 000C                  		move.w	$C(a0),d2
0001593C 3628 0008                  		move.w	8(a0),d3
00015940 7000                       		moveq	#0,d0
00015942 1028 0017                  		move.b	$17(a0),d0
00015946 4880                       		ext.w	d0
00015948 9440                       		sub.w	d0,d2
0001594A 1028 0016                  		move.b	$16(a0),d0
0001594E 4880                       		ext.w	d0
00015950 9640                       		sub.w	d0,d3
00015952 0A43 000F                  		eori.w	#$F,d3
00015956 49F8 F768                  		lea	($FFFFF768).w,a4
0001595A 367C FFF0                  		movea.w	#-$10,a3
0001595E 3C3C 0800                  		move.w	#$800,d6
00015962 7A0E                       		moveq	#$E,d5
00015964 6100 FB08                  		bsr.w	FindWall
00015968 3F01                       		move.w	d1,-(sp)
0001596A 3428 000C                  		move.w	$C(a0),d2
0001596E 3628 0008                  		move.w	8(a0),d3
00015972 7000                       		moveq	#0,d0
00015974 1028 0017                  		move.b	$17(a0),d0
00015978 4880                       		ext.w	d0
0001597A D440                       		add.w	d0,d2
0001597C 1028 0016                  		move.b	$16(a0),d0
00015980 4880                       		ext.w	d0
00015982 9640                       		sub.w	d0,d3
00015984 0A43 000F                  		eori.w	#$F,d3
00015988 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001598C 367C FFF0                  		movea.w	#-$10,a3
00015990 3C3C 0800                  		move.w	#$800,d6
00015994 7A0E                       		moveq	#$E,d5
00015996 6100 FAD6                  		bsr.w	FindWall
0001599A 301F                       		move.w	(sp)+,d0
0001599C 143C 0040                  		move.b	#$40,d2
000159A0 6000 FD90                  		bra.w	loc_14DD0
000159A4                            
000159A4                            ; ---------------------------------------------------------------------------
000159A4                            ; Subroutine to	stop Sonic when	he jumps at a wall
000159A4                            ; ---------------------------------------------------------------------------
000159A4                            
000159A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159A4                            
000159A4                            
000159A4                            Sonic_HitWall:				; XREF: Sonic_Floor
000159A4 3428 000C                  		move.w	$C(a0),d2
000159A8 3628 0008                  		move.w	8(a0),d3
000159AC                            
000159AC                            loc_1504A:
000159AC 0443 000A                  		subi.w	#$A,d3
000159B0 0A43 000F                  		eori.w	#$F,d3
000159B4 49F8 F768                  		lea	($FFFFF768).w,a4
000159B8 367C FFF0                  		movea.w	#-$10,a3
000159BC 3C3C 0800                  		move.w	#$800,d6
000159C0 7A0E                       		moveq	#$E,d5
000159C2 6100 FAAA                  		bsr.w	FindWall
000159C6 143C 0040                  		move.b	#$40,d2
000159CA 6000 FDA0                  		bra.w	loc_14E0A
000159CE                            ; End of function Sonic_HitWall
000159CE                            
000159CE                            ; ---------------------------------------------------------------------------
000159CE                            ; Subroutine to	detect when an object hits a wall to its left
000159CE                            ; ---------------------------------------------------------------------------
000159CE                            
000159CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159CE                            
000159CE                            
000159CE                            ObjHitWallLeft:
000159CE D668 0008                  		add.w	8(a0),d3
000159D2 3428 000C                  		move.w	$C(a0),d2
000159D6 49F8 F768                  		lea	($FFFFF768).w,a4
000159DA 18BC 0000                  		move.b	#0,(a4)
000159DE 367C FFF0                  		movea.w	#-$10,a3
000159E2 3C3C 0800                  		move.w	#$800,d6
000159E6 7A0E                       		moveq	#$E,d5
000159E8 6100 FA84                  		bsr.w	FindWall
000159EC 1638 F768                  		move.b	($FFFFF768).w,d3
000159F0 0803 0000                  		btst	#0,d3
000159F4 6700                       		beq.s	locret_15098
000159F6 163C 0040                  		move.b	#$40,d3
000159FA                            
000159FA                            locret_15098:
000159FA 4E75                       		rts	
000159FC                            ; End of function ObjHitWallLeft
000159FC                            
000159FC                            ; ===========================================================================
000159FC                            ; ---------------------------------------------------------------------------
000159FC                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
000159FC                            ; ---------------------------------------------------------------------------
000159FC                            
000159FC                            Obj66:					; XREF: Obj_Index
000159FC 7000                       		moveq	#0,d0
000159FE 1028 0024                  		move.b	$24(a0),d0
00015A02 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015A06 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015A0A                            ; ===========================================================================
00015A0A 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015A0C 0000                       		dc.w Obj66_Action-Obj66_Index
00015A0E 0000                       		dc.w Obj66_Display-Obj66_Index
00015A10 0000                       		dc.w Obj66_Release-Obj66_Index
00015A12                            ; ===========================================================================
00015A12                            
00015A12                            Obj66_Main:				; XREF: Obj66_Index
00015A12 5428 0024                  		addq.b	#2,$24(a0)
00015A16 323C 0001                  		move.w	#1,d1
00015A1A 2248                       		movea.l	a0,a1
00015A1C 6000                       		bra.s	Obj66_MakeItem
00015A1E                            ; ===========================================================================
00015A1E                            
00015A1E                            Obj66_Loop:
00015A1E 6100 88CE                  		bsr.w	SingleObjLoad
00015A22 6600                       		bne.s	loc_150FE
00015A24 12BC 0066                  		move.b	#$66,0(a1)
00015A28 5829 0024                  		addq.b	#4,$24(a1)
00015A2C 3368 0008 0008             		move.w	8(a0),8(a1)
00015A32 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015A38 137C 0003 0018             		move.b	#3,$18(a1)
00015A3E 137C 0010 001A             		move.b	#$10,$1A(a1)
00015A44                            
00015A44                            Obj66_MakeItem:				; XREF: Obj66_Main
00015A44 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015A4C 337C 4348 0002             		move.w	#$4348,2(a1)
00015A52 0029 0004 0001             		ori.b	#4,1(a1)
00015A58 137C 0038 0019             		move.b	#$38,$19(a1)
00015A5E                            
00015A5E                            loc_150FE:
00015A5E 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015A62                            
00015A62 117C 0030 0019             		move.b	#$30,$19(a0)
00015A68 117C 0004 0018             		move.b	#4,$18(a0)
00015A6E 317C 003C 0030             		move.w	#$3C,$30(a0)
00015A74 117C 0001 0034             		move.b	#1,$34(a0)
00015A7A 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015A80                            
00015A80                            Obj66_Action:				; XREF: Obj66_Index
00015A80 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015A84 4A28 0001                  		tst.b	1(a0)
00015A88 6A00 0000                  		bpl.w	Obj66_Display
00015A8C 323C 0030                  		move.w	#$30,d1
00015A90 3401                       		move.w	d1,d2
00015A92 3602                       		move.w	d2,d3
00015A94 5243                       		addq.w	#1,d3
00015A96 3828 0008                  		move.w	8(a0),d4
00015A9A 6100 A79C                  		bsr.w	SolidObject
00015A9E 0828 0005 0022             		btst	#5,$22(a0)
00015AA4 6700 0000                  		beq.w	Obj66_Display
00015AA8 43F8 D000                  		lea	($FFFFD000).w,a1
00015AAC 720E                       		moveq	#$E,d1
00015AAE 3029 0008                  		move.w	8(a1),d0
00015AB2 B068 0008                  		cmp.w	8(a0),d0
00015AB6 6500                       		bcs.s	Obj66_GrabSonic
00015AB8 7207                       		moveq	#7,d1
00015ABA                            
00015ABA                            Obj66_GrabSonic:
00015ABA B228 001A                  		cmp.b	$1A(a0),d1
00015ABE 6600                       		bne.s	Obj66_Display
00015AC0 1141 0032                  		move.b	d1,$32(a0)
00015AC4 5828 0024                  		addq.b	#4,$24(a0)
00015AC8 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015ACE 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015AD4 337C 0800 0014             		move.w	#$800,$14(a1)
00015ADA 337C 0000 0010             		move.w	#0,$10(a1)
00015AE0 337C 0000 0012             		move.w	#0,$12(a1)
00015AE6 08A8 0005 0022             		bclr	#5,$22(a0)
00015AEC 08A9 0005 0022             		bclr	#5,$22(a1)
00015AF2 08E9 0001 0022             		bset	#1,$22(a1)
00015AF8 3429 0008                  		move.w	8(a1),d2
00015AFC 3629 000C                  		move.w	$C(a1),d3
00015B00 6100 0000                  		bsr.w	Obj66_ChgPos
00015B04 D569 0008                  		add.w	d2,8(a1)
00015B08 D769 000C                  		add.w	d3,$C(a1)
00015B0C E0E9 0008                  		asr	8(a1)
00015B10 E0E9 000C                  		asr	$C(a1)
00015B14                            
00015B14                            Obj66_Display:				; XREF: Obj66_Index
00015B14 6000 A3FA                  		bra.w	MarkObjGone
00015B18                            ; ===========================================================================
00015B18                            
00015B18                            Obj66_Release:				; XREF: Obj66_Index
00015B18 1028 001A                  		move.b	$1A(a0),d0
00015B1C 0C00 0004                  		cmpi.b	#4,d0
00015B20 6700                       		beq.s	loc_151C8
00015B22 0C00 0007                  		cmpi.b	#7,d0
00015B26 6600                       		bne.s	loc_151F8
00015B28                            
00015B28                            loc_151C8:
00015B28 B028 0032                  		cmp.b	$32(a0),d0
00015B2C 6700                       		beq.s	loc_151F8
00015B2E 43F8 D000                  		lea	($FFFFD000).w,a1
00015B32 337C 0000 0010             		move.w	#0,$10(a1)
00015B38 337C 0800 0012             		move.w	#$800,$12(a1)
00015B3E 0C00 0004                  		cmpi.b	#4,d0
00015B42 6700                       		beq.s	loc_151F0
00015B44 337C 0800 0010             		move.w	#$800,$10(a1)
00015B4A 337C 0800 0012             		move.w	#$800,$12(a1)
00015B50                            
00015B50                            loc_151F0:
00015B50 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015B54 5928 0024                  		subq.b	#4,$24(a0)
00015B58                            
00015B58                            loc_151F8:
00015B58 6100                       		bsr.s	Obj66_ChkSwitch
00015B5A 6100                       		bsr.s	Obj66_ChgPos
00015B5C 6000 A3B2                  		bra.w	MarkObjGone
00015B60                            
00015B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B60                            
00015B60                            
00015B60                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015B60 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015B64 7000                       		moveq	#0,d0
00015B66 1028 0038                  		move.b	$38(a0),d0
00015B6A 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015B70 6700                       		beq.s	loc_15224	; if not, branch
00015B72 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015B76 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015B78 4428 0034                  		neg.b	$34(a0)
00015B7C 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015B82 6000                       		bra.s	Obj66_Animate
00015B84                            ; ===========================================================================
00015B84                            
00015B84                            loc_15224:
00015B84 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015B88                            
00015B88                            Obj66_Animate:
00015B88 5328 001E                  		subq.b	#1,$1E(a0)
00015B8C 6A00                       		bpl.s	locret_15246
00015B8E 117C 0007 001E             		move.b	#7,$1E(a0)
00015B94 1228 0034                  		move.b	$34(a0),d1
00015B98 1028 001A                  		move.b	$1A(a0),d0
00015B9C D001                       		add.b	d1,d0
00015B9E 0200 000F                  		andi.b	#$F,d0
00015BA2 1140 001A                  		move.b	d0,$1A(a0)
00015BA6                            
00015BA6                            locret_15246:
00015BA6 4E75                       		rts	
00015BA8                            ; End of function Obj66_ChkSwitch
00015BA8                            
00015BA8                            
00015BA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BA8                            
00015BA8                            
00015BA8                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015BA8 43F8 D000                  		lea	($FFFFD000).w,a1
00015BAC 7000                       		moveq	#0,d0
00015BAE 1028 001A                  		move.b	$1A(a0),d0
00015BB2 D040                       		add.w	d0,d0
00015BB4 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015BB8 101A                       		move.b	(a2)+,d0
00015BBA 4880                       		ext.w	d0
00015BBC D068 0008                  		add.w	8(a0),d0
00015BC0 3340 0008                  		move.w	d0,8(a1)
00015BC4 101A                       		move.b	(a2)+,d0
00015BC6 4880                       		ext.w	d0
00015BC8 D068 000C                  		add.w	$C(a0),d0
00015BCC 3340 000C                  		move.w	d0,$C(a1)
00015BD0 4E75                       		rts	
00015BD2                            ; End of function Obj66_ChgPos
00015BD2                            
00015BD2                            ; ===========================================================================
00015BD2 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015BD6 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015BDA 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015BDE 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015BE2 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015BE6 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015BEA 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015BEE E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015BF2                            ; ---------------------------------------------------------------------------
00015BF2                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015BF2                            ; ---------------------------------------------------------------------------
00015BF2                            Map_obj66:
00015BF2                            	include "_maps\obj66.asm"
00015BF2                            ; ---------------------------------------------------------------------------
00015BF2                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015BF2                            ; ---------------------------------------------------------------------------
00015BF2 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015BF6 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015BFA 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015BFE 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015C02 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015C06 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015C0A 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015C0E 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015C12 0000                       		dc.w byte_154A4-Map_obj66
00015C14 06                         byte_152B4:	dc.b 6
00015C15 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015C1A 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015C1F E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015C24 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015C29 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015C2E 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015C33 06                         byte_152D3:	dc.b 6
00015C34 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015C39 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015C3E F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015C43 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015C48 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015C4D 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015C52 06                         byte_152F2:	dc.b 6
00015C53 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015C58 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015C5D 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015C62 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015C67 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015C6C 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015C71 06                         byte_15311:	dc.b 6
00015C72 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015C77 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015C7C 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015C81 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015C86 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015C8B 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015C90 06                         byte_15330:	dc.b 6
00015C91 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015C96 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015C9B 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015CA0 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015CA5 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015CAA 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015CAF 06                         byte_1534F:	dc.b 6
00015CB0 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015CB5 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015CBA 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015CBF 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015CC4 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015CC9 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015CCE 06                         byte_1536E:	dc.b 6
00015CCF 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015CD4 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015CD9 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015CDE 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015CE3 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015CE8 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015CED 06                         byte_1538D:	dc.b 6
00015CEE 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015CF3 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015CF8 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015CFD F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015D02 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015D07 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015D0C 06                         byte_153AC:	dc.b 6
00015D0D E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015D12 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015D17 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015D1C E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015D21 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015D26 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015D2B 06                         byte_153CB:	dc.b 6
00015D2C D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015D31 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015D36 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015D3B DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015D40 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015D45 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015D4A 06                         byte_153EA:	dc.b 6
00015D4B D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015D50 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015D55 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015D5A D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015D5F E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015D64 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015D69 06                         byte_15409:	dc.b 6
00015D6A D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015D6F D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015D74 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015D79 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015D7E E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015D83 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015D88 06                         byte_15428:	dc.b 6
00015D89 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015D8E D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015D93 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015D98 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015D9D E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015DA2 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015DA7 06                         byte_15447:	dc.b 6
00015DA8 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015DAD D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015DB2 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015DB7 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015DBC E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015DC1 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015DC6 06                         byte_15466:	dc.b 6
00015DC7 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015DCC D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015DD1 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015DD6 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015DDB E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015DE0 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015DE5 06                         byte_15485:	dc.b 6
00015DE6 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015DEB D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015DF0 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015DF5 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015DFA F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015DFF F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015E04 0C                         byte_154A4:	dc.b $C
00015E05 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015E0A D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015E0F E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015E14 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015E19 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015E1E E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015E23 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015E28 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015E2D 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015E32 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015E37 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015E3C 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015E42 00                         		even
00015E42 00                         		even
00015E42                            
00015E42                            ; ===========================================================================
00015E42                            ; ---------------------------------------------------------------------------
00015E42                            ; Object 67 - disc that	you run	around (SBZ)
00015E42                            ; ---------------------------------------------------------------------------
00015E42                            
00015E42                            Obj67:					; XREF: Obj_Index
00015E42 7000                       		moveq	#0,d0
00015E44 1028 0024                  		move.b	$24(a0),d0
00015E48 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015E4C 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015E50                            ; ===========================================================================
00015E50 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015E52 0000                       		dc.w Obj67_Action-Obj67_Index
00015E54                            ; ===========================================================================
00015E54                            
00015E54                            Obj67_Main:				; XREF: Obj67_Index
00015E54 5428 0024                  		addq.b	#2,$24(a0)
00015E58 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015E60 317C C344 0002             		move.w	#$C344,2(a0)
00015E66 117C 0004 0001             		move.b	#4,1(a0)
00015E6C 117C 0004 0018             		move.b	#4,$18(a0)
00015E72 117C 0008 0019             		move.b	#8,$19(a0)
00015E78 3168 0008 0032             		move.w	8(a0),$32(a0)
00015E7E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015E84 117C 0018 0034             		move.b	#$18,$34(a0)
00015E8A 117C 0048 0038             		move.b	#$48,$38(a0)
00015E90 1228 0028                  		move.b	$28(a0),d1	; get object type
00015E94 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015E98 6700                       		beq.s	loc_15546
00015E9A 117C 0010 0034             		move.b	#$10,$34(a0)
00015EA0 117C 0038 0038             		move.b	#$38,$38(a0)
00015EA6                            
00015EA6                            loc_15546:
00015EA6 1228 0028                  		move.b	$28(a0),d1	; get object type
00015EAA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015EAE 4881                       		ext.w	d1
00015EB0 E741                       		asl.w	#3,d1
00015EB2 3141 0036                  		move.w	d1,$36(a0)
00015EB6 1028 0022                  		move.b	$22(a0),d0
00015EBA E418                       		ror.b	#2,d0
00015EBC 0200 00C0                  		andi.b	#-$40,d0
00015EC0 1140 0026                  		move.b	d0,$26(a0)
00015EC4                            
00015EC4                            Obj67_Action:				; XREF: Obj67_Index
00015EC4 6100 0000                  		bsr.w	Obj67_MoveSonic
00015EC8 6100 0000                  		bsr.w	Obj67_MoveSpot
00015ECC 6000 0000                  		bra.w	Obj67_ChkDel
00015ED0                            ; ===========================================================================
00015ED0                            
00015ED0                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015ED0 7400                       		moveq	#0,d2
00015ED2 1428 0038                  		move.b	$38(a0),d2
00015ED6 3602                       		move.w	d2,d3
00015ED8 D643                       		add.w	d3,d3
00015EDA 43F8 D000                  		lea	($FFFFD000).w,a1
00015EDE 3029 0008                  		move.w	8(a1),d0
00015EE2 9068 0032                  		sub.w	$32(a0),d0
00015EE6 D042                       		add.w	d2,d0
00015EE8 B043                       		cmp.w	d3,d0
00015EEA 6400                       		bcc.s	loc_155A8
00015EEC 3229 000C                  		move.w	$C(a1),d1
00015EF0 9268 0030                  		sub.w	$30(a0),d1
00015EF4 D242                       		add.w	d2,d1
00015EF6 B243                       		cmp.w	d3,d1
00015EF8 6400                       		bcc.s	loc_155A8
00015EFA 0829 0001 0022             		btst	#1,$22(a1)
00015F00 6700                       		beq.s	loc_155B8
00015F02 4228 003A                  		clr.b	$3A(a0)
00015F06 4E75                       		rts	
00015F08                            ; ===========================================================================
00015F08                            
00015F08                            loc_155A8:
00015F08 4A28 003A                  		tst.b	$3A(a0)
00015F0C 6700                       		beq.s	locret_155B6
00015F0E 4229 0038                  		clr.b	$38(a1)
00015F12 4228 003A                  		clr.b	$3A(a0)
00015F16                            
00015F16                            locret_155B6:
00015F16 4E75                       		rts	
00015F18                            ; ===========================================================================
00015F18                            
00015F18                            loc_155B8:
00015F18 4A28 003A                  		tst.b	$3A(a0)
00015F1C 6600                       		bne.s	loc_155E2
00015F1E 117C 0001 003A             		move.b	#1,$3A(a0)
00015F24 0829 0002 0022             		btst	#2,$22(a1)
00015F2A 6600                       		bne.s	loc_155D0
00015F2C 4229 001C                  		clr.b	$1C(a1)
00015F30                            
00015F30                            loc_155D0:
00015F30 08A9 0005 0022             		bclr	#5,$22(a1)
00015F36 137C 0001 001D             		move.b	#1,$1D(a1)
00015F3C 137C 0001 0038             		move.b	#1,$38(a1)
00015F42                            
00015F42                            loc_155E2:
00015F42 3029 0014                  		move.w	$14(a1),d0
00015F46 4A68 0036                  		tst.w	$36(a0)
00015F4A 6A00                       		bpl.s	loc_15608
00015F4C 0C40 FC00                  		cmpi.w	#-$400,d0
00015F50 6F00                       		ble.s	loc_155FA
00015F52 337C FC00 0014             		move.w	#-$400,$14(a1)
00015F58 4E75                       		rts	
00015F5A                            ; ===========================================================================
00015F5A                            
00015F5A                            loc_155FA:
00015F5A 0C40 F100                  		cmpi.w	#-$F00,d0
00015F5E 6C00                       		bge.s	locret_15606
00015F60 337C F100 0014             		move.w	#-$F00,$14(a1)
00015F66                            
00015F66                            locret_15606:
00015F66 4E75                       		rts	
00015F68                            ; ===========================================================================
00015F68                            
00015F68                            loc_15608:
00015F68 0C40 0400                  		cmpi.w	#$400,d0
00015F6C 6C00                       		bge.s	loc_15616
00015F6E 337C 0400 0014             		move.w	#$400,$14(a1)
00015F74 4E75                       		rts	
00015F76                            ; ===========================================================================
00015F76                            
00015F76                            loc_15616:
00015F76 0C40 0F00                  		cmpi.w	#$F00,d0
00015F7A 6F00                       		ble.s	locret_15622
00015F7C 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015F82                            
00015F82                            locret_15622:
00015F82 4E75                       		rts	
00015F84                            ; ===========================================================================
00015F84                            
00015F84                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015F84 3028 0036                  		move.w	$36(a0),d0
00015F88 D168 0026                  		add.w	d0,$26(a0)
00015F8C 1028 0026                  		move.b	$26(a0),d0
00015F90 4EB9 0000 2B40             		jsr	(CalcSine).l
00015F96 3428 0030                  		move.w	$30(a0),d2
00015F9A 3628 0032                  		move.w	$32(a0),d3
00015F9E 7800                       		moveq	#0,d4
00015FA0 1828 0034                  		move.b	$34(a0),d4
00015FA4 E14C                       		lsl.w	#8,d4
00015FA6 2A04                       		move.l	d4,d5
00015FA8 C9C0                       		muls.w	d0,d4
00015FAA 4844                       		swap	d4
00015FAC CBC1                       		muls.w	d1,d5
00015FAE 4845                       		swap	d5
00015FB0 D842                       		add.w	d2,d4
00015FB2 DA43                       		add.w	d3,d5
00015FB4 3144 000C                  		move.w	d4,$C(a0)
00015FB8 3145 0008                  		move.w	d5,8(a0)
00015FBC 4E75                       		rts	
00015FBE                            ; ===========================================================================
00015FBE                            
00015FBE                            Obj67_ChkDel:				; XREF: Obj67_Action
00015FBE 3028 0032                  		move.w	$32(a0),d0
00015FC2 0240 FF80                  		andi.w	#-$80,d0
00015FC6 3238 F700                  		move.w	($FFFFF700).w,d1
00015FCA 0441 0080                  		subi.w	#$80,d1
00015FCE 0241 FF80                  		andi.w	#-$80,d1
00015FD2 9041                       		sub.w	d1,d0
00015FD4 0C40 0280                  		cmpi.w	#$280,d0
00015FD8 6200                       		bhi.s	Obj67_Delete
00015FDA 4EF9 0000 DE68             		jmp	DisplaySprite
00015FE0                            ; ===========================================================================
00015FE0                            
00015FE0                            Obj67_Delete:
00015FE0 4EF9 0000 DEA4             		jmp	DeleteObject
00015FE6                            ; ===========================================================================
00015FE6                            ; ---------------------------------------------------------------------------
00015FE6                            ; Sprite mappings - disc that you run around (SBZ)
00015FE6                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015FE6                            ; part of the level tiles.)
00015FE6                            ; ---------------------------------------------------------------------------
00015FE6                            Map_obj67:
00015FE6                            	include "_maps\obj67.asm"
00015FE6                            ; ---------------------------------------------------------------------------
00015FE6                            ; Sprite mappings - disc that you run around (SBZ)
00015FE6                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015FE6                            ; part of the level tiles.)
00015FE6                            ; ---------------------------------------------------------------------------
00015FE6 0000                       		dc.w byte_15688-Map_obj67
00015FE8 01                         byte_15688:	dc.b 1
00015FE9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015FEE                            		even
00015FEE                            		even
00015FEE                            
00015FEE                            ; ===========================================================================
00015FEE                            ; ---------------------------------------------------------------------------
00015FEE                            ; Object 68 - conveyor belts (SBZ)
00015FEE                            ; ---------------------------------------------------------------------------
00015FEE                            
00015FEE                            Obj68:					; XREF: Obj_Index
00015FEE 7000                       		moveq	#0,d0
00015FF0 1028 0024                  		move.b	$24(a0),d0
00015FF4 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015FF8 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015FFC                            ; ===========================================================================
00015FFC 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015FFE 0000                       		dc.w Obj68_Action-Obj68_Index
00016000                            ; ===========================================================================
00016000                            
00016000                            Obj68_Main:				; XREF: Obj68_Index
00016000 5428 0024                  		addq.b	#2,$24(a0)
00016004 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
0001600A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001600E 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016012 6700                       		beq.s	loc_156BA	; if zero, branch
00016014 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
0001601A                            
0001601A                            loc_156BA:
0001601A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001601E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016022 4881                       		ext.w	d1
00016024 E841                       		asr.w	#4,d1
00016026 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
0001602A                            
0001602A                            Obj68_Action:				; XREF: Obj68_Index
0001602A 6100                       		bsr.s	Obj68_MoveSonic
0001602C 3028 0008                  		move.w	8(a0),d0
00016030 0240 FF80                  		andi.w	#$FF80,d0
00016034 3238 F700                  		move.w	($FFFFF700).w,d1
00016038 0441 0080                  		subi.w	#$80,d1
0001603C 0241 FF80                  		andi.w	#$FF80,d1
00016040 9041                       		sub.w	d1,d0
00016042 0C40 0280                  		cmpi.w	#$280,d0
00016046 6200                       		bhi.s	Obj68_Delete
00016048 4E75                       		rts	
0001604A                            ; ===========================================================================
0001604A                            
0001604A                            Obj68_Delete:
0001604A 4EF9 0000 DEA4             		jmp	DeleteObject
00016050                            ; ===========================================================================
00016050                            
00016050                            Obj68_MoveSonic:			; XREF: Obj68_Action
00016050 7400                       		moveq	#0,d2
00016052 1428 0038                  		move.b	$38(a0),d2
00016056 3602                       		move.w	d2,d3
00016058 D643                       		add.w	d3,d3
0001605A 43F8 D000                  		lea	($FFFFD000).w,a1
0001605E 3029 0008                  		move.w	8(a1),d0
00016062 9068 0008                  		sub.w	8(a0),d0
00016066 D042                       		add.w	d2,d0
00016068 B043                       		cmp.w	d3,d0
0001606A 6400                       		bcc.s	locret_1572E
0001606C 3229 000C                  		move.w	$C(a1),d1
00016070 9268 000C                  		sub.w	$C(a0),d1
00016074 0641 0030                  		addi.w	#$30,d1
00016078 0C41 0030                  		cmpi.w	#$30,d1
0001607C 6400                       		bcc.s	locret_1572E
0001607E 0829 0001 0022             		btst	#1,$22(a1)
00016084 6600                       		bne.s	locret_1572E
00016086 3028 0036                  		move.w	$36(a0),d0
0001608A D169 0008                  		add.w	d0,8(a1)
0001608E                            
0001608E                            locret_1572E:
0001608E 4E75                       		rts	
00016090                            
00016090                            ; ===========================================================================
00016090                            ; ---------------------------------------------------------------------------
00016090                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00016090                            ; ---------------------------------------------------------------------------
00016090                            
00016090                            Obj69:					; XREF: Obj_Index
00016090 7000                       		moveq	#0,d0
00016092 1028 0024                  		move.b	$24(a0),d0
00016096 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
0001609A 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
0001609E                            ; ===========================================================================
0001609E 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
000160A0 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
000160A2 0000                       		dc.w Obj69_Spinner-Obj69_Index
000160A4                            ; ===========================================================================
000160A4                            
000160A4                            Obj69_Main:				; XREF: Obj69_Index
000160A4 5428 0024                  		addq.b	#2,$24(a0)
000160A8 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000160B0 317C 4492 0002             		move.w	#$4492,2(a0)
000160B6 0028 0004 0001             		ori.b	#4,1(a0)
000160BC 117C 0080 0019             		move.b	#$80,$19(a0)
000160C2 7000                       		moveq	#0,d0
000160C4 1028 0028                  		move.b	$28(a0),d0
000160C8 0240 000F                  		andi.w	#$F,d0
000160CC C0FC 003C                  		mulu.w	#$3C,d0
000160D0 3140 0032                  		move.w	d0,$32(a0)
000160D4 4A28 0028                  		tst.b	$28(a0)
000160D8 6A00                       		bpl.s	Obj69_Trapdoor
000160DA 5428 0024                  		addq.b	#2,$24(a0)
000160DE 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000160E6 317C 04DF 0002             		move.w	#$4DF,2(a0)
000160EC 117C 0010 0019             		move.b	#$10,$19(a0)
000160F2 117C 0002 001C             		move.b	#2,$1C(a0)
000160F8 7000                       		moveq	#0,d0
000160FA 1028 0028                  		move.b	$28(a0),d0	; get object type
000160FE 3200                       		move.w	d0,d1
00016100 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016104 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00016108 3140 0030                  		move.w	d0,$30(a0)	; set time delay
0001610C 3140 0032                  		move.w	d0,$32(a0)
00016110 0241 0070                  		andi.w	#$70,d1
00016114 0641 0010                  		addi.w	#$10,d1
00016118 E549                       		lsl.w	#2,d1
0001611A 5341                       		subq.w	#1,d1
0001611C 3141 0036                  		move.w	d1,$36(a0)
00016120 6000                       		bra.s	Obj69_Spinner
00016122                            ; ===========================================================================
00016122                            
00016122                            Obj69_Trapdoor:				; XREF: Obj69_Index
00016122 5368 0030                  		subq.w	#1,$30(a0)
00016126 6A00                       		bpl.s	Obj69_Animate
00016128 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001612E 0868 0000 001C             		bchg	#0,$1C(a0)
00016134 4A28 0001                  		tst.b	1(a0)
00016138 6A00                       		bpl.s	Obj69_Animate
0001613A 303C 00BB                  		move.w	#$BB,d0
0001613E 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play door sound
00016144                            
00016144                            Obj69_Animate:
00016144 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001614A 4EB9 0000 AEB6             		jsr	AnimateSprite
00016150 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00016154 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00016156 323C 004B                  		move.w	#$4B,d1
0001615A 343C 000C                  		move.w	#$C,d2
0001615E 3602                       		move.w	d2,d3
00016160 5243                       		addq.w	#1,d3
00016162 3828 0008                  		move.w	8(a0),d4
00016166 6100 A0D0                  		bsr.w	SolidObject
0001616A 6000 9DA4                  		bra.w	MarkObjGone
0001616E                            ; ===========================================================================
0001616E                            
0001616E                            Obj69_NotSolid:
0001616E 0828 0003 0022             		btst	#3,$22(a0)
00016174 6700                       		beq.s	Obj69_Display
00016176 43F8 D000                  		lea	($FFFFD000).w,a1
0001617A 08A9 0003 0022             		bclr	#3,$22(a1)
00016180 08A8 0003 0022             		bclr	#3,$22(a0)
00016186 4228 0025                  		clr.b	$25(a0)
0001618A                            
0001618A                            Obj69_Display:
0001618A 6000 9D84                  		bra.w	MarkObjGone
0001618E                            ; ===========================================================================
0001618E                            
0001618E                            Obj69_Spinner:				; XREF: Obj69_Index
0001618E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016192 C068 0036                  		and.w	$36(a0),d0
00016196 6600                       		bne.s	Obj69_Delay
00016198 117C 0001 0034             		move.b	#1,$34(a0)
0001619E                            
0001619E                            Obj69_Delay:
0001619E 4A28 0034                  		tst.b	$34(a0)
000161A2 6700                       		beq.s	Obj69_Animate2
000161A4 5368 0030                  		subq.w	#1,$30(a0)
000161A8 6A00                       		bpl.s	Obj69_Animate2
000161AA 3168 0032 0030             		move.w	$32(a0),$30(a0)
000161B0 4228 0034                  		clr.b	$34(a0)
000161B4 0868 0000 001C             		bchg	#0,$1C(a0)
000161BA                            
000161BA                            Obj69_Animate2:
000161BA 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000161C0 4EB9 0000 AEB6             		jsr	AnimateSprite
000161C6 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000161CA 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000161CC 323C 001B                  		move.w	#$1B,d1
000161D0 343C 0007                  		move.w	#7,d2
000161D4 3602                       		move.w	d2,d3
000161D6 5243                       		addq.w	#1,d3
000161D8 3828 0008                  		move.w	8(a0),d4
000161DC 6100 A05A                  		bsr.w	SolidObject
000161E0 6000 9D2E                  		bra.w	MarkObjGone
000161E4                            ; ===========================================================================
000161E4                            
000161E4                            Obj69_NotSolid2:
000161E4 0828 0003 0022             		btst	#3,$22(a0)
000161EA 6700                       		beq.s	Obj69_Display2
000161EC 43F8 D000                  		lea	($FFFFD000).w,a1
000161F0 08A9 0003 0022             		bclr	#3,$22(a1)
000161F6 08A8 0003 0022             		bclr	#3,$22(a0)
000161FC 4228 0025                  		clr.b	$25(a0)
00016200                            
00016200                            Obj69_Display2:
00016200 6000 9D0E                  		bra.w	MarkObjGone
00016204                            ; ===========================================================================
00016204                            Ani_obj69:
00016204                            	include "_anim\obj69.asm"
00016204                            ; ---------------------------------------------------------------------------
00016204                            ; Animation script - trapdoor (SBZ)
00016204                            ; ---------------------------------------------------------------------------
00016204 0000                       		dc.w byte_158AC-Ani_obj69
00016206 0000                       		dc.w byte_158B2-Ani_obj69
00016208 0000                       		dc.w byte_158B8-Ani_obj69
0001620A 0000                       		dc.w byte_158CC-Ani_obj69
0001620C 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00016212 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00016218 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016225 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001622C 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016239 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016240                            		even
00016240                            		even
00016240                            
00016240                            ; ---------------------------------------------------------------------------
00016240                            ; Sprite mappings - trapdoor (SBZ)
00016240                            ; ---------------------------------------------------------------------------
00016240                            Map_obj69:
00016240                            	include "_maps\obj69.asm"
00016240                            ; ---------------------------------------------------------------------------
00016240                            ; Sprite mappings - trapdoor (SBZ)
00016240                            ; ---------------------------------------------------------------------------
00016240 0000                       		dc.w byte_158E6-Map_obj69
00016242 0000                       		dc.w byte_158FB-Map_obj69
00016244 0000                       		dc.w byte_15924-Map_obj69
00016246 04                         byte_158E6:	dc.b 4
00016247 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001624C F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016251 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00016256 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0001625B 08                         byte_158FB:	dc.b 8
0001625C F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00016261 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00016266 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0001626B 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016270 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016275 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001627A 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001627F 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016284 04                         byte_15924:	dc.b 4
00016285 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001628A 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001628F 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016294 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001629A 00                         		even
0001629A 00                         		even
0001629A                            
0001629A                            ; ---------------------------------------------------------------------------
0001629A                            ; Sprite mappings - spinning platforms (SBZ)
0001629A                            ; ---------------------------------------------------------------------------
0001629A                            Map_obj69a:
0001629A                            	include "_maps\obj69a.asm"
0001629A                            ; ---------------------------------------------------------------------------
0001629A                            ; Sprite mappings - spinning platforms (SBZ)
0001629A                            ; ---------------------------------------------------------------------------
0001629A 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
0001629E 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
000162A2 0000                       		dc.w byte_15970-Map_obj69a
000162A4 02                         byte_15944:	dc.b 2
000162A5 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000162AA F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000162AF 02                         byte_1594F:	dc.b 2
000162B0 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000162B5 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000162BA 02                         byte_1595A:	dc.b 2
000162BB F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000162C0 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000162C5 02                         byte_15965:	dc.b 2
000162C6 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000162CB 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000162D0 02                         byte_15970:	dc.b 2
000162D1 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000162D6 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000162DC 00                         		even
000162DC 00                         		even
000162DC                            
000162DC                            ; ===========================================================================
000162DC                            ; ---------------------------------------------------------------------------
000162DC                            ; Object 6A - ground saws and pizza cutters (SBZ)
000162DC                            ; ---------------------------------------------------------------------------
000162DC                            
000162DC                            Obj6A:					; XREF: Obj_Index
000162DC 7000                       		moveq	#0,d0
000162DE 1028 0024                  		move.b	$24(a0),d0
000162E2 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000162E6 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000162EA                            ; ===========================================================================
000162EA 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000162EC 0000                       		dc.w Obj6A_Action-Obj6A_Index
000162EE                            ; ===========================================================================
000162EE                            
000162EE                            Obj6A_Main:				; XREF: Obj6A_Index
000162EE 5428 0024                  		addq.b	#2,$24(a0)
000162F2 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000162FA 317C 43B5 0002             		move.w	#$43B5,2(a0)
00016300 117C 0004 0001             		move.b	#4,1(a0)
00016306 117C 0004 0018             		move.b	#4,$18(a0)
0001630C 117C 0020 0019             		move.b	#$20,$19(a0)
00016312 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016318 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001631E 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016324 6400                       		bcc.s	Obj6A_Action
00016326 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001632C                            
0001632C                            Obj6A_Action:				; XREF: Obj6A_Index
0001632C 7000                       		moveq	#0,d0
0001632E 1028 0028                  		move.b	$28(a0),d0
00016332 0240 0007                  		andi.w	#7,d0
00016336 D040                       		add.w	d0,d0
00016338 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
0001633C 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016340 3028 003A                  		move.w	$3A(a0),d0
00016344 0240 FF80                  		andi.w	#$FF80,d0
00016348 3238 F700                  		move.w	($FFFFF700).w,d1
0001634C 0441 0080                  		subi.w	#$80,d1
00016350 0241 FF80                  		andi.w	#$FF80,d1
00016354 9041                       		sub.w	d1,d0
00016356 0C40 0280                  		cmpi.w	#$280,d0
0001635A 6200                       		bhi.s	Obj6A_Delete
0001635C 4EF9 0000 DE68             		jmp	DisplaySprite
00016362                            ; ===========================================================================
00016362                            
00016362                            Obj6A_Delete:
00016362 4EF9 0000 DEA4             		jmp	DeleteObject
00016368                            ; ===========================================================================
00016368 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
0001636C 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016370 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016372                            ; ===========================================================================
00016372                            
00016372                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016372 4E75                       		rts	
00016374                            ; ===========================================================================
00016374                            
00016374                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016374 323C 0060                  		move.w	#$60,d1
00016378 7000                       		moveq	#0,d0
0001637A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001637E 0828 0000 0022             		btst	#0,$22(a0)
00016384 6700                       		beq.s	Obj6A_Animate01
00016386 4440                       		neg.w	d0
00016388 D041                       		add.w	d1,d0
0001638A                            
0001638A                            Obj6A_Animate01:
0001638A 3228 003A                  		move.w	$3A(a0),d1
0001638E 9240                       		sub.w	d0,d1
00016390 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016394 5328 001E                  		subq.b	#1,$1E(a0)
00016398 6A00                       		bpl.s	loc_15A46
0001639A 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
000163A0 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000163A6                            
000163A6                            loc_15A46:
000163A6 4A28 0001                  		tst.b	1(a0)
000163AA 6A00                       		bpl.s	locret_15A60
000163AC 3038 FE04                  		move.w	($FFFFFE04).w,d0
000163B0 0240 000F                  		andi.w	#$F,d0
000163B4 6600                       		bne.s	locret_15A60
000163B6 303C 00B0                  		move.w	#$B0,d0
000163BA 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play saw sound
000163C0                            
000163C0                            locret_15A60:
000163C0 4E75                       		rts	
000163C2                            ; ===========================================================================
000163C2                            
000163C2                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
000163C2 323C 0030                  		move.w	#$30,d1
000163C6 7000                       		moveq	#0,d0
000163C8 1038 FE64                  		move.b	($FFFFFE64).w,d0
000163CC 0828 0000 0022             		btst	#0,$22(a0)
000163D2 6700                       		beq.s	Obj6A_Animate02
000163D4 4440                       		neg.w	d0
000163D6 0640 0080                  		addi.w	#$80,d0
000163DA                            
000163DA                            Obj6A_Animate02:
000163DA 3228 0038                  		move.w	$38(a0),d1
000163DE 9240                       		sub.w	d0,d1
000163E0 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000163E4 5328 001E                  		subq.b	#1,$1E(a0)
000163E8 6A00                       		bpl.s	loc_15A96
000163EA 117C 0002 001E             		move.b	#2,$1E(a0)
000163F0 0868 0000 001A             		bchg	#0,$1A(a0)
000163F6                            
000163F6                            loc_15A96:
000163F6 4A28 0001                  		tst.b	1(a0)
000163FA 6A00                       		bpl.s	locret_15AB0
000163FC 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016400 0C00 0018                  		cmpi.b	#$18,d0
00016404 6600                       		bne.s	locret_15AB0
00016406 303C 00B0                  		move.w	#$B0,d0
0001640A 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play saw sound
00016410                            
00016410                            locret_15AB0:
00016410 4E75                       		rts	
00016412                            ; ===========================================================================
00016412                            
00016412                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00016412 4A28 003D                  		tst.b	$3D(a0)
00016416 6600                       		bne.s	Obj6A_Animate03
00016418 3038 D008                  		move.w	($FFFFD008).w,d0
0001641C 0440 00C0                  		subi.w	#$C0,d0
00016420 6500                       		bcs.s	loc_15B02
00016422 9068 0008                  		sub.w	8(a0),d0
00016426 6500                       		bcs.s	loc_15B02
00016428 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001642C 0440 0080                  		subi.w	#$80,d0
00016430 B068 000C                  		cmp.w	$C(a0),d0
00016434 6400                       		bcc.s	locret_15B04
00016436 0640 0100                  		addi.w	#$100,d0
0001643A B068 000C                  		cmp.w	$C(a0),d0
0001643E 6500                       		bcs.s	locret_15B04
00016440 117C 0001 003D             		move.b	#1,$3D(a0)
00016446 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
0001644C 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016452 117C 0002 001A             		move.b	#2,$1A(a0)
00016458 303C 00B0                  		move.w	#$B0,d0
0001645C 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play saw sound
00016462                            
00016462                            loc_15B02:
00016462 588F                       		addq.l	#4,sp
00016464                            
00016464                            locret_15B04:
00016464 4E75                       		rts	
00016466                            ; ===========================================================================
00016466                            
00016466                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00016466 4EB9 0000 DE42             		jsr	SpeedToPos
0001646C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016472 5328 001E                  		subq.b	#1,$1E(a0)
00016476 6A00                       		bpl.s	locret_15B24
00016478 117C 0002 001E             		move.b	#2,$1E(a0)
0001647E 0868 0000 001A             		bchg	#0,$1A(a0)
00016484                            
00016484                            locret_15B24:
00016484 4E75                       		rts	
00016486                            ; ===========================================================================
00016486                            
00016486                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016486 4A28 003D                  		tst.b	$3D(a0)
0001648A 6600                       		bne.s	Obj6A_Animate04
0001648C 3038 D008                  		move.w	($FFFFD008).w,d0
00016490 0640 00E0                  		addi.w	#$E0,d0
00016494 9068 0008                  		sub.w	8(a0),d0
00016498 6400                       		bcc.s	loc_15B74
0001649A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001649E 0440 0080                  		subi.w	#$80,d0
000164A2 B068 000C                  		cmp.w	$C(a0),d0
000164A6 6400                       		bcc.s	locret_15B76
000164A8 0640 0100                  		addi.w	#$100,d0
000164AC B068 000C                  		cmp.w	$C(a0),d0
000164B0 6500                       		bcs.s	locret_15B76
000164B2 117C 0001 003D             		move.b	#1,$3D(a0)
000164B8 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
000164BE 117C 00A2 0020             		move.b	#$A2,$20(a0)
000164C4 117C 0002 001A             		move.b	#2,$1A(a0)
000164CA 303C 00B0                  		move.w	#$B0,d0
000164CE 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play saw sound
000164D4                            
000164D4                            loc_15B74:
000164D4 588F                       		addq.l	#4,sp
000164D6                            
000164D6                            locret_15B76:
000164D6 4E75                       		rts	
000164D8                            ; ===========================================================================
000164D8                            
000164D8                            Obj6A_Animate04:
000164D8 4EB9 0000 DE42             		jsr	SpeedToPos
000164DE 3168 0008 003A             		move.w	8(a0),$3A(a0)
000164E4 5328 001E                  		subq.b	#1,$1E(a0)
000164E8 6A00                       		bpl.s	locret_15B96
000164EA 117C 0002 001E             		move.b	#2,$1E(a0)
000164F0 0868 0000 001A             		bchg	#0,$1A(a0)
000164F6                            
000164F6                            locret_15B96:
000164F6 4E75                       		rts	
000164F8                            ; ===========================================================================
000164F8                            ; ---------------------------------------------------------------------------
000164F8                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000164F8                            ; ---------------------------------------------------------------------------
000164F8                            Map_obj6A:
000164F8                            	include "_maps\obj6A.asm"
000164F8                            ; ---------------------------------------------------------------------------
000164F8                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000164F8                            ; ---------------------------------------------------------------------------
000164F8 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000164FC 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016500 07                         byte_15BA0:	dc.b 7
00016501 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016506 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001650B E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016510 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016515 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001651A 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001651F 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016524 07                         byte_15BC4:	dc.b 7
00016525 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001652A D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001652F E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016534 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016539 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001653E 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016543 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016548 04                         byte_15BE8:	dc.b 4
00016549 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001654E E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016553 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016558 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001655D 04                         byte_15BFD:	dc.b 4
0001655E E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016563 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016568 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001656D 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016572                            		even
00016572                            		even
00016572                            
00016572                            ; ===========================================================================
00016572                            ; ---------------------------------------------------------------------------
00016572                            ; Object 6B - stomper (SBZ)
00016572                            ; ---------------------------------------------------------------------------
00016572                            
00016572                            Obj6B:					; XREF: Obj_Index
00016572 7000                       		moveq	#0,d0
00016574 1028 0024                  		move.b	$24(a0),d0
00016578 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
0001657C 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016580                            ; ===========================================================================
00016580 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016582 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016584                            
00016584 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016588 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001658C 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016590 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016594 8040 0005                  		dc.b  $80, $40,	  0,   5
00016598                            ; ===========================================================================
00016598                            
00016598                            Obj6B_Main:				; XREF: Obj6B_Index
00016598 5428 0024                  		addq.b	#2,$24(a0)
0001659C 7000                       		moveq	#0,d0
0001659E 1028 0028                  		move.b	$28(a0),d0
000165A2 E448                       		lsr.w	#2,d0
000165A4 0240 001C                  		andi.w	#$1C,d0
000165A8 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
000165AC 115B 0019                  		move.b	(a3)+,$19(a0)
000165B0 115B 0016                  		move.b	(a3)+,$16(a0)
000165B4 E448                       		lsr.w	#2,d0
000165B6 1140 001A                  		move.b	d0,$1A(a0)
000165BA 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000165C2 317C 22C0 0002             		move.w	#$22C0,2(a0)
000165C8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000165CE 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000165D0 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000165D6 6700                       		beq.s	Obj6B_SBZ3
000165D8                            
000165D8                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000165D8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000165DC 7000                       		moveq	#0,d0
000165DE 1028 0023                  		move.b	$23(a0),d0
000165E2 6700                       		beq.s	Obj6B_Delete
000165E4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000165EA                            
000165EA                            Obj6B_Delete:
000165EA 4EF9 0000 DEA4             		jmp	DeleteObject
000165F0                            ; ===========================================================================
000165F0                            
000165F0                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000165F0 317C 41F0 0002             		move.w	#$41F0,2(a0)
000165F6 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
000165FC 6600                       		bne.s	Obj6B_SBZ12
000165FE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016602 7000                       		moveq	#0,d0
00016604 1028 0023                  		move.b	$23(a0),d0
00016608 6700                       		beq.s	Obj6B_SBZ12
0001660A 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016610 6700                       		beq.s	Obj6B_SBZ12
00016612 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016616 60C0                       		bra.s	Obj6B_ChkGone
00016618                            ; ===========================================================================
00016618                            
00016618                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016618 0028 0004 0001             		ori.b	#4,1(a0)
0001661E 117C 0004 0018             		move.b	#4,$18(a0)
00016624 3168 0008 0034             		move.w	8(a0),$34(a0)
0001662A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016630 7000                       		moveq	#0,d0
00016632 101B                       		move.b	(a3)+,d0
00016634 3140 003C                  		move.w	d0,$3C(a0)
00016638 7000                       		moveq	#0,d0
0001663A 1028 0028                  		move.b	$28(a0),d0
0001663E 6A00                       		bpl.s	Obj6B_Action
00016640 0200 000F                  		andi.b	#$F,d0
00016644 1140 003E                  		move.b	d0,$3E(a0)
00016648 1153 0028                  		move.b	(a3),$28(a0)
0001664C 0C13 0005                  		cmpi.b	#5,(a3)
00016650 6600                       		bne.s	Obj6B_ChkGone2
00016652 08E8 0004 0001             		bset	#4,1(a0)
00016658                            
00016658                            Obj6B_ChkGone2:
00016658 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001665C 7000                       		moveq	#0,d0
0001665E 1028 0023                  		move.b	$23(a0),d0
00016662 6700                       		beq.s	Obj6B_Action
00016664 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001666A                            
0001666A                            Obj6B_Action:				; XREF: Obj6B_Index
0001666A 3F28 0008                  		move.w	8(a0),-(sp)
0001666E 7000                       		moveq	#0,d0
00016670 1028 0028                  		move.b	$28(a0),d0
00016674 0240 000F                  		andi.w	#$F,d0
00016678 D040                       		add.w	d0,d0
0001667A 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
0001667E 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016682 381F                       		move.w	(sp)+,d4
00016684 4A28 0001                  		tst.b	1(a0)
00016688 6A00                       		bpl.s	Obj6B_ChkDel
0001668A 7200                       		moveq	#0,d1
0001668C 1228 0019                  		move.b	$19(a0),d1
00016690 0641 000B                  		addi.w	#$B,d1
00016694 7400                       		moveq	#0,d2
00016696 1428 0016                  		move.b	$16(a0),d2
0001669A 3602                       		move.w	d2,d3
0001669C 5243                       		addq.w	#1,d3
0001669E 6100 9B98                  		bsr.w	SolidObject
000166A2                            
000166A2                            Obj6B_ChkDel:
000166A2 3028 0034                  		move.w	$34(a0),d0
000166A6 0240 FF80                  		andi.w	#$FF80,d0
000166AA 3238 F700                  		move.w	($FFFFF700).w,d1
000166AE 0441 0080                  		subi.w	#$80,d1
000166B2 0241 FF80                  		andi.w	#$FF80,d1
000166B6 9041                       		sub.w	d1,d0
000166B8 0C40 0280                  		cmpi.w	#$280,d0
000166BC 6200                       		bhi.s	loc_15D64
000166BE 4EF9 0000 DE68             		jmp	DisplaySprite
000166C4                            ; ===========================================================================
000166C4                            
000166C4                            loc_15D64:
000166C4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000166CA 6600                       		bne.s	Obj6B_Delete2
000166CC 4238 F7CB                  		clr.b	($FFFFF7CB).w
000166D0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000166D4 7000                       		moveq	#0,d0
000166D6 1028 0023                  		move.b	$23(a0),d0
000166DA 6700                       		beq.s	Obj6B_Delete2
000166DC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000166E2                            
000166E2                            Obj6B_Delete2:
000166E2 4EF9 0000 DEA4             		jmp	DeleteObject
000166E8                            ; ===========================================================================
000166E8 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
000166EC 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
000166F0 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
000166F4                            ; ===========================================================================
000166F4                            
000166F4                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
000166F4 4E75                       		rts	
000166F6                            ; ===========================================================================
000166F6                            
000166F6                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
000166F6 4A28 0038                  		tst.b	$38(a0)
000166FA 6600                       		bne.s	loc_15DB4
000166FC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016700 7000                       		moveq	#0,d0
00016702 1028 003E                  		move.b	$3E(a0),d0
00016706 0832 0000 0000             		btst	#0,(a2,d0.w)
0001670C 6700                       		beq.s	loc_15DC2
0001670E 117C 0001 0038             		move.b	#1,$38(a0)
00016714                            
00016714                            loc_15DB4:
00016714 3028 003C                  		move.w	$3C(a0),d0
00016718 B068 003A                  		cmp.w	$3A(a0),d0
0001671C 6700                       		beq.s	loc_15DE0
0001671E 5468 003A                  		addq.w	#2,$3A(a0)
00016722                            
00016722                            loc_15DC2:
00016722 3028 003A                  		move.w	$3A(a0),d0
00016726 0828 0000 0022             		btst	#0,$22(a0)
0001672C 6700                       		beq.s	loc_15DD4
0001672E 4440                       		neg.w	d0
00016730 0640 0080                  		addi.w	#$80,d0
00016734                            
00016734                            loc_15DD4:
00016734 3228 0034                  		move.w	$34(a0),d1
00016738 9240                       		sub.w	d0,d1
0001673A 3141 0008                  		move.w	d1,8(a0)
0001673E 4E75                       		rts	
00016740                            ; ===========================================================================
00016740                            
00016740                            loc_15DE0:
00016740 5228 0028                  		addq.b	#1,$28(a0)
00016744 317C 00B4 0036             		move.w	#$B4,$36(a0)
0001674A 4228 0038                  		clr.b	$38(a0)
0001674E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016752 7000                       		moveq	#0,d0
00016754 1028 0023                  		move.b	$23(a0),d0
00016758 67C8                       		beq.s	loc_15DC2
0001675A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016760 60C0                       		bra.s	loc_15DC2
00016762                            ; ===========================================================================
00016762                            
00016762                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016762 4A28 0038                  		tst.b	$38(a0)
00016766 6600                       		bne.s	loc_15E14
00016768 5368 0036                  		subq.w	#1,$36(a0)
0001676C 6600                       		bne.s	loc_15E1E
0001676E 117C 0001 0038             		move.b	#1,$38(a0)
00016774                            
00016774                            loc_15E14:
00016774 4A68 003A                  		tst.w	$3A(a0)
00016778 6700                       		beq.s	loc_15E3C
0001677A 5568 003A                  		subq.w	#2,$3A(a0)
0001677E                            
0001677E                            loc_15E1E:
0001677E 3028 003A                  		move.w	$3A(a0),d0
00016782 0828 0000 0022             		btst	#0,$22(a0)
00016788 6700                       		beq.s	loc_15E30
0001678A 4440                       		neg.w	d0
0001678C 0640 0080                  		addi.w	#$80,d0
00016790                            
00016790                            loc_15E30:
00016790 3228 0034                  		move.w	$34(a0),d1
00016794 9240                       		sub.w	d0,d1
00016796 3141 0008                  		move.w	d1,8(a0)
0001679A 4E75                       		rts	
0001679C                            ; ===========================================================================
0001679C                            
0001679C                            loc_15E3C:
0001679C 5328 0028                  		subq.b	#1,$28(a0)
000167A0 4228 0038                  		clr.b	$38(a0)
000167A4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167A8 7000                       		moveq	#0,d0
000167AA 1028 0023                  		move.b	$23(a0),d0
000167AE 67CE                       		beq.s	loc_15E1E
000167B0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000167B6 60C6                       		bra.s	loc_15E1E
000167B8                            ; ===========================================================================
000167B8                            
000167B8                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
000167B8 4A28 0038                  		tst.b	$38(a0)
000167BC 6600                       		bne.s	loc_15E7C
000167BE 4A68 003A                  		tst.w	$3A(a0)
000167C2 6700                       		beq.s	loc_15E6A
000167C4 5368 003A                  		subq.w	#1,$3A(a0)
000167C8 6000                       		bra.s	loc_15E8E
000167CA                            ; ===========================================================================
000167CA                            
000167CA                            loc_15E6A:
000167CA 5368 0036                  		subq.w	#1,$36(a0)
000167CE 6A00                       		bpl.s	loc_15E8E
000167D0 317C 003C 0036             		move.w	#$3C,$36(a0)
000167D6 117C 0001 0038             		move.b	#1,$38(a0)
000167DC                            
000167DC                            loc_15E7C:
000167DC 5068 003A                  		addq.w	#8,$3A(a0)
000167E0 3028 003A                  		move.w	$3A(a0),d0
000167E4 B068 003C                  		cmp.w	$3C(a0),d0
000167E8 6600                       		bne.s	loc_15E8E
000167EA 4228 0038                  		clr.b	$38(a0)
000167EE                            
000167EE                            loc_15E8E:
000167EE 3028 003A                  		move.w	$3A(a0),d0
000167F2 0828 0000 0022             		btst	#0,$22(a0)
000167F8 6700                       		beq.s	loc_15EA0
000167FA 4440                       		neg.w	d0
000167FC 0640 0038                  		addi.w	#$38,d0
00016800                            
00016800                            loc_15EA0:
00016800 3228 0030                  		move.w	$30(a0),d1
00016804 D240                       		add.w	d0,d1
00016806 3141 000C                  		move.w	d1,$C(a0)
0001680A 4E75                       		rts	
0001680C                            ; ===========================================================================
0001680C                            
0001680C                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
0001680C 4A28 0038                  		tst.b	$38(a0)
00016810 6600                       		bne.s	loc_15ED0
00016812 4A68 003A                  		tst.w	$3A(a0)
00016816 6700                       		beq.s	loc_15EBE
00016818 5168 003A                  		subq.w	#8,$3A(a0)
0001681C 6000                       		bra.s	loc_15EF0
0001681E                            ; ===========================================================================
0001681E                            
0001681E                            loc_15EBE:
0001681E 5368 0036                  		subq.w	#1,$36(a0)
00016822 6A00                       		bpl.s	loc_15EF0
00016824 317C 003C 0036             		move.w	#$3C,$36(a0)
0001682A 117C 0001 0038             		move.b	#1,$38(a0)
00016830                            
00016830                            loc_15ED0:
00016830 3028 003A                  		move.w	$3A(a0),d0
00016834 B068 003C                  		cmp.w	$3C(a0),d0
00016838 6700                       		beq.s	loc_15EE0
0001683A 5068 003A                  		addq.w	#8,$3A(a0)
0001683E 6000                       		bra.s	loc_15EF0
00016840                            ; ===========================================================================
00016840                            
00016840                            loc_15EE0:
00016840 5368 0036                  		subq.w	#1,$36(a0)
00016844 6A00                       		bpl.s	loc_15EF0
00016846 317C 003C 0036             		move.w	#$3C,$36(a0)
0001684C 4228 0038                  		clr.b	$38(a0)
00016850                            
00016850                            loc_15EF0:
00016850 3028 003A                  		move.w	$3A(a0),d0
00016854 0828 0000 0022             		btst	#0,$22(a0)
0001685A 6700                       		beq.s	loc_15F02
0001685C 4440                       		neg.w	d0
0001685E 0640 0038                  		addi.w	#$38,d0
00016862                            
00016862                            loc_15F02:
00016862 3228 0030                  		move.w	$30(a0),d1
00016866 D240                       		add.w	d0,d1
00016868 3141 000C                  		move.w	d1,$C(a0)
0001686C 4E75                       		rts	
0001686E                            ; ===========================================================================
0001686E                            
0001686E                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
0001686E 4A28 0038                  		tst.b	$38(a0)
00016872 6600                       		bne.s	loc_15F3E
00016874 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016878 7000                       		moveq	#0,d0
0001687A 1028 003E                  		move.b	$3E(a0),d0
0001687E 0832 0000 0000             		btst	#0,(a2,d0.w)
00016884 6700                       		beq.s	locret_15F5C
00016886 117C 0001 0038             		move.b	#1,$38(a0)
0001688C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016890 7000                       		moveq	#0,d0
00016892 1028 0023                  		move.b	$23(a0),d0
00016896 6700                       		beq.s	loc_15F3E
00016898 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001689E                            
0001689E                            loc_15F3E:
0001689E 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
000168A6 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
000168AE 3168 0008 0034             		move.w	8(a0),$34(a0)
000168B4 0C68 0980 0008             		cmpi.w	#$980,8(a0)
000168BA 6700                       		beq.s	loc_15F5E
000168BC                            
000168BC                            locret_15F5C:
000168BC 4E75                       		rts	
000168BE                            ; ===========================================================================
000168BE                            
000168BE                            loc_15F5E:
000168BE 4228 0028                  		clr.b	$28(a0)
000168C2 4228 0038                  		clr.b	$38(a0)
000168C6 4E75                       		rts	
000168C8                            ; ===========================================================================
000168C8                            ; ---------------------------------------------------------------------------
000168C8                            ; Sprite mappings - stomper and	platforms (SBZ)
000168C8                            ; ---------------------------------------------------------------------------
000168C8                            Map_obj6B:
000168C8                            	include "_maps\obj6B.asm"
000168C8                            ; ---------------------------------------------------------------------------
000168C8                            ; Sprite mappings - stomper and	platforms (SBZ)
000168C8                            ; ---------------------------------------------------------------------------
000168C8 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
000168CC 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
000168D0 0000                       		dc.w byte_15FB0-Map_obj6B
000168D2 04                         byte_15F72:	dc.b 4
000168D3 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
000168D8 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
000168DD F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000168E2 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
000168E7 08                         byte_15F87:	dc.b 8
000168E8 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
000168ED E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000168F2 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000168F7 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
000168FC 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016901 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016906 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
0001690B 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016910 0E                         byte_15FB0:	dc.b $E
00016911 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016916 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
0001691B C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016920 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016925 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
0001692A C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
0001692F C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016934 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016939 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
0001693E E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016943 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016948 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
0001694D 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016952 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016958 00                         		even
00016958 00                         		even
00016958                            
00016958                            ; ===========================================================================
00016958                            ; ---------------------------------------------------------------------------
00016958                            ; Object 6C - vanishing	platforms (SBZ)
00016958                            ; ---------------------------------------------------------------------------
00016958                            
00016958                            Obj6C:					; XREF: Obj_Index
00016958 7000                       		moveq	#0,d0
0001695A 1028 0024                  		move.b	$24(a0),d0
0001695E 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016962 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016966                            ; ===========================================================================
00016966 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016968 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001696A 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001696C 0000                       		dc.w loc_16068-Obj6C_Index
0001696E                            ; ===========================================================================
0001696E                            
0001696E                            Obj6C_Main:				; XREF: Obj6C_Index
0001696E 5C28 0024                  		addq.b	#6,$24(a0)
00016972 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
0001697A 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016980 0028 0004 0001             		ori.b	#4,1(a0)
00016986 117C 0010 0019             		move.b	#$10,$19(a0)
0001698C 117C 0004 0018             		move.b	#4,$18(a0)
00016992 7000                       		moveq	#0,d0
00016994 1028 0028                  		move.b	$28(a0),d0	; get object type
00016998 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001699C 5240                       		addq.w	#1,d0		; add 1
0001699E EF48                       		lsl.w	#7,d0		; multiply by $80
000169A0 3200                       		move.w	d0,d1
000169A2 5340                       		subq.w	#1,d0
000169A4 3140 0030                  		move.w	d0,$30(a0)
000169A8 3140 0032                  		move.w	d0,$32(a0)
000169AC 7000                       		moveq	#0,d0
000169AE 1028 0028                  		move.b	$28(a0),d0	; get object type
000169B2 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000169B6 0641 0080                  		addi.w	#$80,d1
000169BA C0C1                       		mulu.w	d1,d0
000169BC E088                       		lsr.l	#8,d0
000169BE 3140 0036                  		move.w	d0,$36(a0)
000169C2 5341                       		subq.w	#1,d1
000169C4 3141 0038                  		move.w	d1,$38(a0)
000169C8                            
000169C8                            loc_16068:				; XREF: Obj6C_Index
000169C8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000169CC 9068 0036                  		sub.w	$36(a0),d0
000169D0 C068 0038                  		and.w	$38(a0),d0
000169D4 6600                       		bne.s	Obj6C_Animate
000169D6 5928 0024                  		subq.b	#4,$24(a0)
000169DA 6000                       		bra.s	Obj6C_Vanish
000169DC                            ; ===========================================================================
000169DC                            
000169DC                            Obj6C_Animate:
000169DC 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000169E2 4EB9 0000 AEB6             		jsr	AnimateSprite
000169E8 6000 9526                  		bra.w	MarkObjGone
000169EC                            ; ===========================================================================
000169EC                            
000169EC                            Obj6C_Vanish:				; XREF: Obj6C_Index
000169EC 5368 0030                  		subq.w	#1,$30(a0)
000169F0 6A00                       		bpl.s	loc_160AA
000169F2 317C 007F 0030             		move.w	#127,$30(a0)
000169F8 4A28 001C                  		tst.b	$1C(a0)
000169FC 6700                       		beq.s	loc_160A4
000169FE 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016A04                            
00016A04                            loc_160A4:
00016A04 0868 0000 001C             		bchg	#0,$1C(a0)
00016A0A                            
00016A0A                            loc_160AA:
00016A0A 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016A10 4EB9 0000 AEB6             		jsr	AnimateSprite
00016A16 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016A1C 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016A1E 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016A24 6600                       		bne.s	loc_160D6
00016A26 7200                       		moveq	#0,d1
00016A28 1228 0019                  		move.b	$19(a0),d1
00016A2C 4EB9 0000 7A72             		jsr	(PlatformObject).l
00016A32 6000 94DC                  		bra.w	MarkObjGone
00016A36                            ; ===========================================================================
00016A36                            
00016A36                            loc_160D6:
00016A36 7200                       		moveq	#0,d1
00016A38 1228 0019                  		move.b	$19(a0),d1
00016A3C 4EB9 0000 7BE6             		jsr	(ExitPlatform).l
00016A42 3428 0008                  		move.w	8(a0),d2
00016A46 4EB9 0000 8150             		jsr	(MvSonicOnPtfm2).l
00016A4C 6000 94C2                  		bra.w	MarkObjGone
00016A50                            ; ===========================================================================
00016A50                            
00016A50                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016A50 0828 0003 0022             		btst	#3,$22(a0)
00016A56 6700                       		beq.s	Obj6C_Display
00016A58 43F8 D000                  		lea	($FFFFD000).w,a1
00016A5C 08A9 0003 0022             		bclr	#3,$22(a1)
00016A62 08A8 0003 0022             		bclr	#3,$22(a0)
00016A68 117C 0002 0024             		move.b	#2,$24(a0)
00016A6E 4228 0025                  		clr.b	$25(a0)
00016A72                            
00016A72                            Obj6C_Display:
00016A72 6000 949C                  		bra.w	MarkObjGone
00016A76                            ; ===========================================================================
00016A76                            Ani_obj6C:
00016A76                            	include "_anim\obj6C.asm"
00016A76                            ; ---------------------------------------------------------------------------
00016A76                            ; Animation script - vanishing platforms (SBZ)
00016A76                            ; ---------------------------------------------------------------------------
00016A76 0000                       		dc.w byte_1611A-Ani_obj6C
00016A78 0000                       		dc.w byte_16122-Ani_obj6C
00016A7A 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016A82 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016A8A                            		even
00016A8A                            		even
00016A8A                            
00016A8A                            ; ---------------------------------------------------------------------------
00016A8A                            ; Sprite mappings - vanishing platforms	(SBZ)
00016A8A                            ; ---------------------------------------------------------------------------
00016A8A                            Map_obj6C:
00016A8A                            	include "_maps\obj6C.asm"
00016A8A                            ; ---------------------------------------------------------------------------
00016A8A                            ; Sprite mappings - vanishing platforms	(SBZ)
00016A8A                            ; ---------------------------------------------------------------------------
00016A8A 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016A8E 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016A92 01                         byte_16132:	dc.b 1
00016A93 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016A98 01                         byte_16138:	dc.b 1
00016A99 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016A9E 01                         byte_1613E:	dc.b 1
00016A9F F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016AA4 00                         byte_16144:	dc.b 0
00016AA6 00                         		even
00016AA6 00                         		even
00016AA6                            
00016AA6                            ; ===========================================================================
00016AA6                            ; ---------------------------------------------------------------------------
00016AA6                            ; Object 6E - electrocution orbs (SBZ)
00016AA6                            ; ---------------------------------------------------------------------------
00016AA6                            
00016AA6                            Obj6E:					; XREF: Obj_Index
00016AA6 7000                       		moveq	#0,d0
00016AA8 1028 0024                  		move.b	$24(a0),d0
00016AAC 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016AB0 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016AB4                            ; ===========================================================================
00016AB4 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016AB6 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016AB8                            ; ===========================================================================
00016AB8                            
00016AB8                            Obj6E_Main:				; XREF: Obj6E_Index
00016AB8 5428 0024                  		addq.b	#2,$24(a0)
00016ABC 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016AC4 317C 047E 0002             		move.w	#$47E,2(a0)
00016ACA 0028 0004 0001             		ori.b	#4,1(a0)
00016AD0 117C 0028 0019             		move.b	#$28,$19(a0)
00016AD6 7000                       		moveq	#0,d0
00016AD8 1028 0028                  		move.b	$28(a0),d0	; read object type
00016ADC E948                       		lsl.w	#4,d0		; multiply by $10
00016ADE 5340                       		subq.w	#1,d0
00016AE0 3140 0034                  		move.w	d0,$34(a0)
00016AE4                            
00016AE4                            Obj6E_Shock:				; XREF: Obj6E_Index
00016AE4 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016AE8 C068 0034                  		and.w	$34(a0),d0
00016AEC 6600                       		bne.s	Obj6E_Animate
00016AEE 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016AF4 4A28 0001                  		tst.b	1(a0)
00016AF8 6A00                       		bpl.s	Obj6E_Animate
00016AFA 303C 00B1                  		move.w	#$B1,d0
00016AFE 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play electricity sound
00016B04                            
00016B04                            Obj6E_Animate:
00016B04 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016B0A 4EB9 0000 AEB6             		jsr	AnimateSprite
00016B10 117C 0000 0020             		move.b	#0,$20(a0)
00016B16 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016B1C 6600                       		bne.s	Obj6E_Display	; if not, branch
00016B1E 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016B24                            
00016B24                            Obj6E_Display:
00016B24 6000 93EA                  		bra.w	MarkObjGone
00016B28                            ; ===========================================================================
00016B28                            Ani_obj6E:
00016B28                            	include "_anim\obj6E.asm"
00016B28                            ; ---------------------------------------------------------------------------
00016B28                            ; Animation script - electrocution orbs (SBZ)
00016B28                            ; ---------------------------------------------------------------------------
00016B28 0000                       		dc.w byte_161CC-Ani_obj6E
00016B2A 0000                       		dc.w byte_161D0-Ani_obj6E
00016B2C 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016B30 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016B40                            		even
00016B40                            		even
00016B40                            
00016B40                            ; ---------------------------------------------------------------------------
00016B40                            ; Sprite mappings - electrocution orbs (SBZ)
00016B40                            ; ---------------------------------------------------------------------------
00016B40                            Map_obj6E:
00016B40                            	include "_maps\obj6E.asm"
00016B40                            Map_26ed:
00016B40 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016B42 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016B44 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016B46 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016B48 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016B4A 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016B4C 01                         Map_26ed_C: 	dc.b $1
00016B4D 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016B52 02                         Map_26ed_12: 	dc.b $2
00016B53 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B58 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B5D 06                         Map_26ed_1D: 	dc.b $6
00016B5E F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B63 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B68 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016B6D F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016B72 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016B77 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016B7C 08                         Map_26ed_3C: 	dc.b $8
00016B7D F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B82 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B87 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016B8C F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016B91 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016B96 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016B9B F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016BA0 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016BA5 06                         Map_26ed_65: 	dc.b $6
00016BA6 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016BAB 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016BB0 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016BB5 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016BBA F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016BBF F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016BC4 04                         Map_26ed_84: 	dc.b $4
00016BC5 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016BCA 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016BCF F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016BD4 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016BDA 00                         	even
00016BDA 00                         	even
00016BDA                            
00016BDA                            ; ===========================================================================
00016BDA                            ; ---------------------------------------------------------------------------
00016BDA                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016BDA                            ; ---------------------------------------------------------------------------
00016BDA                            
00016BDA                            Obj6F:					; XREF: Obj_Index
00016BDA 7000                       		moveq	#0,d0
00016BDC 1028 0024                  		move.b	$24(a0),d0
00016BE0 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016BE4 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016BE8 3028 0030                  		move.w	$30(a0),d0
00016BEC 0240 FF80                  		andi.w	#$FF80,d0
00016BF0 3238 F700                  		move.w	($FFFFF700).w,d1
00016BF4 0441 0080                  		subi.w	#$80,d1
00016BF8 0241 FF80                  		andi.w	#$FF80,d1
00016BFC 9041                       		sub.w	d1,d0
00016BFE 0C40 0280                  		cmpi.w	#$280,d0
00016C02 6200                       		bhi.s	loc_1629A
00016C04                            
00016C04                            Obj6F_Display:
00016C04 4EF9 0000 DE68             		jmp	DisplaySprite
00016C0A                            ; ===========================================================================
00016C0A                            
00016C0A                            loc_1629A:
00016C0A 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016C10 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016C12 0C40 FF80                  		cmpi.w	#-$80,d0
00016C16 64EC                       		bcc.s	Obj6F_Display
00016C18                            
00016C18                            Obj6F_Act1or2:
00016C18 1028 002F                  		move.b	$2F(a0),d0
00016C1C 6A00                       		bpl.s	Obj6F_Delete
00016C1E 0240 007F                  		andi.w	#$7F,d0
00016C22 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016C26 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016C2C                            
00016C2C                            Obj6F_Delete:
00016C2C 4EF9 0000 DEA4             		jmp	DeleteObject
00016C32                            ; ===========================================================================
00016C32 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016C34 0000                       		dc.w loc_163D8-Obj6F_Index
00016C36                            ; ===========================================================================
00016C36                            
00016C36                            Obj6F_Main:				; XREF: Obj6F_Index
00016C36 1028 0028                  		move.b	$28(a0),d0
00016C3A 6B00 0000                  		bmi.w	loc_16380
00016C3E 5428 0024                  		addq.b	#2,$24(a0)
00016C42 217C 0001 629A 0004        		move.l	#Map_obj69a,4(a0)
00016C4A 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016C50 117C 0010 0019             		move.b	#$10,$19(a0)
00016C56 0028 0004 0001             		ori.b	#4,1(a0)
00016C5C 117C 0004 0018             		move.b	#4,$18(a0)
00016C62 7000                       		moveq	#0,d0
00016C64 1028 0028                  		move.b	$28(a0),d0
00016C68 3200                       		move.w	d0,d1
00016C6A E648                       		lsr.w	#3,d0
00016C6C 0240 001E                  		andi.w	#$1E,d0
00016C70 45FA 0000                  		lea	off_164A6(pc),a2
00016C74 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016C78 315A 0038                  		move.w	(a2)+,$38(a0)
00016C7C 315A 0030                  		move.w	(a2)+,$30(a0)
00016C80 214A 003C                  		move.l	a2,$3C(a0)
00016C84 0241 000F                  		andi.w	#$F,d1
00016C88 E549                       		lsl.w	#2,d1
00016C8A 1141 0038                  		move.b	d1,$38(a0)
00016C8E 117C 0004 003A             		move.b	#4,$3A(a0)
00016C94 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016C98 6700                       		beq.s	loc_16356
00016C9A 117C 0001 003B             		move.b	#1,$3B(a0)
00016CA0 4428 003A                  		neg.b	$3A(a0)
00016CA4 7200                       		moveq	#0,d1
00016CA6 1228 0038                  		move.b	$38(a0),d1
00016CAA D228 003A                  		add.b	$3A(a0),d1
00016CAE B228 0039                  		cmp.b	$39(a0),d1
00016CB2 6500                       		bcs.s	loc_16352
00016CB4 1001                       		move.b	d1,d0
00016CB6 7200                       		moveq	#0,d1
00016CB8 4A00                       		tst.b	d0
00016CBA 6A00                       		bpl.s	loc_16352
00016CBC 1228 0039                  		move.b	$39(a0),d1
00016CC0 5901                       		subq.b	#4,d1
00016CC2                            
00016CC2                            loc_16352:
00016CC2 1141 0038                  		move.b	d1,$38(a0)
00016CC6                            
00016CC6                            loc_16356:
00016CC6 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016CCC 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016CD2 4A41                       		tst.w	d1
00016CD4 6600                       		bne.s	loc_1636C
00016CD6 117C 0001 001C             		move.b	#1,$1C(a0)
00016CDC                            
00016CDC                            loc_1636C:
00016CDC 0C41 0008                  		cmpi.w	#8,d1
00016CE0 6600                       		bne.s	loc_16378
00016CE2 117C 0000 001C             		move.b	#0,$1C(a0)
00016CE8                            
00016CE8                            loc_16378:
00016CE8 6100 C0C0                  		bsr.w	Obj63_ChangeDir
00016CEC 6000 0000                  		bra.w	loc_163D8
00016CF0                            ; ===========================================================================
00016CF0                            
00016CF0                            loc_16380:				; XREF: Obj6F_Main
00016CF0 1140 002F                  		move.b	d0,$2F(a0)
00016CF4 0240 007F                  		andi.w	#$7F,d0
00016CF8 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016CFC 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016D02 6700                       		beq.s	loc_1639A
00016D04 4EF9 0000 DEA4             		jmp	DeleteObject
00016D0A                            ; ===========================================================================
00016D0A                            
00016D0A                            loc_1639A:
00016D0A D040                       		add.w	d0,d0
00016D0C 0240 001E                  		andi.w	#$1E,d0
00016D10 45F9 0000 0000             		lea	(ObjPos_SBZ1pf_Index).l,a2
00016D16 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016D1A 321A                       		move.w	(a2)+,d1
00016D1C 2248                       		movea.l	a0,a1
00016D1E 6000                       		bra.s	Obj6F_LoadPform
00016D20                            ; ===========================================================================
00016D20                            
00016D20                            Obj6F_Loop:
00016D20 4EB9 0000 E2EE             		jsr	SingleObjLoad
00016D26 6600                       		bne.s	loc_163D0
00016D28                            
00016D28                            Obj6F_LoadPform:			; XREF: loc_1639A
00016D28 12BC 006F                  		move.b	#$6F,0(a1)
00016D2C 335A 0008                  		move.w	(a2)+,8(a1)
00016D30 335A 000C                  		move.w	(a2)+,$C(a1)
00016D34 301A                       		move.w	(a2)+,d0
00016D36 1340 0028                  		move.b	d0,$28(a1)
00016D3A                            
00016D3A                            loc_163D0:
00016D3A 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016D3E                            
00016D3E 588F                       		addq.l	#4,sp
00016D40 4E75                       		rts	
00016D42                            ; ===========================================================================
00016D42                            
00016D42                            loc_163D8:				; XREF: Obj6F_Index
00016D42 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016D48 4EB9 0000 AEB6             		jsr	AnimateSprite
00016D4E 4A28 001A                  		tst.b	$1A(a0)
00016D52 6600                       		bne.s	loc_16404
00016D54 3F28 0008                  		move.w	8(a0),-(sp)
00016D58 6100 0000                  		bsr.w	loc_16424
00016D5C 323C 001B                  		move.w	#$1B,d1
00016D60 343C 0007                  		move.w	#7,d2
00016D64 3602                       		move.w	d2,d3
00016D66 5243                       		addq.w	#1,d3
00016D68 381F                       		move.w	(sp)+,d4
00016D6A 6000 94CC                  		bra.w	SolidObject
00016D6E                            ; ===========================================================================
00016D6E                            
00016D6E                            loc_16404:
00016D6E 0828 0003 0022             		btst	#3,$22(a0)
00016D74 6700                       		beq.s	loc_16420
00016D76 43F8 D000                  		lea	($FFFFD000).w,a1
00016D7A 08A9 0003 0022             		bclr	#3,$22(a1)
00016D80 08A8 0003 0022             		bclr	#3,$22(a0)
00016D86 4228 0025                  		clr.b	$25(a0)
00016D8A                            
00016D8A                            loc_16420:
00016D8A 6000 0002                  		bra.w	*+4
00016D8E                            
00016D8E                            loc_16424:
00016D8E 3028 0008                  		move.w	8(a0),d0
00016D92 B068 0034                  		cmp.w	$34(a0),d0
00016D96 6600                       		bne.s	loc_16484
00016D98 3028 000C                  		move.w	$C(a0),d0
00016D9C B068 0036                  		cmp.w	$36(a0),d0
00016DA0 6600                       		bne.s	loc_16484
00016DA2 7200                       		moveq	#0,d1
00016DA4 1228 0038                  		move.b	$38(a0),d1
00016DA8 D228 003A                  		add.b	$3A(a0),d1
00016DAC B228 0039                  		cmp.b	$39(a0),d1
00016DB0 6500                       		bcs.s	loc_16456
00016DB2 1001                       		move.b	d1,d0
00016DB4 7200                       		moveq	#0,d1
00016DB6 4A00                       		tst.b	d0
00016DB8 6A00                       		bpl.s	loc_16456
00016DBA 1228 0039                  		move.b	$39(a0),d1
00016DBE 5901                       		subq.b	#4,d1
00016DC0                            
00016DC0                            loc_16456:
00016DC0 1141 0038                  		move.b	d1,$38(a0)
00016DC4 2268 003C                  		movea.l	$3C(a0),a1
00016DC8 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016DCE 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016DD4 4A41                       		tst.w	d1
00016DD6 6600                       		bne.s	loc_16474
00016DD8 117C 0001 001C             		move.b	#1,$1C(a0)
00016DDE                            
00016DDE                            loc_16474:
00016DDE 0C41 0008                  		cmpi.w	#8,d1
00016DE2 6600                       		bne.s	loc_16480
00016DE4 117C 0000 001C             		move.b	#0,$1C(a0)
00016DEA                            
00016DEA                            loc_16480:
00016DEA 6100 BFBE                  		bsr.w	Obj63_ChangeDir
00016DEE                            
00016DEE                            loc_16484:
00016DEE 4EF9 0000 DE42             		jmp	SpeedToPos
00016DF4                            ; ===========================================================================
00016DF4                            Ani_obj6F:
00016DF4                            	include "_anim\obj6F.asm"
00016DF4                            ; ---------------------------------------------------------------------------
00016DF4                            ; Animation script - platform on conveyor belt (SBZ)
00016DF4                            ; ---------------------------------------------------------------------------
00016DF4 0000                       		dc.w byte_1648E-Ani_obj6F
00016DF6 0000                       		dc.w byte_164A2-Ani_obj6F
00016DF8 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016E05 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016E0C 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016E10 00                         		even
00016E10 00                         		even
00016E10                            
00016E10 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016E16 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016E1C 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016E30 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016E44 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016E58 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016E6C 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016E80 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016E94                            ; ===========================================================================
00016E94                            ; ---------------------------------------------------------------------------
00016E94                            ; Object 70 - large girder block (SBZ)
00016E94                            ; ---------------------------------------------------------------------------
00016E94                            
00016E94                            Obj70:					; XREF: Obj_Index
00016E94 7000                       		moveq	#0,d0
00016E96 1028 0024                  		move.b	$24(a0),d0
00016E9A 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016E9E 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016EA2                            ; ===========================================================================
00016EA2 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016EA4 0000                       		dc.w Obj70_Action-Obj70_Index
00016EA6                            ; ===========================================================================
00016EA6                            
00016EA6                            Obj70_Main:				; XREF: Obj70_Index
00016EA6 5428 0024                  		addq.b	#2,$24(a0)
00016EAA 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016EB2 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016EB8 0028 0004 0001             		ori.b	#4,1(a0)
00016EBE 117C 0004 0018             		move.b	#4,$18(a0)
00016EC4 117C 0060 0019             		move.b	#$60,$19(a0)
00016ECA 117C 0018 0016             		move.b	#$18,$16(a0)
00016ED0 3168 0008 0032             		move.w	8(a0),$32(a0)
00016ED6 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016EDC 6100 0000                  		bsr.w	Obj70_Move2
00016EE0                            
00016EE0                            Obj70_Action:				; XREF: Obj70_Index
00016EE0 3F28 0008                  		move.w	8(a0),-(sp)
00016EE4 4A68 003A                  		tst.w	$3A(a0)
00016EE8 6700                       		beq.s	Obj70_Move
00016EEA 5368 003A                  		subq.w	#1,$3A(a0)
00016EEE 6600                       		bne.s	Obj70_Solid
00016EF0                            
00016EF0                            Obj70_Move:
00016EF0 4EB9 0000 DE42             		jsr	SpeedToPos
00016EF6 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016EFA 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016EFC 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016F00                            
00016F00                            Obj70_Solid:
00016F00 381F                       		move.w	(sp)+,d4
00016F02 4A28 0001                  		tst.b	1(a0)
00016F06 6A00                       		bpl.s	Obj70_ChkDel
00016F08 7200                       		moveq	#0,d1
00016F0A 1228 0019                  		move.b	$19(a0),d1
00016F0E 0641 000B                  		addi.w	#$B,d1
00016F12 7400                       		moveq	#0,d2
00016F14 1428 0016                  		move.b	$16(a0),d2
00016F18 3602                       		move.w	d2,d3
00016F1A 5243                       		addq.w	#1,d3
00016F1C 6100 931A                  		bsr.w	SolidObject
00016F20                            
00016F20                            Obj70_ChkDel:
00016F20 3028 0032                  		move.w	$32(a0),d0
00016F24 0240 FF80                  		andi.w	#$FF80,d0
00016F28 3238 F700                  		move.w	($FFFFF700).w,d1
00016F2C 0441 0080                  		subi.w	#$80,d1
00016F30 0241 FF80                  		andi.w	#$FF80,d1
00016F34 9041                       		sub.w	d1,d0
00016F36 0C40 0280                  		cmpi.w	#$280,d0
00016F3A 6200                       		bhi.s	Obj70_Delete
00016F3C 4EF9 0000 DE68             		jmp	DisplaySprite
00016F42                            ; ===========================================================================
00016F42                            
00016F42                            Obj70_Delete:
00016F42 4EF9 0000 DEA4             		jmp	DeleteObject
00016F48                            ; ===========================================================================
00016F48                            
00016F48                            Obj70_Move2:				; XREF: Obj70_Main
00016F48 1028 0038                  		move.b	$38(a0),d0
00016F4C 0240 0018                  		andi.w	#$18,d0
00016F50 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016F56 43F1 0000                  		lea	(a1,d0.w),a1
00016F5A 3159 0010                  		move.w	(a1)+,$10(a0)
00016F5E 3159 0012                  		move.w	(a1)+,$12(a0)
00016F62 3159 0034                  		move.w	(a1)+,$34(a0)
00016F66 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016F6A 317C 0007 003A             		move.w	#7,$3A(a0)
00016F70 4E75                       		rts	
00016F72                            ; ===========================================================================
00016F72 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016F7A 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016F82 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016F8A 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016F92                            ; ---------------------------------------------------------------------------
00016F92                            ; Sprite mappings - large girder block (SBZ)
00016F92                            ; ---------------------------------------------------------------------------
00016F92                            Map_obj70:
00016F92                            	include "_maps\obj70.asm"
00016F92                            ; ---------------------------------------------------------------------------
00016F92                            ; Sprite mappings - large girder block (SBZ)
00016F92                            ; ---------------------------------------------------------------------------
00016F92 0000                       		dc.w byte_1662A-Map_obj70
00016F94 0C                         byte_1662A:	dc.b $C
00016F95 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016F9A 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016F9F E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016FA4 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016FA9 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016FAE 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016FB3 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016FB8 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016FBD E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016FC2 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016FC7 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016FCC 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016FD2 00                         		even
00016FD2 00                         		even
00016FD2                            
00016FD2                            ; ===========================================================================
00016FD2                            ; ---------------------------------------------------------------------------
00016FD2                            ; Object 72 - teleporter (SBZ)
00016FD2                            ; ---------------------------------------------------------------------------
00016FD2                            
00016FD2                            Obj72:					; XREF: Obj_Index
00016FD2 7000                       		moveq	#0,d0
00016FD4 1028 0024                  		move.b	$24(a0),d0
00016FD8 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016FDC 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016FE0 3028 0008                  		move.w	8(a0),d0
00016FE4 0240 FF80                  		andi.w	#$FF80,d0
00016FE8 3238 F700                  		move.w	($FFFFF700).w,d1
00016FEC 0441 0080                  		subi.w	#$80,d1
00016FF0 0241 FF80                  		andi.w	#$FF80,d1
00016FF4 9041                       		sub.w	d1,d0
00016FF6 0C40 0280                  		cmpi.w	#$280,d0
00016FFA 6200                       		bhi.s	Obj72_Delete
00016FFC 4E75                       		rts	
00016FFE                            ; ===========================================================================
00016FFE                            
00016FFE                            Obj72_Delete:
00016FFE 4EF9 0000 DEA4             		jmp	DeleteObject
00017004                            ; ===========================================================================
00017004 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00017006 0000                       		dc.w loc_166C8-Obj72_Index
00017008 0000                       		dc.w loc_1675E-Obj72_Index
0001700A 0000                       		dc.w loc_16798-Obj72_Index
0001700C                            ; ===========================================================================
0001700C                            
0001700C                            Obj72_Main:				; XREF: Obj72_Index
0001700C 5428 0024                  		addq.b	#2,$24(a0)
00017010 1028 0028                  		move.b	$28(a0),d0
00017014 D040                       		add.w	d0,d0
00017016 0240 001E                  		andi.w	#$1E,d0
0001701A 45FA 0000                  		lea	Obj72_Data(pc),a2
0001701E D4F2 0000                  		adda.w	(a2,d0.w),a2
00017022 315A 003A                  		move.w	(a2)+,$3A(a0)
00017026 214A 003C                  		move.l	a2,$3C(a0)
0001702A 315A 0036                  		move.w	(a2)+,$36(a0)
0001702E 315A 0038                  		move.w	(a2)+,$38(a0)
00017032                            
00017032                            loc_166C8:				; XREF: Obj72_Index
00017032 43F8 D000                  		lea	($FFFFD000).w,a1
00017036 3029 0008                  		move.w	8(a1),d0
0001703A 9068 0008                  		sub.w	8(a0),d0
0001703E 0828 0000 0022             		btst	#0,$22(a0)
00017044 6700                       		beq.s	loc_166E0
00017046 0640 000F                  		addi.w	#$F,d0
0001704A                            
0001704A                            loc_166E0:
0001704A 0C40 0010                  		cmpi.w	#$10,d0
0001704E 6400                       		bcc.s	locret_1675C
00017050 3229 000C                  		move.w	$C(a1),d1
00017054 9268 000C                  		sub.w	$C(a0),d1
00017058 0641 0020                  		addi.w	#$20,d1
0001705C 0C41 0040                  		cmpi.w	#$40,d1
00017060 6400                       		bcc.s	locret_1675C
00017062 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017066 6600                       		bne.s	locret_1675C
00017068 0C28 0007 0028             		cmpi.b	#7,$28(a0)
0001706E 6600                       		bne.s	loc_1670E
00017070 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00017076 6500                       		bcs.s	locret_1675C
00017078                            
00017078                            loc_1670E:
00017078 5428 0024                  		addq.b	#2,$24(a0)
0001707C 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00017082 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00017088 337C 0800 0014             		move.w	#$800,$14(a1)
0001708E 337C 0000 0010             		move.w	#0,$10(a1)
00017094 337C 0000 0012             		move.w	#0,$12(a1)
0001709A 08A8 0005 0022             		bclr	#5,$22(a0)
000170A0 08A9 0005 0022             		bclr	#5,$22(a1)
000170A6 08E9 0001 0022             		bset	#1,$22(a1)
000170AC 3368 0008 0008             		move.w	8(a0),8(a1)
000170B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000170B8 4228 0032                  		clr.b	$32(a0)
000170BC 303C 00BE                  		move.w	#$BE,d0
000170C0 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000170C6                            
000170C6                            locret_1675C:
000170C6 4E75                       		rts	
000170C8                            ; ===========================================================================
000170C8                            
000170C8                            loc_1675E:				; XREF: Obj72_Index
000170C8 43F8 D000                  		lea	($FFFFD000).w,a1
000170CC 1028 0032                  		move.b	$32(a0),d0
000170D0 5428 0032                  		addq.b	#2,$32(a0)
000170D4 4EB9 0000 2B40             		jsr	(CalcSine).l
000170DA EA40                       		asr.w	#5,d0
000170DC 3428 000C                  		move.w	$C(a0),d2
000170E0 9440                       		sub.w	d0,d2
000170E2 3342 000C                  		move.w	d2,$C(a1)
000170E6 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000170EC 6600                       		bne.s	locret_16796
000170EE 6100 0000                  		bsr.w	sub_1681C
000170F2 5428 0024                  		addq.b	#2,$24(a0)
000170F6 303C 00BC                  		move.w	#$BC,d0
000170FA 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play teleport sound
00017100                            
00017100                            locret_16796:
00017100 4E75                       		rts	
00017102                            ; ===========================================================================
00017102                            
00017102                            loc_16798:				; XREF: Obj72_Index
00017102 588F                       		addq.l	#4,sp
00017104 43F8 D000                  		lea	($FFFFD000).w,a1
00017108 5328 002E                  		subq.b	#1,$2E(a0)
0001710C 6A00                       		bpl.s	loc_167DA
0001710E 3368 0036 0008             		move.w	$36(a0),8(a1)
00017114 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001711A 7200                       		moveq	#0,d1
0001711C 1228 003A                  		move.b	$3A(a0),d1
00017120 5801                       		addq.b	#4,d1
00017122 B228 003B                  		cmp.b	$3B(a0),d1
00017126 6500                       		bcs.s	loc_167C2
00017128 7200                       		moveq	#0,d1
0001712A 6000                       		bra.s	loc_16800
0001712C                            ; ===========================================================================
0001712C                            
0001712C                            loc_167C2:
0001712C 1141 003A                  		move.b	d1,$3A(a0)
00017130 2468 003C                  		movea.l	$3C(a0),a2
00017134 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001713A 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00017140 6000 0000                  		bra.w	sub_1681C
00017144                            ; ===========================================================================
00017144                            
00017144                            loc_167DA:
00017144 2429 0008                  		move.l	8(a1),d2
00017148 2629 000C                  		move.l	$C(a1),d3
0001714C 3029 0010                  		move.w	$10(a1),d0
00017150 48C0                       		ext.l	d0
00017152 E180                       		asl.l	#8,d0
00017154 D480                       		add.l	d0,d2
00017156 3029 0012                  		move.w	$12(a1),d0
0001715A 48C0                       		ext.l	d0
0001715C E180                       		asl.l	#8,d0
0001715E D680                       		add.l	d0,d3
00017160 2342 0008                  		move.l	d2,8(a1)
00017164 2343 000C                  		move.l	d3,$C(a1)
00017168 4E75                       		rts	
0001716A                            ; ===========================================================================
0001716A                            
0001716A                            loc_16800:
0001716A 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017170 4228 0024                  		clr.b	$24(a0)
00017174 4238 F7C8                  		clr.b	($FFFFF7C8).w
00017178 337C 0000 0010             		move.w	#0,$10(a1)
0001717E 337C 0200 0012             		move.w	#$200,$12(a1)
00017184 4E75                       		rts	
00017186                            
00017186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017186                            
00017186                            
00017186                            sub_1681C:
00017186 7000                       		moveq	#0,d0
00017188 343C 1000                  		move.w	#$1000,d2
0001718C 3028 0036                  		move.w	$36(a0),d0
00017190 9069 0008                  		sub.w	8(a1),d0
00017194 6C00                       		bge.s	loc_16830
00017196 4440                       		neg.w	d0
00017198 4442                       		neg.w	d2
0001719A                            
0001719A                            loc_16830:
0001719A 7200                       		moveq	#0,d1
0001719C 363C 1000                  		move.w	#$1000,d3
000171A0 3228 0038                  		move.w	$38(a0),d1
000171A4 9269 000C                  		sub.w	$C(a1),d1
000171A8 6C00                       		bge.s	loc_16844
000171AA 4441                       		neg.w	d1
000171AC 4443                       		neg.w	d3
000171AE                            
000171AE                            loc_16844:
000171AE B240                       		cmp.w	d0,d1
000171B0 6500                       		bcs.s	loc_1687A
000171B2 7200                       		moveq	#0,d1
000171B4 3228 0038                  		move.w	$38(a0),d1
000171B8 9269 000C                  		sub.w	$C(a1),d1
000171BC 4841                       		swap	d1
000171BE 83C3                       		divs.w	d3,d1
000171C0 7000                       		moveq	#0,d0
000171C2 3028 0036                  		move.w	$36(a0),d0
000171C6 9069 0008                  		sub.w	8(a1),d0
000171CA 6700                       		beq.s	loc_16866
000171CC 4840                       		swap	d0
000171CE 81C1                       		divs.w	d1,d0
000171D0                            
000171D0                            loc_16866:
000171D0 3340 0010                  		move.w	d0,$10(a1)
000171D4 3343 0012                  		move.w	d3,$12(a1)
000171D8 4A41                       		tst.w	d1
000171DA 6A00                       		bpl.s	loc_16874
000171DC 4441                       		neg.w	d1
000171DE                            
000171DE                            loc_16874:
000171DE 3141 002E                  		move.w	d1,$2E(a0)
000171E2 4E75                       		rts	
000171E4                            ; ===========================================================================
000171E4                            
000171E4                            loc_1687A:
000171E4 7000                       		moveq	#0,d0
000171E6 3028 0036                  		move.w	$36(a0),d0
000171EA 9069 0008                  		sub.w	8(a1),d0
000171EE 4840                       		swap	d0
000171F0 81C2                       		divs.w	d2,d0
000171F2 7200                       		moveq	#0,d1
000171F4 3228 0038                  		move.w	$38(a0),d1
000171F8 9269 000C                  		sub.w	$C(a1),d1
000171FC 6700                       		beq.s	loc_16898
000171FE 4841                       		swap	d1
00017200 83C0                       		divs.w	d0,d1
00017202                            
00017202                            loc_16898:
00017202 3341 0012                  		move.w	d1,$12(a1)
00017206 3342 0010                  		move.w	d2,$10(a1)
0001720A 4A40                       		tst.w	d0
0001720C 6A00                       		bpl.s	loc_168A6
0001720E 4440                       		neg.w	d0
00017210                            
00017210                            loc_168A6:
00017210 3140 002E                  		move.w	d0,$2E(a0)
00017214 4E75                       		rts	
00017216                            ; End of function sub_1681C
00017216                            
00017216                            ; ===========================================================================
00017216 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
0001721C 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00017222 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00017226 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
0001722C 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00017232 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00017238 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001723E 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00017244 0884 0298 0894             		dc.w $884, $298, $894
0001724A 0270 0894 0190             		dc.w $270, $894, $190
00017250 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00017256 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
0001725C 1184 0498 1158             		dc.w $1184, $498, $1158
00017262 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00017268 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001726E 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017274 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
0001727A 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017280 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017286 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001728C 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017292 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00017298 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
0001729E                            ; ===========================================================================
0001729E                            ; ---------------------------------------------------------------------------
0001729E                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001729E                            ; ---------------------------------------------------------------------------
0001729E                            
0001729E                            Obj78:					; XREF: Obj_Index
0001729E 7000                       		moveq	#0,d0
000172A0 1028 0024                  		move.b	$24(a0),d0
000172A4 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
000172A8 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000172AC                            ; ===========================================================================
000172AC 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000172AE 0000                       		dc.w Obj78_Action-Obj78_Index
000172B0 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000172B2 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000172B4 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000172B6 0000                       		dc.w Obj78_Delete-Obj78_Index
000172B8 0000                       		dc.w loc_16CC0-Obj78_Index
000172BA                            ; ===========================================================================
000172BA                            
000172BA                            locret_16950:
000172BA 4E75                       		rts	
000172BC                            ; ===========================================================================
000172BC                            
000172BC                            Obj78_Main:				; XREF: Obj78_Index
000172BC 117C 0007 0016             		move.b	#7,$16(a0)
000172C2 117C 0008 0017             		move.b	#8,$17(a0)
000172C8 4EB9 0000 DDD0             		jsr	ObjectFall
000172CE 4EBA E4AA                  		jsr	ObjHitFloor
000172D2 4A41                       		tst.w	d1
000172D4 6AE4                       		bpl.s	locret_16950
000172D6 D368 000C                  		add.w	d1,$C(a0)
000172DA 4268 0012                  		clr.w	$12(a0)
000172DE 5428 0024                  		addq.b	#2,$24(a0)
000172E2 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000172EA 317C 22B0 0002             		move.w	#$22B0,2(a0)
000172F0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000172F6 6700                       		beq.s	loc_16996
000172F8 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000172FE                            
000172FE                            loc_16996:
000172FE 0228 0003 0001             		andi.b	#3,1(a0)
00017304 0028 0004 0001             		ori.b	#4,1(a0)
0001730A 1168 0001 0022             		move.b	1(a0),$22(a0)
00017310 117C 0004 0018             		move.b	#4,$18(a0)
00017316 117C 0008 0019             		move.b	#8,$19(a0)
0001731C 117C 000B 0020             		move.b	#$B,$20(a0)
00017322 3428 0008                  		move.w	8(a0),d2
00017326 7A0C                       		moveq	#$C,d5
00017328 0828 0000 0022             		btst	#0,$22(a0)
0001732E 6700                       		beq.s	loc_169CA
00017330 4445                       		neg.w	d5
00017332                            
00017332                            loc_169CA:
00017332 1C3C 0004                  		move.b	#4,d6
00017336 7600                       		moveq	#0,d3
00017338 7804                       		moveq	#4,d4
0001733A 2448                       		movea.l	a0,a2
0001733C 7202                       		moveq	#2,d1
0001733E                            
0001733E                            Obj78_LoadBody:
0001733E 4EB9 0000 E304             		jsr	SingleObjLoad2
00017344 6600                       		bne.s	Obj78_QuitLoad
00017346 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
0001734A 1346 0024                  		move.b	d6,$24(a1)
0001734E 5406                       		addq.b	#2,d6
00017350 2368 0004 0004             		move.l	4(a0),4(a1)
00017356 3368 0002 0002             		move.w	2(a0),2(a1)
0001735C 137C 0005 0018             		move.b	#5,$18(a1)
00017362 137C 0008 0019             		move.b	#8,$19(a1)
00017368 137C 00CB 0020             		move.b	#$CB,$20(a1)
0001736E D445                       		add.w	d5,d2
00017370 3342 0008                  		move.w	d2,8(a1)
00017374 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001737A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017380 1368 0022 0001             		move.b	$22(a0),1(a1)
00017386 137C 0008 001A             		move.b	#8,$1A(a1)
0001738C 234A 003C                  		move.l	a2,$3C(a1)
00017390 1344 003C                  		move.b	d4,$3C(a1)
00017394 5804                       		addq.b	#4,d4
00017396 2449                       		movea.l	a1,a2
00017398                            
00017398                            Obj78_QuitLoad:
00017398 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001739C                            
0001739C 117C 0007 002A             		move.b	#7,$2A(a0)
000173A2 4228 003C                  		clr.b	$3C(a0)
000173A6                            
000173A6                            Obj78_Action:				; XREF: Obj78_Index
000173A6 4A28 0022                  		tst.b	$22(a0)
000173AA 6B00 0000                  		bmi.w	loc_16C96
000173AE 7000                       		moveq	#0,d0
000173B0 1028 0025                  		move.b	$25(a0),d0
000173B4 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
000173B8 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
000173BC 1228 002B                  		move.b	$2B(a0),d1
000173C0 6A00                       		bpl.s	Obj78_Display
000173C2 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000173C8 1028 0026                  		move.b	$26(a0),d0
000173CC 0240 007F                  		andi.w	#$7F,d0
000173D0 5828 0026                  		addq.b	#4,$26(a0)
000173D4 1031 0000                  		move.b	(a1,d0.w),d0
000173D8 6A00                       		bpl.s	Obj78_AniHead
000173DA 08A8 0007 002B             		bclr	#7,$2B(a0)
000173E0 6000                       		bra.s	Obj78_Display
000173E2                            ; ===========================================================================
000173E2                            
000173E2                            Obj78_AniHead:
000173E2 0201 0010                  		andi.b	#$10,d1
000173E6 D001                       		add.b	d1,d0
000173E8 1140 001A                  		move.b	d0,$1A(a0)
000173EC                            
000173EC                            Obj78_Display:
000173EC 3028 0008                  		move.w	8(a0),d0
000173F0 0240 FF80                  		andi.w	#$FF80,d0
000173F4 3238 F700                  		move.w	($FFFFF700).w,d1
000173F8 0441 0080                  		subi.w	#$80,d1
000173FC 0241 FF80                  		andi.w	#$FF80,d1
00017400 9041                       		sub.w	d1,d0
00017402 0C40 0280                  		cmpi.w	#$280,d0
00017406 6200 0000                  		bhi.w	Obj78_ChkGone
0001740A 4EF9 0000 DE68             		jmp	DisplaySprite
00017410                            ; ===========================================================================
00017410                            
00017410                            Obj78_ChkGone:
00017410 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017414 7000                       		moveq	#0,d0
00017416 1028 0023                  		move.b	$23(a0),d0
0001741A 6700                       		beq.s	loc_16ABC
0001741C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017422                            
00017422                            loc_16ABC:
00017422 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00017428 4E75                       		rts	
0001742A                            ; ===========================================================================
0001742A                            
0001742A                            Obj78_Delete:				; XREF: Obj78_Index
0001742A 4EF9 0000 DEA4             		jmp	DeleteObject
00017430                            ; ===========================================================================
00017430 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017432 0000                       		dc.w loc_16B02-Obj78_Index2
00017434                            ; ===========================================================================
00017434                            
00017434                            Obj78_Move:				; XREF: Obj78_Index2
00017434 5328 002A                  		subq.b	#1,$2A(a0)
00017438 6B00                       		bmi.s	Obj78_Move2
0001743A 4E75                       		rts	
0001743C                            ; ===========================================================================
0001743C                            
0001743C                            Obj78_Move2:
0001743C 5428 0025                  		addq.b	#2,$25(a0)
00017440 117C 0010 002A             		move.b	#$10,$2A(a0)
00017446 317C FF40 0010             		move.w	#-$C0,$10(a0)
0001744C 317C 0040 0014             		move.w	#$40,$14(a0)
00017452 0868 0004 002B             		bchg	#4,$2B(a0)
00017458 6600                       		bne.s	loc_16AFC
0001745A 4268 0010                  		clr.w	$10(a0)
0001745E 4468 0014                  		neg.w	$14(a0)
00017462                            
00017462                            loc_16AFC:
00017462 08E8 0007 002B             		bset	#7,$2B(a0)
00017468                            
00017468                            loc_16B02:				; XREF: Obj78_Index2
00017468 5328 002A                  		subq.b	#1,$2A(a0)
0001746C 6B00                       		bmi.s	loc_16B5E
0001746E 2F28 0008                  		move.l	8(a0),-(sp)
00017472 2428 0008                  		move.l	8(a0),d2
00017476 3028 0010                  		move.w	$10(a0),d0
0001747A 0828 0000 0022             		btst	#0,$22(a0)
00017480 6700                       		beq.s	loc_16B1E
00017482 4440                       		neg.w	d0
00017484                            
00017484                            loc_16B1E:
00017484 48C0                       		ext.l	d0
00017486 E180                       		asl.l	#8,d0
00017488 D480                       		add.l	d0,d2
0001748A 2142 0008                  		move.l	d2,8(a0)
0001748E 4EBA E2EA                  		jsr	ObjHitFloor
00017492 241F                       		move.l	(sp)+,d2
00017494 0C41 FFF8                  		cmpi.w	#-8,d1
00017498 6D00                       		blt.s	loc_16B70
0001749A 0C41 000C                  		cmpi.w	#$C,d1
0001749E 6C00                       		bge.s	loc_16B70
000174A0 D368 000C                  		add.w	d1,$C(a0)
000174A4 4842                       		swap	d2
000174A6 B468 0008                  		cmp.w	8(a0),d2
000174AA 6700                       		beq.s	locret_16B5C
000174AC 7000                       		moveq	#0,d0
000174AE 1028 003C                  		move.b	$3C(a0),d0
000174B2 5228 003C                  		addq.b	#1,$3C(a0)
000174B6 0228 000F 003C             		andi.b	#$F,$3C(a0)
000174BC 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000174C0                            
000174C0                            locret_16B5C:
000174C0 4E75                       		rts	
000174C2                            ; ===========================================================================
000174C2                            
000174C2                            loc_16B5E:
000174C2 5528 0025                  		subq.b	#2,$25(a0)
000174C6 117C 0007 002A             		move.b	#7,$2A(a0)
000174CC 317C 0000 0010             		move.w	#0,$10(a0)
000174D2 4E75                       		rts	
000174D4                            ; ===========================================================================
000174D4                            
000174D4                            loc_16B70:
000174D4 2142 0008                  		move.l	d2,8(a0)
000174D8 0868 0000 0022             		bchg	#0,$22(a0)
000174DE 1168 0022 0001             		move.b	$22(a0),1(a0)
000174E4 7000                       		moveq	#0,d0
000174E6 1028 003C                  		move.b	$3C(a0),d0
000174EA 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
000174F0 5228 003C                  		addq.b	#1,$3C(a0)
000174F4 0228 000F 003C             		andi.b	#$F,$3C(a0)
000174FA 4E75                       		rts	
000174FC                            ; ===========================================================================
000174FC                            
000174FC                            Obj78_BodySeg2:				; XREF: Obj78_Index
000174FC 2268 003C                  		movea.l	$3C(a0),a1
00017500 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017506 6A00                       		bpl.s	Obj78_BodySeg1
00017508 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001750E 1028 0026                  		move.b	$26(a0),d0
00017512 0240 007F                  		andi.w	#$7F,d0
00017516 5828 0026                  		addq.b	#4,$26(a0)
0001751A 4A31 0004                  		tst.b	4(a1,d0.w)
0001751E 6A00                       		bpl.s	Obj78_AniBody
00017520 5828 0026                  		addq.b	#4,$26(a0)
00017524                            
00017524                            Obj78_AniBody:
00017524 1031 0000                  		move.b	(a1,d0.w),d0
00017528 5000                       		addq.b	#8,d0
0001752A 1140 001A                  		move.b	d0,$1A(a0)
0001752E                            
0001752E                            Obj78_BodySeg1:				; XREF: Obj78_Index
0001752E 2268 003C                  		movea.l	$3C(a0),a1
00017532 4A28 0022                  		tst.b	$22(a0)
00017536 6B00 0000                  		bmi.w	loc_16C90
0001753A 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017540 1169 0025 0025             		move.b	$25(a1),$25(a0)
00017546 6700 0000                  		beq.w	loc_16C64
0001754A 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017550 3029 0010                  		move.w	$10(a1),d0
00017554 D069 0014                  		add.w	$14(a1),d0
00017558 3140 0010                  		move.w	d0,$10(a0)
0001755C 2428 0008                  		move.l	8(a0),d2
00017560 2602                       		move.l	d2,d3
00017562 3028 0010                  		move.w	$10(a0),d0
00017566 0828 0000 0022             		btst	#0,$22(a0)
0001756C 6700                       		beq.s	loc_16C0C
0001756E 4440                       		neg.w	d0
00017570                            
00017570                            loc_16C0C:
00017570 48C0                       		ext.l	d0
00017572 E180                       		asl.l	#8,d0
00017574 D480                       		add.l	d0,d2
00017576 2142 0008                  		move.l	d2,8(a0)
0001757A 4843                       		swap	d3
0001757C B668 0008                  		cmp.w	8(a0),d3
00017580 6700                       		beq.s	loc_16C64
00017582 7000                       		moveq	#0,d0
00017584 1028 003C                  		move.b	$3C(a0),d0
00017588 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001758C 0C01 0080                  		cmpi.b	#-$80,d1
00017590 6600                       		bne.s	loc_16C50
00017592 4843                       		swap	d3
00017594 2143 0008                  		move.l	d3,8(a0)
00017598 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001759C 0868 0000 0022             		bchg	#0,$22(a0)
000175A2 1168 0022 0001             		move.b	$22(a0),1(a0)
000175A8 5228 003C                  		addq.b	#1,$3C(a0)
000175AC 0228 000F 003C             		andi.b	#$F,$3C(a0)
000175B2 6000                       		bra.s	loc_16C64
000175B4                            ; ===========================================================================
000175B4                            
000175B4                            loc_16C50:
000175B4 4881                       		ext.w	d1
000175B6 D368 000C                  		add.w	d1,$C(a0)
000175BA 5228 003C                  		addq.b	#1,$3C(a0)
000175BE 0228 000F 003C             		andi.b	#$F,$3C(a0)
000175C4 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000175C8                            
000175C8                            loc_16C64:
000175C8 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000175CE 6700                       		beq.s	loc_16C90
000175D0 0C11 0027                  		cmpi.b	#$27,0(a1)
000175D4 6700                       		beq.s	loc_16C7C
000175D6 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000175DC 6600                       		bne.s	loc_16C82
000175DE                            
000175DE                            loc_16C7C:
000175DE 117C 000A 0024             		move.b	#$A,$24(a0)
000175E4                            
000175E4                            loc_16C82:
000175E4 4EF9 0000 DE68             		jmp	DisplaySprite
000175EA                            
000175EA                            ; ===========================================================================
000175EA FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000175F2                            ; ===========================================================================
000175F2                            
000175F2                            loc_16C90:
000175F2 08E9 0007 0022             		bset	#7,$22(a1)
000175F8                            
000175F8                            loc_16C96:
000175F8 7000                       		moveq	#0,d0
000175FA 1028 0024                  		move.b	$24(a0),d0
000175FE 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017602 0828 0000 0022             		btst	#0,$22(a0)
00017608 6700                       		beq.s	loc_16CAA
0001760A 4440                       		neg.w	d0
0001760C                            
0001760C                            loc_16CAA:
0001760C 3140 0010                  		move.w	d0,$10(a0)
00017610 317C FC00 0012             		move.w	#-$400,$12(a0)
00017616 117C 000C 0024             		move.b	#$C,$24(a0)
0001761C 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017622                            
00017622                            loc_16CC0:				; XREF: Obj78_Index
00017622 4EB9 0000 DDD0             		jsr	ObjectFall
00017628 4A68 0012                  		tst.w	$12(a0)
0001762C 6B00                       		bmi.s	loc_16CE0
0001762E 4EBA E14A                  		jsr	ObjHitFloor
00017632 4A41                       		tst.w	d1
00017634 6A00                       		bpl.s	loc_16CE0
00017636 D368 000C                  		add.w	d1,$C(a0)
0001763A 317C FC00 0012             		move.w	#-$400,$12(a0)
00017640                            
00017640                            loc_16CE0:
00017640 4A28 0001                  		tst.b	1(a0)
00017644 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00017648 4EF9 0000 DE68             		jmp	DisplaySprite
0001764E                            ; ===========================================================================
0001764E                            Ani_obj78:
0001764E                            	include "_anim\obj78.asm"
0001764E                            ; ---------------------------------------------------------------------------
0001764E                            ; Animation script - Caterkiller enemy (uses non-standard format)
0001764E                            ; ---------------------------------------------------------------------------
0001764E 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
0001765E 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0001766E 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001767E 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001768E 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001769E 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
000176AE 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
000176BE 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
000176CE                            	even
000176CE                            	even
000176CE                            
000176CE                            ; ---------------------------------------------------------------------------
000176CE                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000176CE                            ; ---------------------------------------------------------------------------
000176CE                            Map_obj78:
000176CE                            	include "_maps\obj78.asm"
000176CE                            ; ---------------------------------------------------------------------------
000176CE                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000176CE                            ; ---------------------------------------------------------------------------
000176CE 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
000176D2 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
000176D6 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
000176DA 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
000176DE 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
000176E2 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
000176E6 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
000176EA 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
000176EE 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
000176F2 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
000176F6 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
000176FA 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
000176FE 01                         byte_16D9E:	dc.b 1
000176FF F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017704 01                         byte_16DA4:	dc.b 1
00017705 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001770A 01                         byte_16DAA:	dc.b 1
0001770B F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00017710 01                         byte_16DB0:	dc.b 1
00017711 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017716 01                         byte_16DB6:	dc.b 1
00017717 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001771C 01                         byte_16DBC:	dc.b 1
0001771D ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017722 01                         byte_16DC2:	dc.b 1
00017723 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00017728 01                         byte_16DC8:	dc.b 1
00017729 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001772E 01                         byte_16DCE:	dc.b 1
0001772F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00017734 01                         byte_16DD4:	dc.b 1
00017735 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
0001773A 01                         byte_16DDA:	dc.b 1
0001773B F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00017740 01                         byte_16DE0:	dc.b 1
00017741 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00017746 01                         byte_16DE6:	dc.b 1
00017747 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
0001774C 01                         byte_16DEC:	dc.b 1
0001774D F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00017752 01                         byte_16DF2:	dc.b 1
00017753 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00017758 01                         byte_16DF8:	dc.b 1
00017759 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
0001775E 01                         byte_16DFE:	dc.b 1
0001775F F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00017764 01                         byte_16E04:	dc.b 1
00017765 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
0001776A 01                         byte_16E0A:	dc.b 1
0001776B F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017770 01                         byte_16E10:	dc.b 1
00017771 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00017776 01                         byte_16E16:	dc.b 1
00017777 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
0001777C 01                         byte_16E1C:	dc.b 1
0001777D ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017782 01                         byte_16E22:	dc.b 1
00017783 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00017788 01                         byte_16E28:	dc.b 1
00017789 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001778E                            		even
0001778E                            		even
0001778E                            
0001778E                            ; ===========================================================================
0001778E                            ; ---------------------------------------------------------------------------
0001778E                            ; Object 79 - lamppost
0001778E                            ; ---------------------------------------------------------------------------
0001778E                            
0001778E                            Obj79:					; XREF: Obj_Index
0001778E 7000                       		moveq	#0,d0
00017790 1028 0024                  		move.b	$24(a0),d0
00017794 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00017798 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
0001779C 4EFA 8772                  		jmp	MarkObjGone
000177A0                            ; ===========================================================================
000177A0 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
000177A2 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
000177A4 0000                       		dc.w Obj79_AfterHit-Obj79_Index
000177A6 0000                       		dc.w Obj79_Twirl-Obj79_Index
000177A8                            ; ===========================================================================
000177A8                            
000177A8                            Obj79_Main:				; XREF: Obj79_Index
000177A8 5428 0024                  		addq.b	#2,$24(a0)
000177AC 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
000177B4 317C 07A0 0002             		move.w	#$7A0,2(a0)
000177BA 117C 0004 0001             		move.b	#4,1(a0)
000177C0 117C 0008 0019             		move.b	#8,$19(a0)
000177C6 117C 0005 0018             		move.b	#5,$18(a0)
000177CC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177D0 7000                       		moveq	#0,d0
000177D2 1028 0023                  		move.b	$23(a0),d0
000177D6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000177DC 0832 0000 0002             		btst	#0,2(a2,d0.w)
000177E2 6600                       		bne.s	Obj79_RedLamp
000177E4 1238 FE30                  		move.b	($FFFFFE30).w,d1
000177E8 0201 007F                  		andi.b	#$7F,d1
000177EC 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
000177F0 0202 007F                  		andi.b	#$7F,d2
000177F4 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
000177F6 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
000177F8                            
000177F8                            Obj79_RedLamp:
000177F8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000177FE 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017804 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
0001780A 4E75                       		rts	
0001780C                            ; ===========================================================================
0001780C                            
0001780C                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001780C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00017810 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017814 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017818 6B00 0000                  		bmi.w	locret_16F90
0001781C 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017820 0201 007F                  		andi.b	#$7F,d1
00017824 1428 0028                  		move.b	$28(a0),d2
00017828 0202 007F                  		andi.b	#$7F,d2
0001782C B202                       		cmp.b	d2,d1
0001782E 6500                       		bcs.s	Obj79_HitLamp
00017830 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017834 7000                       		moveq	#0,d0
00017836 1028 0023                  		move.b	$23(a0),d0
0001783A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017840 117C 0004 0024             		move.b	#4,$24(a0)
00017846 117C 0003 001A             		move.b	#3,$1A(a0)
0001784C 6000 0000                  		bra.w	locret_16F90
00017850                            ; ===========================================================================
00017850                            
00017850                            Obj79_HitLamp:
00017850 3038 D008                  		move.w	($FFFFD008).w,d0
00017854 9068 0008                  		sub.w	8(a0),d0
00017858 5040                       		addq.w	#8,d0
0001785A 0C40 0010                  		cmpi.w	#$10,d0
0001785E 6400 0000                  		bcc.w	locret_16F90
00017862 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017866 9068 000C                  		sub.w	$C(a0),d0
0001786A 0640 0040                  		addi.w	#$40,d0
0001786E 0C40 0068                  		cmpi.w	#$68,d0
00017872 6400                       		bcc.s	locret_16F90
00017874 303C 00A1                  		move.w	#$A1,d0
00017878 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play lamppost sound
0001787E 5428 0024                  		addq.b	#2,$24(a0)
00017882 4EB9 0000 E2EE             		jsr	SingleObjLoad
00017888 6600                       		bne.s	loc_16F76
0001788A 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
0001788E 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017894 3368 0008 0030             		move.w	8(a0),$30(a1)
0001789A 3368 000C 0032             		move.w	$C(a0),$32(a1)
000178A0 0469 0018 0032             		subi.w	#$18,$32(a1)
000178A6 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
000178AE 337C 07A0 0002             		move.w	#$7A0,2(a1)
000178B4 137C 0004 0001             		move.b	#4,1(a1)
000178BA 137C 0008 0019             		move.b	#8,$19(a1)
000178C0 137C 0004 0018             		move.b	#4,$18(a1)
000178C6 137C 0002 001A             		move.b	#2,$1A(a1)
000178CC 337C 0020 0036             		move.w	#$20,$36(a1)
000178D2                            
000178D2                            loc_16F76:
000178D2 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
000178D8 6100 0000                  		bsr.w	Obj79_StoreInfo
000178DC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000178E0 7000                       		moveq	#0,d0
000178E2 1028 0023                  		move.b	$23(a0),d0
000178E6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000178EC                            
000178EC                            locret_16F90:
000178EC 4E75                       		rts	
000178EE                            ; ===========================================================================
000178EE                            
000178EE                            Obj79_AfterHit:				; XREF: Obj79_Index
000178EE 4E75                       		rts	
000178F0                            ; ===========================================================================
000178F0                            
000178F0                            Obj79_Twirl:				; XREF: Obj79_Index
000178F0 5368 0036                  		subq.w	#1,$36(a0)
000178F4 6A00                       		bpl.s	loc_16FA0
000178F6 117C 0004 0024             		move.b	#4,$24(a0)
000178FC                            
000178FC                            loc_16FA0:
000178FC 1028 0026                  		move.b	$26(a0),d0
00017900 0428 0010 0026             		subi.b	#$10,$26(a0)
00017906 0400 0040                  		subi.b	#$40,d0
0001790A 4EB9 0000 2B40             		jsr	(CalcSine).l
00017910 C3FC 0C00                  		muls.w	#$C00,d1
00017914 4841                       		swap	d1
00017916 D268 0030                  		add.w	$30(a0),d1
0001791A 3141 0008                  		move.w	d1,8(a0)
0001791E C1FC 0C00                  		muls.w	#$C00,d0
00017922 4840                       		swap	d0
00017924 D068 0032                  		add.w	$32(a0),d0
00017928 3140 000C                  		move.w	d0,$C(a0)
0001792C 4E75                       		rts	
0001792E                            ; ===========================================================================
0001792E                            ; ---------------------------------------------------------------------------
0001792E                            ; Subroutine to	store information when you hit a lamppost
0001792E                            ; ---------------------------------------------------------------------------
0001792E                            
0001792E                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001792E 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017934 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
0001793A 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017940 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017946 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
0001794C 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017952 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017958 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
0001795E 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017964 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
0001796A 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017970 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017976 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
0001797C 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017982 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017988 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
0001798E 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017994 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0001799A 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
000179A0 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
000179A6 4E75                       		rts	
000179A8                            
000179A8                            ; ---------------------------------------------------------------------------
000179A8                            ; Subroutine to	load stored info when you start	a level	from a lamppost
000179A8                            ; ---------------------------------------------------------------------------
000179A8                            
000179A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000179A8                            
000179A8                            
000179A8                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
000179A8 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000179AE 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000179B4 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
000179BA 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
000179C0 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
000179C6 4278 FE20                  		clr.w	($FFFFFE20).w
000179CA 4238 FE1B                  		clr.b	($FFFFFE1B).w
000179CE 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
000179D4 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
000179DA 5338 FE24                  		subq.b	#1,($FFFFFE24).w
000179DE 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
000179E4 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000179EA 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000179F0 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000179F6 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000179FC 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017A02 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017A08 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017A0E 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017A14 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017A1A 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017A20 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017A26 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017A2C 6600                       		bne.s	loc_170E4
00017A2E 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017A34 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017A3A 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017A40                            
00017A40                            loc_170E4:
00017A40 4A38 FE30                  		tst.b	($FFFFFE30).w
00017A44 6A00                       		bpl.s	locret_170F6
00017A46 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017A4A 0440 00A0                  		subi.w	#$A0,d0
00017A4E 31C0 F728                  		move.w	d0,($FFFFF728).w
00017A52                            
00017A52                            locret_170F6:
00017A52 4E75                       		rts	
00017A54                            ; End of function Obj79_LoadInfo
00017A54                            
00017A54                            ; ===========================================================================
00017A54                            ; ---------------------------------------------------------------------------
00017A54                            ; Sprite mappings - lamppost
00017A54                            ; ---------------------------------------------------------------------------
00017A54                            Map_obj79:
00017A54                            	include "_maps\obj79.asm"
00017A54                            ; ---------------------------------------------------------------------------
00017A54                            ; Sprite mappings - lamppost
00017A54                            ; ---------------------------------------------------------------------------
00017A54 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017A58 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017A5C 06                         byte_17100:	dc.b 6
00017A5D E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017A62 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017A67 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017A6C F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017A71 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017A76 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017A7B 04                         byte_1711F:	dc.b 4
00017A7C E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017A81 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017A86 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017A8B F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017A90 02                         byte_17134:	dc.b 2
00017A91 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017A96 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017A9B 06                         byte_1713F:	dc.b 6
00017A9C E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017AA1 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017AA6 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017AAB F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017AB0 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017AB5 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017ABA                            		even
00017ABA                            		even
00017ABA                            
00017ABA                            ; ===========================================================================
00017ABA                            ; ---------------------------------------------------------------------------
00017ABA                            ; Object 7D - hidden points at the end of a level
00017ABA                            ; ---------------------------------------------------------------------------
00017ABA                            
00017ABA                            Obj7D:					; XREF: Obj_Index
00017ABA 7000                       		moveq	#0,d0
00017ABC 1028 0024                  		move.b	$24(a0),d0
00017AC0 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017AC4 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017AC8                            ; ===========================================================================
00017AC8 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017ACA 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017ACC                            ; ===========================================================================
00017ACC                            
00017ACC                            Obj7D_Main:				; XREF: Obj7D_Index
00017ACC 7410                       		moveq	#$10,d2
00017ACE 3602                       		move.w	d2,d3
00017AD0 D643                       		add.w	d3,d3
00017AD2 43F8 D000                  		lea	($FFFFD000).w,a1
00017AD6 3029 0008                  		move.w	8(a1),d0
00017ADA 9068 0008                  		sub.w	8(a0),d0
00017ADE D042                       		add.w	d2,d0
00017AE0 B043                       		cmp.w	d3,d0
00017AE2 6400                       		bcc.s	Obj7D_ChkDel
00017AE4 3229 000C                  		move.w	$C(a1),d1
00017AE8 9268 000C                  		sub.w	$C(a0),d1
00017AEC D242                       		add.w	d2,d1
00017AEE B243                       		cmp.w	d3,d1
00017AF0 6400                       		bcc.s	Obj7D_ChkDel
00017AF2 4A78 FE08                  		tst.w	($FFFFFE08).w
00017AF6 6600                       		bne.s	Obj7D_ChkDel
00017AF8 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017AFC 6600                       		bne.s	Obj7D_ChkDel
00017AFE 5428 0024                  		addq.b	#2,$24(a0)
00017B02 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017B0A 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017B10 0028 0004 0001             		ori.b	#4,1(a0)
00017B16 117C 0000 0018             		move.b	#0,$18(a0)
00017B1C 117C 0010 0019             		move.b	#$10,$19(a0)
00017B22 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017B28 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017B2E 303C 00C9                  		move.w	#$C9,d0
00017B32 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play bonus sound
00017B38 7000                       		moveq	#0,d0
00017B3A 1028 0028                  		move.b	$28(a0),d0
00017B3E D040                       		add.w	d0,d0
00017B40 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017B44 4EB9 0000 0000             		jsr	AddPoints
00017B4A                            
00017B4A                            Obj7D_ChkDel:
00017B4A 3028 0008                  		move.w	8(a0),d0
00017B4E 0240 FF80                  		andi.w	#$FF80,d0
00017B52 3238 F700                  		move.w	($FFFFF700).w,d1
00017B56 0441 0080                  		subi.w	#$80,d1
00017B5A 0241 FF80                  		andi.w	#$FF80,d1
00017B5E 9041                       		sub.w	d1,d0
00017B60 0C40 0280                  		cmpi.w	#$280,d0
00017B64 6200                       		bhi.s	Obj7D_Delete
00017B66 4E75                       		rts	
00017B68                            ; ===========================================================================
00017B68                            
00017B68                            Obj7D_Delete:
00017B68 4EF9 0000 DEA4             		jmp	DeleteObject
00017B6E                            ; ===========================================================================
00017B6E 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017B70 03E8                       		dc.w 1000
00017B72 0064                       		dc.w 100
00017B74 0001                       		dc.w 1
00017B76                            ; ===========================================================================
00017B76                            
00017B76                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017B76 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017B7A 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017B7C 3028 0008                  		move.w	8(a0),d0
00017B80 0240 FF80                  		andi.w	#-$80,d0
00017B84 3238 F700                  		move.w	($FFFFF700).w,d1
00017B88 0441 0080                  		subi.w	#$80,d1
00017B8C 0241 FF80                  		andi.w	#-$80,d1
00017B90 9041                       		sub.w	d1,d0
00017B92 0C40 0280                  		cmpi.w	#$280,d0
00017B96 6200                       		bhi.s	Obj7D_Delete2
00017B98 4EF9 0000 DE68             		jmp	DisplaySprite
00017B9E                            ; ===========================================================================
00017B9E                            
00017B9E                            Obj7D_Delete2:
00017B9E 4EF9 0000 DEA4             		jmp	DeleteObject
00017BA4                            ; ===========================================================================
00017BA4                            ; ---------------------------------------------------------------------------
00017BA4                            ; Sprite mappings - hidden points at the end of	a level
00017BA4                            ; ---------------------------------------------------------------------------
00017BA4                            Map_obj7D:
00017BA4                            	include "_maps\obj7D.asm"
00017BA4                            ; ---------------------------------------------------------------------------
00017BA4                            ; Sprite mappings - hidden points at the end of	a level
00017BA4                            ; ---------------------------------------------------------------------------
00017BA4 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017BA8 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017BAC 00                         byte_17250:	dc.b 0
00017BAD 01                         byte_17251:	dc.b 1
00017BAE F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017BB3 01                         byte_17257:	dc.b 1
00017BB4 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017BB9 01                         byte_1725D:	dc.b 1
00017BBA F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017BC0 00                         		even
00017BC0 00                         		even
00017BC0                            
00017BC0                            ; ===========================================================================
00017BC0                            ; ---------------------------------------------------------------------------
00017BC0                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017BC0                            ; ---------------------------------------------------------------------------
00017BC0                            
00017BC0                            Obj8A:					; XREF: Obj_Index
00017BC0 7000                       		moveq	#0,d0
00017BC2 1028 0024                  		move.b	$24(a0),d0
00017BC6 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017BCA 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017BCE                            ; ===========================================================================
00017BCE 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017BD0 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017BD2                            ; ===========================================================================
00017BD2                            
00017BD2                            Obj8A_Main:				; XREF: Obj8A_Index
00017BD2 5428 0024                  		addq.b	#2,$24(a0)
00017BD6 317C 0120 0008             		move.w	#$120,8(a0)
00017BDC 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017BE2 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017BEA 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017BF0 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017BF4 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017BF8 117C 0000 0001             		move.b	#0,1(a0)
00017BFE 117C 0000 0018             		move.b	#0,$18(a0)
00017C04 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017C0A 6600                       		bne.s	Obj8A_Display	; if not, branch
00017C0C 317C 00A6 0002             		move.w	#$A6,2(a0)
00017C12 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017C18 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017C1C 6700                       		beq.s	Obj8A_Display	; if not, branch
00017C1E 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017C24 6600                       		bne.s	Obj8A_Display	; if not, branch
00017C26 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017C2C 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017C32 4EF9 0000 DEA4             		jmp	DeleteObject
00017C38                            ; ===========================================================================
00017C38                            
00017C38                            Obj8A_Display:				; XREF: Obj8A_Index
00017C38 4EF9 0000 DE68             		jmp	DisplaySprite
00017C3E                            ; ===========================================================================
00017C3E                            ; ---------------------------------------------------------------------------
00017C3E                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017C3E                            ; ---------------------------------------------------------------------------
00017C3E                            Map_obj8A:
00017C3E                            	include "_maps\obj8A.asm"
00017C3E                            Map_ca8f:
00017C3E 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00017C40 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
00017C42 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
00017C44 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
00017C46 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00017C48 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00017C4A 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00017C4C 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00017C4E 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00017C50 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
00017C52 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
00017C54 0000                       Map_ca8f_tm: 	dc.w Map_ca8f_tmss-Map_ca8f
00017C56 08                         Map_ca8f_16: 	dc.b $8
00017C57 CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00017C5C E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
00017C61 F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
00017C66 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00017C6B B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
00017C70 B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
00017C75 B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00017C7A B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00017C7F 10                         Map_ca8f_3F: 	dc.b $10
00017C80 D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017C85 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017C8A D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017C8F D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017C94 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017C99 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017C9E D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017CA3 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017CA8 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017CAD 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017CB2 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017CB7 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017CBC 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017CC1 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017CC6 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017CCB 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017CD0 0A                         Map_ca8f_90: 	dc.b $A
00017CD1 D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017CD6 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017CDB D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017CE0 D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017CE5 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017CEA D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017CEF D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017CF4 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017CF9 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017CFE 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017D03 18                         Map_ca8f_C3: 	dc.b $18
00017D04 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017D09 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017D0E D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017D13 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017D18 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017D1D D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017D22 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017D27 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017D2C D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017D31 D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017D36 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017D3B D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017D40 D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017D45 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017D4A D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017D4F 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017D54 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017D59 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017D5E 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017D63 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017D68 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017D6D 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017D72 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017D77 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017D7C 14                         Map_ca8f_13C: 	dc.b $14
00017D7D D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017D82 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017D87 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017D8C D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017D91 D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017D96 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017D9B 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017DA0 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017DA5 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017DAA 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017DAF 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017DB4 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017DB9 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017DBE 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017DC3 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017DC8 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017DCD 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017DD2 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017DD7 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017DDC 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017DE1 1A                         Map_ca8f_1A1: 	dc.b $1A
00017DE2 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017DE7 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017DEC D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017DF1 D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017DF6 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017DFB D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017E00 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017E05 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017E0A D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017E0F D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017E14 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017E19 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017E1E 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017E23 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017E28 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017E2D 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017E32 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017E37 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017E3C 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017E41 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017E46 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017E4B 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017E50 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017E55 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017E5A 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017E5F 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017E64 17                         Map_ca8f_224: 	dc.b $17
00017E65 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017E6A D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017E6F D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00017E74 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00017E79 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00017E7E D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00017E83 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00017E88 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00017E8D D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00017E92 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00017E97 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00017E9C D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00017EA1 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017EA6 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017EAB 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00017EB0 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00017EB5 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00017EBA 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00017EBF 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00017EC4 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00017EC9 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00017ECE 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00017ED3 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00017ED8 1F                         Map_ca8f_298: 	dc.b $1F
00017ED9 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00017EDE D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00017EE3 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00017EE8 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00017EED D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00017EF2 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017EF7 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00017EFC D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00017F01 D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00017F06 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00017F0B D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00017F10 D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00017F15 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00017F1A 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00017F1F 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00017F24 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017F29 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017F2E 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00017F33 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00017F38 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00017F3D 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00017F42 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00017F47 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00017F4C 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00017F51 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00017F56 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00017F5B 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00017F60 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00017F65 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00017F6A 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00017F6F 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00017F74 0F                         Map_ca8f_334: 	dc.b $F
00017F75 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00017F7A F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00017F7F F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00017F84 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00017F89 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00017F8E F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00017F93 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00017F98 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00017F9D F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00017FA2 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00017FA7 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00017FAC F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00017FB1 F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00017FB6 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00017FBB F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00017FC0 08                         Map_ca8f_380: 	dc.b $8
00017FC1 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00017FC6 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00017FCB 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00017FD0 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00017FD5 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00017FDA 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00017FDF 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00017FE4 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00017FE9 20                         Map_ca8f_3A9: 	dc.b $20
00017FEA ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
00017FEF ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00017FF4 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00017FF9 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
00017FFE ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
00018003 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00018008 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
0001800D FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
00018012 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00018017 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
0001801C FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
00018021 FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00018026 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
0001802B 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00018030 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
00018035 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
0001803A 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
0001803F 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00018044 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00018049 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
0001804E 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00018053 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00018058 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
0001805D 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
00018062 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00018067 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
0001806C 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
00018071 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00018076 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
0001807B 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00018080 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00018085 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
0001808A 1C                         Map_ca8f_tmss:	dc.b 28
00018118 00                         	even
00018118 00                         	even
00018118                            
00018118                            ; ===========================================================================
00018118                            ; ---------------------------------------------------------------------------
00018118                            ; Object 3D - matthew boss - modified by GK89
00018118                            ; ---------------------------------------------------------------------------
00018118                            
00018118                            Obj3D:					; XREF: Obj_Index
00018118 7000                       		moveq	#0,d0
0001811A 1028 0024                  		move.b	$24(a0),d0
0001811E 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00018122 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00018126                            ; ===========================================================================
00018126 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00018128 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001812A 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
0001812C 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
0001812E                            
0001812E 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00018130 0401                       		dc.b 4,	1
00018132 0607                       		dc.b 6,	7
00018134                            ; ===========================================================================
00018134                            
00018134                            Obj3D_Main:				; XREF: Obj3D_Index
00018134 45F9 0001 812E             		lea	(Obj3D_ObjData).l,a2
0001813A 2248                       		movea.l	a0,a1
0001813C 7202                       		moveq	#2,d1
0001813E 6000                       		bra.s	Obj3D_LoadBoss
00018140                            ; ===========================================================================
00018140                            
00018140                            Obj3D_Loop:
00018140 4EB9 0000 E304             		jsr	SingleObjLoad2
00018146 6600                       		bne.s	loc_17772
00018148                            
00018148                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00018148 135A 0024                  		move.b	(a2)+,$24(a1)
0001814C 12BC 003D                  		move.b	#$3D,0(a1)
00018150 3368 0008 0008             		move.w	8(a0),8(a1)
00018156 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001815C 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00018164 337C 0400 0002             		move.w	#$400,2(a1)
0001816A 137C 0004 0001             		move.b	#4,1(a1)
00018170 137C 0020 0019             		move.b	#$20,$19(a1)
00018176 137C 0003 0018             		move.b	#3,$18(a1)
0001817C 135A 001C                  		move.b	(a2)+,$1C(a1)
00018180 2348 0034                  		move.l	a0,$34(a1)
00018184 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00018188                            
00018188                            loc_17772:
00018188 3168 0008 0030             		move.w	8(a0),$30(a0)
0001818E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018194 117C 000F 0020             		move.b	#$F,$20(a0)
0001819A 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
000181A0                            
000181A0                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000181A0 7000                       		moveq	#0,d0
000181A2 1028 0025                  		move.b	$25(a0),d0
000181A6 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000181AA 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000181AE 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000181B4 4EB9 0000 AEB6             		jsr	AnimateSprite
000181BA 1028 0022                  		move.b	$22(a0),d0
000181BE 0200 0003                  		andi.b	#3,d0
000181C2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000181C8 8128 0001                  		or.b	d0,1(a0)
000181CC 4EF9 0000 DE68             		jmp	DisplaySprite
000181D2                            ; ===========================================================================
000181D2 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000181D4 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000181D6 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000181D8 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000181DA 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000181DC 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000181DE 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000181E0                            ; ===========================================================================
000181E0                            
000181E0                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000181E0 4EB9 0000 0000             		jsr    Obj3D_ShipMove
000181E6 6100 0000                  		bsr.w	BossMove
000181EA 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000181F0 6600                       		bne.s	loc_177E6
000181F2 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000181F8 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000181FC                            
000181FC                            loc_177E6:
000181FC 1028 003F                  		move.b	$3F(a0),d0
00018200 4EB9 0000 2B40             		jsr	(CalcSine).l
00018206 EC40                       		asr.w	#6,d0
00018208 D068 0038                  		add.w	$38(a0),d0
0001820C 3140 000C                  		move.w	d0,$C(a0)
00018210 3168 0030 0008             		move.w	$30(a0),8(a0)
00018216 5428 003F                  		addq.b	#2,$3F(a0)
0001821A 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018220 6400                       		bcc.s	locret_1784A
00018222 4A28 0022                  		tst.b	$22(a0)
00018226 6B00                       		bmi.s	loc_1784C
00018228 4A28 0020                  		tst.b	$20(a0)
0001822C 6600                       		bne.s	locret_1784A
0001822E 4A28 003E                  		tst.b	$3E(a0)
00018232 6600                       		bne.s	Obj3D_ShipFlash
00018234 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001823A 303C 00AC                  		move.w	#$AC,d0
0001823E 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018244                            
00018244                            Obj3D_ShipFlash:
00018244 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018248 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001824A 4A51                       		tst.w	(a1)
0001824C 6600                       		bne.s	loc_1783C
0001824E 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018252                            
00018252                            loc_1783C:
00018252 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018254 5328 003E                  		subq.b	#1,$3E(a0)
00018258 6600                       		bne.s	locret_1784A
0001825A 117C 000F 0020             		move.b	#$F,$20(a0)
00018260                            
00018260                            locret_1784A:
00018260 4E75                       		rts	
00018262                            ; ===========================================================================
00018262                            
00018262                            loc_1784C:				; XREF: loc_177E6
00018262 7064                       		moveq	#100,d0
00018264 6100 0000                  		bsr.w	AddPoints
00018268 117C 0008 0025             		move.b	#8,$25(a0)
0001826E 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018274 4E75                       		rts	
00018276                            
00018276                            ; ---------------------------------------------------------------------------
00018276                            ; Defeated boss	subroutine
00018276                            ; ---------------------------------------------------------------------------
00018276                            
00018276                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018276                            
00018276                            
00018276                            BossDefeated:
00018276 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001827A 0200 0007                  		andi.b	#7,d0
0001827E 6600                       		bne.s	locret_178A2
00018280 4EB9 0000 E2EE             		jsr	SingleObjLoad
00018286 6600                       		bne.s	locret_178A2
00018288 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001828C 3368 0008 0008             		move.w	8(a0),8(a1)
00018292 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018298 4EB9 0000 2B1A             		jsr	(RandomNumber).l
0001829E 3200                       		move.w	d0,d1
000182A0 7200                       		moveq	#0,d1
000182A2 1200                       		move.b	d0,d1
000182A4 E409                       		lsr.b	#2,d1
000182A6 0441 0020                  		subi.w	#$20,d1
000182AA D369 0008                  		add.w	d1,8(a1)
000182AE E048                       		lsr.w	#8,d0
000182B0 E608                       		lsr.b	#3,d0
000182B2 D169 000C                  		add.w	d0,$C(a1)
000182B6                            
000182B6                            locret_178A2:
000182B6 4E75                       		rts	
000182B8                            ; End of function BossDefeated
000182B8                            
000182B8                            ; ---------------------------------------------------------------------------
000182B8                            ; Subroutine to	move a boss
000182B8                            ; ---------------------------------------------------------------------------
000182B8                            
000182B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000182B8                            
000182B8                            
000182B8                            BossMove:
000182B8 2428 0030                  		move.l	$30(a0),d2
000182BC 2628 0038                  		move.l	$38(a0),d3
000182C0 3028 0010                  		move.w	$10(a0),d0
000182C4 48C0                       		ext.l	d0
000182C6 E180                       		asl.l	#8,d0
000182C8 D480                       		add.l	d0,d2
000182CA 3028 0012                  		move.w	$12(a0),d0
000182CE 48C0                       		ext.l	d0
000182D0 E180                       		asl.l	#8,d0
000182D2 D680                       		add.l	d0,d3
000182D4 2142 0030                  		move.l	d2,$30(a0)
000182D8 2143 0038                  		move.l	d3,$38(a0)
000182DC 4E75                       		rts	
000182DE                            ; End of function BossMove
000182DE                            
000182DE                            ; ===========================================================================
000182DE                            
000182DE                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
000182DE 6100 FFD8                  		bsr.w	BossMove
000182E2 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000182E8 6600                       		bne.s	loc_17916
000182EA 317C 0000 0010             		move.w	#0,$10(a0)
000182F0 317C 0000 0012             		move.w	#0,$12(a0)
000182F6 5428 0025                  		addq.b	#2,$25(a0)
000182FA 4EB9 0000 E304             		jsr	SingleObjLoad2
00018300 6600                       		bne.s	loc_17910
00018302 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00018306 3368 0030 0008             		move.w	$30(a0),8(a1)
0001830C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018312 2348 0034                  		move.l	a0,$34(a1)
00018316                            
00018316                            loc_17910:
00018316 317C 0077 003C             		move.w	#$77,$3C(a0)
0001831C                            
0001831C                            loc_17916:
0001831C 6000 FEDE                  		bra.w	loc_177E6
00018320                            ; ===========================================================================
00018320                            
00018320                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018320 5368 003C                  		subq.w	#1,$3C(a0)
00018324 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
0001832A 5428 0025                  		addq.b	#2,$25(a0)
0001832E 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018334 3038 D008                  		move.w	($FFFFD008).w,d0	 
00018338 9068 0008                  		sub.w	8(a0),d0		 
0001833C 6A00                       		bpl.s	Obj3D_left			 
0001833E 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018344 6000                       		bra.s	Obj3D_right		 
00018346 08A8 0005 0022             		bclr	#5,$22(a0)
0001834C 4EB9 0000 0000              		jsr     loc_17950
00018352 4E75                       		rts
00018354                            ; ===========================================================================
00018354                            
00018354                            Obj3D_right:
00018354 317C FF00 0010             		move.w	#-$100,$10(a0)	
0001835A 4E75                       		Rts
0001835C                            
0001835C                            Obj3D_left:
0001835C 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018362 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
00018368 6600                       		bne.s	RTSboss  	; if not, branch
0001836A 0868 0000 0022              		bchg	#0,$22(a0)
00018370                            
00018370                            RTSboss:	    
00018370 4E75                       		rts
00018372                             ; ===========================================================================
00018372                            
00018372                            Obj3D_UpStuff:
00018372 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00018376 9068 000C                  		sub.w	$C(a0),d0		 
0001837A 6A00                       		bpl.s	Obj3D_down			 
0001837C 6000                        		bra.s	Obj3D_up		 
0001837E 08A8 0005 0022             		bclr	#5,$22(a0)
00018384                             
00018384                            Obj3D_up:		
00018384 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
0001838A 4E75                        	    rts
0001838C                            
0001838C                            Obj3D_down:
0001838C 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018392                            
00018392                            loc_17950:
00018392 6000 FE68                  		bra.w	loc_177E6
00018396                            ; ===========================================================================
00018396                            
00018396                            loc_17954:				; XREF: Obj3D_ShipIndex
00018396 5368 003C                  		subq.w	#1,$3C(a0)
0001839A 6B00                       		bmi.s	loc_17960
0001839C 6100 FF1A                  		bsr.w	BossMove
000183A0 6000                       		bra.s	loc_17976
000183A2                            ; ===========================================================================
000183A2                            
000183A2                            loc_17960:
000183A2 0868 0000 0022             		bchg	#0,$22(a0)
000183A8 317C 003F 003C             		move.w	#$3F,$3C(a0)
000183AE 5528 0025                  		subq.b	#2,$25(a0)
000183B2 317C 0000 0010             		move.w	#0,$10(a0)
000183B8                            
000183B8                            loc_17976:
000183B8 6000 FE42                  		bra.w	loc_177E6
000183BC                            ; ===========================================================================
000183BC                            
000183BC                            loc_1797A:				; XREF: Obj3D_ShipIndex
000183BC 5368 003C                  		subq.w	#1,$3C(a0)
000183C0 6B00                       		bmi.s	loc_17984
000183C2 6000 FEB2                  		bra.w	BossDefeated
000183C6                            ; ===========================================================================
000183C6                            
000183C6                            loc_17984:
000183C6 08E8 0000 0022             		bset	#0,$22(a0)
000183CC 08A8 0007 0022             		bclr	#7,$22(a0)
000183D2 4268 0010                  		clr.w	$10(a0)
000183D6 5428 0025                  		addq.b	#2,$25(a0)
000183DA 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000183E0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000183E4 6600                       		bne.s	locret_179AA
000183E6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000183EC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000183F2 6000 FE82                  		bra.w	BossDefeated
000183F6                            
000183F6                            locret_179AA:
000183F6 4E75                       		rts	
000183F8                            ; ===========================================================================
000183F8                            
000183F8                            loc_179AC:				; XREF: Obj3D_ShipIndex
000183F8 4EB9 0000 DDD0             		jsr ObjectFall		
000183FE 5268 003C                  		addq.w	#1,$3C(a0)
00018402 6700                       		beq.s	loc_179BC
00018404 6A00                       		bpl.s	loc_179C2
00018406 6000                       		bra.s	loc_179EE
00018408                            ; ===========================================================================
00018408                            
00018408                            loc_179BC:
00018408 4268 0012                  		clr.w	$12(a0)
0001840C 6000                       		bra.s	loc_179EE
0001840E                            ; ===========================================================================
0001840E                            
0001840E                            loc_179C2:
0001840E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018414 6500                       		bcs.s	loc_179DA
00018416 6700                       		beq.s	loc_179E0
00018418 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001841E 6500                       		bcs.s	loc_179EE
00018420 5428 0025                  		addq.b	#2,$25(a0)
00018424 6000                       		bra.s	loc_179EE
00018426                            ; ===========================================================================
00018426                            
00018426                            loc_179DA:
00018426 5168 0012                  		subq.w	#8,$12(a0)
0001842A 6000                       		bra.s	loc_179EE
0001842C 6000 FE48                  		bra.w	BossDefeated
00018430                            ; ===========================================================================
00018430                            
00018430                            loc_179E0:
00018430 4268 0012                  		clr.w	$12(a0)
00018434 303C 0081                  		move.w	#$81,d0
00018438 4EB9 0000 1398             		jsr	(PlaySound).l	; play GHZ music
0001843E                            
0001843E                            loc_179EE:
0001843E 6100 FE78                  		bsr.w	BossMove
00018442 6000 FDB8                  		bra.w	loc_177E6
00018446                            ; ===========================================================================
00018446                            
00018446                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018446 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
0001844C 6700                       		beq.s	loc_17A10
0001844E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018452 6000                       		bra.s	loc_17A16
00018454                            ; ===========================================================================
00018454                            
00018454                            loc_17A10:
00018454 4A28 0001                  		tst.b	1(a0)
00018458 6A00                       		bpl.s	Obj3D_ShipDel
0001845A                            
0001845A                            loc_17A16:
0001845A 6100 FE5C                  		bsr.w	BossMove
0001845E 6000 FD9C                  		bra.w	loc_177E6
00018462                            ; ===========================================================================
00018462                            
00018462                            Obj3D_ShipDel:
00018462 4EF9 0000 DEA4             		jmp	DeleteObject
00018468                            ; ===========================================================================
00018468                            
00018468                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018468 7000                       		moveq	#0,d0
0001846A 7201                       		moveq	#1,d1
0001846C 2268 0034                  		movea.l	$34(a0),a1
00018470 1029 0025                  		move.b	$25(a1),d0
00018474 5900                       		subq.b	#4,d0
00018476 6600                       		bne.s	loc_17A3E
00018478 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001847E 6600                       		bne.s	loc_17A46
00018480 7204                       		moveq	#4,d1
00018482                            
00018482                            loc_17A3E:
00018482 5D00                       		subq.b	#6,d0
00018484 6B00                       		bmi.s	loc_17A46
00018486 720A                       		moveq	#$A,d1
00018488 6000                       		bra.s	loc_17A5A
0001848A                            ; ===========================================================================
0001848A                            
0001848A                            loc_17A46:
0001848A 4A29 0020                  		tst.b	$20(a1)
0001848E 6600                       		bne.s	loc_17A50
00018490 7205                       		moveq	#5,d1
00018492 6000                       		bra.s	loc_17A5A
00018494                            ; ===========================================================================
00018494                            
00018494                            loc_17A50:
00018494 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001849A 6500                       		bcs.s	loc_17A5A
0001849C 7204                       		moveq	#4,d1
0001849E                            
0001849E                            loc_17A5A:
0001849E 1141 001C                  		move.b	d1,$1C(a0)
000184A2 5500                       		subq.b	#2,d0
000184A4 6600                       		bne.s	Obj3D_FaceDisp
000184A6 117C 0006 001C             		move.b	#6,$1C(a0)
000184AC 4A28 0001                  		tst.b	1(a0)
000184B0 6A00                       		bpl.s	Obj3D_FaceDel
000184B2                            
000184B2                            Obj3D_FaceDisp:
000184B2 6000                       		bra.s	Obj3D_Display
000184B4                            ; ===========================================================================
000184B4                            
000184B4                            Obj3D_FaceDel:
000184B4 4EF9 0000 DEA4             		jmp	DeleteObject
000184BA                            ; ===========================================================================
000184BA                            
000184BA                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000184BA 117C 0007 001C             		move.b	#7,$1C(a0)
000184C0 2268 0034                  		movea.l	$34(a0),a1
000184C4 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000184CA 6600                       		bne.s	loc_17A96
000184CC 117C 000B 001C             		move.b	#$B,$1C(a0)
000184D2 4A28 0001                  		tst.b	1(a0)
000184D6 6A00                       		bpl.s	Obj3D_FlameDel
000184D8 6000                       		bra.s	Obj3D_FlameDisp
000184DA                            ; ===========================================================================
000184DA                            
000184DA                            loc_17A96:
000184DA 3029 0010                  		move.w	$10(a1),d0
000184DE 6700                       		beq.s	Obj3D_FlameDisp
000184E0 117C 0008 001C             		move.b	#8,$1C(a0)
000184E6                            
000184E6                            Obj3D_FlameDisp:
000184E6 6000                       		bra.s	Obj3D_Display
000184E8                            ; ===========================================================================
000184E8                            
000184E8                            Obj3D_FlameDel:
000184E8 4EF9 0000 DEA4             		jmp	DeleteObject
000184EE                            ; ===========================================================================
000184EE                            
000184EE                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000184EE 2268 0034                  		movea.l	$34(a0),a1
000184F2 3169 0008 0008             		move.w	8(a1),8(a0)
000184F8 3169 000C 000C             		move.w	$C(a1),$C(a0)
000184FE 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018504 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001850A 4EB9 0000 AEB6             		jsr	AnimateSprite
00018510 1028 0022                  		move.b	$22(a0),d0
00018514 0200 0003                  		andi.b	#3,d0
00018518 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001851E 8128 0001                  		or.b	d0,1(a0)
00018522 4EF9 0000 DE68             		jmp	DisplaySprite
00018528                            ; ===========================================================================
00018528                            ; ---------------------------------------------------------------------------
00018528                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018528                            ; ---------------------------------------------------------------------------
00018528                            
00018528                            Obj48:					; XREF: Obj_Index
00018528 7000                       		moveq	#0,d0
0001852A 1028 0024                  		move.b	$24(a0),d0
0001852E 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018532 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018536                            ; ===========================================================================
00018536 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018538 0000                       		dc.w Obj48_Base-Obj48_Index
0001853A 0000                       		dc.w Obj48_Display2-Obj48_Index
0001853C 0000                       		dc.w loc_17C68-Obj48_Index
0001853E 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018540                            ; ===========================================================================
00018540                            
00018540                            Obj48_Main:				; XREF: Obj48_Index
00018540 5428 0024                  		addq.b	#2,$24(a0)
00018544 317C 4080 0026             		move.w	#$4080,$26(a0)
0001854A 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018550 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018558 317C 046C 0002             		move.w	#$46C,2(a0)
0001855E 45E8 0028                  		lea	$28(a0),a2
00018562 14FC 0000                  		move.b	#0,(a2)+
00018566 7205                       		moveq	#5,d1
00018568 2248                       		movea.l	a0,a1
0001856A 6000                       		bra.s	loc_17B60
0001856C                            ; ===========================================================================
0001856C                            
0001856C                            Obj48_MakeLinks:
0001856C 4EB9 0000 E304             		jsr	SingleObjLoad2
00018572 6600                       		bne.s	Obj48_MakeBall
00018574 3368 0008 0008             		move.w	8(a0),8(a1)
0001857A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018580 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018584 137C 0006 0024             		move.b	#6,$24(a1)
0001858A 237C 0000 826A 0004        		move.l	#Map_obj15,4(a1)
00018592 337C 0380 0002             		move.w	#$380,2(a1)
00018598 137C 0001 001A             		move.b	#1,$1A(a1)
0001859E 5228 0028                  		addq.b	#1,$28(a0)
000185A2                            
000185A2                            loc_17B60:				; XREF: Obj48_Main
000185A2 3A09                       		move.w	a1,d5
000185A4 0445 D000                  		subi.w	#$D000,d5
000185A8 EC4D                       		lsr.w	#6,d5
000185AA 0245 007F                  		andi.w	#$7F,d5
000185AE 14C5                       		move.b	d5,(a2)+
000185B0 137C 0004 0001             		move.b	#4,1(a1)
000185B6 137C 0008 0019             		move.b	#8,$19(a1)
000185BC 137C 0006 0018             		move.b	#6,$18(a1)
000185C2 2368 0034 0034             		move.l	$34(a0),$34(a1)
000185C8 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000185CC                            
000185CC                            Obj48_MakeBall:
000185CC 137C 0008 0024             		move.b	#8,$24(a1)
000185D2 237C 0000 885A 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000185DA 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000185E0 137C 0001 001A             		move.b	#1,$1A(a1)
000185E6 137C 0005 0018             		move.b	#5,$18(a1)
000185EC 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000185F2 4E75                       		rts	
000185F4                            ; ===========================================================================
000185F4                            
000185F4 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000185FA                            
000185FA                            ; ===========================================================================
000185FA                            
000185FA                            Obj48_Base:				; XREF: Obj48_Index
000185FA 47F9 0001 85F4             		lea	(Obj48_PosData).l,a3
00018600 45E8 0028                  		lea	$28(a0),a2
00018604 7C00                       		moveq	#0,d6
00018606 1C1A                       		move.b	(a2)+,d6
00018608                            
00018608                            loc_17BC6:
00018608 7800                       		moveq	#0,d4
0001860A 181A                       		move.b	(a2)+,d4
0001860C ED4C                       		lsl.w	#6,d4
0001860E 0684 00FF D000             		addi.l	#$FFD000,d4
00018614 2244                       		movea.l	d4,a1
00018616 101B                       		move.b	(a3)+,d0
00018618 B029 003C                  		cmp.b	$3C(a1),d0
0001861C 6700                       		beq.s	loc_17BE0
0001861E 5229 003C                  		addq.b	#1,$3C(a1)
00018622                            
00018622                            loc_17BE0:
00018622 51CE FFE4                  		dbf	d6,loc_17BC6
00018626                            
00018626 B029 003C                  		cmp.b	$3C(a1),d0
0001862A 6600                       		bne.s	loc_17BFA
0001862C 2268 0034                  		movea.l	$34(a0),a1
00018630 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018636 6600                       		bne.s	loc_17BFA
00018638 5428 0024                  		addq.b	#2,$24(a0)
0001863C                            
0001863C                            loc_17BFA:
0001863C 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018642 6700                       		beq.s	Obj48_Display
00018644 5268 0032                  		addq.w	#1,$32(a0)
00018648                            
00018648                            Obj48_Display:
00018648 6100 0000                  		bsr.w	sub_17C2A
0001864C 1028 0026                  		move.b	$26(a0),d0
00018650 4EB9 0000 81DC             		jsr	(Obj15_Move2).l
00018656 4EF9 0000 DE68             		jmp	DisplaySprite
0001865C                            ; ===========================================================================
0001865C                            
0001865C                            Obj48_Display2:				; XREF: Obj48_Index
0001865C 6100 0000                  		bsr.w	sub_17C2A
00018660 4EB9 0000 819C             		jsr	(Obj48_Move).l
00018666 4EF9 0000 DE68             		jmp	DisplaySprite
0001866C                            
0001866C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001866C                            
0001866C                            
0001866C                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
0001866C 2268 0034                  		movea.l	$34(a0),a1
00018670 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018676 6400                       		bcc.s	loc_17C3C
00018678 0868 0000 001A             		bchg	#0,$1A(a0)
0001867E                            
0001867E                            loc_17C3C:
0001867E 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018684 3029 000C                  		move.w	$C(a1),d0
00018688 D068 0032                  		add.w	$32(a0),d0
0001868C 3140 0038                  		move.w	d0,$38(a0)
00018690 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018696 4A29 0022                  		tst.b	$22(a1)
0001869A 6A00                       		bpl.s	locret_17C66
0001869C 10BC 003F                  		move.b	#$3F,0(a0)
000186A0 117C 0000 0024             		move.b	#0,$24(a0)
000186A6                            
000186A6                            locret_17C66:
000186A6 4E75                       		rts	
000186A8                            ; End of function sub_17C2A
000186A8                            
000186A8                            ; ===========================================================================
000186A8                            
000186A8                            loc_17C68:				; XREF: Obj48_Index
000186A8 2268 0034                  		movea.l	$34(a0),a1
000186AC 4A29 0022                  		tst.b	$22(a1)
000186B0 6A00                       		bpl.s	Obj48_Display3
000186B2 10BC 003F                  		move.b	#$3F,0(a0)
000186B6 117C 0000 0024             		move.b	#0,$24(a0)
000186BC                            
000186BC                            Obj48_Display3:
000186BC 4EF9 0000 DE68             		jmp	DisplaySprite
000186C2                            ; ===========================================================================
000186C2                            
000186C2                            Obj48_ChkVanish:			; XREF: Obj48_Index
000186C2 7000                       		moveq	#0,d0
000186C4 4A28 001A                  		tst.b	$1A(a0)
000186C8 6600                       		bne.s	Obj48_Vanish
000186CA 5200                       		addq.b	#1,d0
000186CC                            
000186CC                            Obj48_Vanish:
000186CC 1140 001A                  		move.b	d0,$1A(a0)
000186D0 2268 0034                  		movea.l	$34(a0),a1
000186D4 4A29 0022                  		tst.b	$22(a1)
000186D8 6A00                       		bpl.s	Obj48_Display4
000186DA 117C 0000 0020             		move.b	#0,$20(a0)
000186E0 6100 FB94                  		bsr.w	BossDefeated
000186E4 5328 003C                  		subq.b	#1,$3C(a0)
000186E8 6A00                       		bpl.s	Obj48_Display4
000186EA 10BC 003F                  		move.b	#$3F,(a0)
000186EE 117C 0000 0024             		move.b	#0,$24(a0)
000186F4                            
000186F4                            Obj48_Display4:
000186F4 4EF9 0000 DE68             		jmp	DisplaySprite
000186FA                            ; ===========================================================================
000186FA                            Ani_Eggman:
000186FA                            	include "_anim\Eggman.asm"
000186FA                            ; ---------------------------------------------------------------------------
000186FA                            ; Animation script - Eggman (bosses)
000186FA                            ; ---------------------------------------------------------------------------
000186FA 0000                       		dc.w byte_17CD4-Ani_Eggman
000186FC 0000                       		dc.w byte_17CD8-Ani_Eggman
000186FE 0000                       		dc.w byte_17CDC-Ani_Eggman
00018700 0000                       		dc.w byte_17CE0-Ani_Eggman
00018702 0000                       		dc.w byte_17CE4-Ani_Eggman
00018704 0000                       		dc.w byte_17CE8-Ani_Eggman
00018706 0000                       		dc.w byte_17CEC-Ani_Eggman
00018708 0000                       		dc.w byte_17CF0-Ani_Eggman
0001870A 0000                       		dc.w byte_17CF4-Ani_Eggman
0001870C 0000                       		dc.w byte_17CF8-Ani_Eggman
0001870E 0000                       		dc.w byte_17CFC-Ani_Eggman
00018710 0000                       		dc.w byte_17D00-Ani_Eggman
00018712 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018716 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001871A 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
0001871E 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018722 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018726 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
0001872A 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
0001872E 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018732 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018736 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001873A 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
0001873E 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001874A                            		even
0001874A                            		even
0001874A                            Ani_TetoB:
0001874A                            	include "_anim\TetoB.asm"
0001874A                            ; ---------------------------------------------------------------------------
0001874A                            ; Animation script - Eggman (bosses)
0001874A                            ; ---------------------------------------------------------------------------
0001874A 0000                       		dc.w spin-Ani_TetoB
0001874C 0000                       		dc.w static-Ani_TetoB
0001874E 0000                       		dc.w static2-Ani_TetoB
00018750 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
00018757 0500 FF                    static:	dc.b 5,	0, $FF
0001875A 0501 FF                    static2:	dc.b 5,	1, $FF
0001875E 00                         		even
0001875E 00                         		even
0001875E                            ; ---------------------------------------------------------------------------
0001875E                            ; Sprite mappings - Eggman (boss levels)
0001875E                            ; ---------------------------------------------------------------------------
0001875E                            Map_Eggman:
0001875E                            	include "_maps\Eggman.asm"
0001875E                            Map_dc7e:
0001875E 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00018760 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00018762 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018764 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018766 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018768 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
0001876A 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
0001876C 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
0001876E 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
00018770 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00018772 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018774 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018776 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018778 06                         Map_dc7e_1A: 	dc.b $6
00018779 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
0001877E EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018783 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00018788 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
0001878D 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018792 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018797 02                         Map_dc7e_39: 	dc.b $2
00018798 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001879D EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
000187A2 02                         Map_dc7e_44: 	dc.b $2
000187A3 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000187A8 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000187AD 03                         Map_dc7e_4F: 	dc.b $3
000187AE E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
000187B3 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
000187B8 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
000187BD 03                         Map_dc7e_5F: 	dc.b $3
000187BE E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
000187C3 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
000187C8 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
000187CD 03                         Map_dc7e_6F: 	dc.b $3
000187CE E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000187D3 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000187D8 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000187DD 03                         Map_dc7e_7F: 	dc.b $3
000187DE E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000187E3 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000187E8 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000187ED 04                         Map_dc7e_8F: 	dc.b $4
000187EE E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000187F3 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000187F8 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000187FD EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018802 01                         Map_dc7e_A4: 	dc.b $1
00018803 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
00018808 01                         Map_dc7e_AA: 	dc.b $1
00018809 0405 0031 22               	dc.b $4, $5, $0, $31, $22
0001880E 00                         Map_dc7e_B0: 	dc.b $0
0001880F 02                         Map_dc7e_B1: 	dc.b $2
00018810 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018815 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
0001881A 02                         Map_dc7e_BC: 	dc.b $2
0001881B F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00018820 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018826 00                         	even
00018826 00                         	even
00018826                            
00018826                            ; ---------------------------------------------------------------------------
00018826                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018826                            ; ---------------------------------------------------------------------------
00018826                            Map_BossItems:
00018826                            	include "_maps\Boss items.asm"
00018826                            ; ---------------------------------------------------------------------------
00018826                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018826                            ; ---------------------------------------------------------------------------
00018826 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0001882A 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
0001882E 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018832 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018836 01                         byte_17DE4:	dc.b 1
00018837 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001883C 02                         byte_17DEA:	dc.b 2
0001883D FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018842 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018847 00                         		dc.b 0
00018848 01                         byte_17DF6:	dc.b 1
00018849 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001884E 01                         byte_17DFC:	dc.b 1
0001884F 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018854 01                         byte_17E02:	dc.b 1
00018855 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
0001885A 04                         byte_17E08:	dc.b 4
0001885B F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018860 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018865 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001886A 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001886F 00                         		dc.b 0
00018870 02                         byte_17E1E:	dc.b 2
00018871 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018876 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001887B 00                         		dc.b 0
0001887C 02                         byte_17E2A:	dc.b 2
0001887D 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018882 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018888 00                         		even
00018888 00                         		even
00018888                            
00018888                            ; ===========================================================================
00018888                            ; ---------------------------------------------------------------------------
00018888                            ; Object 77 - Fatass teto boss fight in LZ -STDH
00018888                            ; ---------------------------------------------------------------------------
00018888                            
00018888                            
00018888                            obj77:					; XREF: Obj_Index
00018888 7000                       		moveq	#0,d0
0001888A 1028 0024                  		move.b	$24(a0),d0
0001888E 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
00018892 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
00018896                            ; ===========================================================================
00018896 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
00018898 0000                       		dc.w obj77_ShipMain-obj77_Index
0001889A 0000                       		dc.w obj77_FaceMain-obj77_Index
0001889C 0000                       		dc.w obj77_FlameMain-obj77_Index
0001889E                            
0001889E 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
000188A0 0401                       		dc.b 4,	1
000188A2 0607                       		dc.b 6,	7
000188A4                            ; ===========================================================================
000188A4                            
000188A4                            obj77_Main:				; XREF: obj77_Index
000188A4 45F9 0001 889E             		lea	(obj77_ObjData).l,a2
000188AA 2248                       		movea.l	a0,a1
000188AC 7202                       		moveq	#2,d1
000188AE 6000                       		bra.s	obj77_LoadBoss
000188B0                            ; ===========================================================================
000188B0                            
000188B0                            obj77_Loop:
000188B0 4EB9 0000 E304             		jsr	SingleObjLoad2
000188B6 6600                       		bne.s	loc2_17772
000188B8                            
000188B8                            obj77_LoadBoss:				; XREF: obj77_Main
000188B8 135A 0024                  		move.b	(a2)+,$24(a1)
000188BC 12BC 0077                  		move.b	#$77,0(a1)
000188C0 3368 0008 0008             		move.w	8(a0),8(a1)
000188C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000188CC 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
000188D4 337C 0400 0002             		move.w	#$400,2(a1)
000188DA 137C 0004 0001             		move.b	#4,1(a1)
000188E0 137C 0020 0019             		move.b	#$20,$19(a1)
000188E6 137C 0003 0018             		move.b	#3,$18(a1)
000188EC 135A 001C                  		move.b	(a2)+,$1C(a1)
000188F0 2348 0034                  		move.l	a0,$34(a1)
000188F4 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
000188F8                            
000188F8                            loc2_17772:
000188F8 3168 0008 0030             		move.w	8(a0),$30(a0)
000188FE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018904 117C 000F 0020             		move.b	#$F,$20(a0)
0001890A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018910                            
00018910                            obj77_ShipMain:				; XREF: obj77_Index
00018910 7000                       		moveq	#0,d0
00018912 1028 0025                  		move.b	$25(a0),d0
00018916 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
0001891A 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
0001891E 43F9 0001 874A             		lea	(Ani_TetoB).l,a1
00018924 4EB9 0000 AEB6             		jsr	AnimateSprite
0001892A 1028 0022                  		move.b	$22(a0),d0
0001892E 0200 0003                  		andi.b	#3,d0
00018932 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018938 8128 0001                  		or.b	d0,1(a0)
0001893C 4EF9 0000 DE68             		jmp	DisplaySprite
00018942                            ; ===========================================================================
00018942 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
00018944 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00018946 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00018948 0000                       		dc.w loc2_17954-obj77_ShipIndex
0001894A 0000                       		dc.w fatassruns-obj77_ShipIndex		
0001894C 0000                       		dc.w loc2_1797A-obj77_ShipIndex
0001894E 0000                       		dc.w loc2_179AC-obj77_ShipIndex
00018950 0000                       		dc.w loc2_179F6-obj77_ShipIndex
00018952                            ; ===========================================================================
00018952                            
00018952                            obj77_ShipStart:			; XREF: obj77_ShipIndex
00018952                            	;	move.w	#$100,$12(a0)	; move ship down
00018952 6100 F964                  		bsr.w	BossMove
00018956 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
0001895C 6600                       		bne.s	loc2_177E6
0001895E 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018964 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018968                            
00018968                            loc2_177E6:
00018968                            ;		move.b	$3F(a0),d0
00018968                            ;		jsr	(CalcSine).l
00018968 EC40                       		asr.w	#6,d0
0001896A D068 0038                  		add.w	$38(a0),d0
0001896E 3140 000C                  		move.w	d0,$C(a0)
00018972 3168 0030 0008             		move.w	$30(a0),8(a0)
00018978 5428 003F                  		addq.b	#2,$3F(a0)
0001897C 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
00018982 6400                       		bcc.s	locret_1784A2
00018984 4A28 0022                  		tst.b	$22(a0)
00018988 6B00                       		bmi.s	loc2_1784C
0001898A 4A28 0020                  		tst.b	$20(a0)
0001898E 6600                       		bne.s	locret_1784A2
00018990 4A28 003E                  		tst.b	$3E(a0)
00018994 6600                       		bne.s	obj77_ShipFlash
00018996 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
0001899C 303C 00AC                  		move.w	#$AC,d0
000189A0 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play boss damage sound
000189A6                            
000189A6                            obj77_ShipFlash:
000189A6 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000189AA 7000                       		moveq	#0,d0		; move 0 (black) to d0
000189AC 4A51                       		tst.w	(a1)
000189AE 6600                       		bne.s	loc2_1783C
000189B0 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000189B4                            
000189B4                            loc2_1783C:
000189B4 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000189B6 5328 003E                  		subq.b	#1,$3E(a0)
000189BA 6600                       		bne.s	locret_1784A2
000189BC 117C 000F 0020             		move.b	#$F,$20(a0)
000189C2                            
000189C2                            locret_1784A2:
000189C2 4E75                       		rts	
000189C4                            ; ===========================================================================
000189C4                            
000189C4                            loc2_1784C:				; XREF: loc2_177E6
000189C4 7064                       		moveq	#100,d0
000189C6 6100 0000                  		bsr.w	AddPoints
000189CA 117C 000A 0025             		move.b	#$A,$25(a0)
000189D0 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000189D6 4E75                       		rts	
000189D8                            ; ===========================================================================
000189D8                            
000189D8                            obj77_MakeBall:				; XREF: obj77_ShipIndex
000189D8 317C FF00 0010             		move.w	#-$100,$10(a0)
000189DE 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
000189E4 6100 F8D2                  		bsr.w	BossMove
000189E8 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
000189EE 6600                       		bne.s	loc2_17916
000189F0 317C 0000 0010             		move.w	#0,$10(a0)
000189F6 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
000189FC 317C 0000 0012             		move.w	#0,$12(a0)
00018A02 5428 0025                  		addq.b	#2,$25(a0)
00018A06                            
00018A06                            loc2_17910:
00018A06 317C 0077 003C             		move.w	#$77,$3C(a0)
00018A0C                            
00018A0C                            loc2_17916:
00018A0C 6000 FF5A                  		bra.w	loc2_177E6
00018A10                            ; ===========================================================================
00018A10                            
00018A10                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018A10 6100 F8A6                  		bsr.w	BossMove
00018A14 5368 003C                  		subq.w	#1,$3C(a0)
00018A18 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00018A1A 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00018A20 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
00018A26 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00018A2C 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
00018A32 6600                       		bne.s	loc2_17950 ; if not branch
00018A34                            
00018A34                            fatass_attack:
00018A34 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00018A3A 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
00018A40 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
00018A46 6600                       		bne.s	loc2_17950    ; if not you know the drill
00018A48 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018A4C 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018A52                            
00018A52                            loc2_17950:
00018A52 6000 FF14                  		bra.w	loc2_177E6
00018A56                            ; ===========================================================================
00018A56                            
00018A56                            loc2_17954:				; XREF: obj77_ShipIndex
00018A56 6100 F860                  		bsr.w	BossMove
00018A5A 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
00018A60                            		; i suck at programming
00018A60 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
00018A66 6600                       		bne.s	loc2_17976    ; if not blah blah
00018A68 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018A6E 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018A72 303C 00B9                  		move.w	#$B9,d0
00018A76 4EB9 0000 1398             		jsr	(PlaySound).l	; play the earthquake sound
00018A7C                            
00018A7C                            Peartobombs:	
00018A7C 4EB9 0000 E304                		jsr	SingleObjLoad2
00018A82 6600                       		bne.s	secondone
00018A84 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00018A88 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018A8E 337C 0670 000C             		move.w	#$670,$C(a1)
00018A94                            secondone:		
00018A94 4EB9 0000 E304                		jsr	SingleObjLoad2
00018A9A 6600                       		bne.s	loc2_17976		
00018A9C 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018AA0 337C 1D20 0008             		move.w	#$1D20,8(a1)
00018AA6 337C 0670 000C             		move.w	#$670,$C(a1)
00018AAC                            lastone:
00018AAC 4EB9 0000 E304                		jsr	SingleObjLoad2
00018AB2 6600                       		bne.s	loc2_17976		
00018AB4 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00018AB8 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018ABE 337C 0670 000C             		move.w	#$670,$C(a1)
00018AC4                            		
00018AC4                            loc2_17976:
00018AC4 6000 FEA2                  		bra.w	loc2_177E6
00018AC8                            		
00018AC8                            ; ===========================================================================
00018AC8                            Fatassruns:
00018AC8 6100 F7EE                   		bsr.w	BossMove
00018ACC 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018AD2 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
00018AD8 6600                       		bne.s	processstuff ; is not go here
00018ADA 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018AE0 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00018AE6 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00018AEA 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018AF0 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018AF6                            		
00018AF6                            		
00018AF6                            processstuff:
00018AF6 6000 FE70                  		bra.w	loc2_177E6
00018AFA                            ; ===========================================================================
00018AFA                            
00018AFA                            loc2_1797A:				; XREF: obj77_ShipIndex
00018AFA 5368 003C                  		subq.w	#1,$3C(a0)
00018AFE 6B00                       		bmi.s	loc2_17984
00018B00 6000 F774                  		bra.w	BossDefeated
00018B04                            ; ===========================================================================
00018B04                            
00018B04                            loc2_17984:
00018B04 08E8 0000 0022             		bset	#0,$22(a0)
00018B0A 08A8 0007 0022             		bclr	#7,$22(a0)
00018B10 4268 0010                  		clr.w	$10(a0)
00018B14 5428 0025                  		addq.b	#2,$25(a0)
00018B18 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018B1E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018B22 6600                       		bne.s	locret_179AA2
00018B24 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018B2A                            
00018B2A                            locret_179AA2:
00018B2A 4E75                       		rts	
00018B2C                            ; ===========================================================================
00018B2C                            
00018B2C                            loc2_179AC:				; XREF: obj77_ShipIndex
00018B2C 5268 003C                  		addq.w	#1,$3C(a0)
00018B30 6700                       		beq.s	loc2_179BC
00018B32 6A00                       		bpl.s	loc2_179C2
00018B34 0668 0018 0012             		addi.w	#$18,$12(a0)
00018B3A 6000                       		bra.s	loc2_179EE
00018B3C                            ; ===========================================================================
00018B3C                            
00018B3C                            loc2_179BC:
00018B3C 4268 0012                  		clr.w	$12(a0)
00018B40 6000                       		bra.s	loc2_179EE
00018B42                            ; ===========================================================================
00018B42                            
00018B42                            loc2_179C2:
00018B42 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018B48 6500                       		bcs.s	loc2_179DA
00018B4A 6700                       		beq.s	loc2_179E0
00018B4C 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018B52 6500                       		bcs.s	loc2_179EE
00018B54 5428 0025                  		addq.b	#2,$25(a0)
00018B58 6000                       		bra.s	loc2_179EE
00018B5A                            ; ===========================================================================
00018B5A                            
00018B5A                            loc2_179DA:
00018B5A 5168 0012                  		subq.w	#8,$12(a0)
00018B5E 6000                       		bra.s	loc2_179EE
00018B60                            ; ===========================================================================
00018B60                            
00018B60                            loc2_179E0:
00018B60 4268 0012                  		clr.w	$12(a0)
00018B64 303C 0097                  		move.w	#$97,d0
00018B68 4EB9 0000 1398             		jsr	(PlaySound).l	; play lz3 music
00018B6E                            
00018B6E                            loc2_179EE:
00018B6E 6100 F748                  		bsr.w	BossMove
00018B72 6000 FDF4                  		bra.w	loc2_177E6
00018B76                            ; ===========================================================================
00018B76                            
00018B76                            loc2_179F6:				; XREF: obj77_ShipIndex
00018B76 317C 0400 0010             		move.w	#$400,$10(a0)
00018B7C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018B82 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018B88 6700                       		beq.s	loc2_17A10
00018B8A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018B8E 6000                       		bra.s	loc2_17A16
00018B90                            ; ===========================================================================
00018B90                            
00018B90                            loc2_17A10:
00018B90 4A28 0001                  		tst.b	1(a0)
00018B94 6A00                       		bpl.s	obj77_ShipDel
00018B96                            
00018B96                            loc2_17A16:
00018B96 6100 F720                  		bsr.w	BossMove
00018B9A 6000 FDCC                  		bra.w	loc2_177E6
00018B9E                            ; ===========================================================================
00018B9E                            
00018B9E                            obj77_ShipDel:
00018B9E 4EF9 0000 DEA4             		jmp	DeleteObject
00018BA4                            ; ===========================================================================
00018BA4                            
00018BA4                            obj77_FaceMain:				; XREF: obj77_Index
00018BA4 4E75                       		rts
00018BA6                            ; ===========================================================================
00018BA6                            
00018BA6                            obj77_FlameMain:			; XREF: obj77_Index
00018BA6 4E75                       		rts
00018BA8                            ; ===========================================================================
00018BA8                            
00018BA8                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018BA8 43F9 0001 874A             		lea	(Ani_TetoB).l,a1
00018BAE 4EB9 0000 AEB6             		jsr	AnimateSprite
00018BB4 4EF9 0000 DE68             		jmp	DisplaySprite
00018BBA                            ; ---------------------------------------------------------------------------
00018BBA                            ; Sprite mappings - Fatass teto boss
00018BBA                            ; ---------------------------------------------------------------------------
00018BBA                            Map_TetoBoss:
00018BBA                            	include "_maps\tetoboss.asm"
00018BBA                            Map_f09a:
00018BBA 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018BBC 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018BBE 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018BC0 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018BC2 03                         Map_f09a_8: 	dc.b $3
00018BC3 E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018BC8 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018BCD DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018BD2 06                         Map_f09a_18: 	dc.b $6
00018BD3 EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018BD8 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018BDD E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018BE2 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018BE7 EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018BEC 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018BF1 03                         Map_f09a_37: 	dc.b $3
00018BF2 E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018BF7 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018BFC DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018C01 06                         Map_f09a_47: 	dc.b $6
00018C02 ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018C07 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018C0C E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018C11 DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018C16 ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018C1B 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018C20                            	even
00018C20                            	even
00018C20                            ; ===========================================================================
00018C20                            ; ---------------------------------------------------------------------------
00018C20                            ; Object 73 - Eggman (MZ)
00018C20                            ; ---------------------------------------------------------------------------
00018C20                            
00018C20                            Obj73:					; XREF: Obj_Index
00018C20 7000                       		moveq	#0,d0
00018C22 1028 0024                  		move.b	$24(a0),d0
00018C26 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018C2A 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018C2E                            ; ===========================================================================
00018C2E 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018C30 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018C32 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018C34 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018C36 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018C38                            
00018C38 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018C3B 0401 04                    		dc.b 4,	1, 4
00018C3E 0607 04                    		dc.b 6,	7, 4
00018C41 0800 03                    		dc.b 8,	0, 3
00018C44                            ; ===========================================================================
00018C44                            
00018C44                            Obj73_Main:				; XREF: Obj73_Index
00018C44 3168 0008 0030             		move.w	8(a0),$30(a0)
00018C4A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018C50 117C 000F 0020             		move.b	#$F,$20(a0)
00018C56 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018C5C 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018C60 2248                       		movea.l	a0,a1
00018C62 7203                       		moveq	#3,d1
00018C64 6000                       		bra.s	Obj73_LoadBoss
00018C66                            ; ===========================================================================
00018C66                            
00018C66                            Obj73_Loop:
00018C66 4EB9 0000 E304             		jsr	SingleObjLoad2
00018C6C 6600                       		bne.s	Obj73_ShipMain
00018C6E 12BC 0073                  		move.b	#$73,0(a1)
00018C72 3368 0008 0008             		move.w	8(a0),8(a1)
00018C78 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018C7E                            
00018C7E                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018C7E 08A8 0000 0022             		bclr	#0,$22(a0)
00018C84 4229 0025                  		clr.b	$25(a1)
00018C88 135A 0024                  		move.b	(a2)+,$24(a1)
00018C8C 135A 001C                  		move.b	(a2)+,$1C(a1)
00018C90 135A 0018                  		move.b	(a2)+,$18(a1)
00018C94 237C 0001 875E 0004        		move.l	#Map_Eggman,4(a1)
00018C9C 337C 0400 0002             		move.w	#$400,2(a1)
00018CA2 137C 0004 0001             		move.b	#4,1(a1)
00018CA8 137C 0020 0019             		move.b	#$20,$19(a1)
00018CAE 2348 0034                  		move.l	a0,$34(a1)
00018CB2 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018CB6                            
00018CB6                            Obj73_ShipMain:
00018CB6 7000                       		moveq	#0,d0
00018CB8 1028 0025                  		move.b	$25(a0),d0
00018CBC 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018CC0 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018CC4 43F9 0001 86FA             		lea	(Ani_Eggman).l,a1
00018CCA 4EB9 0000 AEB6             		jsr	AnimateSprite
00018CD0 7003                       		moveq	#3,d0
00018CD2 C028 0022                  		and.b	$22(a0),d0
00018CD6 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018CDC 8128 0001                  		or.b	d0,1(a0)
00018CE0 4EF9 0000 DE68             		jmp	DisplaySprite
00018CE6                            ; ===========================================================================
00018CE6 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018CE8 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018CEA 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018CEC 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018CEE 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018CF0                            ; ===========================================================================
00018CF0                            
00018CF0                            loc_18302:				; XREF: Obj73_ShipIndex
00018CF0 1028 003F                  		move.b	$3F(a0),d0
00018CF4 5428 003F                  		addq.b	#2,$3F(a0)
00018CF8 4EB9 0000 2B40             		jsr	(CalcSine).l
00018CFE E440                       		asr.w	#2,d0
00018D00 3140 0012                  		move.w	d0,$12(a0)
00018D04 317C FF00 0010             		move.w	#-$100,$10(a0)
00018D0A 6100 F5AC                  		bsr.w	BossMove
00018D0E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018D14 6600                       		bne.s	loc_18334
00018D16 5428 0025                  		addq.b	#2,$25(a0)
00018D1A 4228 0028                  		clr.b	$28(a0)
00018D1E 42A8 0010                  		clr.l	$10(a0)
00018D22                            
00018D22                            loc_18334:
00018D22 4EB9 0000 2B1A             		jsr	(RandomNumber).l
00018D28 1140 0034                  		move.b	d0,$34(a0)
00018D2C                            
00018D2C                            loc_1833E:
00018D2C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018D32 3168 0030 0008             		move.w	$30(a0),8(a0)
00018D38 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018D3E 6400                       		bcc.s	locret_18390
00018D40 4A28 0022                  		tst.b	$22(a0)
00018D44 6B00                       		bmi.s	loc_18392
00018D46 4A28 0020                  		tst.b	$20(a0)
00018D4A 6600                       		bne.s	locret_18390
00018D4C 4A28 003E                  		tst.b	$3E(a0)
00018D50 6600                       		bne.s	loc_18374
00018D52 117C 0028 003E             		move.b	#$28,$3E(a0)
00018D58 303C 00AC                  		move.w	#$AC,d0
00018D5C 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018D62                            
00018D62                            loc_18374:
00018D62 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018D66 7000                       		moveq	#0,d0
00018D68 4A51                       		tst.w	(a1)
00018D6A 6600                       		bne.s	loc_18382
00018D6C 303C 0EEE                  		move.w	#$EEE,d0
00018D70                            
00018D70                            loc_18382:
00018D70 3280                       		move.w	d0,(a1)
00018D72 5328 003E                  		subq.b	#1,$3E(a0)
00018D76 6600                       		bne.s	locret_18390
00018D78 117C 000F 0020             		move.b	#$F,$20(a0)
00018D7E                            
00018D7E                            locret_18390:
00018D7E 4E75                       		rts	
00018D80                            ; ===========================================================================
00018D80                            
00018D80                            loc_18392:				; XREF: loc_1833E
00018D80 7064                       		moveq	#100,d0
00018D82 6100 0000                  		bsr.w	AddPoints
00018D86 117C 0004 0025             		move.b	#4,$25(a0)
00018D8C 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018D92 4268 0010                  		clr.w	$10(a0)
00018D96 4E75                       		rts	
00018D98                            ; ===========================================================================
00018D98                            
00018D98                            loc_183AA:				; XREF: Obj73_ShipIndex
00018D98 7000                       		moveq	#0,d0
00018D9A 1028 0028                  		move.b	$28(a0),d0
00018D9E 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018DA2 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018DA6 0228 0006 0028             		andi.b	#6,$28(a0)
00018DAC 6000 FF7E                  		bra.w	loc_1833E
00018DB0                            ; ===========================================================================
00018DB0 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018DB2 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018DB4 0000                       		dc.w loc_183CA-off_183C2
00018DB6 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018DB8                            ; ===========================================================================
00018DB8                            
00018DB8                            loc_183CA:				; XREF: off_183C2
00018DB8 4A68 0010                  		tst.w	$10(a0)
00018DBC 6600                       		bne.s	loc_183FE
00018DBE 7040                       		moveq	#$40,d0
00018DC0 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018DC6 6700                       		beq.s	loc_183E6
00018DC8 6500                       		bcs.s	loc_183DE
00018DCA 4440                       		neg.w	d0
00018DCC                            
00018DCC                            loc_183DE:
00018DCC 3140 0012                  		move.w	d0,$12(a0)
00018DD0 6000 F4E6                  		bra.w	BossMove
00018DD4                            ; ===========================================================================
00018DD4                            
00018DD4                            loc_183E6:
00018DD4 317C 0200 0010             		move.w	#$200,$10(a0)
00018DDA 317C 0100 0012             		move.w	#$100,$12(a0)
00018DE0 0828 0000 0022             		btst	#0,$22(a0)
00018DE6 6600                       		bne.s	loc_183FE
00018DE8 4468 0010                  		neg.w	$10(a0)
00018DEC                            
00018DEC                            loc_183FE:
00018DEC 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018DF2 6400                       		bcc.s	Obj73_MakeLava
00018DF4 6100 F4C2                  		bsr.w	BossMove
00018DF8 5968 0012                  		subq.w	#4,$12(a0)
00018DFC                            
00018DFC                            Obj73_MakeLava:
00018DFC 5328 0034                  		subq.b	#1,$34(a0)
00018E00 6400                       		bcc.s	loc_1845C
00018E02 4EB9 0000 E2EE             		jsr	SingleObjLoad
00018E08 6600                       		bne.s	loc_1844A
00018E0A 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018E0E 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018E14 4EB9 0000 2B1A             		jsr	(RandomNumber).l
00018E1A 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018E20 80FC 0050                  		divu.w	#$50,d0
00018E24 4840                       		swap	d0
00018E26 0640 1878                  		addi.w	#$1878,d0
00018E2A 3340 0008                  		move.w	d0,8(a1)
00018E2E EE09                       		lsr.b	#7,d1
00018E30 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018E36                            
00018E36                            loc_1844A:
00018E36 4EB9 0000 2B1A             		jsr	(RandomNumber).l
00018E3C 0200 001F                  		andi.b	#$1F,d0
00018E40 0600 0040                  		addi.b	#$40,d0
00018E44 1140 0034                  		move.b	d0,$34(a0)
00018E48                            
00018E48                            loc_1845C:
00018E48 0828 0000 0022             		btst	#0,$22(a0)
00018E4E 6700                       		beq.s	loc_18474
00018E50 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018E56 6D00                       		blt.s	locret_1849C
00018E58 317C 1910 0030             		move.w	#$1910,$30(a0)
00018E5E 6000                       		bra.s	loc_18482
00018E60                            ; ===========================================================================
00018E60                            
00018E60                            loc_18474:
00018E60 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018E66 6E00                       		bgt.s	locret_1849C
00018E68 317C 1830 0030             		move.w	#$1830,$30(a0)
00018E6E                            
00018E6E                            loc_18482:
00018E6E 4268 0010                  		clr.w	$10(a0)
00018E72 317C FE80 0012             		move.w	#-$180,$12(a0)
00018E78 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018E7E 6400                       		bcc.s	loc_18498
00018E80 4468 0012                  		neg.w	$12(a0)
00018E84                            
00018E84                            loc_18498:
00018E84 5428 0028                  		addq.b	#2,$28(a0)
00018E88                            
00018E88                            locret_1849C:
00018E88 4E75                       		rts	
00018E8A                            ; ===========================================================================
00018E8A                            
00018E8A                            Obj73_MakeLava2:			; XREF: off_183C2
00018E8A 6100 F42C                  		bsr.w	BossMove
00018E8E 3028 0038                  		move.w	$38(a0),d0
00018E92 0440 022C                  		subi.w	#$22C,d0
00018E96 6E00                       		bgt.s	locret_184F4
00018E98 303C 022C                  		move.w	#$22C,d0
00018E9C 4A68 0012                  		tst.w	$12(a0)
00018EA0 6700                       		beq.s	loc_184EA
00018EA2 4268 0012                  		clr.w	$12(a0)
00018EA6 317C 0050 003C             		move.w	#$50,$3C(a0)
00018EAC 0868 0000 0022             		bchg	#0,$22(a0)
00018EB2 4EB9 0000 E2EE             		jsr	SingleObjLoad
00018EB8 6600                       		bne.s	loc_184EA
00018EBA 3368 0030 0008             		move.w	$30(a0),8(a1)
00018EC0 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018EC6 0669 0018 000C             		addi.w	#$18,$C(a1)
00018ECC 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018ED0 137C 0001 0028             		move.b	#1,$28(a1)
00018ED6                            
00018ED6                            loc_184EA:
00018ED6 5368 003C                  		subq.w	#1,$3C(a0)
00018EDA 6600                       		bne.s	locret_184F4
00018EDC 5428 0028                  		addq.b	#2,$28(a0)
00018EE0                            
00018EE0                            locret_184F4:
00018EE0 4E75                       		rts	
00018EE2                            ; ===========================================================================
00018EE2                            
00018EE2                            loc_184F6:				; XREF: Obj73_ShipIndex
00018EE2 5368 003C                  		subq.w	#1,$3C(a0)
00018EE6 6B00                       		bmi.s	loc_18500
00018EE8 6000 F38C                  		bra.w	BossDefeated
00018EEC                            ; ===========================================================================
00018EEC                            
00018EEC                            loc_18500:
00018EEC 08E8 0000 0022             		bset	#0,$22(a0)
00018EF2 08A8 0007 0022             		bclr	#7,$22(a0)
00018EF8 4268 0010                  		clr.w	$10(a0)
00018EFC 5428 0025                  		addq.b	#2,$25(a0)
00018F00 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018F06 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018F0A 6600                       		bne.s	locret_1852A
00018F0C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018F12 4268 0012                  		clr.w	$12(a0)
00018F16                            
00018F16                            locret_1852A:
00018F16 4E75                       		rts	
00018F18                            ; ===========================================================================
00018F18                            
00018F18                            loc_1852C:				; XREF: Obj73_ShipIndex
00018F18 5268 003C                  		addq.w	#1,$3C(a0)
00018F1C 6700                       		beq.s	loc_18544
00018F1E 6A00                       		bpl.s	loc_1854E
00018F20 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018F26 6400                       		bcc.s	loc_18544
00018F28 0668 0018 0012             		addi.w	#$18,$12(a0)
00018F2E 6000                       		bra.s	loc_1857A
00018F30                            ; ===========================================================================
00018F30                            
00018F30                            loc_18544:
00018F30 4268 0012                  		clr.w	$12(a0)
00018F34 4268 003C                  		clr.w	$3C(a0)
00018F38 6000                       		bra.s	loc_1857A
00018F3A                            ; ===========================================================================
00018F3A                            
00018F3A                            loc_1854E:
00018F3A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018F40 6500                       		bcs.s	loc_18566
00018F42 6700                       		beq.s	loc_1856C
00018F44 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018F4A 6500                       		bcs.s	loc_1857A
00018F4C 5428 0025                  		addq.b	#2,$25(a0)
00018F50 6000                       		bra.s	loc_1857A
00018F52                            ; ===========================================================================
00018F52                            
00018F52                            loc_18566:
00018F52 5168 0012                  		subq.w	#8,$12(a0)
00018F56 6000                       		bra.s	loc_1857A
00018F58                            ; ===========================================================================
00018F58                            
00018F58                            loc_1856C:
00018F58 4268 0012                  		clr.w	$12(a0)
00018F5C 303C 0083                  		move.w	#$83,d0
00018F60 4EB9 0000 1398             		jsr	(PlaySound).l	; play MZ music
00018F66                            
00018F66                            loc_1857A:
00018F66 6100 F350                  		bsr.w	BossMove
00018F6A 6000 FDC0                  		bra.w	loc_1833E
00018F6E                            ; ===========================================================================
00018F6E                            
00018F6E                            loc_18582:				; XREF: Obj73_ShipIndex
00018F6E 317C 0500 0010             		move.w	#$500,$10(a0)
00018F74 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018F7A 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018F80 6400                       		bcc.s	loc_1859C
00018F82 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018F86 6000                       		bra.s	loc_185A2
00018F88                            ; ===========================================================================
00018F88                            
00018F88                            loc_1859C:
00018F88 4A28 0001                  		tst.b	1(a0)
00018F8C 6A00                       		bpl.s	Obj73_ShipDel
00018F8E                            
00018F8E                            loc_185A2:
00018F8E 6100 F328                  		bsr.w	BossMove
00018F92 6000 FD98                  		bra.w	loc_1833E
00018F96                            ; ===========================================================================
00018F96                            
00018F96                            Obj73_ShipDel:
00018F96 4EF9 0000 DEA4             		jmp	DeleteObject
00018F9C                            ; ===========================================================================
00018F9C                            
00018F9C                            Obj73_FaceMain:				; XREF: Obj73_Index
00018F9C 7000                       		moveq	#0,d0
00018F9E 7201                       		moveq	#1,d1
00018FA0 2268 0034                  		movea.l	$34(a0),a1
00018FA4 1029 0025                  		move.b	$25(a1),d0
00018FA8 5540                       		subq.w	#2,d0
00018FAA 6600                       		bne.s	loc_185D2
00018FAC 0829 0001 0028             		btst	#1,$28(a1)
00018FB2 6700                       		beq.s	loc_185DA
00018FB4 4A69 0012                  		tst.w	$12(a1)
00018FB8 6600                       		bne.s	loc_185DA
00018FBA 7204                       		moveq	#4,d1
00018FBC 6000                       		bra.s	loc_185EE
00018FBE                            ; ===========================================================================
00018FBE                            
00018FBE                            loc_185D2:
00018FBE 5500                       		subq.b	#2,d0
00018FC0 6B00                       		bmi.s	loc_185DA
00018FC2 720A                       		moveq	#$A,d1
00018FC4 6000                       		bra.s	loc_185EE
00018FC6                            ; ===========================================================================
00018FC6                            
00018FC6                            loc_185DA:
00018FC6 4A29 0020                  		tst.b	$20(a1)
00018FCA 6600                       		bne.s	loc_185E4
00018FCC 7205                       		moveq	#5,d1
00018FCE 6000                       		bra.s	loc_185EE
00018FD0                            ; ===========================================================================
00018FD0                            
00018FD0                            loc_185E4:
00018FD0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018FD6 6500                       		bcs.s	loc_185EE
00018FD8 7204                       		moveq	#4,d1
00018FDA                            
00018FDA                            loc_185EE:
00018FDA 1141 001C                  		move.b	d1,$1C(a0)
00018FDE 5900                       		subq.b	#4,d0
00018FE0 6600                       		bne.s	loc_18602
00018FE2 117C 0006 001C             		move.b	#6,$1C(a0)
00018FE8 4A28 0001                  		tst.b	1(a0)
00018FEC 6A00                       		bpl.s	Obj73_FaceDel
00018FEE                            
00018FEE                            loc_18602:
00018FEE 6000                       		bra.s	Obj73_Display
00018FF0                            ; ===========================================================================
00018FF0                            
00018FF0                            Obj73_FaceDel:
00018FF0 4EF9 0000 DEA4             		jmp	DeleteObject
00018FF6                            ; ===========================================================================
00018FF6                            
00018FF6                            Obj73_FlameMain:			; XREF: Obj73_Index
00018FF6 117C 0007 001C             		move.b	#7,$1C(a0)
00018FFC 2268 0034                  		movea.l	$34(a0),a1
00019000 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019006 6D00                       		blt.s	loc_1862A
00019008 117C 000B 001C             		move.b	#$B,$1C(a0)
0001900E 4A28 0001                  		tst.b	1(a0)
00019012 6A00                       		bpl.s	Obj73_FlameDel
00019014 6000                       		bra.s	loc_18636
00019016                            ; ===========================================================================
00019016                            
00019016                            loc_1862A:
00019016 4A69 0010                  		tst.w	$10(a1)
0001901A 6700                       		beq.s	loc_18636
0001901C 117C 0008 001C             		move.b	#8,$1C(a0)
00019022                            
00019022                            loc_18636:
00019022 6000                       		bra.s	Obj73_Display
00019024                            ; ===========================================================================
00019024                            
00019024                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00019024 4EF9 0000 DEA4             		jmp	DeleteObject
0001902A                            ; ===========================================================================
0001902A                            
0001902A                            Obj73_Display:
0001902A 43F9 0001 86FA             		lea	(Ani_Eggman).l,a1
00019030 4EB9 0000 AEB6             		jsr	AnimateSprite
00019036                            
00019036                            loc_1864A:
00019036 2268 0034                  		movea.l	$34(a0),a1
0001903A 3169 0008 0008             		move.w	8(a1),8(a0)
00019040 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019046 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001904C 7003                       		moveq	#3,d0
0001904E C028 0022                  		and.b	$22(a0),d0
00019052 0228 00FC 0001             		andi.b	#-4,1(a0)
00019058 8128 0001                  		or.b	d0,1(a0)
0001905C 4EF9 0000 DE68             		jmp	DisplaySprite
00019062                            ; ===========================================================================
00019062                            
00019062                            Obj73_TubeMain:				; XREF: Obj73_Index
00019062 2268 0034                  		movea.l	$34(a0),a1
00019066 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001906C 6600                       		bne.s	loc_18688
0001906E 4A28 0001                  		tst.b	1(a0)
00019072 6A00                       		bpl.s	Obj73_TubeDel
00019074                            
00019074                            loc_18688:
00019074 217C 0001 8826 0004        		move.l	#Map_BossItems,4(a0)
0001907C 317C 246C 0002             		move.w	#$246C,2(a0)
00019082 117C 0004 001A             		move.b	#4,$1A(a0)
00019088 60AC                       		bra.s	loc_1864A
0001908A                            ; ===========================================================================
0001908A                            
0001908A                            Obj73_TubeDel:
0001908A 4EF9 0000 DEA4             		jmp	DeleteObject
00019090                            ; ===========================================================================
00019090                            ; ---------------------------------------------------------------------------
00019090                            ; Object 74 - lava that	Eggman drops (MZ)
00019090                            ; ---------------------------------------------------------------------------
00019090                            
00019090                            Obj74:					; XREF: Obj_Index
00019090 7000                       		moveq	#0,d0
00019092 1028 0024                  		move.b	$24(a0),d0
00019096 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001909A 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001909E 4EF9 0000 DE68             		jmp	DisplaySprite
000190A4                            ; ===========================================================================
000190A4 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
000190A6 0000                       		dc.w Obj74_Action-Obj74_Index
000190A8 0000                       		dc.w loc_18886-Obj74_Index
000190AA 0000                       		dc.w Obj74_Delete3-Obj74_Index
000190AC                            ; ===========================================================================
000190AC                            
000190AC                            Obj74_Main:				; XREF: Obj74_Index
000190AC 117C 0008 0016             		move.b	#8,$16(a0)
000190B2 117C 0008 0017             		move.b	#8,$17(a0)
000190B8 217C 0000 BAB4 0004        		move.l	#Map_obj14,4(a0)
000190C0 317C 0345 0002             		move.w	#$345,2(a0)
000190C6 117C 0004 0001             		move.b	#4,1(a0)
000190CC 117C 0005 0018             		move.b	#5,$18(a0)
000190D2 3168 000C 0038             		move.w	$C(a0),$38(a0)
000190D8 117C 0008 0019             		move.b	#8,$19(a0)
000190DE 5428 0024                  		addq.b	#2,$24(a0)
000190E2 4A28 0028                  		tst.b	$28(a0)
000190E6 6600                       		bne.s	loc_1870A
000190E8 117C 008B 0020             		move.b	#$8B,$20(a0)
000190EE 5428 0024                  		addq.b	#2,$24(a0)
000190F2 6000 0000                  		bra.w	loc_18886
000190F6                            ; ===========================================================================
000190F6                            
000190F6                            loc_1870A:
000190F6 117C 001E 0029             		move.b	#$1E,$29(a0)
000190FC 303C 00AE                  		move.w	#$AE,d0
00019100 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play lava sound
00019106                            
00019106                            Obj74_Action:				; XREF: Obj74_Index
00019106 7000                       		moveq	#0,d0
00019108 1028 0025                  		move.b	$25(a0),d0
0001910C 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00019110 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00019114 4EB9 0000 DE42             		jsr	SpeedToPos
0001911A 43F9 0000 ED22             		lea	(Ani_obj14).l,a1
00019120 4EB9 0000 AEB6             		jsr	AnimateSprite
00019126 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001912C 6200                       		bhi.s	Obj74_Delete
0001912E 4E75                       		rts	
00019130                            ; ===========================================================================
00019130                            
00019130                            Obj74_Delete:
00019130 4EF9 0000 DEA4             		jmp	DeleteObject
00019136                            ; ===========================================================================
00019136 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00019138 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001913A 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001913C 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001913E                            ; ===========================================================================
0001913E                            
0001913E                            Obj74_Drop:				; XREF: Obj74_Index2
0001913E 08E8 0001 0022             		bset	#1,$22(a0)
00019144 5328 0029                  		subq.b	#1,$29(a0)
00019148 6A00                       		bpl.s	locret_18780
0001914A 117C 008B 0020             		move.b	#$8B,$20(a0)
00019150 4228 0028                  		clr.b	$28(a0)
00019154 0668 0018 0012             		addi.w	#$18,$12(a0)
0001915A 08A8 0001 0022             		bclr	#1,$22(a0)
00019160 6100 C618                  		bsr.w	ObjHitFloor
00019164 4A41                       		tst.w	d1
00019166 6A00                       		bpl.s	locret_18780
00019168 5428 0025                  		addq.b	#2,$25(a0)
0001916C                            
0001916C                            locret_18780:
0001916C 4E75                       		rts	
0001916E                            ; ===========================================================================
0001916E                            
0001916E                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001916E 5568 000C                  		subq.w	#2,$C(a0)
00019172 08E8 0007 0002             		bset	#7,2(a0)
00019178 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001917E 4268 0012                  		clr.w	$12(a0)
00019182 3168 0008 0030             		move.w	8(a0),$30(a0)
00019188 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001918E 117C 0003 0029             		move.b	#3,$29(a0)
00019194 4EB9 0000 E304             		jsr	SingleObjLoad2
0001919A 6600                       		bne.s	loc_187CA
0001919C 47D1                       		lea	(a1),a3
0001919E 45D0                       		lea	(a0),a2
000191A0 7003                       		moveq	#3,d0
000191A2                            
000191A2                            Obj74_Loop:
000191A2 26DA                       		move.l	(a2)+,(a3)+
000191A4 26DA                       		move.l	(a2)+,(a3)+
000191A6 26DA                       		move.l	(a2)+,(a3)+
000191A8 26DA                       		move.l	(a2)+,(a3)+
000191AA 51C8 FFF6                  		dbf	d0,Obj74_Loop
000191AE                            
000191AE 4469 0010                  		neg.w	$10(a1)
000191B2 5429 0025                  		addq.b	#2,$25(a1)
000191B6                            
000191B6                            loc_187CA:
000191B6 5428 0025                  		addq.b	#2,$25(a0)
000191BA 4E75                       		rts	
000191BC                            
000191BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000191BC                            
000191BC                            
000191BC                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000191BC 4EB9 0000 E304             		jsr	SingleObjLoad2
000191C2 6600                       		bne.s	locret_187EE
000191C4 3368 0008 0008             		move.w	8(a0),8(a1)
000191CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000191D0 12BC 0074                  		move.b	#$74,(a1)
000191D4 337C 0067 0028             		move.w	#$67,$28(a1)
000191DA                            
000191DA                            locret_187EE:
000191DA 4E75                       		rts	
000191DC                            ; End of function Obj74_Duplicate2
000191DC                            
000191DC                            ; ===========================================================================
000191DC                            
000191DC                            Obj74_Duplicate:			; XREF: Obj74_Index2
000191DC 6100 C59C                  		bsr.w	ObjHitFloor
000191E0 4A41                       		tst.w	d1
000191E2 6A00                       		bpl.s	loc_18826
000191E4 3028 0008                  		move.w	8(a0),d0
000191E8 0C40 1940                  		cmpi.w	#$1940,d0
000191EC 6E00                       		bgt.s	loc_1882C
000191EE 3228 0030                  		move.w	$30(a0),d1
000191F2 B240                       		cmp.w	d0,d1
000191F4 6700                       		beq.s	loc_1881E
000191F6 0240 0010                  		andi.w	#$10,d0
000191FA 0241 0010                  		andi.w	#$10,d1
000191FE B240                       		cmp.w	d0,d1
00019200 6700                       		beq.s	loc_1881E
00019202 61B8                       		bsr.s	Obj74_Duplicate2
00019204 3168 0008 0032             		move.w	8(a0),$32(a0)
0001920A                            
0001920A                            loc_1881E:
0001920A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019210 4E75                       		rts	
00019212                            ; ===========================================================================
00019212                            
00019212                            loc_18826:
00019212 5428 0025                  		addq.b	#2,$25(a0)
00019216 4E75                       		rts	
00019218                            ; ===========================================================================
00019218                            
00019218                            loc_1882C:
00019218 5428 0024                  		addq.b	#2,$24(a0)
0001921C 4E75                       		rts	
0001921E                            ; ===========================================================================
0001921E                            
0001921E                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001921E 08A8 0001 0022             		bclr	#1,$22(a0)
00019224 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001922A 3028 0008                  		move.w	8(a0),d0
0001922E 9068 0032                  		sub.w	$32(a0),d0
00019232 6A00                       		bpl.s	loc_1884A
00019234 4440                       		neg.w	d0
00019236                            
00019236                            loc_1884A:
00019236 0C40 0012                  		cmpi.w	#$12,d0
0001923A 6600                       		bne.s	loc_18856
0001923C 08A8 0007 0002             		bclr	#7,2(a0)
00019242                            
00019242                            loc_18856:
00019242 6100 C536                  		bsr.w	ObjHitFloor
00019246 4A41                       		tst.w	d1
00019248 6A00                       		bpl.s	locret_1887E
0001924A 5328 0029                  		subq.b	#1,$29(a0)
0001924E 6700                       		beq.s	Obj74_Delete2
00019250 4268 0012                  		clr.w	$12(a0)
00019254 3168 0032 0008             		move.w	$32(a0),8(a0)
0001925A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019260 08E8 0007 0002             		bset	#7,2(a0)
00019266 5528 0025                  		subq.b	#2,$25(a0)
0001926A                            
0001926A                            locret_1887E:
0001926A 4E75                       		rts	
0001926C                            ; ===========================================================================
0001926C                            
0001926C                            Obj74_Delete2:
0001926C 4EF9 0000 DEA4             		jmp	DeleteObject
00019272                            ; ===========================================================================
00019272                            
00019272                            loc_18886:				; XREF: Obj74_Index
00019272 08E8 0007 0002             		bset	#7,2(a0)
00019278 5328 0029                  		subq.b	#1,$29(a0)
0001927C 6600                       		bne.s	Obj74_Animate
0001927E 117C 0001 001C             		move.b	#1,$1C(a0)
00019284 5968 000C                  		subq.w	#4,$C(a0)
00019288 4228 0020                  		clr.b	$20(a0)
0001928C                            
0001928C                            Obj74_Animate:
0001928C 43F9 0000 ED22             		lea	(Ani_obj14).l,a1
00019292 4EF9 0000 AEB6             		jmp	AnimateSprite
00019298                            ; ===========================================================================
00019298                            
00019298                            Obj74_Delete3:				; XREF: Obj74_Index
00019298 4EF9 0000 DEA4             		jmp	DeleteObject
0001929E                            ; ===========================================================================
0001929E                            
0001929E                            Obj7A_Delete:
0001929E 4EF9 0000 DEA4             		jmp	DeleteObject
000192A4                            ; ===========================================================================
000192A4                            ; ---------------------------------------------------------------------------
000192A4                            ; Object 7A - Eggman (SLZ)
000192A4                            ; ---------------------------------------------------------------------------
000192A4                            
000192A4                            Obj7A:					; XREF: Obj_Index
000192A4 7000                       		moveq	#0,d0
000192A6 1028 0024                  		move.b	$24(a0),d0
000192AA 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000192AE 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000192B2                            ; ===========================================================================
000192B2 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000192B4 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000192B6 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000192B8 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000192BA 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000192BC                            
000192BC 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000192BF 0401 04                    		dc.b 4,	1, 4
000192C2 0607 04                    		dc.b 6,	7, 4
000192C5 0800 03                    		dc.b 8,	0, 3
000192C8                            ; ===========================================================================
000192C8                            
000192C8                            Obj7A_Main:				; XREF: Obj7A_Index
000192C8 317C 2188 0008             		move.w	#$2188,8(a0)
000192CE 317C 0228 000C             		move.w	#$228,$C(a0)
000192D4 3168 0008 0030             		move.w	8(a0),$30(a0)
000192DA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000192E0 117C 000F 0020             		move.b	#$F,$20(a0)
000192E6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000192EC 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000192F0 2248                       		movea.l	a0,a1
000192F2 7203                       		moveq	#3,d1
000192F4 6000                       		bra.s	Obj7A_LoadBoss
000192F6                            ; ===========================================================================
000192F6                            
000192F6                            Obj7A_Loop:
000192F6 4EB9 0000 E304             		jsr	SingleObjLoad2
000192FC 6600                       		bne.s	loc_1895C
000192FE 12BC 007A                  		move.b	#$7A,0(a1)
00019302 3368 0008 0008             		move.w	8(a0),8(a1)
00019308 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001930E                            
0001930E                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001930E 08A8 0000 0022             		bclr	#0,$22(a0)
00019314 4229 0025                  		clr.b	$25(a1)
00019318 135A 0024                  		move.b	(a2)+,$24(a1)
0001931C 135A 001C                  		move.b	(a2)+,$1C(a1)
00019320 135A 0018                  		move.b	(a2)+,$18(a1)
00019324 237C 0001 875E 0004        		move.l	#Map_Eggman,4(a1)
0001932C 337C 0400 0002             		move.w	#$400,2(a1)
00019332 137C 0004 0001             		move.b	#4,1(a1)
00019338 137C 0020 0019             		move.b	#$20,$19(a1)
0001933E 2348 0034                  		move.l	a0,$34(a1)
00019342 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019346                            
00019346                            loc_1895C:
00019346 43F8 D040                  		lea	($FFFFD040).w,a1
0001934A 45E8 002A                  		lea	$2A(a0),a2
0001934E 705E                       		moveq	#$5E,d0
00019350 723E                       		moveq	#$3E,d1
00019352                            
00019352                            loc_18968:
00019352 B011                       		cmp.b	(a1),d0
00019354 6600                       		bne.s	loc_18974
00019356 4A29 0028                  		tst.b	$28(a1)
0001935A 6700                       		beq.s	loc_18974
0001935C 34C9                       		move.w	a1,(a2)+
0001935E                            
0001935E                            loc_18974:
0001935E D2FC 0040                  		adda.w	#$40,a1
00019362 51C9 FFEE                  		dbf	d1,loc_18968
00019366                            
00019366                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00019366 7000                       		moveq	#0,d0
00019368 1028 0025                  		move.b	$25(a0),d0
0001936C 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00019370 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019374 43F9 0001 86FA             		lea	(Ani_Eggman).l,a1
0001937A 4EB9 0000 AEB6             		jsr	AnimateSprite
00019380 7003                       		moveq	#3,d0
00019382 C028 0022                  		and.b	$22(a0),d0
00019386 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001938C 8128 0001                  		or.b	d0,1(a0)
00019390 4EF9 0000 DE68             		jmp	DisplaySprite
00019396                            ; ===========================================================================
00019396 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00019398 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001939A 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001939C 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001939E 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000193A0 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000193A2                            ; ===========================================================================
000193A2                            
000193A2                            loc_189B8:				; XREF: Obj7A_ShipIndex
000193A2 317C FF00 0010             		move.w	#-$100,$10(a0)
000193A8 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000193AE 6400                       		bcc.s	loc_189CA
000193B0 5428 0025                  		addq.b	#2,$25(a0)
000193B4                            
000193B4                            loc_189CA:
000193B4 6100 EF02                  		bsr.w	BossMove
000193B8 1028 003F                  		move.b	$3F(a0),d0
000193BC 5428 003F                  		addq.b	#2,$3F(a0)
000193C0 4EB9 0000 2B40             		jsr	(CalcSine).l
000193C6 EC40                       		asr.w	#6,d0
000193C8 D068 0038                  		add.w	$38(a0),d0
000193CC 3140 000C                  		move.w	d0,$C(a0)
000193D0 3168 0030 0008             		move.w	$30(a0),8(a0)
000193D6 6000                       		bra.s	loc_189FE
000193D8                            ; ===========================================================================
000193D8                            
000193D8                            loc_189EE:
000193D8 6100 EEDE                  		bsr.w	BossMove
000193DC 3168 0038 000C             		move.w	$38(a0),$C(a0)
000193E2 3168 0030 0008             		move.w	$30(a0),8(a0)
000193E8                            
000193E8                            loc_189FE:
000193E8 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000193EE 6400                       		bcc.s	locret_18A44
000193F0 4A28 0022                  		tst.b	$22(a0)
000193F4 6B00                       		bmi.s	loc_18A46
000193F6 4A28 0020                  		tst.b	$20(a0)
000193FA 6600                       		bne.s	locret_18A44
000193FC 4A28 003E                  		tst.b	$3E(a0)
00019400 6600                       		bne.s	loc_18A28
00019402 117C 0020 003E             		move.b	#$20,$3E(a0)
00019408 303C 00AC                  		move.w	#$AC,d0
0001940C 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019412                            
00019412                            loc_18A28:
00019412 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019416 7000                       		moveq	#0,d0
00019418 4A51                       		tst.w	(a1)
0001941A 6600                       		bne.s	loc_18A36
0001941C 303C 0EEE                  		move.w	#$EEE,d0
00019420                            
00019420                            loc_18A36:
00019420 3280                       		move.w	d0,(a1)
00019422 5328 003E                  		subq.b	#1,$3E(a0)
00019426 6600                       		bne.s	locret_18A44
00019428 117C 000F 0020             		move.b	#$F,$20(a0)
0001942E                            
0001942E                            locret_18A44:
0001942E 4E75                       		rts	
00019430                            ; ===========================================================================
00019430                            
00019430                            loc_18A46:
00019430 7064                       		moveq	#100,d0
00019432 6100 0000                  		bsr.w	AddPoints
00019436 117C 0006 0025             		move.b	#6,$25(a0)
0001943C 117C 0078 003C             		move.b	#$78,$3C(a0)
00019442 4268 0010                  		clr.w	$10(a0)
00019446 4E75                       		rts	
00019448                            ; ===========================================================================
00019448                            
00019448                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019448 3028 0030                  		move.w	$30(a0),d0
0001944C 317C 0200 0010             		move.w	#$200,$10(a0)
00019452 0828 0000 0022             		btst	#0,$22(a0)
00019458 6600                       		bne.s	loc_18A7C
0001945A 4468 0010                  		neg.w	$10(a0)
0001945E 0C40 2008                  		cmpi.w	#$2008,d0
00019462 6E00                       		bgt.s	loc_18A88
00019464 6000                       		bra.s	loc_18A82
00019466                            ; ===========================================================================
00019466                            
00019466                            loc_18A7C:
00019466 0C40 2138                  		cmpi.w	#$2138,d0
0001946A 6D00                       		blt.s	loc_18A88
0001946C                            
0001946C                            loc_18A82:
0001946C 0868 0000 0022             		bchg	#0,$22(a0)
00019472                            
00019472                            loc_18A88:
00019472 3028 0008                  		move.w	8(a0),d0
00019476 72FF                       		moveq	#-1,d1
00019478 7402                       		moveq	#2,d2
0001947A 45E8 002A                  		lea	$2A(a0),a2
0001947E 7828                       		moveq	#$28,d4
00019480 4A68 0010                  		tst.w	$10(a0)
00019484 6A00                       		bpl.s	loc_18A9E
00019486 4444                       		neg.w	d4
00019488                            
00019488                            loc_18A9E:
00019488 321A                       		move.w	(a2)+,d1
0001948A 2641                       		movea.l	d1,a3
0001948C 082B 0003 0022             		btst	#3,$22(a3)
00019492 6600                       		bne.s	loc_18AB4
00019494 362B 0008                  		move.w	8(a3),d3
00019498 D644                       		add.w	d4,d3
0001949A 9640                       		sub.w	d0,d3
0001949C 6700                       		beq.s	loc_18AC0
0001949E                            
0001949E                            loc_18AB4:
0001949E 51CA FFE8                  		dbf	d2,loc_18A9E
000194A2                            
000194A2 1142 0028                  		move.b	d2,$28(a0)
000194A6 6000 FF0C                  		bra.w	loc_189CA
000194AA                            ; ===========================================================================
000194AA                            
000194AA                            loc_18AC0:
000194AA 1142 0028                  		move.b	d2,$28(a0)
000194AE 5428 0025                  		addq.b	#2,$25(a0)
000194B2 117C 0028 003C             		move.b	#$28,$3C(a0)
000194B8 6000 FEFA                  		bra.w	loc_189CA
000194BC                            ; ===========================================================================
000194BC                            
000194BC                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000194BC 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000194C2 6600                       		bne.s	loc_18B36
000194C4 70FF                       		moveq	#-1,d0
000194C6 1028 0028                  		move.b	$28(a0),d0
000194CA 4880                       		ext.w	d0
000194CC 6B00                       		bmi.s	loc_18B40
000194CE 5540                       		subq.w	#2,d0
000194D0 4440                       		neg.w	d0
000194D2 D040                       		add.w	d0,d0
000194D4 43E8 002A                  		lea	$2A(a0),a1
000194D8 3031 0000                  		move.w	(a1,d0.w),d0
000194DC 2440                       		movea.l	d0,a2
000194DE 43F8 D040                  		lea	($FFFFD040).w,a1
000194E2 723E                       		moveq	#$3E,d1
000194E4                            
000194E4                            loc_18AFA:
000194E4 B0A9 003C                  		cmp.l	$3C(a1),d0
000194E8 6700                       		beq.s	loc_18B40
000194EA D2FC 0040                  		adda.w	#$40,a1
000194EE 51C9 FFF4                  		dbf	d1,loc_18AFA
000194F2                            
000194F2 2F08                       		move.l	a0,-(sp)
000194F4 41D2                       		lea	(a2),a0
000194F6 4EB9 0000 E304             		jsr	SingleObjLoad2
000194FC 205F                       		movea.l	(sp)+,a0
000194FE 6600                       		bne.s	loc_18B40
00019500 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019504 3368 0008 0008             		move.w	8(a0),8(a1)
0001950A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019510 0669 0020 000C             		addi.w	#$20,$C(a1)
00019516 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001951C 234A 003C                  		move.l	a2,$3C(a1)
00019520                            
00019520                            loc_18B36:
00019520 5328 003C                  		subq.b	#1,$3C(a0)
00019524 6700                       		beq.s	loc_18B40
00019526 6000 FEC0                  		bra.w	loc_189FE
0001952A                            ; ===========================================================================
0001952A                            
0001952A                            loc_18B40:
0001952A 5528 0025                  		subq.b	#2,$25(a0)
0001952E 6000 FE84                  		bra.w	loc_189CA
00019532                            ; ===========================================================================
00019532                            
00019532                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019532 5328 003C                  		subq.b	#1,$3C(a0)
00019536 6B00                       		bmi.s	loc_18B52
00019538 6000 ED3C                  		bra.w	BossDefeated
0001953C                            ; ===========================================================================
0001953C                            
0001953C                            loc_18B52:
0001953C 5428 0025                  		addq.b	#2,$25(a0)
00019540 4268 0012                  		clr.w	$12(a0)
00019544 08E8 0000 0022             		bset	#0,$22(a0)
0001954A 08A8 0007 0022             		bclr	#7,$22(a0)
00019550 4268 0010                  		clr.w	$10(a0)
00019554 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001955A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001955E 6600                       		bne.s	loc_18B7C
00019560 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019566                            
00019566                            loc_18B7C:
00019566 6000 FE80                  		bra.w	loc_189FE
0001956A                            ; ===========================================================================
0001956A                            
0001956A                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001956A 5228 003C                  		addq.b	#1,$3C(a0)
0001956E 6700                       		beq.s	loc_18B90
00019570 6A00                       		bpl.s	loc_18B96
00019572 0668 0018 0012             		addi.w	#$18,$12(a0)
00019578 6000                       		bra.s	loc_18BC2
0001957A                            ; ===========================================================================
0001957A                            
0001957A                            loc_18B90:
0001957A 4268 0012                  		clr.w	$12(a0)
0001957E 6000                       		bra.s	loc_18BC2
00019580                            ; ===========================================================================
00019580                            
00019580                            loc_18B96:
00019580 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019586 6500                       		bcs.s	loc_18BAE
00019588 6700                       		beq.s	loc_18BB4
0001958A 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019590 6500                       		bcs.s	loc_18BC2
00019592 5428 0025                  		addq.b	#2,$25(a0)
00019596 6000                       		bra.s	loc_18BC2
00019598                            ; ===========================================================================
00019598                            
00019598                            loc_18BAE:
00019598 5168 0012                  		subq.w	#8,$12(a0)
0001959C 6000                       		bra.s	loc_18BC2
0001959E                            ; ===========================================================================
0001959E                            
0001959E                            loc_18BB4:
0001959E 4268 0012                  		clr.w	$12(a0)
000195A2 303C 0084                  		move.w	#$84,d0
000195A6 4EB9 0000 1398             		jsr	(PlaySound).l	; play SLZ music
000195AC                            
000195AC                            loc_18BC2:
000195AC 6000 FE2A                  		bra.w	loc_189EE
000195B0                            ; ===========================================================================
000195B0                            
000195B0                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000195B0 317C 0400 0010             		move.w	#$400,$10(a0)
000195B6 317C FFC0 0012             		move.w	#-$40,$12(a0)
000195BC 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000195C2 6400                       		bcc.s	loc_18BE0
000195C4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000195C8 6000                       		bra.s	loc_18BE8
000195CA                            ; ===========================================================================
000195CA                            
000195CA                            loc_18BE0:
000195CA 4A28 0001                  		tst.b	1(a0)
000195CE 6A00 FCCE                  		bpl.w	Obj7A_Delete
000195D2                            
000195D2                            loc_18BE8:
000195D2 6100 ECE4                  		bsr.w	BossMove
000195D6 6000 FDDC                  		bra.w	loc_189CA
000195DA                            ; ===========================================================================
000195DA                            
000195DA                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000195DA 7000                       		moveq	#0,d0
000195DC 7201                       		moveq	#1,d1
000195DE 2268 0034                  		movea.l	$34(a0),a1
000195E2 1029 0025                  		move.b	$25(a1),d0
000195E6 0C00 0006                  		cmpi.b	#6,d0
000195EA 6B00                       		bmi.s	loc_18C06
000195EC 720A                       		moveq	#$A,d1
000195EE 6000                       		bra.s	loc_18C1A
000195F0                            ; ===========================================================================
000195F0                            
000195F0                            loc_18C06:
000195F0 4A29 0020                  		tst.b	$20(a1)
000195F4 6600                       		bne.s	loc_18C10
000195F6 7205                       		moveq	#5,d1
000195F8 6000                       		bra.s	loc_18C1A
000195FA                            ; ===========================================================================
000195FA                            
000195FA                            loc_18C10:
000195FA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019600 6500                       		bcs.s	loc_18C1A
00019602 7204                       		moveq	#4,d1
00019604                            
00019604                            loc_18C1A:
00019604 1141 001C                  		move.b	d1,$1C(a0)
00019608 0C00 000A                  		cmpi.b	#$A,d0
0001960C 6600                       		bne.s	loc_18C32
0001960E 117C 0006 001C             		move.b	#6,$1C(a0)
00019614 4A28 0001                  		tst.b	1(a0)
00019618 6A00 FC84                  		bpl.w	Obj7A_Delete
0001961C                            
0001961C                            loc_18C32:
0001961C 6000                       		bra.s	loc_18C6C
0001961E                            ; ===========================================================================
0001961E                            
0001961E                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001961E 117C 0008 001C             		move.b	#8,$1C(a0)
00019624 2268 0034                  		movea.l	$34(a0),a1
00019628 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001962E 6600                       		bne.s	loc_18C56
00019630 4A28 0001                  		tst.b	1(a0)
00019634 6A00 FC68                  		bpl.w	Obj7A_Delete
00019638 117C 000B 001C             		move.b	#$B,$1C(a0)
0001963E 6000                       		bra.s	loc_18C6C
00019640                            ; ===========================================================================
00019640                            
00019640                            loc_18C56:
00019640 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019646 6E00                       		bgt.s	loc_18C6C
00019648 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001964E 6D00                       		blt.s	loc_18C6C
00019650 117C 0007 001C             		move.b	#7,$1C(a0)
00019656                            
00019656                            loc_18C6C:
00019656 43F9 0001 86FA             		lea	(Ani_Eggman).l,a1
0001965C 4EB9 0000 AEB6             		jsr	AnimateSprite
00019662                            
00019662                            loc_18C78:
00019662 2268 0034                  		movea.l	$34(a0),a1
00019666 3169 0008 0008             		move.w	8(a1),8(a0)
0001966C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019672 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019678 7003                       		moveq	#3,d0
0001967A C028 0022                  		and.b	$22(a0),d0
0001967E 0228 00FC 0001             		andi.b	#-4,1(a0)
00019684 8128 0001                  		or.b	d0,1(a0)
00019688 4EF9 0000 DE68             		jmp	DisplaySprite
0001968E                            ; ===========================================================================
0001968E                            
0001968E                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001968E 2268 0034                  		movea.l	$34(a0),a1
00019692 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019698 6600                       		bne.s	loc_18CB8
0001969A 4A28 0001                  		tst.b	1(a0)
0001969E 6A00 FBFE                  		bpl.w	Obj7A_Delete
000196A2                            
000196A2                            loc_18CB8:
000196A2 217C 0001 8826 0004        		move.l	#Map_BossItems,4(a0)
000196AA 317C 246C 0002             		move.w	#$246C,2(a0)
000196B0 117C 0003 001A             		move.b	#3,$1A(a0)
000196B6 60AA                       		bra.s	loc_18C78
000196B8                            ; ===========================================================================
000196B8                            ; ---------------------------------------------------------------------------
000196B8                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000196B8                            ; ---------------------------------------------------------------------------
000196B8                            
000196B8                            Obj7B:					; XREF: Obj_Index
000196B8 7000                       		moveq	#0,d0
000196BA 1028 0024                  		move.b	$24(a0),d0
000196BE 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000196C2 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000196C6 3028 0030                  		move.w	$30(a0),d0
000196CA 0240 FF80                  		andi.w	#$FF80,d0
000196CE 3238 F700                  		move.w	($FFFFF700).w,d1
000196D2 0441 0080                  		subi.w	#$80,d1
000196D6 0241 FF80                  		andi.w	#$FF80,d1
000196DA 9041                       		sub.w	d1,d0
000196DC 6B00 FBC0                  		bmi.w	Obj7A_Delete
000196E0 0C40 0280                  		cmpi.w	#$280,d0
000196E4 6200 FBB8                  		bhi.w	Obj7A_Delete
000196E8 4EF9 0000 DE68             		jmp	DisplaySprite
000196EE                            ; ===========================================================================
000196EE 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000196F0 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000196F2 0000                       		dc.w loc_18DC6-Obj7B_Index
000196F4 0000                       		dc.w loc_18EAA-Obj7B_Index
000196F6 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000196F8 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
000196FA                            ; ===========================================================================
000196FA                            
000196FA                            Obj7B_Main:				; XREF: Obj7B_Index
000196FA 217C 0001 2234 0004        		move.l	#Map_obj5Ea,4(a0)
00019702 317C 0518 0002             		move.w	#$518,2(a0)
00019708 117C 0001 001A             		move.b	#1,$1A(a0)
0001970E 0028 0004 0001             		ori.b	#4,1(a0)
00019714 117C 0004 0018             		move.b	#4,$18(a0)
0001971A 117C 008B 0020             		move.b	#$8B,$20(a0)
00019720 117C 000C 0019             		move.b	#$C,$19(a0)
00019726 2268 003C                  		movea.l	$3C(a0),a1
0001972A 3169 0008 0030             		move.w	8(a1),$30(a0)
00019730 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019736 08E8 0000 0022             		bset	#0,$22(a0)
0001973C 3028 0008                  		move.w	8(a0),d0
00019740 B069 0008                  		cmp.w	8(a1),d0
00019744 6E00                       		bgt.s	loc_18D68
00019746 08A8 0000 0022             		bclr	#0,$22(a0)
0001974C 117C 0002 003A             		move.b	#2,$3A(a0)
00019752                            
00019752                            loc_18D68:
00019752 5428 0024                  		addq.b	#2,$24(a0)
00019756                            
00019756                            Obj7B_Fall:				; XREF: Obj7B_Index
00019756 4EB9 0000 DDD0             		jsr	ObjectFall
0001975C 2268 003C                  		movea.l	$3C(a0),a1
00019760 45F9 0000 0000             		lea	(word_19018).l,a2
00019766 7000                       		moveq	#0,d0
00019768 1029 001A                  		move.b	$1A(a1),d0
0001976C 3228 0008                  		move.w	8(a0),d1
00019770 9268 0030                  		sub.w	$30(a0),d1
00019774 6400                       		bcc.s	loc_18D8E
00019776 5440                       		addq.w	#2,d0
00019778                            
00019778                            loc_18D8E:
00019778 D040                       		add.w	d0,d0
0001977A 3228 0034                  		move.w	$34(a0),d1
0001977E D272 0000                  		add.w	(a2,d0.w),d1
00019782 B268 000C                  		cmp.w	$C(a0),d1
00019786 6E00                       		bgt.s	locret_18DC4
00019788 2268 003C                  		movea.l	$3C(a0),a1
0001978C 7202                       		moveq	#2,d1
0001978E 0828 0000 0022             		btst	#0,$22(a0)
00019794 6700                       		beq.s	loc_18DAE
00019796 7200                       		moveq	#0,d1
00019798                            
00019798                            loc_18DAE:
00019798 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001979E 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000197A4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000197AA 6000 0000                  		bra.w	loc_18FA2
000197AE                            ; ===========================================================================
000197AE                            
000197AE                            locret_18DC4:
000197AE 4E75                       		rts	
000197B0                            ; ===========================================================================
000197B0                            
000197B0                            loc_18DC6:				; XREF: Obj7B_Index
000197B0 2268 003C                  		movea.l	$3C(a0),a1
000197B4 7000                       		moveq	#0,d0
000197B6 1028 003A                  		move.b	$3A(a0),d0
000197BA 9029 003A                  		sub.b	$3A(a1),d0
000197BE 6700                       		beq.s	loc_18E2A
000197C0 6400                       		bcc.s	loc_18DDA
000197C2 4400                       		neg.b	d0
000197C4                            
000197C4                            loc_18DDA:
000197C4 323C F7E8                  		move.w	#-$818,d1
000197C8 343C FEEC                  		move.w	#-$114,d2
000197CC 0C00 0001                  		cmpi.b	#1,d0
000197D0 6700                       		beq.s	loc_18E00
000197D2 323C F6A0                  		move.w	#-$960,d1
000197D6 343C FF0C                  		move.w	#-$F4,d2
000197DA 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000197E0 6D00                       		blt.s	loc_18E00
000197E2 323C F5E0                  		move.w	#-$A20,d1
000197E6 343C FF80                  		move.w	#-$80,d2
000197EA                            
000197EA                            loc_18E00:
000197EA 3141 0012                  		move.w	d1,$12(a0)
000197EE 3142 0010                  		move.w	d2,$10(a0)
000197F2 3028 0008                  		move.w	8(a0),d0
000197F6 9068 0030                  		sub.w	$30(a0),d0
000197FA 6400                       		bcc.s	loc_18E16
000197FC 4468 0010                  		neg.w	$10(a0)
00019800                            
00019800                            loc_18E16:
00019800 117C 0001 001A             		move.b	#1,$1A(a0)
00019806 317C 0020 0028             		move.w	#$20,$28(a0)
0001980C 5428 0024                  		addq.b	#2,$24(a0)
00019810 6000 0000                  		bra.w	loc_18EAA
00019814                            ; ===========================================================================
00019814                            
00019814                            loc_18E2A:				; XREF: loc_18DC6
00019814 45F9 0000 0000             		lea	(word_19018).l,a2
0001981A 7000                       		moveq	#0,d0
0001981C 1029 001A                  		move.b	$1A(a1),d0
00019820 343C 0028                  		move.w	#$28,d2
00019824 3228 0008                  		move.w	8(a0),d1
00019828 9268 0030                  		sub.w	$30(a0),d1
0001982C 6400                       		bcc.s	loc_18E48
0001982E 4442                       		neg.w	d2
00019830 5440                       		addq.w	#2,d0
00019832                            
00019832                            loc_18E48:
00019832 D040                       		add.w	d0,d0
00019834 3228 0034                  		move.w	$34(a0),d1
00019838 D272 0000                  		add.w	(a2,d0.w),d1
0001983C 3141 000C                  		move.w	d1,$C(a0)
00019840 D468 0030                  		add.w	$30(a0),d2
00019844 3142 0008                  		move.w	d2,8(a0)
00019848 4268 000E                  		clr.w	$E(a0)
0001984C 4268 000A                  		clr.w	$A(a0)
00019850 5368 0028                  		subq.w	#1,$28(a0)
00019854 6600                       		bne.s	loc_18E7A
00019856 317C 0020 0028             		move.w	#$20,$28(a0)
0001985C 117C 0008 0024             		move.b	#8,$24(a0)
00019862 4E75                       		rts	
00019864                            ; ===========================================================================
00019864                            
00019864                            loc_18E7A:
00019864 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001986A 6600                       		bne.s	loc_18E88
0001986C 117C 0005 001F             		move.b	#5,$1F(a0)
00019872                            
00019872                            loc_18E88:
00019872 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019878 6600                       		bne.s	loc_18E96
0001987A 117C 0002 001F             		move.b	#2,$1F(a0)
00019880                            
00019880                            loc_18E96:
00019880 5328 001E                  		subq.b	#1,$1E(a0)
00019884 6E00                       		bgt.s	locret_18EA8
00019886 0868 0000 001A             		bchg	#0,$1A(a0)
0001988C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019892                            
00019892                            locret_18EA8:
00019892 4E75                       		rts	
00019894                            ; ===========================================================================
00019894                            
00019894                            loc_18EAA:				; XREF: Obj7B_Index
00019894 43F8 D040                  		lea	($FFFFD040).w,a1
00019898 707A                       		moveq	#$7A,d0
0001989A 7240                       		moveq	#$40,d1
0001989C 743E                       		moveq	#$3E,d2
0001989E                            
0001989E                            loc_18EB4:
0001989E B011                       		cmp.b	(a1),d0
000198A0 6700                       		beq.s	loc_18EC0
000198A2 D2C1                       		adda.w	d1,a1
000198A4 51CA FFF8                  		dbf	d2,loc_18EB4
000198A8                            
000198A8 6000                       		bra.s	loc_18F38
000198AA                            ; ===========================================================================
000198AA                            
000198AA                            loc_18EC0:
000198AA 3029 0008                  		move.w	8(a1),d0
000198AE 3229 000C                  		move.w	$C(a1),d1
000198B2 3428 0008                  		move.w	8(a0),d2
000198B6 3628 000C                  		move.w	$C(a0),d3
000198BA 45FA 0000                  		lea	byte_19022(pc),a2
000198BE 47FA 0000                  		lea	byte_19026(pc),a3
000198C2 181A                       		move.b	(a2)+,d4
000198C4 4884                       		ext.w	d4
000198C6 D044                       		add.w	d4,d0
000198C8 181B                       		move.b	(a3)+,d4
000198CA 4884                       		ext.w	d4
000198CC D444                       		add.w	d4,d2
000198CE B440                       		cmp.w	d0,d2
000198D0 6500                       		bcs.s	loc_18F38
000198D2 181A                       		move.b	(a2)+,d4
000198D4 4884                       		ext.w	d4
000198D6 D044                       		add.w	d4,d0
000198D8 181B                       		move.b	(a3)+,d4
000198DA 4884                       		ext.w	d4
000198DC D444                       		add.w	d4,d2
000198DE B042                       		cmp.w	d2,d0
000198E0 6500                       		bcs.s	loc_18F38
000198E2 181A                       		move.b	(a2)+,d4
000198E4 4884                       		ext.w	d4
000198E6 D244                       		add.w	d4,d1
000198E8 181B                       		move.b	(a3)+,d4
000198EA 4884                       		ext.w	d4
000198EC D644                       		add.w	d4,d3
000198EE B641                       		cmp.w	d1,d3
000198F0 6500                       		bcs.s	loc_18F38
000198F2 181A                       		move.b	(a2)+,d4
000198F4 4884                       		ext.w	d4
000198F6 D244                       		add.w	d4,d1
000198F8 181B                       		move.b	(a3)+,d4
000198FA 4884                       		ext.w	d4
000198FC D644                       		add.w	d4,d3
000198FE B243                       		cmp.w	d3,d1
00019900 6500                       		bcs.s	loc_18F38
00019902 5428 0024                  		addq.b	#2,$24(a0)
00019906 4268 0028                  		clr.w	$28(a0)
0001990A 4229 0020                  		clr.b	$20(a1)
0001990E 5329 0021                  		subq.b	#1,$21(a1)
00019912 6600                       		bne.s	loc_18F38
00019914 08E9 0007 0022             		bset	#7,$22(a1)
0001991A 4268 0010                  		clr.w	$10(a0)
0001991E 4268 0012                  		clr.w	$12(a0)
00019922                            
00019922                            loc_18F38:
00019922 4A68 0012                  		tst.w	$12(a0)
00019926 6A00                       		bpl.s	loc_18F5C
00019928 4EB9 0000 DDD0             		jsr	ObjectFall
0001992E 3028 0034                  		move.w	$34(a0),d0
00019932 0440 002F                  		subi.w	#$2F,d0
00019936 B068 000C                  		cmp.w	$C(a0),d0
0001993A 6E00                       		bgt.s	loc_18F58
0001993C 4EB9 0000 DDD0             		jsr	ObjectFall
00019942                            
00019942                            loc_18F58:
00019942 6000 FF20                  		bra.w	loc_18E7A
00019946                            ; ===========================================================================
00019946                            
00019946                            loc_18F5C:
00019946 4EB9 0000 DDD0             		jsr	ObjectFall
0001994C 2268 003C                  		movea.l	$3C(a0),a1
00019950 45F9 0000 0000             		lea	(word_19018).l,a2
00019956 7000                       		moveq	#0,d0
00019958 1029 001A                  		move.b	$1A(a1),d0
0001995C 3228 0008                  		move.w	8(a0),d1
00019960 9268 0030                  		sub.w	$30(a0),d1
00019964 6400                       		bcc.s	loc_18F7E
00019966 5440                       		addq.w	#2,d0
00019968                            
00019968                            loc_18F7E:
00019968 D040                       		add.w	d0,d0
0001996A 3228 0034                  		move.w	$34(a0),d1
0001996E D272 0000                  		add.w	(a2,d0.w),d1
00019972 B268 000C                  		cmp.w	$C(a0),d1
00019976 6ECA                       		bgt.s	loc_18F58
00019978 2268 003C                  		movea.l	$3C(a0),a1
0001997C 7202                       		moveq	#2,d1
0001997E 4A68 0010                  		tst.w	$10(a0)
00019982 6B00                       		bmi.s	loc_18F9C
00019984 7200                       		moveq	#0,d1
00019986                            
00019986                            loc_18F9C:
00019986 317C 0000 0028             		move.w	#0,$28(a0)
0001998C                            
0001998C                            loc_18FA2:
0001998C 1341 003A                  		move.b	d1,$3A(a1)
00019990 1141 003A                  		move.b	d1,$3A(a0)
00019994 B229 001A                  		cmp.b	$1A(a1),d1
00019998 6700                       		beq.s	loc_19008
0001999A 08A9 0003 0022             		bclr	#3,$22(a1)
000199A0 6700                       		beq.s	loc_19008
000199A2 4229 0025                  		clr.b	$25(a1)
000199A6 137C 0002 0024             		move.b	#2,$24(a1)
000199AC 45F8 D000                  		lea	($FFFFD000).w,a2
000199B0 3568 0012 0012             		move.w	$12(a0),$12(a2)
000199B6 446A 0012                  		neg.w	$12(a2)
000199BA 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000199C0 6600                       		bne.s	loc_18FDC
000199C2 E0EA 0012                  		asr	$12(a2)
000199C6                            
000199C6                            loc_18FDC:
000199C6 08EA 0001 0022             		bset	#1,$22(a2)
000199CC 08AA 0003 0022             		bclr	#3,$22(a2)
000199D2 422A 003C                  		clr.b	$3C(a2)
000199D6 2F08                       		move.l	a0,-(sp)
000199D8 41D2                       		lea	(a2),a0
000199DA 4EBA A2E0                  		jsr	Obj01_ChkRoll
000199DE 205F                       		movea.l	(sp)+,a0
000199E0 157C 0002 0024             		move.b	#2,$24(a2)
000199E6 303C 00CC                  		move.w	#$CC,d0
000199EA 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play "spring" sound
000199F0                            
000199F0                            loc_19008:
000199F0 4268 0010                  		clr.w	$10(a0)
000199F4 4268 0012                  		clr.w	$12(a0)
000199F8 5428 0024                  		addq.b	#2,$24(a0)
000199FC 6000 FE66                  		bra.w	loc_18E7A
00019A00                            ; ===========================================================================
00019A00 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019A0A                            		even
00019A0A E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019A0E                            		even
00019A0E 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019A12                            		even
00019A12                            ; ===========================================================================
00019A12                            
00019A12                            Obj7B_Explode:				; XREF: Obj7B_Index
00019A12 10BC 003F                  		move.b	#$3F,(a0)
00019A16 4228 0024                  		clr.b	$24(a0)
00019A1A 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019A20 6700                       		beq.s	Obj7B_MakeFrag
00019A22 4E75                       		rts	
00019A24                            ; ===========================================================================
00019A24                            
00019A24                            Obj7B_MakeFrag:
00019A24 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019A2A 7203                       		moveq	#3,d1
00019A2C 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019A30                            
00019A30                            Obj7B_Loop:
00019A30 4EB9 0000 E2EE             		jsr	SingleObjLoad
00019A36 6600                       		bne.s	loc_1909A
00019A38 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019A3C 137C 000A 0024             		move.b	#$A,$24(a1)
00019A42 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019A4A 137C 0003 0018             		move.b	#3,$18(a1)
00019A50 337C 0518 0002             		move.w	#$518,2(a1)
00019A56 3368 0008 0008             		move.w	8(a0),8(a1)
00019A5C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019A62 335A 0010                  		move.w	(a2)+,$10(a1)
00019A66 335A 0012                  		move.w	(a2)+,$12(a1)
00019A6A 137C 0098 0020             		move.b	#$98,$20(a1)
00019A70 0029 0004 0001             		ori.b	#4,1(a1)
00019A76 08E9 0007 0001             		bset	#7,1(a1)
00019A7C 137C 000C 0019             		move.b	#$C,$19(a1)
00019A82                            
00019A82                            loc_1909A:
00019A82 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019A86                            
00019A86 4E75                       		rts	
00019A88                            ; ===========================================================================
00019A88 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019A8C FF60 FDC0                  		dc.w $FF60, $FDC0
00019A90 0100 FCC0                  		dc.w $100, $FCC0
00019A94 00A0 FDC0                  		dc.w $A0, $FDC0
00019A98                            ; ===========================================================================
00019A98                            
00019A98                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019A98 4EB9 0000 DE42             		jsr	SpeedToPos
00019A9E 3168 0008 0030             		move.w	8(a0),$30(a0)
00019AA4 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019AAA 0668 0018 0012             		addi.w	#$18,$12(a0)
00019AB0 7004                       		moveq	#4,d0
00019AB2 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019AB6 E448                       		lsr.w	#2,d0
00019AB8 1140 001A                  		move.b	d0,$1A(a0)
00019ABC 4A28 0001                  		tst.b	1(a0)
00019AC0 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019AC4 4E75                       		rts	
00019AC6                            ; ===========================================================================
00019AC6                            ; ---------------------------------------------------------------------------
00019AC6                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019AC6                            ; ---------------------------------------------------------------------------
00019AC6                            Map_obj7B:
00019AC6                            	include "_maps\obj7B.asm"
00019AC6                            ; ---------------------------------------------------------------------------
00019AC6                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019AC6                            ; ---------------------------------------------------------------------------
00019AC6 0000                       		dc.w byte_190E2-Map_obj7B
00019AC8 0000                       		dc.w byte_190E8-Map_obj7B
00019ACA 01                         byte_190E2:	dc.b 1
00019ACB FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019AD0 01                         byte_190E8:	dc.b 1
00019AD1 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019AD6                            		even
00019AD6                            		even
00019AD6                            
00019AD6                            ; ===========================================================================
00019AD6                            ; ---------------------------------------------------------------------------
00019AD6                            ; Object 75 - Eggman (SYZ)
00019AD6                            ; ---------------------------------------------------------------------------
00019AD6                            
00019AD6                            Obj75:					; XREF: Obj_Index
00019AD6 7000                       		moveq	#0,d0
00019AD8 1028 0024                  		move.b	$24(a0),d0
00019ADC 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019AE0 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019AE4                            ; ===========================================================================
00019AE4 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019AE6 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019AE8 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019AEA 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019AEC 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019AEE                            
00019AEE 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019AF1 0401 05                    		dc.b 4,	1, 5
00019AF4 0607 05                    		dc.b 6,	7, 5
00019AF7 0800 05                    		dc.b 8,	0, 5
00019AFA                            ; ===========================================================================
00019AFA                            
00019AFA                            Obj75_Main:				; XREF: Obj75_Index
00019AFA 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019B00 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019B06 3168 0008 0030             		move.w	8(a0),$30(a0)
00019B0C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019B12 117C 000F 0020             		move.b	#$F,$20(a0)
00019B18 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019B1E 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019B22 2248                       		movea.l	a0,a1
00019B24 7203                       		moveq	#3,d1
00019B26 6000                       		bra.s	Obj75_LoadBoss
00019B28                            ; ===========================================================================
00019B28                            
00019B28                            Obj75_Loop:
00019B28 4EB9 0000 E304             		jsr	SingleObjLoad2
00019B2E 6600                       		bne.s	Obj75_ShipMain
00019B30 12BC 0075                  		move.b	#$75,(a1)
00019B34 3368 0008 0008             		move.w	8(a0),8(a1)
00019B3A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019B40                            
00019B40                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019B40 08A8 0000 0022             		bclr	#0,$22(a0)
00019B46 4229 0025                  		clr.b	$25(a1)
00019B4A 135A 0024                  		move.b	(a2)+,$24(a1)
00019B4E 135A 001C                  		move.b	(a2)+,$1C(a1)
00019B52 135A 0018                  		move.b	(a2)+,$18(a1)
00019B56 237C 0001 875E 0004        		move.l	#Map_Eggman,4(a1)
00019B5E 337C 0400 0002             		move.w	#$400,2(a1)
00019B64 137C 0004 0001             		move.b	#4,1(a1)
00019B6A 137C 0020 0019             		move.b	#$20,$19(a1)
00019B70 2348 0034                  		move.l	a0,$34(a1)
00019B74 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019B78                            
00019B78                            Obj75_ShipMain:				; XREF: Obj75_Index
00019B78 7000                       		moveq	#0,d0
00019B7A 1028 0025                  		move.b	$25(a0),d0
00019B7E 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019B82 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019B86 43F9 0001 86FA             		lea	(Ani_Eggman).l,a1
00019B8C 4EB9 0000 AEB6             		jsr	AnimateSprite
00019B92 7003                       		moveq	#3,d0
00019B94 C028 0022                  		and.b	$22(a0),d0
00019B98 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019B9E 8128 0001                  		or.b	d0,1(a0)
00019BA2 4EF9 0000 DE68             		jmp	DisplaySprite
00019BA8                            ; ===========================================================================
00019BA8 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019BAC 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019BB0 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019BB4                            ; ===========================================================================
00019BB4                            
00019BB4                            loc_191CC:				; XREF: Obj75_ShipIndex
00019BB4 317C FF00 0010             		move.w	#-$100,$10(a0)
00019BBA 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019BC0 6400                       		bcc.s	loc_191DE
00019BC2 5428 0025                  		addq.b	#2,$25(a0)
00019BC6                            
00019BC6                            loc_191DE:
00019BC6 1028 003F                  		move.b	$3F(a0),d0
00019BCA 5428 003F                  		addq.b	#2,$3F(a0)
00019BCE 4EB9 0000 2B40             		jsr	(CalcSine).l
00019BD4 E440                       		asr.w	#2,d0
00019BD6 3140 0012                  		move.w	d0,$12(a0)
00019BDA                            
00019BDA                            loc_191F2:
00019BDA 6100 E6DC                  		bsr.w	BossMove
00019BDE 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019BE4 3168 0030 0008             		move.w	$30(a0),8(a0)
00019BEA                            
00019BEA                            loc_19202:
00019BEA 3028 0008                  		move.w	8(a0),d0
00019BEE 0440 2C00                  		subi.w	#$2C00,d0
00019BF2 EA48                       		lsr.w	#5,d0
00019BF4 1140 0034                  		move.b	d0,$34(a0)
00019BF8 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019BFE 6400                       		bcc.s	locret_19256
00019C00 4A28 0022                  		tst.b	$22(a0)
00019C04 6B00                       		bmi.s	loc_19258
00019C06 4A28 0020                  		tst.b	$20(a0)
00019C0A 6600                       		bne.s	locret_19256
00019C0C 4A28 003E                  		tst.b	$3E(a0)
00019C10 6600                       		bne.s	loc_1923A
00019C12 117C 0020 003E             		move.b	#$20,$3E(a0)
00019C18 303C 00AC                  		move.w	#$AC,d0
00019C1C 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019C22                            
00019C22                            loc_1923A:
00019C22 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019C26 7000                       		moveq	#0,d0
00019C28 4A51                       		tst.w	(a1)
00019C2A 6600                       		bne.s	loc_19248
00019C2C 303C 0EEE                  		move.w	#$EEE,d0
00019C30                            
00019C30                            loc_19248:
00019C30 3280                       		move.w	d0,(a1)
00019C32 5328 003E                  		subq.b	#1,$3E(a0)
00019C36 6600                       		bne.s	locret_19256
00019C38 117C 000F 0020             		move.b	#$F,$20(a0)
00019C3E                            
00019C3E                            locret_19256:
00019C3E 4E75                       		rts	
00019C40                            ; ===========================================================================
00019C40                            
00019C40                            loc_19258:				; XREF: loc_19202
00019C40 7064                       		moveq	#100,d0
00019C42 6100 0000                  		bsr.w	AddPoints
00019C46 117C 0006 0025             		move.b	#6,$25(a0)
00019C4C 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019C52 4268 0010                  		clr.w	$10(a0)
00019C56 4E75                       		rts	
00019C58                            ; ===========================================================================
00019C58                            
00019C58                            loc_19270:				; XREF: Obj75_ShipIndex
00019C58 3028 0030                  		move.w	$30(a0),d0
00019C5C 317C 0140 0010             		move.w	#$140,$10(a0)
00019C62 0828 0000 0022             		btst	#0,$22(a0)
00019C68 6600                       		bne.s	loc_1928E
00019C6A 4468 0010                  		neg.w	$10(a0)
00019C6E 0C40 2C08                  		cmpi.w	#$2C08,d0
00019C72 6E00                       		bgt.s	loc_1929E
00019C74 6000                       		bra.s	loc_19294
00019C76                            ; ===========================================================================
00019C76                            
00019C76                            loc_1928E:
00019C76 0C40 2D38                  		cmpi.w	#$2D38,d0
00019C7A 6D00                       		blt.s	loc_1929E
00019C7C                            
00019C7C                            loc_19294:
00019C7C 0868 0000 0022             		bchg	#0,$22(a0)
00019C82 4228 003D                  		clr.b	$3D(a0)
00019C86                            
00019C86                            loc_1929E:
00019C86 0440 2C10                  		subi.w	#$2C10,d0
00019C8A 0240 001F                  		andi.w	#$1F,d0
00019C8E 0440 001F                  		subi.w	#$1F,d0
00019C92 6A00                       		bpl.s	loc_192AE
00019C94 4440                       		neg.w	d0
00019C96                            
00019C96                            loc_192AE:
00019C96 5340                       		subq.w	#1,d0
00019C98 6E00                       		bgt.s	loc_192E8
00019C9A 4A28 003D                  		tst.b	$3D(a0)
00019C9E 6600                       		bne.s	loc_192E8
00019CA0 3238 D008                  		move.w	($FFFFD008).w,d1
00019CA4 0441 2C00                  		subi.w	#$2C00,d1
00019CA8 EA41                       		asr.w	#5,d1
00019CAA B228 0034                  		cmp.b	$34(a0),d1
00019CAE 6600                       		bne.s	loc_192E8
00019CB0 7000                       		moveq	#0,d0
00019CB2 1028 0034                  		move.b	$34(a0),d0
00019CB6 EB40                       		asl.w	#5,d0
00019CB8 0640 2C10                  		addi.w	#$2C10,d0
00019CBC 3140 0030                  		move.w	d0,$30(a0)
00019CC0 6100 0000                  		bsr.w	Obj75_FindBlocks
00019CC4 5428 0025                  		addq.b	#2,$25(a0)
00019CC8 4268 0028                  		clr.w	$28(a0)
00019CCC 4268 0010                  		clr.w	$10(a0)
00019CD0                            
00019CD0                            loc_192E8:
00019CD0 6000 FEF4                  		bra.w	loc_191DE
00019CD4                            ; ===========================================================================
00019CD4                            
00019CD4                            loc_192EC:				; XREF: Obj75_ShipIndex
00019CD4 7000                       		moveq	#0,d0
00019CD6 1028 0028                  		move.b	$28(a0),d0
00019CDA 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019CDE 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019CE2                            ; ===========================================================================
00019CE2 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019CE4 0000                       		dc.w loc_19348-off_192FA
00019CE6 0000                       		dc.w loc_1938E-off_192FA
00019CE8 0000                       		dc.w loc_193D0-off_192FA
00019CEA                            ; ===========================================================================
00019CEA                            
00019CEA                            loc_19302:				; XREF: off_192FA
00019CEA 317C 0180 0012             		move.w	#$180,$12(a0)
00019CF0 3028 0038                  		move.w	$38(a0),d0
00019CF4 0C40 0556                  		cmpi.w	#$556,d0
00019CF8 6500                       		bcs.s	loc_19344
00019CFA 317C 0556 0038             		move.w	#$556,$38(a0)
00019D00 4268 003C                  		clr.w	$3C(a0)
00019D04 70FF                       		moveq	#-1,d0
00019D06 3028 0036                  		move.w	$36(a0),d0
00019D0A 6700                       		beq.s	loc_1933C
00019D0C 2240                       		movea.l	d0,a1
00019D0E 137C 00FF 0029             		move.b	#-1,$29(a1)
00019D14 117C 00FF 0029             		move.b	#-1,$29(a0)
00019D1A 2348 0034                  		move.l	a0,$34(a1)
00019D1E 317C 0032 003C             		move.w	#$32,$3C(a0)
00019D24                            
00019D24                            loc_1933C:
00019D24 4268 0012                  		clr.w	$12(a0)
00019D28 5428 0028                  		addq.b	#2,$28(a0)
00019D2C                            
00019D2C                            loc_19344:
00019D2C 6000 FEAC                  		bra.w	loc_191F2
00019D30                            ; ===========================================================================
00019D30                            
00019D30                            loc_19348:				; XREF: off_192FA
00019D30 5368 003C                  		subq.w	#1,$3C(a0)
00019D34 6A00                       		bpl.s	loc_19366
00019D36 5428 0028                  		addq.b	#2,$28(a0)
00019D3A 317C F800 0012             		move.w	#-$800,$12(a0)
00019D40 4A68 0036                  		tst.w	$36(a0)
00019D44 6600                       		bne.s	loc_19362
00019D46 E0E8 0012                  		asr	$12(a0)
00019D4A                            
00019D4A                            loc_19362:
00019D4A 7000                       		moveq	#0,d0
00019D4C 6000                       		bra.s	loc_1937C
00019D4E                            ; ===========================================================================
00019D4E                            
00019D4E                            loc_19366:
00019D4E 7000                       		moveq	#0,d0
00019D50 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019D56 6E00                       		bgt.s	loc_1937C
00019D58 7002                       		moveq	#2,d0
00019D5A 0828 0001 003D             		btst	#1,$3D(a0)
00019D60 6700                       		beq.s	loc_1937C
00019D62 4440                       		neg.w	d0
00019D64                            
00019D64                            loc_1937C:
00019D64 D068 0038                  		add.w	$38(a0),d0
00019D68 3140 000C                  		move.w	d0,$C(a0)
00019D6C 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D72 6000 FE76                  		bra.w	loc_19202
00019D76                            ; ===========================================================================
00019D76                            
00019D76                            loc_1938E:				; XREF: off_192FA
00019D76 303C 04DA                  		move.w	#$4DA,d0
00019D7A 4A68 0036                  		tst.w	$36(a0)
00019D7E 6700                       		beq.s	loc_1939C
00019D80 0440 0018                  		subi.w	#$18,d0
00019D84                            
00019D84                            loc_1939C:
00019D84 B068 0038                  		cmp.w	$38(a0),d0
00019D88 6D00                       		blt.s	loc_193BE
00019D8A 317C 0008 003C             		move.w	#8,$3C(a0)
00019D90 4A68 0036                  		tst.w	$36(a0)
00019D94 6700                       		beq.s	loc_193B4
00019D96 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019D9C                            
00019D9C                            loc_193B4:
00019D9C 5428 0028                  		addq.b	#2,$28(a0)
00019DA0 4268 0012                  		clr.w	$12(a0)
00019DA4 6000                       		bra.s	loc_193CC
00019DA6                            ; ===========================================================================
00019DA6                            
00019DA6                            loc_193BE:
00019DA6 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019DAC 6C00                       		bge.s	loc_193CC
00019DAE 0668 000C 0012             		addi.w	#$C,$12(a0)
00019DB4                            
00019DB4                            loc_193CC:
00019DB4 6000 FE24                  		bra.w	loc_191F2
00019DB8                            ; ===========================================================================
00019DB8                            
00019DB8                            loc_193D0:				; XREF: off_192FA
00019DB8 5368 003C                  		subq.w	#1,$3C(a0)
00019DBC 6E00                       		bgt.s	loc_19406
00019DBE 6B00                       		bmi.s	loc_193EE
00019DC0 70FF                       		moveq	#-1,d0
00019DC2 3028 0036                  		move.w	$36(a0),d0
00019DC6 6700                       		beq.s	loc_193E8
00019DC8 2240                       		movea.l	d0,a1
00019DCA 137C 000A 0029             		move.b	#$A,$29(a1)
00019DD0                            
00019DD0                            loc_193E8:
00019DD0 4268 0036                  		clr.w	$36(a0)
00019DD4 6000                       		bra.s	loc_19406
00019DD6                            ; ===========================================================================
00019DD6                            
00019DD6                            loc_193EE:
00019DD6 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019DDC 6600                       		bne.s	loc_19406
00019DDE 4228 0029                  		clr.b	$29(a0)
00019DE2 5528 0025                  		subq.b	#2,$25(a0)
00019DE6 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019DEC 6000                       		bra.s	loc_19446
00019DEE                            ; ===========================================================================
00019DEE                            
00019DEE                            loc_19406:
00019DEE 7001                       		moveq	#1,d0
00019DF0 4A68 0036                  		tst.w	$36(a0)
00019DF4 6700                       		beq.s	loc_19410
00019DF6 7002                       		moveq	#2,d0
00019DF8                            
00019DF8                            loc_19410:
00019DF8 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019DFE 6700                       		beq.s	loc_19424
00019E00 6D00                       		blt.s	loc_1941C
00019E02 4440                       		neg.w	d0
00019E04                            
00019E04                            loc_1941C:
00019E04 4A68 0036                  		tst.w	$36(a0)
00019E08 D168 0038                  		add.w	d0,$38(a0)
00019E0C                            
00019E0C                            loc_19424:
00019E0C 7000                       		moveq	#0,d0
00019E0E 4A68 0036                  		tst.w	$36(a0)
00019E12 6700                       		beq.s	loc_19438
00019E14 7002                       		moveq	#2,d0
00019E16 0828 0000 003D             		btst	#0,$3D(a0)
00019E1C 6700                       		beq.s	loc_19438
00019E1E 4440                       		neg.w	d0
00019E20                            
00019E20                            loc_19438:
00019E20 D068 0038                  		add.w	$38(a0),d0
00019E24 3140 000C                  		move.w	d0,$C(a0)
00019E28 3168 0030 0008             		move.w	$30(a0),8(a0)
00019E2E                            
00019E2E                            loc_19446:
00019E2E 6000 FDBA                  		bra.w	loc_19202
00019E32                            
00019E32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019E32                            
00019E32                            
00019E32                            Obj75_FindBlocks:			; XREF: loc_192AE
00019E32 4268 0036                  		clr.w	$36(a0)
00019E36 43F8 D040                  		lea	($FFFFD040).w,a1
00019E3A 703E                       		moveq	#$3E,d0
00019E3C 7276                       		moveq	#$76,d1
00019E3E 1428 0034                  		move.b	$34(a0),d2
00019E42                            
00019E42                            Obj75_FindLoop:
00019E42 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019E44 6600                       		bne.s	loc_1946A	; if not, branch
00019E46 B429 0028                  		cmp.b	$28(a1),d2
00019E4A 6600                       		bne.s	loc_1946A
00019E4C 3149 0036                  		move.w	a1,$36(a0)
00019E50 6000                       		bra.s	locret_19472
00019E52                            ; ===========================================================================
00019E52                            
00019E52                            loc_1946A:
00019E52 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019E56 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019E5A                            
00019E5A                            locret_19472:
00019E5A 4E75                       		rts	
00019E5C                            ; End of function Obj75_FindBlocks
00019E5C                            
00019E5C                            ; ===========================================================================
00019E5C                            
00019E5C                            loc_19474:				; XREF: Obj75_ShipIndex
00019E5C 5368 003C                  		subq.w	#1,$3C(a0)
00019E60 6B00                       		bmi.s	loc_1947E
00019E62 6000 E412                  		bra.w	BossDefeated
00019E66                            ; ===========================================================================
00019E66                            
00019E66                            loc_1947E:
00019E66 5428 0025                  		addq.b	#2,$25(a0)
00019E6A 4268 0012                  		clr.w	$12(a0)
00019E6E 08E8 0000 0022             		bset	#0,$22(a0)
00019E74 08A8 0007 0022             		bclr	#7,$22(a0)
00019E7A 4268 0010                  		clr.w	$10(a0)
00019E7E 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019E84 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019E88 6600                       		bne.s	loc_194A8
00019E8A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019E90                            
00019E90                            loc_194A8:
00019E90 6000 FD58                  		bra.w	loc_19202
00019E94                            ; ===========================================================================
00019E94                            
00019E94                            loc_194AC:				; XREF: Obj75_ShipIndex
00019E94 5268 003C                  		addq.w	#1,$3C(a0)
00019E98 6700                       		beq.s	loc_194BC
00019E9A 6A00                       		bpl.s	loc_194C2
00019E9C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019EA2 6000                       		bra.s	loc_194EE
00019EA4                            ; ===========================================================================
00019EA4                            
00019EA4                            loc_194BC:
00019EA4 4268 0012                  		clr.w	$12(a0)
00019EA8 6000                       		bra.s	loc_194EE
00019EAA                            ; ===========================================================================
00019EAA                            
00019EAA                            loc_194C2:
00019EAA 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019EB0 6500                       		bcs.s	loc_194DA
00019EB2 6700                       		beq.s	loc_194E0
00019EB4 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019EBA 6500                       		bcs.s	loc_194EE
00019EBC 5428 0025                  		addq.b	#2,$25(a0)
00019EC0 6000                       		bra.s	loc_194EE
00019EC2                            ; ===========================================================================
00019EC2                            
00019EC2                            loc_194DA:
00019EC2 5168 0012                  		subq.w	#8,$12(a0)
00019EC6 6000                       		bra.s	loc_194EE
00019EC8                            ; ===========================================================================
00019EC8                            
00019EC8                            loc_194E0:
00019EC8 4268 0012                  		clr.w	$12(a0)
00019ECC 303C 0085                  		move.w	#$85,d0
00019ED0 4EB9 0000 1398             		jsr	(PlaySound).l	; play SYZ music
00019ED6                            
00019ED6                            loc_194EE:
00019ED6 6000 FD02                  		bra.w	loc_191F2
00019EDA                            ; ===========================================================================
00019EDA                            
00019EDA                            loc_194F2:				; XREF: Obj75_ShipIndex
00019EDA 317C 0400 0010             		move.w	#$400,$10(a0)
00019EE0 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019EE6 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019EEC 6400                       		bcc.s	loc_1950C
00019EEE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019EF2 6000                       		bra.s	loc_19512
00019EF4                            ; ===========================================================================
00019EF4                            
00019EF4                            loc_1950C:
00019EF4 4A28 0001                  		tst.b	1(a0)
00019EF8 6A00                       		bpl.s	Obj75_ShipDelete
00019EFA                            
00019EFA                            loc_19512:
00019EFA 6100 E3BC                  		bsr.w	BossMove
00019EFE 6000 FCC6                  		bra.w	loc_191DE
00019F02                            ; ===========================================================================
00019F02                            
00019F02                            Obj75_ShipDelete:
00019F02 4EF9 0000 DEA4             		jmp	DeleteObject
00019F08                            ; ===========================================================================
00019F08                            
00019F08                            Obj75_FaceMain:				; XREF: Obj75_Index
00019F08 7201                       		moveq	#1,d1
00019F0A 2268 0034                  		movea.l	$34(a0),a1
00019F0E 7000                       		moveq	#0,d0
00019F10 1029 0025                  		move.b	$25(a1),d0
00019F14 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019F18 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019F1C 1141 001C                  		move.b	d1,$1C(a0)
00019F20 1010                       		move.b	(a0),d0
00019F22 B011                       		cmp.b	(a1),d0
00019F24 6600                       		bne.s	Obj75_FaceDelete
00019F26 6000                       		bra.s	loc_195BE
00019F28                            ; ===========================================================================
00019F28                            
00019F28                            Obj75_FaceDelete:
00019F28 4EF9 0000 DEA4             		jmp	DeleteObject
00019F2E                            ; ===========================================================================
00019F2E 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019F32 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019F36 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019F3A                            ; ===========================================================================
00019F3A                            
00019F3A                            loc_19552:				; XREF: off_19546
00019F3A 720A                       		moveq	#$A,d1
00019F3C 4E75                       		rts	
00019F3E                            ; ===========================================================================
00019F3E                            
00019F3E                            loc_19556:				; XREF: off_19546
00019F3E 7206                       		moveq	#6,d1
00019F40 4E75                       		rts	
00019F42                            ; ===========================================================================
00019F42                            
00019F42                            loc_1955A:				; XREF: off_19546
00019F42 7000                       		moveq	#0,d0
00019F44 1029 0028                  		move.b	$28(a1),d0
00019F48 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019F4C 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019F50                            ; ===========================================================================
00019F50 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019F54 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019F58                            ; ===========================================================================
00019F58                            
00019F58                            loc_19570:				; XREF: off_19568
00019F58 6000                       		bra.s	loc_19574
00019F5A                            ; ===========================================================================
00019F5A                            
00019F5A                            loc_19572:				; XREF: off_19568
00019F5A 7206                       		moveq	#6,d1
00019F5C                            
00019F5C                            loc_19574:				; XREF: off_19546
00019F5C 4A29 0020                  		tst.b	$20(a1)
00019F60 6600                       		bne.s	loc_1957E
00019F62 7205                       		moveq	#5,d1
00019F64 4E75                       		rts	
00019F66                            ; ===========================================================================
00019F66                            
00019F66                            loc_1957E:
00019F66 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019F6C 6500                       		bcs.s	locret_19588
00019F6E 7204                       		moveq	#4,d1
00019F70                            
00019F70                            locret_19588:
00019F70 4E75                       		rts	
00019F72                            ; ===========================================================================
00019F72                            
00019F72                            Obj75_FlameMain:			; XREF: Obj75_Index
00019F72 117C 0007 001C             		move.b	#7,$1C(a0)
00019F78 2268 0034                  		movea.l	$34(a0),a1
00019F7C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019F82 6600                       		bne.s	loc_195AA
00019F84 117C 000B 001C             		move.b	#$B,$1C(a0)
00019F8A 4A28 0001                  		tst.b	1(a0)
00019F8E 6A00                       		bpl.s	Obj75_FlameDelete
00019F90 6000                       		bra.s	loc_195B6
00019F92                            ; ===========================================================================
00019F92                            
00019F92                            loc_195AA:
00019F92 4A69 0010                  		tst.w	$10(a1)
00019F96 6700                       		beq.s	loc_195B6
00019F98 117C 0008 001C             		move.b	#8,$1C(a0)
00019F9E                            
00019F9E                            loc_195B6:
00019F9E 6000                       		bra.s	loc_195BE
00019FA0                            ; ===========================================================================
00019FA0                            
00019FA0                            Obj75_FlameDelete:
00019FA0 4EF9 0000 DEA4             		jmp	DeleteObject
00019FA6                            ; ===========================================================================
00019FA6                            
00019FA6                            loc_195BE:
00019FA6 43F9 0001 86FA             		lea	(Ani_Eggman).l,a1
00019FAC 4EB9 0000 AEB6             		jsr	AnimateSprite
00019FB2 2268 0034                  		movea.l	$34(a0),a1
00019FB6 3169 0008 0008             		move.w	8(a1),8(a0)
00019FBC 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019FC2                            
00019FC2                            loc_195DA:
00019FC2 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019FC8 7003                       		moveq	#3,d0
00019FCA C028 0022                  		and.b	$22(a0),d0
00019FCE 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019FD4 8128 0001                  		or.b	d0,1(a0)
00019FD8 4EF9 0000 DE68             		jmp	DisplaySprite
00019FDE                            ; ===========================================================================
00019FDE                            
00019FDE                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019FDE 217C 0001 8826 0004        		move.l	#Map_BossItems,4(a0)
00019FE6 317C 246C 0002             		move.w	#$246C,2(a0)
00019FEC 117C 0005 001A             		move.b	#5,$1A(a0)
00019FF2 2268 0034                  		movea.l	$34(a0),a1
00019FF6 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019FFC 6600                       		bne.s	loc_1961C
00019FFE 4A28 0001                  		tst.b	1(a0)
0001A002 6A00                       		bpl.s	Obj75_SpikeDelete
0001A004                            
0001A004                            loc_1961C:
0001A004 3169 0008 0008             		move.w	8(a1),8(a0)
0001A00A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A010 3028 003C                  		move.w	$3C(a0),d0
0001A014 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A01A 6600                       		bne.s	loc_19652
0001A01C 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A022 6700                       		beq.s	loc_1964C
0001A024 4A29 0028                  		tst.b	$28(a1)
0001A028 6600                       		bne.s	loc_19658
0001A02A 0C40 0094                  		cmpi.w	#$94,d0
0001A02E 6C00                       		bge.s	loc_19658
0001A030 5E40                       		addq.w	#7,d0
0001A032 6000                       		bra.s	loc_19658
0001A034                            ; ===========================================================================
0001A034                            
0001A034                            loc_1964C:
0001A034 4A69 003C                  		tst.w	$3C(a1)
0001A038 6A00                       		bpl.s	loc_19658
0001A03A                            
0001A03A                            loc_19652:
0001A03A 4A40                       		tst.w	d0
0001A03C 6F00                       		ble.s	loc_19658
0001A03E 5B40                       		subq.w	#5,d0
0001A040                            
0001A040                            loc_19658:
0001A040 3140 003C                  		move.w	d0,$3C(a0)
0001A044 E440                       		asr.w	#2,d0
0001A046 D168 000C                  		add.w	d0,$C(a0)
0001A04A 117C 0008 0019             		move.b	#8,$19(a0)
0001A050 117C 000C 0016             		move.b	#$C,$16(a0)
0001A056 4228 0020                  		clr.b	$20(a0)
0001A05A 2268 0034                  		movea.l	$34(a0),a1
0001A05E 4A29 0020                  		tst.b	$20(a1)
0001A062 6700                       		beq.s	loc_19688
0001A064 4A29 0029                  		tst.b	$29(a1)
0001A068 6600                       		bne.s	loc_19688
0001A06A 117C 0084 0020             		move.b	#$84,$20(a0)
0001A070                            
0001A070                            loc_19688:
0001A070 6000 FF50                  		bra.w	loc_195DA
0001A074                            ; ===========================================================================
0001A074                            
0001A074                            Obj75_SpikeDelete:
0001A074 4EF9 0000 DEA4             		jmp	DeleteObject
0001A07A                            ; ===========================================================================
0001A07A                            ; ---------------------------------------------------------------------------
0001A07A                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A07A                            ; ---------------------------------------------------------------------------
0001A07A                            
0001A07A                            Obj76:					; XREF: Obj_Index
0001A07A 7000                       		moveq	#0,d0
0001A07C 1028 0024                  		move.b	$24(a0),d0
0001A080 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A084 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A088                            ; ===========================================================================
0001A088 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A08A 0000                       		dc.w Obj76_Action-Obj76_Index
0001A08C 0000                       		dc.w loc_19762-Obj76_Index
0001A08E                            ; ===========================================================================
0001A08E                            
0001A08E                            Obj76_Main:				; XREF: Obj76_Index
0001A08E 7800                       		moveq	#0,d4
0001A090 3A3C 2C10                  		move.w	#$2C10,d5
0001A094 7C09                       		moveq	#9,d6
0001A096 43D0                       		lea	(a0),a1
0001A098 6000                       		bra.s	Obj76_MakeBlock
0001A09A                            ; ===========================================================================
0001A09A                            
0001A09A                            Obj76_Loop:
0001A09A 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001A0A0 6600                       		bne.s	Obj76_ExitLoop
0001A0A2                            
0001A0A2                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A0A2 12BC 0076                  		move.b	#$76,(a1)
0001A0A6 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A0AE 337C 4000 0002             		move.w	#$4000,2(a1)
0001A0B4 137C 0004 0001             		move.b	#4,1(a1)
0001A0BA 137C 0010 0019             		move.b	#$10,$19(a1)
0001A0C0 137C 0010 0016             		move.b	#$10,$16(a1)
0001A0C6 137C 0003 0018             		move.b	#3,$18(a1)
0001A0CC 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A0D0 337C 0582 000C             		move.w	#$582,$C(a1)
0001A0D6 3344 0028                  		move.w	d4,$28(a1)
0001A0DA 0644 0101                  		addi.w	#$101,d4
0001A0DE 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A0E2 5429 0024                  		addq.b	#2,$24(a1)
0001A0E6 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A0EA                            
0001A0EA                            Obj76_ExitLoop:
0001A0EA 4E75                       		rts	
0001A0EC                            ; ===========================================================================
0001A0EC                            
0001A0EC                            Obj76_Action:				; XREF: Obj76_Index
0001A0EC 1028 0029                  		move.b	$29(a0),d0
0001A0F0 B028 0028                  		cmp.b	$28(a0),d0
0001A0F4 6700                       		beq.s	Obj76_Solid
0001A0F6 4A00                       		tst.b	d0
0001A0F8 6B00                       		bmi.s	loc_19718
0001A0FA                            
0001A0FA                            loc_19712:
0001A0FA 6100 0000                  		bsr.w	Obj76_Break
0001A0FE 6000                       		bra.s	Obj76_Display
0001A100                            ; ===========================================================================
0001A100                            
0001A100                            loc_19718:
0001A100 2268 0034                  		movea.l	$34(a0),a1
0001A104 4A29 0021                  		tst.b	$21(a1)
0001A108 67F0                       		beq.s	loc_19712
0001A10A 3169 0008 0008             		move.w	8(a1),8(a0)
0001A110 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A116 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A11C B2C8                       		cmpa.w	a0,a1
0001A11E 6500                       		bcs.s	Obj76_Display
0001A120 3029 0012                  		move.w	$12(a1),d0
0001A124 48C0                       		ext.l	d0
0001A126 E080                       		asr.l	#8,d0
0001A128 D168 000C                  		add.w	d0,$C(a0)
0001A12C 6000                       		bra.s	Obj76_Display
0001A12E                            ; ===========================================================================
0001A12E                            
0001A12E                            Obj76_Solid:				; XREF: Obj76_Action
0001A12E 323C 001B                  		move.w	#$1B,d1
0001A132 343C 0010                  		move.w	#$10,d2
0001A136 363C 0011                  		move.w	#$11,d3
0001A13A 3828 0008                  		move.w	8(a0),d4
0001A13E 4EB9 0001 0238             		jsr	SolidObject
0001A144                            
0001A144                            Obj76_Display:				; XREF: Obj76_Action
0001A144 4EF9 0000 DE68             		jmp	DisplaySprite
0001A14A                            ; ===========================================================================
0001A14A                            
0001A14A                            loc_19762:				; XREF: Obj76_Index
0001A14A 4A28 0001                  		tst.b	1(a0)
0001A14E 6A00                       		bpl.s	Obj76_Delete
0001A150 4EB9 0000 DDD0             		jsr	ObjectFall
0001A156 4EF9 0000 DE68             		jmp	DisplaySprite
0001A15C                            ; ===========================================================================
0001A15C                            
0001A15C                            Obj76_Delete:
0001A15C 4EF9 0000 DEA4             		jmp	DeleteObject
0001A162                            
0001A162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A162                            
0001A162                            
0001A162                            Obj76_Break:				; XREF: Obj76_Action
0001A162 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A166 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A16A 7801                       		moveq	#1,d4
0001A16C 7203                       		moveq	#3,d1
0001A16E 7438                       		moveq	#$38,d2
0001A170 5428 0024                  		addq.b	#2,$24(a0)
0001A174 117C 0008 0019             		move.b	#8,$19(a0)
0001A17A 117C 0008 0016             		move.b	#8,$16(a0)
0001A180 43D0                       		lea	(a0),a1
0001A182 6000                       		bra.s	Obj76_MakeFrag
0001A184                            ; ===========================================================================
0001A184                            
0001A184                            Obj76_LoopFrag:
0001A184 4EB9 0000 E304             		jsr	SingleObjLoad2
0001A18A 6600                       		bne.s	loc_197D4
0001A18C                            
0001A18C                            Obj76_MakeFrag:
0001A18C 45D0                       		lea	(a0),a2
0001A18E 47D1                       		lea	(a1),a3
0001A190 7603                       		moveq	#3,d3
0001A192                            
0001A192                            loc_197AA:
0001A192 26DA                       		move.l	(a2)+,(a3)+
0001A194 26DA                       		move.l	(a2)+,(a3)+
0001A196 26DA                       		move.l	(a2)+,(a3)+
0001A198 26DA                       		move.l	(a2)+,(a3)+
0001A19A 51CB FFF6                  		dbf	d3,loc_197AA
0001A19E                            
0001A19E 335C 0010                  		move.w	(a4)+,$10(a1)
0001A1A2 335C 0012                  		move.w	(a4)+,$12(a1)
0001A1A6 361D                       		move.w	(a5)+,d3
0001A1A8 D769 0008                  		add.w	d3,8(a1)
0001A1AC 361D                       		move.w	(a5)+,d3
0001A1AE D769 000C                  		add.w	d3,$C(a1)
0001A1B2 1344 001A                  		move.b	d4,$1A(a1)
0001A1B6 5244                       		addq.w	#1,d4
0001A1B8 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A1BC                            
0001A1BC                            loc_197D4:
0001A1BC 303C 00CB                  		move.w	#$CB,d0
0001A1C0 4EF9 0000 139E             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A1C6                            ; End of function Obj76_Break
0001A1C6                            
0001A1C6                            ; ===========================================================================
0001A1C6 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A1CA 0180 FE00                  		dc.w $180, $FE00
0001A1CE FF00 FF00                  		dc.w $FF00, $FF00
0001A1D2 0100 FF00                  		dc.w $100, $FF00
0001A1D6 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A1DA 0010 0000                  		dc.w $10, 0
0001A1DE 0000 0010                  		dc.w 0,	$10
0001A1E2 0010 0010                  		dc.w $10, $10
0001A1E6                            ; ---------------------------------------------------------------------------
0001A1E6                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A1E6                            ; ---------------------------------------------------------------------------
0001A1E6                            Map_obj76:
0001A1E6                            	include "_maps\obj76.asm"
0001A1E6                            ; ---------------------------------------------------------------------------
0001A1E6                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A1E6                            ; ---------------------------------------------------------------------------
0001A1E6 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A1EA 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A1EE 0000                       		dc.w byte_19826-Map_obj76
0001A1F0 02                         byte_19808:	dc.b 2
0001A1F1 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A1F6 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A1FB 00                         		dc.b 0
0001A1FC 01                         byte_19814:	dc.b 1
0001A1FD F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A202 01                         byte_1981A:	dc.b 1
0001A203 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A208 01                         byte_19820:	dc.b 1
0001A209 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A20E 01                         byte_19826:	dc.b 1
0001A20F F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A214                            		even
0001A214                            		even
0001A214                            
0001A214                            ; ===========================================================================
0001A214                            
0001A214                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A214 4EF9 0000 DEA4             		jmp	DeleteObject
0001A21A                            ; ===========================================================================
0001A21A                            ; ---------------------------------------------------------------------------
0001A21A                            ; Object 82 - Eggman (SBZ2)
0001A21A                            ; ---------------------------------------------------------------------------
0001A21A                            
0001A21A                            Obj82:					; XREF: Obj_Index
0001A21A 7000                       		moveq	#0,d0
0001A21C 1028 0024                  		move.b	$24(a0),d0
0001A220 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A224 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A228                            ; ===========================================================================
0001A228 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A22A 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A22C 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A22E                            
0001A22E 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A231 0400 03                    		dc.b 4,	0, 3
0001A234                            ; ===========================================================================
0001A234                            
0001A234                            Obj82_Main:				; XREF: Obj82_Index
0001A234 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A238 317C 2160 0008             		move.w	#$2160,8(a0)
0001A23E 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A244 117C 000F 0020             		move.b	#$F,$20(a0)
0001A24A 117C 0010 0021             		move.b	#$10,$21(a0)
0001A250 08A8 0000 0022             		bclr	#0,$22(a0)
0001A256 4228 0025                  		clr.b	$25(a0)
0001A25A 115A 0024                  		move.b	(a2)+,$24(a0)
0001A25E 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A262 115A 0018                  		move.b	(a2)+,$18(a0)
0001A266 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A26E 317C 0400 0002             		move.w	#$400,2(a0)
0001A274 117C 0004 0001             		move.b	#4,1(a0)
0001A27A 08E8 0007 0001             		bset	#7,1(a0)
0001A280 117C 0020 0019             		move.b	#$20,$19(a0)
0001A286 4EB9 0000 E304             		jsr	SingleObjLoad2
0001A28C 6600                       		bne.s	Obj82_Eggman
0001A28E 2348 0034                  		move.l	a0,$34(a1)
0001A292 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A296 337C 2130 0008             		move.w	#$2130,8(a1)
0001A29C 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A2A2 4228 0025                  		clr.b	$25(a0)
0001A2A6 135A 0024                  		move.b	(a2)+,$24(a1)
0001A2AA 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A2AE 135A 0018                  		move.b	(a2)+,$18(a1)
0001A2B2 237C 0000 C5EA 0004        		move.l	#Map_obj32,4(a1)
0001A2BA 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A2C0 137C 0004 0001             		move.b	#4,1(a1)
0001A2C6 08E9 0007 0001             		bset	#7,1(a1)
0001A2CC 137C 0010 0019             		move.b	#$10,$19(a1)
0001A2D2 137C 0000 001A             		move.b	#0,$1A(a1)
0001A2D8                            
0001A2D8                            Obj82_Eggman:				; XREF: Obj82_Index
0001A2D8 7000                       		moveq	#0,d0
0001A2DA 1028 0025                  		move.b	$25(a0),d0
0001A2DE 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A2E2 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A2E6 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A2EA 4EB9 0000 AEB6             		jsr	AnimateSprite
0001A2F0 4EF9 0000 DE68             		jmp	DisplaySprite
0001A2F6                            ; ===========================================================================
0001A2F6 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A2F8 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A2FA 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A2FC 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A2FE                            ; ===========================================================================
0001A2FE                            
0001A2FE                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A2FE 3028 0008                  		move.w	8(a0),d0
0001A302 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A306 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A30A 6400                       		bcc.s	loc_19934	; if not, branch
0001A30C 5428 0025                  		addq.b	#2,$25(a0)
0001A310 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A316 117C 0001 001C             		move.b	#1,$1C(a0)
0001A31C                            
0001A31C                            loc_19934:				; XREF: Obj82_EggIndex
0001A31C 4EF9 0000 DE42             		jmp	SpeedToPos
0001A322                            ; ===========================================================================
0001A322                            
0001A322                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A322 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A326 6600                       		bne.s	loc_19954	; if time remains, branch
0001A328 5428 0025                  		addq.b	#2,$25(a0)
0001A32C 117C 0002 001C             		move.b	#2,$1C(a0)
0001A332 5868 000C                  		addq.w	#4,$C(a0)
0001A336 317C 000F 003C             		move.w	#15,$3C(a0)
0001A33C                            
0001A33C                            loc_19954:
0001A33C 60DE                       		bra.s	loc_19934
0001A33E                            ; ===========================================================================
0001A33E                            
0001A33E                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A33E 5368 003C                  		subq.w	#1,$3C(a0)
0001A342 6E00                       		bgt.s	loc_199D0
0001A344 6600                       		bne.s	loc_1996A
0001A346 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A34C 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A352                            
0001A352                            loc_1996A:
0001A352 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A358 6E00                       		bgt.s	loc_19976
0001A35A 4268 0010                  		clr.w	$10(a0)
0001A35E                            
0001A35E                            loc_19976:
0001A35E 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A364 4A68 0012                  		tst.w	$12(a0)
0001A368 6B00                       		bmi.s	Obj82_FindBlocks
0001A36A 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A370 6500                       		bcs.s	Obj82_FindBlocks
0001A372 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A378 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A37E 6500                       		bcs.s	Obj82_FindBlocks
0001A380 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A386 4268 0012                  		clr.w	$12(a0)
0001A38A                            
0001A38A                            Obj82_FindBlocks:
0001A38A 3028 0010                  		move.w	$10(a0),d0
0001A38E 8068 0012                  		or.w	$12(a0),d0
0001A392 6600                       		bne.s	loc_199D0
0001A394 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A398 703E                       		moveq	#$3E,d0
0001A39A 7240                       		moveq	#$40,d1
0001A39C                            
0001A39C                            Obj82_FindLoop:	
0001A39C D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A39E 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A3A2 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A3A6                            
0001A3A6 6600                       		bne.s	loc_199D0
0001A3A8 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A3AE 5428 0025                  		addq.b	#2,$25(a0)
0001A3B2 117C 0001 001C             		move.b	#1,$1C(a0)
0001A3B8                            
0001A3B8                            loc_199D0:
0001A3B8 6000 FF62                  		bra.w	loc_19934
0001A3BC                            ; ===========================================================================
0001A3BC                            
0001A3BC                            Obj82_Switch:				; XREF: Obj82_Index
0001A3BC 7000                       		moveq	#0,d0
0001A3BE 1028 0025                  		move.b	$25(a0),d0
0001A3C2 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A3C6 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A3CA                            ; ===========================================================================
0001A3CA 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A3CC 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A3CE                            ; ===========================================================================
0001A3CE                            
0001A3CE                            loc_199E6:				; XREF: Obj82_SwIndex
0001A3CE 2268 0034                  		movea.l	$34(a0),a1
0001A3D2 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A3D8 6600                       		bne.s	Obj82_SwDisplay
0001A3DA 117C 0001 001A             		move.b	#1,$1A(a0)
0001A3E0 5428 0025                  		addq.b	#2,$25(a0)
0001A3E4                            
0001A3E4                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A3E4 4EF9 0000 DE68             		jmp	DisplaySprite
0001A3EA                            ; ===========================================================================
0001A3EA                            Ani_obj82:
0001A3EA                            	include "_anim\obj82.asm"
0001A3EA                            ; ---------------------------------------------------------------------------
0001A3EA                            ; Animation script - Eggman (SBZ2)
0001A3EA                            ; ---------------------------------------------------------------------------
0001A3EA 0000                       		dc.w byte_19A10-Ani_obj82
0001A3EC 0000                       		dc.w byte_19A14-Ani_obj82
0001A3EE 0000                       		dc.w byte_19A18-Ani_obj82
0001A3F0 0000                       		dc.w byte_19A20-Ani_obj82
0001A3F2 0000                       		dc.w byte_19A24-Ani_obj82
0001A3F4 0000                       		dc.w byte_19A2A-Ani_obj82
0001A3F6 0000                       		dc.w byte_19A30-Ani_obj82
0001A3F8 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A3FC 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A400 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A408 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A40C 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A412 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A418 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A41C                            		even
0001A41C                            		even
0001A41C                            
0001A41C                            ; ---------------------------------------------------------------------------
0001A41C                            ; Sprite mappings - Eggman (SBZ2)
0001A41C                            ; ---------------------------------------------------------------------------
0001A41C                            Map_obj82:
0001A41C                            	include "_maps\obj82.asm"
0001A41C                            ; ================================================================================
0001A41C                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A41C                            ; ================================================================================
0001A41C                            
0001A41C                            DATAA16Z12RYSAF:
0001A41C 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A420 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A424 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A428 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A42C 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A430 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A432 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A433 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A438 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A43D 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A442 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A443 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A448 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A44D 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A452 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A457 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A458 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A45D E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A462 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A467 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A46C 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A46D E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A472 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A477 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A47C 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A47D E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A482 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A487 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A48C E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A491 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A492 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A497 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A49C E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A4A1 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A4A6 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A4A7 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A4AC E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A4B1 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A4B6 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A4BB F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A4C0 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A4C5 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A4CA 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A4CB 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A4D0 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A4D5 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A4DA F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A4DF 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A4E0 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A4E5 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A4EA 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A4EF 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A4F4 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A4F9 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A4FA E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A4FF E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A504 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A509 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A50E E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A513 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A518 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A51D 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A522 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A523 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A528 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A52D EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A532                            	even
0001A532                            	even
0001A532                            
0001A532                            ; ===========================================================================
0001A532                            ; ---------------------------------------------------------------------------
0001A532                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A532                            ; ---------------------------------------------------------------------------
0001A532                            
0001A532                            Obj83:					; XREF: Obj_Index
0001A532 7000                       		moveq	#0,d0
0001A534 1028 0024                  		move.b	$24(a0),d0
0001A538 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A53C 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A540                            ; ===========================================================================
0001A540 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A542 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A544 0000                       		dc.w loc_19C36-Obj83_Index
0001A546 0000                       		dc.w loc_19C62-Obj83_Index
0001A548 0000                       		dc.w loc_19C72-Obj83_Index
0001A54A 0000                       		dc.w loc_19C80-Obj83_Index
0001A54C                            ; ===========================================================================
0001A54C                            
0001A54C                            Obj83_Main:				; XREF: Obj83_Index
0001A54C 317C 2080 0008             		move.w	#$2080,8(a0)
0001A552 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A558 117C 0080 0019             		move.b	#$80,$19(a0)
0001A55E 117C 0010 0016             		move.b	#$10,$16(a0)
0001A564 117C 0004 0001             		move.b	#4,1(a0)
0001A56A 08E8 0007 0001             		bset	#7,1(a0)
0001A570 7800                       		moveq	#0,d4
0001A572 3A3C 2010                  		move.w	#$2010,d5
0001A576 7C07                       		moveq	#7,d6
0001A578 45E8 0030                  		lea	$30(a0),a2
0001A57C                            
0001A57C                            Obj83_MakeBlock:
0001A57C 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001A582 6600                       		bne.s	Obj83_ExitMake
0001A584 34C9                       		move.w	a1,(a2)+
0001A586 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A58A 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A592 337C 4518 0002             		move.w	#$4518,2(a1)
0001A598 137C 0004 0001             		move.b	#4,1(a1)
0001A59E 137C 0010 0019             		move.b	#$10,$19(a1)
0001A5A4 137C 0010 0016             		move.b	#$10,$16(a1)
0001A5AA 137C 0003 0018             		move.b	#3,$18(a1)
0001A5B0 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A5B4 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A5BA 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A5BE 137C 0008 0024             		move.b	#8,$24(a1)
0001A5C4 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A5C8                            
0001A5C8                            Obj83_ExitMake:
0001A5C8 5428 0024                  		addq.b	#2,$24(a0)
0001A5CC 4E75                       		rts	
0001A5CE                            ; ===========================================================================
0001A5CE                            
0001A5CE                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A5CE 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A5D4 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A5D6 4228 001A                  		clr.b	$1A(a0)
0001A5DA 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A5DE                            
0001A5DE                            Obj83_Solid:
0001A5DE 7000                       		moveq	#0,d0
0001A5E0 1028 001A                  		move.b	$1A(a0),d0
0001A5E4 4400                       		neg.b	d0
0001A5E6 4880                       		ext.w	d0
0001A5E8 5040                       		addq.w	#8,d0
0001A5EA E940                       		asl.w	#4,d0
0001A5EC 383C 2100                  		move.w	#$2100,d4
0001A5F0 9840                       		sub.w	d0,d4
0001A5F2 1140 0019                  		move.b	d0,$19(a0)
0001A5F6 3144 0008                  		move.w	d4,8(a0)
0001A5FA 720B                       		moveq	#$B,d1
0001A5FC D240                       		add.w	d0,d1
0001A5FE 7410                       		moveq	#$10,d2
0001A600 7611                       		moveq	#$11,d3
0001A602 4EF9 0001 0238             		jmp	SolidObject
0001A608                            ; ===========================================================================
0001A608                            
0001A608                            loc_19C36:				; XREF: Obj83_Index
0001A608 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A60E 6400                       		bcc.s	Obj83_Solid2
0001A610 70FF                       		moveq	#-1,d0
0001A612 1028 001A                  		move.b	$1A(a0),d0
0001A616 4880                       		ext.w	d0
0001A618 D040                       		add.w	d0,d0
0001A61A 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A61E 2240                       		movea.l	d0,a1
0001A620 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A626 5228 001A                  		addq.b	#1,$1A(a0)
0001A62A 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A630 6700                       		beq.s	loc_19C62
0001A632                            
0001A632                            Obj83_Solid2:
0001A632 60AA                       		bra.s	Obj83_Solid
0001A634                            ; ===========================================================================
0001A634                            
0001A634                            loc_19C62:				; XREF: Obj83_Index
0001A634 08A8 0003 0022             		bclr	#3,$22(a0)
0001A63A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A640 6000 FBD2                  		bra.w	loc_1982C
0001A644                            ; ===========================================================================
0001A644                            
0001A644                            loc_19C72:				; XREF: Obj83_Index
0001A644 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A64A 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A64C 4EF9 0000 DE68             		jmp	DisplaySprite
0001A652                            ; ===========================================================================
0001A652                            
0001A652                            loc_19C80:				; XREF: Obj83_Index
0001A652 4A28 0001                  		tst.b	1(a0)
0001A656 6A00 FBBC                  		bpl.w	loc_1982C
0001A65A 4EB9 0000 DDD0             		jsr	ObjectFall
0001A660 4EF9 0000 DE68             		jmp	DisplaySprite
0001A666                            ; ===========================================================================
0001A666                            
0001A666                            Obj83_Break:				; XREF: loc_19C72
0001A666 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A66A 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A66E 7801                       		moveq	#1,d4
0001A670 7203                       		moveq	#3,d1
0001A672 7438                       		moveq	#$38,d2
0001A674 5428 0024                  		addq.b	#2,$24(a0)
0001A678 117C 0008 0019             		move.b	#8,$19(a0)
0001A67E 117C 0008 0016             		move.b	#8,$16(a0)
0001A684 43D0                       		lea	(a0),a1
0001A686 6000                       		bra.s	Obj83_MakeFrag
0001A688                            ; ===========================================================================
0001A688                            
0001A688                            Obj83_LoopFrag:
0001A688 4EB9 0000 E304             		jsr	SingleObjLoad2
0001A68E 6600                       		bne.s	Obj83_BreakSnd
0001A690                            
0001A690                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A690 45D0                       		lea	(a0),a2
0001A692 47D1                       		lea	(a1),a3
0001A694 7603                       		moveq	#3,d3
0001A696                            
0001A696                            loc_19CC4:
0001A696 26DA                       		move.l	(a2)+,(a3)+
0001A698 26DA                       		move.l	(a2)+,(a3)+
0001A69A 26DA                       		move.l	(a2)+,(a3)+
0001A69C 26DA                       		move.l	(a2)+,(a3)+
0001A69E 51CB FFF6                  		dbf	d3,loc_19CC4
0001A6A2                            
0001A6A2 335C 0012                  		move.w	(a4)+,$12(a1)
0001A6A6 361D                       		move.w	(a5)+,d3
0001A6A8 D769 0008                  		add.w	d3,8(a1)
0001A6AC 361D                       		move.w	(a5)+,d3
0001A6AE D769 000C                  		add.w	d3,$C(a1)
0001A6B2 1344 001A                  		move.b	d4,$1A(a1)
0001A6B6 5244                       		addq.w	#1,d4
0001A6B8 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A6BC                            
0001A6BC                            Obj83_BreakSnd:
0001A6BC 303C 00CB                  		move.w	#$CB,d0
0001A6C0 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A6C6 4EF9 0000 DE68             		jmp	DisplaySprite
0001A6CC                            ; ===========================================================================
0001A6CC 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A6D0 0120 00C0                  		dc.w $120, $C0
0001A6D4 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A6D8 0010 0000                  		dc.w $10, 0
0001A6DC 0000 0010                  		dc.w 0,	$10
0001A6E0 0010 0010                  		dc.w $10, $10
0001A6E4                            ; ---------------------------------------------------------------------------
0001A6E4                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A6E4                            ; ---------------------------------------------------------------------------
0001A6E4                            Map_obj83:
0001A6E4                            	include "_maps\obj83.asm"
0001A6E4                            ; ---------------------------------------------------------------------------
0001A6E4                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A6E4                            ; ---------------------------------------------------------------------------
0001A6E4 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A6E8 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A6EC 0000                       		dc.w byte_19D46-Map_obj83
0001A6EE 01                         byte_19D1C:	dc.b 1
0001A6EF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A6F4 02                         byte_19D22:	dc.b 2
0001A6F5 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A6FA F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A6FF 00                         		dc.b 0
0001A700 02                         byte_19D2E:	dc.b 2
0001A701 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A706 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A70B 00                         		dc.b 0
0001A70C 02                         byte_19D3A:	dc.b 2
0001A70D F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A712 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A717 00                         		dc.b 0
0001A718 02                         byte_19D46:	dc.b 2
0001A719 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A71E F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A724 00                         		even
0001A724 00                         		even
0001A724                            
0001A724                            ; ===========================================================================
0001A724                            ; ---------------------------------------------------------------------------
0001A724                            ; Object 85 - Eggman (FZ)
0001A724                            ; ---------------------------------------------------------------------------
0001A724                            
0001A724                            Obj85_Delete:
0001A724 4EF9 0000 DEA4             		jmp	DeleteObject
0001A72A                            ; ===========================================================================
0001A72A                            
0001A72A                            Obj85:					; XREF: Obj_Index
0001A72A 7000                       		moveq	#0,d0
0001A72C 1028 0024                  		move.b	$24(a0),d0
0001A730 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A734 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A738                            ; ===========================================================================
0001A738 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A73A 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A73C 0000                       		dc.w loc_1A38E-Obj85_Index
0001A73E 0000                       		dc.w loc_1A346-Obj85_Index
0001A740 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A742 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A744 0000                       		dc.w loc_1A264-Obj85_Index
0001A746                            
0001A746 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A74C 0001 A41C                  		dc.l Map_obj82		; mappings pointer
0001A750 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A756 0000 0000                  		dc.l Map_obj84
0001A75A 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A760 0000 0000                  		dc.l Map_FZBoss
0001A764 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A76A 0001 A41C                  		dc.l Map_obj82
0001A76E 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A774 0001 875E                  		dc.l Map_Eggman
0001A778 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A77E 0001 875E                  		dc.l Map_Eggman
0001A782                            
0001A782 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A787 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A78C 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A791 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A796 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A79B 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A7A0                            ; ===========================================================================
0001A7A0                            
0001A7A0                            Obj85_Main:				; XREF: Obj85_Index
0001A7A0 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A7A4 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A7A8 2248                       		movea.l	a0,a1
0001A7AA 7205                       		moveq	#5,d1
0001A7AC 6000                       		bra.s	Obj85_LoadBoss
0001A7AE                            ; ===========================================================================
0001A7AE                            
0001A7AE                            Obj85_Loop:
0001A7AE 4EB9 0000 E304             		jsr	SingleObjLoad2
0001A7B4 6600                       		bne.s	loc_19E20
0001A7B6                            
0001A7B6                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A7B6 12BC 0085                  		move.b	#$85,(a1)
0001A7BA 335A 0008                  		move.w	(a2)+,8(a1)
0001A7BE 335A 000C                  		move.w	(a2)+,$C(a1)
0001A7C2 335A 0002                  		move.w	(a2)+,2(a1)
0001A7C6 235A 0004                  		move.l	(a2)+,4(a1)
0001A7CA 135B 0024                  		move.b	(a3)+,$24(a1)
0001A7CE 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A7D2 135B 0018                  		move.b	(a3)+,$18(a1)
0001A7D6 135B 0017                  		move.b	(a3)+,$17(a1)
0001A7DA 135B 0016                  		move.b	(a3)+,$16(a1)
0001A7DE 137C 0004 0001             		move.b	#4,1(a1)
0001A7E4 08E8 0007 0001             		bset	#7,1(a0)
0001A7EA 2348 0034                  		move.l	a0,$34(a1)
0001A7EE 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A7F2                            
0001A7F2                            loc_19E20:
0001A7F2 45E8 0036                  		lea	$36(a0),a2
0001A7F6 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001A7FC 6600                       		bne.s	loc_19E5A
0001A7FE 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A802 3489                       		move.w	a1,(a2)
0001A804 2348 0034                  		move.l	a0,$34(a1)
0001A808 45E8 0038                  		lea	$38(a0),a2
0001A80C 7400                       		moveq	#0,d2
0001A80E 7203                       		moveq	#3,d1
0001A810                            
0001A810                            loc_19E3E:
0001A810 4EB9 0000 E304             		jsr	SingleObjLoad2
0001A816 6600                       		bne.s	loc_19E5A
0001A818 34C9                       		move.w	a1,(a2)+
0001A81A 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A81E 2348 0034                  		move.l	a0,$34(a1)
0001A822 1342 0028                  		move.b	d2,$28(a1)
0001A826 5442                       		addq.w	#2,d2
0001A828 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A82C                            
0001A82C                            loc_19E5A:
0001A82C 317C 0000 0034             		move.w	#0,$34(a0)
0001A832 4EB8 2B1A                  		jsr	RandomNumber	; get a number between 0 and 250
0001A836 4240                       		clr.w	d0
0001A838 4840                       		swap	d0
0001A83A 80FC 00FB                  		divu.w	#251,d0
0001A83E 4840                       		swap	d0
0001A840 0640 0118                  		add.w	#280,d0		; add 280
0001A844 33C0 00FF 7FFE             		move.w	d0,($FF7FFE).l	; that's the number of hits
0001A84A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A850                            
0001A850                            Obj85_Eggman:				; XREF: Obj85_Index
0001A850 7000                       		moveq	#0,d0
0001A852 1028 0034                  		move.b	$34(a0),d0
0001A856 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A85A 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A85E 4EF9 0000 DE68             		jmp	DisplaySprite
0001A864                            ; ===========================================================================
0001A864 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A868 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A86C 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A870 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A874                            ; ===========================================================================
0001A874                            
0001A874                            loc_19E90:				; XREF: off_19E80
0001A874 4AB8 F680                  		tst.l	($FFFFF680).w
0001A878 6600                       		bne.s	loc_19EA2
0001A87A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A880 6500                       		bcs.s	loc_19EA2
0001A882 5428 0034                  		addq.b	#2,$34(a0)
0001A886                            
0001A886                            loc_19EA2:
0001A886 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A88A 4E75                       		rts	
0001A88C                            ; ===========================================================================
0001A88C                            
0001A88C                            loc_19EA8:				; XREF: off_19E80
0001A88C 4A68 0030                  		tst.w	$30(a0)
0001A890 6A00                       		bpl.s	loc_19F10
0001A892 4268 0030                  		clr.w	$30(a0)
0001A896 4EB9 0000 2B1A             		jsr	(RandomNumber).l
0001A89C 0240 000C                  		andi.w	#$C,d0
0001A8A0 3200                       		move.w	d0,d1
0001A8A2 5441                       		addq.w	#2,d1
0001A8A4 4A80                       		tst.l	d0
0001A8A6 6A00                       		bpl.s	loc_19EC6
0001A8A8 C141                       		exg	d1,d0
0001A8AA                            
0001A8AA                            loc_19EC6:
0001A8AA 43FA 0000                  		lea	word_19FD6(pc),a1
0001A8AE 3031 0000                  		move.w	(a1,d0.w),d0
0001A8B2 3231 1000                  		move.w	(a1,d1.w),d1
0001A8B6 3140 0030                  		move.w	d0,$30(a0)
0001A8BA 74FF                       		moveq	#-1,d2
0001A8BC 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A8C0 2242                       		movea.l	d2,a1
0001A8C2 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A8C8 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A8CE 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A8D2 2242                       		movea.l	d2,a1
0001A8D4 137C 0001 0029             		move.b	#1,$29(a1)
0001A8DA 337C 0000 0030             		move.w	#0,$30(a1)
0001A8E0 317C 0001 0032             		move.w	#1,$32(a0)
0001A8E6 4228 0035                  		clr.b	$35(a0)
0001A8EA 303C 00B7                  		move.w	#$B7,d0
0001A8EE 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A8F4                            
0001A8F4                            loc_19F10:
0001A8F4 4A68 0032                  		tst.w	$32(a0)
0001A8F8 6B00 0000                  		bmi.w	loc_19FA6
0001A8FC 08A8 0000 0022             		bclr	#0,$22(a0)
0001A902 3038 D008                  		move.w	($FFFFD008).w,d0
0001A906 9068 0008                  		sub.w	8(a0),d0
0001A90A 6500                       		bcs.s	loc_19F2E
0001A90C 08E8 0000 0022             		bset	#0,$22(a0)
0001A912                            
0001A912                            loc_19F2E:
0001A912 323C 002B                  		move.w	#$2B,d1
0001A916 343C 0014                  		move.w	#$14,d2
0001A91A 363C 0014                  		move.w	#$14,d3
0001A91E 3828 0008                  		move.w	8(a0),d4
0001A922 4EB9 0001 0238             		jsr	SolidObject
0001A928 4A44                       		tst.w	d4
0001A92A 6E00                       		bgt.s	loc_19F50
0001A92C                            
0001A92C                            loc_19F48:
0001A92C 4A28 0035                  		tst.b	$35(a0)
0001A930 6600                       		bne.s	loc_19F88
0001A932 6000                       		bra.s	loc_19F96
0001A934                            ; ===========================================================================
0001A934                            
0001A934                            loc_19F50:
0001A934 5E78 F636                  		addq.w	#7,($FFFFF636).w	; add 7 to... the rng seed?
0001A938                            ;		cmpi.b	#2,($FFFFD01C).w	; check if player is in ball form (nah)
0001A938                            ;		bne.s	loc_19F48
0001A938                            ;		move.w	#$300,d0		; knock player back (nah)
0001A938                            ;		btst	#0,$22(a0)
0001A938                            ;		bne.s	loc_19F6A
0001A938                            ;		neg.w	d0
0001A938                            ;
0001A938                            ;loc_19F6A:
0001A938                            ;		move.w	d0,($FFFFD010).w
0001A938 4A28 0035                  		tst.b	$35(a0)
0001A93C 6600                       		bne.s	loc_19F88
0001A93E 5379 00FF 7FFE             		subq.w	#1,($FF7FFE).l		; no overflowing! dumbass glitch finish the boss again looking ass
0001A944 6400                       		bcc.s	@notoverflown
0001A946 4279 00FF 7FFE             		clr.w	($FF7FFE).l
0001A94C                            @notoverflown:
0001A94C 117C 0001 0035             		move.b	#1,$35(a0)		; eye-frame timer
0001A952 303C 00AC                  		move.w	#$AC,d0
0001A956 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A95C                            
0001A95C                            loc_19F88:
0001A95C 5328 0035                  		subq.b	#1,$35(a0)
0001A960 6700                       		beq.s	loc_19F96
0001A962 117C 0003 001C             		move.b	#3,$1C(a0)
0001A968 6000                       		bra.s	loc_19F9C
0001A96A                            ; ===========================================================================
0001A96A                            
0001A96A                            loc_19F96:
0001A96A 117C 0001 001C             		move.b	#1,$1C(a0)
0001A970                            
0001A970                            loc_19F9C:
0001A970 43FA FA78                  		lea	Ani_obj82(pc),a1
0001A974 4EF9 0000 AEB6             		jmp	AnimateSprite
0001A97A                            ; ===========================================================================
0001A97A                            
0001A97A                            loc_19FA6:
0001A97A 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001A980 6700                       		beq.s	loc_19FBC
0001A982 5428 0034                  		addq.b	#2,$34(a0)
0001A986 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A98C 4268 0032                  		clr.w	$32(a0)
0001A990 4E75                       		rts	
0001A992                            ; ===========================================================================
0001A992                            
0001A992                            loc_19FBC:
0001A992 117C 0006 0034             		move.b	#6,$34(a0)
0001A998 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A99E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A9A4 117C 0014 0016             		move.b	#$14,$16(a0)
0001A9AA 4E75                       		rts	
0001A9AC                            ; ===========================================================================
0001A9AC 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A9BC                            ; ===========================================================================
0001A9BC                            
0001A9BC                            loc_19FE6:				; XREF: off_19E80
0001A9BC 70FF                       		moveq	#-1,d0
0001A9BE 3028 0036                  		move.w	$36(a0),d0
0001A9C2 2240                       		movea.l	d0,a1
0001A9C4 4A68 0030                  		tst.w	$30(a0)
0001A9C8 6A00                       		bpl.s	loc_1A000
0001A9CA 4268 0030                  		clr.w	$30(a0)
0001A9CE 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A9D4 6100                       		bsr.s	loc_1A020
0001A9D6                            
0001A9D6                            loc_1A000:
0001A9D6 700F                       		moveq	#$F,d0
0001A9D8 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A9DC 6600                       		bne.s	loc_1A00A
0001A9DE 6100                       		bsr.s	loc_1A020
0001A9E0                            
0001A9E0                            loc_1A00A:
0001A9E0 4A68 0032                  		tst.w	$32(a0)
0001A9E4 6700                       		beq.s	locret_1A01E
0001A9E6 5528 0034                  		subq.b	#2,$34(a0)
0001A9EA 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A9F0 4268 0032                  		clr.w	$32(a0)
0001A9F4                            
0001A9F4                            locret_1A01E:
0001A9F4 4E75                       		rts	
0001A9F6                            ; ===========================================================================
0001A9F6                            
0001A9F6                            loc_1A020:
0001A9F6 303C 00B1                  		move.w	#$B1,d0
0001A9FA 4EF9 0000 139E             		jmp	(PlaySound_Special).l ;	play electricity sound
0001AA00                            ; ===========================================================================
0001AA00                            
0001AA00                            loc_1A02A:				; XREF: off_19E80
0001AA00 117C 0030 0017             		move.b	#$30,$17(a0)
0001AA06 08E8 0000 0022             		bset	#0,$22(a0)
0001AA0C 4EB9 0000 DE42             		jsr	SpeedToPos
0001AA12 117C 0006 001A             		move.b	#6,$1A(a0)
0001AA18 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AA1E 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001AA24 6500                       		bcs.s	loc_1A070
0001AA26 317C 059C 000C             		move.w	#$59C,$C(a0)
0001AA2C 5428 0034                  		addq.b	#2,$34(a0)
0001AA30 117C 0020 0017             		move.b	#$20,$17(a0)
0001AA36 317C 0100 0010             		move.w	#$100,$10(a0)
0001AA3C 317C FF00 0012             		move.w	#-$100,$12(a0)
0001AA42 5438 F742                  		addq.b	#2,($FFFFF742).w
0001AA46                            
0001AA46                            loc_1A070:
0001AA46 6000 0000                  		bra.w	loc_1A166
0001AA4A                            ; ===========================================================================
0001AA4A                            
0001AA4A                            loc_1A074:				; XREF: off_19E80
0001AA4A 08E8 0000 0022             		bset	#0,$22(a0)
0001AA50 117C 0004 001C             		move.b	#4,$1C(a0)
0001AA56 4EB9 0000 DE42             		jsr	SpeedToPos
0001AA5C 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AA62 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001AA68 6500                       		bcs.s	loc_1A09A
0001AA6A 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AA70                            
0001AA70                            loc_1A09A:
0001AA70 317C 0400 0010             		move.w	#$400,$10(a0)
0001AA76 3028 0008                  		move.w	8(a0),d0
0001AA7A 9078 D008                  		sub.w	($FFFFD008).w,d0
0001AA7E 6A00                       		bpl.s	loc_1A0B4
0001AA80 317C 0500 0010             		move.w	#$500,$10(a0)
0001AA86 6000 0000                  		bra.w	loc_1A0F2
0001AA8A                            ; ===========================================================================
0001AA8A                            
0001AA8A                            loc_1A0B4:
0001AA8A 0440 0070                  		subi.w	#$70,d0
0001AA8E 6500                       		bcs.s	loc_1A0F2
0001AA90 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AA96 5140                       		subq.w	#8,d0
0001AA98 6500                       		bcs.s	loc_1A0F2
0001AA9A 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AAA0 5140                       		subq.w	#8,d0
0001AAA2 6500                       		bcs.s	loc_1A0F2
0001AAA4 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AAAA 5140                       		subq.w	#8,d0
0001AAAC 6500                       		bcs.s	loc_1A0F2
0001AAAE 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AAB4 5140                       		subq.w	#8,d0
0001AAB6 6500                       		bcs.s	loc_1A0F2
0001AAB8 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AABE 0440 0038                  		subi.w	#$38,d0
0001AAC2 6500                       		bcs.s	loc_1A0F2
0001AAC4 4268 0010                  		clr.w	$10(a0)
0001AAC8                            
0001AAC8                            loc_1A0F2:
0001AAC8 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001AACE 6500                       		bcs.s	loc_1A110
0001AAD0 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001AAD6 317C 0240 0010             		move.w	#$240,$10(a0)
0001AADC 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001AAE2 5428 0034                  		addq.b	#2,$34(a0)
0001AAE6                            
0001AAE6                            loc_1A110:
0001AAE6 6000                       		bra.s	loc_1A15C
0001AAE8                            ; ===========================================================================
0001AAE8                            
0001AAE8                            loc_1A112:				; XREF: off_19E80
0001AAE8 4EB9 0000 DE42             		jsr	SpeedToPos
0001AAEE 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001AAF4 6500                       		bcs.s	loc_1A124
0001AAF6 4268 0010                  		clr.w	$10(a0)
0001AAFA                            
0001AAFA                            loc_1A124:
0001AAFA 0668 0034 0012             		addi.w	#$34,$12(a0)
0001AB00 4A68 0012                  		tst.w	$12(a0)
0001AB04 6B00                       		bmi.s	loc_1A142
0001AB06 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001AB0C 6500                       		bcs.s	loc_1A142
0001AB0E 317C 0592 000C             		move.w	#$592,$C(a0)
0001AB14 4268 0012                  		clr.w	$12(a0)
0001AB18                            
0001AB18                            loc_1A142:
0001AB18 3028 0010                  		move.w	$10(a0),d0
0001AB1C 8068 0012                  		or.w	$12(a0),d0
0001AB20 6600                       		bne.s	loc_1A15C
0001AB22 5428 0034                  		addq.b	#2,$34(a0)
0001AB26 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AB2C 117C 0001 0021             		move.b	#1,$21(a0)
0001AB32                            
0001AB32                            loc_1A15C:
0001AB32 43FA F8B6                  		lea	Ani_obj82(pc),a1
0001AB36 4EB9 0000 AEB6             		jsr	AnimateSprite
0001AB3C                            
0001AB3C                            loc_1A166:
0001AB3C 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AB42 6C00                       		bge.s	loc_1A172
0001AB44 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AB48                            
0001AB48                            loc_1A172:
0001AB48 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AB4E 6C00                       		bge.s	locret_1A190
0001AB50 323C 001B                  		move.w	#$1B,d1
0001AB54 343C 0070                  		move.w	#$70,d2
0001AB58 363C 0071                  		move.w	#$71,d3
0001AB5C 3828 0008                  		move.w	8(a0),d4
0001AB60 4EF9 0001 0238             		jmp	SolidObject
0001AB66                            ; ===========================================================================
0001AB66                            
0001AB66                            locret_1A190:
0001AB66 4E75                       		rts	
0001AB68                            ; ===========================================================================
0001AB68                            
0001AB68                            loc_1A192:				; XREF: off_19E80
0001AB68 217C 0001 875E 0004        		move.l	#Map_Eggman,4(a0)
0001AB70 317C 0400 0002             		move.w	#$400,2(a0)
0001AB76 117C 0000 001C             		move.b	#0,$1C(a0)
0001AB7C 08E8 0000 0022             		bset	#0,$22(a0)
0001AB82 4EB9 0000 DE42             		jsr	SpeedToPos
0001AB88 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AB8E 6400                       		bcc.s	loc_1A1D0
0001AB90 317C 0180 0010             		move.w	#$180,$10(a0)
0001AB96 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AB9C 117C 000F 0020             		move.b	#$F,$20(a0)
0001ABA2 5428 0034                  		addq.b	#2,$34(a0)
0001ABA6                            
0001ABA6                            loc_1A1D0:
0001ABA6 6000 FF8A                  		bra.w	loc_1A15C
0001ABAA                            ; ===========================================================================
0001ABAA                            
0001ABAA                            loc_1A1D4:				; XREF: off_19E80
0001ABAA 08E8 0000 0022             		bset	#0,$22(a0)
0001ABB0 4EB9 0000 DE42             		jsr	SpeedToPos
0001ABB6 4A68 0030                  		tst.w	$30(a0)
0001ABBA 6600                       		bne.s	loc_1A1FC
0001ABBC 4A28 0020                  		tst.b	$20(a0)
0001ABC0 6600                       		bne.s	loc_1A216
0001ABC2 317C 001E 0030             		move.w	#$1E,$30(a0)
0001ABC8 303C 00AC                  		move.w	#$AC,d0
0001ABCC 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001ABD2                            
0001ABD2                            loc_1A1FC:
0001ABD2 5368 0030                  		subq.w	#1,$30(a0)
0001ABD6 6600                       		bne.s	loc_1A216
0001ABD8 4A28 0022                  		tst.b	$22(a0)
0001ABDC 6A00                       		bpl.s	loc_1A210
0001ABDE 317C 0060 0012             		move.w	#$60,$12(a0)
0001ABE4 6000                       		bra.s	loc_1A216
0001ABE6                            ; ===========================================================================
0001ABE6                            
0001ABE6                            loc_1A210:
0001ABE6 117C 000F 0020             		move.b	#$F,$20(a0)
0001ABEC                            
0001ABEC                            loc_1A216:
0001ABEC 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001ABF2 6D00                       		blt.s	loc_1A23A
0001ABF4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001ABFA 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AC00 4278 D014                  		clr.w	($FFFFD014).w
0001AC04 4A68 0012                  		tst.w	$12(a0)
0001AC08 6A00                       		bpl.s	loc_1A248
0001AC0A 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AC10                            
0001AC10                            loc_1A23A:
0001AC10 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AC16 6D00                       		blt.s	loc_1A248
0001AC18 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AC1E                            
0001AC1E                            loc_1A248:
0001AC1E 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AC24 6500                       		bcs.s	loc_1A260
0001AC26 4A28 0001                  		tst.b	1(a0)
0001AC2A 6B00                       		bmi.s	loc_1A260
0001AC2C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AC32 6000 FAF0                  		bra.w	Obj85_Delete
0001AC36                            ; ===========================================================================
0001AC36                            
0001AC36                            loc_1A260:
0001AC36 6000 FEFA                  		bra.w	loc_1A15C
0001AC3A                            ; ===========================================================================
0001AC3A                            
0001AC3A                            loc_1A264:				; XREF: Obj85_Index
0001AC3A 2268 0034                  		movea.l	$34(a0),a1
0001AC3E 1011                       		move.b	(a1),d0
0001AC40 B010                       		cmp.b	(a0),d0
0001AC42 6600 FAE0                  		bne.w	Obj85_Delete
0001AC46 117C 0007 001C             		move.b	#7,$1C(a0)
0001AC4C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AC52 6C00                       		bge.s	loc_1A280
0001AC54 6000                       		bra.s	loc_1A2A6
0001AC56                            ; ===========================================================================
0001AC56                            
0001AC56                            loc_1A280:
0001AC56 4A69 0010                  		tst.w	$10(a1)
0001AC5A 6700                       		beq.s	loc_1A28C
0001AC5C 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AC62                            
0001AC62                            loc_1A28C:
0001AC62 43FA DA96                  		lea	Ani_Eggman(pc),a1
0001AC66 4EB9 0000 AEB6             		jsr	AnimateSprite
0001AC6C                            
0001AC6C                            loc_1A296:
0001AC6C 2268 0034                  		movea.l	$34(a0),a1
0001AC70 3169 0008 0008             		move.w	8(a1),8(a0)
0001AC76 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AC7C                            
0001AC7C                            loc_1A2A6:
0001AC7C 2268 0034                  		movea.l	$34(a0),a1
0001AC80 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AC86 7003                       		moveq	#3,d0
0001AC88 C028 0022                  		and.b	$22(a0),d0
0001AC8C 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AC92 8128 0001                  		or.b	d0,1(a0)
0001AC96 4EF9 0000 DE68             		jmp	DisplaySprite
0001AC9C                            ; ===========================================================================
0001AC9C                            
0001AC9C                            loc_1A2C6:				; XREF: Obj85_Index
0001AC9C 2268 0034                  		movea.l	$34(a0),a1
0001ACA0 1011                       		move.b	(a1),d0
0001ACA2 B010                       		cmp.b	(a0),d0
0001ACA4 6600 FA7E                  		bne.w	Obj85_Delete
0001ACA8 0CA9 0001 875E 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ACB0 6700                       		beq.s	loc_1A2E4
0001ACB2 117C 000A 001A             		move.b	#$A,$1A(a0)
0001ACB8 60C2                       		bra.s	loc_1A2A6
0001ACBA                            ; ===========================================================================
0001ACBA                            
0001ACBA                            loc_1A2E4:
0001ACBA 117C 0001 001C             		move.b	#1,$1C(a0)
0001ACC0 4A29 0021                  		tst.b	$21(a1)
0001ACC4 6F00                       		ble.s	loc_1A312
0001ACC6 117C 0006 001C             		move.b	#6,$1C(a0)
0001ACCC 217C 0001 875E 0004        		move.l	#Map_Eggman,4(a0)
0001ACD4 317C 0400 0002             		move.w	#$400,2(a0)
0001ACDA 43FA DA1E                  		lea	Ani_Eggman(pc),a1
0001ACDE 4EB9 0000 AEB6             		jsr	AnimateSprite
0001ACE4 6000 FF86                  		bra.w	loc_1A296
0001ACE8                            ; ===========================================================================
0001ACE8                            
0001ACE8                            loc_1A312:
0001ACE8 4A28 0001                  		tst.b	1(a0)
0001ACEC 6A00 FA36                  		bpl.w	Obj85_Delete
0001ACF0 6100 D584                  		bsr.w	BossDefeated
0001ACF4 117C 0002 0018             		move.b	#2,$18(a0)
0001ACFA 117C 0000 001C             		move.b	#0,$1C(a0)
0001AD00 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AD08 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AD0E 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AD12 4EB9 0000 AEB6             		jsr	AnimateSprite
0001AD18 6000 FF52                  		bra.w	loc_1A296
0001AD1C                            ; ===========================================================================
0001AD1C                            
0001AD1C                            loc_1A346:				; XREF: Obj85_Index
0001AD1C 08E8 0000 0022             		bset	#0,$22(a0)
0001AD22 2268 0034                  		movea.l	$34(a0),a1
0001AD26 0CA9 0001 875E 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AD2E 6700                       		beq.s	loc_1A35E
0001AD30 6000 FF4A                  		bra.w	loc_1A2A6
0001AD34                            ; ===========================================================================
0001AD34                            
0001AD34                            loc_1A35E:
0001AD34 3169 0008 0008             		move.w	8(a1),8(a0)
0001AD3A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AD40 4A28 001E                  		tst.b	$1E(a0)
0001AD44 6600                       		bne.s	loc_1A376
0001AD46 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AD4C                            
0001AD4C                            loc_1A376:
0001AD4C 5328 001E                  		subq.b	#1,$1E(a0)
0001AD50 6E00                       		bgt.s	loc_1A38A
0001AD52 5228 001A                  		addq.b	#1,$1A(a0)
0001AD56 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AD5C 6E00 F9C6                  		bgt.w	Obj85_Delete
0001AD60                            
0001AD60                            loc_1A38A:
0001AD60 6000 FF0A                  		bra.w	loc_1A296
0001AD64                            ; ===========================================================================
0001AD64                            
0001AD64                            loc_1A38E:				; XREF: Obj85_Index
0001AD64 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AD6A 3038 D008                  		move.w	($FFFFD008).w,d0
0001AD6E 9068 0008                  		sub.w	8(a0),d0
0001AD72 6500                       		bcs.s	loc_1A3A6
0001AD74 4A28 0001                  		tst.b	1(a0)
0001AD78 6A00 F9AA                  		bpl.w	Obj85_Delete
0001AD7C                            
0001AD7C                            loc_1A3A6:
0001AD7C 4EF9 0000 DE68             		jmp	DisplaySprite
0001AD82                            ; ===========================================================================
0001AD82                            
0001AD82                            loc_1A3AC:				; XREF: Obj85_Index
0001AD82 117C 0000 001A             		move.b	#0,$1A(a0)
0001AD88 08E8 0000 0022             		bset	#0,$22(a0)
0001AD8E 2268 0034                  		movea.l	$34(a0),a1
0001AD92 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AD98 6600                       		bne.s	loc_1A3D0
0001AD9A 0CA9 0001 875E 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ADA2 6700 F980                  		beq.w	Obj85_Delete
0001ADA6                            
0001ADA6                            loc_1A3D0:
0001ADA6 6000 FED4                  		bra.w	loc_1A2A6
0001ADAA                            ; ===========================================================================
0001ADAA                            Ani_obj85:
0001ADAA                            	include "_anim\obj85.asm"
0001ADAA                            ; ---------------------------------------------------------------------------
0001ADAA                            ; Animation script - Eggman (FZ)
0001ADAA                            ; ---------------------------------------------------------------------------
0001ADAA 0000                       		dc.w byte_1A3D6-Ani_obj85
0001ADAC 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001ADB0                            		even
0001ADB0                            		even
0001ADB0                            
0001ADB0                            Map_Eggman2:
0001ADB0                            	include "_maps\Eggman2.asm"
0001ADB0                            ; ---------------------------------------------------------------------------
0001ADB0                            ; Sprite mappings - Eggman (FZ)
0001ADB0                            ; ---------------------------------------------------------------------------
0001ADB0 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001ADB2 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001ADB4 06                         byte_1A3DE:	dc.b 6
0001ADB5 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001ADBA EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001ADBF EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001ADC4 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001ADC9 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001ADCE 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001ADD3 06                         byte_1A3FD:	dc.b 6
0001ADD4 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001ADD9 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001ADDE EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001ADE3 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001ADE8 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001ADED 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001ADF2                            		even
0001ADF2                            		even
0001ADF2                            
0001ADF2                            Map_FZBoss:
0001ADF2                            	include "_maps\FZ boss.asm"
0001ADF2                            ; ---------------------------------------------------------------------------
0001ADF2                            ; Sprite mappings - boss (FZ)
0001ADF2                            ; ---------------------------------------------------------------------------
0001ADF2 0000                       		dc.w byte_1A422-Map_FZBoss
0001ADF4 0000                       		dc.w byte_1A42D-Map_FZBoss
0001ADF6 0000                       		dc.w byte_1A43D-Map_FZBoss
0001ADF8 02                         byte_1A422:	dc.b 2
0001ADF9 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001ADFE 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AE03 03                         byte_1A42D:	dc.b 3
0001AE04 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AE09 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AE0E 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AE13 02                         byte_1A43D:	dc.b 2
0001AE14 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AE19 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AE1E                            		even
0001AE1E                            		even
0001AE1E                            
0001AE1E                            ; ===========================================================================
0001AE1E                            
0001AE1E                            Obj84_Delete:
0001AE1E 4EF9 0000 DEA4             		jmp	DeleteObject
0001AE24                            ; ===========================================================================
0001AE24                            ; ---------------------------------------------------------------------------
0001AE24                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AE24                            ; ---------------------------------------------------------------------------
0001AE24                            
0001AE24                            Obj84:					; XREF: Obj_Index
0001AE24 7000                       		moveq	#0,d0
0001AE26 1028 0024                  		move.b	$24(a0),d0
0001AE2A 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AE2E 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AE32                            ; ===========================================================================
0001AE32 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AE34 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AE36 0000                       		dc.w loc_1A57E-Obj84_Index
0001AE38                            
0001AE38 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AE3C 2550 0620                  		dc.w $2550, $620
0001AE40 2490 04C0                  		dc.w $2490, $4C0
0001AE44 2510 04C0                  		dc.w $2510, $4C0
0001AE48                            ; ===========================================================================
0001AE48                            
0001AE48                            Obj84_Main:				; XREF: Obj84_Index
0001AE48 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AE4C 7000                       		moveq	#0,d0
0001AE4E 1028 0028                  		move.b	$28(a0),d0
0001AE52 D040                       		add.w	d0,d0
0001AE54 D2C0                       		adda.w	d0,a1
0001AE56 117C 0004 0001             		move.b	#4,1(a0)
0001AE5C 08E8 0007 0001             		bset	#7,1(a0)
0001AE62 08E8 0004 0001             		bset	#4,1(a0)
0001AE68 317C 0300 0002             		move.w	#$300,2(a0)
0001AE6E 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AE76 3159 0008                  		move.w	(a1)+,8(a0)
0001AE7A 3151 000C                  		move.w	(a1),$C(a0)
0001AE7E 3159 0038                  		move.w	(a1)+,$38(a0)
0001AE82 117C 0020 0016             		move.b	#$20,$16(a0)
0001AE88 117C 0060 0017             		move.b	#$60,$17(a0)
0001AE8E 117C 0020 0019             		move.b	#$20,$19(a0)
0001AE94 117C 0060 0016             		move.b	#$60,$16(a0)
0001AE9A 117C 0003 0018             		move.b	#3,$18(a0)
0001AEA0 5428 0024                  		addq.b	#2,$24(a0)
0001AEA4                            
0001AEA4                            loc_1A4CE:				; XREF: Obj84_Index
0001AEA4 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AEAA 6F00                       		ble.s	loc_1A4DC
0001AEAC 08E8 0001 0001             		bset	#1,1(a0)
0001AEB2                            
0001AEB2                            loc_1A4DC:
0001AEB2 42A8 003C                  		clr.l	$3C(a0)
0001AEB6 4A28 0029                  		tst.b	$29(a0)
0001AEBA 6700                       		beq.s	loc_1A4EA
0001AEBC 5428 0024                  		addq.b	#2,$24(a0)
0001AEC0                            
0001AEC0                            loc_1A4EA:
0001AEC0 2028 003C                  		move.l	$3C(a0),d0
0001AEC4 2228 0038                  		move.l	$38(a0),d1
0001AEC8 D280                       		add.l	d0,d1
0001AECA 4841                       		swap	d1
0001AECC 3141 000C                  		move.w	d1,$C(a0)
0001AED0 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AED6 6600                       		bne.s	loc_1A524
0001AED8 4A68 0030                  		tst.w	$30(a0)
0001AEDC 6A00                       		bpl.s	loc_1A524
0001AEDE 70F6                       		moveq	#-$A,d0
0001AEE0 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AEE6 6F00                       		ble.s	loc_1A514
0001AEE8 700E                       		moveq	#$E,d0
0001AEEA                            
0001AEEA                            loc_1A514:
0001AEEA D240                       		add.w	d0,d1
0001AEEC 2268 0034                  		movea.l	$34(a0),a1
0001AEF0 3341 000C                  		move.w	d1,$C(a1)
0001AEF4 3368 0008 0008             		move.w	8(a0),8(a1)
0001AEFA                            
0001AEFA                            loc_1A524:
0001AEFA 323C 002B                  		move.w	#$2B,d1
0001AEFE 343C 0060                  		move.w	#$60,d2
0001AF02 363C 0061                  		move.w	#$61,d3
0001AF06 3828 0008                  		move.w	8(a0),d4
0001AF0A 4EB9 0001 0238             		jsr	SolidObject
0001AF10 7000                       		moveq	#0,d0
0001AF12 3228 003C                  		move.w	$3C(a0),d1
0001AF16 6A00                       		bpl.s	loc_1A550
0001AF18 4441                       		neg.w	d1
0001AF1A 5141                       		subq.w	#8,d1
0001AF1C 6500                       		bcs.s	loc_1A55C
0001AF1E 5200                       		addq.b	#1,d0
0001AF20 E841                       		asr.w	#4,d1
0001AF22 D041                       		add.w	d1,d0
0001AF24 6000                       		bra.s	loc_1A55C
0001AF26                            ; ===========================================================================
0001AF26                            
0001AF26                            loc_1A550:
0001AF26 0441 0027                  		subi.w	#$27,d1
0001AF2A 6500                       		bcs.s	loc_1A55C
0001AF2C 5200                       		addq.b	#1,d0
0001AF2E E841                       		asr.w	#4,d1
0001AF30 D041                       		add.w	d1,d0
0001AF32                            
0001AF32                            loc_1A55C:
0001AF32 1140 001A                  		move.b	d0,$1A(a0)
0001AF36 3038 D008                  		move.w	($FFFFD008).w,d0
0001AF3A 9068 0008                  		sub.w	8(a0),d0
0001AF3E 6B00                       		bmi.s	loc_1A578
0001AF40 0440 0140                  		subi.w	#$140,d0
0001AF44 6B00                       		bmi.s	loc_1A578
0001AF46 4A28 0001                  		tst.b	1(a0)
0001AF4A 6A00 FED2                  		bpl.w	Obj84_Delete
0001AF4E                            
0001AF4E                            loc_1A578:
0001AF4E 4EF9 0000 DE68             		jmp	DisplaySprite
0001AF54                            ; ===========================================================================
0001AF54                            
0001AF54                            loc_1A57E:				; XREF: Obj84_Index
0001AF54 7000                       		moveq	#0,d0
0001AF56 1028 0028                  		move.b	$28(a0),d0
0001AF5A 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AF5E 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AF62 6000 FF5C                  		bra.w	loc_1A4EA
0001AF66                            ; ===========================================================================
0001AF66 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AF68 0000                       		dc.w loc_1A598-off_1A590
0001AF6A 0000                       		dc.w loc_1A604-off_1A590
0001AF6C 0000                       		dc.w loc_1A604-off_1A590
0001AF6E                            ; ===========================================================================
0001AF6E                            
0001AF6E                            loc_1A598:				; XREF: off_1A590
0001AF6E 4A28 0029                  		tst.b	$29(a0)
0001AF72 6600                       		bne.s	loc_1A5D4
0001AF74 2268 0034                  		movea.l	$34(a0),a1
0001AF78 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001AF7E 6600                       		bne.s	loc_1A5B4
0001AF80 6100 D2F4                  		bsr.w	BossDefeated
0001AF84 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001AF8C                            
0001AF8C                            loc_1A5B4:
0001AF8C 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AF94 6400                       		bcc.s	locret_1A602
0001AF96 42A8 003C                  		clr.l	$3C(a0)
0001AF9A 2268 0034                  		movea.l	$34(a0),a1
0001AF9E 5369 0032                  		subq.w	#1,$32(a1)
0001AFA2 4269 0030                  		clr.w	$30(a1)
0001AFA6 5528 0024                  		subq.b	#2,$24(a0)
0001AFAA 4E75                       		rts	
0001AFAC                            ; ===========================================================================
0001AFAC                            
0001AFAC                            loc_1A5D4:
0001AFAC 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AFB2 6C00                       		bge.s	loc_1A5E4
0001AFB4 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AFBC                            
0001AFBC                            loc_1A5E4:
0001AFBC 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001AFC4 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AFCA 6E00                       		bgt.s	locret_1A602
0001AFCC 4268 003E                  		clr.w	$3E(a0)
0001AFD0 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AFD6 4228 0029                  		clr.b	$29(a0)
0001AFDA                            
0001AFDA                            locret_1A602:
0001AFDA 4E75                       		rts	
0001AFDC                            ; ===========================================================================
0001AFDC                            
0001AFDC                            loc_1A604:				; XREF: off_1A590
0001AFDC 08E8 0001 0001             		bset	#1,1(a0)
0001AFE2 4A28 0029                  		tst.b	$29(a0)
0001AFE6 6600                       		bne.s	loc_1A646
0001AFE8 2268 0034                  		movea.l	$34(a0),a1
0001AFEC 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001AFF2 6600                       		bne.s	loc_1A626
0001AFF4 6100 D280                  		bsr.w	BossDefeated
0001AFF8 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B000                            
0001B000                            loc_1A626:
0001B000 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B008 6400                       		bcc.s	locret_1A674
0001B00A 42A8 003C                  		clr.l	$3C(a0)
0001B00E 2268 0034                  		movea.l	$34(a0),a1
0001B012 5369 0032                  		subq.w	#1,$32(a1)
0001B016 4269 0030                  		clr.w	$30(a1)
0001B01A 5528 0024                  		subq.b	#2,$24(a0)
0001B01E 4E75                       		rts	
0001B020                            ; ===========================================================================
0001B020                            
0001B020                            loc_1A646:
0001B020 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B026 6D00                       		blt.s	loc_1A656
0001B028 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B030                            
0001B030                            loc_1A656:
0001B030 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B038 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B03E 6D00                       		blt.s	locret_1A674
0001B040 4268 003E                  		clr.w	$3E(a0)
0001B044 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B04A 4228 0029                  		clr.b	$29(a0)
0001B04E                            
0001B04E                            locret_1A674:
0001B04E 4E75                       		rts	
0001B050                            ; ===========================================================================
0001B050                            ; ---------------------------------------------------------------------------
0001B050                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B050                            ; ---------------------------------------------------------------------------
0001B050                            Map_obj84:
0001B050                            	include "_maps\obj84.asm"
0001B050                            ; ---------------------------------------------------------------------------
0001B050                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B050                            ; ---------------------------------------------------------------------------
0001B050 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B054 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B058 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B05C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B060 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B064 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B068 06                         byte_1A68E:	dc.b 6
0001B069 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B06E A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B073 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B078 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B07D B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B082 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B087 08                         byte_1A6AD:	dc.b 8
0001B088 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B08D A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B092 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B097 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B09C B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B0A1 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B0A6 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B0AB D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B0B0 0A                         byte_1A6D6:	dc.b $A
0001B0B1 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B0B6 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B0BB B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B0C0 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B0C5 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B0CA B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B0CF D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B0D4 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B0D9 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B0DE F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B0E3 0C                         byte_1A709:	dc.b $C
0001B0E4 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B0E9 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B0EE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B0F3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B0F8 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B0FD B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B102 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B107 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B10C F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B111 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B116 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B11B 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B120 0D                         byte_1A746:	dc.b $D
0001B121 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B126 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B12B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B130 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B135 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B13A B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B13F D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B144 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B149 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B14E F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B153 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B158 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B15D 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B162 0E                         byte_1A788:	dc.b $E
0001B163 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B168 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B16D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B172 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B177 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B17C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B181 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B186 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B18B F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B190 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B195 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B19A 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B19F 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B1A4 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B1A9 02                         byte_1A7CF:	dc.b 2
0001B1AA F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B1AF 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B1B4                            		even
0001B1B4                            		even
0001B1B4                            
0001B1B4                            ; ===========================================================================
0001B1B4                            ; ---------------------------------------------------------------------------
0001B1B4                            ; Object 86 - energy balls (FZ)
0001B1B4                            ; ---------------------------------------------------------------------------
0001B1B4                            
0001B1B4                            Obj86:					; XREF: Obj_Index
0001B1B4 7000                       		moveq	#0,d0
0001B1B6 1028 0024                  		move.b	$24(a0),d0
0001B1BA 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B1BE 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B1C2                            ; ===========================================================================
0001B1C2 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B1C4 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B1C6 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B1C8 0000                       		dc.w loc_1A962-Obj86_Index
0001B1CA 0000                       		dc.w loc_1A982-Obj86_Index
0001B1CC                            ; ===========================================================================
0001B1CC                            
0001B1CC                            Obj86_Main:				; XREF: Obj86_Index
0001B1CC 317C 2588 0008             		move.w	#$2588,8(a0)
0001B1D2 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B1D8 317C 0300 0002             		move.w	#$300,2(a0)
0001B1DE 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B1E6 117C 0000 001C             		move.b	#0,$1C(a0)
0001B1EC 117C 0003 0018             		move.b	#3,$18(a0)
0001B1F2 117C 0008 0017             		move.b	#8,$17(a0)
0001B1F8 117C 0008 0016             		move.b	#8,$16(a0)
0001B1FE 117C 0004 0001             		move.b	#4,1(a0)
0001B204 08E8 0007 0001             		bset	#7,1(a0)
0001B20A 5428 0024                  		addq.b	#2,$24(a0)
0001B20E                            
0001B20E                            Obj86_Generator:			; XREF: Obj86_Index
0001B20E 2268 0034                  		movea.l	$34(a0),a1
0001B212 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B218 6600                       		bne.s	loc_1A850
0001B21A 10BC 003F                  		move.b	#$3F,(a0)
0001B21E 117C 0000 0024             		move.b	#0,$24(a0)
0001B224 4EF9 0000 DE68             		jmp	DisplaySprite
0001B22A                            ; ===========================================================================
0001B22A                            
0001B22A                            loc_1A850:
0001B22A 117C 0000 001C             		move.b	#0,$1C(a0)
0001B230 4A28 0029                  		tst.b	$29(a0)
0001B234 6700                       		beq.s	loc_1A86C
0001B236 5428 0024                  		addq.b	#2,$24(a0)
0001B23A 117C 0001 001C             		move.b	#1,$1C(a0)
0001B240 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B246                            
0001B246                            loc_1A86C:
0001B246 323C 0013                  		move.w	#$13,d1
0001B24A 343C 0008                  		move.w	#8,d2
0001B24E 363C 0011                  		move.w	#$11,d3
0001B252 3828 0008                  		move.w	8(a0),d4
0001B256 4EB9 0001 0238             		jsr	SolidObject
0001B25C 3038 D008                  		move.w	($FFFFD008).w,d0
0001B260 9068 0008                  		sub.w	8(a0),d0
0001B264 6B00                       		bmi.s	loc_1A89A
0001B266 0440 0140                  		subi.w	#$140,d0
0001B26A 6B00                       		bmi.s	loc_1A89A
0001B26C 4A28 0001                  		tst.b	1(a0)
0001B270 6A00 FBAC                  		bpl.w	Obj84_Delete
0001B274                            
0001B274                            loc_1A89A:
0001B274 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B278 4EB9 0000 AEB6             		jsr	AnimateSprite
0001B27E 4EF9 0000 DE68             		jmp	DisplaySprite
0001B284                            ; ===========================================================================
0001B284                            
0001B284                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B284 4A28 0029                  		tst.b	$29(a0)
0001B288 6700 0000                  		beq.w	loc_1A954
0001B28C 4228 0029                  		clr.b	$29(a0)
0001B290 D068 0030                  		add.w	$30(a0),d0
0001B294 0240 001E                  		andi.w	#$1E,d0
0001B298 D4C0                       		adda.w	d0,a2
0001B29A 5868 0030                  		addq.w	#4,$30(a0)
0001B29E 4268 0032                  		clr.w	$32(a0)
0001B2A2 7403                       		moveq	#3,d2
0001B2A4                            
0001B2A4                            Obj86_Loop:
0001B2A4 4EB9 0000 E304             		jsr	SingleObjLoad2
0001B2AA 6600 0000                  		bne.w	loc_1A954
0001B2AE 12BC 0086                  		move.b	#$86,(a1)
0001B2B2 3368 0008 0008             		move.w	8(a0),8(a1)
0001B2B8 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B2BE 137C 0008 0024             		move.b	#8,$24(a1)
0001B2C4 337C 2300 0002             		move.w	#$2300,2(a1)
0001B2CA 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B2D2 137C 000C 0016             		move.b	#$C,$16(a1)
0001B2D8 137C 000C 0017             		move.b	#$C,$17(a1)
0001B2DE 137C 0000 0020             		move.b	#0,$20(a1)
0001B2E4 137C 0003 0018             		move.b	#3,$18(a1)
0001B2EA 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B2F0 137C 0004 0001             		move.b	#4,1(a1)
0001B2F6 08E9 0007 0001             		bset	#7,1(a1)
0001B2FC 2348 0034                  		move.l	a0,$34(a1)
0001B300 4EB9 0000 2B1A             		jsr	(RandomNumber).l
0001B306 3228 0032                  		move.w	$32(a0),d1
0001B30A C3FC FFB1                  		muls.w	#-$4F,d1
0001B30E 0641 2578                  		addi.w	#$2578,d1
0001B312 0240 001F                  		andi.w	#$1F,d0
0001B316 0440 0010                  		subi.w	#$10,d0
0001B31A D041                       		add.w	d1,d0
0001B31C 3340 0030                  		move.w	d0,$30(a1)
0001B320 5268 0032                  		addq.w	#1,$32(a0)
0001B324 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B32A 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B32E                            
0001B32E                            loc_1A954:
0001B32E 4A68 0032                  		tst.w	$32(a0)
0001B332 6600                       		bne.s	loc_1A95E
0001B334 5428 0024                  		addq.b	#2,$24(a0)
0001B338                            
0001B338                            loc_1A95E:
0001B338 6000 FF0C                  		bra.w	loc_1A86C
0001B33C                            ; ===========================================================================
0001B33C                            
0001B33C                            loc_1A962:				; XREF: Obj86_Index
0001B33C 117C 0002 001C             		move.b	#2,$1C(a0)
0001B342 4A68 0038                  		tst.w	$38(a0)
0001B346 6600                       		bne.s	loc_1A97E
0001B348 117C 0002 0024             		move.b	#2,$24(a0)
0001B34E 2268 0034                  		movea.l	$34(a0),a1
0001B352 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B358                            
0001B358                            loc_1A97E:
0001B358 6000 FEEC                  		bra.w	loc_1A86C
0001B35C                            ; ===========================================================================
0001B35C                            
0001B35C                            loc_1A982:				; XREF: Obj86_Index
0001B35C 7000                       		moveq	#0,d0
0001B35E 1028 0025                  		move.b	$25(a0),d0
0001B362 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B366 4EFB 0000                  		jmp	Obj86_Index2(pc,d0.w)
0001B36A                            ; ===========================================================================
0001B36A 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B36C 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B36E 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2	; orb random 1
0001B370 0000                       		dc.w Obj86_Ball_Sine-Obj86_Index2	; rob random 2
0001B372 0000                       		dc.w Obj86_Ball_Explode-Obj86_Index2	; orb random 3
0001B374 0000                       		dc.w Obj86_Ball_Speed-Obj86_Index2	; yeah you get it
0001B376 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B378 0000                       		dc.w Obj86_Ball_Homing-Obj86_Index2
0001B37A 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B37C 0000                       		dc.w Obj86_Ball_Static-Obj86_Index2
0001B37E                            ; ===========================================================================
0001B37E                            
0001B37E                            loc_1A9A6:				; XREF: Obj86_Index2
0001B37E 3028 0030                  		move.w	$30(a0),d0
0001B382 9068 0008                  		sub.w	8(a0),d0
0001B386 E940                       		asl.w	#4,d0
0001B388 3140 0010                  		move.w	d0,$10(a0)
0001B38C 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B392 5428 0025                  		addq.b	#2,$25(a0)
0001B396                            
0001B396                            Obj86_Ball_Animate:
0001B396 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B39A 4EB9 0000 AEB6             		jsr	AnimateSprite
0001B3A0 4EF9 0000 DE68             		jmp	DisplaySprite
0001B3A6                            ; ===========================================================================
0001B3A6                            
0001B3A6                            loc_1A9C0:				; XREF: Obj86_Index2
0001B3A6 4A68 0010                  		tst.w	$10(a0)
0001B3AA 6700                       		beq.s	loc_1A9E6
0001B3AC 4EB9 0000 DE42             		jsr	SpeedToPos
0001B3B2 3028 0008                  		move.w	8(a0),d0
0001B3B6 9068 0030                  		sub.w	$30(a0),d0
0001B3BA 6400                       		bcc.s	loc_1A9E6
0001B3BC 4268 0010                  		clr.w	$10(a0)
0001B3C0 D168 0008                  		add.w	d0,8(a0)
0001B3C4 2268 0034                  		movea.l	$34(a0),a1
0001B3C8 5369 0032                  		subq.w	#1,$32(a1)
0001B3CC                            
0001B3CC                            loc_1A9E6:
0001B3CC 117C 0000 001C             		move.b	#0,$1C(a0)
0001B3D2 5368 0028                  		subq.w	#1,$28(a0)
0001B3D6 6600                       		bne.s	locret_1AA1C
0001B3D8 4EB8 2B1A                  		jsr	RandomNumber
0001B3DC 0240 000E                  		and.w	#7*2,d0
0001B3E0 5840                       		addq.w	#2*2,d0
0001B3E2 1140 0025                  		move.b	d0,$25(a0)	; set routine
0001B3E6 4840                       		swap	d0
0001B3E8 3140 0028                  		move.w	d0,$28(a0)	; set other number
0001B3EC 117C 0001 001C             		move.b	#1,$1C(a0)
0001B3F2 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B3F8 3038 D008                  		move.w	($FFFFD008).w,d0
0001B3FC 9068 0008                  		sub.w	8(a0),d0
0001B400 3140 0010                  		move.w	d0,$10(a0)
0001B404 317C 0140 0012             		move.w	#$140,$12(a0)
0001B40A                            
0001B40A                            locret_1AA1C:
0001B40A 6000 FF8A                  		bra.w	Obj86_Ball_Animate
0001B40E                            ; ===========================================================================
0001B40E                            
0001B40E                            Obj86_Ball_Explode:
0001B40E 5328 0028                  		subq.b	#1,$28(a0)
0001B412 6A00 FF82                  		bpl.w	Obj86_Ball_Animate
0001B416 2268 0034                  		movea.l	$34(a0),a1
0001B41A 5369 0038                  		subq.w	#1,$38(a1)
0001B41E 2248                       		move.l	a0,a1
0001B420 7400                       		moveq	#0,d2	; GMZ
0001B422 720F                       		moveq	#16-1,d1	; GMZ: Amount of explosion objects
0001B424 6000                       		bra.s	@start
0001B426                            @loop:
0001B426 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001B42C 6600                       		bne.s	@exit
0001B42E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B434 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B43A                            @start:
0001B43A 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B43E 137C 0002 0024             		move.b	#2,$24(a1)	; ML: no animal
0001B444 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype:
0001B448 5802                       		addq.b	#4,d2
0001B44A 51C9 FFDA                  		dbf	d1,@loop
0001B44E                            @exit:
0001B44E 6000 FF46                  		bra.w	Obj86_Ball_Animate
0001B452                            ; ===========================================================================
0001B452                            
0001B452                            Obj86_Ball_Sine:
0001B452 1028 0028                  		move.b	$28(a0),d0
0001B456 5828 0028                  		addq.b	#4,$28(a0)
0001B45A 4EB8 2B40                  		jsr	CalcSine
0001B45E C1FC 0002                  		muls.w	#2,d0
0001B462 3140 0010                  		move.w	d0,$10(a0)
0001B466                            
0001B466 1028 0029                  		move.b	$29(a0),d0
0001B46A 5828 0029                  		addq.b	#4,$29(a0)
0001B46E 4EB8 2B40                  		jsr	CalcSine
0001B472 4A40                       		tst.w	d0
0001B474 6B00                       		bmi.s	@upwards
0001B476 E548                       		lsl.w	#2,d0		; x4 go down faster
0001B478                            @upwards:
0001B478 3140 0012                  		move.w	d0,$12(a0)
0001B47C 6000 0000                  		bra.w	loc_1AA1E
0001B480                            ; ===========================================================================
0001B480                            
0001B480                            Obj86_Ball_Homing:
0001B480 0C28 00F0 0028             		cmp.b	#$F0,$28(a0)
0001B486 6400                       		bhs.s	@homer
0001B488 0C28 00E0 0028             		cmp.b	#$E0,$28(a0)
0001B48E 6400                       		bhs.s	Obj86_Ball_Vanish
0001B490 5328 0028                  		subq.b	#1,$28(a0)
0001B494 6400                       		bcc.s	@nomorehoming
0001B496 3038 D008                  		move.w	($FFFFD008).w,d0
0001B49A 9068 0008                  		sub.w	8(a0),d0
0001B49E D168 0010                  		add.w	d0,$10(a0)
0001B4A2 D168 0010                  		add.w	d0,$10(a0)
0001B4A6                            @nomorehoming:
0001B4A6 6000 0000                  		bra.w	loc_1AA1E
0001B4AA                            @homer:
0001B4AA 0C28 00DF 0028             		cmp.b	#$DF,$28(a0)
0001B4B0 60F4                       		bra.s	@nomorehoming	; next frame ig
0001B4B2                            ; ===========================================================================
0001B4B2                            
0001B4B2                            Obj86_Ball_Speed:
0001B4B2 4268 0010                  		clr.w	$10(a0)
0001B4B6 7000                       		moveq	#0,d0
0001B4B8 1028 0028                  		move.b	$28(a0),d0
0001B4BC E448                       		lsr.w	#2,d0
0001B4BE D168 0012                  		add.w	d0,$12(a0)
0001B4C2 1028 0029                  		move.b	$29(a0),d0
0001B4C6 D128 0028                  		add.b	d0,$28(a0)
0001B4CA 6000 0000                  		bra.w	loc_1AA1E
0001B4CE                            ; ===========================================================================
0001B4CE                            
0001B4CE                            Obj86_Ball_Vanish:
0001B4CE 303C 00E1                  		move.w	#$E1,d0
0001B4D2 4EB9 0000 139E             		jsr	(PlaySound_Special).l
0001B4D8 6000 0000                  		bra.w	loc_1AA34
0001B4DC                            ; ===========================================================================
0001B4DC                            
0001B4DC                            Obj86_Ball_Static:
0001B4DC 4268 0010                  		clr.w	$10(a0)
0001B4E0 7000                       		moveq	#0,d0
0001B4E2 7200                       		moveq	#0,d1
0001B4E4 1028 0028                  		move.b	$28(a0),d0
0001B4E8 1228 0029                  		move.b	$29(a0),d1
0001B4EC D041                       		add.w	d1,d0
0001B4EE 3140 0012                  		move.w	d0,$12(a0)
0001B4F2 6000 0000                  		bra.w	loc_1AA1E
0001B4F6                            ; ===========================================================================
0001B4F6                            
0001B4F6                            Obj86_Ball_Standard:
0001B4F6                            loc_1AA1E:
0001B4F6 4EB9 0000 DE42             		jsr	SpeedToPos
0001B4FC 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B502 6500 FE92                  		blo.w	Obj86_Ball_Animate
0001B506                            loc_1AA34:
0001B506 2268 0034                  		movea.l	$34(a0),a1
0001B50A 5369 0038                  		subq.w	#1,$38(a1)
0001B50E 6000 F90E                  		bra.w	Obj84_Delete
0001B512                            ; ===========================================================================
0001B512                            Ani_obj86:
0001B512                            	include "_anim\obj86.asm"
0001B512                            ; ---------------------------------------------------------------------------
0001B512                            ; Animation script - energy ball launcher (FZ)
0001B512                            ; ---------------------------------------------------------------------------
0001B512 0000                       		dc.w byte_1AA46-Ani_obj86
0001B514 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B516 0000                       		dc.w byte_1AA50-Ani_obj86
0001B518 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B51C 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B522 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B528                            		even
0001B528                            		even
0001B528                            
0001B528                            ; ---------------------------------------------------------------------------
0001B528                            ; Sprite mappings - energy ball	launcher (FZ)
0001B528                            ; ---------------------------------------------------------------------------
0001B528                            Map_obj86:
0001B528                            	include "_maps\obj86.asm"
0001B528                            ; ---------------------------------------------------------------------------
0001B528                            ; Sprite mappings - energy ball	launcher (FZ)
0001B528                            ; ---------------------------------------------------------------------------
0001B528 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B52C 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B530 01                         byte_1AA5E:	dc.b 1
0001B531 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B536 01                         byte_1AA64:	dc.b 1
0001B537 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B53C 01                         byte_1AA6A:	dc.b 1
0001B53D F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B542 01                         byte_1AA70:	dc.b 1
0001B543 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B548                            		even
0001B548                            		even
0001B548                            
0001B548                            Ani_obj86a:
0001B548                            	include "_anim\obj86a.asm"
0001B548                            ; ---------------------------------------------------------------------------
0001B548                            ; Animation script - energy balls (FZ)
0001B548                            ; ---------------------------------------------------------------------------
0001B548 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B54A 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B54C 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B55B 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B56A 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B56E 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B578                            		even
0001B578                            		even
0001B578                            
0001B578                            ; ---------------------------------------------------------------------------
0001B578                            ; Sprite mappings - energy balls (FZ)
0001B578                            ; ---------------------------------------------------------------------------
0001B578                            Map_obj86a:
0001B578                            	include "_maps\obj86a.asm"
0001B578                            ; ---------------------------------------------------------------------------
0001B578                            ; Sprite mappings - energy balls (FZ)
0001B578                            ; ---------------------------------------------------------------------------
0001B578 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B57C 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B580 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B584 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B588 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B58C 0000                       		dc.w byte_1AB20-Map_obj86a
0001B58E 02                         byte_1AABC:	dc.b 2
0001B58F F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B594 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B599 02                         byte_1AAC7:	dc.b 2
0001B59A F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B59F F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B5A4 02                         byte_1AAD2:	dc.b 2
0001B5A5 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B5AA 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B5AF 02                         byte_1AADD:	dc.b 2
0001B5B0 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B5B5 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B5BA 02                         byte_1AAE8:	dc.b 2
0001B5BB F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B5C0 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B5C5 02                         byte_1AAF3:	dc.b 2
0001B5C6 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B5CB F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B5D0 01                         byte_1AAFE:	dc.b 1
0001B5D1 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B5D6 01                         byte_1AB04:	dc.b 1
0001B5D7 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B5DC 02                         byte_1AB0A:	dc.b 2
0001B5DD F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B5E2 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B5E7 02                         byte_1AB15:	dc.b 2
0001B5E8 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B5ED F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B5F2 00                         byte_1AB20:	dc.b 0
0001B5F4 00                         		even
0001B5F4 00                         		even
0001B5F4                            
0001B5F4                            ; ===========================================================================
0001B5F4                            ; ---------------------------------------------------------------------------
0001B5F4                            ; Object 3E - prison capsule
0001B5F4                            ; ---------------------------------------------------------------------------
0001B5F4                            
0001B5F4                            Obj3E:					; XREF: Obj_Index
0001B5F4 7000                       		moveq	#0,d0
0001B5F6 1028 0024                  		move.b	$24(a0),d0
0001B5FA 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B5FE 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B602 3028 0008                  		move.w	8(a0),d0
0001B606 0240 FF80                  		andi.w	#$FF80,d0
0001B60A 3238 F700                  		move.w	($FFFFF700).w,d1
0001B60E 0441 0080                  		subi.w	#$80,d1
0001B612 0241 FF80                  		andi.w	#$FF80,d1
0001B616 9041                       		sub.w	d1,d0
0001B618 0C40 0280                  		cmpi.w	#$280,d0
0001B61C 6200                       		bhi.s	Obj3E_Delete
0001B61E 4EF9 0000 DE68             		jmp	DisplaySprite
0001B624                            ; ===========================================================================
0001B624                            
0001B624                            Obj3E_Delete:
0001B624 4EF9 0000 DEA4             		jmp	DeleteObject
0001B62A                            ; ===========================================================================
0001B62A 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B62C 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B62E 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B630 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B632 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B634 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B636 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B638 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B63A                            
0001B63A 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B63E 040C 0501                  		dc.b 4,	$C, 5, 1
0001B642 0610 0403                  		dc.b 6,	$10, 4,	3
0001B646 0810 0305                  		dc.b 8,	$10, 3,	5
0001B64A                            ; ===========================================================================
0001B64A                            
0001B64A                            Obj3E_Main:				; XREF: Obj3E_Index
0001B64A 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B652 317C 049D 0002             		move.w	#$49D,2(a0)
0001B658 117C 0004 0001             		move.b	#4,1(a0)
0001B65E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B664 7000                       		moveq	#0,d0
0001B666 1028 0028                  		move.b	$28(a0),d0
0001B66A E548                       		lsl.w	#2,d0
0001B66C 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B670 1159 0024                  		move.b	(a1)+,$24(a0)
0001B674 1159 0019                  		move.b	(a1)+,$19(a0)
0001B678 1159 0018                  		move.b	(a1)+,$18(a0)
0001B67C 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B680 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B684 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B686 117C 0006 0020             		move.b	#6,$20(a0)
0001B68C 117C 0008 0021             		move.b	#8,$21(a0)
0001B692                            
0001B692                            Obj3E_Not02:
0001B692 4E75                       		rts	
0001B694                            ; ===========================================================================
0001B694                            
0001B694                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B694 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B69A 6700                       		beq.s	Obj3E_ChkOpened
0001B69C 323C 002B                  		move.w	#$2B,d1
0001B6A0 343C 0018                  		move.w	#$18,d2
0001B6A4 363C 0018                  		move.w	#$18,d3
0001B6A8 3828 0008                  		move.w	8(a0),d4
0001B6AC 4EF9 0001 0238             		jmp	SolidObject
0001B6B2                            ; ===========================================================================
0001B6B2                            
0001B6B2                            Obj3E_ChkOpened:
0001B6B2 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B6B6 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B6B8 4228 0025                  		clr.b	$25(a0)
0001B6BC 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B6C2 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B6C8                            
0001B6C8                            Obj3E_DoOpen:
0001B6C8 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B6CE 4E75                       		rts	
0001B6D0                            ; ===========================================================================
0001B6D0                            
0001B6D0                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B6D0 323C 0017                  		move.w	#$17,d1
0001B6D4 343C 0008                  		move.w	#8,d2
0001B6D8 363C 0008                  		move.w	#8,d3
0001B6DC 3828 0008                  		move.w	8(a0),d4
0001B6E0 4EB9 0001 0238             		jsr	SolidObject
0001B6E6 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B6EC 4EB9 0000 AEB6             		jsr	AnimateSprite
0001B6F2 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B6F8 4A28 0025                  		tst.b	$25(a0)
0001B6FC 6700                       		beq.s	locret_1AC60
0001B6FE 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001B702 6600                       		bne.s	Obj3E_SkipScrPosChk	; GMZ: If not, branch
0001B704 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w	; GMZ: Is screen X pos 2AC0?
0001B70A 6600                       		bne.s	locret_1AC60	; GMZ: If not, branch
0001B70C                            
0001B70C                            Obj3E_SkipScrPosChk:
0001B70C 5068 000C                  		addq.w	#8,$C(a0)
0001B710 117C 000A 0024             		move.b	#$A,$24(a0)
0001B716                            		; move.w	#$3C,$1E(a0)
0001B716 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001B71A 6600                       		bne.s	Obj3E_SetNormalTimer	; GMZ: If not, branch
0001B71C 317C 0100 001E             		move.w	#$100,$1E(a0)	; GMZ: Timer for "Sonic Got Through"
0001B722 6000                       		bra.s	Obj3E_LockCtrl	; GMZ
0001B724                            
0001B724                            Obj3E_SetNormalTimer:	; GMZ
0001B724 317C 003C 001E             		move.w	#$3C,$1E(a0)	; GMZ
0001B72A                            
0001B72A                            Obj3E_LockCtrl:	; GMZ
0001B72A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B72E 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B732 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B738 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001B73C 6700                       		beq.s	Obj3E_NoCtrl	; GMZ: If yes, branch
0001B73E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B744 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B746 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B74C 6000                       		bra.s	Obj3E_ContinueCode
0001B74E                            
0001B74E                            Obj3E_MoveLeft:
0001B74E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B754                            
0001B754                            Obj3E_NoCtrl:	; GMZ
0001B754                            Obj3E_ContinueCode:
0001B754 4228 0025                  		clr.b	$25(a0)
0001B758 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001B75C 6700                       		beq.s	Obj3E_LoadTruthNuke	; GMZ: If yes, branch
0001B75E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B764 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B76A                            
0001B76A                            locret_1AC60:
0001B76A 4E75                       		rts	
0001B76C                            
0001B76C                            Obj3E_LoadTruthNuke:	; GMZ
0001B76C 2448                       		move.l	a0,a2	; GMZ
0001B76E 207C FFFF D000             		move.l	#$FFFFD000,a0
0001B774 4EB9 0000 DEA4             		jsr	DeleteObject	; GMZ: Delete Sonic's object
0001B77A 207C FFFF D040             		move.l	#$FFFFD040,a0
0001B780 4EB9 0000 DEA4             		jsr	DeleteObject	; GMZ: Delete the HUD object
0001B786 204A                       		move.l	a2,a0
0001B788 303C 00E4                  		move.w	#$E4,d0
0001B78C 4EB8 139E                  		jsr	PlaySound_Special	; GMZ: Stop music
0001B790 303C 00CD                  		move.w	#$CD,d0
0001B794 4EB8 1398                  		jsr	PlaySound	; GMZ: Play a button sound
0001B798 11FC 0001 FFF9             		move.b	#1,($FFFFFFF9).w	; GMZ: Set truth nuke flag
0001B79E 48E7 FF80                  		movem.l	d0-d7/a0,-(sp)
0001B7A2 4EB8 1F52                  		jsr	Pal_MakeFlash
0001B7A6 4CDF 01FF                  		movem.l	(sp)+,d0-d7/a0
0001B7AA 31FC 0000 FBC0             		move.w	#$0000,($FFFFFBC0).w	; GMZ: Make BG color black
0001B7B0                            		; lea	(Obj3E_TNScrPos).l,a1
0001B7B0                            		; moveq	#0,d2
0001B7B0                            		; move.b	($FFFFFE10).w,d2
0001B7B0                            		; lsl.l	#3,d2
0001B7B0                            		; move.l	(a1,d2.w),d0
0001B7B0                            		; move.l	4(a1,d2.w),d1
0001B7B0                            		; move.l	d0,($FFFFF700).w
0001B7B0                            		; move.l	d1,($FFFFF704).w
0001B7B0                            		; cmpi.b	#8,d2
0001B7B0                            		; ; beq.s	Obj3E_IsLZ
0001B7B0                            		; ; move.l	#$00000000,($FFFFF704).w	; GMZ: Set camera to the top of the stage
0001B7B0                            		; ; bra.s	Obj3E_IsntLZ
0001B7B0                            		; bne.s	Obj3E_IsntLZ
0001B7B0                            
0001B7B0                            ; Obj3E_IsLZ:
0001B7B0                            		; move.l	#$01600000,($FFFFD00C).w
0001B7B0                            		; move.l	#$01000000,($FFFFF704).w
0001B7B0                            		; move.l	#$20300000,($FFFFF700).w
0001B7B0                            		; move.l	#0,($FFFFF646).w
0001B7B0                            		; move.l	#0,($FFFFF64A).w
0001B7B0                            		; move.b	#0,($FFFFF64E).w
0001B7B0 21FC 2AC0 0000 F700        		move.l	#$2AC00000,($FFFFF700).w	; GMZ
0001B7B8 21FC 0000 0000 F704        		move.l	#$00000000,($FFFFF704).w	; GMZ
0001B7C0                            
0001B7C0                            Obj3E_IsntLZ:
0001B7C0 43F9 00FF 0000             		lea	($FF0000).l,a1
0001B7C6 7000                       		moveq	#0,d0
0001B7C8 7200                       		moveq	#0,d1
0001B7CA 303C 0A40                  		move.w	#$A40,d0
0001B7CE                            
0001B7CE                            Obj3E_ClearChunks:
0001B7CE 22C1                       		move.l	d1,(a1)+
0001B7D0 22C1                       		move.l	d1,(a1)+
0001B7D2 22C1                       		move.l	d1,(a1)+
0001B7D4 22C1                       		move.l	d1,(a1)+	; GMZ: Clear chunks to prevent garbage from appearing
0001B7D6 51C8 FFF6                  		dbf	d0,Obj3E_ClearChunks
0001B7DA 43F9 00FF A400             		lea	($FFA400).l,a1
0001B7E0 303C 0100                  		move.w	#$100,d0
0001B7E4                            
0001B7E4                            Obj3E_ClearLayout:
0001B7E4 22C1                       		move.l	d1,(a1)+	; GMZ: Clear layout to prevent garbage from appearing
0001B7E6 51C8 FFFC                  		dbf	d0,Obj3E_ClearLayout
0001B7EA                            
0001B7EA 4EB8 12C6                  		jsr	ClearScreen
0001B7EE 4EB8 15E0                  		jsr	ClearPLC
0001B7F2 7023                       		moveq	#$23,d0
0001B7F4 4EB8 1582                  		jsr	LoadPLC	; GMZ: Load art
0001B7F8 2448                       		move.l	a0,a2	; Save a0 to a2
0001B7FA 43F9 00FF B010             		lea	($FFB010).l,a1
0001B800 41F9 0000 0000             		lea	(Eni_TruthNuke).l,a0
0001B806 303C 0000                  		move.w	#0,d0
0001B80A 4EB8 1720                  		jsr	EniDec
0001B80E 43F9 00FF B010             		lea	($FFB010).l,a1
0001B814 203C 4000 0003             		move.l	#$40000003,d0
0001B81A 7200                       		moveq	#0,d1
0001B81C 3238 F700                  		move.w	($FFFFF700).w,d1
0001B820 0241 01F8                  		andi.w	#$1F8,d1
0001B824 E189                       		lsl.l	#8,d1
0001B826 ED89                       		lsl.l	#6,d1
0001B828 D081                       		add.l	d1,d0	; GMZ: Get correct plane position
0001B82A 7227                       		moveq	#$27,d1
0001B82C 741B                       		moveq	#$1B,d2
0001B82E 4EB8 1422                  		jsr	ShowVDPGraphics	; GMZ: Load plane mappings
0001B832 204A                       		move.l	a2,a0	; GMZ: Recover a0 from a2
0001B834 4E75                       		rts	
0001B836                            ; ===========================================================================
0001B836                            
0001B836                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B836 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001B83A 6700                       		beq.s	Obj3E_TNExplosion	; GMZ: If yes, branch
0001B83C 7007                       		moveq	#7,d0
0001B83E C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B842 6600                       		bne.s	loc_1ACA0
0001B844 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001B84A 6600                       		bne.s	loc_1ACA0
0001B84C 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B850 3368 0008 0008             		move.w	8(a0),8(a1)
0001B856 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B85C 4EB9 0000 2B1A             		jsr	(RandomNumber).l
0001B862 7200                       		moveq	#0,d1
0001B864 1200                       		move.b	d0,d1
0001B866 E409                       		lsr.b	#2,d1
0001B868 0441 0020                  		subi.w	#$20,d1
0001B86C D369 0008                  		add.w	d1,8(a1)
0001B870 E048                       		lsr.w	#8,d0
0001B872 E608                       		lsr.b	#3,d0
0001B874 D169 000C                  		add.w	d0,$C(a1)
0001B878                            
0001B878                            loc_1ACA0:
0001B878 5368 001E                  		subq.w	#1,$1E(a0)
0001B87C 6700                       		beq.s	Obj3E_MakeAnimal
0001B87E 4E75                       		rts	
0001B880                            
0001B880                            Obj3E_TNExplosion:
0001B880 303C 00C1                  		move.w	#$C1,d0
0001B884 4EB8 1398                  		jsr	PlaySound	; GMZ: Play multiple explosion sounds while we wait
0001B888 5368 001E                  		subq.w	#1,$1E(a0)
0001B88C 6700 0000                  		beq.w	Obj3E_TNExplTimerOver	; GMZ: If timer is 0, branch
0001B890 4E75                       		rts
0001B892                            
0001B892                            Obj3E_TNExplTimerOver:	; GMZ
0001B892 48E7 FF80                  		movem.l	d0-d7/a0,-(sp)
0001B896 4EB8 1EA6                  		jsr	Pal_MakeWhite	; GMZ: Fade out from black
0001B89A 4CDF 01FF                  		movem.l	(sp)+,d0-d7/a0
0001B89E 317C 0080 001E             		move.w	#$80,$1E(a0)	; GMZ: Set new timer
0001B8A4 117C 000E 0024             		move.b	#$E,$24(a0)	; GMZ: Set routine to 0E (End Act)
0001B8AA 4E75                       		rts	
0001B8AC                            ; ===========================================================================
0001B8AC                            
0001B8AC                            Obj3E_MakeAnimal:
0001B8AC 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B8B2 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B8B8 117C 0006 001A             		move.b	#6,$1A(a0)
0001B8BE 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B8C4 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B8CA 7C07                       		moveq	#7,d6
0001B8CC 3A3C 009A                  		move.w	#$9A,d5
0001B8D0 78E4                       		moveq	#-$1C,d4
0001B8D2                            
0001B8D2                            Obj3E_Loop:
0001B8D2 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001B8D8 6600                       		bne.s	locret_1ACF8
0001B8DA 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B8DE 3368 0008 0008             		move.w	8(a0),8(a1)
0001B8E4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B8EA D969 0008                  		add.w	d4,8(a1)
0001B8EE 5E44                       		addq.w	#7,d4
0001B8F0 3345 0036                  		move.w	d5,$36(a1)
0001B8F4 5145                       		subq.w	#8,d5
0001B8F6 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B8FA                            
0001B8FA                            locret_1ACF8:
0001B8FA 4E75                       		rts	
0001B8FC                            ; ===========================================================================
0001B8FC                            
0001B8FC                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B8FC 7007                       		moveq	#7,d0
0001B8FE C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B902 6600                       		bne.s	loc_1AD38
0001B904 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001B90A 6600                       		bne.s	loc_1AD38
0001B90C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B910 3368 0008 0008             		move.w	8(a0),8(a1)
0001B916 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B91C 4EB9 0000 2B1A             		jsr	(RandomNumber).l
0001B922 0240 001F                  		andi.w	#$1F,d0
0001B926 5D40                       		subq.w	#6,d0
0001B928 4A41                       		tst.w	d1
0001B92A 6A00                       		bpl.s	loc_1AD2E
0001B92C 4440                       		neg.w	d0
0001B92E                            
0001B92E                            loc_1AD2E:
0001B92E D169 0008                  		add.w	d0,8(a1)
0001B932 337C 000C 0036             		move.w	#$C,$36(a1)
0001B938                            
0001B938                            loc_1AD38:
0001B938 5368 001E                  		subq.w	#1,$1E(a0)
0001B93C 6600                       		bne.s	locret_1AD48
0001B93E 5428 0024                  		addq.b	#2,$24(a0)
0001B942 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B948                            
0001B948                            locret_1AD48:
0001B948 4E75                       		rts	
0001B94A                            ; ===========================================================================
0001B94A                            
0001B94A                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B94A 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001B94E 6700                       		beq.s	Obj3E_TNEndAct	; GMZ: If yes, branch
0001B950 703E                       		moveq	#$3E,d0
0001B952 7228                       		moveq	#$28,d1
0001B954 7440                       		moveq	#$40,d2
0001B956 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B95A                            
0001B95A                            Obj3E_FindObj28:
0001B95A B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B95C 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B95E D2C2                       		adda.w	d2,a1		; next object RAM
0001B960 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B964                            
0001B964 4EB9 0000 F4F4             		jsr	GotThroughAct
0001B96A 4EF9 0000 DEA4             		jmp	DeleteObject
0001B970                            
0001B970                            Obj3E_TNEndAct:
0001B970 5368 001E                  		subq.w	#1,$1E(a0)	; GMZ: Wait some frames
0001B974 6600                       		bne.s	Obj3E_Obj28Found	; GMZ: If timer isn't 0, branch
0001B976                            
0001B976 4EB9 0000 F4F4             		jsr	GotThroughAct
0001B97C 4EF9 0000 DEA4             		jmp	DeleteObject
0001B982                            ; ===========================================================================
0001B982                            
0001B982                            Obj3E_Obj28Found:
0001B982 4E75                       		rts	
0001B984                            ; ===========================================================================
0001B984                            Ani_obj3E:
0001B984                            	include "_anim\obj3E.asm"
0001B984                            ; ---------------------------------------------------------------------------
0001B984                            ; Animation script - prison capsule
0001B984                            ; ---------------------------------------------------------------------------
0001B984 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B986 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B988 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B98C                            		even
0001B98C                            		even
0001B98C                            
0001B98C                            ; ---------------------------------------------------------------------------
0001B98C                            ; Sprite mappings - prison capsule
0001B98C                            ; ---------------------------------------------------------------------------
0001B98C                            Map_obj3E:
0001B98C                            	include "_maps\obj3E.asm"
0001B98C                            ; ---------------------------------------------------------------------------
0001B98C                            ; Sprite mappings - prison capsule
0001B98C                            ; ---------------------------------------------------------------------------
0001B98C 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B990 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B994 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B998 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B99A 07                         byte_1AD82:	dc.b 7
0001B99B E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B9A0 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B9A5 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B9AA F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B9AF F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B9B4 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B9B9 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B9BE 01                         byte_1ADA6:	dc.b 1
0001B9BF F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B9C4 06                         byte_1ADAC:	dc.b 6
0001B9C5 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B9CA 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B9CF 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B9D4 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B9D9 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B9DE 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B9E3 01                         byte_1ADCB:	dc.b 1
0001B9E4 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B9E9 02                         byte_1ADD1:	dc.b 2
0001B9EA E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B9EF 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B9F4 01                         byte_1ADDC:	dc.b 1
0001B9F5 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B9FA 00                         byte_1ADE2:	dc.b 0
0001B9FC 00                         		even
0001B9FC 00                         		even
0001B9FC                            
0001B9FC                            ; ---------------------------------------------------------------------------
0001B9FC                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B9FC                            ; ---------------------------------------------------------------------------
0001B9FC                            
0001B9FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9FC                            
0001B9FC                            
0001B9FC                            TouchResponse:				; XREF: Obj01
0001B9FC 4E71                       		nop	
0001B9FE 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001BA02 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001BA06 5142                       		subq.w	#8,d2
0001BA08 7A00                       		moveq	#0,d5
0001BA0A 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001BA0E 5705                       		subq.b	#3,d5
0001BA10 9645                       		sub.w	d5,d3
0001BA12 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001BA18 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001BA1A 0643 000C                  		addi.w	#$C,d3
0001BA1E 7A0A                       		moveq	#$A,d5
0001BA20                            
0001BA20                            Touch_NoDuck:
0001BA20 383C 0010                  		move.w	#$10,d4
0001BA24 DA45                       		add.w	d5,d5
0001BA26 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001BA2A 3C3C 005F                  		move.w	#$5F,d6
0001BA2E                            
0001BA2E                            Touch_Loop:
0001BA2E 4A29 0001                  		tst.b	1(a1)
0001BA32 6A00                       		bpl.s	Touch_NextObj
0001BA34 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001BA38 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001BA3A                            
0001BA3A                            Touch_NextObj:
0001BA3A 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001BA3E 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001BA42                            
0001BA42 7000                       		moveq	#0,d0
0001BA44 4E75                       		rts	
0001BA46                            ; ===========================================================================
0001BA46 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001BA48 0C14                       		dc.b   $C, $14
0001BA4A 140C                       		dc.b  $14,  $C
0001BA4C 0410                       		dc.b	4, $10
0001BA4E 0C12                       		dc.b   $C, $12
0001BA50 1010                       		dc.b  $10, $10
0001BA52 0606                       		dc.b	6,   6
0001BA54 180C                       		dc.b  $18,  $C
0001BA56 0C10                       		dc.b   $C, $10
0001BA58 100C                       		dc.b  $10,  $C
0001BA5A 0808                       		dc.b	8,   8
0001BA5C 1410                       		dc.b  $14, $10
0001BA5E 1408                       		dc.b  $14,   8
0001BA60 0E0E                       		dc.b   $E,  $E
0001BA62 1818                       		dc.b  $18, $18
0001BA64 2810                       		dc.b  $28, $10
0001BA66 1018                       		dc.b  $10, $18
0001BA68 0810                       		dc.b	8, $10
0001BA6A 2070                       		dc.b  $20, $70
0001BA6C 4020                       		dc.b  $40, $20
0001BA6E 8020                       		dc.b  $80, $20
0001BA70 2020                       		dc.b  $20, $20
0001BA72 0808                       		dc.b	8,   8
0001BA74 0404                       		dc.b	4,   4
0001BA76 2008                       		dc.b  $20,   8
0001BA78 0C0C                       		dc.b   $C,  $C
0001BA7A 0804                       		dc.b	8,   4
0001BA7C 1804                       		dc.b  $18,   4
0001BA7E 2804                       		dc.b  $28,   4
0001BA80 0408                       		dc.b	4,   8
0001BA82 0418                       		dc.b	4, $18
0001BA84 0428                       		dc.b	4, $28
0001BA86 0420                       		dc.b	4, $20
0001BA88 1818                       		dc.b  $18, $18
0001BA8A 0C18                       		dc.b   $C, $18
0001BA8C 4808                       		dc.b  $48,   8
0001BA8E                            ; ===========================================================================
0001BA8E                            
0001BA8E                            Touch_Height:				; XREF: TouchResponse
0001BA8E 0240 003F                  		andi.w	#$3F,d0
0001BA92 D040                       		add.w	d0,d0
0001BA94 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001BA98 7200                       		moveq	#0,d1
0001BA9A 121A                       		move.b	(a2)+,d1
0001BA9C 3029 0008                  		move.w	8(a1),d0
0001BAA0 9041                       		sub.w	d1,d0
0001BAA2 9042                       		sub.w	d2,d0
0001BAA4 6400                       		bcc.s	loc_1AE98
0001BAA6 D241                       		add.w	d1,d1
0001BAA8 D041                       		add.w	d1,d0
0001BAAA 6500                       		bcs.s	Touch_Width
0001BAAC 6000 FF8C                  		bra.w	Touch_NextObj
0001BAB0                            ; ===========================================================================
0001BAB0                            
0001BAB0                            loc_1AE98:
0001BAB0 B044                       		cmp.w	d4,d0
0001BAB2 6200 FF86                  		bhi.w	Touch_NextObj
0001BAB6                            
0001BAB6                            Touch_Width:
0001BAB6 7200                       		moveq	#0,d1
0001BAB8 121A                       		move.b	(a2)+,d1
0001BABA 3029 000C                  		move.w	$C(a1),d0
0001BABE 9041                       		sub.w	d1,d0
0001BAC0 9043                       		sub.w	d3,d0
0001BAC2 6400                       		bcc.s	loc_1AEB6
0001BAC4 D241                       		add.w	d1,d1
0001BAC6 D240                       		add.w	d0,d1
0001BAC8 6500                       		bcs.s	Touch_ChkValue
0001BACA 6000 FF6E                  		bra.w	Touch_NextObj
0001BACE                            ; ===========================================================================
0001BACE                            
0001BACE                            loc_1AEB6:
0001BACE B045                       		cmp.w	d5,d0
0001BAD0 6200 FF68                  		bhi.w	Touch_NextObj
0001BAD4                            
0001BAD4                            Touch_ChkValue:
0001BAD4 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001BAD8 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001BADC 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001BAE0 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001BAE4 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001BAE8 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001BAEA 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001BAEE                            
0001BAEE                            ; touch	response is $40-$7F
0001BAEE                            
0001BAEE 1029 0020                  		move.b	$20(a1),d0
0001BAF2 0200 003F                  		andi.b	#$3F,d0
0001BAF6 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001BAFA 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001BAFC 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001BB02 6400 0000                  		bcc.w	locret_1AEF2
0001BB06 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001BB0A                            
0001BB0A                            locret_1AEF2:
0001BB0A 4E75                       		rts	
0001BB0C                            ; ===========================================================================
0001BB0C                            
0001BB0C                            Touch_Monitor:
0001BB0C 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001BB10 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001BB12 3028 000C                  		move.w	$C(a0),d0
0001BB16 0440 0010                  		subi.w	#$10,d0
0001BB1A B069 000C                  		cmp.w	$C(a1),d0
0001BB1E 6500                       		bcs.s	locret_1AF2E
0001BB20 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BB24 337C FE80 0012             		move.w	#-$180,$12(a1)
0001BB2A 4A29 0025                  		tst.b	$25(a1)
0001BB2E 6600                       		bne.s	locret_1AF2E
0001BB30 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001BB34 4E75                       		rts	
0001BB36                            ; ===========================================================================
0001BB36                            
0001BB36                            loc_1AF1E:
0001BB36 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001BB3C 6600                       		bne.s	locret_1AF2E
0001BB3E 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BB42 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001BB46                            
0001BB46                            locret_1AF2E:
0001BB46 4E75                       		rts	
0001BB48                            ; ===========================================================================
0001BB48                            
0001BB48                            Touch_Enemy:				; XREF: Touch_ChkValue
0001BB48 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BB4C 6600                       		bne.s	loc_1AF40	; if yes, branch
0001BB4E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001BB54 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001BB58                            
0001BB58                            loc_1AF40:
0001BB58 4A29 0021                  		tst.b	$21(a1)
0001BB5C 6700                       		beq.s	Touch_KillEnemy
0001BB5E 4468 0010                  		neg.w	$10(a0)
0001BB62 4468 0012                  		neg.w	$12(a0)
0001BB66 E0E8 0010                  		asr	$10(a0)
0001BB6A E0E8 0012                  		asr	$12(a0)
0001BB6E 137C 0000 0020             		move.b	#0,$20(a1)
0001BB74 5329 0021                  		subq.b	#1,$21(a1)
0001BB78 6600                       		bne.s	locret_1AF68
0001BB7A 08E9 0007 0022             		bset	#7,$22(a1)
0001BB80                            
0001BB80                            locret_1AF68:
0001BB80 4E75                       		rts	
0001BB82                            ; ===========================================================================
0001BB82                            
0001BB82                            Touch_KillEnemy:
0001BB82 08E9 0007 0022             		bset	#7,$22(a1)
0001BB88 7000                       		moveq	#0,d0
0001BB8A 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001BB8E 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001BB92 0C40 0006                  		cmpi.w	#6,d0
0001BB96 6500                       		bcs.s	loc_1AF82
0001BB98 7006                       		moveq	#6,d0
0001BB9A                            
0001BB9A                            loc_1AF82:
0001BB9A 3340 003E                  		move.w	d0,$3E(a1)
0001BB9E 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001BBA2 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001BBA8 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001BBAA 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001BBAE 337C 000A 003E             		move.w	#$A,$3E(a1)
0001BBB4                            
0001BBB4                            loc_1AF9C:
0001BBB4 6100 0000                  		bsr.w	AddPoints
0001BBB8 7400                       		moveq	#0,d2	; GMZ
0001BBBA 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001BBBC 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001BBBE                            
0001BBBE                            TouchKE_Explode:
0001BBBE 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BBC2 137C 0000 0024             		move.b	#0,$24(a1)
0001BBC8 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001BBCC                            
0001BBCC                            TouchKE_NextExplosion:
0001BBCC 5802                       		addq.b	#4,d2
0001BBCE 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001BBD4 6600                       		bne.s	TouchKE_NoExplosion
0001BBD6 336A 0008 0008             		move.w	8(a2),8(a1)
0001BBDC 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001BBE2 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001BBE6                            
0001BBE6                            TouchKE_NoExplosion:
0001BBE6 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001BBE8 4A68 0012                  		tst.w	$12(a0)
0001BBEC 6B00                       		bmi.s	loc_1AFC2
0001BBEE 3028 000C                  		move.w	$C(a0),d0
0001BBF2 B069 000C                  		cmp.w	$C(a1),d0
0001BBF6 6400                       		bcc.s	loc_1AFCA
0001BBF8 4468 0012                  		neg.w	$12(a0)
0001BBFC 4E75                       		rts	
0001BBFE                            ; ===========================================================================
0001BBFE                            
0001BBFE                            loc_1AFC2:
0001BBFE 0668 0100 0012             		addi.w	#$100,$12(a0)
0001BC04 4E75                       		rts	
0001BC06                            ; ===========================================================================
0001BC06                            
0001BC06                            loc_1AFCA:
0001BC06 0468 0100 0012             		subi.w	#$100,$12(a0)
0001BC0C 4E75                       		rts	
0001BC0E                            ; ===========================================================================
0001BC0E 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001BC16                            ; ===========================================================================
0001BC16                            
0001BC16                            loc_1AFDA:				; XREF: Touch_CatKiller
0001BC16 08E9 0007 0022             		bset	#7,$22(a1)
0001BC1C                            
0001BC1C                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001BC1C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BC20 6700                       		beq.s	Touch_Hurt	; if not, branch
0001BC22                            
0001BC22                            loc_1AFE6:				; XREF: Touch_Hurt
0001BC22 70FF                       		moveq	#-1,d0
0001BC24 4E75                       		rts	
0001BC26                            ; ===========================================================================
0001BC26                            
0001BC26                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001BC26 4E71                       		nop	
0001BC28 4A68 0030                  		tst.w	$30(a0)
0001BC2C 66F4                       		bne.s	loc_1AFE6
0001BC2E 2449                       		movea.l	a1,a2
0001BC30                            
0001BC30                            ; End of function TouchResponse
0001BC30                            ; continue straight to HurtSonic
0001BC30                            
0001BC30                            ; ---------------------------------------------------------------------------
0001BC30                            ; Hurting Sonic	subroutine
0001BC30                            ; ---------------------------------------------------------------------------
0001BC30                            
0001BC30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC30                            
0001BC30                            
0001BC30                            HurtSonic:
0001BC30 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001BC34 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001BC36 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001BC3A 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001BC3E 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001BC44 6600                       		bne.s	Hurt_Shield
0001BC46 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001BC4A 3368 0008 0008             		move.w	8(a0),8(a1)
0001BC50 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BC56                            
0001BC56                            Hurt_Shield:
0001BC56 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001BC5C 117C 0004 0024             		move.b	#4,$24(a0)
0001BC62 6100 8452                  		bsr.w	Sonic_ResetOnFloor
0001BC66 08E8 0001 0022             		bset	#1,$22(a0)
0001BC6C 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001BC72 317C FE00 0010             		move.w	#-$200,$10(a0)
0001BC78 0828 0006 0022             		btst	#6,$22(a0)
0001BC7E 6700                       		beq.s	Hurt_Reverse
0001BC80 317C FE00 0012             		move.w	#-$200,$12(a0)
0001BC86 317C FF00 0010             		move.w	#-$100,$10(a0)
0001BC8C                            
0001BC8C                            Hurt_Reverse:
0001BC8C 3028 0008                  		move.w	8(a0),d0
0001BC90 B06A 0008                  		cmp.w	8(a2),d0
0001BC94 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001BC96 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001BC9A                            
0001BC9A                            Hurt_ChkSpikes:
0001BC9A 317C 0000 0014             		move.w	#0,$14(a0)
0001BCA0 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001BCA6 317C 0078 0030             		move.w	#$78,$30(a0)
0001BCAC 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001BCB0 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001BCB4 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BCB6 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001BCBA 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BCBC 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001BCC0                            
0001BCC0                            Hurt_Sound:
0001BCC0 4EB9 0000 139E             		jsr	(PlaySound_Special).l
0001BCC6 70FF                       		moveq	#-1,d0
0001BCC8 4E75                       		rts	
0001BCCA                            ; ===========================================================================
0001BCCA                            
0001BCCA                            Hurt_NoRings:
0001BCCA 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001BCCE 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001BCD2                            ; End of function HurtSonic
0001BCD2                            
0001BCD2                            ; ---------------------------------------------------------------------------
0001BCD2                            ; Subroutine to	kill Sonic
0001BCD2                            ; ---------------------------------------------------------------------------
0001BCD2                            
0001BCD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCD2                            
0001BCD2                            
0001BCD2                            KillSonic:
0001BCD2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001BCD6 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001BCD8 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001BCDE 117C 0006 0024             		move.b	#6,$24(a0)
0001BCE4 6100 83D0                  		bsr.w	Sonic_ResetOnFloor
0001BCE8 08E8 0001 0022             		bset	#1,$22(a0)
0001BCEE 317C F900 0012             		move.w	#-$700,$12(a0)
0001BCF4 317C 0000 0010             		move.w	#0,$10(a0)
0001BCFA 317C 0000 0014             		move.w	#0,$14(a0)
0001BD00 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BD06 117C 0018 001C             		move.b	#$18,$1C(a0)
0001BD0C 08E8 0007 0002             		bset	#7,2(a0)
0001BD12 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001BD16 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001BD1A 6600                       		bne.s	Kill_Sound
0001BD1C 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BD20                            
0001BD20                            Kill_Sound:
0001BD20 4EB9 0000 139E             		jsr	(PlaySound_Special).l
0001BD26                            
0001BD26                            Kill_NoDeath:
0001BD26 70FF                       		moveq	#-1,d0
0001BD28 4E75                       		rts	
0001BD2A                            ; End of function KillSonic
0001BD2A                            
0001BD2A                            
0001BD2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD2A                            
0001BD2A                            
0001BD2A                            Touch_Special:				; XREF: Touch_ChkValue
0001BD2A 1229 0020                  		move.b	$20(a1),d1
0001BD2E 0201 003F                  		andi.b	#$3F,d1
0001BD32 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BD36 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BD38 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BD3C 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BD3E 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BD42 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BD44 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BD48 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BD4A 4E75                       		rts	
0001BD4C                            ; ===========================================================================
0001BD4C                            
0001BD4C                            Touch_CatKiller:			; XREF: Touch_Special
0001BD4C 6000 FEC8                  		bra.w	loc_1AFDA
0001BD50                            ; ===========================================================================
0001BD50                            
0001BD50                            Touch_Yadrin:				; XREF: Touch_Special
0001BD50 9A40                       		sub.w	d0,d5
0001BD52 0C45 0008                  		cmpi.w	#8,d5
0001BD56 6400                       		bcc.s	loc_1B144
0001BD58 3029 0008                  		move.w	8(a1),d0
0001BD5C 5940                       		subq.w	#4,d0
0001BD5E 0829 0000 0022             		btst	#0,$22(a1)
0001BD64 6700                       		beq.s	loc_1B130
0001BD66 0440 0010                  		subi.w	#$10,d0
0001BD6A                            
0001BD6A                            loc_1B130:
0001BD6A 9042                       		sub.w	d2,d0
0001BD6C 6400                       		bcc.s	loc_1B13C
0001BD6E 0640 0018                  		addi.w	#$18,d0
0001BD72 6500                       		bcs.s	loc_1B140
0001BD74 6000                       		bra.s	loc_1B144
0001BD76                            ; ===========================================================================
0001BD76                            
0001BD76                            loc_1B13C:
0001BD76 B044                       		cmp.w	d4,d0
0001BD78 6200                       		bhi.s	loc_1B144
0001BD7A                            
0001BD7A                            loc_1B140:
0001BD7A 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BD7E                            ; ===========================================================================
0001BD7E                            
0001BD7E                            loc_1B144:
0001BD7E 6000 FDC8                  		bra.w	Touch_Enemy
0001BD82                            ; ===========================================================================
0001BD82                            
0001BD82                            Touch_D7orE1:				; XREF: Touch_Special
0001BD82 5229 0021                  		addq.b	#1,$21(a1)
0001BD86 4E75                       		rts	
0001BD88                            ; End of function Touch_Special
0001BD88                            
0001BD88                            ; ---------------------------------------------------------------------------
0001BD88                            ; Subroutine to	show the special stage layout
0001BD88                            ; ---------------------------------------------------------------------------
0001BD88                            
0001BD88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD88                            
0001BD88                            
0001BD88                            SS_ShowLayout:				; XREF: SpecialStage
0001BD88 6100 0000                  		bsr.w	SS_AniWallsRings
0001BD8C 6100 0000                  		bsr.w	SS_AniItems
0001BD90 3F05                       		move.w	d5,-(sp)
0001BD92 43F8 8000                  		lea	($FFFF8000).w,a1
0001BD96 1038 F780                  		move.b	($FFFFF780).w,d0
0001BD9A 0200 00FC                  		andi.b	#$FC,d0
0001BD9E 4EB9 0000 2B40             		jsr	(CalcSine).l
0001BDA4 3800                       		move.w	d0,d4
0001BDA6 3A01                       		move.w	d1,d5
0001BDA8 C9FC 0018                  		muls.w	#$18,d4
0001BDAC CBFC 0018                  		muls.w	#$18,d5
0001BDB0 7400                       		moveq	#0,d2
0001BDB2 3438 F700                  		move.w	($FFFFF700).w,d2
0001BDB6 84FC 0018                  		divu.w	#$18,d2
0001BDBA 4842                       		swap	d2
0001BDBC 4442                       		neg.w	d2
0001BDBE 0642 FF4C                  		addi.w	#-$B4,d2
0001BDC2 7600                       		moveq	#0,d3
0001BDC4 3638 F704                  		move.w	($FFFFF704).w,d3
0001BDC8 86FC 0018                  		divu.w	#$18,d3
0001BDCC 4843                       		swap	d3
0001BDCE 4443                       		neg.w	d3
0001BDD0 0643 FF4C                  		addi.w	#-$B4,d3
0001BDD4 3E3C 000F                  		move.w	#$F,d7
0001BDD8                            
0001BDD8                            loc_1B19E:
0001BDD8 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BDDC 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BDE0 4440                       		neg.w	d0
0001BDE2 C3C2                       		muls.w	d2,d1
0001BDE4 C1C3                       		muls.w	d3,d0
0001BDE6 2C00                       		move.l	d0,d6
0001BDE8 DC81                       		add.l	d1,d6
0001BDEA 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BDEE C1C2                       		muls.w	d2,d0
0001BDF0 C3C3                       		muls.w	d3,d1
0001BDF2 D280                       		add.l	d0,d1
0001BDF4 2406                       		move.l	d6,d2
0001BDF6 3C3C 000F                  		move.w	#$F,d6
0001BDFA                            
0001BDFA                            loc_1B1C0:
0001BDFA 2002                       		move.l	d2,d0
0001BDFC E080                       		asr.l	#8,d0
0001BDFE 32C0                       		move.w	d0,(a1)+
0001BE00 2001                       		move.l	d1,d0
0001BE02 E080                       		asr.l	#8,d0
0001BE04 32C0                       		move.w	d0,(a1)+
0001BE06 D485                       		add.l	d5,d2
0001BE08 D284                       		add.l	d4,d1
0001BE0A 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BE0E                            
0001BE0E 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BE12 0643 0018                  		addi.w	#$18,d3
0001BE16 51CF FFC0                  		dbf	d7,loc_1B19E
0001BE1A                            
0001BE1A 3A1F                       		move.w	(sp)+,d5
0001BE1C 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BE22 7000                       		moveq	#0,d0
0001BE24 3038 F704                  		move.w	($FFFFF704).w,d0
0001BE28 80FC 0018                  		divu.w	#$18,d0
0001BE2C C0FC 0080                  		mulu.w	#$80,d0
0001BE30 D1C0                       		adda.l	d0,a0
0001BE32 7000                       		moveq	#0,d0
0001BE34 3038 F700                  		move.w	($FFFFF700).w,d0
0001BE38 80FC 0018                  		divu.w	#$18,d0
0001BE3C D0C0                       		adda.w	d0,a0
0001BE3E 49F8 8000                  		lea	($FFFF8000).w,a4
0001BE42 3E3C 000F                  		move.w	#$F,d7
0001BE46                            
0001BE46                            loc_1B20C:
0001BE46 3C3C 000F                  		move.w	#$F,d6
0001BE4A                            
0001BE4A                            loc_1B210:
0001BE4A 7000                       		moveq	#0,d0
0001BE4C 1018                       		move.b	(a0)+,d0
0001BE4E 6700                       		beq.s	loc_1B268
0001BE50 0C00 004E                  		cmpi.b	#$4E,d0
0001BE54 6200                       		bhi.s	loc_1B268
0001BE56 3614                       		move.w	(a4),d3
0001BE58 0643 0120                  		addi.w	#$120,d3
0001BE5C 0C43 0070                  		cmpi.w	#$70,d3
0001BE60 6500                       		bcs.s	loc_1B268
0001BE62 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BE66 6400                       		bcc.s	loc_1B268
0001BE68 342C 0002                  		move.w	2(a4),d2
0001BE6C 0642 00F0                  		addi.w	#$F0,d2
0001BE70 0C42 0070                  		cmpi.w	#$70,d2
0001BE74 6500                       		bcs.s	loc_1B268
0001BE76 0C42 0170                  		cmpi.w	#$170,d2
0001BE7A 6400                       		bcc.s	loc_1B268
0001BE7C 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BE82 E748                       		lsl.w	#3,d0
0001BE84 4BF5 0000                  		lea	(a5,d0.w),a5
0001BE88 225D                       		movea.l	(a5)+,a1
0001BE8A 321D                       		move.w	(a5)+,d1
0001BE8C D241                       		add.w	d1,d1
0001BE8E D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BE92 365D                       		movea.w	(a5)+,a3
0001BE94 7200                       		moveq	#0,d1
0001BE96 1219                       		move.b	(a1)+,d1
0001BE98 5301                       		subq.b	#1,d1
0001BE9A 6B00                       		bmi.s	loc_1B268
0001BE9C 4EB9 0000 DFC6             		jsr	sub_D762
0001BEA2                            
0001BEA2                            loc_1B268:
0001BEA2 584C                       		addq.w	#4,a4
0001BEA4 51CE FFA4                  		dbf	d6,loc_1B210
0001BEA8                            
0001BEA8 41E8 0070                  		lea	$70(a0),a0
0001BEAC 51CF FF98                  		dbf	d7,loc_1B20C
0001BEB0                            
0001BEB0 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BEB4 0C05 0050                  		cmpi.b	#$50,d5
0001BEB8 6700                       		beq.s	loc_1B288
0001BEBA 24BC 0000 0000             		move.l	#0,(a2)
0001BEC0 4E75                       		rts	
0001BEC2                            ; ===========================================================================
0001BEC2                            
0001BEC2                            loc_1B288:
0001BEC2 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BEC8 4E75                       		rts	
0001BECA                            ; End of function SS_ShowLayout
0001BECA                            
0001BECA                            ; ---------------------------------------------------------------------------
0001BECA                            ; Subroutine to	animate	walls and rings	in the special stage
0001BECA                            ; ---------------------------------------------------------------------------
0001BECA                            
0001BECA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BECA                            
0001BECA                            
0001BECA                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BECA 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BED0 7000                       		moveq	#0,d0
0001BED2 1038 F780                  		move.b	($FFFFF780).w,d0
0001BED6 E408                       		lsr.b	#2,d0
0001BED8 0240 000F                  		andi.w	#$F,d0
0001BEDC 7223                       		moveq	#$23,d1
0001BEDE                            
0001BEDE                            loc_1B2A4:
0001BEDE 3280                       		move.w	d0,(a1)
0001BEE0 5049                       		addq.w	#8,a1
0001BEE2 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BEE6                            
0001BEE6 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BEEC 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BEF0 6A00                       		bpl.s	loc_1B2C8
0001BEF2 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BEF8 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BEFC 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BF02                            
0001BF02                            loc_1B2C8:
0001BF02 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BF08 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BF0C 6A00                       		bpl.s	loc_1B2E4
0001BF0E 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BF14 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BF18 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BF1E                            
0001BF1E                            loc_1B2E4:
0001BF1E 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BF22 1340 0138                  		move.b	d0,$138(a1)
0001BF26 1340 0160                  		move.b	d0,$160(a1)
0001BF2A 1340 0148                  		move.b	d0,$148(a1)
0001BF2E 1340 0150                  		move.b	d0,$150(a1)
0001BF32 1340 01D8                  		move.b	d0,$1D8(a1)
0001BF36 1340 01E0                  		move.b	d0,$1E0(a1)
0001BF3A 1340 01E8                  		move.b	d0,$1E8(a1)
0001BF3E 1340 01F0                  		move.b	d0,$1F0(a1)
0001BF42 1340 01F8                  		move.b	d0,$1F8(a1)
0001BF46 1340 0200                  		move.b	d0,$200(a1)
0001BF4A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BF4E 6A00                       		bpl.s	loc_1B326
0001BF50 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BF56 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BF5A 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BF60                            
0001BF60                            loc_1B326:
0001BF60 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BF64 1340 0168                  		move.b	d0,$168(a1)
0001BF68 1340 0170                  		move.b	d0,$170(a1)
0001BF6C 1340 0178                  		move.b	d0,$178(a1)
0001BF70 1340 0180                  		move.b	d0,$180(a1)
0001BF74 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BF78 6A00                       		bpl.s	loc_1B350
0001BF7A 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BF80 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BF84 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BF8A                            
0001BF8A                            loc_1B350:
0001BF8A 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BF90 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BF96 7000                       		moveq	#0,d0
0001BF98 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BF9C D040                       		add.w	d0,d0
0001BF9E 41F0 0000                  		lea	(a0,d0.w),a0
0001BFA2 3290                       		move.w	(a0),(a1)
0001BFA4 3368 0002 0008             		move.w	2(a0),8(a1)
0001BFAA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BFB0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BFB6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BFBC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BFC2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BFC8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BFCE D0FC 0020                  		adda.w	#$20,a0
0001BFD2 D2FC 0048                  		adda.w	#$48,a1
0001BFD6 3290                       		move.w	(a0),(a1)
0001BFD8 3368 0002 0008             		move.w	2(a0),8(a1)
0001BFDE 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BFE4 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BFEA 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BFF0 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BFF6 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BFFC 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C002 D0FC 0020                  		adda.w	#$20,a0
0001C006 D2FC 0048                  		adda.w	#$48,a1
0001C00A 3290                       		move.w	(a0),(a1)
0001C00C 3368 0002 0008             		move.w	2(a0),8(a1)
0001C012 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C018 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C01E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C024 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C02A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C030 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C036 D0FC 0020                  		adda.w	#$20,a0
0001C03A D2FC 0048                  		adda.w	#$48,a1
0001C03E 3290                       		move.w	(a0),(a1)
0001C040 3368 0002 0008             		move.w	2(a0),8(a1)
0001C046 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C04C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C052 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C058 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C05E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C064 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C06A D0FC 0020                  		adda.w	#$20,a0
0001C06E D2FC 0048                  		adda.w	#$48,a1
0001C072 4E75                       		rts	
0001C074                            ; End of function SS_AniWallsRings
0001C074                            
0001C074                            ; ===========================================================================
0001C074 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C084 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C094 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C0A4 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C0B4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C0C4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C0D4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C0E4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C0F4                            ; ---------------------------------------------------------------------------
0001C0F4                            ; Subroutine to	remove items when you collect them in the special stage
0001C0F4                            ; ---------------------------------------------------------------------------
0001C0F4                            
0001C0F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0F4                            
0001C0F4                            
0001C0F4                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001C0F4 45F9 00FF 4400             		lea	($FF4400).l,a2
0001C0FA 303C 001F                  		move.w	#$1F,d0
0001C0FE                            
0001C0FE                            loc_1B4C4:
0001C0FE 4A12                       		tst.b	(a2)
0001C100 6700                       		beq.s	locret_1B4CE
0001C102 504A                       		addq.w	#8,a2
0001C104 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001C108                            
0001C108                            locret_1B4CE:
0001C108 4E75                       		rts	
0001C10A                            ; End of function SS_RemoveCollectedItem
0001C10A                            
0001C10A                            ; ---------------------------------------------------------------------------
0001C10A                            ; Subroutine to	animate	special	stage items when you touch them
0001C10A                            ; ---------------------------------------------------------------------------
0001C10A                            
0001C10A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C10A                            
0001C10A                            
0001C10A                            SS_AniItems:				; XREF: SS_ShowLayout
0001C10A 41F9 00FF 4400             		lea	($FF4400).l,a0
0001C110 3E3C 001F                  		move.w	#$1F,d7
0001C114                            
0001C114                            loc_1B4DA:
0001C114 7000                       		moveq	#0,d0
0001C116 1010                       		move.b	(a0),d0
0001C118 6700                       		beq.s	loc_1B4E8
0001C11A E548                       		lsl.w	#2,d0
0001C11C 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001C120 4E91                       		jsr	(a1)
0001C122                            
0001C122                            loc_1B4E8:
0001C122 5048                       		addq.w	#8,a0
0001C124                            
0001C124                            loc_1B4EA:
0001C124 51CF FFEE                  		dbf	d7,loc_1B4DA
0001C128                            
0001C128 4E75                       		rts	
0001C12A                            ; End of function SS_AniItems
0001C12A                            
0001C12A                            ; ===========================================================================
0001C12A 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001C12E 0000 0000                  		dc.l SS_AniBumper
0001C132 0000 0000                  		dc.l SS_Ani1Up
0001C136 0000 0000                  		dc.l SS_AniReverse
0001C13A 0000 0000                  		dc.l SS_AniEmeraldSparks
0001C13E 0000 0000                  		dc.l SS_AniGlassBlock
0001C142                            ; ===========================================================================
0001C142                            
0001C142                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001C142 5328 0002                  		subq.b	#1,2(a0)
0001C146 6A00                       		bpl.s	locret_1B530
0001C148 117C 0005 0002             		move.b	#5,2(a0)
0001C14E 7000                       		moveq	#0,d0
0001C150 1028 0003                  		move.b	3(a0),d0
0001C154 5228 0003                  		addq.b	#1,3(a0)
0001C158 2268 0004                  		movea.l	4(a0),a1
0001C15C 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001C160 1280                       		move.b	d0,(a1)
0001C162 6600                       		bne.s	locret_1B530
0001C164 4290                       		clr.l	(a0)
0001C166 42A8 0004                  		clr.l	4(a0)
0001C16A                            
0001C16A                            locret_1B530:
0001C16A 4E75                       		rts	
0001C16C                            ; ===========================================================================
0001C16C 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001C172                            ; ===========================================================================
0001C172                            
0001C172                            SS_AniBumper:				; XREF: SS_AniIndex
0001C172 5328 0002                  		subq.b	#1,2(a0)
0001C176 6A00                       		bpl.s	locret_1B566
0001C178 117C 0007 0002             		move.b	#7,2(a0)
0001C17E 7000                       		moveq	#0,d0
0001C180 1028 0003                  		move.b	3(a0),d0
0001C184 5228 0003                  		addq.b	#1,3(a0)
0001C188 2268 0004                  		movea.l	4(a0),a1
0001C18C 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001C190 6600                       		bne.s	loc_1B564
0001C192 4290                       		clr.l	(a0)
0001C194 42A8 0004                  		clr.l	4(a0)
0001C198 12BC 0025                  		move.b	#$25,(a1)
0001C19C 4E75                       		rts	
0001C19E                            ; ===========================================================================
0001C19E                            
0001C19E                            loc_1B564:
0001C19E 1280                       		move.b	d0,(a1)
0001C1A0                            
0001C1A0                            locret_1B566:
0001C1A0 4E75                       		rts	
0001C1A2                            ; ===========================================================================
0001C1A2 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001C1A8                            ; ===========================================================================
0001C1A8                            
0001C1A8                            SS_Ani1Up:				; XREF: SS_AniIndex
0001C1A8 5328 0002                  		subq.b	#1,2(a0)
0001C1AC 6A00                       		bpl.s	locret_1B596
0001C1AE 117C 0005 0002             		move.b	#5,2(a0)
0001C1B4 7000                       		moveq	#0,d0
0001C1B6 1028 0003                  		move.b	3(a0),d0
0001C1BA 5228 0003                  		addq.b	#1,3(a0)
0001C1BE 2268 0004                  		movea.l	4(a0),a1
0001C1C2 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001C1C6 1280                       		move.b	d0,(a1)
0001C1C8 6600                       		bne.s	locret_1B596
0001C1CA 4290                       		clr.l	(a0)
0001C1CC 42A8 0004                  		clr.l	4(a0)
0001C1D0                            
0001C1D0                            locret_1B596:
0001C1D0 4E75                       		rts	
0001C1D2                            ; ===========================================================================
0001C1D2 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001C1D8                            ; ===========================================================================
0001C1D8                            
0001C1D8                            SS_AniReverse:				; XREF: SS_AniIndex
0001C1D8 5328 0002                  		subq.b	#1,2(a0)
0001C1DC 6A00                       		bpl.s	locret_1B5CC
0001C1DE 117C 0007 0002             		move.b	#7,2(a0)
0001C1E4 7000                       		moveq	#0,d0
0001C1E6 1028 0003                  		move.b	3(a0),d0
0001C1EA 5228 0003                  		addq.b	#1,3(a0)
0001C1EE 2268 0004                  		movea.l	4(a0),a1
0001C1F2 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001C1F6 6600                       		bne.s	loc_1B5CA
0001C1F8 4290                       		clr.l	(a0)
0001C1FA 42A8 0004                  		clr.l	4(a0)
0001C1FE 12BC 002B                  		move.b	#$2B,(a1)
0001C202 4E75                       		rts	
0001C204                            ; ===========================================================================
0001C204                            
0001C204                            loc_1B5CA:
0001C204 1280                       		move.b	d0,(a1)
0001C206                            
0001C206                            locret_1B5CC:
0001C206 4E75                       		rts	
0001C208                            ; ===========================================================================
0001C208 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001C20E                            ; ===========================================================================
0001C20E                            
0001C20E                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001C20E 5328 0002                  		subq.b	#1,2(a0)
0001C212 6A00                       		bpl.s	locret_1B60C
0001C214 117C 0005 0002             		move.b	#5,2(a0)
0001C21A 7000                       		moveq	#0,d0
0001C21C 1028 0003                  		move.b	3(a0),d0
0001C220 5228 0003                  		addq.b	#1,3(a0)
0001C224 2268 0004                  		movea.l	4(a0),a1
0001C228 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001C22C 1280                       		move.b	d0,(a1)
0001C22E 6600                       		bne.s	locret_1B60C
0001C230 4290                       		clr.l	(a0)
0001C232 42A8 0004                  		clr.l	4(a0)
0001C236 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001C23C 303C 00A8                  		move.w	#$A8,d0
0001C240 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001C246                            
0001C246                            locret_1B60C:
0001C246 4E75                       		rts	
0001C248                            ; ===========================================================================
0001C248 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001C24E                            ; ===========================================================================
0001C24E                            
0001C24E                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001C24E 5328 0002                  		subq.b	#1,2(a0)
0001C252 6A00                       		bpl.s	locret_1B640
0001C254 117C 0001 0002             		move.b	#1,2(a0)
0001C25A 7000                       		moveq	#0,d0
0001C25C 1028 0003                  		move.b	3(a0),d0
0001C260 5228 0003                  		addq.b	#1,3(a0)
0001C264 2268 0004                  		movea.l	4(a0),a1
0001C268 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001C26C 1280                       		move.b	d0,(a1)
0001C26E 6600                       		bne.s	locret_1B640
0001C270 12A8 0004                  		move.b	4(a0),(a1)
0001C274 4290                       		clr.l	(a0)
0001C276 42A8 0004                  		clr.l	4(a0)
0001C27A                            
0001C27A                            locret_1B640:
0001C27A 4E75                       		rts	
0001C27C                            ; ===========================================================================
0001C27C 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001C286                            ; ---------------------------------------------------------------------------
0001C286                            ; Special stage	layout pointers
0001C286                            ; ---------------------------------------------------------------------------
0001C286                            SS_LayoutIndex:
0001C286                            	include "_inc\Special stage layout pointers.asm"
0001C286                            ; ---------------------------------------------------------------------------
0001C286                            ; Special stage	layout pointers
0001C286                            ; ---------------------------------------------------------------------------
0001C286 0000 0000                  	dc.l SS_1
0001C28A 0000 0000                  	dc.l SS_2
0001C28E 0000 0000                  	dc.l SS_3
0001C292 0000 0000                  	dc.l SS_4
0001C296 0000 0000                  	dc.l SS_5
0001C29A 0000 0000                  	dc.l SS_6
0001C29E                            	even
0001C29E                            	even
0001C29E                            
0001C29E                            ; ---------------------------------------------------------------------------
0001C29E                            ; Special stage	start locations
0001C29E                            ; ---------------------------------------------------------------------------
0001C29E                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001C2B6                            		even
0001C2B6                            
0001C2B6                            ; ---------------------------------------------------------------------------
0001C2B6                            ; Subroutine to	load special stage layout
0001C2B6                            ; ---------------------------------------------------------------------------
0001C2B6                            
0001C2B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2B6                            
0001C2B6                            
0001C2B6                            SS_Load:				; XREF: SpecialStage
0001C2B6 7000                       		moveq	#0,d0
0001C2B8 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001C2BC 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001C2C0 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001C2C6 6500                       		bcs.s	SS_ChkEmldNum
0001C2C8 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001C2CE                            
0001C2CE                            SS_ChkEmldNum:
0001C2CE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001C2D4 6700                       		beq.s	SS_LoadData	; if yes, branch
0001C2D6 7200                       		moveq	#0,d1
0001C2D8 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001C2DC 5301                       		subq.b	#1,d1
0001C2DE 6500                       		bcs.s	SS_LoadData
0001C2E0 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001C2E4                            
0001C2E4                            SS_ChkEmldLoop:	
0001C2E4 B033 1000                  		cmp.b	(a3,d1.w),d0
0001C2E8 6600                       		bne.s	SS_ChkEmldRepeat
0001C2EA 60CA                       		bra.s	SS_Load
0001C2EC                            ; ===========================================================================
0001C2EC                            
0001C2EC                            SS_ChkEmldRepeat:
0001C2EC 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001C2F0                            
0001C2F0                            SS_LoadData:
0001C2F0 E548                       		lsl.w	#2,d0
0001C2F2 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001C2F6 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001C2FA 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001C2FE 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001C302 43F9 00FF 4000             		lea	($FF4000).l,a1
0001C308 303C 0000                  		move.w	#0,d0
0001C30C 4EB9 0000 1720             		jsr	(EniDec).l
0001C312 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C318 303C 0FFF                  		move.w	#$FFF,d0
0001C31C                            
0001C31C                            SS_ClrRAM3:
0001C31C 4299                       		clr.l	(a1)+
0001C31E 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C322                            
0001C322 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C328 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C32E 723F                       		moveq	#$3F,d1
0001C330                            
0001C330                            loc_1B6F6:
0001C330 743F                       		moveq	#$3F,d2
0001C332                            
0001C332                            loc_1B6F8:
0001C332 12D8                       		move.b	(a0)+,(a1)+
0001C334 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C338                            
0001C338 43E9 0040                  		lea	$40(a1),a1
0001C33C 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C340                            
0001C340 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C346 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C34C 724D                       		moveq	#$4D,d1
0001C34E                            
0001C34E                            loc_1B714:
0001C34E 22D8                       		move.l	(a0)+,(a1)+
0001C350 32FC 0000                  		move.w	#0,(a1)+
0001C354 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C35A 32D8                       		move.w	(a0)+,(a1)+
0001C35C 51C9 FFF0                  		dbf	d1,loc_1B714
0001C360                            
0001C360 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C366 323C 003F                  		move.w	#$3F,d1
0001C36A                            
0001C36A                            loc_1B730:
0001C36A                            
0001C36A 4299                       		clr.l	(a1)+
0001C36C 51C9 FFFC                  		dbf	d1,loc_1B730
0001C370                            
0001C370 4E75                       		rts	
0001C372                            ; End of function SS_Load
0001C372                            
0001C372                            ; ===========================================================================
0001C372                            ; ---------------------------------------------------------------------------
0001C372                            ; Special stage	mappings and VRAM pointers
0001C372                            ; ---------------------------------------------------------------------------
0001C372                            SS_MapIndex:
0001C372                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C372                            ; ---------------------------------------------------------------------------
0001C372                            ; Special stage	mappings and VRAM pointers
0001C372                            ; ---------------------------------------------------------------------------
0001C372 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C376 0142                       	dc.w $142		; VRAM setting
0001C378 0000 0000                  	dc.l Map_SSWalls
0001C37C 0142                       	dc.w $142
0001C37E 0000 0000                  	dc.l Map_SSWalls
0001C382 0142                       	dc.w $142
0001C384 0000 0000                  	dc.l Map_SSWalls
0001C388 0142                       	dc.w $142
0001C38A 0000 0000                  	dc.l Map_SSWalls
0001C38E 0142                       	dc.w $142
0001C390 0000 0000                  	dc.l Map_SSWalls
0001C394 0142                       	dc.w $142
0001C396 0000 0000                  	dc.l Map_SSWalls
0001C39A 0142                       	dc.w $142
0001C39C 0000 0000                  	dc.l Map_SSWalls
0001C3A0 0142                       	dc.w $142
0001C3A2 0000 0000                  	dc.l Map_SSWalls
0001C3A6 0142                       	dc.w $142
0001C3A8 0000 0000                  	dc.l Map_SSWalls
0001C3AC 2142                       	dc.w $2142
0001C3AE 0000 0000                  	dc.l Map_SSWalls
0001C3B2 2142                       	dc.w $2142
0001C3B4 0000 0000                  	dc.l Map_SSWalls
0001C3B8 2142                       	dc.w $2142
0001C3BA 0000 0000                  	dc.l Map_SSWalls
0001C3BE 2142                       	dc.w $2142
0001C3C0 0000 0000                  	dc.l Map_SSWalls
0001C3C4 2142                       	dc.w $2142
0001C3C6 0000 0000                  	dc.l Map_SSWalls
0001C3CA 2142                       	dc.w $2142
0001C3CC 0000 0000                  	dc.l Map_SSWalls
0001C3D0 2142                       	dc.w $2142
0001C3D2 0000 0000                  	dc.l Map_SSWalls
0001C3D6 2142                       	dc.w $2142
0001C3D8 0000 0000                  	dc.l Map_SSWalls
0001C3DC 2142                       	dc.w $2142
0001C3DE 0000 0000                  	dc.l Map_SSWalls
0001C3E2 4142                       	dc.w $4142
0001C3E4 0000 0000                  	dc.l Map_SSWalls
0001C3E8 4142                       	dc.w $4142
0001C3EA 0000 0000                  	dc.l Map_SSWalls
0001C3EE 4142                       	dc.w $4142
0001C3F0 0000 0000                  	dc.l Map_SSWalls
0001C3F4 4142                       	dc.w $4142
0001C3F6 0000 0000                  	dc.l Map_SSWalls
0001C3FA 4142                       	dc.w $4142
0001C3FC 0000 0000                  	dc.l Map_SSWalls
0001C400 4142                       	dc.w $4142
0001C402 0000 0000                  	dc.l Map_SSWalls
0001C406 4142                       	dc.w $4142
0001C408 0000 0000                  	dc.l Map_SSWalls
0001C40C 4142                       	dc.w $4142
0001C40E 0000 0000                  	dc.l Map_SSWalls
0001C412 4142                       	dc.w $4142
0001C414 0000 0000                  	dc.l Map_SSWalls
0001C418 6142                       	dc.w $6142
0001C41A 0000 0000                  	dc.l Map_SSWalls
0001C41E 6142                       	dc.w $6142
0001C420 0000 0000                  	dc.l Map_SSWalls
0001C424 6142                       	dc.w $6142
0001C426 0000 0000                  	dc.l Map_SSWalls
0001C42A 6142                       	dc.w $6142
0001C42C 0000 0000                  	dc.l Map_SSWalls
0001C430 6142                       	dc.w $6142
0001C432 0000 0000                  	dc.l Map_SSWalls
0001C436 6142                       	dc.w $6142
0001C438 0000 0000                  	dc.l Map_SSWalls
0001C43C 6142                       	dc.w $6142
0001C43E 0000 0000                  	dc.l Map_SSWalls
0001C442 6142                       	dc.w $6142
0001C444 0000 0000                  	dc.l Map_SSWalls
0001C448 6142                       	dc.w $6142
0001C44A 0000 F35C                  	dc.l Map_obj47
0001C44E 023B                       	dc.w $23B
0001C450 0000 0000                  	dc.l Map_SS_R
0001C454 0570                       	dc.w $570
0001C456 0000 0000                  	dc.l Map_SS_R
0001C45A 0251                       	dc.w $251
0001C45C 0000 0000                  	dc.l Map_SS_R
0001C460 0370                       	dc.w $370
0001C462 0000 0000                  	dc.l Map_SS_Up
0001C466 0263                       	dc.w $263
0001C468 0000 0000                  	dc.l Map_SS_Down
0001C46C 0263                       	dc.w $263
0001C46E 0000 0000                  	dc.l Map_SS_R
0001C472 22F0                       	dc.w $22F0
0001C474 0000 0000                  	dc.l Map_SS_Glass
0001C478 0470                       	dc.w $470
0001C47A 0000 0000                  	dc.l Map_SS_Glass
0001C47E 05F0                       	dc.w $5F0
0001C480 0000 0000                  	dc.l Map_SS_Glass
0001C484 65F0                       	dc.w $65F0
0001C486 0000 0000                  	dc.l Map_SS_Glass
0001C48A 25F0                       	dc.w $25F0
0001C48C 0000 0000                  	dc.l Map_SS_Glass
0001C490 45F0                       	dc.w $45F0
0001C492 0000 0000                  	dc.l Map_SS_R
0001C496 02F0                       	dc.w $2F0
0001C498 0100 F35C                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C49C 023B                       	dc.w $23B
0001C49E 0200 F35C                  	dc.l Map_obj47+$2000000
0001C4A2 023B                       	dc.w $23B
0001C4A4 0000 0000                  	dc.l Map_SS_R
0001C4A8 0797                       	dc.w $797
0001C4AA 0000 0000                  	dc.l Map_SS_R
0001C4AE 07A0                       	dc.w $7A0
0001C4B0 0000 0000                  	dc.l Map_SS_R
0001C4B4 07A9                       	dc.w $7A9
0001C4B6 0000 0000                  	dc.l Map_SS_R
0001C4BA 0797                       	dc.w $797
0001C4BC 0000 0000                  	dc.l Map_SS_R
0001C4C0 07A0                       	dc.w $7A0
0001C4C2 0000 0000                  	dc.l Map_SS_R
0001C4C6 07A9                       	dc.w $7A9
0001C4C8 0000 A654                  	dc.l Map_obj25
0001C4CC 27B2                       	dc.w $27B2
0001C4CE 0000 0000                  	dc.l Map_SS_Chaos3
0001C4D2 0770                       	dc.w $770
0001C4D4 0000 0000                  	dc.l Map_SS_Chaos3
0001C4D8 2770                       	dc.w $2770
0001C4DA 0000 0000                  	dc.l Map_SS_Chaos3
0001C4DE 4770                       	dc.w $4770
0001C4E0 0000 0000                  	dc.l Map_SS_Chaos3
0001C4E4 6770                       	dc.w $6770
0001C4E6 0000 0000                  	dc.l Map_SS_Chaos1
0001C4EA 0770                       	dc.w $770
0001C4EC 0000 0000                  	dc.l Map_SS_Chaos2
0001C4F0 0770                       	dc.w $770
0001C4F2 0000 0000                  	dc.l Map_SS_R
0001C4F6 04F0                       	dc.w $4F0
0001C4F8 0400 A654                  	dc.l Map_obj25+$4000000
0001C4FC 27B2                       	dc.w $27B2
0001C4FE 0500 A654                  	dc.l Map_obj25+$5000000
0001C502 27B2                       	dc.w $27B2
0001C504 0600 A654                  	dc.l Map_obj25+$6000000
0001C508 27B2                       	dc.w $27B2
0001C50A 0700 A654                  	dc.l Map_obj25+$7000000
0001C50E 27B2                       	dc.w $27B2
0001C510 0000 0000                  	dc.l Map_SS_Glass
0001C514 23F0                       	dc.w $23F0
0001C516 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C51A 23F0                       	dc.w $23F0
0001C51C 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C520 23F0                       	dc.w $23F0
0001C522 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C526 23F0                       	dc.w $23F0
0001C528 0000 0000                  	dc.l Map_SS_R+$2000000
0001C52C 04F0                       	dc.w $4F0
0001C52E 0000 0000                  	dc.l Map_SS_Glass
0001C532 05F0                       	dc.w $5F0
0001C534 0000 0000                  	dc.l Map_SS_Glass
0001C538 65F0                       	dc.w $65F0
0001C53A 0000 0000                  	dc.l Map_SS_Glass
0001C53E 25F0                       	dc.w $25F0
0001C540 0000 0000                  	dc.l Map_SS_Glass
0001C544 45F0                       	dc.w $45F0
0001C544 45F0                       	dc.w $45F0
0001C546                            
0001C546                            ; ---------------------------------------------------------------------------
0001C546                            ; Sprite mappings - special stage "R" block
0001C546                            ; ---------------------------------------------------------------------------
0001C546                            Map_SS_R:
0001C546                            	include "_maps\SSRblock.asm"
0001C546                            ; ---------------------------------------------------------------------------
0001C546                            ; Sprite mappings - special stage "R" block
0001C546                            ; ---------------------------------------------------------------------------
0001C546 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C54A 0000                       		dc.w byte_1B91E-Map_SS_R
0001C54C 01                         byte_1B912:	dc.b 1
0001C54D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C552 01                         byte_1B918:	dc.b 1
0001C553 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C558 00                         byte_1B91E:	dc.b 0
0001C55A 00                         		even
0001C55A 00                         		even
0001C55A                            
0001C55A                            ; ---------------------------------------------------------------------------
0001C55A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C55A                            ; ---------------------------------------------------------------------------
0001C55A                            Map_SS_Glass:
0001C55A                            	include "_maps\SSglassblock.asm"
0001C55A                            ; ---------------------------------------------------------------------------
0001C55A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C55A                            ; ---------------------------------------------------------------------------
0001C55A 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C55E 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C562 01                         byte_1B928:	dc.b 1
0001C563 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C568 01                         byte_1B92E:	dc.b 1
0001C569 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C56E 01                         byte_1B934:	dc.b 1
0001C56F F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C574 01                         byte_1B93A:	dc.b 1
0001C575 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C57A                            		even
0001C57A                            		even
0001C57A                            
0001C57A                            ; ---------------------------------------------------------------------------
0001C57A                            ; Sprite mappings - special stage "UP" block
0001C57A                            ; ---------------------------------------------------------------------------
0001C57A                            Map_SS_Up:
0001C57A                            	include "_maps\SSUPblock.asm"
0001C57A                            ; ---------------------------------------------------------------------------
0001C57A                            ; Sprite mappings - special stage "UP" block
0001C57A                            ; ---------------------------------------------------------------------------
0001C57A 0000                       		dc.w byte_1B944-Map_SS_Up
0001C57C 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C57E 01                         byte_1B944:	dc.b 1
0001C57F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C584 01                         byte_1B94A:	dc.b 1
0001C585 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C58A                            		even
0001C58A                            		even
0001C58A                            
0001C58A                            ; ---------------------------------------------------------------------------
0001C58A                            ; Sprite mappings - special stage "DOWN" block
0001C58A                            ; ---------------------------------------------------------------------------
0001C58A                            Map_SS_Down:
0001C58A                            	include "_maps\SSDOWNblock.asm"
0001C58A                            ; ---------------------------------------------------------------------------
0001C58A                            ; Sprite mappings - special stage "DOWN" block
0001C58A                            ; ---------------------------------------------------------------------------
0001C58A 0000                       		dc.w byte_1B954-Map_SS_Down
0001C58C 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C58E 01                         byte_1B954:	dc.b 1
0001C58F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C594 01                         byte_1B95A:	dc.b 1
0001C595 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C59A                            		even
0001C59A                            		even
0001C59A                            
0001C59A                            ; ---------------------------------------------------------------------------
0001C59A                            ; Sprite mappings - special stage chaos	emeralds
0001C59A                            ; ---------------------------------------------------------------------------
0001C59A 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C59C 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C59E 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C5A0 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C5A2 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C5A4 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C5A6 01                         byte_1B96C:	dc.b 1
0001C5A7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C5AC 01                         byte_1B972:	dc.b 1
0001C5AD F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C5B2 01                         byte_1B978:	dc.b 1
0001C5B3 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C5B8 01                         byte_1B97E:	dc.b 1
0001C5B9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C5BE                            		even
0001C5BE                            ; ===========================================================================
0001C5BE                            ; ---------------------------------------------------------------------------
0001C5BE                            ; Object 09 - Sonic (special stage)
0001C5BE                            ; ---------------------------------------------------------------------------
0001C5BE                            
0001C5BE                            Obj09:					; XREF: Obj_Index
0001C5BE                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C5BE                            ;		beq.s	Obj09_Normal	; if not, branch
0001C5BE 6100 0000                  		bsr.w	SS_FixCamera
0001C5C2                            ;		bra.w	DebugMode
0001C5C2                            ; ===========================================================================
0001C5C2                            
0001C5C2                            Obj09_Normal:
0001C5C2 7000                       		moveq	#0,d0
0001C5C4 1028 0024                  		move.b	$24(a0),d0
0001C5C8 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C5CC 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C5D0                            ; ===========================================================================
0001C5D0 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C5D2 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C5D4 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C5D6 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C5D8                            ; ===========================================================================
0001C5D8                            
0001C5D8                            Obj09_Main:				; XREF: Obj09_Index
0001C5D8 5428 0024                  		addq.b	#2,$24(a0)
0001C5DC 117C 000E 0016             		move.b	#$E,$16(a0)
0001C5E2 117C 0007 0017             		move.b	#7,$17(a0)
0001C5E8 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C5F0 317C 0780 0002             		move.w	#$780,2(a0)
0001C5F6 117C 0004 0001             		move.b	#4,1(a0)
0001C5FC 117C 0000 0018             		move.b	#0,$18(a0)
0001C602 117C 0002 001C             		move.b	#2,$1C(a0)
0001C608 08E8 0002 0022             		bset	#2,$22(a0)
0001C60E 08E8 0001 0022             		bset	#1,$22(a0)
0001C614                            
0001C614                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C614                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C614                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C614                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001C614                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C614                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C614                            
0001C614                            Obj09_NoDebug:
0001C614 117C 0000 0030             		move.b	#0,$30(a0)
0001C61A 7000                       		moveq	#0,d0
0001C61C 1028 0022                  		move.b	$22(a0),d0
0001C620 0240 0002                  		andi.w	#2,d0
0001C624 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C628 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C62C 4EB9 0001 4578             		jsr	LoadSonicDynPLC
0001C632 4EF9 0000 DE68             		jmp	DisplaySprite
0001C638                            ; ===========================================================================
0001C638 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C63A 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C63C                            ; ===========================================================================
0001C63C                            
0001C63C                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C63C 6100 0000                  		bsr.w	Obj09_Rise
0001C640 6100 0000                  		bsr.w	Obj09_Move
0001C644 6100 0000                  		bsr.w	Obj09_Fall
0001C648 6000                       		bra.s	Obj09_Display
0001C64A                            ; ===========================================================================
0001C64A                            
0001C64A                            Obj09_InAir:				; XREF: Obj09_Modes
0001C64A 6100 0000                  		bsr.w	Obj09_Rise
0001C64E 6100 0000                  		bsr.w	Obj09_Move
0001C652 6100 0000                  		bsr.w	Obj09_Fall
0001C656                            
0001C656                            Obj09_Display:				; XREF: Obj09_OnWall
0001C656 6100 0000                  		bsr.w	Obj09_ChkItems
0001C65A 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C65E 4EB9 0000 DE42             		jsr	SpeedToPos
0001C664 6100 0000                  		bsr.w	SS_FixCamera
0001C668 3038 F780                  		move.w	($FFFFF780).w,d0
0001C66C D078 F782                  		add.w	($FFFFF782).w,d0
0001C670 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C674 4EB9 0001 42D2             		jsr	Sonic_Animate
0001C67A 4E75                       		rts	
0001C67C                            
0001C67C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C67C                            
0001C67C                            
0001C67C                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C67C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C682 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C684 4A78 F784                          tst.w   ($FFFFF784).w
0001C688 6600                               bne.s   @corereverse1
0001C68A 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C68E 6000                               bra.s   Obj09_ChkRight          
0001C690                            
0001C690                            @corereverse1:
0001C690 6100 0000                          bsr.w	Obj09_MoveRight
0001C694                            
0001C694                            Obj09_ChkRight:
0001C694 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C69A 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001C69C 4A78 F784                          tst.w   ($FFFFF784).w
0001C6A0 6600                               bne.s   @corereverse2
0001C6A2 6100 0000                  		bsr.w	Obj09_MoveRight
0001C6A6 6000                               bra.s   Obj09_MoveSpeed 
0001C6A8                            
0001C6A8                            @corereverse2:
0001C6A8 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001C6AC                            
0001C6AC                            Obj09_MoveSpeed:
0001C6AC 1038 F602                  		move.b	($FFFFF602).w,d0
0001C6B0 0200 000C                  		andi.b	#$C,d0
0001C6B4 6600                       		bne.s	Obj09_MoveCollision
0001C6B6 3028 0010                  		move.w	$10(a0),d0
0001C6BA 6700                       		beq.s	Obj09_MoveCollision
0001C6BC 317C 0000 0010             		move.w	#0,$10(a0)
0001C6C2                            
0001C6C2                            Obj09_MoveCollision:
0001C6C2 1038 F780                  		move.b	($FFFFF780).w,d0
0001C6C6 0600 0020                  		addi.b	#$20,d0
0001C6CA 0200 00C0                  		andi.b	#$C0,d0
0001C6CE 4400                       		neg.b	d0
0001C6D0 4EB9 0000 2B40             		jsr	(CalcSine).l
0001C6D6 C3E8 0010                  		muls.w	$10(a0),d1
0001C6DA D3A8 0008                  		add.l	d1,8(a0)
0001C6DE C1E8 0012                  		muls.w	$12(a0),d0
0001C6E2 D1A8 000C                  		add.l	d0,$C(a0)
0001C6E6 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C6EA 2428 000C                  		move.l	$C(a0),d2
0001C6EE 2628 0008                  		move.l	8(a0),d3
0001C6F2 6100 0000                  		bsr.w	sub_1BCE8
0001C6F6 6700                       		beq.s	loc_1BAF2
0001C6F8 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C6FC 93A8 0008                  		sub.l	d1,8(a0)
0001C700 91A8 000C                  		sub.l	d0,$C(a0)
0001C704 317C 0000 0010             		move.w	#0,$10(a0)
0001C70A 4E75                       		rts	
0001C70C                            ; ===========================================================================
0001C70C                            
0001C70C                            loc_1BAF2:
0001C70C 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C710 4E75                       		rts	
0001C712                            ; End of function Obj09_Move
0001C712                            
0001C712                            
0001C712                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C712                            
0001C712                            
0001C712                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C712 08E8 0000 0022             		bset	#0,$22(a0)
0001C718 4240                               clr.w   d0
0001C71A 3038 F786                          move.w  ($FFFFF786).w,d0
0001C71E D040                               add.w   d0,d0
0001C720 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C726 4468 0010                          neg.w   $10(a0)
0001C72A 4E75                               rts
0001C72C                            
0001C72C                            ; End of function Obj09_MoveLeft
0001C72C                            
0001C72C                            
0001C72C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C72C                            
0001C72C                            
0001C72C                            Obj09_MoveRight:
0001C72C 08A8 0000 0022             		bclr	#0,$22(a0)
0001C732 4240                               clr.w   d0
0001C734 3038 F786                          move.w  ($FFFFF786).w,d0
0001C738 D040                               add.w   d0,d0
0001C73A 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C740 4E75                       		rts
0001C742                            
0001C742                            ; End of function Obj09_MoveRight
0001C742                            
0001C742                            ; ---------------------------------------------------------------------------
0001C742                            
0001C742                            SS_XSpdIndex:
0001C742 0032                       		dc.w 50
0001C744 0064                       		dc.w 100
0001C746 0096                       		dc.w 150
0001C748 00C8                       		dc.w 200
0001C74A 00FA                       		dc.w 250
0001C74C                            
0001C74C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C74C                            
0001C74C                            
0001C74C                            Obj09_Rise:				; XREF: Obj09_OnWall
0001C74C 0838 0000 F602             		btst	#0,($FFFFF602).w
0001C752 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001C754 4A78 F784                          tst.w   ($FFFFF784).w
0001C758 6600 0000                          bne.w   @corereverse1
0001C75C 6100 0000                  		bsr.w	Obj09_MoveUp
0001C760 6000                               bra.s   Obj09_NoRise
0001C762                            
0001C762                            @corereverse1:
0001C762 6100 0000                  		bsr.w	Obj09_Falling 
0001C766                                    
0001C766                            Obj09_NoRise:
0001C766 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001C76C 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001C76E 4A78 F784                          tst.w   ($FFFFF784).w
0001C772 6600 0000                          bne.w   @corereverse2
0001C776 6100 0000                  		bsr.w	Obj09_Falling			;	
0001C77A 6000                               bra.s   Obj09_MoveYSpeed
0001C77C                            
0001C77C                            @corereverse2:
0001C77C 6100 0000                  		bsr.w	Obj09_MoveUp
0001C780                            		
0001C780                            Obj09_MoveYSpeed:
0001C780 1038 F602                  		move.b	($FFFFF602).w,d0
0001C784 0200 0003                  		andi.b	#3,d0
0001C788 6600                       		bne.s	Obj09_MoveYCollision
0001C78A 3028 0012                  		move.w	$12(a0),d0
0001C78E 6700                       		beq.s	Obj09_MoveYCollision
0001C790 317C 0000 0012             		move.w	#0,$12(a0)
0001C796                            
0001C796                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001C796 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001C79A 0600 0020                  		addi.b	#$20,d0					;	?
0001C79E 0200 00C0                  		andi.b	#$C0,d0					;	
0001C7A2 4400                       		neg.b	d0						;	?
0001C7A4 4EB9 0000 2B40             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001C7AA C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001C7AE D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001C7B2 C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001C7B6 D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001C7BA 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001C7BE 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001C7C2 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001C7C6 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001C7CA 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001C7CE 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001C7D2 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001C7D6 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001C7DA 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001C7E0 4E75                       		rts								;	end routine
0001C7E2                            
0001C7E2                            Obj09_MoveUp:
0001C7E2 4240                               clr.w   d0
0001C7E4 3038 F786                          move.w  ($FFFFF786).w,d0
0001C7E8 D040                               add.w   d0,d0
0001C7EA 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C7F0 4468 0012                          neg.w   $12(a0)
0001C7F4 4E75                               rts
0001C7F6                            
0001C7F6                            Obj09_Falling:
0001C7F6 4240                               clr.w   d0
0001C7F8 3038 F786                          move.w  ($FFFFF786).w,d0
0001C7FC D040                               add.w   d0,d0
0001C7FE 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C804 4E75                       		rts
0001C806                            ; End of function Obj09_Jump
0001C806                            
0001C806                            ; ---------------------------------------------------------------------------
0001C806                            SS_YSpdIndex:
0001C806 0080                       		dc.w $80
0001C808 0100                       		dc.w $100
0001C80A 0180                       		dc.w $180
0001C80C 0200                       		dc.w $200
0001C80E 0280                       		dc.w $280
0001C810                            
0001C810                            
0001C810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C810                            
0001C810                            
0001C810                            nullsub_2:				; XREF: Obj09_InAir
0001C810 4E75                       		rts	
0001C812                            ; End of function nullsub_2
0001C812                            
0001C812                            ; ===========================================================================
0001C812                            ; ---------------------------------------------------------------------------
0001C812                            ; unused subroutine to limit Sonic's upward vertical speed
0001C812                            ; ---------------------------------------------------------------------------
0001C812 323C FC00                  		move.w	#-$400,d1
0001C816 B268 0012                  		cmp.w	$12(a0),d1
0001C81A 6F00                       		ble.s	locret_1BBB4
0001C81C 1038 F602                  		move.b	($FFFFF602).w,d0
0001C820 0200 0070                  		andi.b	#$70,d0
0001C824 6600                       		bne.s	locret_1BBB4
0001C826 3141 0012                  		move.w	d1,$12(a0)
0001C82A                            
0001C82A                            locret_1BBB4:
0001C82A 4E75                       		rts	
0001C82C                            ; ---------------------------------------------------------------------------
0001C82C                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C82C                            ; ---------------------------------------------------------------------------
0001C82C                            
0001C82C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C82C                            
0001C82C                            
0001C82C                            SS_FixCamera:				; XREF: Obj09
0001C82C 3428 000C                  		move.w	$C(a0),d2
0001C830 3628 0008                  		move.w	8(a0),d3
0001C834 3038 F700                  		move.w	($FFFFF700).w,d0
0001C838 0443 00A0                  		subi.w	#$A0,d3
0001C83C 6500                       		bcs.s	loc_1BBCE
0001C83E 9043                       		sub.w	d3,d0
0001C840 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C844                            
0001C844                            loc_1BBCE:
0001C844 3038 F704                  		move.w	($FFFFF704).w,d0
0001C848 0442 0070                  		subi.w	#$70,d2
0001C84C 6500                       		bcs.s	locret_1BBDE
0001C84E 9042                       		sub.w	d2,d0
0001C850 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C854                            
0001C854                            locret_1BBDE:
0001C854 4E75                       		rts	
0001C856                            ; End of function SS_FixCamera
0001C856                            
0001C856                            ; ===========================================================================
0001C856                            
0001C856                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C856 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C85C 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C862 6600                       		bne.s	loc_1BBF4
0001C864 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C86A                            
0001C86A                            loc_1BBF4:
0001C86A 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C870 6D00                       		blt.s	loc_1BC12
0001C872 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C878                            ;		move.w	#$4000,($FFFFF780).w
0001C878 5428 0024                  		addq.b	#2,$24(a0)
0001C87C 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C882                            
0001C882                            loc_1BC12:
0001C882                            ;		move.w	($FFFFF780).w,d0
0001C882                            ;		add.w	($FFFFF782).w,d0
0001C882                            ;		move.w	d0,($FFFFF780).w
0001C882 4EB9 0001 42D2             		jsr	Sonic_Animate
0001C888 4EB9 0001 4578             		jsr	LoadSonicDynPLC
0001C88E 6100 FF9C                  		bsr.w	SS_FixCamera
0001C892 4EF9 0000 DE68             		jmp	DisplaySprite
0001C898                            ; ===========================================================================
0001C898                            
0001C898                            Obj09_Exit2:				; XREF: Obj09_Index
0001C898 5368 0038                  		subq.w	#1,$38(a0)
0001C89C 6600                       		bne.s	loc_1BC40
0001C89E 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C8A4                            
0001C8A4                            loc_1BC40:
0001C8A4 4EB9 0001 42D2             		jsr	Sonic_Animate
0001C8AA 4EB9 0001 4578             		jsr	LoadSonicDynPLC
0001C8B0 6100 FF7A                  		bsr.w	SS_FixCamera
0001C8B4 4EF9 0000 DE68             		jmp	DisplaySprite
0001C8BA                            
0001C8BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8BA                            
0001C8BA                            
0001C8BA                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C8BA 2428 000C                  		move.l	$C(a0),d2
0001C8BE 2628 0008                  		move.l	8(a0),d3
0001C8C2 1038 F780                  		move.b	($FFFFF780).w,d0
0001C8C6 0200 00FC                  		andi.b	#$FC,d0
0001C8CA 4EB9 0000 2B40             		jsr	(CalcSine).l
0001C8D0 3828 0010                  		move.w	$10(a0),d4
0001C8D4 48C4                       		ext.l	d4
0001C8D6 E184                       		asl.l	#8,d4
0001C8D8 C1FC 002A                  		muls.w	#$2A,d0
0001C8DC D084                       		add.l	d4,d0
0001C8DE 3828 0012                  		move.w	$12(a0),d4
0001C8E2 48C4                       		ext.l	d4
0001C8E4 E184                       		asl.l	#8,d4
0001C8E6 C3FC 002A                  		muls.w	#$2A,d1
0001C8EA D284                       		add.l	d4,d1
0001C8EC 7A00                       		moveq	#0,d5
0001C8EE 3A28 0010                  		move.w	$10(a0),d5
0001C8F2 6700                       		beq.s	Obj09_NoXFall
0001C8F4 D680                       		add.l	d0,d3
0001C8F6 6100 0000                  		bsr.w	sub_1BCE8
0001C8FA 6700                       		beq.s	loc_1BCB0
0001C8FC 9680                       		sub.l	d0,d3
0001C8FE 7000                       		moveq	#0,d0
0001C900 3140 0010                  		move.w	d0,$10(a0)
0001C904 08A8 0001 0022             		bclr	#1,$22(a0)
0001C90A                            
0001C90A                            Obj09_NoXFall
0001C90A 7C00                       		moveq	#0,d6
0001C90C 3C28 0012                  		move.w	$12(a0),d6
0001C910 6700                       		beq.s	Obj09_NoYFall
0001C912 D481                       		add.l	d1,d2
0001C914 6100 0000                  		bsr.w	sub_1BCE8
0001C918 6700                       		beq.s	loc_1BCC6
0001C91A 9481                       		sub.l	d1,d2
0001C91C 7200                       		moveq	#0,d1
0001C91E 3141 0012                  		move.w	d1,$12(a0)
0001C922 4E75                       		rts	
0001C924                            ; ===========================================================================
0001C924                            
0001C924                            loc_1BCB0:
0001C924 7C00                       		moveq	#0,d6
0001C926 3C28 0012                  		move.w	$12(a0),d6
0001C92A 6700                       		beq.s	Obj09_NoYFall
0001C92C D481                       		add.l	d1,d2
0001C92E 6100 0000                  		bsr.w	sub_1BCE8
0001C932 6700                       		beq.s	loc_1BCD4
0001C934 9481                       		sub.l	d1,d2
0001C936 7200                       		moveq	#0,d1
0001C938 3141 0012                  		move.w	d1,$12(a0)
0001C93C 08A8 0001 0022             		bclr	#1,$22(a0)
0001C942                            
0001C942                            loc_1BCC6:
0001C942 E080                       		asr.l	#8,d0
0001C944 E081                       		asr.l	#8,d1
0001C946 3140 0010                  		move.w	d0,$10(a0)
0001C94A 3141 0012                  		move.w	d1,$12(a0)
0001C94E 4E75                       		rts	
0001C950                            ; ===========================================================================
0001C950                            
0001C950                            loc_1BCD4:
0001C950 E080                       		asr.l	#8,d0
0001C952 E081                       		asr.l	#8,d1
0001C954 3140 0010                  		move.w	d0,$10(a0)
0001C958 3141 0012                  		move.w	d1,$12(a0)
0001C95C 08E8 0001 0022             		bset	#1,$22(a0)
0001C962 4E75                       		rts	
0001C964                            
0001C964                            Obj09_NoYFall:
0001C964 4E75                       		rts
0001C966                            ; End of function Obj09_Fall
0001C966                            
0001C966                            
0001C966                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C966                            
0001C966                            
0001C966                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C966 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C96C 7800                       		moveq	#0,d4
0001C96E 4842                       		swap	d2
0001C970 3802                       		move.w	d2,d4
0001C972 4842                       		swap	d2
0001C974 0644 0044                  		addi.w	#$44,d4
0001C978 88FC 0018                  		divu.w	#$18,d4
0001C97C C8FC 0080                  		mulu.w	#$80,d4
0001C980 D3C4                       		adda.l	d4,a1
0001C982 7800                       		moveq	#0,d4
0001C984 4843                       		swap	d3
0001C986 3803                       		move.w	d3,d4
0001C988 4843                       		swap	d3
0001C98A 0644 0014                  		addi.w	#$14,d4
0001C98E 88FC 0018                  		divu.w	#$18,d4
0001C992 D2C4                       		adda.w	d4,a1
0001C994 7A00                       		moveq	#0,d5
0001C996 1819                       		move.b	(a1)+,d4
0001C998 6100                       		bsr.s	sub_1BD30
0001C99A 1819                       		move.b	(a1)+,d4
0001C99C 6100                       		bsr.s	sub_1BD30
0001C99E D2FC 007E                  		adda.w	#$7E,a1
0001C9A2 1819                       		move.b	(a1)+,d4
0001C9A4 6100                       		bsr.s	sub_1BD30
0001C9A6 1819                       		move.b	(a1)+,d4
0001C9A8 6100                       		bsr.s	sub_1BD30
0001C9AA 4A05                       		tst.b	d5
0001C9AC 4E75                       		rts	
0001C9AE                            ; End of function sub_1BCE8
0001C9AE                            
0001C9AE                            
0001C9AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9AE                            
0001C9AE                            
0001C9AE                            sub_1BD30:				; XREF: sub_1BCE8
0001C9AE 6700                       		beq.s	locret_1BD44
0001C9B0 0C04 0028                  		cmpi.b	#$28,d4
0001C9B4 6500                       		blo.s	loc_1BD46
0001C9B6 0C04 004B                  		cmpi.b	#$4B,d4
0001C9BA 6400                       		bhs.s	loc_1BD46
0001C9BC 0C04 003A                  		cmpi.b	#$3A,d4
0001C9C0 6400                       		bhs.s	locret_1BD44
0001C9C2 0C04 002C                  		cmpi.b	#$2C,d4
0001C9C6 6400                       		bhs.s	loc_1BD46
0001C9C8                            
0001C9C8                            locret_1BD44:
0001C9C8 4E75                       		rts	
0001C9CA                            ; ===========================================================================
0001C9CA                            
0001C9CA                            loc_1BD46:
0001C9CA 1144 0030                  		move.b	d4,$30(a0)
0001C9CE 2149 0032                  		move.l	a1,$32(a0)
0001C9D2 7AFF                       		moveq	#-1,d5
0001C9D4 4E75                       		rts	
0001C9D6                            ; End of function sub_1BD30
0001C9D6                            
0001C9D6                            
0001C9D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9D6                            
0001C9D6                            
0001C9D6                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C9D6 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C9DC 7800                       		moveq	#0,d4
0001C9DE 3828 000C                  		move.w	$C(a0),d4
0001C9E2 0644 0050                  		addi.w	#$50,d4
0001C9E6 88FC 0018                  		divu.w	#$18,d4
0001C9EA C8FC 0080                  		mulu.w	#$80,d4
0001C9EE D3C4                       		adda.l	d4,a1
0001C9F0 7800                       		moveq	#0,d4
0001C9F2 3828 0008                  		move.w	8(a0),d4
0001C9F6 0644 0020                  		addi.w	#$20,d4
0001C9FA 88FC 0018                  		divu.w	#$18,d4
0001C9FE D2C4                       		adda.w	d4,a1
0001CA00 1811                       		move.b	(a1),d4
0001CA02 6600                       		bne.s	Obj09_ChkCont
0001CA04 4A28 003A                  		tst.b	$3A(a0)
0001CA08 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001CA0C 7800                       		moveq	#0,d4
0001CA0E 4E75                       		rts	
0001CA10                            ; ===========================================================================
0001CA10                            
0001CA10                            Obj09_ChkCont:
0001CA10 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001CA14 6600                       		bne.s	Obj09_Chk1Up
0001CA16 6100 F6DC                  		bsr.w	SS_RemoveCollectedItem
0001CA1A 6600                       		bne.s	Obj09_GetCont
0001CA1C 14BC 0001                  		move.b	#1,(a2)
0001CA20 2549 0004                  		move.l	a1,4(a2)
0001CA24                            
0001CA24                            Obj09_GetCont:
0001CA24 4EB9 0000 A33C             		jsr	CollectRing
0001CA2A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001CA30 6500                       		bcs.s	Obj09_NoCont
0001CA32 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001CA38 6600                       		bne.s	Obj09_NoCont
0001CA3A 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001CA3E 303C 00BF                  		move.w	#$BF,d0
0001CA42 4EB9 0000 1398             		jsr	(PlaySound).l	; play extra continue sound
0001CA48                            
0001CA48                            Obj09_NoCont:
0001CA48 7800                       		moveq	#0,d4
0001CA4A 4E75                       		rts	
0001CA4C                            ; ===========================================================================
0001CA4C                            
0001CA4C                            Obj09_Chk1Up:
0001CA4C 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001CA50 6600                       		bne.s	Obj09_ChkEmer
0001CA52 6100 F6A0                  		bsr.w	SS_RemoveCollectedItem
0001CA56 6600                       		bne.s	Obj09_Get1Up
0001CA58 14BC 0003                  		move.b	#3,(a2)
0001CA5C 2549 0004                  		move.l	a1,4(a2)
0001CA60                            
0001CA60                            Obj09_Get1Up:
0001CA60 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001CA64 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001CA68 303C 0088                  		move.w	#$88,d0
0001CA6C 4EB9 0000 1398             		jsr	(PlaySound).l	; play extra life music
0001CA72 7800                       		moveq	#0,d4
0001CA74 4E75                       		rts	
0001CA76                            ; ===========================================================================
0001CA76                            
0001CA76                            Obj09_ChkEmer:
0001CA76 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001CA7A 6500                       		bcs.s	Obj09_UPblock
0001CA7C 0C04 0040                  		cmpi.b	#$40,d4
0001CA80 6200                       		bhi.s	Obj09_UPblock
0001CA82 6100 F670                  		bsr.w	SS_RemoveCollectedItem
0001CA86 6600                       		bne.s	Obj09_GetEmer
0001CA88 14BC 0005                  		move.b	#5,(a2)
0001CA8C 2549 0004                  		move.l	a1,4(a2)
0001CA90                            
0001CA90                            Obj09_GetEmer:
0001CA90 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001CA96 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001CA98 0404 003B                  		subi.b	#$3B,d4
0001CA9C 7000                       		moveq	#0,d0
0001CA9E 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001CAA2 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001CAA6 1584 0000                  		move.b	d4,(a2,d0.w)
0001CAAA 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001CAAE                            
0001CAAE                            Obj09_NoEmer:
0001CAAE 303C 0093                  		move.w	#$93,d0
0001CAB2 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play emerald music
0001CAB8 7800                       		moveq	#0,d4
0001CABA 4E75                       		rts	
0001CABC                            
0001CABC                            ; ===========================================================================
0001CABC                            
0001CABC                            Obj09_UPblock:
0001CABC 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001CAC0 6600                       		bne.s	Obj09_DOWNblock
0001CAC2 6100 F630                  		bsr.w	SS_RemoveCollectedItem
0001CAC6 6600                       		bne.s	Obj09_SpeedUp
0001CAC8 14BC 0001                  		move.b	#1,(a2)
0001CACC 2549 0004                  		move.l	a1,4(a2)
0001CAD0                            
0001CAD0                            Obj09_SpeedUp:
0001CAD0 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001CAD6 6400                       		bhs.s	Obj09_UPsnd
0001CAD8 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001CADC                            
0001CADC                            Obj09_UPsnd:
0001CADC 303C 00A9                  		move.w	#$A9,d0
0001CAE0 4EB9 0000 139E             		jsr	(PlaySound_Special).l	; play up/down sound
0001CAE6 7800                       		moveq	#0,d4
0001CAE8 4E75                       		rts	
0001CAEA                            ; ===========================================================================
0001CAEA                            
0001CAEA                            Obj09_DOWNblock:
0001CAEA 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001CAEE 6600                       		bne.s	Obj09_Rblock
0001CAF0 6100 F602                  		bsr.w	SS_RemoveCollectedItem
0001CAF4 6600                       		bne.s	Obj09_SpeedDown
0001CAF6 14BC 0001                  		move.b	#1,(a2)
0001CAFA 2549 0004                  		move.l	a1,4(a2)
0001CAFE                            
0001CAFE                            Obj09_SpeedDown:
0001CAFE 4A78 F786                  		tst.w 	($FFFFF786).w
0001CB02 6700                       		beq.s	Obj09_DOWNsnd
0001CB04 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001CB08                            
0001CB08                            Obj09_DOWNsnd:
0001CB08 303C 00A9                  		move.w	#$A9,d0
0001CB0C 4EB9 0000 139E             		jsr	(PlaySound_Special).l	; play up/down sound
0001CB12 7800                       		moveq	#0,d4
0001CB14 4E75                       		rts	
0001CB16                            ; ===========================================================================
0001CB16                            
0001CB16                            Obj09_Rblock:
0001CB16 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001CB1A 6600                       		bne.s	Obj09_ChkGhost
0001CB1C 6100 F5D6                  		bsr.w	SS_RemoveCollectedItem
0001CB20 6600                       		bne.s	Obj09_RevStage
0001CB22 14BC 0001                  		move.b	#1,(a2)
0001CB26 2549 0004                  		move.l	a1,4(a2)
0001CB2A                            
0001CB2A                            Obj09_RevStage:
0001CB2A 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001CB30 103C 00A9                  		move.b	#$A9,d0
0001CB34 4EB9 0000 139E             		jsr	(PlaySound_Special).l	; play sound
0001CB3A 7800                       		moveq	#0,d4
0001CB3C 4E75                       		rts	
0001CB3E                            
0001CB3E                            ; ===========================================================================
0001CB3E                            
0001CB3E                            Obj09_ChkGhost:
0001CB3E 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001CB42 6600                       		bne.s	Obj09_ChkGhostTag
0001CB44 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001CB4A                            
0001CB4A                            Obj09_ChkGhostTag:
0001CB4A 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001CB4E 6600                       		bne.s	Obj09_NoGhost
0001CB50 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001CB56 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001CB58 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001CB5E                            
0001CB5E                            Obj09_NoGhost:
0001CB5E 78FF                       		moveq	#-1,d4
0001CB60 4E75                       		rts	
0001CB62                            ; ===========================================================================
0001CB62                            
0001CB62                            Obj09_MakeGhostSolid:
0001CB62 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001CB68 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001CB6A 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CB70 723F                       		moveq	#$3F,d1
0001CB72                            
0001CB72                            Obj09_GhostLoop2:
0001CB72 743F                       		moveq	#$3F,d2
0001CB74                            
0001CB74                            Obj09_GhostLoop:
0001CB74 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001CB78 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001CB7A 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001CB7E                            
0001CB7E                            Obj09_NoReplace:
0001CB7E 5249                       		addq.w	#1,a1
0001CB80 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001CB84 43E9 0040                  		lea	$40(a1),a1
0001CB88 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001CB8C                            
0001CB8C                            Obj09_GhostNotSolid:
0001CB8C 4228 003A                  		clr.b	$3A(a0)
0001CB90 7800                       		moveq	#0,d4
0001CB92 4E75                       		rts	
0001CB94                            ; End of function Obj09_ChkItems
0001CB94                            
0001CB94                            
0001CB94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB94                            
0001CB94                            
0001CB94                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001CB94 1028 0030                  		move.b	$30(a0),d0
0001CB98 6600                       		bne.s	Obj09_GOAL
0001CB9A 5328 0036                  		subq.b	#1,$36(a0)
0001CB9E 6A00                       		bpl.s	loc_1BEA0
0001CBA0 117C 0000 0036             		move.b	#0,$36(a0)
0001CBA6                            
0001CBA6                            loc_1BEA0:
0001CBA6 5328 0037                  		subq.b	#1,$37(a0)
0001CBAA 6A00                       		bpl.s	locret_1BEAC
0001CBAC 117C 0000 0037             		move.b	#0,$37(a0)
0001CBB2                            
0001CBB2                            locret_1BEAC:
0001CBB2 4E75                       		rts	
0001CBB4                            ; ===========================================================================
0001CBB4                            
0001CBB4                            ; ===========================================================================
0001CBB4                            
0001CBB4                            Obj09_GOAL:
0001CBB4 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001CBB8 6600                       		bne.s	Obj09_ChkGlass
0001CBBA 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001CBBE 303C 00A8                  		move.w	#$A8,d0		; change item
0001CBC2 4EB9 0000 139E             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001CBC8 4E75                       		rts	
0001CBCA                            ; ===========================================================================
0001CBCA                            
0001CBCA                            ; ===========================================================================
0001CBCA                            
0001CBCA                            Obj09_ChkGlass:
0001CBCA 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001CBCE 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001CBD0 0C00 002E                  		cmpi.b	#$2E,d0
0001CBD4 6700                       		beq.s	Obj09_Glass
0001CBD6 0C00 002F                  		cmpi.b	#$2F,d0
0001CBDA 6700                       		beq.s	Obj09_Glass
0001CBDC 0C00 0030                  		cmpi.b	#$30,d0
0001CBE0 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001CBE2                            
0001CBE2                            Obj09_Glass:
0001CBE2 6100 F510                  		bsr.w	SS_RemoveCollectedItem
0001CBE6 6600                       		bne.s	Obj09_GlassSnd
0001CBE8 14BC 0006                  		move.b	#6,(a2)
0001CBEC 2268 0032                  		movea.l	$32(a0),a1
0001CBF0 5389                       		subq.l	#1,a1
0001CBF2 2549 0004                  		move.l	a1,4(a2)
0001CBF6 1011                       		move.b	(a1),d0
0001CBF8 5200                       		addq.b	#1,d0		; change glass type when touched
0001CBFA 0C00 0030                  		cmpi.b	#$30,d0
0001CBFE 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001CC00 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001CC02                            
0001CC02                            Obj09_GlassUpdate:
0001CC02 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001CC06                            
0001CC06                            Obj09_GlassSnd:
0001CC06 303C 00BA                  		move.w	#$BA,d0
0001CC0A 4EF9 0000 139E             		jmp	(PlaySound_Special).l ;	play glass block sound
0001CC10                            ; ===========================================================================
0001CC10                            
0001CC10                            Obj09_NoGlass:
0001CC10 4E75                       		rts	
0001CC12                            ; End of function Obj09_ChkItems2
0001CC12                            
0001CC12                            ; ===========================================================================
0001CC12                            ; ---------------------------------------------------------------------------
0001CC12                            ; Object 10 - blank
0001CC12                            ; ---------------------------------------------------------------------------
0001CC12                            
0001CC12                            Obj10:					; XREF: Obj_Index
0001CC12 4E75                       		rts	
0001CC14                            ; ---------------------------------------------------------------------------
0001CC14                            ; Subroutine to	animate	level graphics
0001CC14                            ; ---------------------------------------------------------------------------
0001CC14                            
0001CC14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC14                            
0001CC14                            
0001CC14                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001CC14 4A38 FFF9                  		tst.b	($FFFFFFF9).w	; GMZ: Is truth nuke flag enabled?
0001CC18 6600                       		bne.s	AniArt_Pause	; GMZ: If yes, branch
0001CC1A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CC1E 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001CC20 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CC26 6100 0000                  		bsr.w	AniArt_GiantRing
0001CC2A 7000                       		moveq	#0,d0
0001CC2C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CC30 D040                       		add.w	d0,d0
0001CC32 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001CC36 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001CC3A                            ; ===========================================================================
0001CC3A                            
0001CC3A                            AniArt_Pause:
0001CC3A 4E75                       		rts	
0001CC3C                            ; End of function AniArt_Load
0001CC3C                            
0001CC3C                            ; ===========================================================================
0001CC3C 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001CC40 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001CC44 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001CC48 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_GHZ-AniArt_Index
0001CC4C                            ; ===========================================================================
0001CC4C                            ; ---------------------------------------------------------------------------
0001CC4C                            ; Animated pattern routine - Green Hill
0001CC4C                            ; ---------------------------------------------------------------------------
0001CC4C                            
0001CC4C                            AniArt_GHZ:				; XREF: AniArt_Index
0001CC4C 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CC50 6A00                       		bpl.s	loc_1C08A
0001CC52 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001CC58 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001CC5E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CC62 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CC66 0240 0001                  		andi.w	#1,d0
0001CC6A 6700                       		beq.s	loc_1C078
0001CC6C 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001CC70                            
0001CC70                            loc_1C078:
0001CC70 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001CC7A 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001CC7E 6000 0000                  		bra.w	LoadTiles
0001CC82                            ; ===========================================================================
0001CC82                            
0001CC82                            loc_1C08A:
0001CC82 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CC86 6A00                       		bpl.s	loc_1C0C0
0001CC88 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001CC8E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CC94 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CC98 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CC9C 0240 0001                  		andi.w	#1,d0
0001CCA0 6700                       		beq.s	loc_1C0AE
0001CCA2 43E9 0200                  		lea	$200(a1),a1
0001CCA6                            
0001CCA6                            loc_1C0AE:
0001CCA6 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CCB0 323C 000F                  		move.w	#$F,d1
0001CCB4 6000 0000                  		bra.w	LoadTiles
0001CCB8                            ; ===========================================================================
0001CCB8                            
0001CCB8                            loc_1C0C0:
0001CCB8 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CCBC 6A00                       		bpl.s	locret_1C10C
0001CCBE 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CCC4 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CCC8 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CCCC 0240 0003                  		andi.w	#3,d0
0001CCD0 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001CCD4 0800 0000                  		btst	#0,d0
0001CCD8 6600                       		bne.s	loc_1C0E8
0001CCDA 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001CCE0                            
0001CCE0                            loc_1C0E8:
0001CCE0 EF48                       		lsl.w	#7,d0
0001CCE2 3200                       		move.w	d0,d1
0001CCE4 D040                       		add.w	d0,d0
0001CCE6 D041                       		add.w	d1,d0
0001CCE8 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CCF2 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CCF8 43F1 0000                  		lea	(a1,d0.w),a1
0001CCFC 323C 000B                  		move.w	#$B,d1
0001CD00 6100 0000                  		bsr.w	LoadTiles
0001CD04                            
0001CD04                            locret_1C10C:
0001CD04 4E75                       		rts	
0001CD06                            ; ===========================================================================
0001CD06 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CD0A                            ; ===========================================================================
0001CD0A                            ; ---------------------------------------------------------------------------
0001CD0A                            ; Animated pattern routine - Marble
0001CD0A                            ; ---------------------------------------------------------------------------
0001CD0A                            
0001CD0A                            AniArt_MZ:				; XREF: AniArt_Index
0001CD0A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CD0E 6A00                       		bpl.s	loc_1C150
0001CD10 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CD16 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CD1C 7000                       		moveq	#0,d0
0001CD1E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CD22 5200                       		addq.b	#1,d0
0001CD24 0C00 0003                  		cmpi.b	#3,d0
0001CD28 6600                       		bne.s	loc_1C134
0001CD2A 7000                       		moveq	#0,d0
0001CD2C                            
0001CD2C                            loc_1C134:
0001CD2C 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CD30 C0FC 0100                  		mulu.w	#$100,d0
0001CD34 D2C0                       		adda.w	d0,a1
0001CD36 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CD40 323C 0007                  		move.w	#7,d1
0001CD44 6100 0000                  		bsr.w	LoadTiles
0001CD48                            
0001CD48                            loc_1C150:
0001CD48 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CD4C 6A00                       		bpl.s	loc_1C1AE
0001CD4E 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CD54 7000                       		moveq	#0,d0
0001CD56 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CD5A 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CD60 EE58                       		ror.w	#7,d0
0001CD62 D8C0                       		adda.w	d0,a4
0001CD64 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CD6E 7600                       		moveq	#0,d3
0001CD70 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CD74 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CD78 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CD7C 343C 0003                  		move.w	#3,d2
0001CD80                            
0001CD80                            loc_1C188:
0001CD80 3003                       		move.w	d3,d0
0001CD82 D040                       		add.w	d0,d0
0001CD84 0240 001E                  		andi.w	#$1E,d0
0001CD88 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CD8E 3033 0000                  		move.w	(a3,d0.w),d0
0001CD92 47F3 0000                  		lea	(a3,d0.w),a3
0001CD96 224C                       		movea.l	a4,a1
0001CD98 323C 001F                  		move.w	#$1F,d1
0001CD9C 4E93                       		jsr	(a3)
0001CD9E 5843                       		addq.w	#4,d3
0001CDA0 51CA FFDE                  		dbf	d2,loc_1C188
0001CDA4 4E75                       		rts	
0001CDA6                            ; ===========================================================================
0001CDA6                            
0001CDA6                            loc_1C1AE:
0001CDA6 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CDAA 6A00 0000                  		bpl.w	locret_1C1EA
0001CDAE 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CDB4 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CDBA 7000                       		moveq	#0,d0
0001CDBC 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CDC0 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CDC4 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CDCA C0FC 00C0                  		mulu.w	#$C0,d0
0001CDCE D2C0                       		adda.w	d0,a1
0001CDD0 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CDDA 323C 0005                  		move.w	#5,d1
0001CDDE 6000 0000                  		bra.w	LoadTiles
0001CDE2                            ; ===========================================================================
0001CDE2                            
0001CDE2                            locret_1C1EA:
0001CDE2 4E75                       		rts	
0001CDE4                            ; ===========================================================================
0001CDE4                            ; ---------------------------------------------------------------------------
0001CDE4                            ; Animated pattern routine - Scrap Brain
0001CDE4                            ; ---------------------------------------------------------------------------
0001CDE4                            
0001CDE4                            AniArt_SBZ:				; XREF: AniArt_Index
0001CDE4 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CDE8 6700                       		beq.s	loc_1C1F8
0001CDEA 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CDEE 6000                       		bra.s	loc_1C250
0001CDF0                            ; ===========================================================================
0001CDF0                            
0001CDF0                            loc_1C1F8:
0001CDF0 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CDF4 6A00                       		bpl.s	loc_1C250
0001CDF6 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CDFC 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CE02 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CE0C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CE10 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CE14 0240 0007                  		andi.w	#7,d0
0001CE18 6700                       		beq.s	loc_1C234
0001CE1A 5340                       		subq.w	#1,d0
0001CE1C C0FC 0180                  		mulu.w	#$180,d0
0001CE20 43F1 0000                  		lea	(a1,d0.w),a1
0001CE24 323C 000B                  		move.w	#$B,d1
0001CE28 6000 0000                  		bra.w	LoadTiles
0001CE2C                            ; ===========================================================================
0001CE2C                            
0001CE2C                            loc_1C234:
0001CE2C 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CE32                            
0001CE32                            loc_1C23A:
0001CE32 323C 0005                  		move.w	#5,d1
0001CE36 6100 0000                  		bsr.w	LoadTiles
0001CE3A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CE40 323C 0005                  		move.w	#5,d1
0001CE44 6000 0000                  		bra.w	LoadTiles
0001CE48                            ; ===========================================================================
0001CE48                            
0001CE48                            loc_1C250:
0001CE48 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CE4C 6700                       		beq.s	loc_1C25C
0001CE4E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CE52 6000                       		bra.s	locret_1C2A0
0001CE54                            ; ===========================================================================
0001CE54                            
0001CE54                            loc_1C25C:
0001CE54 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CE58 6A00                       		bpl.s	locret_1C2A0
0001CE5A 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CE60 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CE66 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CE70 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CE74 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CE78 0240 0007                  		andi.w	#7,d0
0001CE7C 6700                       		beq.s	loc_1C298
0001CE7E 5340                       		subq.w	#1,d0
0001CE80 C0FC 0180                  		mulu.w	#$180,d0
0001CE84 43F1 0000                  		lea	(a1,d0.w),a1
0001CE88 323C 000B                  		move.w	#$B,d1
0001CE8C 6000 0000                  		bra.w	LoadTiles
0001CE90                            ; ===========================================================================
0001CE90                            
0001CE90                            loc_1C298:
0001CE90 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CE96 609A                       		bra.s	loc_1C23A
0001CE98                            ; ===========================================================================
0001CE98                            
0001CE98                            locret_1C2A0:
0001CE98 4E75                       		rts	
0001CE9A                            ; ===========================================================================
0001CE9A                            ; ---------------------------------------------------------------------------
0001CE9A                            ; Animated pattern routine - ending sequence
0001CE9A                            ; ---------------------------------------------------------------------------
0001CE9A                            
0001CE9A                            AniArt_Ending:				; XREF: AniArt_Index
0001CE9A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CE9E 6A00                       		bpl.s	loc_1C2F4
0001CEA0 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CEA6 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CEAC 45F8 9400                  		lea	($FFFF9400).w,a2
0001CEB0 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CEB4 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CEB8 0240 0001                  		andi.w	#1,d0
0001CEBC 6700                       		beq.s	loc_1C2CE
0001CEBE 43E9 0200                  		lea	$200(a1),a1
0001CEC2 45EA 0200                  		lea	$200(a2),a2
0001CEC6                            
0001CEC6                            loc_1C2CE:
0001CEC6 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CED0 323C 000F                  		move.w	#$F,d1
0001CED4 6100 0000                  		bsr.w	LoadTiles
0001CED8 224A                       		movea.l	a2,a1
0001CEDA 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CEE4 323C 000F                  		move.w	#$F,d1
0001CEE8 6000 0000                  		bra.w	LoadTiles
0001CEEC                            ; ===========================================================================
0001CEEC                            
0001CEEC                            loc_1C2F4:
0001CEEC 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CEF0 6A00                       		bpl.s	loc_1C33C
0001CEF2 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CEF8 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CEFC 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CF00 0240 0007                  		andi.w	#7,d0
0001CF04 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CF08 EF48                       		lsl.w	#7,d0
0001CF0A 3200                       		move.w	d0,d1
0001CF0C D040                       		add.w	d0,d0
0001CF0E D041                       		add.w	d1,d0
0001CF10 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CF1A 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CF20 43F1 0000                  		lea	(a1,d0.w),a1
0001CF24 323C 000B                  		move.w	#$B,d1
0001CF28 6000 0000                  		bra.w	LoadTiles
0001CF2C                            ; ===========================================================================
0001CF2C 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CF34                            ; ===========================================================================
0001CF34                            
0001CF34                            loc_1C33C:
0001CF34 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CF38 6A00                       		bpl.s	loc_1C37A
0001CF3A 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CF40 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CF44 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CF48 0240 0003                  		andi.w	#3,d0
0001CF4C 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CF50 E148                       		lsl.w	#8,d0
0001CF52 D040                       		add.w	d0,d0
0001CF54 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CF5E 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CF62 43F1 0000                  		lea	(a1,d0.w),a1
0001CF66 323C 000F                  		move.w	#$F,d1
0001CF6A 6000 0000                  		bra.w	LoadTiles
0001CF6E                            ; ===========================================================================
0001CF6E 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CF72                            ; ===========================================================================
0001CF72                            
0001CF72                            loc_1C37A:
0001CF72 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CF76 6A00                       		bpl.s	locret_1C3B4
0001CF78 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CF7E 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CF82 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CF86 0240 0003                  		andi.w	#3,d0
0001CF8A 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CF8E E148                       		lsl.w	#8,d0
0001CF90 D040                       		add.w	d0,d0
0001CF92 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CF9C 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CFA0 43F1 0000                  		lea	(a1,d0.w),a1
0001CFA4 323C 000F                  		move.w	#$F,d1
0001CFA8 6000 0000                  		bra.w	LoadTiles
0001CFAC                            ; ===========================================================================
0001CFAC                            
0001CFAC                            locret_1C3B4:
0001CFAC 4E75                       		rts	
0001CFAE                            ; ===========================================================================
0001CFAE                            
0001CFAE                            AniArt_none:				; XREF: AniArt_Index
0001CFAE 4E75                       		rts	
0001CFB0                            
0001CFB0                            ; ---------------------------------------------------------------------------
0001CFB0                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CFB0                            ; ---------------------------------------------------------------------------
0001CFB0                            
0001CFB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFB0                            
0001CFB0                            
0001CFB0                            LoadTiles:
0001CFB0 2C99                       		move.l	(a1)+,(a6)
0001CFB2 2C99                       		move.l	(a1)+,(a6)
0001CFB4 2C99                       		move.l	(a1)+,(a6)
0001CFB6 2C99                       		move.l	(a1)+,(a6)
0001CFB8 2C99                       		move.l	(a1)+,(a6)
0001CFBA 2C99                       		move.l	(a1)+,(a6)
0001CFBC 2C99                       		move.l	(a1)+,(a6)
0001CFBE 2C99                       		move.l	(a1)+,(a6)
0001CFC0 51C9 FFEE                  		dbf	d1,LoadTiles
0001CFC4 4E75                       		rts	
0001CFC6                            ; End of function LoadTiles
0001CFC6                            
0001CFC6                            ; ===========================================================================
0001CFC6                            ; ---------------------------------------------------------------------------
0001CFC6                            ; Animated pattern routine - more Marble Zone
0001CFC6                            ; ---------------------------------------------------------------------------
0001CFC6 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CFCA 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CFCE 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CFD2 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CFD6 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CFDA 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CFDE 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CFE2 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CFE6                            ; ===========================================================================
0001CFE6                            
0001CFE6                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CFE6 2C91                       		move.l	(a1),(a6)
0001CFE8 43E9 0010                  		lea	$10(a1),a1
0001CFEC 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CFF0 4E75                       		rts	
0001CFF2                            ; ===========================================================================
0001CFF2                            
0001CFF2                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CFF2 2029 0002                  		move.l	2(a1),d0
0001CFF6 1029 0001                  		move.b	1(a1),d0
0001CFFA E098                       		ror.l	#8,d0
0001CFFC 2C80                       		move.l	d0,(a6)
0001CFFE 43E9 0010                  		lea	$10(a1),a1
0001D002 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001D006 4E75                       		rts	
0001D008                            ; ===========================================================================
0001D008                            
0001D008                            loc_1C410:				; XREF: AniArt_MZextra
0001D008 2CA9 0002                  		move.l	2(a1),(a6)
0001D00C 43E9 0010                  		lea	$10(a1),a1
0001D010 51C9 FFF6                  		dbf	d1,loc_1C410
0001D014 4E75                       		rts	
0001D016                            ; ===========================================================================
0001D016                            
0001D016                            loc_1C41E:				; XREF: AniArt_MZextra
0001D016 2029 0004                  		move.l	4(a1),d0
0001D01A 1029 0003                  		move.b	3(a1),d0
0001D01E E098                       		ror.l	#8,d0
0001D020 2C80                       		move.l	d0,(a6)
0001D022 43E9 0010                  		lea	$10(a1),a1
0001D026 51C9 FFEE                  		dbf	d1,loc_1C41E
0001D02A 4E75                       		rts	
0001D02C                            ; ===========================================================================
0001D02C                            
0001D02C                            loc_1C434:				; XREF: AniArt_MZextra
0001D02C 2CA9 0004                  		move.l	4(a1),(a6)
0001D030 43E9 0010                  		lea	$10(a1),a1
0001D034 51C9 FFF6                  		dbf	d1,loc_1C434
0001D038 4E75                       		rts	
0001D03A                            ; ===========================================================================
0001D03A                            
0001D03A                            loc_1C442:				; XREF: AniArt_MZextra
0001D03A 2029 0006                  		move.l	6(a1),d0
0001D03E 1029 0005                  		move.b	5(a1),d0
0001D042 E098                       		ror.l	#8,d0
0001D044 2C80                       		move.l	d0,(a6)
0001D046 43E9 0010                  		lea	$10(a1),a1
0001D04A 51C9 FFEE                  		dbf	d1,loc_1C442
0001D04E 4E75                       		rts	
0001D050                            ; ===========================================================================
0001D050                            
0001D050                            loc_1C458:				; XREF: AniArt_MZextra
0001D050 2CA9 0006                  		move.l	6(a1),(a6)
0001D054 43E9 0010                  		lea	$10(a1),a1
0001D058 51C9 FFF6                  		dbf	d1,loc_1C458
0001D05C 4E75                       		rts	
0001D05E                            ; ===========================================================================
0001D05E                            
0001D05E                            loc_1C466:				; XREF: AniArt_MZextra
0001D05E 2029 0008                  		move.l	8(a1),d0
0001D062 1029 0007                  		move.b	7(a1),d0
0001D066 E098                       		ror.l	#8,d0
0001D068 2C80                       		move.l	d0,(a6)
0001D06A 43E9 0010                  		lea	$10(a1),a1
0001D06E 51C9 FFEE                  		dbf	d1,loc_1C466
0001D072 4E75                       		rts	
0001D074                            ; ===========================================================================
0001D074                            
0001D074                            loc_1C47C:				; XREF: AniArt_MZextra
0001D074 2CA9 0008                  		move.l	8(a1),(a6)
0001D078 43E9 0010                  		lea	$10(a1),a1
0001D07C 51C9 FFF6                  		dbf	d1,loc_1C47C
0001D080 4E75                       		rts	
0001D082                            ; ===========================================================================
0001D082                            
0001D082                            loc_1C48A:				; XREF: AniArt_MZextra
0001D082 2029 000A                  		move.l	$A(a1),d0
0001D086 1029 0009                  		move.b	9(a1),d0
0001D08A E098                       		ror.l	#8,d0
0001D08C 2C80                       		move.l	d0,(a6)
0001D08E 43E9 0010                  		lea	$10(a1),a1
0001D092 51C9 FFEE                  		dbf	d1,loc_1C48A
0001D096 4E75                       		rts	
0001D098                            ; ===========================================================================
0001D098                            
0001D098                            loc_1C4A0:				; XREF: AniArt_MZextra
0001D098 2CA9 000A                  		move.l	$A(a1),(a6)
0001D09C 43E9 0010                  		lea	$10(a1),a1
0001D0A0 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001D0A4 4E75                       		rts	
0001D0A6                            ; ===========================================================================
0001D0A6                            
0001D0A6                            loc_1C4AE:				; XREF: AniArt_MZextra
0001D0A6 2029 000C                  		move.l	$C(a1),d0
0001D0AA 1029 000B                  		move.b	$B(a1),d0
0001D0AE E098                       		ror.l	#8,d0
0001D0B0 2C80                       		move.l	d0,(a6)
0001D0B2 43E9 0010                  		lea	$10(a1),a1
0001D0B6 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001D0BA 4E75                       		rts	
0001D0BC                            ; ===========================================================================
0001D0BC                            
0001D0BC                            loc_1C4C4:				; XREF: AniArt_MZextra
0001D0BC 2CA9 000C                  		move.l	$C(a1),(a6)
0001D0C0 43E9 0010                  		lea	$10(a1),a1
0001D0C4 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001D0C8 4E75                       		rts	
0001D0CA                            ; ===========================================================================
0001D0CA                            
0001D0CA                            loc_1C4D2:				; XREF: AniArt_MZextra
0001D0CA 2029 000C                  		move.l	$C(a1),d0
0001D0CE E198                       		rol.l	#8,d0
0001D0D0 1011                       		move.b	0(a1),d0
0001D0D2 2C80                       		move.l	d0,(a6)
0001D0D4 43E9 0010                  		lea	$10(a1),a1
0001D0D8 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001D0DC 4E75                       		rts	
0001D0DE                            ; ===========================================================================
0001D0DE                            
0001D0DE                            loc_1C4E8:				; XREF: AniArt_MZextra
0001D0DE 3CA9 000E                  		move.w	$E(a1),(a6)
0001D0E2 3C91                       		move.w	0(a1),(a6)
0001D0E4 43E9 0010                  		lea	$10(a1),a1
0001D0E8 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001D0EC 4E75                       		rts	
0001D0EE                            ; ===========================================================================
0001D0EE                            
0001D0EE                            loc_1C4FA:				; XREF: AniArt_MZextra
0001D0EE 2011                       		move.l	0(a1),d0
0001D0F0 1029 000F                  		move.b	$F(a1),d0
0001D0F4 E098                       		ror.l	#8,d0
0001D0F6 2C80                       		move.l	d0,(a6)
0001D0F8 43E9 0010                  		lea	$10(a1),a1
0001D0FC 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001D100 4E75                       		rts	
0001D102                            
0001D102                            ; ---------------------------------------------------------------------------
0001D102                            ; Animated pattern routine - giant ring
0001D102                            ; ---------------------------------------------------------------------------
0001D102                            
0001D102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D102                            
0001D102                            
0001D102                            AniArt_GiantRing:			; XREF: AniArt_Load
0001D102 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001D106 6600                       		bne.s	loc_1C518
0001D108 4E75                       		rts	
0001D10A                            ; ===========================================================================
0001D10A                            
0001D10A                            loc_1C518:
0001D10A 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001D110 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001D116 7000                       		moveq	#0,d0
0001D118 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001D11C 43F1 0000                  		lea	(a1,d0.w),a1
0001D120 0640 8000                  		addi.w	#$8000,d0
0001D124 E588                       		lsl.l	#2,d0
0001D126 E448                       		lsr.w	#2,d0
0001D128 0040 4000                  		ori.w	#$4000,d0
0001D12C 4840                       		swap	d0
0001D12E 2D40 0004                  		move.l	d0,4(a6)
0001D132 323C 000D                  		move.w	#$D,d1
0001D136 6000 FE78                  		bra.w	LoadTiles
0001D13A                            ; End of function AniArt_GiantRing
0001D13A                            
0001D13A                            ; ===========================================================================
0001D13A                            ; ---------------------------------------------------------------------------
0001D13A                            ; Object 21 - SCORE, TIME, RINGS
0001D13A                            ; ---------------------------------------------------------------------------
0001D13A                            
0001D13A                            Obj21:					; XREF: Obj_Index
0001D13A 7000                       		moveq	#0,d0
0001D13C 1028 0024                  		move.b	$24(a0),d0
0001D140 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001D144 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001D148                            ; ===========================================================================
0001D148 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001D14A 0000                       		dc.w Obj21_Flash-Obj21_Index
0001D14C                            ; ===========================================================================
0001D14C                            
0001D14C                            Obj21_Main:				; XREF: Obj21_Main
0001D14C 5428 0024                  		addq.b	#2,$24(a0)
0001D150 317C 0090 0008             		move.w	#$90,8(a0)
0001D156 317C 0108 000A             		move.w	#$108,$A(a0)
0001D15C 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001D164 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001D16A 117C 0000 0001             		move.b	#0,1(a0)
0001D170 117C 0000 0018             		move.b	#0,$18(a0)
0001D176                            
0001D176                            Obj21_Flash:				; XREF: Obj21_Main
0001D176 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001D17A 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001D17C 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001D180 4EF9 0000 DE68             		jmp	DisplaySprite
0001D186                            ; ===========================================================================
0001D186                            
0001D186                            Obj21_Flash2:
0001D186 7000                       		moveq	#0,d0
0001D188 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001D18E 6600                       		bne.s	Obj21_Display
0001D190 5240                       		addq.w	#1,d0		; make ring counter flash red
0001D192 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001D198 6600                       		bne.s	Obj21_Display	; if not, branch
0001D19A 5440                       		addq.w	#2,d0		; make time counter flash red
0001D19C                            
0001D19C                            Obj21_Display:
0001D19C 1140 001A                  		move.b	d0,$1A(a0)
0001D1A0 4EF9 0000 DE68             		jmp	DisplaySprite
0001D1A6                            ; ===========================================================================
0001D1A6                            ; ---------------------------------------------------------------------------
0001D1A6                            ; Sprite mappings - SCORE, TIME, RINGS
0001D1A6                            ; ---------------------------------------------------------------------------
0001D1A6                            Map_obj21:
0001D1A6                            	include "_maps\obj21.asm"
0001D1A6                            Map_549d:
0001D1A6 0000                       Map_549d_0: 	dc.w Map_549d_8-Map_549d
0001D1A8 0000                       Map_549d_2: 	dc.w Map_549d_36-Map_549d
0001D1AA 0000                       Map_549d_4: 	dc.w Map_549d_64-Map_549d
0001D1AC 0000                       Map_549d_6: 	dc.w Map_549d_92-Map_549d
0001D1AE 09                         Map_549d_8: 	dc.b $9
0001D1AF 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D1B4 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D1B9 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D1BE 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D1C3 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D1C8 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D1CD 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D1D2 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D1D7 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D1DC 09                         Map_549d_36: 	dc.b $9
0001D1DD 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D1E2 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D1E7 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D1EC 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D1F1 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D1F6 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D1FB 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D200 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D205 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D20A 09                         Map_549d_64: 	dc.b $9
0001D20B 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D210 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D215 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D21A 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D21F A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D224 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D229 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D22E 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D233 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D238 09                         Map_549d_92: 	dc.b $9
0001D239 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D23E 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D243 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D248 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D24D A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D252 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D257 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D25C 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D261 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D266                            	even
0001D266                            	even
0001D266                            
0001D266                            ; ---------------------------------------------------------------------------
0001D266                            ; Add points subroutine
0001D266                            ; ---------------------------------------------------------------------------
0001D266                            
0001D266                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D266                            
0001D266                            
0001D266                            AddPoints:
0001D266 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001D26C 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001D270 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001D274 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001D276 223C 000F 423F             		move.l	#999999,d1
0001D27C B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001D27E 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001D282 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001D284 2481                       		move.l	d1,(a2)
0001D286                            
0001D286                            loc_1C6AC:
0001D286 2013                       		move.l	(a3),d0
0001D288 B092                       		cmp.l	(a2),d0
0001D28A 6500 0000                  		bcs.w	locret_1C6B6
0001D28E 2480                       		move.l	d0,(a2)
0001D290                            
0001D290                            locret_1C6B6:
0001D290 4E75                       		rts	
0001D292                            ; End of function AddPoints
0001D292                            
0001D292                            ; ---------------------------------------------------------------------------
0001D292                            ; Subroutine to	update the HUD
0001D292                            ; ---------------------------------------------------------------------------
0001D292                            
0001D292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D292                            
0001D292                            
0001D292                            HudUpdate:
0001D292 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001D296 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001D29A 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001D29E 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001D2A0 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001D2A4 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001D2AA 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001D2AE 6100 0000                  		bsr.w	Hud_Score
0001D2B2                            
0001D2B2                            Hud_ChkRings:
0001D2B2 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D2B6 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001D2B8 6A00                       		bpl.s	loc_1C6E4
0001D2BA 6100 0000                  		bsr.w	Hud_LoadZero
0001D2BE                            
0001D2BE                            loc_1C6E4:
0001D2BE 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D2C2 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D2C8 7200                       		moveq	#0,d1
0001D2CA 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D2CE 6100 0000                  		bsr.w	Hud_Rings
0001D2D2                            
0001D2D2                            Hud_ChkTime:
0001D2D2 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D2D6 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D2D8 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D2DC 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D2DE 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D2E2 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D2E8 6700                       		beq.s	TimeOver	; if yes, branch
0001D2EA 5221                       		addq.b	#1,-(a1)
0001D2EC 0C11 003C                  		cmpi.b	#60,(a1)
0001D2F0 6500                       		bcs.s	Hud_ChkLives
0001D2F2 12BC 0000                  		move.b	#0,(a1)
0001D2F6 5221                       		addq.b	#1,-(a1)
0001D2F8 0C11 003C                  		cmpi.b	#60,(a1)
0001D2FC 6500                       		bcs.s	loc_1C734
0001D2FE 12BC 0000                  		move.b	#0,(a1)
0001D302 5221                       		addq.b	#1,-(a1)
0001D304 0C11 0009                  		cmpi.b	#9,(a1)
0001D308 6500                       		bcs.s	loc_1C734
0001D30A 12BC 0009                  		move.b	#9,(a1)
0001D30E                            
0001D30E                            loc_1C734:
0001D30E 203C 5E40 0003             		move.l	#$5E400003,d0
0001D314 7200                       		moveq	#0,d1
0001D316 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D31A 6100 0000                  		bsr.w	Hud_Mins
0001D31E 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D324 7200                       		moveq	#0,d1
0001D326 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D32A 6100 0000                  		bsr.w	Hud_Secs
0001D32E                            
0001D32E                            Hud_ChkLives:
0001D32E 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D332 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D334 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D338 6100 0000                  		bsr.w	Hud_Lives
0001D33C                            
0001D33C                            Hud_ChkBonus:
0001D33C 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D340 6700                       		beq.s	Hud_End		; if not, branch
0001D342 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D346 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D350 7200                       		moveq	#0,d1
0001D352 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D356 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D35A 7200                       		moveq	#0,d1
0001D35C 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D360 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D364                            
0001D364                            Hud_End:
0001D364 4E75                       		rts	
0001D366                            ; ===========================================================================
0001D366                            
0001D366                            TimeOver:				; XREF: Hud_ChkTime
0001D366 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D36A 41F8 D000                  		lea	($FFFFD000).w,a0
0001D36E 2448                       		movea.l	a0,a2
0001D370 6100 E960                  		bsr.w	KillSonic
0001D374 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D37A 4E75                       		rts	
0001D37C                            ; ===========================================================================
0001D37C                            
0001D37C                            HudDebug:				; XREF: HudUpdate
0001D37C 6100 0000                  		bsr.w	HudDb_XY
0001D380 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D384 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D386 6A00                       		bpl.s	HudDb_Rings
0001D388 6100 0000                  		bsr.w	Hud_LoadZero
0001D38C                            
0001D38C                            HudDb_Rings:
0001D38C 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D390 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D396 7200                       		moveq	#0,d1
0001D398 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D39C 6100 0000                  		bsr.w	Hud_Rings
0001D3A0                            
0001D3A0                            HudDb_ObjCount:
0001D3A0 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D3A6 7200                       		moveq	#0,d1
0001D3A8 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D3AC 6100 0000                  		bsr.w	Hud_Secs
0001D3B0 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D3B4 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D3B6 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D3BA 6100 0000                  		bsr.w	Hud_Lives
0001D3BE                            
0001D3BE                            HudDb_ChkBonus:
0001D3BE 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D3C2 6700                       		beq.s	HudDb_End	; if not, branch
0001D3C4 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D3C8 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D3D2 7200                       		moveq	#0,d1
0001D3D4 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D3D8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D3DC 7200                       		moveq	#0,d1
0001D3DE 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D3E2 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D3E6                            
0001D3E6                            HudDb_End:
0001D3E6 4E75                       		rts	
0001D3E8                            ; End of function HudUpdate
0001D3E8                            
0001D3E8                            ; ---------------------------------------------------------------------------
0001D3E8                            ; Subroutine to	load "0" on the	HUD
0001D3E8                            ; ---------------------------------------------------------------------------
0001D3E8                            
0001D3E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3E8                            
0001D3E8                            
0001D3E8                            Hud_LoadZero:				; XREF: HudUpdate
0001D3E8 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D3F2 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D3F6 343C 0002                  		move.w	#2,d2
0001D3FA 6000                       		bra.s	loc_1C83E
0001D3FC                            ; End of function Hud_LoadZero
0001D3FC                            
0001D3FC                            ; ---------------------------------------------------------------------------
0001D3FC                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D3FC                            ; ---------------------------------------------------------------------------
0001D3FC                            
0001D3FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3FC                            
0001D3FC                            
0001D3FC                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D3FC 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D402 6100 0000                  		bsr.w	Hud_Lives
0001D406 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D410 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D414 343C 000E                  		move.w	#$E,d2
0001D418                            
0001D418                            loc_1C83E:				; XREF: Hud_LoadZero
0001D418 43FA 0000                  		lea	Art_Hud(pc),a1
0001D41C                            
0001D41C                            loc_1C842:
0001D41C 323C 000F                  		move.w	#$F,d1
0001D420 101A                       		move.b	(a2)+,d0
0001D422 6B00                       		bmi.s	loc_1C85E
0001D424 4880                       		ext.w	d0
0001D426 EB48                       		lsl.w	#5,d0
0001D428 47F1 0000                  		lea	(a1,d0.w),a3
0001D42C                            
0001D42C                            loc_1C852:
0001D42C 2C9B                       		move.l	(a3)+,(a6)
0001D42E 51C9 FFFC                  		dbf	d1,loc_1C852
0001D432                            
0001D432                            loc_1C858:
0001D432 51CA FFE8                  		dbf	d2,loc_1C842
0001D436                            
0001D436 4E75                       		rts	
0001D438                            ; ===========================================================================
0001D438                            
0001D438                            loc_1C85E:
0001D438 2CBC 0000 0000             		move.l	#0,(a6)
0001D43E 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D442                            
0001D442 60EE                       		bra.s	loc_1C858
0001D444                            ; End of function Hud_Base
0001D444                            
0001D444                            ; ===========================================================================
0001D444 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D450 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D454                            ; ---------------------------------------------------------------------------
0001D454                            ; Subroutine to	load debug mode	numbers	patterns
0001D454                            ; ---------------------------------------------------------------------------
0001D454                            
0001D454                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D454                            
0001D454                            
0001D454                            HudDb_XY:				; XREF: HudDebug
0001D454 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D45E 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D462 4841                       		swap	d1
0001D464 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D468 6100                       		bsr.s	HudDb_XY2
0001D46A 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D46E 4841                       		swap	d1
0001D470 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D474                            ; End of function HudDb_XY
0001D474                            
0001D474                            
0001D474                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D474                            
0001D474                            
0001D474                            HudDb_XY2:
0001D474 7C07                       		moveq	#7,d6
0001D476 43F9 0000 05F6             		lea	(Art_Text).l,a1
0001D47C                            
0001D47C                            HudDb_XYLoop:
0001D47C E959                       		rol.w	#4,d1
0001D47E 3401                       		move.w	d1,d2
0001D480 0242 000F                  		andi.w	#$F,d2
0001D484 0C42 000A                  		cmpi.w	#$A,d2
0001D488 6500                       		bcs.s	loc_1C8B2
0001D48A 5E42                       		addq.w	#7,d2
0001D48C                            
0001D48C                            loc_1C8B2:
0001D48C EB4A                       		lsl.w	#5,d2
0001D48E 47F1 2000                  		lea	(a1,d2.w),a3
0001D492 2C9B                       		move.l	(a3)+,(a6)
0001D494 2C9B                       		move.l	(a3)+,(a6)
0001D496 2C9B                       		move.l	(a3)+,(a6)
0001D498 2C9B                       		move.l	(a3)+,(a6)
0001D49A 2C9B                       		move.l	(a3)+,(a6)
0001D49C 2C9B                       		move.l	(a3)+,(a6)
0001D49E 2C9B                       		move.l	(a3)+,(a6)
0001D4A0 2C9B                       		move.l	(a3)+,(a6)
0001D4A2 4841                       		swap	d1
0001D4A4 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D4A8                            
0001D4A8 4E75                       		rts	
0001D4AA                            ; End of function HudDb_XY2
0001D4AA                            
0001D4AA                            ; ---------------------------------------------------------------------------
0001D4AA                            ; Subroutine to	load rings numbers patterns
0001D4AA                            ; ---------------------------------------------------------------------------
0001D4AA                            
0001D4AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4AA                            
0001D4AA                            
0001D4AA                            Hud_Rings:				; XREF: HudUpdate
0001D4AA 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D4B0 7C02                       		moveq	#2,d6
0001D4B2 6000                       		bra.s	Hud_LoadArt
0001D4B4                            ; End of function Hud_Rings
0001D4B4                            
0001D4B4                            ; ---------------------------------------------------------------------------
0001D4B4                            ; Subroutine to	load score numbers patterns
0001D4B4                            ; ---------------------------------------------------------------------------
0001D4B4                            
0001D4B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4B4                            
0001D4B4                            
0001D4B4                            Hud_Score:				; XREF: HudUpdate
0001D4B4 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D4BA 7C05                       		moveq	#5,d6
0001D4BC                            
0001D4BC                            Hud_LoadArt:
0001D4BC 7800                       		moveq	#0,d4
0001D4BE 43FA 0000                  		lea	Art_Hud(pc),a1
0001D4C2                            
0001D4C2                            Hud_ScoreLoop:
0001D4C2 7400                       		moveq	#0,d2
0001D4C4 261A                       		move.l	(a2)+,d3
0001D4C6                            
0001D4C6                            loc_1C8EC:
0001D4C6 9283                       		sub.l	d3,d1
0001D4C8 6500                       		bcs.s	loc_1C8F4
0001D4CA 5242                       		addq.w	#1,d2
0001D4CC 60F8                       		bra.s	loc_1C8EC
0001D4CE                            ; ===========================================================================
0001D4CE                            
0001D4CE                            loc_1C8F4:
0001D4CE D283                       		add.l	d3,d1
0001D4D0 4A42                       		tst.w	d2
0001D4D2 6700                       		beq.s	loc_1C8FE
0001D4D4 383C 0001                  		move.w	#1,d4
0001D4D8                            
0001D4D8                            loc_1C8FE:
0001D4D8 4A44                       		tst.w	d4
0001D4DA 6700                       		beq.s	loc_1C92C
0001D4DC ED4A                       		lsl.w	#6,d2
0001D4DE 2D40 0004                  		move.l	d0,4(a6)
0001D4E2 47F1 2000                  		lea	(a1,d2.w),a3
0001D4E6 2C9B                       		move.l	(a3)+,(a6)
0001D4E8 2C9B                       		move.l	(a3)+,(a6)
0001D4EA 2C9B                       		move.l	(a3)+,(a6)
0001D4EC 2C9B                       		move.l	(a3)+,(a6)
0001D4EE 2C9B                       		move.l	(a3)+,(a6)
0001D4F0 2C9B                       		move.l	(a3)+,(a6)
0001D4F2 2C9B                       		move.l	(a3)+,(a6)
0001D4F4 2C9B                       		move.l	(a3)+,(a6)
0001D4F6 2C9B                       		move.l	(a3)+,(a6)
0001D4F8 2C9B                       		move.l	(a3)+,(a6)
0001D4FA 2C9B                       		move.l	(a3)+,(a6)
0001D4FC 2C9B                       		move.l	(a3)+,(a6)
0001D4FE 2C9B                       		move.l	(a3)+,(a6)
0001D500 2C9B                       		move.l	(a3)+,(a6)
0001D502 2C9B                       		move.l	(a3)+,(a6)
0001D504 2C9B                       		move.l	(a3)+,(a6)
0001D506                            
0001D506                            loc_1C92C:
0001D506 0680 0040 0000             		addi.l	#$400000,d0
0001D50C 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D510                            
0001D510 4E75                       		rts	
0001D512                            ; End of function Hud_Score
0001D512                            
0001D512                            ; ---------------------------------------------------------------------------
0001D512                            ; Subroutine to	load countdown numbers on the continue screen
0001D512                            ; ---------------------------------------------------------------------------
0001D512                            
0001D512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D512                            
0001D512                            
0001D512                            ContScrCounter:				; XREF: ContinueScreen
0001D512 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D51C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D522 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D528 7C01                       		moveq	#1,d6
0001D52A 7800                       		moveq	#0,d4
0001D52C 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D530                            
0001D530                            ContScr_Loop:
0001D530 7400                       		moveq	#0,d2
0001D532 261A                       		move.l	(a2)+,d3
0001D534                            
0001D534                            loc_1C95A:
0001D534 9283                       		sub.l	d3,d1
0001D536 6500                       		bcs.s	loc_1C962
0001D538 5242                       		addq.w	#1,d2
0001D53A 60F8                       		bra.s	loc_1C95A
0001D53C                            ; ===========================================================================
0001D53C                            
0001D53C                            loc_1C962:
0001D53C D283                       		add.l	d3,d1
0001D53E ED4A                       		lsl.w	#6,d2
0001D540 47F1 2000                  		lea	(a1,d2.w),a3
0001D544 2C9B                       		move.l	(a3)+,(a6)
0001D546 2C9B                       		move.l	(a3)+,(a6)
0001D548 2C9B                       		move.l	(a3)+,(a6)
0001D54A 2C9B                       		move.l	(a3)+,(a6)
0001D54C 2C9B                       		move.l	(a3)+,(a6)
0001D54E 2C9B                       		move.l	(a3)+,(a6)
0001D550 2C9B                       		move.l	(a3)+,(a6)
0001D552 2C9B                       		move.l	(a3)+,(a6)
0001D554 2C9B                       		move.l	(a3)+,(a6)
0001D556 2C9B                       		move.l	(a3)+,(a6)
0001D558 2C9B                       		move.l	(a3)+,(a6)
0001D55A 2C9B                       		move.l	(a3)+,(a6)
0001D55C 2C9B                       		move.l	(a3)+,(a6)
0001D55E 2C9B                       		move.l	(a3)+,(a6)
0001D560 2C9B                       		move.l	(a3)+,(a6)
0001D562 2C9B                       		move.l	(a3)+,(a6)
0001D564 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D568                            
0001D568 4E75                       		rts	
0001D56A                            ; End of function ContScrCounter
0001D56A                            
0001D56A                            ; ===========================================================================
0001D56A                            ; ---------------------------------------------------------------------------
0001D56A                            ; HUD counter sizes
0001D56A                            ; ---------------------------------------------------------------------------
0001D56A 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D56E 0000 2710                  Hud_10000:	dc.l 10000
0001D572 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D576 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D57A 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D57E 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D582                            
0001D582                            ; ---------------------------------------------------------------------------
0001D582                            ; Subroutine to	load time numbers patterns
0001D582                            ; ---------------------------------------------------------------------------
0001D582                            
0001D582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D582                            
0001D582                            
0001D582                            Hud_Mins:				; XREF: Hud_ChkTime
0001D582 45F9 0001 D57E             		lea	(Hud_1).l,a2
0001D588 7C00                       		moveq	#0,d6
0001D58A 6000                       		bra.s	loc_1C9BA
0001D58C                            ; End of function Hud_Mins
0001D58C                            
0001D58C                            
0001D58C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D58C                            
0001D58C                            
0001D58C                            Hud_Secs:				; XREF: Hud_ChkTime
0001D58C 45F9 0001 D57A             		lea	(Hud_10).l,a2
0001D592 7C01                       		moveq	#1,d6
0001D594                            
0001D594                            loc_1C9BA:
0001D594 7800                       		moveq	#0,d4
0001D596 43FA 0000                  		lea	Art_Hud(pc),a1
0001D59A                            
0001D59A                            Hud_TimeLoop:
0001D59A 7400                       		moveq	#0,d2
0001D59C 261A                       		move.l	(a2)+,d3
0001D59E                            
0001D59E                            loc_1C9C4:
0001D59E 9283                       		sub.l	d3,d1
0001D5A0 6500                       		bcs.s	loc_1C9CC
0001D5A2 5242                       		addq.w	#1,d2
0001D5A4 60F8                       		bra.s	loc_1C9C4
0001D5A6                            ; ===========================================================================
0001D5A6                            
0001D5A6                            loc_1C9CC:
0001D5A6 D283                       		add.l	d3,d1
0001D5A8 4A42                       		tst.w	d2
0001D5AA 6700                       		beq.s	loc_1C9D6
0001D5AC 383C 0001                  		move.w	#1,d4
0001D5B0                            
0001D5B0                            loc_1C9D6:
0001D5B0 ED4A                       		lsl.w	#6,d2
0001D5B2 2D40 0004                  		move.l	d0,4(a6)
0001D5B6 47F1 2000                  		lea	(a1,d2.w),a3
0001D5BA 2C9B                       		move.l	(a3)+,(a6)
0001D5BC 2C9B                       		move.l	(a3)+,(a6)
0001D5BE 2C9B                       		move.l	(a3)+,(a6)
0001D5C0 2C9B                       		move.l	(a3)+,(a6)
0001D5C2 2C9B                       		move.l	(a3)+,(a6)
0001D5C4 2C9B                       		move.l	(a3)+,(a6)
0001D5C6 2C9B                       		move.l	(a3)+,(a6)
0001D5C8 2C9B                       		move.l	(a3)+,(a6)
0001D5CA 2C9B                       		move.l	(a3)+,(a6)
0001D5CC 2C9B                       		move.l	(a3)+,(a6)
0001D5CE 2C9B                       		move.l	(a3)+,(a6)
0001D5D0 2C9B                       		move.l	(a3)+,(a6)
0001D5D2 2C9B                       		move.l	(a3)+,(a6)
0001D5D4 2C9B                       		move.l	(a3)+,(a6)
0001D5D6 2C9B                       		move.l	(a3)+,(a6)
0001D5D8 2C9B                       		move.l	(a3)+,(a6)
0001D5DA 0680 0040 0000             		addi.l	#$400000,d0
0001D5E0 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D5E4                            
0001D5E4 4E75                       		rts	
0001D5E6                            ; End of function Hud_Secs
0001D5E6                            
0001D5E6                            ; ---------------------------------------------------------------------------
0001D5E6                            ; Subroutine to	load time/ring bonus numbers patterns
0001D5E6                            ; ---------------------------------------------------------------------------
0001D5E6                            
0001D5E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5E6                            
0001D5E6                            
0001D5E6                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D5E6 45F9 0001 D572             		lea	(Hud_1000).l,a2
0001D5EC 7C03                       		moveq	#3,d6
0001D5EE 7800                       		moveq	#0,d4
0001D5F0 43FA 0000                  		lea	Art_Hud(pc),a1
0001D5F4                            
0001D5F4                            Hud_BonusLoop:
0001D5F4 7400                       		moveq	#0,d2
0001D5F6 261A                       		move.l	(a2)+,d3
0001D5F8                            
0001D5F8                            loc_1CA1E:
0001D5F8 9283                       		sub.l	d3,d1
0001D5FA 6500                       		bcs.s	loc_1CA26
0001D5FC 5242                       		addq.w	#1,d2
0001D5FE 60F8                       		bra.s	loc_1CA1E
0001D600                            ; ===========================================================================
0001D600                            
0001D600                            loc_1CA26:
0001D600 D283                       		add.l	d3,d1
0001D602 4A42                       		tst.w	d2
0001D604 6700                       		beq.s	loc_1CA30
0001D606 383C 0001                  		move.w	#1,d4
0001D60A                            
0001D60A                            loc_1CA30:
0001D60A 4A44                       		tst.w	d4
0001D60C 6700                       		beq.s	Hud_ClrBonus
0001D60E ED4A                       		lsl.w	#6,d2
0001D610 47F1 2000                  		lea	(a1,d2.w),a3
0001D614 2C9B                       		move.l	(a3)+,(a6)
0001D616 2C9B                       		move.l	(a3)+,(a6)
0001D618 2C9B                       		move.l	(a3)+,(a6)
0001D61A 2C9B                       		move.l	(a3)+,(a6)
0001D61C 2C9B                       		move.l	(a3)+,(a6)
0001D61E 2C9B                       		move.l	(a3)+,(a6)
0001D620 2C9B                       		move.l	(a3)+,(a6)
0001D622 2C9B                       		move.l	(a3)+,(a6)
0001D624 2C9B                       		move.l	(a3)+,(a6)
0001D626 2C9B                       		move.l	(a3)+,(a6)
0001D628 2C9B                       		move.l	(a3)+,(a6)
0001D62A 2C9B                       		move.l	(a3)+,(a6)
0001D62C 2C9B                       		move.l	(a3)+,(a6)
0001D62E 2C9B                       		move.l	(a3)+,(a6)
0001D630 2C9B                       		move.l	(a3)+,(a6)
0001D632 2C9B                       		move.l	(a3)+,(a6)
0001D634                            
0001D634                            loc_1CA5A:
0001D634 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D638                            
0001D638 4E75                       		rts	
0001D63A                            ; ===========================================================================
0001D63A                            
0001D63A                            Hud_ClrBonus:
0001D63A 7A0F                       		moveq	#$F,d5
0001D63C                            
0001D63C                            Hud_ClrBonusLoop:
0001D63C 2CBC 0000 0000             		move.l	#0,(a6)
0001D642 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D646                            
0001D646 60EC                       		bra.s	loc_1CA5A
0001D648                            ; End of function Hud_TimeRingBonus
0001D648                            
0001D648                            ; ---------------------------------------------------------------------------
0001D648                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D648                            ; ---------------------------------------------------------------------------
0001D648                            
0001D648                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D648                            
0001D648                            
0001D648                            Hud_Lives:				; XREF: Hud_ChkLives
0001D648 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D64E 7200                       		moveq	#0,d1
0001D650 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D654 45F9 0001 D57A             		lea	(Hud_10).l,a2
0001D65A 7C01                       		moveq	#1,d6
0001D65C 7800                       		moveq	#0,d4
0001D65E 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D662                            
0001D662                            Hud_LivesLoop:
0001D662 2D40 0004                  		move.l	d0,4(a6)
0001D666 7400                       		moveq	#0,d2
0001D668 261A                       		move.l	(a2)+,d3
0001D66A                            
0001D66A                            loc_1CA90:
0001D66A 9283                       		sub.l	d3,d1
0001D66C 6500                       		bcs.s	loc_1CA98
0001D66E 5242                       		addq.w	#1,d2
0001D670 60F8                       		bra.s	loc_1CA90
0001D672                            ; ===========================================================================
0001D672                            
0001D672                            loc_1CA98:
0001D672 D283                       		add.l	d3,d1
0001D674 4A42                       		tst.w	d2
0001D676 6700                       		beq.s	loc_1CAA2
0001D678 383C 0001                  		move.w	#1,d4
0001D67C                            
0001D67C                            loc_1CAA2:
0001D67C 4A44                       		tst.w	d4
0001D67E 6700                       		beq.s	Hud_ClrLives
0001D680                            
0001D680                            loc_1CAA6:
0001D680 EB4A                       		lsl.w	#5,d2
0001D682 47F1 2000                  		lea	(a1,d2.w),a3
0001D686 2C9B                       		move.l	(a3)+,(a6)
0001D688 2C9B                       		move.l	(a3)+,(a6)
0001D68A 2C9B                       		move.l	(a3)+,(a6)
0001D68C 2C9B                       		move.l	(a3)+,(a6)
0001D68E 2C9B                       		move.l	(a3)+,(a6)
0001D690 2C9B                       		move.l	(a3)+,(a6)
0001D692 2C9B                       		move.l	(a3)+,(a6)
0001D694 2C9B                       		move.l	(a3)+,(a6)
0001D696                            
0001D696                            loc_1CABC:
0001D696 0680 0040 0000             		addi.l	#$400000,d0
0001D69C 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D6A0                            
0001D6A0 4E75                       		rts	
0001D6A2                            ; ===========================================================================
0001D6A2                            
0001D6A2                            Hud_ClrLives:
0001D6A2 4A46                       		tst.w	d6
0001D6A4 67DA                       		beq.s	loc_1CAA6
0001D6A6 7A07                       		moveq	#7,d5
0001D6A8                            
0001D6A8                            Hud_ClrLivesLoop:
0001D6A8 2CBC 0000 0000             		move.l	#0,(a6)
0001D6AE 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D6B2 60E2                       		bra.s	loc_1CABC
0001D6B4                            ; End of function Hud_Lives
0001D6B4                            
0001D6B4                            ; ===========================================================================
0001D6B4                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D9B4                            		even
0001D9B4                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001DAF4                            		even
0001DAF4                            ; ===========================================================================
0001DAF4                            ; ---------------------------------------------------------------------------
0001DAF4                            ; When debug mode is currently in use
0001DAF4                            ; ---------------------------------------------------------------------------
0001DAF4                            
0001DAF4                            DebugMode:				; XREF: Obj01; Obj09
0001DAF4 7000                       		moveq	#0,d0
0001DAF6 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001DAFA 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001DAFE 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001DB02                            ; ===========================================================================
0001DB02 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001DB04 0000                       		dc.w Debug_Skip-Debug_Index
0001DB06                            ; ===========================================================================
0001DB06                            
0001DB06                            Debug_Main:				; XREF: Debug_Index
0001DB06 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001DB0A 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001DB10 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001DB16 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001DB1C 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001DB22 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001DB28 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001DB2E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001DB34 117C 0000 001A             		move.b	#0,$1A(a0)
0001DB3A 117C 0000 001C             		move.b	#0,$1C(a0)
0001DB40 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001DB46 6600                       		bne.s	Debug_Zone	; if not, branch
0001DB48 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001DB4E 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001DB54 7006                       		moveq	#6,d0		; use 6th debug	item list
0001DB56 6000                       		bra.s	Debug_UseList
0001DB58                            ; ===========================================================================
0001DB58                            
0001DB58                            Debug_Zone:
0001DB58 7000                       		moveq	#0,d0
0001DB5A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DB5E                            
0001DB5E                            Debug_UseList:
0001DB5E 45F9 0000 0000             		lea	(DebugList).l,a2
0001DB64 D040                       		add.w	d0,d0
0001DB66 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DB6A 3C1A                       		move.w	(a2)+,d6
0001DB6C BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DB70 6200                       		bhi.s	loc_1CF9E
0001DB72 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001DB78                            
0001DB78                            loc_1CF9E:
0001DB78 6100 0000                  		bsr.w	Debug_ShowItem
0001DB7C 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DB82 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001DB88                            
0001DB88                            Debug_Skip:				; XREF: Debug_Index
0001DB88 7006                       		moveq	#6,d0
0001DB8A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001DB90 6700                       		beq.s	loc_1CFBE
0001DB92 7000                       		moveq	#0,d0
0001DB94 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DB98                            
0001DB98                            loc_1CFBE:
0001DB98 45F9 0000 0000             		lea	(DebugList).l,a2
0001DB9E D040                       		add.w	d0,d0
0001DBA0 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DBA4 3C1A                       		move.w	(a2)+,d6
0001DBA6 6100 0000                  		bsr.w	Debug_Control
0001DBAA 4EF9 0000 DE68             		jmp	DisplaySprite
0001DBB0                            
0001DBB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DBB0                            
0001DBB0                            
0001DBB0                            Debug_Control:
0001DBB0 7800                       		moveq	#0,d4
0001DBB2 323C 0001                  		move.w	#1,d1
0001DBB6 1838 F605                  		move.b	($FFFFF605).w,d4
0001DBBA 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001DBBE 6600                       		bne.s	loc_1D018	; if yes, branch
0001DBC0 1038 F604                  		move.b	($FFFFF604).w,d0
0001DBC4 0240 000F                  		andi.w	#$F,d0
0001DBC8 6600                       		bne.s	loc_1D000
0001DBCA 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DBD0 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001DBD6 6000 0000                  		bra.w	Debug_BackItem
0001DBDA                            ; ===========================================================================
0001DBDA                            
0001DBDA                            loc_1D000:
0001DBDA 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001DBDE 6600                       		bne.s	loc_1D01C
0001DBE0 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001DBE6 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001DBEA 6600                       		bne.s	loc_1D018
0001DBEC 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001DBF2                            
0001DBF2                            loc_1D018:
0001DBF2 1838 F604                  		move.b	($FFFFF604).w,d4
0001DBF6                            
0001DBF6                            loc_1D01C:
0001DBF6 7200                       		moveq	#0,d1
0001DBF8 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001DBFC 5241                       		addq.w	#1,d1
0001DBFE 4841                       		swap	d1
0001DC00 E881                       		asr.l	#4,d1
0001DC02 2428 000C                  		move.l	$C(a0),d2
0001DC06 2628 0008                  		move.l	8(a0),d3
0001DC0A 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001DC0E 6700                       		beq.s	loc_1D03C	; if not, branch
0001DC10 9481                       		sub.l	d1,d2
0001DC12 6400                       		bcc.s	loc_1D03C
0001DC14 7400                       		moveq	#0,d2
0001DC16                            
0001DC16                            loc_1D03C:
0001DC16 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001DC1A 6700                       		beq.s	loc_1D052	; if not, branch
0001DC1C D481                       		add.l	d1,d2
0001DC1E 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001DC24 6500                       		bcs.s	loc_1D052
0001DC26 243C 07FF 0000             		move.l	#$7FF0000,d2
0001DC2C                            
0001DC2C                            loc_1D052:
0001DC2C 0804 0002                  		btst	#2,d4
0001DC30 6700                       		beq.s	loc_1D05E
0001DC32 9681                       		sub.l	d1,d3
0001DC34 6400                       		bcc.s	loc_1D05E
0001DC36 7600                       		moveq	#0,d3
0001DC38                            
0001DC38                            loc_1D05E:
0001DC38 0804 0003                  		btst	#3,d4
0001DC3C 6700                       		beq.s	loc_1D066
0001DC3E D681                       		add.l	d1,d3
0001DC40                            
0001DC40                            loc_1D066:
0001DC40 2142 000C                  		move.l	d2,$C(a0)
0001DC44 2143 0008                  		move.l	d3,8(a0)
0001DC48                            
0001DC48                            Debug_BackItem:
0001DC48 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001DC4E 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DC50 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DC56 6700                       		beq.s	Debug_NextItem	; if not, branch
0001DC58 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001DC5C 6400                       		bcc.s	Debug_NoLoop
0001DC5E DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001DC62 6000                       		bra.s	Debug_NoLoop
0001DC64                            ; ===========================================================================
0001DC64                            
0001DC64                            Debug_NextItem:
0001DC64 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001DC6A 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DC6C 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001DC70 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DC74 6200                       		bhi.s	Debug_NoLoop
0001DC76 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001DC7C                            
0001DC7C                            Debug_NoLoop:
0001DC7C 6000 0000                  		bra.w	Debug_ShowItem
0001DC80                            ; ===========================================================================
0001DC80                            
0001DC80                            Debug_MakeItem:
0001DC80 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DC86 6700                       		beq.s	Debug_Exit	; if not, branch
0001DC88 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001DC8E 6600                       		bne.s	Debug_Exit
0001DC90 3368 0008 0008             		move.w	8(a0),8(a1)
0001DC96 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DC9C 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001DCA0 1368 0001 0001             		move.b	1(a0),1(a1)
0001DCA6 1368 0001 0022             		move.b	1(a0),$22(a1)
0001DCAC 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001DCB2 7000                       		moveq	#0,d0
0001DCB4 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DCB8 E748                       		lsl.w	#3,d0
0001DCBA 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001DCC0 4E75                       		rts	
0001DCC2                            ; ===========================================================================
0001DCC2                            
0001DCC2                            Debug_Exit:
0001DCC2 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DCC8 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001DCCA 7000                       		moveq	#0,d0
0001DCCC 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001DCD0 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DCD8 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DCDE 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DCE2 3140 000A                  		move.w	d0,$A(a0)
0001DCE6 3140 000E                  		move.w	d0,$E(a0)
0001DCEA 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DCF0 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DCF6 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DCFC 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DCFE 4278 F780                  		clr.w	($FFFFF780).w
0001DD02 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DD08 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DD10 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DD16 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DD1C 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DD22 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DD28                            
0001DD28                            Debug_DoNothing:
0001DD28 4E75                       		rts	
0001DD2A                            ; End of function Debug_Control
0001DD2A                            
0001DD2A                            
0001DD2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD2A                            
0001DD2A                            
0001DD2A                            Debug_ShowItem:				; XREF: Debug_Main
0001DD2A 7000                       		moveq	#0,d0
0001DD2C 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DD30 E748                       		lsl.w	#3,d0
0001DD32 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DD38 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DD3E 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DD44 4E75                       		rts	
0001DD46                            ; End of function Debug_ShowItem
0001DD46                            
0001DD46                            ; ===========================================================================
0001DD46                            ; ---------------------------------------------------------------------------
0001DD46                            ; Debug	list pointers
0001DD46                            ; ---------------------------------------------------------------------------
0001DD46                            DebugList:
0001DD46                            	include "_inc\Debug list pointers.asm"
0001DD46                            ; ---------------------------------------------------------------------------
0001DD46                            ; Debug	list pointers
0001DD46                            ; ---------------------------------------------------------------------------
0001DD46 0000                       	dc.w Debug_GHZ-DebugList
0001DD48 0000                       	dc.w Debug_LZ-DebugList
0001DD4A 0000                       	dc.w Debug_MZ-DebugList
0001DD4C 0000                       	dc.w Debug_SLZ-DebugList
0001DD4E 0000                       	dc.w Debug_SYZ-DebugList
0001DD50 0000                       	dc.w Debug_SBZ-DebugList
0001DD52 0000                       	dc.w Debug_Ending-DebugList
0001DD54 0000                       	dc.w Debug_GHZ-DebugList
0001DD54 0000                       	dc.w Debug_GHZ-DebugList
0001DD56                            
0001DD56                            ; ---------------------------------------------------------------------------
0001DD56                            ; Debug	list - Green Hill
0001DD56                            ; ---------------------------------------------------------------------------
0001DD56                            Debug_GHZ:
0001DD56                            	include "_inc\Debug list - GHZ.asm"
0001DD56                            ; ---------------------------------------------------------------------------
0001DD56                            ; Debug	list - Green Hill
0001DD56                            ; ---------------------------------------------------------------------------
0001DD56 0010                       	dc.w $10			; number of items in list
0001DD58 2500 A654                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DD5C 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DD60 2600 AC5A                  	dc.l Map_obj26+$26000000
0001DD64 0000 0680                  	dc.b 0,	0, 6, $80
0001DD68 1F00 9E4C                  	dc.l Map_obj1F+$1F000000
0001DD6C 0000 0400                  	dc.b 0,	0, 4, 0
0001DD70 2200 A108                  	dc.l Map_obj22+$22000000
0001DD74 0000 0444                  	dc.b 0,	0, 4, $44
0001DD78 2B00 B2CE                  	dc.l Map_obj2B+$2B000000
0001DD7C 0000 047B                  	dc.b 0,	0, 4, $7B
0001DD80 3600 D80A                  	dc.l Map_obj36+$36000000
0001DD84 0000 051B                  	dc.b 0,	0, 5, $1B
0001DD88 1800 875A                  	dc.l Map_obj18+$18000000
0001DD8C 0000 4000                  	dc.b 0,	0, $40,	0
0001DD90 3B00 D930                  	dc.l Map_obj3B+$3B000000
0001DD94 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DD98 4001 0002                  	dc.l Map_obj40+$40000000
0001DD9C 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DDA0 4100 E57C                  	dc.l Map_obj41+$41000000
0001DDA4 0000 0523                  	dc.b 0,	0, 5, $23
0001DDA8 4200 E7A2                  	dc.l Map_obj42+$42000000
0001DDAC 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DDB0 4400 EAB0                  	dc.l Map_obj44+$44000000
0001DDB4 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DDB8 1900 885A                  	dc.l Map_obj48+$19000000
0001DDBC 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DDC0 7901 7A54                  	dc.l Map_obj79+$79000000
0001DDC4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DDC8 4B00 A694                  	dc.l Map_obj4B+$4B000000
0001DDCC 0000 2400                  	dc.b 0,	0, $24,	0
0001DDD0 7D01 7BA4                  	dc.l Map_obj7D+$7D000000
0001DDD4 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DDD8                            	even
0001DDD8                            	even
0001DDD8                            
0001DDD8                            ; ---------------------------------------------------------------------------
0001DDD8                            ; Debug	list - Labyrinth
0001DDD8                            ; ---------------------------------------------------------------------------
0001DDD8                            Debug_LZ:
0001DDD8                            	include "_inc\Debug list - LZ.asm"
0001DDD8                            ; ---------------------------------------------------------------------------
0001DDD8                            ; Debug	list - Labyrinth
0001DDD8                            ; ---------------------------------------------------------------------------
0001DDD8 0019                       	dc.w $19
0001DDDA 2500 A654                  	dc.l Map_obj25+$25000000
0001DDDE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DDE2 2600 AC5A                  	dc.l Map_obj26+$26000000
0001DDE6 0000 0680                  	dc.b 0,	0, 6, $80
0001DDEA 4100 E57C                  	dc.l Map_obj41+$41000000
0001DDEE 0000 0523                  	dc.b 0,	0, 5, $23
0001DDF2 2C00 B37E                  	dc.l Map_obj2C+$2C000000
0001DDF6 0800 2486                  	dc.b 8,	0, $24,	$86
0001DDFA 2D00 B572                  	dc.l Map_obj2D+$2D000000
0001DDFE 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DE02 1601 27DC                  	dc.l Map_obj16+$16000000
0001DE06 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DE0A 1601 27DC                  	dc.l Map_obj16+$16000000
0001DE0E 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DE12 3300 CA2A                  	dc.l Map_obj33+$33000000
0001DE16 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DE1A 3200 C5EA                  	dc.l Map_obj32+$32000000
0001DE1E 0000 0513                  	dc.b 0,	0, 5, $13
0001DE22 3600 D80A                  	dc.l Map_obj36+$36000000
0001DE26 0000 051B                  	dc.b 0,	0, 5, $1B
0001DE2A 5201 08FE                  	dc.l Map_obj52a+$52000000
0001DE2E 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DE32 6101 2A04                  	dc.l Map_obj61+$61000000
0001DE36 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DE3A 6101 2A04                  	dc.l Map_obj61+$61000000
0001DE3E 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DE42 6101 2A04                  	dc.l Map_obj61+$61000000
0001DE46 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DE4A 6201 2B58                  	dc.l Map_obj62+$62000000
0001DE4E 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DE52 6101 2A04                  	dc.l Map_obj61+$61000000
0001DE56 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DE5A 6101 2A04                  	dc.l Map_obj61+$61000000
0001DE5E 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DE62 6301 2EB6                  	dc.l Map_obj63+$63000000
0001DE66 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DE6A 6001 2726                  	dc.l Map_obj60+$60000000
0001DE6E 0000 0467                  	dc.b 0,	0, 4, $67
0001DE72 6401 31FC                  	dc.l Map_obj64+$64000000
0001DE76 8413 8348                  	dc.b $84, $13, $83, $48
0001DE7A 6501 3384                  	dc.l Map_obj65+$65000000
0001DE7E 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DE82 6501 3384                  	dc.l Map_obj65+$65000000
0001DE86 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DE8A 0B01 1B76                  	dc.l Map_obj0B+$B000000
0001DE8E 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DE92 0C01 1C46                  	dc.l Map_obj0C+$C000000
0001DE96 0200 4328                  	dc.b 2,	0, $43,	$28
0001DE9A 7901 7A54                  	dc.l Map_obj79+$79000000
0001DE9E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DEA2                            	even
0001DEA2                            	even
0001DEA2                            
0001DEA2                            ; ---------------------------------------------------------------------------
0001DEA2                            ; Debug	list - Marble
0001DEA2                            ; ---------------------------------------------------------------------------
0001DEA2                            Debug_MZ:
0001DEA2                            	include "_inc\Debug list - MZ.asm"
0001DEA2                            ; ---------------------------------------------------------------------------
0001DEA2                            ; Debug	list - Marble
0001DEA2                            ; ---------------------------------------------------------------------------
0001DEA2 0012                       	dc.w $12
0001DEA4 2500 A654                  	dc.l Map_obj25+$25000000
0001DEA8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DEAC 2600 AC5A                  	dc.l Map_obj26+$26000000
0001DEB0 0000 0680                  	dc.b 0,	0, 6, $80
0001DEB4 2200 A108                  	dc.l Map_obj22+$22000000
0001DEB8 0000 0444                  	dc.b 0,	0, 4, $44
0001DEBC 3600 D80A                  	dc.l Map_obj36+$36000000
0001DEC0 0000 051B                  	dc.b 0,	0, 5, $1B
0001DEC4 4100 E57C                  	dc.l Map_obj41+$41000000
0001DEC8 0000 0523                  	dc.b 0,	0, 5, $23
0001DECC 1300 BAB4                  	dc.l Map_obj14+$13000000
0001DED0 0000 0345                  	dc.b 0,	0, 3, $45
0001DED4 4600 F162                  	dc.l Map_obj46+$46000000
0001DED8 0000 4000                  	dc.b 0,	0, $40,	0
0001DEDC 4C00 FAAE                  	dc.l Map_obj4C+$4C000000
0001DEE0 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DEE4 4E00 FD92                  	dc.l Map_obj4E+$4E000000
0001DEE8 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DEEC 3300 CA2A                  	dc.l Map_obj33+$33000000
0001DEF0 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DEF4 5001 0190                  	dc.l Map_obj50+$50000000
0001DEF8 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DEFC 5101 0632                  	dc.l Map_obj51+$51000000
0001DF00 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DF04 5201 08A8                  	dc.l Map_obj52+$52000000
0001DF08 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DF0C 5300 8DF2                  	dc.l Map_obj53+$53000000
0001DF10 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DF14 5400 FA74                  	dc.l Map_obj54+$54000000
0001DF18 0000 8680                  	dc.b 0,	0, $86,	$80
0001DF1C 5501 0A9C                  	dc.l Map_obj55+$55000000
0001DF20 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DF24 7801 76CE                  	dc.l Map_obj78+$78000000
0001DF28 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DF2C 7901 7A54                  	dc.l Map_obj79+$79000000
0001DF30 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DF34                            	even
0001DF34                            	even
0001DF34                            
0001DF34                            ; ---------------------------------------------------------------------------
0001DF34                            ; Debug	list - Star Light
0001DF34                            ; ---------------------------------------------------------------------------
0001DF34                            Debug_SLZ:
0001DF34                            	include "_inc\Debug list - SLZ.asm"
0001DF34                            ; ---------------------------------------------------------------------------
0001DF34                            ; Debug	list - Star Light
0001DF34                            ; ---------------------------------------------------------------------------
0001DF34 000F                       	dc.w $F
0001DF36 2500 A654                  	dc.l Map_obj25+$25000000
0001DF3A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DF3E 2600 AC5A                  	dc.l Map_obj26+$26000000
0001DF42 0000 0680                  	dc.b 0,	0, 6, $80
0001DF46 5901 159E                  	dc.l Map_obj59+$59000000
0001DF4A 0000 4000                  	dc.b 0,	0, $40,	0
0001DF4E 5300 8DF2                  	dc.l Map_obj53+$53000000
0001DF52 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DF56 1800 87B8                  	dc.l Map_obj18b+$18000000
0001DF5A 0000 4000                  	dc.b 0,	0, $40,	0
0001DF5E 5A01 16D8                  	dc.l Map_obj5A+$5A000000
0001DF62 0000 4000                  	dc.b 0,	0, $40,	0
0001DF66 5B01 1890                  	dc.l Map_obj5B+$5B000000
0001DF6A 0000 4000                  	dc.b 0,	0, $40,	0
0001DF6E 5D01 1E60                  	dc.l Map_obj5D+$5D000000
0001DF72 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DF76 5E01 21F2                  	dc.l Map_obj5E+$5E000000
0001DF7A 0000 0374                  	dc.b 0,	0, 3, $74
0001DF7E 4100 E57C                  	dc.l Map_obj41+$41000000
0001DF82 0000 0523                  	dc.b 0,	0, 5, $23
0001DF86 1300 BAB4                  	dc.l Map_obj14+$13000000
0001DF8A 0000 0480                  	dc.b 0,	0, 4, $80
0001DF8E 1C00 8F02                  	dc.l Map_obj1C+$1C000000
0001DF92 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DF96 5F01 2470                  	dc.l Map_obj5F+$5F000000
0001DF9A 0000 0400                  	dc.b 0,	0, 4, 0
0001DF9E 6001 2726                  	dc.l Map_obj60+$60000000
0001DFA2 0000 2429                  	dc.b 0,	0, $24,	$29
0001DFA6 7901 7A54                  	dc.l Map_obj79+$79000000
0001DFAA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DFAE                            	even
0001DFAE                            	even
0001DFAE                            
0001DFAE                            ; ---------------------------------------------------------------------------
0001DFAE                            ; Debug	list - Spring Yard
0001DFAE                            ; ---------------------------------------------------------------------------
0001DFAE                            Debug_SYZ:
0001DFAE                            	include "_inc\Debug list - SYZ.asm"
0001DFAE                            ; ---------------------------------------------------------------------------
0001DFAE                            ; Debug	list - Spring Yard
0001DFAE                            ; ---------------------------------------------------------------------------
0001DFAE 000F                       	dc.w $F
0001DFB0 2500 A654                  	dc.l Map_obj25+$25000000
0001DFB4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DFB8 2600 AC5A                  	dc.l Map_obj26+$26000000
0001DFBC 0000 0680                  	dc.b 0,	0, 6, $80
0001DFC0 3600 D80A                  	dc.l Map_obj36+$36000000
0001DFC4 0000 051B                  	dc.b 0,	0, 5, $1B
0001DFC8 4100 E57C                  	dc.l Map_obj41+$41000000
0001DFCC 0000 0523                  	dc.b 0,	0, 5, $23
0001DFD0 4300 EA02                  	dc.l Map_obj43+$43000000
0001DFD4 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DFD8 1200 F1E0                  	dc.l Map_obj12+$12000000
0001DFDC 0000 0000                  	dc.b 0,	0, 0, 0
0001DFE0 4700 F35C                  	dc.l Map_obj47+$47000000
0001DFE4 0000 0380                  	dc.b 0,	0, 3, $80
0001DFE8 1F00 9E4C                  	dc.l Map_obj1F+$1F000000
0001DFEC 0000 0400                  	dc.b 0,	0, 4, 0
0001DFF0 2200 A108                  	dc.l Map_obj22+$22000000
0001DFF4 0000 0444                  	dc.b 0,	0, 4, $44
0001DFF8 5001 0190                  	dc.l Map_obj50+$50000000
0001DFFC 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E000 1800 87A6                  	dc.l Map_obj18a+$18000000
0001E004 0000 4000                  	dc.b 0,	0, $40,	0
0001E008 5601 0F5E                  	dc.l Map_obj56+$56000000
0001E00C 0000 4000                  	dc.b 0,	0, $40,	0
0001E010 3200 C5EA                  	dc.l Map_obj32+$32000000
0001E014 0000 0513                  	dc.b 0,	0, 5, $13
0001E018 7801 76CE                  	dc.l Map_obj78+$78000000
0001E01C 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E020 7901 7A54                  	dc.l Map_obj79+$79000000
0001E024 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E028                            	even
0001E028                            	even
0001E028                            
0001E028                            ; ---------------------------------------------------------------------------
0001E028                            ; Debug	list - Scrap Brain
0001E028                            ; ---------------------------------------------------------------------------
0001E028                            Debug_SBZ:
0001E028                            	include "_inc\Debug list - SBZ.asm"
0001E028                            ; ---------------------------------------------------------------------------
0001E028                            ; Debug	list - Scrap Brain
0001E028                            ; ---------------------------------------------------------------------------
0001E028 001D                       	dc.w $1D
0001E02A 2500 A654                  	dc.l Map_obj25+$25000000
0001E02E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E032 2600 AC5A                  	dc.l Map_obj26+$26000000
0001E036 0000 0680                  	dc.b 0,	0, 6, $80
0001E03A 5F01 2470                  	dc.l Map_obj5F+$5F000000
0001E03E 0000 0400                  	dc.b 0,	0, 4, 0
0001E042 6001 2726                  	dc.l Map_obj60+$60000000
0001E046 0000 0429                  	dc.b 0,	0, 4, $29
0001E04A 7801 76CE                  	dc.l Map_obj78+$78000000
0001E04E 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001E052 1501 12FA                  	dc.l Map_obj15b+$15000000
0001E056 0702 4391                  	dc.b 7,	2, $43,	$91
0001E05A 6701 5FE6                  	dc.l Map_obj67+$67000000
0001E05E E000 C344                  	dc.b $E0, 0, $C3, $44
0001E062 5201 08A8                  	dc.l Map_obj52+$52000000
0001E066 2802 22C0                  	dc.b $28, 2, $22, $C0
0001E06A 3200 C5EA                  	dc.l Map_obj32+$32000000
0001E06E 0000 0513                  	dc.b 0,	0, 5, $13
0001E072 6901 6240                  	dc.l Map_obj69+$69000000
0001E076 0300 4492                  	dc.b 3,	0, $44,	$92
0001E07A 6901 629A                  	dc.l Map_obj69a+$69000000
0001E07E 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001E082 6A01 64F8                  	dc.l Map_obj6A+$6A000000
0001E086 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001E08A 5300 8DF2                  	dc.l Map_obj53+$53000000
0001E08E 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001E092 5201 08A8                  	dc.l Map_obj52+$52000000
0001E096 3903 4460                  	dc.b $39, 3, $44, $60
0001E09A 6B01 68C8                  	dc.l Map_obj6B+$6B000000
0001E09E 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001E0A2 2A00 9098                  	dc.l Map_obj2A+$2A000000
0001E0A6 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001E0AA 6B01 68C8                  	dc.l Map_obj6B+$6B000000
0001E0AE 1301 22C0                  	dc.b $13, 1, $22, $C0
0001E0B2 6A01 64F8                  	dc.l Map_obj6A+$6A000000
0001E0B6 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001E0BA 6B01 68C8                  	dc.l Map_obj6B+$6B000000
0001E0BE 2401 22C0                  	dc.b $24, 1, $22, $C0
0001E0C2 6A01 64F8                  	dc.l Map_obj6A+$6A000000
0001E0C6 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001E0CA 6B01 68C8                  	dc.l Map_obj6B+$6B000000
0001E0CE 3401 22C0                  	dc.b $34, 1, $22, $C0
0001E0D2 6C01 6A8A                  	dc.l Map_obj6C+$6C000000
0001E0D6 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001E0DA 6D00 EE52                  	dc.l Map_obj6D+$6D000000
0001E0DE 6400 83D9                  	dc.b $64, 0, $83, $D9
0001E0E2 6D00 EE52                  	dc.l Map_obj6D+$6D000000
0001E0E6 640B 83D9                  	dc.b $64, $B, $83, $D9
0001E0EA 6E01 6B40                  	dc.l Map_obj6E+$6E000000
0001E0EE 0400 047E                  	dc.b 4,	0, 4, $7E
0001E0F2 7001 6F92                  	dc.l Map_obj70+$70000000
0001E0F6 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001E0FA 7101 1D06                  	dc.l Map_obj71+$71000000
0001E0FE 1100 8680                  	dc.b $11, 0, $86, $80
0001E102 1E00 9556                  	dc.l Map_obj1E+$1E000000
0001E106 0400 2302                  	dc.b 4,	0, $23,	2
0001E10A 7901 7A54                  	dc.l Map_obj79+$79000000
0001E10E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E112                            	even
0001E112                            	even
0001E112                            
0001E112                            ; ---------------------------------------------------------------------------
0001E112                            ; Debug	list - ending sequence / special stage
0001E112                            ; ---------------------------------------------------------------------------
0001E112                            Debug_Ending:
0001E112                            	include "_inc\Debug list - Ending and SS.asm"
0001E112                            ; ---------------------------------------------------------------------------
0001E112                            ; Debug	list - ending sequence / special stage
0001E112                            ; ---------------------------------------------------------------------------
0001E112 000D                       	dc.w $D
0001E114 2500 A654                  	dc.l Map_obj25+$25000000
0001E118 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E11C 4700 F35C                  	dc.l Map_obj47+$47000000
0001E120 0000 0380                  	dc.b 0,	0, 3, $80
0001E124 2800 9B7E                  	dc.l Map_obj28a+$28000000
0001E128 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001E12C 2800 9B7E                  	dc.l Map_obj28a+$28000000
0001E130 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001E134 2800 9B7E                  	dc.l Map_obj28a+$28000000
0001E138 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001E13C 2800 9B66                  	dc.l Map_obj28+$28000000
0001E140 0D00 0553                  	dc.b $D, 0, 5, $53
0001E144 2800 9B66                  	dc.l Map_obj28+$28000000
0001E148 0E00 0553                  	dc.b $E, 0, 5, $53
0001E14C 2800 9B66                  	dc.l Map_obj28+$28000000
0001E150 0F00 0573                  	dc.b $F, 0, 5, $73
0001E154 2800 9B66                  	dc.l Map_obj28+$28000000
0001E158 1000 0573                  	dc.b $10, 0, 5,	$73
0001E15C 2800 9B7E                  	dc.l Map_obj28a+$28000000
0001E160 1100 0585                  	dc.b $11, 0, 5,	$85
0001E164 2800 9B96                  	dc.l Map_obj28b+$28000000
0001E168 1200 0593                  	dc.b $12, 0, 5,	$93
0001E16C 2800 9B7E                  	dc.l Map_obj28a+$28000000
0001E170 1300 0565                  	dc.b $13, 0, 5,	$65
0001E174 2800 9B96                  	dc.l Map_obj28b+$28000000
0001E178 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001E17C                            	even
0001E17C                            	even
0001E17C                            
0001E17C                            ; ---------------------------------------------------------------------------
0001E17C                            ; Main level load blocks
0001E17C                            ; ---------------------------------------------------------------------------
0001E17C                            MainLoadBlocks:
0001E17C                            	include "_inc\Main level load blocks.asm"
0001E17C                            ; ---------------------------------------------------------------------------
0001E17C                            ; Main level load blocks
0001E17C                            ;
0001E17C                            ; ===FORMAT===
0001E17C                            ; level	patterns + (1st	PLC num	* 10^6)
0001E17C                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001E17C                            ; 256x256 mappings
0001E17C                            ; blank, music (unused), pal index (unused), pal index
0001E17C                            ; ---------------------------------------------------------------------------
0001E17C 0000 0000                  	dc.l Nem_GHZ_2nd|4<<24
0001E180 0000 0000                  	dc.l Blk16_GHZ|5<<24
0001E184 0000 0000                  	dc.l Blk256_GHZ
0001E188 0081 0404                  	dc.b 0,	$81, 4,	4
0001E18C 0000 0000                  	dc.l Nem_LZ|6<<24
0001E190 0000 0000                  	dc.l Blk16_LZ|7<<24
0001E194 0000 0000                  	dc.l Blk256_LZ
0001E198 0082 0505                  	dc.b 0,	$82, 5,	5
0001E19C 0000 0000                  	dc.l Nem_MZ|8<<24
0001E1A0 0000 0000                  	dc.l Blk16_MZ|9<<24
0001E1A4 0000 0000                  	dc.l Blk256_MZ
0001E1A8 0083 0606                  	dc.b 0,	$83, 6,	6
0001E1AC 0000 0000                  	dc.l Nem_SLZ|$A<<24
0001E1B0 0000 0000                  	dc.l Blk16_SLZ|$B<<24
0001E1B4 0000 0000                  	dc.l Blk256_SLZ
0001E1B8 0084 0707                  	dc.b 0,	$84, 7,	7
0001E1BC 0000 0000                  	dc.l Nem_SYZ|$C<<24
0001E1C0 0000 0000                  	dc.l Blk16_SYZ|$D<<24
0001E1C4 0000 0000                  	dc.l Blk256_SYZ
0001E1C8 0085 0808                  	dc.b 0,	$85, 8,	8
0001E1CC 0000 0000                  	dc.l Nem_SBZ|$E<<24
0001E1D0 0000 0000                  	dc.l Blk16_SBZ|$F<<24
0001E1D4 0000 0000                  	dc.l Blk256_SBZ
0001E1D8 0086 0909                  	dc.b 0,	$86, 9,	9
0001E1DC 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001E1E0 0000 0000                  	dc.l Blk16_GHZ
0001E1E4 0000 0000                  	dc.l Blk256_GHZ
0001E1E8 0086 1313                  	dc.b 0,	$86, $13, $13
0001E1EC                            ; there you go lol
0001E1EC 0000 0000                  	dc.l Nem_BHZ|$20<<24 ; MAKOTO ZONE
0001E1F0 0000 0000                  	dc.l Blk16_BHZ|$21<<24
0001E1F4 0000 0000                  	dc.l Blk256_BHZ
0001E1F8 009E 1515                  	dc.b 0,	$9E, $15, $15
0001E1FC                            	even
0001E1FC                            	even
0001E1FC                            
0001E1FC                            ; ---------------------------------------------------------------------------
0001E1FC                            ; Pattern load cues
0001E1FC                            ; ---------------------------------------------------------------------------
0001E1FC                            ArtLoadCues:
0001E1FC                            	include "_inc\Pattern load cues.asm"
0001E1FC                            ; ---------------------------------------------------------------------------
0001E1FC                            ; Pattern load cues - index
0001E1FC                            ; ---------------------------------------------------------------------------
0001E1FC 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues	; 0
0001E200 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues	; 2
0001E204 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues		; 4
0001E208 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001E20C 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001E210 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001E214 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001E218 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001E21C 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues	; $10
0001E220 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001E224 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001E228 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001E22C 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001E230 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001E234 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001E238 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001E23C                            
0001E23C 0000 0000                  	dc.w PLC_BHZ-ArtLoadCues, PLC_BHZ2-ArtLoadCues		; $20
0001E240 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001E242 0000                       	dc.w PLC_TruthNuke-ArtLoadCues	; GMZ
0001E244                            ; ---------------------------------------------------------------------------
0001E244                            ; Pattern load cues - standard block 1
0001E244                            ; ---------------------------------------------------------------------------
0001E244 0004                       PLC_Main:	dc.w 4
0001E246 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001E24A F400                       		dc.w $F400
0001E24C 0000 0000                  		dc.l Nem_Hud		; HUD
0001E250 D940                       		dc.w $D940
0001E252 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001E256 FA80                       		dc.w $FA80
0001E258 0000 0000                  		dc.l Nem_Ring		; rings
0001E25C F640                       		dc.w $F640
0001E25E 0000 0000                  		dc.l Nem_Points		; points from enemy
0001E262 F2E0                       		dc.w $F2E0
0001E264                            ; ---------------------------------------------------------------------------
0001E264                            ; Pattern load cues - standard block 2
0001E264                            ; ---------------------------------------------------------------------------
0001E264 0002                       PLC_Main2:	dc.w 2
0001E266 0000 0000                  		dc.l Nem_Monitors	; monitors
0001E26A D000                       		dc.w $D000
0001E26C 0000 0000                  		dc.l Nem_Shield		; shield
0001E270 A820                       		dc.w $A820
0001E272 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001E276 AB80                       		dc.w $AB80
0001E278                            ; ---------------------------------------------------------------------------
0001E278                            ; Pattern load cues - explosion
0001E278                            ; ---------------------------------------------------------------------------
0001E278 0000                       PLC_Explode:	dc.w 0
0001E27A 0000 0000                  		dc.l Nem_Explode	; explosion
0001E27E B400                       		dc.w $B400
0001E280                            ; ---------------------------------------------------------------------------
0001E280                            ; Pattern load cues - game/time	over
0001E280                            ; ---------------------------------------------------------------------------
0001E280 0000                       PLC_GameOver:	dc.w 0
0001E282 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001E286 ABC0                       		dc.w $ABC0
0001E288                            ; ---------------------------------------------------------------------------
0001E288                            ; Pattern load cues - Green Hill
0001E288                            ; ---------------------------------------------------------------------------
0001E288 000B                       PLC_GHZ:	dc.w $B
0001E28A 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E28E 0000                       		dc.w 0
0001E290 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E294 39A0                       		dc.w $39A0
0001E296 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E29A 6B00                       		dc.w $6B00
0001E29C 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E2A0 7A00                       		dc.w $7A00
0001E2A2 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E2A6 8000                       		dc.w $8000
0001E2A8 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E2AC 8880                       		dc.w $8880
0001E2AE 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E2B2 8F60                       		dc.w $8F60
0001E2B4 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E2B8 9360                       		dc.w $9360
0001E2BA 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E2BE 9E00                       		dc.w $9E00
0001E2C0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E2C4 A360                       		dc.w $A360
0001E2C6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E2CA A460                       		dc.w $A460
0001E2CC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E2D0 A660                       		dc.w $A660
0001E2D2 0005                       PLC_GHZ2:	dc.w 5
0001E2D4 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E2D8 7000                       		dc.w $7000
0001E2DA 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E2DE 71C0                       		dc.w $71C0
0001E2E0 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E2E4 7300                       		dc.w $7300
0001E2E6 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E2EA 7540                       		dc.w $7540
0001E2EC 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E2F0 A1E0                       		dc.w $A1E0
0001E2F2 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E2F6 6980                       		dc.w $6980
0001E2F8                            ; ---------------------------------------------------------------------------
0001E2F8                            ; Pattern load cues - Labyrinth
0001E2F8                            ; ---------------------------------------------------------------------------
0001E2F8 000B                       PLC_LZ:		dc.w $B
0001E2FA 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E2FE 0000                       		dc.w 0
0001E300 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E304 3C00                       		dc.w $3C00
0001E306 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E30A 3E00                       		dc.w $3E00
0001E30C 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E310 4B20                       		dc.w $4B20
0001E312 0000 0000                  		dc.l Nem_Water		; water	surface
0001E316 6000                       		dc.w $6000
0001E318 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E31C 6200                       		dc.w $6200
0001E31E 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E322 6500                       		dc.w $6500
0001E324 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E328 6900                       		dc.w $6900
0001E32A 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E32E 7780                       		dc.w $7780
0001E330 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E334 7880                       		dc.w $7880
0001E336 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E33A 7980                       		dc.w $7980
0001E33C 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E340 94C0                       		dc.w $94C0
0001E342 000C                       PLC_LZ2:	dc.w $C
0001E344 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E348 7BC0                       		dc.w $7BC0
0001E34A 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E34E 7CC0                       		dc.w $7CC0
0001E350 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E354 7EC0                       		dc.w $7EC0
0001E356 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E35A 5D20                       		dc.w $5D20
0001E35C 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E360 8800                       		dc.w $8800
0001E362 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E366 89E0                       		dc.w $89E0
0001E368 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E36C 8CE0                       		dc.w $8CE0
0001E36E 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E372 90C0                       		dc.w $90C0
0001E374 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E378 A1E0                       		dc.w $A1E0
0001E37A 0000 0000                  		dc.l Nem_Cork		; cork block
0001E37E A000                       		dc.w $A000
0001E380 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E384 A360                       		dc.w $A360
0001E386 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E38A A460                       		dc.w $A460
0001E38C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E390 A660                       		dc.w $A660
0001E392                            ; ---------------------------------------------------------------------------
0001E392                            ; Pattern load cues - Marble
0001E392                            ; ---------------------------------------------------------------------------
0001E392 0009                       PLC_MZ:		dc.w 9
0001E394 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E398 0000                       		dc.w 0
0001E39A 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E39E 6000                       		dc.w $6000
0001E3A0 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E3A4 68A0                       		dc.w $68A0
0001E3A6 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E3AA 7000                       		dc.w $7000
0001E3AC 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E3B0 71C0                       		dc.w $71C0
0001E3B2 0000 0000                  		dc.l Nem_Lava		; lava
0001E3B6 7500                       		dc.w $7500
0001E3B8 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E3BC 8880                       		dc.w $8880
0001E3BE 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E3C2 8F60                       		dc.w $8F60
0001E3C4 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E3C8 9700                       		dc.w $9700
0001E3CA 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E3CE 9FE0                       		dc.w $9FE0
0001E3D0 0004                       PLC_MZ2:	dc.w 4
0001E3D2 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E3D6 A260                       		dc.w $A260
0001E3D8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E3DC A360                       		dc.w $A360
0001E3DE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E3E2 A460                       		dc.w $A460
0001E3E4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E3E8 A660                       		dc.w $A660
0001E3EA 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E3EE 5700                       		dc.w $5700
0001E3F0                            ; ---------------------------------------------------------------------------
0001E3F0                            ; Pattern load cues - Star Light
0001E3F0                            ; ---------------------------------------------------------------------------
0001E3F0 0008                       PLC_SLZ:	dc.w 8
0001E3F2 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E3F6 0000                       		dc.w 0
0001E3F8 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E3FC 8000                       		dc.w $8000
0001E3FE 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E402 8520                       		dc.w $8520
0001E404 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E408 9000                       		dc.w $9000
0001E40A 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E40E 9C00                       		dc.w $9C00
0001E410 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E414 A260                       		dc.w $A260
0001E416 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E41A A360                       		dc.w $A360
0001E41C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E420 A460                       		dc.w $A460
0001E422 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E426 A660                       		dc.w $A660
0001E428 0005                       PLC_SLZ2:	dc.w 5
0001E42A 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E42E 6E80                       		dc.w $6E80
0001E430 0000 0000                  		dc.l Nem_Fan		; fan
0001E434 7400                       		dc.w $7400
0001E436 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E43A 7980                       		dc.w $7980
0001E43C 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E440 7B80                       		dc.w $7B80
0001E442 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E446 9B00                       		dc.w $9B00
0001E448 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E44C 9E00                       		dc.w $9E00
0001E44E                            ; ---------------------------------------------------------------------------
0001E44E                            ; Pattern load cues - Spring Yard
0001E44E                            ; ---------------------------------------------------------------------------
0001E44E 0004                       PLC_SYZ:	dc.w 4
0001E450 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E454 0000                       		dc.w 0
0001E456 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E45A 8000                       		dc.w $8000
0001E45C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E460 8880                       		dc.w $8880
0001E462 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E466 8F60                       		dc.w $8F60
0001E468 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E46C 9700                       		dc.w $9700
0001E46E 0007                       PLC_SYZ2:	dc.w 7
0001E470 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E474 7000                       		dc.w $7000
0001E476 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E47A 72C0                       		dc.w $72C0
0001E47C 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E480 7740                       		dc.w $7740
0001E482 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E486 9FE0                       		dc.w $9FE0
0001E488 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E48C A1E0                       		dc.w $A1E0
0001E48E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E492 A360                       		dc.w $A360
0001E494 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E498 A460                       		dc.w $A460
0001E49A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E49E A660                       		dc.w $A660
0001E4A0                            ; ---------------------------------------------------------------------------
0001E4A0                            ; Pattern load cues - Scrap Brain
0001E4A0                            ; ---------------------------------------------------------------------------
0001E4A0 000B                       PLC_SBZ:	dc.w $B
0001E4A2 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E4A6 0000                       		dc.w 0
0001E4A8 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E4AC 5800                       		dc.w $5800
0001E4AE 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E4B2 5D00                       		dc.w $5D00
0001E4B4 0000 0000                  		dc.l Nem_Girder		; girder
0001E4B8 5E00                       		dc.w $5E00
0001E4BA 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E4BE 6040                       		dc.w $6040
0001E4C0 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E4C4 6880                       		dc.w $6880
0001E4C6 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E4CA 6900                       		dc.w $6900
0001E4CC 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E4D0 7220                       		dc.w $7220
0001E4D2 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E4D6 76A0                       		dc.w $76A0
0001E4D8 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E4DC 7B20                       		dc.w $7B20
0001E4DE 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E4E2 7EA0                       		dc.w $7EA0
0001E4E4 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E4E8 9860                       		dc.w $9860
0001E4EA 000C                       PLC_SBZ2:	dc.w $C
0001E4EC 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E4F0 5600                       		dc.w $5600
0001E4F2 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E4F6 8000                       		dc.w $8000
0001E4F8 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E4FC 8520                       		dc.w $8520
0001E4FE 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E502 8C00                       		dc.w $8C00
0001E504 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E508 8DE0                       		dc.w $8DE0
0001E50A 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E50E 8FC0                       		dc.w $8FC0
0001E510 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E514 9240                       		dc.w $9240
0001E516 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E51A 7F20                       		dc.w $7F20
0001E51C 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E520 9BE0                       		dc.w $9BE0
0001E522 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E526 A1E0                       		dc.w $A1E0
0001E528 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E52C A360                       		dc.w $A360
0001E52E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E532 A460                       		dc.w $A460
0001E534 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E538 A660                       		dc.w $A660
0001E53A                            ; ---------------------------------------------------------------------------
0001E53A                            ; Pattern load cues - DR. Breen Hill
0001E53A                            ; ---------------------------------------------------------------------------
0001E53A 000A                       PLC_BHZ:	dc.w $A
0001E53C 0000 0000                  		dc.l Nem_BHZ	; GHZ main patterns
0001E540 0000                       		dc.w 0
0001E542 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E546 6B00                       		dc.w $6B00
0001E548 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E54C 7A00                       		dc.w $7A00
0001E54E 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E552 8000                       		dc.w $8000
0001E554 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E558 8880                       		dc.w $8880
0001E55A 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E55E 8F60                       		dc.w $8F60
0001E560 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E564 9360                       		dc.w $9360
0001E566 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E56A 9E00                       		dc.w $9E00
0001E56C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E570 A360                       		dc.w $A360
0001E572 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E576 A460                       		dc.w $A460
0001E578 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E57C A660                       		dc.w $A660
0001E57E 0005                       PLC_BHZ2:	dc.w 5
0001E580 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E584 7000                       		dc.w $7000
0001E586 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E58A 71C0                       		dc.w $71C0
0001E58C 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E590 7300                       		dc.w $7300
0001E592 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E596 7540                       		dc.w $7540
0001E598 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E59C A1E0                       		dc.w $A1E0
0001E59E 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E5A2 6980                       		dc.w $6980
0001E5A4                            ; ---------------------------------------------------------------------------
0001E5A4                            ; Pattern load cues - title card
0001E5A4                            ; ---------------------------------------------------------------------------
0001E5A4 0000                       PLC_TitleCard:	dc.w 0
0001E5A6 0000 0000                  		dc.l Nem_TitleCard
0001E5AA B000                       		dc.w $B000
0001E5AC                            ; ---------------------------------------------------------------------------
0001E5AC                            ; Pattern load cues - act 3 boss
0001E5AC                            ; ---------------------------------------------------------------------------
0001E5AC 0005                       PLC_Boss:	dc.w 5
0001E5AE 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E5B2 8000                       		dc.w $8000
0001E5B4 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E5B8 8D80                       		dc.w $8D80
0001E5BA 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E5BE 93A0                       		dc.w $93A0
0001E5C0 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E5C4 A300                       		dc.w $A300
0001E5C6 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E5CA A300                       		dc.w $A300
0001E5CC 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E5D0 A540                       		dc.w $A540
0001E5D2                            ; ---------------------------------------------------------------------------
0001E5D2                            ; Pattern load cues - act 1/2 signpost
0001E5D2                            ; ---------------------------------------------------------------------------
0001E5D2 0002                       PLC_Signpost:	dc.w 2
0001E5D4 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E5D8 D000                       		dc.w $D000
0001E5DA 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E5DE 96C0                       		dc.w $96C0
0001E5E0 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E5E4 8C40                       		dc.w $8C40
0001E5E6                            ; ---------------------------------------------------------------------------
0001E5E6                            ; Pattern load cues - beta special stage warp effect
0001E5E6                            ; ---------------------------------------------------------------------------
0001E5E6 0000                       PLC_Warp:	dc.w 0
0001E5E8 0000 0000                  		dc.l Nem_Warp
0001E5EC A820                       		dc.w $A820
0001E5EE                            ; ---------------------------------------------------------------------------
0001E5EE                            ; Pattern load cues - special stage
0001E5EE                            ; ---------------------------------------------------------------------------
0001E5EE 0010                       PLC_SpeStage:	dc.w $10
0001E5F0 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E5F4 0000                       		dc.w 0
0001E5F6 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E5FA 0A20                       		dc.w $A20
0001E5FC 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E600 2840                       		dc.w $2840
0001E602 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E606 4760                       		dc.w $4760
0001E608 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E60C 4A20                       		dc.w $4A20
0001E60E 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E612 4C60                       		dc.w $4C60
0001E614 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E618 5E00                       		dc.w $5E00
0001E61A 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E61E 6E00                       		dc.w $6E00
0001E620 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E624 7E00                       		dc.w $7E00
0001E626 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E62A 8E00                       		dc.w $8E00
0001E62C 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E630 9E00                       		dc.w $9E00
0001E632 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E636 AE00                       		dc.w $AE00
0001E638 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E63C BE00                       		dc.w $BE00
0001E63E 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E642 EE00                       		dc.w $EE00
0001E644 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E648 F2E0                       		dc.w $F2E0
0001E64A 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E64E F400                       		dc.w $F400
0001E650 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E654 F520                       		dc.w $F520
0001E656 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E65A F2E0                       		dc.w $F2E0
0001E65C 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E660 F400                       		dc.w $F400
0001E662 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E666 F520                       		dc.w $F520
0001E668                            ; ---------------------------------------------------------------------------
0001E668                            ; Pattern load cues - GHZ animals
0001E668                            ; ---------------------------------------------------------------------------
0001E668 0001                       PLC_GHZAnimals:	dc.w 1
0001E66A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E66E B000                       		dc.w $B000
0001E670 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E674 B240                       		dc.w $B240
0001E676                            ; ---------------------------------------------------------------------------
0001E676                            ; Pattern load cues - LZ animals
0001E676                            ; ---------------------------------------------------------------------------
0001E676 0001                       PLC_LZAnimals:	dc.w 1
0001E678 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E67C B000                       		dc.w $B000
0001E67E 0000 0000                  		dc.l Nem_Seal		; seal
0001E682 B240                       		dc.w $B240
0001E684                            ; ---------------------------------------------------------------------------
0001E684                            ; Pattern load cues - MZ animals
0001E684                            ; ---------------------------------------------------------------------------
0001E684 0001                       PLC_MZAnimals:	dc.w 1
0001E686 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E68A B000                       		dc.w $B000
0001E68C 0000 0000                  		dc.l Nem_Seal		; seal
0001E690 B240                       		dc.w $B240
0001E692                            ; ---------------------------------------------------------------------------
0001E692                            ; Pattern load cues - SLZ animals
0001E692                            ; ---------------------------------------------------------------------------
0001E692 0001                       PLC_SLZAnimals:	dc.w 1
0001E694 0000 0000                  		dc.l Nem_Pig		; pig
0001E698 B000                       		dc.w $B000
0001E69A 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E69E B240                       		dc.w $B240
0001E6A0                            ; ---------------------------------------------------------------------------
0001E6A0                            ; Pattern load cues - SYZ animals
0001E6A0                            ; ---------------------------------------------------------------------------
0001E6A0 0001                       PLC_SYZAnimals:	dc.w 1
0001E6A2 0000 0000                  		dc.l Nem_Pig		; pig
0001E6A6 B000                       		dc.w $B000
0001E6A8 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E6AC B240                       		dc.w $B240
0001E6AE                            ; ---------------------------------------------------------------------------
0001E6AE                            ; Pattern load cues - SBZ animals
0001E6AE                            ; ---------------------------------------------------------------------------
0001E6AE 0001                       PLC_SBZAnimals:	dc.w 1
0001E6B0 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E6B4 B000                       		dc.w $B000
0001E6B6 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E6BA B240                       		dc.w $B240
0001E6BC                            ; ---------------------------------------------------------------------------
0001E6BC                            ; Pattern load cues - special stage results screen
0001E6BC                            ; ---------------------------------------------------------------------------
0001E6BC 0001                       PLC_SpeStResult:dc.w 1
0001E6BE 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E6C2 A820                       		dc.w $A820
0001E6C4 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E6C8 AA20                       		dc.w $AA20
0001E6CA                            ; ---------------------------------------------------------------------------
0001E6CA                            ; Pattern load cues - ending sequence
0001E6CA                            ; ---------------------------------------------------------------------------
0001E6CA 000E                       PLC_Ending:	dc.w $E
0001E6CC 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E6D0 0000                       		dc.w 0
0001E6D2 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E6D6 39A0                       		dc.w $39A0
0001E6D8 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E6DC 6B00                       		dc.w $6B00
0001E6DE 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E6E2 7400                       		dc.w $7400
0001E6E4 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E6E8 78A0                       		dc.w $78A0
0001E6EA 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E6EE 7C20                       		dc.w $7C20
0001E6F0 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E6F4 A480                       		dc.w $A480
0001E6F6 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E6FA AA60                       		dc.w $AA60
0001E6FC 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E700 ACA0                       		dc.w $ACA0
0001E702 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E706 AE60                       		dc.w $AE60
0001E708 0000 0000                  		dc.l Nem_Seal		; seal
0001E70C B0A0                       		dc.w $B0A0
0001E70E 0000 0000                  		dc.l Nem_Pig		; pig
0001E712 B260                       		dc.w $B260
0001E714 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E718 B4A0                       		dc.w $B4A0
0001E71A 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E71E B660                       		dc.w $B660
0001E720 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E724 B8A0                       		dc.w $B8A0
0001E726                            ; ---------------------------------------------------------------------------
0001E726                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E726                            ; ---------------------------------------------------------------------------
0001E726 0002                       PLC_TryAgain:	dc.w 2
0001E728 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E72C 78A0                       		dc.w $78A0
0001E72E 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E732 7C20                       		dc.w $7C20
0001E734 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E738 B400                       		dc.w $B400
0001E73A                            ; ---------------------------------------------------------------------------
0001E73A                            ; Pattern load cues - Eggman on SBZ 2
0001E73A                            ; ---------------------------------------------------------------------------
0001E73A 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E73C 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E740 A300                       		dc.w $A300
0001E742 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E746 8000                       		dc.w $8000
0001E748 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E74C 9400                       		dc.w $9400
0001E74E                            ; ---------------------------------------------------------------------------
0001E74E                            ; Pattern load cues - final boss
0001E74E                            ; ---------------------------------------------------------------------------
0001E74E 0004                       PLC_FZBoss:	dc.w 4
0001E750 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E754 7400                       		dc.w $7400
0001E756 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E75A 6000                       		dc.w $6000
0001E75C 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E760 8000                       		dc.w $8000
0001E762 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E766 8E00                       		dc.w $8E00
0001E768 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E76C A540                       		dc.w $A540
0001E76E                            ; ---------------------------------------------------------------------------
0001E76E                            ; Pattern load cues - Teto boss
0001E76E                            ; ---------------------------------------------------------------------------
0001E76E 0002                       PLC_TetoBoss:	dc.w 2
0001E770 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E774 8000                       		dc.w $8000
0001E776 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E77A 93A0                       		dc.w $93A0
0001E77C 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E780 9000                       		dc.w $9000
0001E782                            		; even
0001E782                            ; ---------------------------------------------------------------------------
0001E782                            ; Pattern load cues - Truth Nuke
0001E782                            ; ---------------------------------------------------------------------------
0001E782 0000                       PLC_TruthNuke:	dc.w 0
0001E784 0000 0000                  		dc.l Nem_TruthNuke	; GMZ
0001E788 0000                       		dc.w 0
0001E78A                            		even
0001E78A                            		even
0001E78A                            
0001E78A                            		incbin	misc\padding.bin
0001E878                            		even
0001E878                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001ECCE                            		even
0001ECCE                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001ED66                            		even
0001ED66                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EEA8                            		even
0001EEA8                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EEF6                            		even
0001EEF6                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001F00A                            		even
0001F00A                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FED4                            		even
0001FED4                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023FDA                            		even
00023FDA                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
0002400E                            		even
0002400E                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
000240CC                            		even
000240CC                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024574                            		even
00024574                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
000245D2                            		even
000245D2                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
000251D8                            		even
000251D8                            Eni_TruthNuke:	incbin	mapeni\truthnuke.bin	; GMZ
000252B6                            		even
000252B6                            Nem_TruthNuke:	incbin	artnem\truthnuke.bin	; GMZ: TRVTH NVKE
00028780                            		even
00028780                            ; ---------------------------------------------------------------------------
00028780                            ; Sprite mappings - Sonic
00028780                            ; ---------------------------------------------------------------------------
00028780                            Map_Sonic:
00028780                            	include "_maps\Sonic.asm"
00028780                            Map_a933:
00028780 0000                       Map_a933_0: 	dc.w Map_a933_E0-Map_a933
00028782 0000                       Map_a933_2: 	dc.w Map_a933_E1-Map_a933
00028784 0000                       Map_a933_4: 	dc.w Map_a933_EC-Map_a933
00028786 0000                       Map_a933_6: 	dc.w Map_a933_FC-Map_a933
00028788 0000                       Map_a933_8: 	dc.w Map_a933_10C-Map_a933
0002878A 0000                       Map_a933_A: 	dc.w Map_a933_11C-Map_a933
0002878C 0000                       Map_a933_C: 	dc.w Map_a933_12C-Map_a933
0002878E 0000                       Map_a933_E: 	dc.w Map_a933_141-Map_a933
00028790 0000                       Map_a933_10: 	dc.w Map_a933_14C-Map_a933
00028792 0000                       Map_a933_12: 	dc.w Map_a933_157-Map_a933
00028794 0000                       Map_a933_14: 	dc.w Map_a933_16C-Map_a933
00028796 0000                       Map_a933_16: 	dc.w Map_a933_177-Map_a933
00028798 0000                       Map_a933_18: 	dc.w Map_a933_187-Map_a933
0002879A 0000                       Map_a933_1A: 	dc.w Map_a933_1A1-Map_a933
0002879C 0000                       Map_a933_1C: 	dc.w Map_a933_1C0-Map_a933
0002879E 0000                       Map_a933_1E: 	dc.w Map_a933_1D5-Map_a933
000287A0 0000                       Map_a933_20: 	dc.w Map_a933_1EF-Map_a933
000287A2 0000                       Map_a933_22: 	dc.w Map_a933_204-Map_a933
000287A4 0000                       Map_a933_24: 	dc.w Map_a933_21E-Map_a933
000287A6 0000                       Map_a933_26: 	dc.w Map_a933_233-Map_a933
000287A8 0000                       Map_a933_28: 	dc.w Map_a933_23E-Map_a933
000287AA 0000                       Map_a933_2A: 	dc.w Map_a933_249-Map_a933
000287AC 0000                       Map_a933_2C: 	dc.w Map_a933_25E-Map_a933
000287AE 0000                       Map_a933_2E: 	dc.w Map_a933_269-Map_a933
000287B0 0000                       Map_a933_30: 	dc.w Map_a933_279-Map_a933
000287B2 0000                       Map_a933_32: 	dc.w Map_a933_298-Map_a933
000287B4 0000                       Map_a933_34: 	dc.w Map_a933_2B7-Map_a933
000287B6 0000                       Map_a933_36: 	dc.w Map_a933_2CC-Map_a933
000287B8 0000                       Map_a933_38: 	dc.w Map_a933_2E6-Map_a933
000287BA 0000                       Map_a933_3A: 	dc.w Map_a933_2FB-Map_a933
000287BC 0000                       Map_a933_3C: 	dc.w Map_a933_315-Map_a933
000287BE 0000                       Map_a933_3E: 	dc.w Map_a933_320-Map_a933
000287C0 0000                       Map_a933_40: 	dc.w Map_a933_32B-Map_a933
000287C2 0000                       Map_a933_42: 	dc.w Map_a933_336-Map_a933
000287C4 0000                       Map_a933_44: 	dc.w Map_a933_341-Map_a933
000287C6 0000                       Map_a933_46: 	dc.w Map_a933_356-Map_a933
000287C8 0000                       Map_a933_48: 	dc.w Map_a933_366-Map_a933
000287CA 0000                       Map_a933_4A: 	dc.w Map_a933_37B-Map_a933
000287CC 0000                       Map_a933_4C: 	dc.w Map_a933_38B-Map_a933
000287CE 0000                       Map_a933_4E: 	dc.w Map_a933_396-Map_a933
000287D0 0000                       Map_a933_50: 	dc.w Map_a933_3A1-Map_a933
000287D2 0000                       Map_a933_52: 	dc.w Map_a933_3AC-Map_a933
000287D4 0000                       Map_a933_54: 	dc.w Map_a933_3B7-Map_a933
000287D6 0000                       Map_a933_56: 	dc.w Map_a933_3CC-Map_a933
000287D8 0000                       Map_a933_58: 	dc.w Map_a933_3D7-Map_a933
000287DA 0000                       Map_a933_5A: 	dc.w Map_a933_3EC-Map_a933
000287DC 0000                       Map_a933_5C: 	dc.w Map_a933_3F7-Map_a933
000287DE 0000                       Map_a933_5E: 	dc.w Map_a933_3FD-Map_a933
000287E0 0000                       Map_a933_60: 	dc.w Map_a933_403-Map_a933
000287E2 0000                       Map_a933_62: 	dc.w Map_a933_409-Map_a933
000287E4 0000                       Map_a933_64: 	dc.w Map_a933_40F-Map_a933
000287E6 0000                       Map_a933_66: 	dc.w Map_a933_415-Map_a933
000287E8 0000                       Map_a933_68: 	dc.w Map_a933_420-Map_a933
000287EA 0000                       Map_a933_6A: 	dc.w Map_a933_426-Map_a933
000287EC 0000                       Map_a933_6C: 	dc.w Map_a933_431-Map_a933
000287EE 0000                       Map_a933_6E: 	dc.w Map_a933_437-Map_a933
000287F0 0000                       Map_a933_70: 	dc.w Map_a933_442-Map_a933
000287F2 0000                       Map_a933_72: 	dc.w Map_a933_457-Map_a933
000287F4 0000                       Map_a933_74: 	dc.w Map_a933_476-Map_a933
000287F6 0000                       Map_a933_76: 	dc.w Map_a933_481-Map_a933
000287F8 0000                       Map_a933_78: 	dc.w Map_a933_48C-Map_a933
000287FA 0000                       Map_a933_7A: 	dc.w Map_a933_4A1-Map_a933
000287FC 0000                       Map_a933_7C: 	dc.w Map_a933_4AC-Map_a933
000287FE 0000                       Map_a933_7E: 	dc.w Map_a933_4BC-Map_a933
00028800 0000                       Map_a933_80: 	dc.w Map_a933_4D1-Map_a933
00028802 0000                       Map_a933_82: 	dc.w Map_a933_4DC-Map_a933
00028804 0000                       Map_a933_84: 	dc.w Map_a933_4F1-Map_a933
00028806 0000                       Map_a933_86: 	dc.w Map_a933_506-Map_a933
00028808 0000                       Map_a933_88: 	dc.w Map_a933_520-Map_a933
0002880A 0000                       Map_a933_8A: 	dc.w Map_a933_53A-Map_a933
0002880C 0000                       Map_a933_8C: 	dc.w Map_a933_545-Map_a933
0002880E 0000                       Map_a933_8E: 	dc.w Map_a933_555-Map_a933
00028810 0000                       Map_a933_90: 	dc.w Map_a933_560-Map_a933
00028812 0000                       Map_a933_92: 	dc.w Map_a933_570-Map_a933
00028814 0000                       Map_a933_94: 	dc.w Map_a933_57B-Map_a933
00028816 0000                       Map_a933_96: 	dc.w Map_a933_58B-Map_a933
00028818 0000                       Map_a933_98: 	dc.w Map_a933_59B-Map_a933
0002881A 0000                       Map_a933_9A: 	dc.w Map_a933_5B5-Map_a933
0002881C 0000                       Map_a933_9C: 	dc.w Map_a933_5CF-Map_a933
0002881E 0000                       Map_a933_9E: 	dc.w Map_a933_5DA-Map_a933
00028820 0000                       Map_a933_A0: 	dc.w Map_a933_5EA-Map_a933
00028822 0000                       Map_a933_A2: 	dc.w Map_a933_5F0-Map_a933
00028824 0000                       Map_a933_A4: 	dc.w Map_a933_5F6-Map_a933
00028826 0000                       Map_a933_A6: 	dc.w Map_a933_5FC-Map_a933
00028828 0000                       Map_a933_A8: 	dc.w Map_a933_611-Map_a933
0002882A 0000                       Map_a933_AA: 	dc.w Map_a933_621-Map_a933
0002882C 0000                       Map_a933_AC: 	dc.w Map_a933_631-Map_a933
0002882E 0000                       Map_a933_AE: 	dc.w Map_a933_641-Map_a933
00028830 0000                       Map_a933_B0: 	dc.w Map_a933_64C-Map_a933
00028832 0000                       Map_a933_B2: 	dc.w Map_a933_657-Map_a933
00028834 0000                       Map_a933_B4: 	dc.w Map_a933_667-Map_a933
00028836 0000                       Map_a933_B6: 	dc.w Map_a933_672-Map_a933
00028838 0000                       Map_a933_B8: 	dc.w Map_a933_687-Map_a933
0002883A 0000                       Map_a933_BA: 	dc.w Map_a933_688-Map_a933
0002883C 0000                       Map_a933_BC: 	dc.w Map_a933_689-Map_a933
0002883E 0000                       Map_a933_BE: 	dc.w Map_a933_68A-Map_a933
00028840 0000                       Map_a933_C0: 	dc.w Map_a933_68B-Map_a933
00028842 0000                       Map_a933_C2: 	dc.w Map_a933_696-Map_a933
00028844 0000                       Map_a933_C4: 	dc.w Map_a933_697-Map_a933
00028846 0000                       Map_a933_C6: 	dc.w Map_a933_6A2-Map_a933
00028848 0000                       Map_a933_C8: 	dc.w Map_a933_6A3-Map_a933
0002884A 0000                       Map_a933_CA: 	dc.w Map_a933_6A4-Map_a933
0002884C 0000                       Map_a933_CC: 	dc.w Map_a933_6A5-Map_a933
0002884E 0000                       Map_a933_CE: 	dc.w Map_a933_6B0-Map_a933
00028850 0000                       Map_a933_D0: 	dc.w Map_a933_6B1-Map_a933
00028852 0000                       Map_a933_D2: 	dc.w Map_a933_6BC-Map_a933
00028854 0000                       Map_a933_D4: 	dc.w Map_a933_6BD-Map_a933
00028856 0000                       Map_a933_D6: 	dc.w Map_a933_6BE-Map_a933
00028858 0000                       Map_a933_D8: 	dc.w Map_a933_6BF-Map_a933
0002885A 0000                       Map_a933_DA: 	dc.w Map_a933_6CA-Map_a933
0002885C 0000                       Map_a933_DC: 	dc.w Map_a933_6CB-Map_a933
0002885E 0000                       Map_a933_DE: 	dc.w Map_a933_6D6-Map_a933
00028860 00                         Map_a933_E0: 	dc.b $0
00028861 02                         Map_a933_E1: 	dc.b $2
00028862 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00028867 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
0002886C 03                         Map_a933_EC: 	dc.b $3
0002886D EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00028872 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00028877 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002887C 03                         Map_a933_FC: 	dc.b $3
0002887D EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00028882 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00028887 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002888C 03                         Map_a933_10C: 	dc.b $3
0002888D EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00028892 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00028897 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002889C 03                         Map_a933_11C: 	dc.b $3
0002889D EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000288A2 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
000288A7 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000288AC 04                         Map_a933_12C: 	dc.b $4
000288AD EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
000288B2 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
000288B7 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
000288BC 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
000288C1 02                         Map_a933_141: 	dc.b $2
000288C2 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
000288C7 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
000288CC 02                         Map_a933_14C: 	dc.b $2
000288CD ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
000288D2 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
000288D7 04                         Map_a933_157: 	dc.b $4
000288D8 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000288DD FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
000288E2 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
000288E7 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
000288EC 02                         Map_a933_16C: 	dc.b $2
000288ED FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
000288F2 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
000288F7 03                         Map_a933_177: 	dc.b $3
000288F8 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
000288FD FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00028902 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00028907 05                         Map_a933_187: 	dc.b $5
00028908 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
0002890D EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00028912 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00028917 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
0002891C 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00028921 06                         Map_a933_1A1: 	dc.b $6
00028922 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00028927 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
0002892C FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00028931 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00028936 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
0002893B F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00028940 04                         Map_a933_1C0: 	dc.b $4
00028941 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00028946 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
0002894B FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00028950 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00028955 05                         Map_a933_1D5: 	dc.b $5
00028956 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
0002895B EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00028960 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00028965 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
0002896A 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
0002896F 04                         Map_a933_1EF: 	dc.b $4
00028970 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00028975 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
0002897A FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
0002897F 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00028984 05                         Map_a933_204: 	dc.b $5
00028985 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
0002898A ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
0002898F FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00028994 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00028999 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
0002899E 04                         Map_a933_21E: 	dc.b $4
0002899F F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
000289A4 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
000289A9 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
000289AE 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
000289B3 02                         Map_a933_233: 	dc.b $2
000289B4 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
000289B9 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
000289BE 02                         Map_a933_23E: 	dc.b $2
000289BF F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
000289C4 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
000289C9 04                         Map_a933_249: 	dc.b $4
000289CA F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
000289CF EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
000289D4 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
000289D9 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
000289DE 02                         Map_a933_25E: 	dc.b $2
000289DF F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
000289E4 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
000289E9 03                         Map_a933_269: 	dc.b $3
000289EA F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
000289EF EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
000289F4 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
000289F9 06                         Map_a933_279: 	dc.b $6
000289FA FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000289FF ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00028A04 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00028A09 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00028A0E 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00028A13 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00028A18 06                         Map_a933_298: 	dc.b $6
00028A19 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00028A1E E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00028A23 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00028A28 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00028A2D F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00028A32 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00028A37 04                         Map_a933_2B7: 	dc.b $4
00028A38 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00028A3D F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00028A42 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00028A47 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00028A4C 05                         Map_a933_2CC: 	dc.b $5
00028A4D FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00028A52 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00028A57 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00028A5C F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00028A61 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00028A66 04                         Map_a933_2E6: 	dc.b $4
00028A67 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00028A6C F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00028A71 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00028A76 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00028A7B 05                         Map_a933_2FB: 	dc.b $5
00028A7C FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00028A81 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00028A86 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00028A8B 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00028A90 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00028A95 02                         Map_a933_315: 	dc.b $2
00028A96 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00028A9B FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00028AA0 02                         Map_a933_320: 	dc.b $2
00028AA1 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00028AA6 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00028AAB 02                         Map_a933_32B: 	dc.b $2
00028AAC EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00028AB1 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00028AB6 02                         Map_a933_336: 	dc.b $2
00028AB7 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00028ABC FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00028AC1 04                         Map_a933_341: 	dc.b $4
00028AC2 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00028AC7 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00028ACC FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00028AD1 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00028AD6 03                         Map_a933_356: 	dc.b $3
00028AD7 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00028ADC EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00028AE1 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00028AE6 04                         Map_a933_366: 	dc.b $4
00028AE7 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00028AEC EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00028AF1 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00028AF6 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00028AFB 03                         Map_a933_37B: 	dc.b $3
00028AFC EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00028B01 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00028B06 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00028B0B 02                         Map_a933_38B: 	dc.b $2
00028B0C F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00028B11 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00028B16 02                         Map_a933_396: 	dc.b $2
00028B17 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00028B1C F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00028B21 02                         Map_a933_3A1: 	dc.b $2
00028B22 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00028B27 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00028B2C 02                         Map_a933_3AC: 	dc.b $2
00028B2D F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00028B32 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00028B37 04                         Map_a933_3B7: 	dc.b $4
00028B38 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00028B3D F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00028B42 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00028B47 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00028B4C 02                         Map_a933_3CC: 	dc.b $2
00028B4D F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00028B52 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00028B57 04                         Map_a933_3D7: 	dc.b $4
00028B58 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00028B5D F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00028B62 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00028B67 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00028B6C 02                         Map_a933_3EC: 	dc.b $2
00028B6D F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00028B72 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00028B77 01                         Map_a933_3F7: 	dc.b $1
00028B78 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00028B7D 01                         Map_a933_3FD: 	dc.b $1
00028B7E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00028B83 01                         Map_a933_403: 	dc.b $1
00028B84 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00028B89 01                         Map_a933_409: 	dc.b $1
00028B8A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00028B8F 01                         Map_a933_40F: 	dc.b $1
00028B90 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00028B95 02                         Map_a933_415: 	dc.b $2
00028B96 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00028B9B F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00028BA0 01                         Map_a933_420: 	dc.b $1
00028BA1 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00028BA6 02                         Map_a933_426: 	dc.b $2
00028BA7 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00028BAC 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00028BB1 01                         Map_a933_431: 	dc.b $1
00028BB2 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00028BB7 02                         Map_a933_437: 	dc.b $2
00028BB8 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00028BBD FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00028BC2 04                         Map_a933_442: 	dc.b $4
00028BC3 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00028BC8 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00028BCD 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00028BD2 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00028BD7 06                         Map_a933_457: 	dc.b $6
00028BD8 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00028BDD FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
00028BE2 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00028BE7 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00028BEC FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
00028BF1 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00028BF6 02                         Map_a933_476: 	dc.b $2
00028BF7 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00028BFC EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
00028C01 02                         Map_a933_481: 	dc.b $2
00028C02 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00028C07 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00028C0C 04                         Map_a933_48C: 	dc.b $4
00028C0D F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00028C12 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00028C17 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00028C1C 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00028C21 02                         Map_a933_4A1: 	dc.b $2
00028C22 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00028C27 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00028C2C 03                         Map_a933_4AC: 	dc.b $3
00028C2D F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
00028C32 FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00028C37 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00028C3C 04                         Map_a933_4BC: 	dc.b $4
00028C3D F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00028C42 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00028C47 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00028C4C 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00028C51 02                         Map_a933_4D1: 	dc.b $2
00028C52 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00028C57 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
00028C5C 04                         Map_a933_4DC: 	dc.b $4
00028C5D F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00028C62 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00028C67 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00028C6C F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00028C71 04                         Map_a933_4F1: 	dc.b $4
00028C72 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00028C77 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00028C7C F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00028C81 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00028C86 05                         Map_a933_506: 	dc.b $5
00028C87 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00028C8C F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00028C91 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00028C96 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00028C9B 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00028CA0 05                         Map_a933_520: 	dc.b $5
00028CA1 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00028CA6 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00028CAB 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00028CB0 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00028CB5 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00028CBA 02                         Map_a933_53A: 	dc.b $2
00028CBB ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00028CC0 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00028CC5 03                         Map_a933_545: 	dc.b $3
00028CC6 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00028CCB 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00028CD0 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00028CD5 02                         Map_a933_555: 	dc.b $2
00028CD6 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00028CDB 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00028CE0 03                         Map_a933_560: 	dc.b $3
00028CE1 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00028CE6 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00028CEB 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00028CF0 02                         Map_a933_570: 	dc.b $2
00028CF1 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00028CF6 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00028CFB 03                         Map_a933_57B: 	dc.b $3
00028CFC EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00028D01 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00028D06 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00028D0B 03                         Map_a933_58B: 	dc.b $3
00028D0C E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00028D11 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00028D16 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00028D1B 05                         Map_a933_59B: 	dc.b $5
00028D1C E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00028D21 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00028D26 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00028D2B 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00028D30 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00028D35 05                         Map_a933_5B5: 	dc.b $5
00028D36 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00028D3B E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00028D40 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00028D45 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00028D4A 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00028D4F 02                         Map_a933_5CF: 	dc.b $2
00028D50 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00028D55 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00028D5A 03                         Map_a933_5DA: 	dc.b $3
00028D5B EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00028D60 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00028D65 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00028D6A 01                         Map_a933_5EA: 	dc.b $1
00028D6B F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00028D70 01                         Map_a933_5F0: 	dc.b $1
00028D71 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00028D76 01                         Map_a933_5F6: 	dc.b $1
00028D77 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00028D7C 04                         Map_a933_5FC: 	dc.b $4
00028D7D F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
00028D82 F705 0808 04               	dc.b $F7, $5, $8, $8, $4
00028D87 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
00028D8C 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
00028D91 03                         Map_a933_611: 	dc.b $3
00028D92 F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00028D97 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
00028D9C 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00028DA1 03                         Map_a933_621: 	dc.b $3
00028DA2 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00028DA7 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00028DAC 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00028DB1 03                         Map_a933_631: 	dc.b $3
00028DB2 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00028DB7 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00028DBC 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00028DC1 02                         Map_a933_641: 	dc.b $2
00028DC2 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00028DC7 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00028DCC 02                         Map_a933_64C: 	dc.b $2
00028DCD F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00028DD2 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00028DD7 03                         Map_a933_657: 	dc.b $3
00028DD8 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
00028DDD 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
00028DE2 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00028DE7 02                         Map_a933_667: 	dc.b $2
00028DE8 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
00028DED EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
00028DF2 04                         Map_a933_672: 	dc.b $4
00028DF3 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00028DF8 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
00028DFD F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
00028E02 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00028E07 00                         Map_a933_687: 	dc.b $0
00028E08 00                         Map_a933_688: 	dc.b $0
00028E09 00                         Map_a933_689: 	dc.b $0
00028E0A 00                         Map_a933_68A: 	dc.b $0
00028E0B 02                         Map_a933_68B: 	dc.b $2
00028E0C F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00028E11 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00028E16 00                         Map_a933_696: 	dc.b $0
00028E17 02                         Map_a933_697: 	dc.b $2
00028E18 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00028E1D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00028E22 00                         Map_a933_6A2: 	dc.b $0
00028E23 00                         Map_a933_6A3: 	dc.b $0
00028E24 00                         Map_a933_6A4: 	dc.b $0
00028E25 02                         Map_a933_6A5: 	dc.b $2
00028E26 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00028E2B EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00028E30 00                         Map_a933_6B0: 	dc.b $0
00028E31 02                         Map_a933_6B1: 	dc.b $2
00028E32 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00028E37 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00028E3C 00                         Map_a933_6BC: 	dc.b $0
00028E3D 00                         Map_a933_6BD: 	dc.b $0
00028E3E 00                         Map_a933_6BE: 	dc.b $0
00028E3F 02                         Map_a933_6BF: 	dc.b $2
00028E40 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00028E45 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00028E4A 00                         Map_a933_6CA: 	dc.b $0
00028E4B 02                         Map_a933_6CB: 	dc.b $2
00028E4C F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00028E51 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00028E56 00                         Map_a933_6D6: 	dc.b $0
00028E58 00                         	even
00028E58 00                         	even
00028E58                            
00028E58                            ; ---------------------------------------------------------------------------
00028E58                            ; Uncompressed graphics	loading	array for Sonic
00028E58                            ; ---------------------------------------------------------------------------
00028E58                            SonicDynPLC:
00028E58                            	include "_inc\Sonic dynamic pattern load cues.asm"
00028E58                            DPLC_33c5:
00028E58 0000                       DPLC_33c5_0: 	dc.w DPLC_33c5_E0-DPLC_33c5
00028E5A 0000                       DPLC_33c5_2: 	dc.w DPLC_33c5_E1-DPLC_33c5
00028E5C 0000                       DPLC_33c5_4: 	dc.w DPLC_33c5_E6-DPLC_33c5
00028E5E 0000                       DPLC_33c5_6: 	dc.w DPLC_33c5_ED-DPLC_33c5
00028E60 0000                       DPLC_33c5_8: 	dc.w DPLC_33c5_F4-DPLC_33c5
00028E62 0000                       DPLC_33c5_A: 	dc.w DPLC_33c5_FB-DPLC_33c5
00028E64 0000                       DPLC_33c5_C: 	dc.w DPLC_33c5_102-DPLC_33c5
00028E66 0000                       DPLC_33c5_E: 	dc.w DPLC_33c5_10B-DPLC_33c5
00028E68 0000                       DPLC_33c5_10: 	dc.w DPLC_33c5_110-DPLC_33c5
00028E6A 0000                       DPLC_33c5_12: 	dc.w DPLC_33c5_115-DPLC_33c5
00028E6C 0000                       DPLC_33c5_14: 	dc.w DPLC_33c5_11E-DPLC_33c5
00028E6E 0000                       DPLC_33c5_16: 	dc.w DPLC_33c5_123-DPLC_33c5
00028E70 0000                       DPLC_33c5_18: 	dc.w DPLC_33c5_12A-DPLC_33c5
00028E72 0000                       DPLC_33c5_1A: 	dc.w DPLC_33c5_135-DPLC_33c5
00028E74 0000                       DPLC_33c5_1C: 	dc.w DPLC_33c5_142-DPLC_33c5
00028E76 0000                       DPLC_33c5_1E: 	dc.w DPLC_33c5_14B-DPLC_33c5
00028E78 0000                       DPLC_33c5_20: 	dc.w DPLC_33c5_156-DPLC_33c5
00028E7A 0000                       DPLC_33c5_22: 	dc.w DPLC_33c5_15F-DPLC_33c5
00028E7C 0000                       DPLC_33c5_24: 	dc.w DPLC_33c5_16A-DPLC_33c5
00028E7E 0000                       DPLC_33c5_26: 	dc.w DPLC_33c5_173-DPLC_33c5
00028E80 0000                       DPLC_33c5_28: 	dc.w DPLC_33c5_178-DPLC_33c5
00028E82 0000                       DPLC_33c5_2A: 	dc.w DPLC_33c5_17D-DPLC_33c5
00028E84 0000                       DPLC_33c5_2C: 	dc.w DPLC_33c5_186-DPLC_33c5
00028E86 0000                       DPLC_33c5_2E: 	dc.w DPLC_33c5_18B-DPLC_33c5
00028E88 0000                       DPLC_33c5_30: 	dc.w DPLC_33c5_192-DPLC_33c5
00028E8A 0000                       DPLC_33c5_32: 	dc.w DPLC_33c5_19F-DPLC_33c5
00028E8C 0000                       DPLC_33c5_34: 	dc.w DPLC_33c5_1AC-DPLC_33c5
00028E8E 0000                       DPLC_33c5_36: 	dc.w DPLC_33c5_1B5-DPLC_33c5
00028E90 0000                       DPLC_33c5_38: 	dc.w DPLC_33c5_1C0-DPLC_33c5
00028E92 0000                       DPLC_33c5_3A: 	dc.w DPLC_33c5_1C9-DPLC_33c5
00028E94 0000                       DPLC_33c5_3C: 	dc.w DPLC_33c5_1D4-DPLC_33c5
00028E96 0000                       DPLC_33c5_3E: 	dc.w DPLC_33c5_1D9-DPLC_33c5
00028E98 0000                       DPLC_33c5_40: 	dc.w DPLC_33c5_1DE-DPLC_33c5
00028E9A 0000                       DPLC_33c5_42: 	dc.w DPLC_33c5_1E3-DPLC_33c5
00028E9C 0000                       DPLC_33c5_44: 	dc.w DPLC_33c5_1E8-DPLC_33c5
00028E9E 0000                       DPLC_33c5_46: 	dc.w DPLC_33c5_1F1-DPLC_33c5
00028EA0 0000                       DPLC_33c5_48: 	dc.w DPLC_33c5_1F8-DPLC_33c5
00028EA2 0000                       DPLC_33c5_4A: 	dc.w DPLC_33c5_201-DPLC_33c5
00028EA4 0000                       DPLC_33c5_4C: 	dc.w DPLC_33c5_208-DPLC_33c5
00028EA6 0000                       DPLC_33c5_4E: 	dc.w DPLC_33c5_20D-DPLC_33c5
00028EA8 0000                       DPLC_33c5_50: 	dc.w DPLC_33c5_212-DPLC_33c5
00028EAA 0000                       DPLC_33c5_52: 	dc.w DPLC_33c5_217-DPLC_33c5
00028EAC 0000                       DPLC_33c5_54: 	dc.w DPLC_33c5_21C-DPLC_33c5
00028EAE 0000                       DPLC_33c5_56: 	dc.w DPLC_33c5_225-DPLC_33c5
00028EB0 0000                       DPLC_33c5_58: 	dc.w DPLC_33c5_22A-DPLC_33c5
00028EB2 0000                       DPLC_33c5_5A: 	dc.w DPLC_33c5_233-DPLC_33c5
00028EB4 0000                       DPLC_33c5_5C: 	dc.w DPLC_33c5_238-DPLC_33c5
00028EB6 0000                       DPLC_33c5_5E: 	dc.w DPLC_33c5_23B-DPLC_33c5
00028EB8 0000                       DPLC_33c5_60: 	dc.w DPLC_33c5_23E-DPLC_33c5
00028EBA 0000                       DPLC_33c5_62: 	dc.w DPLC_33c5_241-DPLC_33c5
00028EBC 0000                       DPLC_33c5_64: 	dc.w DPLC_33c5_244-DPLC_33c5
00028EBE 0000                       DPLC_33c5_66: 	dc.w DPLC_33c5_247-DPLC_33c5
00028EC0 0000                       DPLC_33c5_68: 	dc.w DPLC_33c5_24C-DPLC_33c5
00028EC2 0000                       DPLC_33c5_6A: 	dc.w DPLC_33c5_24F-DPLC_33c5
00028EC4 0000                       DPLC_33c5_6C: 	dc.w DPLC_33c5_254-DPLC_33c5
00028EC6 0000                       DPLC_33c5_6E: 	dc.w DPLC_33c5_257-DPLC_33c5
00028EC8 0000                       DPLC_33c5_70: 	dc.w DPLC_33c5_25C-DPLC_33c5
00028ECA 0000                       DPLC_33c5_72: 	dc.w DPLC_33c5_265-DPLC_33c5
00028ECC 0000                       DPLC_33c5_74: 	dc.w DPLC_33c5_26A-DPLC_33c5
00028ECE 0000                       DPLC_33c5_76: 	dc.w DPLC_33c5_26F-DPLC_33c5
00028ED0 0000                       DPLC_33c5_78: 	dc.w DPLC_33c5_274-DPLC_33c5
00028ED2 0000                       DPLC_33c5_7A: 	dc.w DPLC_33c5_279-DPLC_33c5
00028ED4 0000                       DPLC_33c5_7C: 	dc.w DPLC_33c5_27C-DPLC_33c5
00028ED6 0000                       DPLC_33c5_7E: 	dc.w DPLC_33c5_283-DPLC_33c5
00028ED8 0000                       DPLC_33c5_80: 	dc.w DPLC_33c5_288-DPLC_33c5
00028EDA 0000                       DPLC_33c5_82: 	dc.w DPLC_33c5_28B-DPLC_33c5
00028EDC 0000                       DPLC_33c5_84: 	dc.w DPLC_33c5_294-DPLC_33c5
00028EDE 0000                       DPLC_33c5_86: 	dc.w DPLC_33c5_29D-DPLC_33c5
00028EE0 0000                       DPLC_33c5_88: 	dc.w DPLC_33c5_2A8-DPLC_33c5
00028EE2 0000                       DPLC_33c5_8A: 	dc.w DPLC_33c5_2B3-DPLC_33c5
00028EE4 0000                       DPLC_33c5_8C: 	dc.w DPLC_33c5_2B8-DPLC_33c5
00028EE6 0000                       DPLC_33c5_8E: 	dc.w DPLC_33c5_2BF-DPLC_33c5
00028EE8 0000                       DPLC_33c5_90: 	dc.w DPLC_33c5_2C4-DPLC_33c5
00028EEA 0000                       DPLC_33c5_92: 	dc.w DPLC_33c5_2CB-DPLC_33c5
00028EEC 0000                       DPLC_33c5_94: 	dc.w DPLC_33c5_2D0-DPLC_33c5
00028EEE 0000                       DPLC_33c5_96: 	dc.w DPLC_33c5_2D7-DPLC_33c5
00028EF0 0000                       DPLC_33c5_98: 	dc.w DPLC_33c5_2DE-DPLC_33c5
00028EF2 0000                       DPLC_33c5_9A: 	dc.w DPLC_33c5_2E9-DPLC_33c5
00028EF4 0000                       DPLC_33c5_9C: 	dc.w DPLC_33c5_2F4-DPLC_33c5
00028EF6 0000                       DPLC_33c5_9E: 	dc.w DPLC_33c5_2F9-DPLC_33c5
00028EF8 0000                       DPLC_33c5_A0: 	dc.w DPLC_33c5_300-DPLC_33c5
00028EFA 0000                       DPLC_33c5_A2: 	dc.w DPLC_33c5_303-DPLC_33c5
00028EFC 0000                       DPLC_33c5_A4: 	dc.w DPLC_33c5_306-DPLC_33c5
00028EFE 0000                       DPLC_33c5_A6: 	dc.w DPLC_33c5_309-DPLC_33c5
00028F00 0000                       DPLC_33c5_A8: 	dc.w DPLC_33c5_30E-DPLC_33c5
00028F02 0000                       DPLC_33c5_AA: 	dc.w DPLC_33c5_315-DPLC_33c5
00028F04 0000                       DPLC_33c5_AC: 	dc.w DPLC_33c5_31C-DPLC_33c5
00028F06 0000                       DPLC_33c5_AE: 	dc.w DPLC_33c5_323-DPLC_33c5
00028F08 0000                       DPLC_33c5_B0: 	dc.w DPLC_33c5_328-DPLC_33c5
00028F0A 0000                       DPLC_33c5_B2: 	dc.w DPLC_33c5_32D-DPLC_33c5
00028F0C 0000                       DPLC_33c5_B4: 	dc.w DPLC_33c5_332-DPLC_33c5
00028F0E 0000                       DPLC_33c5_B6: 	dc.w DPLC_33c5_337-DPLC_33c5
00028F10 0000                       DPLC_33c5_B8: 	dc.w DPLC_33c5_33C-DPLC_33c5
00028F12 0000                       DPLC_33c5_BA: 	dc.w DPLC_33c5_33D-DPLC_33c5
00028F14 0000                       DPLC_33c5_BC: 	dc.w DPLC_33c5_33E-DPLC_33c5
00028F16 0000                       DPLC_33c5_BE: 	dc.w DPLC_33c5_33F-DPLC_33c5
00028F18 0000                       DPLC_33c5_C0: 	dc.w DPLC_33c5_340-DPLC_33c5
00028F1A 0000                       DPLC_33c5_C2: 	dc.w DPLC_33c5_345-DPLC_33c5
00028F1C 0000                       DPLC_33c5_C4: 	dc.w DPLC_33c5_346-DPLC_33c5
00028F1E 0000                       DPLC_33c5_C6: 	dc.w DPLC_33c5_34B-DPLC_33c5
00028F20 0000                       DPLC_33c5_C8: 	dc.w DPLC_33c5_34C-DPLC_33c5
00028F22 0000                       DPLC_33c5_CA: 	dc.w DPLC_33c5_34D-DPLC_33c5
00028F24 0000                       DPLC_33c5_CC: 	dc.w DPLC_33c5_34E-DPLC_33c5
00028F26 0000                       DPLC_33c5_CE: 	dc.w DPLC_33c5_353-DPLC_33c5
00028F28 0000                       DPLC_33c5_D0: 	dc.w DPLC_33c5_354-DPLC_33c5
00028F2A 0000                       DPLC_33c5_D2: 	dc.w DPLC_33c5_359-DPLC_33c5
00028F2C 0000                       DPLC_33c5_D4: 	dc.w DPLC_33c5_35A-DPLC_33c5
00028F2E 0000                       DPLC_33c5_D6: 	dc.w DPLC_33c5_35B-DPLC_33c5
00028F30 0000                       DPLC_33c5_D8: 	dc.w DPLC_33c5_35C-DPLC_33c5
00028F32 0000                       DPLC_33c5_DA: 	dc.w DPLC_33c5_361-DPLC_33c5
00028F34 0000                       DPLC_33c5_DC: 	dc.w DPLC_33c5_362-DPLC_33c5
00028F36 0000                       DPLC_33c5_DE: 	dc.w DPLC_33c5_367-DPLC_33c5
00028F38 00                         DPLC_33c5_E0: 	dc.b $0
00028F39 02                         DPLC_33c5_E1: 	dc.b $2
00028F3A F000                       	dc.b $F0, $0
00028F3C 1010                       	dc.b $10, $10
00028F3E 03                         DPLC_33c5_E6: 	dc.b $3
00028F3F 5012                       	dc.b $50, $12
00028F41 5018                       	dc.b $50, $18
00028F43 201E                       	dc.b $20, $1E
00028F45 03                         DPLC_33c5_ED: 	dc.b $3
00028F46 5021                       	dc.b $50, $21
00028F48 5018                       	dc.b $50, $18
00028F4A 201E                       	dc.b $20, $1E
00028F4C 03                         DPLC_33c5_F4: 	dc.b $3
00028F4D 5021                       	dc.b $50, $21
00028F4F 5018                       	dc.b $50, $18
00028F51 2027                       	dc.b $20, $27
00028F53 03                         DPLC_33c5_FB: 	dc.b $3
00028F54 802A                       	dc.b $80, $2A
00028F56 2033                       	dc.b $20, $33
00028F58 2036                       	dc.b $20, $36
00028F5A 04                         DPLC_33c5_102: 	dc.b $4
00028F5B 7039                       	dc.b $70, $39
00028F5D 5041                       	dc.b $50, $41
00028F5F 5047                       	dc.b $50, $47
00028F61 104D                       	dc.b $10, $4D
00028F63 02                         DPLC_33c5_10B: 	dc.b $2
00028F64 7039                       	dc.b $70, $39
00028F66 B04F                       	dc.b $B0, $4F
00028F68 02                         DPLC_33c5_110: 	dc.b $2
00028F69 505B                       	dc.b $50, $5B
00028F6B 8061                       	dc.b $80, $61
00028F6D 04                         DPLC_33c5_115: 	dc.b $4
00028F6E 505B                       	dc.b $50, $5B
00028F70 506A                       	dc.b $50, $6A
00028F72 5070                       	dc.b $50, $70
00028F74 1076                       	dc.b $10, $76
00028F76 02                         DPLC_33c5_11E: 	dc.b $2
00028F77 F4F0                       	dc.b $F4, $F0
00028F79 1500                       	dc.b $15, $0
00028F7B 03                         DPLC_33c5_123: 	dc.b $3
00028F7C 7039                       	dc.b $70, $39
00028F7E 3078                       	dc.b $30, $78
00028F80 507C                       	dc.b $50, $7C
00028F82 05                         DPLC_33c5_12A: 	dc.b $5
00028F83 5082                       	dc.b $50, $82
00028F85 5088                       	dc.b $50, $88
00028F87 208E                       	dc.b $20, $8E
00028F89 5091                       	dc.b $50, $91
00028F8B 0097                       	dc.b $0, $97
00028F8D 06                         DPLC_33c5_135: 	dc.b $6
00028F8E 5082                       	dc.b $50, $82
00028F90 1098                       	dc.b $10, $98
00028F92 309A                       	dc.b $30, $9A
00028F94 509E                       	dc.b $50, $9E
00028F96 30A4                       	dc.b $30, $A4
00028F98 00A8                       	dc.b $0, $A8
00028F9A 04                         DPLC_33c5_142: 	dc.b $4
00028F9B 50A9                       	dc.b $50, $A9
00028F9D 10AF                       	dc.b $10, $AF
00028F9F 70B1                       	dc.b $70, $B1
00028FA1 20B9                       	dc.b $20, $B9
00028FA3 05                         DPLC_33c5_14B: 	dc.b $5
00028FA4 50BC                       	dc.b $50, $BC
00028FA6 30C2                       	dc.b $30, $C2
00028FA8 70C6                       	dc.b $70, $C6
00028FAA 20CE                       	dc.b $20, $CE
00028FAC 10D1                       	dc.b $10, $D1
00028FAE 04                         DPLC_33c5_156: 	dc.b $4
00028FAF 50BC                       	dc.b $50, $BC
00028FB1 10D3                       	dc.b $10, $D3
00028FB3 70D5                       	dc.b $70, $D5
00028FB5 20DD                       	dc.b $20, $DD
00028FB7 05                         DPLC_33c5_15F: 	dc.b $5
00028FB8 5082                       	dc.b $50, $82
00028FBA 1098                       	dc.b $10, $98
00028FBC 008E                       	dc.b $0, $8E
00028FBE 70E0                       	dc.b $70, $E0
00028FC0 20E8                       	dc.b $20, $E8
00028FC2 04                         DPLC_33c5_16A: 	dc.b $4
00028FC3 70EB                       	dc.b $70, $EB
00028FC5 50F3                       	dc.b $50, $F3
00028FC7 10F9                       	dc.b $10, $F9
00028FC9 50FB                       	dc.b $50, $FB
00028FCB 02                         DPLC_33c5_173: 	dc.b $2
00028FCC 70EB                       	dc.b $70, $EB
00028FCE B101                       	dc.b $B1, $1
00028FD0 02                         DPLC_33c5_178: 	dc.b $2
00028FD1 510D                       	dc.b $51, $D
00028FD3 8113                       	dc.b $81, $13
00028FD5 04                         DPLC_33c5_17D: 	dc.b $4
00028FD6 510D                       	dc.b $51, $D
00028FD8 511C                       	dc.b $51, $1C
00028FDA 1122                       	dc.b $11, $22
00028FDC 5124                       	dc.b $51, $24
00028FDE 02                         DPLC_33c5_186: 	dc.b $2
00028FDF 510D                       	dc.b $51, $D
00028FE1 B12A                       	dc.b $B1, $2A
00028FE3 03                         DPLC_33c5_18B: 	dc.b $3
00028FE4 70EB                       	dc.b $70, $EB
00028FE6 0101                       	dc.b $1, $1
00028FE8 8136                       	dc.b $81, $36
00028FEA 06                         DPLC_33c5_192: 	dc.b $6
00028FEB 513F                       	dc.b $51, $3F
00028FED 1145                       	dc.b $11, $45
00028FEF 1147                       	dc.b $11, $47
00028FF1 8149                       	dc.b $81, $49
00028FF3 0152                       	dc.b $1, $52
00028FF5 0153                       	dc.b $1, $53
00028FF7 06                         DPLC_33c5_19F: 	dc.b $6
00028FF8 513F                       	dc.b $51, $3F
00028FFA 2154                       	dc.b $21, $54
00028FFC 1157                       	dc.b $11, $57
00028FFE 1159                       	dc.b $11, $59
00029000 815B                       	dc.b $81, $5B
00029002 0152                       	dc.b $1, $52
00029004 04                         DPLC_33c5_1AC: 	dc.b $4
00029005 5164                       	dc.b $51, $64
00029007 116A                       	dc.b $11, $6A
00029009 816C                       	dc.b $81, $6C
0002900B 1175                       	dc.b $11, $75
0002900D 05                         DPLC_33c5_1B5: 	dc.b $5
0002900E 5177                       	dc.b $51, $77
00029010 217D                       	dc.b $21, $7D
00029012 1180                       	dc.b $11, $80
00029014 7182                       	dc.b $71, $82
00029016 218A                       	dc.b $21, $8A
00029018 04                         DPLC_33c5_1C0: 	dc.b $4
00029019 5177                       	dc.b $51, $77
0002901B 118D                       	dc.b $11, $8D
0002901D 818F                       	dc.b $81, $8F
0002901F 1198                       	dc.b $11, $98
00029021 05                         DPLC_33c5_1C9: 	dc.b $5
00029022 513F                       	dc.b $51, $3F
00029024 819A                       	dc.b $81, $9A
00029026 1159                       	dc.b $11, $59
00029028 11A3                       	dc.b $11, $A3
0002902A 0152                       	dc.b $1, $52
0002902C 02                         DPLC_33c5_1D4: 	dc.b $2
0002902D 51A5                       	dc.b $51, $A5
0002902F B1AB                       	dc.b $B1, $AB
00029031 02                         DPLC_33c5_1D9: 	dc.b $2
00029032 505B                       	dc.b $50, $5B
00029034 B1B7                       	dc.b $B1, $B7
00029036 02                         DPLC_33c5_1DE: 	dc.b $2
00029037 51A5                       	dc.b $51, $A5
00029039 B1C3                       	dc.b $B1, $C3
0002903B 02                         DPLC_33c5_1E3: 	dc.b $2
0002903C 505B                       	dc.b $50, $5B
0002903E B1CF                       	dc.b $B1, $CF
00029040 04                         DPLC_33c5_1E8: 	dc.b $4
00029041 51DB                       	dc.b $51, $DB
00029043 11E1                       	dc.b $11, $E1
00029045 B1E3                       	dc.b $B1, $E3
00029047 01EF                       	dc.b $1, $EF
00029049 03                         DPLC_33c5_1F1: 	dc.b $3
0002904A 51F0                       	dc.b $51, $F0
0002904C 11F6                       	dc.b $11, $F6
0002904E B1F8                       	dc.b $B1, $F8
00029050 04                         DPLC_33c5_1F8: 	dc.b $4
00029051 51DB                       	dc.b $51, $DB
00029053 1204                       	dc.b $12, $4
00029055 B206                       	dc.b $B2, $6
00029057 01EF                       	dc.b $1, $EF
00029059 03                         DPLC_33c5_201: 	dc.b $3
0002905A 51F0                       	dc.b $51, $F0
0002905C 11F6                       	dc.b $11, $F6
0002905E B212                       	dc.b $B2, $12
00029060 02                         DPLC_33c5_208: 	dc.b $2
00029061 521E                       	dc.b $52, $1E
00029063 B224                       	dc.b $B2, $24
00029065 02                         DPLC_33c5_20D: 	dc.b $2
00029066 510D                       	dc.b $51, $D
00029068 B230                       	dc.b $B2, $30
0002906A 02                         DPLC_33c5_212: 	dc.b $2
0002906B 521E                       	dc.b $52, $1E
0002906D B23C                       	dc.b $B2, $3C
0002906F 02                         DPLC_33c5_217: 	dc.b $2
00029070 510D                       	dc.b $51, $D
00029072 B248                       	dc.b $B2, $48
00029074 04                         DPLC_33c5_21C: 	dc.b $4
00029075 5254                       	dc.b $52, $54
00029077 125A                       	dc.b $12, $5A
00029079 B25C                       	dc.b $B2, $5C
0002907B 0268                       	dc.b $2, $68
0002907D 02                         DPLC_33c5_225: 	dc.b $2
0002907E 7269                       	dc.b $72, $69
00029080 B271                       	dc.b $B2, $71
00029082 04                         DPLC_33c5_22A: 	dc.b $4
00029083 5254                       	dc.b $52, $54
00029085 127D                       	dc.b $12, $7D
00029087 B27F                       	dc.b $B2, $7F
00029089 0268                       	dc.b $2, $68
0002908B 02                         DPLC_33c5_233: 	dc.b $2
0002908C 7269                       	dc.b $72, $69
0002908E B28B                       	dc.b $B2, $8B
00029090 01                         DPLC_33c5_238: 	dc.b $1
00029091 F297                       	dc.b $F2, $97
00029093 01                         DPLC_33c5_23B: 	dc.b $1
00029094 F2A7                       	dc.b $F2, $A7
00029096 01                         DPLC_33c5_23E: 	dc.b $1
00029097 F2B7                       	dc.b $F2, $B7
00029099 01                         DPLC_33c5_241: 	dc.b $1
0002909A F2C7                       	dc.b $F2, $C7
0002909C 01                         DPLC_33c5_244: 	dc.b $1
0002909D F2D7                       	dc.b $F2, $D7
0002909F 02                         DPLC_33c5_247: 	dc.b $2
000290A0 B2E7                       	dc.b $B2, $E7
000290A2 22F3                       	dc.b $22, $F3
000290A4 01                         DPLC_33c5_24C: 	dc.b $1
000290A5 F2F6                       	dc.b $F2, $F6
000290A7 02                         DPLC_33c5_24F: 	dc.b $2
000290A8 B306                       	dc.b $B3, $6
000290AA 2312                       	dc.b $23, $12
000290AC 01                         DPLC_33c5_254: 	dc.b $1
000290AD F315                       	dc.b $F3, $15
000290AF 02                         DPLC_33c5_257: 	dc.b $2
000290B0 5325                       	dc.b $53, $25
000290B2 B32B                       	dc.b $B3, $2B
000290B4 04                         DPLC_33c5_25C: 	dc.b $4
000290B5 5337                       	dc.b $53, $37
000290B7 733D                       	dc.b $73, $3D
000290B9 1345                       	dc.b $13, $45
000290BB 0347                       	dc.b $3, $47
000290BD 02                         DPLC_33c5_265: 	dc.b $2
000290BE D348                       	dc.b $D3, $48
000290C0 34EC                       	dc.b $34, $EC
000290C2 02                         DPLC_33c5_26A: 	dc.b $2
000290C3 F528                       	dc.b $F5, $28
000290C5 0538                       	dc.b $5, $38
000290C7 02                         DPLC_33c5_26F: 	dc.b $2
000290C8 F539                       	dc.b $F5, $39
000290CA 0549                       	dc.b $5, $49
000290CC 02                         DPLC_33c5_274: 	dc.b $2
000290CD E356                       	dc.b $E3, $56
000290CF 054A                       	dc.b $5, $4A
000290D1 01                         DPLC_33c5_279: 	dc.b $1
000290D2 8365                       	dc.b $83, $65
000290D4 03                         DPLC_33c5_27C: 	dc.b $3
000290D5 736E                       	dc.b $73, $6E
000290D7 0376                       	dc.b $3, $76
000290D9 3377                       	dc.b $33, $77
000290DB 02                         DPLC_33c5_283: 	dc.b $2
000290DC E37B                       	dc.b $E3, $7B
000290DE 054A                       	dc.b $5, $4A
000290E0 01                         DPLC_33c5_288: 	dc.b $1
000290E1 D561                       	dc.b $D5, $61
000290E3 04                         DPLC_33c5_28B: 	dc.b $4
000290E4 B399                       	dc.b $B3, $99
000290E6 33A5                       	dc.b $33, $A5
000290E8 03A9                       	dc.b $3, $A9
000290EA 03AA                       	dc.b $3, $AA
000290EC 04                         DPLC_33c5_294: 	dc.b $4
000290ED B3AB                       	dc.b $B3, $AB
000290EF 33B7                       	dc.b $33, $B7
000290F1 03BB                       	dc.b $3, $BB
000290F3 03BC                       	dc.b $3, $BC
000290F5 05                         DPLC_33c5_29D: 	dc.b $5
000290F6 83BD                       	dc.b $83, $BD
000290F8 13C6                       	dc.b $13, $C6
000290FA 53C8                       	dc.b $53, $C8
000290FC 13CE                       	dc.b $13, $CE
000290FE 03D0                       	dc.b $3, $D0
00029100 05                         DPLC_33c5_2A8: 	dc.b $5
00029101 83D1                       	dc.b $83, $D1
00029103 13DA                       	dc.b $13, $DA
00029105 53C8                       	dc.b $53, $C8
00029107 13CE                       	dc.b $13, $CE
00029109 03D0                       	dc.b $3, $D0
0002910B 02                         DPLC_33c5_2B3: 	dc.b $2
0002910C 83DC                       	dc.b $83, $DC
0002910E 73E5                       	dc.b $73, $E5
00029110 03                         DPLC_33c5_2B8: 	dc.b $3
00029111 83ED                       	dc.b $83, $ED
00029113 23F6                       	dc.b $23, $F6
00029115 13F9                       	dc.b $13, $F9
00029117 02                         DPLC_33c5_2BF: 	dc.b $2
00029118 83FB                       	dc.b $83, $FB
0002911A 7404                       	dc.b $74, $4
0002911C 03                         DPLC_33c5_2C4: 	dc.b $3
0002911D 83ED                       	dc.b $83, $ED
0002911F 240C                       	dc.b $24, $C
00029121 140F                       	dc.b $14, $F
00029123 02                         DPLC_33c5_2CB: 	dc.b $2
00029124 5411                       	dc.b $54, $11
00029126 B417                       	dc.b $B4, $17
00029128 03                         DPLC_33c5_2D0: 	dc.b $3
00029129 8423                       	dc.b $84, $23
0002912B 342C                       	dc.b $34, $2C
0002912D 0430                       	dc.b $4, $30
0002912F 03                         DPLC_33c5_2D7: 	dc.b $3
00029130 7431                       	dc.b $74, $31
00029132 1439                       	dc.b $14, $39
00029134 B43B                       	dc.b $B4, $3B
00029136 05                         DPLC_33c5_2DE: 	dc.b $5
00029137 7447                       	dc.b $74, $47
00029139 144F                       	dc.b $14, $4F
0002913B 5451                       	dc.b $54, $51
0002913D 3457                       	dc.b $34, $57
0002913F 045B                       	dc.b $4, $5B
00029141 05                         DPLC_33c5_2E9: 	dc.b $5
00029142 745C                       	dc.b $74, $5C
00029144 144F                       	dc.b $14, $4F
00029146 5464                       	dc.b $54, $64
00029148 3457                       	dc.b $34, $57
0002914A 045B                       	dc.b $4, $5B
0002914C 02                         DPLC_33c5_2F4: 	dc.b $2
0002914D 246A                       	dc.b $24, $6A
0002914F F46D                       	dc.b $F4, $6D
00029151 03                         DPLC_33c5_2F9: 	dc.b $3
00029152 247D                       	dc.b $24, $7D
00029154 B480                       	dc.b $B4, $80
00029156 248C                       	dc.b $24, $8C
00029158 01                         DPLC_33c5_300: 	dc.b $1
00029159 B48F                       	dc.b $B4, $8F
0002915B 01                         DPLC_33c5_303: 	dc.b $1
0002915C 549B                       	dc.b $54, $9B
0002915E 01                         DPLC_33c5_306: 	dc.b $1
0002915F 14A1                       	dc.b $14, $A1
00029161 02                         DPLC_33c5_309: 	dc.b $2
00029162 E356                       	dc.b $E3, $56
00029164 054A                       	dc.b $5, $4A
00029166 03                         DPLC_33c5_30E: 	dc.b $3
00029167 736E                       	dc.b $73, $6E
00029169 0376                       	dc.b $3, $76
0002916B 3377                       	dc.b $33, $77
0002916D 03                         DPLC_33c5_315: 	dc.b $3
0002916E B4A3                       	dc.b $B4, $A3
00029170 14AF                       	dc.b $14, $AF
00029172 34B1                       	dc.b $34, $B1
00029174 03                         DPLC_33c5_31C: 	dc.b $3
00029175 54B5                       	dc.b $54, $B5
00029177 B4BB                       	dc.b $B4, $BB
00029179 1074                       	dc.b $10, $74
0002917B 02                         DPLC_33c5_323: 	dc.b $2
0002917C F4C7                       	dc.b $F4, $C7
0002917E 24D7                       	dc.b $24, $D7
00029180 02                         DPLC_33c5_328: 	dc.b $2
00029181 F4DA                       	dc.b $F4, $DA
00029183 14EA                       	dc.b $14, $EA
00029185 02                         DPLC_33c5_32D: 	dc.b $2
00029186 F502                       	dc.b $F5, $2
00029188 2512                       	dc.b $25, $12
0002918A 02                         DPLC_33c5_332: 	dc.b $2
0002918B F515                       	dc.b $F5, $15
0002918D 2525                       	dc.b $25, $25
0002918F 02                         DPLC_33c5_337: 	dc.b $2
00029190 F54B                       	dc.b $F5, $4B
00029192 755B                       	dc.b $75, $5B
00029194 00                         DPLC_33c5_33C: 	dc.b $0
00029195 00                         DPLC_33c5_33D: 	dc.b $0
00029196 00                         DPLC_33c5_33E: 	dc.b $0
00029197 00                         DPLC_33c5_33F: 	dc.b $0
00029198 02                         DPLC_33c5_340: 	dc.b $2
00029199 F4DA                       	dc.b $F4, $DA
0002919B 14EA                       	dc.b $14, $EA
0002919D 00                         DPLC_33c5_345: 	dc.b $0
0002919E 02                         DPLC_33c5_346: 	dc.b $2
0002919F F4DA                       	dc.b $F4, $DA
000291A1 14EA                       	dc.b $14, $EA
000291A3 00                         DPLC_33c5_34B: 	dc.b $0
000291A4 00                         DPLC_33c5_34C: 	dc.b $0
000291A5 00                         DPLC_33c5_34D: 	dc.b $0
000291A6 02                         DPLC_33c5_34E: 	dc.b $2
000291A7 F4DA                       	dc.b $F4, $DA
000291A9 14EA                       	dc.b $14, $EA
000291AB 00                         DPLC_33c5_353: 	dc.b $0
000291AC 02                         DPLC_33c5_354: 	dc.b $2
000291AD F4DA                       	dc.b $F4, $DA
000291AF 14EA                       	dc.b $14, $EA
000291B1 00                         DPLC_33c5_359: 	dc.b $0
000291B2 00                         DPLC_33c5_35A: 	dc.b $0
000291B3 00                         DPLC_33c5_35B: 	dc.b $0
000291B4 02                         DPLC_33c5_35C: 	dc.b $2
000291B5 F4DA                       	dc.b $F4, $DA
000291B7 14EA                       	dc.b $14, $EA
000291B9 00                         DPLC_33c5_361: 	dc.b $0
000291BA 02                         DPLC_33c5_362: 	dc.b $2
000291BB F4DA                       	dc.b $F4, $DA
000291BD 14EA                       	dc.b $14, $EA
000291BF 00                         DPLC_33c5_367: 	dc.b $0
000291C0                            	even
000291C0                            	even
000291C0                            
000291C0                            ; ---------------------------------------------------------------------------
000291C0                            ; Uncompressed graphics	- Sonic
000291C0                            ; ---------------------------------------------------------------------------
000291C0                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00033FA0                            		even
00033FA0                            ; ---------------------------------------------------------------------------
00033FA0                            ; Compressed graphics - various
00033FA0                            ; ---------------------------------------------------------------------------
00033FA0                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
000340A4                            		even
000340A4                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
000340DE                            		even
000340DE                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00034274                            		even
00034274                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
000343BC                            		even
000343BC                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
000344C6                            		even
000344C6                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00034518                            		even
00034518                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00034760                            		even
00034760                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
000348E6                            		even
000348E6                            ; ---------------------------------------------------------------------------
000348E6                            ; Sprite mappings - walls of the special stage
000348E6                            ; ---------------------------------------------------------------------------
000348E6                            Map_SSWalls:
000348E6                            	include "_maps\SSwalls.asm"
000348E6                            ; ---------------------------------------------------------------------------
000348E6                            ; Sprite mappings - walls of the special stage
000348E6                            ; ---------------------------------------------------------------------------
000348E6 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
000348EA 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
000348EE 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
000348F2 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
000348F6 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
000348FA 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
000348FE 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00034902 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00034906 01                         byte_2C584:	dc.b 1
00034907 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003490C 01                         byte_2C58A:	dc.b 1
0003490D F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00034912 01                         byte_2C590:	dc.b 1
00034913 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00034918 01                         byte_2C596:	dc.b 1
00034919 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003491E 01                         byte_2C59C:	dc.b 1
0003491F F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00034924 01                         byte_2C5A2:	dc.b 1
00034925 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003492A 01                         byte_2C5A8:	dc.b 1
0003492B F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00034930 01                         byte_2C5AE:	dc.b 1
00034931 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00034936 01                         byte_2C5B4:	dc.b 1
00034937 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003493C 01                         byte_2C5BA:	dc.b 1
0003493D F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00034942 01                         byte_2C5C0:	dc.b 1
00034943 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00034948 01                         byte_2C5C6:	dc.b 1
00034949 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003494E 01                         byte_2C5CC:	dc.b 1
0003494F F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00034954 01                         byte_2C5D2:	dc.b 1
00034955 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003495A 01                         byte_2C5D8:	dc.b 1
0003495B F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00034960 01                         byte_2C5DE:	dc.b 1
00034961 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00034966                            		even
00034966                            		even
00034966                            ; ---------------------------------------------------------------------------
00034966                            ; Compressed graphics - special stage
00034966                            ; ---------------------------------------------------------------------------
00034966                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0003529E                            		even
0003529E                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
000353EC                            		even
000353EC                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0003687E                            		even
0003687E                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00036B7E                            		even
00036B7E                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00037072                            		even
00037072                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00037160                            		even
00037160                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00037230                            		even
00037230                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00037326                            		even
00037326                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00037384                            		even
00037384                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00037416                            		even
00037416                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
000374D8                            		even
000374D8                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
000375A6                            		even
000375A6                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00037672                            		even
00037672                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0003773A                            		even
0003773A                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00037804                            		even
00037804                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000378D4                            		even
000378D4                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00037AC8                            		even
00037AC8                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00037C30                            		even
00037C30                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00037CE0                            		even
00037CE0                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00037DBA                            		even
00037DBA                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00037E3E                            		even
00037E3E                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00037FBC                            		even
00037FBC                            ; ---------------------------------------------------------------------------
00037FBC                            ; Compressed graphics - GHZ stuff
00037FBC                            ; ---------------------------------------------------------------------------
00037FBC                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00038006                            		even
00038006                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00038120                            		even
00038120                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0003820C                            		even
0003820C                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00038254                            		even
00038254                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
000383F2                            		even
000383F2                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
000384AE                            		even
000384AE                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
000386C2                            		even
000386C2                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
000387EE                            		even
000387EE                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0003891C                            		even
0003891C                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000389BA                            		even
000389BA                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00038A1A                            		even
00038A1A                            ; ---------------------------------------------------------------------------
00038A1A                            ; Compressed graphics - LZ stuff
00038A1A                            ; ---------------------------------------------------------------------------
00038A1A                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00038B3E                            		even
00038B3E                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00039332                            		even
00039332                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
000394B2                            		even
000394B2                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003961C                            		even
0003961C                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00039C72                            		even
00039C72                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00039D28                            		even
00039D28                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00039DCA                            		even
00039DCA                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00039F26                            		even
00039F26                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00039F8A                            		even
00039F8A                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003A0DC                            		even
0003A0DC                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003A5BE                            		even
0003A5BE                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003A72E                            		even
0003A72E                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0003A9E6                            		even
0003A9E6                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003AB1E                            		even
0003AB1E                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0003AC48                            		even
0003AC48                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0003AD58                            		even
0003AD58                            ; ---------------------------------------------------------------------------
0003AD58                            ; Compressed graphics - MZ stuff
0003AD58                            ; ---------------------------------------------------------------------------
0003AD58                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0003AFE6                            		even
0003AFE6                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
0003B0A4                            		even
0003B0A4                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
0003B15C                            		even
0003B15C                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0003B1B0                            		even
0003B1B0                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0003B48E                            		even
0003B48E                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
0003BDA4                            		even
0003BDA4                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003BF08                            		even
0003BF08                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
0003BF90                            		even
0003BF90                            ; ---------------------------------------------------------------------------
0003BF90                            ; Compressed graphics - SLZ stuff
0003BF90                            ; ---------------------------------------------------------------------------
0003BF90                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003C1CC                            		even
0003C1CC                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
0003C312                            		even
0003C312                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003C556                            		even
0003C556                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
0003C5B8                            		even
0003C5B8                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0003C69A                            		even
0003C69A                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0003C87C                            		even
0003C87C                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0003C988                            		even
0003C988                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003CA2C                            		even
0003CA2C                            ; ---------------------------------------------------------------------------
0003CA2C                            ; Compressed graphics - SYZ stuff
0003CA2C                            ; ---------------------------------------------------------------------------
0003CA2C                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0003CB96                            		even
0003CB96                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0003CBF8                            		even
0003CBF8                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003CCDA                            		even
0003CCDA                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0003CF68                            		even
0003CF68                            ; ---------------------------------------------------------------------------
0003CF68                            ; Compressed graphics - SBZ stuff
0003CF68                            ; ---------------------------------------------------------------------------
0003CF68                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003CFBC                            		even
0003CFBC                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0003D258                            		even
0003D258                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003D45C                            		even
0003D45C                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003D5FA                            		even
0003D5FA                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003D92A                            		even
0003D92A                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003DB08                            		even
0003DB08                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003DB60                            		even
0003DB60                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003DD2A 00                         		even
0003DD2A                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003DE28                            		even
0003DE28                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003DFB4                            		even
0003DFB4                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003E004                            		even
0003E004                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003E05C                            		even
0003E05C                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003E158                            		even
0003E158                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003E26E                            		even
0003E26E                            ; ---------------------------------------------------------------------------
0003E26E                            ; Compressed graphics - enemies
0003E26E                            ; ---------------------------------------------------------------------------
0003E26E                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003E6DC 00                         		even
0003E6DC                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003E886 00                         		even
0003E886                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003EC48 00                         		even
0003EC48                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003EE30                            		even
0003EE30                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003EFE8 00                         		even
0003EFE8                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003F132                            		even
0003F132                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003F3BC                            		even
0003F3BC                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003F9E0                            		even
0003F9E0                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003FBD6                            		even
0003FBD6                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
000401F4                            		even
000401F4                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
000405F4 00                         		even
000405F4                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
000408F0                            		even
000408F0                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00040B38                            		even
00040B38                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
00040DD0                            		even
00040DD0                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
00040FAE                            		even
00040FAE                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0004113C                            		even
0004113C                            ; ---------------------------------------------------------------------------
0004113C                            ; Compressed graphics - various
0004113C                            ; ---------------------------------------------------------------------------
0004113C                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0004166C                            		even
0004166C                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
00041762                            		even
00041762                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
00041868                            		even
00041868                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0004195C                            		even
0004195C                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
00041EA0                            		even
00041EA0                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
00042506                            		even
00042506                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
000425B6                            		even
000425B6                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
00042748                            		even
00042748                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0004285C                            		even
0004285C                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0004292E                            		even
0004292E                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
00042DAA                            		even
00042DAA                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
00042E6A                            		even
00042E6A                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
00042FDE                            		even
00042FDE                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
000432E0                            		even
000432E0                            ; ---------------------------------------------------------------------------
000432E0                            ; Compressed graphics - continue screen
000432E0                            ; ---------------------------------------------------------------------------
000432E0                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00043590                            		even
00043590                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
000437CA                            		even
000437CA                            ; ---------------------------------------------------------------------------
000437CA                            ; Compressed graphics - animals
000437CA                            ; ---------------------------------------------------------------------------
000437CA                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00043922                            		even
00043922                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00043A7E                            		even
00043A7E                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00043BFA                            		even
00043BFA                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00043D16                            		even
00043D16                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00043E4C                            		even
00043E4C                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00043F86                            		even
00043F86                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
000440E2                            		even
000440E2                            ; ---------------------------------------------------------------------------
000440E2                            ; Compressed graphics - primary patterns and block mappings
000440E2                            ; ---------------------------------------------------------------------------
000440E2                            Blk16_GHZ:	incbin	map16\ghz.bin
000449F6                            		even
000449F6                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00046304                            		even
00046304                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00047684                            		even
00047684                            Blk256_GHZ:	incbin	map256\ghz.bin
00049ABE                            		even
00049ABE                            Blk16_LZ:	incbin	map16\lz.bin
0004A1F8                            		even
0004A1F8                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0004C64C                            		even
0004C64C                            Blk256_LZ:	incbin	map256\lz.bin
0004EFCC                            		even
0004EFCC                            Blk16_MZ:	incbin	map16\mz.bin
0004F734                            		even
0004F734                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
00052070                            		even
00052070                            Blk256_MZ:	incbin	map256\mz.bin
00053886                            		even
00053886                            Blk16_SLZ:	incbin	map16\slz.bin
00053F50                            		even
00053F50                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00055EA4                            		even
00055EA4                            Blk256_SLZ:	incbin	map256\slz.bin
0005651E                            		even
0005651E                            Blk16_SYZ:	incbin	map16\syz.bin
00057144                            		even
00057144                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0005B6D6                            		even
0005B6D6                            Blk256_SYZ:	incbin	map256\syz.bin
0005D732                            		even
0005D732                            Blk16_SBZ:	incbin	map16\sbz.bin
0005E67A                            		even
0005E67A                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0006103E                            		even
0006103E                            Blk256_SBZ:	incbin	map256\sbz.bin
00063B34                            		even
00063B34                            Blk16_BHZ:	incbin	map16\bhz.bin
000643C2                            		even
000643C2                            Nem_BHZ:	incbin	artnem\8x8bhz.bin	; GHZ primary patterns
000671C0                            		even
000671C0                            Blk256_BHZ:	incbin	map256\bhz.bin
00068DEE                            		even
00068DEE                            ; ---------------------------------------------------------------------------
00068DEE                            ; Compressed graphics - bosses and ending sequence
00068DEE                            ; ---------------------------------------------------------------------------
00068DEE                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00069608 00                         		even
00069608                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00069C56                            		even
00069C56                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
00069CD0                            		even
00069CD0                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00069FBA                            		even
00069FBA                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006A83E                            		even
0006A83E                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006B594 00                         		even
0006B594                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006BCFC                            		even
0006BCFC                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0006C27C                            		even
0006C27C                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0006C39C                            		even
0006C39C                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0006C59A                            		even
0006C59A                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006D778                            		even
0006D778                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006E0BC                            		even
0006E0BC                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006E492                            		even
0006E492                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006EA22                            		even
0006EA22                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006ECAA                            		even
0006ECAA                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006F298 00                         		even
0006F298                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006F520                            		even
0006F520                            		incbin	misc\padding2.bin
0006F624                            		even
0006F624                            ; ---------------------------------------------------------------------------
0006F624                            ; Collision data
0006F624                            ; ---------------------------------------------------------------------------
0006F624                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0006F724                            		even
0006F724                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00070724                            		even
00070724                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00071724                            		even
00071724                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
000718DC 00                         		even
000718DC                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00071A44                            		even
00071A44                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00071BD4 00                         		even
00071BD4                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00071DC8                            		even
00071DC8                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00071FCE                            		even
00071FCE                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0007226C                            		even
0007226C                            Col_BHZ:	incbin	collide\bhz.bin		; GHZ index
000723F8                            		even
000723F8                            ; ---------------------------------------------------------------------------
000723F8                            ; Special layouts
000723F8                            ; ---------------------------------------------------------------------------
000723F8                            SS_1:		incbin	sslayout\1.bin
00072640                            		even
00072640                            SS_2:		incbin	sslayout\2.bin
000729F8                            		even
000729F8                            SS_3:		incbin	sslayout\3.bin
00072D54                            		even
00072D54                            SS_4:		incbin	sslayout\4.bin
0007322E                            		even
0007322E                            SS_5:		incbin	sslayout\5.bin
000736DE                            		even
000736DE                            SS_6:		incbin	sslayout\6.bin
000739D0                            		even
000739D0                            ; ---------------------------------------------------------------------------
000739D0                            ; Animated uncompressed graphics
000739D0                            ; ---------------------------------------------------------------------------
000739D0                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00073BD0                            		even
00073BD0                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00073FD0                            		even
00073FD0                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00074450                            		even
00074450                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00074750                            		even
00074750                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00074D50                            		even
00074D50                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00075050                            		even
00075050                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00075AD0                            		even
00075AD0                            
00075AD0                            ; ---------------------------------------------------------------------------
00075AD0                            ; Level	layout index
00075AD0                            ; ---------------------------------------------------------------------------
00075AD0 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00075AD6 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00075ADC 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00075AE2 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00075AE8 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00075AEE 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00075AF4 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00075AFA 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00075B00 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00075B06 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00075B0C 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00075B12 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00075B18 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00075B1E 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00075B24 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00075B2A 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00075B30 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00075B36 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00075B3C 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00075B42 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00075B48 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00075B4E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00075B54 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00075B5A 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00075B60 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00075B66 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00075B6C 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00075B72 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00075B78 0000 0000 0000             		dc.w Level_BHZ1-Level_Index, Level_BHZbg-Level_Index, byte_68D70-Level_Index
00075B7E 0000 0000 0000             		dc.w Level_BHZ2-Level_Index, Level_BHZbg-Level_Index, byte_68E3C-Level_Index
00075B84 0000 0000 0000             		dc.w Level_BHZ3-Level_Index, Level_BHZbg-Level_Index, byte_68F84-Level_Index
00075B8A 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00075B90                            
00075B90                            Level_GHZ1:	incbin	levels\ghz1.bin
00075C82                            		even
00075C82 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00075C86                            Level_GHZ2:	incbin	levels\ghz2.bin
00075D4E                            		even
00075D4E 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00075D52                            Level_GHZ3:	incbin	levels\ghz3.bin
00075E74                            		even
00075E74                            Level_GHZbg:	incbin	levels\ghzbg.bin
00075E96                            		even
00075E96 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00075E9A 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00075E9E                            
00075E9E                            Level_LZ1:	incbin	levels\lz1.bin
00075FA0                            		even
00075FA0                            Level_LZbg:	incbin	levels\lzbg.bin
000760A2                            		even
000760A2 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000760A6                            Level_LZ2:	incbin	levels\lz2.bin
00076140                            		even
00076140 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00076144                            Level_LZ3:	incbin	levels\lz3.bin
0007625E                            		even
0007625E 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00076262                            Level_SBZ3:	incbin	levels\sbz3.bin
0007631C                            		even
0007631C 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00076320                            
00076320                            Level_MZ1:	incbin	levels\mz1.bin
000763BE                            		even
000763BE                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00076438                            		even
00076438                            Level_MZ2:	incbin	levels\mz2.bin
000764DC                            		even
000764DC                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0007656E                            		even
0007656E 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00076572                            Level_MZ3:	incbin	levels\mz3.bin
00076654                            		even
00076654                            Level_MZ3bg:	incbin	levels\mz3bg.bin
000766F8 00                         		even
000766F8 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
000766FC 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00076700                            
00076700                            Level_SLZ1:	incbin	levels\slz1.bin
00076812                            		even
00076812                            Level_SLZbg:	incbin	levels\slzbg.bin
0007682C                            		even
0007682C                            Level_SLZ2:	incbin	levels\slz2.bin
0007691C                            		even
0007691C                            Level_SLZ3:	incbin	levels\slz3.bin
00076A36                            		even
00076A36 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00076A3A                            
00076A3A                            Level_SYZ1:	incbin	levels\syz1.bin
00076AF6 00                         		even
00076AF6                            Level_SYZbg:	incbin	levels\syzbg.bin
00076B30                            		even
00076B30 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00076B34                            Level_SYZ2:	incbin	levels\syz2.bin
00076C38                            		even
00076C38 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00076C3C                            Level_SYZ3:	incbin	levels\syz3.bin
00076D96 00                         		even
00076D96 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00076D9A 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00076D9E                            
00076D9E                            Level_SBZ1:	incbin	levels\sbz1.bin
00076EC0                            		even
00076EC0                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00076EFE                            		even
00076EFE                            Level_SBZ2:	incbin	levels\sbz2.bin
00077040                            		even
00077040                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
000771AA                            		even
000771AA 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
000771AE 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
000771B2                            Level_End:	incbin	levels\ending.bin
000771E2 00                         		even
000771E2 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
000771E6                            Level_BHZ1:	incbin	levels\bhz1.bin
000772D8                            		even
000772D8                            
000772D8                            Level_BHZ2:	incbin	levels\bhz2.bin
000773A0                            		even
000773A0                            
000773A0                            Level_BHZ3:	incbin	levels\bhz3.bin
000774C2                            		even
000774C2                            Level_BHZbg:	incbin	levels\bhzbg.bin
000775C4                            		even
000775C4                            ; ---------------------------------------------------------------------------
000775C4                            ; Animated uncompressed giant ring graphics
000775C4                            ; ---------------------------------------------------------------------------
000775C4                            Art_BigRing:	incbin	artunc\bigring.bin
00078204                            		even
00078204                            
00078204                            		incbin	misc\padding3.bin
000782A0                            		even
000782A0                            
000782A0                            ; ---------------------------------------------------------------------------
000782A0                            ; Sprite locations index
000782A0                            ; ---------------------------------------------------------------------------
000782A0 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782A4 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782A8 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782AC 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782B0 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782B4 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782B8 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782BC 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782C0 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782C4 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782C8 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782CC 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782D0 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782D4 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782D8 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782DC 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782E0 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782E4 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782E8 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782EC 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782F0 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782F4 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782F8 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782FC 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078300 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078304 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078308 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007830C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078310 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078314 0000 0000                  		dc.w ObjPos_BHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078318 0000 0000                  		dc.w ObjPos_BHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007831C 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078320                            ObjPos_LZxpf_Index:
00078320 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00078324 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_LZxpf_Index, ObjPos_LZ2pf2-ObjPos_LZxpf_Index
00078328 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_LZxpf_Index, ObjPos_LZ3pf2-ObjPos_LZxpf_Index
0007832C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00078330                            
00078330                            ObjPos_SBZ1pf_Index:
00078330 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00078334 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf4-ObjPos_SBZ1pf_Index
00078338 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf6-ObjPos_SBZ1pf_Index
0007833C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00078340 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00078346                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
00078BEC                            		even
00078BEC                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
00078EC2                            		even
00078EC2                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
000798A6                            		even
000798A6                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00079C4E                            		even
00079C4E                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00079F84                            		even
00079F84                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0007A49A                            		even
0007A49A                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0007A932                            		even
0007A932                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0007A964                            		even
0007A964                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007A996                            		even
0007A996                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007A9C8                            		even
0007A9C8                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0007A9FA                            		even
0007A9FA                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0007AA44                            		even
0007AA44                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0007AA82                            		even
0007AA82                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0007ADA0                            		even
0007ADA0                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0007B262                            		even
0007B262                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0007B7EA                            		even
0007B7EA                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0007B814                            		even
0007B814                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007BC7C                            		even
0007BC7C                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0007C25E                            		even
0007C25E                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0007C8D0                            		even
0007C8D0                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0007CE3A                            		even
0007CE3A                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0007D440                            		even
0007D440                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007DB7E                            		even
0007DB7E                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007E25C                            		even
0007E25C                            ObjPos_FZ:	incbin	objpos\fz.bin
0007E2A4                            		even
0007E2A4                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007E2D6                            		even
0007E2D6                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007E308                            		even
0007E308                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0007E33A                            		even
0007E33A                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007E36C                            		even
0007E36C                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007E39E                            		even
0007E39E                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007E3D6                            		even
0007E3D6                            ObjPos_End:	incbin	objpos\ending.bin
0007E532                            		even
0007E532                            ObjPos_BHZ1:	incbin	objpos\bhz1.bin
0007EB44                            		even
0007EB44                            ObjPos_BHZ2:	incbin	objpos\bhz2.bin
0007F108                            		even
0007F108                            ObjPos_BHZ3:	incbin	objpos\bhz3.bin
0007F7C2                            		even
0007F7C2 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0007F7C8                            ; ---------------------------------------------------------------------------
0007F7C8                            		incbin	misc\padding4.bin
0007FDF2                            		even
0007FDF2                            
0007FDF2 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0007FDF6 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0
0007FDFA 0000 0000                  Go_MusicIndex:	dc.l MusicIndex-4		; XREF: Sound_Music
0007FDFE 0000 0000                  Go_MusicIndex80:	dc.l MusicIndex80-4		; XREF: Sound_Music
0007FE02 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_SFX
0007FE06 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_Music
0007FE0A 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0007FE0E                            ; ---------------------------------------------------------------------------
0007FE0E                            ; PSG instruments used in music
0007FE0E                            ; ---------------------------------------------------------------------------
0007FE0E 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0007FE1A 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007FE26 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007FE32                            
0007FE32 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
0007FE42 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
0007FE49                            
0007FE49 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
0007FE50                            
0007FE50 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
0007FE60 80                                     dc.b    $80
0007FE61                            
0007FE61 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
0007FE6C                            
0007FE6C 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
0007FE7C 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
0007FE8C 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
0007FE96                            
0007FE96 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
0007FEA5                            
0007FEA5 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0007FEB5 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
0007FEC1                            
0007FEC1 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
0007FED1 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
0007FEE1 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
0007FEE9                            
0007FEE9 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
0007FEF9 80                                     dc.b    $80
0007FEFA                            
0007FEFA 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007FF02                            ; ---------------------------------------------------------------------------
0007FF02                            ; Music	Pointers
0007FF02                            ; ---------------------------------------------------------------------------
0007FF02                            MusicIndex:	
0007FF02 0000 0000                  		dc.l Music9F ; test
0007FF06 0000 0000                  		dc.l Music92 ; test
0007FF0A                            
0007FF0A                            MusicIndex80:
0007FF0A 0000 0000 0000 0000        		dc.l Music81, Music82
0007FF12 0000 0000 0000 0000        		dc.l Music83, Music84
0007FF1A 0000 0000 0000 0000        		dc.l Music85, Music86
0007FF22 0000 0000 0000 0000        		dc.l Music87, Music88
0007FF2A 0000 0000 0000 0000        		dc.l Music89, Music8A
0007FF32 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007FF3A 0000 0000 0000 0000        		dc.l Music8D, Music8E
0007FF42 0000 0000 0000 0000        		dc.l Music8F, Music90
0007FF4A 0000 0000 0000 0000        		dc.l Music91, Music92
0007FF52 0000 0000 0000 0000        		dc.l Music93, Music94
0007FF5A 0000 0000 0000 0000        		dc.l Music95, Music96
0007FF62 0000 0000 0000 0000        		dc.l Music97, Music98
0007FF6A 0000 0000 0000 0000        		dc.l Music99, Music9A
0007FF72 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007FF7A 0000 0000 0000 0000        		dc.l Music9D, Music9E
0007FF82 0000 0000                  		dc.l Music9F
0007FF86                            ; ---------------------------------------------------------------------------
0007FF86                            ; Type of sound	being played ($00 = music; $70 = normal	sound effect)
0007FF86                            ; ---------------------------------------------------------------------------
0007FF86                            SoundTypes:			
0007FF86 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $01
0007FF95 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $10
0007FFA5 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $20
0007FFB5 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $30
0007FFC5 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $40
0007FFD5 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $50
0007FFE5 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $60
0007FFF5 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $70
00080005 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $80
00080015 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
00080025 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
00080035 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
00080045 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
00080055 7070 7070 7070 7070 7070+  		dc.b $70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $D0
00080065 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $E0
00080075 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $F0
00080084                            		even
00080084                            
00080084                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080084                            
00080084                            
00080084                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00080084                            ; every 5th frame, update a second time (same technique as most SMPS versions, but more scuffed)
00080084 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; if in an NTSC region(!), branch ; TODO: use the VDP pal value instead
0008008A 6700                       		beq.s	@main
0008008C 7000                       		moveq	#0,d0			; PAL song timer "optimization"
0008008E 3038 FE0E                  		move.w	($FFFFFE0E).w,d0	; TODO: proper timer, this is prone to overflow and cause slight variations
00080092 80FC 0005                  		divu.w	#5,d0			;       also divisions are generally slow
00080096 4840                       		swap	d0
00080098 4A40                       		tst.w	d0
0008009A 6600                       		bne.s	@main
0008009C 6100 0000                  		bsr.w	@main
000800A0                            @main:
000800A0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000800A8 4E71                       		nop
000800AA 4E71                       		nop
000800AC 4E71                       		nop
000800AE                            ; loc_71B5A:
000800AE                            @wait:
000800AE 0839 0000 00A1 1100        		btst	#0,($A11100).l
000800B6 66F6                       		bne.s	@wait
000800B8                            
000800B8 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
000800C0 6700                       		beq.s	loc_71B82
000800C2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000800CA 4E71                       		nop
000800CC 4E71                       		nop
000800CE 4E71                       		nop
000800D0 4E71                       		nop
000800D2 4E71                       		nop
000800D4 60CA                       		bra.s	@main		; if you want really funky sound, use sub_71B4C instead ;)
000800D6                            ; ===========================================================================
000800D6                            
000800D6                            loc_71B82:
000800D6 4DF9 00FF F000             		lea	($FFF000).l,a6
000800DC 422E 000E                  		clr.b	$E(a6)
000800E0 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000800E4 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000800E8 532E 0001                  		subq.b	#1,1(a6)
000800EC 6600                       		bne.s	loc_71B9E
000800EE 4EBA 0000                  		jsr	sub_7260C(pc)
000800F2                            
000800F2                            loc_71B9E:
000800F2 102E 0004                  		move.b	4(a6),d0
000800F6 6700                       		beq.s	loc_71BA8
000800F8 4EBA 0000                  		jsr	sub_72504(pc)
000800FC                            
000800FC                            loc_71BA8:
000800FC 4A2E 0024                  		tst.b	$24(a6)
00080100 6700                       		beq.s	loc_71BB2
00080102 4EBA 0000                  		jsr	sub_7267C(pc)
00080106                            
00080106                            loc_71BB2:
00080106 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0008010A 6700                       		beq.s	loc_71BBC	; if not, branch
0008010C 4EBA 0000                  		jsr	Sound_Play(pc)
00080110                            
00080110                            loc_71BBC:
00080110 4BEE 0040                  		lea	$40(a6),a5
00080114 4A15                       		tst.b	(a5)
00080116 6A00                       		bpl.s	loc_71BD4
00080118 4EBA 0000                  		jsr	sub_71C4E(pc)
0008011C                            
0008011C                            loc_71BD4:
0008011C 422E 0008                  		clr.b	8(a6)
00080120 7E05                       		moveq	#5,d7
00080122                            
00080122                            loc_71BDA:
00080122 DAFC 0030                  		adda.w	#$30,a5
00080126 4A15                       		tst.b	(a5)
00080128 6A00                       		bpl.s	loc_71BE6
0008012A 4EBA 0000                  		jsr	sub_71CCA(pc)
0008012E                            
0008012E                            loc_71BE6:
0008012E 51CF FFF2                  		dbf	d7,loc_71BDA
00080132                            
00080132 7E02                       		moveq	#2,d7
00080134                            
00080134                            loc_71BEC:
00080134 DAFC 0030                  		adda.w	#$30,a5
00080138 4A15                       		tst.b	(a5)
0008013A 6A00                       		bpl.s	loc_71BF8
0008013C 4EBA 0000                  		jsr	sub_72850(pc)
00080140                            
00080140                            loc_71BF8:
00080140 51CF FFF2                  		dbf	d7,loc_71BEC
00080144                            
00080144 1D7C 0080 000E             		move.b	#$80,$E(a6)
0008014A 7E02                       		moveq	#2,d7
0008014C                            
0008014C                            loc_71C04:
0008014C DAFC 0030                  		adda.w	#$30,a5
00080150 4A15                       		tst.b	(a5)
00080152 6A00                       		bpl.s	loc_71C10
00080154 4EBA 0000                  		jsr	sub_71CCA(pc)
00080158                            
00080158                            loc_71C10:
00080158 51CF FFF2                  		dbf	d7,loc_71C04
0008015C                            
0008015C 7E02                       		moveq	#2,d7
0008015E                            
0008015E                            loc_71C16:
0008015E DAFC 0030                  		adda.w	#$30,a5
00080162 4A15                       		tst.b	(a5)
00080164 6A00                       		bpl.s	loc_71C22
00080166 4EBA 0000                  		jsr	sub_72850(pc)
0008016A                            
0008016A                            loc_71C22:
0008016A 51CF FFF2                  		dbf	d7,loc_71C16
0008016E 1D7C 0040 000E             		move.b	#$40,$E(a6)
00080174 DAFC 0030                  		adda.w	#$30,a5
00080178 4A15                       		tst.b	(a5)
0008017A 6A00                       		bpl.s	loc_71C38
0008017C 4EBA 0000                  		jsr	sub_71CCA(pc)
00080180                            
00080180                            loc_71C38:
00080180 DAFC 0030                  		adda.w	#$30,a5
00080184 4A15                       		tst.b	(a5)
00080186 6A00                       		bpl.s	loc_71C44
00080188 4EBA 0000                  		jsr	sub_72850(pc)
0008018C                            
0008018C                            loc_71C44:
0008018C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00080194 4E75                       		rts	
00080196                            ; End of function sub_71B4C
00080196                            
00080196                            
00080196                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080196                            
00080196                            
00080196                            sub_71C4E:				; XREF: sub_71B4C
00080196 532D 000E                  		subq.b	#1,$E(a5)
0008019A 6600                       		bne.s	locret_71CAA
0008019C 1D7C 0080 0008             		move.b	#$80,8(a6)
000801A2 286D 0004                  		movea.l	4(a5),a4
000801A6                            
000801A6                            loc_71C5E:
000801A6 7A00                       		moveq	#0,d5
000801A8 1A1C                       		move.b	(a4)+,d5
000801AA 0C05 00E0                  		cmpi.b	#-$20,d5
000801AE 6500                       		bcs.s	loc_71C6E
000801B0 4EBA 0000                  		jsr	sub_72A5A(pc)
000801B4 60F0                       		bra.s	loc_71C5E
000801B6                            ; ===========================================================================
000801B6                            
000801B6                            loc_71C6E:
000801B6 4A05                       		tst.b	d5
000801B8 6A00                       		bpl.s	loc_71C84
000801BA 1B45 0010                  		move.b	d5,$10(a5)
000801BE 1A1C                       		move.b	(a4)+,d5
000801C0 6A00                       		bpl.s	loc_71C84
000801C2 534C                       		subq.w	#1,a4
000801C4 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000801CA 6000                       		bra.s	loc_71C88
000801CC                            ; ===========================================================================
000801CC                            
000801CC                            loc_71C84:
000801CC 4EBA 0000                  		jsr	sub_71D40(pc)
000801D0                            
000801D0                            loc_71C88:
000801D0 2B4C 0004                  		move.l	a4,4(a5)
000801D4 0815 0002                  		btst	#2,(a5)
000801D8 6600                       		bne.s	locret_71CAA
000801DA 7000                       		moveq	#0,d0
000801DC 102D 0010                  		move.b	$10(a5),d0
000801E0 0C00 0080                  		cmpi.b	#$80,d0
000801E4 6700                       		beq.s	locret_71CAA
000801E6 0800 0003                  		btst	#3,d0
000801EA 6600                       		bne.s	loc_71CAC
000801EC 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
000801F2                            
000801F2                            locret_71CAA:
000801F2 4E75                       		rts	
000801F4                            ; ===========================================================================
000801F4                            
000801F4                            loc_71CAC:
000801F4 0400 0088                  		subi.b	#$88,d0
000801F8 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
000801FC 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00080202 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0008020A 4E75                       		rts	
0008020C                            ; End of function sub_71C4E
0008020C                            
0008020C                            ; ===========================================================================
0008020C 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00080212                            
00080212                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080212                            
00080212                            
00080212                            sub_71CCA:				; XREF: sub_71B4C
00080212 532D 000E                  		subq.b	#1,$E(a5)
00080216 6600                       		bne.s	loc_71CE0
00080218 0895 0004                  		bclr	#4,(a5)
0008021C 4EBA 0000                  		jsr	sub_71CEC(pc)
00080220 4EBA 0000                  		jsr	sub_71E18(pc)
00080224 6000 0000                  		bra.w	loc_726E2
00080228                            ; ===========================================================================
00080228                            
00080228                            loc_71CE0:
00080228 4EBA 0000                  		jsr	sub_71D9E(pc)
0008022C 4EBA 0000                  		jsr	sub_71DC6(pc)
00080230 6000 0000                  		bra.w	loc_71E24
00080234                            ; End of function sub_71CCA
00080234                            
00080234                            
00080234                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080234                            
00080234                            
00080234                            sub_71CEC:				; XREF: sub_71CCA
00080234 286D 0004                  		movea.l	4(a5),a4
00080238 0895 0001                  		bclr	#1,(a5)
0008023C                            
0008023C                            loc_71CF4:
0008023C 7A00                       		moveq	#0,d5
0008023E 1A1C                       		move.b	(a4)+,d5
00080240 0C05 00E0                  		cmpi.b	#-$20,d5
00080244 6500                       		bcs.s	loc_71D04
00080246 4EBA 0000                  		jsr	sub_72A5A(pc)
0008024A 60F0                       		bra.s	loc_71CF4
0008024C                            ; ===========================================================================
0008024C                            
0008024C                            loc_71D04:
0008024C 4EBA 0000                  		jsr	sub_726FE(pc)
00080250 4A05                       		tst.b	d5
00080252 6A00                       		bpl.s	loc_71D1A
00080254 4EBA 0000                  		jsr	sub_71D22(pc)
00080258 1A1C                       		move.b	(a4)+,d5
0008025A 6A00                       		bpl.s	loc_71D1A
0008025C 534C                       		subq.w	#1,a4
0008025E 6000 0000                  		bra.w	sub_71D60
00080262                            ; ===========================================================================
00080262                            
00080262                            loc_71D1A:
00080262 4EBA 0000                  		jsr	sub_71D40(pc)
00080266 6000 0000                  		bra.w	sub_71D60
0008026A                            ; End of function sub_71CEC
0008026A                            
0008026A                            
0008026A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008026A                            
0008026A                            
0008026A                            sub_71D22:				; XREF: sub_71CEC
0008026A 0405 0080                  		subi.b	#$80,d5
0008026E 6700                       		beq.s	loc_71D58
00080270 DA2D 0008                  		add.b	8(a5),d5
00080274 0245 007F                  		andi.w	#$7F,d5
00080278 E34D                       		lsl.w	#1,d5
0008027A 41FA 0000                  		lea	word_72790(pc),a0
0008027E 3C30 5000                  		move.w	(a0,d5.w),d6
00080282 3B46 0010                  		move.w	d6,$10(a5)
00080286 4E75                       		rts	
00080288                            ; End of function sub_71D22
00080288                            
00080288                            
00080288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080288                            
00080288                            
00080288                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00080288 1005                       		move.b	d5,d0
0008028A 122D 0002                  		move.b	2(a5),d1
0008028E                            
0008028E                            loc_71D46:
0008028E 5301                       		subq.b	#1,d1
00080290 6700                       		beq.s	loc_71D4E
00080292 D005                       		add.b	d5,d0
00080294 60F8                       		bra.s	loc_71D46
00080296                            ; ===========================================================================
00080296                            
00080296                            loc_71D4E:
00080296 1B40 000F                  		move.b	d0,$F(a5)
0008029A 1B40 000E                  		move.b	d0,$E(a5)
0008029E 4E75                       		rts	
000802A0                            ; End of function sub_71D40
000802A0                            
000802A0                            ; ===========================================================================
000802A0                            
000802A0                            loc_71D58:				; XREF: sub_71D22
000802A0 08D5 0001                  		bset	#1,(a5)
000802A4 426D 0010                  		clr.w	$10(a5)
000802A8                            
000802A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000802A8                            
000802A8                            
000802A8                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000802A8 2B4C 0004                  		move.l	a4,4(a5)
000802AC 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000802B2 0815 0004                  		btst	#4,(a5)
000802B6 6600                       		bne.s	locret_71D9C
000802B8 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000802BE 422D 000C                  		clr.b	$C(a5)
000802C2 0815 0003                  		btst	#3,(a5)
000802C6 6700                       		beq.s	locret_71D9C
000802C8 206D 0014                  		movea.l	$14(a5),a0
000802CC 1B58 0018                  		move.b	(a0)+,$18(a5)
000802D0 1B58 0019                  		move.b	(a0)+,$19(a5)
000802D4 1B58 001A                  		move.b	(a0)+,$1A(a5)
000802D8 1018                       		move.b	(a0)+,d0
000802DA E208                       		lsr.b	#1,d0
000802DC 1B40 001B                  		move.b	d0,$1B(a5)
000802E0 426D 001C                  		clr.w	$1C(a5)
000802E4                            
000802E4                            locret_71D9C:
000802E4 4E75                       		rts	
000802E6                            ; End of function sub_71D60
000802E6                            
000802E6                            
000802E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000802E6                            
000802E6                            
000802E6                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000802E6 4A2D 0012                  		tst.b	$12(a5)
000802EA 6700                       		beq.s	locret_71DC4
000802EC 532D 0012                  		subq.b	#1,$12(a5)
000802F0 6600                       		bne.s	locret_71DC4
000802F2 08D5 0001                  		bset	#1,(a5)
000802F6 4A2D 0001                  		tst.b	1(a5)
000802FA 6B00 0000                  		bmi.w	loc_71DBE
000802FE 4EBA 0000                  		jsr	sub_726FE(pc)
00080302 584F                       		addq.w	#4,sp
00080304 4E75                       		rts	
00080306                            ; ===========================================================================
00080306                            
00080306                            loc_71DBE:
00080306 4EBA 0000                  		jsr	sub_729A0(pc)
0008030A 584F                       		addq.w	#4,sp
0008030C                            
0008030C                            locret_71DC4:
0008030C 4E75                       		rts	
0008030E                            ; End of function sub_71D9E
0008030E                            
0008030E                            
0008030E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008030E                            
0008030E                            
0008030E                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0008030E 584F                       		addq.w	#4,sp
00080310 0815 0003                  		btst	#3,(a5)
00080314 6700                       		beq.s	locret_71E16
00080316 4A2D 0018                  		tst.b	$18(a5)
0008031A 6700                       		beq.s	loc_71DDA
0008031C 532D 0018                  		subq.b	#1,$18(a5)
00080320 4E75                       		rts	
00080322                            ; ===========================================================================
00080322                            
00080322                            loc_71DDA:
00080322 532D 0019                  		subq.b	#1,$19(a5)
00080326 6700                       		beq.s	loc_71DE2
00080328 4E75                       		rts	
0008032A                            ; ===========================================================================
0008032A                            
0008032A                            loc_71DE2:
0008032A 206D 0014                  		movea.l	$14(a5),a0
0008032E 1B68 0001 0019             		move.b	1(a0),$19(a5)
00080334 4A2D 001B                  		tst.b	$1B(a5)
00080338 6600                       		bne.s	loc_71DFE
0008033A 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00080340 442D 001A                  		neg.b	$1A(a5)
00080344 4E75                       		rts	
00080346                            ; ===========================================================================
00080346                            
00080346                            loc_71DFE:
00080346 532D 001B                  		subq.b	#1,$1B(a5)
0008034A 1C2D 001A                  		move.b	$1A(a5),d6
0008034E 4886                       		ext.w	d6
00080350 DC6D 001C                  		add.w	$1C(a5),d6
00080354 3B46 001C                  		move.w	d6,$1C(a5)
00080358 DC6D 0010                  		add.w	$10(a5),d6
0008035C 594F                       		subq.w	#4,sp
0008035E                            
0008035E                            locret_71E16:
0008035E 4E75                       		rts	
00080360                            ; End of function sub_71DC6
00080360                            
00080360                            
00080360                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080360                            
00080360                            
00080360                            sub_71E18:				; XREF: sub_71CCA
00080360 0815 0001                  		btst	#1,(a5)
00080364 6600                       		bne.s	locret_71E48
00080366 3C2D 0010                  		move.w	$10(a5),d6
0008036A 6700                       		beq.s	loc_71E4A
0008036C                            
0008036C                            loc_71E24:				; XREF: sub_71CCA
0008036C 102D 001E                  		move.b	$1E(a5),d0
00080370 4880                       		ext.w	d0
00080372 DC40                       		add.w	d0,d6
00080374 0815 0002                  		btst	#2,(a5)
00080378 6600                       		bne.s	locret_71E48
0008037A 3206                       		move.w	d6,d1
0008037C E049                       		lsr.w	#8,d1
0008037E 103C 00A4                  		move.b	#-$5C,d0
00080382 4EBA 0000                  		jsr	sub_72722(pc)
00080386 1206                       		move.b	d6,d1
00080388 103C 00A0                  		move.b	#-$60,d0
0008038C 4EBA 0000                  		jsr	sub_72722(pc)
00080390                            
00080390                            locret_71E48:
00080390 4E75                       		rts	
00080392                            ; ===========================================================================
00080392                            
00080392                            loc_71E4A:
00080392 08D5 0001                  		bset	#1,(a5)
00080396 4E75                       		rts	
00080398                            ; End of function sub_71E18
00080398                            
00080398                            ; ===========================================================================
00080398                            
00080398                            loc_71E50:				; XREF: sub_71B4C
00080398 6B00                       		bmi.s	loc_71E94
0008039A 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000803A0 6700 0000                  		beq.w	loc_71EFE
000803A4 1D7C 0002 0003             		move.b	#2,3(a6)
000803AA 7602                       		moveq	#2,d3
000803AC 103C 00B4                  		move.b	#-$4C,d0
000803B0 7200                       		moveq	#0,d1
000803B2                            
000803B2                            loc_71E6A:
000803B2 4EBA 0000                  		jsr	sub_7272E(pc)
000803B6 4EBA 0000                  		jsr	sub_72764(pc)
000803BA 5200                       		addq.b	#1,d0
000803BC 51CB FFF4                  		dbf	d3,loc_71E6A
000803C0                            
000803C0 7602                       		moveq	#2,d3
000803C2 7028                       		moveq	#$28,d0
000803C4                            
000803C4                            loc_71E7C:
000803C4 1203                       		move.b	d3,d1
000803C6 4EBA 0000                  		jsr	sub_7272E(pc)
000803CA 5801                       		addq.b	#4,d1
000803CC 4EBA 0000                  		jsr	sub_7272E(pc)
000803D0 51CB FFF2                  		dbf	d3,loc_71E7C
000803D4                            
000803D4 4EBA 0000                  		jsr	sub_729B6(pc)
000803D8 6000 FDB2                  		bra.w	loc_71C44
000803DC                            ; ===========================================================================
000803DC                            
000803DC                            loc_71E94:				; XREF: loc_71E50
000803DC 422E 0003                  		clr.b	3(a6)
000803E0 7630                       		moveq	#$30,d3
000803E2 4BEE 0040                  		lea	$40(a6),a5
000803E6 7806                       		moveq	#6,d4
000803E8                            
000803E8                            loc_71EA0:
000803E8 0815 0007                  		btst	#7,(a5)
000803EC 6700                       		beq.s	loc_71EB8
000803EE 0815 0002                  		btst	#2,(a5)
000803F2 6600                       		bne.s	loc_71EB8
000803F4 103C 00B4                  		move.b	#-$4C,d0
000803F8 122D 000A                  		move.b	$A(a5),d1
000803FC 4EBA 0000                  		jsr	sub_72722(pc)
00080400                            
00080400                            loc_71EB8:
00080400 DAC3                       		adda.w	d3,a5
00080402 51CC FFE4                  		dbf	d4,loc_71EA0
00080406                            
00080406 4BEE 0220                  		lea	$220(a6),a5
0008040A 7802                       		moveq	#2,d4
0008040C                            
0008040C                            loc_71EC4:
0008040C 0815 0007                  		btst	#7,(a5)
00080410 6700                       		beq.s	loc_71EDC
00080412 0815 0002                  		btst	#2,(a5)
00080416 6600                       		bne.s	loc_71EDC
00080418 103C 00B4                  		move.b	#-$4C,d0
0008041C 122D 000A                  		move.b	$A(a5),d1
00080420 4EBA 0000                  		jsr	sub_72722(pc)
00080424                            
00080424                            loc_71EDC:
00080424 DAC3                       		adda.w	d3,a5
00080426 51CC FFE4                  		dbf	d4,loc_71EC4
0008042A                            
0008042A 4BEE 0340                  		lea	$340(a6),a5
0008042E 0815 0007                  		btst	#7,(a5)
00080432 6700                       		beq.s	loc_71EFE
00080434 0815 0002                  		btst	#2,(a5)
00080438 6600                       		bne.s	loc_71EFE
0008043A 103C 00B4                  		move.b	#-$4C,d0
0008043E 122D 000A                  		move.b	$A(a5),d1
00080442 4EBA 0000                  		jsr	sub_72722(pc)
00080446                            
00080446                            loc_71EFE:
00080446 6000 FD44                  		bra.w	loc_71C44
0008044A                            
0008044A                            ; ---------------------------------------------------------------------------
0008044A                            ; Subroutine to	play a sound or	music track
0008044A                            ; ---------------------------------------------------------------------------
0008044A                            
0008044A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008044A                            
0008044A                            
0008044A                            Sound_Play:				; XREF: sub_71B4C
0008044A 2079 0007 FDF2             		movea.l	(Go_SoundTypes).l,a0
00080450 43EE 000A                  		lea	$A(a6),a1	; load music track number
00080454 1616                       		move.b	0(a6),d3
00080456 7802                       		moveq	#2,d4
00080458                            
00080458                            loc_71F12:
00080458 1011                       		move.b	(a1),d0		; move track number to d0
0008045A 1200                       		move.b	d0,d1
0008045C 4219                       		clr.b	(a1)+
0008045E 0400 0081                  		subi.b	#$81,d0
00080462 6500                       		bcs.s	loc_71F3E
00080464                            ; ===========================================================================
00080464                            
00080464                            loc_71F2C:
00080464 1430 0000                  		move.b	(a0,d0.w),d2
00080468 B403                       		cmp.b	d3,d2
0008046A 6500                       		bcs.s	loc_71F3E
0008046C 1602                       		move.b	d2,d3
0008046E 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00080472                            
00080472                            loc_71F3E:
00080472 51CC FFE4                  		dbf	d4,loc_71F12
00080476                            
00080476 4A03                       		tst.b	d3
00080478 6B00                       		bmi.s	Sound_ChkValue
0008047A 1C83                       		move.b	d3,0(a6)
0008047C                            ; End of function Sound_Play
0008047C                            
0008047C                            
0008047C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008047C                            
0008047C                            ; no checks if you play something fucked up it's your fault
0008047C                            Sound_ChkValue:				; XREF: sub_71B4C
0008047C 7E00                       		moveq	#0,d7
0008047E 1E2E 0009                  		move.b	9(a6),d7
00080482                            		
00080482 6700 0000                  		beq.w	Sound_E4
00080486 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0008048C 0C07 00A0                  		cmpi.b	#$A0,d7
00080490 6500 0000                  		blo.w	Sound_Music	; music	$81-$9F
00080494                            		
00080494 0C07 00D0                  		cmpi.b	#$D0,d7
00080498 6700 0000                  		beq.w	Sound_D0
0008049C 0C07 00E0                  		cmpi.b	#$E0,d7
000804A0 6500 0000                  		blo.w	Sound_SFX	; sound	$A0-$CF
000804A4                            		
000804A4                            		; falls to command
000804A4                            ; ===========================================================================
000804A4                            
000804A4                            Sound_Command				; XREF: Sound_ChkValue
000804A4 0407 00E0                  		subi.b	#$E0,d7
000804A8 E54F                       		lsl.w	#2,d7
000804AA 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000804AE                            ; ===========================================================================
000804AE                            
000804AE                            Sound_ExIndex:
000804AE 6000 0000                  		bra.w	Sound_E0
000804B2                            ; ===========================================================================
000804B2 6000 0000                  		bra.w	Sound_E1
000804B6                            ; ===========================================================================
000804B6 6000 0000                  		bra.w	Sound_E2
000804BA                            ; ===========================================================================
000804BA 6000 0000                  		bra.w	Sound_E3
000804BE                            ; ===========================================================================
000804BE 6000 0000                  		bra.w	Sound_E4
000804C2                            ; ===========================================================================
000804C2 6000 0000                  		bra.w	Sound_E5
000804C6                            ; ===========================================================================
000804C6                            ; ---------------------------------------------------------------------------
000804C6                            ; Play "Say-gaa" PCM sound
000804C6                            ; ---------------------------------------------------------------------------
000804C6                            
000804C6                            Sound_E1:				  
000804C6 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
000804CE 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
000804D6 303C 007F                  		move.w	#127,d0				; delay so the YM doesn't crap itself
000804DA 51C8 FFFE                  		dbf	d0,*
000804DE 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000804E4 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
000804EA 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000804F2                            PlayPCM_Loop:	  
000804F2 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000804F8 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
000804FC 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
00080500 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00080502 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
00080504 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00080508 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0008050E 4EB8 11EA                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
00080512 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00080518 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0008051A 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0008051C                            return_PlayPCM: 
0008051C 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; silence PCM to avoid an awful sounding click
00080524 584F                       		addq.w	#4,sp 
00080526 4E75                       		rts
00080528                            		
00080528                            ; ---------------------------------------------------------------------------
00080528                            ; Play you are an idiot pcm sound
00080528                            ; since the sfx already crashes the game forever load it here :V
00080528                            ; ---------------------------------------------------------------------------
00080528                            
00080528                            Sound_E5: 
00080528 4EB8 12C6                  		jsr	ClearScreen
0008052C 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
00080534 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0008053C                            
0008053C                            		;control port on a5
0008053C 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
00080542 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
00080548 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
0008054C 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
00080550 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
00080554                            		
00080554 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
00080558                            		
00080558 2ABC 4000 0000             		move.l	#$40000000,(a5)
0008055E 41F9 0002 45D2             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00080564 4EB8 1442                  		jsr	NemDec
00080568 43F9 00FF 0000             		lea	($FF0000).l,a1
0008056E 41F9 0002 4574             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00080574 303C 0000                  		move.w	#0,d0
00080578 4EB8 1720                  		jsr	EniDec
0008057C 43F9 00FF 0000             		lea	($FF0000).l,a1
00080582 203C 4304 0003             		move.l	#$43040003,d0
00080588 7223                       		moveq	#35,d1
0008058A 740D                       		moveq	#13,d2
0008058C 4EB8 1422                  		jsr	ShowVDPGraphics
00080590 7014                       		moveq	#20,d0
00080592 4EB8 20EE                  		jsr	PalLoad2	; load pallet
00080596                            
00080596                            
00080596 4BF9 00C0 0004             		lea	($C00004).l,a5
0008059C 50F8 FE25                  		st.b	($FFFFFE25).w			; start with -1, so the NOT makes it 0
000805A0 7600                       		moveq	#0,d3				; make @palett jump to @start when done
000805A2 6000                       		bra.s	@palett
000805A4                            @start:
000805A4 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000805AA 263C 0000 0000             		move.l	#IdiotPCM_End-IdiotPCM,d3	; Load the size of the idiot PCM sample into d3 
000805B0 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel
000805B8                            @loop:
000805B8 44D5                       		move.w	(a5),ccr
000805BA 6B00                       		bmi.s	@vblank
000805BC                            
000805BC 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000805C2 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
000805C6 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
000805CA 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
000805CC 66EA                       		bne.s	@loop				; if not zero, loop
000805CE 60D4                       		bra.s	@start
000805D0                            @vblank:
000805D0 0C38 000F FE24             		cmp.b	#15,($FFFFFE24).w
000805D6 6700                       		beq.s	@palett
000805D8 5238 FE24                  		addq.b	#1,($FFFFFE24).w
000805DC                            @loop_vblank:
000805DC 44D5                       		move.w	(a5),ccr
000805DE 6AD8                       		bpl.s	@loop
000805E0                            
000805E0 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000805E6 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
000805EA 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
000805EE 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
000805F0 66EA                       		bne.s	@loop_vblank			; if not zero, loop
000805F2 60B0                       		bra.s	@start
000805F4                            @palett:
000805F4 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
000805FA                            
000805FA 4238 FE24                  		clr.b	($FFFFFE24).w
000805FE 4638 FE25                  		not.b	($FFFFFE25).w
00080602 6700                       		beq.s	@not_black
00080604 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
0008060A 6000                       		bra.s	@merge
0008060C                            	@not_black:
0008060C 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
00080612                            	@merge:
00080612 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
00080616 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
0008061A 3F3C 0080                  		move.w	#$80+((0&$C000)>>14),-(sp) ;dest
0008061E 3A9F                       		move.w	(sp)+,(a5)
00080620                            		
00080620 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
00080624 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
00080628 4A83                       		tst.l	d3
0008062A 66B0                       		bne.s	@loop_vblank
0008062C 6000 FF76                  		bra.w	@start
00080630                            ; ===========================================================================
00080630                            ; ---------------------------------------------------------------------------
00080630                            ; Play music track $81-$9F
00080630                            ; ---------------------------------------------------------------------------
00080630                            
00080630                            Sound_Music:				; XREF: Sound_ChkValue
00080630 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00080634 6600                       		bne.s	loc_72024	; if not, branch
00080636 4A2E 0027                  		tst.b	$27(a6)
0008063A 6600 0000                  		bne.w	loc_721B6
0008063E 4BEE 0040                  		lea	$40(a6),a5
00080642 7009                       		moveq	#9,d0
00080644                            
00080644                            loc_71FE6:
00080644 0895 0002                  		bclr	#2,(a5)
00080648 DAFC 0030                  		adda.w	#$30,a5
0008064C 51C8 FFF6                  		dbf	d0,loc_71FE6
00080650                            
00080650 4BEE 0220                  		lea	$220(a6),a5
00080654 7005                       		moveq	#5,d0
00080656                            
00080656                            loc_71FF8:
00080656 0895 0007                  		bclr	#7,(a5)
0008065A DAFC 0030                  		adda.w	#$30,a5
0008065E 51C8 FFF6                  		dbf	d0,loc_71FF8
00080662 4216                       		clr.b	0(a6)
00080664 204E                       		movea.l	a6,a0
00080666 43EE 03A0                  		lea	$3A0(a6),a1
0008066A 303C 0087                  		move.w	#$87,d0
0008066E                            
0008066E                            loc_72012:
0008066E 22D8                       		move.l	(a0)+,(a1)+
00080670 51C8 FFFC                  		dbf	d0,loc_72012
00080674                            
00080674 1D7C 0080 0027             		move.b	#$80,$27(a6)
0008067A 4216                       		clr.b	0(a6)
0008067C 6000                       		bra.s	loc_7202C
0008067E                            ; ===========================================================================
0008067E                            
0008067E                            loc_72024:
0008067E 422E 0027                  		clr.b	$27(a6)
00080682 422E 0026                  		clr.b	$26(a6)
00080686                            
00080686                            loc_7202C:
00080686 4EBA 0000                  		jsr	sub_725CA(pc)
0008068A 2879 0007 FE06             		movea.l	(off_719A0).l,a4
00080690 0C07 0080                  		cmpi.b	#$80,d7
00080694 6500                       		blo.s	@zeroindex
00080696                            		
00080696 0407 0080                  		subi.b	#$80,d7
0008069A 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000806A0 2879 0007 FDFE             		movea.l	(Go_MusicIndex80).l,a4
000806A6 6000                       		bra.s @continue
000806A8                            	@zeroindex:
000806A8 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000806AE 2879 0007 FDFA             		movea.l	(Go_MusicIndex).l,a4
000806B4                            	@continue:
000806B4 E54F                       		lsl.w	#2,d7
000806B6 2874 7000                  		movea.l	(a4,d7.w),a4
000806BA 7000                       		moveq	#0,d0
000806BC 3014                       		move.w	(a4),d0
000806BE D08C                       		add.l	a4,d0
000806C0 2D40 0018                  		move.l	d0,$18(a6)
000806C4 102C 0005                  		move.b	5(a4),d0
000806C8 1D40 0028                  		move.b	d0,$28(a6)
000806CC 4A2E 002A                  		tst.b	$2A(a6)
000806D0 6700                       		beq.s	loc_72068
000806D2 102E 0029                  		move.b	$29(a6),d0
000806D6                            
000806D6                            loc_72068:
000806D6 1D40 0002                  		move.b	d0,2(a6)
000806DA 1D40 0001                  		move.b	d0,1(a6)
000806DE 7200                       		moveq	#0,d1
000806E0 264C                       		movea.l	a4,a3
000806E2 5C4C                       		addq.w	#6,a4
000806E4 7E00                       		moveq	#0,d7
000806E6 1E2B 0002                  		move.b	2(a3),d7
000806EA 6700 0000                  		beq.w	loc_72114
000806EE 5307                       		subq.b	#1,d7
000806F0 123C 00C0                  		move.b	#-$40,d1
000806F4 182B 0004                  		move.b	4(a3),d4
000806F8 7C30                       		moveq	#$30,d6
000806FA 1A3C 0001                  		move.b	#1,d5
000806FE 43EE 0040                  		lea	$40(a6),a1
00080702 45FA 0000                  		lea	byte_721BA(pc),a2
00080706                            
00080706                            loc_72098:
00080706 08D1 0007                  		bset	#7,(a1)
0008070A 135A 0001                  		move.b	(a2)+,1(a1)
0008070E 1344 0002                  		move.b	d4,2(a1)
00080712 1346 000D                  		move.b	d6,$D(a1)
00080716 1341 000A                  		move.b	d1,$A(a1)
0008071A 1345 000E                  		move.b	d5,$E(a1)
0008071E 7000                       		moveq	#0,d0
00080720 301C                       		move.w	(a4)+,d0
00080722 D08B                       		add.l	a3,d0
00080724 2340 0004                  		move.l	d0,4(a1)
00080728 335C 0008                  		move.w	(a4)+,8(a1)
0008072C D2C6                       		adda.w	d6,a1
0008072E 51CF FFD6                  		dbf	d7,loc_72098
00080732 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00080738 6600                       		bne.s	loc_720D8
0008073A 702B                       		moveq	#$2B,d0
0008073C 7200                       		moveq	#0,d1
0008073E 4EBA 0000                  		jsr	sub_7272E(pc)
00080742 6000 0000                  		bra.w	loc_72114
00080746                            ; ===========================================================================
00080746                            
00080746                            loc_720D8:
00080746 7028                       		moveq	#$28,d0
00080748 7206                       		moveq	#6,d1
0008074A 4EBA 0000                  		jsr	sub_7272E(pc)
0008074E 103C 0042                  		move.b	#$42,d0
00080752 727F                       		moveq	#$7F,d1
00080754 4EBA 0000                  		jsr	sub_72764(pc)
00080758 103C 004A                  		move.b	#$4A,d0
0008075C 727F                       		moveq	#$7F,d1
0008075E 4EBA 0000                  		jsr	sub_72764(pc)
00080762 103C 0046                  		move.b	#$46,d0
00080766 727F                       		moveq	#$7F,d1
00080768 4EBA 0000                  		jsr	sub_72764(pc)
0008076C 103C 004E                  		move.b	#$4E,d0
00080770 727F                       		moveq	#$7F,d1
00080772 4EBA 0000                  		jsr	sub_72764(pc)
00080776 103C 00B6                  		move.b	#-$4A,d0
0008077A 123C 00C0                  		move.b	#-$40,d1
0008077E 4EBA 0000                  		jsr	sub_72764(pc)
00080782                            
00080782                            loc_72114:
00080782 7E00                       		moveq	#0,d7
00080784 1E2B 0003                  		move.b	3(a3),d7
00080788 6700                       		beq.s	loc_72154
0008078A 5307                       		subq.b	#1,d7
0008078C 43EE 0190                  		lea	$190(a6),a1
00080790 45FA 0000                  		lea	byte_721C2(pc),a2
00080794                            
00080794                            loc_72126:
00080794 08D1 0007                  		bset	#7,(a1)
00080798 135A 0001                  		move.b	(a2)+,1(a1)
0008079C 1344 0002                  		move.b	d4,2(a1)
000807A0 1346 000D                  		move.b	d6,$D(a1)
000807A4 1345 000E                  		move.b	d5,$E(a1)
000807A8 7000                       		moveq	#0,d0
000807AA 301C                       		move.w	(a4)+,d0
000807AC D08B                       		add.l	a3,d0
000807AE 2340 0004                  		move.l	d0,4(a1)
000807B2 335C 0008                  		move.w	(a4)+,8(a1)
000807B6 101C                       		move.b	(a4)+,d0
000807B8 135C 000B                  		move.b	(a4)+,$B(a1)
000807BC D2C6                       		adda.w	d6,a1
000807BE 51CF FFD4                  		dbf	d7,loc_72126
000807C2                            
000807C2                            loc_72154:
000807C2 43EE 0220                  		lea	$220(a6),a1
000807C6 7E05                       		moveq	#5,d7
000807C8                            
000807C8                            loc_7215A:
000807C8 4A11                       		tst.b	(a1)
000807CA 6A00 0000                  		bpl.w	loc_7217C
000807CE 7000                       		moveq	#0,d0
000807D0 1029 0001                  		move.b	1(a1),d0
000807D4 6B00                       		bmi.s	loc_7216E
000807D6 5500                       		subq.b	#2,d0
000807D8 E508                       		lsl.b	#2,d0
000807DA 6000                       		bra.s	loc_72170
000807DC                            ; ===========================================================================
000807DC                            
000807DC                            loc_7216E:
000807DC E608                       		lsr.b	#3,d0
000807DE                            
000807DE                            loc_72170:
000807DE 41FA 0000                  		lea	dword_722CC(pc),a0
000807E2 2070 0000                  		movea.l	(a0,d0.w),a0
000807E6 08D0 0002                  		bset	#2,(a0)
000807EA                            
000807EA                            loc_7217C:
000807EA D2C6                       		adda.w	d6,a1
000807EC 51CF FFDA                  		dbf	d7,loc_7215A
000807F0                            
000807F0 4A6E 0340                  		tst.w	$340(a6)
000807F4 6A00                       		bpl.s	loc_7218E
000807F6 08EE 0002 0100             		bset	#2,$100(a6)
000807FC                            
000807FC                            loc_7218E:
000807FC 4A6E 0370                  		tst.w	$370(a6)
00080800 6A00                       		bpl.s	loc_7219A
00080802 08EE 0002 01F0             		bset	#2,$1F0(a6)
00080808                            
00080808                            loc_7219A:
00080808 4BEE 0070                  		lea	$70(a6),a5
0008080C 7805                       		moveq	#5,d4
0008080E                            
0008080E                            loc_721A0:
0008080E 4EBA 0000                  		jsr	sub_726FE(pc)
00080812 DAC6                       		adda.w	d6,a5
00080814 51CC FFF8                  		dbf	d4,loc_721A0
00080818 7802                       		moveq	#2,d4
0008081A                            
0008081A                            loc_721AC:
0008081A 4EBA 0000                  		jsr	sub_729A0(pc)
0008081E DAC6                       		adda.w	d6,a5
00080820 51CC FFF8                  		dbf	d4,loc_721AC
00080824                            
00080824                            loc_721B6:
00080824 584F                       		addq.w	#4,sp
00080826 4E75                       		rts	
00080828                            ; ===========================================================================
00080828 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00080830                            		even
00080830 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00080834                            		even
00080834                            ; ===========================================================================
00080834                            ; ---------------------------------------------------------------------------
00080834                            ; Play normal sound effect
00080834                            ; ---------------------------------------------------------------------------
00080834                            
00080834                            Sound_SFX:				; XREF: Sound_ChkValue
00080834 4A2E 0027                  		tst.b	$27(a6)
00080838 6600 0000                  		bne.w	loc_722C6
0008083C 4A2E 0004                  		tst.b	4(a6)
00080840 6600 0000                  		bne.w	loc_722C6
00080844 4A2E 0024                  		tst.b	$24(a6)
00080848 6600 0000                  		bne.w	loc_722C6
0008084C 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00080850 6600                       		bne.s	Sound_notB5	; if not, branch
00080852 4A2E 002B                  		tst.b	$2B(a6)
00080856 6600                       		bne.s	loc_721EE
00080858 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0008085C                            
0008085C                            loc_721EE:
0008085C 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00080862                            
00080862                            Sound_notB5:
00080862 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00080866 6600                       		bne.s	Sound_notA7	; if not, branch
00080868 4A2E 002C                  		tst.b	$2C(a6)
0008086C 6600 0000                  		bne.w	locret_722C4
00080870 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00080876                            
00080876                            Sound_notA7:
00080876 2079 0007 FE02             		movea.l	(Go_SoundIndex).l,a0
0008087C 0407 00A0                  		subi.b	#$A0,d7
00080880 E54F                       		lsl.w	#2,d7
00080882 2670 7000                  		movea.l	(a0,d7.w),a3
00080886 224B                       		movea.l	a3,a1
00080888 7200                       		moveq	#0,d1
0008088A 3219                       		move.w	(a1)+,d1
0008088C D28B                       		add.l	a3,d1
0008088E 1A19                       		move.b	(a1)+,d5
00080890 1E19                       		move.b	(a1)+,d7
00080892 5307                       		subq.b	#1,d7
00080894 7C30                       		moveq	#$30,d6
00080896                            
00080896                            loc_72228:
00080896 7600                       		moveq	#0,d3
00080898 1629 0001                  		move.b	1(a1),d3
0008089C 1803                       		move.b	d3,d4
0008089E 6B00                       		bmi.s	loc_72244
000808A0 5543                       		subq.w	#2,d3
000808A2 E54B                       		lsl.w	#2,d3
000808A4 4BFA 0000                  		lea	dword_722CC(pc),a5
000808A8 2A75 3000                  		movea.l	(a5,d3.w),a5
000808AC 08D5 0002                  		bset	#2,(a5)
000808B0 6000                       		bra.s	loc_7226E
000808B2                            ; ===========================================================================
000808B2                            
000808B2                            loc_72244:
000808B2 E64B                       		lsr.w	#3,d3
000808B4 4BFA 0000                  		lea	dword_722CC(pc),a5
000808B8 2A75 3000                  		movea.l	(a5,d3.w),a5
000808BC 08D5 0002                  		bset	#2,(a5)
000808C0 0C04 00C0                  		cmpi.b	#$C0,d4
000808C4 6600                       		bne.s	loc_7226E
000808C6 1004                       		move.b	d4,d0
000808C8 0000 001F                  		ori.b	#$1F,d0
000808CC 13C0 00C0 0011             		move.b	d0,($C00011).l
000808D2 0840 0005                  		bchg	#5,d0
000808D6 13C0 00C0 0011             		move.b	d0,($C00011).l
000808DC                            
000808DC                            loc_7226E:
000808DC 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000808E0 244D                       		movea.l	a5,a2
000808E2 700B                       		moveq	#$B,d0
000808E4                            
000808E4                            loc_72276:
000808E4 429A                       		clr.l	(a2)+
000808E6 51C8 FFFC                  		dbf	d0,loc_72276
000808EA                            
000808EA 3A99                       		move.w	(a1)+,(a5)
000808EC 1B45 0002                  		move.b	d5,2(a5)
000808F0 7000                       		moveq	#0,d0
000808F2 3019                       		move.w	(a1)+,d0
000808F4 D08B                       		add.l	a3,d0
000808F6 2B40 0004                  		move.l	d0,4(a5)
000808FA 3B59 0008                  		move.w	(a1)+,8(a5)
000808FE 1B7C 0001 000E             		move.b	#1,$E(a5)
00080904 1B46 000D                  		move.b	d6,$D(a5)
00080908 4A04                       		tst.b	d4
0008090A 6B00                       		bmi.s	loc_722A8
0008090C 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00080912 2B41 0020                  		move.l	d1,$20(a5)
00080916                            
00080916                            loc_722A8:
00080916 51CF FF7E                  		dbf	d7,loc_72228
0008091A                            
0008091A 4A2E 0250                  		tst.b	$250(a6)
0008091E 6A00                       		bpl.s	loc_722B8
00080920 08EE 0002 0340             		bset	#2,$340(a6)
00080926                            
00080926                            loc_722B8:
00080926 4A2E 0310                  		tst.b	$310(a6)
0008092A 6A00                       		bpl.s	locret_722C4
0008092C 08EE 0002 0370             		bset	#2,$370(a6)
00080932                            
00080932                            locret_722C4:
00080932 4E75                       		rts	
00080934                            ; ===========================================================================
00080934                            
00080934                            loc_722C6:
00080934 4216                       		clr.b	0(a6)
00080936 4E75                       		rts	
00080938                            ; ===========================================================================
00080938 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0008093C 0000 0000                  		dc.l 0
00080940 00FF F100                  		dc.l $FFF100
00080944 00FF F130                  		dc.l $FFF130
00080948 00FF F190                  		dc.l $FFF190
0008094C 00FF F1C0                  		dc.l $FFF1C0
00080950 00FF F1F0                  		dc.l $FFF1F0
00080954 00FF F1F0                  		dc.l $FFF1F0
00080958 00FF F220                  dword_722EC:	dc.l $FFF220
0008095C 0000 0000                  		dc.l 0
00080960 00FF F250                  		dc.l $FFF250
00080964 00FF F280                  		dc.l $FFF280
00080968 00FF F2B0                  		dc.l $FFF2B0
0008096C 00FF F2E0                  		dc.l $FFF2E0
00080970 00FF F310                  		dc.l $FFF310
00080974 00FF F310                  		dc.l $FFF310
00080978                            ; ===========================================================================
00080978                            ; ---------------------------------------------------------------------------
00080978                            ; Play GHZ waterfall sound
00080978                            ; ---------------------------------------------------------------------------
00080978                            
00080978                            Sound_D0:				; XREF: Sound_ChkValue
00080978 4A2E 0027                  		tst.b	$27(a6)
0008097C 6600 0000                  		bne.w	locret_723C6
00080980 4A2E 0004                  		tst.b	4(a6)
00080984 6600 0000                  		bne.w	locret_723C6
00080988 4A2E 0024                  		tst.b	$24(a6)
0008098C 6600 0000                  		bne.w	locret_723C6
00080990 2079 0007 FDF6             		movea.l	(Go_SoundD0).l,a0
00080996 0407 00D0                  		subi.b	#$D0,d7
0008099A E54F                       		lsl.w	#2,d7
0008099C 2670 7000                  		movea.l	(a0,d7.w),a3
000809A0 224B                       		movea.l	a3,a1
000809A2 7000                       		moveq	#0,d0
000809A4 3019                       		move.w	(a1)+,d0
000809A6 D08B                       		add.l	a3,d0
000809A8 2D40 0020                  		move.l	d0,$20(a6)
000809AC 1A19                       		move.b	(a1)+,d5
000809AE 1E19                       		move.b	(a1)+,d7
000809B0 5307                       		subq.b	#1,d7
000809B2 7C30                       		moveq	#$30,d6
000809B4                            
000809B4                            loc_72348:
000809B4 1829 0001                  		move.b	1(a1),d4
000809B8 6B00                       		bmi.s	loc_7235A
000809BA 08EE 0002 0100             		bset	#2,$100(a6)
000809C0 4BEE 0340                  		lea	$340(a6),a5
000809C4 6000                       		bra.s	loc_72364
000809C6                            ; ===========================================================================
000809C6                            
000809C6                            loc_7235A:
000809C6 08EE 0002 01F0             		bset	#2,$1F0(a6)
000809CC 4BEE 0370                  		lea	$370(a6),a5
000809D0                            
000809D0                            loc_72364:
000809D0 244D                       		movea.l	a5,a2
000809D2 700B                       		moveq	#$B,d0
000809D4                            
000809D4                            loc_72368:
000809D4 429A                       		clr.l	(a2)+
000809D6 51C8 FFFC                  		dbf	d0,loc_72368
000809DA                            
000809DA 3A99                       		move.w	(a1)+,(a5)
000809DC 1B45 0002                  		move.b	d5,2(a5)
000809E0 7000                       		moveq	#0,d0
000809E2 3019                       		move.w	(a1)+,d0
000809E4 D08B                       		add.l	a3,d0
000809E6 2B40 0004                  		move.l	d0,4(a5)
000809EA 3B59 0008                  		move.w	(a1)+,8(a5)
000809EE 1B7C 0001 000E             		move.b	#1,$E(a5)
000809F4 1B46 000D                  		move.b	d6,$D(a5)
000809F8 4A04                       		tst.b	d4
000809FA 6B00                       		bmi.s	loc_72396
000809FC 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00080A02                            
00080A02                            loc_72396:
00080A02 51CF FFB0                  		dbf	d7,loc_72348
00080A06                            
00080A06 4A2E 0250                  		tst.b	$250(a6)
00080A0A 6A00                       		bpl.s	loc_723A6
00080A0C 08EE 0002 0340             		bset	#2,$340(a6)
00080A12                            
00080A12                            loc_723A6:
00080A12 4A2E 0310                  		tst.b	$310(a6)
00080A16 6A00                       		bpl.s	locret_723C6
00080A18 08EE 0002 0370             		bset	#2,$370(a6)
00080A1E 0004 001F                  		ori.b	#$1F,d4
00080A22 13C4 00C0 0011             		move.b	d4,($C00011).l
00080A28 0844 0005                  		bchg	#5,d4
00080A2C 13C4 00C0 0011             		move.b	d4,($C00011).l
00080A32                            
00080A32                            locret_723C6:
00080A32 4E75                       		rts	
00080A34                            ; End of function Sound_ChkValue
00080A34                            
00080A34                            ; ===========================================================================
00080A34 00FF F100                  		dc.l $FFF100
00080A38 00FF F1F0                  		dc.l $FFF1F0
00080A3C 00FF F250                  		dc.l $FFF250
00080A40 00FF F310                  		dc.l $FFF310
00080A44 00FF F340                  		dc.l $FFF340
00080A48 00FF F370                  		dc.l $FFF370
00080A4C                            
00080A4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080A4C                            
00080A4C                            
00080A4C                            Snd_FadeOut1:				; XREF: Sound_E0
00080A4C 4216                       		clr.b	0(a6)
00080A4E 4BEE 0220                  		lea	$220(a6),a5
00080A52 7E05                       		moveq	#5,d7
00080A54                            
00080A54                            loc_723EA:
00080A54 4A15                       		tst.b	(a5)
00080A56 6A00 0000                  		bpl.w	loc_72472
00080A5A 0895 0007                  		bclr	#7,(a5)
00080A5E 7600                       		moveq	#0,d3
00080A60 162D 0001                  		move.b	1(a5),d3
00080A64 6B00                       		bmi.s	loc_7243C
00080A66 4EBA 0000                  		jsr	sub_726FE(pc)
00080A6A 0C03 0004                  		cmpi.b	#4,d3
00080A6E 6600                       		bne.s	loc_72416
00080A70 4A2E 0340                  		tst.b	$340(a6)
00080A74 6A00                       		bpl.s	loc_72416
00080A76 4BEE 0340                  		lea	$340(a6),a5
00080A7A 226E 0020                  		movea.l	$20(a6),a1
00080A7E 6000                       		bra.s	loc_72428
00080A80                            ; ===========================================================================
00080A80                            
00080A80                            loc_72416:
00080A80 5503                       		subq.b	#2,d3
00080A82 E50B                       		lsl.b	#2,d3
00080A84 41FA FEB2                  		lea	dword_722CC(pc),a0
00080A88 264D                       		movea.l	a5,a3
00080A8A 2A70 3000                  		movea.l	(a0,d3.w),a5
00080A8E 226E 0018                  		movea.l	$18(a6),a1
00080A92                            
00080A92                            loc_72428:
00080A92 0895 0002                  		bclr	#2,(a5)
00080A96 08D5 0001                  		bset	#1,(a5)
00080A9A 102D 000B                  		move.b	$B(a5),d0
00080A9E 4EBA 0000                  		jsr	sub_72C4E(pc)
00080AA2 2A4B                       		movea.l	a3,a5
00080AA4 6000                       		bra.s	loc_72472
00080AA6                            ; ===========================================================================
00080AA6                            
00080AA6                            loc_7243C:
00080AA6 4EBA 0000                  		jsr	sub_729A0(pc)
00080AAA 41EE 0370                  		lea	$370(a6),a0
00080AAE 0C03 00E0                  		cmpi.b	#$E0,d3
00080AB2 6700                       		beq.s	loc_7245A
00080AB4 0C03 00C0                  		cmpi.b	#$C0,d3
00080AB8 6700                       		beq.s	loc_7245A
00080ABA E60B                       		lsr.b	#3,d3
00080ABC 41FA FE7A                  		lea	dword_722CC(pc),a0
00080AC0 2070 3000                  		movea.l	(a0,d3.w),a0
00080AC4                            
00080AC4                            loc_7245A:
00080AC4 0890 0002                  		bclr	#2,(a0)
00080AC8 08D0 0001                  		bset	#1,(a0)
00080ACC 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00080AD2 6600                       		bne.s	loc_72472
00080AD4 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00080ADC                            
00080ADC                            loc_72472:
00080ADC DAFC 0030                  		adda.w	#$30,a5
00080AE0 51CF FF72                  		dbf	d7,loc_723EA
00080AE4                            
00080AE4 4E75                       		rts	
00080AE6                            ; End of function Snd_FadeOut1
00080AE6                            
00080AE6                            
00080AE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080AE6                            
00080AE6                            
00080AE6                            Snd_FadeOut2:				; XREF: Sound_E0
00080AE6 4BEE 0340                  		lea	$340(a6),a5
00080AEA 4A15                       		tst.b	(a5)
00080AEC 6A00                       		bpl.s	loc_724AE
00080AEE 0895 0007                  		bclr	#7,(a5)
00080AF2 0815 0002                  		btst	#2,(a5)
00080AF6 6600                       		bne.s	loc_724AE
00080AF8 4EBA 0000                  		jsr	loc_7270A(pc)
00080AFC 4BEE 0100                  		lea	$100(a6),a5
00080B00 0895 0002                  		bclr	#2,(a5)
00080B04 08D5 0001                  		bset	#1,(a5)
00080B08 4A15                       		tst.b	(a5)
00080B0A 6A00                       		bpl.s	loc_724AE
00080B0C 226E 0018                  		movea.l	$18(a6),a1
00080B10 102D 000B                  		move.b	$B(a5),d0
00080B14 4EBA 0000                  		jsr	sub_72C4E(pc)
00080B18                            
00080B18                            loc_724AE:
00080B18 4BEE 0370                  		lea	$370(a6),a5
00080B1C 4A15                       		tst.b	(a5)
00080B1E 6A00                       		bpl.s	locret_724E4
00080B20 0895 0007                  		bclr	#7,(a5)
00080B24 0815 0002                  		btst	#2,(a5)
00080B28 6600                       		bne.s	locret_724E4
00080B2A 4EBA 0000                  		jsr	loc_729A6(pc)
00080B2E 4BEE 01F0                  		lea	$1F0(a6),a5
00080B32 0895 0002                  		bclr	#2,(a5)
00080B36 08D5 0001                  		bset	#1,(a5)
00080B3A 4A15                       		tst.b	(a5)
00080B3C 6A00                       		bpl.s	locret_724E4
00080B3E 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00080B44 6600                       		bne.s	locret_724E4
00080B46 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00080B4E                            
00080B4E                            locret_724E4:
00080B4E 4E75                       		rts	
00080B50                            ; End of function Snd_FadeOut2
00080B50                            
00080B50                            ; ===========================================================================
00080B50                            ; ---------------------------------------------------------------------------
00080B50                            ; Fade out music
00080B50                            ; ---------------------------------------------------------------------------
00080B50                            
00080B50                            Sound_E0:				; XREF: Sound_ExIndex
00080B50 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00080B54 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00080B58 1D7C 0003 0006             		move.b	#3,6(a6)
00080B5E 1D7C 0028 0004             		move.b	#$28,4(a6)
00080B64 422E 0040                  		clr.b	$40(a6)
00080B68 422E 002A                  		clr.b	$2A(a6)
00080B6C 4E75                       		rts	
00080B6E                            
00080B6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080B6E                            
00080B6E                            
00080B6E                            sub_72504:				; XREF: sub_71B4C
00080B6E 102E 0006                  		move.b	6(a6),d0
00080B72 6700                       		beq.s	loc_72510
00080B74 532E 0006                  		subq.b	#1,6(a6)
00080B78 4E75                       		rts	
00080B7A                            ; ===========================================================================
00080B7A                            
00080B7A                            loc_72510:
00080B7A 532E 0004                  		subq.b	#1,4(a6)
00080B7E 6700 0000                  		beq.w	Sound_E4
00080B82 1D7C 0003 0006             		move.b	#3,6(a6)
00080B88 4BEE 0070                  		lea	$70(a6),a5
00080B8C 7E05                       		moveq	#5,d7
00080B8E                            
00080B8E                            loc_72524:
00080B8E 4A15                       		tst.b	(a5)
00080B90 6A00                       		bpl.s	loc_72538
00080B92 522D 0009                  		addq.b	#1,9(a5)
00080B96 6A00                       		bpl.s	loc_72534
00080B98 0895 0007                  		bclr	#7,(a5)
00080B9C 6000                       		bra.s	loc_72538
00080B9E                            ; ===========================================================================
00080B9E                            
00080B9E                            loc_72534:
00080B9E 4EBA 0000                  		jsr	sub_72CB4(pc)
00080BA2                            
00080BA2                            loc_72538:
00080BA2 DAFC 0030                  		adda.w	#$30,a5
00080BA6 51CF FFE6                  		dbf	d7,loc_72524
00080BAA                            
00080BAA 7E02                       		moveq	#2,d7
00080BAC                            
00080BAC                            loc_72542:
00080BAC 4A15                       		tst.b	(a5)
00080BAE 6A00                       		bpl.s	loc_72560
00080BB0 522D 0009                  		addq.b	#1,9(a5)
00080BB4 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00080BBA 6500                       		bcs.s	loc_72558
00080BBC 0895 0007                  		bclr	#7,(a5)
00080BC0 6000                       		bra.s	loc_72560
00080BC2                            ; ===========================================================================
00080BC2                            
00080BC2                            loc_72558:
00080BC2 1C2D 0009                  		move.b	9(a5),d6
00080BC6 4EBA 0000                  		jsr	sub_7296A(pc)
00080BCA                            
00080BCA                            loc_72560:
00080BCA DAFC 0030                  		adda.w	#$30,a5
00080BCE 51CF FFDC                  		dbf	d7,loc_72542
00080BD2                            
00080BD2 4E75                       		rts	
00080BD4                            ; End of function sub_72504
00080BD4                            
00080BD4                            
00080BD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080BD4                            
00080BD4                            
00080BD4                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00080BD4 7602                       		moveq	#2,d3
00080BD6 7028                       		moveq	#$28,d0
00080BD8                            
00080BD8                            loc_7256E:
00080BD8 1203                       		move.b	d3,d1
00080BDA 4EBA 0000                  		jsr	sub_7272E(pc)
00080BDE 5801                       		addq.b	#4,d1
00080BE0 4EBA 0000                  		jsr	sub_7272E(pc)
00080BE4 51CB FFF2                  		dbf	d3,loc_7256E
00080BE8                            
00080BE8 7040                       		moveq	#$40,d0
00080BEA 727F                       		moveq	#$7F,d1
00080BEC 7802                       		moveq	#2,d4
00080BEE                            
00080BEE                            loc_72584:
00080BEE 7603                       		moveq	#3,d3
00080BF0                            
00080BF0                            loc_72586:
00080BF0 4EBA 0000                  		jsr	sub_7272E(pc)
00080BF4 4EBA 0000                  		jsr	sub_72764(pc)
00080BF8 5840                       		addq.w	#4,d0
00080BFA 51CB FFF4                  		dbf	d3,loc_72586
00080BFE                            
00080BFE 0400 000F                  		subi.b	#$F,d0
00080C02 51CC FFEA                  		dbf	d4,loc_72584
00080C06                            
00080C06 4E75                       		rts	
00080C08                            ; End of function sub_7256A
00080C08                            
00080C08                            ; ===========================================================================
00080C08                            ; ---------------------------------------------------------------------------
00080C08                            ; Stop music
00080C08                            ; ---------------------------------------------------------------------------
00080C08                            
00080C08                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00080C08 702B                       		moveq	#$2B,d0
00080C0A 123C 0080                  		move.b	#$80,d1
00080C0E 4EBA 0000                  		jsr	sub_7272E(pc)
00080C12 7027                       		moveq	#$27,d0
00080C14 7200                       		moveq	#0,d1
00080C16 4EBA 0000                  		jsr	sub_7272E(pc)
00080C1A 204E                       		movea.l	a6,a0
00080C1C 303C 00E3                  		move.w	#$E3,d0
00080C20                            
00080C20                            loc_725B6:
00080C20 4298                       		clr.l	(a0)+
00080C22 51C8 FFFC                  		dbf	d0,loc_725B6
00080C26                            
00080C26 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00080C2C 4EBA FFA6                  		jsr	sub_7256A(pc)
00080C30 6000 0000                  		bra.w	sub_729B6
00080C34                            
00080C34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080C34                            
00080C34                            
00080C34                            sub_725CA:				; XREF: Sound_ChkValue
00080C34 204E                       		movea.l	a6,a0
00080C36 1216                       		move.b	0(a6),d1
00080C38 142E 0027                  		move.b	$27(a6),d2
00080C3C 162E 002A                  		move.b	$2A(a6),d3
00080C40 182E 0026                  		move.b	$26(a6),d4
00080C44 3A2E 000A                  		move.w	$A(a6),d5
00080C48 303C 0087                  		move.w	#$87,d0
00080C4C                            
00080C4C                            loc_725E4:
00080C4C 4298                       		clr.l	(a0)+
00080C4E 51C8 FFFC                  		dbf	d0,loc_725E4
00080C52                            
00080C52 1C81                       		move.b	d1,0(a6)
00080C54 1D42 0027                  		move.b	d2,$27(a6)
00080C58 1D43 002A                  		move.b	d3,$2A(a6)
00080C5C 1D44 0026                  		move.b	d4,$26(a6)
00080C60 3D45 000A                  		move.w	d5,$A(a6)
00080C64 1D7C 0080 0009             		move.b	#$80,9(a6)
00080C6A 4EBA FF68                  		jsr	sub_7256A(pc)
00080C6E 6000 0000                  		bra.w	sub_729B6
00080C72                            ; End of function sub_725CA
00080C72                            
00080C72                            
00080C72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080C72                            
00080C72                            
00080C72                            sub_7260C:				; XREF: sub_71B4C
00080C72 1D6E 0002 0001             		move.b	2(a6),1(a6)
00080C78 41EE 004E                  		lea	$4E(a6),a0
00080C7C 7030                       		moveq	#$30,d0
00080C7E 7209                       		moveq	#9,d1
00080C80                            
00080C80                            loc_7261A:
00080C80 5210                       		addq.b	#1,(a0)
00080C82 D0C0                       		adda.w	d0,a0
00080C84 51C9 FFFA                  		dbf	d1,loc_7261A
00080C88                            
00080C88 4E75                       		rts	
00080C8A                            ; End of function sub_7260C
00080C8A                            
00080C8A                            ; ===========================================================================
00080C8A                            ; ---------------------------------------------------------------------------
00080C8A                            ; Speed	up music
00080C8A                            ; ---------------------------------------------------------------------------
00080C8A                            
00080C8A                            Sound_E2:				; XREF: Sound_ExIndex
00080C8A 4A2E 0027                  		tst.b	$27(a6)
00080C8E 6600                       		bne.s	loc_7263E
00080C90 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00080C96 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00080C9C 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00080CA2 4E75                       		rts	
00080CA4                            ; ===========================================================================
00080CA4                            
00080CA4                            loc_7263E:
00080CA4 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00080CAA 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00080CB0 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
00080CB6 4E75                       		rts	
00080CB8                            ; ===========================================================================
00080CB8                            ; ---------------------------------------------------------------------------
00080CB8                            ; Change music back to normal speed
00080CB8                            ; ---------------------------------------------------------------------------
00080CB8                            
00080CB8                            Sound_E3:				; XREF: Sound_ExIndex
00080CB8 4A2E 0027                  		tst.b	$27(a6)
00080CBC 6600                       		bne.s	loc_7266A
00080CBE 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00080CC4 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00080CCA 422E 002A                  		clr.b	$2A(a6)
00080CCE 4E75                       		rts	
00080CD0                            ; ===========================================================================
00080CD0                            
00080CD0                            loc_7266A:
00080CD0 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
00080CD6 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00080CDC 422E 03CA                  		clr.b	$3CA(a6)
00080CE0 4E75                       		rts	
00080CE2                            
00080CE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080CE2                            
00080CE2                            
00080CE2                            sub_7267C:				; XREF: sub_71B4C
00080CE2 4A2E 0025                  		tst.b	$25(a6)
00080CE6 6700                       		beq.s	loc_72688
00080CE8 532E 0025                  		subq.b	#1,$25(a6)
00080CEC 4E75                       		rts	
00080CEE                            ; ===========================================================================
00080CEE                            
00080CEE                            loc_72688:
00080CEE 4A2E 0026                  		tst.b	$26(a6)
00080CF2 6700                       		beq.s	loc_726D6
00080CF4 532E 0026                  		subq.b	#1,$26(a6)
00080CF8 1D7C 0002 0025             		move.b	#2,$25(a6)
00080CFE 4BEE 0070                  		lea	$70(a6),a5
00080D02 7E05                       		moveq	#5,d7
00080D04                            
00080D04                            loc_7269E:
00080D04 4A15                       		tst.b	(a5)
00080D06 6A00                       		bpl.s	loc_726AA
00080D08 532D 0009                  		subq.b	#1,9(a5)
00080D0C 4EBA 0000                  		jsr	sub_72CB4(pc)
00080D10                            
00080D10                            loc_726AA:
00080D10 DAFC 0030                  		adda.w	#$30,a5
00080D14 51CF FFEE                  		dbf	d7,loc_7269E
00080D18 7E02                       		moveq	#2,d7
00080D1A                            
00080D1A                            loc_726B4:
00080D1A 4A15                       		tst.b	(a5)
00080D1C 6A00                       		bpl.s	loc_726CC
00080D1E 532D 0009                  		subq.b	#1,9(a5)
00080D22 1C2D 0009                  		move.b	9(a5),d6
00080D26 0C06 0010                  		cmpi.b	#$10,d6
00080D2A 6500                       		bcs.s	loc_726C8
00080D2C 7C0F                       		moveq	#$F,d6
00080D2E                            
00080D2E                            loc_726C8:
00080D2E 4EBA 0000                  		jsr	sub_7296A(pc)
00080D32                            
00080D32                            loc_726CC:
00080D32 DAFC 0030                  		adda.w	#$30,a5
00080D36 51CF FFE2                  		dbf	d7,loc_726B4
00080D3A 4E75                       		rts	
00080D3C                            ; ===========================================================================
00080D3C                            
00080D3C                            loc_726D6:
00080D3C 08AE 0002 0040             		bclr	#2,$40(a6)
00080D42 422E 0024                  		clr.b	$24(a6)
00080D46 4E75                       		rts	
00080D48                            ; End of function sub_7267C
00080D48                            
00080D48                            ; ===========================================================================
00080D48                            
00080D48                            loc_726E2:				; XREF: sub_71CCA
00080D48 0815 0001                  		btst	#1,(a5)
00080D4C 6600                       		bne.s	locret_726FC
00080D4E 0815 0002                  		btst	#2,(a5)
00080D52 6600                       		bne.s	locret_726FC
00080D54 7028                       		moveq	#$28,d0
00080D56 122D 0001                  		move.b	1(a5),d1
00080D5A 0001 00F0                  		ori.b	#-$10,d1
00080D5E 6000 0000                  		bra.w	sub_7272E
00080D62                            ; ===========================================================================
00080D62                            
00080D62                            locret_726FC:
00080D62 4E75                       		rts	
00080D64                            
00080D64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080D64                            
00080D64                            
00080D64                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00080D64 0815 0004                  		btst	#4,(a5)
00080D68 6600                       		bne.s	locret_72714
00080D6A 0815 0002                  		btst	#2,(a5)
00080D6E 6600                       		bne.s	locret_72714
00080D70                            
00080D70                            loc_7270A:				; XREF: Snd_FadeOut2
00080D70 7028                       		moveq	#$28,d0
00080D72 122D 0001                  		move.b	1(a5),d1
00080D76 6000 0000                  		bra.w	sub_7272E
00080D7A                            ; ===========================================================================
00080D7A                            
00080D7A                            locret_72714:
00080D7A 4E75                       		rts	
00080D7C                            ; End of function sub_726FE
00080D7C                            
00080D7C                            ; ===========================================================================
00080D7C                            
00080D7C                            loc_72716:				; XREF: sub_72A5A
00080D7C 0815 0002                  		btst	#2,(a5)
00080D80 6600                       		bne.s	locret_72720
00080D82 6000 0000                  		bra.w	sub_72722
00080D86                            ; ===========================================================================
00080D86                            
00080D86                            locret_72720:
00080D86 4E75                       		rts	
00080D88                            
00080D88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080D88                            
00080D88                            
00080D88                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00080D88 082D 0002 0001             		btst	#2,1(a5)
00080D8E 6600                       		bne.s	loc_7275A
00080D90 D02D 0001                  		add.b	1(a5),d0
00080D94                            ; End of function sub_72722
00080D94                            
00080D94                            
00080D94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080D94                            
00080D94                            
00080D94                            sub_7272E:				; XREF: loc_71E6A
00080D94 1439 00A0 4000             		move.b	($A04000).l,d2
00080D9A 0802 0007                  		btst	#7,d2
00080D9E 66F4                       		bne.s	sub_7272E
00080DA0 13C0 00A0 4000             		move.b	d0,($A04000).l
00080DA6 4E71                       		nop	
00080DA8 4E71                       		nop	
00080DAA 4E71                       		nop	
00080DAC                            
00080DAC                            loc_72746:
00080DAC 1439 00A0 4000             		move.b	($A04000).l,d2
00080DB2 0802 0007                  		btst	#7,d2
00080DB6 66F4                       		bne.s	loc_72746
00080DB8                            
00080DB8 13C1 00A0 4001             		move.b	d1,($A04001).l
00080DBE 4E75                       		rts	
00080DC0                            ; End of function sub_7272E
00080DC0                            
00080DC0                            ; ===========================================================================
00080DC0                            
00080DC0                            loc_7275A:				; XREF: sub_72722
00080DC0 142D 0001                  		move.b	1(a5),d2
00080DC4 0882 0002                  		bclr	#2,d2
00080DC8 D002                       		add.b	d2,d0
00080DCA                            
00080DCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080DCA                            
00080DCA                            
00080DCA                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00080DCA 1439 00A0 4000             		move.b	($A04000).l,d2
00080DD0 0802 0007                  		btst	#7,d2
00080DD4 66F4                       		bne.s	sub_72764
00080DD6 13C0 00A0 4002             		move.b	d0,($A04002).l
00080DDC 4E71                       		nop	
00080DDE 4E71                       		nop	
00080DE0 4E71                       		nop	
00080DE2                            
00080DE2                            loc_7277C:
00080DE2 1439 00A0 4000             		move.b	($A04000).l,d2
00080DE8 0802 0007                  		btst	#7,d2
00080DEC 66F4                       		bne.s	loc_7277C
00080DEE                            
00080DEE 13C1 00A0 4003             		move.b	d1,($A04003).l
00080DF4 4E75                       		rts	
00080DF6                            ; End of function sub_72764
00080DF6                            
00080DF6                            ; ===========================================================================
00080DF6 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00080E08 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00080E1A 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00080E2A 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00080E3A 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00080E4A 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00080E5A 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00080E6A 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00080E7A 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00080E8A 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00080E9A 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00080EAA 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00080EB6                            
00080EB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080EB6                            
00080EB6                            
00080EB6                            sub_72850:				; XREF: sub_71B4C
00080EB6 532D 000E                  		subq.b	#1,$E(a5)
00080EBA 6600                       		bne.s	loc_72866
00080EBC 0895 0004                  		bclr	#4,(a5)
00080EC0 4EBA 0000                  		jsr	sub_72878(pc)
00080EC4 4EBA 0000                  		jsr	sub_728DC(pc)
00080EC8 6000 0000                  		bra.w	loc_7292E
00080ECC                            ; ===========================================================================
00080ECC                            
00080ECC                            loc_72866:
00080ECC 4EBA F418                  		jsr	sub_71D9E(pc)
00080ED0 4EBA 0000                  		jsr	sub_72926(pc)
00080ED4 4EBA F438                  		jsr	sub_71DC6(pc)
00080ED8 4EBA 0000                  		jsr	sub_728E2(pc)
00080EDC 4E75                       		rts	
00080EDE                            ; End of function sub_72850
00080EDE                            
00080EDE                            
00080EDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080EDE                            
00080EDE                            
00080EDE                            sub_72878:				; XREF: sub_72850
00080EDE 0895 0001                  		bclr	#1,(a5)
00080EE2 286D 0004                  		movea.l	4(a5),a4
00080EE6                            
00080EE6                            loc_72880:
00080EE6 7A00                       		moveq	#0,d5
00080EE8 1A1C                       		move.b	(a4)+,d5
00080EEA 0C05 00E0                  		cmpi.b	#$E0,d5
00080EEE 6500                       		bcs.s	loc_72890
00080EF0 4EBA 0000                  		jsr	sub_72A5A(pc)
00080EF4 60F0                       		bra.s	loc_72880
00080EF6                            ; ===========================================================================
00080EF6                            
00080EF6                            loc_72890:
00080EF6 4A05                       		tst.b	d5
00080EF8 6A00                       		bpl.s	loc_728A4
00080EFA 4EBA 0000                  		jsr	sub_728AC(pc)
00080EFE 1A1C                       		move.b	(a4)+,d5
00080F00 4A05                       		tst.b	d5
00080F02 6A00                       		bpl.s	loc_728A4
00080F04 534C                       		subq.w	#1,a4
00080F06 6000 F3A0                  		bra.w	sub_71D60
00080F0A                            ; ===========================================================================
00080F0A                            
00080F0A                            loc_728A4:
00080F0A 4EBA F37C                  		jsr	sub_71D40(pc)
00080F0E 6000 F398                  		bra.w	sub_71D60
00080F12                            ; End of function sub_72878
00080F12                            
00080F12                            
00080F12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080F12                            
00080F12                            
00080F12                            sub_728AC:				; XREF: sub_72878
00080F12 0405 0081                  		subi.b	#$81,d5
00080F16 6500                       		bcs.s	loc_728CA
00080F18 DA2D 0008                  		add.b	8(a5),d5
00080F1C 0245 007F                  		andi.w	#$7F,d5
00080F20 E34D                       		lsl.w	#1,d5
00080F22 41FA 0000                  		lea	word_729CE(pc),a0
00080F26 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00080F2C 6000 F37A                  		bra.w	sub_71D60
00080F30                            ; ===========================================================================
00080F30                            
00080F30                            loc_728CA:
00080F30 08D5 0001                  		bset	#1,(a5)
00080F34 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00080F3A 4EBA F36C                  		jsr	sub_71D60(pc)
00080F3E 6000 0000                  		bra.w	sub_729A0
00080F42                            ; End of function sub_728AC
00080F42                            
00080F42                            
00080F42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080F42                            
00080F42                            
00080F42                            sub_728DC:				; XREF: sub_72850
00080F42 3C2D 0010                  		move.w	$10(a5),d6
00080F46 6B00                       		bmi.s	loc_72920
00080F48                            ; End of function sub_728DC
00080F48                            
00080F48                            
00080F48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080F48                            
00080F48                            
00080F48                            sub_728E2:				; XREF: sub_72850
00080F48 102D 001E                  		move.b	$1E(a5),d0
00080F4C 4880                       		ext.w	d0
00080F4E DC40                       		add.w	d0,d6
00080F50 0815 0002                  		btst	#2,(a5)
00080F54 6600                       		bne.s	locret_7291E
00080F56 0815 0001                  		btst	#1,(a5)
00080F5A 6600                       		bne.s	locret_7291E
00080F5C 102D 0001                  		move.b	1(a5),d0
00080F60 0C00 00E0                  		cmpi.b	#$E0,d0
00080F64 6600                       		bne.s	loc_72904
00080F66 103C 00C0                  		move.b	#$C0,d0
00080F6A                            
00080F6A                            loc_72904:
00080F6A 3206                       		move.w	d6,d1
00080F6C 0201 000F                  		andi.b	#$F,d1
00080F70 8001                       		or.b	d1,d0
00080F72 E84E                       		lsr.w	#4,d6
00080F74 0206 003F                  		andi.b	#$3F,d6
00080F78 13C0 00C0 0011             		move.b	d0,($C00011).l
00080F7E 13C6 00C0 0011             		move.b	d6,($C00011).l
00080F84                            
00080F84                            locret_7291E:
00080F84 4E75                       		rts	
00080F86                            ; End of function sub_728E2
00080F86                            
00080F86                            ; ===========================================================================
00080F86                            
00080F86                            loc_72920:				; XREF: sub_728DC
00080F86 08D5 0001                  		bset	#1,(a5)
00080F8A 4E75                       		rts	
00080F8C                            
00080F8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080F8C                            
00080F8C                            
00080F8C                            sub_72926:				; XREF: sub_72850
00080F8C 4A2D 000B                  		tst.b	$B(a5)
00080F90 6700 0000                  		beq.w	locret_7298A
00080F94                            
00080F94                            loc_7292E:				; XREF: sub_72850
00080F94 1C2D 0009                  		move.b	9(a5),d6
00080F98 7000                       		moveq	#0,d0
00080F9A 102D 000B                  		move.b	$B(a5),d0
00080F9E 6700                       		beq.s	sub_7296A
00080FA0 2079 0007 FE0A             		movea.l	(Go_PSGIndex).l,a0
00080FA6 5340                       		subq.w	#1,d0
00080FA8 E548                       		lsl.w	#2,d0
00080FAA 2070 0000                  		movea.l	(a0,d0.w),a0
00080FAE 102D 000C                  		move.b	$C(a5),d0
00080FB2 1030 0000                  		move.b	(a0,d0.w),d0
00080FB6 522D 000C                  		addq.b	#1,$C(a5)
00080FBA 0800 0007                  		btst	#7,d0
00080FBE 6700                       		beq.s	loc_72960
00080FC0 0C00 0080                  		cmpi.b	#$80,d0
00080FC4 6700                       		beq.s	loc_7299A
00080FC6                            
00080FC6                            loc_72960:
00080FC6 DC40                       		add.w	d0,d6
00080FC8 0C06 0010                  		cmpi.b	#$10,d6
00080FCC 6500                       		bcs.s	sub_7296A
00080FCE 7C0F                       		moveq	#$F,d6
00080FD0                            ; End of function sub_72926
00080FD0                            
00080FD0                            
00080FD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080FD0                            
00080FD0                            
00080FD0                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00080FD0 0815 0001                  		btst	#1,(a5)
00080FD4 6600                       		bne.s	locret_7298A
00080FD6 0815 0002                  		btst	#2,(a5)
00080FDA 6600                       		bne.s	locret_7298A
00080FDC 0815 0004                  		btst	#4,(a5)
00080FE0 6600                       		bne.s	loc_7298C
00080FE2                            
00080FE2                            loc_7297C:
00080FE2 8C2D 0001                  		or.b	1(a5),d6
00080FE6 0606 0010                  		addi.b	#$10,d6
00080FEA 13C6 00C0 0011             		move.b	d6,($C00011).l
00080FF0                            
00080FF0                            locret_7298A:
00080FF0 4E75                       		rts	
00080FF2                            ; ===========================================================================
00080FF2                            
00080FF2                            loc_7298C:
00080FF2 4A2D 0013                  		tst.b	$13(a5)
00080FF6 67EA                       		beq.s	loc_7297C
00080FF8 4A2D 0012                  		tst.b	$12(a5)
00080FFC 66E4                       		bne.s	loc_7297C
00080FFE 4E75                       		rts	
00081000                            ; End of function sub_7296A
00081000                            
00081000                            ; ===========================================================================
00081000                            
00081000                            loc_7299A:				; XREF: sub_72926
00081000 532D 000C                  		subq.b	#1,$C(a5)
00081004 4E75                       		rts	
00081006                            
00081006                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00081006                            
00081006                            
00081006                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00081006 0815 0002                  		btst	#2,(a5)
0008100A 6600                       		bne.s	locret_729B4
0008100C                            
0008100C                            loc_729A6:				; XREF: Snd_FadeOut2
0008100C 102D 0001                  		move.b	1(a5),d0
00081010 0000 001F                  		ori.b	#$1F,d0
00081014 13C0 00C0 0011             		move.b	d0,($C00011).l
0008101A                            
0008101A                            locret_729B4:
0008101A 4E75                       		rts	
0008101C                            ; End of function sub_729A0
0008101C                            
0008101C                            
0008101C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008101C                            
0008101C                            
0008101C                            sub_729B6:				; XREF: loc_71E7C
0008101C 41F9 00C0 0011             		lea	($C00011).l,a0
00081022 10BC 009F                  		move.b	#$9F,(a0)
00081026 10BC 00BF                  		move.b	#$BF,(a0)
0008102A 10BC 00DF                  		move.b	#$DF,(a0)
0008102E 10BC 00FF                  		move.b	#$FF,(a0)
00081032 4E75                       		rts	
00081034                            ; End of function sub_729B6
00081034                            
00081034                            ; ===========================================================================
00081034 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00081046 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00081058 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0008106C 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00081080 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00081094 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000810A8 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000810BC 0011 0000                  		dc.w $11, 0
000810C0                            
000810C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000810C0                            
000810C0                            
000810C0                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000810C0 0445 00E0                  		subi.w	#$E0,d5
000810C4 E54D                       		lsl.w	#2,d5
000810C6 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000810CA                            ; End of function sub_72A5A
000810CA                            
000810CA                            ; ===========================================================================
000810CA                            
000810CA                            loc_72A64:
000810CA 6000 0000                  		bra.w	loc_72ACC
000810CE                            ; ===========================================================================
000810CE 6000 0000                  		bra.w	loc_72AEC
000810D2                            ; ===========================================================================
000810D2 6000 0000                  		bra.w	loc_72AF2
000810D6                            ; ===========================================================================
000810D6 6000 0000                  		bra.w	loc_72AF8
000810DA                            ; ===========================================================================
000810DA 6000 0000                  		bra.w	loc_72B14
000810DE                            ; ===========================================================================
000810DE 6000 0000                  		bra.w	loc_72B9E
000810E2                            ; ===========================================================================
000810E2 6000 0000                  		bra.w	loc_72BA4
000810E6                            ; ===========================================================================
000810E6 6000 0000                  		bra.w	loc_72BAE
000810EA                            ; ===========================================================================
000810EA 6000 0000                  		bra.w	loc_72BB4
000810EE                            ; ===========================================================================
000810EE 6000 0000                  		bra.w	loc_72BBE
000810F2                            ; ===========================================================================
000810F2 6000 0000                  		bra.w	loc_72BC6
000810F6                            ; ===========================================================================
000810F6 6000 0000                  		bra.w	loc_72BD0
000810FA                            ; ===========================================================================
000810FA 6000 0000                  		bra.w	loc_72BE6
000810FE                            ; ===========================================================================
000810FE 6000 0000                  		bra.w	loc_72BEE
00081102                            ; ===========================================================================
00081102 6000 0000                  		bra.w	loc_72BF4
00081106                            ; ===========================================================================
00081106 6000 0000                  		bra.w	loc_72C26
0008110A                            ; ===========================================================================
0008110A 6000 0000                  		bra.w	loc_72D30
0008110E                            ; ===========================================================================
0008110E 6000 0000                  		bra.w	loc_72D52
00081112                            ; ===========================================================================
00081112 6000 0000                  		bra.w	loc_72D58
00081116                            ; ===========================================================================
00081116 6000 0000                  		bra.w	loc_72E06
0008111A                            ; ===========================================================================
0008111A 6000 0000                  		bra.w	loc_72E20
0008111E                            ; ===========================================================================
0008111E 6000 0000                  		bra.w	loc_72E26
00081122                            ; ===========================================================================
00081122 6000 0000                  		bra.w	loc_72E2C
00081126                            ; ===========================================================================
00081126 6000 0000                  		bra.w	loc_72E38
0008112A                            ; ===========================================================================
0008112A 6000 0000                  		bra.w	loc_72E52
0008112E                            ; ===========================================================================
0008112E 6000 0000                  		bra.w	loc_72E64
00081132                            ; ===========================================================================
00081132                            
00081132                            loc_72ACC:				; XREF: loc_72A64
00081132 121C                       		move.b	(a4)+,d1
00081134 4A2D 0001                  		tst.b	1(a5)
00081138 6B00                       		bmi.s	locret_72AEA
0008113A 102D 000A                  		move.b	$A(a5),d0
0008113E 0200 0037                  		andi.b	#$37,d0
00081142 8200                       		or.b	d0,d1
00081144 1B41 000A                  		move.b	d1,$A(a5)
00081148 103C 00B4                  		move.b	#$B4,d0
0008114C 6000 FC2E                  		bra.w	loc_72716
00081150                            ; ===========================================================================
00081150                            
00081150                            locret_72AEA:
00081150 4E75                       		rts	
00081152                            ; ===========================================================================
00081152                            
00081152                            loc_72AEC:				; XREF: loc_72A64
00081152 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00081156 4E75                       		rts	
00081158                            ; ===========================================================================
00081158                            
00081158                            loc_72AF2:				; XREF: loc_72A64
00081158 1D5C 0007                  		move.b	(a4)+,7(a6)
0008115C 4E75                       		rts	
0008115E                            ; ===========================================================================
0008115E                            
0008115E                            loc_72AF8:				; XREF: loc_72A64
0008115E 7000                       		moveq	#0,d0
00081160 102D 000D                  		move.b	$D(a5),d0
00081164 2875 0000                  		movea.l	(a5,d0.w),a4
00081168 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00081170 544C                       		addq.w	#2,a4
00081172 5800                       		addq.b	#4,d0
00081174 1B40 000D                  		move.b	d0,$D(a5)
00081178 4E75                       		rts	
0008117A                            ; ===========================================================================
0008117A                            
0008117A                            loc_72B14:				; XREF: loc_72A64
0008117A 204E                       		movea.l	a6,a0
0008117C 43EE 03A0                  		lea	$3A0(a6),a1
00081180 303C 0087                  		move.w	#$87,d0
00081184                            
00081184                            loc_72B1E:
00081184 20D9                       		move.l	(a1)+,(a0)+
00081186 51C8 FFFC                  		dbf	d0,loc_72B1E
0008118A                            
0008118A 08EE 0002 0040             		bset	#2,$40(a6)
00081190 264D                       		movea.l	a5,a3
00081192 1C3C 0028                  		move.b	#$28,d6
00081196 9C2E 0026                  		sub.b	$26(a6),d6
0008119A 7E05                       		moveq	#5,d7
0008119C 4BEE 0070                  		lea	$70(a6),a5
000811A0                            
000811A0                            loc_72B3A:
000811A0 0815 0007                  		btst	#7,(a5)
000811A4 6700                       		beq.s	loc_72B5C
000811A6 08D5 0001                  		bset	#1,(a5)
000811AA DD2D 0009                  		add.b	d6,9(a5)
000811AE 0815 0002                  		btst	#2,(a5)
000811B2 6600                       		bne.s	loc_72B5C
000811B4 7000                       		moveq	#0,d0
000811B6 102D 000B                  		move.b	$B(a5),d0
000811BA 226E 0018                  		movea.l	$18(a6),a1
000811BE 4EBA 0000                  		jsr	sub_72C4E(pc)
000811C2                            
000811C2                            loc_72B5C:
000811C2 DAFC 0030                  		adda.w	#$30,a5
000811C6 51CF FFD8                  		dbf	d7,loc_72B3A
000811CA                            
000811CA 7E02                       		moveq	#2,d7
000811CC                            
000811CC                            loc_72B66:
000811CC 0815 0007                  		btst	#7,(a5)
000811D0 6700                       		beq.s	loc_72B78
000811D2 08D5 0001                  		bset	#1,(a5)
000811D6 4EBA FE2E                  		jsr	sub_729A0(pc)
000811DA DD2D 0009                  		add.b	d6,9(a5)
000811DE                            
000811DE                            loc_72B78:
000811DE DAFC 0030                  		adda.w	#$30,a5
000811E2 51CF FFE8                  		dbf	d7,loc_72B66
000811E6 2A4B                       		movea.l	a3,a5
000811E8 1D7C 0080 0024             		move.b	#$80,$24(a6)
000811EE 1D7C 0028 0026             		move.b	#$28,$26(a6)
000811F4 422E 0027                  		clr.b	$27(a6)
000811F8 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00081200 504F                       		addq.w	#8,sp
00081202 4E75                       		rts	
00081204                            ; ===========================================================================
00081204                            
00081204                            loc_72B9E:				; XREF: loc_72A64
00081204 1B5C 0002                  		move.b	(a4)+,2(a5)
00081208 4E75                       		rts	
0008120A                            ; ===========================================================================
0008120A                            
0008120A                            loc_72BA4:				; XREF: loc_72A64
0008120A 101C                       		move.b	(a4)+,d0
0008120C D12D 0009                  		add.b	d0,9(a5)
00081210 6000 0000                  		bra.w	sub_72CB4
00081214                            ; ===========================================================================
00081214                            
00081214                            loc_72BAE:				; XREF: loc_72A64
00081214 08D5 0004                  		bset	#4,(a5)
00081218 4E75                       		rts	
0008121A                            ; ===========================================================================
0008121A                            
0008121A                            loc_72BB4:				; XREF: loc_72A64
0008121A 1B54 0012                  		move.b	(a4),$12(a5)
0008121E 1B5C 0013                  		move.b	(a4)+,$13(a5)
00081222 4E75                       		rts	
00081224                            ; ===========================================================================
00081224                            
00081224                            loc_72BBE:				; XREF: loc_72A64
00081224 101C                       		move.b	(a4)+,d0
00081226 D12D 0008                  		add.b	d0,8(a5)
0008122A 4E75                       		rts	
0008122C                            ; ===========================================================================
0008122C                            
0008122C                            loc_72BC6:				; XREF: loc_72A64
0008122C 1D54 0002                  		move.b	(a4),2(a6)
00081230 1D5C 0001                  		move.b	(a4)+,1(a6)
00081234 4E75                       		rts	
00081236                            ; ===========================================================================
00081236                            
00081236                            loc_72BD0:				; XREF: loc_72A64
00081236 41EE 0040                  		lea	$40(a6),a0
0008123A 101C                       		move.b	(a4)+,d0
0008123C 7230                       		moveq	#$30,d1
0008123E 7409                       		moveq	#9,d2
00081240                            
00081240                            loc_72BDA:
00081240 1140 0002                  		move.b	d0,2(a0)
00081244 D0C1                       		adda.w	d1,a0
00081246 51CA FFF8                  		dbf	d2,loc_72BDA
0008124A                            
0008124A 4E75                       		rts	
0008124C                            ; ===========================================================================
0008124C                            
0008124C                            loc_72BE6:				; XREF: loc_72A64
0008124C 101C                       		move.b	(a4)+,d0
0008124E D12D 0009                  		add.b	d0,9(a5)
00081252 4E75                       		rts	
00081254                            ; ===========================================================================
00081254                            
00081254                            loc_72BEE:				; XREF: loc_72A64
00081254 422E 002C                  		clr.b	$2C(a6)
00081258 4E75                       		rts	
0008125A                            ; ===========================================================================
0008125A                            
0008125A                            loc_72BF4:				; XREF: loc_72A64
0008125A 0895 0007                  		bclr	#7,(a5)
0008125E 0895 0004                  		bclr	#4,(a5)
00081262 4EBA FB00                  		jsr	sub_726FE(pc)
00081266 4A2E 0250                  		tst.b	$250(a6)
0008126A 6B00                       		bmi.s	loc_72C22
0008126C 264D                       		movea.l	a5,a3
0008126E 4BEE 0100                  		lea	$100(a6),a5
00081272 226E 0018                  		movea.l	$18(a6),a1
00081276 0895 0002                  		bclr	#2,(a5)
0008127A 08D5 0001                  		bset	#1,(a5)
0008127E 102D 000B                  		move.b	$B(a5),d0
00081282 4EBA 0000                  		jsr	sub_72C4E(pc)
00081286 2A4B                       		movea.l	a3,a5
00081288                            
00081288                            loc_72C22:
00081288 504F                       		addq.w	#8,sp
0008128A 4E75                       		rts	
0008128C                            ; ===========================================================================
0008128C                            
0008128C                            loc_72C26:				; XREF: loc_72A64
0008128C 7000                       		moveq	#0,d0
0008128E 101C                       		move.b	(a4)+,d0
00081290 1B40 000B                  		move.b	d0,$B(a5)
00081294 0815 0002                  		btst	#2,(a5)
00081298 6600 0000                  		bne.w	locret_72CAA
0008129C 226E 0018                  		movea.l	$18(a6),a1
000812A0 4A2E 000E                  		tst.b	$E(a6)
000812A4 6700                       		beq.s	sub_72C4E
000812A6 226D 0020                  		movea.l	$20(a5),a1
000812AA 4A2E 000E                  		tst.b	$E(a6)
000812AE 6B00                       		bmi.s	sub_72C4E
000812B0 226E 0020                  		movea.l	$20(a6),a1
000812B4                            
000812B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000812B4                            
000812B4                            
000812B4                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000812B4 5340                       		subq.w	#1,d0
000812B6 6B00                       		bmi.s	loc_72C5C
000812B8 323C 0019                  		move.w	#$19,d1
000812BC                            
000812BC                            loc_72C56:
000812BC D2C1                       		adda.w	d1,a1
000812BE 51C8 FFFC                  		dbf	d0,loc_72C56
000812C2                            
000812C2                            loc_72C5C:
000812C2 1219                       		move.b	(a1)+,d1
000812C4 1B41 001F                  		move.b	d1,$1F(a5)
000812C8 1801                       		move.b	d1,d4
000812CA 103C 00B0                  		move.b	#$B0,d0
000812CE 4EBA FAB8                  		jsr	sub_72722(pc)
000812D2 45FA 0000                  		lea	byte_72D18(pc),a2
000812D6 7613                       		moveq	#$13,d3
000812D8                            
000812D8                            loc_72C72:
000812D8 101A                       		move.b	(a2)+,d0
000812DA 1219                       		move.b	(a1)+,d1
000812DC 4EBA FAAA                  		jsr	sub_72722(pc)
000812E0 51CB FFF6                  		dbf	d3,loc_72C72
000812E4 7A03                       		moveq	#3,d5
000812E6 0244 0007                  		andi.w	#7,d4
000812EA 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000812EE 162D 0009                  		move.b	9(a5),d3
000812F2                            
000812F2                            loc_72C8C:
000812F2 101A                       		move.b	(a2)+,d0
000812F4 1219                       		move.b	(a1)+,d1
000812F6 E20C                       		lsr.b	#1,d4
000812F8 6400                       		bcc.s	loc_72C96
000812FA D203                       		add.b	d3,d1
000812FC                            
000812FC                            loc_72C96:
000812FC 4EBA FA8A                  		jsr	sub_72722(pc)
00081300 51CD FFF0                  		dbf	d5,loc_72C8C
00081304 103C 00B4                  		move.b	#$B4,d0
00081308 122D 000A                  		move.b	$A(a5),d1
0008130C 4EBA FA7A                  		jsr	sub_72722(pc)
00081310                            
00081310                            locret_72CAA:
00081310 4E75                       		rts	
00081312                            ; End of function sub_72C4E
00081312                            
00081312                            ; ===========================================================================
00081312 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0008131A                            
0008131A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008131A                            
0008131A                            
0008131A                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0008131A 0815 0002                  		btst	#2,(a5)
0008131E 6600                       		bne.s	locret_72D16
00081320 7000                       		moveq	#0,d0
00081322 102D 000B                  		move.b	$B(a5),d0
00081326 226E 0018                  		movea.l	$18(a6),a1
0008132A 4A2E 000E                  		tst.b	$E(a6)
0008132E 6700                       		beq.s	loc_72CD8
00081330 226E 0020                  		movea.l	$20(a6),a1
00081334 4A2E 000E                  		tst.b	$E(a6)
00081338 6B00                       		bmi.s	loc_72CD8
0008133A 226E 0020                  		movea.l	$20(a6),a1
0008133E                            
0008133E                            loc_72CD8:
0008133E 5340                       		subq.w	#1,d0
00081340 6B00                       		bmi.s	loc_72CE6
00081342 323C 0019                  		move.w	#$19,d1
00081346                            
00081346                            loc_72CE0:
00081346 D2C1                       		adda.w	d1,a1
00081348 51C8 FFFC                  		dbf	d0,loc_72CE0
0008134C                            
0008134C                            loc_72CE6:
0008134C D2FC 0015                  		adda.w	#$15,a1
00081350 45FA 0000                  		lea	byte_72D2C(pc),a2
00081354 102D 001F                  		move.b	$1F(a5),d0
00081358 0240 0007                  		andi.w	#7,d0
0008135C 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00081360 162D 0009                  		move.b	9(a5),d3
00081364 6B00                       		bmi.s	locret_72D16
00081366 7A03                       		moveq	#3,d5
00081368                            
00081368                            loc_72D02:
00081368 101A                       		move.b	(a2)+,d0
0008136A 1219                       		move.b	(a1)+,d1
0008136C E20C                       		lsr.b	#1,d4
0008136E 6400                       		bcc.s	loc_72D12
00081370 D203                       		add.b	d3,d1
00081372 6500                       		bcs.s	loc_72D12
00081374 4EBA FA12                  		jsr	sub_72722(pc)
00081378                            
00081378                            loc_72D12:
00081378 51CD FFEE                  		dbf	d5,loc_72D02
0008137C                            
0008137C                            locret_72D16:
0008137C 4E75                       		rts	
0008137E                            ; End of function sub_72CB4
0008137E                            
0008137E                            ; ===========================================================================
0008137E 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00081388 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00081392 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00081396                            ; ===========================================================================
00081396                            
00081396                            loc_72D30:				; XREF: loc_72A64
00081396 08D5 0003                  		bset	#3,(a5)
0008139A 2B4C 0014                  		move.l	a4,$14(a5)
0008139E 1B5C 0018                  		move.b	(a4)+,$18(a5)
000813A2 1B5C 0019                  		move.b	(a4)+,$19(a5)
000813A6 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000813AA 101C                       		move.b	(a4)+,d0
000813AC E208                       		lsr.b	#1,d0
000813AE 1B40 001B                  		move.b	d0,$1B(a5)
000813B2 426D 001C                  		clr.w	$1C(a5)
000813B6 4E75                       		rts	
000813B8                            ; ===========================================================================
000813B8                            
000813B8                            loc_72D52:				; XREF: loc_72A64
000813B8 08D5 0003                  		bset	#3,(a5)
000813BC 4E75                       		rts	
000813BE                            ; ===========================================================================
000813BE                            
000813BE                            loc_72D58:				; XREF: loc_72A64
000813BE 0895 0007                  		bclr	#7,(a5)
000813C2 0895 0004                  		bclr	#4,(a5)
000813C6 4A2D 0001                  		tst.b	1(a5)
000813CA 6B00                       		bmi.s	loc_72D74
000813CC 4A2E 0008                  		tst.b	8(a6)
000813D0 6B00 0000                  		bmi.w	loc_72E02
000813D4 4EBA F98E                  		jsr	sub_726FE(pc)
000813D8 6000                       		bra.s	loc_72D78
000813DA                            ; ===========================================================================
000813DA                            
000813DA                            loc_72D74:
000813DA 4EBA FC2A                  		jsr	sub_729A0(pc)
000813DE                            
000813DE                            loc_72D78:
000813DE 4A2E 000E                  		tst.b	$E(a6)
000813E2 6A00 0000                  		bpl.w	loc_72E02
000813E6 4216                       		clr.b	0(a6)
000813E8 7000                       		moveq	#0,d0
000813EA 102D 0001                  		move.b	1(a5),d0
000813EE 6B00                       		bmi.s	loc_72DCC
000813F0 41FA F546                  		lea	dword_722CC(pc),a0
000813F4 264D                       		movea.l	a5,a3
000813F6 0C00 0004                  		cmpi.b	#4,d0
000813FA 6600                       		bne.s	loc_72DA8
000813FC 4A2E 0340                  		tst.b	$340(a6)
00081400 6A00                       		bpl.s	loc_72DA8
00081402 4BEE 0340                  		lea	$340(a6),a5
00081406 226E 0020                  		movea.l	$20(a6),a1
0008140A 6000                       		bra.s	loc_72DB8
0008140C                            ; ===========================================================================
0008140C                            
0008140C                            loc_72DA8:
0008140C 5500                       		subq.b	#2,d0
0008140E E508                       		lsl.b	#2,d0
00081410 2A70 0000                  		movea.l	(a0,d0.w),a5
00081414 4A15                       		tst.b	(a5)
00081416 6A00                       		bpl.s	loc_72DC8
00081418 226E 0018                  		movea.l	$18(a6),a1
0008141C                            
0008141C                            loc_72DB8:
0008141C 0895 0002                  		bclr	#2,(a5)
00081420 08D5 0001                  		bset	#1,(a5)
00081424 102D 000B                  		move.b	$B(a5),d0
00081428 4EBA FE8A                  		jsr	sub_72C4E(pc)
0008142C                            
0008142C                            loc_72DC8:
0008142C 2A4B                       		movea.l	a3,a5
0008142E 6000                       		bra.s	loc_72E02
00081430                            ; ===========================================================================
00081430                            
00081430                            loc_72DCC:
00081430 41EE 0370                  		lea	$370(a6),a0
00081434 4A10                       		tst.b	(a0)
00081436 6A00                       		bpl.s	loc_72DE0
00081438 0C00 00E0                  		cmpi.b	#$E0,d0
0008143C 6700                       		beq.s	loc_72DEA
0008143E 0C00 00C0                  		cmpi.b	#$C0,d0
00081442 6700                       		beq.s	loc_72DEA
00081444                            
00081444                            loc_72DE0:
00081444 41FA F4F2                  		lea	dword_722CC(pc),a0
00081448 E608                       		lsr.b	#3,d0
0008144A 2070 0000                  		movea.l	(a0,d0.w),a0
0008144E                            
0008144E                            loc_72DEA:
0008144E 0890 0002                  		bclr	#2,(a0)
00081452 08D0 0001                  		bset	#1,(a0)
00081456 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0008145C 6600                       		bne.s	loc_72E02
0008145E 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00081466                            
00081466                            loc_72E02:
00081466 504F                       		addq.w	#8,sp
00081468 4E75                       		rts	
0008146A                            ; ===========================================================================
0008146A                            
0008146A                            loc_72E06:				; XREF: loc_72A64
0008146A 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00081470 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00081474 0815 0002                  		btst	#2,(a5)
00081478 6600                       		bne.s	locret_72E1E
0008147A 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00081482                            
00081482                            locret_72E1E:
00081482 4E75                       		rts	
00081484                            ; ===========================================================================
00081484                            
00081484                            loc_72E20:				; XREF: loc_72A64
00081484 0895 0003                  		bclr	#3,(a5)
00081488 4E75                       		rts	
0008148A                            ; ===========================================================================
0008148A                            
0008148A                            loc_72E26:				; XREF: loc_72A64
0008148A 1B5C 000B                  		move.b	(a4)+,$B(a5)
0008148E 4E75                       		rts	
00081490                            ; ===========================================================================
00081490                            
00081490                            loc_72E2C:				; XREF: loc_72A64
00081490 101C                       		move.b	(a4)+,d0
00081492 E148                       		lsl.w	#8,d0
00081494 101C                       		move.b	(a4)+,d0
00081496 D8C0                       		adda.w	d0,a4
00081498 534C                       		subq.w	#1,a4
0008149A 4E75                       		rts	
0008149C                            ; ===========================================================================
0008149C                            
0008149C                            loc_72E38:				; XREF: loc_72A64
0008149C 7000                       		moveq	#0,d0
0008149E 101C                       		move.b	(a4)+,d0
000814A0 121C                       		move.b	(a4)+,d1
000814A2 4A35 0024                  		tst.b	$24(a5,d0.w)
000814A6 6600                       		bne.s	loc_72E48
000814A8 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000814AC                            
000814AC                            loc_72E48:
000814AC 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000814B0 66DE                       		bne.s	loc_72E2C
000814B2 544C                       		addq.w	#2,a4
000814B4 4E75                       		rts	
000814B6                            ; ===========================================================================
000814B6                            
000814B6                            loc_72E52:				; XREF: loc_72A64
000814B6 7000                       		moveq	#0,d0
000814B8 102D 000D                  		move.b	$D(a5),d0
000814BC 5900                       		subq.b	#4,d0
000814BE 2B8C 0000                  		move.l	a4,(a5,d0.w)
000814C2 1B40 000D                  		move.b	d0,$D(a5)
000814C6 60C8                       		bra.s	loc_72E2C
000814C8                            ; ===========================================================================
000814C8                            
000814C8                            loc_72E64:				; XREF: loc_72A64
000814C8 103C 0088                  		move.b	#$88,d0
000814CC 123C 000F                  		move.b	#$F,d1
000814D0 4EBA F8C2                  		jsr	sub_7272E(pc)
000814D4 103C 008C                  		move.b	#$8C,d0
000814D8 123C 000F                  		move.b	#$F,d1
000814DC 6000 F8B6                  		bra.w	sub_7272E
000814E0                            ; ===========================================================================
000814E0                            Kos_Z80:	incbin	sound\z80_1.bin
00081590 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00081592 21                         		dc.b $21
00081593 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00081595                            		incbin	sound\z80_2.bin
00082C40                            		even
00082C40                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
00089440                            		even
00089440                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
00092CDE                            		even
00092CDE                            Music83:	incbin	sound\music83.bin ; Marble Act 1
000968FE 00                         		even
000968FE                            Music84:	include	sound\music84.asm ; Star Light Act 1
000968FE                            music84_Header:
000968FE =00000001                  smpsHeaderStartSong = 1
000968FE 0000                       	smpsHeaderVoice     music84_Voices
00096900 0603                       	smpsHeaderChan      $06, $03
00096902 0205                       	smpsHeaderTempo     $02, $05
00096904                            
00096908 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
0009690C 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
00096910 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00096914 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
00096918 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
0009691C 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00096922 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
00096928 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
0009692E                            
0009692E                            ; FM1 Data
0009692E                            music84_FM1:
0009692E E0C0                       	smpsPan             panCenter, $00
00096932 E107                       	smpsAlterNote       $07
00096934 9B03 8007                  	dc.b	nD2, $03, nRst, $07
00096938 E106                       	smpsAlterNote       $06
0009693A 9903 800B                  	dc.b	nC2, $03, nRst, $0B
0009693E E10B                       	smpsAlterNote       $0B
00096940 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00096946 E10C                       	smpsAlterNote       $0C
00096948 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0009694B E10B                       	smpsAlterNote       $0B
0009694D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00096950 E109                       	smpsAlterNote       $09
00096952 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00096957 E108                       	smpsAlterNote       $08
00096959 8001                       	dc.b	nRst, $01
0009695B E10B                       	smpsAlterNote       $0B
0009695D 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00096963 E107                       	smpsAlterNote       $07
00096965 9B03                       	dc.b	nD2, $03
00096967                            
00096967                            music84_Jump04:
00096967 E107                       	smpsAlterNote       $07
00096969 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009696D E10B                       	smpsAlterNote       $0B
0009696F A202 8001                  	dc.b	nA2, $02, nRst, $01
00096973 E107                       	smpsAlterNote       $07
00096975 9B03                       	dc.b	nD2, $03
00096977 E11A                       	smpsAlterNote       $1A
00096979 A301                       	dc.b	nBb2, $01
0009697B E1F2                       	smpsAlterNote       $F2
0009697D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00096980 E1FF                       	smpsAlterNote       $FF
00096982 E701                       	dc.b	smpsNoAttack, $01
00096984 E111                       	smpsAlterNote       $11
00096986 E701                       	dc.b	smpsNoAttack, $01
00096988 E106                       	smpsAlterNote       $06
0009698A E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0009698D E107                       	smpsAlterNote       $07
0009698F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00096993 E108                       	smpsAlterNote       $08
00096995 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0009699D E109                       	smpsAlterNote       $09
0009699F A003                       	dc.b	nG2, $03
000969A1 E10C                       	smpsAlterNote       $0C
000969A3 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000969A7 E1FD                       	smpsAlterNote       $FD
000969A9 A401                       	dc.b	nB2, $01
000969AB E109                       	smpsAlterNote       $09
000969AD E701                       	dc.b	smpsNoAttack, $01
000969AF E106                       	smpsAlterNote       $06
000969B1 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000969B4 E109                       	smpsAlterNote       $09
000969B6 A007                       	dc.b	nG2, $07
000969B8 E108                       	smpsAlterNote       $08
000969BA 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000969BE E107                       	smpsAlterNote       $07
000969C0 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000969C6 E10B                       	smpsAlterNote       $0B
000969C8 A203 8001                  	dc.b	nA2, $03, nRst, $01
000969CC E107                       	smpsAlterNote       $07
000969CE 9B03                       	dc.b	nD2, $03
000969D0 E11A                       	smpsAlterNote       $1A
000969D2 A301                       	dc.b	nBb2, $01
000969D4 E1F9                       	smpsAlterNote       $F9
000969D6 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000969D9 E107                       	smpsAlterNote       $07
000969DB E701                       	dc.b	smpsNoAttack, $01
000969DD E111                       	smpsAlterNote       $11
000969DF E701                       	dc.b	smpsNoAttack, $01
000969E1 E106                       	smpsAlterNote       $06
000969E3 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000969E8 E107                       	smpsAlterNote       $07
000969EA 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000969F2 E1EC                       	smpsAlterNote       $EC
000969F4 A101                       	dc.b	nAb2, $01
000969F6 E108                       	smpsAlterNote       $08
000969F8 E701                       	dc.b	smpsNoAttack, $01
000969FA E116                       	smpsAlterNote       $16
000969FC E701                       	dc.b	smpsNoAttack, $01
000969FE E1F5                       	smpsAlterNote       $F5
00096A00 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00096A03 E10B                       	smpsAlterNote       $0B
00096A05 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00096A09 E107                       	smpsAlterNote       $07
00096A0B 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00096A11 E109                       	smpsAlterNote       $09
00096A13 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00096A17 E10B                       	smpsAlterNote       $0B
00096A19 9603                       	dc.b	nA1, $03
00096A1B E107                       	smpsAlterNote       $07
00096A1D 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00096A23 E10B                       	smpsAlterNote       $0B
00096A25 A203 8001                  	dc.b	nA2, $03, nRst, $01
00096A29 E107                       	smpsAlterNote       $07
00096A2B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00096A2F E11A                       	smpsAlterNote       $1A
00096A31 A301                       	dc.b	nBb2, $01
00096A33 E1F9                       	smpsAlterNote       $F9
00096A35 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00096A38 E107                       	smpsAlterNote       $07
00096A3A E701                       	dc.b	smpsNoAttack, $01
00096A3C E1FB                       	smpsAlterNote       $FB
00096A3E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00096A41 E106                       	smpsAlterNote       $06
00096A43 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00096A47 E107                       	smpsAlterNote       $07
00096A49 9B03                       	dc.b	nD2, $03
00096A4B E108                       	smpsAlterNote       $08
00096A4D 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00096A53 E109                       	smpsAlterNote       $09
00096A55 A002 8001                  	dc.b	nG2, $02, nRst, $01
00096A59 E10C                       	smpsAlterNote       $0C
00096A5B A303                       	dc.b	nBb2, $03
00096A5D E1F0                       	smpsAlterNote       $F0
00096A5F A401                       	dc.b	nB2, $01
00096A61 E1FD                       	smpsAlterNote       $FD
00096A63 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
00096A68 E106                       	smpsAlterNote       $06
00096A6A 8001                       	dc.b	nRst, $01
00096A6C E109                       	smpsAlterNote       $09
00096A6E A006 8001                  	dc.b	nG2, $06, nRst, $01
00096A72 E108                       	smpsAlterNote       $08
00096A74 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
00096A78 E107                       	smpsAlterNote       $07
00096A7A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00096A80 E10B                       	smpsAlterNote       $0B
00096A82 A203                       	dc.b	nA2, $03
00096A84 E107                       	smpsAlterNote       $07
00096A86 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00096A8A E1F2                       	smpsAlterNote       $F2
00096A8C A401                       	dc.b	nB2, $01
00096A8E E1FF                       	smpsAlterNote       $FF
00096A90 E701                       	dc.b	smpsNoAttack, $01
00096A92 E107                       	smpsAlterNote       $07
00096A94 E701                       	dc.b	smpsNoAttack, $01
00096A96 E1FB                       	smpsAlterNote       $FB
00096A98 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00096A9B E106                       	smpsAlterNote       $06
00096A9D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00096AA1 E107                       	smpsAlterNote       $07
00096AA3 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00096AAD E117                       	smpsAlterNote       $17
00096AAF A001                       	dc.b	nG2, $01
00096AB1 E1FA                       	smpsAlterNote       $FA
00096AB3 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00096AB6 E108                       	smpsAlterNote       $08
00096AB8 E701                       	dc.b	smpsNoAttack, $01
00096ABA E1E7                       	smpsAlterNote       $E7
00096ABC E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00096ABF E103                       	smpsAlterNote       $03
00096AC1 E701                       	dc.b	smpsNoAttack, $01
00096AC3 E10B                       	smpsAlterNote       $0B
00096AC5 E702                       	dc.b	smpsNoAttack, $02
00096AC7 E107                       	smpsAlterNote       $07
00096AC9 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00096AD1 E106                       	smpsAlterNote       $06
00096AD3 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
00096AD9 E10C                       	smpsAlterNote       $0C
00096ADB 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00096AE1 E109                       	smpsAlterNote       $09
00096AE3 9E03                       	dc.b	nF2, $03
00096AE5 E10C                       	smpsAlterNote       $0C
00096AE7 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00096AEB E1EA                       	smpsAlterNote       $EA
00096AED A201                       	dc.b	nA2, $01
00096AEF E106                       	smpsAlterNote       $06
00096AF1 E701                       	dc.b	smpsNoAttack, $01
00096AF3 E1E2                       	smpsAlterNote       $E2
00096AF5 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00096AF8 E1F0                       	smpsAlterNote       $F0
00096AFA E701                       	dc.b	smpsNoAttack, $01
00096AFC E10C                       	smpsAlterNote       $0C
00096AFE E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00096B0A E116                       	smpsAlterNote       $16
00096B0C 9C01                       	dc.b	nEb2, $01
00096B0E E105                       	smpsAlterNote       $05
00096B10 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00096B13 E1F1                       	smpsAlterNote       $F1
00096B15 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00096B18 E1FF                       	smpsAlterNote       $FF
00096B1A E701                       	dc.b	smpsNoAttack, $01
00096B1C E109                       	smpsAlterNote       $09
00096B1E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00096B22 E10C                       	smpsAlterNote       $0C
00096B24 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00096B30 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
00096B36 E109                       	smpsAlterNote       $09
00096B38 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00096B3C E10C                       	smpsAlterNote       $0C
00096B3E 9703                       	dc.b	nBb1, $03
00096B40 E11A                       	smpsAlterNote       $1A
00096B42 A101                       	dc.b	nAb2, $01
00096B44 E1FB                       	smpsAlterNote       $FB
00096B46 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00096B49 E10A                       	smpsAlterNote       $0A
00096B4B E701                       	dc.b	smpsNoAttack, $01
00096B4D E1E8                       	smpsAlterNote       $E8
00096B4F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00096B52 E106                       	smpsAlterNote       $06
00096B54 E701                       	dc.b	smpsNoAttack, $01
00096B56 E10C                       	smpsAlterNote       $0C
00096B58 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00096B64 E1F9                       	smpsAlterNote       $F9
00096B66 9D01                       	dc.b	nE2, $01
00096B68 E108                       	smpsAlterNote       $08
00096B6A E701                       	dc.b	smpsNoAttack, $01
00096B6C E1F6                       	smpsAlterNote       $F6
00096B6E E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00096B71 E109                       	smpsAlterNote       $09
00096B73 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00096B77 E10C                       	smpsAlterNote       $0C
00096B79 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00096B85 E108                       	smpsAlterNote       $08
00096B87 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00096B8D E106                       	smpsAlterNote       $06
00096B8F A403 8001                  	dc.b	nB2, $03, nRst, $01
00096B93 E108                       	smpsAlterNote       $08
00096B95 9D03                       	dc.b	nE2, $03
00096B97 E1EB                       	smpsAlterNote       $EB
00096B99 A801                       	dc.b	nEb3, $01
00096B9B E109                       	smpsAlterNote       $09
00096B9D E701                       	dc.b	smpsNoAttack, $01
00096B9F E1FA                       	smpsAlterNote       $FA
00096BA1 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00096BA4 E108                       	smpsAlterNote       $08
00096BA6 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00096BB2 E1E9                       	smpsAlterNote       $E9
00096BB4 A301                       	dc.b	nBb2, $01
00096BB6 E107                       	smpsAlterNote       $07
00096BB8 E701                       	dc.b	smpsNoAttack, $01
00096BBA E1F0                       	smpsAlterNote       $F0
00096BBC E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00096BBF E1F7                       	smpsAlterNote       $F7
00096BC1 E701                       	dc.b	smpsNoAttack, $01
00096BC3 E107                       	smpsAlterNote       $07
00096BC5 E701                       	dc.b	smpsNoAttack, $01
00096BC7 E106                       	smpsAlterNote       $06
00096BC9 E701                       	dc.b	smpsNoAttack, $01
00096BCB E108                       	smpsAlterNote       $08
00096BCD 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00096BD3 E106                       	smpsAlterNote       $06
00096BD5 A403 8001                  	dc.b	nB2, $03, nRst, $01
00096BD9 E108                       	smpsAlterNote       $08
00096BDB 9D03                       	dc.b	nE2, $03
00096BDD E10B                       	smpsAlterNote       $0B
00096BDF 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
00096BE7 E108                       	smpsAlterNote       $08
00096BE9 9D03                       	dc.b	nE2, $03
00096BEB E10B                       	smpsAlterNote       $0B
00096BED 9603 8001                  	dc.b	nA1, $03, nRst, $01
00096BF1 E113                       	smpsAlterNote       $13
00096BF3 A001                       	dc.b	nG2, $01
00096BF5 E118                       	smpsAlterNote       $18
00096BF7 E701                       	dc.b	smpsNoAttack, $01
00096BF9 E1E9                       	smpsAlterNote       $E9
00096BFB E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00096BFE E1F3                       	smpsAlterNote       $F3
00096C00 E701                       	dc.b	smpsNoAttack, $01
00096C02 E1FD                       	smpsAlterNote       $FD
00096C04 E701                       	dc.b	smpsNoAttack, $01
00096C06 E102                       	smpsAlterNote       $02
00096C08 E701                       	dc.b	smpsNoAttack, $01
00096C0A E107                       	smpsAlterNote       $07
00096C0C 8001                       	dc.b	nRst, $01
00096C0E E10B                       	smpsAlterNote       $0B
00096C10 9603                       	dc.b	nA1, $03
00096C12 E10C                       	smpsAlterNote       $0C
00096C14 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
00096C1A E10B                       	smpsAlterNote       $0B
00096C1C 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00096C28 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
00096C2E E107                       	smpsAlterNote       $07
00096C30 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00096C36 E10B                       	smpsAlterNote       $0B
00096C38 A203                       	dc.b	nA2, $03
00096C3A E107                       	smpsAlterNote       $07
00096C3C 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00096C40 E1F2                       	smpsAlterNote       $F2
00096C42 A401                       	dc.b	nB2, $01
00096C44 E1FF                       	smpsAlterNote       $FF
00096C46 E701                       	dc.b	smpsNoAttack, $01
00096C48 E107                       	smpsAlterNote       $07
00096C4A E701                       	dc.b	smpsNoAttack, $01
00096C4C E1FB                       	smpsAlterNote       $FB
00096C4E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00096C51 E106                       	smpsAlterNote       $06
00096C53 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00096C57 E107                       	smpsAlterNote       $07
00096C59 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00096C5D E108                       	smpsAlterNote       $08
00096C5F 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00096C65 E109                       	smpsAlterNote       $09
00096C67 A003 8001                  	dc.b	nG2, $03, nRst, $01
00096C6B E10C                       	smpsAlterNote       $0C
00096C6D A302 8001                  	dc.b	nBb2, $02, nRst, $01
00096C71 E1F0                       	smpsAlterNote       $F0
00096C73 A401                       	dc.b	nB2, $01
00096C75 E109                       	smpsAlterNote       $09
00096C77 E701                       	dc.b	smpsNoAttack, $01
00096C79 E106                       	smpsAlterNote       $06
00096C7B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00096C7E E109                       	smpsAlterNote       $09
00096C80 A007                       	dc.b	nG2, $07
00096C82 E108                       	smpsAlterNote       $08
00096C84 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00096C88 E107                       	smpsAlterNote       $07
00096C8A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00096C90 E10B                       	smpsAlterNote       $0B
00096C92 A202 8001                  	dc.b	nA2, $02, nRst, $01
00096C96 E107                       	smpsAlterNote       $07
00096C98 9B03                       	dc.b	nD2, $03
00096C9A E11A                       	smpsAlterNote       $1A
00096C9C A301                       	dc.b	nBb2, $01
00096C9E E1F2                       	smpsAlterNote       $F2
00096CA0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00096CA3 E1FF                       	smpsAlterNote       $FF
00096CA5 E701                       	dc.b	smpsNoAttack, $01
00096CA7 E111                       	smpsAlterNote       $11
00096CA9 E701                       	dc.b	smpsNoAttack, $01
00096CAB E106                       	smpsAlterNote       $06
00096CAD E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00096CB0 E107                       	smpsAlterNote       $07
00096CB2 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00096CBE E117                       	smpsAlterNote       $17
00096CC0 A001                       	dc.b	nG2, $01
00096CC2 E1FA                       	smpsAlterNote       $FA
00096CC4 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00096CC7 E116                       	smpsAlterNote       $16
00096CC9 E701                       	dc.b	smpsNoAttack, $01
00096CCB E1F5                       	smpsAlterNote       $F5
00096CCD E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00096CD0 E103                       	smpsAlterNote       $03
00096CD2 E701                       	dc.b	smpsNoAttack, $01
00096CD4 E10B                       	smpsAlterNote       $0B
00096CD6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096CDA E107                       	smpsAlterNote       $07
00096CDC 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00096CE2 E109                       	smpsAlterNote       $09
00096CE4 9E03                       	dc.b	nF2, $03
00096CE6 E10B                       	smpsAlterNote       $0B
00096CE8 9603 8001                  	dc.b	nA1, $03, nRst, $01
00096CEC E107                       	smpsAlterNote       $07
00096CEE 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00096CF4 E10B                       	smpsAlterNote       $0B
00096CF6 A203 8001                  	dc.b	nA2, $03, nRst, $01
00096CFA E107                       	smpsAlterNote       $07
00096CFC 9B03                       	dc.b	nD2, $03
00096CFE E11A                       	smpsAlterNote       $1A
00096D00 A301                       	dc.b	nBb2, $01
00096D02 E1F9                       	smpsAlterNote       $F9
00096D04 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00096D07 E107                       	smpsAlterNote       $07
00096D09 E701                       	dc.b	smpsNoAttack, $01
00096D0B E111                       	smpsAlterNote       $11
00096D0D E701                       	dc.b	smpsNoAttack, $01
00096D0F E106                       	smpsAlterNote       $06
00096D11 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00096D16 E107                       	smpsAlterNote       $07
00096D18 9B03                       	dc.b	nD2, $03
00096D1A E108                       	smpsAlterNote       $08
00096D1C 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00096D22 E109                       	smpsAlterNote       $09
00096D24 A003                       	dc.b	nG2, $03
00096D26 E10C                       	smpsAlterNote       $0C
00096D28 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00096D2C E1FD                       	smpsAlterNote       $FD
00096D2E A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00096D33 E106                       	smpsAlterNote       $06
00096D35 8001                       	dc.b	nRst, $01
00096D37 E109                       	smpsAlterNote       $09
00096D39 A006 8001                  	dc.b	nG2, $06, nRst, $01
00096D3D E108                       	smpsAlterNote       $08
00096D3F 9C03                       	dc.b	nEb2, $03
00096D41 E107                       	smpsAlterNote       $07
00096D43 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00096D49 E10B                       	smpsAlterNote       $0B
00096D4B A203 8001                  	dc.b	nA2, $03, nRst, $01
00096D4F E107                       	smpsAlterNote       $07
00096D51 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00096D55 E11A                       	smpsAlterNote       $1A
00096D57 A301                       	dc.b	nBb2, $01
00096D59 E1F9                       	smpsAlterNote       $F9
00096D5B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00096D5E E107                       	smpsAlterNote       $07
00096D60 E701                       	dc.b	smpsNoAttack, $01
00096D62 E1FB                       	smpsAlterNote       $FB
00096D64 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00096D67 E106                       	smpsAlterNote       $06
00096D69 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00096D6D E107                       	smpsAlterNote       $07
00096D6F 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00096D77 E1EC                       	smpsAlterNote       $EC
00096D79 A101                       	dc.b	nAb2, $01
00096D7B E108                       	smpsAlterNote       $08
00096D7D E701                       	dc.b	smpsNoAttack, $01
00096D7F E1E7                       	smpsAlterNote       $E7
00096D81 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00096D84 E1F5                       	smpsAlterNote       $F5
00096D86 E701                       	dc.b	smpsNoAttack, $01
00096D88 E10B                       	smpsAlterNote       $0B
00096D8A E702                       	dc.b	smpsNoAttack, $02
00096D8C E107                       	smpsAlterNote       $07
00096D8E 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00096D94 E106                       	smpsAlterNote       $06
00096D96 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00096D9C E10C                       	smpsAlterNote       $0C
00096D9E 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00096DA6 E109                       	smpsAlterNote       $09
00096DA8 9E03                       	dc.b	nF2, $03
00096DAA E10C                       	smpsAlterNote       $0C
00096DAC 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00096DB0 E1EA                       	smpsAlterNote       $EA
00096DB2 A201                       	dc.b	nA2, $01
00096DB4 E106                       	smpsAlterNote       $06
00096DB6 E701                       	dc.b	smpsNoAttack, $01
00096DB8 E114                       	smpsAlterNote       $14
00096DBA E701                       	dc.b	smpsNoAttack, $01
00096DBC E1F0                       	smpsAlterNote       $F0
00096DBE E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00096DC1 E10C                       	smpsAlterNote       $0C
00096DC3 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00096DCF 9703                       	dc.b	nBb1, $03
00096DD1 E116                       	smpsAlterNote       $16
00096DD3 9C01                       	dc.b	nEb2, $01
00096DD5 E105                       	smpsAlterNote       $05
00096DD7 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00096DDA E113                       	smpsAlterNote       $13
00096DDC E701                       	dc.b	smpsNoAttack, $01
00096DDE E1FF                       	smpsAlterNote       $FF
00096DE0 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00096DE3 E109                       	smpsAlterNote       $09
00096DE5 E703                       	dc.b	smpsNoAttack, $03
00096DE7 E10C                       	smpsAlterNote       $0C
00096DE9 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00096DF5 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00096DFD E109                       	smpsAlterNote       $09
00096DFF 9E03                       	dc.b	nF2, $03
00096E01 E10C                       	smpsAlterNote       $0C
00096E03 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00096E07 E1EC                       	smpsAlterNote       $EC
00096E09 A201                       	dc.b	nA2, $01
00096E0B E10A                       	smpsAlterNote       $0A
00096E0D E701                       	dc.b	smpsNoAttack, $01
00096E0F E1E8                       	smpsAlterNote       $E8
00096E11 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00096E14 E1F7                       	smpsAlterNote       $F7
00096E16 E701                       	dc.b	smpsNoAttack, $01
00096E18 E10C                       	smpsAlterNote       $0C
00096E1A E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00096E26 E1EA                       	smpsAlterNote       $EA
00096E28 9D01                       	dc.b	nE2, $01
00096E2A E108                       	smpsAlterNote       $08
00096E2C E701                       	dc.b	smpsNoAttack, $01
00096E2E E1F6                       	smpsAlterNote       $F6
00096E30 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00096E33 E105                       	smpsAlterNote       $05
00096E35 E701                       	dc.b	smpsNoAttack, $01
00096E37 E109                       	smpsAlterNote       $09
00096E39 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00096E3D E10C                       	smpsAlterNote       $0C
00096E3F 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00096E4B E108                       	smpsAlterNote       $08
00096E4D 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00096E53 E106                       	smpsAlterNote       $06
00096E55 A403 8001                  	dc.b	nB2, $03, nRst, $01
00096E59 E108                       	smpsAlterNote       $08
00096E5B 9D03                       	dc.b	nE2, $03
00096E5D E1EB                       	smpsAlterNote       $EB
00096E5F A801                       	dc.b	nEb3, $01
00096E61 E109                       	smpsAlterNote       $09
00096E63 E701                       	dc.b	smpsNoAttack, $01
00096E65 E1EB                       	smpsAlterNote       $EB
00096E67 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00096E6A E108                       	smpsAlterNote       $08
00096E6C E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00096E78 E1E9                       	smpsAlterNote       $E9
00096E7A A301                       	dc.b	nBb2, $01
00096E7C E1F8                       	smpsAlterNote       $F8
00096E7E E701                       	dc.b	smpsNoAttack, $01
00096E80 E116                       	smpsAlterNote       $16
00096E82 E701                       	dc.b	smpsNoAttack, $01
00096E84 E1F7                       	smpsAlterNote       $F7
00096E86 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00096E89 E107                       	smpsAlterNote       $07
00096E8B E701                       	dc.b	smpsNoAttack, $01
00096E8D E1EE                       	smpsAlterNote       $EE
00096E8F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00096E92 E106                       	smpsAlterNote       $06
00096E94 8001                       	dc.b	nRst, $01
00096E96 E108                       	smpsAlterNote       $08
00096E98 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00096E9E E106                       	smpsAlterNote       $06
00096EA0 A402 8001                  	dc.b	nB2, $02, nRst, $01
00096EA4 E108                       	smpsAlterNote       $08
00096EA6 9D03                       	dc.b	nE2, $03
00096EA8 E10B                       	smpsAlterNote       $0B
00096EAA 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00096EB0 E108                       	smpsAlterNote       $08
00096EB2 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00096EB6 E10B                       	smpsAlterNote       $0B
00096EB8 9603                       	dc.b	nA1, $03
00096EBA E10E                       	smpsAlterNote       $0E
00096EBC A001                       	dc.b	nG2, $01
00096EBE E118                       	smpsAlterNote       $18
00096EC0 E701                       	dc.b	smpsNoAttack, $01
00096EC2 E1E9                       	smpsAlterNote       $E9
00096EC4 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00096EC7 E1EE                       	smpsAlterNote       $EE
00096EC9 E701                       	dc.b	smpsNoAttack, $01
00096ECB E1F8                       	smpsAlterNote       $F8
00096ECD E701                       	dc.b	smpsNoAttack, $01
00096ECF E102                       	smpsAlterNote       $02
00096ED1 E701                       	dc.b	smpsNoAttack, $01
00096ED3 E107                       	smpsAlterNote       $07
00096ED5 8001                       	dc.b	nRst, $01
00096ED7 E10B                       	smpsAlterNote       $0B
00096ED9 9603                       	dc.b	nA1, $03
00096EDB E10C                       	smpsAlterNote       $0C
00096EDD 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00096EE3 E10B                       	smpsAlterNote       $0B
00096EE5 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00096EF1 8001 9603                  	dc.b	nRst, $01, nA1, $03
00096EF5 E10C                       	smpsAlterNote       $0C
00096EF7 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00096F03 8001                       	dc.b	nRst, $01
00096F05 E10B                       	smpsAlterNote       $0B
00096F07 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00096F0F E107                       	smpsAlterNote       $07
00096F11 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00096F15 E10B                       	smpsAlterNote       $0B
00096F17 9603                       	dc.b	nA1, $03
00096F19 E109                       	smpsAlterNote       $09
00096F1B 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00096F1F E108                       	smpsAlterNote       $08
00096F21 9D06                       	dc.b	nE2, $06
00096F23 E107                       	smpsAlterNote       $07
00096F25 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00096F29 E106                       	smpsAlterNote       $06
00096F2B 9903                       	dc.b	nC2, $03
00096F2D E10C                       	smpsAlterNote       $0C
00096F2F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00096F33 E10B                       	smpsAlterNote       $0B
00096F35 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00096F41 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00096F4B E10C                       	smpsAlterNote       $0C
00096F4D 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00096F59 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00096F65 8001                       	dc.b	nRst, $01
00096F67 E10B                       	smpsAlterNote       $0B
00096F69 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00096F75 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00096F81 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00096F8D 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00096F97 E10C                       	smpsAlterNote       $0C
00096F99 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00096FA5 E10B                       	smpsAlterNote       $0B
00096FA7 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00096FAF E107                       	smpsAlterNote       $07
00096FB1 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00096FB5 E10B                       	smpsAlterNote       $0B
00096FB7 9603                       	dc.b	nA1, $03
00096FB9 E109                       	smpsAlterNote       $09
00096FBB 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00096FBF E108                       	smpsAlterNote       $08
00096FC1 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00096FC5 E107                       	smpsAlterNote       $07
00096FC7 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00096FCB E106                       	smpsAlterNote       $06
00096FCD 9903                       	dc.b	nC2, $03
00096FCF E10C                       	smpsAlterNote       $0C
00096FD1 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00096FD5 E10B                       	smpsAlterNote       $0B
00096FD7 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00096FE3 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00096FED E10C                       	smpsAlterNote       $0C
00096FEF 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00096FFB 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00097007 8001                       	dc.b	nRst, $01
00097009 E10B                       	smpsAlterNote       $0B
0009700B 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00097017 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00097021 E10C                       	smpsAlterNote       $0C
00097023 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0009702F 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
0009703B E10B                       	smpsAlterNote       $0B
0009703D 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00097049 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00097053 E10C                       	smpsAlterNote       $0C
00097055 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00097061 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
0009706D E10B                       	smpsAlterNote       $0B
0009706F 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
0009707B 8001                       	dc.b	nRst, $01
0009707D E1EC                       	smpsAlterNote       $EC
0009707F A101                       	dc.b	nAb2, $01
00097081 E1FA                       	smpsAlterNote       $FA
00097083 E701                       	dc.b	smpsNoAttack, $01
00097085 E116                       	smpsAlterNote       $16
00097087 E701                       	dc.b	smpsNoAttack, $01
00097089 E1F5                       	smpsAlterNote       $F5
0009708B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0009708E E10B                       	smpsAlterNote       $0B
00097090 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
0009709C 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
000970A8 E107                       	smpsAlterNote       $07
000970AA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000970B0 E10B                       	smpsAlterNote       $0B
000970B2 A203                       	dc.b	nA2, $03
000970B4 E107                       	smpsAlterNote       $07
000970B6 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000970BA E1F3                       	smpsAlterNote       $F3
000970BC A401                       	dc.b	nB2, $01
000970BE E102                       	smpsAlterNote       $02
000970C0 E701                       	dc.b	smpsNoAttack, $01
000970C2 E109                       	smpsAlterNote       $09
000970C4 E701                       	dc.b	smpsNoAttack, $01
000970C6 E102                       	smpsAlterNote       $02
000970C8 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000970CB E106                       	smpsAlterNote       $06
000970CD E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000970D1 E107                       	smpsAlterNote       $07
000970D3 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000970D7 E108                       	smpsAlterNote       $08
000970D9 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000970DF E109                       	smpsAlterNote       $09
000970E1 A003 8001                  	dc.b	nG2, $03, nRst, $01
000970E5 E1F2                       	smpsAlterNote       $F2
000970E7 A401                       	dc.b	nB2, $01
000970E9 E1FF                       	smpsAlterNote       $FF
000970EB E701                       	dc.b	smpsNoAttack, $01
000970ED E111                       	smpsAlterNote       $11
000970EF E701                       	dc.b	smpsNoAttack, $01
000970F1 E1FB                       	smpsAlterNote       $FB
000970F3 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000970F6 E106                       	smpsAlterNote       $06
000970F8 E702                       	dc.b	smpsNoAttack, $02
000970FA E109                       	smpsAlterNote       $09
000970FC A007                       	dc.b	nG2, $07
000970FE E108                       	smpsAlterNote       $08
00097100 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00097104 E107                       	smpsAlterNote       $07
00097106 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0009710C E10B                       	smpsAlterNote       $0B
0009710E A202 8001                  	dc.b	nA2, $02, nRst, $01
00097112 E107                       	smpsAlterNote       $07
00097114 9B03                       	dc.b	nD2, $03
00097116 E11A                       	smpsAlterNote       $1A
00097118 A301                       	dc.b	nBb2, $01
0009711A E1F2                       	smpsAlterNote       $F2
0009711C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009711F E1FF                       	smpsAlterNote       $FF
00097121 E701                       	dc.b	smpsNoAttack, $01
00097123 E111                       	smpsAlterNote       $11
00097125 E701                       	dc.b	smpsNoAttack, $01
00097127 E106                       	smpsAlterNote       $06
00097129 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0009712C E107                       	smpsAlterNote       $07
0009712E 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0009713A E117                       	smpsAlterNote       $17
0009713C A001                       	dc.b	nG2, $01
0009713E E1FA                       	smpsAlterNote       $FA
00097140 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00097143 E116                       	smpsAlterNote       $16
00097145 E701                       	dc.b	smpsNoAttack, $01
00097147 E1F5                       	smpsAlterNote       $F5
00097149 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0009714C E103                       	smpsAlterNote       $03
0009714E E701                       	dc.b	smpsNoAttack, $01
00097150 E10B                       	smpsAlterNote       $0B
00097152 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097156 E107                       	smpsAlterNote       $07
00097158 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0009715E E109                       	smpsAlterNote       $09
00097160 9E03                       	dc.b	nF2, $03
00097162 E10B                       	smpsAlterNote       $0B
00097164 9603 8001                  	dc.b	nA1, $03, nRst, $01
00097168 E107                       	smpsAlterNote       $07
0009716A 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00097170 E10B                       	smpsAlterNote       $0B
00097172 A203 8001                  	dc.b	nA2, $03, nRst, $01
00097176 E107                       	smpsAlterNote       $07
00097178 9B03                       	dc.b	nD2, $03
0009717A E11A                       	smpsAlterNote       $1A
0009717C A301                       	dc.b	nBb2, $01
0009717E E1F9                       	smpsAlterNote       $F9
00097180 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00097183 E1FF                       	smpsAlterNote       $FF
00097185 E701                       	dc.b	smpsNoAttack, $01
00097187 E111                       	smpsAlterNote       $11
00097189 E701                       	dc.b	smpsNoAttack, $01
0009718B E106                       	smpsAlterNote       $06
0009718D E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00097190 E107                       	smpsAlterNote       $07
00097192 9B03                       	dc.b	nD2, $03
00097194 E108                       	smpsAlterNote       $08
00097196 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0009719C E109                       	smpsAlterNote       $09
0009719E A003                       	dc.b	nG2, $03
000971A0 E1F0                       	smpsAlterNote       $F0
000971A2 A501                       	dc.b	nC3, $01
000971A4 E106                       	smpsAlterNote       $06
000971A6 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
000971AA E109                       	smpsAlterNote       $09
000971AC A006 8001                  	dc.b	nG2, $06, nRst, $01
000971B0 E108                       	smpsAlterNote       $08
000971B2 9C03                       	dc.b	nEb2, $03
000971B4 E107                       	smpsAlterNote       $07
000971B6 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000971BC E10B                       	smpsAlterNote       $0B
000971BE A203 8001                  	dc.b	nA2, $03, nRst, $01
000971C2 E107                       	smpsAlterNote       $07
000971C4 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000971C8 E11A                       	smpsAlterNote       $1A
000971CA A301                       	dc.b	nBb2, $01
000971CC E1F9                       	smpsAlterNote       $F9
000971CE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000971D1 E107                       	smpsAlterNote       $07
000971D3 E701                       	dc.b	smpsNoAttack, $01
000971D5 E1FB                       	smpsAlterNote       $FB
000971D7 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000971DA E106                       	smpsAlterNote       $06
000971DC E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000971E0 E107                       	smpsAlterNote       $07
000971E2 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000971EA E1EC                       	smpsAlterNote       $EC
000971EC A101                       	dc.b	nAb2, $01
000971EE E108                       	smpsAlterNote       $08
000971F0 E701                       	dc.b	smpsNoAttack, $01
000971F2 E1E7                       	smpsAlterNote       $E7
000971F4 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000971F7 E1F5                       	smpsAlterNote       $F5
000971F9 E701                       	dc.b	smpsNoAttack, $01
000971FB E10B                       	smpsAlterNote       $0B
000971FD E702                       	dc.b	smpsNoAttack, $02
000971FF E107                       	smpsAlterNote       $07
00097201 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00097207 E106                       	smpsAlterNote       $06
00097209 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0009720F E10C                       	smpsAlterNote       $0C
00097211 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00097219 E109                       	smpsAlterNote       $09
0009721B 9E03                       	dc.b	nF2, $03
0009721D E10C                       	smpsAlterNote       $0C
0009721F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00097223 E1EA                       	smpsAlterNote       $EA
00097225 A201                       	dc.b	nA2, $01
00097227 E106                       	smpsAlterNote       $06
00097229 E701                       	dc.b	smpsNoAttack, $01
0009722B E114                       	smpsAlterNote       $14
0009722D E701                       	dc.b	smpsNoAttack, $01
0009722F E1F0                       	smpsAlterNote       $F0
00097231 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00097234 E10C                       	smpsAlterNote       $0C
00097236 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00097242 9703                       	dc.b	nBb1, $03
00097244 E116                       	smpsAlterNote       $16
00097246 9C01                       	dc.b	nEb2, $01
00097248 E105                       	smpsAlterNote       $05
0009724A E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0009724D E113                       	smpsAlterNote       $13
0009724F E701                       	dc.b	smpsNoAttack, $01
00097251 E1FF                       	smpsAlterNote       $FF
00097253 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00097256 E109                       	smpsAlterNote       $09
00097258 E703                       	dc.b	smpsNoAttack, $03
0009725A E10C                       	smpsAlterNote       $0C
0009725C 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00097268 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00097270 E109                       	smpsAlterNote       $09
00097272 9E03                       	dc.b	nF2, $03
00097274 E10C                       	smpsAlterNote       $0C
00097276 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0009727A E1EA                       	smpsAlterNote       $EA
0009727C A201                       	dc.b	nA2, $01
0009727E E106                       	smpsAlterNote       $06
00097280 E701                       	dc.b	smpsNoAttack, $01
00097282 E1E2                       	smpsAlterNote       $E2
00097284 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00097287 E1F0                       	smpsAlterNote       $F0
00097289 E701                       	dc.b	smpsNoAttack, $01
0009728B E10C                       	smpsAlterNote       $0C
0009728D E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00097299 E116                       	smpsAlterNote       $16
0009729B 9C01                       	dc.b	nEb2, $01
0009729D E105                       	smpsAlterNote       $05
0009729F E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000972A2 E1F1                       	smpsAlterNote       $F1
000972A4 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000972A7 E1FF                       	smpsAlterNote       $FF
000972A9 E701                       	dc.b	smpsNoAttack, $01
000972AB E109                       	smpsAlterNote       $09
000972AD E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000972B1 E10C                       	smpsAlterNote       $0C
000972B3 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
000972BF E106                       	smpsAlterNote       $06
000972C1 9903                       	dc.b	nC2, $03
000972C3 E107                       	smpsAlterNote       $07
000972C5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000972C9 E109                       	smpsAlterNote       $09
000972CB 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
000972D1 E107                       	smpsAlterNote       $07
000972D3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000972D7 E108                       	smpsAlterNote       $08
000972D9 9D03                       	dc.b	nE2, $03
000972DB E10B                       	smpsAlterNote       $0B
000972DD 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
000972E3 E109                       	smpsAlterNote       $09
000972E5 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
000972EB E10C                       	smpsAlterNote       $0C
000972ED 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
000972F3 E106                       	smpsAlterNote       $06
000972F5 9903                       	dc.b	nC2, $03
000972F7 E11A                       	smpsAlterNote       $1A
000972F9 A301                       	dc.b	nBb2, $01
000972FB E1F9                       	smpsAlterNote       $F9
000972FD E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00097300 E1FF                       	smpsAlterNote       $FF
00097302 E701                       	dc.b	smpsNoAttack, $01
00097304 E111                       	smpsAlterNote       $11
00097306 E701                       	dc.b	smpsNoAttack, $01
00097308 E106                       	smpsAlterNote       $06
0009730A E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00097311 E109                       	smpsAlterNote       $09
00097313 A003                       	dc.b	nG2, $03
00097315 E106                       	smpsAlterNote       $06
00097317 9907                       	dc.b	nC2, $07
00097319 E107                       	smpsAlterNote       $07
0009731B 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00097323 E10B                       	smpsAlterNote       $0B
00097325 A203                       	dc.b	nA2, $03
00097327 E107                       	smpsAlterNote       $07
00097329 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009732D E1F2                       	smpsAlterNote       $F2
0009732F A401                       	dc.b	nB2, $01
00097331 E1F9                       	smpsAlterNote       $F9
00097333 E701                       	dc.b	smpsNoAttack, $01
00097335 E107                       	smpsAlterNote       $07
00097337 E701                       	dc.b	smpsNoAttack, $01
00097339 E1FB                       	smpsAlterNote       $FB
0009733B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009733E E106                       	smpsAlterNote       $06
00097340 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00097344 E107                       	smpsAlterNote       $07
00097346 9B03                       	dc.b	nD2, $03
00097348 E108                       	smpsAlterNote       $08
0009734A 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00097350 E109                       	smpsAlterNote       $09
00097352 A003 8001                  	dc.b	nG2, $03, nRst, $01
00097356 E1F2                       	smpsAlterNote       $F2
00097358 A401                       	dc.b	nB2, $01
0009735A E1F9                       	smpsAlterNote       $F9
0009735C E701                       	dc.b	smpsNoAttack, $01
0009735E E107                       	smpsAlterNote       $07
00097360 E701                       	dc.b	smpsNoAttack, $01
00097362 E1FB                       	smpsAlterNote       $FB
00097364 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00097367 E106                       	smpsAlterNote       $06
00097369 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009736D E108                       	smpsAlterNote       $08
0009736F 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00097373 E10C                       	smpsAlterNote       $0C
00097375 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00097379 E107                       	smpsAlterNote       $07
0009737B 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00097381 E10B                       	smpsAlterNote       $0B
00097383 A203                       	dc.b	nA2, $03
00097385 E107                       	smpsAlterNote       $07
00097387 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009738B E1F2                       	smpsAlterNote       $F2
0009738D A401                       	dc.b	nB2, $01
0009738F E1FF                       	smpsAlterNote       $FF
00097391 E701                       	dc.b	smpsNoAttack, $01
00097393 E107                       	smpsAlterNote       $07
00097395 E701                       	dc.b	smpsNoAttack, $01
00097397 E1FB                       	smpsAlterNote       $FB
00097399 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009739C E106                       	smpsAlterNote       $06
0009739E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000973A2 E107                       	smpsAlterNote       $07
000973A4 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000973A8 E108                       	smpsAlterNote       $08
000973AA 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
000973B0 E109                       	smpsAlterNote       $09
000973B2 A003 8001                  	dc.b	nG2, $03, nRst, $01
000973B6 E1F2                       	smpsAlterNote       $F2
000973B8 A401                       	dc.b	nB2, $01
000973BA E1FF                       	smpsAlterNote       $FF
000973BC E701                       	dc.b	smpsNoAttack, $01
000973BE E111                       	smpsAlterNote       $11
000973C0 E701                       	dc.b	smpsNoAttack, $01
000973C2 E1FB                       	smpsAlterNote       $FB
000973C4 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000973C7 E106                       	smpsAlterNote       $06
000973C9 E702                       	dc.b	smpsNoAttack, $02
000973CB E108                       	smpsAlterNote       $08
000973CD 9C07                       	dc.b	nEb2, $07
000973CF E10C                       	smpsAlterNote       $0C
000973D1 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000973D5 E107                       	smpsAlterNote       $07
000973D7 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000973DD E10B                       	smpsAlterNote       $0B
000973DF A202 8001                  	dc.b	nA2, $02, nRst, $01
000973E3 E107                       	smpsAlterNote       $07
000973E5 9B03                       	dc.b	nD2, $03
000973E7 E11A                       	smpsAlterNote       $1A
000973E9 A301                       	dc.b	nBb2, $01
000973EB E1F2                       	smpsAlterNote       $F2
000973ED E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000973F0 E1FF                       	smpsAlterNote       $FF
000973F2 E701                       	dc.b	smpsNoAttack, $01
000973F4 E111                       	smpsAlterNote       $11
000973F6 E701                       	dc.b	smpsNoAttack, $01
000973F8 E106                       	smpsAlterNote       $06
000973FA E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000973FD E107                       	smpsAlterNote       $07
000973FF 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00097403 E108                       	smpsAlterNote       $08
00097405 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
0009740D E109                       	smpsAlterNote       $09
0009740F A003                       	dc.b	nG2, $03
00097411 E11A                       	smpsAlterNote       $1A
00097413 A301                       	dc.b	nBb2, $01
00097415 E1F2                       	smpsAlterNote       $F2
00097417 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009741A E1FF                       	smpsAlterNote       $FF
0009741C E701                       	dc.b	smpsNoAttack, $01
0009741E E111                       	smpsAlterNote       $11
00097420 E701                       	dc.b	smpsNoAttack, $01
00097422 E106                       	smpsAlterNote       $06
00097424 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00097427 E108                       	smpsAlterNote       $08
00097429 9C07                       	dc.b	nEb2, $07
0009742B E10C                       	smpsAlterNote       $0C
0009742D A303 8001                  	dc.b	nBb2, $03, nRst, $01
00097431 E107                       	smpsAlterNote       $07
00097433 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
0009743F 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00097449 E108                       	smpsAlterNote       $08
0009744B 9C06                       	dc.b	nEb2, $06
0009744D E10C                       	smpsAlterNote       $0C
0009744F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00097453 E108                       	smpsAlterNote       $08
00097455 9C03                       	dc.b	nEb2, $03
00097457 E109                       	smpsAlterNote       $09
00097459 A003 8001                  	dc.b	nG2, $03, nRst, $01
0009745D E10C                       	smpsAlterNote       $0C
0009745F A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00097467 E107                       	smpsAlterNote       $07
00097469 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009746D F6F4 F8                    	smpsJump            music84_Jump04
00097470                            
00097470                            ; FM2 Data
00097470                            music84_FM2:
00097470 E0C0                       	smpsPan             panCenter, $00
00097474 E10B                       	smpsAlterNote       $0B
00097476 C603 8007                  	dc.b	nA5, $03, nRst, $07
0009747A E109                       	smpsAlterNote       $09
0009747C C403 800B                  	dc.b	nG5, $03, nRst, $0B
00097480 E108                       	smpsAlterNote       $08
00097482 C103 8004                  	dc.b	nE5, $03, nRst, $04
00097488 E080                       	smpsPan             panLeft, $00
0009748A E10C                       	smpsAlterNote       $0C
0009748C E6F9                       	smpsAlterVol        $F9
0009748E C703                       	dc.b	nBb5, $03
00097490 E10B                       	smpsAlterNote       $0B
00097492 C603 8001                  	dc.b	nA5, $03, nRst, $01
00097496 E109                       	smpsAlterNote       $09
00097498 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0009749E E108                       	smpsAlterNote       $08
000974A0 C103 8001                  	dc.b	nE5, $03, nRst, $01
000974A4 E106                       	smpsAlterNote       $06
000974A6 BD03                       	dc.b	nC5, $03
000974A8 E10B                       	smpsAlterNote       $0B
000974AA BA03 8001                  	dc.b	nA4, $03, nRst, $01
000974B0 E0C0                       	smpsPan             panCenter, $00
000974B2 E107                       	smpsAlterNote       $07
000974B4 E606                       	smpsAlterVol        $06
000974B6 BF03                       	dc.b	nD5, $03
000974B8                            
000974B8                            music84_Jump03:
000974B8 E108                       	smpsAlterNote       $08
000974BA C103 8001                  	dc.b	nE5, $03, nRst, $01
000974BE E109                       	smpsAlterNote       $09
000974C0 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
000974C6 E10B                       	smpsAlterNote       $0B
000974C8 C607                       	dc.b	nA5, $07
000974CA E107                       	smpsAlterNote       $07
000974CC BF03 8001                  	dc.b	nD5, $03, nRst, $01
000974D0 E106                       	smpsAlterNote       $06
000974D2 C90D                       	dc.b	nC6, $0D
000974D4 E100                       	smpsAlterNote       $00
000974D6 E701                       	dc.b	smpsNoAttack, $01
000974D8 E1FF                       	smpsAlterNote       $FF
000974DA E701                       	dc.b	smpsNoAttack, $01
000974DC E103                       	smpsAlterNote       $03
000974DE E701                       	dc.b	smpsNoAttack, $01
000974E0 E109                       	smpsAlterNote       $09
000974E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974E6 E106                       	smpsAlterNote       $06
000974E8 E701                       	dc.b	smpsNoAttack, $01
000974EA E100                       	smpsAlterNote       $00
000974EC E701                       	dc.b	smpsNoAttack, $01
000974EE E10C                       	smpsAlterNote       $0C
000974F0 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000974F4 E10B                       	smpsAlterNote       $0B
000974F6 C603                       	dc.b	nA5, $03
000974F8 E109                       	smpsAlterNote       $09
000974FA C403 8001                  	dc.b	nG5, $03, nRst, $01
000974FE E10B                       	smpsAlterNote       $0B
00097500 C60D                       	dc.b	nA5, $0D
00097502 E105                       	smpsAlterNote       $05
00097504 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097508 E10B                       	smpsAlterNote       $0B
0009750A E701                       	dc.b	smpsNoAttack, $01
0009750C E10E                       	smpsAlterNote       $0E
0009750E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097512 E108                       	smpsAlterNote       $08
00097514 E701                       	dc.b	smpsNoAttack, $01
00097516 E104                       	smpsAlterNote       $04
00097518 E701                       	dc.b	smpsNoAttack, $01
0009751A E105                       	smpsAlterNote       $05
0009751C E701                       	dc.b	smpsNoAttack, $01
0009751E E10B                       	smpsAlterNote       $0B
00097520 E701                       	dc.b	smpsNoAttack, $01
00097522 E10F                       	smpsAlterNote       $0F
00097524 E701                       	dc.b	smpsNoAttack, $01
00097526 E10B                       	smpsAlterNote       $0B
00097528 E701                       	dc.b	smpsNoAttack, $01
0009752A E108                       	smpsAlterNote       $08
0009752C E701                       	dc.b	smpsNoAttack, $01
0009752E E104                       	smpsAlterNote       $04
00097530 E701                       	dc.b	smpsNoAttack, $01
00097532 E108                       	smpsAlterNote       $08
00097534 E701                       	dc.b	smpsNoAttack, $01
00097536 E10E                       	smpsAlterNote       $0E
00097538 E701                       	dc.b	smpsNoAttack, $01
0009753A E10F                       	smpsAlterNote       $0F
0009753C E701                       	dc.b	smpsNoAttack, $01
0009753E E10B                       	smpsAlterNote       $0B
00097540 E701                       	dc.b	smpsNoAttack, $01
00097542 E105                       	smpsAlterNote       $05
00097544 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097548 E108                       	smpsAlterNote       $08
0009754A E701                       	dc.b	smpsNoAttack, $01
0009754C E10E                       	smpsAlterNote       $0E
0009754E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097552 E108                       	smpsAlterNote       $08
00097554 E701                       	dc.b	smpsNoAttack, $01
00097556 E105                       	smpsAlterNote       $05
00097558 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009755C E10B                       	smpsAlterNote       $0B
0009755E E701                       	dc.b	smpsNoAttack, $01
00097560 E10F                       	smpsAlterNote       $0F
00097562 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00097566 E107                       	smpsAlterNote       $07
00097568 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0009756C E108                       	smpsAlterNote       $08
0009756E C103                       	dc.b	nE5, $03
00097570 E109                       	smpsAlterNote       $09
00097572 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
0009757A E10B                       	smpsAlterNote       $0B
0009757C C606 8001                  	dc.b	nA5, $06, nRst, $01
00097580 E107                       	smpsAlterNote       $07
00097582 BF03                       	dc.b	nD5, $03
00097584 E106                       	smpsAlterNote       $06
00097586 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
0009758A E107                       	smpsAlterNote       $07
0009758C CB03                       	dc.b	nD6, $03
0009758E E10C                       	smpsAlterNote       $0C
00097590 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00097594 E10B                       	smpsAlterNote       $0B
00097596 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009759A E109                       	smpsAlterNote       $09
0009759C C404                       	dc.b	nG5, $04
0009759E E10B                       	smpsAlterNote       $0B
000975A0 C60D                       	dc.b	nA5, $0D
000975A2 E108                       	smpsAlterNote       $08
000975A4 E701                       	dc.b	smpsNoAttack, $01
000975A6 E104                       	smpsAlterNote       $04
000975A8 E701                       	dc.b	smpsNoAttack, $01
000975AA E108                       	smpsAlterNote       $08
000975AC E701                       	dc.b	smpsNoAttack, $01
000975AE E10B                       	smpsAlterNote       $0B
000975B0 E701                       	dc.b	smpsNoAttack, $01
000975B2 E10F                       	smpsAlterNote       $0F
000975B4 E701                       	dc.b	smpsNoAttack, $01
000975B6 E10B                       	smpsAlterNote       $0B
000975B8 E701                       	dc.b	smpsNoAttack, $01
000975BA E105                       	smpsAlterNote       $05
000975BC E701                       	dc.b	smpsNoAttack, $01
000975BE E104                       	smpsAlterNote       $04
000975C0 E701                       	dc.b	smpsNoAttack, $01
000975C2 E108                       	smpsAlterNote       $08
000975C4 E701                       	dc.b	smpsNoAttack, $01
000975C6 E10E                       	smpsAlterNote       $0E
000975C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975CC E10B                       	smpsAlterNote       $0B
000975CE E701                       	dc.b	smpsNoAttack, $01
000975D0 E105                       	smpsAlterNote       $05
000975D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975D6 E10B                       	smpsAlterNote       $0B
000975D8 E701                       	dc.b	smpsNoAttack, $01
000975DA E10E                       	smpsAlterNote       $0E
000975DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975E0 E108                       	smpsAlterNote       $08
000975E2 E701                       	dc.b	smpsNoAttack, $01
000975E4 E104                       	smpsAlterNote       $04
000975E6 E701                       	dc.b	smpsNoAttack, $01
000975E8 E105                       	smpsAlterNote       $05
000975EA E701                       	dc.b	smpsNoAttack, $01
000975EC E10B                       	smpsAlterNote       $0B
000975EE E701                       	dc.b	smpsNoAttack, $01
000975F0 E10F                       	smpsAlterNote       $0F
000975F2 E701                       	dc.b	smpsNoAttack, $01
000975F4 E10B                       	smpsAlterNote       $0B
000975F6 E701                       	dc.b	smpsNoAttack, $01
000975F8 E108                       	smpsAlterNote       $08
000975FA E701                       	dc.b	smpsNoAttack, $01
000975FC E105                       	smpsAlterNote       $05
000975FE 8001                       	dc.b	nRst, $01
00097600 E109                       	smpsAlterNote       $09
00097602 C401                       	dc.b	nG5, $01
00097604 E10B                       	smpsAlterNote       $0B
00097606 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
0009760F E109                       	smpsAlterNote       $09
00097611 C404 8001                  	dc.b	nG5, $04, nRst, $01
00097615 E10B                       	smpsAlterNote       $0B
00097617 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009761B E107                       	smpsAlterNote       $07
0009761D BF0D                       	dc.b	nD5, $0D
0009761F E101                       	smpsAlterNote       $01
00097621 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097625 E104                       	smpsAlterNote       $04
00097627 E701                       	dc.b	smpsNoAttack, $01
00097629 E10A                       	smpsAlterNote       $0A
0009762B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009762F E104                       	smpsAlterNote       $04
00097631 E701                       	dc.b	smpsNoAttack, $01
00097633 E101                       	smpsAlterNote       $01
00097635 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097639 E107                       	smpsAlterNote       $07
0009763B E701                       	dc.b	smpsNoAttack, $01
0009763D E10B                       	smpsAlterNote       $0B
0009763F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097643 E108                       	smpsAlterNote       $08
00097645 C101                       	dc.b	nE5, $01
00097647 E109                       	smpsAlterNote       $09
00097649 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0009764E E10B                       	smpsAlterNote       $0B
00097650 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00097658 E108                       	smpsAlterNote       $08
0009765A CD06                       	dc.b	nE6, $06
0009765C E109                       	smpsAlterNote       $09
0009765E CE07                       	dc.b	nF6, $07
00097660 E108                       	smpsAlterNote       $08
00097662 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00097666 E106                       	smpsAlterNote       $06
00097668 C903                       	dc.b	nC6, $03
0009766A E109                       	smpsAlterNote       $09
0009766C C403 8001                  	dc.b	nG5, $03, nRst, $01
00097670 E10C                       	smpsAlterNote       $0C
00097672 C70D                       	dc.b	nBb5, $0D
00097674 E106                       	smpsAlterNote       $06
00097676 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009767A E109                       	smpsAlterNote       $09
0009767C E701                       	dc.b	smpsNoAttack, $01
0009767E E10F                       	smpsAlterNote       $0F
00097680 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097684 E109                       	smpsAlterNote       $09
00097686 E701                       	dc.b	smpsNoAttack, $01
00097688 E106                       	smpsAlterNote       $06
0009768A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009768E E10C                       	smpsAlterNote       $0C
00097690 E701                       	dc.b	smpsNoAttack, $01
00097692 E110                       	smpsAlterNote       $10
00097694 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097698 E10B                       	smpsAlterNote       $0B
0009769A C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
0009769E E105                       	smpsAlterNote       $05
000976A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976A4 E10B                       	smpsAlterNote       $0B
000976A6 E701                       	dc.b	smpsNoAttack, $01
000976A8 E10E                       	smpsAlterNote       $0E
000976AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976AE E108                       	smpsAlterNote       $08
000976B0 E701                       	dc.b	smpsNoAttack, $01
000976B2 E104                       	smpsAlterNote       $04
000976B4 E701                       	dc.b	smpsNoAttack, $01
000976B6 E105                       	smpsAlterNote       $05
000976B8 E701                       	dc.b	smpsNoAttack, $01
000976BA E10B                       	smpsAlterNote       $0B
000976BC E701                       	dc.b	smpsNoAttack, $01
000976BE E10F                       	smpsAlterNote       $0F
000976C0 E701                       	dc.b	smpsNoAttack, $01
000976C2 E10B                       	smpsAlterNote       $0B
000976C4 E701                       	dc.b	smpsNoAttack, $01
000976C6 E108                       	smpsAlterNote       $08
000976C8 E701                       	dc.b	smpsNoAttack, $01
000976CA E104                       	smpsAlterNote       $04
000976CC E701                       	dc.b	smpsNoAttack, $01
000976CE E108                       	smpsAlterNote       $08
000976D0 E701                       	dc.b	smpsNoAttack, $01
000976D2 E10E                       	smpsAlterNote       $0E
000976D4 E701                       	dc.b	smpsNoAttack, $01
000976D6 E10F                       	smpsAlterNote       $0F
000976D8 E701                       	dc.b	smpsNoAttack, $01
000976DA E10B                       	smpsAlterNote       $0B
000976DC E701                       	dc.b	smpsNoAttack, $01
000976DE E105                       	smpsAlterNote       $05
000976E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976E4 E108                       	smpsAlterNote       $08
000976E6 E701                       	dc.b	smpsNoAttack, $01
000976E8 E10E                       	smpsAlterNote       $0E
000976EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976EE E108                       	smpsAlterNote       $08
000976F0 E701                       	dc.b	smpsNoAttack, $01
000976F2 E105                       	smpsAlterNote       $05
000976F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976F8 E10B                       	smpsAlterNote       $0B
000976FA E701                       	dc.b	smpsNoAttack, $01
000976FC E10F                       	smpsAlterNote       $0F
000976FE E701                       	dc.b	smpsNoAttack, $01
00097700 E10E                       	smpsAlterNote       $0E
00097702 E701                       	dc.b	smpsNoAttack, $01
00097704 E108                       	smpsAlterNote       $08
00097706 E701                       	dc.b	smpsNoAttack, $01
00097708 E104                       	smpsAlterNote       $04
0009770A E701                       	dc.b	smpsNoAttack, $01
0009770C E108                       	smpsAlterNote       $08
0009770E E701                       	dc.b	smpsNoAttack, $01
00097710 E10E                       	smpsAlterNote       $0E
00097712 E701                       	dc.b	smpsNoAttack, $01
00097714 E10F                       	smpsAlterNote       $0F
00097716 E701                       	dc.b	smpsNoAttack, $01
00097718 E10B                       	smpsAlterNote       $0B
0009771A E701                       	dc.b	smpsNoAttack, $01
0009771C E105                       	smpsAlterNote       $05
0009771E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097722 E108                       	smpsAlterNote       $08
00097724 E701                       	dc.b	smpsNoAttack, $01
00097726 E10E                       	smpsAlterNote       $0E
00097728 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009772C E108                       	smpsAlterNote       $08
0009772E E701                       	dc.b	smpsNoAttack, $01
00097730 E105                       	smpsAlterNote       $05
00097732 E701                       	dc.b	smpsNoAttack, $01
00097734 E10B                       	smpsAlterNote       $0B
00097736 C60D                       	dc.b	nA5, $0D
00097738 E108                       	smpsAlterNote       $08
0009773A E701                       	dc.b	smpsNoAttack, $01
0009773C E104                       	smpsAlterNote       $04
0009773E E701                       	dc.b	smpsNoAttack, $01
00097740 E105                       	smpsAlterNote       $05
00097742 E701                       	dc.b	smpsNoAttack, $01
00097744 E10B                       	smpsAlterNote       $0B
00097746 E701                       	dc.b	smpsNoAttack, $01
00097748 E10F                       	smpsAlterNote       $0F
0009774A E701                       	dc.b	smpsNoAttack, $01
0009774C E10B                       	smpsAlterNote       $0B
0009774E E701                       	dc.b	smpsNoAttack, $01
00097750 E108                       	smpsAlterNote       $08
00097752 E701                       	dc.b	smpsNoAttack, $01
00097754 E104                       	smpsAlterNote       $04
00097756 E701                       	dc.b	smpsNoAttack, $01
00097758 E108                       	smpsAlterNote       $08
0009775A E701                       	dc.b	smpsNoAttack, $01
0009775C E10E                       	smpsAlterNote       $0E
0009775E E701                       	dc.b	smpsNoAttack, $01
00097760 E10F                       	smpsAlterNote       $0F
00097762 E701                       	dc.b	smpsNoAttack, $01
00097766 E109                       	smpsAlterNote       $09
00097768 E6FF                       	smpsAlterVol        $FF
0009776A C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00097774 E108                       	smpsAlterNote       $08
00097776 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0009777C E107                       	smpsAlterNote       $07
0009777E E601                       	smpsAlterVol        $01
00097780 BF03                       	dc.b	nD5, $03
00097782 E108                       	smpsAlterNote       $08
00097784 C103 8001                  	dc.b	nE5, $03, nRst, $01
00097788 E109                       	smpsAlterNote       $09
0009778A C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00097790 E10B                       	smpsAlterNote       $0B
00097792 C606 8001                  	dc.b	nA5, $06, nRst, $01
00097796 E107                       	smpsAlterNote       $07
00097798 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0009779C E106                       	smpsAlterNote       $06
0009779E C90D                       	dc.b	nC6, $0D
000977A0 E103                       	smpsAlterNote       $03
000977A2 E701                       	dc.b	smpsNoAttack, $01
000977A4 E1FF                       	smpsAlterNote       $FF
000977A6 E701                       	dc.b	smpsNoAttack, $01
000977A8 E103                       	smpsAlterNote       $03
000977AA E701                       	dc.b	smpsNoAttack, $01
000977AC E109                       	smpsAlterNote       $09
000977AE E701                       	dc.b	smpsNoAttack, $01
000977B0 E10A                       	smpsAlterNote       $0A
000977B2 E701                       	dc.b	smpsNoAttack, $01
000977B4 E106                       	smpsAlterNote       $06
000977B6 E701                       	dc.b	smpsNoAttack, $01
000977B8 E100                       	smpsAlterNote       $00
000977BA E701                       	dc.b	smpsNoAttack, $01
000977BC E10C                       	smpsAlterNote       $0C
000977BE C703 8001                  	dc.b	nBb5, $03, nRst, $01
000977C2 E10B                       	smpsAlterNote       $0B
000977C4 C603                       	dc.b	nA5, $03
000977C6 E109                       	smpsAlterNote       $09
000977C8 C403 8001                  	dc.b	nG5, $03, nRst, $01
000977CC E10B                       	smpsAlterNote       $0B
000977CE C60D                       	dc.b	nA5, $0D
000977D0 E105                       	smpsAlterNote       $05
000977D2 E701                       	dc.b	smpsNoAttack, $01
000977D4 E104                       	smpsAlterNote       $04
000977D6 E701                       	dc.b	smpsNoAttack, $01
000977D8 E108                       	smpsAlterNote       $08
000977DA E701                       	dc.b	smpsNoAttack, $01
000977DC E10E                       	smpsAlterNote       $0E
000977DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000977E2 E10B                       	smpsAlterNote       $0B
000977E4 E701                       	dc.b	smpsNoAttack, $01
000977E6 E105                       	smpsAlterNote       $05
000977E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000977EC E10B                       	smpsAlterNote       $0B
000977EE E701                       	dc.b	smpsNoAttack, $01
000977F0 E10E                       	smpsAlterNote       $0E
000977F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000977F6 E108                       	smpsAlterNote       $08
000977F8 E701                       	dc.b	smpsNoAttack, $01
000977FA E104                       	smpsAlterNote       $04
000977FC E701                       	dc.b	smpsNoAttack, $01
000977FE E105                       	smpsAlterNote       $05
00097800 E701                       	dc.b	smpsNoAttack, $01
00097802 E10B                       	smpsAlterNote       $0B
00097804 E701                       	dc.b	smpsNoAttack, $01
00097806 E10F                       	smpsAlterNote       $0F
00097808 E701                       	dc.b	smpsNoAttack, $01
0009780A E10B                       	smpsAlterNote       $0B
0009780C E701                       	dc.b	smpsNoAttack, $01
0009780E E108                       	smpsAlterNote       $08
00097810 E701                       	dc.b	smpsNoAttack, $01
00097812 E104                       	smpsAlterNote       $04
00097814 E701                       	dc.b	smpsNoAttack, $01
00097816 E108                       	smpsAlterNote       $08
00097818 E701                       	dc.b	smpsNoAttack, $01
0009781A E10E                       	smpsAlterNote       $0E
0009781C E701                       	dc.b	smpsNoAttack, $01
0009781E E10F                       	smpsAlterNote       $0F
00097820 E701                       	dc.b	smpsNoAttack, $01
00097822 E10B                       	smpsAlterNote       $0B
00097824 E701                       	dc.b	smpsNoAttack, $01
00097826 E105                       	smpsAlterNote       $05
00097828 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009782C E108                       	smpsAlterNote       $08
0009782E E701                       	dc.b	smpsNoAttack, $01
00097830 E10E                       	smpsAlterNote       $0E
00097832 E701                       	dc.b	smpsNoAttack, $01
00097834 E10F                       	smpsAlterNote       $0F
00097836 800F                       	dc.b	nRst, $0F
00097838 E107                       	smpsAlterNote       $07
0009783A BF02 8001                  	dc.b	nD5, $02, nRst, $01
0009783E E108                       	smpsAlterNote       $08
00097840 C103                       	dc.b	nE5, $03
00097842 E109                       	smpsAlterNote       $09
00097844 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0009784A E10B                       	smpsAlterNote       $0B
0009784C C606 8001                  	dc.b	nA5, $06, nRst, $01
00097850 E107                       	smpsAlterNote       $07
00097852 BF03                       	dc.b	nD5, $03
00097854 E106                       	smpsAlterNote       $06
00097856 C90E                       	dc.b	nC6, $0E
00097858 E107                       	smpsAlterNote       $07
0009785A CB03 8001                  	dc.b	nD6, $03, nRst, $01
0009785E E10C                       	smpsAlterNote       $0C
00097860 C704                       	dc.b	nBb5, $04
00097862 E10B                       	smpsAlterNote       $0B
00097864 C604 8001                  	dc.b	nA5, $04, nRst, $01
00097868 E109                       	smpsAlterNote       $09
0009786A C404                       	dc.b	nG5, $04
0009786C E10B                       	smpsAlterNote       $0B
0009786E C60D                       	dc.b	nA5, $0D
00097870 E108                       	smpsAlterNote       $08
00097872 E701                       	dc.b	smpsNoAttack, $01
00097874 E105                       	smpsAlterNote       $05
00097876 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009787A E10B                       	smpsAlterNote       $0B
0009787C E701                       	dc.b	smpsNoAttack, $01
0009787E E10F                       	smpsAlterNote       $0F
00097880 E701                       	dc.b	smpsNoAttack, $01
00097882 E10E                       	smpsAlterNote       $0E
00097884 E701                       	dc.b	smpsNoAttack, $01
00097886 E108                       	smpsAlterNote       $08
00097888 E701                       	dc.b	smpsNoAttack, $01
0009788A E104                       	smpsAlterNote       $04
0009788C E701                       	dc.b	smpsNoAttack, $01
0009788E E108                       	smpsAlterNote       $08
00097890 E701                       	dc.b	smpsNoAttack, $01
00097892 E10B                       	smpsAlterNote       $0B
00097894 E701                       	dc.b	smpsNoAttack, $01
00097896 E10F                       	smpsAlterNote       $0F
00097898 E701                       	dc.b	smpsNoAttack, $01
0009789A E10B                       	smpsAlterNote       $0B
0009789C E701                       	dc.b	smpsNoAttack, $01
0009789E E105                       	smpsAlterNote       $05
000978A0 E701                       	dc.b	smpsNoAttack, $01
000978A2 E104                       	smpsAlterNote       $04
000978A4 E701                       	dc.b	smpsNoAttack, $01
000978A6 E108                       	smpsAlterNote       $08
000978A8 E701                       	dc.b	smpsNoAttack, $01
000978AA E10E                       	smpsAlterNote       $0E
000978AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978B0 E10B                       	smpsAlterNote       $0B
000978B2 E701                       	dc.b	smpsNoAttack, $01
000978B4 E105                       	smpsAlterNote       $05
000978B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978BA E10B                       	smpsAlterNote       $0B
000978BC E701                       	dc.b	smpsNoAttack, $01
000978BE E10E                       	smpsAlterNote       $0E
000978C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978C4 E108                       	smpsAlterNote       $08
000978C6 E701                       	dc.b	smpsNoAttack, $01
000978C8 E105                       	smpsAlterNote       $05
000978CA 8001                       	dc.b	nRst, $01
000978CC E109                       	smpsAlterNote       $09
000978CE C402                       	dc.b	nG5, $02
000978D0 E10B                       	smpsAlterNote       $0B
000978D2 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000978DB E109                       	smpsAlterNote       $09
000978DD C404                       	dc.b	nG5, $04
000978DF E10B                       	smpsAlterNote       $0B
000978E1 C604 8001                  	dc.b	nA5, $04, nRst, $01
000978E5 E107                       	smpsAlterNote       $07
000978E7 BF0D                       	dc.b	nD5, $0D
000978E9 E101                       	smpsAlterNote       $01
000978EB E701                       	dc.b	smpsNoAttack, $01
000978ED E100                       	smpsAlterNote       $00
000978EF E701                       	dc.b	smpsNoAttack, $01
000978F1 E104                       	smpsAlterNote       $04
000978F3 E701                       	dc.b	smpsNoAttack, $01
000978F5 E10A                       	smpsAlterNote       $0A
000978F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978FB E107                       	smpsAlterNote       $07
000978FD E701                       	dc.b	smpsNoAttack, $01
000978FF E101                       	smpsAlterNote       $01
00097901 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097905 E107                       	smpsAlterNote       $07
00097907 E701                       	dc.b	smpsNoAttack, $01
00097909 E10A                       	smpsAlterNote       $0A
0009790B E701                       	dc.b	smpsNoAttack, $01
0009790D E10B                       	smpsAlterNote       $0B
0009790F 8001                       	dc.b	nRst, $01
00097911 E108                       	smpsAlterNote       $08
00097913 C101                       	dc.b	nE5, $01
00097915 E109                       	smpsAlterNote       $09
00097917 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0009791C E10B                       	smpsAlterNote       $0B
0009791E C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00097926 E108                       	smpsAlterNote       $08
00097928 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0009792C E109                       	smpsAlterNote       $09
0009792E CE06 8001                  	dc.b	nF6, $06, nRst, $01
00097932 E108                       	smpsAlterNote       $08
00097934 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00097938 E106                       	smpsAlterNote       $06
0009793A C903                       	dc.b	nC6, $03
0009793C E109                       	smpsAlterNote       $09
0009793E C403 8001                  	dc.b	nG5, $03, nRst, $01
00097942 E10C                       	smpsAlterNote       $0C
00097944 C70D                       	dc.b	nBb5, $0D
00097946 E109                       	smpsAlterNote       $09
00097948 E701                       	dc.b	smpsNoAttack, $01
0009794A E105                       	smpsAlterNote       $05
0009794C E701                       	dc.b	smpsNoAttack, $01
0009794E E109                       	smpsAlterNote       $09
00097950 E701                       	dc.b	smpsNoAttack, $01
00097952 E10F                       	smpsAlterNote       $0F
00097954 E701                       	dc.b	smpsNoAttack, $01
00097956 E110                       	smpsAlterNote       $10
00097958 E701                       	dc.b	smpsNoAttack, $01
0009795A E10C                       	smpsAlterNote       $0C
0009795C E701                       	dc.b	smpsNoAttack, $01
0009795E E106                       	smpsAlterNote       $06
00097960 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097964 E109                       	smpsAlterNote       $09
00097966 E701                       	dc.b	smpsNoAttack, $01
00097968 E10F                       	smpsAlterNote       $0F
0009796A E701                       	dc.b	smpsNoAttack, $01
0009796C E110                       	smpsAlterNote       $10
0009796E 8001                       	dc.b	nRst, $01
00097970 E10B                       	smpsAlterNote       $0B
00097972 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00097978 E105                       	smpsAlterNote       $05
0009797A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009797E E108                       	smpsAlterNote       $08
00097980 E701                       	dc.b	smpsNoAttack, $01
00097982 E10E                       	smpsAlterNote       $0E
00097984 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097988 E108                       	smpsAlterNote       $08
0009798A E701                       	dc.b	smpsNoAttack, $01
0009798C E105                       	smpsAlterNote       $05
0009798E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097992 E10B                       	smpsAlterNote       $0B
00097994 E701                       	dc.b	smpsNoAttack, $01
00097996 E10F                       	smpsAlterNote       $0F
00097998 E701                       	dc.b	smpsNoAttack, $01
0009799A E10E                       	smpsAlterNote       $0E
0009799C E701                       	dc.b	smpsNoAttack, $01
0009799E E108                       	smpsAlterNote       $08
000979A0 E701                       	dc.b	smpsNoAttack, $01
000979A2 E104                       	smpsAlterNote       $04
000979A4 E701                       	dc.b	smpsNoAttack, $01
000979A6 E108                       	smpsAlterNote       $08
000979A8 E701                       	dc.b	smpsNoAttack, $01
000979AA E10B                       	smpsAlterNote       $0B
000979AC E701                       	dc.b	smpsNoAttack, $01
000979AE E10F                       	smpsAlterNote       $0F
000979B0 E701                       	dc.b	smpsNoAttack, $01
000979B2 E10B                       	smpsAlterNote       $0B
000979B4 E701                       	dc.b	smpsNoAttack, $01
000979B6 E105                       	smpsAlterNote       $05
000979B8 E701                       	dc.b	smpsNoAttack, $01
000979BA E104                       	smpsAlterNote       $04
000979BC E701                       	dc.b	smpsNoAttack, $01
000979BE E108                       	smpsAlterNote       $08
000979C0 E701                       	dc.b	smpsNoAttack, $01
000979C2 E10E                       	smpsAlterNote       $0E
000979C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000979C8 E10B                       	smpsAlterNote       $0B
000979CA E701                       	dc.b	smpsNoAttack, $01
000979CC E105                       	smpsAlterNote       $05
000979CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000979D2 E10B                       	smpsAlterNote       $0B
000979D4 E701                       	dc.b	smpsNoAttack, $01
000979D6 E10E                       	smpsAlterNote       $0E
000979D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000979DC E108                       	smpsAlterNote       $08
000979DE E701                       	dc.b	smpsNoAttack, $01
000979E0 E104                       	smpsAlterNote       $04
000979E2 E701                       	dc.b	smpsNoAttack, $01
000979E4 E105                       	smpsAlterNote       $05
000979E6 E701                       	dc.b	smpsNoAttack, $01
000979E8 E10B                       	smpsAlterNote       $0B
000979EA E701                       	dc.b	smpsNoAttack, $01
000979EC E10F                       	smpsAlterNote       $0F
000979EE E701                       	dc.b	smpsNoAttack, $01
000979F0 E10B                       	smpsAlterNote       $0B
000979F2 E701                       	dc.b	smpsNoAttack, $01
000979F4 E108                       	smpsAlterNote       $08
000979F6 E701                       	dc.b	smpsNoAttack, $01
000979F8 E104                       	smpsAlterNote       $04
000979FA E701                       	dc.b	smpsNoAttack, $01
000979FC E108                       	smpsAlterNote       $08
000979FE E701                       	dc.b	smpsNoAttack, $01
00097A00 E10E                       	smpsAlterNote       $0E
00097A02 E701                       	dc.b	smpsNoAttack, $01
00097A04 E10F                       	smpsAlterNote       $0F
00097A06 E701                       	dc.b	smpsNoAttack, $01
00097A08 E10B                       	smpsAlterNote       $0B
00097A0A E701                       	dc.b	smpsNoAttack, $01
00097A0C E105                       	smpsAlterNote       $05
00097A0E E701                       	dc.b	smpsNoAttack, $01
00097A10 E10B                       	smpsAlterNote       $0B
00097A12 C60E                       	dc.b	nA5, $0E
00097A14 E105                       	smpsAlterNote       $05
00097A16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097A1A E10B                       	smpsAlterNote       $0B
00097A1C E701                       	dc.b	smpsNoAttack, $01
00097A1E E10E                       	smpsAlterNote       $0E
00097A20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097A24 E108                       	smpsAlterNote       $08
00097A26 E701                       	dc.b	smpsNoAttack, $01
00097A28 E104                       	smpsAlterNote       $04
00097A2A E701                       	dc.b	smpsNoAttack, $01
00097A2C E105                       	smpsAlterNote       $05
00097A2E E701                       	dc.b	smpsNoAttack, $01
00097A30 E10B                       	smpsAlterNote       $0B
00097A32 E701                       	dc.b	smpsNoAttack, $01
00097A34 E10F                       	smpsAlterNote       $0F
00097A36 E701                       	dc.b	smpsNoAttack, $01
00097A38 E10B                       	smpsAlterNote       $0B
00097A3A E701                       	dc.b	smpsNoAttack, $01
00097A3C E108                       	smpsAlterNote       $08
00097A3E E701                       	dc.b	smpsNoAttack, $01
00097A40 E104                       	smpsAlterNote       $04
00097A42 E701                       	dc.b	smpsNoAttack, $01
00097A44 E108                       	smpsAlterNote       $08
00097A46 E701                       	dc.b	smpsNoAttack, $01
00097A48 E10E                       	smpsAlterNote       $0E
00097A4A E701                       	dc.b	smpsNoAttack, $01
00097A4C E10F                       	smpsAlterNote       $0F
00097A4E E701                       	dc.b	smpsNoAttack, $01
00097A50 E10B                       	smpsAlterNote       $0B
00097A52 E701                       	dc.b	smpsNoAttack, $01
00097A54 E105                       	smpsAlterNote       $05
00097A56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097A5A E108                       	smpsAlterNote       $08
00097A5C E701                       	dc.b	smpsNoAttack, $01
00097A5E E10E                       	smpsAlterNote       $0E
00097A60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097A64 E108                       	smpsAlterNote       $08
00097A66 E701                       	dc.b	smpsNoAttack, $01
00097A68 E105                       	smpsAlterNote       $05
00097A6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097A6E E10B                       	smpsAlterNote       $0B
00097A70 E701                       	dc.b	smpsNoAttack, $01
00097A72 E10F                       	smpsAlterNote       $0F
00097A74 E701                       	dc.b	smpsNoAttack, $01
00097A76 E10E                       	smpsAlterNote       $0E
00097A78 E701                       	dc.b	smpsNoAttack, $01
00097A7A E108                       	smpsAlterNote       $08
00097A7C E701                       	dc.b	smpsNoAttack, $01
00097A7E E104                       	smpsAlterNote       $04
00097A80 E701                       	dc.b	smpsNoAttack, $01
00097A82 E108                       	smpsAlterNote       $08
00097A84 E701                       	dc.b	smpsNoAttack, $01
00097A86 E10E                       	smpsAlterNote       $0E
00097A88 E701                       	dc.b	smpsNoAttack, $01
00097A8A E10F                       	smpsAlterNote       $0F
00097A8C E701                       	dc.b	smpsNoAttack, $01
00097A8E E10B                       	smpsAlterNote       $0B
00097A90 E701                       	dc.b	smpsNoAttack, $01
00097A92 E105                       	smpsAlterNote       $05
00097A94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097A98 E108                       	smpsAlterNote       $08
00097A9A E701                       	dc.b	smpsNoAttack, $01
00097A9C E10E                       	smpsAlterNote       $0E
00097A9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097AA2 E108                       	smpsAlterNote       $08
00097AA4 E701                       	dc.b	smpsNoAttack, $01
00097AA6 E105                       	smpsAlterNote       $05
00097AA8 E701                       	dc.b	smpsNoAttack, $01
00097AAC E10B                       	smpsAlterNote       $0B
00097AAE E6FD                       	smpsAlterVol        $FD
00097AB0 C604 8001                  	dc.b	nA5, $04, nRst, $01
00097AB4 E109                       	smpsAlterNote       $09
00097AB6 C404                       	dc.b	nG5, $04
00097AB8 E10B                       	smpsAlterNote       $0B
00097ABA C604 8001                  	dc.b	nA5, $04, nRst, $01
00097ABE E107                       	smpsAlterNote       $07
00097AC0 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00097AC6 E10B                       	smpsAlterNote       $0B
00097AC8 C604                       	dc.b	nA5, $04
00097ACA E109                       	smpsAlterNote       $09
00097ACC C404 8001                  	dc.b	nG5, $04, nRst, $01
00097AD0 E10B                       	smpsAlterNote       $0B
00097AD2 C604                       	dc.b	nA5, $04
00097AD4 E108                       	smpsAlterNote       $08
00097AD6 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00097ADE E106                       	smpsAlterNote       $06
00097AE0 C904 8001                  	dc.b	nC6, $04, nRst, $01
00097AE4 E10C                       	smpsAlterNote       $0C
00097AE6 C704                       	dc.b	nBb5, $04
00097AE8 E10B                       	smpsAlterNote       $0B
00097AEA C604 8001                  	dc.b	nA5, $04, nRst, $01
00097AEE E109                       	smpsAlterNote       $09
00097AF0 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00097AFA E10B                       	smpsAlterNote       $0B
00097AFC C60D                       	dc.b	nA5, $0D
00097AFE E108                       	smpsAlterNote       $08
00097B00 E701                       	dc.b	smpsNoAttack, $01
00097B02 E104                       	smpsAlterNote       $04
00097B04 E701                       	dc.b	smpsNoAttack, $01
00097B06 E108                       	smpsAlterNote       $08
00097B08 E701                       	dc.b	smpsNoAttack, $01
00097B0A E10E                       	smpsAlterNote       $0E
00097B0C E701                       	dc.b	smpsNoAttack, $01
00097B0E E10F                       	smpsAlterNote       $0F
00097B10 E701                       	dc.b	smpsNoAttack, $01
00097B12 E10B                       	smpsAlterNote       $0B
00097B14 E701                       	dc.b	smpsNoAttack, $01
00097B16 E105                       	smpsAlterNote       $05
00097B18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097B1C E108                       	smpsAlterNote       $08
00097B1E E701                       	dc.b	smpsNoAttack, $01
00097B20 E10E                       	smpsAlterNote       $0E
00097B22 E701                       	dc.b	smpsNoAttack, $01
00097B24 E10F                       	smpsAlterNote       $0F
00097B26 8001                       	dc.b	nRst, $01
00097B28 E109                       	smpsAlterNote       $09
00097B2A C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00097B30 E108                       	smpsAlterNote       $08
00097B32 C10D                       	dc.b	nE5, $0D
00097B34 E102                       	smpsAlterNote       $02
00097B36 E701                       	dc.b	smpsNoAttack, $01
00097B38 E101                       	smpsAlterNote       $01
00097B3A E701                       	dc.b	smpsNoAttack, $01
00097B3C E105                       	smpsAlterNote       $05
00097B3E E701                       	dc.b	smpsNoAttack, $01
00097B40 E10B                       	smpsAlterNote       $0B
00097B42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097B46 E108                       	smpsAlterNote       $08
00097B48 E701                       	dc.b	smpsNoAttack, $01
00097B4A E102                       	smpsAlterNote       $02
00097B4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097B50 E108                       	smpsAlterNote       $08
00097B52 E701                       	dc.b	smpsNoAttack, $01
00097B54 E10B                       	smpsAlterNote       $0B
00097B56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097B5A E105                       	smpsAlterNote       $05
00097B5C E701                       	dc.b	smpsNoAttack, $01
00097B5E E101                       	smpsAlterNote       $01
00097B60 E701                       	dc.b	smpsNoAttack, $01
00097B62 E102                       	smpsAlterNote       $02
00097B64 E701                       	dc.b	smpsNoAttack, $01
00097B66 E108                       	smpsAlterNote       $08
00097B68 E701                       	dc.b	smpsNoAttack, $01
00097B6A E10C                       	smpsAlterNote       $0C
00097B6C E701                       	dc.b	smpsNoAttack, $01
00097B6E E108                       	smpsAlterNote       $08
00097B70 E701                       	dc.b	smpsNoAttack, $01
00097B72 E105                       	smpsAlterNote       $05
00097B74 E701                       	dc.b	smpsNoAttack, $01
00097B76 E101                       	smpsAlterNote       $01
00097B78 E701                       	dc.b	smpsNoAttack, $01
00097B7A E105                       	smpsAlterNote       $05
00097B7C E701                       	dc.b	smpsNoAttack, $01
00097B7E E10B                       	smpsAlterNote       $0B
00097B80 E701                       	dc.b	smpsNoAttack, $01
00097B82 E10C                       	smpsAlterNote       $0C
00097B84 E701                       	dc.b	smpsNoAttack, $01
00097B86 E108                       	smpsAlterNote       $08
00097B88 E701                       	dc.b	smpsNoAttack, $01
00097B8A E102                       	smpsAlterNote       $02
00097B8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097B90 E105                       	smpsAlterNote       $05
00097B92 E701                       	dc.b	smpsNoAttack, $01
00097B94 E10B                       	smpsAlterNote       $0B
00097B96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097B9A E105                       	smpsAlterNote       $05
00097B9C E701                       	dc.b	smpsNoAttack, $01
00097B9E E102                       	smpsAlterNote       $02
00097BA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097BA4 E108                       	smpsAlterNote       $08
00097BA6 E701                       	dc.b	smpsNoAttack, $01
00097BA8 E10C                       	smpsAlterNote       $0C
00097BAA E701                       	dc.b	smpsNoAttack, $01
00097BAC E10B                       	smpsAlterNote       $0B
00097BAE E701                       	dc.b	smpsNoAttack, $01
00097BB0 E105                       	smpsAlterNote       $05
00097BB2 E701                       	dc.b	smpsNoAttack, $01
00097BB4 E101                       	smpsAlterNote       $01
00097BB6 E701                       	dc.b	smpsNoAttack, $01
00097BB8 E105                       	smpsAlterNote       $05
00097BBA E701                       	dc.b	smpsNoAttack, $01
00097BBC E108                       	smpsAlterNote       $08
00097BBE E701                       	dc.b	smpsNoAttack, $01
00097BC0 E10C                       	smpsAlterNote       $0C
00097BC2 E701                       	dc.b	smpsNoAttack, $01
00097BC4 E108                       	smpsAlterNote       $08
00097BC6 E701                       	dc.b	smpsNoAttack, $01
00097BC8 E102                       	smpsAlterNote       $02
00097BCA E701                       	dc.b	smpsNoAttack, $01
00097BCC E101                       	smpsAlterNote       $01
00097BCE E701                       	dc.b	smpsNoAttack, $01
00097BD0 E105                       	smpsAlterNote       $05
00097BD2 E701                       	dc.b	smpsNoAttack, $01
00097BD4 E10B                       	smpsAlterNote       $0B
00097BD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097BDA E108                       	smpsAlterNote       $08
00097BDC E701                       	dc.b	smpsNoAttack, $01
00097BDE E102                       	smpsAlterNote       $02
00097BE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097BE4 E108                       	smpsAlterNote       $08
00097BE6 E701                       	dc.b	smpsNoAttack, $01
00097BE8 E10B                       	smpsAlterNote       $0B
00097BEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097BEE E105                       	smpsAlterNote       $05
00097BF0 E701                       	dc.b	smpsNoAttack, $01
00097BF2 E101                       	smpsAlterNote       $01
00097BF4 E701                       	dc.b	smpsNoAttack, $01
00097BF6 E102                       	smpsAlterNote       $02
00097BF8 E701                       	dc.b	smpsNoAttack, $01
00097BFA E108                       	smpsAlterNote       $08
00097BFC E701                       	dc.b	smpsNoAttack, $01
00097BFE E10C                       	smpsAlterNote       $0C
00097C00 E701                       	dc.b	smpsNoAttack, $01
00097C02 E108                       	smpsAlterNote       $08
00097C04 E701                       	dc.b	smpsNoAttack, $01
00097C06 E105                       	smpsAlterNote       $05
00097C08 E701                       	dc.b	smpsNoAttack, $01
00097C0A E101                       	smpsAlterNote       $01
00097C0C E701                       	dc.b	smpsNoAttack, $01
00097C0E E105                       	smpsAlterNote       $05
00097C10 E701                       	dc.b	smpsNoAttack, $01
00097C12 E10B                       	smpsAlterNote       $0B
00097C14 E701                       	dc.b	smpsNoAttack, $01
00097C16 E10C                       	smpsAlterNote       $0C
00097C18 E701                       	dc.b	smpsNoAttack, $01
00097C1A E108                       	smpsAlterNote       $08
00097C1C E701                       	dc.b	smpsNoAttack, $01
00097C1E E102                       	smpsAlterNote       $02
00097C20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097C24 E105                       	smpsAlterNote       $05
00097C26 E701                       	dc.b	smpsNoAttack, $01
00097C28 E10B                       	smpsAlterNote       $0B
00097C2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097C2E E105                       	smpsAlterNote       $05
00097C30 E701                       	dc.b	smpsNoAttack, $01
00097C32 E101                       	smpsAlterNote       $01
00097C34 E701                       	dc.b	smpsNoAttack, $01
00097C36 E102                       	smpsAlterNote       $02
00097C38 E701                       	dc.b	smpsNoAttack, $01
00097C3A E108                       	smpsAlterNote       $08
00097C3C E701                       	dc.b	smpsNoAttack, $01
00097C3E E10C                       	smpsAlterNote       $0C
00097C40 E701                       	dc.b	smpsNoAttack, $01
00097C42 E108                       	smpsAlterNote       $08
00097C44 E701                       	dc.b	smpsNoAttack, $01
00097C46 E105                       	smpsAlterNote       $05
00097C48 E701                       	dc.b	smpsNoAttack, $01
00097C4A E101                       	smpsAlterNote       $01
00097C4C E701                       	dc.b	smpsNoAttack, $01
00097C4E E105                       	smpsAlterNote       $05
00097C50 E701                       	dc.b	smpsNoAttack, $01
00097C52 E10B                       	smpsAlterNote       $0B
00097C54 E701                       	dc.b	smpsNoAttack, $01
00097C56 E10C                       	smpsAlterNote       $0C
00097C58 E701                       	dc.b	smpsNoAttack, $01
00097C5A E108                       	smpsAlterNote       $08
00097C5C E701                       	dc.b	smpsNoAttack, $01
00097C5E E102                       	smpsAlterNote       $02
00097C60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097C64 E105                       	smpsAlterNote       $05
00097C66 E701                       	dc.b	smpsNoAttack, $01
00097C68 E10B                       	smpsAlterNote       $0B
00097C6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097C6E E105                       	smpsAlterNote       $05
00097C70 E701                       	dc.b	smpsNoAttack, $01
00097C72 E102                       	smpsAlterNote       $02
00097C74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097C78 E108                       	smpsAlterNote       $08
00097C7A E701                       	dc.b	smpsNoAttack, $01
00097C7C E10C                       	smpsAlterNote       $0C
00097C7E E701                       	dc.b	smpsNoAttack, $01
00097C80 E10B                       	smpsAlterNote       $0B
00097C82 E701                       	dc.b	smpsNoAttack, $01
00097C84 E105                       	smpsAlterNote       $05
00097C86 E701                       	dc.b	smpsNoAttack, $01
00097C88 E101                       	smpsAlterNote       $01
00097C8A E701                       	dc.b	smpsNoAttack, $01
00097C8C E105                       	smpsAlterNote       $05
00097C8E E701                       	dc.b	smpsNoAttack, $01
00097C90 E108                       	smpsAlterNote       $08
00097C92 E701                       	dc.b	smpsNoAttack, $01
00097C94 E10C                       	smpsAlterNote       $0C
00097C96 E701                       	dc.b	smpsNoAttack, $01
00097C9A E10B                       	smpsAlterNote       $0B
00097C9C C604 8001                  	dc.b	nA5, $04, nRst, $01
00097CA0 E109                       	smpsAlterNote       $09
00097CA2 C404                       	dc.b	nG5, $04
00097CA4 E10B                       	smpsAlterNote       $0B
00097CA6 C604 8001                  	dc.b	nA5, $04, nRst, $01
00097CAA E107                       	smpsAlterNote       $07
00097CAC BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00097CB2 E10B                       	smpsAlterNote       $0B
00097CB4 C604                       	dc.b	nA5, $04
00097CB6 E109                       	smpsAlterNote       $09
00097CB8 C404 8001                  	dc.b	nG5, $04, nRst, $01
00097CBC E10B                       	smpsAlterNote       $0B
00097CBE C604                       	dc.b	nA5, $04
00097CC0 E108                       	smpsAlterNote       $08
00097CC2 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
00097CC8 E106                       	smpsAlterNote       $06
00097CCA C904 8001                  	dc.b	nC6, $04, nRst, $01
00097CCE E10C                       	smpsAlterNote       $0C
00097CD0 C704                       	dc.b	nBb5, $04
00097CD2 E10B                       	smpsAlterNote       $0B
00097CD4 C604 8001                  	dc.b	nA5, $04, nRst, $01
00097CD8 E109                       	smpsAlterNote       $09
00097CDA C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00097CE4 E10B                       	smpsAlterNote       $0B
00097CE6 C60D                       	dc.b	nA5, $0D
00097CE8 E108                       	smpsAlterNote       $08
00097CEA E701                       	dc.b	smpsNoAttack, $01
00097CEC E104                       	smpsAlterNote       $04
00097CEE E701                       	dc.b	smpsNoAttack, $01
00097CF0 E108                       	smpsAlterNote       $08
00097CF2 E701                       	dc.b	smpsNoAttack, $01
00097CF4 E10B                       	smpsAlterNote       $0B
00097CF6 E701                       	dc.b	smpsNoAttack, $01
00097CF8 E10F                       	smpsAlterNote       $0F
00097CFA E701                       	dc.b	smpsNoAttack, $01
00097CFC E10B                       	smpsAlterNote       $0B
00097CFE E701                       	dc.b	smpsNoAttack, $01
00097D00 E105                       	smpsAlterNote       $05
00097D02 E701                       	dc.b	smpsNoAttack, $01
00097D04 E104                       	smpsAlterNote       $04
00097D06 E701                       	dc.b	smpsNoAttack, $01
00097D08 E108                       	smpsAlterNote       $08
00097D0A E701                       	dc.b	smpsNoAttack, $01
00097D0C E10E                       	smpsAlterNote       $0E
00097D0E E701                       	dc.b	smpsNoAttack, $01
00097D10 E10F                       	smpsAlterNote       $0F
00097D12 8001                       	dc.b	nRst, $01
00097D14 E109                       	smpsAlterNote       $09
00097D16 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00097D1C E108                       	smpsAlterNote       $08
00097D1E C10D                       	dc.b	nE5, $0D
00097D20 E105                       	smpsAlterNote       $05
00097D22 E701                       	dc.b	smpsNoAttack, $01
00097D24 E101                       	smpsAlterNote       $01
00097D26 E701                       	dc.b	smpsNoAttack, $01
00097D28 E105                       	smpsAlterNote       $05
00097D2A E701                       	dc.b	smpsNoAttack, $01
00097D2C E10B                       	smpsAlterNote       $0B
00097D2E E701                       	dc.b	smpsNoAttack, $01
00097D30 E10C                       	smpsAlterNote       $0C
00097D32 E701                       	dc.b	smpsNoAttack, $01
00097D34 E108                       	smpsAlterNote       $08
00097D36 E701                       	dc.b	smpsNoAttack, $01
00097D38 E102                       	smpsAlterNote       $02
00097D3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097D3E E105                       	smpsAlterNote       $05
00097D40 E701                       	dc.b	smpsNoAttack, $01
00097D42 E10B                       	smpsAlterNote       $0B
00097D44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097D48 E105                       	smpsAlterNote       $05
00097D4A E701                       	dc.b	smpsNoAttack, $01
00097D4C E102                       	smpsAlterNote       $02
00097D4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097D52 E108                       	smpsAlterNote       $08
00097D54 E701                       	dc.b	smpsNoAttack, $01
00097D56 E10C                       	smpsAlterNote       $0C
00097D58 E701                       	dc.b	smpsNoAttack, $01
00097D5A E10B                       	smpsAlterNote       $0B
00097D5C E701                       	dc.b	smpsNoAttack, $01
00097D5E E105                       	smpsAlterNote       $05
00097D60 E701                       	dc.b	smpsNoAttack, $01
00097D62 E101                       	smpsAlterNote       $01
00097D64 E701                       	dc.b	smpsNoAttack, $01
00097D66 E105                       	smpsAlterNote       $05
00097D68 E701                       	dc.b	smpsNoAttack, $01
00097D6A E108                       	smpsAlterNote       $08
00097D6C E701                       	dc.b	smpsNoAttack, $01
00097D6E E10C                       	smpsAlterNote       $0C
00097D70 E701                       	dc.b	smpsNoAttack, $01
00097D72 E108                       	smpsAlterNote       $08
00097D74 E701                       	dc.b	smpsNoAttack, $01
00097D76 E102                       	smpsAlterNote       $02
00097D78 E701                       	dc.b	smpsNoAttack, $01
00097D7A E101                       	smpsAlterNote       $01
00097D7C E701                       	dc.b	smpsNoAttack, $01
00097D7E E105                       	smpsAlterNote       $05
00097D80 E701                       	dc.b	smpsNoAttack, $01
00097D82 E10B                       	smpsAlterNote       $0B
00097D84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097D88 E108                       	smpsAlterNote       $08
00097D8A E701                       	dc.b	smpsNoAttack, $01
00097D8C E102                       	smpsAlterNote       $02
00097D8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097D92 E108                       	smpsAlterNote       $08
00097D94 E701                       	dc.b	smpsNoAttack, $01
00097D96 E10B                       	smpsAlterNote       $0B
00097D98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097D9C E105                       	smpsAlterNote       $05
00097D9E E701                       	dc.b	smpsNoAttack, $01
00097DA0 E101                       	smpsAlterNote       $01
00097DA2 E701                       	dc.b	smpsNoAttack, $01
00097DA4 E102                       	smpsAlterNote       $02
00097DA6 E701                       	dc.b	smpsNoAttack, $01
00097DA8 E108                       	smpsAlterNote       $08
00097DAA E701                       	dc.b	smpsNoAttack, $01
00097DAC E10C                       	smpsAlterNote       $0C
00097DAE E701                       	dc.b	smpsNoAttack, $01
00097DB0 E108                       	smpsAlterNote       $08
00097DB2 E701                       	dc.b	smpsNoAttack, $01
00097DB4 E105                       	smpsAlterNote       $05
00097DB6 E701                       	dc.b	smpsNoAttack, $01
00097DB8 E101                       	smpsAlterNote       $01
00097DBA E701                       	dc.b	smpsNoAttack, $01
00097DBC E105                       	smpsAlterNote       $05
00097DBE E701                       	dc.b	smpsNoAttack, $01
00097DC0 E10B                       	smpsAlterNote       $0B
00097DC2 E701                       	dc.b	smpsNoAttack, $01
00097DC4 E10C                       	smpsAlterNote       $0C
00097DC6 E701                       	dc.b	smpsNoAttack, $01
00097DC8 E108                       	smpsAlterNote       $08
00097DCA E701                       	dc.b	smpsNoAttack, $01
00097DCC E102                       	smpsAlterNote       $02
00097DCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097DD2 E108                       	smpsAlterNote       $08
00097DD4 E701                       	dc.b	smpsNoAttack, $01
00097DD6 E10B                       	smpsAlterNote       $0B
00097DD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097DDC E105                       	smpsAlterNote       $05
00097DDE E701                       	dc.b	smpsNoAttack, $01
00097DE0 E101                       	smpsAlterNote       $01
00097DE2 E701                       	dc.b	smpsNoAttack, $01
00097DE4 E102                       	smpsAlterNote       $02
00097DE6 E701                       	dc.b	smpsNoAttack, $01
00097DE8 E108                       	smpsAlterNote       $08
00097DEA E701                       	dc.b	smpsNoAttack, $01
00097DEC E10C                       	smpsAlterNote       $0C
00097DEE E701                       	dc.b	smpsNoAttack, $01
00097DF0 E108                       	smpsAlterNote       $08
00097DF2 E701                       	dc.b	smpsNoAttack, $01
00097DF4 E105                       	smpsAlterNote       $05
00097DF6 E701                       	dc.b	smpsNoAttack, $01
00097DF8 E101                       	smpsAlterNote       $01
00097DFA E701                       	dc.b	smpsNoAttack, $01
00097DFC E105                       	smpsAlterNote       $05
00097DFE E701                       	dc.b	smpsNoAttack, $01
00097E00 E10B                       	smpsAlterNote       $0B
00097E02 E701                       	dc.b	smpsNoAttack, $01
00097E04 E10C                       	smpsAlterNote       $0C
00097E06 E701                       	dc.b	smpsNoAttack, $01
00097E08 E108                       	smpsAlterNote       $08
00097E0A E701                       	dc.b	smpsNoAttack, $01
00097E0C E102                       	smpsAlterNote       $02
00097E0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E12 E105                       	smpsAlterNote       $05
00097E14 E701                       	dc.b	smpsNoAttack, $01
00097E16 E10B                       	smpsAlterNote       $0B
00097E18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E1C E105                       	smpsAlterNote       $05
00097E1E E701                       	dc.b	smpsNoAttack, $01
00097E20 E102                       	smpsAlterNote       $02
00097E22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E26 E108                       	smpsAlterNote       $08
00097E28 E701                       	dc.b	smpsNoAttack, $01
00097E2A E10C                       	smpsAlterNote       $0C
00097E2C E701                       	dc.b	smpsNoAttack, $01
00097E2E E10B                       	smpsAlterNote       $0B
00097E30 E701                       	dc.b	smpsNoAttack, $01
00097E32 E105                       	smpsAlterNote       $05
00097E34 E701                       	dc.b	smpsNoAttack, $01
00097E36 E101                       	smpsAlterNote       $01
00097E38 E701                       	dc.b	smpsNoAttack, $01
00097E3A E105                       	smpsAlterNote       $05
00097E3C E701                       	dc.b	smpsNoAttack, $01
00097E3E E108                       	smpsAlterNote       $08
00097E40 E701                       	dc.b	smpsNoAttack, $01
00097E42 E10C                       	smpsAlterNote       $0C
00097E44 E701                       	dc.b	smpsNoAttack, $01
00097E46 E108                       	smpsAlterNote       $08
00097E48 E701                       	dc.b	smpsNoAttack, $01
00097E4A E102                       	smpsAlterNote       $02
00097E4C E701                       	dc.b	smpsNoAttack, $01
00097E4E E101                       	smpsAlterNote       $01
00097E50 E701                       	dc.b	smpsNoAttack, $01
00097E52 E105                       	smpsAlterNote       $05
00097E54 E701                       	dc.b	smpsNoAttack, $01
00097E56 E10B                       	smpsAlterNote       $0B
00097E58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E5C E108                       	smpsAlterNote       $08
00097E5E E701                       	dc.b	smpsNoAttack, $01
00097E60 E102                       	smpsAlterNote       $02
00097E62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E66 E108                       	smpsAlterNote       $08
00097E68 E701                       	dc.b	smpsNoAttack, $01
00097E6A E10B                       	smpsAlterNote       $0B
00097E6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E70 E105                       	smpsAlterNote       $05
00097E72 E701                       	dc.b	smpsNoAttack, $01
00097E74 E102                       	smpsAlterNote       $02
00097E76 8001                       	dc.b	nRst, $01
00097E78 E107                       	smpsAlterNote       $07
00097E7A BF01 8001                  	dc.b	nD5, $01, nRst, $01
00097E7E E108                       	smpsAlterNote       $08
00097E80 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00097E84 E102                       	smpsAlterNote       $02
00097E86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E8A E108                       	smpsAlterNote       $08
00097E8C E701                       	dc.b	smpsNoAttack, $01
00097E8E E10B                       	smpsAlterNote       $0B
00097E90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E94 E105                       	smpsAlterNote       $05
00097E96 E701                       	dc.b	smpsNoAttack, $01
00097E98 E101                       	smpsAlterNote       $01
00097E9A E701                       	dc.b	smpsNoAttack, $01
00097E9C E102                       	smpsAlterNote       $02
00097E9E E701                       	dc.b	smpsNoAttack, $01
00097EA0 E108                       	smpsAlterNote       $08
00097EA2 E701                       	dc.b	smpsNoAttack, $01
00097EA4 E10C                       	smpsAlterNote       $0C
00097EA6 E701                       	dc.b	smpsNoAttack, $01
00097EA8 E108                       	smpsAlterNote       $08
00097EAA E701                       	dc.b	smpsNoAttack, $01
00097EAC E105                       	smpsAlterNote       $05
00097EAE E701                       	dc.b	smpsNoAttack, $01
00097EB0 E101                       	smpsAlterNote       $01
00097EB2 E701                       	dc.b	smpsNoAttack, $01
00097EB4 E105                       	smpsAlterNote       $05
00097EB6 E701                       	dc.b	smpsNoAttack, $01
00097EB8 E10B                       	smpsAlterNote       $0B
00097EBA E701                       	dc.b	smpsNoAttack, $01
00097EBC E10C                       	smpsAlterNote       $0C
00097EBE E701                       	dc.b	smpsNoAttack, $01
00097EC0 E108                       	smpsAlterNote       $08
00097EC2 E701                       	dc.b	smpsNoAttack, $01
00097EC4 E102                       	smpsAlterNote       $02
00097EC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097ECA E105                       	smpsAlterNote       $05
00097ECC E701                       	dc.b	smpsNoAttack, $01
00097ECE E10B                       	smpsAlterNote       $0B
00097ED0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097ED4 E105                       	smpsAlterNote       $05
00097ED6 E701                       	dc.b	smpsNoAttack, $01
00097ED8 E102                       	smpsAlterNote       $02
00097EDA E701                       	dc.b	smpsNoAttack, $01
00097EDC E109                       	smpsAlterNote       $09
00097EDE C40A C207                  	dc.b	nG5, $0A, nF5, $07
00097EE2 E108                       	smpsAlterNote       $08
00097EE4 C10D                       	dc.b	nE5, $0D
00097EE6 E105                       	smpsAlterNote       $05
00097EE8 E701                       	dc.b	smpsNoAttack, $01
00097EEA E101                       	smpsAlterNote       $01
00097EEC E701                       	dc.b	smpsNoAttack, $01
00097EEE E102                       	smpsAlterNote       $02
00097EF0 E701                       	dc.b	smpsNoAttack, $01
00097EF2 E108                       	smpsAlterNote       $08
00097EF4 E701                       	dc.b	smpsNoAttack, $01
00097EF6 E10C                       	smpsAlterNote       $0C
00097EF8 E701                       	dc.b	smpsNoAttack, $01
00097EFA E108                       	smpsAlterNote       $08
00097EFC E701                       	dc.b	smpsNoAttack, $01
00097EFE E105                       	smpsAlterNote       $05
00097F00 E701                       	dc.b	smpsNoAttack, $01
00097F02 E101                       	smpsAlterNote       $01
00097F04 E701                       	dc.b	smpsNoAttack, $01
00097F06 E105                       	smpsAlterNote       $05
00097F08 E701                       	dc.b	smpsNoAttack, $01
00097F0A E10B                       	smpsAlterNote       $0B
00097F0C E701                       	dc.b	smpsNoAttack, $01
00097F0E E10C                       	smpsAlterNote       $0C
00097F10 E701                       	dc.b	smpsNoAttack, $01
00097F12 E108                       	smpsAlterNote       $08
00097F14 E701                       	dc.b	smpsNoAttack, $01
00097F16 E102                       	smpsAlterNote       $02
00097F18 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00097F20 E10B                       	smpsAlterNote       $0B
00097F22 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00097F26 E10C                       	smpsAlterNote       $0C
00097F28 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00097F2C E10B                       	smpsAlterNote       $0B
00097F2E BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00097F34 E107                       	smpsAlterNote       $07
00097F36 BF03                       	dc.b	nD5, $03
00097F38 E108                       	smpsAlterNote       $08
00097F3A C103 8001                  	dc.b	nE5, $03, nRst, $01
00097F3E E109                       	smpsAlterNote       $09
00097F40 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00097F46 E10B                       	smpsAlterNote       $0B
00097F48 C606 8001                  	dc.b	nA5, $06, nRst, $01
00097F4C E107                       	smpsAlterNote       $07
00097F4E BF02 8001                  	dc.b	nD5, $02, nRst, $01
00097F52 E106                       	smpsAlterNote       $06
00097F54 C90D                       	dc.b	nC6, $0D
00097F56 E103                       	smpsAlterNote       $03
00097F58 E701                       	dc.b	smpsNoAttack, $01
00097F5A E1FF                       	smpsAlterNote       $FF
00097F5C E701                       	dc.b	smpsNoAttack, $01
00097F5E E103                       	smpsAlterNote       $03
00097F60 E701                       	dc.b	smpsNoAttack, $01
00097F62 E109                       	smpsAlterNote       $09
00097F64 E701                       	dc.b	smpsNoAttack, $01
00097F66 E10A                       	smpsAlterNote       $0A
00097F68 E701                       	dc.b	smpsNoAttack, $01
00097F6A E106                       	smpsAlterNote       $06
00097F6C E701                       	dc.b	smpsNoAttack, $01
00097F6E E100                       	smpsAlterNote       $00
00097F70 E701                       	dc.b	smpsNoAttack, $01
00097F72 E10C                       	smpsAlterNote       $0C
00097F74 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00097F78 E10B                       	smpsAlterNote       $0B
00097F7A C603                       	dc.b	nA5, $03
00097F7C E109                       	smpsAlterNote       $09
00097F7E C403 8001                  	dc.b	nG5, $03, nRst, $01
00097F82 E10B                       	smpsAlterNote       $0B
00097F84 C60D                       	dc.b	nA5, $0D
00097F86 E105                       	smpsAlterNote       $05
00097F88 E701                       	dc.b	smpsNoAttack, $01
00097F8A E104                       	smpsAlterNote       $04
00097F8C E701                       	dc.b	smpsNoAttack, $01
00097F8E E108                       	smpsAlterNote       $08
00097F90 E701                       	dc.b	smpsNoAttack, $01
00097F92 E10E                       	smpsAlterNote       $0E
00097F94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097F98 E10B                       	smpsAlterNote       $0B
00097F9A E701                       	dc.b	smpsNoAttack, $01
00097F9C E105                       	smpsAlterNote       $05
00097F9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097FA2 E10B                       	smpsAlterNote       $0B
00097FA4 E701                       	dc.b	smpsNoAttack, $01
00097FA6 E10E                       	smpsAlterNote       $0E
00097FA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097FAC E108                       	smpsAlterNote       $08
00097FAE E701                       	dc.b	smpsNoAttack, $01
00097FB0 E104                       	smpsAlterNote       $04
00097FB2 E701                       	dc.b	smpsNoAttack, $01
00097FB4 E105                       	smpsAlterNote       $05
00097FB6 E701                       	dc.b	smpsNoAttack, $01
00097FB8 E10B                       	smpsAlterNote       $0B
00097FBA E701                       	dc.b	smpsNoAttack, $01
00097FBC E10F                       	smpsAlterNote       $0F
00097FBE E701                       	dc.b	smpsNoAttack, $01
00097FC0 E10B                       	smpsAlterNote       $0B
00097FC2 E701                       	dc.b	smpsNoAttack, $01
00097FC4 E108                       	smpsAlterNote       $08
00097FC6 E701                       	dc.b	smpsNoAttack, $01
00097FC8 E104                       	smpsAlterNote       $04
00097FCA E701                       	dc.b	smpsNoAttack, $01
00097FCC E108                       	smpsAlterNote       $08
00097FCE E701                       	dc.b	smpsNoAttack, $01
00097FD0 E10E                       	smpsAlterNote       $0E
00097FD2 E701                       	dc.b	smpsNoAttack, $01
00097FD4 E10F                       	smpsAlterNote       $0F
00097FD6 E701                       	dc.b	smpsNoAttack, $01
00097FD8 E10B                       	smpsAlterNote       $0B
00097FDA E701                       	dc.b	smpsNoAttack, $01
00097FDC E105                       	smpsAlterNote       $05
00097FDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097FE2 E108                       	smpsAlterNote       $08
00097FE4 E701                       	dc.b	smpsNoAttack, $01
00097FE6 E10E                       	smpsAlterNote       $0E
00097FE8 E701                       	dc.b	smpsNoAttack, $01
00097FEA E10F                       	smpsAlterNote       $0F
00097FEC 800F                       	dc.b	nRst, $0F
00097FEE E107                       	smpsAlterNote       $07
00097FF0 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00097FF4 E108                       	smpsAlterNote       $08
00097FF6 C103                       	dc.b	nE5, $03
00097FF8 E109                       	smpsAlterNote       $09
00097FFA C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00098000 E10B                       	smpsAlterNote       $0B
00098002 C607                       	dc.b	nA5, $07
00098004 E107                       	smpsAlterNote       $07
00098006 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0009800A E106                       	smpsAlterNote       $06
0009800C C90D                       	dc.b	nC6, $0D
0009800E E107                       	smpsAlterNote       $07
00098010 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00098014 E10C                       	smpsAlterNote       $0C
00098016 C704                       	dc.b	nBb5, $04
00098018 E10B                       	smpsAlterNote       $0B
0009801A C604 8001                  	dc.b	nA5, $04, nRst, $01
0009801E E109                       	smpsAlterNote       $09
00098020 C404                       	dc.b	nG5, $04
00098022 E10B                       	smpsAlterNote       $0B
00098024 C60D                       	dc.b	nA5, $0D
00098026 E108                       	smpsAlterNote       $08
00098028 E701                       	dc.b	smpsNoAttack, $01
0009802A E105                       	smpsAlterNote       $05
0009802C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098030 E10B                       	smpsAlterNote       $0B
00098032 E701                       	dc.b	smpsNoAttack, $01
00098034 E10F                       	smpsAlterNote       $0F
00098036 E701                       	dc.b	smpsNoAttack, $01
00098038 E10E                       	smpsAlterNote       $0E
0009803A E701                       	dc.b	smpsNoAttack, $01
0009803C E108                       	smpsAlterNote       $08
0009803E E701                       	dc.b	smpsNoAttack, $01
00098040 E104                       	smpsAlterNote       $04
00098042 E701                       	dc.b	smpsNoAttack, $01
00098044 E108                       	smpsAlterNote       $08
00098046 E701                       	dc.b	smpsNoAttack, $01
00098048 E10B                       	smpsAlterNote       $0B
0009804A E701                       	dc.b	smpsNoAttack, $01
0009804C E10F                       	smpsAlterNote       $0F
0009804E E701                       	dc.b	smpsNoAttack, $01
00098050 E10B                       	smpsAlterNote       $0B
00098052 E701                       	dc.b	smpsNoAttack, $01
00098054 E105                       	smpsAlterNote       $05
00098056 E701                       	dc.b	smpsNoAttack, $01
00098058 E104                       	smpsAlterNote       $04
0009805A E701                       	dc.b	smpsNoAttack, $01
0009805C E108                       	smpsAlterNote       $08
0009805E E701                       	dc.b	smpsNoAttack, $01
00098060 E10E                       	smpsAlterNote       $0E
00098062 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098066 E10B                       	smpsAlterNote       $0B
00098068 E701                       	dc.b	smpsNoAttack, $01
0009806A E105                       	smpsAlterNote       $05
0009806C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098070 E10B                       	smpsAlterNote       $0B
00098072 E701                       	dc.b	smpsNoAttack, $01
00098074 E10E                       	smpsAlterNote       $0E
00098076 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009807A E108                       	smpsAlterNote       $08
0009807C E701                       	dc.b	smpsNoAttack, $01
0009807E E105                       	smpsAlterNote       $05
00098080 8001                       	dc.b	nRst, $01
00098082 E109                       	smpsAlterNote       $09
00098084 C401 8001                  	dc.b	nG5, $01, nRst, $01
00098088 E10B                       	smpsAlterNote       $0B
0009808A C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00098092 E109                       	smpsAlterNote       $09
00098094 C404                       	dc.b	nG5, $04
00098096 E10B                       	smpsAlterNote       $0B
00098098 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009809C E107                       	smpsAlterNote       $07
0009809E BF0D                       	dc.b	nD5, $0D
000980A0 E101                       	smpsAlterNote       $01
000980A2 E701                       	dc.b	smpsNoAttack, $01
000980A4 E100                       	smpsAlterNote       $00
000980A6 E701                       	dc.b	smpsNoAttack, $01
000980A8 E104                       	smpsAlterNote       $04
000980AA E701                       	dc.b	smpsNoAttack, $01
000980AC E10A                       	smpsAlterNote       $0A
000980AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000980B2 E107                       	smpsAlterNote       $07
000980B4 E701                       	dc.b	smpsNoAttack, $01
000980B6 E101                       	smpsAlterNote       $01
000980B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000980BC E107                       	smpsAlterNote       $07
000980BE E701                       	dc.b	smpsNoAttack, $01
000980C0 E10A                       	smpsAlterNote       $0A
000980C2 E701                       	dc.b	smpsNoAttack, $01
000980C4 E10B                       	smpsAlterNote       $0B
000980C6 8001                       	dc.b	nRst, $01
000980C8 E108                       	smpsAlterNote       $08
000980CA 8001                       	dc.b	nRst, $01
000980CC E109                       	smpsAlterNote       $09
000980CE 8001 C401                  	dc.b	nRst, $01, nG5, $01
000980D2 E10B                       	smpsAlterNote       $0B
000980D4 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000980DC E108                       	smpsAlterNote       $08
000980DE CD06 8001                  	dc.b	nE6, $06, nRst, $01
000980E2 E109                       	smpsAlterNote       $09
000980E4 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000980E8 E108                       	smpsAlterNote       $08
000980EA CD02 8001                  	dc.b	nE6, $02, nRst, $01
000980EE E106                       	smpsAlterNote       $06
000980F0 C903                       	dc.b	nC6, $03
000980F2 E109                       	smpsAlterNote       $09
000980F4 C403 8001                  	dc.b	nG5, $03, nRst, $01
000980F8 E10C                       	smpsAlterNote       $0C
000980FA C70D                       	dc.b	nBb5, $0D
000980FC E109                       	smpsAlterNote       $09
000980FE E701                       	dc.b	smpsNoAttack, $01
00098100 E105                       	smpsAlterNote       $05
00098102 E701                       	dc.b	smpsNoAttack, $01
00098104 E109                       	smpsAlterNote       $09
00098106 E701                       	dc.b	smpsNoAttack, $01
00098108 E10F                       	smpsAlterNote       $0F
0009810A E701                       	dc.b	smpsNoAttack, $01
0009810C E110                       	smpsAlterNote       $10
0009810E E701                       	dc.b	smpsNoAttack, $01
00098110 E10C                       	smpsAlterNote       $0C
00098112 E701                       	dc.b	smpsNoAttack, $01
00098114 E106                       	smpsAlterNote       $06
00098116 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009811A E109                       	smpsAlterNote       $09
0009811C E701                       	dc.b	smpsNoAttack, $01
0009811E E10F                       	smpsAlterNote       $0F
00098120 E701                       	dc.b	smpsNoAttack, $01
00098122 E110                       	smpsAlterNote       $10
00098124 8001                       	dc.b	nRst, $01
00098126 E10B                       	smpsAlterNote       $0B
00098128 C606 8001                  	dc.b	nA5, $06, nRst, $01
0009812C E109                       	smpsAlterNote       $09
0009812E C40D                       	dc.b	nG5, $0D
00098130 E103                       	smpsAlterNote       $03
00098132 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098136 E106                       	smpsAlterNote       $06
00098138 E701                       	dc.b	smpsNoAttack, $01
0009813A E10C                       	smpsAlterNote       $0C
0009813C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098140 E106                       	smpsAlterNote       $06
00098142 E701                       	dc.b	smpsNoAttack, $01
00098144 E103                       	smpsAlterNote       $03
00098146 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009814A E109                       	smpsAlterNote       $09
0009814C E701                       	dc.b	smpsNoAttack, $01
0009814E E10D                       	smpsAlterNote       $0D
00098150 E701                       	dc.b	smpsNoAttack, $01
00098152 E10C                       	smpsAlterNote       $0C
00098154 E701                       	dc.b	smpsNoAttack, $01
00098156 E106                       	smpsAlterNote       $06
00098158 E701                       	dc.b	smpsNoAttack, $01
0009815A E102                       	smpsAlterNote       $02
0009815C E701                       	dc.b	smpsNoAttack, $01
0009815E E103                       	smpsAlterNote       $03
00098160 8001                       	dc.b	nRst, $01
00098162 E10B                       	smpsAlterNote       $0B
00098164 C60D                       	dc.b	nA5, $0D
00098166 E108                       	smpsAlterNote       $08
00098168 E701                       	dc.b	smpsNoAttack, $01
0009816A E104                       	smpsAlterNote       $04
0009816C E701                       	dc.b	smpsNoAttack, $01
0009816E E108                       	smpsAlterNote       $08
00098170 E701                       	dc.b	smpsNoAttack, $01
00098172 E10B                       	smpsAlterNote       $0B
00098174 E701                       	dc.b	smpsNoAttack, $01
00098176 E10F                       	smpsAlterNote       $0F
00098178 E701                       	dc.b	smpsNoAttack, $01
0009817A E10B                       	smpsAlterNote       $0B
0009817C E701                       	dc.b	smpsNoAttack, $01
0009817E E105                       	smpsAlterNote       $05
00098180 E701                       	dc.b	smpsNoAttack, $01
00098182 E104                       	smpsAlterNote       $04
00098184 E701                       	dc.b	smpsNoAttack, $01
00098186 E108                       	smpsAlterNote       $08
00098188 E701                       	dc.b	smpsNoAttack, $01
0009818A E10E                       	smpsAlterNote       $0E
0009818C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098190 E10B                       	smpsAlterNote       $0B
00098192 E701                       	dc.b	smpsNoAttack, $01
00098194 E105                       	smpsAlterNote       $05
00098196 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009819A E10C                       	smpsAlterNote       $0C
0009819C C70E                       	dc.b	nBb5, $0E
0009819E E106                       	smpsAlterNote       $06
000981A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000981A4 E10C                       	smpsAlterNote       $0C
000981A6 E701                       	dc.b	smpsNoAttack, $01
000981A8 E10F                       	smpsAlterNote       $0F
000981AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000981AE E109                       	smpsAlterNote       $09
000981B0 E701                       	dc.b	smpsNoAttack, $01
000981B2 E105                       	smpsAlterNote       $05
000981B4 E701                       	dc.b	smpsNoAttack, $01
000981B6 E106                       	smpsAlterNote       $06
000981B8 E701                       	dc.b	smpsNoAttack, $01
000981BA E10C                       	smpsAlterNote       $0C
000981BC E701                       	dc.b	smpsNoAttack, $01
000981BE E110                       	smpsAlterNote       $10
000981C0 E701                       	dc.b	smpsNoAttack, $01
000981C2 E10C                       	smpsAlterNote       $0C
000981C4 E701                       	dc.b	smpsNoAttack, $01
000981C6 E109                       	smpsAlterNote       $09
000981C8 E701                       	dc.b	smpsNoAttack, $01
000981CA E105                       	smpsAlterNote       $05
000981CC E701                       	dc.b	smpsNoAttack, $01
000981CE E106                       	smpsAlterNote       $06
000981D0 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
000981D4 E107                       	smpsAlterNote       $07
000981D6 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
000981DB E108                       	smpsAlterNote       $08
000981DD CD0D                       	dc.b	nE6, $0D
000981DF E107                       	smpsAlterNote       $07
000981E1 CB0D                       	dc.b	nD6, $0D
000981E3 E104                       	smpsAlterNote       $04
000981E5 E701                       	dc.b	smpsNoAttack, $01
000981E7 E100                       	smpsAlterNote       $00
000981E9 E701                       	dc.b	smpsNoAttack, $01
000981EB E101                       	smpsAlterNote       $01
000981ED E701                       	dc.b	smpsNoAttack, $01
000981EF E107                       	smpsAlterNote       $07
000981F1 E701                       	dc.b	smpsNoAttack, $01
000981F3 E10B                       	smpsAlterNote       $0B
000981F5 E701                       	dc.b	smpsNoAttack, $01
000981F7 E107                       	smpsAlterNote       $07
000981F9 E701                       	dc.b	smpsNoAttack, $01
000981FB E104                       	smpsAlterNote       $04
000981FD E701                       	dc.b	smpsNoAttack, $01
000981FF E100                       	smpsAlterNote       $00
00098201 E701                       	dc.b	smpsNoAttack, $01
00098203 E104                       	smpsAlterNote       $04
00098205 E701                       	dc.b	smpsNoAttack, $01
00098207 E10A                       	smpsAlterNote       $0A
00098209 E701                       	dc.b	smpsNoAttack, $01
0009820B E10B                       	smpsAlterNote       $0B
0009820D E701                       	dc.b	smpsNoAttack, $01
0009820F E108                       	smpsAlterNote       $08
00098211 CC0D                       	dc.b	nEb6, $0D
00098213 E105                       	smpsAlterNote       $05
00098215 E701                       	dc.b	smpsNoAttack, $01
00098217 E101                       	smpsAlterNote       $01
00098219 E701                       	dc.b	smpsNoAttack, $01
0009821B E102                       	smpsAlterNote       $02
0009821D E701                       	dc.b	smpsNoAttack, $01
0009821F E108                       	smpsAlterNote       $08
00098221 E701                       	dc.b	smpsNoAttack, $01
00098223 E106                       	smpsAlterNote       $06
00098225 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00098231 8001                       	dc.b	nRst, $01
00098233 E107                       	smpsAlterNote       $07
00098235 CB0D                       	dc.b	nD6, $0D
00098237 E104                       	smpsAlterNote       $04
00098239 E701                       	dc.b	smpsNoAttack, $01
0009823B E100                       	smpsAlterNote       $00
0009823D E701                       	dc.b	smpsNoAttack, $01
0009823F E104                       	smpsAlterNote       $04
00098241 E701                       	dc.b	smpsNoAttack, $01
00098243 E107                       	smpsAlterNote       $07
00098245 E701                       	dc.b	smpsNoAttack, $01
00098247 E10B                       	smpsAlterNote       $0B
00098249 E701                       	dc.b	smpsNoAttack, $01
0009824B E107                       	smpsAlterNote       $07
0009824D E701                       	dc.b	smpsNoAttack, $01
0009824F E101                       	smpsAlterNote       $01
00098251 E701                       	dc.b	smpsNoAttack, $01
00098253 E100                       	smpsAlterNote       $00
00098255 E701                       	dc.b	smpsNoAttack, $01
00098257 E104                       	smpsAlterNote       $04
00098259 E701                       	dc.b	smpsNoAttack, $01
0009825B E10A                       	smpsAlterNote       $0A
0009825D E701                       	dc.b	smpsNoAttack, $01
0009825F E10B                       	smpsAlterNote       $0B
00098261 8001                       	dc.b	nRst, $01
00098263 E109                       	smpsAlterNote       $09
00098265 CE0A                       	dc.b	nF6, $0A
00098267 E108                       	smpsAlterNote       $08
00098269 CC07                       	dc.b	nEb6, $07
0009826B E106                       	smpsAlterNote       $06
0009826D C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00098279 E107                       	smpsAlterNote       $07
0009827B CB0D                       	dc.b	nD6, $0D
0009827D E101                       	smpsAlterNote       $01
0009827F E701                       	dc.b	smpsNoAttack, $01
00098281 E100                       	smpsAlterNote       $00
00098283 E701                       	dc.b	smpsNoAttack, $01
00098285 E104                       	smpsAlterNote       $04
00098287 E701                       	dc.b	smpsNoAttack, $01
00098289 E10A                       	smpsAlterNote       $0A
0009828B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009828F E107                       	smpsAlterNote       $07
00098291 E701                       	dc.b	smpsNoAttack, $01
00098293 E101                       	smpsAlterNote       $01
00098295 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098299 E107                       	smpsAlterNote       $07
0009829B E701                       	dc.b	smpsNoAttack, $01
0009829D E10A                       	smpsAlterNote       $0A
0009829F E701                       	dc.b	smpsNoAttack, $01
000982A1 E10B                       	smpsAlterNote       $0B
000982A3 8001                       	dc.b	nRst, $01
000982A5 E108                       	smpsAlterNote       $08
000982A7 CC0D                       	dc.b	nEb6, $0D
000982A9 E102                       	smpsAlterNote       $02
000982AB E701                       	dc.b	smpsNoAttack, $01
000982AD E101                       	smpsAlterNote       $01
000982AF E701                       	dc.b	smpsNoAttack, $01
000982B1 E105                       	smpsAlterNote       $05
000982B3 E701                       	dc.b	smpsNoAttack, $01
000982B5 E108                       	smpsAlterNote       $08
000982B7 8001                       	dc.b	nRst, $01
000982B9 E106                       	smpsAlterNote       $06
000982BB C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000982C7 8001                       	dc.b	nRst, $01
000982C9 E107                       	smpsAlterNote       $07
000982CB CB0D                       	dc.b	nD6, $0D
000982CD E101                       	smpsAlterNote       $01
000982CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000982D3 E104                       	smpsAlterNote       $04
000982D5 E701                       	dc.b	smpsNoAttack, $01
000982D7 E10A                       	smpsAlterNote       $0A
000982D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000982DD E104                       	smpsAlterNote       $04
000982DF E701                       	dc.b	smpsNoAttack, $01
000982E1 E101                       	smpsAlterNote       $01
000982E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000982E7 E107                       	smpsAlterNote       $07
000982E9 E701                       	dc.b	smpsNoAttack, $01
000982EB E10B                       	smpsAlterNote       $0B
000982ED E701                       	dc.b	smpsNoAttack, $01
000982EF E10A                       	smpsAlterNote       $0A
000982F1 E701                       	dc.b	smpsNoAttack, $01
000982F3 E104                       	smpsAlterNote       $04
000982F5 E701                       	dc.b	smpsNoAttack, $01
000982F7 E100                       	smpsAlterNote       $00
000982F9 E701                       	dc.b	smpsNoAttack, $01
000982FB E101                       	smpsAlterNote       $01
000982FD 801C                       	dc.b	nRst, $1C
00098301 E107                       	smpsAlterNote       $07
00098303 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00098307 E603                       	smpsAlterVol        $03
00098309 F6F1 AD                    	smpsJump            music84_Jump03
0009830C                            
0009830C                            ; FM3 Data
0009830C                            music84_FM3:
0009830C E0C0                       	smpsPan             panCenter, $00
00098310 E109                       	smpsAlterNote       $09
00098312 C203 8007                  	dc.b	nF5, $03, nRst, $07
00098316 E108                       	smpsAlterNote       $08
00098318 C103 800B                  	dc.b	nE5, $03, nRst, $0B
0009831C E10B                       	smpsAlterNote       $0B
0009831E BA03 8006                  	dc.b	nA4, $03, nRst, $06
00098324 E040                       	smpsPan             panRight, $00
00098326 E110                       	smpsAlterNote       $10
00098328 E6F9                       	smpsAlterVol        $F9
0009832A C702 8001                  	dc.b	nBb5, $02, nRst, $01
0009832E E10F                       	smpsAlterNote       $0F
00098330 C603                       	dc.b	nA5, $03
00098332 E10D                       	smpsAlterNote       $0D
00098334 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0009833A E10C                       	smpsAlterNote       $0C
0009833C C103 8001                  	dc.b	nE5, $03, nRst, $01
00098340 E10A                       	smpsAlterNote       $0A
00098342 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00098346 E10F                       	smpsAlterNote       $0F
00098348 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0009834C E0C0                       	smpsPan             panCenter, $00
00098350 E109                       	smpsAlterNote       $09
00098352 E609                       	smpsAlterVol        $09
00098354 B603                       	dc.b	nF4, $03
00098356                            
00098356                            music84_Jump02:
00098356 E70A                       	dc.b	smpsNoAttack, $0A
00098358 E103                       	smpsAlterNote       $03
0009835A E701                       	dc.b	smpsNoAttack, $01
0009835C E102                       	smpsAlterNote       $02
0009835E E701                       	dc.b	smpsNoAttack, $01
00098360 E106                       	smpsAlterNote       $06
00098362 E701                       	dc.b	smpsNoAttack, $01
00098364 E10C                       	smpsAlterNote       $0C
00098366 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009836A E109                       	smpsAlterNote       $09
0009836C E701                       	dc.b	smpsNoAttack, $01
0009836E E103                       	smpsAlterNote       $03
00098370 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098374 E109                       	smpsAlterNote       $09
00098376 E701                       	dc.b	smpsNoAttack, $01
00098378 E10C                       	smpsAlterNote       $0C
0009837A E701                       	dc.b	smpsNoAttack, $01
0009837C E10D                       	smpsAlterNote       $0D
0009837E 8001                       	dc.b	nRst, $01
00098380 E109                       	smpsAlterNote       $09
00098382 B80D                       	dc.b	nG4, $0D
00098384 E103                       	smpsAlterNote       $03
00098386 E701                       	dc.b	smpsNoAttack, $01
00098388 E102                       	smpsAlterNote       $02
0009838A E701                       	dc.b	smpsNoAttack, $01
0009838C E106                       	smpsAlterNote       $06
0009838E E701                       	dc.b	smpsNoAttack, $01
00098390 E10C                       	smpsAlterNote       $0C
00098392 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098396 E109                       	smpsAlterNote       $09
00098398 E701                       	dc.b	smpsNoAttack, $01
0009839A E103                       	smpsAlterNote       $03
0009839C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000983A0 E109                       	smpsAlterNote       $09
000983A2 E701                       	dc.b	smpsNoAttack, $01
000983A4 E10C                       	smpsAlterNote       $0C
000983A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000983AA E106                       	smpsAlterNote       $06
000983AC E701                       	dc.b	smpsNoAttack, $01
000983AE E102                       	smpsAlterNote       $02
000983B0 E701                       	dc.b	smpsNoAttack, $01
000983B2 E103                       	smpsAlterNote       $03
000983B4 E701                       	dc.b	smpsNoAttack, $01
000983B6 E109                       	smpsAlterNote       $09
000983B8 E701                       	dc.b	smpsNoAttack, $01
000983BA E10D                       	smpsAlterNote       $0D
000983BC E701                       	dc.b	smpsNoAttack, $01
000983BE E109                       	smpsAlterNote       $09
000983C0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000983C4 E10B                       	smpsAlterNote       $0B
000983C6 BA0D                       	dc.b	nA4, $0D
000983C8 E105                       	smpsAlterNote       $05
000983CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000983CE E108                       	smpsAlterNote       $08
000983D0 E701                       	dc.b	smpsNoAttack, $01
000983D2 E10E                       	smpsAlterNote       $0E
000983D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000983D8 E108                       	smpsAlterNote       $08
000983DA E701                       	dc.b	smpsNoAttack, $01
000983DC E104                       	smpsAlterNote       $04
000983DE E701                       	dc.b	smpsNoAttack, $01
000983E0 E105                       	smpsAlterNote       $05
000983E2 E701                       	dc.b	smpsNoAttack, $01
000983E4 E10B                       	smpsAlterNote       $0B
000983E6 E701                       	dc.b	smpsNoAttack, $01
000983E8 E10F                       	smpsAlterNote       $0F
000983EA E701                       	dc.b	smpsNoAttack, $01
000983EC E10B                       	smpsAlterNote       $0B
000983EE E701                       	dc.b	smpsNoAttack, $01
000983F0 E108                       	smpsAlterNote       $08
000983F2 E701                       	dc.b	smpsNoAttack, $01
000983F4 E104                       	smpsAlterNote       $04
000983F6 E701                       	dc.b	smpsNoAttack, $01
000983F8 E108                       	smpsAlterNote       $08
000983FA E701                       	dc.b	smpsNoAttack, $01
000983FC E10E                       	smpsAlterNote       $0E
000983FE E701                       	dc.b	smpsNoAttack, $01
00098400 E10F                       	smpsAlterNote       $0F
00098402 E701                       	dc.b	smpsNoAttack, $01
00098404 E10B                       	smpsAlterNote       $0B
00098406 E701                       	dc.b	smpsNoAttack, $01
00098408 E105                       	smpsAlterNote       $05
0009840A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009840E E108                       	smpsAlterNote       $08
00098410 E701                       	dc.b	smpsNoAttack, $01
00098412 E10E                       	smpsAlterNote       $0E
00098414 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098418 E108                       	smpsAlterNote       $08
0009841A E701                       	dc.b	smpsNoAttack, $01
0009841C E105                       	smpsAlterNote       $05
0009841E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098422 E10B                       	smpsAlterNote       $0B
00098424 E701                       	dc.b	smpsNoAttack, $01
00098426 E10F                       	smpsAlterNote       $0F
00098428 E701                       	dc.b	smpsNoAttack, $01
0009842A E10E                       	smpsAlterNote       $0E
0009842C E701                       	dc.b	smpsNoAttack, $01
0009842E E108                       	smpsAlterNote       $08
00098430 E701                       	dc.b	smpsNoAttack, $01
00098432 E104                       	smpsAlterNote       $04
00098434 E701                       	dc.b	smpsNoAttack, $01
00098436 E105                       	smpsAlterNote       $05
00098438 8001                       	dc.b	nRst, $01
0009843A E108                       	smpsAlterNote       $08
0009843C B50A                       	dc.b	nE4, $0A
0009843E E109                       	smpsAlterNote       $09
00098440 B60D                       	dc.b	nF4, $0D
00098442 E106                       	smpsAlterNote       $06
00098444 E701                       	dc.b	smpsNoAttack, $01
00098446 E103                       	smpsAlterNote       $03
00098448 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009844C E109                       	smpsAlterNote       $09
0009844E E701                       	dc.b	smpsNoAttack, $01
00098450 E10D                       	smpsAlterNote       $0D
00098452 E701                       	dc.b	smpsNoAttack, $01
00098454 E10C                       	smpsAlterNote       $0C
00098456 E701                       	dc.b	smpsNoAttack, $01
00098458 E106                       	smpsAlterNote       $06
0009845A E701                       	dc.b	smpsNoAttack, $01
0009845C E102                       	smpsAlterNote       $02
0009845E E701                       	dc.b	smpsNoAttack, $01
00098460 E106                       	smpsAlterNote       $06
00098462 E701                       	dc.b	smpsNoAttack, $01
00098464 E109                       	smpsAlterNote       $09
00098466 E701                       	dc.b	smpsNoAttack, $01
00098468 E10D                       	smpsAlterNote       $0D
0009846A E701                       	dc.b	smpsNoAttack, $01
0009846C E109                       	smpsAlterNote       $09
0009846E B80D                       	dc.b	nG4, $0D
00098470 E106                       	smpsAlterNote       $06
00098472 E701                       	dc.b	smpsNoAttack, $01
00098474 E103                       	smpsAlterNote       $03
00098476 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009847A E109                       	smpsAlterNote       $09
0009847C E701                       	dc.b	smpsNoAttack, $01
0009847E E10D                       	smpsAlterNote       $0D
00098480 E701                       	dc.b	smpsNoAttack, $01
00098482 E10C                       	smpsAlterNote       $0C
00098484 E701                       	dc.b	smpsNoAttack, $01
00098486 E106                       	smpsAlterNote       $06
00098488 E701                       	dc.b	smpsNoAttack, $01
0009848A E102                       	smpsAlterNote       $02
0009848C E701                       	dc.b	smpsNoAttack, $01
0009848E E106                       	smpsAlterNote       $06
00098490 E701                       	dc.b	smpsNoAttack, $01
00098492 E109                       	smpsAlterNote       $09
00098494 E701                       	dc.b	smpsNoAttack, $01
00098496 E10D                       	smpsAlterNote       $0D
00098498 E701                       	dc.b	smpsNoAttack, $01
0009849A E109                       	smpsAlterNote       $09
0009849C E701                       	dc.b	smpsNoAttack, $01
0009849E E103                       	smpsAlterNote       $03
000984A0 E701                       	dc.b	smpsNoAttack, $01
000984A2 E102                       	smpsAlterNote       $02
000984A4 E701                       	dc.b	smpsNoAttack, $01
000984A6 E106                       	smpsAlterNote       $06
000984A8 E701                       	dc.b	smpsNoAttack, $01
000984AA E10C                       	smpsAlterNote       $0C
000984AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000984B0 E109                       	smpsAlterNote       $09
000984B2 E701                       	dc.b	smpsNoAttack, $01
000984B4 E10B                       	smpsAlterNote       $0B
000984B6 BA0D                       	dc.b	nA4, $0D
000984B8 E108                       	smpsAlterNote       $08
000984BA E701                       	dc.b	smpsNoAttack, $01
000984BC E104                       	smpsAlterNote       $04
000984BE E701                       	dc.b	smpsNoAttack, $01
000984C0 E108                       	smpsAlterNote       $08
000984C2 E701                       	dc.b	smpsNoAttack, $01
000984C4 E10B                       	smpsAlterNote       $0B
000984C6 E701                       	dc.b	smpsNoAttack, $01
000984C8 E10F                       	smpsAlterNote       $0F
000984CA E701                       	dc.b	smpsNoAttack, $01
000984CC E10B                       	smpsAlterNote       $0B
000984CE E701                       	dc.b	smpsNoAttack, $01
000984D0 E105                       	smpsAlterNote       $05
000984D2 E701                       	dc.b	smpsNoAttack, $01
000984D4 E104                       	smpsAlterNote       $04
000984D6 E701                       	dc.b	smpsNoAttack, $01
000984D8 E108                       	smpsAlterNote       $08
000984DA E701                       	dc.b	smpsNoAttack, $01
000984DC E10E                       	smpsAlterNote       $0E
000984DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000984E2 E10B                       	smpsAlterNote       $0B
000984E4 E701                       	dc.b	smpsNoAttack, $01
000984E6 E105                       	smpsAlterNote       $05
000984E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000984EC E10B                       	smpsAlterNote       $0B
000984EE E701                       	dc.b	smpsNoAttack, $01
000984F0 E10E                       	smpsAlterNote       $0E
000984F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000984F6 E108                       	smpsAlterNote       $08
000984F8 E701                       	dc.b	smpsNoAttack, $01
000984FA E104                       	smpsAlterNote       $04
000984FC E701                       	dc.b	smpsNoAttack, $01
000984FE E105                       	smpsAlterNote       $05
00098500 E701                       	dc.b	smpsNoAttack, $01
00098502 E10B                       	smpsAlterNote       $0B
00098504 E701                       	dc.b	smpsNoAttack, $01
00098506 E10F                       	smpsAlterNote       $0F
00098508 E701                       	dc.b	smpsNoAttack, $01
0009850A E10B                       	smpsAlterNote       $0B
0009850C E701                       	dc.b	smpsNoAttack, $01
0009850E E108                       	smpsAlterNote       $08
00098510 E701                       	dc.b	smpsNoAttack, $01
00098512 E105                       	smpsAlterNote       $05
00098514 8001                       	dc.b	nRst, $01
00098516 E109                       	smpsAlterNote       $09
00098518 B609 8001                  	dc.b	nF4, $09, nRst, $01
0009851C E108                       	smpsAlterNote       $08
0009851E B506 8001                  	dc.b	nE4, $06, nRst, $01
00098522 E107                       	smpsAlterNote       $07
00098524 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00098528 E108                       	smpsAlterNote       $08
0009852A B502 8001                  	dc.b	nE4, $02, nRst, $01
0009852E E109                       	smpsAlterNote       $09
00098530 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00098536 E10B                       	smpsAlterNote       $0B
00098538 BA0D                       	dc.b	nA4, $0D
0009853A E108                       	smpsAlterNote       $08
0009853C E701                       	dc.b	smpsNoAttack, $01
0009853E E104                       	smpsAlterNote       $04
00098540 E701                       	dc.b	smpsNoAttack, $01
00098542 E108                       	smpsAlterNote       $08
00098544 E701                       	dc.b	smpsNoAttack, $01
00098546 E10E                       	smpsAlterNote       $0E
00098548 E701                       	dc.b	smpsNoAttack, $01
0009854A E10F                       	smpsAlterNote       $0F
0009854C E701                       	dc.b	smpsNoAttack, $01
0009854E E10B                       	smpsAlterNote       $0B
00098550 E701                       	dc.b	smpsNoAttack, $01
00098552 E105                       	smpsAlterNote       $05
00098554 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098558 E108                       	smpsAlterNote       $08
0009855A E701                       	dc.b	smpsNoAttack, $01
0009855C E10E                       	smpsAlterNote       $0E
0009855E E701                       	dc.b	smpsNoAttack, $01
00098560 E10F                       	smpsAlterNote       $0F
00098562 8001                       	dc.b	nRst, $01
00098564 E109                       	smpsAlterNote       $09
00098566 C20D                       	dc.b	nF5, $0D
00098568 E103                       	smpsAlterNote       $03
0009856A E701                       	dc.b	smpsNoAttack, $01
0009856C E102                       	smpsAlterNote       $02
0009856E E701                       	dc.b	smpsNoAttack, $01
00098570 E106                       	smpsAlterNote       $06
00098572 E701                       	dc.b	smpsNoAttack, $01
00098574 E10C                       	smpsAlterNote       $0C
00098576 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009857A E109                       	smpsAlterNote       $09
0009857C E701                       	dc.b	smpsNoAttack, $01
0009857E E103                       	smpsAlterNote       $03
00098580 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098584 E109                       	smpsAlterNote       $09
00098586 E701                       	dc.b	smpsNoAttack, $01
00098588 E10C                       	smpsAlterNote       $0C
0009858A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009858E E106                       	smpsAlterNote       $06
00098590 E701                       	dc.b	smpsNoAttack, $01
00098592 E102                       	smpsAlterNote       $02
00098594 E701                       	dc.b	smpsNoAttack, $01
00098596 E103                       	smpsAlterNote       $03
00098598 E701                       	dc.b	smpsNoAttack, $01
0009859A E109                       	smpsAlterNote       $09
0009859C E701                       	dc.b	smpsNoAttack, $01
0009859E E10D                       	smpsAlterNote       $0D
000985A0 E701                       	dc.b	smpsNoAttack, $01
000985A2 E109                       	smpsAlterNote       $09
000985A4 E701                       	dc.b	smpsNoAttack, $01
000985A6 E106                       	smpsAlterNote       $06
000985A8 E701                       	dc.b	smpsNoAttack, $01
000985AA E102                       	smpsAlterNote       $02
000985AC E701                       	dc.b	smpsNoAttack, $01
000985AE E106                       	smpsAlterNote       $06
000985B0 E701                       	dc.b	smpsNoAttack, $01
000985B2 E10C                       	smpsAlterNote       $0C
000985B4 E701                       	dc.b	smpsNoAttack, $01
000985B6 E10D                       	smpsAlterNote       $0D
000985B8 E701                       	dc.b	smpsNoAttack, $01
000985BA E109                       	smpsAlterNote       $09
000985BC E701                       	dc.b	smpsNoAttack, $01
000985BE E103                       	smpsAlterNote       $03
000985C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000985C4 E106                       	smpsAlterNote       $06
000985C6 E701                       	dc.b	smpsNoAttack, $01
000985C8 E10C                       	smpsAlterNote       $0C
000985CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000985CE E106                       	smpsAlterNote       $06
000985D0 E701                       	dc.b	smpsNoAttack, $01
000985D2 E103                       	smpsAlterNote       $03
000985D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000985D8 E109                       	smpsAlterNote       $09
000985DA E701                       	dc.b	smpsNoAttack, $01
000985DC E10D                       	smpsAlterNote       $0D
000985DE E701                       	dc.b	smpsNoAttack, $01
000985E0 E10C                       	smpsAlterNote       $0C
000985E2 E701                       	dc.b	smpsNoAttack, $01
000985E4 E106                       	smpsAlterNote       $06
000985E6 E701                       	dc.b	smpsNoAttack, $01
000985E8 E102                       	smpsAlterNote       $02
000985EA E701                       	dc.b	smpsNoAttack, $01
000985EC E106                       	smpsAlterNote       $06
000985EE E701                       	dc.b	smpsNoAttack, $01
000985F0 E109                       	smpsAlterNote       $09
000985F2 E701                       	dc.b	smpsNoAttack, $01
000985F4 E10D                       	smpsAlterNote       $0D
000985F6 E701                       	dc.b	smpsNoAttack, $01
000985F8 E109                       	smpsAlterNote       $09
000985FA E701                       	dc.b	smpsNoAttack, $01
000985FC E103                       	smpsAlterNote       $03
000985FE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00098602 E109                       	smpsAlterNote       $09
00098604 C206                       	dc.b	nF5, $06
00098606 E108                       	smpsAlterNote       $08
00098608 C10E                       	dc.b	nE5, $0E
0009860A E102                       	smpsAlterNote       $02
0009860C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098610 E108                       	smpsAlterNote       $08
00098612 E701                       	dc.b	smpsNoAttack, $01
00098614 E10B                       	smpsAlterNote       $0B
00098616 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009861A E105                       	smpsAlterNote       $05
0009861C E701                       	dc.b	smpsNoAttack, $01
0009861E E101                       	smpsAlterNote       $01
00098620 E701                       	dc.b	smpsNoAttack, $01
00098622 E102                       	smpsAlterNote       $02
00098624 E701                       	dc.b	smpsNoAttack, $01
00098626 E108                       	smpsAlterNote       $08
00098628 E701                       	dc.b	smpsNoAttack, $01
0009862A E10C                       	smpsAlterNote       $0C
0009862C E701                       	dc.b	smpsNoAttack, $01
0009862E E107                       	smpsAlterNote       $07
00098630 BF0E                       	dc.b	nD5, $0E
00098632 E101                       	smpsAlterNote       $01
00098634 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098638 E107                       	smpsAlterNote       $07
0009863A E701                       	dc.b	smpsNoAttack, $01
0009863C E10A                       	smpsAlterNote       $0A
0009863E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098642 E104                       	smpsAlterNote       $04
00098644 E701                       	dc.b	smpsNoAttack, $01
00098646 E100                       	smpsAlterNote       $00
00098648 E701                       	dc.b	smpsNoAttack, $01
0009864A E104                       	smpsAlterNote       $04
0009864C E701                       	dc.b	smpsNoAttack, $01
0009864E E107                       	smpsAlterNote       $07
00098650 E701                       	dc.b	smpsNoAttack, $01
00098652 E10B                       	smpsAlterNote       $0B
00098654 E701                       	dc.b	smpsNoAttack, $01
00098656 E107                       	smpsAlterNote       $07
00098658 E701                       	dc.b	smpsNoAttack, $01
0009865A E101                       	smpsAlterNote       $01
0009865C E701                       	dc.b	smpsNoAttack, $01
0009865E E100                       	smpsAlterNote       $00
00098660 E701                       	dc.b	smpsNoAttack, $01
00098662 E104                       	smpsAlterNote       $04
00098664 E701                       	dc.b	smpsNoAttack, $01
00098666 E10A                       	smpsAlterNote       $0A
00098668 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009866C E107                       	smpsAlterNote       $07
0009866E E701                       	dc.b	smpsNoAttack, $01
00098670 E101                       	smpsAlterNote       $01
00098672 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098676 E107                       	smpsAlterNote       $07
00098678 E701                       	dc.b	smpsNoAttack, $01
0009867A E10A                       	smpsAlterNote       $0A
0009867C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098680 E104                       	smpsAlterNote       $04
00098682 E701                       	dc.b	smpsNoAttack, $01
00098684 E100                       	smpsAlterNote       $00
00098686 E701                       	dc.b	smpsNoAttack, $01
00098688 E101                       	smpsAlterNote       $01
0009868A E701                       	dc.b	smpsNoAttack, $01
0009868C E107                       	smpsAlterNote       $07
0009868E E701                       	dc.b	smpsNoAttack, $01
00098690 E10B                       	smpsAlterNote       $0B
00098692 E701                       	dc.b	smpsNoAttack, $01
00098694 E107                       	smpsAlterNote       $07
00098696 E701                       	dc.b	smpsNoAttack, $01
00098698 E104                       	smpsAlterNote       $04
0009869A E701                       	dc.b	smpsNoAttack, $01
0009869C E100                       	smpsAlterNote       $00
0009869E E701                       	dc.b	smpsNoAttack, $01
000986A0 E104                       	smpsAlterNote       $04
000986A2 E701                       	dc.b	smpsNoAttack, $01
000986A4 E10A                       	smpsAlterNote       $0A
000986A6 E701                       	dc.b	smpsNoAttack, $01
000986A8 E10B                       	smpsAlterNote       $0B
000986AA E701                       	dc.b	smpsNoAttack, $01
000986AC E107                       	smpsAlterNote       $07
000986AE E701                       	dc.b	smpsNoAttack, $01
000986B0 E101                       	smpsAlterNote       $01
000986B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000986B6 E104                       	smpsAlterNote       $04
000986B8 E701                       	dc.b	smpsNoAttack, $01
000986BA E10A                       	smpsAlterNote       $0A
000986BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000986C0 E104                       	smpsAlterNote       $04
000986C2 E701                       	dc.b	smpsNoAttack, $01
000986C4 E101                       	smpsAlterNote       $01
000986C6 E701                       	dc.b	smpsNoAttack, $01
000986CA E107                       	smpsAlterNote       $07
000986CC E6FF                       	smpsAlterVol        $FF
000986CE BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
000986DA 8004                       	dc.b	nRst, $04
000986DE E109                       	smpsAlterNote       $09
000986E0 E602                       	smpsAlterVol        $02
000986E2 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
000986E8 E108                       	smpsAlterNote       $08
000986EA B502 8001                  	dc.b	nE4, $02, nRst, $01
000986EE E109                       	smpsAlterNote       $09
000986F0 B60D                       	dc.b	nF4, $0D
000986F2 E106                       	smpsAlterNote       $06
000986F4 E701                       	dc.b	smpsNoAttack, $01
000986F6 E102                       	smpsAlterNote       $02
000986F8 E701                       	dc.b	smpsNoAttack, $01
000986FA E106                       	smpsAlterNote       $06
000986FC E701                       	dc.b	smpsNoAttack, $01
000986FE E109                       	smpsAlterNote       $09
00098700 E701                       	dc.b	smpsNoAttack, $01
00098702 E10D                       	smpsAlterNote       $0D
00098704 E701                       	dc.b	smpsNoAttack, $01
00098706 E109                       	smpsAlterNote       $09
00098708 E701                       	dc.b	smpsNoAttack, $01
0009870A E103                       	smpsAlterNote       $03
0009870C E701                       	dc.b	smpsNoAttack, $01
0009870E E102                       	smpsAlterNote       $02
00098710 E701                       	dc.b	smpsNoAttack, $01
00098712 E106                       	smpsAlterNote       $06
00098714 E701                       	dc.b	smpsNoAttack, $01
00098716 E10C                       	smpsAlterNote       $0C
00098718 E701                       	dc.b	smpsNoAttack, $01
0009871A E10D                       	smpsAlterNote       $0D
0009871C 8001                       	dc.b	nRst, $01
0009871E E109                       	smpsAlterNote       $09
00098720 B80D                       	dc.b	nG4, $0D
00098722 E106                       	smpsAlterNote       $06
00098724 E701                       	dc.b	smpsNoAttack, $01
00098726 E102                       	smpsAlterNote       $02
00098728 E701                       	dc.b	smpsNoAttack, $01
0009872A E106                       	smpsAlterNote       $06
0009872C E701                       	dc.b	smpsNoAttack, $01
0009872E E10C                       	smpsAlterNote       $0C
00098730 E701                       	dc.b	smpsNoAttack, $01
00098732 E10D                       	smpsAlterNote       $0D
00098734 E701                       	dc.b	smpsNoAttack, $01
00098736 E109                       	smpsAlterNote       $09
00098738 E701                       	dc.b	smpsNoAttack, $01
0009873A E103                       	smpsAlterNote       $03
0009873C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098740 E106                       	smpsAlterNote       $06
00098742 E701                       	dc.b	smpsNoAttack, $01
00098744 E10C                       	smpsAlterNote       $0C
00098746 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009874A E106                       	smpsAlterNote       $06
0009874C E701                       	dc.b	smpsNoAttack, $01
0009874E E103                       	smpsAlterNote       $03
00098750 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098754 E109                       	smpsAlterNote       $09
00098756 E701                       	dc.b	smpsNoAttack, $01
00098758 E10D                       	smpsAlterNote       $0D
0009875A E701                       	dc.b	smpsNoAttack, $01
0009875C E10C                       	smpsAlterNote       $0C
0009875E E701                       	dc.b	smpsNoAttack, $01
00098760 E109                       	smpsAlterNote       $09
00098762 8001                       	dc.b	nRst, $01
00098764 E10B                       	smpsAlterNote       $0B
00098766 BA03                       	dc.b	nA4, $03
00098768 E10C                       	smpsAlterNote       $0C
0009876A BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0009876E E10B                       	smpsAlterNote       $0B
00098770 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00098776 E10C                       	smpsAlterNote       $0C
00098778 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0009877C E10B                       	smpsAlterNote       $0B
0009877E C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00098784 E10C                       	smpsAlterNote       $0C
00098786 D303                       	dc.b	nBb6, $03
00098788 E10B                       	smpsAlterNote       $0B
0009878A D20D                       	dc.b	nA6, $0D
0009878C E108                       	smpsAlterNote       $08
0009878E E701                       	dc.b	smpsNoAttack, $01
00098790 E104                       	smpsAlterNote       $04
00098792 E701                       	dc.b	smpsNoAttack, $01
00098794 E105                       	smpsAlterNote       $05
00098796 E701                       	dc.b	smpsNoAttack, $01
00098798 E10B                       	smpsAlterNote       $0B
0009879A E701                       	dc.b	smpsNoAttack, $01
0009879C E10F                       	smpsAlterNote       $0F
0009879E E701                       	dc.b	smpsNoAttack, $01
000987A0 E10B                       	smpsAlterNote       $0B
000987A2 E701                       	dc.b	smpsNoAttack, $01
000987A4 E108                       	smpsAlterNote       $08
000987A6 E701                       	dc.b	smpsNoAttack, $01
000987A8 E104                       	smpsAlterNote       $04
000987AA E701                       	dc.b	smpsNoAttack, $01
000987AC E108                       	smpsAlterNote       $08
000987AE E701                       	dc.b	smpsNoAttack, $01
000987B0 E10E                       	smpsAlterNote       $0E
000987B2 E701                       	dc.b	smpsNoAttack, $01
000987B4 E10F                       	smpsAlterNote       $0F
000987B6 E701                       	dc.b	smpsNoAttack, $01
000987B8 E10B                       	smpsAlterNote       $0B
000987BA E701                       	dc.b	smpsNoAttack, $01
000987BC E105                       	smpsAlterNote       $05
000987BE E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
000987C4 E109                       	smpsAlterNote       $09
000987C6 CE07                       	dc.b	nF6, $07
000987C8 E108                       	smpsAlterNote       $08
000987CA CD06 8001                  	dc.b	nE6, $06, nRst, $01
000987CE E109                       	smpsAlterNote       $09
000987D0 CE03 8001                  	dc.b	nF6, $03, nRst, $01
000987D4 E108                       	smpsAlterNote       $08
000987D6 CC0D                       	dc.b	nEb6, $0D
000987D8 E102                       	smpsAlterNote       $02
000987DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000987DE E108                       	smpsAlterNote       $08
000987E0 E701                       	dc.b	smpsNoAttack, $01
000987E2 E10B                       	smpsAlterNote       $0B
000987E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000987E8 E105                       	smpsAlterNote       $05
000987EA E701                       	dc.b	smpsNoAttack, $01
000987EC E101                       	smpsAlterNote       $01
000987EE E701                       	dc.b	smpsNoAttack, $01
000987F0 E102                       	smpsAlterNote       $02
000987F2 E701                       	dc.b	smpsNoAttack, $01
000987F4 E108                       	smpsAlterNote       $08
000987F6 E701                       	dc.b	smpsNoAttack, $01
000987F8 E10C                       	smpsAlterNote       $0C
000987FA E701                       	dc.b	smpsNoAttack, $01
000987FC E108                       	smpsAlterNote       $08
000987FE E701                       	dc.b	smpsNoAttack, $01
00098800 E105                       	smpsAlterNote       $05
00098802 E701                       	dc.b	smpsNoAttack, $01
00098804 E101                       	smpsAlterNote       $01
00098806 E701                       	dc.b	smpsNoAttack, $01
00098808 E105                       	smpsAlterNote       $05
0009880A E701                       	dc.b	smpsNoAttack, $01
0009880C E10B                       	smpsAlterNote       $0B
0009880E E701                       	dc.b	smpsNoAttack, $01
00098810 E10C                       	smpsAlterNote       $0C
00098812 E701                       	dc.b	smpsNoAttack, $01
00098814 E108                       	smpsAlterNote       $08
00098816 E701                       	dc.b	smpsNoAttack, $01
00098818 E107                       	smpsAlterNote       $07
0009881A CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
00098824 E10B                       	smpsAlterNote       $0B
00098826 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00098830 E109                       	smpsAlterNote       $09
00098832 C203                       	dc.b	nF5, $03
00098834 E108                       	smpsAlterNote       $08
00098836 C103 8001                  	dc.b	nE5, $03, nRst, $01
0009883A E109                       	smpsAlterNote       $09
0009883C C20D                       	dc.b	nF5, $0D
0009883E E108                       	smpsAlterNote       $08
00098840 C10E                       	dc.b	nE5, $0E
00098842 E107                       	smpsAlterNote       $07
00098844 BF0D                       	dc.b	nD5, $0D
00098846 E104                       	smpsAlterNote       $04
00098848 E701                       	dc.b	smpsNoAttack, $01
0009884A E100                       	smpsAlterNote       $00
0009884C E701                       	dc.b	smpsNoAttack, $01
0009884E E104                       	smpsAlterNote       $04
00098850 E701                       	dc.b	smpsNoAttack, $01
00098852 E107                       	smpsAlterNote       $07
00098854 E701                       	dc.b	smpsNoAttack, $01
00098856 E10B                       	smpsAlterNote       $0B
00098858 E701                       	dc.b	smpsNoAttack, $01
0009885A E107                       	smpsAlterNote       $07
0009885C E701                       	dc.b	smpsNoAttack, $01
0009885E E101                       	smpsAlterNote       $01
00098860 E701                       	dc.b	smpsNoAttack, $01
00098862 E100                       	smpsAlterNote       $00
00098864 E701                       	dc.b	smpsNoAttack, $01
00098866 E104                       	smpsAlterNote       $04
00098868 E701                       	dc.b	smpsNoAttack, $01
0009886A E10A                       	smpsAlterNote       $0A
0009886C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098870 E107                       	smpsAlterNote       $07
00098872 E701                       	dc.b	smpsNoAttack, $01
00098874 E101                       	smpsAlterNote       $01
00098876 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009887A E107                       	smpsAlterNote       $07
0009887C E701                       	dc.b	smpsNoAttack, $01
0009887E E10A                       	smpsAlterNote       $0A
00098880 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098884 E104                       	smpsAlterNote       $04
00098886 E701                       	dc.b	smpsNoAttack, $01
00098888 E100                       	smpsAlterNote       $00
0009888A E701                       	dc.b	smpsNoAttack, $01
0009888C E101                       	smpsAlterNote       $01
0009888E E701                       	dc.b	smpsNoAttack, $01
00098890 E107                       	smpsAlterNote       $07
00098892 E701                       	dc.b	smpsNoAttack, $01
00098894 E10B                       	smpsAlterNote       $0B
00098896 E701                       	dc.b	smpsNoAttack, $01
00098898 E107                       	smpsAlterNote       $07
0009889A E701                       	dc.b	smpsNoAttack, $01
0009889C E104                       	smpsAlterNote       $04
0009889E E701                       	dc.b	smpsNoAttack, $01
000988A0 E100                       	smpsAlterNote       $00
000988A2 E701                       	dc.b	smpsNoAttack, $01
000988A4 E104                       	smpsAlterNote       $04
000988A6 E701                       	dc.b	smpsNoAttack, $01
000988A8 E10A                       	smpsAlterNote       $0A
000988AA E701                       	dc.b	smpsNoAttack, $01
000988AC E10B                       	smpsAlterNote       $0B
000988AE E701                       	dc.b	smpsNoAttack, $01
000988B0 E107                       	smpsAlterNote       $07
000988B2 E701                       	dc.b	smpsNoAttack, $01
000988B4 E101                       	smpsAlterNote       $01
000988B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000988BA E104                       	smpsAlterNote       $04
000988BC E701                       	dc.b	smpsNoAttack, $01
000988BE E10A                       	smpsAlterNote       $0A
000988C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000988C4 E104                       	smpsAlterNote       $04
000988C6 E701                       	dc.b	smpsNoAttack, $01
000988C8 E101                       	smpsAlterNote       $01
000988CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000988CE E107                       	smpsAlterNote       $07
000988D0 E701                       	dc.b	smpsNoAttack, $01
000988D2 E10B                       	smpsAlterNote       $0B
000988D4 E701                       	dc.b	smpsNoAttack, $01
000988D6 E10A                       	smpsAlterNote       $0A
000988D8 E701                       	dc.b	smpsNoAttack, $01
000988DA E104                       	smpsAlterNote       $04
000988DC E701                       	dc.b	smpsNoAttack, $01
000988DE E100                       	smpsAlterNote       $00
000988E0 E701                       	dc.b	smpsNoAttack, $01
000988E2 E104                       	smpsAlterNote       $04
000988E4 E701                       	dc.b	smpsNoAttack, $01
000988E6 E107                       	smpsAlterNote       $07
000988E8 E701                       	dc.b	smpsNoAttack, $01
000988EA E10B                       	smpsAlterNote       $0B
000988EC E701                       	dc.b	smpsNoAttack, $01
000988EE E107                       	smpsAlterNote       $07
000988F0 E701                       	dc.b	smpsNoAttack, $01
000988F2 E101                       	smpsAlterNote       $01
000988F4 E701                       	dc.b	smpsNoAttack, $01
000988F6 E100                       	smpsAlterNote       $00
000988F8 E701                       	dc.b	smpsNoAttack, $01
000988FA E104                       	smpsAlterNote       $04
000988FC E701                       	dc.b	smpsNoAttack, $01
000988FE E10A                       	smpsAlterNote       $0A
00098900 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098904 E107                       	smpsAlterNote       $07
00098906 E701                       	dc.b	smpsNoAttack, $01
00098908 E101                       	smpsAlterNote       $01
0009890A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009890E E107                       	smpsAlterNote       $07
00098910 E701                       	dc.b	smpsNoAttack, $01
00098912 E10A                       	smpsAlterNote       $0A
00098914 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098918 E104                       	smpsAlterNote       $04
0009891A E701                       	dc.b	smpsNoAttack, $01
0009891C E100                       	smpsAlterNote       $00
0009891E E701                       	dc.b	smpsNoAttack, $01
00098920 E101                       	smpsAlterNote       $01
00098922 E701                       	dc.b	smpsNoAttack, $01
00098924 E107                       	smpsAlterNote       $07
00098926 E701                       	dc.b	smpsNoAttack, $01
00098928 E10B                       	smpsAlterNote       $0B
0009892A E701                       	dc.b	smpsNoAttack, $01
0009892C E107                       	smpsAlterNote       $07
0009892E E701                       	dc.b	smpsNoAttack, $01
00098930 E104                       	smpsAlterNote       $04
00098932 E701                       	dc.b	smpsNoAttack, $01
00098934 E100                       	smpsAlterNote       $00
00098936 E701                       	dc.b	smpsNoAttack, $01
00098938 E101                       	smpsAlterNote       $01
0009893A 8001                       	dc.b	nRst, $01
0009893C E109                       	smpsAlterNote       $09
0009893E C20D                       	dc.b	nF5, $0D
00098940 E106                       	smpsAlterNote       $06
00098942 E701                       	dc.b	smpsNoAttack, $01
00098944 E102                       	smpsAlterNote       $02
00098946 E701                       	dc.b	smpsNoAttack, $01
00098948 E106                       	smpsAlterNote       $06
0009894A E701                       	dc.b	smpsNoAttack, $01
0009894C E10C                       	smpsAlterNote       $0C
0009894E E701                       	dc.b	smpsNoAttack, $01
00098950 E10D                       	smpsAlterNote       $0D
00098952 E701                       	dc.b	smpsNoAttack, $01
00098954 E109                       	smpsAlterNote       $09
00098956 E701                       	dc.b	smpsNoAttack, $01
00098958 E103                       	smpsAlterNote       $03
0009895A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009895E E106                       	smpsAlterNote       $06
00098960 E701                       	dc.b	smpsNoAttack, $01
00098962 E10C                       	smpsAlterNote       $0C
00098964 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098968 E106                       	smpsAlterNote       $06
0009896A E701                       	dc.b	smpsNoAttack, $01
0009896C E103                       	smpsAlterNote       $03
0009896E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098972 E109                       	smpsAlterNote       $09
00098974 E701                       	dc.b	smpsNoAttack, $01
00098976 E10D                       	smpsAlterNote       $0D
00098978 E701                       	dc.b	smpsNoAttack, $01
0009897A E10C                       	smpsAlterNote       $0C
0009897C E701                       	dc.b	smpsNoAttack, $01
0009897E E109                       	smpsAlterNote       $09
00098980 8001                       	dc.b	nRst, $01
00098982 E108                       	smpsAlterNote       $08
00098984 C10D                       	dc.b	nE5, $0D
00098986 E109                       	smpsAlterNote       $09
00098988 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0009898C E108                       	smpsAlterNote       $08
0009898E C10D                       	dc.b	nE5, $0D
00098990 E102                       	smpsAlterNote       $02
00098992 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098996 E105                       	smpsAlterNote       $05
00098998 E701                       	dc.b	smpsNoAttack, $01
0009899A E108                       	smpsAlterNote       $08
0009899C 8001                       	dc.b	nRst, $01
0009899E E107                       	smpsAlterNote       $07
000989A0 BF0D                       	dc.b	nD5, $0D
000989A2 E108                       	smpsAlterNote       $08
000989A4 C107                       	dc.b	nE5, $07
000989A6 E109                       	smpsAlterNote       $09
000989A8 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
000989AE E10B                       	smpsAlterNote       $0B
000989B0 C603                       	dc.b	nA5, $03
000989B2 E10C                       	smpsAlterNote       $0C
000989B4 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
000989BA E10B                       	smpsAlterNote       $0B
000989BC C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
000989C2 E109                       	smpsAlterNote       $09
000989C4 D003                       	dc.b	nG6, $03
000989C6 E108                       	smpsAlterNote       $08
000989C8 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000989CC E10B                       	smpsAlterNote       $0B
000989CE C601 8001                  	dc.b	nA5, $01, nRst, $01
000989D2 E108                       	smpsAlterNote       $08
000989D4 C102                       	dc.b	nE5, $02
000989D8 E10C                       	smpsAlterNote       $0C
000989DA E6FB                       	smpsAlterVol        $FB
000989DC A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
000989E8 8001                       	dc.b	nRst, $01
000989EA E10B                       	smpsAlterNote       $0B
000989EC A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000989F4 E107                       	smpsAlterNote       $07
000989F6 A706 8001                  	dc.b	nD3, $06, nRst, $01
000989FA E10B                       	smpsAlterNote       $0B
000989FC A203                       	dc.b	nA2, $03
000989FE E109                       	smpsAlterNote       $09
00098A00 AA03 8001                  	dc.b	nF3, $03, nRst, $01
00098A04 E108                       	smpsAlterNote       $08
00098A06 A906                       	dc.b	nE3, $06
00098A08 E107                       	smpsAlterNote       $07
00098A0A A703 8001                  	dc.b	nD3, $03, nRst, $01
00098A0E E106                       	smpsAlterNote       $06
00098A10 A503                       	dc.b	nC3, $03
00098A12 E10C                       	smpsAlterNote       $0C
00098A14 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00098A18 E10B                       	smpsAlterNote       $0B
00098A1A A203 8004                  	dc.b	nA2, $03, nRst, $04
00098A1E E11B                       	smpsAlterNote       $1B
00098A20 C401                       	dc.b	nG5, $01
00098A22 E1F4                       	smpsAlterNote       $F4
00098A24 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00098A27 E106                       	smpsAlterNote       $06
00098A29 E701                       	dc.b	smpsNoAttack, $01
00098A2B E10F                       	smpsAlterNote       $0F
00098A2D E701                       	dc.b	smpsNoAttack, $01
00098A2F E1E4                       	smpsAlterNote       $E4
00098A31 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00098A34 E1F6                       	smpsAlterNote       $F6
00098A36 E701                       	dc.b	smpsNoAttack, $01
00098A38 E108                       	smpsAlterNote       $08
00098A3A E701                       	dc.b	smpsNoAttack, $01
00098A3C E10B                       	smpsAlterNote       $0B
00098A3E E706                       	dc.b	smpsNoAttack, $06
00098A40 E105                       	smpsAlterNote       $05
00098A42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098A46 E108                       	smpsAlterNote       $08
00098A48 E701                       	dc.b	smpsNoAttack, $01
00098A4A E10E                       	smpsAlterNote       $0E
00098A4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098A50 E108                       	smpsAlterNote       $08
00098A52 E701                       	dc.b	smpsNoAttack, $01
00098A54 E105                       	smpsAlterNote       $05
00098A56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098A5A E10B                       	smpsAlterNote       $0B
00098A5C E701                       	dc.b	smpsNoAttack, $01
00098A5E E10F                       	smpsAlterNote       $0F
00098A60 E701                       	dc.b	smpsNoAttack, $01
00098A62 E10E                       	smpsAlterNote       $0E
00098A64 E701                       	dc.b	smpsNoAttack, $01
00098A66 E108                       	smpsAlterNote       $08
00098A68 E701                       	dc.b	smpsNoAttack, $01
00098A6A E104                       	smpsAlterNote       $04
00098A6C E701                       	dc.b	smpsNoAttack, $01
00098A6E E108                       	smpsAlterNote       $08
00098A70 E701                       	dc.b	smpsNoAttack, $01
00098A72 E10B                       	smpsAlterNote       $0B
00098A74 E701                       	dc.b	smpsNoAttack, $01
00098A76 E10F                       	smpsAlterNote       $0F
00098A78 E701                       	dc.b	smpsNoAttack, $01
00098A7A E10B                       	smpsAlterNote       $0B
00098A7C E701                       	dc.b	smpsNoAttack, $01
00098A7E E105                       	smpsAlterNote       $05
00098A80 E701                       	dc.b	smpsNoAttack, $01
00098A82 E104                       	smpsAlterNote       $04
00098A84 E701                       	dc.b	smpsNoAttack, $01
00098A86 E108                       	smpsAlterNote       $08
00098A88 E701                       	dc.b	smpsNoAttack, $01
00098A8A E10E                       	smpsAlterNote       $0E
00098A8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098A90 E10B                       	smpsAlterNote       $0B
00098A92 E701                       	dc.b	smpsNoAttack, $01
00098A94 E105                       	smpsAlterNote       $05
00098A96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098A9A E10B                       	smpsAlterNote       $0B
00098A9C E701                       	dc.b	smpsNoAttack, $01
00098A9E E10E                       	smpsAlterNote       $0E
00098AA0 E701                       	dc.b	smpsNoAttack, $01
00098AA2 E10F                       	smpsAlterNote       $0F
00098AA4 8001                       	dc.b	nRst, $01
00098AA6 E109                       	smpsAlterNote       $09
00098AA8 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00098AAE E108                       	smpsAlterNote       $08
00098AB0 C101 8001                  	dc.b	nE5, $01, nRst, $01
00098AB4 E109                       	smpsAlterNote       $09
00098AB6 C202                       	dc.b	nF5, $02
00098AB8 E108                       	smpsAlterNote       $08
00098ABA C102                       	dc.b	nE5, $02
00098ABC E107                       	smpsAlterNote       $07
00098ABE BF02 8001                  	dc.b	nD5, $02, nRst, $01
00098AC2 E108                       	smpsAlterNote       $08
00098AC4 C101 8001                  	dc.b	nE5, $01, nRst, $01
00098AC8 E107                       	smpsAlterNote       $07
00098ACA BF02                       	dc.b	nD5, $02
00098ACC E106                       	smpsAlterNote       $06
00098ACE BD02 8001                  	dc.b	nC5, $02, nRst, $01
00098AD2 E107                       	smpsAlterNote       $07
00098AD4 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00098AD8 E106                       	smpsAlterNote       $06
00098ADA BD02                       	dc.b	nC5, $02
00098ADC E10C                       	smpsAlterNote       $0C
00098ADE BB02                       	dc.b	nBb4, $02
00098AE0 E106                       	smpsAlterNote       $06
00098AE2 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00098AE6 E10C                       	smpsAlterNote       $0C
00098AE8 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00098AEC E10B                       	smpsAlterNote       $0B
00098AEE BA02                       	dc.b	nA4, $02
00098AF0 E10C                       	smpsAlterNote       $0C
00098AF2 BB02                       	dc.b	nBb4, $02
00098AF4 E10B                       	smpsAlterNote       $0B
00098AF6 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00098B00 E108                       	smpsAlterNote       $08
00098B02 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
00098B0A E107                       	smpsAlterNote       $07
00098B0C BE02                       	dc.b	nCs5, $02
00098B0E E10B                       	smpsAlterNote       $0B
00098B10 BA02                       	dc.b	nA4, $02
00098B12 E109                       	smpsAlterNote       $09
00098B14 B802 8001                  	dc.b	nG4, $02, nRst, $01
00098B18 E108                       	smpsAlterNote       $08
00098B1A B501 8001                  	dc.b	nE4, $01, nRst, $01
00098B1E E10B                       	smpsAlterNote       $0B
00098B20 AE02                       	dc.b	nA3, $02
00098B22 E10C                       	smpsAlterNote       $0C
00098B24 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
00098B30 E10B                       	smpsAlterNote       $0B
00098B32 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00098B3A E107                       	smpsAlterNote       $07
00098B3C A706 8001                  	dc.b	nD3, $06, nRst, $01
00098B40 E10B                       	smpsAlterNote       $0B
00098B42 A203                       	dc.b	nA2, $03
00098B44 E109                       	smpsAlterNote       $09
00098B46 AA03 8001                  	dc.b	nF3, $03, nRst, $01
00098B4A E108                       	smpsAlterNote       $08
00098B4C A906 8001                  	dc.b	nE3, $06, nRst, $01
00098B50 E107                       	smpsAlterNote       $07
00098B52 A702 8001                  	dc.b	nD3, $02, nRst, $01
00098B56 E106                       	smpsAlterNote       $06
00098B58 A503                       	dc.b	nC3, $03
00098B5A E10C                       	smpsAlterNote       $0C
00098B5C A303 8001                  	dc.b	nBb2, $03, nRst, $01
00098B62 E107                       	smpsAlterNote       $07
00098B64 B20D                       	dc.b	nCs4, $0D
00098B66 E104                       	smpsAlterNote       $04
00098B68 E701                       	dc.b	smpsNoAttack, $01
00098B6A E100                       	smpsAlterNote       $00
00098B6C E701                       	dc.b	smpsNoAttack, $01
00098B6E E104                       	smpsAlterNote       $04
00098B70 E701                       	dc.b	smpsNoAttack, $01
00098B72 E10A                       	smpsAlterNote       $0A
00098B74 E701                       	dc.b	smpsNoAttack, $01
00098B76 E10B                       	smpsAlterNote       $0B
00098B78 E701                       	dc.b	smpsNoAttack, $01
00098B7A E107                       	smpsAlterNote       $07
00098B7C E701                       	dc.b	smpsNoAttack, $01
00098B7E E101                       	smpsAlterNote       $01
00098B80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098B84 E104                       	smpsAlterNote       $04
00098B86 E701                       	dc.b	smpsNoAttack, $01
00098B88 E10A                       	smpsAlterNote       $0A
00098B8A E701                       	dc.b	smpsNoAttack, $01
00098B8C E10B                       	smpsAlterNote       $0B
00098B8E 8001                       	dc.b	nRst, $01
00098B90 E107                       	smpsAlterNote       $07
00098B92 B30D                       	dc.b	nD4, $0D
00098B94 E104                       	smpsAlterNote       $04
00098B96 E701                       	dc.b	smpsNoAttack, $01
00098B98 E100                       	smpsAlterNote       $00
00098B9A E701                       	dc.b	smpsNoAttack, $01
00098B9C E104                       	smpsAlterNote       $04
00098B9E E701                       	dc.b	smpsNoAttack, $01
00098BA0 E10A                       	smpsAlterNote       $0A
00098BA2 E701                       	dc.b	smpsNoAttack, $01
00098BA4 E10B                       	smpsAlterNote       $0B
00098BA6 E701                       	dc.b	smpsNoAttack, $01
00098BA8 E107                       	smpsAlterNote       $07
00098BAA E701                       	dc.b	smpsNoAttack, $01
00098BAC E101                       	smpsAlterNote       $01
00098BAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BB2 E104                       	smpsAlterNote       $04
00098BB4 E701                       	dc.b	smpsNoAttack, $01
00098BB6 E10A                       	smpsAlterNote       $0A
00098BB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BBC E104                       	smpsAlterNote       $04
00098BBE E701                       	dc.b	smpsNoAttack, $01
00098BC0 E101                       	smpsAlterNote       $01
00098BC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BC6 E107                       	smpsAlterNote       $07
00098BC8 E701                       	dc.b	smpsNoAttack, $01
00098BCA E10B                       	smpsAlterNote       $0B
00098BCC E701                       	dc.b	smpsNoAttack, $01
00098BCE E10A                       	smpsAlterNote       $0A
00098BD0 E701                       	dc.b	smpsNoAttack, $01
00098BD2 E107                       	smpsAlterNote       $07
00098BD4 8001                       	dc.b	nRst, $01
00098BD6 E108                       	smpsAlterNote       $08
00098BD8 B50D                       	dc.b	nE4, $0D
00098BDA E102                       	smpsAlterNote       $02
00098BDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BE0 E105                       	smpsAlterNote       $05
00098BE2 E701                       	dc.b	smpsNoAttack, $01
00098BE4 E10B                       	smpsAlterNote       $0B
00098BE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BEA E105                       	smpsAlterNote       $05
00098BEC E701                       	dc.b	smpsNoAttack, $01
00098BEE E102                       	smpsAlterNote       $02
00098BF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BF4 E108                       	smpsAlterNote       $08
00098BF6 E701                       	dc.b	smpsNoAttack, $01
00098BF8 E10C                       	smpsAlterNote       $0C
00098BFA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00098BFE E107                       	smpsAlterNote       $07
00098C00 B30D                       	dc.b	nD4, $0D
00098C02 E101                       	smpsAlterNote       $01
00098C04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098C08 E104                       	smpsAlterNote       $04
00098C0A E701                       	dc.b	smpsNoAttack, $01
00098C0C E10A                       	smpsAlterNote       $0A
00098C0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098C12 E104                       	smpsAlterNote       $04
00098C14 E701                       	dc.b	smpsNoAttack, $01
00098C16 E101                       	smpsAlterNote       $01
00098C18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098C1C E107                       	smpsAlterNote       $07
00098C1E E701                       	dc.b	smpsNoAttack, $01
00098C20 E10B                       	smpsAlterNote       $0B
00098C22 E701                       	dc.b	smpsNoAttack, $01
00098C24 E10A                       	smpsAlterNote       $0A
00098C26 E701                       	dc.b	smpsNoAttack, $01
00098C28 E104                       	smpsAlterNote       $04
00098C2A E701                       	dc.b	smpsNoAttack, $01
00098C2C E100                       	smpsAlterNote       $00
00098C2E E701                       	dc.b	smpsNoAttack, $01
00098C30 E104                       	smpsAlterNote       $04
00098C32 E701                       	dc.b	smpsNoAttack, $01
00098C34 E107                       	smpsAlterNote       $07
00098C36 E701                       	dc.b	smpsNoAttack, $01
00098C38 E10B                       	smpsAlterNote       $0B
00098C3A E701                       	dc.b	smpsNoAttack, $01
00098C3C E107                       	smpsAlterNote       $07
00098C3E E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
00098C42 E101                       	smpsAlterNote       $01
00098C44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098C48 E107                       	smpsAlterNote       $07
00098C4A E701                       	dc.b	smpsNoAttack, $01
00098C4C E10A                       	smpsAlterNote       $0A
00098C4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098C52 E104                       	smpsAlterNote       $04
00098C54 E701                       	dc.b	smpsNoAttack, $01
00098C56 E100                       	smpsAlterNote       $00
00098C58 E701                       	dc.b	smpsNoAttack, $01
00098C5A E101                       	smpsAlterNote       $01
00098C5C E701                       	dc.b	smpsNoAttack, $01
00098C5E E107                       	smpsAlterNote       $07
00098C60 E701                       	dc.b	smpsNoAttack, $01
00098C62 E10B                       	smpsAlterNote       $0B
00098C64 E701                       	dc.b	smpsNoAttack, $01
00098C66 E107                       	smpsAlterNote       $07
00098C68 B30E                       	dc.b	nD4, $0E
00098C6A E101                       	smpsAlterNote       $01
00098C6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098C70 E107                       	smpsAlterNote       $07
00098C72 E701                       	dc.b	smpsNoAttack, $01
00098C74 E10A                       	smpsAlterNote       $0A
00098C76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098C7A E104                       	smpsAlterNote       $04
00098C7C E701                       	dc.b	smpsNoAttack, $01
00098C7E E100                       	smpsAlterNote       $00
00098C80 E701                       	dc.b	smpsNoAttack, $01
00098C82 E101                       	smpsAlterNote       $01
00098C84 E701                       	dc.b	smpsNoAttack, $01
00098C86 E107                       	smpsAlterNote       $07
00098C88 E701                       	dc.b	smpsNoAttack, $01
00098C8A E10B                       	smpsAlterNote       $0B
00098C8C E701                       	dc.b	smpsNoAttack, $01
00098C8E E107                       	smpsAlterNote       $07
00098C90 E701                       	dc.b	smpsNoAttack, $01
00098C92 E104                       	smpsAlterNote       $04
00098C94 E701                       	dc.b	smpsNoAttack, $01
00098C96 E100                       	smpsAlterNote       $00
00098C98 E701                       	dc.b	smpsNoAttack, $01
00098C9A E104                       	smpsAlterNote       $04
00098C9C E701                       	dc.b	smpsNoAttack, $01
00098C9E E10A                       	smpsAlterNote       $0A
00098CA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098CA4 E107                       	smpsAlterNote       $07
00098CA6 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00098CAA E104                       	smpsAlterNote       $04
00098CAC E701                       	dc.b	smpsNoAttack, $01
00098CAE E100                       	smpsAlterNote       $00
00098CB0 E701                       	dc.b	smpsNoAttack, $01
00098CB2 E101                       	smpsAlterNote       $01
00098CB4 E701                       	dc.b	smpsNoAttack, $01
00098CB6 E107                       	smpsAlterNote       $07
00098CB8 E701                       	dc.b	smpsNoAttack, $01
00098CBA E10B                       	smpsAlterNote       $0B
00098CBC E701                       	dc.b	smpsNoAttack, $01
00098CBE E107                       	smpsAlterNote       $07
00098CC0 E701                       	dc.b	smpsNoAttack, $01
00098CC2 E104                       	smpsAlterNote       $04
00098CC4 E701                       	dc.b	smpsNoAttack, $01
00098CC6 E100                       	smpsAlterNote       $00
00098CC8 E701                       	dc.b	smpsNoAttack, $01
00098CCA E104                       	smpsAlterNote       $04
00098CCC E701                       	dc.b	smpsNoAttack, $01
00098CCE E10A                       	smpsAlterNote       $0A
00098CD0 E701                       	dc.b	smpsNoAttack, $01
00098CD2 E10B                       	smpsAlterNote       $0B
00098CD4 E701                       	dc.b	smpsNoAttack, $01
00098CD8 E6FF                       	smpsAlterVol        $FF
00098CDA A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
00098CE6 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
00098CEE E109                       	smpsAlterNote       $09
00098CF0 E601                       	smpsAlterVol        $01
00098CF2 B60D                       	dc.b	nF4, $0D
00098CF4 E106                       	smpsAlterNote       $06
00098CF6 E701                       	dc.b	smpsNoAttack, $01
00098CF8 E102                       	smpsAlterNote       $02
00098CFA E701                       	dc.b	smpsNoAttack, $01
00098CFC E106                       	smpsAlterNote       $06
00098CFE E701                       	dc.b	smpsNoAttack, $01
00098D00 E109                       	smpsAlterNote       $09
00098D02 E701                       	dc.b	smpsNoAttack, $01
00098D04 E10D                       	smpsAlterNote       $0D
00098D06 E701                       	dc.b	smpsNoAttack, $01
00098D08 E109                       	smpsAlterNote       $09
00098D0A E701                       	dc.b	smpsNoAttack, $01
00098D0C E103                       	smpsAlterNote       $03
00098D0E E701                       	dc.b	smpsNoAttack, $01
00098D10 E102                       	smpsAlterNote       $02
00098D12 E701                       	dc.b	smpsNoAttack, $01
00098D14 E106                       	smpsAlterNote       $06
00098D16 E701                       	dc.b	smpsNoAttack, $01
00098D18 E10C                       	smpsAlterNote       $0C
00098D1A E701                       	dc.b	smpsNoAttack, $01
00098D1C E10D                       	smpsAlterNote       $0D
00098D1E 8001                       	dc.b	nRst, $01
00098D20 E109                       	smpsAlterNote       $09
00098D22 B80D                       	dc.b	nG4, $0D
00098D24 E106                       	smpsAlterNote       $06
00098D26 E701                       	dc.b	smpsNoAttack, $01
00098D28 E102                       	smpsAlterNote       $02
00098D2A E701                       	dc.b	smpsNoAttack, $01
00098D2C E106                       	smpsAlterNote       $06
00098D2E E701                       	dc.b	smpsNoAttack, $01
00098D30 E109                       	smpsAlterNote       $09
00098D32 E701                       	dc.b	smpsNoAttack, $01
00098D34 E10D                       	smpsAlterNote       $0D
00098D36 E701                       	dc.b	smpsNoAttack, $01
00098D38 E109                       	smpsAlterNote       $09
00098D3A E701                       	dc.b	smpsNoAttack, $01
00098D3C E103                       	smpsAlterNote       $03
00098D3E E701                       	dc.b	smpsNoAttack, $01
00098D40 E102                       	smpsAlterNote       $02
00098D42 E701                       	dc.b	smpsNoAttack, $01
00098D44 E106                       	smpsAlterNote       $06
00098D46 E701                       	dc.b	smpsNoAttack, $01
00098D48 E10C                       	smpsAlterNote       $0C
00098D4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D4E E106                       	smpsAlterNote       $06
00098D50 E701                       	dc.b	smpsNoAttack, $01
00098D52 E103                       	smpsAlterNote       $03
00098D54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D58 E109                       	smpsAlterNote       $09
00098D5A E701                       	dc.b	smpsNoAttack, $01
00098D5C E10D                       	smpsAlterNote       $0D
00098D5E E701                       	dc.b	smpsNoAttack, $01
00098D60 E10C                       	smpsAlterNote       $0C
00098D62 E701                       	dc.b	smpsNoAttack, $01
00098D64 E109                       	smpsAlterNote       $09
00098D66 8001                       	dc.b	nRst, $01
00098D68 E10B                       	smpsAlterNote       $0B
00098D6A BA0D                       	dc.b	nA4, $0D
00098D6C E105                       	smpsAlterNote       $05
00098D6E E701                       	dc.b	smpsNoAttack, $01
00098D70 E104                       	smpsAlterNote       $04
00098D72 E701                       	dc.b	smpsNoAttack, $01
00098D74 E108                       	smpsAlterNote       $08
00098D76 E701                       	dc.b	smpsNoAttack, $01
00098D78 E10E                       	smpsAlterNote       $0E
00098D7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D7E E10B                       	smpsAlterNote       $0B
00098D80 E701                       	dc.b	smpsNoAttack, $01
00098D82 E105                       	smpsAlterNote       $05
00098D84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D88 E10B                       	smpsAlterNote       $0B
00098D8A E701                       	dc.b	smpsNoAttack, $01
00098D8C E10E                       	smpsAlterNote       $0E
00098D8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D92 E108                       	smpsAlterNote       $08
00098D94 E701                       	dc.b	smpsNoAttack, $01
00098D96 E104                       	smpsAlterNote       $04
00098D98 E701                       	dc.b	smpsNoAttack, $01
00098D9A E105                       	smpsAlterNote       $05
00098D9C E701                       	dc.b	smpsNoAttack, $01
00098D9E E10B                       	smpsAlterNote       $0B
00098DA0 E701                       	dc.b	smpsNoAttack, $01
00098DA2 E10F                       	smpsAlterNote       $0F
00098DA4 E701                       	dc.b	smpsNoAttack, $01
00098DA6 E10B                       	smpsAlterNote       $0B
00098DA8 E701                       	dc.b	smpsNoAttack, $01
00098DAA E108                       	smpsAlterNote       $08
00098DAC E701                       	dc.b	smpsNoAttack, $01
00098DAE E104                       	smpsAlterNote       $04
00098DB0 E701                       	dc.b	smpsNoAttack, $01
00098DB2 E108                       	smpsAlterNote       $08
00098DB4 E701                       	dc.b	smpsNoAttack, $01
00098DB6 E10E                       	smpsAlterNote       $0E
00098DB8 E701                       	dc.b	smpsNoAttack, $01
00098DBA E10F                       	smpsAlterNote       $0F
00098DBC E701                       	dc.b	smpsNoAttack, $01
00098DBE E10B                       	smpsAlterNote       $0B
00098DC0 E701                       	dc.b	smpsNoAttack, $01
00098DC2 E105                       	smpsAlterNote       $05
00098DC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098DC8 E108                       	smpsAlterNote       $08
00098DCA E701                       	dc.b	smpsNoAttack, $01
00098DCC E10E                       	smpsAlterNote       $0E
00098DCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098DD2 E108                       	smpsAlterNote       $08
00098DD4 E701                       	dc.b	smpsNoAttack, $01
00098DD6 E105                       	smpsAlterNote       $05
00098DD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098DDC E108                       	smpsAlterNote       $08
00098DDE B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00098DE2 E109                       	smpsAlterNote       $09
00098DE4 B60D                       	dc.b	nF4, $0D
00098DE6 E103                       	smpsAlterNote       $03
00098DE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098DEC E106                       	smpsAlterNote       $06
00098DEE E701                       	dc.b	smpsNoAttack, $01
00098DF0 E10C                       	smpsAlterNote       $0C
00098DF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098DF6 E106                       	smpsAlterNote       $06
00098DF8 E701                       	dc.b	smpsNoAttack, $01
00098DFA E103                       	smpsAlterNote       $03
00098DFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098E00 E109                       	smpsAlterNote       $09
00098E02 E701                       	dc.b	smpsNoAttack, $01
00098E04 E10D                       	smpsAlterNote       $0D
00098E06 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00098E0A E109                       	smpsAlterNote       $09
00098E0C B80D                       	dc.b	nG4, $0D
00098E0E E103                       	smpsAlterNote       $03
00098E10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098E14 E109                       	smpsAlterNote       $09
00098E16 E701                       	dc.b	smpsNoAttack, $01
00098E18 E10C                       	smpsAlterNote       $0C
00098E1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098E1E E106                       	smpsAlterNote       $06
00098E20 E701                       	dc.b	smpsNoAttack, $01
00098E22 E102                       	smpsAlterNote       $02
00098E24 E701                       	dc.b	smpsNoAttack, $01
00098E26 E103                       	smpsAlterNote       $03
00098E28 E701                       	dc.b	smpsNoAttack, $01
00098E2A E109                       	smpsAlterNote       $09
00098E2C E701                       	dc.b	smpsNoAttack, $01
00098E2E E10D                       	smpsAlterNote       $0D
00098E30 E701                       	dc.b	smpsNoAttack, $01
00098E32 E109                       	smpsAlterNote       $09
00098E34 E701                       	dc.b	smpsNoAttack, $01
00098E36 E106                       	smpsAlterNote       $06
00098E38 E701                       	dc.b	smpsNoAttack, $01
00098E3A E102                       	smpsAlterNote       $02
00098E3C E701                       	dc.b	smpsNoAttack, $01
00098E3E E106                       	smpsAlterNote       $06
00098E40 E701                       	dc.b	smpsNoAttack, $01
00098E42 E10C                       	smpsAlterNote       $0C
00098E44 E701                       	dc.b	smpsNoAttack, $01
00098E46 E10D                       	smpsAlterNote       $0D
00098E48 E701                       	dc.b	smpsNoAttack, $01
00098E4A E109                       	smpsAlterNote       $09
00098E4C E701                       	dc.b	smpsNoAttack, $01
00098E4E E10B                       	smpsAlterNote       $0B
00098E50 BA0D                       	dc.b	nA4, $0D
00098E52 E108                       	smpsAlterNote       $08
00098E54 E701                       	dc.b	smpsNoAttack, $01
00098E56 E105                       	smpsAlterNote       $05
00098E58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098E5C E10B                       	smpsAlterNote       $0B
00098E5E E701                       	dc.b	smpsNoAttack, $01
00098E60 E10F                       	smpsAlterNote       $0F
00098E62 E701                       	dc.b	smpsNoAttack, $01
00098E64 E10E                       	smpsAlterNote       $0E
00098E66 E701                       	dc.b	smpsNoAttack, $01
00098E68 E108                       	smpsAlterNote       $08
00098E6A E701                       	dc.b	smpsNoAttack, $01
00098E6C E104                       	smpsAlterNote       $04
00098E6E E701                       	dc.b	smpsNoAttack, $01
00098E70 E108                       	smpsAlterNote       $08
00098E72 E701                       	dc.b	smpsNoAttack, $01
00098E74 E10B                       	smpsAlterNote       $0B
00098E76 E701                       	dc.b	smpsNoAttack, $01
00098E78 E10F                       	smpsAlterNote       $0F
00098E7A E701                       	dc.b	smpsNoAttack, $01
00098E7C E10B                       	smpsAlterNote       $0B
00098E7E E701                       	dc.b	smpsNoAttack, $01
00098E80 E105                       	smpsAlterNote       $05
00098E82 E701                       	dc.b	smpsNoAttack, $01
00098E84 E104                       	smpsAlterNote       $04
00098E86 E701                       	dc.b	smpsNoAttack, $01
00098E88 E108                       	smpsAlterNote       $08
00098E8A E701                       	dc.b	smpsNoAttack, $01
00098E8C E10E                       	smpsAlterNote       $0E
00098E8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098E92 E10B                       	smpsAlterNote       $0B
00098E94 E701                       	dc.b	smpsNoAttack, $01
00098E96 E105                       	smpsAlterNote       $05
00098E98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098E9C E10B                       	smpsAlterNote       $0B
00098E9E E701                       	dc.b	smpsNoAttack, $01
00098EA0 E10E                       	smpsAlterNote       $0E
00098EA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098EA6 E108                       	smpsAlterNote       $08
00098EA8 E701                       	dc.b	smpsNoAttack, $01
00098EAA E105                       	smpsAlterNote       $05
00098EAC 8001                       	dc.b	nRst, $01
00098EAE E109                       	smpsAlterNote       $09
00098EB0 B60A                       	dc.b	nF4, $0A
00098EB2 E108                       	smpsAlterNote       $08
00098EB4 B507                       	dc.b	nE4, $07
00098EB6 E107                       	smpsAlterNote       $07
00098EB8 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00098EBC E108                       	smpsAlterNote       $08
00098EBE B503                       	dc.b	nE4, $03
00098EC0 E109                       	smpsAlterNote       $09
00098EC2 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00098ECA E10B                       	smpsAlterNote       $0B
00098ECC BA0D                       	dc.b	nA4, $0D
00098ECE E108                       	smpsAlterNote       $08
00098ED0 E701                       	dc.b	smpsNoAttack, $01
00098ED2 E104                       	smpsAlterNote       $04
00098ED4 E701                       	dc.b	smpsNoAttack, $01
00098ED6 E108                       	smpsAlterNote       $08
00098ED8 E701                       	dc.b	smpsNoAttack, $01
00098EDA E10B                       	smpsAlterNote       $0B
00098EDC E701                       	dc.b	smpsNoAttack, $01
00098EDE E10F                       	smpsAlterNote       $0F
00098EE0 E701                       	dc.b	smpsNoAttack, $01
00098EE2 E10B                       	smpsAlterNote       $0B
00098EE4 E701                       	dc.b	smpsNoAttack, $01
00098EE6 E105                       	smpsAlterNote       $05
00098EE8 E701                       	dc.b	smpsNoAttack, $01
00098EEA E104                       	smpsAlterNote       $04
00098EEC E701                       	dc.b	smpsNoAttack, $01
00098EEE E108                       	smpsAlterNote       $08
00098EF0 E701                       	dc.b	smpsNoAttack, $01
00098EF2 E10E                       	smpsAlterNote       $0E
00098EF4 E701                       	dc.b	smpsNoAttack, $01
00098EF6 E10F                       	smpsAlterNote       $0F
00098EF8 8001                       	dc.b	nRst, $01
00098EFA E109                       	smpsAlterNote       $09
00098EFC C20D                       	dc.b	nF5, $0D
00098EFE E106                       	smpsAlterNote       $06
00098F00 E701                       	dc.b	smpsNoAttack, $01
00098F02 E102                       	smpsAlterNote       $02
00098F04 E701                       	dc.b	smpsNoAttack, $01
00098F06 E106                       	smpsAlterNote       $06
00098F08 E701                       	dc.b	smpsNoAttack, $01
00098F0A E109                       	smpsAlterNote       $09
00098F0C E701                       	dc.b	smpsNoAttack, $01
00098F0E E10D                       	smpsAlterNote       $0D
00098F10 E701                       	dc.b	smpsNoAttack, $01
00098F12 E109                       	smpsAlterNote       $09
00098F14 E701                       	dc.b	smpsNoAttack, $01
00098F16 E103                       	smpsAlterNote       $03
00098F18 E701                       	dc.b	smpsNoAttack, $01
00098F1A E102                       	smpsAlterNote       $02
00098F1C E701                       	dc.b	smpsNoAttack, $01
00098F1E E106                       	smpsAlterNote       $06
00098F20 E701                       	dc.b	smpsNoAttack, $01
00098F22 E10C                       	smpsAlterNote       $0C
00098F24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098F28 E109                       	smpsAlterNote       $09
00098F2A E701                       	dc.b	smpsNoAttack, $01
00098F2C E103                       	smpsAlterNote       $03
00098F2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098F32 E109                       	smpsAlterNote       $09
00098F34 E701                       	dc.b	smpsNoAttack, $01
00098F36 E10C                       	smpsAlterNote       $0C
00098F38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098F3C E106                       	smpsAlterNote       $06
00098F3E E701                       	dc.b	smpsNoAttack, $01
00098F40 E102                       	smpsAlterNote       $02
00098F42 E701                       	dc.b	smpsNoAttack, $01
00098F44 E103                       	smpsAlterNote       $03
00098F46 E701                       	dc.b	smpsNoAttack, $01
00098F48 E109                       	smpsAlterNote       $09
00098F4A E701                       	dc.b	smpsNoAttack, $01
00098F4C E10D                       	smpsAlterNote       $0D
00098F4E E701                       	dc.b	smpsNoAttack, $01
00098F50 E109                       	smpsAlterNote       $09
00098F52 E701                       	dc.b	smpsNoAttack, $01
00098F54 E106                       	smpsAlterNote       $06
00098F56 E701                       	dc.b	smpsNoAttack, $01
00098F58 E102                       	smpsAlterNote       $02
00098F5A E701                       	dc.b	smpsNoAttack, $01
00098F5C E106                       	smpsAlterNote       $06
00098F5E E701                       	dc.b	smpsNoAttack, $01
00098F60 E10C                       	smpsAlterNote       $0C
00098F62 E701                       	dc.b	smpsNoAttack, $01
00098F64 E10D                       	smpsAlterNote       $0D
00098F66 E701                       	dc.b	smpsNoAttack, $01
00098F68 E109                       	smpsAlterNote       $09
00098F6A E701                       	dc.b	smpsNoAttack, $01
00098F6C E103                       	smpsAlterNote       $03
00098F6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098F72 E106                       	smpsAlterNote       $06
00098F74 E701                       	dc.b	smpsNoAttack, $01
00098F76 E10C                       	smpsAlterNote       $0C
00098F78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098F7C E106                       	smpsAlterNote       $06
00098F7E E701                       	dc.b	smpsNoAttack, $01
00098F80 E103                       	smpsAlterNote       $03
00098F82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098F86 E109                       	smpsAlterNote       $09
00098F88 E701                       	dc.b	smpsNoAttack, $01
00098F8A E10D                       	smpsAlterNote       $0D
00098F8C E701                       	dc.b	smpsNoAttack, $01
00098F8E E10C                       	smpsAlterNote       $0C
00098F90 E701                       	dc.b	smpsNoAttack, $01
00098F92 E106                       	smpsAlterNote       $06
00098F94 E701                       	dc.b	smpsNoAttack, $01
00098F96 E103                       	smpsAlterNote       $03
00098F98 8001                       	dc.b	nRst, $01
00098F9A E109                       	smpsAlterNote       $09
00098F9C C206 8001                  	dc.b	nF5, $06, nRst, $01
00098FA2 E10C                       	smpsAlterNote       $0C
00098FA4 E601                       	smpsAlterVol        $01
00098FA6 BB0D                       	dc.b	nBb4, $0D
00098FA8 E106                       	smpsAlterNote       $06
00098FAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098FAE E109                       	smpsAlterNote       $09
00098FB0 E701                       	dc.b	smpsNoAttack, $01
00098FB2 E10F                       	smpsAlterNote       $0F
00098FB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098FB8 E109                       	smpsAlterNote       $09
00098FBA E701                       	dc.b	smpsNoAttack, $01
00098FBC E106                       	smpsAlterNote       $06
00098FBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098FC2 E10C                       	smpsAlterNote       $0C
00098FC4 E701                       	dc.b	smpsNoAttack, $01
00098FC6 E110                       	smpsAlterNote       $10
00098FC8 E701                       	dc.b	smpsNoAttack, $01
00098FCA E10F                       	smpsAlterNote       $0F
00098FCC E701                       	dc.b	smpsNoAttack, $01
00098FCE E109                       	smpsAlterNote       $09
00098FD0 E701                       	dc.b	smpsNoAttack, $01
00098FD2 E105                       	smpsAlterNote       $05
00098FD4 E701                       	dc.b	smpsNoAttack, $01
00098FD6 E106                       	smpsAlterNote       $06
00098FD8 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00098FDC E103                       	smpsAlterNote       $03
00098FDE E701                       	dc.b	smpsNoAttack, $01
00098FE0 E1FF                       	smpsAlterNote       $FF
00098FE2 E701                       	dc.b	smpsNoAttack, $01
00098FE4 E103                       	smpsAlterNote       $03
00098FE6 E701                       	dc.b	smpsNoAttack, $01
00098FE8 E106                       	smpsAlterNote       $06
00098FEA E701                       	dc.b	smpsNoAttack, $01
00098FEC E10A                       	smpsAlterNote       $0A
00098FEE E701                       	dc.b	smpsNoAttack, $01
00098FF0 E106                       	smpsAlterNote       $06
00098FF2 E701                       	dc.b	smpsNoAttack, $01
00098FF4 E100                       	smpsAlterNote       $00
00098FF6 E701                       	dc.b	smpsNoAttack, $01
00098FF8 E1FF                       	smpsAlterNote       $FF
00098FFA E701                       	dc.b	smpsNoAttack, $01
00098FFC E103                       	smpsAlterNote       $03
00098FFE E701                       	dc.b	smpsNoAttack, $01
00099000 E109                       	smpsAlterNote       $09
00099002 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099006 E106                       	smpsAlterNote       $06
00099008 E701                       	dc.b	smpsNoAttack, $01
0009900A E100                       	smpsAlterNote       $00
0009900C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099010 E107                       	smpsAlterNote       $07
00099012 BF0E                       	dc.b	nD5, $0E
00099014 E101                       	smpsAlterNote       $01
00099016 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009901A E107                       	smpsAlterNote       $07
0009901C E701                       	dc.b	smpsNoAttack, $01
0009901E E10A                       	smpsAlterNote       $0A
00099020 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099024 E104                       	smpsAlterNote       $04
00099026 E701                       	dc.b	smpsNoAttack, $01
00099028 E100                       	smpsAlterNote       $00
0009902A E701                       	dc.b	smpsNoAttack, $01
0009902C E101                       	smpsAlterNote       $01
0009902E E701                       	dc.b	smpsNoAttack, $01
00099030 E107                       	smpsAlterNote       $07
00099032 E701                       	dc.b	smpsNoAttack, $01
00099034 E10B                       	smpsAlterNote       $0B
00099036 E701                       	dc.b	smpsNoAttack, $01
00099038 E107                       	smpsAlterNote       $07
0009903A E701                       	dc.b	smpsNoAttack, $01
0009903C E104                       	smpsAlterNote       $04
0009903E E701                       	dc.b	smpsNoAttack, $01
00099040 E100                       	smpsAlterNote       $00
00099042 E701                       	dc.b	smpsNoAttack, $01
00099044 E101                       	smpsAlterNote       $01
00099046 8001                       	dc.b	nRst, $01
00099048 E108                       	smpsAlterNote       $08
0009904A C10C                       	dc.b	nE5, $0C
0009904C E109                       	smpsAlterNote       $09
0009904E C201 8001                  	dc.b	nF5, $01, nRst, $01
00099052 E10A                       	smpsAlterNote       $0A
00099054 8001                       	dc.b	nRst, $01
00099056 E109                       	smpsAlterNote       $09
00099058 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0009905C E106                       	smpsAlterNote       $06
0009905E E701                       	dc.b	smpsNoAttack, $01
00099060 E102                       	smpsAlterNote       $02
00099062 E701                       	dc.b	smpsNoAttack, $01
00099064 E103                       	smpsAlterNote       $03
00099066 E701                       	dc.b	smpsNoAttack, $01
00099068 E109                       	smpsAlterNote       $09
0009906A E701                       	dc.b	smpsNoAttack, $01
0009906C E10D                       	smpsAlterNote       $0D
0009906E E701                       	dc.b	smpsNoAttack, $01
00099070 E109                       	smpsAlterNote       $09
00099072 E701                       	dc.b	smpsNoAttack, $01
00099074 E106                       	smpsAlterNote       $06
00099076 E701                       	dc.b	smpsNoAttack, $01
00099078 E102                       	smpsAlterNote       $02
0009907A E701                       	dc.b	smpsNoAttack, $01
0009907C E106                       	smpsAlterNote       $06
0009907E E701                       	dc.b	smpsNoAttack, $01
00099080 E10C                       	smpsAlterNote       $0C
00099082 E701                       	dc.b	smpsNoAttack, $01
00099084 E10D                       	smpsAlterNote       $0D
00099086 E701                       	dc.b	smpsNoAttack, $01
00099088 E109                       	smpsAlterNote       $09
0009908A C40D                       	dc.b	nG5, $0D
0009908C E106                       	smpsAlterNote       $06
0009908E E701                       	dc.b	smpsNoAttack, $01
00099090 E102                       	smpsAlterNote       $02
00099092 E701                       	dc.b	smpsNoAttack, $01
00099094 E103                       	smpsAlterNote       $03
00099096 E701                       	dc.b	smpsNoAttack, $01
00099098 E109                       	smpsAlterNote       $09
0009909A E701                       	dc.b	smpsNoAttack, $01
0009909C E108                       	smpsAlterNote       $08
0009909E C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
000990AA E109                       	smpsAlterNote       $09
000990AC C20D                       	dc.b	nF5, $0D
000990AE E106                       	smpsAlterNote       $06
000990B0 E701                       	dc.b	smpsNoAttack, $01
000990B2 E102                       	smpsAlterNote       $02
000990B4 E701                       	dc.b	smpsNoAttack, $01
000990B6 E106                       	smpsAlterNote       $06
000990B8 E701                       	dc.b	smpsNoAttack, $01
000990BA E109                       	smpsAlterNote       $09
000990BC E701                       	dc.b	smpsNoAttack, $01
000990BE E10D                       	smpsAlterNote       $0D
000990C0 E701                       	dc.b	smpsNoAttack, $01
000990C2 E109                       	smpsAlterNote       $09
000990C4 E701                       	dc.b	smpsNoAttack, $01
000990C6 E103                       	smpsAlterNote       $03
000990C8 E701                       	dc.b	smpsNoAttack, $01
000990CA E102                       	smpsAlterNote       $02
000990CC E701                       	dc.b	smpsNoAttack, $01
000990CE E106                       	smpsAlterNote       $06
000990D0 E701                       	dc.b	smpsNoAttack, $01
000990D2 E10C                       	smpsAlterNote       $0C
000990D4 E701                       	dc.b	smpsNoAttack, $01
000990D6 E10D                       	smpsAlterNote       $0D
000990D8 8001                       	dc.b	nRst, $01
000990DA E112                       	smpsAlterNote       $12
000990DC C401                       	dc.b	nG5, $01
000990DE E1EB                       	smpsAlterNote       $EB
000990E0 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000990E3 E1FD                       	smpsAlterNote       $FD
000990E5 E701                       	dc.b	smpsNoAttack, $01
000990E7 E10F                       	smpsAlterNote       $0F
000990E9 E701                       	dc.b	smpsNoAttack, $01
000990EB E118                       	smpsAlterNote       $18
000990ED E701                       	dc.b	smpsNoAttack, $01
000990EF E1ED                       	smpsAlterNote       $ED
000990F1 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000990F4 E1FF                       	smpsAlterNote       $FF
000990F6 E701                       	dc.b	smpsNoAttack, $01
000990F8 E10B                       	smpsAlterNote       $0B
000990FA E703                       	dc.b	smpsNoAttack, $03
000990FC E109                       	smpsAlterNote       $09
000990FE C407                       	dc.b	nG5, $07
00099100 E108                       	smpsAlterNote       $08
00099102 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
0009910E E109                       	smpsAlterNote       $09
00099110 C20D                       	dc.b	nF5, $0D
00099112 E103                       	smpsAlterNote       $03
00099114 E701                       	dc.b	smpsNoAttack, $01
00099116 E102                       	smpsAlterNote       $02
00099118 E701                       	dc.b	smpsNoAttack, $01
0009911A E106                       	smpsAlterNote       $06
0009911C E701                       	dc.b	smpsNoAttack, $01
0009911E E10C                       	smpsAlterNote       $0C
00099120 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099124 E109                       	smpsAlterNote       $09
00099126 E701                       	dc.b	smpsNoAttack, $01
00099128 E103                       	smpsAlterNote       $03
0009912A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009912E E109                       	smpsAlterNote       $09
00099130 E701                       	dc.b	smpsNoAttack, $01
00099132 E10C                       	smpsAlterNote       $0C
00099134 E701                       	dc.b	smpsNoAttack, $01
00099136 E10D                       	smpsAlterNote       $0D
00099138 8001                       	dc.b	nRst, $01
0009913A E10B                       	smpsAlterNote       $0B
0009913C C609 8001                  	dc.b	nA5, $09, nRst, $01
00099140 E109                       	smpsAlterNote       $09
00099142 B806 8001                  	dc.b	nG4, $06, nRst, $01
00099146 E108                       	smpsAlterNote       $08
00099148 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00099154 8001                       	dc.b	nRst, $01
00099156 E109                       	smpsAlterNote       $09
00099158 C20D                       	dc.b	nF5, $0D
0009915A E103                       	smpsAlterNote       $03
0009915C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099160 E106                       	smpsAlterNote       $06
00099162 E701                       	dc.b	smpsNoAttack, $01
00099164 E10C                       	smpsAlterNote       $0C
00099166 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009916A E106                       	smpsAlterNote       $06
0009916C E701                       	dc.b	smpsNoAttack, $01
0009916E E103                       	smpsAlterNote       $03
00099170 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099174 E109                       	smpsAlterNote       $09
00099176 E701                       	dc.b	smpsNoAttack, $01
00099178 E10D                       	smpsAlterNote       $0D
0009917A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00099180 E108                       	smpsAlterNote       $08
00099182 E6FF                       	smpsAlterVol        $FF
00099184 A806                       	dc.b	nEb3, $06
00099186 E10C                       	smpsAlterNote       $0C
00099188 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0009918C E108                       	smpsAlterNote       $08
0009918E A803                       	dc.b	nEb3, $03
00099190 E109                       	smpsAlterNote       $09
00099192 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00099196 E10C                       	smpsAlterNote       $0C
00099198 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
000991A2 E109                       	smpsAlterNote       $09
000991A4 E602                       	smpsAlterVol        $02
000991A6 B604                       	dc.b	nF4, $04
000991A8 E602                       	smpsAlterVol        $02
000991AA F6F1 AA                    	smpsJump            music84_Jump02
000991AD                            
000991AD                            ; FM4 Data
000991AD                            music84_FM4:
000991AF E040                       	smpsPan             panRight, $00
000991B1 8003                       	dc.b	nRst, $03
000991B3 E10F                       	smpsAlterNote       $0F
000991B5 C603 8008                  	dc.b	nA5, $03, nRst, $08
000991B9 E10D                       	smpsAlterNote       $0D
000991BB C403 800A                  	dc.b	nG5, $03, nRst, $0A
000991BF E10C                       	smpsAlterNote       $0C
000991C1 C103 8004                  	dc.b	nE5, $03, nRst, $04
000991C7 E6FE                       	smpsAlterVol        $FE
000991C9 E110                       	smpsAlterNote       $10
000991CB C703 8001                  	dc.b	nBb5, $03, nRst, $01
000991CF E10F                       	smpsAlterNote       $0F
000991D1 C602 8001                  	dc.b	nA5, $02, nRst, $01
000991D5 E10D                       	smpsAlterNote       $0D
000991D7 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
000991E0 E10C                       	smpsAlterNote       $0C
000991E2 C103                       	dc.b	nE5, $03
000991E4 E10A                       	smpsAlterNote       $0A
000991E6 BD03 8001                  	dc.b	nC5, $03, nRst, $01
000991EC 03                         	dc.b	$03
000991ED                            
000991ED                            music84_Jump01:
000991ED E10B                       	smpsAlterNote       $0B
000991EF BF03 8001                  	dc.b	nD5, $03, nRst, $01
000991F3 E10C                       	smpsAlterNote       $0C
000991F5 C102 8001                  	dc.b	nE5, $02, nRst, $01
000991F9 E10D                       	smpsAlterNote       $0D
000991FB C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00099205 E10B                       	smpsAlterNote       $0B
00099207 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0009920B E107                       	smpsAlterNote       $07
0009920D E701                       	dc.b	smpsNoAttack, $01
0009920F E103                       	smpsAlterNote       $03
00099211 E701                       	dc.b	smpsNoAttack, $01
00099213 E104                       	smpsAlterNote       $04
00099215 E701                       	dc.b	smpsNoAttack, $01
00099217 E10A                       	smpsAlterNote       $0A
00099219 E701                       	dc.b	smpsNoAttack, $01
0009921B E10E                       	smpsAlterNote       $0E
0009921D E701                       	dc.b	smpsNoAttack, $01
0009921F E10A                       	smpsAlterNote       $0A
00099221 E701                       	dc.b	smpsNoAttack, $01
00099223 E107                       	smpsAlterNote       $07
00099225 E701                       	dc.b	smpsNoAttack, $01
00099227 E104                       	smpsAlterNote       $04
00099229 8001                       	dc.b	nRst, $01
0009922B E110                       	smpsAlterNote       $10
0009922D C703                       	dc.b	nBb5, $03
0009922F E10F                       	smpsAlterNote       $0F
00099231 C603 8001                  	dc.b	nA5, $03, nRst, $01
00099235 E10D                       	smpsAlterNote       $0D
00099237 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0009923D E10C                       	smpsAlterNote       $0C
0009923F E701                       	dc.b	smpsNoAttack, $01
00099241 E108                       	smpsAlterNote       $08
00099243 E701                       	dc.b	smpsNoAttack, $01
00099245 E10C                       	smpsAlterNote       $0C
00099247 E701                       	dc.b	smpsNoAttack, $01
00099249 E10F                       	smpsAlterNote       $0F
0009924B E701                       	dc.b	smpsNoAttack, $01
0009924D E113                       	smpsAlterNote       $13
0009924F E701                       	dc.b	smpsNoAttack, $01
00099251 E10F                       	smpsAlterNote       $0F
00099253 E701                       	dc.b	smpsNoAttack, $01
00099255 E109                       	smpsAlterNote       $09
00099257 E701                       	dc.b	smpsNoAttack, $01
00099259 E108                       	smpsAlterNote       $08
0009925B E701                       	dc.b	smpsNoAttack, $01
0009925D E10C                       	smpsAlterNote       $0C
0009925F E701                       	dc.b	smpsNoAttack, $01
00099261 E112                       	smpsAlterNote       $12
00099263 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099267 E10C                       	smpsAlterNote       $0C
00099269 E701                       	dc.b	smpsNoAttack, $01
0009926B E109                       	smpsAlterNote       $09
0009926D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099271 E10F                       	smpsAlterNote       $0F
00099273 E701                       	dc.b	smpsNoAttack, $01
00099275 E113                       	smpsAlterNote       $13
00099277 E701                       	dc.b	smpsNoAttack, $01
00099279 E112                       	smpsAlterNote       $12
0009927B E701                       	dc.b	smpsNoAttack, $01
0009927D E10C                       	smpsAlterNote       $0C
0009927F E701                       	dc.b	smpsNoAttack, $01
00099281 E108                       	smpsAlterNote       $08
00099283 E701                       	dc.b	smpsNoAttack, $01
00099285 E10C                       	smpsAlterNote       $0C
00099287 E701                       	dc.b	smpsNoAttack, $01
00099289 E10F                       	smpsAlterNote       $0F
0009928B E701                       	dc.b	smpsNoAttack, $01
0009928D E113                       	smpsAlterNote       $13
0009928F E701                       	dc.b	smpsNoAttack, $01
00099291 E10F                       	smpsAlterNote       $0F
00099293 E701                       	dc.b	smpsNoAttack, $01
00099295 E109                       	smpsAlterNote       $09
00099297 E701                       	dc.b	smpsNoAttack, $01
00099299 E108                       	smpsAlterNote       $08
0009929B E701                       	dc.b	smpsNoAttack, $01
0009929D E10C                       	smpsAlterNote       $0C
0009929F E701                       	dc.b	smpsNoAttack, $01
000992A1 E112                       	smpsAlterNote       $12
000992A3 E701                       	dc.b	smpsNoAttack, $01
000992A5 E113                       	smpsAlterNote       $13
000992A7 800F                       	dc.b	nRst, $0F
000992A9 E10B                       	smpsAlterNote       $0B
000992AB BF03                       	dc.b	nD5, $03
000992AD E10C                       	smpsAlterNote       $0C
000992AF C103 8001                  	dc.b	nE5, $03, nRst, $01
000992B3 E10D                       	smpsAlterNote       $0D
000992B5 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
000992BD E10B                       	smpsAlterNote       $0B
000992BF BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
000992C9 E110                       	smpsAlterNote       $10
000992CB C704                       	dc.b	nBb5, $04
000992CD E10F                       	smpsAlterNote       $0F
000992CF C604 8001                  	dc.b	nA5, $04, nRst, $01
000992D3 E10D                       	smpsAlterNote       $0D
000992D5 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000992DB E109                       	smpsAlterNote       $09
000992DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000992E1 E10F                       	smpsAlterNote       $0F
000992E3 E701                       	dc.b	smpsNoAttack, $01
000992E5 E112                       	smpsAlterNote       $12
000992E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000992EB E10C                       	smpsAlterNote       $0C
000992ED E701                       	dc.b	smpsNoAttack, $01
000992EF E108                       	smpsAlterNote       $08
000992F1 E701                       	dc.b	smpsNoAttack, $01
000992F3 E109                       	smpsAlterNote       $09
000992F5 E701                       	dc.b	smpsNoAttack, $01
000992F7 E10F                       	smpsAlterNote       $0F
000992F9 E701                       	dc.b	smpsNoAttack, $01
000992FB E113                       	smpsAlterNote       $13
000992FD E701                       	dc.b	smpsNoAttack, $01
000992FF E10F                       	smpsAlterNote       $0F
00099301 E701                       	dc.b	smpsNoAttack, $01
00099303 E10C                       	smpsAlterNote       $0C
00099305 E701                       	dc.b	smpsNoAttack, $01
00099307 E108                       	smpsAlterNote       $08
00099309 E701                       	dc.b	smpsNoAttack, $01
0009930B E10C                       	smpsAlterNote       $0C
0009930D E701                       	dc.b	smpsNoAttack, $01
0009930F E112                       	smpsAlterNote       $12
00099311 E701                       	dc.b	smpsNoAttack, $01
00099313 E113                       	smpsAlterNote       $13
00099315 E701                       	dc.b	smpsNoAttack, $01
00099317 E10F                       	smpsAlterNote       $0F
00099319 E701                       	dc.b	smpsNoAttack, $01
0009931B E109                       	smpsAlterNote       $09
0009931D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099321 E10C                       	smpsAlterNote       $0C
00099323 E701                       	dc.b	smpsNoAttack, $01
00099325 E112                       	smpsAlterNote       $12
00099327 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009932B E10C                       	smpsAlterNote       $0C
0009932D E701                       	dc.b	smpsNoAttack, $01
0009932F E109                       	smpsAlterNote       $09
00099331 E701                       	dc.b	smpsNoAttack, $01
00099333 E10D                       	smpsAlterNote       $0D
00099335 C401 8001                  	dc.b	nG5, $01, nRst, $01
00099339 E10F                       	smpsAlterNote       $0F
0009933B C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00099345 E10D                       	smpsAlterNote       $0D
00099347 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0009934D E10B                       	smpsAlterNote       $0B
0009934F BF0D                       	dc.b	nD5, $0D
00099351 E108                       	smpsAlterNote       $08
00099353 E701                       	dc.b	smpsNoAttack, $01
00099355 E104                       	smpsAlterNote       $04
00099357 E701                       	dc.b	smpsNoAttack, $01
00099359 E108                       	smpsAlterNote       $08
0009935B E701                       	dc.b	smpsNoAttack, $01
0009935D E10B                       	smpsAlterNote       $0B
0009935F E701                       	dc.b	smpsNoAttack, $01
00099361 E10F                       	smpsAlterNote       $0F
00099363 E701                       	dc.b	smpsNoAttack, $01
00099365 E10B                       	smpsAlterNote       $0B
00099367 E701                       	dc.b	smpsNoAttack, $01
00099369 E105                       	smpsAlterNote       $05
0009936B E701                       	dc.b	smpsNoAttack, $01
0009936D E104                       	smpsAlterNote       $04
0009936F E701                       	dc.b	smpsNoAttack, $01
00099371 E108                       	smpsAlterNote       $08
00099373 E701                       	dc.b	smpsNoAttack, $01
00099375 E10E                       	smpsAlterNote       $0E
00099377 E701                       	dc.b	smpsNoAttack, $01
00099379 E10F                       	smpsAlterNote       $0F
0009937B 8001                       	dc.b	nRst, $01
0009937D E10C                       	smpsAlterNote       $0C
0009937F C101                       	dc.b	nE5, $01
00099381 E10D                       	smpsAlterNote       $0D
00099383 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00099389 E10F                       	smpsAlterNote       $0F
0009938B C606 8001                  	dc.b	nA5, $06, nRst, $01
0009938F E10C                       	smpsAlterNote       $0C
00099391 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00099395 E10D                       	smpsAlterNote       $0D
00099397 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0009939B E10C                       	smpsAlterNote       $0C
0009939D CD03                       	dc.b	nE6, $03
0009939F E10A                       	smpsAlterNote       $0A
000993A1 C903 8001                  	dc.b	nC6, $03, nRst, $01
000993A5 E10D                       	smpsAlterNote       $0D
000993A7 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
000993AF E109                       	smpsAlterNote       $09
000993B1 E701                       	dc.b	smpsNoAttack, $01
000993B3 E10D                       	smpsAlterNote       $0D
000993B5 E701                       	dc.b	smpsNoAttack, $01
000993B7 E110                       	smpsAlterNote       $10
000993B9 E701                       	dc.b	smpsNoAttack, $01
000993BB E114                       	smpsAlterNote       $14
000993BD E701                       	dc.b	smpsNoAttack, $01
000993BF E110                       	smpsAlterNote       $10
000993C1 E701                       	dc.b	smpsNoAttack, $01
000993C3 E10A                       	smpsAlterNote       $0A
000993C5 E701                       	dc.b	smpsNoAttack, $01
000993C7 E109                       	smpsAlterNote       $09
000993C9 E701                       	dc.b	smpsNoAttack, $01
000993CB E10D                       	smpsAlterNote       $0D
000993CD E701                       	dc.b	smpsNoAttack, $01
000993CF E113                       	smpsAlterNote       $13
000993D1 E701                       	dc.b	smpsNoAttack, $01
000993D3 E114                       	smpsAlterNote       $14
000993D5 8001                       	dc.b	nRst, $01
000993D7 E10F                       	smpsAlterNote       $0F
000993D9 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
000993DF E10C                       	smpsAlterNote       $0C
000993E1 E701                       	dc.b	smpsNoAttack, $01
000993E3 E108                       	smpsAlterNote       $08
000993E5 E701                       	dc.b	smpsNoAttack, $01
000993E7 E10C                       	smpsAlterNote       $0C
000993E9 E701                       	dc.b	smpsNoAttack, $01
000993EB E112                       	smpsAlterNote       $12
000993ED E701                       	dc.b	smpsNoAttack, $01
000993EF E113                       	smpsAlterNote       $13
000993F1 E701                       	dc.b	smpsNoAttack, $01
000993F3 E10F                       	smpsAlterNote       $0F
000993F5 E701                       	dc.b	smpsNoAttack, $01
000993F7 E109                       	smpsAlterNote       $09
000993F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000993FD E10C                       	smpsAlterNote       $0C
000993FF E701                       	dc.b	smpsNoAttack, $01
00099401 E112                       	smpsAlterNote       $12
00099403 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099407 E10C                       	smpsAlterNote       $0C
00099409 E701                       	dc.b	smpsNoAttack, $01
0009940B E109                       	smpsAlterNote       $09
0009940D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099411 E10F                       	smpsAlterNote       $0F
00099413 E701                       	dc.b	smpsNoAttack, $01
00099415 E113                       	smpsAlterNote       $13
00099417 E701                       	dc.b	smpsNoAttack, $01
00099419 E112                       	smpsAlterNote       $12
0009941B E701                       	dc.b	smpsNoAttack, $01
0009941D E10C                       	smpsAlterNote       $0C
0009941F E701                       	dc.b	smpsNoAttack, $01
00099421 E108                       	smpsAlterNote       $08
00099423 E701                       	dc.b	smpsNoAttack, $01
00099425 E10C                       	smpsAlterNote       $0C
00099427 E701                       	dc.b	smpsNoAttack, $01
00099429 E10F                       	smpsAlterNote       $0F
0009942B E701                       	dc.b	smpsNoAttack, $01
0009942D E113                       	smpsAlterNote       $13
0009942F E701                       	dc.b	smpsNoAttack, $01
00099431 E10F                       	smpsAlterNote       $0F
00099433 E701                       	dc.b	smpsNoAttack, $01
00099435 E109                       	smpsAlterNote       $09
00099437 E701                       	dc.b	smpsNoAttack, $01
00099439 E108                       	smpsAlterNote       $08
0009943B E701                       	dc.b	smpsNoAttack, $01
0009943D E10C                       	smpsAlterNote       $0C
0009943F E701                       	dc.b	smpsNoAttack, $01
00099441 E112                       	smpsAlterNote       $12
00099443 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099447 E10F                       	smpsAlterNote       $0F
00099449 E701                       	dc.b	smpsNoAttack, $01
0009944B E109                       	smpsAlterNote       $09
0009944D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099451 E10F                       	smpsAlterNote       $0F
00099453 E701                       	dc.b	smpsNoAttack, $01
00099455 E113                       	smpsAlterNote       $13
00099457 E701                       	dc.b	smpsNoAttack, $01
00099459 E112                       	smpsAlterNote       $12
0009945B E701                       	dc.b	smpsNoAttack, $01
0009945D E10C                       	smpsAlterNote       $0C
0009945F E701                       	dc.b	smpsNoAttack, $01
00099461 E108                       	smpsAlterNote       $08
00099463 E701                       	dc.b	smpsNoAttack, $01
00099465 E10C                       	smpsAlterNote       $0C
00099467 E701                       	dc.b	smpsNoAttack, $01
00099469 E10F                       	smpsAlterNote       $0F
0009946B E701                       	dc.b	smpsNoAttack, $01
0009946D E113                       	smpsAlterNote       $13
0009946F E701                       	dc.b	smpsNoAttack, $01
00099471 E10F                       	smpsAlterNote       $0F
00099473 E701                       	dc.b	smpsNoAttack, $01
00099475 E109                       	smpsAlterNote       $09
00099477 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009947B E10F                       	smpsAlterNote       $0F
0009947D C60D                       	dc.b	nA5, $0D
0009947F E109                       	smpsAlterNote       $09
00099481 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099485 E10C                       	smpsAlterNote       $0C
00099487 E701                       	dc.b	smpsNoAttack, $01
00099489 E112                       	smpsAlterNote       $12
0009948B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009948F E10C                       	smpsAlterNote       $0C
00099491 E701                       	dc.b	smpsNoAttack, $01
00099493 E109                       	smpsAlterNote       $09
00099495 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099499 E10F                       	smpsAlterNote       $0F
0009949B E701                       	dc.b	smpsNoAttack, $01
0009949D E113                       	smpsAlterNote       $13
0009949F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000994A5 E10D                       	smpsAlterNote       $0D
000994A7 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
000994AF E10C                       	smpsAlterNote       $0C
000994B1 C103 800E                  	dc.b	nE5, $03, nRst, $0E
000994B7 E6FF                       	smpsAlterVol        $FF
000994B9 E10B                       	smpsAlterNote       $0B
000994BB BF03 8001                  	dc.b	nD5, $03, nRst, $01
000994BF E10C                       	smpsAlterNote       $0C
000994C1 C103                       	dc.b	nE5, $03
000994C3 E10D                       	smpsAlterNote       $0D
000994C5 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
000994CF E10B                       	smpsAlterNote       $0B
000994D1 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
000994D5 E107                       	smpsAlterNote       $07
000994D7 E701                       	dc.b	smpsNoAttack, $01
000994D9 E104                       	smpsAlterNote       $04
000994DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000994DF E10A                       	smpsAlterNote       $0A
000994E1 E701                       	dc.b	smpsNoAttack, $01
000994E3 E10D                       	smpsAlterNote       $0D
000994E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000994E9 E107                       	smpsAlterNote       $07
000994EB E701                       	dc.b	smpsNoAttack, $01
000994ED E104                       	smpsAlterNote       $04
000994EF 8001                       	dc.b	nRst, $01
000994F1 E110                       	smpsAlterNote       $10
000994F3 C703                       	dc.b	nBb5, $03
000994F5 E10F                       	smpsAlterNote       $0F
000994F7 C603 8001                  	dc.b	nA5, $03, nRst, $01
000994FB E10D                       	smpsAlterNote       $0D
000994FD C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00099501 E10C                       	smpsAlterNote       $0C
00099503 E701                       	dc.b	smpsNoAttack, $01
00099505 E108                       	smpsAlterNote       $08
00099507 E701                       	dc.b	smpsNoAttack, $01
00099509 E109                       	smpsAlterNote       $09
0009950B E701                       	dc.b	smpsNoAttack, $01
0009950D E10F                       	smpsAlterNote       $0F
0009950F E701                       	dc.b	smpsNoAttack, $01
00099511 E113                       	smpsAlterNote       $13
00099513 E701                       	dc.b	smpsNoAttack, $01
00099515 E10F                       	smpsAlterNote       $0F
00099517 E701                       	dc.b	smpsNoAttack, $01
00099519 E10C                       	smpsAlterNote       $0C
0009951B E701                       	dc.b	smpsNoAttack, $01
0009951D E108                       	smpsAlterNote       $08
0009951F E701                       	dc.b	smpsNoAttack, $01
00099521 E10C                       	smpsAlterNote       $0C
00099523 E701                       	dc.b	smpsNoAttack, $01
00099525 E112                       	smpsAlterNote       $12
00099527 E701                       	dc.b	smpsNoAttack, $01
00099529 E113                       	smpsAlterNote       $13
0009952B E701                       	dc.b	smpsNoAttack, $01
0009952D E10F                       	smpsAlterNote       $0F
0009952F E701                       	dc.b	smpsNoAttack, $01
00099531 E109                       	smpsAlterNote       $09
00099533 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099537 E10C                       	smpsAlterNote       $0C
00099539 E701                       	dc.b	smpsNoAttack, $01
0009953B E112                       	smpsAlterNote       $12
0009953D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099541 E10C                       	smpsAlterNote       $0C
00099543 E701                       	dc.b	smpsNoAttack, $01
00099545 E109                       	smpsAlterNote       $09
00099547 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009954B E10F                       	smpsAlterNote       $0F
0009954D E701                       	dc.b	smpsNoAttack, $01
0009954F E113                       	smpsAlterNote       $13
00099551 E701                       	dc.b	smpsNoAttack, $01
00099553 E112                       	smpsAlterNote       $12
00099555 E701                       	dc.b	smpsNoAttack, $01
00099557 E10C                       	smpsAlterNote       $0C
00099559 E701                       	dc.b	smpsNoAttack, $01
0009955B E108                       	smpsAlterNote       $08
0009955D E701                       	dc.b	smpsNoAttack, $01
0009955F E10C                       	smpsAlterNote       $0C
00099561 E701                       	dc.b	smpsNoAttack, $01
00099563 E10F                       	smpsAlterNote       $0F
00099565 E701                       	dc.b	smpsNoAttack, $01
00099567 E113                       	smpsAlterNote       $13
00099569 E701                       	dc.b	smpsNoAttack, $01
0009956B E10F                       	smpsAlterNote       $0F
0009956D BA03 8001                  	dc.b	nA4, $03, nRst, $01
00099571 E110                       	smpsAlterNote       $10
00099573 BB03                       	dc.b	nBb4, $03
00099575 E10F                       	smpsAlterNote       $0F
00099577 BA06 8001                  	dc.b	nA4, $06, nRst, $01
0009957B E10B                       	smpsAlterNote       $0B
0009957D BF03                       	dc.b	nD5, $03
0009957F E10C                       	smpsAlterNote       $0C
00099581 C103 8001                  	dc.b	nE5, $03, nRst, $01
00099585 E10D                       	smpsAlterNote       $0D
00099587 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00099591 E10B                       	smpsAlterNote       $0B
00099593 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0009959F E110                       	smpsAlterNote       $10
000995A1 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000995A5 E10F                       	smpsAlterNote       $0F
000995A7 C604                       	dc.b	nA5, $04
000995A9 E10D                       	smpsAlterNote       $0D
000995AB C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000995B1 E109                       	smpsAlterNote       $09
000995B3 E701                       	dc.b	smpsNoAttack, $01
000995B5 E108                       	smpsAlterNote       $08
000995B7 E701                       	dc.b	smpsNoAttack, $01
000995B9 E10C                       	smpsAlterNote       $0C
000995BB E701                       	dc.b	smpsNoAttack, $01
000995BD E112                       	smpsAlterNote       $12
000995BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000995C3 E10F                       	smpsAlterNote       $0F
000995C5 E701                       	dc.b	smpsNoAttack, $01
000995C7 E109                       	smpsAlterNote       $09
000995C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000995CD E10F                       	smpsAlterNote       $0F
000995CF E701                       	dc.b	smpsNoAttack, $01
000995D1 E112                       	smpsAlterNote       $12
000995D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000995D7 E10C                       	smpsAlterNote       $0C
000995D9 E701                       	dc.b	smpsNoAttack, $01
000995DB E108                       	smpsAlterNote       $08
000995DD E701                       	dc.b	smpsNoAttack, $01
000995DF E109                       	smpsAlterNote       $09
000995E1 E701                       	dc.b	smpsNoAttack, $01
000995E3 E10F                       	smpsAlterNote       $0F
000995E5 E701                       	dc.b	smpsNoAttack, $01
000995E7 E113                       	smpsAlterNote       $13
000995E9 E701                       	dc.b	smpsNoAttack, $01
000995EB E10F                       	smpsAlterNote       $0F
000995ED E701                       	dc.b	smpsNoAttack, $01
000995EF E10C                       	smpsAlterNote       $0C
000995F1 E701                       	dc.b	smpsNoAttack, $01
000995F3 E108                       	smpsAlterNote       $08
000995F5 E701                       	dc.b	smpsNoAttack, $01
000995F7 E10C                       	smpsAlterNote       $0C
000995F9 E701                       	dc.b	smpsNoAttack, $01
000995FB E112                       	smpsAlterNote       $12
000995FD E701                       	dc.b	smpsNoAttack, $01
000995FF E113                       	smpsAlterNote       $13
00099601 E701                       	dc.b	smpsNoAttack, $01
00099603 E10F                       	smpsAlterNote       $0F
00099605 E701                       	dc.b	smpsNoAttack, $01
00099607 E109                       	smpsAlterNote       $09
00099609 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009960D E10C                       	smpsAlterNote       $0C
0009960F E701                       	dc.b	smpsNoAttack, $01
00099611 E112                       	smpsAlterNote       $12
00099613 E701                       	dc.b	smpsNoAttack, $01
00099615 E113                       	smpsAlterNote       $13
00099617 8001                       	dc.b	nRst, $01
00099619 E10F                       	smpsAlterNote       $0F
0009961B C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
00099627 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0009962F E10D                       	smpsAlterNote       $0D
00099631 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00099637 E10B                       	smpsAlterNote       $0B
00099639 BF0D                       	dc.b	nD5, $0D
0009963B E108                       	smpsAlterNote       $08
0009963D E701                       	dc.b	smpsNoAttack, $01
0009963F E104                       	smpsAlterNote       $04
00099641 E701                       	dc.b	smpsNoAttack, $01
00099643 E105                       	smpsAlterNote       $05
00099645 E701                       	dc.b	smpsNoAttack, $01
00099647 E10B                       	smpsAlterNote       $0B
00099649 E701                       	dc.b	smpsNoAttack, $01
0009964B E10F                       	smpsAlterNote       $0F
0009964D E701                       	dc.b	smpsNoAttack, $01
0009964F E10B                       	smpsAlterNote       $0B
00099651 E701                       	dc.b	smpsNoAttack, $01
00099653 E108                       	smpsAlterNote       $08
00099655 E701                       	dc.b	smpsNoAttack, $01
00099657 E104                       	smpsAlterNote       $04
00099659 E701                       	dc.b	smpsNoAttack, $01
0009965B E108                       	smpsAlterNote       $08
0009965D E701                       	dc.b	smpsNoAttack, $01
0009965F E10E                       	smpsAlterNote       $0E
00099661 E701                       	dc.b	smpsNoAttack, $01
00099663 E10F                       	smpsAlterNote       $0F
00099665 E701                       	dc.b	smpsNoAttack, $01
00099667 E10C                       	smpsAlterNote       $0C
00099669 C101                       	dc.b	nE5, $01
0009966B E10D                       	smpsAlterNote       $0D
0009966D C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00099675 E10F                       	smpsAlterNote       $0F
00099677 C607                       	dc.b	nA5, $07
00099679 E10C                       	smpsAlterNote       $0C
0009967B CD07                       	dc.b	nE6, $07
0009967D E10D                       	smpsAlterNote       $0D
0009967F CE06 8001                  	dc.b	nF6, $06, nRst, $01
00099683 E10C                       	smpsAlterNote       $0C
00099685 CD03                       	dc.b	nE6, $03
00099687 E10A                       	smpsAlterNote       $0A
00099689 C903 8001                  	dc.b	nC6, $03, nRst, $01
0009968D E10D                       	smpsAlterNote       $0D
0009968F C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00099695 E10A                       	smpsAlterNote       $0A
00099697 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009969B E110                       	smpsAlterNote       $10
0009969D E701                       	dc.b	smpsNoAttack, $01
0009969F E114                       	smpsAlterNote       $14
000996A1 E701                       	dc.b	smpsNoAttack, $01
000996A3 E113                       	smpsAlterNote       $13
000996A5 E701                       	dc.b	smpsNoAttack, $01
000996A7 E10D                       	smpsAlterNote       $0D
000996A9 E701                       	dc.b	smpsNoAttack, $01
000996AB E109                       	smpsAlterNote       $09
000996AD E701                       	dc.b	smpsNoAttack, $01
000996AF E10D                       	smpsAlterNote       $0D
000996B1 E701                       	dc.b	smpsNoAttack, $01
000996B3 E110                       	smpsAlterNote       $10
000996B5 E701                       	dc.b	smpsNoAttack, $01
000996B7 E114                       	smpsAlterNote       $14
000996B9 E701                       	dc.b	smpsNoAttack, $01
000996BB E10F                       	smpsAlterNote       $0F
000996BD C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
000996C1 E10C                       	smpsAlterNote       $0C
000996C3 E701                       	dc.b	smpsNoAttack, $01
000996C5 E108                       	smpsAlterNote       $08
000996C7 E701                       	dc.b	smpsNoAttack, $01
000996C9 E10C                       	smpsAlterNote       $0C
000996CB E701                       	dc.b	smpsNoAttack, $01
000996CD E10F                       	smpsAlterNote       $0F
000996CF E701                       	dc.b	smpsNoAttack, $01
000996D1 E113                       	smpsAlterNote       $13
000996D3 E701                       	dc.b	smpsNoAttack, $01
000996D5 E10F                       	smpsAlterNote       $0F
000996D7 E701                       	dc.b	smpsNoAttack, $01
000996D9 E109                       	smpsAlterNote       $09
000996DB E701                       	dc.b	smpsNoAttack, $01
000996DD E108                       	smpsAlterNote       $08
000996DF E701                       	dc.b	smpsNoAttack, $01
000996E1 E10C                       	smpsAlterNote       $0C
000996E3 E701                       	dc.b	smpsNoAttack, $01
000996E5 E112                       	smpsAlterNote       $12
000996E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000996EB E10F                       	smpsAlterNote       $0F
000996ED E701                       	dc.b	smpsNoAttack, $01
000996EF E109                       	smpsAlterNote       $09
000996F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000996F5 E10F                       	smpsAlterNote       $0F
000996F7 E701                       	dc.b	smpsNoAttack, $01
000996F9 E112                       	smpsAlterNote       $12
000996FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000996FF E10C                       	smpsAlterNote       $0C
00099701 E701                       	dc.b	smpsNoAttack, $01
00099703 E108                       	smpsAlterNote       $08
00099705 E701                       	dc.b	smpsNoAttack, $01
00099707 E109                       	smpsAlterNote       $09
00099709 E701                       	dc.b	smpsNoAttack, $01
0009970B E10F                       	smpsAlterNote       $0F
0009970D E701                       	dc.b	smpsNoAttack, $01
0009970F E113                       	smpsAlterNote       $13
00099711 E701                       	dc.b	smpsNoAttack, $01
00099713 E10F                       	smpsAlterNote       $0F
00099715 E701                       	dc.b	smpsNoAttack, $01
00099717 E10C                       	smpsAlterNote       $0C
00099719 E701                       	dc.b	smpsNoAttack, $01
0009971B E108                       	smpsAlterNote       $08
0009971D E701                       	dc.b	smpsNoAttack, $01
0009971F E10C                       	smpsAlterNote       $0C
00099721 E701                       	dc.b	smpsNoAttack, $01
00099723 E112                       	smpsAlterNote       $12
00099725 E701                       	dc.b	smpsNoAttack, $01
00099727 E113                       	smpsAlterNote       $13
00099729 E701                       	dc.b	smpsNoAttack, $01
0009972B E10F                       	smpsAlterNote       $0F
0009972D E701                       	dc.b	smpsNoAttack, $01
0009972F E109                       	smpsAlterNote       $09
00099731 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099735 E10C                       	smpsAlterNote       $0C
00099737 E701                       	dc.b	smpsNoAttack, $01
00099739 E112                       	smpsAlterNote       $12
0009973B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009973F E10C                       	smpsAlterNote       $0C
00099741 E701                       	dc.b	smpsNoAttack, $01
00099743 E109                       	smpsAlterNote       $09
00099745 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099749 E10F                       	smpsAlterNote       $0F
0009974B E701                       	dc.b	smpsNoAttack, $01
0009974D E113                       	smpsAlterNote       $13
0009974F E701                       	dc.b	smpsNoAttack, $01
00099751 E112                       	smpsAlterNote       $12
00099753 E701                       	dc.b	smpsNoAttack, $01
00099755 E10C                       	smpsAlterNote       $0C
00099757 E701                       	dc.b	smpsNoAttack, $01
00099759 E109                       	smpsAlterNote       $09
0009975B 8001                       	dc.b	nRst, $01
0009975D E10F                       	smpsAlterNote       $0F
0009975F C60D                       	dc.b	nA5, $0D
00099761 E10C                       	smpsAlterNote       $0C
00099763 E701                       	dc.b	smpsNoAttack, $01
00099765 E108                       	smpsAlterNote       $08
00099767 E701                       	dc.b	smpsNoAttack, $01
00099769 E10C                       	smpsAlterNote       $0C
0009976B E701                       	dc.b	smpsNoAttack, $01
0009976D E112                       	smpsAlterNote       $12
0009976F E701                       	dc.b	smpsNoAttack, $01
00099771 E113                       	smpsAlterNote       $13
00099773 E701                       	dc.b	smpsNoAttack, $01
00099775 E10F                       	smpsAlterNote       $0F
00099777 E701                       	dc.b	smpsNoAttack, $01
00099779 E109                       	smpsAlterNote       $09
0009977B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009977F E10C                       	smpsAlterNote       $0C
00099781 E701                       	dc.b	smpsNoAttack, $01
00099783 E112                       	smpsAlterNote       $12
00099785 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099789 E10C                       	smpsAlterNote       $0C
0009978B E701                       	dc.b	smpsNoAttack, $01
0009978D E109                       	smpsAlterNote       $09
0009978F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099793 E10F                       	smpsAlterNote       $0F
00099795 E701                       	dc.b	smpsNoAttack, $01
00099797 E113                       	smpsAlterNote       $13
00099799 E701                       	dc.b	smpsNoAttack, $01
0009979B E112                       	smpsAlterNote       $12
0009979D E701                       	dc.b	smpsNoAttack, $01
0009979F E10C                       	smpsAlterNote       $0C
000997A1 E701                       	dc.b	smpsNoAttack, $01
000997A3 E108                       	smpsAlterNote       $08
000997A5 E701                       	dc.b	smpsNoAttack, $01
000997A7 E10C                       	smpsAlterNote       $0C
000997A9 E701                       	dc.b	smpsNoAttack, $01
000997AB E10F                       	smpsAlterNote       $0F
000997AD E701                       	dc.b	smpsNoAttack, $01
000997AF E113                       	smpsAlterNote       $13
000997B1 E701                       	dc.b	smpsNoAttack, $01
000997B3 E10F                       	smpsAlterNote       $0F
000997B5 E701                       	dc.b	smpsNoAttack, $01
000997B7 E109                       	smpsAlterNote       $09
000997B9 E701                       	dc.b	smpsNoAttack, $01
000997BB E108                       	smpsAlterNote       $08
000997BD E701                       	dc.b	smpsNoAttack, $01
000997BF E10C                       	smpsAlterNote       $0C
000997C1 E701                       	dc.b	smpsNoAttack, $01
000997C3 E112                       	smpsAlterNote       $12
000997C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000997C9 E10F                       	smpsAlterNote       $0F
000997CB E701                       	dc.b	smpsNoAttack, $01
000997CD E109                       	smpsAlterNote       $09
000997CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000997D3 E10F                       	smpsAlterNote       $0F
000997D5 E701                       	dc.b	smpsNoAttack, $01
000997D7 E112                       	smpsAlterNote       $12
000997D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000997DD E10C                       	smpsAlterNote       $0C
000997DF E701                       	dc.b	smpsNoAttack, $01
000997E1 E108                       	smpsAlterNote       $08
000997E3 E701                       	dc.b	smpsNoAttack, $01
000997E5 E10C                       	smpsAlterNote       $0C
000997E7 E701                       	dc.b	smpsNoAttack, $01
000997E9 E10F                       	smpsAlterNote       $0F
000997EB E701                       	dc.b	smpsNoAttack, $01
000997ED E113                       	smpsAlterNote       $13
000997EF E701                       	dc.b	smpsNoAttack, $01
000997F1 E10F                       	smpsAlterNote       $0F
000997F3 E701                       	dc.b	smpsNoAttack, $01
000997F5 E109                       	smpsAlterNote       $09
000997F7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000997FD E601                       	smpsAlterVol        $01
000997FF E10F                       	smpsAlterNote       $0F
00099801 C604                       	dc.b	nA5, $04
00099803 E10D                       	smpsAlterNote       $0D
00099805 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0009980B E10B                       	smpsAlterNote       $0B
0009980D BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
00099815 E10F                       	smpsAlterNote       $0F
00099817 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009981B E10D                       	smpsAlterNote       $0D
0009981D C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00099823 E10C                       	smpsAlterNote       $0C
00099825 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0009982B E10A                       	smpsAlterNote       $0A
0009982D C904 8001                  	dc.b	nC6, $04, nRst, $01
00099831 E110                       	smpsAlterNote       $10
00099833 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00099837 E10F                       	smpsAlterNote       $0F
00099839 C604                       	dc.b	nA5, $04
0009983B E10D                       	smpsAlterNote       $0D
0009983D C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00099849 E109                       	smpsAlterNote       $09
0009984B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009984F E10F                       	smpsAlterNote       $0F
00099851 E701                       	dc.b	smpsNoAttack, $01
00099853 E112                       	smpsAlterNote       $12
00099855 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099859 E10C                       	smpsAlterNote       $0C
0009985B E701                       	dc.b	smpsNoAttack, $01
0009985D E108                       	smpsAlterNote       $08
0009985F E701                       	dc.b	smpsNoAttack, $01
00099861 E10C                       	smpsAlterNote       $0C
00099863 E701                       	dc.b	smpsNoAttack, $01
00099865 E10F                       	smpsAlterNote       $0F
00099867 E701                       	dc.b	smpsNoAttack, $01
00099869 E113                       	smpsAlterNote       $13
0009986B E701                       	dc.b	smpsNoAttack, $01
0009986D E10D                       	smpsAlterNote       $0D
0009986F C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00099875 E10C                       	smpsAlterNote       $0C
00099877 C10D                       	dc.b	nE5, $0D
00099879 E109                       	smpsAlterNote       $09
0009987B E701                       	dc.b	smpsNoAttack, $01
0009987D E105                       	smpsAlterNote       $05
0009987F E701                       	dc.b	smpsNoAttack, $01
00099881 E106                       	smpsAlterNote       $06
00099883 E701                       	dc.b	smpsNoAttack, $01
00099885 E10C                       	smpsAlterNote       $0C
00099887 E701                       	dc.b	smpsNoAttack, $01
00099889 E110                       	smpsAlterNote       $10
0009988B E701                       	dc.b	smpsNoAttack, $01
0009988D E10C                       	smpsAlterNote       $0C
0009988F E701                       	dc.b	smpsNoAttack, $01
00099891 E109                       	smpsAlterNote       $09
00099893 E701                       	dc.b	smpsNoAttack, $01
00099895 E105                       	smpsAlterNote       $05
00099897 E701                       	dc.b	smpsNoAttack, $01
00099899 E109                       	smpsAlterNote       $09
0009989B E701                       	dc.b	smpsNoAttack, $01
0009989D E10F                       	smpsAlterNote       $0F
0009989F E701                       	dc.b	smpsNoAttack, $01
000998A1 E110                       	smpsAlterNote       $10
000998A3 E701                       	dc.b	smpsNoAttack, $01
000998A5 E10C                       	smpsAlterNote       $0C
000998A7 E701                       	dc.b	smpsNoAttack, $01
000998A9 E106                       	smpsAlterNote       $06
000998AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000998AF E109                       	smpsAlterNote       $09
000998B1 E701                       	dc.b	smpsNoAttack, $01
000998B3 E10F                       	smpsAlterNote       $0F
000998B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000998B9 E109                       	smpsAlterNote       $09
000998BB E701                       	dc.b	smpsNoAttack, $01
000998BD E106                       	smpsAlterNote       $06
000998BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000998C3 E10C                       	smpsAlterNote       $0C
000998C5 E701                       	dc.b	smpsNoAttack, $01
000998C7 E110                       	smpsAlterNote       $10
000998C9 E701                       	dc.b	smpsNoAttack, $01
000998CB E10F                       	smpsAlterNote       $0F
000998CD E701                       	dc.b	smpsNoAttack, $01
000998CF E109                       	smpsAlterNote       $09
000998D1 E701                       	dc.b	smpsNoAttack, $01
000998D3 E105                       	smpsAlterNote       $05
000998D5 E701                       	dc.b	smpsNoAttack, $01
000998D7 E109                       	smpsAlterNote       $09
000998D9 E701                       	dc.b	smpsNoAttack, $01
000998DB E10C                       	smpsAlterNote       $0C
000998DD E701                       	dc.b	smpsNoAttack, $01
000998DF E110                       	smpsAlterNote       $10
000998E1 E701                       	dc.b	smpsNoAttack, $01
000998E3 E10C                       	smpsAlterNote       $0C
000998E5 E701                       	dc.b	smpsNoAttack, $01
000998E7 E106                       	smpsAlterNote       $06
000998E9 E701                       	dc.b	smpsNoAttack, $01
000998EB E105                       	smpsAlterNote       $05
000998ED E701                       	dc.b	smpsNoAttack, $01
000998EF E109                       	smpsAlterNote       $09
000998F1 E701                       	dc.b	smpsNoAttack, $01
000998F3 E10F                       	smpsAlterNote       $0F
000998F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000998F9 E10C                       	smpsAlterNote       $0C
000998FB E701                       	dc.b	smpsNoAttack, $01
000998FD E106                       	smpsAlterNote       $06
000998FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099903 E10C                       	smpsAlterNote       $0C
00099905 E701                       	dc.b	smpsNoAttack, $01
00099907 E10F                       	smpsAlterNote       $0F
00099909 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009990D E109                       	smpsAlterNote       $09
0009990F E701                       	dc.b	smpsNoAttack, $01
00099911 E105                       	smpsAlterNote       $05
00099913 E701                       	dc.b	smpsNoAttack, $01
00099915 E106                       	smpsAlterNote       $06
00099917 E701                       	dc.b	smpsNoAttack, $01
00099919 E10C                       	smpsAlterNote       $0C
0009991B E701                       	dc.b	smpsNoAttack, $01
0009991D E110                       	smpsAlterNote       $10
0009991F E701                       	dc.b	smpsNoAttack, $01
00099921 E10C                       	smpsAlterNote       $0C
00099923 E701                       	dc.b	smpsNoAttack, $01
00099925 E109                       	smpsAlterNote       $09
00099927 E701                       	dc.b	smpsNoAttack, $01
00099929 E105                       	smpsAlterNote       $05
0009992B E701                       	dc.b	smpsNoAttack, $01
0009992D E109                       	smpsAlterNote       $09
0009992F E701                       	dc.b	smpsNoAttack, $01
00099931 E10F                       	smpsAlterNote       $0F
00099933 E701                       	dc.b	smpsNoAttack, $01
00099935 E110                       	smpsAlterNote       $10
00099937 E701                       	dc.b	smpsNoAttack, $01
00099939 E10C                       	smpsAlterNote       $0C
0009993B E701                       	dc.b	smpsNoAttack, $01
0009993D E106                       	smpsAlterNote       $06
0009993F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099943 E109                       	smpsAlterNote       $09
00099945 E701                       	dc.b	smpsNoAttack, $01
00099947 E10F                       	smpsAlterNote       $0F
00099949 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009994D E109                       	smpsAlterNote       $09
0009994F E701                       	dc.b	smpsNoAttack, $01
00099951 E106                       	smpsAlterNote       $06
00099953 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099957 E10C                       	smpsAlterNote       $0C
00099959 E701                       	dc.b	smpsNoAttack, $01
0009995B E110                       	smpsAlterNote       $10
0009995D E701                       	dc.b	smpsNoAttack, $01
0009995F E10F                       	smpsAlterNote       $0F
00099961 E701                       	dc.b	smpsNoAttack, $01
00099963 E109                       	smpsAlterNote       $09
00099965 E701                       	dc.b	smpsNoAttack, $01
00099967 E105                       	smpsAlterNote       $05
00099969 E701                       	dc.b	smpsNoAttack, $01
0009996B E109                       	smpsAlterNote       $09
0009996D E701                       	dc.b	smpsNoAttack, $01
0009996F E10C                       	smpsAlterNote       $0C
00099971 E701                       	dc.b	smpsNoAttack, $01
00099973 E110                       	smpsAlterNote       $10
00099975 E701                       	dc.b	smpsNoAttack, $01
00099977 E10C                       	smpsAlterNote       $0C
00099979 E701                       	dc.b	smpsNoAttack, $01
0009997B E106                       	smpsAlterNote       $06
0009997D E701                       	dc.b	smpsNoAttack, $01
0009997F E105                       	smpsAlterNote       $05
00099981 E701                       	dc.b	smpsNoAttack, $01
00099983 E109                       	smpsAlterNote       $09
00099985 E701                       	dc.b	smpsNoAttack, $01
00099987 E10F                       	smpsAlterNote       $0F
00099989 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009998D E109                       	smpsAlterNote       $09
0009998F E701                       	dc.b	smpsNoAttack, $01
00099991 E106                       	smpsAlterNote       $06
00099993 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099997 E10C                       	smpsAlterNote       $0C
00099999 E701                       	dc.b	smpsNoAttack, $01
0009999B E110                       	smpsAlterNote       $10
0009999D E701                       	dc.b	smpsNoAttack, $01
0009999F E10F                       	smpsAlterNote       $0F
000999A1 E701                       	dc.b	smpsNoAttack, $01
000999A3 E109                       	smpsAlterNote       $09
000999A5 E701                       	dc.b	smpsNoAttack, $01
000999A7 E105                       	smpsAlterNote       $05
000999A9 E701                       	dc.b	smpsNoAttack, $01
000999AB E109                       	smpsAlterNote       $09
000999AD E701                       	dc.b	smpsNoAttack, $01
000999AF E10C                       	smpsAlterNote       $0C
000999B1 E701                       	dc.b	smpsNoAttack, $01
000999B3 E110                       	smpsAlterNote       $10
000999B5 E701                       	dc.b	smpsNoAttack, $01
000999B7 E10C                       	smpsAlterNote       $0C
000999B9 E701                       	dc.b	smpsNoAttack, $01
000999BB E106                       	smpsAlterNote       $06
000999BD E701                       	dc.b	smpsNoAttack, $01
000999BF E105                       	smpsAlterNote       $05
000999C1 E701                       	dc.b	smpsNoAttack, $01
000999C3 E109                       	smpsAlterNote       $09
000999C5 E701                       	dc.b	smpsNoAttack, $01
000999C7 E10F                       	smpsAlterNote       $0F
000999C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000999CD E10C                       	smpsAlterNote       $0C
000999CF E701                       	dc.b	smpsNoAttack, $01
000999D1 E106                       	smpsAlterNote       $06
000999D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000999D7 E10C                       	smpsAlterNote       $0C
000999D9 E701                       	dc.b	smpsNoAttack, $01
000999DB E10F                       	smpsAlterNote       $0F
000999DD E701                       	dc.b	smpsNoAttack, $01
000999DF E110                       	smpsAlterNote       $10
000999E1 8001                       	dc.b	nRst, $01
000999E3 E10F                       	smpsAlterNote       $0F
000999E5 C604                       	dc.b	nA5, $04
000999E7 E10D                       	smpsAlterNote       $0D
000999E9 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000999EF E10B                       	smpsAlterNote       $0B
000999F1 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
000999F7 E10F                       	smpsAlterNote       $0F
000999F9 C604 8001                  	dc.b	nA5, $04, nRst, $01
000999FD E10D                       	smpsAlterNote       $0D
000999FF C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00099A05 E10C                       	smpsAlterNote       $0C
00099A07 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
00099A0D E10A                       	smpsAlterNote       $0A
00099A0F C904                       	dc.b	nC6, $04
00099A11 E110                       	smpsAlterNote       $10
00099A13 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00099A17 E10F                       	smpsAlterNote       $0F
00099A19 C604                       	dc.b	nA5, $04
00099A1B E10D                       	smpsAlterNote       $0D
00099A1D C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00099A29 E109                       	smpsAlterNote       $09
00099A2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099A2F E10F                       	smpsAlterNote       $0F
00099A31 E701                       	dc.b	smpsNoAttack, $01
00099A33 E112                       	smpsAlterNote       $12
00099A35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099A39 E10C                       	smpsAlterNote       $0C
00099A3B E701                       	dc.b	smpsNoAttack, $01
00099A3D E108                       	smpsAlterNote       $08
00099A3F E701                       	dc.b	smpsNoAttack, $01
00099A41 E109                       	smpsAlterNote       $09
00099A43 E701                       	dc.b	smpsNoAttack, $01
00099A45 E10F                       	smpsAlterNote       $0F
00099A47 E701                       	dc.b	smpsNoAttack, $01
00099A49 E113                       	smpsAlterNote       $13
00099A4B E701                       	dc.b	smpsNoAttack, $01
00099A4D E10D                       	smpsAlterNote       $0D
00099A4F C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00099A55 E10C                       	smpsAlterNote       $0C
00099A57 C10D                       	dc.b	nE5, $0D
00099A59 E109                       	smpsAlterNote       $09
00099A5B E701                       	dc.b	smpsNoAttack, $01
00099A5D E106                       	smpsAlterNote       $06
00099A5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099A63 E10C                       	smpsAlterNote       $0C
00099A65 E701                       	dc.b	smpsNoAttack, $01
00099A67 E110                       	smpsAlterNote       $10
00099A69 E701                       	dc.b	smpsNoAttack, $01
00099A6B E10F                       	smpsAlterNote       $0F
00099A6D E701                       	dc.b	smpsNoAttack, $01
00099A6F E109                       	smpsAlterNote       $09
00099A71 E701                       	dc.b	smpsNoAttack, $01
00099A73 E105                       	smpsAlterNote       $05
00099A75 E701                       	dc.b	smpsNoAttack, $01
00099A77 E109                       	smpsAlterNote       $09
00099A79 E701                       	dc.b	smpsNoAttack, $01
00099A7B E10C                       	smpsAlterNote       $0C
00099A7D E701                       	dc.b	smpsNoAttack, $01
00099A7F E110                       	smpsAlterNote       $10
00099A81 E701                       	dc.b	smpsNoAttack, $01
00099A83 E10C                       	smpsAlterNote       $0C
00099A85 E701                       	dc.b	smpsNoAttack, $01
00099A87 E106                       	smpsAlterNote       $06
00099A89 E701                       	dc.b	smpsNoAttack, $01
00099A8B E105                       	smpsAlterNote       $05
00099A8D E701                       	dc.b	smpsNoAttack, $01
00099A8F E109                       	smpsAlterNote       $09
00099A91 E701                       	dc.b	smpsNoAttack, $01
00099A93 E10F                       	smpsAlterNote       $0F
00099A95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099A99 E10C                       	smpsAlterNote       $0C
00099A9B E701                       	dc.b	smpsNoAttack, $01
00099A9D E106                       	smpsAlterNote       $06
00099A9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099AA3 E10C                       	smpsAlterNote       $0C
00099AA5 E701                       	dc.b	smpsNoAttack, $01
00099AA7 E10F                       	smpsAlterNote       $0F
00099AA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099AAD E109                       	smpsAlterNote       $09
00099AAF E701                       	dc.b	smpsNoAttack, $01
00099AB1 E105                       	smpsAlterNote       $05
00099AB3 E701                       	dc.b	smpsNoAttack, $01
00099AB5 E106                       	smpsAlterNote       $06
00099AB7 E701                       	dc.b	smpsNoAttack, $01
00099AB9 E10C                       	smpsAlterNote       $0C
00099ABB E701                       	dc.b	smpsNoAttack, $01
00099ABD E110                       	smpsAlterNote       $10
00099ABF E701                       	dc.b	smpsNoAttack, $01
00099AC1 E10C                       	smpsAlterNote       $0C
00099AC3 E701                       	dc.b	smpsNoAttack, $01
00099AC5 E109                       	smpsAlterNote       $09
00099AC7 E701                       	dc.b	smpsNoAttack, $01
00099AC9 E105                       	smpsAlterNote       $05
00099ACB E701                       	dc.b	smpsNoAttack, $01
00099ACD E109                       	smpsAlterNote       $09
00099ACF E701                       	dc.b	smpsNoAttack, $01
00099AD1 E10F                       	smpsAlterNote       $0F
00099AD3 E701                       	dc.b	smpsNoAttack, $01
00099AD5 E110                       	smpsAlterNote       $10
00099AD7 E701                       	dc.b	smpsNoAttack, $01
00099AD9 E10C                       	smpsAlterNote       $0C
00099ADB E701                       	dc.b	smpsNoAttack, $01
00099ADD E106                       	smpsAlterNote       $06
00099ADF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099AE3 E109                       	smpsAlterNote       $09
00099AE5 E701                       	dc.b	smpsNoAttack, $01
00099AE7 E10F                       	smpsAlterNote       $0F
00099AE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099AED E109                       	smpsAlterNote       $09
00099AEF E701                       	dc.b	smpsNoAttack, $01
00099AF1 E106                       	smpsAlterNote       $06
00099AF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099AF7 E10C                       	smpsAlterNote       $0C
00099AF9 E701                       	dc.b	smpsNoAttack, $01
00099AFB E110                       	smpsAlterNote       $10
00099AFD E701                       	dc.b	smpsNoAttack, $01
00099AFF E10F                       	smpsAlterNote       $0F
00099B01 E701                       	dc.b	smpsNoAttack, $01
00099B03 E109                       	smpsAlterNote       $09
00099B05 E701                       	dc.b	smpsNoAttack, $01
00099B07 E105                       	smpsAlterNote       $05
00099B09 E701                       	dc.b	smpsNoAttack, $01
00099B0B E109                       	smpsAlterNote       $09
00099B0D E701                       	dc.b	smpsNoAttack, $01
00099B0F E10F                       	smpsAlterNote       $0F
00099B11 E701                       	dc.b	smpsNoAttack, $01
00099B13 E110                       	smpsAlterNote       $10
00099B15 E701                       	dc.b	smpsNoAttack, $01
00099B17 E10C                       	smpsAlterNote       $0C
00099B19 E701                       	dc.b	smpsNoAttack, $01
00099B1B E106                       	smpsAlterNote       $06
00099B1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099B21 E109                       	smpsAlterNote       $09
00099B23 E701                       	dc.b	smpsNoAttack, $01
00099B25 E10F                       	smpsAlterNote       $0F
00099B27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099B2B E109                       	smpsAlterNote       $09
00099B2D E701                       	dc.b	smpsNoAttack, $01
00099B2F E106                       	smpsAlterNote       $06
00099B31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099B35 E10C                       	smpsAlterNote       $0C
00099B37 E701                       	dc.b	smpsNoAttack, $01
00099B39 E110                       	smpsAlterNote       $10
00099B3B E701                       	dc.b	smpsNoAttack, $01
00099B3D E10F                       	smpsAlterNote       $0F
00099B3F E701                       	dc.b	smpsNoAttack, $01
00099B41 E109                       	smpsAlterNote       $09
00099B43 E701                       	dc.b	smpsNoAttack, $01
00099B45 E105                       	smpsAlterNote       $05
00099B47 E701                       	dc.b	smpsNoAttack, $01
00099B49 E109                       	smpsAlterNote       $09
00099B4B E701                       	dc.b	smpsNoAttack, $01
00099B4D E10C                       	smpsAlterNote       $0C
00099B4F E701                       	dc.b	smpsNoAttack, $01
00099B51 E110                       	smpsAlterNote       $10
00099B53 E701                       	dc.b	smpsNoAttack, $01
00099B55 E10C                       	smpsAlterNote       $0C
00099B57 E701                       	dc.b	smpsNoAttack, $01
00099B59 E106                       	smpsAlterNote       $06
00099B5B E701                       	dc.b	smpsNoAttack, $01
00099B5D E105                       	smpsAlterNote       $05
00099B5F E701                       	dc.b	smpsNoAttack, $01
00099B61 E109                       	smpsAlterNote       $09
00099B63 E701                       	dc.b	smpsNoAttack, $01
00099B65 E10F                       	smpsAlterNote       $0F
00099B67 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099B6B E10C                       	smpsAlterNote       $0C
00099B6D E701                       	dc.b	smpsNoAttack, $01
00099B6F E106                       	smpsAlterNote       $06
00099B71 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099B75 E10C                       	smpsAlterNote       $0C
00099B77 E701                       	dc.b	smpsNoAttack, $01
00099B79 E10F                       	smpsAlterNote       $0F
00099B7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099B7F E109                       	smpsAlterNote       $09
00099B81 E701                       	dc.b	smpsNoAttack, $01
00099B83 E105                       	smpsAlterNote       $05
00099B85 E701                       	dc.b	smpsNoAttack, $01
00099B87 E106                       	smpsAlterNote       $06
00099B89 E701                       	dc.b	smpsNoAttack, $01
00099B8B E10C                       	smpsAlterNote       $0C
00099B8D E701                       	dc.b	smpsNoAttack, $01
00099B8F E110                       	smpsAlterNote       $10
00099B91 E701                       	dc.b	smpsNoAttack, $01
00099B93 E10C                       	smpsAlterNote       $0C
00099B95 E701                       	dc.b	smpsNoAttack, $01
00099B97 E109                       	smpsAlterNote       $09
00099B99 E701                       	dc.b	smpsNoAttack, $01
00099B9B E105                       	smpsAlterNote       $05
00099B9D E701                       	dc.b	smpsNoAttack, $01
00099B9F E109                       	smpsAlterNote       $09
00099BA1 E701                       	dc.b	smpsNoAttack, $01
00099BA3 E10F                       	smpsAlterNote       $0F
00099BA5 E701                       	dc.b	smpsNoAttack, $01
00099BA7 E110                       	smpsAlterNote       $10
00099BA9 E701                       	dc.b	smpsNoAttack, $01
00099BAB E10C                       	smpsAlterNote       $0C
00099BAD E701                       	dc.b	smpsNoAttack, $01
00099BAF E106                       	smpsAlterNote       $06
00099BB1 E701                       	dc.b	smpsNoAttack, $01
00099BB3 E10B                       	smpsAlterNote       $0B
00099BB5 BF02                       	dc.b	nD5, $02
00099BB7 E10C                       	smpsAlterNote       $0C
00099BB9 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
00099BBF E109                       	smpsAlterNote       $09
00099BC1 E701                       	dc.b	smpsNoAttack, $01
00099BC3 E105                       	smpsAlterNote       $05
00099BC5 E701                       	dc.b	smpsNoAttack, $01
00099BC7 E109                       	smpsAlterNote       $09
00099BC9 E701                       	dc.b	smpsNoAttack, $01
00099BCB E10F                       	smpsAlterNote       $0F
00099BCD E701                       	dc.b	smpsNoAttack, $01
00099BCF E110                       	smpsAlterNote       $10
00099BD1 E701                       	dc.b	smpsNoAttack, $01
00099BD3 E10C                       	smpsAlterNote       $0C
00099BD5 E701                       	dc.b	smpsNoAttack, $01
00099BD7 E106                       	smpsAlterNote       $06
00099BD9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099BDD E109                       	smpsAlterNote       $09
00099BDF E701                       	dc.b	smpsNoAttack, $01
00099BE1 E10F                       	smpsAlterNote       $0F
00099BE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099BE7 E109                       	smpsAlterNote       $09
00099BE9 E701                       	dc.b	smpsNoAttack, $01
00099BEB E106                       	smpsAlterNote       $06
00099BED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099BF1 E10C                       	smpsAlterNote       $0C
00099BF3 E701                       	dc.b	smpsNoAttack, $01
00099BF5 E110                       	smpsAlterNote       $10
00099BF7 E701                       	dc.b	smpsNoAttack, $01
00099BF9 E10F                       	smpsAlterNote       $0F
00099BFB E701                       	dc.b	smpsNoAttack, $01
00099BFD E109                       	smpsAlterNote       $09
00099BFF E701                       	dc.b	smpsNoAttack, $01
00099C01 E105                       	smpsAlterNote       $05
00099C03 E701                       	dc.b	smpsNoAttack, $01
00099C05 E109                       	smpsAlterNote       $09
00099C07 E701                       	dc.b	smpsNoAttack, $01
00099C09 E10C                       	smpsAlterNote       $0C
00099C0B E701                       	dc.b	smpsNoAttack, $01
00099C0D E110                       	smpsAlterNote       $10
00099C0F E701                       	dc.b	smpsNoAttack, $01
00099C11 E10C                       	smpsAlterNote       $0C
00099C13 E701                       	dc.b	smpsNoAttack, $01
00099C15 E106                       	smpsAlterNote       $06
00099C17 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00099C1B E10D                       	smpsAlterNote       $0D
00099C1D C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
00099C25 E10C                       	smpsAlterNote       $0C
00099C27 C10D                       	dc.b	nE5, $0D
00099C29 E106                       	smpsAlterNote       $06
00099C2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099C2F E109                       	smpsAlterNote       $09
00099C31 E701                       	dc.b	smpsNoAttack, $01
00099C33 E10F                       	smpsAlterNote       $0F
00099C35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099C39 E109                       	smpsAlterNote       $09
00099C3B E701                       	dc.b	smpsNoAttack, $01
00099C3D E106                       	smpsAlterNote       $06
00099C3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099C43 E10C                       	smpsAlterNote       $0C
00099C45 E701                       	dc.b	smpsNoAttack, $01
00099C47 E110                       	smpsAlterNote       $10
00099C49 E701                       	dc.b	smpsNoAttack, $01
00099C4B E10F                       	smpsAlterNote       $0F
00099C4D E701                       	dc.b	smpsNoAttack, $01
00099C4F E109                       	smpsAlterNote       $09
00099C51 E701                       	dc.b	smpsNoAttack, $01
00099C53 E105                       	smpsAlterNote       $05
00099C55 E701                       	dc.b	smpsNoAttack, $01
00099C57 E106                       	smpsAlterNote       $06
00099C59 800F                       	dc.b	nRst, $0F
00099C5D E6FF                       	smpsAlterVol        $FF
00099C5F E10F                       	smpsAlterNote       $0F
00099C61 BA01                       	dc.b	nA4, $01
00099C63 E110                       	smpsAlterNote       $10
00099C65 BB02                       	dc.b	nBb4, $02
00099C67 E10F                       	smpsAlterNote       $0F
00099C69 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
00099C6F E10B                       	smpsAlterNote       $0B
00099C71 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00099C75 E10C                       	smpsAlterNote       $0C
00099C77 C103                       	dc.b	nE5, $03
00099C79 E10D                       	smpsAlterNote       $0D
00099C7B C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00099C85 E10B                       	smpsAlterNote       $0B
00099C87 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
00099C8B E104                       	smpsAlterNote       $04
00099C8D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099C91 E10A                       	smpsAlterNote       $0A
00099C93 E701                       	dc.b	smpsNoAttack, $01
00099C95 E10D                       	smpsAlterNote       $0D
00099C97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099C9B E107                       	smpsAlterNote       $07
00099C9D E701                       	dc.b	smpsNoAttack, $01
00099C9F E104                       	smpsAlterNote       $04
00099CA1 8001                       	dc.b	nRst, $01
00099CA3 E110                       	smpsAlterNote       $10
00099CA5 C703                       	dc.b	nBb5, $03
00099CA7 E10F                       	smpsAlterNote       $0F
00099CA9 C603 8001                  	dc.b	nA5, $03, nRst, $01
00099CAD E10D                       	smpsAlterNote       $0D
00099CAF C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00099CB3 E10C                       	smpsAlterNote       $0C
00099CB5 E701                       	dc.b	smpsNoAttack, $01
00099CB7 E108                       	smpsAlterNote       $08
00099CB9 E701                       	dc.b	smpsNoAttack, $01
00099CBB E109                       	smpsAlterNote       $09
00099CBD E701                       	dc.b	smpsNoAttack, $01
00099CBF E10F                       	smpsAlterNote       $0F
00099CC1 E701                       	dc.b	smpsNoAttack, $01
00099CC3 E113                       	smpsAlterNote       $13
00099CC5 E701                       	dc.b	smpsNoAttack, $01
00099CC7 E10F                       	smpsAlterNote       $0F
00099CC9 E701                       	dc.b	smpsNoAttack, $01
00099CCB E10C                       	smpsAlterNote       $0C
00099CCD E701                       	dc.b	smpsNoAttack, $01
00099CCF E108                       	smpsAlterNote       $08
00099CD1 E701                       	dc.b	smpsNoAttack, $01
00099CD3 E10C                       	smpsAlterNote       $0C
00099CD5 E701                       	dc.b	smpsNoAttack, $01
00099CD7 E112                       	smpsAlterNote       $12
00099CD9 E701                       	dc.b	smpsNoAttack, $01
00099CDB E113                       	smpsAlterNote       $13
00099CDD E701                       	dc.b	smpsNoAttack, $01
00099CDF E10F                       	smpsAlterNote       $0F
00099CE1 E701                       	dc.b	smpsNoAttack, $01
00099CE3 E109                       	smpsAlterNote       $09
00099CE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099CE9 E10C                       	smpsAlterNote       $0C
00099CEB E701                       	dc.b	smpsNoAttack, $01
00099CED E112                       	smpsAlterNote       $12
00099CEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099CF3 E10C                       	smpsAlterNote       $0C
00099CF5 E701                       	dc.b	smpsNoAttack, $01
00099CF7 E109                       	smpsAlterNote       $09
00099CF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099CFD E10F                       	smpsAlterNote       $0F
00099CFF E701                       	dc.b	smpsNoAttack, $01
00099D01 E113                       	smpsAlterNote       $13
00099D03 E701                       	dc.b	smpsNoAttack, $01
00099D05 E112                       	smpsAlterNote       $12
00099D07 E701                       	dc.b	smpsNoAttack, $01
00099D09 E10C                       	smpsAlterNote       $0C
00099D0B E701                       	dc.b	smpsNoAttack, $01
00099D0D E108                       	smpsAlterNote       $08
00099D0F E701                       	dc.b	smpsNoAttack, $01
00099D11 E10C                       	smpsAlterNote       $0C
00099D13 E701                       	dc.b	smpsNoAttack, $01
00099D15 E10F                       	smpsAlterNote       $0F
00099D17 E701                       	dc.b	smpsNoAttack, $01
00099D19 E113                       	smpsAlterNote       $13
00099D1B E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00099D1F E10B                       	smpsAlterNote       $0B
00099D21 BF03                       	dc.b	nD5, $03
00099D23 E10C                       	smpsAlterNote       $0C
00099D25 C103 8001                  	dc.b	nE5, $03, nRst, $01
00099D29 E10D                       	smpsAlterNote       $0D
00099D2B C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00099D35 E10B                       	smpsAlterNote       $0B
00099D37 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00099D43 E110                       	smpsAlterNote       $10
00099D45 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00099D49 E10F                       	smpsAlterNote       $0F
00099D4B C604                       	dc.b	nA5, $04
00099D4D E10D                       	smpsAlterNote       $0D
00099D4F C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00099D55 E109                       	smpsAlterNote       $09
00099D57 E701                       	dc.b	smpsNoAttack, $01
00099D59 E108                       	smpsAlterNote       $08
00099D5B E701                       	dc.b	smpsNoAttack, $01
00099D5D E10C                       	smpsAlterNote       $0C
00099D5F E701                       	dc.b	smpsNoAttack, $01
00099D61 E112                       	smpsAlterNote       $12
00099D63 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099D67 E10F                       	smpsAlterNote       $0F
00099D69 E701                       	dc.b	smpsNoAttack, $01
00099D6B E109                       	smpsAlterNote       $09
00099D6D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099D71 E10F                       	smpsAlterNote       $0F
00099D73 E701                       	dc.b	smpsNoAttack, $01
00099D75 E112                       	smpsAlterNote       $12
00099D77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099D7B E10C                       	smpsAlterNote       $0C
00099D7D E701                       	dc.b	smpsNoAttack, $01
00099D7F E108                       	smpsAlterNote       $08
00099D81 E701                       	dc.b	smpsNoAttack, $01
00099D83 E109                       	smpsAlterNote       $09
00099D85 E701                       	dc.b	smpsNoAttack, $01
00099D87 E10F                       	smpsAlterNote       $0F
00099D89 E701                       	dc.b	smpsNoAttack, $01
00099D8B E113                       	smpsAlterNote       $13
00099D8D E701                       	dc.b	smpsNoAttack, $01
00099D8F E10F                       	smpsAlterNote       $0F
00099D91 E701                       	dc.b	smpsNoAttack, $01
00099D93 E10C                       	smpsAlterNote       $0C
00099D95 E701                       	dc.b	smpsNoAttack, $01
00099D97 E108                       	smpsAlterNote       $08
00099D99 E701                       	dc.b	smpsNoAttack, $01
00099D9B E10C                       	smpsAlterNote       $0C
00099D9D E701                       	dc.b	smpsNoAttack, $01
00099D9F E112                       	smpsAlterNote       $12
00099DA1 E701                       	dc.b	smpsNoAttack, $01
00099DA3 E113                       	smpsAlterNote       $13
00099DA5 E701                       	dc.b	smpsNoAttack, $01
00099DA7 E10F                       	smpsAlterNote       $0F
00099DA9 E701                       	dc.b	smpsNoAttack, $01
00099DAB E109                       	smpsAlterNote       $09
00099DAD E701                       	dc.b	smpsNoAttack, $01
00099DAF E10D                       	smpsAlterNote       $0D
00099DB1 C402                       	dc.b	nG5, $02
00099DB3 E10F                       	smpsAlterNote       $0F
00099DB5 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00099DBF E10D                       	smpsAlterNote       $0D
00099DC1 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00099DC7 E10B                       	smpsAlterNote       $0B
00099DC9 BF0D                       	dc.b	nD5, $0D
00099DCB E108                       	smpsAlterNote       $08
00099DCD E701                       	dc.b	smpsNoAttack, $01
00099DCF E104                       	smpsAlterNote       $04
00099DD1 E701                       	dc.b	smpsNoAttack, $01
00099DD3 E105                       	smpsAlterNote       $05
00099DD5 E701                       	dc.b	smpsNoAttack, $01
00099DD7 E10B                       	smpsAlterNote       $0B
00099DD9 E701                       	dc.b	smpsNoAttack, $01
00099DDB E10F                       	smpsAlterNote       $0F
00099DDD E701                       	dc.b	smpsNoAttack, $01
00099DDF E10B                       	smpsAlterNote       $0B
00099DE1 E701                       	dc.b	smpsNoAttack, $01
00099DE3 E108                       	smpsAlterNote       $08
00099DE5 E701                       	dc.b	smpsNoAttack, $01
00099DE7 E104                       	smpsAlterNote       $04
00099DE9 E701                       	dc.b	smpsNoAttack, $01
00099DEB E108                       	smpsAlterNote       $08
00099DED E701                       	dc.b	smpsNoAttack, $01
00099DEF E10E                       	smpsAlterNote       $0E
00099DF1 E701                       	dc.b	smpsNoAttack, $01
00099DF3 E10F                       	smpsAlterNote       $0F
00099DF5 E701                       	dc.b	smpsNoAttack, $01
00099DF7 E10C                       	smpsAlterNote       $0C
00099DF9 C101                       	dc.b	nE5, $01
00099DFB E10D                       	smpsAlterNote       $0D
00099DFD C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00099E05 E10F                       	smpsAlterNote       $0F
00099E07 C607                       	dc.b	nA5, $07
00099E09 E10C                       	smpsAlterNote       $0C
00099E0B CD07                       	dc.b	nE6, $07
00099E0D E10D                       	smpsAlterNote       $0D
00099E0F CE06 8001                  	dc.b	nF6, $06, nRst, $01
00099E13 E10C                       	smpsAlterNote       $0C
00099E15 CD03                       	dc.b	nE6, $03
00099E17 E10A                       	smpsAlterNote       $0A
00099E19 C903 8001                  	dc.b	nC6, $03, nRst, $01
00099E1D E10D                       	smpsAlterNote       $0D
00099E1F C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00099E25 E10A                       	smpsAlterNote       $0A
00099E27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099E2B E110                       	smpsAlterNote       $10
00099E2D E701                       	dc.b	smpsNoAttack, $01
00099E2F E114                       	smpsAlterNote       $14
00099E31 E701                       	dc.b	smpsNoAttack, $01
00099E33 E113                       	smpsAlterNote       $13
00099E35 E701                       	dc.b	smpsNoAttack, $01
00099E37 E10D                       	smpsAlterNote       $0D
00099E39 E701                       	dc.b	smpsNoAttack, $01
00099E3B E109                       	smpsAlterNote       $09
00099E3D E701                       	dc.b	smpsNoAttack, $01
00099E3F E10D                       	smpsAlterNote       $0D
00099E41 E701                       	dc.b	smpsNoAttack, $01
00099E43 E110                       	smpsAlterNote       $10
00099E45 E701                       	dc.b	smpsNoAttack, $01
00099E47 E114                       	smpsAlterNote       $14
00099E49 E701                       	dc.b	smpsNoAttack, $01
00099E4B E10F                       	smpsAlterNote       $0F
00099E4D C607                       	dc.b	nA5, $07
00099E4F E10D                       	smpsAlterNote       $0D
00099E51 C40D                       	dc.b	nG5, $0D
00099E53 E10A                       	smpsAlterNote       $0A
00099E55 E701                       	dc.b	smpsNoAttack, $01
00099E57 E106                       	smpsAlterNote       $06
00099E59 E701                       	dc.b	smpsNoAttack, $01
00099E5B E10A                       	smpsAlterNote       $0A
00099E5D E701                       	dc.b	smpsNoAttack, $01
00099E5F E10D                       	smpsAlterNote       $0D
00099E61 E701                       	dc.b	smpsNoAttack, $01
00099E63 E111                       	smpsAlterNote       $11
00099E65 E701                       	dc.b	smpsNoAttack, $01
00099E67 E10D                       	smpsAlterNote       $0D
00099E69 E701                       	dc.b	smpsNoAttack, $01
00099E6B E107                       	smpsAlterNote       $07
00099E6D E701                       	dc.b	smpsNoAttack, $01
00099E6F E106                       	smpsAlterNote       $06
00099E71 E701                       	dc.b	smpsNoAttack, $01
00099E73 E10A                       	smpsAlterNote       $0A
00099E75 E701                       	dc.b	smpsNoAttack, $01
00099E77 E110                       	smpsAlterNote       $10
00099E79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099E7D E10D                       	smpsAlterNote       $0D
00099E7F E701                       	dc.b	smpsNoAttack, $01
00099E81 E107                       	smpsAlterNote       $07
00099E83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099E87 E10F                       	smpsAlterNote       $0F
00099E89 C60E                       	dc.b	nA5, $0E
00099E8B E109                       	smpsAlterNote       $09
00099E8D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099E91 E10F                       	smpsAlterNote       $0F
00099E93 E701                       	dc.b	smpsNoAttack, $01
00099E95 E112                       	smpsAlterNote       $12
00099E97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099E9B E10C                       	smpsAlterNote       $0C
00099E9D E701                       	dc.b	smpsNoAttack, $01
00099E9F E108                       	smpsAlterNote       $08
00099EA1 E701                       	dc.b	smpsNoAttack, $01
00099EA3 E109                       	smpsAlterNote       $09
00099EA5 E701                       	dc.b	smpsNoAttack, $01
00099EA7 E10F                       	smpsAlterNote       $0F
00099EA9 E701                       	dc.b	smpsNoAttack, $01
00099EAB E113                       	smpsAlterNote       $13
00099EAD E701                       	dc.b	smpsNoAttack, $01
00099EAF E10F                       	smpsAlterNote       $0F
00099EB1 E701                       	dc.b	smpsNoAttack, $01
00099EB3 E10C                       	smpsAlterNote       $0C
00099EB5 E701                       	dc.b	smpsNoAttack, $01
00099EB7 E108                       	smpsAlterNote       $08
00099EB9 E701                       	dc.b	smpsNoAttack, $01
00099EBB E109                       	smpsAlterNote       $09
00099EBD 8001                       	dc.b	nRst, $01
00099EBF E110                       	smpsAlterNote       $10
00099EC1 C70D                       	dc.b	nBb5, $0D
00099EC3 E10D                       	smpsAlterNote       $0D
00099EC5 E701                       	dc.b	smpsNoAttack, $01
00099EC7 E109                       	smpsAlterNote       $09
00099EC9 E701                       	dc.b	smpsNoAttack, $01
00099ECB E10D                       	smpsAlterNote       $0D
00099ECD E701                       	dc.b	smpsNoAttack, $01
00099ECF E113                       	smpsAlterNote       $13
00099ED1 E701                       	dc.b	smpsNoAttack, $01
00099ED3 E114                       	smpsAlterNote       $14
00099ED5 E701                       	dc.b	smpsNoAttack, $01
00099ED7 E110                       	smpsAlterNote       $10
00099ED9 E701                       	dc.b	smpsNoAttack, $01
00099EDB E10A                       	smpsAlterNote       $0A
00099EDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099EE1 E10D                       	smpsAlterNote       $0D
00099EE3 E701                       	dc.b	smpsNoAttack, $01
00099EE5 E113                       	smpsAlterNote       $13
00099EE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099EEB E10D                       	smpsAlterNote       $0D
00099EED E701                       	dc.b	smpsNoAttack, $01
00099EEF E10A                       	smpsAlterNote       $0A
00099EF1 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
00099EFB E10B                       	smpsAlterNote       $0B
00099EFD 8001                       	dc.b	nRst, $01
00099EFF E10C                       	smpsAlterNote       $0C
00099F01 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
00099F05 E10B                       	smpsAlterNote       $0B
00099F07 CB0D                       	dc.b	nD6, $0D
00099F09 E105                       	smpsAlterNote       $05
00099F0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099F0F E108                       	smpsAlterNote       $08
00099F11 E701                       	dc.b	smpsNoAttack, $01
00099F13 E10E                       	smpsAlterNote       $0E
00099F15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099F19 E108                       	smpsAlterNote       $08
00099F1B E701                       	dc.b	smpsNoAttack, $01
00099F1D E105                       	smpsAlterNote       $05
00099F1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099F23 E10B                       	smpsAlterNote       $0B
00099F25 E701                       	dc.b	smpsNoAttack, $01
00099F27 E10F                       	smpsAlterNote       $0F
00099F29 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00099F2D E10C                       	smpsAlterNote       $0C
00099F2F CC0D                       	dc.b	nEb6, $0D
00099F31 E106                       	smpsAlterNote       $06
00099F33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099F37 E109                       	smpsAlterNote       $09
00099F39 E701                       	dc.b	smpsNoAttack, $01
00099F3B E10C                       	smpsAlterNote       $0C
00099F3D 8001                       	dc.b	nRst, $01
00099F3F E10A                       	smpsAlterNote       $0A
00099F41 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00099F4D CB0E                       	dc.b	nD6, $0E
00099F4F E105                       	smpsAlterNote       $05
00099F51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099F55 E10B                       	smpsAlterNote       $0B
00099F57 E701                       	dc.b	smpsNoAttack, $01
00099F59 E10E                       	smpsAlterNote       $0E
00099F5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099F5F E108                       	smpsAlterNote       $08
00099F61 E701                       	dc.b	smpsNoAttack, $01
00099F63 E104                       	smpsAlterNote       $04
00099F65 E701                       	dc.b	smpsNoAttack, $01
00099F67 E105                       	smpsAlterNote       $05
00099F69 E701                       	dc.b	smpsNoAttack, $01
00099F6B E10B                       	smpsAlterNote       $0B
00099F6D E701                       	dc.b	smpsNoAttack, $01
00099F6F E10F                       	smpsAlterNote       $0F
00099F71 E701                       	dc.b	smpsNoAttack, $01
00099F73 E10D                       	smpsAlterNote       $0D
00099F75 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
00099F79 E10C                       	smpsAlterNote       $0C
00099F7B CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00099F7F E10A                       	smpsAlterNote       $0A
00099F81 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00099F8D CB0D                       	dc.b	nD6, $0D
00099F8F E108                       	smpsAlterNote       $08
00099F91 E701                       	dc.b	smpsNoAttack, $01
00099F93 E104                       	smpsAlterNote       $04
00099F95 E701                       	dc.b	smpsNoAttack, $01
00099F97 E105                       	smpsAlterNote       $05
00099F99 E701                       	dc.b	smpsNoAttack, $01
00099F9B E10B                       	smpsAlterNote       $0B
00099F9D E701                       	dc.b	smpsNoAttack, $01
00099F9F E10F                       	smpsAlterNote       $0F
00099FA1 E701                       	dc.b	smpsNoAttack, $01
00099FA3 E10B                       	smpsAlterNote       $0B
00099FA5 E701                       	dc.b	smpsNoAttack, $01
00099FA7 E108                       	smpsAlterNote       $08
00099FA9 E701                       	dc.b	smpsNoAttack, $01
00099FAB E104                       	smpsAlterNote       $04
00099FAD E701                       	dc.b	smpsNoAttack, $01
00099FAF E108                       	smpsAlterNote       $08
00099FB1 E701                       	dc.b	smpsNoAttack, $01
00099FB3 E10E                       	smpsAlterNote       $0E
00099FB5 E701                       	dc.b	smpsNoAttack, $01
00099FB7 E10F                       	smpsAlterNote       $0F
00099FB9 E701                       	dc.b	smpsNoAttack, $01
00099FBB E10C                       	smpsAlterNote       $0C
00099FBD CC0D                       	dc.b	nEb6, $0D
00099FBF E109                       	smpsAlterNote       $09
00099FC1 E701                       	dc.b	smpsNoAttack, $01
00099FC3 E105                       	smpsAlterNote       $05
00099FC5 E701                       	dc.b	smpsNoAttack, $01
00099FC7 E106                       	smpsAlterNote       $06
00099FC9 E701                       	dc.b	smpsNoAttack, $01
00099FCB E10C                       	smpsAlterNote       $0C
00099FCD E701                       	dc.b	smpsNoAttack, $01
00099FCF E10A                       	smpsAlterNote       $0A
00099FD1 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
00099FDD CB0D                       	dc.b	nD6, $0D
00099FDF E108                       	smpsAlterNote       $08
00099FE1 E701                       	dc.b	smpsNoAttack, $01
00099FE3 E104                       	smpsAlterNote       $04
00099FE5 E701                       	dc.b	smpsNoAttack, $01
00099FE7 E108                       	smpsAlterNote       $08
00099FE9 E701                       	dc.b	smpsNoAttack, $01
00099FEB E10B                       	smpsAlterNote       $0B
00099FED E701                       	dc.b	smpsNoAttack, $01
00099FEF E10F                       	smpsAlterNote       $0F
00099FF1 E701                       	dc.b	smpsNoAttack, $01
00099FF3 E10B                       	smpsAlterNote       $0B
00099FF5 E701                       	dc.b	smpsNoAttack, $01
00099FF7 E105                       	smpsAlterNote       $05
00099FF9 E701                       	dc.b	smpsNoAttack, $01
00099FFB E104                       	smpsAlterNote       $04
00099FFD E701                       	dc.b	smpsNoAttack, $01
00099FFF E108                       	smpsAlterNote       $08
0009A001 E701                       	dc.b	smpsNoAttack, $01
0009A003 E10E                       	smpsAlterNote       $0E
0009A005 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A009 E10B                       	smpsAlterNote       $0B
0009A00B E701                       	dc.b	smpsNoAttack, $01
0009A00D E105                       	smpsAlterNote       $05
0009A00F E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0009A017 03                         	dc.b	$03
0009A018 E601                       	smpsAlterVol        $01
0009A01A F6F1 D1                    	smpsJump            music84_Jump01
0009A01D                            
0009A01D                            ; FM5 Data
0009A01D                            music84_FM5:
0009A01F E080                       	smpsPan             panLeft, $00
0009A021 8003                       	dc.b	nRst, $03
0009A023 E10D                       	smpsAlterNote       $0D
0009A025 C203 8008                  	dc.b	nF5, $03, nRst, $08
0009A029 E10C                       	smpsAlterNote       $0C
0009A02B C103 800A                  	dc.b	nE5, $03, nRst, $0A
0009A02F E10F                       	smpsAlterNote       $0F
0009A031 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0009A037 E6FE                       	smpsAlterVol        $FE
0009A039 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0009A03F E10D                       	smpsAlterNote       $0D
0009A041 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0009A047 E10C                       	smpsAlterNote       $0C
0009A049 C102 8001                  	dc.b	nE5, $02, nRst, $01
0009A04D E10A                       	smpsAlterNote       $0A
0009A04F BD01 8001                  	dc.b	nC5, $01, nRst, $01
0009A055 03                         	dc.b	$03
0009A056                            
0009A056                            music84_Jump00:
0009A056 8004                       	dc.b	nRst, $04
0009A058 E602                       	smpsAlterVol        $02
0009A05A E10D                       	smpsAlterNote       $0D
0009A05C B60D                       	dc.b	nF4, $0D
0009A05E E107                       	smpsAlterNote       $07
0009A060 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A064 E10A                       	smpsAlterNote       $0A
0009A066 E701                       	dc.b	smpsNoAttack, $01
0009A068 E110                       	smpsAlterNote       $10
0009A06A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A06E E10A                       	smpsAlterNote       $0A
0009A070 E701                       	dc.b	smpsNoAttack, $01
0009A072 E107                       	smpsAlterNote       $07
0009A074 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A078 E10D                       	smpsAlterNote       $0D
0009A07A E701                       	dc.b	smpsNoAttack, $01
0009A07C E111                       	smpsAlterNote       $11
0009A07E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009A082 E10D                       	smpsAlterNote       $0D
0009A084 B80D                       	dc.b	nG4, $0D
0009A086 E107                       	smpsAlterNote       $07
0009A088 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A08C E10A                       	smpsAlterNote       $0A
0009A08E E701                       	dc.b	smpsNoAttack, $01
0009A090 E110                       	smpsAlterNote       $10
0009A092 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A096 E10A                       	smpsAlterNote       $0A
0009A098 E701                       	dc.b	smpsNoAttack, $01
0009A09A E107                       	smpsAlterNote       $07
0009A09C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A0A0 E10D                       	smpsAlterNote       $0D
0009A0A2 E701                       	dc.b	smpsNoAttack, $01
0009A0A4 E111                       	smpsAlterNote       $11
0009A0A6 E701                       	dc.b	smpsNoAttack, $01
0009A0A8 E110                       	smpsAlterNote       $10
0009A0AA E701                       	dc.b	smpsNoAttack, $01
0009A0AC E10A                       	smpsAlterNote       $0A
0009A0AE E701                       	dc.b	smpsNoAttack, $01
0009A0B0 E106                       	smpsAlterNote       $06
0009A0B2 E701                       	dc.b	smpsNoAttack, $01
0009A0B4 E10A                       	smpsAlterNote       $0A
0009A0B6 E701                       	dc.b	smpsNoAttack, $01
0009A0B8 E10D                       	smpsAlterNote       $0D
0009A0BA E701                       	dc.b	smpsNoAttack, $01
0009A0BC E111                       	smpsAlterNote       $11
0009A0BE E701                       	dc.b	smpsNoAttack, $01
0009A0C0 E10D                       	smpsAlterNote       $0D
0009A0C2 E701                       	dc.b	smpsNoAttack, $01
0009A0C4 E10F                       	smpsAlterNote       $0F
0009A0C6 BA0E                       	dc.b	nA4, $0E
0009A0C8 E109                       	smpsAlterNote       $09
0009A0CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A0CE E10F                       	smpsAlterNote       $0F
0009A0D0 E701                       	dc.b	smpsNoAttack, $01
0009A0D2 E112                       	smpsAlterNote       $12
0009A0D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A0D8 E10C                       	smpsAlterNote       $0C
0009A0DA E701                       	dc.b	smpsNoAttack, $01
0009A0DC E108                       	smpsAlterNote       $08
0009A0DE E701                       	dc.b	smpsNoAttack, $01
0009A0E0 E109                       	smpsAlterNote       $09
0009A0E2 E701                       	dc.b	smpsNoAttack, $01
0009A0E4 E10F                       	smpsAlterNote       $0F
0009A0E6 E701                       	dc.b	smpsNoAttack, $01
0009A0E8 E113                       	smpsAlterNote       $13
0009A0EA E701                       	dc.b	smpsNoAttack, $01
0009A0EC E10F                       	smpsAlterNote       $0F
0009A0EE E701                       	dc.b	smpsNoAttack, $01
0009A0F0 E109                       	smpsAlterNote       $09
0009A0F2 E701                       	dc.b	smpsNoAttack, $01
0009A0F4 E108                       	smpsAlterNote       $08
0009A0F6 E701                       	dc.b	smpsNoAttack, $01
0009A0F8 E10C                       	smpsAlterNote       $0C
0009A0FA E701                       	dc.b	smpsNoAttack, $01
0009A0FC E112                       	smpsAlterNote       $12
0009A0FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A102 E10F                       	smpsAlterNote       $0F
0009A104 E701                       	dc.b	smpsNoAttack, $01
0009A106 E109                       	smpsAlterNote       $09
0009A108 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A10C E10F                       	smpsAlterNote       $0F
0009A10E E701                       	dc.b	smpsNoAttack, $01
0009A110 E112                       	smpsAlterNote       $12
0009A112 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A116 E10C                       	smpsAlterNote       $0C
0009A118 E701                       	dc.b	smpsNoAttack, $01
0009A11A E108                       	smpsAlterNote       $08
0009A11C E701                       	dc.b	smpsNoAttack, $01
0009A11E E109                       	smpsAlterNote       $09
0009A120 E701                       	dc.b	smpsNoAttack, $01
0009A122 E10F                       	smpsAlterNote       $0F
0009A124 E701                       	dc.b	smpsNoAttack, $01
0009A126 E113                       	smpsAlterNote       $13
0009A128 E701                       	dc.b	smpsNoAttack, $01
0009A12A E10F                       	smpsAlterNote       $0F
0009A12C E701                       	dc.b	smpsNoAttack, $01
0009A12E E10C                       	smpsAlterNote       $0C
0009A130 E701                       	dc.b	smpsNoAttack, $01
0009A132 E108                       	smpsAlterNote       $08
0009A134 E701                       	dc.b	smpsNoAttack, $01
0009A136 E109                       	smpsAlterNote       $09
0009A138 8001                       	dc.b	nRst, $01
0009A13A E10C                       	smpsAlterNote       $0C
0009A13C B50A                       	dc.b	nE4, $0A
0009A13E E10D                       	smpsAlterNote       $0D
0009A140 B60D                       	dc.b	nF4, $0D
0009A142 E10A                       	smpsAlterNote       $0A
0009A144 E701                       	dc.b	smpsNoAttack, $01
0009A146 E106                       	smpsAlterNote       $06
0009A148 E701                       	dc.b	smpsNoAttack, $01
0009A14A E107                       	smpsAlterNote       $07
0009A14C E701                       	dc.b	smpsNoAttack, $01
0009A14E E10D                       	smpsAlterNote       $0D
0009A150 E701                       	dc.b	smpsNoAttack, $01
0009A152 E111                       	smpsAlterNote       $11
0009A154 E701                       	dc.b	smpsNoAttack, $01
0009A156 E10D                       	smpsAlterNote       $0D
0009A158 E701                       	dc.b	smpsNoAttack, $01
0009A15A E10A                       	smpsAlterNote       $0A
0009A15C E701                       	dc.b	smpsNoAttack, $01
0009A15E E106                       	smpsAlterNote       $06
0009A160 E701                       	dc.b	smpsNoAttack, $01
0009A162 E10A                       	smpsAlterNote       $0A
0009A164 E701                       	dc.b	smpsNoAttack, $01
0009A166 E110                       	smpsAlterNote       $10
0009A168 E701                       	dc.b	smpsNoAttack, $01
0009A16A E111                       	smpsAlterNote       $11
0009A16C E701                       	dc.b	smpsNoAttack, $01
0009A16E E10D                       	smpsAlterNote       $0D
0009A170 B80D                       	dc.b	nG4, $0D
0009A172 E10A                       	smpsAlterNote       $0A
0009A174 E701                       	dc.b	smpsNoAttack, $01
0009A176 E106                       	smpsAlterNote       $06
0009A178 E701                       	dc.b	smpsNoAttack, $01
0009A17A E107                       	smpsAlterNote       $07
0009A17C E701                       	dc.b	smpsNoAttack, $01
0009A17E E10D                       	smpsAlterNote       $0D
0009A180 E701                       	dc.b	smpsNoAttack, $01
0009A182 E111                       	smpsAlterNote       $11
0009A184 E701                       	dc.b	smpsNoAttack, $01
0009A186 E10D                       	smpsAlterNote       $0D
0009A188 E701                       	dc.b	smpsNoAttack, $01
0009A18A E10A                       	smpsAlterNote       $0A
0009A18C E701                       	dc.b	smpsNoAttack, $01
0009A18E E106                       	smpsAlterNote       $06
0009A190 E701                       	dc.b	smpsNoAttack, $01
0009A192 E10A                       	smpsAlterNote       $0A
0009A194 E701                       	dc.b	smpsNoAttack, $01
0009A196 E110                       	smpsAlterNote       $10
0009A198 E701                       	dc.b	smpsNoAttack, $01
0009A19A E111                       	smpsAlterNote       $11
0009A19C E701                       	dc.b	smpsNoAttack, $01
0009A19E E10D                       	smpsAlterNote       $0D
0009A1A0 E701                       	dc.b	smpsNoAttack, $01
0009A1A2 E107                       	smpsAlterNote       $07
0009A1A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A1A8 E10A                       	smpsAlterNote       $0A
0009A1AA E701                       	dc.b	smpsNoAttack, $01
0009A1AC E110                       	smpsAlterNote       $10
0009A1AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A1B2 E10D                       	smpsAlterNote       $0D
0009A1B4 8001                       	dc.b	nRst, $01
0009A1B6 E10F                       	smpsAlterNote       $0F
0009A1B8 BA0D                       	dc.b	nA4, $0D
0009A1BA E10C                       	smpsAlterNote       $0C
0009A1BC E701                       	dc.b	smpsNoAttack, $01
0009A1BE E108                       	smpsAlterNote       $08
0009A1C0 E701                       	dc.b	smpsNoAttack, $01
0009A1C2 E10C                       	smpsAlterNote       $0C
0009A1C4 E701                       	dc.b	smpsNoAttack, $01
0009A1C6 E112                       	smpsAlterNote       $12
0009A1C8 E701                       	dc.b	smpsNoAttack, $01
0009A1CA E113                       	smpsAlterNote       $13
0009A1CC E701                       	dc.b	smpsNoAttack, $01
0009A1CE E10F                       	smpsAlterNote       $0F
0009A1D0 E701                       	dc.b	smpsNoAttack, $01
0009A1D2 E109                       	smpsAlterNote       $09
0009A1D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A1D8 E10C                       	smpsAlterNote       $0C
0009A1DA E701                       	dc.b	smpsNoAttack, $01
0009A1DC E112                       	smpsAlterNote       $12
0009A1DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A1E2 E10C                       	smpsAlterNote       $0C
0009A1E4 E701                       	dc.b	smpsNoAttack, $01
0009A1E6 E109                       	smpsAlterNote       $09
0009A1E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A1EC E10F                       	smpsAlterNote       $0F
0009A1EE E701                       	dc.b	smpsNoAttack, $01
0009A1F0 E113                       	smpsAlterNote       $13
0009A1F2 E701                       	dc.b	smpsNoAttack, $01
0009A1F4 E112                       	smpsAlterNote       $12
0009A1F6 E701                       	dc.b	smpsNoAttack, $01
0009A1F8 E10C                       	smpsAlterNote       $0C
0009A1FA E701                       	dc.b	smpsNoAttack, $01
0009A1FC E108                       	smpsAlterNote       $08
0009A1FE E701                       	dc.b	smpsNoAttack, $01
0009A200 E10C                       	smpsAlterNote       $0C
0009A202 E701                       	dc.b	smpsNoAttack, $01
0009A204 E10F                       	smpsAlterNote       $0F
0009A206 E701                       	dc.b	smpsNoAttack, $01
0009A208 E113                       	smpsAlterNote       $13
0009A20A E701                       	dc.b	smpsNoAttack, $01
0009A20C E10F                       	smpsAlterNote       $0F
0009A20E E701                       	dc.b	smpsNoAttack, $01
0009A210 E109                       	smpsAlterNote       $09
0009A212 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009A216 E10D                       	smpsAlterNote       $0D
0009A218 B609 8001                  	dc.b	nF4, $09, nRst, $01
0009A21C E10C                       	smpsAlterNote       $0C
0009A21E B506 8001                  	dc.b	nE4, $06, nRst, $01
0009A222 E10B                       	smpsAlterNote       $0B
0009A224 B30D                       	dc.b	nD4, $0D
0009A226 E10C                       	smpsAlterNote       $0C
0009A228 B503 8001                  	dc.b	nE4, $03, nRst, $01
0009A22C E10D                       	smpsAlterNote       $0D
0009A22E B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0009A236 E109                       	smpsAlterNote       $09
0009A238 E701                       	dc.b	smpsNoAttack, $01
0009A23A E108                       	smpsAlterNote       $08
0009A23C E701                       	dc.b	smpsNoAttack, $01
0009A23E E10C                       	smpsAlterNote       $0C
0009A240 E701                       	dc.b	smpsNoAttack, $01
0009A242 E112                       	smpsAlterNote       $12
0009A244 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A248 E10F                       	smpsAlterNote       $0F
0009A24A E701                       	dc.b	smpsNoAttack, $01
0009A24C E109                       	smpsAlterNote       $09
0009A24E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A252 E10F                       	smpsAlterNote       $0F
0009A254 E701                       	dc.b	smpsNoAttack, $01
0009A256 E112                       	smpsAlterNote       $12
0009A258 E701                       	dc.b	smpsNoAttack, $01
0009A25A E113                       	smpsAlterNote       $13
0009A25C 8001                       	dc.b	nRst, $01
0009A25E E10D                       	smpsAlterNote       $0D
0009A260 C20D                       	dc.b	nF5, $0D
0009A262 E107                       	smpsAlterNote       $07
0009A264 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A268 E10A                       	smpsAlterNote       $0A
0009A26A E701                       	dc.b	smpsNoAttack, $01
0009A26C E110                       	smpsAlterNote       $10
0009A26E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A272 E10A                       	smpsAlterNote       $0A
0009A274 E701                       	dc.b	smpsNoAttack, $01
0009A276 E107                       	smpsAlterNote       $07
0009A278 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A27C E10D                       	smpsAlterNote       $0D
0009A27E E701                       	dc.b	smpsNoAttack, $01
0009A280 E111                       	smpsAlterNote       $11
0009A282 E701                       	dc.b	smpsNoAttack, $01
0009A284 E110                       	smpsAlterNote       $10
0009A286 E701                       	dc.b	smpsNoAttack, $01
0009A288 E10A                       	smpsAlterNote       $0A
0009A28A E701                       	dc.b	smpsNoAttack, $01
0009A28C E106                       	smpsAlterNote       $06
0009A28E E701                       	dc.b	smpsNoAttack, $01
0009A290 E10A                       	smpsAlterNote       $0A
0009A292 E701                       	dc.b	smpsNoAttack, $01
0009A294 E10D                       	smpsAlterNote       $0D
0009A296 E701                       	dc.b	smpsNoAttack, $01
0009A298 E111                       	smpsAlterNote       $11
0009A29A E701                       	dc.b	smpsNoAttack, $01
0009A29C E10D                       	smpsAlterNote       $0D
0009A29E E701                       	dc.b	smpsNoAttack, $01
0009A2A0 E107                       	smpsAlterNote       $07
0009A2A2 E701                       	dc.b	smpsNoAttack, $01
0009A2A4 E106                       	smpsAlterNote       $06
0009A2A6 E701                       	dc.b	smpsNoAttack, $01
0009A2A8 E10A                       	smpsAlterNote       $0A
0009A2AA E701                       	dc.b	smpsNoAttack, $01
0009A2AC E110                       	smpsAlterNote       $10
0009A2AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A2B2 E10D                       	smpsAlterNote       $0D
0009A2B4 E701                       	dc.b	smpsNoAttack, $01
0009A2B6 E107                       	smpsAlterNote       $07
0009A2B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A2BC E10D                       	smpsAlterNote       $0D
0009A2BE E701                       	dc.b	smpsNoAttack, $01
0009A2C0 E110                       	smpsAlterNote       $10
0009A2C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A2C6 E10A                       	smpsAlterNote       $0A
0009A2C8 E701                       	dc.b	smpsNoAttack, $01
0009A2CA E106                       	smpsAlterNote       $06
0009A2CC E701                       	dc.b	smpsNoAttack, $01
0009A2CE E107                       	smpsAlterNote       $07
0009A2D0 E701                       	dc.b	smpsNoAttack, $01
0009A2D2 E10D                       	smpsAlterNote       $0D
0009A2D4 E701                       	dc.b	smpsNoAttack, $01
0009A2D6 E111                       	smpsAlterNote       $11
0009A2D8 E701                       	dc.b	smpsNoAttack, $01
0009A2DA E10D                       	smpsAlterNote       $0D
0009A2DC E701                       	dc.b	smpsNoAttack, $01
0009A2DE E10A                       	smpsAlterNote       $0A
0009A2E0 E701                       	dc.b	smpsNoAttack, $01
0009A2E2 E106                       	smpsAlterNote       $06
0009A2E4 E701                       	dc.b	smpsNoAttack, $01
0009A2E6 E10A                       	smpsAlterNote       $0A
0009A2E8 E701                       	dc.b	smpsNoAttack, $01
0009A2EA E110                       	smpsAlterNote       $10
0009A2EC E701                       	dc.b	smpsNoAttack, $01
0009A2EE E111                       	smpsAlterNote       $11
0009A2F0 E701                       	dc.b	smpsNoAttack, $01
0009A2F2 E10D                       	smpsAlterNote       $0D
0009A2F4 E701                       	dc.b	smpsNoAttack, $01
0009A2F6 E107                       	smpsAlterNote       $07
0009A2F8 E701                       	dc.b	smpsNoAttack, $01
0009A2FA E10D                       	smpsAlterNote       $0D
0009A2FC C207                       	dc.b	nF5, $07
0009A2FE E10C                       	smpsAlterNote       $0C
0009A300 C10D                       	dc.b	nE5, $0D
0009A302 E109                       	smpsAlterNote       $09
0009A304 E701                       	dc.b	smpsNoAttack, $01
0009A306 E106                       	smpsAlterNote       $06
0009A308 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A30C E10C                       	smpsAlterNote       $0C
0009A30E E701                       	dc.b	smpsNoAttack, $01
0009A310 E110                       	smpsAlterNote       $10
0009A312 E701                       	dc.b	smpsNoAttack, $01
0009A314 E10F                       	smpsAlterNote       $0F
0009A316 E701                       	dc.b	smpsNoAttack, $01
0009A318 E109                       	smpsAlterNote       $09
0009A31A E701                       	dc.b	smpsNoAttack, $01
0009A31C E105                       	smpsAlterNote       $05
0009A31E E701                       	dc.b	smpsNoAttack, $01
0009A320 E109                       	smpsAlterNote       $09
0009A322 E701                       	dc.b	smpsNoAttack, $01
0009A324 E10C                       	smpsAlterNote       $0C
0009A326 E701                       	dc.b	smpsNoAttack, $01
0009A328 E110                       	smpsAlterNote       $10
0009A32A E701                       	dc.b	smpsNoAttack, $01
0009A32C E10B                       	smpsAlterNote       $0B
0009A32E BF0D                       	dc.b	nD5, $0D
0009A330 E108                       	smpsAlterNote       $08
0009A332 E701                       	dc.b	smpsNoAttack, $01
0009A334 E105                       	smpsAlterNote       $05
0009A336 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A33A E10B                       	smpsAlterNote       $0B
0009A33C E701                       	dc.b	smpsNoAttack, $01
0009A33E E10F                       	smpsAlterNote       $0F
0009A340 E701                       	dc.b	smpsNoAttack, $01
0009A342 E10E                       	smpsAlterNote       $0E
0009A344 E701                       	dc.b	smpsNoAttack, $01
0009A346 E108                       	smpsAlterNote       $08
0009A348 E701                       	dc.b	smpsNoAttack, $01
0009A34A E104                       	smpsAlterNote       $04
0009A34C E701                       	dc.b	smpsNoAttack, $01
0009A34E E108                       	smpsAlterNote       $08
0009A350 E701                       	dc.b	smpsNoAttack, $01
0009A352 E10E                       	smpsAlterNote       $0E
0009A354 E701                       	dc.b	smpsNoAttack, $01
0009A356 E10F                       	smpsAlterNote       $0F
0009A358 E701                       	dc.b	smpsNoAttack, $01
0009A35A E10B                       	smpsAlterNote       $0B
0009A35C E701                       	dc.b	smpsNoAttack, $01
0009A35E E105                       	smpsAlterNote       $05
0009A360 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A364 E108                       	smpsAlterNote       $08
0009A366 E701                       	dc.b	smpsNoAttack, $01
0009A368 E10E                       	smpsAlterNote       $0E
0009A36A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A36E E108                       	smpsAlterNote       $08
0009A370 E701                       	dc.b	smpsNoAttack, $01
0009A372 E105                       	smpsAlterNote       $05
0009A374 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A378 E10B                       	smpsAlterNote       $0B
0009A37A E701                       	dc.b	smpsNoAttack, $01
0009A37C E10F                       	smpsAlterNote       $0F
0009A37E E701                       	dc.b	smpsNoAttack, $01
0009A380 E10E                       	smpsAlterNote       $0E
0009A382 E701                       	dc.b	smpsNoAttack, $01
0009A384 E108                       	smpsAlterNote       $08
0009A386 E701                       	dc.b	smpsNoAttack, $01
0009A388 E104                       	smpsAlterNote       $04
0009A38A E701                       	dc.b	smpsNoAttack, $01
0009A38C E108                       	smpsAlterNote       $08
0009A38E E701                       	dc.b	smpsNoAttack, $01
0009A390 E10B                       	smpsAlterNote       $0B
0009A392 E701                       	dc.b	smpsNoAttack, $01
0009A394 E10F                       	smpsAlterNote       $0F
0009A396 E701                       	dc.b	smpsNoAttack, $01
0009A398 E10B                       	smpsAlterNote       $0B
0009A39A E701                       	dc.b	smpsNoAttack, $01
0009A39C E105                       	smpsAlterNote       $05
0009A39E E701                       	dc.b	smpsNoAttack, $01
0009A3A0 E104                       	smpsAlterNote       $04
0009A3A2 E701                       	dc.b	smpsNoAttack, $01
0009A3A4 E108                       	smpsAlterNote       $08
0009A3A6 E701                       	dc.b	smpsNoAttack, $01
0009A3A8 E10E                       	smpsAlterNote       $0E
0009A3AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A3AE E10B                       	smpsAlterNote       $0B
0009A3B0 E701                       	dc.b	smpsNoAttack, $01
0009A3B2 E105                       	smpsAlterNote       $05
0009A3B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A3B8 E10B                       	smpsAlterNote       $0B
0009A3BA E701                       	dc.b	smpsNoAttack, $01
0009A3BC E10E                       	smpsAlterNote       $0E
0009A3BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A3C2 E108                       	smpsAlterNote       $08
0009A3C4 E701                       	dc.b	smpsNoAttack, $01
0009A3C6 E105                       	smpsAlterNote       $05
0009A3C8 8001                       	dc.b	nRst, $01
0009A3CC E601                       	smpsAlterVol        $01
0009A3CE E10B                       	smpsAlterNote       $0B
0009A3D0 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0009A3DC 8004                       	dc.b	nRst, $04
0009A3E0 E6FF                       	smpsAlterVol        $FF
0009A3E2 E10D                       	smpsAlterNote       $0D
0009A3E4 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0009A3EC E10C                       	smpsAlterNote       $0C
0009A3EE E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0009A3F3 E10D                       	smpsAlterNote       $0D
0009A3F5 B60D                       	dc.b	nF4, $0D
0009A3F7 E10A                       	smpsAlterNote       $0A
0009A3F9 E701                       	dc.b	smpsNoAttack, $01
0009A3FB E106                       	smpsAlterNote       $06
0009A3FD E701                       	dc.b	smpsNoAttack, $01
0009A3FF E10A                       	smpsAlterNote       $0A
0009A401 E701                       	dc.b	smpsNoAttack, $01
0009A403 E110                       	smpsAlterNote       $10
0009A405 E701                       	dc.b	smpsNoAttack, $01
0009A407 E111                       	smpsAlterNote       $11
0009A409 E701                       	dc.b	smpsNoAttack, $01
0009A40B E10D                       	smpsAlterNote       $0D
0009A40D E701                       	dc.b	smpsNoAttack, $01
0009A40F E107                       	smpsAlterNote       $07
0009A411 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A415 E10A                       	smpsAlterNote       $0A
0009A417 E701                       	dc.b	smpsNoAttack, $01
0009A419 E110                       	smpsAlterNote       $10
0009A41B E701                       	dc.b	smpsNoAttack, $01
0009A41D E111                       	smpsAlterNote       $11
0009A41F 8001                       	dc.b	nRst, $01
0009A421 E10D                       	smpsAlterNote       $0D
0009A423 B80D                       	dc.b	nG4, $0D
0009A425 E10A                       	smpsAlterNote       $0A
0009A427 E701                       	dc.b	smpsNoAttack, $01
0009A429 E106                       	smpsAlterNote       $06
0009A42B E701                       	dc.b	smpsNoAttack, $01
0009A42D E10A                       	smpsAlterNote       $0A
0009A42F E701                       	dc.b	smpsNoAttack, $01
0009A431 E110                       	smpsAlterNote       $10
0009A433 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A437 E10D                       	smpsAlterNote       $0D
0009A439 E701                       	dc.b	smpsNoAttack, $01
0009A43B E107                       	smpsAlterNote       $07
0009A43D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A441 E10D                       	smpsAlterNote       $0D
0009A443 E701                       	dc.b	smpsNoAttack, $01
0009A445 E110                       	smpsAlterNote       $10
0009A447 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A44B E10A                       	smpsAlterNote       $0A
0009A44D E701                       	dc.b	smpsNoAttack, $01
0009A44F E106                       	smpsAlterNote       $06
0009A451 E701                       	dc.b	smpsNoAttack, $01
0009A453 E107                       	smpsAlterNote       $07
0009A455 E701                       	dc.b	smpsNoAttack, $01
0009A457 E10D                       	smpsAlterNote       $0D
0009A459 E701                       	dc.b	smpsNoAttack, $01
0009A45B E111                       	smpsAlterNote       $11
0009A45D E701                       	dc.b	smpsNoAttack, $01
0009A45F E10D                       	smpsAlterNote       $0D
0009A461 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009A465 E10F                       	smpsAlterNote       $0F
0009A467 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0009A46B E110                       	smpsAlterNote       $10
0009A46D BB03                       	dc.b	nBb4, $03
0009A46F E10F                       	smpsAlterNote       $0F
0009A471 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0009A477 E110                       	smpsAlterNote       $10
0009A479 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0009A47D E10F                       	smpsAlterNote       $0F
0009A47F C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0009A485 E110                       	smpsAlterNote       $10
0009A487 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0009A48B E10F                       	smpsAlterNote       $0F
0009A48D D20D                       	dc.b	nA6, $0D
0009A48F E10C                       	smpsAlterNote       $0C
0009A491 E701                       	dc.b	smpsNoAttack, $01
0009A493 E108                       	smpsAlterNote       $08
0009A495 E701                       	dc.b	smpsNoAttack, $01
0009A497 E10C                       	smpsAlterNote       $0C
0009A499 E701                       	dc.b	smpsNoAttack, $01
0009A49B E10F                       	smpsAlterNote       $0F
0009A49D E701                       	dc.b	smpsNoAttack, $01
0009A49F E113                       	smpsAlterNote       $13
0009A4A1 E701                       	dc.b	smpsNoAttack, $01
0009A4A3 E10F                       	smpsAlterNote       $0F
0009A4A5 E701                       	dc.b	smpsNoAttack, $01
0009A4A7 E109                       	smpsAlterNote       $09
0009A4A9 E701                       	dc.b	smpsNoAttack, $01
0009A4AB E108                       	smpsAlterNote       $08
0009A4AD E701                       	dc.b	smpsNoAttack, $01
0009A4AF E10C                       	smpsAlterNote       $0C
0009A4B1 E701                       	dc.b	smpsNoAttack, $01
0009A4B3 E112                       	smpsAlterNote       $12
0009A4B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A4B9 E10F                       	smpsAlterNote       $0F
0009A4BB E701                       	dc.b	smpsNoAttack, $01
0009A4BD E109                       	smpsAlterNote       $09
0009A4BF E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0009A4C5 E10D                       	smpsAlterNote       $0D
0009A4C7 CE07                       	dc.b	nF6, $07
0009A4C9 E10C                       	smpsAlterNote       $0C
0009A4CB CD06 8001                  	dc.b	nE6, $06, nRst, $01
0009A4CF E10D                       	smpsAlterNote       $0D
0009A4D1 CE03                       	dc.b	nF6, $03
0009A4D3 E10C                       	smpsAlterNote       $0C
0009A4D5 CC0D                       	dc.b	nEb6, $0D
0009A4D7 E109                       	smpsAlterNote       $09
0009A4D9 E701                       	dc.b	smpsNoAttack, $01
0009A4DB E106                       	smpsAlterNote       $06
0009A4DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A4E1 E10C                       	smpsAlterNote       $0C
0009A4E3 E701                       	dc.b	smpsNoAttack, $01
0009A4E5 E110                       	smpsAlterNote       $10
0009A4E7 E701                       	dc.b	smpsNoAttack, $01
0009A4E9 E10F                       	smpsAlterNote       $0F
0009A4EB E701                       	dc.b	smpsNoAttack, $01
0009A4ED E109                       	smpsAlterNote       $09
0009A4EF E701                       	dc.b	smpsNoAttack, $01
0009A4F1 E105                       	smpsAlterNote       $05
0009A4F3 E701                       	dc.b	smpsNoAttack, $01
0009A4F5 E109                       	smpsAlterNote       $09
0009A4F7 E701                       	dc.b	smpsNoAttack, $01
0009A4F9 E10C                       	smpsAlterNote       $0C
0009A4FB E701                       	dc.b	smpsNoAttack, $01
0009A4FD E110                       	smpsAlterNote       $10
0009A4FF E701                       	dc.b	smpsNoAttack, $01
0009A501 E10C                       	smpsAlterNote       $0C
0009A503 E701                       	dc.b	smpsNoAttack, $01
0009A505 E106                       	smpsAlterNote       $06
0009A507 E701                       	dc.b	smpsNoAttack, $01
0009A509 E105                       	smpsAlterNote       $05
0009A50B E701                       	dc.b	smpsNoAttack, $01
0009A50D E109                       	smpsAlterNote       $09
0009A50F E701                       	dc.b	smpsNoAttack, $01
0009A511 E10F                       	smpsAlterNote       $0F
0009A513 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A517 E10C                       	smpsAlterNote       $0C
0009A519 E701                       	dc.b	smpsNoAttack, $01
0009A51B E10B                       	smpsAlterNote       $0B
0009A51D CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0009A527 E10F                       	smpsAlterNote       $0F
0009A529 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0009A533 E10D                       	smpsAlterNote       $0D
0009A535 C203                       	dc.b	nF5, $03
0009A537 E10C                       	smpsAlterNote       $0C
0009A539 C103 8001                  	dc.b	nE5, $03, nRst, $01
0009A53D E10D                       	smpsAlterNote       $0D
0009A53F C20D                       	dc.b	nF5, $0D
0009A541 E10C                       	smpsAlterNote       $0C
0009A543 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0009A547 E10B                       	smpsAlterNote       $0B
0009A549 BF0D                       	dc.b	nD5, $0D
0009A54B E108                       	smpsAlterNote       $08
0009A54D E701                       	dc.b	smpsNoAttack, $01
0009A54F E104                       	smpsAlterNote       $04
0009A551 E701                       	dc.b	smpsNoAttack, $01
0009A553 E108                       	smpsAlterNote       $08
0009A555 E701                       	dc.b	smpsNoAttack, $01
0009A557 E10E                       	smpsAlterNote       $0E
0009A559 E701                       	dc.b	smpsNoAttack, $01
0009A55B E10F                       	smpsAlterNote       $0F
0009A55D E701                       	dc.b	smpsNoAttack, $01
0009A55F E10B                       	smpsAlterNote       $0B
0009A561 E701                       	dc.b	smpsNoAttack, $01
0009A563 E105                       	smpsAlterNote       $05
0009A565 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A569 E108                       	smpsAlterNote       $08
0009A56B E701                       	dc.b	smpsNoAttack, $01
0009A56D E10E                       	smpsAlterNote       $0E
0009A56F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A573 E108                       	smpsAlterNote       $08
0009A575 E701                       	dc.b	smpsNoAttack, $01
0009A577 E105                       	smpsAlterNote       $05
0009A579 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A57D E10B                       	smpsAlterNote       $0B
0009A57F E701                       	dc.b	smpsNoAttack, $01
0009A581 E10F                       	smpsAlterNote       $0F
0009A583 E701                       	dc.b	smpsNoAttack, $01
0009A585 E10E                       	smpsAlterNote       $0E
0009A587 E701                       	dc.b	smpsNoAttack, $01
0009A589 E108                       	smpsAlterNote       $08
0009A58B E701                       	dc.b	smpsNoAttack, $01
0009A58D E104                       	smpsAlterNote       $04
0009A58F E701                       	dc.b	smpsNoAttack, $01
0009A591 E108                       	smpsAlterNote       $08
0009A593 E701                       	dc.b	smpsNoAttack, $01
0009A595 E10B                       	smpsAlterNote       $0B
0009A597 E701                       	dc.b	smpsNoAttack, $01
0009A599 E10F                       	smpsAlterNote       $0F
0009A59B E701                       	dc.b	smpsNoAttack, $01
0009A59D E10B                       	smpsAlterNote       $0B
0009A59F E701                       	dc.b	smpsNoAttack, $01
0009A5A1 E105                       	smpsAlterNote       $05
0009A5A3 E701                       	dc.b	smpsNoAttack, $01
0009A5A5 E104                       	smpsAlterNote       $04
0009A5A7 E701                       	dc.b	smpsNoAttack, $01
0009A5A9 E108                       	smpsAlterNote       $08
0009A5AB E701                       	dc.b	smpsNoAttack, $01
0009A5AD E10E                       	smpsAlterNote       $0E
0009A5AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A5B3 E10B                       	smpsAlterNote       $0B
0009A5B5 E701                       	dc.b	smpsNoAttack, $01
0009A5B7 E105                       	smpsAlterNote       $05
0009A5B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A5BD E10B                       	smpsAlterNote       $0B
0009A5BF E701                       	dc.b	smpsNoAttack, $01
0009A5C1 E10E                       	smpsAlterNote       $0E
0009A5C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A5C7 E108                       	smpsAlterNote       $08
0009A5C9 E701                       	dc.b	smpsNoAttack, $01
0009A5CB E104                       	smpsAlterNote       $04
0009A5CD E701                       	dc.b	smpsNoAttack, $01
0009A5CF E105                       	smpsAlterNote       $05
0009A5D1 E701                       	dc.b	smpsNoAttack, $01
0009A5D3 E10B                       	smpsAlterNote       $0B
0009A5D5 E701                       	dc.b	smpsNoAttack, $01
0009A5D7 E10F                       	smpsAlterNote       $0F
0009A5D9 E701                       	dc.b	smpsNoAttack, $01
0009A5DB E10B                       	smpsAlterNote       $0B
0009A5DD E701                       	dc.b	smpsNoAttack, $01
0009A5DF E108                       	smpsAlterNote       $08
0009A5E1 E701                       	dc.b	smpsNoAttack, $01
0009A5E3 E104                       	smpsAlterNote       $04
0009A5E5 E701                       	dc.b	smpsNoAttack, $01
0009A5E7 E108                       	smpsAlterNote       $08
0009A5E9 E701                       	dc.b	smpsNoAttack, $01
0009A5EB E10E                       	smpsAlterNote       $0E
0009A5ED E701                       	dc.b	smpsNoAttack, $01
0009A5EF E10F                       	smpsAlterNote       $0F
0009A5F1 E701                       	dc.b	smpsNoAttack, $01
0009A5F3 E10B                       	smpsAlterNote       $0B
0009A5F5 E701                       	dc.b	smpsNoAttack, $01
0009A5F7 E105                       	smpsAlterNote       $05
0009A5F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A5FD E108                       	smpsAlterNote       $08
0009A5FF E701                       	dc.b	smpsNoAttack, $01
0009A601 E10E                       	smpsAlterNote       $0E
0009A603 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A607 E108                       	smpsAlterNote       $08
0009A609 E701                       	dc.b	smpsNoAttack, $01
0009A60B E105                       	smpsAlterNote       $05
0009A60D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A611 E10B                       	smpsAlterNote       $0B
0009A613 E701                       	dc.b	smpsNoAttack, $01
0009A615 E10F                       	smpsAlterNote       $0F
0009A617 E701                       	dc.b	smpsNoAttack, $01
0009A619 E10E                       	smpsAlterNote       $0E
0009A61B E701                       	dc.b	smpsNoAttack, $01
0009A61D E108                       	smpsAlterNote       $08
0009A61F E701                       	dc.b	smpsNoAttack, $01
0009A621 E104                       	smpsAlterNote       $04
0009A623 E701                       	dc.b	smpsNoAttack, $01
0009A625 E108                       	smpsAlterNote       $08
0009A627 E701                       	dc.b	smpsNoAttack, $01
0009A629 E10B                       	smpsAlterNote       $0B
0009A62B E701                       	dc.b	smpsNoAttack, $01
0009A62D E10F                       	smpsAlterNote       $0F
0009A62F E701                       	dc.b	smpsNoAttack, $01
0009A631 E10B                       	smpsAlterNote       $0B
0009A633 E701                       	dc.b	smpsNoAttack, $01
0009A635 E105                       	smpsAlterNote       $05
0009A637 E701                       	dc.b	smpsNoAttack, $01
0009A639 E104                       	smpsAlterNote       $04
0009A63B E701                       	dc.b	smpsNoAttack, $01
0009A63D E105                       	smpsAlterNote       $05
0009A63F 8001                       	dc.b	nRst, $01
0009A641 E10D                       	smpsAlterNote       $0D
0009A643 C20D                       	dc.b	nF5, $0D
0009A645 E107                       	smpsAlterNote       $07
0009A647 E701                       	dc.b	smpsNoAttack, $01
0009A649 E106                       	smpsAlterNote       $06
0009A64B E701                       	dc.b	smpsNoAttack, $01
0009A64D E10A                       	smpsAlterNote       $0A
0009A64F E701                       	dc.b	smpsNoAttack, $01
0009A651 E110                       	smpsAlterNote       $10
0009A653 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A657 E10D                       	smpsAlterNote       $0D
0009A659 E701                       	dc.b	smpsNoAttack, $01
0009A65B E107                       	smpsAlterNote       $07
0009A65D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A661 E10D                       	smpsAlterNote       $0D
0009A663 E701                       	dc.b	smpsNoAttack, $01
0009A665 E110                       	smpsAlterNote       $10
0009A667 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A66B E10A                       	smpsAlterNote       $0A
0009A66D E701                       	dc.b	smpsNoAttack, $01
0009A66F E106                       	smpsAlterNote       $06
0009A671 E701                       	dc.b	smpsNoAttack, $01
0009A673 E107                       	smpsAlterNote       $07
0009A675 E701                       	dc.b	smpsNoAttack, $01
0009A677 E10D                       	smpsAlterNote       $0D
0009A679 E701                       	dc.b	smpsNoAttack, $01
0009A67B E111                       	smpsAlterNote       $11
0009A67D E701                       	dc.b	smpsNoAttack, $01
0009A67F E10D                       	smpsAlterNote       $0D
0009A681 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009A685 E10C                       	smpsAlterNote       $0C
0009A687 C10D                       	dc.b	nE5, $0D
0009A689 E10D                       	smpsAlterNote       $0D
0009A68B C20A                       	dc.b	nF5, $0A
0009A68D E10C                       	smpsAlterNote       $0C
0009A68F C10E                       	dc.b	nE5, $0E
0009A691 E106                       	smpsAlterNote       $06
0009A693 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A697 E10C                       	smpsAlterNote       $0C
0009A699 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009A69D E10B                       	smpsAlterNote       $0B
0009A69F BF0D                       	dc.b	nD5, $0D
0009A6A1 E10C                       	smpsAlterNote       $0C
0009A6A3 C107                       	dc.b	nE5, $07
0009A6A5 E10D                       	smpsAlterNote       $0D
0009A6A7 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0009A6B1 E110                       	smpsAlterNote       $10
0009A6B3 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0009A6B9 E10F                       	smpsAlterNote       $0F
0009A6BB C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0009A6C3 E10D                       	smpsAlterNote       $0D
0009A6C5 D003                       	dc.b	nG6, $03
0009A6C9 E0C0                       	smpsPan             panCenter, $00
0009A6CB E6FF                       	smpsAlterVol        $FF
0009A6CD AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0009A6D9 8001                       	dc.b	nRst, $01
0009A6DB E10C                       	smpsAlterNote       $0C
0009A6DD A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0009A6E7 E604                       	smpsAlterVol        $04
0009A6E9 E10B                       	smpsAlterNote       $0B
0009A6EB B306 8001                  	dc.b	nD4, $06, nRst, $01
0009A6EF E10F                       	smpsAlterNote       $0F
0009A6F1 AE03                       	dc.b	nA3, $03
0009A6F3 E10D                       	smpsAlterNote       $0D
0009A6F5 B603 8001                  	dc.b	nF4, $03, nRst, $01
0009A6F9 E10C                       	smpsAlterNote       $0C
0009A6FB B506 8001                  	dc.b	nE4, $06, nRst, $01
0009A6FF E10B                       	smpsAlterNote       $0B
0009A701 B302 8001                  	dc.b	nD4, $02, nRst, $01
0009A705 E10A                       	smpsAlterNote       $0A
0009A707 B103                       	dc.b	nC4, $03
0009A709 E110                       	smpsAlterNote       $10
0009A70B AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009A70F E10F                       	smpsAlterNote       $0F
0009A711 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0009A715 E080                       	smpsPan             panLeft, $00
0009A717 01                         	dc.b	$01
0009A71A E6FB                       	smpsAlterVol        $FB
0009A71C E1E4                       	smpsAlterNote       $E4
0009A71E C501                       	dc.b	nAb5, $01
0009A720 E1F4                       	smpsAlterNote       $F4
0009A722 E701                       	dc.b	smpsNoAttack, $01
0009A724 E104                       	smpsAlterNote       $04
0009A726 E701                       	dc.b	smpsNoAttack, $01
0009A728 E114                       	smpsAlterNote       $14
0009A72A E701                       	dc.b	smpsNoAttack, $01
0009A72C E11C                       	smpsAlterNote       $1C
0009A72E E701                       	dc.b	smpsNoAttack, $01
0009A730 E1EF                       	smpsAlterNote       $EF
0009A732 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0009A735 E1FF                       	smpsAlterNote       $FF
0009A737 E701                       	dc.b	smpsNoAttack, $01
0009A739 E10F                       	smpsAlterNote       $0F
0009A73B C606                       	dc.b	nA5, $06
0009A73D E109                       	smpsAlterNote       $09
0009A73F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A743 E10F                       	smpsAlterNote       $0F
0009A745 E701                       	dc.b	smpsNoAttack, $01
0009A747 E112                       	smpsAlterNote       $12
0009A749 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A74D E10C                       	smpsAlterNote       $0C
0009A74F E701                       	dc.b	smpsNoAttack, $01
0009A751 E108                       	smpsAlterNote       $08
0009A753 E701                       	dc.b	smpsNoAttack, $01
0009A755 E109                       	smpsAlterNote       $09
0009A757 E701                       	dc.b	smpsNoAttack, $01
0009A759 E10F                       	smpsAlterNote       $0F
0009A75B E701                       	dc.b	smpsNoAttack, $01
0009A75D E113                       	smpsAlterNote       $13
0009A75F E701                       	dc.b	smpsNoAttack, $01
0009A761 E10F                       	smpsAlterNote       $0F
0009A763 E701                       	dc.b	smpsNoAttack, $01
0009A765 E10C                       	smpsAlterNote       $0C
0009A767 E701                       	dc.b	smpsNoAttack, $01
0009A769 E108                       	smpsAlterNote       $08
0009A76B E701                       	dc.b	smpsNoAttack, $01
0009A76D E10C                       	smpsAlterNote       $0C
0009A76F E701                       	dc.b	smpsNoAttack, $01
0009A771 E112                       	smpsAlterNote       $12
0009A773 E701                       	dc.b	smpsNoAttack, $01
0009A775 E113                       	smpsAlterNote       $13
0009A777 E701                       	dc.b	smpsNoAttack, $01
0009A779 E10F                       	smpsAlterNote       $0F
0009A77B E701                       	dc.b	smpsNoAttack, $01
0009A77D E109                       	smpsAlterNote       $09
0009A77F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A783 E10C                       	smpsAlterNote       $0C
0009A785 E701                       	dc.b	smpsNoAttack, $01
0009A787 E112                       	smpsAlterNote       $12
0009A789 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A78D E10C                       	smpsAlterNote       $0C
0009A78F E701                       	dc.b	smpsNoAttack, $01
0009A791 E109                       	smpsAlterNote       $09
0009A793 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A797 E10F                       	smpsAlterNote       $0F
0009A799 E701                       	dc.b	smpsNoAttack, $01
0009A79B E113                       	smpsAlterNote       $13
0009A79D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009A7A1 E10D                       	smpsAlterNote       $0D
0009A7A3 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0009A7A9 E10C                       	smpsAlterNote       $0C
0009A7AB C102 8001                  	dc.b	nE5, $02, nRst, $01
0009A7AF E10D                       	smpsAlterNote       $0D
0009A7B1 C201 8001                  	dc.b	nF5, $01, nRst, $01
0009A7B5 E10C                       	smpsAlterNote       $0C
0009A7B7 C102                       	dc.b	nE5, $02
0009A7B9 E10B                       	smpsAlterNote       $0B
0009A7BB BF02 8001                  	dc.b	nD5, $02, nRst, $01
0009A7BF E10C                       	smpsAlterNote       $0C
0009A7C1 C101 8001                  	dc.b	nE5, $01, nRst, $01
0009A7C5 E10B                       	smpsAlterNote       $0B
0009A7C7 BF02                       	dc.b	nD5, $02
0009A7C9 E10A                       	smpsAlterNote       $0A
0009A7CB BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0009A7D5 E110                       	smpsAlterNote       $10
0009A7D7 BB02                       	dc.b	nBb4, $02
0009A7D9 E10A                       	smpsAlterNote       $0A
0009A7DB BD02 8001                  	dc.b	nC5, $02, nRst, $01
0009A7DF E110                       	smpsAlterNote       $10
0009A7E1 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0009A7E5 E10F                       	smpsAlterNote       $0F
0009A7E7 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0009A7EB E110                       	smpsAlterNote       $10
0009A7ED BB02                       	dc.b	nBb4, $02
0009A7EF E10F                       	smpsAlterNote       $0F
0009A7F1 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0009A7FB E10C                       	smpsAlterNote       $0C
0009A7FD B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0009A805 E10B                       	smpsAlterNote       $0B
0009A807 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0009A80B E10F                       	smpsAlterNote       $0F
0009A80D BA02                       	dc.b	nA4, $02
0009A811 E0C0                       	smpsPan             panCenter, $00
0009A813 E601                       	smpsAlterVol        $01
0009A815 E109                       	smpsAlterNote       $09
0009A817 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0009A823 E108                       	smpsAlterNote       $08
0009A825 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0009A82B E107                       	smpsAlterNote       $07
0009A82D B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0009A833 E109                       	smpsAlterNote       $09
0009A835 B603 8001                  	dc.b	nF4, $03, nRst, $01
0009A839 E108                       	smpsAlterNote       $08
0009A83B B506 8001                  	dc.b	nE4, $06, nRst, $01
0009A83F E107                       	smpsAlterNote       $07
0009A841 B302 8001                  	dc.b	nD4, $02, nRst, $01
0009A845 E106                       	smpsAlterNote       $06
0009A847 B103                       	dc.b	nC4, $03
0009A849 E10C                       	smpsAlterNote       $0C
0009A84B AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009A851 E080                       	smpsPan             panLeft, $00
0009A853 07                         	dc.b	$07
0009A854 E6FE                       	smpsAlterVol        $FE
0009A856 E10B                       	smpsAlterNote       $0B
0009A858 B20D                       	dc.b	nCs4, $0D
0009A85A E105                       	smpsAlterNote       $05
0009A85C E701                       	dc.b	smpsNoAttack, $01
0009A85E E104                       	smpsAlterNote       $04
0009A860 E701                       	dc.b	smpsNoAttack, $01
0009A862 E108                       	smpsAlterNote       $08
0009A864 E701                       	dc.b	smpsNoAttack, $01
0009A866 E10E                       	smpsAlterNote       $0E
0009A868 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A86C E10B                       	smpsAlterNote       $0B
0009A86E E701                       	dc.b	smpsNoAttack, $01
0009A870 E105                       	smpsAlterNote       $05
0009A872 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A876 E10B                       	smpsAlterNote       $0B
0009A878 E701                       	dc.b	smpsNoAttack, $01
0009A87A E10E                       	smpsAlterNote       $0E
0009A87C E701                       	dc.b	smpsNoAttack, $01
0009A87E E10F                       	smpsAlterNote       $0F
0009A880 8001                       	dc.b	nRst, $01
0009A882 E10B                       	smpsAlterNote       $0B
0009A884 B30D                       	dc.b	nD4, $0D
0009A886 E105                       	smpsAlterNote       $05
0009A888 E701                       	dc.b	smpsNoAttack, $01
0009A88A E104                       	smpsAlterNote       $04
0009A88C E701                       	dc.b	smpsNoAttack, $01
0009A88E E108                       	smpsAlterNote       $08
0009A890 E701                       	dc.b	smpsNoAttack, $01
0009A892 E10E                       	smpsAlterNote       $0E
0009A894 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A898 E10B                       	smpsAlterNote       $0B
0009A89A E701                       	dc.b	smpsNoAttack, $01
0009A89C E105                       	smpsAlterNote       $05
0009A89E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A8A2 E10B                       	smpsAlterNote       $0B
0009A8A4 E701                       	dc.b	smpsNoAttack, $01
0009A8A6 E10E                       	smpsAlterNote       $0E
0009A8A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A8AC E108                       	smpsAlterNote       $08
0009A8AE E701                       	dc.b	smpsNoAttack, $01
0009A8B0 E104                       	smpsAlterNote       $04
0009A8B2 E701                       	dc.b	smpsNoAttack, $01
0009A8B4 E105                       	smpsAlterNote       $05
0009A8B6 E701                       	dc.b	smpsNoAttack, $01
0009A8B8 E10B                       	smpsAlterNote       $0B
0009A8BA E701                       	dc.b	smpsNoAttack, $01
0009A8BC E10F                       	smpsAlterNote       $0F
0009A8BE E701                       	dc.b	smpsNoAttack, $01
0009A8C0 E10B                       	smpsAlterNote       $0B
0009A8C2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009A8C6 E10C                       	smpsAlterNote       $0C
0009A8C8 B50D                       	dc.b	nE4, $0D
0009A8CA E106                       	smpsAlterNote       $06
0009A8CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A8D0 E10C                       	smpsAlterNote       $0C
0009A8D2 E701                       	dc.b	smpsNoAttack, $01
0009A8D4 E10F                       	smpsAlterNote       $0F
0009A8D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A8DA E109                       	smpsAlterNote       $09
0009A8DC E701                       	dc.b	smpsNoAttack, $01
0009A8DE E105                       	smpsAlterNote       $05
0009A8E0 E701                       	dc.b	smpsNoAttack, $01
0009A8E2 E106                       	smpsAlterNote       $06
0009A8E4 E701                       	dc.b	smpsNoAttack, $01
0009A8E6 E10C                       	smpsAlterNote       $0C
0009A8E8 E701                       	dc.b	smpsNoAttack, $01
0009A8EA E110                       	smpsAlterNote       $10
0009A8EC E701                       	dc.b	smpsNoAttack, $01
0009A8EE E10B                       	smpsAlterNote       $0B
0009A8F0 B30E                       	dc.b	nD4, $0E
0009A8F2 E105                       	smpsAlterNote       $05
0009A8F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A8F8 E10B                       	smpsAlterNote       $0B
0009A8FA E701                       	dc.b	smpsNoAttack, $01
0009A8FC E10E                       	smpsAlterNote       $0E
0009A8FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A902 E108                       	smpsAlterNote       $08
0009A904 E701                       	dc.b	smpsNoAttack, $01
0009A906 E104                       	smpsAlterNote       $04
0009A908 E701                       	dc.b	smpsNoAttack, $01
0009A90A E105                       	smpsAlterNote       $05
0009A90C E701                       	dc.b	smpsNoAttack, $01
0009A90E E10B                       	smpsAlterNote       $0B
0009A910 E701                       	dc.b	smpsNoAttack, $01
0009A912 E10F                       	smpsAlterNote       $0F
0009A914 E701                       	dc.b	smpsNoAttack, $01
0009A916 E10B                       	smpsAlterNote       $0B
0009A918 E701                       	dc.b	smpsNoAttack, $01
0009A91A E108                       	smpsAlterNote       $08
0009A91C E701                       	dc.b	smpsNoAttack, $01
0009A91E E104                       	smpsAlterNote       $04
0009A920 E701                       	dc.b	smpsNoAttack, $01
0009A922 E108                       	smpsAlterNote       $08
0009A924 E701                       	dc.b	smpsNoAttack, $01
0009A926 E10E                       	smpsAlterNote       $0E
0009A928 E701                       	dc.b	smpsNoAttack, $01
0009A92A E10F                       	smpsAlterNote       $0F
0009A92C E701                       	dc.b	smpsNoAttack, $01
0009A92E E10B                       	smpsAlterNote       $0B
0009A930 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0009A934 E108                       	smpsAlterNote       $08
0009A936 E701                       	dc.b	smpsNoAttack, $01
0009A938 E105                       	smpsAlterNote       $05
0009A93A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A93E E10B                       	smpsAlterNote       $0B
0009A940 E701                       	dc.b	smpsNoAttack, $01
0009A942 E10F                       	smpsAlterNote       $0F
0009A944 E701                       	dc.b	smpsNoAttack, $01
0009A946 E10E                       	smpsAlterNote       $0E
0009A948 E701                       	dc.b	smpsNoAttack, $01
0009A94A E108                       	smpsAlterNote       $08
0009A94C E701                       	dc.b	smpsNoAttack, $01
0009A94E E104                       	smpsAlterNote       $04
0009A950 E701                       	dc.b	smpsNoAttack, $01
0009A952 E108                       	smpsAlterNote       $08
0009A954 E701                       	dc.b	smpsNoAttack, $01
0009A956 E10B                       	smpsAlterNote       $0B
0009A958 E701                       	dc.b	smpsNoAttack, $01
0009A95A E10F                       	smpsAlterNote       $0F
0009A95C E701                       	dc.b	smpsNoAttack, $01
0009A95E E10B                       	smpsAlterNote       $0B
0009A960 B30D                       	dc.b	nD4, $0D
0009A962 E108                       	smpsAlterNote       $08
0009A964 E701                       	dc.b	smpsNoAttack, $01
0009A966 E105                       	smpsAlterNote       $05
0009A968 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A96C E10B                       	smpsAlterNote       $0B
0009A96E E701                       	dc.b	smpsNoAttack, $01
0009A970 E10F                       	smpsAlterNote       $0F
0009A972 E701                       	dc.b	smpsNoAttack, $01
0009A974 E10E                       	smpsAlterNote       $0E
0009A976 E701                       	dc.b	smpsNoAttack, $01
0009A978 E108                       	smpsAlterNote       $08
0009A97A E701                       	dc.b	smpsNoAttack, $01
0009A97C E104                       	smpsAlterNote       $04
0009A97E E701                       	dc.b	smpsNoAttack, $01
0009A980 E108                       	smpsAlterNote       $08
0009A982 E701                       	dc.b	smpsNoAttack, $01
0009A984 E10B                       	smpsAlterNote       $0B
0009A986 E701                       	dc.b	smpsNoAttack, $01
0009A988 E10F                       	smpsAlterNote       $0F
0009A98A E701                       	dc.b	smpsNoAttack, $01
0009A98C E10B                       	smpsAlterNote       $0B
0009A98E E701                       	dc.b	smpsNoAttack, $01
0009A990 E105                       	smpsAlterNote       $05
0009A992 E701                       	dc.b	smpsNoAttack, $01
0009A994 E104                       	smpsAlterNote       $04
0009A996 E701                       	dc.b	smpsNoAttack, $01
0009A998 E108                       	smpsAlterNote       $08
0009A99A E701                       	dc.b	smpsNoAttack, $01
0009A99C E10E                       	smpsAlterNote       $0E
0009A99E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A9A2 E10B                       	smpsAlterNote       $0B
0009A9A4 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0009A9A8 E108                       	smpsAlterNote       $08
0009A9AA E701                       	dc.b	smpsNoAttack, $01
0009A9AC E104                       	smpsAlterNote       $04
0009A9AE E701                       	dc.b	smpsNoAttack, $01
0009A9B0 E108                       	smpsAlterNote       $08
0009A9B2 E701                       	dc.b	smpsNoAttack, $01
0009A9B4 E10B                       	smpsAlterNote       $0B
0009A9B6 E701                       	dc.b	smpsNoAttack, $01
0009A9BA E0C0                       	smpsPan             panCenter, $00
0009A9BC E601                       	smpsAlterVol        $01
0009A9BE E108                       	smpsAlterNote       $08
0009A9C0 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0009A9CC 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0009A9D4 E080                       	smpsPan             panLeft, $00
0009A9D6 07                         	dc.b	$07
0009A9D7 E6FF                       	smpsAlterVol        $FF
0009A9D9 E10D                       	smpsAlterNote       $0D
0009A9DB B60D                       	dc.b	nF4, $0D
0009A9DD E10A                       	smpsAlterNote       $0A
0009A9DF E701                       	dc.b	smpsNoAttack, $01
0009A9E1 E106                       	smpsAlterNote       $06
0009A9E3 E701                       	dc.b	smpsNoAttack, $01
0009A9E5 E10A                       	smpsAlterNote       $0A
0009A9E7 E701                       	dc.b	smpsNoAttack, $01
0009A9E9 E110                       	smpsAlterNote       $10
0009A9EB E701                       	dc.b	smpsNoAttack, $01
0009A9ED E111                       	smpsAlterNote       $11
0009A9EF E701                       	dc.b	smpsNoAttack, $01
0009A9F1 E10D                       	smpsAlterNote       $0D
0009A9F3 E701                       	dc.b	smpsNoAttack, $01
0009A9F5 E107                       	smpsAlterNote       $07
0009A9F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A9FB E10A                       	smpsAlterNote       $0A
0009A9FD E701                       	dc.b	smpsNoAttack, $01
0009A9FF E110                       	smpsAlterNote       $10
0009AA01 E701                       	dc.b	smpsNoAttack, $01
0009AA03 E111                       	smpsAlterNote       $11
0009AA05 8001                       	dc.b	nRst, $01
0009AA07 E10D                       	smpsAlterNote       $0D
0009AA09 B80D                       	dc.b	nG4, $0D
0009AA0B E10A                       	smpsAlterNote       $0A
0009AA0D E701                       	dc.b	smpsNoAttack, $01
0009AA0F E106                       	smpsAlterNote       $06
0009AA11 E701                       	dc.b	smpsNoAttack, $01
0009AA13 E10A                       	smpsAlterNote       $0A
0009AA15 E701                       	dc.b	smpsNoAttack, $01
0009AA17 E110                       	smpsAlterNote       $10
0009AA19 E701                       	dc.b	smpsNoAttack, $01
0009AA1B E111                       	smpsAlterNote       $11
0009AA1D E701                       	dc.b	smpsNoAttack, $01
0009AA1F E10D                       	smpsAlterNote       $0D
0009AA21 E701                       	dc.b	smpsNoAttack, $01
0009AA23 E107                       	smpsAlterNote       $07
0009AA25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AA29 E10D                       	smpsAlterNote       $0D
0009AA2B E701                       	dc.b	smpsNoAttack, $01
0009AA2D E110                       	smpsAlterNote       $10
0009AA2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AA33 E10A                       	smpsAlterNote       $0A
0009AA35 E701                       	dc.b	smpsNoAttack, $01
0009AA37 E106                       	smpsAlterNote       $06
0009AA39 E701                       	dc.b	smpsNoAttack, $01
0009AA3B E107                       	smpsAlterNote       $07
0009AA3D E701                       	dc.b	smpsNoAttack, $01
0009AA3F E10D                       	smpsAlterNote       $0D
0009AA41 E701                       	dc.b	smpsNoAttack, $01
0009AA43 E111                       	smpsAlterNote       $11
0009AA45 E701                       	dc.b	smpsNoAttack, $01
0009AA47 E10D                       	smpsAlterNote       $0D
0009AA49 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009AA4D E10F                       	smpsAlterNote       $0F
0009AA4F BA0D                       	dc.b	nA4, $0D
0009AA51 E109                       	smpsAlterNote       $09
0009AA53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AA57 E10C                       	smpsAlterNote       $0C
0009AA59 E701                       	dc.b	smpsNoAttack, $01
0009AA5B E112                       	smpsAlterNote       $12
0009AA5D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AA61 E10C                       	smpsAlterNote       $0C
0009AA63 E701                       	dc.b	smpsNoAttack, $01
0009AA65 E109                       	smpsAlterNote       $09
0009AA67 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AA6B E10F                       	smpsAlterNote       $0F
0009AA6D E701                       	dc.b	smpsNoAttack, $01
0009AA6F E113                       	smpsAlterNote       $13
0009AA71 E701                       	dc.b	smpsNoAttack, $01
0009AA73 E112                       	smpsAlterNote       $12
0009AA75 E701                       	dc.b	smpsNoAttack, $01
0009AA77 E10C                       	smpsAlterNote       $0C
0009AA79 E701                       	dc.b	smpsNoAttack, $01
0009AA7B E108                       	smpsAlterNote       $08
0009AA7D E701                       	dc.b	smpsNoAttack, $01
0009AA7F E10C                       	smpsAlterNote       $0C
0009AA81 E701                       	dc.b	smpsNoAttack, $01
0009AA83 E10F                       	smpsAlterNote       $0F
0009AA85 E701                       	dc.b	smpsNoAttack, $01
0009AA87 E113                       	smpsAlterNote       $13
0009AA89 E701                       	dc.b	smpsNoAttack, $01
0009AA8B E10F                       	smpsAlterNote       $0F
0009AA8D E701                       	dc.b	smpsNoAttack, $01
0009AA8F E109                       	smpsAlterNote       $09
0009AA91 E701                       	dc.b	smpsNoAttack, $01
0009AA93 E108                       	smpsAlterNote       $08
0009AA95 E701                       	dc.b	smpsNoAttack, $01
0009AA97 E10C                       	smpsAlterNote       $0C
0009AA99 E701                       	dc.b	smpsNoAttack, $01
0009AA9B E112                       	smpsAlterNote       $12
0009AA9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AAA1 E10F                       	smpsAlterNote       $0F
0009AAA3 E701                       	dc.b	smpsNoAttack, $01
0009AAA5 E109                       	smpsAlterNote       $09
0009AAA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AAAB E10F                       	smpsAlterNote       $0F
0009AAAD E701                       	dc.b	smpsNoAttack, $01
0009AAAF E112                       	smpsAlterNote       $12
0009AAB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AAB5 E10C                       	smpsAlterNote       $0C
0009AAB7 E701                       	dc.b	smpsNoAttack, $01
0009AAB9 E108                       	smpsAlterNote       $08
0009AABB E701                       	dc.b	smpsNoAttack, $01
0009AABD E109                       	smpsAlterNote       $09
0009AABF E701                       	dc.b	smpsNoAttack, $01
0009AAC1 E10C                       	smpsAlterNote       $0C
0009AAC3 B50A                       	dc.b	nE4, $0A
0009AAC5 E10D                       	smpsAlterNote       $0D
0009AAC7 B60E                       	dc.b	nF4, $0E
0009AAC9 E107                       	smpsAlterNote       $07
0009AACB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AACF E10D                       	smpsAlterNote       $0D
0009AAD1 E701                       	dc.b	smpsNoAttack, $01
0009AAD3 E110                       	smpsAlterNote       $10
0009AAD5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AAD9 E10A                       	smpsAlterNote       $0A
0009AADB E701                       	dc.b	smpsNoAttack, $01
0009AADD E106                       	smpsAlterNote       $06
0009AADF E701                       	dc.b	smpsNoAttack, $01
0009AAE1 E107                       	smpsAlterNote       $07
0009AAE3 E701                       	dc.b	smpsNoAttack, $01
0009AAE5 E10D                       	smpsAlterNote       $0D
0009AAE7 E701                       	dc.b	smpsNoAttack, $01
0009AAE9 E111                       	smpsAlterNote       $11
0009AAEB E701                       	dc.b	smpsNoAttack, $01
0009AAED E10D                       	smpsAlterNote       $0D
0009AAEF B80D                       	dc.b	nG4, $0D
0009AAF1 E10A                       	smpsAlterNote       $0A
0009AAF3 E701                       	dc.b	smpsNoAttack, $01
0009AAF5 E107                       	smpsAlterNote       $07
0009AAF7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AAFB E10D                       	smpsAlterNote       $0D
0009AAFD E701                       	dc.b	smpsNoAttack, $01
0009AAFF E111                       	smpsAlterNote       $11
0009AB01 E701                       	dc.b	smpsNoAttack, $01
0009AB03 E110                       	smpsAlterNote       $10
0009AB05 E701                       	dc.b	smpsNoAttack, $01
0009AB07 E10A                       	smpsAlterNote       $0A
0009AB09 E701                       	dc.b	smpsNoAttack, $01
0009AB0B E106                       	smpsAlterNote       $06
0009AB0D E701                       	dc.b	smpsNoAttack, $01
0009AB0F E10A                       	smpsAlterNote       $0A
0009AB11 E701                       	dc.b	smpsNoAttack, $01
0009AB13 E10D                       	smpsAlterNote       $0D
0009AB15 E701                       	dc.b	smpsNoAttack, $01
0009AB17 E111                       	smpsAlterNote       $11
0009AB19 E701                       	dc.b	smpsNoAttack, $01
0009AB1B E10D                       	smpsAlterNote       $0D
0009AB1D E701                       	dc.b	smpsNoAttack, $01
0009AB1F E107                       	smpsAlterNote       $07
0009AB21 E701                       	dc.b	smpsNoAttack, $01
0009AB23 E106                       	smpsAlterNote       $06
0009AB25 E701                       	dc.b	smpsNoAttack, $01
0009AB27 E10A                       	smpsAlterNote       $0A
0009AB29 E701                       	dc.b	smpsNoAttack, $01
0009AB2B E110                       	smpsAlterNote       $10
0009AB2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AB31 E10D                       	smpsAlterNote       $0D
0009AB33 E701                       	dc.b	smpsNoAttack, $01
0009AB35 E10F                       	smpsAlterNote       $0F
0009AB37 BA0D                       	dc.b	nA4, $0D
0009AB39 E10C                       	smpsAlterNote       $0C
0009AB3B E701                       	dc.b	smpsNoAttack, $01
0009AB3D E108                       	smpsAlterNote       $08
0009AB3F E701                       	dc.b	smpsNoAttack, $01
0009AB41 E109                       	smpsAlterNote       $09
0009AB43 E701                       	dc.b	smpsNoAttack, $01
0009AB45 E10F                       	smpsAlterNote       $0F
0009AB47 E701                       	dc.b	smpsNoAttack, $01
0009AB49 E113                       	smpsAlterNote       $13
0009AB4B E701                       	dc.b	smpsNoAttack, $01
0009AB4D E10F                       	smpsAlterNote       $0F
0009AB4F E701                       	dc.b	smpsNoAttack, $01
0009AB51 E10C                       	smpsAlterNote       $0C
0009AB53 E701                       	dc.b	smpsNoAttack, $01
0009AB55 E108                       	smpsAlterNote       $08
0009AB57 E701                       	dc.b	smpsNoAttack, $01
0009AB59 E10C                       	smpsAlterNote       $0C
0009AB5B E701                       	dc.b	smpsNoAttack, $01
0009AB5D E112                       	smpsAlterNote       $12
0009AB5F E701                       	dc.b	smpsNoAttack, $01
0009AB61 E113                       	smpsAlterNote       $13
0009AB63 E701                       	dc.b	smpsNoAttack, $01
0009AB65 E10F                       	smpsAlterNote       $0F
0009AB67 E701                       	dc.b	smpsNoAttack, $01
0009AB69 E109                       	smpsAlterNote       $09
0009AB6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AB6F E10C                       	smpsAlterNote       $0C
0009AB71 E701                       	dc.b	smpsNoAttack, $01
0009AB73 E112                       	smpsAlterNote       $12
0009AB75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AB79 E10C                       	smpsAlterNote       $0C
0009AB7B E701                       	dc.b	smpsNoAttack, $01
0009AB7D E109                       	smpsAlterNote       $09
0009AB7F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AB83 E10F                       	smpsAlterNote       $0F
0009AB85 E701                       	dc.b	smpsNoAttack, $01
0009AB87 E113                       	smpsAlterNote       $13
0009AB89 E701                       	dc.b	smpsNoAttack, $01
0009AB8B E112                       	smpsAlterNote       $12
0009AB8D E701                       	dc.b	smpsNoAttack, $01
0009AB8F E10C                       	smpsAlterNote       $0C
0009AB91 E701                       	dc.b	smpsNoAttack, $01
0009AB93 E109                       	smpsAlterNote       $09
0009AB95 8001                       	dc.b	nRst, $01
0009AB97 E10D                       	smpsAlterNote       $0D
0009AB99 B60A                       	dc.b	nF4, $0A
0009AB9B E10C                       	smpsAlterNote       $0C
0009AB9D B506 8001                  	dc.b	nE4, $06, nRst, $01
0009ABA1 E10B                       	smpsAlterNote       $0B
0009ABA3 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0009ABA7 E10C                       	smpsAlterNote       $0C
0009ABA9 B503                       	dc.b	nE4, $03
0009ABAB E10D                       	smpsAlterNote       $0D
0009ABAD B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0009ABB7 E10C                       	smpsAlterNote       $0C
0009ABB9 E701                       	dc.b	smpsNoAttack, $01
0009ABBB E108                       	smpsAlterNote       $08
0009ABBD E701                       	dc.b	smpsNoAttack, $01
0009ABBF E10C                       	smpsAlterNote       $0C
0009ABC1 E701                       	dc.b	smpsNoAttack, $01
0009ABC3 E112                       	smpsAlterNote       $12
0009ABC5 E701                       	dc.b	smpsNoAttack, $01
0009ABC7 E113                       	smpsAlterNote       $13
0009ABC9 E701                       	dc.b	smpsNoAttack, $01
0009ABCB E10F                       	smpsAlterNote       $0F
0009ABCD E701                       	dc.b	smpsNoAttack, $01
0009ABCF E109                       	smpsAlterNote       $09
0009ABD1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ABD5 E10C                       	smpsAlterNote       $0C
0009ABD7 E701                       	dc.b	smpsNoAttack, $01
0009ABD9 E112                       	smpsAlterNote       $12
0009ABDB E701                       	dc.b	smpsNoAttack, $01
0009ABDD E113                       	smpsAlterNote       $13
0009ABDF 8001                       	dc.b	nRst, $01
0009ABE1 E10D                       	smpsAlterNote       $0D
0009ABE3 C20D                       	dc.b	nF5, $0D
0009ABE5 E10A                       	smpsAlterNote       $0A
0009ABE7 E701                       	dc.b	smpsNoAttack, $01
0009ABE9 E106                       	smpsAlterNote       $06
0009ABEB E701                       	dc.b	smpsNoAttack, $01
0009ABED E10A                       	smpsAlterNote       $0A
0009ABEF E701                       	dc.b	smpsNoAttack, $01
0009ABF1 E110                       	smpsAlterNote       $10
0009ABF3 E701                       	dc.b	smpsNoAttack, $01
0009ABF5 E111                       	smpsAlterNote       $11
0009ABF7 E701                       	dc.b	smpsNoAttack, $01
0009ABF9 E10D                       	smpsAlterNote       $0D
0009ABFB E701                       	dc.b	smpsNoAttack, $01
0009ABFD E107                       	smpsAlterNote       $07
0009ABFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AC03 E10A                       	smpsAlterNote       $0A
0009AC05 E701                       	dc.b	smpsNoAttack, $01
0009AC07 E110                       	smpsAlterNote       $10
0009AC09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AC0D E10A                       	smpsAlterNote       $0A
0009AC0F E701                       	dc.b	smpsNoAttack, $01
0009AC11 E107                       	smpsAlterNote       $07
0009AC13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AC17 E10D                       	smpsAlterNote       $0D
0009AC19 E701                       	dc.b	smpsNoAttack, $01
0009AC1B E111                       	smpsAlterNote       $11
0009AC1D E701                       	dc.b	smpsNoAttack, $01
0009AC1F E110                       	smpsAlterNote       $10
0009AC21 E701                       	dc.b	smpsNoAttack, $01
0009AC23 E10A                       	smpsAlterNote       $0A
0009AC25 E701                       	dc.b	smpsNoAttack, $01
0009AC27 E106                       	smpsAlterNote       $06
0009AC29 E701                       	dc.b	smpsNoAttack, $01
0009AC2B E10A                       	smpsAlterNote       $0A
0009AC2D E701                       	dc.b	smpsNoAttack, $01
0009AC2F E10D                       	smpsAlterNote       $0D
0009AC31 E701                       	dc.b	smpsNoAttack, $01
0009AC33 E111                       	smpsAlterNote       $11
0009AC35 E701                       	dc.b	smpsNoAttack, $01
0009AC37 E10D                       	smpsAlterNote       $0D
0009AC39 E701                       	dc.b	smpsNoAttack, $01
0009AC3B E107                       	smpsAlterNote       $07
0009AC3D E701                       	dc.b	smpsNoAttack, $01
0009AC3F E106                       	smpsAlterNote       $06
0009AC41 E701                       	dc.b	smpsNoAttack, $01
0009AC43 E10A                       	smpsAlterNote       $0A
0009AC45 E701                       	dc.b	smpsNoAttack, $01
0009AC47 E110                       	smpsAlterNote       $10
0009AC49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AC4D E10D                       	smpsAlterNote       $0D
0009AC4F E701                       	dc.b	smpsNoAttack, $01
0009AC51 E107                       	smpsAlterNote       $07
0009AC53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AC57 E10D                       	smpsAlterNote       $0D
0009AC59 E701                       	dc.b	smpsNoAttack, $01
0009AC5B E110                       	smpsAlterNote       $10
0009AC5D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AC61 E10A                       	smpsAlterNote       $0A
0009AC63 E701                       	dc.b	smpsNoAttack, $01
0009AC65 E106                       	smpsAlterNote       $06
0009AC67 E701                       	dc.b	smpsNoAttack, $01
0009AC69 E107                       	smpsAlterNote       $07
0009AC6B E701                       	dc.b	smpsNoAttack, $01
0009AC6D E10D                       	smpsAlterNote       $0D
0009AC6F E701                       	dc.b	smpsNoAttack, $01
0009AC71 E111                       	smpsAlterNote       $11
0009AC73 E701                       	dc.b	smpsNoAttack, $01
0009AC75 E10D                       	smpsAlterNote       $0D
0009AC77 E701                       	dc.b	smpsNoAttack, $01
0009AC79 E10A                       	smpsAlterNote       $0A
0009AC7B E701                       	dc.b	smpsNoAttack, $01
0009AC7D E107                       	smpsAlterNote       $07
0009AC7F 8001                       	dc.b	nRst, $01
0009AC81 E10D                       	smpsAlterNote       $0D
0009AC83 C206 8001                  	dc.b	nF5, $06, nRst, $01
0009AC89 E601                       	smpsAlterVol        $01
0009AC8B E110                       	smpsAlterNote       $10
0009AC8D BB0D                       	dc.b	nBb4, $0D
0009AC8F E10A                       	smpsAlterNote       $0A
0009AC91 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AC95 E110                       	smpsAlterNote       $10
0009AC97 E701                       	dc.b	smpsNoAttack, $01
0009AC99 E113                       	smpsAlterNote       $13
0009AC9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AC9F E10D                       	smpsAlterNote       $0D
0009ACA1 E701                       	dc.b	smpsNoAttack, $01
0009ACA3 E109                       	smpsAlterNote       $09
0009ACA5 E701                       	dc.b	smpsNoAttack, $01
0009ACA7 E10A                       	smpsAlterNote       $0A
0009ACA9 E701                       	dc.b	smpsNoAttack, $01
0009ACAB E110                       	smpsAlterNote       $10
0009ACAD E701                       	dc.b	smpsNoAttack, $01
0009ACAF E114                       	smpsAlterNote       $14
0009ACB1 E701                       	dc.b	smpsNoAttack, $01
0009ACB3 E110                       	smpsAlterNote       $10
0009ACB5 E701                       	dc.b	smpsNoAttack, $01
0009ACB7 E10D                       	smpsAlterNote       $0D
0009ACB9 E701                       	dc.b	smpsNoAttack, $01
0009ACBB E109                       	smpsAlterNote       $09
0009ACBD E701                       	dc.b	smpsNoAttack, $01
0009ACBF E10A                       	smpsAlterNote       $0A
0009ACC1 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0009ACC5 E107                       	smpsAlterNote       $07
0009ACC7 E701                       	dc.b	smpsNoAttack, $01
0009ACC9 E103                       	smpsAlterNote       $03
0009ACCB E701                       	dc.b	smpsNoAttack, $01
0009ACCD E107                       	smpsAlterNote       $07
0009ACCF E701                       	dc.b	smpsNoAttack, $01
0009ACD1 E10D                       	smpsAlterNote       $0D
0009ACD3 E701                       	dc.b	smpsNoAttack, $01
0009ACD5 E10E                       	smpsAlterNote       $0E
0009ACD7 E701                       	dc.b	smpsNoAttack, $01
0009ACD9 E10A                       	smpsAlterNote       $0A
0009ACDB E701                       	dc.b	smpsNoAttack, $01
0009ACDD E104                       	smpsAlterNote       $04
0009ACDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ACE3 E107                       	smpsAlterNote       $07
0009ACE5 E701                       	dc.b	smpsNoAttack, $01
0009ACE7 E10D                       	smpsAlterNote       $0D
0009ACE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ACED E107                       	smpsAlterNote       $07
0009ACEF E701                       	dc.b	smpsNoAttack, $01
0009ACF1 E104                       	smpsAlterNote       $04
0009ACF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ACF7 E10B                       	smpsAlterNote       $0B
0009ACF9 BF0D                       	dc.b	nD5, $0D
0009ACFB E108                       	smpsAlterNote       $08
0009ACFD E701                       	dc.b	smpsNoAttack, $01
0009ACFF E105                       	smpsAlterNote       $05
0009AD01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AD05 E10B                       	smpsAlterNote       $0B
0009AD07 E701                       	dc.b	smpsNoAttack, $01
0009AD09 E10F                       	smpsAlterNote       $0F
0009AD0B E701                       	dc.b	smpsNoAttack, $01
0009AD0D E10E                       	smpsAlterNote       $0E
0009AD0F E701                       	dc.b	smpsNoAttack, $01
0009AD11 E108                       	smpsAlterNote       $08
0009AD13 E701                       	dc.b	smpsNoAttack, $01
0009AD15 E104                       	smpsAlterNote       $04
0009AD17 E701                       	dc.b	smpsNoAttack, $01
0009AD19 E108                       	smpsAlterNote       $08
0009AD1B E701                       	dc.b	smpsNoAttack, $01
0009AD1D E10B                       	smpsAlterNote       $0B
0009AD1F E701                       	dc.b	smpsNoAttack, $01
0009AD21 E10F                       	smpsAlterNote       $0F
0009AD23 E701                       	dc.b	smpsNoAttack, $01
0009AD25 E10B                       	smpsAlterNote       $0B
0009AD27 E701                       	dc.b	smpsNoAttack, $01
0009AD29 E105                       	smpsAlterNote       $05
0009AD2B E701                       	dc.b	smpsNoAttack, $01
0009AD2D E104                       	smpsAlterNote       $04
0009AD2F E701                       	dc.b	smpsNoAttack, $01
0009AD31 E105                       	smpsAlterNote       $05
0009AD33 8001                       	dc.b	nRst, $01
0009AD35 E10C                       	smpsAlterNote       $0C
0009AD37 C10C                       	dc.b	nE5, $0C
0009AD39 E10D                       	smpsAlterNote       $0D
0009AD3B C201                       	dc.b	nF5, $01
0009AD3D E10E                       	smpsAlterNote       $0E
0009AD3F C301 8001                  	dc.b	nFs5, $01, nRst, $01
0009AD43 E10D                       	smpsAlterNote       $0D
0009AD45 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0009AD49 E10A                       	smpsAlterNote       $0A
0009AD4B E701                       	dc.b	smpsNoAttack, $01
0009AD4D E106                       	smpsAlterNote       $06
0009AD4F E701                       	dc.b	smpsNoAttack, $01
0009AD51 E10A                       	smpsAlterNote       $0A
0009AD53 E701                       	dc.b	smpsNoAttack, $01
0009AD55 E10D                       	smpsAlterNote       $0D
0009AD57 E701                       	dc.b	smpsNoAttack, $01
0009AD59 E111                       	smpsAlterNote       $11
0009AD5B E701                       	dc.b	smpsNoAttack, $01
0009AD5D E10D                       	smpsAlterNote       $0D
0009AD5F E701                       	dc.b	smpsNoAttack, $01
0009AD61 E107                       	smpsAlterNote       $07
0009AD63 E701                       	dc.b	smpsNoAttack, $01
0009AD65 E106                       	smpsAlterNote       $06
0009AD67 E701                       	dc.b	smpsNoAttack, $01
0009AD69 E10A                       	smpsAlterNote       $0A
0009AD6B E701                       	dc.b	smpsNoAttack, $01
0009AD6D E110                       	smpsAlterNote       $10
0009AD6F E701                       	dc.b	smpsNoAttack, $01
0009AD71 E111                       	smpsAlterNote       $11
0009AD73 8001                       	dc.b	nRst, $01
0009AD75 E10D                       	smpsAlterNote       $0D
0009AD77 C40D                       	dc.b	nG5, $0D
0009AD79 E10A                       	smpsAlterNote       $0A
0009AD7B E701                       	dc.b	smpsNoAttack, $01
0009AD7D E106                       	smpsAlterNote       $06
0009AD7F E701                       	dc.b	smpsNoAttack, $01
0009AD81 E10A                       	smpsAlterNote       $0A
0009AD83 E701                       	dc.b	smpsNoAttack, $01
0009AD85 E10D                       	smpsAlterNote       $0D
0009AD87 E701                       	dc.b	smpsNoAttack, $01
0009AD89 E10C                       	smpsAlterNote       $0C
0009AD8B C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0009AD97 8001                       	dc.b	nRst, $01
0009AD99 E10D                       	smpsAlterNote       $0D
0009AD9B C20D                       	dc.b	nF5, $0D
0009AD9D E10A                       	smpsAlterNote       $0A
0009AD9F E701                       	dc.b	smpsNoAttack, $01
0009ADA1 E106                       	smpsAlterNote       $06
0009ADA3 E701                       	dc.b	smpsNoAttack, $01
0009ADA5 E10A                       	smpsAlterNote       $0A
0009ADA7 E701                       	dc.b	smpsNoAttack, $01
0009ADA9 E110                       	smpsAlterNote       $10
0009ADAB E701                       	dc.b	smpsNoAttack, $01
0009ADAD E111                       	smpsAlterNote       $11
0009ADAF E701                       	dc.b	smpsNoAttack, $01
0009ADB1 E10D                       	smpsAlterNote       $0D
0009ADB3 E701                       	dc.b	smpsNoAttack, $01
0009ADB5 E107                       	smpsAlterNote       $07
0009ADB7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ADBB E10A                       	smpsAlterNote       $0A
0009ADBD E701                       	dc.b	smpsNoAttack, $01
0009ADBF E110                       	smpsAlterNote       $10
0009ADC1 E701                       	dc.b	smpsNoAttack, $01
0009ADC3 E111                       	smpsAlterNote       $11
0009ADC5 8001                       	dc.b	nRst, $01
0009ADC7 E10F                       	smpsAlterNote       $0F
0009ADC9 C60A                       	dc.b	nA5, $0A
0009ADCB E10D                       	smpsAlterNote       $0D
0009ADCD C406 8001                  	dc.b	nG5, $06, nRst, $01
0009ADD1 E10C                       	smpsAlterNote       $0C
0009ADD3 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0009ADDF 8001                       	dc.b	nRst, $01
0009ADE1 E10D                       	smpsAlterNote       $0D
0009ADE3 C20D                       	dc.b	nF5, $0D
0009ADE5 E107                       	smpsAlterNote       $07
0009ADE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ADEB E10A                       	smpsAlterNote       $0A
0009ADED E701                       	dc.b	smpsNoAttack, $01
0009ADEF E110                       	smpsAlterNote       $10
0009ADF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ADF5 E10A                       	smpsAlterNote       $0A
0009ADF7 E701                       	dc.b	smpsNoAttack, $01
0009ADF9 E107                       	smpsAlterNote       $07
0009ADFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ADFF E10D                       	smpsAlterNote       $0D
0009AE01 E701                       	dc.b	smpsNoAttack, $01
0009AE03 E111                       	smpsAlterNote       $11
0009AE05 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009AE09 E10D                       	smpsAlterNote       $0D
0009AE0B C40D                       	dc.b	nG5, $0D
0009AE0D E107                       	smpsAlterNote       $07
0009AE0F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AE13 E10A                       	smpsAlterNote       $0A
0009AE15 E701                       	dc.b	smpsNoAttack, $01
0009AE17 E10D                       	smpsAlterNote       $0D
0009AE19 8001                       	dc.b	nRst, $01
0009AE1B E10C                       	smpsAlterNote       $0C
0009AE1D C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0009AE29 E10D                       	smpsAlterNote       $0D
0009AE2B C20E                       	dc.b	nF5, $0E
0009AE2D E107                       	smpsAlterNote       $07
0009AE2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AE33 E10D                       	smpsAlterNote       $0D
0009AE35 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009AE3B E0C0                       	smpsPan             panCenter, $00
0009AE3D E603                       	smpsAlterVol        $03
0009AE3F E108                       	smpsAlterNote       $08
0009AE41 B406                       	dc.b	nEb4, $06
0009AE43 E10C                       	smpsAlterNote       $0C
0009AE45 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009AE49 E108                       	smpsAlterNote       $08
0009AE4B B403                       	dc.b	nEb4, $03
0009AE4D E109                       	smpsAlterNote       $09
0009AE4F B803 8001                  	dc.b	nG4, $03, nRst, $01
0009AE53 E10C                       	smpsAlterNote       $0C
0009AE55 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0009AE5D 03                         	dc.b	$03
0009AE5E E6FD                       	smpsAlterVol        $FD
0009AE60 F6F1 F4                    	smpsJump            music84_Jump00
0009AE63                            
0009AE63                            ; PSG1 Data
0009AE63                            music84_PSG1:
0009AE63 E1FD                       	smpsAlterNote       $FD
0009AE65 EC04                       	smpsPSGAlterVol     $04
0009AE67 9203                       	dc.b	nF1, $03
0009AE69 E1FE                       	smpsAlterNote       $FE
0009AE6B 9603                       	dc.b	nA1, $03
0009AE6D EC04                       	smpsPSGAlterVol     $04
0009AE6F E701                       	dc.b	smpsNoAttack, $01
0009AE71 E1FF                       	smpsAlterNote       $FF
0009AE73 ECFC                       	smpsPSGAlterVol     $FC
0009AE75 9B03                       	dc.b	nD2, $03
0009AE77 E1FD                       	smpsAlterNote       $FD
0009AE79 9403                       	dc.b	nG1, $03
0009AE7B EC04                       	smpsPSGAlterVol     $04
0009AE7D E701                       	dc.b	smpsNoAttack, $01
0009AE7F E1FE                       	smpsAlterNote       $FE
0009AE81 ECFC                       	smpsPSGAlterVol     $FC
0009AE83 9703                       	dc.b	nBb1, $03
0009AE85 E1FF                       	smpsAlterNote       $FF
0009AE87 9B03                       	dc.b	nD2, $03
0009AE89 EC04                       	smpsPSGAlterVol     $04
0009AE8B E701                       	dc.b	smpsNoAttack, $01
0009AE8D E1FE                       	smpsAlterNote       $FE
0009AE8F ECFC                       	smpsPSGAlterVol     $FC
0009AE91 A002                       	dc.b	nG2, $02
0009AE93 EC04                       	smpsPSGAlterVol     $04
0009AE95 E701                       	dc.b	smpsNoAttack, $01
0009AE97 E1FF                       	smpsAlterNote       $FF
0009AE99 ECFC                       	smpsPSGAlterVol     $FC
0009AE9B A203                       	dc.b	nA2, $03
0009AE9D EC0B                       	smpsPSGAlterVol     $0B
0009AE9F 800A                       	dc.b	nRst, $0A
0009AEA1 E105                       	smpsAlterNote       $05
0009AEA3 01                         	dc.b	$01
0009AEA4 E1FC                       	smpsAlterNote       $FC
0009AEA6 01                         	dc.b	$01
0009AEA7 E105                       	smpsAlterNote       $05
0009AEA9 01                         	dc.b	$01
0009AEAA E1FD                       	smpsAlterNote       $FD
0009AEAC 01                         	dc.b	$01
0009AEAD E105                       	smpsAlterNote       $05
0009AEAF 01                         	dc.b	$01
0009AEB0 E1FD                       	smpsAlterNote       $FD
0009AEB2 01                         	dc.b	$01
0009AEB3 E1FA                       	smpsAlterNote       $FA
0009AEB5 01                         	dc.b	$01
0009AEB6 E1FC                       	smpsAlterNote       $FC
0009AEB8 01                         	dc.b	$01
0009AEB9 E105                       	smpsAlterNote       $05
0009AEBB 01                         	dc.b	$01
0009AEBC E108                       	smpsAlterNote       $08
0009AEBE 0101                       	dc.b	$01, $01
0009AEC0 E105                       	smpsAlterNote       $05
0009AEC2 01                         	dc.b	$01
0009AEC3 E1FA                       	smpsAlterNote       $FA
0009AEC5 0101                       	dc.b	$01, $01
0009AEC7 E1FD                       	smpsAlterNote       $FD
0009AEC9 01                         	dc.b	$01
0009AECA E105                       	smpsAlterNote       $05
0009AECC 01                         	dc.b	$01
0009AECD E108                       	smpsAlterNote       $08
0009AECF 01                         	dc.b	$01
0009AED0 E105                       	smpsAlterNote       $05
0009AED2 01                         	dc.b	$01
0009AED3 E1FC                       	smpsAlterNote       $FC
0009AED5 01                         	dc.b	$01
0009AED6 E105                       	smpsAlterNote       $05
0009AED8 01                         	dc.b	$01
0009AED9 E1FD                       	smpsAlterNote       $FD
0009AEDB 01                         	dc.b	$01
0009AEDC                            
0009AEDC                            music84_Jump07:
0009AEDC E105                       	smpsAlterNote       $05
0009AEDE 8001                       	dc.b	nRst, $01
0009AEE0 E1FD                       	smpsAlterNote       $FD
0009AEE2 01                         	dc.b	$01
0009AEE3 E1FA                       	smpsAlterNote       $FA
0009AEE5 01                         	dc.b	$01
0009AEE6 E1FC                       	smpsAlterNote       $FC
0009AEE8 01                         	dc.b	$01
0009AEE9 E1FD                       	smpsAlterNote       $FD
0009AEEB ECF5                       	smpsPSGAlterVol     $F5
0009AEED 9206                       	dc.b	nF1, $06
0009AEEF EC04                       	smpsPSGAlterVol     $04
0009AEF1 E701                       	dc.b	smpsNoAttack, $01
0009AEF3 EC07                       	smpsPSGAlterVol     $07
0009AEF5 8003                       	dc.b	nRst, $03
0009AEF7 ECF5                       	smpsPSGAlterVol     $F5
0009AEF9 9206                       	dc.b	nF1, $06
0009AEFB EC04                       	smpsPSGAlterVol     $04
0009AEFD E701                       	dc.b	smpsNoAttack, $01
0009AEFF EC07                       	smpsPSGAlterVol     $07
0009AF01 8006                       	dc.b	nRst, $06
0009AF03 E100                       	smpsAlterNote       $00
0009AF05 01                         	dc.b	$01
0009AF06 E104                       	smpsAlterNote       $04
0009AF08 01                         	dc.b	$01
0009AF09 E100                       	smpsAlterNote       $00
0009AF0B 01                         	dc.b	$01
0009AF0C E1FB                       	smpsAlterNote       $FB
0009AF0E 01                         	dc.b	$01
0009AF0F E1FD                       	smpsAlterNote       $FD
0009AF11 ECF5                       	smpsPSGAlterVol     $F5
0009AF13 9406                       	dc.b	nG1, $06
0009AF15 EC04                       	smpsPSGAlterVol     $04
0009AF17 E701                       	dc.b	smpsNoAttack, $01
0009AF19 EC07                       	smpsPSGAlterVol     $07
0009AF1B 8003                       	dc.b	nRst, $03
0009AF1D ECF5                       	smpsPSGAlterVol     $F5
0009AF1F 9407                       	dc.b	nG1, $07
0009AF21 EC0B                       	smpsPSGAlterVol     $0B
0009AF23 8006                       	dc.b	nRst, $06
0009AF25 E100                       	smpsAlterNote       $00
0009AF27 01                         	dc.b	$01
0009AF28 E103                       	smpsAlterNote       $03
0009AF2A 0101                       	dc.b	$01, $01
0009AF2C E1FD                       	smpsAlterNote       $FD
0009AF2E 01                         	dc.b	$01
0009AF2F ECF5                       	smpsPSGAlterVol     $F5
0009AF31 9207                       	dc.b	nF1, $07
0009AF33 EC0B                       	smpsPSGAlterVol     $0B
0009AF35 8004                       	dc.b	nRst, $04
0009AF37 ECF5                       	smpsPSGAlterVol     $F5
0009AF39 9206                       	dc.b	nF1, $06
0009AF3B EC04                       	smpsPSGAlterVol     $04
0009AF3D E701                       	dc.b	smpsNoAttack, $01
0009AF3F EC07                       	smpsPSGAlterVol     $07
0009AF41 8006                       	dc.b	nRst, $06
0009AF43 E103                       	smpsAlterNote       $03
0009AF45 01                         	dc.b	$01
0009AF46 E104                       	smpsAlterNote       $04
0009AF48 01                         	dc.b	$01
0009AF49 E100                       	smpsAlterNote       $00
0009AF4B 01                         	dc.b	$01
0009AF4C E1FA                       	smpsAlterNote       $FA
0009AF4E 01                         	dc.b	$01
0009AF4F E1FD                       	smpsAlterNote       $FD
0009AF51 ECF5                       	smpsPSGAlterVol     $F5
0009AF53 9206                       	dc.b	nF1, $06
0009AF55 EC04                       	smpsPSGAlterVol     $04
0009AF57 E701                       	dc.b	smpsNoAttack, $01
0009AF59 EC07                       	smpsPSGAlterVol     $07
0009AF5B 8003                       	dc.b	nRst, $03
0009AF5D ECF5                       	smpsPSGAlterVol     $F5
0009AF5F 9106                       	dc.b	nE1, $06
0009AF61 EC04                       	smpsPSGAlterVol     $04
0009AF63 E701                       	dc.b	smpsNoAttack, $01
0009AF65 EC07                       	smpsPSGAlterVol     $07
0009AF67 8006                       	dc.b	nRst, $06
0009AF69 E100                       	smpsAlterNote       $00
0009AF6B 01                         	dc.b	$01
0009AF6C E104                       	smpsAlterNote       $04
0009AF6E 01                         	dc.b	$01
0009AF6F E100                       	smpsAlterNote       $00
0009AF71 01                         	dc.b	$01
0009AF72 E1FD                       	smpsAlterNote       $FD
0009AF74 01                         	dc.b	$01
0009AF75 ECF5                       	smpsPSGAlterVol     $F5
0009AF77 9206                       	dc.b	nF1, $06
0009AF79 EC04                       	smpsPSGAlterVol     $04
0009AF7B E701                       	dc.b	smpsNoAttack, $01
0009AF7D EC07                       	smpsPSGAlterVol     $07
0009AF7F 8003                       	dc.b	nRst, $03
0009AF81 ECF5                       	smpsPSGAlterVol     $F5
0009AF83 9207                       	dc.b	nF1, $07
0009AF85 EC0B                       	smpsPSGAlterVol     $0B
0009AF87 8007                       	dc.b	nRst, $07
0009AF89 E103                       	smpsAlterNote       $03
0009AF8B 0101                       	dc.b	$01, $01
0009AF8D E1FD                       	smpsAlterNote       $FD
0009AF8F 01                         	dc.b	$01
0009AF90 E1FB                       	smpsAlterNote       $FB
0009AF92 01                         	dc.b	$01
0009AF93 E1FD                       	smpsAlterNote       $FD
0009AF95 ECF5                       	smpsPSGAlterVol     $F5
0009AF97 9406                       	dc.b	nG1, $06
0009AF99 EC0B                       	smpsPSGAlterVol     $0B
0009AF9B 8004                       	dc.b	nRst, $04
0009AF9D ECF5                       	smpsPSGAlterVol     $F5
0009AF9F 9406                       	dc.b	nG1, $06
0009AFA1 EC04                       	smpsPSGAlterVol     $04
0009AFA3 E701                       	dc.b	smpsNoAttack, $01
0009AFA5 EC07                       	smpsPSGAlterVol     $07
0009AFA7 8006                       	dc.b	nRst, $06
0009AFA9 E100                       	smpsAlterNote       $00
0009AFAB 01                         	dc.b	$01
0009AFAC E104                       	smpsAlterNote       $04
0009AFAE 01                         	dc.b	$01
0009AFAF E100                       	smpsAlterNote       $00
0009AFB1 01                         	dc.b	$01
0009AFB2 E1F9                       	smpsAlterNote       $F9
0009AFB4 01                         	dc.b	$01
0009AFB5 E1FD                       	smpsAlterNote       $FD
0009AFB7 ECF5                       	smpsPSGAlterVol     $F5
0009AFB9 9206                       	dc.b	nF1, $06
0009AFBB EC04                       	smpsPSGAlterVol     $04
0009AFBD E701                       	dc.b	smpsNoAttack, $01
0009AFBF EC07                       	smpsPSGAlterVol     $07
0009AFC1 8003                       	dc.b	nRst, $03
0009AFC3 ECF5                       	smpsPSGAlterVol     $F5
0009AFC5 9207                       	dc.b	nF1, $07
0009AFC7 EC0B                       	smpsPSGAlterVol     $0B
0009AFC9 8006                       	dc.b	nRst, $06
0009AFCB E100                       	smpsAlterNote       $00
0009AFCD 01                         	dc.b	$01
0009AFCE E104                       	smpsAlterNote       $04
0009AFD0 01                         	dc.b	$01
0009AFD1 E103                       	smpsAlterNote       $03
0009AFD3 01                         	dc.b	$01
0009AFD4 E1FD                       	smpsAlterNote       $FD
0009AFD6 01                         	dc.b	$01
0009AFD7 ECF5                       	smpsPSGAlterVol     $F5
0009AFD9 9207                       	dc.b	nF1, $07
0009AFDB EC0B                       	smpsPSGAlterVol     $0B
0009AFDD 8004                       	dc.b	nRst, $04
0009AFDF ECF5                       	smpsPSGAlterVol     $F5
0009AFE1 9206                       	dc.b	nF1, $06
0009AFE3 EC0B                       	smpsPSGAlterVol     $0B
0009AFE5 8007                       	dc.b	nRst, $07
0009AFE7 E103                       	smpsAlterNote       $03
0009AFE9 0101                       	dc.b	$01, $01
0009AFEB E100                       	smpsAlterNote       $00
0009AFED 01                         	dc.b	$01
0009AFEE E1FA                       	smpsAlterNote       $FA
0009AFF0 01                         	dc.b	$01
0009AFF1 E1FD                       	smpsAlterNote       $FD
0009AFF3 ECF5                       	smpsPSGAlterVol     $F5
0009AFF5 9206                       	dc.b	nF1, $06
0009AFF7 EC04                       	smpsPSGAlterVol     $04
0009AFF9 E701                       	dc.b	smpsNoAttack, $01
0009AFFB EC07                       	smpsPSGAlterVol     $07
0009AFFD 8003                       	dc.b	nRst, $03
0009AFFF ECF5                       	smpsPSGAlterVol     $F5
0009B001 9206                       	dc.b	nF1, $06
0009B003 EC04                       	smpsPSGAlterVol     $04
0009B005 E701                       	dc.b	smpsNoAttack, $01
0009B007 EC07                       	smpsPSGAlterVol     $07
0009B009 8006                       	dc.b	nRst, $06
0009B00B E100                       	smpsAlterNote       $00
0009B00D 01                         	dc.b	$01
0009B00E E104                       	smpsAlterNote       $04
0009B010 01                         	dc.b	$01
0009B011 E100                       	smpsAlterNote       $00
0009B013 01                         	dc.b	$01
0009B014 E1FD                       	smpsAlterNote       $FD
0009B016 01                         	dc.b	$01
0009B017 ECF5                       	smpsPSGAlterVol     $F5
0009B019 9206                       	dc.b	nF1, $06
0009B01B EC04                       	smpsPSGAlterVol     $04
0009B01D E701                       	dc.b	smpsNoAttack, $01
0009B01F EC07                       	smpsPSGAlterVol     $07
0009B021 8003                       	dc.b	nRst, $03
0009B023 ECF5                       	smpsPSGAlterVol     $F5
0009B025 9207                       	dc.b	nF1, $07
0009B027 EC0B                       	smpsPSGAlterVol     $0B
0009B029 8007                       	dc.b	nRst, $07
0009B02B E103                       	smpsAlterNote       $03
0009B02D 0101                       	dc.b	$01, $01
0009B02F E1FD                       	smpsAlterNote       $FD
0009B031 01                         	dc.b	$01
0009B032 E1FA                       	smpsAlterNote       $FA
0009B034 01                         	dc.b	$01
0009B035 E1FD                       	smpsAlterNote       $FD
0009B037 ECF5                       	smpsPSGAlterVol     $F5
0009B039 9206                       	dc.b	nF1, $06
0009B03B EC0B                       	smpsPSGAlterVol     $0B
0009B03D 8004                       	dc.b	nRst, $04
0009B03F ECF5                       	smpsPSGAlterVol     $F5
0009B041 9206                       	dc.b	nF1, $06
0009B043 EC04                       	smpsPSGAlterVol     $04
0009B045 E701                       	dc.b	smpsNoAttack, $01
0009B047 EC07                       	smpsPSGAlterVol     $07
0009B049 8006                       	dc.b	nRst, $06
0009B04B E103                       	smpsAlterNote       $03
0009B04D 01                         	dc.b	$01
0009B04E E104                       	smpsAlterNote       $04
0009B050 01                         	dc.b	$01
0009B051 E100                       	smpsAlterNote       $00
0009B053 01                         	dc.b	$01
0009B054 E1FA                       	smpsAlterNote       $FA
0009B056 01                         	dc.b	$01
0009B057 E1FD                       	smpsAlterNote       $FD
0009B059 ECF5                       	smpsPSGAlterVol     $F5
0009B05B 9206                       	dc.b	nF1, $06
0009B05D EC04                       	smpsPSGAlterVol     $04
0009B05F E701                       	dc.b	smpsNoAttack, $01
0009B061 EC07                       	smpsPSGAlterVol     $07
0009B063 8003                       	dc.b	nRst, $03
0009B065 ECF5                       	smpsPSGAlterVol     $F5
0009B067 9206                       	dc.b	nF1, $06
0009B069 EC04                       	smpsPSGAlterVol     $04
0009B06B E701                       	dc.b	smpsNoAttack, $01
0009B06D EC07                       	smpsPSGAlterVol     $07
0009B06F 8006                       	dc.b	nRst, $06
0009B071 E100                       	smpsAlterNote       $00
0009B073 01                         	dc.b	$01
0009B074 E104                       	smpsAlterNote       $04
0009B076 01                         	dc.b	$01
0009B077 E103                       	smpsAlterNote       $03
0009B079 01                         	dc.b	$01
0009B07A E1FD                       	smpsAlterNote       $FD
0009B07C 01                         	dc.b	$01
0009B07D ECF5                       	smpsPSGAlterVol     $F5
0009B07F 9107                       	dc.b	nE1, $07
0009B081 EC0B                       	smpsPSGAlterVol     $0B
0009B083 8004                       	dc.b	nRst, $04
0009B085 ECF5                       	smpsPSGAlterVol     $F5
0009B087 9106                       	dc.b	nE1, $06
0009B089 EC0B                       	smpsPSGAlterVol     $0B
0009B08B 8007                       	dc.b	nRst, $07
0009B08D E103                       	smpsAlterNote       $03
0009B08F 0101                       	dc.b	$01, $01
0009B091 E100                       	smpsAlterNote       $00
0009B093 01                         	dc.b	$01
0009B094 E1FA                       	smpsAlterNote       $FA
0009B096 01                         	dc.b	$01
0009B097 E1FD                       	smpsAlterNote       $FD
0009B099 ECF5                       	smpsPSGAlterVol     $F5
0009B09B 9106                       	dc.b	nE1, $06
0009B09D EC04                       	smpsPSGAlterVol     $04
0009B09F E701                       	dc.b	smpsNoAttack, $01
0009B0A1 EC07                       	smpsPSGAlterVol     $07
0009B0A3 8003                       	dc.b	nRst, $03
0009B0A5 ECF5                       	smpsPSGAlterVol     $F5
0009B0A7 9106                       	dc.b	nE1, $06
0009B0A9 EC04                       	smpsPSGAlterVol     $04
0009B0AB E701                       	dc.b	smpsNoAttack, $01
0009B0AD EC07                       	smpsPSGAlterVol     $07
0009B0AF 8006                       	dc.b	nRst, $06
0009B0B1 E100                       	smpsAlterNote       $00
0009B0B3 01                         	dc.b	$01
0009B0B4 E104                       	smpsAlterNote       $04
0009B0B6 01                         	dc.b	$01
0009B0B7 E100                       	smpsAlterNote       $00
0009B0B9 01                         	dc.b	$01
0009B0BA E1FA                       	smpsAlterNote       $FA
0009B0BC 01                         	dc.b	$01
0009B0BD E1FD                       	smpsAlterNote       $FD
0009B0BF ECF5                       	smpsPSGAlterVol     $F5
0009B0C1 9106                       	dc.b	nE1, $06
0009B0C3 EC04                       	smpsPSGAlterVol     $04
0009B0C5 E701                       	dc.b	smpsNoAttack, $01
0009B0C7 EC07                       	smpsPSGAlterVol     $07
0009B0C9 8003                       	dc.b	nRst, $03
0009B0CB ECF5                       	smpsPSGAlterVol     $F5
0009B0CD 9107 9106                  	dc.b	nE1, $07, nE1, $06
0009B0D1 EC04                       	smpsPSGAlterVol     $04
0009B0D3 E701                       	dc.b	smpsNoAttack, $01
0009B0D5 ECFC                       	smpsPSGAlterVol     $FC
0009B0D7 9103 9103                  	dc.b	nE1, $03, nE1, $03
0009B0DB EC04                       	smpsPSGAlterVol     $04
0009B0DD E701                       	dc.b	smpsNoAttack, $01
0009B0DF ECFC                       	smpsPSGAlterVol     $FC
0009B0E1 9106                       	dc.b	nE1, $06
0009B0E3 EC04                       	smpsPSGAlterVol     $04
0009B0E5 E701                       	dc.b	smpsNoAttack, $01
0009B0E7 EC07                       	smpsPSGAlterVol     $07
0009B0E9 8006                       	dc.b	nRst, $06
0009B0EB E100                       	smpsAlterNote       $00
0009B0ED 01                         	dc.b	$01
0009B0EE E104                       	smpsAlterNote       $04
0009B0F0 01                         	dc.b	$01
0009B0F1 E100                       	smpsAlterNote       $00
0009B0F3 01                         	dc.b	$01
0009B0F4 E1FA                       	smpsAlterNote       $FA
0009B0F6 01                         	dc.b	$01
0009B0F7 E1F9                       	smpsAlterNote       $F9
0009B0F9 01                         	dc.b	$01
0009B0FA E1FD                       	smpsAlterNote       $FD
0009B0FC 01                         	dc.b	$01
0009B0FD E103                       	smpsAlterNote       $03
0009B0FF 01                         	dc.b	$01
0009B100 E104                       	smpsAlterNote       $04
0009B102 01                         	dc.b	$01
0009B103 E100                       	smpsAlterNote       $00
0009B105 01                         	dc.b	$01
0009B106 E1FA                       	smpsAlterNote       $FA
0009B108 0101                       	dc.b	$01, $01
0009B10A E1FD                       	smpsAlterNote       $FD
0009B10C ECF5                       	smpsPSGAlterVol     $F5
0009B10E 9206                       	dc.b	nF1, $06
0009B110 EC04                       	smpsPSGAlterVol     $04
0009B112 E701                       	dc.b	smpsNoAttack, $01
0009B114 EC07                       	smpsPSGAlterVol     $07
0009B116 8003                       	dc.b	nRst, $03
0009B118 ECF5                       	smpsPSGAlterVol     $F5
0009B11A 9206                       	dc.b	nF1, $06
0009B11C EC04                       	smpsPSGAlterVol     $04
0009B11E E701                       	dc.b	smpsNoAttack, $01
0009B120 EC07                       	smpsPSGAlterVol     $07
0009B122 8006                       	dc.b	nRst, $06
0009B124 E100                       	smpsAlterNote       $00
0009B126 01                         	dc.b	$01
0009B127 E104                       	smpsAlterNote       $04
0009B129 01                         	dc.b	$01
0009B12A E103                       	smpsAlterNote       $03
0009B12C 01                         	dc.b	$01
0009B12D E1FD                       	smpsAlterNote       $FD
0009B12F 01                         	dc.b	$01
0009B130 ECF5                       	smpsPSGAlterVol     $F5
0009B132 9407                       	dc.b	nG1, $07
0009B134 EC0B                       	smpsPSGAlterVol     $0B
0009B136 8004                       	dc.b	nRst, $04
0009B138 ECF5                       	smpsPSGAlterVol     $F5
0009B13A 9406                       	dc.b	nG1, $06
0009B13C EC0B                       	smpsPSGAlterVol     $0B
0009B13E 8007                       	dc.b	nRst, $07
0009B140 E103                       	smpsAlterNote       $03
0009B142 0101                       	dc.b	$01, $01
0009B144 E1FD                       	smpsAlterNote       $FD
0009B146 01                         	dc.b	$01
0009B147 E1F9                       	smpsAlterNote       $F9
0009B149 01                         	dc.b	$01
0009B14A E1FD                       	smpsAlterNote       $FD
0009B14C ECF5                       	smpsPSGAlterVol     $F5
0009B14E 9206                       	dc.b	nF1, $06
0009B150 EC04                       	smpsPSGAlterVol     $04
0009B152 E701                       	dc.b	smpsNoAttack, $01
0009B154 EC07                       	smpsPSGAlterVol     $07
0009B156 8003                       	dc.b	nRst, $03
0009B158 ECF5                       	smpsPSGAlterVol     $F5
0009B15A 9206                       	dc.b	nF1, $06
0009B15C EC04                       	smpsPSGAlterVol     $04
0009B15E E701                       	dc.b	smpsNoAttack, $01
0009B160 EC07                       	smpsPSGAlterVol     $07
0009B162 8006                       	dc.b	nRst, $06
0009B164 E100                       	smpsAlterNote       $00
0009B166 01                         	dc.b	$01
0009B167 E104                       	smpsAlterNote       $04
0009B169 01                         	dc.b	$01
0009B16A E100                       	smpsAlterNote       $00
0009B16C 01                         	dc.b	$01
0009B16D E1FA                       	smpsAlterNote       $FA
0009B16F 01                         	dc.b	$01
0009B170 E1FD                       	smpsAlterNote       $FD
0009B172 ECF5                       	smpsPSGAlterVol     $F5
0009B174 9206                       	dc.b	nF1, $06
0009B176 EC04                       	smpsPSGAlterVol     $04
0009B178 E701                       	dc.b	smpsNoAttack, $01
0009B17A EC07                       	smpsPSGAlterVol     $07
0009B17C 8003                       	dc.b	nRst, $03
0009B17E ECF5                       	smpsPSGAlterVol     $F5
0009B180 9107                       	dc.b	nE1, $07
0009B182 EC0B                       	smpsPSGAlterVol     $0B
0009B184 8006                       	dc.b	nRst, $06
0009B186 E100                       	smpsAlterNote       $00
0009B188 01                         	dc.b	$01
0009B189 E103                       	smpsAlterNote       $03
0009B18B 0101                       	dc.b	$01, $01
0009B18D E1FD                       	smpsAlterNote       $FD
0009B18F 01                         	dc.b	$01
0009B190 ECF5                       	smpsPSGAlterVol     $F5
0009B192 9207                       	dc.b	nF1, $07
0009B194 EC0B                       	smpsPSGAlterVol     $0B
0009B196 8004                       	dc.b	nRst, $04
0009B198 ECF5                       	smpsPSGAlterVol     $F5
0009B19A 9206                       	dc.b	nF1, $06
0009B19C EC04                       	smpsPSGAlterVol     $04
0009B19E E701                       	dc.b	smpsNoAttack, $01
0009B1A0 EC07                       	smpsPSGAlterVol     $07
0009B1A2 8006                       	dc.b	nRst, $06
0009B1A4 E103                       	smpsAlterNote       $03
0009B1A6 01                         	dc.b	$01
0009B1A7 E104                       	smpsAlterNote       $04
0009B1A9 01                         	dc.b	$01
0009B1AA E100                       	smpsAlterNote       $00
0009B1AC 01                         	dc.b	$01
0009B1AD E1FB                       	smpsAlterNote       $FB
0009B1AF 01                         	dc.b	$01
0009B1B0 E1FD                       	smpsAlterNote       $FD
0009B1B2 ECF5                       	smpsPSGAlterVol     $F5
0009B1B4 9406                       	dc.b	nG1, $06
0009B1B6 EC04                       	smpsPSGAlterVol     $04
0009B1B8 E701                       	dc.b	smpsNoAttack, $01
0009B1BA EC07                       	smpsPSGAlterVol     $07
0009B1BC 8003                       	dc.b	nRst, $03
0009B1BE ECF5                       	smpsPSGAlterVol     $F5
0009B1C0 9406                       	dc.b	nG1, $06
0009B1C2 EC04                       	smpsPSGAlterVol     $04
0009B1C4 E701                       	dc.b	smpsNoAttack, $01
0009B1C6 EC07                       	smpsPSGAlterVol     $07
0009B1C8 8006                       	dc.b	nRst, $06
0009B1CA E100                       	smpsAlterNote       $00
0009B1CC 01                         	dc.b	$01
0009B1CD E104                       	smpsAlterNote       $04
0009B1CF 01                         	dc.b	$01
0009B1D0 E100                       	smpsAlterNote       $00
0009B1D2 01                         	dc.b	$01
0009B1D3 E1FD                       	smpsAlterNote       $FD
0009B1D5 01                         	dc.b	$01
0009B1D6 ECF5                       	smpsPSGAlterVol     $F5
0009B1D8 9206                       	dc.b	nF1, $06
0009B1DA EC04                       	smpsPSGAlterVol     $04
0009B1DC E701                       	dc.b	smpsNoAttack, $01
0009B1DE EC07                       	smpsPSGAlterVol     $07
0009B1E0 8003                       	dc.b	nRst, $03
0009B1E2 ECF5                       	smpsPSGAlterVol     $F5
0009B1E4 9207                       	dc.b	nF1, $07
0009B1E6 EC0B                       	smpsPSGAlterVol     $0B
0009B1E8 8007                       	dc.b	nRst, $07
0009B1EA E103                       	smpsAlterNote       $03
0009B1EC 0101                       	dc.b	$01, $01
0009B1EE E1FD                       	smpsAlterNote       $FD
0009B1F0 01                         	dc.b	$01
0009B1F1 E1FA                       	smpsAlterNote       $FA
0009B1F3 01                         	dc.b	$01
0009B1F4 E1FD                       	smpsAlterNote       $FD
0009B1F6 ECF5                       	smpsPSGAlterVol     $F5
0009B1F8 9206                       	dc.b	nF1, $06
0009B1FA EC0B                       	smpsPSGAlterVol     $0B
0009B1FC 8004                       	dc.b	nRst, $04
0009B1FE ECF5                       	smpsPSGAlterVol     $F5
0009B200 9206                       	dc.b	nF1, $06
0009B202 EC04                       	smpsPSGAlterVol     $04
0009B204 E701                       	dc.b	smpsNoAttack, $01
0009B206 EC07                       	smpsPSGAlterVol     $07
0009B208 8006                       	dc.b	nRst, $06
0009B20A E100                       	smpsAlterNote       $00
0009B20C 01                         	dc.b	$01
0009B20D E104                       	smpsAlterNote       $04
0009B20F 01                         	dc.b	$01
0009B210 E100                       	smpsAlterNote       $00
0009B212 01                         	dc.b	$01
0009B213 E1FA                       	smpsAlterNote       $FA
0009B215 01                         	dc.b	$01
0009B216 E1FD                       	smpsAlterNote       $FD
0009B218 ECF5                       	smpsPSGAlterVol     $F5
0009B21A 9206                       	dc.b	nF1, $06
0009B21C EC04                       	smpsPSGAlterVol     $04
0009B21E E704                       	dc.b	smpsNoAttack, $04
0009B220 ECFC                       	smpsPSGAlterVol     $FC
0009B222 9207                       	dc.b	nF1, $07
0009B224 EC0B                       	smpsPSGAlterVol     $0B
0009B226 8006                       	dc.b	nRst, $06
0009B228 E100                       	smpsAlterNote       $00
0009B22A 01                         	dc.b	$01
0009B22B E104                       	smpsAlterNote       $04
0009B22D 01                         	dc.b	$01
0009B22E E103                       	smpsAlterNote       $03
0009B230 01                         	dc.b	$01
0009B231 E1FD                       	smpsAlterNote       $FD
0009B233 01                         	dc.b	$01
0009B234 ECF5                       	smpsPSGAlterVol     $F5
0009B236 9207                       	dc.b	nF1, $07
0009B238 EC0B                       	smpsPSGAlterVol     $0B
0009B23A 8004                       	dc.b	nRst, $04
0009B23C ECF5                       	smpsPSGAlterVol     $F5
0009B23E 9206                       	dc.b	nF1, $06
0009B240 EC0B                       	smpsPSGAlterVol     $0B
0009B242 8007                       	dc.b	nRst, $07
0009B244 E103                       	smpsAlterNote       $03
0009B246 0101                       	dc.b	$01, $01
0009B248 E100                       	smpsAlterNote       $00
0009B24A 01                         	dc.b	$01
0009B24B E1FA                       	smpsAlterNote       $FA
0009B24D 01                         	dc.b	$01
0009B24E E1FD                       	smpsAlterNote       $FD
0009B250 ECF5                       	smpsPSGAlterVol     $F5
0009B252 9206                       	dc.b	nF1, $06
0009B254 EC04                       	smpsPSGAlterVol     $04
0009B256 E704                       	dc.b	smpsNoAttack, $04
0009B258 ECFC                       	smpsPSGAlterVol     $FC
0009B25A 9206                       	dc.b	nF1, $06
0009B25C EC04                       	smpsPSGAlterVol     $04
0009B25E E701                       	dc.b	smpsNoAttack, $01
0009B260 EC07                       	smpsPSGAlterVol     $07
0009B262 8006                       	dc.b	nRst, $06
0009B264 E100                       	smpsAlterNote       $00
0009B266 01                         	dc.b	$01
0009B267 E104                       	smpsAlterNote       $04
0009B269 01                         	dc.b	$01
0009B26A E100                       	smpsAlterNote       $00
0009B26C 01                         	dc.b	$01
0009B26D E1FD                       	smpsAlterNote       $FD
0009B26F 01                         	dc.b	$01
0009B270 ECF5                       	smpsPSGAlterVol     $F5
0009B272 9206                       	dc.b	nF1, $06
0009B274 EC04                       	smpsPSGAlterVol     $04
0009B276 E701                       	dc.b	smpsNoAttack, $01
0009B278 EC07                       	smpsPSGAlterVol     $07
0009B27A 8003                       	dc.b	nRst, $03
0009B27C ECF5                       	smpsPSGAlterVol     $F5
0009B27E 9207                       	dc.b	nF1, $07
0009B280 EC0B                       	smpsPSGAlterVol     $0B
0009B282 8007                       	dc.b	nRst, $07
0009B284 E103                       	smpsAlterNote       $03
0009B286 0101                       	dc.b	$01, $01
0009B288 E1FD                       	smpsAlterNote       $FD
0009B28A 01                         	dc.b	$01
0009B28B E1FA                       	smpsAlterNote       $FA
0009B28D 01                         	dc.b	$01
0009B28E E1FD                       	smpsAlterNote       $FD
0009B290 ECF5                       	smpsPSGAlterVol     $F5
0009B292 9106                       	dc.b	nE1, $06
0009B294 EC0B                       	smpsPSGAlterVol     $0B
0009B296 8004                       	dc.b	nRst, $04
0009B298 ECF5                       	smpsPSGAlterVol     $F5
0009B29A 9106                       	dc.b	nE1, $06
0009B29C EC04                       	smpsPSGAlterVol     $04
0009B29E E701                       	dc.b	smpsNoAttack, $01
0009B2A0 EC07                       	smpsPSGAlterVol     $07
0009B2A2 8006                       	dc.b	nRst, $06
0009B2A4 E100                       	smpsAlterNote       $00
0009B2A6 01                         	dc.b	$01
0009B2A7 E104                       	smpsAlterNote       $04
0009B2A9 01                         	dc.b	$01
0009B2AA E100                       	smpsAlterNote       $00
0009B2AC 01                         	dc.b	$01
0009B2AD E1FA                       	smpsAlterNote       $FA
0009B2AF 01                         	dc.b	$01
0009B2B0 E1FD                       	smpsAlterNote       $FD
0009B2B2 ECF5                       	smpsPSGAlterVol     $F5
0009B2B4 9106                       	dc.b	nE1, $06
0009B2B6 EC04                       	smpsPSGAlterVol     $04
0009B2B8 E701                       	dc.b	smpsNoAttack, $01
0009B2BA EC07                       	smpsPSGAlterVol     $07
0009B2BC 8003                       	dc.b	nRst, $03
0009B2BE ECF5                       	smpsPSGAlterVol     $F5
0009B2C0 9106                       	dc.b	nE1, $06
0009B2C2 EC04                       	smpsPSGAlterVol     $04
0009B2C4 E701                       	dc.b	smpsNoAttack, $01
0009B2C6 EC07                       	smpsPSGAlterVol     $07
0009B2C8 8006                       	dc.b	nRst, $06
0009B2CA E100                       	smpsAlterNote       $00
0009B2CC 01                         	dc.b	$01
0009B2CD E104                       	smpsAlterNote       $04
0009B2CF 01                         	dc.b	$01
0009B2D0 E103                       	smpsAlterNote       $03
0009B2D2 01                         	dc.b	$01
0009B2D3 E1FD                       	smpsAlterNote       $FD
0009B2D5 01                         	dc.b	$01
0009B2D6 ECF5                       	smpsPSGAlterVol     $F5
0009B2D8 9107                       	dc.b	nE1, $07
0009B2DA EC0B                       	smpsPSGAlterVol     $0B
0009B2DC 8004                       	dc.b	nRst, $04
0009B2DE ECF5                       	smpsPSGAlterVol     $F5
0009B2E0 9106                       	dc.b	nE1, $06
0009B2E2 EC0B                       	smpsPSGAlterVol     $0B
0009B2E4 8007                       	dc.b	nRst, $07
0009B2E6 E103                       	smpsAlterNote       $03
0009B2E8 0101                       	dc.b	$01, $01
0009B2EA E100                       	smpsAlterNote       $00
0009B2EC 01                         	dc.b	$01
0009B2ED E1FA                       	smpsAlterNote       $FA
0009B2EF 01                         	dc.b	$01
0009B2F0 E1FD                       	smpsAlterNote       $FD
0009B2F2 ECF5                       	smpsPSGAlterVol     $F5
0009B2F4 9106                       	dc.b	nE1, $06
0009B2F6 EC04                       	smpsPSGAlterVol     $04
0009B2F8 E701                       	dc.b	smpsNoAttack, $01
0009B2FA EC07                       	smpsPSGAlterVol     $07
0009B2FC 8003                       	dc.b	nRst, $03
0009B2FE ECF5                       	smpsPSGAlterVol     $F5
0009B300 9106                       	dc.b	nE1, $06
0009B302 EC04                       	smpsPSGAlterVol     $04
0009B304 E701                       	dc.b	smpsNoAttack, $01
0009B306 EC07                       	smpsPSGAlterVol     $07
0009B308 8003                       	dc.b	nRst, $03
0009B30A ECF5                       	smpsPSGAlterVol     $F5
0009B30C 9207                       	dc.b	nF1, $07
0009B30E EC0B                       	smpsPSGAlterVol     $0B
0009B310 8006                       	dc.b	nRst, $06
0009B312 E100                       	smpsAlterNote       $00
0009B314 01                         	dc.b	$01
0009B315 E104                       	smpsAlterNote       $04
0009B317 01                         	dc.b	$01
0009B318 E103                       	smpsAlterNote       $03
0009B31A 01                         	dc.b	$01
0009B31B E1FD                       	smpsAlterNote       $FD
0009B31D 01                         	dc.b	$01
0009B31E E1F9                       	smpsAlterNote       $F9
0009B320 01                         	dc.b	$01
0009B321 E1FD                       	smpsAlterNote       $FD
0009B323 01                         	dc.b	$01
0009B324 E100                       	smpsAlterNote       $00
0009B326 01                         	dc.b	$01
0009B327 E104                       	smpsAlterNote       $04
0009B329 01                         	dc.b	$01
0009B32A E1FD                       	smpsAlterNote       $FD
0009B32C ECF5                       	smpsPSGAlterVol     $F5
0009B32E 9203 9203                  	dc.b	nF1, $03, nF1, $03
0009B332 EC04                       	smpsPSGAlterVol     $04
0009B334 E701                       	dc.b	smpsNoAttack, $01
0009B336 EC07                       	smpsPSGAlterVol     $07
0009B338 8009                       	dc.b	nRst, $09
0009B33A E100                       	smpsAlterNote       $00
0009B33C 01                         	dc.b	$01
0009B33D E104                       	smpsAlterNote       $04
0009B33F 01                         	dc.b	$01
0009B340 E103                       	smpsAlterNote       $03
0009B342 01                         	dc.b	$01
0009B343 E1FD                       	smpsAlterNote       $FD
0009B345 01                         	dc.b	$01
0009B346 E1F9                       	smpsAlterNote       $F9
0009B348 01                         	dc.b	$01
0009B349 E1FD                       	smpsAlterNote       $FD
0009B34B 01                         	dc.b	$01
0009B34C E100                       	smpsAlterNote       $00
0009B34E 01                         	dc.b	$01
0009B34F E104                       	smpsAlterNote       $04
0009B351 01                         	dc.b	$01
0009B352 E100                       	smpsAlterNote       $00
0009B354 01                         	dc.b	$01
0009B355 E1FA                       	smpsAlterNote       $FA
0009B357 01                         	dc.b	$01
0009B358 E1F9                       	smpsAlterNote       $F9
0009B35A 01                         	dc.b	$01
0009B35B E1FD                       	smpsAlterNote       $FD
0009B35D 01                         	dc.b	$01
0009B35E E103                       	smpsAlterNote       $03
0009B360 0101                       	dc.b	$01, $01
0009B362 E100                       	smpsAlterNote       $00
0009B364 01                         	dc.b	$01
0009B365 E1FD                       	smpsAlterNote       $FD
0009B367 ECF5                       	smpsPSGAlterVol     $F5
0009B369 9202                       	dc.b	nF1, $02
0009B36B EC04                       	smpsPSGAlterVol     $04
0009B36D E701                       	dc.b	smpsNoAttack, $01
0009B36F ECFC                       	smpsPSGAlterVol     $FC
0009B371 9106                       	dc.b	nE1, $06
0009B373 EC04                       	smpsPSGAlterVol     $04
0009B375 E701                       	dc.b	smpsNoAttack, $01
0009B377 EC07                       	smpsPSGAlterVol     $07
0009B379 8006                       	dc.b	nRst, $06
0009B37B E100                       	smpsAlterNote       $00
0009B37D 01                         	dc.b	$01
0009B37E E104                       	smpsAlterNote       $04
0009B380 01                         	dc.b	$01
0009B381 E100                       	smpsAlterNote       $00
0009B383 01                         	dc.b	$01
0009B384 E1FD                       	smpsAlterNote       $FD
0009B386 01                         	dc.b	$01
0009B387 E1F9                       	smpsAlterNote       $F9
0009B389 01                         	dc.b	$01
0009B38A E1FD                       	smpsAlterNote       $FD
0009B38C 01                         	dc.b	$01
0009B38D E103                       	smpsAlterNote       $03
0009B38F 01                         	dc.b	$01
0009B390 E104                       	smpsAlterNote       $04
0009B392 01                         	dc.b	$01
0009B393 E1FD                       	smpsAlterNote       $FD
0009B395 ECF5                       	smpsPSGAlterVol     $F5
0009B397 9102                       	dc.b	nE1, $02
0009B399 EC04                       	smpsPSGAlterVol     $04
0009B39B E701                       	dc.b	smpsNoAttack, $01
0009B39D ECFC                       	smpsPSGAlterVol     $FC
0009B39F 920D                       	dc.b	nF1, $0D
0009B3A1 E100                       	smpsAlterNote       $00
0009B3A3 E701                       	dc.b	smpsNoAttack, $01
0009B3A5 E104                       	smpsAlterNote       $04
0009B3A7 E701                       	dc.b	smpsNoAttack, $01
0009B3A9 E100                       	smpsAlterNote       $00
0009B3AB E701                       	dc.b	smpsNoAttack, $01
0009B3AD E1FD                       	smpsAlterNote       $FD
0009B3AF E701                       	dc.b	smpsNoAttack, $01
0009B3B1 E1F9                       	smpsAlterNote       $F9
0009B3B3 E701                       	dc.b	smpsNoAttack, $01
0009B3B5 E1FD                       	smpsAlterNote       $FD
0009B3B7 E701                       	dc.b	smpsNoAttack, $01
0009B3B9 E103                       	smpsAlterNote       $03
0009B3BB E701                       	dc.b	smpsNoAttack, $01
0009B3BD E104                       	smpsAlterNote       $04
0009B3BF E701                       	dc.b	smpsNoAttack, $01
0009B3C1 E100                       	smpsAlterNote       $00
0009B3C3 E701                       	dc.b	smpsNoAttack, $01
0009B3C5 E1FA                       	smpsAlterNote       $FA
0009B3C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B3CB E1FD                       	smpsAlterNote       $FD
0009B3CD E701                       	dc.b	smpsNoAttack, $01
0009B3CF E103                       	smpsAlterNote       $03
0009B3D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B3D5 E1FD                       	smpsAlterNote       $FD
0009B3D7 E701                       	dc.b	smpsNoAttack, $01
0009B3D9 E1F9                       	smpsAlterNote       $F9
0009B3DB E701                       	dc.b	smpsNoAttack, $01
0009B3DD E1FA                       	smpsAlterNote       $FA
0009B3DF E701                       	dc.b	smpsNoAttack, $01
0009B3E1 E100                       	smpsAlterNote       $00
0009B3E3 EC04                       	smpsPSGAlterVol     $04
0009B3E5 E701                       	dc.b	smpsNoAttack, $01
0009B3E7 EC07                       	smpsPSGAlterVol     $07
0009B3E9 E104                       	smpsAlterNote       $04
0009B3EB 8001                       	dc.b	nRst, $01
0009B3ED E100                       	smpsAlterNote       $00
0009B3EF 01                         	dc.b	$01
0009B3F0 E1FD                       	smpsAlterNote       $FD
0009B3F2 01                         	dc.b	$01
0009B3F3 E1F9                       	smpsAlterNote       $F9
0009B3F5 01                         	dc.b	$01
0009B3F6 E1FD                       	smpsAlterNote       $FD
0009B3F8 01                         	dc.b	$01
0009B3F9 E103                       	smpsAlterNote       $03
0009B3FB 01                         	dc.b	$01
0009B3FC E104                       	smpsAlterNote       $04
0009B3FE 01                         	dc.b	$01
0009B3FF E1FD                       	smpsAlterNote       $FD
0009B401 ECF5                       	smpsPSGAlterVol     $F5
0009B403 9106                       	dc.b	nE1, $06
0009B405 EC04                       	smpsPSGAlterVol     $04
0009B407 E701                       	dc.b	smpsNoAttack, $01
0009B409 EC07                       	smpsPSGAlterVol     $07
0009B40B 8003                       	dc.b	nRst, $03
0009B40D ECF5                       	smpsPSGAlterVol     $F5
0009B40F 9106                       	dc.b	nE1, $06
0009B411 EC04                       	smpsPSGAlterVol     $04
0009B413 E701                       	dc.b	smpsNoAttack, $01
0009B415 EC07                       	smpsPSGAlterVol     $07
0009B417 8006                       	dc.b	nRst, $06
0009B419 E100                       	smpsAlterNote       $00
0009B41B 01                         	dc.b	$01
0009B41C E104                       	smpsAlterNote       $04
0009B41E 01                         	dc.b	$01
0009B41F E100                       	smpsAlterNote       $00
0009B421 01                         	dc.b	$01
0009B422 E1FA                       	smpsAlterNote       $FA
0009B424 01                         	dc.b	$01
0009B425 E1FD                       	smpsAlterNote       $FD
0009B427 ECF5                       	smpsPSGAlterVol     $F5
0009B429 9206                       	dc.b	nF1, $06
0009B42B EC04                       	smpsPSGAlterVol     $04
0009B42D E701                       	dc.b	smpsNoAttack, $01
0009B42F EC07                       	smpsPSGAlterVol     $07
0009B431 8003                       	dc.b	nRst, $03
0009B433 ECF5                       	smpsPSGAlterVol     $F5
0009B435 9207                       	dc.b	nF1, $07
0009B437 EC0B                       	smpsPSGAlterVol     $0B
0009B439 8006                       	dc.b	nRst, $06
0009B43B E100                       	smpsAlterNote       $00
0009B43D 01                         	dc.b	$01
0009B43E E103                       	smpsAlterNote       $03
0009B440 0101                       	dc.b	$01, $01
0009B442 E1FD                       	smpsAlterNote       $FD
0009B444 01                         	dc.b	$01
0009B445 ECF5                       	smpsPSGAlterVol     $F5
0009B447 9107                       	dc.b	nE1, $07
0009B449 EC0B                       	smpsPSGAlterVol     $0B
0009B44B 8004                       	dc.b	nRst, $04
0009B44D ECF5                       	smpsPSGAlterVol     $F5
0009B44F 9106                       	dc.b	nE1, $06
0009B451 EC04                       	smpsPSGAlterVol     $04
0009B453 E701                       	dc.b	smpsNoAttack, $01
0009B455 EC07                       	smpsPSGAlterVol     $07
0009B457 8006                       	dc.b	nRst, $06
0009B459 E103                       	smpsAlterNote       $03
0009B45B 01                         	dc.b	$01
0009B45C E104                       	smpsAlterNote       $04
0009B45E 01                         	dc.b	$01
0009B45F E100                       	smpsAlterNote       $00
0009B461 01                         	dc.b	$01
0009B462 E1FA                       	smpsAlterNote       $FA
0009B464 01                         	dc.b	$01
0009B465 E1FD                       	smpsAlterNote       $FD
0009B467 ECF5                       	smpsPSGAlterVol     $F5
0009B469 9106                       	dc.b	nE1, $06
0009B46B EC04                       	smpsPSGAlterVol     $04
0009B46D E701                       	dc.b	smpsNoAttack, $01
0009B46F EC07                       	smpsPSGAlterVol     $07
0009B471 8003                       	dc.b	nRst, $03
0009B473 ECF5                       	smpsPSGAlterVol     $F5
0009B475 9106                       	dc.b	nE1, $06
0009B477 EC04                       	smpsPSGAlterVol     $04
0009B479 E701                       	dc.b	smpsNoAttack, $01
0009B47B EC07                       	smpsPSGAlterVol     $07
0009B47D 8003                       	dc.b	nRst, $03
0009B47F ECF5                       	smpsPSGAlterVol     $F5
0009B481 9207                       	dc.b	nF1, $07
0009B483 EC0B                       	smpsPSGAlterVol     $0B
0009B485 8006                       	dc.b	nRst, $06
0009B487 E100                       	smpsAlterNote       $00
0009B489 01                         	dc.b	$01
0009B48A E103                       	smpsAlterNote       $03
0009B48C 0101                       	dc.b	$01, $01
0009B48E E1FD                       	smpsAlterNote       $FD
0009B490 01                         	dc.b	$01
0009B491 E1F9                       	smpsAlterNote       $F9
0009B493 01                         	dc.b	$01
0009B494 E1FA                       	smpsAlterNote       $FA
0009B496 01                         	dc.b	$01
0009B497 E100                       	smpsAlterNote       $00
0009B499 01                         	dc.b	$01
0009B49A E104                       	smpsAlterNote       $04
0009B49C 01                         	dc.b	$01
0009B49D E1FD                       	smpsAlterNote       $FD
0009B49F ECF5                       	smpsPSGAlterVol     $F5
0009B4A1 9203 9203                  	dc.b	nF1, $03, nF1, $03
0009B4A5 EC04                       	smpsPSGAlterVol     $04
0009B4A7 E701                       	dc.b	smpsNoAttack, $01
0009B4A9 EC07                       	smpsPSGAlterVol     $07
0009B4AB 8009                       	dc.b	nRst, $09
0009B4AD E100                       	smpsAlterNote       $00
0009B4AF 01                         	dc.b	$01
0009B4B0 E103                       	smpsAlterNote       $03
0009B4B2 0101                       	dc.b	$01, $01
0009B4B4 E1FD                       	smpsAlterNote       $FD
0009B4B6 01                         	dc.b	$01
0009B4B7 E1F9                       	smpsAlterNote       $F9
0009B4B9 01                         	dc.b	$01
0009B4BA E1FA                       	smpsAlterNote       $FA
0009B4BC 01                         	dc.b	$01
0009B4BD E100                       	smpsAlterNote       $00
0009B4BF 01                         	dc.b	$01
0009B4C0 E104                       	smpsAlterNote       $04
0009B4C2 01                         	dc.b	$01
0009B4C3 E100                       	smpsAlterNote       $00
0009B4C5 01                         	dc.b	$01
0009B4C6 E1FD                       	smpsAlterNote       $FD
0009B4C8 01                         	dc.b	$01
0009B4C9 E1F9                       	smpsAlterNote       $F9
0009B4CB 01                         	dc.b	$01
0009B4CC E1FD                       	smpsAlterNote       $FD
0009B4CE 01                         	dc.b	$01
0009B4CF E103                       	smpsAlterNote       $03
0009B4D1 01                         	dc.b	$01
0009B4D2 E104                       	smpsAlterNote       $04
0009B4D4 01                         	dc.b	$01
0009B4D5 E100                       	smpsAlterNote       $00
0009B4D7 01                         	dc.b	$01
0009B4D8 E1FD                       	smpsAlterNote       $FD
0009B4DA ECF5                       	smpsPSGAlterVol     $F5
0009B4DC 9203 9106                  	dc.b	nF1, $03, nE1, $06
0009B4E0 EC04                       	smpsPSGAlterVol     $04
0009B4E2 E701                       	dc.b	smpsNoAttack, $01
0009B4E4 EC07                       	smpsPSGAlterVol     $07
0009B4E6 8006                       	dc.b	nRst, $06
0009B4E8 E100                       	smpsAlterNote       $00
0009B4EA 01                         	dc.b	$01
0009B4EB E104                       	smpsAlterNote       $04
0009B4ED 01                         	dc.b	$01
0009B4EE E103                       	smpsAlterNote       $03
0009B4F0 01                         	dc.b	$01
0009B4F1 E1FD                       	smpsAlterNote       $FD
0009B4F3 01                         	dc.b	$01
0009B4F4 E1F9                       	smpsAlterNote       $F9
0009B4F6 01                         	dc.b	$01
0009B4F7 E1FD                       	smpsAlterNote       $FD
0009B4F9 01                         	dc.b	$01
0009B4FA E100                       	smpsAlterNote       $00
0009B4FC 01                         	dc.b	$01
0009B4FD E104                       	smpsAlterNote       $04
0009B4FF 01                         	dc.b	$01
0009B500 E1FD                       	smpsAlterNote       $FD
0009B502 ECF5                       	smpsPSGAlterVol     $F5
0009B504 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0009B508 E100                       	smpsAlterNote       $00
0009B50A E701                       	dc.b	smpsNoAttack, $01
0009B50C E104                       	smpsAlterNote       $04
0009B50E E701                       	dc.b	smpsNoAttack, $01
0009B510 E100                       	smpsAlterNote       $00
0009B512 E701                       	dc.b	smpsNoAttack, $01
0009B514 E1FD                       	smpsAlterNote       $FD
0009B516 E701                       	dc.b	smpsNoAttack, $01
0009B518 E1F9                       	smpsAlterNote       $F9
0009B51A E701                       	dc.b	smpsNoAttack, $01
0009B51C E1FD                       	smpsAlterNote       $FD
0009B51E E701                       	dc.b	smpsNoAttack, $01
0009B520 E103                       	smpsAlterNote       $03
0009B522 E701                       	dc.b	smpsNoAttack, $01
0009B524 E104                       	smpsAlterNote       $04
0009B526 E701                       	dc.b	smpsNoAttack, $01
0009B528 E100                       	smpsAlterNote       $00
0009B52A E701                       	dc.b	smpsNoAttack, $01
0009B52C E1FA                       	smpsAlterNote       $FA
0009B52E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B532 E1FD                       	smpsAlterNote       $FD
0009B534 E701                       	dc.b	smpsNoAttack, $01
0009B536 E103                       	smpsAlterNote       $03
0009B538 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B53C E100                       	smpsAlterNote       $00
0009B53E E701                       	dc.b	smpsNoAttack, $01
0009B540 E1FA                       	smpsAlterNote       $FA
0009B542 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B546 E100                       	smpsAlterNote       $00
0009B548 EC04                       	smpsPSGAlterVol     $04
0009B54A E701                       	dc.b	smpsNoAttack, $01
0009B54C EC07                       	smpsPSGAlterVol     $07
0009B54E E104                       	smpsAlterNote       $04
0009B550 8001                       	dc.b	nRst, $01
0009B552 E103                       	smpsAlterNote       $03
0009B554 01                         	dc.b	$01
0009B555 E1FD                       	smpsAlterNote       $FD
0009B557 01                         	dc.b	$01
0009B558 E1F9                       	smpsAlterNote       $F9
0009B55A 01                         	dc.b	$01
0009B55B E1FD                       	smpsAlterNote       $FD
0009B55D 01                         	dc.b	$01
0009B55E E100                       	smpsAlterNote       $00
0009B560 01                         	dc.b	$01
0009B561 E104                       	smpsAlterNote       $04
0009B563 01                         	dc.b	$01
0009B564 E1FD                       	smpsAlterNote       $FD
0009B566 ECF5                       	smpsPSGAlterVol     $F5
0009B568 9106                       	dc.b	nE1, $06
0009B56A EC04                       	smpsPSGAlterVol     $04
0009B56C E701                       	dc.b	smpsNoAttack, $01
0009B56E EC07                       	smpsPSGAlterVol     $07
0009B570 8003                       	dc.b	nRst, $03
0009B572 ECF5                       	smpsPSGAlterVol     $F5
0009B574 9106                       	dc.b	nE1, $06
0009B576 EC04                       	smpsPSGAlterVol     $04
0009B578 E701                       	dc.b	smpsNoAttack, $01
0009B57A EC07                       	smpsPSGAlterVol     $07
0009B57C 8006                       	dc.b	nRst, $06
0009B57E E100                       	smpsAlterNote       $00
0009B580 01                         	dc.b	$01
0009B581 E104                       	smpsAlterNote       $04
0009B583 01                         	dc.b	$01
0009B584 E100                       	smpsAlterNote       $00
0009B586 01                         	dc.b	$01
0009B587 E1FD                       	smpsAlterNote       $FD
0009B589 01                         	dc.b	$01
0009B58A ECF5                       	smpsPSGAlterVol     $F5
0009B58C 9206                       	dc.b	nF1, $06
0009B58E EC04                       	smpsPSGAlterVol     $04
0009B590 E701                       	dc.b	smpsNoAttack, $01
0009B592 EC07                       	smpsPSGAlterVol     $07
0009B594 8003                       	dc.b	nRst, $03
0009B596 ECF5                       	smpsPSGAlterVol     $F5
0009B598 9207                       	dc.b	nF1, $07
0009B59A EC0B                       	smpsPSGAlterVol     $0B
0009B59C 8007                       	dc.b	nRst, $07
0009B59E E103                       	smpsAlterNote       $03
0009B5A0 0101                       	dc.b	$01, $01
0009B5A2 E1FD                       	smpsAlterNote       $FD
0009B5A4 01                         	dc.b	$01
0009B5A5 E1FA                       	smpsAlterNote       $FA
0009B5A7 01                         	dc.b	$01
0009B5A8 E1FD                       	smpsAlterNote       $FD
0009B5AA ECF5                       	smpsPSGAlterVol     $F5
0009B5AC 9106                       	dc.b	nE1, $06
0009B5AE EC0B                       	smpsPSGAlterVol     $0B
0009B5B0 8004                       	dc.b	nRst, $04
0009B5B2 ECF5                       	smpsPSGAlterVol     $F5
0009B5B4 9106                       	dc.b	nE1, $06
0009B5B6 EC04                       	smpsPSGAlterVol     $04
0009B5B8 E701                       	dc.b	smpsNoAttack, $01
0009B5BA EC07                       	smpsPSGAlterVol     $07
0009B5BC 8006                       	dc.b	nRst, $06
0009B5BE E100                       	smpsAlterNote       $00
0009B5C0 01                         	dc.b	$01
0009B5C1 E104                       	smpsAlterNote       $04
0009B5C3 01                         	dc.b	$01
0009B5C4 E100                       	smpsAlterNote       $00
0009B5C6 01                         	dc.b	$01
0009B5C7 E1FA                       	smpsAlterNote       $FA
0009B5C9 01                         	dc.b	$01
0009B5CA E1FD                       	smpsAlterNote       $FD
0009B5CC ECF5                       	smpsPSGAlterVol     $F5
0009B5CE 9206                       	dc.b	nF1, $06
0009B5D0 EC04                       	smpsPSGAlterVol     $04
0009B5D2 E701                       	dc.b	smpsNoAttack, $01
0009B5D4 EC07                       	smpsPSGAlterVol     $07
0009B5D6 8003                       	dc.b	nRst, $03
0009B5D8 ECF5                       	smpsPSGAlterVol     $F5
0009B5DA 9206                       	dc.b	nF1, $06
0009B5DC EC04                       	smpsPSGAlterVol     $04
0009B5DE E701                       	dc.b	smpsNoAttack, $01
0009B5E0 EC07                       	smpsPSGAlterVol     $07
0009B5E2 8006                       	dc.b	nRst, $06
0009B5E4 E100                       	smpsAlterNote       $00
0009B5E6 01                         	dc.b	$01
0009B5E7 E104                       	smpsAlterNote       $04
0009B5E9 01                         	dc.b	$01
0009B5EA E103                       	smpsAlterNote       $03
0009B5EC 01                         	dc.b	$01
0009B5ED E1FD                       	smpsAlterNote       $FD
0009B5EF 01                         	dc.b	$01
0009B5F0 ECF5                       	smpsPSGAlterVol     $F5
0009B5F2 9107                       	dc.b	nE1, $07
0009B5F4 EC0B                       	smpsPSGAlterVol     $0B
0009B5F6 8004                       	dc.b	nRst, $04
0009B5F8 ECF5                       	smpsPSGAlterVol     $F5
0009B5FA 9106                       	dc.b	nE1, $06
0009B5FC EC0B                       	smpsPSGAlterVol     $0B
0009B5FE 8007                       	dc.b	nRst, $07
0009B600 E103                       	smpsAlterNote       $03
0009B602 0101                       	dc.b	$01, $01
0009B604 E100                       	smpsAlterNote       $00
0009B606 01                         	dc.b	$01
0009B607 E1FA                       	smpsAlterNote       $FA
0009B609 01                         	dc.b	$01
0009B60A E1FD                       	smpsAlterNote       $FD
0009B60C ECF5                       	smpsPSGAlterVol     $F5
0009B60E 9206                       	dc.b	nF1, $06
0009B610 EC04                       	smpsPSGAlterVol     $04
0009B612 E701                       	dc.b	smpsNoAttack, $01
0009B614 EC07                       	smpsPSGAlterVol     $07
0009B616 8003                       	dc.b	nRst, $03
0009B618 ECF5                       	smpsPSGAlterVol     $F5
0009B61A 9206                       	dc.b	nF1, $06
0009B61C EC04                       	smpsPSGAlterVol     $04
0009B61E E701                       	dc.b	smpsNoAttack, $01
0009B620 EC07                       	smpsPSGAlterVol     $07
0009B622 8006                       	dc.b	nRst, $06
0009B624 E100                       	smpsAlterNote       $00
0009B626 01                         	dc.b	$01
0009B627 E104                       	smpsAlterNote       $04
0009B629 01                         	dc.b	$01
0009B62A E100                       	smpsAlterNote       $00
0009B62C 01                         	dc.b	$01
0009B62D E1FD                       	smpsAlterNote       $FD
0009B62F 01                         	dc.b	$01
0009B630 ECF5                       	smpsPSGAlterVol     $F5
0009B632 9106                       	dc.b	nE1, $06
0009B634 EC04                       	smpsPSGAlterVol     $04
0009B636 E701                       	dc.b	smpsNoAttack, $01
0009B638 EC07                       	smpsPSGAlterVol     $07
0009B63A 8003                       	dc.b	nRst, $03
0009B63C ECF5                       	smpsPSGAlterVol     $F5
0009B63E 9107 9106                  	dc.b	nE1, $07, nE1, $06
0009B642 EC04                       	smpsPSGAlterVol     $04
0009B644 E701                       	dc.b	smpsNoAttack, $01
0009B646 ECFC                       	smpsPSGAlterVol     $FC
0009B648 9103                       	dc.b	nE1, $03
0009B64A EC04                       	smpsPSGAlterVol     $04
0009B64C E701                       	dc.b	smpsNoAttack, $01
0009B64E ECFC                       	smpsPSGAlterVol     $FC
0009B650 9102                       	dc.b	nE1, $02
0009B652 EC04                       	smpsPSGAlterVol     $04
0009B654 E701                       	dc.b	smpsNoAttack, $01
0009B656 ECFC                       	smpsPSGAlterVol     $FC
0009B658 9103                       	dc.b	nE1, $03
0009B65A EC0B                       	smpsPSGAlterVol     $0B
0009B65C 800A                       	dc.b	nRst, $0A
0009B65E E100                       	smpsAlterNote       $00
0009B660 01                         	dc.b	$01
0009B661 E104                       	smpsAlterNote       $04
0009B663 01                         	dc.b	$01
0009B664 E100                       	smpsAlterNote       $00
0009B666 01                         	dc.b	$01
0009B667 E1FA                       	smpsAlterNote       $FA
0009B669 01                         	dc.b	$01
0009B66A E1F9                       	smpsAlterNote       $F9
0009B66C 01                         	dc.b	$01
0009B66D E1FD                       	smpsAlterNote       $FD
0009B66F 01                         	dc.b	$01
0009B670 E103                       	smpsAlterNote       $03
0009B672 0101                       	dc.b	$01, $01
0009B674 E100                       	smpsAlterNote       $00
0009B676 01                         	dc.b	$01
0009B677 E1FA                       	smpsAlterNote       $FA
0009B679 0101                       	dc.b	$01, $01
0009B67B E1FD                       	smpsAlterNote       $FD
0009B67D ECF5                       	smpsPSGAlterVol     $F5
0009B67F 9206                       	dc.b	nF1, $06
0009B681 EC04                       	smpsPSGAlterVol     $04
0009B683 E704                       	dc.b	smpsNoAttack, $04
0009B685 ECFC                       	smpsPSGAlterVol     $FC
0009B687 9206                       	dc.b	nF1, $06
0009B689 EC04                       	smpsPSGAlterVol     $04
0009B68B E701                       	dc.b	smpsNoAttack, $01
0009B68D EC07                       	smpsPSGAlterVol     $07
0009B68F 8006                       	dc.b	nRst, $06
0009B691 E100                       	smpsAlterNote       $00
0009B693 01                         	dc.b	$01
0009B694 E104                       	smpsAlterNote       $04
0009B696 01                         	dc.b	$01
0009B697 E103                       	smpsAlterNote       $03
0009B699 01                         	dc.b	$01
0009B69A E1FD                       	smpsAlterNote       $FD
0009B69C 01                         	dc.b	$01
0009B69D ECF5                       	smpsPSGAlterVol     $F5
0009B69F 9407                       	dc.b	nG1, $07
0009B6A1 EC0B                       	smpsPSGAlterVol     $0B
0009B6A3 8004                       	dc.b	nRst, $04
0009B6A5 ECF5                       	smpsPSGAlterVol     $F5
0009B6A7 9406                       	dc.b	nG1, $06
0009B6A9 EC0B                       	smpsPSGAlterVol     $0B
0009B6AB 8007                       	dc.b	nRst, $07
0009B6AD E103                       	smpsAlterNote       $03
0009B6AF 0101                       	dc.b	$01, $01
0009B6B1 E1FD                       	smpsAlterNote       $FD
0009B6B3 01                         	dc.b	$01
0009B6B4 E1F9                       	smpsAlterNote       $F9
0009B6B6 01                         	dc.b	$01
0009B6B7 E1FD                       	smpsAlterNote       $FD
0009B6B9 ECF5                       	smpsPSGAlterVol     $F5
0009B6BB 9206                       	dc.b	nF1, $06
0009B6BD EC04                       	smpsPSGAlterVol     $04
0009B6BF E701                       	dc.b	smpsNoAttack, $01
0009B6C1 EC07                       	smpsPSGAlterVol     $07
0009B6C3 8003                       	dc.b	nRst, $03
0009B6C5 ECF5                       	smpsPSGAlterVol     $F5
0009B6C7 9206                       	dc.b	nF1, $06
0009B6C9 EC04                       	smpsPSGAlterVol     $04
0009B6CB E701                       	dc.b	smpsNoAttack, $01
0009B6CD EC07                       	smpsPSGAlterVol     $07
0009B6CF 8006                       	dc.b	nRst, $06
0009B6D1 E100                       	smpsAlterNote       $00
0009B6D3 01                         	dc.b	$01
0009B6D4 E104                       	smpsAlterNote       $04
0009B6D6 01                         	dc.b	$01
0009B6D7 E100                       	smpsAlterNote       $00
0009B6D9 01                         	dc.b	$01
0009B6DA E1FA                       	smpsAlterNote       $FA
0009B6DC 01                         	dc.b	$01
0009B6DD E1FD                       	smpsAlterNote       $FD
0009B6DF ECF5                       	smpsPSGAlterVol     $F5
0009B6E1 9206                       	dc.b	nF1, $06
0009B6E3 EC04                       	smpsPSGAlterVol     $04
0009B6E5 E701                       	dc.b	smpsNoAttack, $01
0009B6E7 EC07                       	smpsPSGAlterVol     $07
0009B6E9 8003                       	dc.b	nRst, $03
0009B6EB ECF5                       	smpsPSGAlterVol     $F5
0009B6ED 9107                       	dc.b	nE1, $07
0009B6EF EC0B                       	smpsPSGAlterVol     $0B
0009B6F1 8006                       	dc.b	nRst, $06
0009B6F3 E100                       	smpsAlterNote       $00
0009B6F5 01                         	dc.b	$01
0009B6F6 E103                       	smpsAlterNote       $03
0009B6F8 0101                       	dc.b	$01, $01
0009B6FA E1FD                       	smpsAlterNote       $FD
0009B6FC 01                         	dc.b	$01
0009B6FD ECF5                       	smpsPSGAlterVol     $F5
0009B6FF 9207                       	dc.b	nF1, $07
0009B701 EC0B                       	smpsPSGAlterVol     $0B
0009B703 8004                       	dc.b	nRst, $04
0009B705 ECF5                       	smpsPSGAlterVol     $F5
0009B707 9206                       	dc.b	nF1, $06
0009B709 EC04                       	smpsPSGAlterVol     $04
0009B70B E701                       	dc.b	smpsNoAttack, $01
0009B70D EC07                       	smpsPSGAlterVol     $07
0009B70F 8006                       	dc.b	nRst, $06
0009B711 E103                       	smpsAlterNote       $03
0009B713 01                         	dc.b	$01
0009B714 E104                       	smpsAlterNote       $04
0009B716 01                         	dc.b	$01
0009B717 E100                       	smpsAlterNote       $00
0009B719 01                         	dc.b	$01
0009B71A E1FB                       	smpsAlterNote       $FB
0009B71C 01                         	dc.b	$01
0009B71D E1FD                       	smpsAlterNote       $FD
0009B71F ECF5                       	smpsPSGAlterVol     $F5
0009B721 9406                       	dc.b	nG1, $06
0009B723 EC04                       	smpsPSGAlterVol     $04
0009B725 E701                       	dc.b	smpsNoAttack, $01
0009B727 EC07                       	smpsPSGAlterVol     $07
0009B729 8003                       	dc.b	nRst, $03
0009B72B ECF5                       	smpsPSGAlterVol     $F5
0009B72D 9406                       	dc.b	nG1, $06
0009B72F EC04                       	smpsPSGAlterVol     $04
0009B731 E701                       	dc.b	smpsNoAttack, $01
0009B733 EC07                       	smpsPSGAlterVol     $07
0009B735 8006                       	dc.b	nRst, $06
0009B737 E100                       	smpsAlterNote       $00
0009B739 01                         	dc.b	$01
0009B73A E104                       	smpsAlterNote       $04
0009B73C 01                         	dc.b	$01
0009B73D E100                       	smpsAlterNote       $00
0009B73F 01                         	dc.b	$01
0009B740 E1FD                       	smpsAlterNote       $FD
0009B742 01                         	dc.b	$01
0009B743 ECF5                       	smpsPSGAlterVol     $F5
0009B745 9206                       	dc.b	nF1, $06
0009B747 EC04                       	smpsPSGAlterVol     $04
0009B749 E701                       	dc.b	smpsNoAttack, $01
0009B74B EC07                       	smpsPSGAlterVol     $07
0009B74D 8003                       	dc.b	nRst, $03
0009B74F ECF5                       	smpsPSGAlterVol     $F5
0009B751 9207                       	dc.b	nF1, $07
0009B753 EC0B                       	smpsPSGAlterVol     $0B
0009B755 8007                       	dc.b	nRst, $07
0009B757 E103                       	smpsAlterNote       $03
0009B759 0101                       	dc.b	$01, $01
0009B75B E1FD                       	smpsAlterNote       $FD
0009B75D 01                         	dc.b	$01
0009B75E E1FA                       	smpsAlterNote       $FA
0009B760 01                         	dc.b	$01
0009B761 E1FD                       	smpsAlterNote       $FD
0009B763 ECF5                       	smpsPSGAlterVol     $F5
0009B765 9206                       	dc.b	nF1, $06
0009B767 EC0B                       	smpsPSGAlterVol     $0B
0009B769 8004                       	dc.b	nRst, $04
0009B76B ECF5                       	smpsPSGAlterVol     $F5
0009B76D 9206                       	dc.b	nF1, $06
0009B76F EC04                       	smpsPSGAlterVol     $04
0009B771 E701                       	dc.b	smpsNoAttack, $01
0009B773 EC07                       	smpsPSGAlterVol     $07
0009B775 8006                       	dc.b	nRst, $06
0009B777 E100                       	smpsAlterNote       $00
0009B779 01                         	dc.b	$01
0009B77A E104                       	smpsAlterNote       $04
0009B77C 01                         	dc.b	$01
0009B77D E100                       	smpsAlterNote       $00
0009B77F 01                         	dc.b	$01
0009B780 E1FA                       	smpsAlterNote       $FA
0009B782 01                         	dc.b	$01
0009B783 E1FD                       	smpsAlterNote       $FD
0009B785 ECF5                       	smpsPSGAlterVol     $F5
0009B787 9206                       	dc.b	nF1, $06
0009B789 EC04                       	smpsPSGAlterVol     $04
0009B78B E701                       	dc.b	smpsNoAttack, $01
0009B78D EC07                       	smpsPSGAlterVol     $07
0009B78F 8003                       	dc.b	nRst, $03
0009B791 ECF5                       	smpsPSGAlterVol     $F5
0009B793 9207                       	dc.b	nF1, $07
0009B795 EC0B                       	smpsPSGAlterVol     $0B
0009B797 8006                       	dc.b	nRst, $06
0009B799 E100                       	smpsAlterNote       $00
0009B79B 01                         	dc.b	$01
0009B79C E103                       	smpsAlterNote       $03
0009B79E 0101                       	dc.b	$01, $01
0009B7A0 E1FD                       	smpsAlterNote       $FD
0009B7A2 01                         	dc.b	$01
0009B7A3 ECF5                       	smpsPSGAlterVol     $F5
0009B7A5 9207                       	dc.b	nF1, $07
0009B7A7 EC0B                       	smpsPSGAlterVol     $0B
0009B7A9 8004                       	dc.b	nRst, $04
0009B7AB ECF5                       	smpsPSGAlterVol     $F5
0009B7AD 9206                       	dc.b	nF1, $06
0009B7AF EC0B                       	smpsPSGAlterVol     $0B
0009B7B1 8007                       	dc.b	nRst, $07
0009B7B3 E103                       	smpsAlterNote       $03
0009B7B5 0101                       	dc.b	$01, $01
0009B7B7 E100                       	smpsAlterNote       $00
0009B7B9 01                         	dc.b	$01
0009B7BA E1FA                       	smpsAlterNote       $FA
0009B7BC 01                         	dc.b	$01
0009B7BD E1FD                       	smpsAlterNote       $FD
0009B7BF ECF5                       	smpsPSGAlterVol     $F5
0009B7C1 9206                       	dc.b	nF1, $06
0009B7C3 EC04                       	smpsPSGAlterVol     $04
0009B7C5 E701                       	dc.b	smpsNoAttack, $01
0009B7C7 EC07                       	smpsPSGAlterVol     $07
0009B7C9 8003                       	dc.b	nRst, $03
0009B7CB ECF5                       	smpsPSGAlterVol     $F5
0009B7CD 9206                       	dc.b	nF1, $06
0009B7CF EC04                       	smpsPSGAlterVol     $04
0009B7D1 E701                       	dc.b	smpsNoAttack, $01
0009B7D3 EC07                       	smpsPSGAlterVol     $07
0009B7D5 8006                       	dc.b	nRst, $06
0009B7D7 E100                       	smpsAlterNote       $00
0009B7D9 01                         	dc.b	$01
0009B7DA E104                       	smpsAlterNote       $04
0009B7DC 01                         	dc.b	$01
0009B7DD E100                       	smpsAlterNote       $00
0009B7DF 01                         	dc.b	$01
0009B7E0 E1FD                       	smpsAlterNote       $FD
0009B7E2 01                         	dc.b	$01
0009B7E3 ECF5                       	smpsPSGAlterVol     $F5
0009B7E5 9206                       	dc.b	nF1, $06
0009B7E7 EC04                       	smpsPSGAlterVol     $04
0009B7E9 E701                       	dc.b	smpsNoAttack, $01
0009B7EB EC07                       	smpsPSGAlterVol     $07
0009B7ED 8003                       	dc.b	nRst, $03
0009B7EF ECF5                       	smpsPSGAlterVol     $F5
0009B7F1 9207                       	dc.b	nF1, $07
0009B7F3 EC0B                       	smpsPSGAlterVol     $0B
0009B7F5 8007                       	dc.b	nRst, $07
0009B7F7 E104                       	smpsAlterNote       $04
0009B7F9 0101                       	dc.b	$01, $01
0009B7FB E1FB                       	smpsAlterNote       $FB
0009B7FD 01                         	dc.b	$01
0009B7FE E1F6                       	smpsAlterNote       $F6
0009B800 0101                       	dc.b	$01, $01
0009B802 E1FF                       	smpsAlterNote       $FF
0009B804 01                         	dc.b	$01
0009B805 E105                       	smpsAlterNote       $05
0009B807 01                         	dc.b	$01
0009B808 E104                       	smpsAlterNote       $04
0009B80A 01                         	dc.b	$01
0009B80B E1FB                       	smpsAlterNote       $FB
0009B80D 01                         	dc.b	$01
0009B80E E1F5                       	smpsAlterNote       $F5
0009B810 01                         	dc.b	$01
0009B811 E1FC                       	smpsAlterNote       $FC
0009B813 ECF5                       	smpsPSGAlterVol     $F5
0009B815 8B0E                       	dc.b	nBb0, $0E
0009B817 E102                       	smpsAlterNote       $02
0009B819 EC0B                       	smpsPSGAlterVol     $0B
0009B81B 8001                       	dc.b	nRst, $01
0009B81D E101                       	smpsAlterNote       $01
0009B81F 01                         	dc.b	$01
0009B820 E1FC                       	smpsAlterNote       $FC
0009B822 01                         	dc.b	$01
0009B823 E1F9                       	smpsAlterNote       $F9
0009B825 0101                       	dc.b	$01, $01
0009B827 E1FF                       	smpsAlterNote       $FF
0009B829 01                         	dc.b	$01
0009B82A E102                       	smpsAlterNote       $02
0009B82C 01                         	dc.b	$01
0009B82D E1FF                       	smpsAlterNote       $FF
0009B82F 01                         	dc.b	$01
0009B830 E1FC                       	smpsAlterNote       $FC
0009B832 01                         	dc.b	$01
0009B833 E1F8                       	smpsAlterNote       $F8
0009B835 01                         	dc.b	$01
0009B836 E1FC                       	smpsAlterNote       $FC
0009B838 01                         	dc.b	$01
0009B839 E101                       	smpsAlterNote       $01
0009B83B 01                         	dc.b	$01
0009B83C E102                       	smpsAlterNote       $02
0009B83E 01                         	dc.b	$01
0009B83F E1FF                       	smpsAlterNote       $FF
0009B841 01                         	dc.b	$01
0009B842 E1FB                       	smpsAlterNote       $FB
0009B844 ECF5                       	smpsPSGAlterVol     $F5
0009B846 8D0D                       	dc.b	nC1, $0D
0009B848 E101                       	smpsAlterNote       $01
0009B84A EC0B                       	smpsPSGAlterVol     $0B
0009B84C 8001                       	dc.b	nRst, $01
0009B84E E102                       	smpsAlterNote       $02
0009B850 01                         	dc.b	$01
0009B851 E1FF                       	smpsAlterNote       $FF
0009B853 01                         	dc.b	$01
0009B854 E1F9                       	smpsAlterNote       $F9
0009B856 0101                       	dc.b	$01, $01
0009B858 E1FC                       	smpsAlterNote       $FC
0009B85A 01                         	dc.b	$01
0009B85B E101                       	smpsAlterNote       $01
0009B85D 0101                       	dc.b	$01, $01
0009B85F E1FC                       	smpsAlterNote       $FC
0009B861 01                         	dc.b	$01
0009B862 E1F9                       	smpsAlterNote       $F9
0009B864 0101                       	dc.b	$01, $01
0009B866 E1FF                       	smpsAlterNote       $FF
0009B868 01                         	dc.b	$01
0009B869 E102                       	smpsAlterNote       $02
0009B86B 01                         	dc.b	$01
0009B86C E101                       	smpsAlterNote       $01
0009B86E 01                         	dc.b	$01
0009B86F E1FC                       	smpsAlterNote       $FC
0009B871 ECF5                       	smpsPSGAlterVol     $F5
0009B873 8F0D                       	dc.b	nD1, $0D
0009B875 E1FF                       	smpsAlterNote       $FF
0009B877 EC04                       	smpsPSGAlterVol     $04
0009B879 E701                       	dc.b	smpsNoAttack, $01
0009B87B EC07                       	smpsPSGAlterVol     $07
0009B87D E103                       	smpsAlterNote       $03
0009B87F 8001                       	dc.b	nRst, $01
0009B881 E102                       	smpsAlterNote       $02
0009B883 01                         	dc.b	$01
0009B884 E1FD                       	smpsAlterNote       $FD
0009B886 01                         	dc.b	$01
0009B887 E1F9                       	smpsAlterNote       $F9
0009B889 01                         	dc.b	$01
0009B88A E1FD                       	smpsAlterNote       $FD
0009B88C 01                         	dc.b	$01
0009B88D E100                       	smpsAlterNote       $00
0009B88F 01                         	dc.b	$01
0009B890 E103                       	smpsAlterNote       $03
0009B892 01                         	dc.b	$01
0009B893 E100                       	smpsAlterNote       $00
0009B895 01                         	dc.b	$01
0009B896 E1FA                       	smpsAlterNote       $FA
0009B898 01                         	dc.b	$01
0009B899 E1F9                       	smpsAlterNote       $F9
0009B89B 01                         	dc.b	$01
0009B89C E1FD                       	smpsAlterNote       $FD
0009B89E 01                         	dc.b	$01
0009B89F E102                       	smpsAlterNote       $02
0009B8A1 0101                       	dc.b	$01, $01
0009B8A3 E100                       	smpsAlterNote       $00
0009B8A5 01                         	dc.b	$01
0009B8A6 E1FD                       	smpsAlterNote       $FD
0009B8A8 ECF5                       	smpsPSGAlterVol     $F5
0009B8AA 910D                       	dc.b	nE1, $0D
0009B8AC E103                       	smpsAlterNote       $03
0009B8AE EC0B                       	smpsPSGAlterVol     $0B
0009B8B0 8001 01                    	dc.b	nRst, $01, $01
0009B8B3 E100                       	smpsAlterNote       $00
0009B8B5 01                         	dc.b	$01
0009B8B6 E1FA                       	smpsAlterNote       $FA
0009B8B8 0101                       	dc.b	$01, $01
0009B8BA E100                       	smpsAlterNote       $00
0009B8BC 01                         	dc.b	$01
0009B8BD E103                       	smpsAlterNote       $03
0009B8BF 01                         	dc.b	$01
0009B8C0 E1FD                       	smpsAlterNote       $FD
0009B8C2 ECF5                       	smpsPSGAlterVol     $F5
0009B8C4 9206                       	dc.b	nF1, $06
0009B8C6 EC04                       	smpsPSGAlterVol     $04
0009B8C8 E701                       	dc.b	smpsNoAttack, $01
0009B8CA EC07                       	smpsPSGAlterVol     $07
0009B8CC 8003                       	dc.b	nRst, $03
0009B8CE ECF5                       	smpsPSGAlterVol     $F5
0009B8D0 9207                       	dc.b	nF1, $07
0009B8D2 EC0B                       	smpsPSGAlterVol     $0B
0009B8D4 8006                       	dc.b	nRst, $06
0009B8D6 E100                       	smpsAlterNote       $00
0009B8D8 01                         	dc.b	$01
0009B8D9 E103                       	smpsAlterNote       $03
0009B8DB 0101                       	dc.b	$01, $01
0009B8DD E1FD                       	smpsAlterNote       $FD
0009B8DF 01                         	dc.b	$01
0009B8E0 ECF5                       	smpsPSGAlterVol     $F5
0009B8E2 9407                       	dc.b	nG1, $07
0009B8E4 EC0B                       	smpsPSGAlterVol     $0B
0009B8E6 8004                       	dc.b	nRst, $04
0009B8E8 ECF5                       	smpsPSGAlterVol     $F5
0009B8EA 9406                       	dc.b	nG1, $06
0009B8EC EC04                       	smpsPSGAlterVol     $04
0009B8EE E701                       	dc.b	smpsNoAttack, $01
0009B8F0 EC07                       	smpsPSGAlterVol     $07
0009B8F2 8006                       	dc.b	nRst, $06
0009B8F4 E103                       	smpsAlterNote       $03
0009B8F6 01                         	dc.b	$01
0009B8F7 E104                       	smpsAlterNote       $04
0009B8F9 01                         	dc.b	$01
0009B8FA E100                       	smpsAlterNote       $00
0009B8FC 01                         	dc.b	$01
0009B8FD E1F9                       	smpsAlterNote       $F9
0009B8FF 01                         	dc.b	$01
0009B900 E1FD                       	smpsAlterNote       $FD
0009B902 ECF5                       	smpsPSGAlterVol     $F5
0009B904 9206                       	dc.b	nF1, $06
0009B906 EC04                       	smpsPSGAlterVol     $04
0009B908 E701                       	dc.b	smpsNoAttack, $01
0009B90A EC07                       	smpsPSGAlterVol     $07
0009B90C 8003                       	dc.b	nRst, $03
0009B90E ECF5                       	smpsPSGAlterVol     $F5
0009B910 9206                       	dc.b	nF1, $06
0009B912 EC04                       	smpsPSGAlterVol     $04
0009B914 E701                       	dc.b	smpsNoAttack, $01
0009B916 EC07                       	smpsPSGAlterVol     $07
0009B918 8006                       	dc.b	nRst, $06
0009B91A E100                       	smpsAlterNote       $00
0009B91C 01                         	dc.b	$01
0009B91D E104                       	smpsAlterNote       $04
0009B91F 01                         	dc.b	$01
0009B920 E103                       	smpsAlterNote       $03
0009B922 01                         	dc.b	$01
0009B923 E1FD                       	smpsAlterNote       $FD
0009B925 01                         	dc.b	$01
0009B926 ECF5                       	smpsPSGAlterVol     $F5
0009B928 9407                       	dc.b	nG1, $07
0009B92A EC0B                       	smpsPSGAlterVol     $0B
0009B92C 8004                       	dc.b	nRst, $04
0009B92E ECF5                       	smpsPSGAlterVol     $F5
0009B930 9406                       	dc.b	nG1, $06
0009B932 EC0B                       	smpsPSGAlterVol     $0B
0009B934 8007                       	dc.b	nRst, $07
0009B936 E103                       	smpsAlterNote       $03
0009B938 0101                       	dc.b	$01, $01
0009B93A E100                       	smpsAlterNote       $00
0009B93C 01                         	dc.b	$01
0009B93D E1F9                       	smpsAlterNote       $F9
0009B93F 01                         	dc.b	$01
0009B940 E1FD                       	smpsAlterNote       $FD
0009B942 ECF5                       	smpsPSGAlterVol     $F5
0009B944 9206                       	dc.b	nF1, $06
0009B946 EC04                       	smpsPSGAlterVol     $04
0009B948 E701                       	dc.b	smpsNoAttack, $01
0009B94A EC07                       	smpsPSGAlterVol     $07
0009B94C 8003                       	dc.b	nRst, $03
0009B94E ECF5                       	smpsPSGAlterVol     $F5
0009B950 9206                       	dc.b	nF1, $06
0009B952 EC04                       	smpsPSGAlterVol     $04
0009B954 E701                       	dc.b	smpsNoAttack, $01
0009B956 EC07                       	smpsPSGAlterVol     $07
0009B958 8006                       	dc.b	nRst, $06
0009B95A E100                       	smpsAlterNote       $00
0009B95C 01                         	dc.b	$01
0009B95D E104                       	smpsAlterNote       $04
0009B95F 01                         	dc.b	$01
0009B960 E100                       	smpsAlterNote       $00
0009B962 01                         	dc.b	$01
0009B963 E1FB                       	smpsAlterNote       $FB
0009B965 01                         	dc.b	$01
0009B966 E1FD                       	smpsAlterNote       $FD
0009B968 ECF5                       	smpsPSGAlterVol     $F5
0009B96A 9406                       	dc.b	nG1, $06
0009B96C EC04                       	smpsPSGAlterVol     $04
0009B96E E701                       	dc.b	smpsNoAttack, $01
0009B970 EC07                       	smpsPSGAlterVol     $07
0009B972 8003                       	dc.b	nRst, $03
0009B974 ECF5                       	smpsPSGAlterVol     $F5
0009B976 9407                       	dc.b	nG1, $07
0009B978 EC0B                       	smpsPSGAlterVol     $0B
0009B97A 8006                       	dc.b	nRst, $06
0009B97C E100                       	smpsAlterNote       $00
0009B97E 01                         	dc.b	$01
0009B97F E103                       	smpsAlterNote       $03
0009B981 0101                       	dc.b	$01, $01
0009B983 E1FD                       	smpsAlterNote       $FD
0009B985 01                         	dc.b	$01
0009B986 ECF5                       	smpsPSGAlterVol     $F5
0009B988 9207                       	dc.b	nF1, $07
0009B98A EC0B                       	smpsPSGAlterVol     $0B
0009B98C 8004                       	dc.b	nRst, $04
0009B98E ECF5                       	smpsPSGAlterVol     $F5
0009B990 9206                       	dc.b	nF1, $06
0009B992 EC04                       	smpsPSGAlterVol     $04
0009B994 E701                       	dc.b	smpsNoAttack, $01
0009B996 ECFC                       	smpsPSGAlterVol     $FC
0009B998 E1FC                       	smpsAlterNote       $FC
0009B99A 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0009B99E EC04                       	smpsPSGAlterVol     $04
0009B9A0 E701                       	dc.b	smpsNoAttack, $01
0009B9A2 ECFC                       	smpsPSGAlterVol     $FC
0009B9A4 9003                       	dc.b	nEb1, $03
0009B9A6 E1FD                       	smpsAlterNote       $FD
0009B9A8 9403                       	dc.b	nG1, $03
0009B9AA EC04                       	smpsPSGAlterVol     $04
0009B9AC E701                       	dc.b	smpsNoAttack, $01
0009B9AE E1FE                       	smpsAlterNote       $FE
0009B9B0 ECFC                       	smpsPSGAlterVol     $FC
0009B9B2 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0009B9B6 EC04                       	smpsPSGAlterVol     $04
0009B9B8 E701                       	dc.b	smpsNoAttack, $01
0009B9BA EC07                       	smpsPSGAlterVol     $07
0009B9BC 8009                       	dc.b	nRst, $09
0009B9BE E100                       	smpsAlterNote       $00
0009B9C0 01                         	dc.b	$01
0009B9C1 F6F5 19                    	smpsJump            music84_Jump07
0009B9C4                            
0009B9C4                            ; PSG2 Data
0009B9C4                            music84_PSG2:
0009B9C4 E1FC                       	smpsAlterNote       $FC
0009B9C6 EC04                       	smpsPSGAlterVol     $04
0009B9C8 8F03                       	dc.b	nD1, $03
0009B9CA E1FD                       	smpsAlterNote       $FD
0009B9CC 9203                       	dc.b	nF1, $03
0009B9CE EC04                       	smpsPSGAlterVol     $04
0009B9D0 E701                       	dc.b	smpsNoAttack, $01
0009B9D2 E1FE                       	smpsAlterNote       $FE
0009B9D4 ECFC                       	smpsPSGAlterVol     $FC
0009B9D6 9603                       	dc.b	nA1, $03
0009B9D8 E1FD                       	smpsAlterNote       $FD
0009B9DA 9103                       	dc.b	nE1, $03
0009B9DC EC04                       	smpsPSGAlterVol     $04
0009B9DE E701                       	dc.b	smpsNoAttack, $01
0009B9E0 ECFC                       	smpsPSGAlterVol     $FC
0009B9E2 9403                       	dc.b	nG1, $03
0009B9E4 E1FE                       	smpsAlterNote       $FE
0009B9E6 9703                       	dc.b	nBb1, $03
0009B9E8 EC04                       	smpsPSGAlterVol     $04
0009B9EA E701                       	dc.b	smpsNoAttack, $01
0009B9EC E1FF                       	smpsAlterNote       $FF
0009B9EE ECFC                       	smpsPSGAlterVol     $FC
0009B9F0 9B02                       	dc.b	nD2, $02
0009B9F2 EC04                       	smpsPSGAlterVol     $04
0009B9F4 E701                       	dc.b	smpsNoAttack, $01
0009B9F6 ECFC                       	smpsPSGAlterVol     $FC
0009B9F8 E1FE                       	smpsAlterNote       $FE
0009B9FA 9A03                       	dc.b	nCs2, $03
0009B9FC EC0B                       	smpsPSGAlterVol     $0B
0009B9FE 800A                       	dc.b	nRst, $0A
0009BA00 E102                       	smpsAlterNote       $02
0009BA02 01                         	dc.b	$01
0009BA03 E10A                       	smpsAlterNote       $0A
0009BA05 01                         	dc.b	$01
0009BA06 E102                       	smpsAlterNote       $02
0009BA08 01                         	dc.b	$01
0009BA09 E1FC                       	smpsAlterNote       $FC
0009BA0B 01                         	dc.b	$01
0009BA0C E10A                       	smpsAlterNote       $0A
0009BA0E 01                         	dc.b	$01
0009BA0F E1FC                       	smpsAlterNote       $FC
0009BA11 01                         	dc.b	$01
0009BA12 E108                       	smpsAlterNote       $08
0009BA14 01                         	dc.b	$01
0009BA15 E10A                       	smpsAlterNote       $0A
0009BA17 01                         	dc.b	$01
0009BA18 E102                       	smpsAlterNote       $02
0009BA1A 01                         	dc.b	$01
0009BA1B E1F7                       	smpsAlterNote       $F7
0009BA1D 0101                       	dc.b	$01, $01
0009BA1F E102                       	smpsAlterNote       $02
0009BA21 01                         	dc.b	$01
0009BA22 E108                       	smpsAlterNote       $08
0009BA24 0101                       	dc.b	$01, $01
0009BA26 E1FC                       	smpsAlterNote       $FC
0009BA28 01                         	dc.b	$01
0009BA29 E10A                       	smpsAlterNote       $0A
0009BA2B 01                         	dc.b	$01
0009BA2C E1F7                       	smpsAlterNote       $F7
0009BA2E 01                         	dc.b	$01
0009BA2F E102                       	smpsAlterNote       $02
0009BA31 01                         	dc.b	$01
0009BA32 E10A                       	smpsAlterNote       $0A
0009BA34 01                         	dc.b	$01
0009BA35 E102                       	smpsAlterNote       $02
0009BA37 01                         	dc.b	$01
0009BA38 E1FC                       	smpsAlterNote       $FC
0009BA3A 01                         	dc.b	$01
0009BA3B                            
0009BA3B                            music84_Jump06:
0009BA3B E10A                       	smpsAlterNote       $0A
0009BA3D 8001                       	dc.b	nRst, $01
0009BA3F E1FC                       	smpsAlterNote       $FC
0009BA41 01                         	dc.b	$01
0009BA42 E108                       	smpsAlterNote       $08
0009BA44 01                         	dc.b	$01
0009BA45 E10A                       	smpsAlterNote       $0A
0009BA47 01                         	dc.b	$01
0009BA48 E1FC                       	smpsAlterNote       $FC
0009BA4A ECF5                       	smpsPSGAlterVol     $F5
0009BA4C 8F06                       	dc.b	nD1, $06
0009BA4E EC04                       	smpsPSGAlterVol     $04
0009BA50 E701                       	dc.b	smpsNoAttack, $01
0009BA52 EC07                       	smpsPSGAlterVol     $07
0009BA54 8003                       	dc.b	nRst, $03
0009BA56 ECF5                       	smpsPSGAlterVol     $F5
0009BA58 8F06                       	dc.b	nD1, $06
0009BA5A EC04                       	smpsPSGAlterVol     $04
0009BA5C E701                       	dc.b	smpsNoAttack, $01
0009BA5E EC07                       	smpsPSGAlterVol     $07
0009BA60 8006                       	dc.b	nRst, $06
0009BA62 E1FF                       	smpsAlterNote       $FF
0009BA64 01                         	dc.b	$01
0009BA65 E102                       	smpsAlterNote       $02
0009BA67 01                         	dc.b	$01
0009BA68 E1FF                       	smpsAlterNote       $FF
0009BA6A 01                         	dc.b	$01
0009BA6B E1F9                       	smpsAlterNote       $F9
0009BA6D 01                         	dc.b	$01
0009BA6E E1FC                       	smpsAlterNote       $FC
0009BA70 ECF5                       	smpsPSGAlterVol     $F5
0009BA72 9006                       	dc.b	nEb1, $06
0009BA74 EC04                       	smpsPSGAlterVol     $04
0009BA76 E701                       	dc.b	smpsNoAttack, $01
0009BA78 EC07                       	smpsPSGAlterVol     $07
0009BA7A 8003                       	dc.b	nRst, $03
0009BA7C ECF5                       	smpsPSGAlterVol     $F5
0009BA7E 9007                       	dc.b	nEb1, $07
0009BA80 EC0B                       	smpsPSGAlterVol     $0B
0009BA82 8006                       	dc.b	nRst, $06
0009BA84 E1FF                       	smpsAlterNote       $FF
0009BA86 01                         	dc.b	$01
0009BA87 E103                       	smpsAlterNote       $03
0009BA89 0101                       	dc.b	$01, $01
0009BA8B E1FC                       	smpsAlterNote       $FC
0009BA8D 01                         	dc.b	$01
0009BA8E ECF5                       	smpsPSGAlterVol     $F5
0009BA90 8F07                       	dc.b	nD1, $07
0009BA92 EC0B                       	smpsPSGAlterVol     $0B
0009BA94 8004                       	dc.b	nRst, $04
0009BA96 ECF5                       	smpsPSGAlterVol     $F5
0009BA98 8F06                       	dc.b	nD1, $06
0009BA9A EC04                       	smpsPSGAlterVol     $04
0009BA9C E701                       	dc.b	smpsNoAttack, $01
0009BA9E EC07                       	smpsPSGAlterVol     $07
0009BAA0 8006                       	dc.b	nRst, $06
0009BAA2 E102                       	smpsAlterNote       $02
0009BAA4 01                         	dc.b	$01
0009BAA5 E103                       	smpsAlterNote       $03
0009BAA7 01                         	dc.b	$01
0009BAA8 E1FF                       	smpsAlterNote       $FF
0009BAAA 01                         	dc.b	$01
0009BAAB E1F9                       	smpsAlterNote       $F9
0009BAAD 01                         	dc.b	$01
0009BAAE E1FC                       	smpsAlterNote       $FC
0009BAB0 ECF5                       	smpsPSGAlterVol     $F5
0009BAB2 8F06                       	dc.b	nD1, $06
0009BAB4 EC04                       	smpsPSGAlterVol     $04
0009BAB6 E701                       	dc.b	smpsNoAttack, $01
0009BAB8 EC07                       	smpsPSGAlterVol     $07
0009BABA 8003                       	dc.b	nRst, $03
0009BABC ECF5                       	smpsPSGAlterVol     $F5
0009BABE 8F06                       	dc.b	nD1, $06
0009BAC0 EC04                       	smpsPSGAlterVol     $04
0009BAC2 E701                       	dc.b	smpsNoAttack, $01
0009BAC4 EC07                       	smpsPSGAlterVol     $07
0009BAC6 8006                       	dc.b	nRst, $06
0009BAC8 E1FF                       	smpsAlterNote       $FF
0009BACA 01                         	dc.b	$01
0009BACB E103                       	smpsAlterNote       $03
0009BACD 01                         	dc.b	$01
0009BACE E1FF                       	smpsAlterNote       $FF
0009BAD0 01                         	dc.b	$01
0009BAD1 E1FC                       	smpsAlterNote       $FC
0009BAD3 01                         	dc.b	$01
0009BAD4 ECF5                       	smpsPSGAlterVol     $F5
0009BAD6 8F06                       	dc.b	nD1, $06
0009BAD8 EC04                       	smpsPSGAlterVol     $04
0009BADA E701                       	dc.b	smpsNoAttack, $01
0009BADC EC07                       	smpsPSGAlterVol     $07
0009BADE 8003                       	dc.b	nRst, $03
0009BAE0 ECF5                       	smpsPSGAlterVol     $F5
0009BAE2 8F07                       	dc.b	nD1, $07
0009BAE4 EC0B                       	smpsPSGAlterVol     $0B
0009BAE6 8007                       	dc.b	nRst, $07
0009BAE8 E101                       	smpsAlterNote       $01
0009BAEA 0101                       	dc.b	$01, $01
0009BAEC E1FC                       	smpsAlterNote       $FC
0009BAEE 01                         	dc.b	$01
0009BAEF E1F9                       	smpsAlterNote       $F9
0009BAF1 01                         	dc.b	$01
0009BAF2 E1FC                       	smpsAlterNote       $FC
0009BAF4 ECF5                       	smpsPSGAlterVol     $F5
0009BAF6 9006                       	dc.b	nEb1, $06
0009BAF8 EC0B                       	smpsPSGAlterVol     $0B
0009BAFA 8004                       	dc.b	nRst, $04
0009BAFC ECF5                       	smpsPSGAlterVol     $F5
0009BAFE 9006                       	dc.b	nEb1, $06
0009BB00 EC04                       	smpsPSGAlterVol     $04
0009BB02 E701                       	dc.b	smpsNoAttack, $01
0009BB04 EC07                       	smpsPSGAlterVol     $07
0009BB06 8006                       	dc.b	nRst, $06
0009BB08 E100                       	smpsAlterNote       $00
0009BB0A 01                         	dc.b	$01
0009BB0B E102                       	smpsAlterNote       $02
0009BB0D 01                         	dc.b	$01
0009BB0E E100                       	smpsAlterNote       $00
0009BB10 01                         	dc.b	$01
0009BB11 E1FD                       	smpsAlterNote       $FD
0009BB13 01                         	dc.b	$01
0009BB14 E1FF                       	smpsAlterNote       $FF
0009BB16 ECF5                       	smpsPSGAlterVol     $F5
0009BB18 9B06                       	dc.b	nD2, $06
0009BB1A EC04                       	smpsPSGAlterVol     $04
0009BB1C E701                       	dc.b	smpsNoAttack, $01
0009BB1E EC07                       	smpsPSGAlterVol     $07
0009BB20 8003                       	dc.b	nRst, $03
0009BB22 ECF5                       	smpsPSGAlterVol     $F5
0009BB24 9B07                       	dc.b	nD2, $07
0009BB26 EC0B                       	smpsPSGAlterVol     $0B
0009BB28 8006                       	dc.b	nRst, $06
0009BB2A E102                       	smpsAlterNote       $02
0009BB2C 01                         	dc.b	$01
0009BB2D E106                       	smpsAlterNote       $06
0009BB2F 01                         	dc.b	$01
0009BB30 E105                       	smpsAlterNote       $05
0009BB32 01                         	dc.b	$01
0009BB33 E1FF                       	smpsAlterNote       $FF
0009BB35 01                         	dc.b	$01
0009BB36 ECF5                       	smpsPSGAlterVol     $F5
0009BB38 9B07                       	dc.b	nD2, $07
0009BB3A EC0B                       	smpsPSGAlterVol     $0B
0009BB3C 8004                       	dc.b	nRst, $04
0009BB3E ECF5                       	smpsPSGAlterVol     $F5
0009BB40 9B06                       	dc.b	nD2, $06
0009BB42 EC0B                       	smpsPSGAlterVol     $0B
0009BB44 8007                       	dc.b	nRst, $07
0009BB46 E105                       	smpsAlterNote       $05
0009BB48 0101                       	dc.b	$01, $01
0009BB4A E102                       	smpsAlterNote       $02
0009BB4C 01                         	dc.b	$01
0009BB4D E1FC                       	smpsAlterNote       $FC
0009BB4F 01                         	dc.b	$01
0009BB50 E1FF                       	smpsAlterNote       $FF
0009BB52 ECF5                       	smpsPSGAlterVol     $F5
0009BB54 9B06                       	dc.b	nD2, $06
0009BB56 EC04                       	smpsPSGAlterVol     $04
0009BB58 E701                       	dc.b	smpsNoAttack, $01
0009BB5A EC07                       	smpsPSGAlterVol     $07
0009BB5C 8003                       	dc.b	nRst, $03
0009BB5E ECF5                       	smpsPSGAlterVol     $F5
0009BB60 9B06                       	dc.b	nD2, $06
0009BB62 EC04                       	smpsPSGAlterVol     $04
0009BB64 E701                       	dc.b	smpsNoAttack, $01
0009BB66 EC07                       	smpsPSGAlterVol     $07
0009BB68 8006                       	dc.b	nRst, $06
0009BB6A E102                       	smpsAlterNote       $02
0009BB6C 01                         	dc.b	$01
0009BB6D E106                       	smpsAlterNote       $06
0009BB6F 01                         	dc.b	$01
0009BB70 E102                       	smpsAlterNote       $02
0009BB72 01                         	dc.b	$01
0009BB73 E1FF                       	smpsAlterNote       $FF
0009BB75 01                         	dc.b	$01
0009BB76 ECF5                       	smpsPSGAlterVol     $F5
0009BB78 9B06                       	dc.b	nD2, $06
0009BB7A EC04                       	smpsPSGAlterVol     $04
0009BB7C E701                       	dc.b	smpsNoAttack, $01
0009BB7E EC07                       	smpsPSGAlterVol     $07
0009BB80 8003                       	dc.b	nRst, $03
0009BB82 ECF5                       	smpsPSGAlterVol     $F5
0009BB84 9B07                       	dc.b	nD2, $07
0009BB86 EC0B                       	smpsPSGAlterVol     $0B
0009BB88 8007                       	dc.b	nRst, $07
0009BB8A E105                       	smpsAlterNote       $05
0009BB8C 0101                       	dc.b	$01, $01
0009BB8E E1FF                       	smpsAlterNote       $FF
0009BB90 01                         	dc.b	$01
0009BB91 E1FC                       	smpsAlterNote       $FC
0009BB93 01                         	dc.b	$01
0009BB94 E1FF                       	smpsAlterNote       $FF
0009BB96 ECF5                       	smpsPSGAlterVol     $F5
0009BB98 9B06                       	dc.b	nD2, $06
0009BB9A EC0B                       	smpsPSGAlterVol     $0B
0009BB9C 8004                       	dc.b	nRst, $04
0009BB9E ECF5                       	smpsPSGAlterVol     $F5
0009BBA0 9B06                       	dc.b	nD2, $06
0009BBA2 EC04                       	smpsPSGAlterVol     $04
0009BBA4 E701                       	dc.b	smpsNoAttack, $01
0009BBA6 EC07                       	smpsPSGAlterVol     $07
0009BBA8 8006                       	dc.b	nRst, $06
0009BBAA E105                       	smpsAlterNote       $05
0009BBAC 01                         	dc.b	$01
0009BBAD E106                       	smpsAlterNote       $06
0009BBAF 01                         	dc.b	$01
0009BBB0 E102                       	smpsAlterNote       $02
0009BBB2 01                         	dc.b	$01
0009BBB3 E1FC                       	smpsAlterNote       $FC
0009BBB5 01                         	dc.b	$01
0009BBB6 E1FF                       	smpsAlterNote       $FF
0009BBB8 ECF5                       	smpsPSGAlterVol     $F5
0009BBBA 9B06                       	dc.b	nD2, $06
0009BBBC EC04                       	smpsPSGAlterVol     $04
0009BBBE E701                       	dc.b	smpsNoAttack, $01
0009BBC0 EC07                       	smpsPSGAlterVol     $07
0009BBC2 8003                       	dc.b	nRst, $03
0009BBC4 ECF5                       	smpsPSGAlterVol     $F5
0009BBC6 9B06                       	dc.b	nD2, $06
0009BBC8 EC04                       	smpsPSGAlterVol     $04
0009BBCA E701                       	dc.b	smpsNoAttack, $01
0009BBCC EC07                       	smpsPSGAlterVol     $07
0009BBCE 8006                       	dc.b	nRst, $06
0009BBD0 E102                       	smpsAlterNote       $02
0009BBD2 01                         	dc.b	$01
0009BBD3 E106                       	smpsAlterNote       $06
0009BBD5 01                         	dc.b	$01
0009BBD6 E105                       	smpsAlterNote       $05
0009BBD8 01                         	dc.b	$01
0009BBD9 E1FF                       	smpsAlterNote       $FF
0009BBDB 01                         	dc.b	$01
0009BBDC ECF5                       	smpsPSGAlterVol     $F5
0009BBDE 9B07                       	dc.b	nD2, $07
0009BBE0 EC0B                       	smpsPSGAlterVol     $0B
0009BBE2 8004                       	dc.b	nRst, $04
0009BBE4 ECF5                       	smpsPSGAlterVol     $F5
0009BBE6 9B06                       	dc.b	nD2, $06
0009BBE8 EC0B                       	smpsPSGAlterVol     $0B
0009BBEA 8007                       	dc.b	nRst, $07
0009BBEC E105                       	smpsAlterNote       $05
0009BBEE 0101                       	dc.b	$01, $01
0009BBF0 E102                       	smpsAlterNote       $02
0009BBF2 01                         	dc.b	$01
0009BBF3 E1FC                       	smpsAlterNote       $FC
0009BBF5 01                         	dc.b	$01
0009BBF6 E1FF                       	smpsAlterNote       $FF
0009BBF8 ECF5                       	smpsPSGAlterVol     $F5
0009BBFA 9B06                       	dc.b	nD2, $06
0009BBFC EC04                       	smpsPSGAlterVol     $04
0009BBFE E701                       	dc.b	smpsNoAttack, $01
0009BC00 EC07                       	smpsPSGAlterVol     $07
0009BC02 8003                       	dc.b	nRst, $03
0009BC04 ECF5                       	smpsPSGAlterVol     $F5
0009BC06 9B06                       	dc.b	nD2, $06
0009BC08 EC04                       	smpsPSGAlterVol     $04
0009BC0A E701                       	dc.b	smpsNoAttack, $01
0009BC0C EC07                       	smpsPSGAlterVol     $07
0009BC0E 8006                       	dc.b	nRst, $06
0009BC10 E102                       	smpsAlterNote       $02
0009BC12 01                         	dc.b	$01
0009BC13 E106                       	smpsAlterNote       $06
0009BC15 01                         	dc.b	$01
0009BC16 E102                       	smpsAlterNote       $02
0009BC18 01                         	dc.b	$01
0009BC19 E1FF                       	smpsAlterNote       $FF
0009BC1B 01                         	dc.b	$01
0009BC1C ECF5                       	smpsPSGAlterVol     $F5
0009BC1E 9B06                       	dc.b	nD2, $06
0009BC20 EC04                       	smpsPSGAlterVol     $04
0009BC22 E701                       	dc.b	smpsNoAttack, $01
0009BC24 EC07                       	smpsPSGAlterVol     $07
0009BC26 8003                       	dc.b	nRst, $03
0009BC28 ECF5                       	smpsPSGAlterVol     $F5
0009BC2A 9B07                       	dc.b	nD2, $07
0009BC2C E1FE                       	smpsAlterNote       $FE
0009BC2E 9706                       	dc.b	nBb1, $06
0009BC30 EC04                       	smpsPSGAlterVol     $04
0009BC32 E701                       	dc.b	smpsNoAttack, $01
0009BC34 ECFC                       	smpsPSGAlterVol     $FC
0009BC36 9703                       	dc.b	nBb1, $03
0009BC38 EC04                       	smpsPSGAlterVol     $04
0009BC3A E701                       	dc.b	smpsNoAttack, $01
0009BC3C ECFC                       	smpsPSGAlterVol     $FC
0009BC3E 9702                       	dc.b	nBb1, $02
0009BC40 EC04                       	smpsPSGAlterVol     $04
0009BC42 E701                       	dc.b	smpsNoAttack, $01
0009BC44 ECFC                       	smpsPSGAlterVol     $FC
0009BC46 9606                       	dc.b	nA1, $06
0009BC48 EC04                       	smpsPSGAlterVol     $04
0009BC4A E701                       	dc.b	smpsNoAttack, $01
0009BC4C EC07                       	smpsPSGAlterVol     $07
0009BC4E 8006                       	dc.b	nRst, $06
0009BC50 E101                       	smpsAlterNote       $01
0009BC52 01                         	dc.b	$01
0009BC53 E107                       	smpsAlterNote       $07
0009BC55 01                         	dc.b	$01
0009BC56 E101                       	smpsAlterNote       $01
0009BC58 01                         	dc.b	$01
0009BC59 E1F8                       	smpsAlterNote       $F8
0009BC5B 01                         	dc.b	$01
0009BC5C E1F7                       	smpsAlterNote       $F7
0009BC5E 01                         	dc.b	$01
0009BC5F E1FC                       	smpsAlterNote       $FC
0009BC61 01                         	dc.b	$01
0009BC62 E106                       	smpsAlterNote       $06
0009BC64 01                         	dc.b	$01
0009BC65 E107                       	smpsAlterNote       $07
0009BC67 01                         	dc.b	$01
0009BC68 E101                       	smpsAlterNote       $01
0009BC6A 01                         	dc.b	$01
0009BC6B E1F8                       	smpsAlterNote       $F8
0009BC6D 0101                       	dc.b	$01, $01
0009BC6F E1FC                       	smpsAlterNote       $FC
0009BC71 ECF5                       	smpsPSGAlterVol     $F5
0009BC73 8F06                       	dc.b	nD1, $06
0009BC75 EC04                       	smpsPSGAlterVol     $04
0009BC77 E701                       	dc.b	smpsNoAttack, $01
0009BC79 EC07                       	smpsPSGAlterVol     $07
0009BC7B 8003                       	dc.b	nRst, $03
0009BC7D ECF5                       	smpsPSGAlterVol     $F5
0009BC7F 8F06                       	dc.b	nD1, $06
0009BC81 EC04                       	smpsPSGAlterVol     $04
0009BC83 E701                       	dc.b	smpsNoAttack, $01
0009BC85 EC07                       	smpsPSGAlterVol     $07
0009BC87 8006                       	dc.b	nRst, $06
0009BC89 E1FF                       	smpsAlterNote       $FF
0009BC8B 01                         	dc.b	$01
0009BC8C E102                       	smpsAlterNote       $02
0009BC8E 01                         	dc.b	$01
0009BC8F E101                       	smpsAlterNote       $01
0009BC91 01                         	dc.b	$01
0009BC92 E1FC                       	smpsAlterNote       $FC
0009BC94 01                         	dc.b	$01
0009BC95 ECF5                       	smpsPSGAlterVol     $F5
0009BC97 9007                       	dc.b	nEb1, $07
0009BC99 EC0B                       	smpsPSGAlterVol     $0B
0009BC9B 8004                       	dc.b	nRst, $04
0009BC9D ECF5                       	smpsPSGAlterVol     $F5
0009BC9F 9006                       	dc.b	nEb1, $06
0009BCA1 EC0B                       	smpsPSGAlterVol     $0B
0009BCA3 8007                       	dc.b	nRst, $07
0009BCA5 E103                       	smpsAlterNote       $03
0009BCA7 0101                       	dc.b	$01, $01
0009BCA9 E1FC                       	smpsAlterNote       $FC
0009BCAB 01                         	dc.b	$01
0009BCAC E1F9                       	smpsAlterNote       $F9
0009BCAE 01                         	dc.b	$01
0009BCAF E1FC                       	smpsAlterNote       $FC
0009BCB1 ECF5                       	smpsPSGAlterVol     $F5
0009BCB3 8F06                       	dc.b	nD1, $06
0009BCB5 EC04                       	smpsPSGAlterVol     $04
0009BCB7 E701                       	dc.b	smpsNoAttack, $01
0009BCB9 EC07                       	smpsPSGAlterVol     $07
0009BCBB 8003                       	dc.b	nRst, $03
0009BCBD ECF5                       	smpsPSGAlterVol     $F5
0009BCBF 8F06                       	dc.b	nD1, $06
0009BCC1 EC04                       	smpsPSGAlterVol     $04
0009BCC3 E701                       	dc.b	smpsNoAttack, $01
0009BCC5 EC07                       	smpsPSGAlterVol     $07
0009BCC7 8006                       	dc.b	nRst, $06
0009BCC9 E1FF                       	smpsAlterNote       $FF
0009BCCB 01                         	dc.b	$01
0009BCCC E103                       	smpsAlterNote       $03
0009BCCE 01                         	dc.b	$01
0009BCCF E1FF                       	smpsAlterNote       $FF
0009BCD1 01                         	dc.b	$01
0009BCD2 E1F9                       	smpsAlterNote       $F9
0009BCD4 01                         	dc.b	$01
0009BCD5 E1FC                       	smpsAlterNote       $FC
0009BCD7 ECF5                       	smpsPSGAlterVol     $F5
0009BCD9 8F06                       	dc.b	nD1, $06
0009BCDB EC04                       	smpsPSGAlterVol     $04
0009BCDD E701                       	dc.b	smpsNoAttack, $01
0009BCDF EC07                       	smpsPSGAlterVol     $07
0009BCE1 8003                       	dc.b	nRst, $03
0009BCE3 ECF5                       	smpsPSGAlterVol     $F5
0009BCE5 8F07                       	dc.b	nD1, $07
0009BCE7 EC0B                       	smpsPSGAlterVol     $0B
0009BCE9 8006                       	dc.b	nRst, $06
0009BCEB E1FF                       	smpsAlterNote       $FF
0009BCED 01                         	dc.b	$01
0009BCEE E102                       	smpsAlterNote       $02
0009BCF0 0101                       	dc.b	$01, $01
0009BCF2 E1FC                       	smpsAlterNote       $FC
0009BCF4 01                         	dc.b	$01
0009BCF5 ECF5                       	smpsPSGAlterVol     $F5
0009BCF7 8F07                       	dc.b	nD1, $07
0009BCF9 EC0B                       	smpsPSGAlterVol     $0B
0009BCFB 8004                       	dc.b	nRst, $04
0009BCFD ECF5                       	smpsPSGAlterVol     $F5
0009BCFF 8F06                       	dc.b	nD1, $06
0009BD01 EC04                       	smpsPSGAlterVol     $04
0009BD03 E701                       	dc.b	smpsNoAttack, $01
0009BD05 EC07                       	smpsPSGAlterVol     $07
0009BD07 8006                       	dc.b	nRst, $06
0009BD09 E101                       	smpsAlterNote       $01
0009BD0B 01                         	dc.b	$01
0009BD0C E102                       	smpsAlterNote       $02
0009BD0E 01                         	dc.b	$01
0009BD0F E1FF                       	smpsAlterNote       $FF
0009BD11 01                         	dc.b	$01
0009BD12 E1F9                       	smpsAlterNote       $F9
0009BD14 01                         	dc.b	$01
0009BD15 E1FC                       	smpsAlterNote       $FC
0009BD17 ECF5                       	smpsPSGAlterVol     $F5
0009BD19 9006                       	dc.b	nEb1, $06
0009BD1B EC04                       	smpsPSGAlterVol     $04
0009BD1D E701                       	dc.b	smpsNoAttack, $01
0009BD1F EC07                       	smpsPSGAlterVol     $07
0009BD21 8003                       	dc.b	nRst, $03
0009BD23 ECF5                       	smpsPSGAlterVol     $F5
0009BD25 9006                       	dc.b	nEb1, $06
0009BD27 EC04                       	smpsPSGAlterVol     $04
0009BD29 E701                       	dc.b	smpsNoAttack, $01
0009BD2B EC07                       	smpsPSGAlterVol     $07
0009BD2D 8006                       	dc.b	nRst, $06
0009BD2F E100                       	smpsAlterNote       $00
0009BD31 01                         	dc.b	$01
0009BD32 E102                       	smpsAlterNote       $02
0009BD34 01                         	dc.b	$01
0009BD35 E100                       	smpsAlterNote       $00
0009BD37 01                         	dc.b	$01
0009BD38 E1FF                       	smpsAlterNote       $FF
0009BD3A 01                         	dc.b	$01
0009BD3B ECF5                       	smpsPSGAlterVol     $F5
0009BD3D 9B06                       	dc.b	nD2, $06
0009BD3F EC04                       	smpsPSGAlterVol     $04
0009BD41 E701                       	dc.b	smpsNoAttack, $01
0009BD43 EC07                       	smpsPSGAlterVol     $07
0009BD45 8003                       	dc.b	nRst, $03
0009BD47 ECF5                       	smpsPSGAlterVol     $F5
0009BD49 9B07                       	dc.b	nD2, $07
0009BD4B EC0B                       	smpsPSGAlterVol     $0B
0009BD4D 8007                       	dc.b	nRst, $07
0009BD4F E105                       	smpsAlterNote       $05
0009BD51 0101                       	dc.b	$01, $01
0009BD53 E1FF                       	smpsAlterNote       $FF
0009BD55 01                         	dc.b	$01
0009BD56 E1FC                       	smpsAlterNote       $FC
0009BD58 01                         	dc.b	$01
0009BD59 E1FF                       	smpsAlterNote       $FF
0009BD5B ECF5                       	smpsPSGAlterVol     $F5
0009BD5D 9B06                       	dc.b	nD2, $06
0009BD5F EC0B                       	smpsPSGAlterVol     $0B
0009BD61 8004                       	dc.b	nRst, $04
0009BD63 ECF5                       	smpsPSGAlterVol     $F5
0009BD65 9B06                       	dc.b	nD2, $06
0009BD67 EC04                       	smpsPSGAlterVol     $04
0009BD69 E701                       	dc.b	smpsNoAttack, $01
0009BD6B EC07                       	smpsPSGAlterVol     $07
0009BD6D 8006                       	dc.b	nRst, $06
0009BD6F E102                       	smpsAlterNote       $02
0009BD71 01                         	dc.b	$01
0009BD72 E106                       	smpsAlterNote       $06
0009BD74 01                         	dc.b	$01
0009BD75 E102                       	smpsAlterNote       $02
0009BD77 01                         	dc.b	$01
0009BD78 E1FC                       	smpsAlterNote       $FC
0009BD7A 01                         	dc.b	$01
0009BD7B E1FF                       	smpsAlterNote       $FF
0009BD7D ECF5                       	smpsPSGAlterVol     $F5
0009BD7F 9B06                       	dc.b	nD2, $06
0009BD81 EC04                       	smpsPSGAlterVol     $04
0009BD83 E701                       	dc.b	smpsNoAttack, $01
0009BD85 EC07                       	smpsPSGAlterVol     $07
0009BD87 8003                       	dc.b	nRst, $03
0009BD89 ECF5                       	smpsPSGAlterVol     $F5
0009BD8B 9B07                       	dc.b	nD2, $07
0009BD8D EC0B                       	smpsPSGAlterVol     $0B
0009BD8F 8006                       	dc.b	nRst, $06
0009BD91 E102                       	smpsAlterNote       $02
0009BD93 01                         	dc.b	$01
0009BD94 E105                       	smpsAlterNote       $05
0009BD96 0101                       	dc.b	$01, $01
0009BD98 E1FF                       	smpsAlterNote       $FF
0009BD9A 01                         	dc.b	$01
0009BD9B ECF5                       	smpsPSGAlterVol     $F5
0009BD9D 9B07                       	dc.b	nD2, $07
0009BD9F EC0B                       	smpsPSGAlterVol     $0B
0009BDA1 8004                       	dc.b	nRst, $04
0009BDA3 ECF5                       	smpsPSGAlterVol     $F5
0009BDA5 9B06                       	dc.b	nD2, $06
0009BDA7 EC0B                       	smpsPSGAlterVol     $0B
0009BDA9 8007                       	dc.b	nRst, $07
0009BDAB E105                       	smpsAlterNote       $05
0009BDAD 0101                       	dc.b	$01, $01
0009BDAF E102                       	smpsAlterNote       $02
0009BDB1 01                         	dc.b	$01
0009BDB2 E1FC                       	smpsAlterNote       $FC
0009BDB4 01                         	dc.b	$01
0009BDB5 E1FF                       	smpsAlterNote       $FF
0009BDB7 ECF5                       	smpsPSGAlterVol     $F5
0009BDB9 9B06                       	dc.b	nD2, $06
0009BDBB EC04                       	smpsPSGAlterVol     $04
0009BDBD E701                       	dc.b	smpsNoAttack, $01
0009BDBF EC07                       	smpsPSGAlterVol     $07
0009BDC1 8003                       	dc.b	nRst, $03
0009BDC3 ECF5                       	smpsPSGAlterVol     $F5
0009BDC5 9B06                       	dc.b	nD2, $06
0009BDC7 EC04                       	smpsPSGAlterVol     $04
0009BDC9 E701                       	dc.b	smpsNoAttack, $01
0009BDCB EC07                       	smpsPSGAlterVol     $07
0009BDCD 8006                       	dc.b	nRst, $06
0009BDCF E102                       	smpsAlterNote       $02
0009BDD1 01                         	dc.b	$01
0009BDD2 E106                       	smpsAlterNote       $06
0009BDD4 01                         	dc.b	$01
0009BDD5 E102                       	smpsAlterNote       $02
0009BDD7 01                         	dc.b	$01
0009BDD8 E1FF                       	smpsAlterNote       $FF
0009BDDA 01                         	dc.b	$01
0009BDDB ECF5                       	smpsPSGAlterVol     $F5
0009BDDD 9B06                       	dc.b	nD2, $06
0009BDDF EC04                       	smpsPSGAlterVol     $04
0009BDE1 E701                       	dc.b	smpsNoAttack, $01
0009BDE3 EC07                       	smpsPSGAlterVol     $07
0009BDE5 8003                       	dc.b	nRst, $03
0009BDE7 ECF5                       	smpsPSGAlterVol     $F5
0009BDE9 9B07                       	dc.b	nD2, $07
0009BDEB EC0B                       	smpsPSGAlterVol     $0B
0009BDED 8007                       	dc.b	nRst, $07
0009BDEF E105                       	smpsAlterNote       $05
0009BDF1 0101                       	dc.b	$01, $01
0009BDF3 E1FF                       	smpsAlterNote       $FF
0009BDF5 01                         	dc.b	$01
0009BDF6 E1FC                       	smpsAlterNote       $FC
0009BDF8 01                         	dc.b	$01
0009BDF9 E1FF                       	smpsAlterNote       $FF
0009BDFB ECF5                       	smpsPSGAlterVol     $F5
0009BDFD 9B06                       	dc.b	nD2, $06
0009BDFF EC0B                       	smpsPSGAlterVol     $0B
0009BE01 8004                       	dc.b	nRst, $04
0009BE03 ECF5                       	smpsPSGAlterVol     $F5
0009BE05 9B06                       	dc.b	nD2, $06
0009BE07 EC04                       	smpsPSGAlterVol     $04
0009BE09 E701                       	dc.b	smpsNoAttack, $01
0009BE0B EC07                       	smpsPSGAlterVol     $07
0009BE0D 8006                       	dc.b	nRst, $06
0009BE0F E102                       	smpsAlterNote       $02
0009BE11 01                         	dc.b	$01
0009BE12 E106                       	smpsAlterNote       $06
0009BE14 01                         	dc.b	$01
0009BE15 E102                       	smpsAlterNote       $02
0009BE17 01                         	dc.b	$01
0009BE18 E1FC                       	smpsAlterNote       $FC
0009BE1A 01                         	dc.b	$01
0009BE1B E1FF                       	smpsAlterNote       $FF
0009BE1D ECF5                       	smpsPSGAlterVol     $F5
0009BE1F 9B06                       	dc.b	nD2, $06
0009BE21 EC04                       	smpsPSGAlterVol     $04
0009BE23 E701                       	dc.b	smpsNoAttack, $01
0009BE25 EC07                       	smpsPSGAlterVol     $07
0009BE27 8003                       	dc.b	nRst, $03
0009BE29 ECF5                       	smpsPSGAlterVol     $F5
0009BE2B 9B06                       	dc.b	nD2, $06
0009BE2D EC04                       	smpsPSGAlterVol     $04
0009BE2F E701                       	dc.b	smpsNoAttack, $01
0009BE31 EC07                       	smpsPSGAlterVol     $07
0009BE33 8006                       	dc.b	nRst, $06
0009BE35 E102                       	smpsAlterNote       $02
0009BE37 01                         	dc.b	$01
0009BE38 E106                       	smpsAlterNote       $06
0009BE3A 01                         	dc.b	$01
0009BE3B E105                       	smpsAlterNote       $05
0009BE3D 01                         	dc.b	$01
0009BE3E E1FF                       	smpsAlterNote       $FF
0009BE40 01                         	dc.b	$01
0009BE41 ECF5                       	smpsPSGAlterVol     $F5
0009BE43 9B07                       	dc.b	nD2, $07
0009BE45 EC0B                       	smpsPSGAlterVol     $0B
0009BE47 8004                       	dc.b	nRst, $04
0009BE49 ECF5                       	smpsPSGAlterVol     $F5
0009BE4B 9B06                       	dc.b	nD2, $06
0009BE4D EC0B                       	smpsPSGAlterVol     $0B
0009BE4F 8007                       	dc.b	nRst, $07
0009BE51 E105                       	smpsAlterNote       $05
0009BE53 0101                       	dc.b	$01, $01
0009BE55 E101                       	smpsAlterNote       $01
0009BE57 01                         	dc.b	$01
0009BE58 E1FB                       	smpsAlterNote       $FB
0009BE5A 01                         	dc.b	$01
0009BE5B E1FE                       	smpsAlterNote       $FE
0009BE5D ECF5                       	smpsPSGAlterVol     $F5
0009BE5F 9A06                       	dc.b	nCs2, $06
0009BE61 EC04                       	smpsPSGAlterVol     $04
0009BE63 E701                       	dc.b	smpsNoAttack, $01
0009BE65 EC07                       	smpsPSGAlterVol     $07
0009BE67 8003                       	dc.b	nRst, $03
0009BE69 ECF5                       	smpsPSGAlterVol     $F5
0009BE6B 9A06                       	dc.b	nCs2, $06
0009BE6D EC04                       	smpsPSGAlterVol     $04
0009BE6F E701                       	dc.b	smpsNoAttack, $01
0009BE71 EC07                       	smpsPSGAlterVol     $07
0009BE73 8003                       	dc.b	nRst, $03
0009BE75 E1FC                       	smpsAlterNote       $FC
0009BE77 ECF5                       	smpsPSGAlterVol     $F5
0009BE79 8F07                       	dc.b	nD1, $07
0009BE7B EC0B                       	smpsPSGAlterVol     $0B
0009BE7D 8006                       	dc.b	nRst, $06
0009BE7F E1FF                       	smpsAlterNote       $FF
0009BE81 01                         	dc.b	$01
0009BE82 E103                       	smpsAlterNote       $03
0009BE84 01                         	dc.b	$01
0009BE85 E102                       	smpsAlterNote       $02
0009BE87 01                         	dc.b	$01
0009BE88 E1FC                       	smpsAlterNote       $FC
0009BE8A 01                         	dc.b	$01
0009BE8B E1F8                       	smpsAlterNote       $F8
0009BE8D 01                         	dc.b	$01
0009BE8E E1FC                       	smpsAlterNote       $FC
0009BE90 01                         	dc.b	$01
0009BE91 E1FF                       	smpsAlterNote       $FF
0009BE93 01                         	dc.b	$01
0009BE94 E103                       	smpsAlterNote       $03
0009BE96 01                         	dc.b	$01
0009BE97 E1FC                       	smpsAlterNote       $FC
0009BE99 ECF5                       	smpsPSGAlterVol     $F5
0009BE9B 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0009BE9F EC04                       	smpsPSGAlterVol     $04
0009BEA1 E701                       	dc.b	smpsNoAttack, $01
0009BEA3 EC07                       	smpsPSGAlterVol     $07
0009BEA5 8009                       	dc.b	nRst, $09
0009BEA7 E1FF                       	smpsAlterNote       $FF
0009BEA9 01                         	dc.b	$01
0009BEAA E103                       	smpsAlterNote       $03
0009BEAC 01                         	dc.b	$01
0009BEAD E102                       	smpsAlterNote       $02
0009BEAF 01                         	dc.b	$01
0009BEB0 E1FC                       	smpsAlterNote       $FC
0009BEB2 01                         	dc.b	$01
0009BEB3 E1F8                       	smpsAlterNote       $F8
0009BEB5 01                         	dc.b	$01
0009BEB6 E1FC                       	smpsAlterNote       $FC
0009BEB8 01                         	dc.b	$01
0009BEB9 E1FF                       	smpsAlterNote       $FF
0009BEBB 01                         	dc.b	$01
0009BEBC E103                       	smpsAlterNote       $03
0009BEBE 01                         	dc.b	$01
0009BEBF E1FF                       	smpsAlterNote       $FF
0009BEC1 01                         	dc.b	$01
0009BEC2 E1F9                       	smpsAlterNote       $F9
0009BEC4 01                         	dc.b	$01
0009BEC5 E1F8                       	smpsAlterNote       $F8
0009BEC7 01                         	dc.b	$01
0009BEC8 E1FC                       	smpsAlterNote       $FC
0009BECA 01                         	dc.b	$01
0009BECB E102                       	smpsAlterNote       $02
0009BECD 0101                       	dc.b	$01, $01
0009BECF E1FF                       	smpsAlterNote       $FF
0009BED1 01                         	dc.b	$01
0009BED2 E1FC                       	smpsAlterNote       $FC
0009BED4 ECF5                       	smpsPSGAlterVol     $F5
0009BED6 8F02                       	dc.b	nD1, $02
0009BED8 EC04                       	smpsPSGAlterVol     $04
0009BEDA E701                       	dc.b	smpsNoAttack, $01
0009BEDC ECFC                       	smpsPSGAlterVol     $FC
0009BEDE E1FB                       	smpsAlterNote       $FB
0009BEE0 8D06                       	dc.b	nC1, $06
0009BEE2 EC04                       	smpsPSGAlterVol     $04
0009BEE4 E701                       	dc.b	smpsNoAttack, $01
0009BEE6 EC07                       	smpsPSGAlterVol     $07
0009BEE8 8006                       	dc.b	nRst, $06
0009BEEA E1FE                       	smpsAlterNote       $FE
0009BEEC 01                         	dc.b	$01
0009BEED E102                       	smpsAlterNote       $02
0009BEEF 01                         	dc.b	$01
0009BEF0 E1FE                       	smpsAlterNote       $FE
0009BEF2 01                         	dc.b	$01
0009BEF3 E1FB                       	smpsAlterNote       $FB
0009BEF5 01                         	dc.b	$01
0009BEF6 E1F7                       	smpsAlterNote       $F7
0009BEF8 01                         	dc.b	$01
0009BEF9 E1FB                       	smpsAlterNote       $FB
0009BEFB 01                         	dc.b	$01
0009BEFC E101                       	smpsAlterNote       $01
0009BEFE 01                         	dc.b	$01
0009BEFF E102                       	smpsAlterNote       $02
0009BF01 01                         	dc.b	$01
0009BF02 E1FB                       	smpsAlterNote       $FB
0009BF04 ECF5                       	smpsPSGAlterVol     $F5
0009BF06 8D02                       	dc.b	nC1, $02
0009BF08 EC04                       	smpsPSGAlterVol     $04
0009BF0A E701                       	dc.b	smpsNoAttack, $01
0009BF0C E1FC                       	smpsAlterNote       $FC
0009BF0E ECFC                       	smpsPSGAlterVol     $FC
0009BF10 8F0D                       	dc.b	nD1, $0D
0009BF12 E1FF                       	smpsAlterNote       $FF
0009BF14 E701                       	dc.b	smpsNoAttack, $01
0009BF16 E103                       	smpsAlterNote       $03
0009BF18 E701                       	dc.b	smpsNoAttack, $01
0009BF1A E1FF                       	smpsAlterNote       $FF
0009BF1C E701                       	dc.b	smpsNoAttack, $01
0009BF1E E1FC                       	smpsAlterNote       $FC
0009BF20 E701                       	dc.b	smpsNoAttack, $01
0009BF22 E1F8                       	smpsAlterNote       $F8
0009BF24 E701                       	dc.b	smpsNoAttack, $01
0009BF26 E1FC                       	smpsAlterNote       $FC
0009BF28 E701                       	dc.b	smpsNoAttack, $01
0009BF2A E102                       	smpsAlterNote       $02
0009BF2C E701                       	dc.b	smpsNoAttack, $01
0009BF2E E103                       	smpsAlterNote       $03
0009BF30 E701                       	dc.b	smpsNoAttack, $01
0009BF32 E1FF                       	smpsAlterNote       $FF
0009BF34 E701                       	dc.b	smpsNoAttack, $01
0009BF36 E1F9                       	smpsAlterNote       $F9
0009BF38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009BF3C E1FC                       	smpsAlterNote       $FC
0009BF3E E701                       	dc.b	smpsNoAttack, $01
0009BF40 E102                       	smpsAlterNote       $02
0009BF42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009BF46 E1FC                       	smpsAlterNote       $FC
0009BF48 E701                       	dc.b	smpsNoAttack, $01
0009BF4A E1F9                       	smpsAlterNote       $F9
0009BF4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009BF50 E1FF                       	smpsAlterNote       $FF
0009BF52 EC04                       	smpsPSGAlterVol     $04
0009BF54 E701                       	dc.b	smpsNoAttack, $01
0009BF56 EC07                       	smpsPSGAlterVol     $07
0009BF58 E103                       	smpsAlterNote       $03
0009BF5A 8001                       	dc.b	nRst, $01
0009BF5C E102                       	smpsAlterNote       $02
0009BF5E 01                         	dc.b	$01
0009BF5F E1FB                       	smpsAlterNote       $FB
0009BF61 01                         	dc.b	$01
0009BF62 E1F7                       	smpsAlterNote       $F7
0009BF64 01                         	dc.b	$01
0009BF65 E1FB                       	smpsAlterNote       $FB
0009BF67 01                         	dc.b	$01
0009BF68 E102                       	smpsAlterNote       $02
0009BF6A 01                         	dc.b	$01
0009BF6B E103                       	smpsAlterNote       $03
0009BF6D 01                         	dc.b	$01
0009BF6E E1FB                       	smpsAlterNote       $FB
0009BF70 ECF5                       	smpsPSGAlterVol     $F5
0009BF72 8E06                       	dc.b	nCs1, $06
0009BF74 EC04                       	smpsPSGAlterVol     $04
0009BF76 E701                       	dc.b	smpsNoAttack, $01
0009BF78 EC07                       	smpsPSGAlterVol     $07
0009BF7A 8003                       	dc.b	nRst, $03
0009BF7C ECF5                       	smpsPSGAlterVol     $F5
0009BF7E 8E06                       	dc.b	nCs1, $06
0009BF80 EC04                       	smpsPSGAlterVol     $04
0009BF82 E701                       	dc.b	smpsNoAttack, $01
0009BF84 EC07                       	smpsPSGAlterVol     $07
0009BF86 8006                       	dc.b	nRst, $06
0009BF88 E1FE                       	smpsAlterNote       $FE
0009BF8A 01                         	dc.b	$01
0009BF8B E102                       	smpsAlterNote       $02
0009BF8D 01                         	dc.b	$01
0009BF8E E1FE                       	smpsAlterNote       $FE
0009BF90 01                         	dc.b	$01
0009BF91 E1F9                       	smpsAlterNote       $F9
0009BF93 01                         	dc.b	$01
0009BF94 E1FC                       	smpsAlterNote       $FC
0009BF96 ECF5                       	smpsPSGAlterVol     $F5
0009BF98 8F06                       	dc.b	nD1, $06
0009BF9A EC04                       	smpsPSGAlterVol     $04
0009BF9C E701                       	dc.b	smpsNoAttack, $01
0009BF9E EC07                       	smpsPSGAlterVol     $07
0009BFA0 8003                       	dc.b	nRst, $03
0009BFA2 ECF5                       	smpsPSGAlterVol     $F5
0009BFA4 8F07                       	dc.b	nD1, $07
0009BFA6 EC0B                       	smpsPSGAlterVol     $0B
0009BFA8 8006                       	dc.b	nRst, $06
0009BFAA E1FF                       	smpsAlterNote       $FF
0009BFAC 01                         	dc.b	$01
0009BFAD E102                       	smpsAlterNote       $02
0009BFAF 0101                       	dc.b	$01, $01
0009BFB1 E1FB                       	smpsAlterNote       $FB
0009BFB3 01                         	dc.b	$01
0009BFB4 ECF5                       	smpsPSGAlterVol     $F5
0009BFB6 8E07                       	dc.b	nCs1, $07
0009BFB8 EC0B                       	smpsPSGAlterVol     $0B
0009BFBA 8004                       	dc.b	nRst, $04
0009BFBC ECF5                       	smpsPSGAlterVol     $F5
0009BFBE 8E06                       	dc.b	nCs1, $06
0009BFC0 EC04                       	smpsPSGAlterVol     $04
0009BFC2 E701                       	dc.b	smpsNoAttack, $01
0009BFC4 EC07                       	smpsPSGAlterVol     $07
0009BFC6 8006                       	dc.b	nRst, $06
0009BFC8 E101                       	smpsAlterNote       $01
0009BFCA 01                         	dc.b	$01
0009BFCB E102                       	smpsAlterNote       $02
0009BFCD 01                         	dc.b	$01
0009BFCE E1FE                       	smpsAlterNote       $FE
0009BFD0 01                         	dc.b	$01
0009BFD1 E1F8                       	smpsAlterNote       $F8
0009BFD3 01                         	dc.b	$01
0009BFD4 E1FB                       	smpsAlterNote       $FB
0009BFD6 ECF5                       	smpsPSGAlterVol     $F5
0009BFD8 8E06                       	dc.b	nCs1, $06
0009BFDA EC04                       	smpsPSGAlterVol     $04
0009BFDC E701                       	dc.b	smpsNoAttack, $01
0009BFDE EC07                       	smpsPSGAlterVol     $07
0009BFE0 8003                       	dc.b	nRst, $03
0009BFE2 ECF5                       	smpsPSGAlterVol     $F5
0009BFE4 8E06                       	dc.b	nCs1, $06
0009BFE6 EC04                       	smpsPSGAlterVol     $04
0009BFE8 E701                       	dc.b	smpsNoAttack, $01
0009BFEA EC07                       	smpsPSGAlterVol     $07
0009BFEC 8004                       	dc.b	nRst, $04
0009BFEE E1FC                       	smpsAlterNote       $FC
0009BFF0 ECF5                       	smpsPSGAlterVol     $F5
0009BFF2 8F06                       	dc.b	nD1, $06
0009BFF4 EC0B                       	smpsPSGAlterVol     $0B
0009BFF6 8006                       	dc.b	nRst, $06
0009BFF8 E1FF                       	smpsAlterNote       $FF
0009BFFA 01                         	dc.b	$01
0009BFFB E102                       	smpsAlterNote       $02
0009BFFD 0101                       	dc.b	$01, $01
0009BFFF E1FC                       	smpsAlterNote       $FC
0009C001 01                         	dc.b	$01
0009C002 E1F8                       	smpsAlterNote       $F8
0009C004 01                         	dc.b	$01
0009C005 E1F9                       	smpsAlterNote       $F9
0009C007 01                         	dc.b	$01
0009C008 E1FF                       	smpsAlterNote       $FF
0009C00A 01                         	dc.b	$01
0009C00B E103                       	smpsAlterNote       $03
0009C00D 01                         	dc.b	$01
0009C00E E1FC                       	smpsAlterNote       $FC
0009C010 ECF5                       	smpsPSGAlterVol     $F5
0009C012 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0009C016 EC04                       	smpsPSGAlterVol     $04
0009C018 E701                       	dc.b	smpsNoAttack, $01
0009C01A EC07                       	smpsPSGAlterVol     $07
0009C01C 8009                       	dc.b	nRst, $09
0009C01E E1FF                       	smpsAlterNote       $FF
0009C020 01                         	dc.b	$01
0009C021 E102                       	smpsAlterNote       $02
0009C023 0101                       	dc.b	$01, $01
0009C025 E1FC                       	smpsAlterNote       $FC
0009C027 01                         	dc.b	$01
0009C028 E1F8                       	smpsAlterNote       $F8
0009C02A 01                         	dc.b	$01
0009C02B E1F9                       	smpsAlterNote       $F9
0009C02D 01                         	dc.b	$01
0009C02E E1FF                       	smpsAlterNote       $FF
0009C030 01                         	dc.b	$01
0009C031 E103                       	smpsAlterNote       $03
0009C033 01                         	dc.b	$01
0009C034 E1FF                       	smpsAlterNote       $FF
0009C036 01                         	dc.b	$01
0009C037 E1FC                       	smpsAlterNote       $FC
0009C039 01                         	dc.b	$01
0009C03A E1F8                       	smpsAlterNote       $F8
0009C03C 01                         	dc.b	$01
0009C03D E1FC                       	smpsAlterNote       $FC
0009C03F 01                         	dc.b	$01
0009C040 E102                       	smpsAlterNote       $02
0009C042 01                         	dc.b	$01
0009C043 E103                       	smpsAlterNote       $03
0009C045 01                         	dc.b	$01
0009C046 E1FF                       	smpsAlterNote       $FF
0009C048 01                         	dc.b	$01
0009C049 E1FC                       	smpsAlterNote       $FC
0009C04B ECF5                       	smpsPSGAlterVol     $F5
0009C04D 8F03                       	dc.b	nD1, $03
0009C04F E1FB                       	smpsAlterNote       $FB
0009C051 8D06                       	dc.b	nC1, $06
0009C053 EC04                       	smpsPSGAlterVol     $04
0009C055 E701                       	dc.b	smpsNoAttack, $01
0009C057 EC07                       	smpsPSGAlterVol     $07
0009C059 8006                       	dc.b	nRst, $06
0009C05B E1FE                       	smpsAlterNote       $FE
0009C05D 01                         	dc.b	$01
0009C05E E102                       	smpsAlterNote       $02
0009C060 01                         	dc.b	$01
0009C061 E101                       	smpsAlterNote       $01
0009C063 01                         	dc.b	$01
0009C064 E1FB                       	smpsAlterNote       $FB
0009C066 01                         	dc.b	$01
0009C067 E1F7                       	smpsAlterNote       $F7
0009C069 01                         	dc.b	$01
0009C06A E1FB                       	smpsAlterNote       $FB
0009C06C 01                         	dc.b	$01
0009C06D E1FE                       	smpsAlterNote       $FE
0009C06F 01                         	dc.b	$01
0009C070 E102                       	smpsAlterNote       $02
0009C072 01                         	dc.b	$01
0009C073 E1FB                       	smpsAlterNote       $FB
0009C075 ECF5                       	smpsPSGAlterVol     $F5
0009C077 8D03                       	dc.b	nC1, $03
0009C079 E1FC                       	smpsAlterNote       $FC
0009C07B 8F0D                       	dc.b	nD1, $0D
0009C07D E1FF                       	smpsAlterNote       $FF
0009C07F E701                       	dc.b	smpsNoAttack, $01
0009C081 E103                       	smpsAlterNote       $03
0009C083 E701                       	dc.b	smpsNoAttack, $01
0009C085 E1FF                       	smpsAlterNote       $FF
0009C087 E701                       	dc.b	smpsNoAttack, $01
0009C089 E1FC                       	smpsAlterNote       $FC
0009C08B E701                       	dc.b	smpsNoAttack, $01
0009C08D E1F8                       	smpsAlterNote       $F8
0009C08F E701                       	dc.b	smpsNoAttack, $01
0009C091 E1FC                       	smpsAlterNote       $FC
0009C093 E701                       	dc.b	smpsNoAttack, $01
0009C095 E102                       	smpsAlterNote       $02
0009C097 E701                       	dc.b	smpsNoAttack, $01
0009C099 E103                       	smpsAlterNote       $03
0009C09B E701                       	dc.b	smpsNoAttack, $01
0009C09D E1FF                       	smpsAlterNote       $FF
0009C09F E701                       	dc.b	smpsNoAttack, $01
0009C0A1 E1F9                       	smpsAlterNote       $F9
0009C0A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009C0A7 E1FC                       	smpsAlterNote       $FC
0009C0A9 E701                       	dc.b	smpsNoAttack, $01
0009C0AB E102                       	smpsAlterNote       $02
0009C0AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009C0B1 E1FF                       	smpsAlterNote       $FF
0009C0B3 E701                       	dc.b	smpsNoAttack, $01
0009C0B5 E1F9                       	smpsAlterNote       $F9
0009C0B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009C0BB E1FF                       	smpsAlterNote       $FF
0009C0BD EC04                       	smpsPSGAlterVol     $04
0009C0BF E701                       	dc.b	smpsNoAttack, $01
0009C0C1 EC07                       	smpsPSGAlterVol     $07
0009C0C3 E103                       	smpsAlterNote       $03
0009C0C5 8001                       	dc.b	nRst, $01
0009C0C7 E102                       	smpsAlterNote       $02
0009C0C9 01                         	dc.b	$01
0009C0CA E1FB                       	smpsAlterNote       $FB
0009C0CC 01                         	dc.b	$01
0009C0CD E1F7                       	smpsAlterNote       $F7
0009C0CF 01                         	dc.b	$01
0009C0D0 E1FB                       	smpsAlterNote       $FB
0009C0D2 01                         	dc.b	$01
0009C0D3 E1FF                       	smpsAlterNote       $FF
0009C0D5 01                         	dc.b	$01
0009C0D6 E103                       	smpsAlterNote       $03
0009C0D8 01                         	dc.b	$01
0009C0D9 E1FB                       	smpsAlterNote       $FB
0009C0DB ECF5                       	smpsPSGAlterVol     $F5
0009C0DD 8E06                       	dc.b	nCs1, $06
0009C0DF EC04                       	smpsPSGAlterVol     $04
0009C0E1 E701                       	dc.b	smpsNoAttack, $01
0009C0E3 EC07                       	smpsPSGAlterVol     $07
0009C0E5 8003                       	dc.b	nRst, $03
0009C0E7 ECF5                       	smpsPSGAlterVol     $F5
0009C0E9 8E06                       	dc.b	nCs1, $06
0009C0EB EC04                       	smpsPSGAlterVol     $04
0009C0ED E701                       	dc.b	smpsNoAttack, $01
0009C0EF EC07                       	smpsPSGAlterVol     $07
0009C0F1 8006                       	dc.b	nRst, $06
0009C0F3 E1FE                       	smpsAlterNote       $FE
0009C0F5 01                         	dc.b	$01
0009C0F6 E102                       	smpsAlterNote       $02
0009C0F8 01                         	dc.b	$01
0009C0F9 E1FE                       	smpsAlterNote       $FE
0009C0FB 01                         	dc.b	$01
0009C0FC E1FC                       	smpsAlterNote       $FC
0009C0FE 01                         	dc.b	$01
0009C0FF ECF5                       	smpsPSGAlterVol     $F5
0009C101 8F06                       	dc.b	nD1, $06
0009C103 EC04                       	smpsPSGAlterVol     $04
0009C105 E701                       	dc.b	smpsNoAttack, $01
0009C107 EC07                       	smpsPSGAlterVol     $07
0009C109 8003                       	dc.b	nRst, $03
0009C10B ECF5                       	smpsPSGAlterVol     $F5
0009C10D 8F07                       	dc.b	nD1, $07
0009C10F EC0B                       	smpsPSGAlterVol     $0B
0009C111 8007                       	dc.b	nRst, $07
0009C113 E102                       	smpsAlterNote       $02
0009C115 0101                       	dc.b	$01, $01
0009C117 E1FB                       	smpsAlterNote       $FB
0009C119 01                         	dc.b	$01
0009C11A E1F8                       	smpsAlterNote       $F8
0009C11C 01                         	dc.b	$01
0009C11D E1FB                       	smpsAlterNote       $FB
0009C11F ECF5                       	smpsPSGAlterVol     $F5
0009C121 8E06                       	dc.b	nCs1, $06
0009C123 EC0B                       	smpsPSGAlterVol     $0B
0009C125 8004                       	dc.b	nRst, $04
0009C127 ECF5                       	smpsPSGAlterVol     $F5
0009C129 8E06                       	dc.b	nCs1, $06
0009C12B EC04                       	smpsPSGAlterVol     $04
0009C12D E701                       	dc.b	smpsNoAttack, $01
0009C12F EC07                       	smpsPSGAlterVol     $07
0009C131 8006                       	dc.b	nRst, $06
0009C133 E1FE                       	smpsAlterNote       $FE
0009C135 01                         	dc.b	$01
0009C136 E102                       	smpsAlterNote       $02
0009C138 01                         	dc.b	$01
0009C139 E1FE                       	smpsAlterNote       $FE
0009C13B 01                         	dc.b	$01
0009C13C E1F9                       	smpsAlterNote       $F9
0009C13E 01                         	dc.b	$01
0009C13F E1FC                       	smpsAlterNote       $FC
0009C141 ECF5                       	smpsPSGAlterVol     $F5
0009C143 8F06                       	dc.b	nD1, $06
0009C145 EC04                       	smpsPSGAlterVol     $04
0009C147 E701                       	dc.b	smpsNoAttack, $01
0009C149 EC07                       	smpsPSGAlterVol     $07
0009C14B 8003                       	dc.b	nRst, $03
0009C14D ECF5                       	smpsPSGAlterVol     $F5
0009C14F 8F06                       	dc.b	nD1, $06
0009C151 EC04                       	smpsPSGAlterVol     $04
0009C153 E701                       	dc.b	smpsNoAttack, $01
0009C155 EC07                       	smpsPSGAlterVol     $07
0009C157 8006                       	dc.b	nRst, $06
0009C159 E1FF                       	smpsAlterNote       $FF
0009C15B 01                         	dc.b	$01
0009C15C E103                       	smpsAlterNote       $03
0009C15E 01                         	dc.b	$01
0009C15F E102                       	smpsAlterNote       $02
0009C161 01                         	dc.b	$01
0009C162 E1FB                       	smpsAlterNote       $FB
0009C164 01                         	dc.b	$01
0009C165 ECF5                       	smpsPSGAlterVol     $F5
0009C167 8E07                       	dc.b	nCs1, $07
0009C169 EC0B                       	smpsPSGAlterVol     $0B
0009C16B 8004                       	dc.b	nRst, $04
0009C16D ECF5                       	smpsPSGAlterVol     $F5
0009C16F 8E06                       	dc.b	nCs1, $06
0009C171 EC0B                       	smpsPSGAlterVol     $0B
0009C173 8007                       	dc.b	nRst, $07
0009C175 E101                       	smpsAlterNote       $01
0009C177 0101                       	dc.b	$01, $01
0009C179 E1FE                       	smpsAlterNote       $FE
0009C17B 01                         	dc.b	$01
0009C17C E1F9                       	smpsAlterNote       $F9
0009C17E 01                         	dc.b	$01
0009C17F E1FC                       	smpsAlterNote       $FC
0009C181 ECF5                       	smpsPSGAlterVol     $F5
0009C183 8F06                       	dc.b	nD1, $06
0009C185 EC04                       	smpsPSGAlterVol     $04
0009C187 E701                       	dc.b	smpsNoAttack, $01
0009C189 EC07                       	smpsPSGAlterVol     $07
0009C18B 8003                       	dc.b	nRst, $03
0009C18D ECF5                       	smpsPSGAlterVol     $F5
0009C18F 8F06                       	dc.b	nD1, $06
0009C191 EC04                       	smpsPSGAlterVol     $04
0009C193 E701                       	dc.b	smpsNoAttack, $01
0009C195 EC07                       	smpsPSGAlterVol     $07
0009C197 8006                       	dc.b	nRst, $06
0009C199 E1FF                       	smpsAlterNote       $FF
0009C19B 01                         	dc.b	$01
0009C19C E103                       	smpsAlterNote       $03
0009C19E 01                         	dc.b	$01
0009C19F E1FF                       	smpsAlterNote       $FF
0009C1A1 01                         	dc.b	$01
0009C1A2 E1FB                       	smpsAlterNote       $FB
0009C1A4 01                         	dc.b	$01
0009C1A5 ECF5                       	smpsPSGAlterVol     $F5
0009C1A7 8E06                       	dc.b	nCs1, $06
0009C1A9 EC04                       	smpsPSGAlterVol     $04
0009C1AB E701                       	dc.b	smpsNoAttack, $01
0009C1AD EC07                       	smpsPSGAlterVol     $07
0009C1AF 8003                       	dc.b	nRst, $03
0009C1B1 ECF5                       	smpsPSGAlterVol     $F5
0009C1B3 8E07                       	dc.b	nCs1, $07
0009C1B5 E1FF                       	smpsAlterNote       $FF
0009C1B7 9B06                       	dc.b	nD2, $06
0009C1B9 EC04                       	smpsPSGAlterVol     $04
0009C1BB E701                       	dc.b	smpsNoAttack, $01
0009C1BD ECFC                       	smpsPSGAlterVol     $FC
0009C1BF 9B03                       	dc.b	nD2, $03
0009C1C1 EC04                       	smpsPSGAlterVol     $04
0009C1C3 E701                       	dc.b	smpsNoAttack, $01
0009C1C5 ECFC                       	smpsPSGAlterVol     $FC
0009C1C7 9B02                       	dc.b	nD2, $02
0009C1C9 EC04                       	smpsPSGAlterVol     $04
0009C1CB E701                       	dc.b	smpsNoAttack, $01
0009C1CD ECFC                       	smpsPSGAlterVol     $FC
0009C1CF E1FE                       	smpsAlterNote       $FE
0009C1D1 9A03                       	dc.b	nCs2, $03
0009C1D3 EC0B                       	smpsPSGAlterVol     $0B
0009C1D5 800A                       	dc.b	nRst, $0A
0009C1D7 E102                       	smpsAlterNote       $02
0009C1D9 01                         	dc.b	$01
0009C1DA E10A                       	smpsAlterNote       $0A
0009C1DC 01                         	dc.b	$01
0009C1DD E102                       	smpsAlterNote       $02
0009C1DF 01                         	dc.b	$01
0009C1E0 E1F7                       	smpsAlterNote       $F7
0009C1E2 01                         	dc.b	$01
0009C1E3 E10A                       	smpsAlterNote       $0A
0009C1E5 01                         	dc.b	$01
0009C1E6 E1FC                       	smpsAlterNote       $FC
0009C1E8 01                         	dc.b	$01
0009C1E9 E108                       	smpsAlterNote       $08
0009C1EB 0101                       	dc.b	$01, $01
0009C1ED E102                       	smpsAlterNote       $02
0009C1EF 01                         	dc.b	$01
0009C1F0 E1F7                       	smpsAlterNote       $F7
0009C1F2 0101                       	dc.b	$01, $01
0009C1F4 E1FC                       	smpsAlterNote       $FC
0009C1F6 ECF5                       	smpsPSGAlterVol     $F5
0009C1F8 8F06                       	dc.b	nD1, $06
0009C1FA EC04                       	smpsPSGAlterVol     $04
0009C1FC E701                       	dc.b	smpsNoAttack, $01
0009C1FE EC07                       	smpsPSGAlterVol     $07
0009C200 8003                       	dc.b	nRst, $03
0009C202 ECF5                       	smpsPSGAlterVol     $F5
0009C204 8F06                       	dc.b	nD1, $06
0009C206 EC04                       	smpsPSGAlterVol     $04
0009C208 E701                       	dc.b	smpsNoAttack, $01
0009C20A EC07                       	smpsPSGAlterVol     $07
0009C20C 8006                       	dc.b	nRst, $06
0009C20E E1FF                       	smpsAlterNote       $FF
0009C210 01                         	dc.b	$01
0009C211 E102                       	smpsAlterNote       $02
0009C213 01                         	dc.b	$01
0009C214 E101                       	smpsAlterNote       $01
0009C216 01                         	dc.b	$01
0009C217 E1FC                       	smpsAlterNote       $FC
0009C219 01                         	dc.b	$01
0009C21A ECF5                       	smpsPSGAlterVol     $F5
0009C21C 9007                       	dc.b	nEb1, $07
0009C21E EC0B                       	smpsPSGAlterVol     $0B
0009C220 8004                       	dc.b	nRst, $04
0009C222 ECF5                       	smpsPSGAlterVol     $F5
0009C224 9006                       	dc.b	nEb1, $06
0009C226 EC0B                       	smpsPSGAlterVol     $0B
0009C228 8007                       	dc.b	nRst, $07
0009C22A E103                       	smpsAlterNote       $03
0009C22C 0101                       	dc.b	$01, $01
0009C22E E1FF                       	smpsAlterNote       $FF
0009C230 01                         	dc.b	$01
0009C231 E1F9                       	smpsAlterNote       $F9
0009C233 01                         	dc.b	$01
0009C234 E1FC                       	smpsAlterNote       $FC
0009C236 ECF5                       	smpsPSGAlterVol     $F5
0009C238 8F06                       	dc.b	nD1, $06
0009C23A EC04                       	smpsPSGAlterVol     $04
0009C23C E701                       	dc.b	smpsNoAttack, $01
0009C23E EC07                       	smpsPSGAlterVol     $07
0009C240 8003                       	dc.b	nRst, $03
0009C242 ECF5                       	smpsPSGAlterVol     $F5
0009C244 8F06                       	dc.b	nD1, $06
0009C246 EC04                       	smpsPSGAlterVol     $04
0009C248 E701                       	dc.b	smpsNoAttack, $01
0009C24A EC07                       	smpsPSGAlterVol     $07
0009C24C 8006                       	dc.b	nRst, $06
0009C24E E1FF                       	smpsAlterNote       $FF
0009C250 01                         	dc.b	$01
0009C251 E103                       	smpsAlterNote       $03
0009C253 01                         	dc.b	$01
0009C254 E1FF                       	smpsAlterNote       $FF
0009C256 01                         	dc.b	$01
0009C257 E1F9                       	smpsAlterNote       $F9
0009C259 01                         	dc.b	$01
0009C25A E1FC                       	smpsAlterNote       $FC
0009C25C ECF5                       	smpsPSGAlterVol     $F5
0009C25E 8F06                       	dc.b	nD1, $06
0009C260 EC04                       	smpsPSGAlterVol     $04
0009C262 E701                       	dc.b	smpsNoAttack, $01
0009C264 EC07                       	smpsPSGAlterVol     $07
0009C266 8003                       	dc.b	nRst, $03
0009C268 ECF5                       	smpsPSGAlterVol     $F5
0009C26A 8F07                       	dc.b	nD1, $07
0009C26C EC0B                       	smpsPSGAlterVol     $0B
0009C26E 8006                       	dc.b	nRst, $06
0009C270 E1FF                       	smpsAlterNote       $FF
0009C272 01                         	dc.b	$01
0009C273 E102                       	smpsAlterNote       $02
0009C275 0101                       	dc.b	$01, $01
0009C277 E1FC                       	smpsAlterNote       $FC
0009C279 01                         	dc.b	$01
0009C27A ECF5                       	smpsPSGAlterVol     $F5
0009C27C 8F07                       	dc.b	nD1, $07
0009C27E EC0B                       	smpsPSGAlterVol     $0B
0009C280 8004                       	dc.b	nRst, $04
0009C282 ECF5                       	smpsPSGAlterVol     $F5
0009C284 8F06                       	dc.b	nD1, $06
0009C286 EC04                       	smpsPSGAlterVol     $04
0009C288 E701                       	dc.b	smpsNoAttack, $01
0009C28A EC07                       	smpsPSGAlterVol     $07
0009C28C 8006                       	dc.b	nRst, $06
0009C28E E101                       	smpsAlterNote       $01
0009C290 01                         	dc.b	$01
0009C291 E102                       	smpsAlterNote       $02
0009C293 01                         	dc.b	$01
0009C294 E1FF                       	smpsAlterNote       $FF
0009C296 01                         	dc.b	$01
0009C297 E1F9                       	smpsAlterNote       $F9
0009C299 01                         	dc.b	$01
0009C29A E1FC                       	smpsAlterNote       $FC
0009C29C ECF5                       	smpsPSGAlterVol     $F5
0009C29E 9006                       	dc.b	nEb1, $06
0009C2A0 EC04                       	smpsPSGAlterVol     $04
0009C2A2 E701                       	dc.b	smpsNoAttack, $01
0009C2A4 EC07                       	smpsPSGAlterVol     $07
0009C2A6 8003                       	dc.b	nRst, $03
0009C2A8 ECF5                       	smpsPSGAlterVol     $F5
0009C2AA 9006                       	dc.b	nEb1, $06
0009C2AC EC04                       	smpsPSGAlterVol     $04
0009C2AE E701                       	dc.b	smpsNoAttack, $01
0009C2B0 EC07                       	smpsPSGAlterVol     $07
0009C2B2 8006                       	dc.b	nRst, $06
0009C2B4 E100                       	smpsAlterNote       $00
0009C2B6 01                         	dc.b	$01
0009C2B7 E102                       	smpsAlterNote       $02
0009C2B9 01                         	dc.b	$01
0009C2BA E100                       	smpsAlterNote       $00
0009C2BC 01                         	dc.b	$01
0009C2BD E1FF                       	smpsAlterNote       $FF
0009C2BF 01                         	dc.b	$01
0009C2C0 ECF5                       	smpsPSGAlterVol     $F5
0009C2C2 9B06                       	dc.b	nD2, $06
0009C2C4 EC04                       	smpsPSGAlterVol     $04
0009C2C6 E701                       	dc.b	smpsNoAttack, $01
0009C2C8 EC07                       	smpsPSGAlterVol     $07
0009C2CA 8003                       	dc.b	nRst, $03
0009C2CC ECF5                       	smpsPSGAlterVol     $F5
0009C2CE 9B07                       	dc.b	nD2, $07
0009C2D0 EC0B                       	smpsPSGAlterVol     $0B
0009C2D2 8007                       	dc.b	nRst, $07
0009C2D4 E105                       	smpsAlterNote       $05
0009C2D6 0101                       	dc.b	$01, $01
0009C2D8 E1FF                       	smpsAlterNote       $FF
0009C2DA 01                         	dc.b	$01
0009C2DB E1FC                       	smpsAlterNote       $FC
0009C2DD 01                         	dc.b	$01
0009C2DE E1FF                       	smpsAlterNote       $FF
0009C2E0 ECF5                       	smpsPSGAlterVol     $F5
0009C2E2 9B06                       	dc.b	nD2, $06
0009C2E4 EC0B                       	smpsPSGAlterVol     $0B
0009C2E6 8004                       	dc.b	nRst, $04
0009C2E8 ECF5                       	smpsPSGAlterVol     $F5
0009C2EA 9B06                       	dc.b	nD2, $06
0009C2EC EC04                       	smpsPSGAlterVol     $04
0009C2EE E701                       	dc.b	smpsNoAttack, $01
0009C2F0 EC07                       	smpsPSGAlterVol     $07
0009C2F2 8006                       	dc.b	nRst, $06
0009C2F4 E102                       	smpsAlterNote       $02
0009C2F6 01                         	dc.b	$01
0009C2F7 E106                       	smpsAlterNote       $06
0009C2F9 01                         	dc.b	$01
0009C2FA E102                       	smpsAlterNote       $02
0009C2FC 01                         	dc.b	$01
0009C2FD E1FC                       	smpsAlterNote       $FC
0009C2FF 01                         	dc.b	$01
0009C300 E1FF                       	smpsAlterNote       $FF
0009C302 ECF5                       	smpsPSGAlterVol     $F5
0009C304 9B06                       	dc.b	nD2, $06
0009C306 EC04                       	smpsPSGAlterVol     $04
0009C308 E701                       	dc.b	smpsNoAttack, $01
0009C30A EC07                       	smpsPSGAlterVol     $07
0009C30C 8003                       	dc.b	nRst, $03
0009C30E ECF5                       	smpsPSGAlterVol     $F5
0009C310 9B07                       	dc.b	nD2, $07
0009C312 EC0B                       	smpsPSGAlterVol     $0B
0009C314 8006                       	dc.b	nRst, $06
0009C316 E102                       	smpsAlterNote       $02
0009C318 01                         	dc.b	$01
0009C319 E105                       	smpsAlterNote       $05
0009C31B 0101                       	dc.b	$01, $01
0009C31D E1FF                       	smpsAlterNote       $FF
0009C31F 01                         	dc.b	$01
0009C320 ECF5                       	smpsPSGAlterVol     $F5
0009C322 9B07                       	dc.b	nD2, $07
0009C324 EC0B                       	smpsPSGAlterVol     $0B
0009C326 8004                       	dc.b	nRst, $04
0009C328 ECF5                       	smpsPSGAlterVol     $F5
0009C32A 9B06                       	dc.b	nD2, $06
0009C32C EC04                       	smpsPSGAlterVol     $04
0009C32E E701                       	dc.b	smpsNoAttack, $01
0009C330 EC07                       	smpsPSGAlterVol     $07
0009C332 8006                       	dc.b	nRst, $06
0009C334 E105                       	smpsAlterNote       $05
0009C336 0101                       	dc.b	$01, $01
0009C338 E102                       	smpsAlterNote       $02
0009C33A 01                         	dc.b	$01
0009C33B E1FC                       	smpsAlterNote       $FC
0009C33D 01                         	dc.b	$01
0009C33E E1FF                       	smpsAlterNote       $FF
0009C340 ECF5                       	smpsPSGAlterVol     $F5
0009C342 9B06                       	dc.b	nD2, $06
0009C344 EC04                       	smpsPSGAlterVol     $04
0009C346 E701                       	dc.b	smpsNoAttack, $01
0009C348 EC07                       	smpsPSGAlterVol     $07
0009C34A 8003                       	dc.b	nRst, $03
0009C34C ECF5                       	smpsPSGAlterVol     $F5
0009C34E 9B06                       	dc.b	nD2, $06
0009C350 EC04                       	smpsPSGAlterVol     $04
0009C352 E701                       	dc.b	smpsNoAttack, $01
0009C354 EC07                       	smpsPSGAlterVol     $07
0009C356 8006                       	dc.b	nRst, $06
0009C358 E102                       	smpsAlterNote       $02
0009C35A 01                         	dc.b	$01
0009C35B E106                       	smpsAlterNote       $06
0009C35D 01                         	dc.b	$01
0009C35E E102                       	smpsAlterNote       $02
0009C360 01                         	dc.b	$01
0009C361 E1FF                       	smpsAlterNote       $FF
0009C363 01                         	dc.b	$01
0009C364 ECF5                       	smpsPSGAlterVol     $F5
0009C366 9B06                       	dc.b	nD2, $06
0009C368 EC04                       	smpsPSGAlterVol     $04
0009C36A E701                       	dc.b	smpsNoAttack, $01
0009C36C EC07                       	smpsPSGAlterVol     $07
0009C36E 8003                       	dc.b	nRst, $03
0009C370 ECF5                       	smpsPSGAlterVol     $F5
0009C372 9B07                       	dc.b	nD2, $07
0009C374 EC0B                       	smpsPSGAlterVol     $0B
0009C376 8007                       	dc.b	nRst, $07
0009C378 E107                       	smpsAlterNote       $07
0009C37A 0101                       	dc.b	$01, $01
0009C37C E1FE                       	smpsAlterNote       $FE
0009C37E 01                         	dc.b	$01
0009C37F E1FA                       	smpsAlterNote       $FA
0009C381 0101                       	dc.b	$01, $01
0009C383 E103                       	smpsAlterNote       $03
0009C385 01                         	dc.b	$01
0009C386 E109                       	smpsAlterNote       $09
0009C388 01                         	dc.b	$01
0009C389 E107                       	smpsAlterNote       $07
0009C38B 01                         	dc.b	$01
0009C38C E1FE                       	smpsAlterNote       $FE
0009C38E 01                         	dc.b	$01
0009C38F E108                       	smpsAlterNote       $08
0009C391 01                         	dc.b	$01
0009C392 E1FD                       	smpsAlterNote       $FD
0009C394 ECF5                       	smpsPSGAlterVol     $F5
0009C396 940E                       	dc.b	nG1, $0E
0009C398 E103                       	smpsAlterNote       $03
0009C39A EC0B                       	smpsPSGAlterVol     $0B
0009C39C 8001 01                    	dc.b	nRst, $01, $01
0009C39F E1FD                       	smpsAlterNote       $FD
0009C3A1 01                         	dc.b	$01
0009C3A2 E1FB                       	smpsAlterNote       $FB
0009C3A4 0101                       	dc.b	$01, $01
0009C3A6 E100                       	smpsAlterNote       $00
0009C3A8 01                         	dc.b	$01
0009C3A9 E103                       	smpsAlterNote       $03
0009C3AB 01                         	dc.b	$01
0009C3AC E100                       	smpsAlterNote       $00
0009C3AE 01                         	dc.b	$01
0009C3AF E1FD                       	smpsAlterNote       $FD
0009C3B1 01                         	dc.b	$01
0009C3B2 E1FA                       	smpsAlterNote       $FA
0009C3B4 01                         	dc.b	$01
0009C3B5 E1FD                       	smpsAlterNote       $FD
0009C3B7 01                         	dc.b	$01
0009C3B8 E103                       	smpsAlterNote       $03
0009C3BA 0101                       	dc.b	$01, $01
0009C3BC E100                       	smpsAlterNote       $00
0009C3BE 01                         	dc.b	$01
0009C3BF E1FE                       	smpsAlterNote       $FE
0009C3C1 ECF5                       	smpsPSGAlterVol     $F5
0009C3C3 960D                       	dc.b	nA1, $0D
0009C3C5 E104                       	smpsAlterNote       $04
0009C3C7 EC0B                       	smpsPSGAlterVol     $0B
0009C3C9 8001 01                    	dc.b	nRst, $01, $01
0009C3CC E101                       	smpsAlterNote       $01
0009C3CE 01                         	dc.b	$01
0009C3CF E1FB                       	smpsAlterNote       $FB
0009C3D1 0101                       	dc.b	$01, $01
0009C3D3 E1FE                       	smpsAlterNote       $FE
0009C3D5 01                         	dc.b	$01
0009C3D6 E104                       	smpsAlterNote       $04
0009C3D8 0101                       	dc.b	$01, $01
0009C3DA E1FE                       	smpsAlterNote       $FE
0009C3DC 01                         	dc.b	$01
0009C3DD E1FB                       	smpsAlterNote       $FB
0009C3DF 0101                       	dc.b	$01, $01
0009C3E1 E101                       	smpsAlterNote       $01
0009C3E3 01                         	dc.b	$01
0009C3E4 E104                       	smpsAlterNote       $04
0009C3E6 0101                       	dc.b	$01, $01
0009C3E8 E1FE                       	smpsAlterNote       $FE
0009C3EA ECF5                       	smpsPSGAlterVol     $F5
0009C3EC 970D                       	dc.b	nBb1, $0D
0009C3EE E101                       	smpsAlterNote       $01
0009C3F0 EC04                       	smpsPSGAlterVol     $04
0009C3F2 E701                       	dc.b	smpsNoAttack, $01
0009C3F4 EC07                       	smpsPSGAlterVol     $07
0009C3F6 E104                       	smpsAlterNote       $04
0009C3F8 8001                       	dc.b	nRst, $01
0009C3FA E103                       	smpsAlterNote       $03
0009C3FC 01                         	dc.b	$01
0009C3FD E1FE                       	smpsAlterNote       $FE
0009C3FF 01                         	dc.b	$01
0009C400 E1FA                       	smpsAlterNote       $FA
0009C402 01                         	dc.b	$01
0009C403 E1FE                       	smpsAlterNote       $FE
0009C405 01                         	dc.b	$01
0009C406 E101                       	smpsAlterNote       $01
0009C408 01                         	dc.b	$01
0009C409 E104                       	smpsAlterNote       $04
0009C40B 01                         	dc.b	$01
0009C40C E101                       	smpsAlterNote       $01
0009C40E 01                         	dc.b	$01
0009C40F E1FB                       	smpsAlterNote       $FB
0009C411 01                         	dc.b	$01
0009C412 E1FA                       	smpsAlterNote       $FA
0009C414 01                         	dc.b	$01
0009C415 E1FE                       	smpsAlterNote       $FE
0009C417 01                         	dc.b	$01
0009C418 E103                       	smpsAlterNote       $03
0009C41A 0101                       	dc.b	$01, $01
0009C41C E101                       	smpsAlterNote       $01
0009C41E 01                         	dc.b	$01
0009C41F E1FE                       	smpsAlterNote       $FE
0009C421 ECF5                       	smpsPSGAlterVol     $F5
0009C423 990D                       	dc.b	nC2, $0D
0009C425 E104                       	smpsAlterNote       $04
0009C427 EC0B                       	smpsPSGAlterVol     $0B
0009C429 8001 01                    	dc.b	nRst, $01, $01
0009C42C E102                       	smpsAlterNote       $02
0009C42E 01                         	dc.b	$01
0009C42F E1FC                       	smpsAlterNote       $FC
0009C431 0101                       	dc.b	$01, $01
0009C433 E102                       	smpsAlterNote       $02
0009C435 01                         	dc.b	$01
0009C436 E104                       	smpsAlterNote       $04
0009C438 01                         	dc.b	$01
0009C439 E1FF                       	smpsAlterNote       $FF
0009C43B ECF5                       	smpsPSGAlterVol     $F5
0009C43D 9B06                       	dc.b	nD2, $06
0009C43F EC04                       	smpsPSGAlterVol     $04
0009C441 E701                       	dc.b	smpsNoAttack, $01
0009C443 EC07                       	smpsPSGAlterVol     $07
0009C445 8003                       	dc.b	nRst, $03
0009C447 ECF5                       	smpsPSGAlterVol     $F5
0009C449 9B07                       	dc.b	nD2, $07
0009C44B EC0B                       	smpsPSGAlterVol     $0B
0009C44D 8006                       	dc.b	nRst, $06
0009C44F E101                       	smpsAlterNote       $01
0009C451 01                         	dc.b	$01
0009C452 E104                       	smpsAlterNote       $04
0009C454 0101                       	dc.b	$01, $01
0009C456 E1FE                       	smpsAlterNote       $FE
0009C458 01                         	dc.b	$01
0009C459 E1FC                       	smpsAlterNote       $FC
0009C45B 01                         	dc.b	$01
0009C45C E1FE                       	smpsAlterNote       $FE
0009C45E ECF5                       	smpsPSGAlterVol     $F5
0009C460 9C06                       	dc.b	nEb2, $06
0009C462 EC0B                       	smpsPSGAlterVol     $0B
0009C464 8004                       	dc.b	nRst, $04
0009C466 ECF5                       	smpsPSGAlterVol     $F5
0009C468 9C06                       	dc.b	nEb2, $06
0009C46A EC04                       	smpsPSGAlterVol     $04
0009C46C E701                       	dc.b	smpsNoAttack, $01
0009C46E EC07                       	smpsPSGAlterVol     $07
0009C470 8006                       	dc.b	nRst, $06
0009C472 E105                       	smpsAlterNote       $05
0009C474 01                         	dc.b	$01
0009C475 E106                       	smpsAlterNote       $06
0009C477 01                         	dc.b	$01
0009C478 E102                       	smpsAlterNote       $02
0009C47A 01                         	dc.b	$01
0009C47B E1FB                       	smpsAlterNote       $FB
0009C47D 01                         	dc.b	$01
0009C47E E1FF                       	smpsAlterNote       $FF
0009C480 ECF5                       	smpsPSGAlterVol     $F5
0009C482 9B06                       	dc.b	nD2, $06
0009C484 EC04                       	smpsPSGAlterVol     $04
0009C486 E701                       	dc.b	smpsNoAttack, $01
0009C488 EC07                       	smpsPSGAlterVol     $07
0009C48A 8003                       	dc.b	nRst, $03
0009C48C ECF5                       	smpsPSGAlterVol     $F5
0009C48E 9B06                       	dc.b	nD2, $06
0009C490 EC04                       	smpsPSGAlterVol     $04
0009C492 E701                       	dc.b	smpsNoAttack, $01
0009C494 EC07                       	smpsPSGAlterVol     $07
0009C496 8006                       	dc.b	nRst, $06
0009C498 E101                       	smpsAlterNote       $01
0009C49A 01                         	dc.b	$01
0009C49B E105                       	smpsAlterNote       $05
0009C49D 01                         	dc.b	$01
0009C49E E104                       	smpsAlterNote       $04
0009C4A0 01                         	dc.b	$01
0009C4A1 E1FE                       	smpsAlterNote       $FE
0009C4A3 01                         	dc.b	$01
0009C4A4 ECF5                       	smpsPSGAlterVol     $F5
0009C4A6 9C07                       	dc.b	nEb2, $07
0009C4A8 EC0B                       	smpsPSGAlterVol     $0B
0009C4AA 8004                       	dc.b	nRst, $04
0009C4AC ECF5                       	smpsPSGAlterVol     $F5
0009C4AE 9C06                       	dc.b	nEb2, $06
0009C4B0 EC0B                       	smpsPSGAlterVol     $0B
0009C4B2 8007                       	dc.b	nRst, $07
0009C4B4 E105                       	smpsAlterNote       $05
0009C4B6 0101                       	dc.b	$01, $01
0009C4B8 E102                       	smpsAlterNote       $02
0009C4BA 01                         	dc.b	$01
0009C4BB E1FB                       	smpsAlterNote       $FB
0009C4BD 01                         	dc.b	$01
0009C4BE E1FF                       	smpsAlterNote       $FF
0009C4C0 ECF5                       	smpsPSGAlterVol     $F5
0009C4C2 9B06                       	dc.b	nD2, $06
0009C4C4 EC04                       	smpsPSGAlterVol     $04
0009C4C6 E701                       	dc.b	smpsNoAttack, $01
0009C4C8 EC07                       	smpsPSGAlterVol     $07
0009C4CA 8003                       	dc.b	nRst, $03
0009C4CC ECF5                       	smpsPSGAlterVol     $F5
0009C4CE 9B06                       	dc.b	nD2, $06
0009C4D0 EC04                       	smpsPSGAlterVol     $04
0009C4D2 E701                       	dc.b	smpsNoAttack, $01
0009C4D4 EC07                       	smpsPSGAlterVol     $07
0009C4D6 8006                       	dc.b	nRst, $06
0009C4D8 E101                       	smpsAlterNote       $01
0009C4DA 01                         	dc.b	$01
0009C4DB E105                       	smpsAlterNote       $05
0009C4DD 01                         	dc.b	$01
0009C4DE E101                       	smpsAlterNote       $01
0009C4E0 01                         	dc.b	$01
0009C4E1 E1FC                       	smpsAlterNote       $FC
0009C4E3 01                         	dc.b	$01
0009C4E4 E1FE                       	smpsAlterNote       $FE
0009C4E6 ECF5                       	smpsPSGAlterVol     $F5
0009C4E8 9C06                       	dc.b	nEb2, $06
0009C4EA EC04                       	smpsPSGAlterVol     $04
0009C4EC E701                       	dc.b	smpsNoAttack, $01
0009C4EE EC07                       	smpsPSGAlterVol     $07
0009C4F0 8003                       	dc.b	nRst, $03
0009C4F2 ECF5                       	smpsPSGAlterVol     $F5
0009C4F4 9C07                       	dc.b	nEb2, $07
0009C4F6 EC0B                       	smpsPSGAlterVol     $0B
0009C4F8 8006                       	dc.b	nRst, $06
0009C4FA E102                       	smpsAlterNote       $02
0009C4FC 01                         	dc.b	$01
0009C4FD E105                       	smpsAlterNote       $05
0009C4FF 0101                       	dc.b	$01, $01
0009C501 E1FF                       	smpsAlterNote       $FF
0009C503 01                         	dc.b	$01
0009C504 ECF5                       	smpsPSGAlterVol     $F5
0009C506 9B07                       	dc.b	nD2, $07
0009C508 EC0B                       	smpsPSGAlterVol     $0B
0009C50A 8004                       	dc.b	nRst, $04
0009C50C ECF5                       	smpsPSGAlterVol     $F5
0009C50E 9B06                       	dc.b	nD2, $06
0009C510 EC04                       	smpsPSGAlterVol     $04
0009C512 E701                       	dc.b	smpsNoAttack, $01
0009C514 EC07                       	smpsPSGAlterVol     $07
0009C516 8002                       	dc.b	nRst, $02
0009C518 E1FC                       	smpsAlterNote       $FC
0009C51A ECF5                       	smpsPSGAlterVol     $F5
0009C51C 9006                       	dc.b	nEb1, $06
0009C51E EC04                       	smpsPSGAlterVol     $04
0009C520 E701                       	dc.b	smpsNoAttack, $01
0009C522 ECFC                       	smpsPSGAlterVol     $FC
0009C524 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0009C528 EC04                       	smpsPSGAlterVol     $04
0009C52A E701                       	dc.b	smpsNoAttack, $01
0009C52C E1FD                       	smpsAlterNote       $FD
0009C52E ECFC                       	smpsPSGAlterVol     $FC
0009C530 9402                       	dc.b	nG1, $02
0009C532 EC04                       	smpsPSGAlterVol     $04
0009C534 E701                       	dc.b	smpsNoAttack, $01
0009C536 E1FE                       	smpsAlterNote       $FE
0009C538 ECFC                       	smpsPSGAlterVol     $FC
0009C53A 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0009C53E EC04                       	smpsPSGAlterVol     $04
0009C540 E701                       	dc.b	smpsNoAttack, $01
0009C542 EC07                       	smpsPSGAlterVol     $07
0009C544 8008                       	dc.b	nRst, $08
0009C546 F6F4 F3                    	smpsJump            music84_Jump06
0009C549                            
0009C549                            ; PSG3 Data
0009C549                            music84_PSG3:
0009C549 F500                       	smpsPSGvoice        $00
0009C54B E1FF                       	smpsAlterNote       $FF
0009C54D EC0F                       	smpsPSGAlterVol     $0F
0009C54F 803A                       	dc.b	nRst, $3A
0009C551                            
0009C551                            music84_Jump05:
0009C551 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0009C55D 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0009C567 F6FF E8                    	smpsJump            music84_Jump05
0009C56A                            
0009C56A                            ; DAC Data
0009C56A                            music84_DAC:
0009C56A E0C0                       	smpsPan             panCenter, $00
0009C56C 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0009C578 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
0009C584 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0009C590 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0009C59C 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0009C5A8 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0009C5B4 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0009C5C0 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0009C5CC 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0009C5D8 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0009C5E4 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0009C5F0 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0009C5FC 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0009C608 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0009C614 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0009C620 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0009C62C 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0009C638 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0009C644 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0009C650 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0009C65C 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0009C668 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0009C674 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0009C680 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0009C68C 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0009C698 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0009C6A4 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0009C6B0 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009C6BC 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0009C6C8 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0009C6D4 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0009C6E0 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0009C6EC 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0009C6F8 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0009C704 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0009C710 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0009C71C 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0009C728 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0009C734 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0009C740 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0009C74C 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0009C758 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0009C764 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009C770 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0009C77C 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0009C788 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0009C794 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0009C7A0 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0009C7AC 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0009C7B8 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0009C7C4 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0009C7D0 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0009C7DC 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0009C7E8 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0009C7F4 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0009C800 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0009C80C 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0009C818 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0009C824 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0009C830 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0009C83C 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0009C848 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0009C854 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0009C860 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0009C86C 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0009C878 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0009C884 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0009C890 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0009C89C 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0009C8A8 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0009C8B4 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0009C8C0 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009C8CC 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0009C8D8 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0009C8E4 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0009C8F0 E0C0                       	smpsPan             panCenter, $00
0009C8F2 F2                         	smpsStop
0009C8F3                            
0009C8F3                            music84_Voices:
0009C8F3                            ;	Voice $00
0009C8F3                            ;	$3D
0009C8F3                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0009C8F3                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0009C8F3                            	smpsVcAlgorithm     $05
0009C8F3                            	smpsVcFeedback      $07
0009C8F3                            	smpsVcUnusedBits    $00
0009C8F3                            	smpsVcDetune        $05, $04, $03, $04
0009C8F3                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009C8F3                            	smpsVcRateScale     $00, $00, $00, $00
0009C8F3                            	smpsVcAttackRate    $11, $11, $11, $11
0009C8F3                            	smpsVcAmpMod        $00, $00, $00, $00
0009C8F3                            	smpsVcDecayRate1    $00, $00, $00, $0A
0009C8F3                            	smpsVcDecayRate2    $00, $00, $00, $0B
0009C8F3                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C8F3                            	smpsVcReleaseRate   $08, $08, $08, $07
0009C8F3 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0009C90C                            
0009C90C                            ;	Voice $01
0009C90C                            ;	$04
0009C90C                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0009C90C                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0009C90C                            	smpsVcAlgorithm     $04
0009C90C                            	smpsVcFeedback      $00
0009C90C                            	smpsVcUnusedBits    $00
0009C90C                            	smpsVcDetune        $04, $03, $04, $05
0009C90C                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0009C90C                            	smpsVcRateScale     $00, $01, $00, $01
0009C90C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C90C                            	smpsVcAmpMod        $00, $00, $00, $00
0009C90C                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0009C90C                            	smpsVcDecayRate2    $05, $00, $05, $00
0009C90C                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0009C90C                            	smpsVcReleaseRate   $06, $06, $06, $06
0009C90C 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0009C925                            
0009C925                            ;	Voice $02
0009C925                            ;	$30
0009C925                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0009C925                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0009C925                            	smpsVcAlgorithm     $00
0009C925                            	smpsVcFeedback      $06
0009C925                            	smpsVcUnusedBits    $00
0009C925                            	smpsVcDetune        $04, $02, $00, $06
0009C925                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0009C925                            	smpsVcRateScale     $00, $00, $00, $00
0009C925                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0009C925                            	smpsVcAmpMod        $00, $00, $00, $00
0009C925                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0009C925                            	smpsVcDecayRate2    $01, $01, $01, $01
0009C925                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0009C925                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0009C925 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0009C93E                            
0009C93E                            ;	Voice $03
0009C93E                            ;	$3A
0009C93E                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0009C93E                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0009C93E                            	smpsVcAlgorithm     $02
0009C93E                            	smpsVcFeedback      $07
0009C93E                            	smpsVcUnusedBits    $00
0009C93E                            	smpsVcDetune        $04, $06, $02, $00
0009C93E                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009C93E                            	smpsVcRateScale     $00, $00, $00, $00
0009C93E                            	smpsVcAttackRate    $18, $19, $14, $14
0009C93E                            	smpsVcAmpMod        $00, $00, $00, $00
0009C93E                            	smpsVcDecayRate1    $09, $0D, $09, $09
0009C93E                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C93E                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0009C93E                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0009C93E 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0009C957                            
0009C957                            ;	Voice $04
0009C957                            ;	$3C
0009C957                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0009C957                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0009C957                            	smpsVcAlgorithm     $04
0009C957                            	smpsVcFeedback      $07
0009C957                            	smpsVcUnusedBits    $00
0009C957                            	smpsVcDetune        $07, $00, $00, $03
0009C957                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0009C957                            	smpsVcRateScale     $00, $00, $00, $00
0009C957                            	smpsVcAttackRate    $10, $1F, $10, $1F
0009C957                            	smpsVcAmpMod        $00, $00, $00, $00
0009C957                            	smpsVcDecayRate1    $00, $00, $00, $00
0009C957                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C957                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C957                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0009C957 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0009C970                            
0009C970                            ;	Voice $05
0009C970                            ;	$38
0009C970                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0009C970                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0009C970                            	smpsVcAlgorithm     $00
0009C970                            	smpsVcFeedback      $07
0009C970                            	smpsVcUnusedBits    $00
0009C970                            	smpsVcDetune        $04, $06, $02, $00
0009C970                            	smpsVcCoarseFreq    $01, $01, $01, $00
0009C970                            	smpsVcRateScale     $00, $00, $00, $00
0009C970                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0009C970                            	smpsVcAmpMod        $00, $00, $00, $00
0009C970                            	smpsVcDecayRate1    $00, $03, $00, $17
0009C970                            	smpsVcDecayRate2    $00, $08, $08, $0B
0009C970                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0009C970                            	smpsVcReleaseRate   $08, $05, $05, $05
0009C970 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0009C989                            
0009C989                            
0009C98A 00                         		even
0009C98A                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
000A0B9A                            		even
000A0B9A                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000A46F2 00                         		even
000A46F2                            Music87:	include	sound\music87.asm; Invincibility
000A46F2                            triple_Header:
000A46F2 =00000001                  smpsHeaderStartSong = 1
000A46F2 0000                       	smpsHeaderVoice     triple_Voices
000A46F4 0501                       	smpsHeaderChan      $05, $01
000A46F6 0200                       	smpsHeaderTempo     $02, $00
000A46F8                            
000A46FC 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000A4700 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000A4704 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000A4708 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000A470C 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000A4712                            
000A4712                            ; DAC Data
000A4712                            triple_DAC:
000A4712 E0C0                       	smpsPan             panCenter, $00
000A4714 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000A471A                            
000A471A                            triple_Loop01:
000A471A 8282 82                    	dc.b	dSnare, dSnare, dSnare
000A471D                            
000A471D                            triple_Loop00:
000A471D 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000A4729 06                         	dc.b	$06
000A472A F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000A472F 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000A473B 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000A4742 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000A4747 0303 1B                    	dc.b	$03, $03, $1B
000A474A E0C0                       	smpsPan             panCenter, $00
000A474C F6FF C4                    	smpsJump triple_DAC
000A474F                            
000A474F                            ; FM1 Data
000A474F                            triple_FM1:
000A474F E0C0                       	smpsPan             panCenter, $00
000A4753 8018                       	dc.b	nRst, $18
000A4755                            
000A4755                            triple_Loop0B:
000A4755 AC06 B8                    	dc.b	nG3, $06, nG4
000A4758 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000A475D                            
000A475D                            triple_Loop0C:
000A475D A7B3                       	dc.b	nD3, nD4
000A475F F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000A4764                            
000A4764                            triple_Loop0D:
000A4764 A9B5                       	dc.b	nE3, nE4
000A4766 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000A476B A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000A4773 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000A4778 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000A4784 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000A4790 AD                         	dc.b	nAb3
000A4791 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000A4796 8018                       	dc.b	nRst, $18
000A4798 E0C0                       	smpsPan             panCenter, $00
000A479C F6FF B1                    	smpsJump triple_FM1
000A479F                            
000A479F                            ; FM2 Data
000A479F                            triple_FM2:
000A479F E0C0                       	smpsPan             panCenter, $00
000A47A3 8018                       	dc.b	nRst, $18
000A47A5                            
000A47A5                            triple_Loop07:
000A47A5 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A47B1 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A47BD F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000A47C2 8003                       	dc.b	nRst, $03
000A47C4                            
000A47C4                            triple_Loop08:
000A47C4 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A47CA F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000A47CF B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A47D5                            
000A47D5                            triple_Loop09:
000A47D5 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A47E1 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A47ED F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000A47F2 8003                       	dc.b	nRst, $03
000A47F4                            
000A47F4                            triple_Loop0A:
000A47F4 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A47FA F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000A47FF B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A4805 E0C0                       	smpsPan             panCenter, $00
000A4809 F6FF 94                    	smpsJump triple_FM2
000A480C                            
000A480C                            ; FM3 Data
000A480C                            triple_FM3:
000A480C E0C0                       	smpsPan             panCenter, $00
000A4810 8018                       	dc.b	nRst, $18
000A4812                            
000A4812                            triple_Loop06:
000A4812 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000A4819 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000A481E 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000A482A BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000A4836 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000A4839 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000A483E 8018                       	dc.b	nRst, $18
000A4840 E0C0                       	smpsPan             panCenter, $00
000A4844 F6FF C6                    	smpsJump triple_FM3
000A4847                            
000A4847                            ; FM4 Data
000A4847                            triple_FM4:
000A4847 E103                       	smpsAlterNote       $03
000A484B E0C0                       	smpsPan             panCenter, $00
000A484D 8018                       	dc.b	nRst, $18
000A484F                            
000A484F                            triple_Loop02:
000A484F C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A485B C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A4867 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000A486C 8003                       	dc.b	nRst, $03
000A486E                            
000A486E                            triple_Loop03:
000A486E B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A4874 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000A4879 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A487F                            
000A487F                            triple_Loop04:
000A487F C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A488B C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A4897 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000A489C 8003                       	dc.b	nRst, $03
000A489E                            
000A489E                            triple_Loop05:
000A489E B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A48A4 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000A48A9 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A48AF E0C0                       	smpsPan             panCenter, $00
000A48B1 F6FF 94                    	smpsJump triple_FM4
000A48B4                            
000A48B4                            ; PSG1 Data
000A48B4                            triple_PSG1:
000A48B4 8018                       	dc.b	nRst, $18
000A48B6                            
000A48B6                            triple_Loop0E:
000A48B6 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A48C2 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A48CE 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A48DA 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A48DE F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000A48E3 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A48EF 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A48FB 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A4907 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A490B                            
000A490B                            triple_Loop0F:
000A490B 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A4911 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000A4916 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000A491C                            
000A491C                            triple_Loop10:
000A491C A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A4928 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A4934 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A4940 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A4944 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000A4949 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A4955 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A4961 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A496D 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A4971                            
000A4971                            triple_Loop11:
000A4971 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A4977 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000A497C 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000A4982 F500                       	smpsPSGvoice        $00
000A4984 F6FF 2E                    	smpsJump triple_PSG1
000A4987                            
000A4987                            triple_Voices:
000A4987                            ;	Voice $00
000A4987                            ;	$3A
000A4987                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000A4987                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000A4987                            	smpsVcAlgorithm     $02
000A4987                            	smpsVcFeedback      $07
000A4987                            	smpsVcUnusedBits    $00
000A4987                            	smpsVcDetune        $00, $00, $00, $00
000A4987                            	smpsVcCoarseFreq    $01, $01, $07, $01
000A4987                            	smpsVcRateScale     $01, $02, $02, $02
000A4987                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000A4987                            	smpsVcAmpMod        $00, $00, $00, $00
000A4987                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000A4987                            	smpsVcDecayRate2    $00, $00, $00, $00
000A4987                            	smpsVcDecayLevel    $00, $01, $0F, $01
000A4987                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A4987 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000A49A0                            
000A49A0                            ;	Voice $01
000A49A0                            ;	$20
000A49A0                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000A49A0                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000A49A0                            	smpsVcAlgorithm     $00
000A49A0                            	smpsVcFeedback      $04
000A49A0                            	smpsVcUnusedBits    $00
000A49A0                            	smpsVcDetune        $00, $00, $03, $07
000A49A0                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000A49A0                            	smpsVcRateScale     $03, $03, $03, $02
000A49A0                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000A49A0                            	smpsVcAmpMod        $00, $00, $00, $00
000A49A0                            	smpsVcDecayRate1    $04, $04, $0A, $10
000A49A0                            	smpsVcDecayRate2    $08, $08, $08, $0F
000A49A0                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000A49A0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A49A0 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A49A0 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A49BA 00                         		even
000A49BA                            Music88:	incbin	sound\music88.bin; Extra Life
000A4AA8                            		even
000A4AA8                            Music89:	incbin	sound\music89.bin; Special Stage
000A8970 00                         		even
000A8970                            Music8A:	incbin	sound\music8A.bin; Title Screen
000A8B3A                            		even
000A8B3A                            Music8B:	incbin	sound\music8B.bin; Ending Theme
000A8DD4                            		even
000A8DD4                            Music8C:	incbin	sound\music8C.bin; VS Boss
000A9072                            		even
000A9072                            Music8D:	incbin	sound\music8D.bin; Final Zone
000AF2EA 00                         		even
000AF2EA                            Music8E:	include	sound\merry.asm ; Act Clear
000AF2EA =0000008B                  dMerryWtf1 = dVLowTimpani ; $87
000AF2EA =0000008A                  dMerryWtf2 = dLowTimpani  ; $85
000AF2EA =0000008B                  dMerryWtf3 = dVLowTimpani ; $84
000AF2EA =0000008A                  dMerryClap = dLowTimpani
000AF2EA                            
000AF2EA                            MerrysLittleLamb_Header:
000AF2EA 0000                       	smpsHeaderVoice     MerrysLittleLamb_Voices
000AF2EC 0603                       	smpsHeaderChan      $06, $03
000AF2EE 0100                       	smpsHeaderTempo     $01, $00
000AF2F0                            
000AF2F4 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM1,	$00, $00
000AF2F8 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM2,	$00, $00
000AF2FC 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM3,	$00, $00
000AF300 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM4,	$00, $00
000AF304 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM5,	$00, $00
000AF308 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG1,	$00, $00, $00, $00
000AF30E 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG2,	$00, $00, $00, $00
000AF314 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG3,	$00, $00, $00, $00
000AF31A                            
000AF31A                            MerrysLittleLamb_FM1:
000AF31A E0C0                       	smpsPan             panCenter, $00
000AF31C 807F 7F7F 20               	dc.b	nRst, $7F, $7F, $7F, $20
000AF323 E60F                       	smpsAlterVol        $0F
000AF325 A704                       	dc.b	nD3, $04
000AF327 E606                       	smpsAlterVol        $06
000AF329 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AF32E E6FA                       	smpsAlterVol        $FA
000AF330 A705                       	dc.b	nD3, $05
000AF332 E606                       	smpsAlterVol        $06
000AF334 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AF339 E6FA                       	smpsAlterVol        $FA
000AF33B A704                       	dc.b	nD3, $04
000AF33D E606                       	smpsAlterVol        $06
000AF33F A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000AF345 E6FA                       	smpsAlterVol        $FA
000AF347 A7                         	dc.b	nD3
000AF348 E606                       	smpsAlterVol        $06
000AF34A A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AF34F E6FA                       	smpsAlterVol        $FA
000AF351 A704                       	dc.b	nD3, $04
000AF353 E606                       	smpsAlterVol        $06
000AF355 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000AF35B E6FA                       	smpsAlterVol        $FA
000AF35D A7                         	dc.b	nD3
000AF35E E606                       	smpsAlterVol        $06
000AF360 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000AF366 E6FA                       	smpsAlterVol        $FA
000AF368 A705                       	dc.b	nD3, $05
000AF36A E606                       	smpsAlterVol        $06
000AF36C A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AF371 E6FA                       	smpsAlterVol        $FA
000AF373 A7                         	dc.b	nD3
000AF374 E606                       	smpsAlterVol        $06
000AF376 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000AF37C E6FA                       	smpsAlterVol        $FA
000AF37E A705                       	dc.b	nD3, $05
000AF380 E606                       	smpsAlterVol        $06
000AF382 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AF387 E6FA                       	smpsAlterVol        $FA
000AF389 A704                       	dc.b	nD3, $04
000AF38B E606                       	smpsAlterVol        $06
000AF38D A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AF392 E6FA                       	smpsAlterVol        $FA
000AF394 A705                       	dc.b	nD3, $05
000AF396 E606                       	smpsAlterVol        $06
000AF398 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AF39D E6FA                       	smpsAlterVol        $FA
000AF39F A704                       	dc.b	nD3, $04
000AF3A1 E606                       	smpsAlterVol        $06
000AF3A3 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AF3A8 E6FA                       	smpsAlterVol        $FA
000AF3AA A705                       	dc.b	nD3, $05
000AF3AC E606                       	smpsAlterVol        $06
000AF3AE A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AF3B3 E6FA                       	smpsAlterVol        $FA
000AF3B5 A704                       	dc.b	nD3, $04
000AF3B7 E606                       	smpsAlterVol        $06
000AF3B9 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000AF3BF E6FA                       	smpsAlterVol        $FA
000AF3C1 A7                         	dc.b	nD3
000AF3C2 E606                       	smpsAlterVol        $06
000AF3C4 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000AF3CA E6FA                       	smpsAlterVol        $FA
000AF3CC A705                       	dc.b	nD3, $05
000AF3CE E606                       	smpsAlterVol        $06
000AF3D0 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AF3D5 E6FA                       	smpsAlterVol        $FA
000AF3D7 A7                         	dc.b	nD3
000AF3D8 E606                       	smpsAlterVol        $06
000AF3DA A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000AF3E0 E6FA                       	smpsAlterVol        $FA
000AF3E2 A705                       	dc.b	nD3, $05
000AF3E4 E606                       	smpsAlterVol        $06
000AF3E6 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AF3EB E6FA                       	smpsAlterVol        $FA
000AF3ED A704                       	dc.b	nD3, $04
000AF3EF E606                       	smpsAlterVol        $06
000AF3F1 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AF3F6 E6FA                       	smpsAlterVol        $FA
000AF3F8 A705                       	dc.b	nD3, $05
000AF3FA E606                       	smpsAlterVol        $06
000AF3FC A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AF401 E6FA                       	smpsAlterVol        $FA
000AF403 A704                       	dc.b	nD3, $04
000AF405 E606                       	smpsAlterVol        $06
000AF407 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AF40C E6FA                       	smpsAlterVol        $FA
000AF40E A705                       	dc.b	nD3, $05
000AF410 E606                       	smpsAlterVol        $06
000AF412 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AF417 E6FA                       	smpsAlterVol        $FA
000AF419 A704                       	dc.b	nD3, $04
000AF41B E606                       	smpsAlterVol        $06
000AF41D A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000AF423 E6FA                       	smpsAlterVol        $FA
000AF425 A7                         	dc.b	nD3
000AF426 E606                       	smpsAlterVol        $06
000AF428 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AF42D E6FA                       	smpsAlterVol        $FA
000AF42F A704                       	dc.b	nD3, $04
000AF431 E606                       	smpsAlterVol        $06
000AF433 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000AF439 E6FA                       	smpsAlterVol        $FA
000AF43B A7                         	dc.b	nD3
000AF43C E606                       	smpsAlterVol        $06
000AF43E A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000AF444 E6FA                       	smpsAlterVol        $FA
000AF446 A705                       	dc.b	nD3, $05
000AF448 E606                       	smpsAlterVol        $06
000AF44A A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AF44F E6FA                       	smpsAlterVol        $FA
000AF451 A704                       	dc.b	nD3, $04
000AF453 E606                       	smpsAlterVol        $06
000AF455 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AF45A E6FA                       	smpsAlterVol        $FA
000AF45C A705                       	dc.b	nD3, $05
000AF45E E606                       	smpsAlterVol        $06
000AF460 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AF465 E6FA                       	smpsAlterVol        $FA
000AF467 A704                       	dc.b	nD3, $04
000AF469 E606                       	smpsAlterVol        $06
000AF46B A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AF470 E6FA                       	smpsAlterVol        $FA
000AF472 A705                       	dc.b	nD3, $05
000AF474 E606                       	smpsAlterVol        $06
000AF476 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AF47B E6FA                       	smpsAlterVol        $FA
000AF47D A704                       	dc.b	nD3, $04
000AF47F E606                       	smpsAlterVol        $06
000AF481 A705 A7A7 7FE7 19          	dc.b	nD3, $05, nD3, nD3, $7F, smpsNoAttack, $19
000AF488 F2                         	smpsStop
000AF489                            
000AF489                            MerrysLittleLamb_FM2:
000AF489 E0C0                       	smpsPan             panCenter, $00
000AF48B 807F 7F7F 7F30             	dc.b	nRst, $7F, $7F, $7F, $7F, $30
000AF493 E610                       	smpsAlterVol        $10
000AF495 A87F E719 807F 7F7F 3E     	dc.b	nEb3, $7F, smpsNoAttack, $19, nRst, $7F, $7F, $7F, $3E
000AF49E                            
000AF49E                            MerrysLittleLamb_FM3:
000AF49E                            MerrysLittleLamb_FM4:
000AF49E                            MerrysLittleLamb_FM5:
000AF49E F2                         	smpsStop
000AF49F                            
000AF49F                            MerrysLittleLamb_PSG1:
000AF49F 807F 7F7F 7F06 B701        	dc.b	nRst, $7F, $7F, $7F, $7F, $06, nFs4, $01
000AF4A7 EC02                       	smpsPSGAlterVol     $02
000AF4A9 B7                         	dc.b	nFs4
000AF4AA EC03                       	smpsPSGAlterVol     $03
000AF4AC B7                         	dc.b	nFs4
000AF4AD EC03                       	smpsPSGAlterVol     $03
000AF4AF B7                         	dc.b	nFs4
000AF4B0 EC03                       	smpsPSGAlterVol     $03
000AF4B2 B7                         	dc.b	nFs4
000AF4B3 ECF5                       	smpsPSGAlterVol     $F5
000AF4B5 B7                         	dc.b	nFs4
000AF4B6 EC02                       	smpsPSGAlterVol     $02
000AF4B8 B7                         	dc.b	nFs4
000AF4B9 EC03                       	smpsPSGAlterVol     $03
000AF4BB B7                         	dc.b	nFs4
000AF4BC EC03                       	smpsPSGAlterVol     $03
000AF4BE B7                         	dc.b	nFs4
000AF4BF ECF8                       	smpsPSGAlterVol     $F8
000AF4C1 B7                         	dc.b	nFs4
000AF4C2 EC02                       	smpsPSGAlterVol     $02
000AF4C4 B7                         	dc.b	nFs4
000AF4C5 EC03                       	smpsPSGAlterVol     $03
000AF4C7 B7                         	dc.b	nFs4
000AF4C8 EC03                       	smpsPSGAlterVol     $03
000AF4CA B7                         	dc.b	nFs4
000AF4CB EC03                       	smpsPSGAlterVol     $03
000AF4CD B7                         	dc.b	nFs4
000AF4CE ECF5                       	smpsPSGAlterVol     $F5
000AF4D0 B7                         	dc.b	nFs4
000AF4D1 EC02                       	smpsPSGAlterVol     $02
000AF4D3 B7                         	dc.b	nFs4
000AF4D4 EC03                       	smpsPSGAlterVol     $03
000AF4D6 B7                         	dc.b	nFs4
000AF4D7 EC03                       	smpsPSGAlterVol     $03
000AF4D9 B7                         	dc.b	nFs4
000AF4DA EC03                       	smpsPSGAlterVol     $03
000AF4DC B7                         	dc.b	nFs4
000AF4DD ECF5                       	smpsPSGAlterVol     $F5
000AF4DF B7                         	dc.b	nFs4
000AF4E0 EC02                       	smpsPSGAlterVol     $02
000AF4E2 B7                         	dc.b	nFs4
000AF4E3 EC06                       	smpsPSGAlterVol     $06
000AF4E5 B7                         	dc.b	nFs4
000AF4E6 EC03                       	smpsPSGAlterVol     $03
000AF4E8 B7                         	dc.b	nFs4
000AF4E9 ECF5                       	smpsPSGAlterVol     $F5
000AF4EB B7                         	dc.b	nFs4
000AF4EC EC02                       	smpsPSGAlterVol     $02
000AF4EE B7                         	dc.b	nFs4
000AF4EF EC03                       	smpsPSGAlterVol     $03
000AF4F1 B7                         	dc.b	nFs4
000AF4F2 EC03                       	smpsPSGAlterVol     $03
000AF4F4 B7                         	dc.b	nFs4
000AF4F5 EC03                       	smpsPSGAlterVol     $03
000AF4F7 B7                         	dc.b	nFs4
000AF4F8 ECF5                       	smpsPSGAlterVol     $F5
000AF4FA B7                         	dc.b	nFs4
000AF4FB EC02                       	smpsPSGAlterVol     $02
000AF4FD B7                         	dc.b	nFs4
000AF4FE EC03                       	smpsPSGAlterVol     $03
000AF500 B7                         	dc.b	nFs4
000AF501 EC03                       	smpsPSGAlterVol     $03
000AF503 B7                         	dc.b	nFs4
000AF504 EC03                       	smpsPSGAlterVol     $03
000AF506 B780 7F2B                  	dc.b	nFs4, nRst, $7F, $2B
000AF50A ECF7                       	smpsPSGAlterVol     $F7
000AF50C A008 8006 9E08 8006 A308+  	dc.b	nG2, $08, nRst, $06, nF2, $08, nRst, $06, nBb2, $08, nRst, $0A
000AF518 A006 8004 A005 8004 A205+  	dc.b	nG2, $06, nRst, $04, nG2, $05, nRst, $04, nA2, $05, nRst, $04
000AF524 A005 8004 A208 8001 A305+  	dc.b	nG2, $05, nRst, $04, nA2, $08, nRst, $01, nBb2, $05, nRst, $01
000AF530 A305 8003 A305 8001 A304+  	dc.b	nBb2, $05, nRst, $03, nBb2, $05, nRst, $01, nBb2, $04, nRst, nBb2
000AF53C 0580 01A3 0480 A308 807F+  	dc.b	$05, nRst, $01, nBb2, $04, nRst, nBb2, $08, nRst, $7F, $7F, $26
000AF548 F2                         	smpsStop
000AF549                            
000AF549                            MerrysLittleLamb_PSG2:
000AF549 807F 7F7F 7F7F 52          	dc.b	nRst, $7F, $7F, $7F, $7F, $7F, $52
000AF550 EC02                       	smpsPSGAlterVol     $02
000AF552 A708 8006 A908 8006 A908+  	dc.b	nD3, $08, nRst, $06, nE3, $08, nRst, $06, nE3, $08, nRst, $0A
000AF55E E101                       	smpsAlterNote       $01
000AF560 AB06 8004                  	dc.b	nFs3, $06, nRst, $04
000AF564 E101                       	smpsAlterNote       $01
000AF566 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000AF56A E101                       	smpsAlterNote       $01
000AF56C AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000AF570 E101                       	smpsAlterNote       $01
000AF572 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000AF576 E101                       	smpsAlterNote       $01
000AF578 AB08 8001                  	dc.b	nFs3, $08, nRst, $01
000AF57C E101                       	smpsAlterNote       $01
000AF57E AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000AF582 E101                       	smpsAlterNote       $01
000AF584 AB05 8003                  	dc.b	nFs3, $05, nRst, $03
000AF588 E101                       	smpsAlterNote       $01
000AF58A AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000AF58E E101                       	smpsAlterNote       $01
000AF590 AB04 80                    	dc.b	nFs3, $04, nRst
000AF593 E101                       	smpsAlterNote       $01
000AF595 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000AF599 E101                       	smpsAlterNote       $01
000AF59B AB04 80                    	dc.b	nFs3, $04, nRst
000AF59E E101                       	smpsAlterNote       $01
000AF5A0 AB08 807F 7F26             	dc.b	nFs3, $08, nRst, $7F, $7F, $26
000AF5A6 F2                         	smpsStop
000AF5A7                            
000AF5A7                            MerrysLittleLamb_PSG3:
000AF5A7 807F 7F7F 7F39             	dc.b	nRst, $7F, $7F, $7F, $7F, $39
000AF5AD F3E7                       	smpsPSGform         $E7
000AF5AF E108                       	smpsAlterNote       $08
000AF5B1 0002                       	dc.b	nMaxPSG, $02
000AF5B3 EC01                       	smpsPSGAlterVol     $01
000AF5B5 E108                       	smpsAlterNote       $08
000AF5B7 0005                       	dc.b	nMaxPSG, $05
000AF5B9 EC01                       	smpsPSGAlterVol     $01
000AF5BB E108                       	smpsAlterNote       $08
000AF5BD 0008                       	dc.b	nMaxPSG, $08
000AF5BF EC01                       	smpsPSGAlterVol     $01
000AF5C1 E108                       	smpsAlterNote       $08
000AF5C3 00                         	dc.b	nMaxPSG
000AF5C4 EC01                       	smpsPSGAlterVol     $01
000AF5C6 E108                       	smpsAlterNote       $08
000AF5C8 00                         	dc.b	nMaxPSG
000AF5C9 EC01                       	smpsPSGAlterVol     $01
000AF5CB E108                       	smpsAlterNote       $08
000AF5CD 0007                       	dc.b	nMaxPSG, $07
000AF5CF EC01                       	smpsPSGAlterVol     $01
000AF5D1 E108                       	smpsAlterNote       $08
000AF5D3 0005                       	dc.b	nMaxPSG, $05
000AF5D5 EC01                       	smpsPSGAlterVol     $01
000AF5D7 E108                       	smpsAlterNote       $08
000AF5D9 0007                       	dc.b	nMaxPSG, $07
000AF5DB EC01                       	smpsPSGAlterVol     $01
000AF5DD E108                       	smpsAlterNote       $08
000AF5DF 0004                       	dc.b	nMaxPSG, $04
000AF5E1 EC01                       	smpsPSGAlterVol     $01
000AF5E3 E108                       	smpsAlterNote       $08
000AF5E5 0007                       	dc.b	nMaxPSG, $07
000AF5E7 EC01                       	smpsPSGAlterVol     $01
000AF5E9 E108                       	smpsAlterNote       $08
000AF5EB 0006                       	dc.b	nMaxPSG, $06
000AF5ED EC01                       	smpsPSGAlterVol     $01
000AF5EF E108                       	smpsAlterNote       $08
000AF5F1 0009                       	dc.b	nMaxPSG, $09
000AF5F3 EC01                       	smpsPSGAlterVol     $01
000AF5F5 E108                       	smpsAlterNote       $08
000AF5F7 0007                       	dc.b	nMaxPSG, $07
000AF5F9 EC01                       	smpsPSGAlterVol     $01
000AF5FB E108                       	smpsAlterNote       $08
000AF5FD 0001                       	dc.b	nMaxPSG, $01
000AF5FF ECFF                       	smpsPSGAlterVol     $FF
000AF601 E108                       	smpsAlterNote       $08
000AF603 00                         	dc.b	nMaxPSG
000AF604 EC01                       	smpsPSGAlterVol     $01
000AF606 E108                       	smpsAlterNote       $08
000AF608 0009                       	dc.b	nMaxPSG, $09
000AF60A EC01                       	smpsPSGAlterVol     $01
000AF60C E108                       	smpsAlterNote       $08
000AF60E 0007 807F 7F7F 68          	dc.b	nMaxPSG, $07, nRst, $7F, $7F, $7F, $68
000AF615 F2                         	smpsStop
000AF616                            
000AF616                            MerrysLittleLamb_DAC:
000AF616 8913 8A06 8B0D 8A89 8989+  	dc.b	dMidTimpani, $13, dLowTimpani, $06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, $1A, dLowTimpani
000AF622 0D8A 8A19 890D 8888 1A89+  	dc.b	$0D, dLowTimpani, dLowTimpani, $19, dMidTimpani, $0D, dHiTimpani, dHiTimpani, $1A, dMidTimpani, $14, dLowTimpani
000AF62E 068B 0D8A 8989 898A 0C8A+  	dc.b	$06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, dLowTimpani, $0C, dLowTimpani, $0D, dLowTimpani
000AF63A 898A 8B34 890E 8A04 8B09+  	dc.b	dMidTimpani, dLowTimpani, dMerryWtf1, $34, dMidTimpani, $0E, dLowTimpani, $04, dVLowTimpani, $09, dLowTimpani, $0A
000AF646 8909 8989 8A0A 8A09 8A8A+  	dc.b	dMidTimpani, $09, dMidTimpani, dMidTimpani, dMerryWtf2, $0A, dLowTimpani, $09, dLowTimpani, dLowTimpani, dMerryWtf3, dMidTimpani
000AF652 0A88 0988 8289 0581 098A+  	dc.b	$0A, dHiTimpani, $09, dHiTimpani, dSnare, dMidTimpani, $05, dKick, $09, dLowTimpani, $05, dVLowTimpani
000AF65E 098A 8989 0A89 098A 8805+  	dc.b	$09, dLowTimpani, dMidTimpani, dMidTimpani, $0A, dMidTimpani, $09, dLowTimpani, dHiTimpani, $05, dMidTimpani, $04
000AF66A 8A0A 8909 8A82 0182 0482+  	dc.b	dLowTimpani, $0A, dMidTimpani, $09, dLowTimpani, dSnare, $01, dSnare, $04, dSnare, $01, dSnare
000AF676 0382 0181 0481 0182 0382+  	dc.b	$03, dSnare, $01, dKick, $04, dKick, $01, dSnare, $03, dSnare, $01, dKick
000AF682 0481 0182 0482 0181 0381+  	dc.b	$04, dKick, $01, dSnare, $04, dSnare, $01, dKick, $03, dKick, $01, dSnare
000AF68E 0489 0582 0482 058A 048B+  	dc.b	$04, dMidTimpani, $05, dSnare, $04, dSnare, $05, dLowTimpani, $04, dVLowTimpani, $05, dSnare
000AF69A 8A04 8205 8904 8205 8982+  	dc.b	dLowTimpani, $04, dSnare, $05, dMidTimpani, $04, dSnare, $05, dMidTimpani, dSnare, $04, dMidTimpani
000AF6A6 0582 8A04 8205 8A04 8205+  	dc.b	$05, dSnare, dMerryWtf2, $04, dSnare, $05, dLowTimpani, $04, dSnare, $05, dLowTimpani, dSnare
000AF6B2 048A 0582 0486 0582 8904+  	dc.b	$04, dLowTimpani, $05, dSnare, $04, $86, $05, dSnare, dMidTimpani, $04, dSnare, $05
000AF6BE 8804 8205 8882 0482 0582+  	dc.b	dHiTimpani, $04, dSnare, $05, dHiTimpani, dSnare, $04, dSnare, $05, dSnare, dMidTimpani, $04
000AF6CA 8205 8204 8A05 8B82 048A+  	dc.b	dSnare, $05, dSnare, $04, dLowTimpani, $05, dVLowTimpani, dSnare, $04, dLowTimpani, $05, dSnare
000AF6D6 0489 0582 8909 8904 8205+  	dc.b	$04, dMidTimpani, $05, dSnare, dMidTimpani, $09, dMidTimpani, $04, dSnare, $05, dLowTimpani, $09
000AF6E2 8801 8804 8801 8904 8988+  	dc.b	dHiTimpani, $01, dHiTimpani, $04, dHiTimpani, $01, dMidTimpani, $04, dMidTimpani, dHiTimpani, $01, dHiTimpani
000AF6EE 0488 0189 0389 0189 0488+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dHiTimpani, $01, dHiTimpani
000AF6FA 0488 0189 0389 0189 048A+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dMerryClap, $01, dMerryClap
000AF706 038A 018B 048B 018B 0482+  	dc.b	$03, dMerryClap, $01, dVLowTimpani, $04, dVLowTimpani, $01, dVLowTimpani, $04, dSnare, $01, dKick
000AF712 0381 0182 0482 0181 0482+  	dc.b	$03, dKick, $01, dSnare, $04, dSnare, $01, dKick, $04, dSnare, $7F, nRst
000AF71E F2                         	smpsStop
000AF71F                            
000AF71F                            MerrysLittleLamb_Voices:
000AF71F                            ;	Voice $00
000AF71F                            ;	$00
000AF71F                            ;	$70, $70, $70, $70, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $1F
000AF71F                            ;	$00, $00, $00, $12, 	$F0, $F0, $F0, $0F, 	$00, $00, $00, $00
000AF71F                            	smpsVcAlgorithm     $00
000AF71F                            	smpsVcFeedback      $00
000AF71F                            	smpsVcUnusedBits    $00
000AF71F                            	smpsVcDetune        $07, $07, $07, $07
000AF71F                            	smpsVcCoarseFreq    $00, $00, $00, $00
000AF71F                            	smpsVcRateScale     $00, $00, $00, $00
000AF71F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AF71F                            	smpsVcAmpMod        $00, $00, $00, $00
000AF71F                            	smpsVcDecayRate1    $1F, $00, $00, $00
000AF71F                            	smpsVcDecayRate2    $12, $00, $00, $00
000AF71F                            	smpsVcDecayLevel    $00, $0F, $0F, $0F
000AF71F                            	smpsVcReleaseRate   $0F, $00, $00, $00
000AF71F 0070 7070 701F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000AF738                            
000AF738                            ;	Voice $01
000AF738                            ;	$25
000AF738                            ;	$01, $01, $01, $71, 	$1E, $1E, $1E, $1E, 	$08, $06, $0B, $03
000AF738                            ;	$00, $00, $00, $00, 	$4F, $4F, $AF, $0F, 	$08, $16, $06, $00
000AF738                            	smpsVcAlgorithm     $05
000AF738                            	smpsVcFeedback      $04
000AF738                            	smpsVcUnusedBits    $00
000AF738                            	smpsVcDetune        $07, $00, $00, $00
000AF738                            	smpsVcCoarseFreq    $01, $01, $01, $01
000AF738                            	smpsVcRateScale     $00, $00, $00, $00
000AF738                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000AF738                            	smpsVcAmpMod        $00, $00, $00, $00
000AF738                            	smpsVcDecayRate1    $03, $0B, $06, $08
000AF738                            	smpsVcDecayRate2    $00, $00, $00, $00
000AF738                            	smpsVcDecayLevel    $00, $0A, $04, $04
000AF738                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AF738 2501 0101 711E 1E1E 1E08+  	smpsVcTotalLevel    $00, $06, $16, $08
000AF751                            
000AF751                            
000AF752 00                         		even
000AF752                            Music8F:	incbin	sound\music8F.bin ; Game Over
000AFD92 00                         		even
000AFD92                            Music90:	incbin	sound\music90.bin ; Continue
000B012C 00                         		even
000B012C                            Music91:	include	sound\mus91.asm ; Megurine Luka I mean Credits
000B012C                            Mus91_Credits_Header:
000B012C =00000001                  smpsHeaderStartSong = 1
000B012C 0000                       	smpsHeaderVoice     Mus91_Credits_Voices
000B012E 0603                       	smpsHeaderChan      $06, $03
000B0130 0133                       	smpsHeaderTempo     $01, $33
000B0132                            
000B0136 0000 F412                  	smpsHeaderFM        Mus91_Credits_FM1,	$F4, $12
000B013A 0000 000B                  	smpsHeaderFM        Mus91_Credits_FM2,	$00, $0B
000B013E 0000 F414                  	smpsHeaderFM        Mus91_Credits_FM3,	$F4, $14
000B0142 0000 F408                  	smpsHeaderFM        Mus91_Credits_FM4,	$F4, $08
000B0146 0000 F420                  	smpsHeaderFM        Mus91_Credits_FM5,	$F4, $20
000B014A 0000 D001 0000             	smpsHeaderPSG       Mus91_Credits_PSG1,	$D0, $01, $00, $00
000B0150 0000 D003 0000             	smpsHeaderPSG       Mus91_Credits_PSG2,	$D0, $03, $00, $00
000B0156 0000 0003 0004             	smpsHeaderPSG       Mus91_Credits_PSG3,	$00, $03, $00, fTone_04
000B015C                            ;	this is just a rip of the track
000B015C                            ;	ripper, 	part,		joke
000B015C                            ;	undecided, 	intro,		undecided
000B015C                            ;	coninight, 	ghz,		luka luka night fever -FM1 done
000B015C                            ;	coninight, 	lz,		the cleveland show (callback) - COMPLETE!
000B015C                            ;	undecided, 	mz,		undecided
000B015C                            ;	carlos, 	slz,		meltdown
000B015C                            ;	undecided, 	sbz,		undecided
000B015C                            ;	undecided, 	ccz,		undecided
000B015C                            ;	undecided, 	ending,		undecided
000B015C                            
000B015C                            ; FM1 Data
000B015C                            Mus91_Credits_FM1:
000B015C E201                       	smpsNop             $01
000B015E 8060                       	dc.b	nRst, $60
000B0162 E6F8                       	smpsAlterVol        $F8
000B0164 E806                       	smpsNoteFill        $06
000B0166 F800 00                    	smpsCall            Mus91_Credits_Call11
000B0169 E0C0                       	smpsPan             panCenter, $00
000B016B E800                       	smpsNoteFill        $00
000B016F F00D 0107 04               	smpsModSet          $0D, $01, $07, $04
000B0174                            ; conis turn
000B0174 F800 00                    	smpsCall            Mus91_Credits_Call12	;ruka ruka
000B0177 C40C C5C7 18C5 30          	dc.b	nG5, $0C, nAb5, nBb5, $18, nAb5, $30	;โ naito fiibaa
000B017E                            
000B017E F800 00                    	smpsCall            Mus91_Credits_Call12	;watashi wa 
000B0181 CC0C CAC9 CA               	dc.b	nEb6, $0C, nCs6, nC6, nCs6		;koko ni
000B0186 C9C9 C7C5 80               	dc.b	nC6, nC6, nBb5, nAb5, nRst		;iru kara
000B018B                            
000B018B C2C2 C4C5 C718             	dc.b	nF5, nF5, nG5, nAb5, nBb5, $18		;sukoshi de mo
000B0191 C4C5 0CC7 18C5 80          	dc.b	nG5, nAb5, $0C, nBb5, $18, nAb5, nRst	;shisen o
000B0198                            
000B0198 C2C4 C5C7 0C               	dc.b	nF5, nG5, nAb5, nBb5, $0C		;sorashicha
000B019D F800 00                    	smpsCall           Mus91_Credits_DameDameYo	;dame dame yo
000B01A0 8060 6060 18               	dc.b	nRst, $60, $60, $60, $18
000B01A5 F800 00                    	smpsCall           Mus91_Credits_DameDameYo	;dame dame yo
000B01A8                            ;	dc.b	nRst, $30
000B01A8                            ; conis turn again
000B01A8 F4                         	smpsModOff
000B01A9 E201                       	smpsNop             $01
000B01AD E602                       	smpsAlterVol        $02
000B01AF C10C C4C1                  	dc.b	nE5, $0C, nG5, nE5			;My name is
000B01B3                            ;cut for tempo change
000B01B3 EA0F                       	smpsSetTempoMod     $0F
000B01B5                            ;perfect now continue
000B01B5 C409 C4C6 0C               	dc.b	nG5, $09, nG5, nA5, $0C			;Cleveland Brown
000B01BA                            
000B01BA C106 C103 BFBD 06          	dc.b	nE5, $06, nE5, $03, nD5, nC5, $06	;and I am
000B01C1 BD09 BDBA 0680             	dc.b	nC5, $09, nC5, nA4, $06, nRst		;proud to be
000B01C7                            
000B01C7 CD06 CBC8                  	dc.b	nE6, $06, nD6, nB5			; and silence
000B01CB CB09 C9C6 0C               	dc.b	nD6, $09, nC6, nA5, $0C
000B01D0                            
000B01D0 C806 C603 C4C6 06          	dc.b	nB5, $06, nA5, $03, nG5, nA5, $06
000B01D7 C609 C6C8 0680 0C          	dc.b	nA5, $09, nA5, nB5, $06, nRst, $0C
000B01DE                            
000B01DE C9CB 04C9 CBC9 24          	dc.b	nC6, nD6, $04, nC6, nD6, nC6, $24	;welcome back to labyrinth zone from sonic 1
000B01E5 E9F4                       	smpsAlterPitch      $F4
000B01E7 E609                       	smpsAlterVol        $09
000B01EB 8018 C606 C8C9 CD          	dc.b	nRst, $18, nA5, $06, nB5, nC6, nE6
000B01F2 F800 00                    	smpsCall            Mus91_Credits_Call0C
000B01F7 E6EB                       	smpsAlterVol        $EB
000B01F9 800C C4C6 D0               	dc.b	nRst, $0C, nG5, nA5, nG6
000B01FE F800 00                    	smpsCall            Mus91_Credits_Call0D
000B0201 CD1E D906 D518 8024        	dc.b	nE6, $1E, nE7, $06, nC7, $18, nRst, $24
000B0209 E201                       	smpsNop             $01
000B020B EA0A                       	smpsSetTempoMod     $0A
000B020F E90C                       	smpsAlterPitch      $0C
000B0211 E60B                       	smpsAlterVol        $0B
000B0213 F800 00                    	smpsCall            Mus91_Credits_Call0E
000B0216 E201                       	smpsNop             $01
000B0218 EA07                       	smpsSetTempoMod     $07
000B021A 8060                       	dc.b	nRst, $60
000B021C E201                       	smpsNop             $01
000B021E EA03                       	smpsSetTempoMod     $03
000B0220 8030                       	dc.b	nRst, $30
000B0224 E60E                       	smpsAlterVol        $0E
000B0226 8004 CE08 CD03 80CB 80C9+  	dc.b	nRst, $04, nF6, $08, nE6, $03, nRst, nD6, nRst, nC6, nRst, nD6
000B0232 80C9 04C6 8002 C780 04C7+  	dc.b	nRst, nC6, $04, nA5, nRst, $02, nBb5, nRst, $04, nBb5, $08, nC6
000B023E 0380 C780 C604 C780 02C9+  	dc.b	$03, nRst, nBb5, nRst, nA5, $04, nBb5, nRst, $02, nC6, $0E, nRst
000B024A 06CD 0280 04CD 0CCE CD0A+  	dc.b	$06, nE6, $02, nRst, $04, nE6, $0C, nF6, nE6, $0A, nD6, $02
000B0256 E201                       	smpsNop             $01
000B0258 EA04                       	smpsSetTempoMod     $04
000B025A E6F5                       	smpsAlterVol        $F5
000B025E 8060                       	dc.b	nRst, $60
000B0260 F800 00                    	smpsCall            Mus91_Credits_Call07
000B0263 E609                       	smpsAlterVol        $09
000B0265 E103                       	smpsAlterNote       $03
000B0269 F000 0106 04               	smpsModSet          $00, $01, $06, $04
000B026E F800 00                    	smpsCall            Mus91_Credits_Call0B
000B0271 E6EF                       	smpsAlterVol        $EF
000B0275 E102                       	smpsAlterNote       $02
000B0277 966C E760                  	dc.b	nA1, $6C, smpsNoAttack, $60
000B027B E201                       	smpsNop             $01
000B027D F2                         	smpsStop
000B027E                            
000B027E                            Mus91_Credits_Call12:
000B027E                            	;whats the name of the pink haired vocaloid just askin'
000B027E                            	;and twice as well
000B027E                            	;them:
000B027E C218 C9C2 C9               	dc.b	nF5, $18, nC6, nF5, nC6
000B0283 E3                         	smpsReturn
000B0284                            
000B0284                            Mus91_Credits_DameDameYo:
000B0284 C418 C50C C4C5 C2          	dc.b	nG5, $18, nAb5, $0C, nG5, nAb5, nF5	
000B028B E3                         	smpsReturn
000B028C                            
000B028C                            Mus91_Credits_Call07:
000B028C 800C CA15 8003 CA06 80CB+  	dc.b	nRst, $0C, nCs6, $15, nRst, $03, nCs6, $06, nRst, nD6, $0F, nRst
000B0298 03C8 1880 06CA 0680 CA80+  	dc.b	$03, nB5, $18, nRst, $06, nCs6, $06, nRst, nCs6, nRst, nCs6, nRst
000B02A4 C680 C40F 8003 C818 8006   	dc.b	nA5, nRst, nG5, $0F, nRst, $03, nB5, $18, nRst, $06
000B02AE F700 02FF DA               	smpsLoop            $00, $02, Mus91_Credits_Call07
000B02B3 E3                         	smpsReturn
000B02B4                            
000B02B4                            ; FM2 Data
000B02B4                            Mus91_Credits_FM2:
000B02B4 8060                       	dc.b	nRst, $60
000B02B8                            
000B02B8                            Mus91_Credits_Loop0F:
000B02B8 A70C A7B0 B0AC ACAE AEA7+  	dc.b	nD3, $0C, nD3, nB3, nB3, nG3, nG3, nA3, nA3, nD3, nD3, nA3
000B02C4 AEAB ABAC ACA5 A5AC ACAB+  	dc.b	nA3, nFs3, nFs3, nG3, nG3, nC3, nC3, nG3, nG3, nFs3, nFs3, nG3
000B02D0 ACA2 A2A2 A2A7 A7A7 A9     	dc.b	nG3, nA2, nA2, nA2, nA2, nD3, nD3, nD3, nE3
000B02D9 F700 02FF DB               	smpsLoop            $00, $02, Mus91_Credits_Loop0F
000B02E0                            
000B02E0                            Mus91_Credits_Loop10:
000B02E0 E805                       	smpsNoteFill        $05
000B02E2 AA0C                       	dc.b	nF3, $0C
000B02E4 F800 00                    	smpsCall            Mus91_Credits_Call0F
000B02E7 E805                       	smpsNoteFill        $05
000B02E9 A90C 0C0C 0C0C             	dc.b	nE3, $0C, $0C, $0C, $0C, $0C
000B02EF E800                       	smpsNoteFill        $00
000B02F1 A5A7 A9                    	dc.b	nC3, nD3, nE3
000B02F4 F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop10
000B02F9 E805                       	smpsNoteFill        $05
000B02FB AA                         	dc.b	nF3
000B02FC F800 00                    	smpsCall            Mus91_Credits_Call0F
000B02FF E805                       	smpsNoteFill        $05
000B0301 A9                         	dc.b	nE3
000B0302 F800 00                    	smpsCall            Mus91_Credits_Call0F
000B0305 E805                       	smpsNoteFill        $05
000B0307 A7                         	dc.b	nD3
000B0308 F800 00                    	smpsCall            Mus91_Credits_Call0F
000B030B E805                       	smpsNoteFill        $05
000B030D A50C 0C0C 0C0C             	dc.b	nC3, $0C, $0C, $0C, $0C, $0C
000B0313 E800                       	smpsNoteFill        $00
000B0315 A0A2 A4                    	dc.b	nG2, nA2, nB2
000B0318 E805                       	smpsNoteFill        $05
000B031A                            
000B031A                            Mus91_Credits_Loop11:
000B031A A5                         	dc.b	nC3
000B031B F700 18FF FB               	smpsLoop            $00, $18, Mus91_Credits_Loop11
000B0320 E800                       	smpsNoteFill        $00
000B0322 A506 80A5 0CA2 0680 A20C+  	dc.b	nC3, $06, nRst, nC3, $0C, nA2, $06, nRst, nA2, $0C, nBb2, $06
000B032E 80A3 0CA4 0680 A40C        	dc.b	nRst, nBb2, $0C, nB2, $06, nRst, nB2, $0C
000B0338 E9E8                       	smpsAlterPitch      $E8
000B033A E602                       	smpsAlterVol        $02
000B033C                            
000B033C                            Mus91_Credits_Loop12:
000B033C B10F 8003 B580 B809 8003+  	dc.b	nC4, $0F, nRst, $03, nE4, nRst, nG4, $09, nRst, $03, nA4, $09
000B0348 8003 BC0F 8003 BA80 B809+  	dc.b	nRst, $03, nB4, $0F, nRst, $03, nA4, nRst, nG4, $09, nRst, $03
000B0354 B509 8003                  	dc.b	nE4, $09, nRst, $03
000B0358 E905                       	smpsAlterPitch      $05
000B035A F700 02FF DE               	smpsLoop            $00, $02, Mus91_Credits_Loop12
000B035F E9F6                       	smpsAlterPitch      $F6
000B0361 B10F 8003 B580 B809 8003+  	dc.b	nC4, $0F, nRst, $03, nE4, nRst, nG4, $09, nRst, $03, nE4, $09
000B036D 8003 B106 8012 B518        	dc.b	nRst, $03, nC4, $06, nRst, $12, nE4, $18
000B0375 E601                       	smpsAlterVol        $01
000B0379                            
000B0379                            Mus91_Credits_Loop13:
000B0379 AE03 80AE 06B5 0380 B506+  	dc.b	nA3, $03, nRst, nA3, $06, nE4, $03, nRst, nE4, $06, nD4, $03
000B0385 80B3 06B5 0380 B506        	dc.b	nRst, nD4, $06, nE4, $03, nRst, nE4, $06
000B038D F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop13
000B0392                            
000B0392                            Mus91_Credits_Loop14:
000B0392 B303 80B3 06BA 0380 BA06+  	dc.b	nD4, $03, nRst, nD4, $06, nA4, $03, nRst, nA4, $06, nF4, $03
000B039E 80B6 06BA 0380 BA06        	dc.b	nRst, nF4, $06, nA4, $03, nRst, nA4, $06
000B03A6 F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop14
000B03AB B003 80B0 06B6 0380 B606+  	dc.b	nB3, $03, nRst, nB3, $06, nF4, $03, nRst, nF4, $06, nD4, $03
000B03B7 80B3 06B6 0380 B606 B503+  	dc.b	nRst, nD4, $06, nF4, $03, nRst, nF4, $06, nE4, $03, nRst, nE4
000B03C3 06BC 0380 BC06 B903 80B9+  	dc.b	$06, nB4, $03, nRst, nB4, $06, nAb4, $03, nRst, nAb4, $06, nB4
000B03CF 0380 BC06 AE03 80AE 06B5+  	dc.b	$03, nRst, nB4, $06, nA3, $03, nRst, nA3, $06, nE4, $03, nRst
000B03DB B506 B103 80B1 06B5 0380+  	dc.b	nE4, $06, nC4, $03, nRst, nC4, $06, nE4, $03, nRst, nE4, $06
000B03E7 AE03 8009 8024             	dc.b	nA3, $03, nRst, $09, nRst, $24
000B03ED E6F8                       	smpsAlterVol        $F8
000B03EF B106 8003 B180 06B1 1280+  	dc.b	nC4, $06, nRst, $03, nC4, nRst, $06, nC4, $12, nRst, $06, nC4
000B03FB 0280 01B1 0280 01AF 0680+  	dc.b	$02, nRst, $01, nC4, $02, nRst, $01, nBb3, $06, nRst, $03, nBb3
000B0407 0380 06AE 1280 06AE 0280+  	dc.b	$03, nRst, $06, nA3, $12, nRst, $06, nA3, $02, nRst, $01, nA3
000B0413 0280 01                    	dc.b	$02, nRst, $01
000B0416                            
000B0416                            Mus91_Credits_Loop15:
000B0416 B306 8003 B306 8003 B302+  	dc.b	nD4, $06, nRst, $03, nD4, $06, nRst, $03, nD4, $02, nRst, $01
000B0422 B302 8001                  	dc.b	nD4, $02, nRst, $01
000B0426 E9FF                       	smpsAlterPitch      $FF
000B0428 F700 04FF EA               	smpsLoop            $00, $04, Mus91_Credits_Loop15
000B042D E904                       	smpsAlterPitch      $04
000B042F AC06 8003 AC80 06AC 1280+  	dc.b	nG3, $06, nRst, $03, nG3, nRst, $06, nG3, $12, nRst, $06, nG3
000B043B 0280 01AC 0280 01B0 0680+  	dc.b	$02, nRst, $01, nG3, $02, nRst, $01, nB3, $06, nRst, $03, nB3
000B0447 8006 B012 8006 B302 8001+  	dc.b	nRst, $06, nB3, $12, nRst, $06, nD4, $02, nRst, $01, nB3, $02
000B0453 8001 B106 8003 B180 06B1+  	dc.b	nRst, $01, nC4, $06, nRst, $03, nC4, nRst, $06, nC4, $12, nRst
000B045F 06B5 0280 01B6 0280 01B8+  	dc.b	$06, nE4, $02, nRst, $01, nF4, $02, nRst, $01, nG4, $06, nRst
000B046B AC24                       	dc.b	nG3, $24
000B046F E90C                       	smpsAlterPitch      $0C
000B0471 E607                       	smpsAlterVol        $07
000B0473 E806                       	smpsNoteFill        $06
000B0475                            
000B0475                            Mus91_Credits_Loop16:
000B0475 F800 00                    	smpsCall            Mus91_Credits_Call10
000B0478 E906                       	smpsAlterPitch      $06
000B047A F800 00                    	smpsCall            Mus91_Credits_Call10
000B047D E9FF                       	smpsAlterPitch      $FF
000B047F F800 00                    	smpsCall            Mus91_Credits_Call10
000B0482 E902                       	smpsAlterPitch      $02
000B0484 F800 00                    	smpsCall            Mus91_Credits_Call10
000B0487 E9F9                       	smpsAlterPitch      $F9
000B0489 F702 02FF E8               	smpsLoop            $02, $02, Mus91_Credits_Loop16
000B048E E800                       	smpsNoteFill        $00
000B0490 E9F4                       	smpsAlterPitch      $F4
000B0492 E6FC                       	smpsAlterVol        $FC
000B0496 8030 8030 BA03 80BA 80B8+  	dc.b	nRst, $30, nRst, $30, nA4, $03, nRst, nA4, nRst, nG4, nRst, nG4
000B04A2 80B6 80B6 80B5 80B5 0280+  	dc.b	nRst, nF4, nRst, nF4, nRst, nE4, nRst, nE4, $02, nRst, nBb4
000B04AD E602                       	smpsAlterVol        $02
000B04AF 8004 BB08 BD03 80BB 80BA+  	dc.b	nRst, $04, nBb4, $08, nC5, $03, nRst, nBb4, nRst, nA4, $06, nRst
000B04BB BB04 BA80 02B8 8004 B808+  	dc.b	nBb4, $04, nA4, nRst, $02, nG4, nRst, $04, nG4, $08, nA4, $03
000B04C7 80B8 80B6 80B6 80B8 04B6+  	dc.b	nRst, nG4, nRst, nF4, nRst, nF4, nRst, nG4, $04, nF4, nRst, $02
000B04D3 B580 04B5 08B5 0380 B580+  	dc.b	nE4, nRst, $04, nE4, $08, nE4, $03, nRst, nE4, nRst, nA4, $09
000B04DF 8003 BA0A B302             	dc.b	nRst, $03, nA4, $0A, nD4, $02
000B04E5 E90C                       	smpsAlterPitch      $0C
000B04E7 E6FE                       	smpsAlterVol        $FE
000B04EB 8060                       	dc.b	nRst, $60
000B04ED                            
000B04ED                            Mus91_Credits_Loop17:
000B04ED AE06 80AE 80A9 80A9 80AC+  	dc.b	nA3, $06, nRst, nA3, nRst, nE3, nRst, nE3, nRst, nG3, $12, nFs3
000B04F9 0CAC 06AB 0CAE 0680 AE80+  	dc.b	$0C, nG3, $06, nFs3, $0C, nA3, $06, nRst, nA3, nRst, nE3, nRst
000B0505 A980 B312 B20C B306 B20C   	dc.b	nE3, nRst, nD4, $12, nCs4, $0C, nD4, $06, nCs4, $0C
000B050F F700 02FF DA               	smpsLoop            $00, $02, Mus91_Credits_Loop17
000B0514 AC06 80A9 80AA 80AB 80AC+  	dc.b	nG3, $06, nRst, nE3, nRst, nF3, nRst, nFs3, nRst, nG3, $06, nG3
000B0520 06A9 0680 AA80 AC80 A906+  	dc.b	$06, nE3, $06, nRst, nF3, nRst, nG3, nRst, nE3, $06, nRst, nE3
000B052C 80AD 80AD 80B0 0680 B080+  	dc.b	nRst, nAb3, nRst, nAb3, nRst, nB3, $06, nRst, nB3, nRst, nD4, nRst
000B0538 B380 800C AE12 8006 AE12+  	dc.b	nD4, nRst, nRst, $0C, nA3, $12, nRst, $06, nA3, $12, nAb3, $12
000B0544 AE06 80                    	dc.b	nA3, $06, nRst
000B0547 E6FD                       	smpsAlterVol        $FD
000B0549 A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000B054D F2                         	smpsStop
000B054E                            
000B054E                            	; Unused data
000B054E                            	; Could this be a blanked-out 'smpsNop $01'? It's near an smpsStop.
000B054E 0001                       	dc.b	$00, $01
000B0550                            
000B0550                            Mus91_Credits_Call0F:
000B0550 0C0C 0C0C 0C0C             	dc.b	$0C, $0C, $0C, $0C, $0C, $0C
000B0556 E800                       	smpsNoteFill        $00
000B0558 0C                         	dc.b	$0C
000B0559 E3                         	smpsReturn
000B055A                            
000B055A                            Mus91_Credits_Call10:
000B055A B103 B1AC ACAE AEAC AC     	dc.b	nC4, $03, nC4, nG3, nG3, nA3, nA3, nG3, nG3
000B0563 F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Call10
000B0568 E3                         	smpsReturn
000B0569                            
000B0569                            ; FM3 Data
000B0569                            Mus91_Credits_FM3:
000B0569 8060                       	dc.b	nRst, $60
000B056B F700 08FF FA               	smpsLoop            $00, $08, Mus91_Credits_FM3
000B0572 E601                       	smpsAlterVol        $01
000B0574 E040                       	smpsPan             panRight, $00
000B0576 CB06 CDCF D0CD CFD0 D2CF+  	dc.b	nD6, $06, nE6, nFs6, nG6, nE6, nFs6, nG6, nA6, nFs6, nG6, nA6
000B0582 D4D2 D4D5 D7               	dc.b	nB6, nA6, nB6, nC7, nD7
000B0587                            
000B0587                            Mus91_Credits_Loop0C:
000B0587 E080                       	smpsPan             panLeft, $00
000B0589 D9                         	dc.b	nE7
000B058A E040                       	smpsPan             panRight, $00
000B058C D5                         	dc.b	nC7
000B058D E602                       	smpsAlterVol        $02
000B058F F700 0DFF F4               	smpsLoop            $00, $0D, Mus91_Credits_Loop0C
000B0594 E0C0                       	smpsPan             panCenter, $00
000B0598 E6E5                       	smpsAlterVol        $E5
000B059A E9E8                       	smpsAlterPitch      $E8
000B059C D006 D2D5 0CD2 804E 80D0+  	dc.b	nG6, $06, nA6, nC7, $0C, nA6, nRst, $4E, nRst, nG6, $06, nA6
000B05A8 D50C D980 4E80 D006 D2D5+  	dc.b	nC7, $0C, nE7, nRst, $4E, nRst, nG6, $06, nA6, nC7, $0C, nA6
000B05B4 8036 80D5 0680 12D2 18D0+  	dc.b	nRst, $36, nRst, nC7, $06, nRst, $12, nA6, $18, nG6, $06, nRst
000B05C0 D280 D580                  	dc.b	nA6, nRst, nC7, nRst
000B05C4 F4                         	smpsModOff
000B05C7 E6FE                       	smpsAlterVol        $FE
000B05C9                            
000B05C9                            Mus91_Credits_Loop0D:
000B05C9 C901 E7C8 1B80 08C7 01E7+  	dc.b	nC6, $01, smpsNoAttack, nB5, $1B, nRst, $08, nBb5, $01, smpsNoAttack, nA5, $1B
000B05D5 8008                       	dc.b	nRst, $08
000B05D7 F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop0D
000B05DC C901 E7C8 0B80 0CC7 01E7+  	dc.b	nC6, $01, smpsNoAttack, nB5, $0B, nRst, $0C, nBb5, $01, smpsNoAttack, nA5, $0B
000B05E8 800C CA01 E7C9 1B80 08C9+  	dc.b	nRst, $0C, nCs6, $01, smpsNoAttack, nC6, $1B, nRst, $08, nC6, $01, smpsNoAttack
000B05F4 C824 E718 E75A 8006        	dc.b	nB5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000B05FC E918                       	smpsAlterPitch      $18
000B05FE 8060 8080 30               	dc.b	nRst, $60, nRst, nRst, $30
000B0603 E9E8                       	smpsAlterPitch      $E8
000B0607 E90C                       	smpsAlterPitch      $0C
000B0609 E603                       	smpsAlterVol        $03
000B060B E102                       	smpsAlterNote       $02
000B060D 8018 C606 C8C9 CD          	dc.b	nRst, $18, nA5, $06, nB5, nC6, nE6
000B0614 F800 00                    	smpsCall            Mus91_Credits_Call0C
000B0619 E90C                       	smpsAlterPitch      $0C
000B061B E60B                       	smpsAlterVol        $0B
000B061D 800C C4C6 D0               	dc.b	nRst, $0C, nG5, nA5, nG6
000B0622 F800 00                    	smpsCall            Mus91_Credits_Call0D
000B0627 E6EC                       	smpsAlterVol        $EC
000B0629 8006                       	dc.b	nRst, $06
000B062B E114                       	smpsAlterNote       $14
000B062D C401 E7                    	dc.b	nG5, $01, smpsNoAttack
000B0630 E100                       	smpsAlterNote       $00
000B0632 02C6 03                    	dc.b	$02, nA5, $03
000B0635 E805                       	smpsNoteFill        $05
000B0637 C903 C906 C603 C9          	dc.b	nC6, $03, nC6, $06, nA5, $03, nC6
000B063E E800                       	smpsNoteFill        $00
000B0640 C9                         	dc.b	nC6
000B0641 E6FC                       	smpsAlterVol        $FC
000B0643 E933                       	smpsAlterPitch      $33
000B0647 B403                       	dc.b	nEb4, $03
000B0649 E607                       	smpsAlterVol        $07
000B064B B4                         	dc.b	nEb4
000B064C E607                       	smpsAlterVol        $07
000B064E B4                         	dc.b	nEb4
000B064F E607                       	smpsAlterVol        $07
000B0651 B4                         	dc.b	nEb4
000B0654 E6EF                       	smpsAlterVol        $EF
000B0656 E9CD                       	smpsAlterPitch      $CD
000B0658 CD03 CED0 8009             	dc.b	nE6, $03, nF6, nG6, nRst, $09
000B065E E1EC                       	smpsAlterNote       $EC
000B0660 D501 E7                    	dc.b	nC7, $01, smpsNoAttack
000B0663 E100                       	smpsAlterNote       $00
000B0665 F02C 0104 04               	smpsModSet          $2C, $01, $04, $04
000B066A D523                       	dc.b	nC7, $23
000B066C F4                         	smpsModOff
000B066F E6FF                       	smpsAlterVol        $FF
000B0671 E103                       	smpsAlterNote       $03
000B0673 F800 00                    	smpsCall            Mus91_Credits_Call0E
000B0676 E100                       	smpsAlterNote       $00
000B067A E609                       	smpsAlterVol        $09
000B067C 8030 8030 802E C202 8004+  	dc.b	nRst, $30, nRst, $30, nRst, $2E, nF5, $02, nRst, $04, nF5, $08
000B0688 C203 80C2 80C1 0380 13BF+  	dc.b	nF5, $03, nRst, nF5, nRst, nE5, $03, nRst, $13, nD5, $02, nRst
000B0694 04BF 08BF 0380 BF80 BD03+  	dc.b	$04, nD5, $08, nD5, $03, nRst, nD5, nRst, nC5, $03, nRst, $15
000B06A0 8004 D208 D003 80D0 80CE+  	dc.b	nRst, $04, nA6, $08, nG6, $03, nRst, nG6, nRst, nF6, nRst, nF6
000B06AC 80CD 04CE 02CD 04CB 02     	dc.b	nRst, nE6, $04, nF6, $02, nE6, $04, nD6, $02
000B06B7 E6F9                       	smpsAlterVol        $F9
000B06B9 8060                       	dc.b	nRst, $60
000B06BB                            
000B06BB                            Mus91_Credits_Loop0E:
000B06BB CD06 80CD 80CA 80CA 80CB+  	dc.b	nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nD6, $12, nD6
000B06C7 1ECD 0680 CD80 CA80 CA80+  	dc.b	$1E, nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nG6, $12
000B06D3 D01E                       	dc.b	nG6, $1E
000B06D5 F700 02FF E2               	smpsLoop            $00, $02, Mus91_Credits_Loop0E
000B06DA 800C CB12 8006 CB80 CA12+  	dc.b	nRst, $0C, nD6, $12, nRst, $06, nD6, nRst, nCs6, $12, nD6, nCs6
000B06E6 0CC5 18C8 CBD1 800C CD80+  	dc.b	$0C, nAb5, $18, nB5, nD6, nAb6, nRst, $0C, nE6, nRst, nE6, $12
000B06F2 CCCD 0680                  	dc.b	nEb6, nE6, $06, nRst
000B06F8 E6F8                       	smpsAlterVol        $F8
000B06FA E103                       	smpsAlterNote       $03
000B06FC A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000B0700 F2                         	smpsStop
000B0701                            
000B0701                            Mus91_Credits_Call14:
000B0701 CB06 CDCF D0CD CFD0 D2CF+  	dc.b	nD6, $06, nE6, nFs6, nG6, nE6, nFs6, nG6, nA6, nFs6, nG6, nA6
000B070D D4D2 D4D5 D7               	dc.b	nB6, nA6, nB6, nC7, nD7
000B0712 E3                         	smpsReturn
000B0713                            
000B0713                            ; FM4 Data
000B0713                            Mus91_Credits_FM4:
000B0715 8060                       	dc.b	nRst, $60
000B0717 E608                       	smpsAlterVol        $08
000B0719 F800 00                    	smpsCall            Mus91_Credits_Call08
000B071C C30C C380 80C6 C680 80     	dc.b	nFs5, $0C, nFs5, nRst, nRst, nA5, nA5, nRst, nRst
000B0725 F800 00                    	smpsCall            Mus91_Credits_Call08
000B0728 C624 2418                  	dc.b	nA5, $24, $24, $18
000B072C E080                       	smpsPan             panLeft, $00
000B072E F800 00                    	smpsCall            Mus91_Credits_Call03
000B0731 E6F2                       	smpsAlterVol        $F2
000B0733                            
000B0733                            Mus91_Credits_Loop09:
000B0733 C501 E7C4 1B80 08C3 01E7+  	dc.b	nAb5, $01, smpsNoAttack, nG5, $1B, nRst, $08, nFs5, $01, smpsNoAttack, nF5, $1B
000B073F 8008                       	dc.b	nRst, $08
000B0741 F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop09
000B0746 C501 E7C4 0B80 0CC3 01E7+  	dc.b	nAb5, $01, smpsNoAttack, nG5, $0B, nRst, $0C, nFs5, $01, smpsNoAttack, nF5, $0B
000B0752 800C C701 E7C6 1B80 08C5+  	dc.b	nRst, $0C, nBb5, $01, smpsNoAttack, nA5, $1B, nRst, $08, nAb5, $01, smpsNoAttack
000B075E C424 E718 E75A 8006        	dc.b	nG5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000B0766 E918                       	smpsAlterPitch      $18
000B0768 8060 8080 5A               	dc.b	nRst, $60, nRst, nRst, $5A
000B076D E0C0                       	smpsPan             panCenter, $00
000B0771 E9F4                       	smpsAlterPitch      $F4
000B0773 E605                       	smpsAlterVol        $05
000B0775                            
000B0775                            Mus91_Credits_Loop0A:
000B0775 D409 8003 D480 D506 80D4+  	dc.b	nB6, $09, nRst, $03, nB6, nRst, nC7, $06, nRst, nB6, $0C, nRst
000B0781 06                         	dc.b	$06
000B0782 F700 02FF EF               	smpsLoop            $00, $02, Mus91_Credits_Loop0A
000B0787 8012 D503 800F D503 801B+  	dc.b	nRst, $12, nC7, $03, nRst, $0F, nC7, $03, nRst, $1B, nC7, $03
000B0793 800F D503 8009 CE09 8003+  	dc.b	nRst, $0F, nC7, $03, nRst, $09, nF6, $09, nRst, $03, nF6, nRst
000B079F D206 80CE 0C80 06D1 0980+  	dc.b	nA6, $06, nRst, nF6, $0C, nRst, $06, nAb6, $09, nRst, $03, nAb6
000B07AB 80D4 0680 D10C 8006 8080+  	dc.b	nRst, nB6, $06, nRst, nAb6, $0C, nRst, $06, nRst, nRst, $0C, nC7
000B07B7 0380 0FD5 0380 0FD5 0380+  	dc.b	$03, nRst, $0F, nC7, $03, nRst, $0F, nC7, $03, nRst, $2D
000B07C2 E9F4                       	smpsAlterPitch      $F4
000B07C4 E603                       	smpsAlterVol        $03
000B07C8 E080                       	smpsPan             panLeft, $00
000B07CA F800 00                    	smpsCall            Mus91_Credits_Call09
000B07CF E6F6                       	smpsAlterVol        $F6
000B07D1 E918                       	smpsAlterPitch      $18
000B07D3 F800 00                    	smpsCall            Mus91_Credits_Call0A
000B07D6 800C                       	dc.b	nRst, $0C
000B07D8 E1EC                       	smpsAlterNote       $EC
000B07DA C602                       	dc.b	nA5, $02
000B07DC E100                       	smpsAlterNote       $00
000B07DE E70A 8003 C680 80C6 8009   	dc.b	smpsNoAttack, $0A, nRst, $03, nA5, nRst, nRst, nA5, nRst, $09
000B07E8 F800 00                    	smpsCall            Mus91_Credits_Call0A
000B07EB E1EC                       	smpsAlterNote       $EC
000B07ED C602                       	dc.b	nA5, $02
000B07EF E100                       	smpsAlterNote       $00
000B07F1 0A80 06                    	dc.b	$0A, nRst, $06
000B07F4 F018 0107 04               	smpsModSet          $18, $01, $07, $04
000B07F9 E1E2                       	smpsAlterNote       $E2
000B07FB C602 E7                    	dc.b	nA5, $02, smpsNoAttack
000B07FE E100                       	smpsAlterNote       $00
000B0800 1C                         	dc.b	$1C
000B0801 E100                       	smpsAlterNote       $00
000B0803 E103                       	smpsAlterNote       $03
000B0805 F800 00                    	smpsCall            Mus91_Credits_Call06
000B0808 E100                       	smpsAlterNote       $00
000B080A E0C0                       	smpsPan             panCenter, $00
000B080E E6F5                       	smpsAlterVol        $F5
000B0810 8060                       	dc.b	nRst, $60
000B0812                            
000B0812                            Mus91_Credits_Loop0B:
000B0812 CA06 80CA 80C6 80C6 80C8+  	dc.b	nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nB5, $12, nB5
000B081E 1ECA 0680 CA80 C680 C680+  	dc.b	$1E, nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nD6, $12
000B082A CB1E                       	dc.b	nD6, $1E
000B082C F700 02FF E2               	smpsLoop            $00, $02, Mus91_Credits_Loop0B
000B0833 E103                       	smpsAlterNote       $03
000B0835 E608                       	smpsAlterVol        $08
000B0837 F800 00                    	smpsCall            Mus91_Credits_Call0B
000B083C E6F0                       	smpsAlterVol        $F0
000B083E F000 0106 04               	smpsModSet          $00, $01, $06, $04
000B0843 A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000B0847 F2                         	smpsStop
000B0848                            
000B0848                            Mus91_Credits_Call08:
000B0848 C824 2418 C624 2418 C424+  	dc.b	nB5, $24, $24, $18, nA5, $24, $24, $18, nG5, $24, $24, $18
000B0854 E3                         	smpsReturn
000B0855                            
000B0855                            Mus91_Credits_Call03:
000B0857 E9E8                       	smpsAlterPitch      $E8
000B0859 E60D                       	smpsAlterVol        $0D
000B085B                            
000B085B                            Mus91_Credits_Loop2D:
000B085B F800 00                    	smpsCall            Mus91_Credits_Call1B
000B085E BFBF                       	dc.b	nD5, nD5
000B0860 F700 02FF F7               	smpsLoop            $00, $02, Mus91_Credits_Loop2D
000B0865 F800 00                    	smpsCall            Mus91_Credits_Call1B
000B0868 B5B5 BDBD BABA B6B6 B3B3+  	dc.b	nE4, nE4, nC5, nC5, nA4, nA4, nF4, nF4, nD4, nD4, nB4, nB4
000B0874 E603                       	smpsAlterVol        $03
000B0876 E90C                       	smpsAlterPitch      $0C
000B087A D018 D2D4                  	dc.b	nG6, $18, nA6, nB6
000B087E E9F4                       	smpsAlterPitch      $F4
000B0882 E3                         	smpsReturn
000B0883                            
000B0883                            Mus91_Credits_Call1B:
000B0883 C10C C1BD BDBA BAB6 B6BF+  	dc.b	nE5, $0C, nE5, nC5, nC5, nA4, nA4, nF4, nF4, nD5, nD5, nB4
000B088F BCB8 B8                    	dc.b	nB4, nG4, nG4
000B0892 E3                         	smpsReturn
000B0893                            
000B0893                            Mus91_Credits_Call0A:
000B0893 800C                       	dc.b	nRst, $0C
000B0895 E1EC                       	smpsAlterNote       $EC
000B0897 C402                       	dc.b	nG5, $02
000B0899 E100                       	smpsAlterNote       $00
000B089B E706 8001 C403 8018 800C   	dc.b	smpsNoAttack, $06, nRst, $01, nG5, $03, nRst, $18, nRst, $0C
000B08A5 E1EC                       	smpsAlterNote       $EC
000B08A7 CA02                       	dc.b	nCs6, $02
000B08A9 E100                       	smpsAlterNote       $00
000B08AB E706 8001 CA03 8018 800C   	dc.b	smpsNoAttack, $06, nRst, $01, nCs6, $03, nRst, $18, nRst, $0C
000B08B5 E1EC                       	smpsAlterNote       $EC
000B08B7 C902                       	dc.b	nC6, $02
000B08B9 E100                       	smpsAlterNote       $00
000B08BB E706 8001 C903 8018        	dc.b	smpsNoAttack, $06, nRst, $01, nC6, $03, nRst, $18
000B08C3 E3                         	smpsReturn
000B08C4                            
000B08C4                            Mus91_Credits_Call06:
000B08C4 E608                       	smpsAlterVol        $08
000B08C8 8030 8030                  	dc.b	nRst, $30, nRst, $30
000B08CC E501                       	smpsChanTempoDiv    $01
000B08CE F800 00                    	smpsCall            Mus91_Credits_Call17
000B08D1 E502                       	smpsChanTempoDiv    $02
000B08D5 F001 0101 04               	smpsModSet          $01, $01, $01, $04
000B08DA CB02 8004 CB08 CB03 80CB+  	dc.b	nD6, $02, nRst, $04, nD6, $08, nD6, $03, nRst, nD6, nRst, nC6
000B08E6 80D2 80CE 8007 C702 8004+  	dc.b	nRst, nA6, nRst, nF6, nRst, $07, nBb5, $02, nRst, $04, nBb5, $08
000B08F2 C703 80C7 80C6 0380 13C6+  	dc.b	nBb5, $03, nRst, nBb5, nRst, nA5, $03, nRst, $13, nA5, $0E, nCs6
000B08FE 0CCD D60A D702             	dc.b	$0C, nE6, nCs7, $0A, nD7, $02
000B0904 E3                         	smpsReturn
000B0905                            
000B0905                            Mus91_Credits_Call17:
000B0905 AF01 E7AE 0480 07AF 01E7+  	dc.b	nBb3, $01, smpsNoAttack, nA3, $04, nRst, $07, nBb3, $01, smpsNoAttack, nA3, $04
000B0911 8007 B101 E7B0 0480 07B1+  	dc.b	nRst, $07, nC4, $01, smpsNoAttack, nB3, $04, nRst, $07, nC4, $01, smpsNoAttack
000B091D B004 8007 B201 E7B1 0480+  	dc.b	nB3, $04, nRst, $07, nCs4, $01, smpsNoAttack, nC4, $04, nRst, $07, nCs4
000B0929 01E7 B104 8007 B301 E7B2+  	dc.b	$01, smpsNoAttack, nC4, $04, nRst, $07, nD4, $01, smpsNoAttack, nCs4, $04, nRst
000B0935 07B3 01E7 B204 8003        	dc.b	$07, nD4, $01, smpsNoAttack, nCs4, $04, nRst, $03
000B093D E3                         	smpsReturn
000B093E                            
000B093E                            Mus91_Credits_Call0B:
000B093E 800C D0D4 D7DB 8006 DB0C+  	dc.b	nRst, $0C, nG6, nB6, nD7, nFs7, nRst, $06, nFs7, $0C, nG7, $06
000B094A DB0C DD54 800C DE80 DE80+  	dc.b	nFs7, $0C, nAb7, $54, nRst, $0C, nA7, nRst, nA7, nRst, $12, nAb7
000B0956 DE0C                       	dc.b	nA7, $0C
000B0958 E3                         	smpsReturn
000B0959                            
000B0959                            ; FM5 Data
000B0959                            Mus91_Credits_FM5:
000B095B 8060                       	dc.b	nRst, $60
000B095D E6F0                       	smpsAlterVol        $F0
000B095F F800 00                    	smpsCall            Mus91_Credits_Call02
000B0962 BF0C 0C80 18C3 0C0C 8018   	dc.b	nD5, $0C, $0C, nRst, $18, nFs5, $0C, $0C, nRst, $18
000B096C F800 00                    	smpsCall            Mus91_Credits_Call02
000B096F C324 2418                  	dc.b	nFs5, $24, $24, $18
000B0973 E040                       	smpsPan             panRight, $00
000B0975 F8FE DE                    	smpsCall            Mus91_Credits_Call03
000B0978 E6F2                       	smpsAlterVol        $F2
000B097A                            
000B097A                            Mus91_Credits_Loop07:
000B097A C201 E7C1 1B80 08C0 01E7+  	dc.b	nF5, $01, smpsNoAttack, nE5, $1B, nRst, $08, nEb5, $01, smpsNoAttack, nD5, $1B
000B0986 8008                       	dc.b	nRst, $08
000B0988 F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop07
000B098D C201 E7C1 0B80 0CC0 01E7+  	dc.b	nF5, $01, smpsNoAttack, nE5, $0B, nRst, $0C, nEb5, $01, smpsNoAttack, nD5, $0B
000B0999 800C C301 E7C2 1B80 08C2+  	dc.b	nRst, $0C, nFs5, $01, smpsNoAttack, nF5, $1B, nRst, $08, nF5, $01, smpsNoAttack
000B09A5 C124 E718 E75A 8006        	dc.b	nE5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000B09AD E918                       	smpsAlterPitch      $18
000B09AF E0C0                       	smpsPan             panCenter, $00
000B09B1 E603                       	smpsAlterVol        $03
000B09B3 E90C                       	smpsAlterPitch      $0C
000B09B7 804E B803 BABD 80BA 8051+  	dc.b	nRst, $4E, nG4, $03, nA4, nC5, nRst, nA4, nRst, $51, nA5, $03
000B09C3 C2BD 80C2 805D             	dc.b	nF5, nC5, nRst, nF5, nRst, $5D
000B09CB E9E8                       	smpsAlterPitch      $E8
000B09CD E602                       	smpsAlterVol        $02
000B09CF                            
000B09CF                            Mus91_Credits_Loop08:
000B09CF D009 8003 D080 D206 80D0+  	dc.b	nG6, $09, nRst, $03, nG6, nRst, nA6, $06, nRst, nG6, $0C, nRst
000B09DB 06                         	dc.b	$06
000B09DC F700 02FF EF               	smpsLoop            $00, $02, Mus91_Credits_Loop08
000B09E1 8012 D203 800F D203 801B+  	dc.b	nRst, $12, nA6, $03, nRst, $0F, nA6, $03, nRst, $1B, nA6, $03
000B09ED 800F D203 8009 CB09 8003+  	dc.b	nRst, $0F, nA6, $03, nRst, $09, nD6, $09, nRst, $03, nD6, nRst
000B09F9 CE06 80CB 0C80 06CD 0980+  	dc.b	nF6, $06, nRst, nD6, $0C, nRst, $06, nE6, $09, nRst, $03, nE6
000B0A05 80D1 0680 CD0C 8018 D203+  	dc.b	nRst, nAb6, $06, nRst, nE6, $0C, nRst, $18, nA6, $03, nRst, $0F
000B0A11 D203 800F D203 802D        	dc.b	nA6, $03, nRst, $0F, nA6, $03, nRst, $2D
000B0A1B E040                       	smpsPan             panRight, $00
000B0A1D E9F4                       	smpsAlterPitch      $F4
000B0A1F E603                       	smpsAlterVol        $03
000B0A21 F800 00                    	smpsCall            Mus91_Credits_Call04
000B0A26 E924                       	smpsAlterPitch      $24
000B0A28 E6F4                       	smpsAlterVol        $F4
000B0A2A F800 00                    	smpsCall            Mus91_Credits_Call05
000B0A2D CDCE D0                    	dc.b	nE6, nF6, nG6
000B0A30 F800 00                    	smpsCall            Mus91_Credits_Call05
000B0A33 D0CE CD                    	dc.b	nG6, nF6, nE6
000B0A36 E9F4                       	smpsAlterPitch      $F4
000B0A38 F8FE 8A                    	smpsCall            Mus91_Credits_Call06
000B0A3B E0C0                       	smpsPan             panCenter, $00
000B0A3F E103                       	smpsAlterNote       $03
000B0A41 E6F8                       	smpsAlterVol        $F8
000B0A43 8060                       	dc.b	nRst, $60
000B0A45 F8F8 45                    	smpsCall            Mus91_Credits_Call07
000B0A48 E600                       	smpsAlterVol        $00
000B0A4C 8060 800C CD06 80D4 CD06+  	dc.b	nRst, $60, nRst, $0C, nE6, $06, nRst, nB6, nE6, $06, nRst, $0C
000B0A58 CD06 80D4 CD06 8018        	dc.b	nE6, $06, nRst, nB6, nE6, $06, nRst, $18
000B0A60 E605                       	smpsAlterVol        $05
000B0A62 800C AE80 AE               	dc.b	nRst, $0C, nA3, nRst, nA3
000B0A67 F2                         	smpsStop
000B0A68                            
000B0A68                            Mus91_Credits_Call02:
000B0A68 C424 2418 C324 2418 C124+  	dc.b	nG5, $24, $24, $18, nFs5, $24, $24, $18, nE5, $24, $24, $18
000B0A74 E3                         	smpsReturn
000B0A75                            
000B0A75                            ; PSG1 Data
000B0A75                            Mus91_Credits_PSG1:
000B0A75 8060                       	dc.b	nRst, $60
000B0A77 F508                       	smpsPSGvoice        fTone_08
000B0A79 EC03                       	smpsPSGAlterVol     $03
000B0A7B E806                       	smpsNoteFill        $06
000B0A7D F800 00                    	smpsCall            Mus91_Credits_Call11
000B0A80 F501                       	smpsPSGvoice        fTone_01
000B0A82 E800                       	smpsNoteFill        $00
000B0A84 ECFD                       	smpsPSGAlterVol     $FD
000B0A86                            
000B0A86                            Mus91_Credits_Loop2A:
000B0A86 8018 C906 801E C90C 8018+  	dc.b	nRst, $18, nC6, $06, nRst, $1E, nC6, $0C, nRst, $18, nRst, $18
000B0A92 C806 801E C80C 8018        	dc.b	nB5, $06, nRst, $1E, nB5, $0C, nRst, $18
000B0A9A F700 03FF E8               	smpsLoop            $00, $03, Mus91_Credits_Loop2A
000B0A9F 8018 C606 801E C60C 8018+  	dc.b	nRst, $18, nA5, $06, nRst, $1E, nA5, $0C, nRst, $18, nRst, $18
000B0AAB C406 801E C40C 8018        	dc.b	nG5, $06, nRst, $1E, nG5, $0C, nRst, $18
000B0AB3 F505                       	smpsPSGvoice        fTone_05
000B0AB5 F00E 0101 03               	smpsModSet          $0E, $01, $01, $03
000B0ABA E810                       	smpsNoteFill        $10
000B0ABC C124 BFC1 BFC1 0C80 BF80+  	dc.b	nE5, $24, nD5, nE5, nD5, nE5, $0C, nRst, nD5, nRst, nF5, $24
000B0AC8 E800                       	smpsNoteFill        $00
000B0ACA C160 E73C                  	dc.b	nE5, $60, smpsNoAttack, $3C
000B0ACE F4                         	smpsModOff
000B0ACF F508                       	smpsPSGvoice        fTone_08 ; changed from 9 to 8 for cleveland rip
000B0AD1 EC01                       	smpsPSGAlterVol     $01
000B0AD3                            
000B0AD3                            Mus91_Credits_Loop2B:
000B0AD3 8006 CD0C CDCD CD06 80CD+  	dc.b	nRst, $06, nE6, $0C, nE6, nE6, nE6, $06, nRst, nE6, $0C, nE6
000B0ADF CD03 0906                  	dc.b	nE6, $03, $09, $06
000B0AE3 E905                       	smpsAlterPitch      $05
000B0AE5 F700 02FF EA               	smpsLoop            $00, $02, Mus91_Credits_Loop2B
000B0AEA E9F6                       	smpsAlterPitch      $F6
000B0AEC 8006 CD0C CDCD CD06 8030   	dc.b	nRst, $06, nE6, $0C, nE6, nE6, nE6, $06, nRst, $30
000B0AF6 F508                       	smpsPSGvoice        fTone_08
000B0AF8 EC01                       	smpsPSGAlterVol     $01
000B0AFA F800 00                    	smpsCall            Mus91_Credits_Call15
000B0AFD 8002 8030                  	dc.b	nRst, $02, nRst, $30
000B0B01 EC03                       	smpsPSGAlterVol     $03
000B0B03 E9F4                       	smpsAlterPitch      $F4
000B0B05 F505                       	smpsPSGvoice        fTone_05
000B0B07 F800 00                    	smpsCall            Mus91_Credits_Call09
000B0B0A E90C                       	smpsAlterPitch      $0C
000B0B0C ECFC                       	smpsPSGAlterVol     $FC
000B0B0E F500                       	smpsPSGvoice        $00
000B0B10 F800 00                    	smpsCall            Mus91_Credits_Call16
000B0B13 800C C280 03C2 8080 C280+  	dc.b	nRst, $0C, nF5, nRst, $03, nF5, nRst, nRst, nF5, nRst, $09
000B0B1E F800 00                    	smpsCall            Mus91_Credits_Call16
000B0B21 C20C 8006 C21E             	dc.b	nF5, $0C, nRst, $06, nF5, $1E
000B0B27 F506                       	smpsPSGvoice        fTone_06
000B0B29 EC04                       	smpsPSGAlterVol     $04
000B0B2B 8030 8030                  	dc.b	nRst, $30, nRst, $30
000B0B2F E501                       	smpsChanTempoDiv    $01
000B0B31 F8FD D2                    	smpsCall            Mus91_Credits_Call17
000B0B34 E502                       	smpsChanTempoDiv    $02
000B0B36 CB02 8004 CB08 CB03 80CB+  	dc.b	nD6, $02, nRst, $04, nD6, $08, nD6, $03, nRst, nD6, nRst, nC6
000B0B42 80D2 80CE 8007 C702 8004+  	dc.b	nRst, nA6, nRst, nF6, nRst, $07, nBb5, $02, nRst, $04, nBb5, $08
000B0B4E C703 80C7 80C6 0380 13C6+  	dc.b	nBb5, $03, nRst, nBb5, nRst, nA5, $03, nRst, $13, nA5, $0E, nCs6
000B0B5A 0CCD D60A D702 8060 8080+  	dc.b	$0C, nE6, nCs7, $0A, nD7, $02, nRst, $60, nRst, nRst, nRst, nRst
000B0B66 ECFF                       	smpsPSGAlterVol     $FF
000B0B68 800C C812 8006 C880 C612+  	dc.b	nRst, $0C, nB5, $12, nRst, $06, nB5, nRst, nA5, $12, nB5, nA5
000B0B74 0CC1 18C5 C8CB 800C CA80+  	dc.b	$0C, nE5, $18, nAb5, nB5, nD6, nRst, $0C, nCs6, nRst, nCs6, $12
000B0B80 C9CA 06                    	dc.b	nC6, nCs6, $06
000B0B83 F2                         	smpsStop
000B0B84                            
000B0B84                            Mus91_Credits_Call16:
000B0B84 800C C107 8002 C103 8018+  	dc.b	nRst, $0C, nE5, $07, nRst, $02, nE5, $03, nRst, $18, nRst, $0C
000B0B90 C707 8002 C703 8018 800C+  	dc.b	nBb5, $07, nRst, $02, nBb5, $03, nRst, $18, nRst, $0C, nA5, $07
000B0B9C 8002 C603 8018             	dc.b	nRst, $02, nA5, $03, nRst, $18
000B0BA2 E3                         	smpsReturn
000B0BA3                            
000B0BA3                            ; PSG2 Data
000B0BA3                            Mus91_Credits_PSG2:
000B0BA3 8060                       	dc.b	nRst, $60
000B0BA5 F700 08FF FA               	smpsLoop            $00, $08, Mus91_Credits_PSG2
000B0BAA 8002                       	dc.b	nRst, $02
000B0BAC F8FB 53                    	smpsCall            Mus91_Credits_Call14
000B0BAF ECFE                       	smpsPSGAlterVol     $FE
000B0BB1 F501                       	smpsPSGvoice        fTone_01
000B0BB3 8016 CD06 801E CD0C 8018+  	dc.b	nRst, $16, nE6, $06, nRst, $1E, nE6, $0C, nRst, $18, nRst, $18
000B0BBF CB06 801E CB0C 8018        	dc.b	nD6, $06, nRst, $1E, nD6, $0C, nRst, $18
000B0BC7                            Mus91_Credits_Loop24:
000B0BC7 8018 CD06 801E CD0C 8018+  	dc.b	nRst, $18, nE6, $06, nRst, $1E, nE6, $0C, nRst, $18, nRst, $18
000B0BD3 CB06 801E CB0C 8018        	dc.b	nD6, $06, nRst, $1E, nD6, $0C, nRst, $18
000B0BDB F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop24
000B0BE0 8018 C906 801E C90C 8018+  	dc.b	nRst, $18, nC6, $06, nRst, $1E, nC6, $0C, nRst, $18, nRst, $18
000B0BEC C806 801E C80C 8018        	dc.b	nB5, $06, nRst, $1E, nB5, $0C, nRst, $18
000B0BF4 E806                       	smpsNoteFill        $06
000B0BF6 F506                       	smpsPSGvoice        fTone_06
000B0BF8                            
000B0BF8                            Mus91_Credits_Loop25:
000B0BF8 D50C D4D2 D0               	dc.b	nC7, $0C, nB6, nA6, nG6
000B0BFD F700 08FF F7               	smpsLoop            $00, $08, Mus91_Credits_Loop25
000B0C02 E800                       	smpsNoteFill        $00
000B0C04 F508                       	smpsPSGvoice        fTone_08 ; changed from 9 to 8 for cleveland rip
000B0C06 EC01                       	smpsPSGAlterVol     $01
000B0C08                            
000B0C08                            Mus91_Credits_Loop26:
000B0C08 8006 D00C D0D0 D006 80D0+  	dc.b	nRst, $06, nG6, $0C, nG6, nG6, nG6, $06, nRst, nG6, $0C, nG6
000B0C14 D003 0906                  	dc.b	nG6, $03, $09, $06
000B0C18 E905                       	smpsAlterPitch      $05
000B0C1A F700 02FF EA               	smpsLoop            $00, $02, Mus91_Credits_Loop26
000B0C1F E9F6                       	smpsAlterPitch      $F6
000B0C21 8006 D00C D0D0 D006 8030+  	dc.b	nRst, $06, nG6, $0C, nG6, nG6, nG6, $06, nRst, $30, nRst, $02
000B0C2D E101                       	smpsAlterNote       $01
000B0C2F EC03                       	smpsPSGAlterVol     $03
000B0C31 F800 00                    	smpsCall            Mus91_Credits_Call15
000B0C34 E100                       	smpsAlterNote       $00
000B0C36 8030                       	dc.b	nRst, $30
000B0C38 EC01                       	smpsPSGAlterVol     $01
000B0C3A E9F4                       	smpsAlterPitch      $F4
000B0C3C F505                       	smpsPSGvoice        fTone_05
000B0C3E F800 00                    	smpsCall            Mus91_Credits_Call04
000B0C41 E90C                       	smpsAlterPitch      $0C
000B0C43 ECFD                       	smpsPSGAlterVol     $FD
000B0C45 E803                       	smpsNoteFill        $03
000B0C47                            
000B0C47                            Mus91_Credits_Loop27:
000B0C47 D503 D5DC D5DA D5D9 D5     	dc.b	nC7, $03, nC7, nG7, nC7, nF7, nC7, nE7, nC7
000B0C50 F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Loop27
000B0C55                            
000B0C55                            Mus91_Credits_Loop28:
000B0C55 D3D3 DAD3 D8D3 D6D3        	dc.b	nBb6, nBb6, nF7, nBb6, nEb7, nBb6, nCs7, nBb6
000B0C5D F700 02FF F4               	smpsLoop            $00, $02, Mus91_Credits_Loop28
000B0C62                            
000B0C62                            Mus91_Credits_Loop29:
000B0C62 D2D2 D9D2 D7D2 D5D2        	dc.b	nA6, nA6, nE7, nA6, nD7, nA6, nC7, nA6
000B0C6A F700 04FF F4               	smpsLoop            $00, $04, Mus91_Credits_Loop29
000B0C6F F701 02FF D4               	smpsLoop            $01, $02, Mus91_Credits_Loop27
000B0C74 8060 8080 8080 80          	dc.b	nRst, $60, nRst, nRst, nRst, nRst, nRst
000B0C7B                            ;	; These rests are unnecessary, and cause the following notes to play way too late.
000B0C7B                            ;	; Delete these three notes to fix this.
000B0C7B                            ;	dc.b	nRst, nRst, nRst
000B0C7B                            ;	; This erroneous FM-only command causes the following notes to be inaudible.
000B0C7B                            ;	smpsAlterVol        $0C
000B0C7B                            ; there we go i fixed it - coni
000B0C7B E102                       	smpsAlterNote       $02
000B0C7D EC02                       	smpsPSGAlterVol     $02
000B0C7F 800C CD06 80D4 CD06 800C+  	dc.b	nRst, $0C, nE6, $06, nRst, nB6, nE6, $06, nRst, $0C, nE6, $06
000B0C8B 80D4 CD                    	dc.b	nRst, nB6, nE6
000B0C8E F2                         	smpsStop
000B0C8F                            
000B0C8F                            ; PSG3 Data
000B0C8F                            Mus91_Credits_PSG3:
000B0C8F F3E7                       	smpsPSGform         $E7
000B0C91 E804                       	smpsNoteFill        $04
000B0C93                            
000B0C93                            Mus91_Credits_Loop18:
000B0C93 000C                       	dc.b	nMaxPSG, $0C
000B0C95 F700 48FF FA               	smpsLoop            $00, $48, Mus91_Credits_Loop18
000B0C9A E806                       	smpsNoteFill        $06
000B0C9C                            
000B0C9C                            Mus91_Credits_Loop19:
000B0C9C 0C                         	dc.b	$0C
000B0C9D F700 60FF FB               	smpsLoop            $00, $60, Mus91_Credits_Loop19
000B0CA2 ECFF                       	smpsPSGAlterVol     $FF
000B0CA4 F800 00                    	smpsCall            Mus91_Credits_Call13
000B0CA7 E80E                       	smpsNoteFill        $0E
000B0CA9 0C                         	dc.b	$0C
000B0CAA E803                       	smpsNoteFill        $03
000B0CAC 0606 0303 0603 0306        	dc.b	$06, $06, $03, $03, $06, $03, $03, $06
000B0CB4                            
000B0CB4                            Mus91_Credits_Loop1A:
000B0CB4 F800 00                    	smpsCall            Mus91_Credits_Call13
000B0CB7 F700 04FF F9               	smpsLoop            $00, $04, Mus91_Credits_Loop1A
000B0CBC F509                       	smpsPSGvoice        fTone_09
000B0CBE EC01                       	smpsPSGAlterVol     $01
000B0CC0 E90B                       	smpsAlterPitch      $0B
000B0CC2                            
000B0CC2                            Mus91_Credits_Loop1B:
000B0CC2 AE06 AEB5 B5B3 B3B5 B5     	dc.b	nA3, $06, nA3, nE4, nE4, nD4, nD4, nE4, nE4
000B0CCB F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Loop1B
000B0CD0                            
000B0CD0                            Mus91_Credits_Loop1C:
000B0CD0 B3B3 BABA B6B6 BABA        	dc.b	nD4, nD4, nA4, nA4, nF4, nF4, nA4, nA4
000B0CD8 F700 02FF F4               	smpsLoop            $00, $02, Mus91_Credits_Loop1C
000B0CDD B0B0 B6B6 B3B3 B6B6 B5B5+  	dc.b	nB3, nB3, nF4, nF4, nD4, nD4, nF4, nF4, nE4, nE4, nB4, nB4
000B0CE9 B9B9 BCBC AEAE B5B5 B1B1+  	dc.b	nAb4, nAb4, nB4, nB4, nA3, nA3, nE4, nE4, nC4, nC4, nE4, nE4
000B0CF5 AE06 801E                  	dc.b	nA3, $06, nRst, $1E
000B0CF9 E802                       	smpsNoteFill        $02
000B0CFB E9F5                       	smpsAlterPitch      $F5
000B0CFD                            
000B0CFD                            Mus91_Credits_Loop1D:
000B0CFD F504                       	smpsPSGvoice        fTone_04
000B0CFF 0003 03                    	dc.b	nMaxPSG, $03, $03
000B0D02 EC02                       	smpsPSGAlterVol     $02
000B0D04 F508                       	smpsPSGvoice        fTone_08
000B0D06 E808                       	smpsNoteFill        $08
000B0D08 06                         	dc.b	$06
000B0D09 E803                       	smpsNoteFill        $03
000B0D0B ECFE                       	smpsPSGAlterVol     $FE
000B0D0D F700 1EFF EC               	smpsLoop            $00, $1E, Mus91_Credits_Loop1D
000B0D12 8024                       	dc.b	nRst, $24
000B0D14                            
000B0D14                            Mus91_Credits_Loop1E:
000B0D14 F504                       	smpsPSGvoice        fTone_04
000B0D16 0303                       	dc.b	$03, $03
000B0D18 EC02                       	smpsPSGAlterVol     $02
000B0D1A F508                       	smpsPSGvoice        fTone_08
000B0D1C E808                       	smpsNoteFill        $08
000B0D1E 06                         	dc.b	$06
000B0D1F E803                       	smpsNoteFill        $03
000B0D21 ECFE                       	smpsPSGAlterVol     $FE
000B0D23 F700 20FF ED               	smpsLoop            $00, $20, Mus91_Credits_Loop1E
000B0D28 8030                       	dc.b	nRst, $30
000B0D2A E801                       	smpsNoteFill        $01
000B0D2C F504                       	smpsPSGvoice        fTone_04
000B0D2E EC03                       	smpsPSGAlterVol     $03
000B0D30                            
000B0D30                            Mus91_Credits_Loop1F:
000B0D30 0002 8000                  	dc.b	nMaxPSG, $02, nRst, nMaxPSG
000B0D34 F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop1F
000B0D39                            
000B0D39                            Mus91_Credits_Loop20:
000B0D39 8004 0002                  	dc.b	nRst, $04, nMaxPSG, $02
000B0D3D F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop20
000B0D42 ECFF                       	smpsPSGAlterVol     $FF
000B0D44                            
000B0D44                            Mus91_Credits_Loop21:
000B0D44 0002 8000                  	dc.b	nMaxPSG, $02, nRst, nMaxPSG
000B0D48 F700 18FF F8               	smpsLoop            $00, $18, Mus91_Credits_Loop21
000B0D4D ECFE                       	smpsPSGAlterVol     $FE
000B0D4F                            
000B0D4F                            Mus91_Credits_Loop22:
000B0D4F 0004 8000                  	dc.b	nMaxPSG, $04, nRst, nMaxPSG
000B0D53 F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop22
000B0D58                            
000B0D58                            Mus91_Credits_Loop23:
000B0D58 E803                       	smpsNoteFill        $03
000B0D5A 0C                         	dc.b	$0C
000B0D5B E80C                       	smpsNoteFill        $0C
000B0D5D 0C                         	dc.b	$0C
000B0D5E E803                       	smpsNoteFill        $03
000B0D60 0C                         	dc.b	$0C
000B0D61 E80C                       	smpsNoteFill        $0C
000B0D63 0C                         	dc.b	$0C
000B0D64 F700 0DFF F0               	smpsLoop            $00, $0D, Mus91_Credits_Loop23
000B0D69 E803                       	smpsNoteFill        $03
000B0D6B 06                         	dc.b	$06
000B0D6C E80E                       	smpsNoteFill        $0E
000B0D6E 12                         	dc.b	$12
000B0D6F E803                       	smpsNoteFill        $03
000B0D71 0C                         	dc.b	$0C
000B0D72 E80F                       	smpsNoteFill        $0F
000B0D74 0C                         	dc.b	$0C
000B0D75 F2                         	smpsStop
000B0D76                            
000B0D76                            ; DAC Data
000B0D76                            Mus91_Credits_DAC:
000B0D76 8206 8282 8282 0C06 0C06+  	dc.b	dSnare, $06, dSnare, dSnare, dSnare, dSnare, $0C, $06, $0C, $06, $0C, $0C
000B0D82 0C                         	dc.b	$0C
000B0D83 F800 00                    	smpsCall            Mus91_Credits_Call00
000B0D86 8118 820C 8281 1882 0C82   	dc.b	dKick, $18, dSnare, $0C, dSnare, dKick, $18, dSnare, $0C, dSnare
000B0D90 F800 00                    	smpsCall            Mus91_Credits_Call00
000B0D93 810C 8282 8282 8282 82     	dc.b	dKick, $0C, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare
000B0D9C                            
000B0D9C                            Mus91_Credits_Loop00:
000B0D9C 8118 820C 8118 0C82 18     	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, $18
000B0DA5 F700 07FF F3               	smpsLoop            $00, $07, Mus91_Credits_Loop00
000B0DAA 8118 820C 8118 820C 0C0C   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, $0C, $0C
000B0DB4                            
000B0DB4                            Mus91_Credits_Loop01:
000B0DB4 8118 820C 8118 0C82 18     	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, $18
000B0DBD F700 03FF F3               	smpsLoop            $00, $03, Mus91_Credits_Loop01
000B0DC2 8118 820C 8118 820C 8282   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, dSnare, dSnare
000B0DCC EB02                       	smpsSetTempoDiv     $02
000B0DCE                            
000B0DCE                            Mus91_Credits_Loop02:
000B0DCE 8112 8106 810C 82          	dc.b	dKick, $12, dKick, $06, dKick, $0C, dSnare
000B0DD5 F700 05FF F5               	smpsLoop            $00, $05, Mus91_Credits_Loop02
000B0DDA 8112 8106 8106 8282 82     	dc.b	dKick, $12, dKick, $06, dKick, $06, dSnare, dSnare, dSnare
000B0DE3                            
000B0DE3                            Mus91_Credits_Loop03:
000B0DE3 810C                       	dc.b	dKick, $0C
000B0DE5 F700 18FF FA               	smpsLoop            $00, $18, Mus91_Credits_Loop03
000B0DEA 810C 8181 8106 8102 8182+  	dc.b	dKick, $0C, dKick, dKick, dKick, $06, dKick, $02, dKick, dSnare, dSnare, $0C
000B0DF6 8024                       	dc.b	nRst, $24
000B0DF8                            
000B0DF8                            Mus91_Credits_Loop04:
000B0DF8 810C 8181 81               	dc.b	dKick, $0C, dKick, dKick, dKick
000B0DFD F700 07FF F7               	smpsLoop            $00, $07, Mus91_Credits_Loop04
000B0E02 810C 8182 0382 8282 8282+  	dc.b	dKick, $0C, dKick, dSnare, $03, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare
000B0E0E F800 00                    	smpsCall            Mus91_Credits_Call01
000B0E11 8802 8101 8905 8201 8805+  	dc.b	dHiTimpani, $02, dKick, $01, dMidTimpani, $05, dSnare, $01, dHiTimpani, $05, dMidTimpani, $06
000B0E1D F800 00                    	smpsCall            Mus91_Credits_Call01
000B0E20 8902 8201 8805 8201 8905+  	dc.b	dMidTimpani, $02, dSnare, $01, dHiTimpani, $05, dSnare, $01, dMidTimpani, $05, dSnare, $01
000B0E2C 8802 8203 8203 8281 8182+  	dc.b	dHiTimpani, $02, dSnare, $03, dSnare, $03, dSnare, dKick, dKick, dSnare, dSnare, dKick
000B0E38 8181 8209 8206 0303 8109+  	dc.b	dKick, dKick, dSnare, $09, dSnare, $06, $03, $03, dKick, $09, $03, dSnare
000B0E44 0981 0606 0382 0603 0382+  	dc.b	$09, dKick, $06, $06, $03, dSnare, $06, $03, $03, dSnare, $06, dSnare
000B0E50 8282 8282 8204 0204 8102   	dc.b	dSnare, dSnare, dSnare, dSnare, dSnare, $04, $02, $04, dKick, $02
000B0E5A                            
000B0E5A                            Mus91_Credits_Loop05:
000B0E5A 8004 8108 8206 8181 0C82+  	dc.b	nRst, $04, dKick, $08, dSnare, $06, dKick, dKick, $0C, dSnare, $0A, dKick
000B0E66 02                         	dc.b	$02
000B0E67 F700 03FF EF               	smpsLoop            $00, $03, Mus91_Credits_Loop05
000B0E6C EB01                       	smpsSetTempoDiv     $01
000B0E6E 8018 8214 8104 820C 8282+  	dc.b	nRst, $18, dSnare, $14, dKick, $04, dSnare, $0C, dSnare, dSnare, $0C, $08
000B0E7A 8104                       	dc.b	dKick, $04
000B0E7C                            
000B0E7C                            Mus91_Credits_Loop06:
000B0E7C 810C 8281 82               	dc.b	dKick, $0C, dSnare, dKick, dSnare
000B0E81 F701 03FF F7               	smpsLoop            $01, $03, Mus91_Credits_Loop06
000B0E86 810C 8281 0680 0282 8282+  	dc.b	dKick, $0C, dSnare, dKick, $06, nRst, $02, dSnare, dSnare, dSnare, $09, dSnare
000B0E92 03                         	dc.b	$03
000B0E93 F700 03FF E5               	smpsLoop            $00, $03, Mus91_Credits_Loop06
000B0E98 810C 8281 8281 0682 1282+  	dc.b	dKick, $0C, dSnare, dKick, dSnare, dKick, $06, dSnare, $12, dSnare, $0C, dKick
000B0EA4 F2                         	smpsStop
000B0EA5                            
000B0EA5                            Mus91_Credits_Call00:
000B0EA5 8118 820C 8118 810C 8281   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dKick, $0C, dSnare, dKick
000B0EAF F700 03FF F2               	smpsLoop            $00, $03, Mus91_Credits_Call00
000B0EB4 E3                         	smpsReturn
000B0EB5                            
000B0EB5                            Mus91_Credits_Call01:
000B0EB5 810C 8209 8106 0381 0188+  	dc.b	dKick, $0C, dSnare, $09, dKick, $06, $03, dKick, $01, dHiTimpani, $02, dMidTimpani
000B0EC1 0382 0188 0B81 0C82 0981+  	dc.b	$03, dSnare, $01, dHiTimpani, $0B, dKick, $0C, dSnare, $09, dKick, $06, $03
000B0ECD 8101 8802 8903 8201 880B+  	dc.b	dKick, $01, dHiTimpani, $02, dMidTimpani, $03, dSnare, $01, dHiTimpani, $0B, dKick, $0C
000B0ED9 8209 8106 0381 0188 0289+  	dc.b	dSnare, $09, dKick, $06, $03, dKick, $01, dHiTimpani, $02, dMidTimpani, $03, dSnare
000B0EE5 0188 0B81 0C82 0981 0682+  	dc.b	$01, dHiTimpani, $0B, dKick, $0C, dSnare, $09, dKick, $06, dSnare, $01
000B0EF0 E3                         	smpsReturn
000B0EF1                            
000B0EF1                            Mus91_Credits_Call11:
000B0EF1 F800 00                    	smpsCall            Mus91_Credits_Call1A
000B0EF4 C3BF C1C3 BF               	dc.b	nFs5, nD5, nE5, nFs5, nD5
000B0EF9 F800 00                    	smpsCall            Mus91_Credits_Call1A
000B0EFC C8C6 C8C9 CB               	dc.b	nB5, nA5, nB5, nC6, nD6
000B0F01 E3                         	smpsReturn
000B0F02                            
000B0F02                            Mus91_Credits_Call1A:
000B0F02 C80C C4C8 CBC9 C8C6 C8C6+  	dc.b	nB5, $0C, nG5, nB5, nD6, nC6, nB5, nA5, nB5, nA5, nFs5, nA5
000B0F0E C9C8 C6C4 C6C4 C1C4 C8C6+  	dc.b	nC6, nB5, nA5, nG5, nA5, nG5, nE5, nG5, nB5, nA5, nG5, nFs5
000B0F1A C4C3 C4C6                  	dc.b	nG5, nFs5, nG5, nA5
000B0F1E E3                         	smpsReturn
000B0F1F                            
000B0F1F                            ; Unused alternate version of Mus91_Credits_Call0B
000B0F1F                            ; Mus91_Credits_CallUnk:
000B0F1F 800C D0D4 D7DB 0C80 06DB+  	dc.b	nRst, $0C, nG6, nB6, nD7, nFs7, $0C, nRst, $06, nFs7, $0C, nG7
000B0F2B 06DB 0CD9 6080 0CD0 D4D7+  	dc.b	$06, nFs7, $0C, nE7, $60, nRst, $0C, nG6, nB6, nD7, nFs7, $0C
000B0F37 8006 DB0C DC06 DB0C DD5D+  	dc.b	nRst, $06, nFs7, $0C, nG7, $06, nFs7, $0C, nAb7, $5D, nRst, $03
000B0F43 DE12 8006 DE12 8006 8006+  	dc.b	nA7, $12, nRst, $06, nA7, $12, nRst, $06, nRst, $06, nAb7, $12
000B0F4F DE06 8012                  	dc.b	nA7, $06, nRst, $12
000B0F53 E3                         	smpsReturn
000B0F54                            
000B0F54                            Mus91_Credits_Call13:
000B0F54 E80E                       	smpsNoteFill        $0E
000B0F56 0C                         	dc.b	$0C
000B0F57 E803                       	smpsNoteFill        $03
000B0F59 0606 0606 0606             	dc.b	$06, $06, $06, $06, $06, $06
000B0F5F E3                         	smpsReturn
000B0F60                            
000B0F60                            Mus91_Credits_Call0C:
000B0F60 D409 8003 D406 D2          	dc.b	nB6, $09, nRst, $03, nB6, $06, nA6
000B0F67 F700 03FF F5               	smpsLoop            $00, $03, Mus91_Credits_Call0C
000B0F6C D4D2 CDC9 D00C D206 E7CE+  	dc.b	nB6, nA6, nE6, nC6, nG6, $0C, nA6, $06, smpsNoAttack, nF6, $4D, nRst
000B0F78 01D2 24D4 0CD1 24D4 0980+  	dc.b	$01, nA6, $24, nB6, $0C, nAb6, $24, nB6, $09, nRst, $03, nB6
000B0F84 12D2 1E                    	dc.b	$12, nA6, $1E
000B0F87 E3                         	smpsReturn
000B0F88                            
000B0F88                            Mus91_Credits_Call15:
000B0F88 8030 8080 DA03 D7D2 CED7+  	dc.b	nRst, $30, nRst, nRst, nF7, $03, nD7, nA6, nF6, nD7, nA6, nF6
000B0F94 CBD2 CECB C6CE CBC6 C233+  	dc.b	nD6, nA6, nF6, nD6, nA5, nF6, nD6, nA5, nF5, $33, nRst, $5E
000B0FA0 E3                         	smpsReturn
000B0FA1                            
000B0FA1                            Mus91_Credits_Call0D:
000B0FA1 CD2A CD03 CED0 09D2 D306+  	dc.b	nE6, $2A, nE6, $03, nF6, nG6, $09, nA6, nBb6, $06, nA6, $0C
000B0FAD D0CE 1ECE 06CD CE1E CB0C+  	dc.b	nG6, nF6, $1E, nF6, $06, nE6, nF6, $1E, nD6, $0C, nE6, nF6
000B0FB9 2ACB 03CD CE09 D0D1 06D0+  	dc.b	$2A, nD6, $03, nE6, nF6, $09, nG6, nAb6, $06, nG6, $0C, nF6
000B0FC5 E3                         	smpsReturn
000B0FC6                            
000B0FC6                            Mus91_Credits_Call04:
000B0FC6 F800 00                    	smpsCall            Mus91_Credits_Call19
000B0FC9 CB06 8003 CB80 06CA 1880+  	dc.b	nD6, $06, nRst, $03, nD6, nRst, $06, nCs6, $18, nRst, $06
000B0FD4                            
000B0FD4                            Mus91_Credits_Loop2C:
000B0FD4 CE06 8003 CD06 8003 CB80   	dc.b	nF6, $06, nRst, $03, nE6, $06, nRst, $03, nD6, nRst
000B0FDE F700 02FF F2               	smpsLoop            $00, $02, Mus91_Credits_Loop2C
000B0FE3 CE06 8003 CD06 8003 CB18+  	dc.b	nF6, $06, nRst, $03, nE6, $06, nRst, $03, nD6, $18, nRst, $06
000B0FEF E9FE                       	smpsAlterPitch      $FE
000B0FF1 F800 00                    	smpsCall            Mus91_Credits_Call19
000B0FF4 E903                       	smpsAlterPitch      $03
000B0FF6 F800 00                    	smpsCall            Mus91_Credits_Call19
000B0FF9 E9FF                       	smpsAlterPitch      $FF
000B0FFB 8006                       	dc.b	nRst, $06
000B0FFD E808                       	smpsNoteFill        $08
000B0FFF D009 0909 09               	dc.b	nG6, $09, $09, $09, $09
000B1004 E805                       	smpsNoteFill        $05
000B1006 0303                       	dc.b	$03, $03
000B1008 E800                       	smpsNoteFill        $00
000B100A 800C CE24                  	dc.b	nRst, $0C, nF6, $24
000B100E E3                         	smpsReturn
000B100F                            
000B100F                            Mus91_Credits_Call19:
000B100F CD06 8003 CD80 06CD 1880+  	dc.b	nE6, $06, nRst, $03, nE6, nRst, $06, nE6, $18, nRst, $06
000B101A E3                         	smpsReturn
000B101B                            
000B101B                            Mus91_Credits_Call09:
000B101B D006 8003 D080 06D0 1880+  	dc.b	nG6, $06, nRst, $03, nG6, nRst, $06, nG6, $18, nRst, $06, nF6
000B1027 0680 03CE 8006 CD18 8006+  	dc.b	$06, nRst, $03, nF6, nRst, $06, nE6, $18, nRst, $06, nA6, $06
000B1033 8003 D006 8003 CE80 D206+  	dc.b	nRst, $03, nG6, $06, nRst, $03, nF6, nRst, nA6, $06, nRst, $03
000B103F D006 8003 CE80 D206 8003+  	dc.b	nG6, $06, nRst, $03, nF6, nRst, nA6, $06, nRst, $03, nG6, $06
000B104B 8003 CE18 8006 CE06 8003+  	dc.b	nRst, $03, nF6, $18, nRst, $06, nF6, $06, nRst, $03, nF6, nRst
000B1057 06CE 1880 06D1 0680 03D1+  	dc.b	$06, nF6, $18, nRst, $06, nAb6, $06, nRst, $03, nAb6, nRst, $06
000B1063 D118 8006 8006             	dc.b	nAb6, $18, nRst, $06, nRst, $06
000B1069 E808                       	smpsNoteFill        $08
000B106B D409 0909 09               	dc.b	nB6, $09, $09, $09, $09
000B1070 E805                       	smpsNoteFill        $05
000B1072 0303                       	dc.b	$03, $03
000B1074 E800                       	smpsNoteFill        $00
000B1076 800C D224                  	dc.b	nRst, $0C, nA6, $24
000B107A E3                         	smpsReturn
000B107B                            
000B107B                            Mus91_Credits_Call0E:
000B107B F800 00                    	smpsCall            Mus91_Credits_Call18
000B107E D012 D206 D012 CD0C        	dc.b	nG6, $12, nA6, $06, nG6, $12, nE6, $0C
000B1086 F800 00                    	smpsCall            Mus91_Credits_Call18
000B1089 D030 8006                  	dc.b	nG6, $30, nRst, $06
000B108D E3                         	smpsReturn
000B108E                            
000B108E                            Mus91_Credits_Call18:
000B108E D01E CD06 C9D5 D30C D506+  	dc.b	nG6, $1E, nE6, $06, nC6, nC7, nBb6, $0C, nC7, $06, nBb6, $0C
000B109A D006 D3D2 24CD 06CE        	dc.b	nG6, $06, nBb6, nA6, $24, nE6, $06, nF6
000B10A2 E3                         	smpsReturn
000B10A3                            
000B10A3                            Mus91_Credits_Call05:
000B10A3 8003 CDC9 0606 C4C9 09CD+  	dc.b	nRst, $03, nE6, nC6, $06, $06, nG5, nC6, $09, nE6, $09, nRst
000B10AF 0680 03CE CA06 06C7 CA09+  	dc.b	$06, nRst, $03, nF6, nCs6, $06, $06, nBb5, nCs6, $09, nF6, $09
000B10BB 8006 8003 CDC9 0606 C6C9+  	dc.b	nRst, $06, nRst, $03, nE6, nC6, $06, $06, nA5, nC6, $09, nE6
000B10C7 0FCB 0C                    	dc.b	$0F, nD6, $0C
000B10CA E3                         	smpsReturn
000B10CB                            
000B10CB                            Mus91_Credits_Voices:
000B10CB                            ;	Voice $00
000B10CB                            ;	$20
000B10CB                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000B10CB                            ;	$07, $06, $06, $08, 	$20, $10, $10, $F8, 	$19, $37, $13, $80
000B10CB                            	smpsVcAlgorithm     $00
000B10CB                            	smpsVcFeedback      $04
000B10CB                            	smpsVcUnusedBits    $00
000B10CB                            	smpsVcDetune        $03, $03, $03, $03
000B10CB                            	smpsVcCoarseFreq    $01, $00, $05, $06
000B10CB                            	smpsVcRateScale     $02, $02, $03, $03
000B10CB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B10CB                            	smpsVcAmpMod        $00, $00, $00, $00
000B10CB                            	smpsVcDecayRate1    $06, $09, $06, $07
000B10CB                            	smpsVcDecayRate2    $08, $06, $06, $07
000B10CB                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B10CB                            	smpsVcReleaseRate   $08, $00, $00, $00
000B10CB 2036 3530 31DF DF9F 9F07+  	smpsVcTotalLevel    $00, $13, $37, $19
000B10E4                            
000B10E4                            ;	Voice $01
000B10E4                            ;	$2C
000B10E4                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000B10E4                            ;	$00, $00, $00, $00, 	$0F, $1F, $0F, $1F, 	$16, $80, $17, $80
000B10E4                            	smpsVcAlgorithm     $04
000B10E4                            	smpsVcFeedback      $05
000B10E4                            	smpsVcUnusedBits    $00
000B10E4                            	smpsVcDetune        $03, $03, $07, $07
000B10E4                            	smpsVcCoarseFreq    $04, $04, $08, $02
000B10E4                            	smpsVcRateScale     $00, $00, $00, $00
000B10E4                            	smpsVcAttackRate    $12, $1F, $12, $1F
000B10E4                            	smpsVcAmpMod        $00, $00, $00, $00
000B10E4                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000B10E4                            	smpsVcDecayRate2    $00, $00, $00, $00
000B10E4                            	smpsVcDecayLevel    $01, $00, $01, $00
000B10E4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B10E4 2C72 7834 341F 121F 1200+  	smpsVcTotalLevel    $00, $17, $00, $16
000B10FD                            
000B10FD                            ;	Voice $02
000B10FD                            ;	$2C
000B10FD                            ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $00, $00, $00
000B10FD                            ;	$00, $01, $00, $01, 	$0F, $3F, $0F, $3F, 	$16, $80, $17, $80
000B10FD                            	smpsVcAlgorithm     $04
000B10FD                            	smpsVcFeedback      $05
000B10FD                            	smpsVcUnusedBits    $00
000B10FD                            	smpsVcDetune        $03, $03, $07, $07
000B10FD                            	smpsVcCoarseFreq    $04, $04, $04, $04
000B10FD                            	smpsVcRateScale     $00, $00, $00, $00
000B10FD                            	smpsVcAttackRate    $1F, $1F, $12, $1F
000B10FD                            	smpsVcAmpMod        $00, $00, $00, $00
000B10FD                            	smpsVcDecayRate1    $00, $00, $00, $00
000B10FD                            	smpsVcDecayRate2    $01, $00, $01, $00
000B10FD                            	smpsVcDecayLevel    $03, $00, $03, $00
000B10FD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B10FD 2C74 7434 341F 121F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000B1116                            
000B1116                            ;	Voice $03
000B1116                            ;	$04
000B1116                            ;	$72, $42, $32, $32, 	$12, $12, $12, $12, 	$00, $08, $00, $08
000B1116                            ;	$00, $08, $00, $08, 	$0F, $1F, $0F, $1F, 	$23, $80, $23, $80
000B1116                            	smpsVcAlgorithm     $04
000B1116                            	smpsVcFeedback      $00
000B1116                            	smpsVcUnusedBits    $00
000B1116                            	smpsVcDetune        $03, $03, $04, $07
000B1116                            	smpsVcCoarseFreq    $02, $02, $02, $02
000B1116                            	smpsVcRateScale     $00, $00, $00, $00
000B1116                            	smpsVcAttackRate    $12, $12, $12, $12
000B1116                            	smpsVcAmpMod        $00, $00, $00, $00
000B1116                            	smpsVcDecayRate1    $08, $00, $08, $00
000B1116                            	smpsVcDecayRate2    $08, $00, $08, $00
000B1116                            	smpsVcDecayLevel    $01, $00, $01, $00
000B1116                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1116 0472 4232 3212 1212 1200+  	smpsVcTotalLevel    $00, $23, $00, $23
000B112F                            
000B112F                            ;	Voice $04
000B112F                            ;	$2C
000B112F                            ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $07, $00, $07
000B112F                            ;	$00, $07, $00, $07, 	$00, $38, $00, $38, 	$16, $80, $17, $80
000B112F                            	smpsVcAlgorithm     $04
000B112F                            	smpsVcFeedback      $05
000B112F                            	smpsVcUnusedBits    $00
000B112F                            	smpsVcDetune        $03, $03, $07, $07
000B112F                            	smpsVcCoarseFreq    $04, $04, $04, $04
000B112F                            	smpsVcRateScale     $00, $00, $00, $00
000B112F                            	smpsVcAttackRate    $1F, $1F, $12, $1F
000B112F                            	smpsVcAmpMod        $00, $00, $00, $00
000B112F                            	smpsVcDecayRate1    $07, $00, $07, $00
000B112F                            	smpsVcDecayRate2    $07, $00, $07, $00
000B112F                            	smpsVcDecayLevel    $03, $00, $03, $00
000B112F                            	smpsVcReleaseRate   $08, $00, $08, $00
000B112F 2C74 7434 341F 121F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000B1148                            
000B1148                            ;	Voice $05
000B1148                            ;	$31
000B1148                            ;	$34, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$0C, $07, $0C, $09
000B1148                            ;	$07, $07, $07, $08, 	$2F, $1F, $1F, $2F, 	$17, $32, $14, $80
000B1148                            	smpsVcAlgorithm     $01
000B1148                            	smpsVcFeedback      $06
000B1148                            	smpsVcUnusedBits    $00
000B1148                            	smpsVcDetune        $03, $03, $03, $03
000B1148                            	smpsVcCoarseFreq    $01, $00, $05, $04
000B1148                            	smpsVcRateScale     $02, $02, $03, $03
000B1148                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1148                            	smpsVcAmpMod        $00, $00, $00, $00
000B1148                            	smpsVcDecayRate1    $09, $0C, $07, $0C
000B1148                            	smpsVcDecayRate2    $08, $07, $07, $07
000B1148                            	smpsVcDecayLevel    $02, $01, $01, $02
000B1148                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1148 3134 3530 31DF DF9F 9F0C+  	smpsVcTotalLevel    $00, $14, $32, $17
000B1161                            
000B1161                            ;	Voice $06
000B1161                            ;	$18
000B1161                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000B1161                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$2C, $22, $14, $80
000B1161                            	smpsVcAlgorithm     $00
000B1161                            	smpsVcFeedback      $03
000B1161                            	smpsVcUnusedBits    $00
000B1161                            	smpsVcDetune        $03, $03, $03, $03
000B1161                            	smpsVcCoarseFreq    $01, $00, $00, $07
000B1161                            	smpsVcRateScale     $02, $00, $03, $02
000B1161                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000B1161                            	smpsVcAmpMod        $00, $00, $00, $00
000B1161                            	smpsVcDecayRate1    $01, $04, $06, $0D
000B1161                            	smpsVcDecayRate2    $05, $03, $0A, $08
000B1161                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000B1161                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1161 1837 3030 319E DC1C 9C0D+  	smpsVcTotalLevel    $00, $14, $22, $2C
000B117A                            
000B117A                            ;	Voice $07
000B117A                            ;	$3C
000B117A                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000B117A                            ;	$04, $00, $04, $00, 	$1F, $0F, $1F, $0F, 	$1A, $80, $16, $80
000B117A                            	smpsVcAlgorithm     $04
000B117A                            	smpsVcFeedback      $07
000B117A                            	smpsVcUnusedBits    $00
000B117A                            	smpsVcDetune        $03, $05, $05, $03
000B117A                            	smpsVcCoarseFreq    $00, $00, $02, $01
000B117A                            	smpsVcRateScale     $01, $01, $01, $01
000B117A                            	smpsVcAttackRate    $13, $12, $13, $12
000B117A                            	smpsVcAmpMod        $00, $00, $00, $00
000B117A                            	smpsVcDecayRate1    $00, $08, $00, $08
000B117A                            	smpsVcDecayRate2    $00, $04, $00, $04
000B117A                            	smpsVcDecayLevel    $00, $01, $00, $01
000B117A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B117A 3C31 5250 3052 5352 5308+  	smpsVcTotalLevel    $00, $16, $00, $1A
000B1193                            
000B1193                            ;	Voice $08
000B1193                            ;	$22
000B1193                            ;	$0A, $13, $05, $11, 	$03, $12, $12, $11, 	$00, $13, $13, $00
000B1193                            ;	$03, $02, $02, $01, 	$1F, $1F, $0F, $0F, 	$1E, $18, $26, $81
000B1193                            	smpsVcAlgorithm     $02
000B1193                            	smpsVcFeedback      $04
000B1193                            	smpsVcUnusedBits    $00
000B1193                            	smpsVcDetune        $01, $00, $01, $00
000B1193                            	smpsVcCoarseFreq    $01, $05, $03, $0A
000B1193                            	smpsVcRateScale     $00, $00, $00, $00
000B1193                            	smpsVcAttackRate    $11, $12, $12, $03
000B1193                            	smpsVcAmpMod        $00, $00, $00, $00
000B1193                            	smpsVcDecayRate1    $00, $13, $13, $00
000B1193                            	smpsVcDecayRate2    $01, $02, $02, $03
000B1193                            	smpsVcDecayLevel    $00, $00, $01, $01
000B1193                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1193 220A 1305 1103 1212 1100+  	smpsVcTotalLevel    $01, $26, $18, $1E
000B11AC                            
000B11AC                            ;	Voice $09
000B11AC                            ;	$3A
000B11AC                            ;	$61, $3C, $14, $31, 	$9C, $DB, $9C, $DA, 	$04, $09, $04, $03
000B11AC                            ;	$03, $01, $03, $00, 	$1F, $0F, $0F, $AF, 	$21, $47, $31, $80
000B11AC                            	smpsVcAlgorithm     $02
000B11AC                            	smpsVcFeedback      $07
000B11AC                            	smpsVcUnusedBits    $00
000B11AC                            	smpsVcDetune        $03, $01, $03, $06
000B11AC                            	smpsVcCoarseFreq    $01, $04, $0C, $01
000B11AC                            	smpsVcRateScale     $03, $02, $03, $02
000B11AC                            	smpsVcAttackRate    $1A, $1C, $1B, $1C
000B11AC                            	smpsVcAmpMod        $00, $00, $00, $00
000B11AC                            	smpsVcDecayRate1    $03, $04, $09, $04
000B11AC                            	smpsVcDecayRate2    $00, $03, $01, $03
000B11AC                            	smpsVcDecayLevel    $0A, $00, $00, $01
000B11AC                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B11AC 3A61 3C14 319C DB9C DA04+  	smpsVcTotalLevel    $00, $31, $47, $21
000B11C5                            
000B11C5                            ;	Voice $0A
000B11C5                            ;	$3A
000B11C5                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000B11C5                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000B11C5                            	smpsVcAlgorithm     $02
000B11C5                            	smpsVcFeedback      $07
000B11C5                            	smpsVcUnusedBits    $00
000B11C5                            	smpsVcDetune        $00, $00, $00, $00
000B11C5                            	smpsVcCoarseFreq    $01, $01, $07, $01
000B11C5                            	smpsVcRateScale     $01, $02, $02, $02
000B11C5                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000B11C5                            	smpsVcAmpMod        $00, $00, $00, $00
000B11C5                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000B11C5                            	smpsVcDecayRate2    $00, $00, $00, $00
000B11C5                            	smpsVcDecayLevel    $00, $01, $0F, $01
000B11C5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B11C5 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000B11DE                            
000B11DE                            ;	Voice $0B
000B11DE                            ;	$34
000B11DE                            ;	$33, $41, $7E, $74, 	$5B, $9F, $5F, $1F, 	$04, $07, $07, $08
000B11DE                            ;	$00, $00, $00, $00, 	$FF, $FF, $EF, $FF, 	$23, $90, $29, $97
000B11DE                            	smpsVcAlgorithm     $04
000B11DE                            	smpsVcFeedback      $06
000B11DE                            	smpsVcUnusedBits    $00
000B11DE                            	smpsVcDetune        $07, $07, $04, $03
000B11DE                            	smpsVcCoarseFreq    $04, $0E, $01, $03
000B11DE                            	smpsVcRateScale     $00, $01, $02, $01
000B11DE                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
000B11DE                            	smpsVcAmpMod        $00, $00, $00, $00
000B11DE                            	smpsVcDecayRate1    $08, $07, $07, $04
000B11DE                            	smpsVcDecayRate2    $00, $00, $00, $00
000B11DE                            	smpsVcDecayLevel    $0F, $0E, $0F, $0F
000B11DE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B11DE 3433 417E 745B 9F5F 1F04+  	smpsVcTotalLevel    $17, $29, $10, $23
000B11F7                            
000B11F7                            ;	Voice $0C
000B11F7                            ;	$04
000B11F7                            ;	$72, $42, $32, $32, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B11F7                            ;	$00, $00, $00, $00, 	$00, $07, $00, $07, 	$23, $80, $23, $80
000B11F7                            	smpsVcAlgorithm     $04
000B11F7                            	smpsVcFeedback      $00
000B11F7                            	smpsVcUnusedBits    $00
000B11F7                            	smpsVcDetune        $03, $03, $04, $07
000B11F7                            	smpsVcCoarseFreq    $02, $02, $02, $02
000B11F7                            	smpsVcRateScale     $00, $00, $00, $00
000B11F7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B11F7                            	smpsVcAmpMod        $00, $00, $00, $00
000B11F7                            	smpsVcDecayRate1    $00, $00, $00, $00
000B11F7                            	smpsVcDecayRate2    $00, $00, $00, $00
000B11F7                            	smpsVcDecayLevel    $00, $00, $00, $00
000B11F7                            	smpsVcReleaseRate   $07, $00, $07, $00
000B11F7 0472 4232 321F 1F1F 1F00+  	smpsVcTotalLevel    $00, $23, $00, $23
000B1210                            
000B1210                            ;	Voice $0D
000B1210                            ;	$3C
000B1210                            ;	$38, $74, $76, $33, 	$10, $10, $10, $10, 	$02, $07, $04, $07
000B1210                            ;	$03, $09, $03, $09, 	$2F, $2F, $2F, $2F, 	$1E, $80, $1E, $80
000B1210                            	smpsVcAlgorithm     $04
000B1210                            	smpsVcFeedback      $07
000B1210                            	smpsVcUnusedBits    $00
000B1210                            	smpsVcDetune        $03, $07, $07, $03
000B1210                            	smpsVcCoarseFreq    $03, $06, $04, $08
000B1210                            	smpsVcRateScale     $00, $00, $00, $00
000B1210                            	smpsVcAttackRate    $10, $10, $10, $10
000B1210                            	smpsVcAmpMod        $00, $00, $00, $00
000B1210                            	smpsVcDecayRate1    $07, $04, $07, $02
000B1210                            	smpsVcDecayRate2    $09, $03, $09, $03
000B1210                            	smpsVcDecayLevel    $02, $02, $02, $02
000B1210                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1210 3C38 7476 3310 1010 1002+  	smpsVcTotalLevel    $00, $1E, $00, $1E
000B1229                            
000B1229                            ;	Voice $0E
000B1229                            ;	$F4
000B1229                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
000B1229                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$15, $85, $02, $8A
000B1229                            	smpsVcAlgorithm     $04
000B1229                            	smpsVcFeedback      $06
000B1229                            	smpsVcUnusedBits    $03
000B1229                            	smpsVcDetune        $00, $00, $00, $00
000B1229                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
000B1229                            	smpsVcRateScale     $00, $00, $00, $00
000B1229                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1229                            	smpsVcAmpMod        $00, $00, $00, $00
000B1229                            	smpsVcDecayRate1    $0B, $0B, $00, $00
000B1229                            	smpsVcDecayRate2    $08, $05, $00, $00
000B1229                            	smpsVcDecayLevel    $0F, $0F, $00, $00
000B1229                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1229 F406 040F 0E1F 1F1F 1F00+  	smpsVcTotalLevel    $0A, $02, $05, $15
000B1242                            
000B1242                            ;	Voice $0F
000B1242                            ;	$29
000B1242                            ;	$36, $74, $71, $31, 	$04, $04, $05, $1D, 	$12, $0E, $1F, $1F
000B1242                            ;	$04, $06, $03, $01, 	$5F, $6F, $0F, $0F, 	$27, $27, $2E, $80
000B1242                            	smpsVcAlgorithm     $01
000B1242                            	smpsVcFeedback      $05
000B1242                            	smpsVcUnusedBits    $00
000B1242                            	smpsVcDetune        $03, $07, $07, $03
000B1242                            	smpsVcCoarseFreq    $01, $01, $04, $06
000B1242                            	smpsVcRateScale     $00, $00, $00, $00
000B1242                            	smpsVcAttackRate    $1D, $05, $04, $04
000B1242                            	smpsVcAmpMod        $00, $00, $00, $00
000B1242                            	smpsVcDecayRate1    $1F, $1F, $0E, $12
000B1242                            	smpsVcDecayRate2    $01, $03, $06, $04
000B1242                            	smpsVcDecayLevel    $00, $00, $06, $05
000B1242                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1242 2936 7471 3104 0405 1D12+  	smpsVcTotalLevel    $00, $2E, $27, $27
000B125B                            
000B125B                            ;	Voice $10
000B125B                            ;	$08
000B125B                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
000B125B                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
000B125B                            	smpsVcAlgorithm     $00
000B125B                            	smpsVcFeedback      $01
000B125B                            	smpsVcUnusedBits    $00
000B125B                            	smpsVcDetune        $00, $03, $07, $00
000B125B                            	smpsVcCoarseFreq    $00, $00, $00, $0A
000B125B                            	smpsVcRateScale     $01, $01, $00, $00
000B125B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B125B                            	smpsVcAmpMod        $00, $00, $00, $00
000B125B                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
000B125B                            	smpsVcDecayRate2    $03, $04, $04, $00
000B125B                            	smpsVcDecayLevel    $02, $02, $02, $02
000B125B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B125B 080A 7030 001F 1F5F 5F12+  	smpsVcTotalLevel    $00, $13, $2D, $24
000B1274                            
000B1274                            ;	Voice $11
000B1274                            ;	$3D
000B1274                            ;	$01, $01, $01, $01, 	$8E, $52, $14, $4C, 	$08, $08, $0E, $03
000B1274                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1B, $80, $80, $9B
000B1274                            	smpsVcAlgorithm     $05
000B1274                            	smpsVcFeedback      $07
000B1274                            	smpsVcUnusedBits    $00
000B1274                            	smpsVcDetune        $00, $00, $00, $00
000B1274                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B1274                            	smpsVcRateScale     $01, $00, $01, $02
000B1274                            	smpsVcAttackRate    $0C, $14, $12, $0E
000B1274                            	smpsVcAmpMod        $00, $00, $00, $00
000B1274                            	smpsVcDecayRate1    $03, $0E, $08, $08
000B1274                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1274                            	smpsVcDecayLevel    $01, $01, $01, $01
000B1274                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1274 3D01 0101 018E 5214 4C08+  	smpsVcTotalLevel    $1B, $00, $00, $1B
000B128D                            
000B128D                            ;	Voice $12
000B128D                            ;	$3D
000B128D                            ;	$01, $02, $00, $01, 	$1F, $0E, $0E, $0E, 	$07, $1F, $1F, $1F
000B128D                            ;	$00, $00, $00, $00, 	$1F, $0F, $0F, $0F, 	$17, $8D, $8C, $8C
000B128D                            	smpsVcAlgorithm     $05
000B128D                            	smpsVcFeedback      $07
000B128D                            	smpsVcUnusedBits    $00
000B128D                            	smpsVcDetune        $00, $00, $00, $00
000B128D                            	smpsVcCoarseFreq    $01, $00, $02, $01
000B128D                            	smpsVcRateScale     $00, $00, $00, $00
000B128D                            	smpsVcAttackRate    $0E, $0E, $0E, $1F
000B128D                            	smpsVcAmpMod        $00, $00, $00, $00
000B128D                            	smpsVcDecayRate1    $1F, $1F, $1F, $07
000B128D                            	smpsVcDecayRate2    $00, $00, $00, $00
000B128D                            	smpsVcDecayLevel    $00, $00, $00, $01
000B128D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B128D 3D01 0200 011F 0E0E 0E07+  	smpsVcTotalLevel    $0C, $0C, $0D, $17
000B12A6                            
000B12A6                            ;	Voice $13
000B12A6                            ;	$3C
000B12A6                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000B12A6                            ;	$04, $00, $04, $00, 	$10, $07, $10, $07, 	$1A, $80, $16, $80
000B12A6                            	smpsVcAlgorithm     $04
000B12A6                            	smpsVcFeedback      $07
000B12A6                            	smpsVcUnusedBits    $00
000B12A6                            	smpsVcDetune        $03, $05, $05, $03
000B12A6                            	smpsVcCoarseFreq    $00, $00, $02, $01
000B12A6                            	smpsVcRateScale     $01, $01, $01, $01
000B12A6                            	smpsVcAttackRate    $13, $12, $13, $12
000B12A6                            	smpsVcAmpMod        $00, $00, $00, $00
000B12A6                            	smpsVcDecayRate1    $00, $08, $00, $08
000B12A6                            	smpsVcDecayRate2    $00, $04, $00, $04
000B12A6                            	smpsVcDecayLevel    $00, $01, $00, $01
000B12A6                            	smpsVcReleaseRate   $07, $00, $07, $00
000B12A6 3C31 5250 3052 5352 5308+  	smpsVcTotalLevel    $00, $16, $00, $1A
000B12BF                            
000B12BF                            ;	Voice $14
000B12BF                            ;	$18
000B12BF                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000B12BF                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $80
000B12BF                            	smpsVcAlgorithm     $00
000B12BF                            	smpsVcFeedback      $03
000B12BF                            	smpsVcUnusedBits    $00
000B12BF                            	smpsVcDetune        $03, $03, $03, $03
000B12BF                            	smpsVcCoarseFreq    $01, $00, $00, $07
000B12BF                            	smpsVcRateScale     $02, $00, $03, $02
000B12BF                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000B12BF                            	smpsVcAmpMod        $00, $00, $00, $00
000B12BF                            	smpsVcDecayRate1    $01, $04, $06, $0D
000B12BF                            	smpsVcDecayRate2    $05, $03, $0A, $08
000B12BF                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000B12BF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B12BF 1837 3030 319E DC1C 9C0D+  	smpsVcTotalLevel    $00, $14, $22, $32
000B12D8                            
000B12D8                            ;	Voice $15
000B12D8                            ;	$3A
000B12D8                            ;	$01, $01, $01, $02, 	$8D, $07, $07, $52, 	$09, $00, $00, $03
000B12D8                            ;	$01, $02, $02, $00, 	$5F, $0F, $0F, $2F, 	$18, $22, $18, $80
000B12D8                            	smpsVcAlgorithm     $02
000B12D8                            	smpsVcFeedback      $07
000B12D8                            	smpsVcUnusedBits    $00
000B12D8                            	smpsVcDetune        $00, $00, $00, $00
000B12D8                            	smpsVcCoarseFreq    $02, $01, $01, $01
000B12D8                            	smpsVcRateScale     $01, $00, $00, $02
000B12D8                            	smpsVcAttackRate    $12, $07, $07, $0D
000B12D8                            	smpsVcAmpMod        $00, $00, $00, $00
000B12D8                            	smpsVcDecayRate1    $03, $00, $00, $09
000B12D8                            	smpsVcDecayRate2    $00, $02, $02, $01
000B12D8                            	smpsVcDecayLevel    $02, $00, $00, $05
000B12D8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B12D8 3A01 0101 028D 0707 5209+  	smpsVcTotalLevel    $00, $18, $22, $18
000B12F1                            
000B12F1                            ;	Voice $16
000B12F1                            ;	$2C
000B12F1                            ;	$74, $74, $34, $34, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B12F1                            ;	$00, $01, $00, $01, 	$0F, $3F, $0F, $3F, 	$16, $80, $17, $80
000B12F1                            	smpsVcAlgorithm     $04
000B12F1                            	smpsVcFeedback      $05
000B12F1                            	smpsVcUnusedBits    $00
000B12F1                            	smpsVcDetune        $03, $03, $07, $07
000B12F1                            	smpsVcCoarseFreq    $04, $04, $04, $04
000B12F1                            	smpsVcRateScale     $00, $00, $00, $00
000B12F1                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B12F1                            	smpsVcAmpMod        $00, $00, $00, $00
000B12F1                            	smpsVcDecayRate1    $00, $00, $00, $00
000B12F1                            	smpsVcDecayRate2    $01, $00, $01, $00
000B12F1                            	smpsVcDecayLevel    $03, $00, $03, $00
000B12F1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B12F1 2C74 7434 341F 1F1F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000B130A                            
000B130A                            ;	Voice $17
000B130A                            ;	$04
000B130A                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B130A                            ;	$00, $00, $00, $00, 	$10, $07, $10, $07, 	$23, $80, $23, $80
000B130A                            	smpsVcAlgorithm     $04
000B130A                            	smpsVcFeedback      $00
000B130A                            	smpsVcUnusedBits    $00
000B130A                            	smpsVcDetune        $04, $07, $07, $03
000B130A                            	smpsVcCoarseFreq    $09, $07, $02, $07
000B130A                            	smpsVcRateScale     $00, $00, $00, $00
000B130A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B130A                            	smpsVcAmpMod        $00, $00, $00, $00
000B130A                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B130A                            	smpsVcDecayRate2    $00, $00, $00, $00
000B130A                            	smpsVcDecayLevel    $00, $01, $00, $01
000B130A                            	smpsVcReleaseRate   $07, $00, $07, $00
000B130A 0437 7277 491F 1F1F 1F07+  	smpsVcTotalLevel    $00, $23, $00, $23
000B1323                            
000B1323                            ;	Voice $18
000B1323                            ;	$3D
000B1323                            ;	$01, $02, $02, $02, 	$14, $0E, $8C, $0E, 	$08, $05, $02, $05
000B1323                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1A, $80, $80, $80
000B1323                            	smpsVcAlgorithm     $05
000B1323                            	smpsVcFeedback      $07
000B1323                            	smpsVcUnusedBits    $00
000B1323                            	smpsVcDetune        $00, $00, $00, $00
000B1323                            	smpsVcCoarseFreq    $02, $02, $02, $01
000B1323                            	smpsVcRateScale     $00, $02, $00, $00
000B1323                            	smpsVcAttackRate    $0E, $0C, $0E, $14
000B1323                            	smpsVcAmpMod        $00, $00, $00, $00
000B1323                            	smpsVcDecayRate1    $05, $02, $05, $08
000B1323                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1323                            	smpsVcDecayLevel    $01, $01, $01, $01
000B1323                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1323 3D01 0202 0214 0E8C 0E08+  	smpsVcTotalLevel    $00, $00, $00, $1A
000B133C                            
000B133C                            ;	Voice $19
000B133C                            ;	$20
000B133C                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000B133C                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $37, $13, $80
000B133C                            	smpsVcAlgorithm     $00
000B133C                            	smpsVcFeedback      $04
000B133C                            	smpsVcUnusedBits    $00
000B133C                            	smpsVcDetune        $03, $03, $03, $03
000B133C                            	smpsVcCoarseFreq    $01, $00, $05, $06
000B133C                            	smpsVcRateScale     $02, $02, $03, $03
000B133C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B133C                            	smpsVcAmpMod        $00, $00, $00, $00
000B133C                            	smpsVcDecayRate1    $06, $09, $06, $07
000B133C                            	smpsVcDecayRate2    $08, $06, $06, $07
000B133C                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B133C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B133C 2036 3530 31DF DF9F 9F07+  	smpsVcTotalLevel    $00, $13, $37, $19
000B1355                            
000B1355                            ;	Voice $1A
000B1355                            ;	$3A
000B1355                            ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
000B1355                            ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
000B1355                            	smpsVcAlgorithm     $02
000B1355                            	smpsVcFeedback      $07
000B1355                            	smpsVcUnusedBits    $00
000B1355                            	smpsVcDetune        $00, $05, $00, $05
000B1355                            	smpsVcCoarseFreq    $02, $01, $08, $01
000B1355                            	smpsVcRateScale     $00, $00, $00, $00
000B1355                            	smpsVcAttackRate    $10, $1E, $1E, $1E
000B1355                            	smpsVcAmpMod        $00, $00, $00, $00
000B1355                            	smpsVcDecayRate1    $0F, $1F, $1F, $1F
000B1355                            	smpsVcDecayRate2    $02, $00, $00, $00
000B1355                            	smpsVcDecayLevel    $01, $00, $00, $00
000B1355                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1355 3A51 0851 021E 1E1E 101F+  	smpsVcTotalLevel    $01, $22, $24, $18
000B136E                            
000B136E                            ;	Voice $1B
000B136E                            ;	$3A
000B136E                            ;	$32, $56, $32, $42, 	$8D, $4F, $15, $52, 	$06, $08, $07, $04
000B136E                            ;	$02, $00, $00, $00, 	$1F, $1F, $2F, $2F, 	$19, $20, $2A, $80
000B136E                            	smpsVcAlgorithm     $02
000B136E                            	smpsVcFeedback      $07
000B136E                            	smpsVcUnusedBits    $00
000B136E                            	smpsVcDetune        $04, $03, $05, $03
000B136E                            	smpsVcCoarseFreq    $02, $02, $06, $02
000B136E                            	smpsVcRateScale     $01, $00, $01, $02
000B136E                            	smpsVcAttackRate    $12, $15, $0F, $0D
000B136E                            	smpsVcAmpMod        $00, $00, $00, $00
000B136E                            	smpsVcDecayRate1    $04, $07, $08, $06
000B136E                            	smpsVcDecayRate2    $00, $00, $00, $02
000B136E                            	smpsVcDecayLevel    $02, $02, $01, $01
000B136E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B136E 3A32 5632 428D 4F15 5206+  	smpsVcTotalLevel    $00, $2A, $20, $19
000B1387                            
000B1387                            ;	Voice $1C
000B1387                            ;	$3A
000B1387                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000B1387                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000B1387                            	smpsVcAlgorithm     $02
000B1387                            	smpsVcFeedback      $07
000B1387                            	smpsVcUnusedBits    $00
000B1387                            	smpsVcDetune        $00, $00, $00, $00
000B1387                            	smpsVcCoarseFreq    $01, $01, $07, $01
000B1387                            	smpsVcRateScale     $01, $02, $02, $02
000B1387                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000B1387                            	smpsVcAmpMod        $00, $00, $00, $00
000B1387                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000B1387                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1387                            	smpsVcDecayLevel    $00, $01, $0F, $01
000B1387                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1387 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000B13A0                            
000B13A0                            ;	Voice $1D
000B13A0                            ;	$08
000B13A0                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
000B13A0                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
000B13A0                            	smpsVcAlgorithm     $00
000B13A0                            	smpsVcFeedback      $01
000B13A0                            	smpsVcUnusedBits    $00
000B13A0                            	smpsVcDetune        $00, $03, $07, $00
000B13A0                            	smpsVcCoarseFreq    $00, $00, $00, $0A
000B13A0                            	smpsVcRateScale     $01, $01, $00, $00
000B13A0                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B13A0                            	smpsVcAmpMod        $00, $00, $00, $00
000B13A0                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
000B13A0                            	smpsVcDecayRate2    $03, $04, $04, $00
000B13A0                            	smpsVcDecayLevel    $02, $02, $02, $02
000B13A0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B13A0 080A 7030 001F 1F5F 5F12+  	smpsVcTotalLevel    $00, $13, $2D, $24
000B13B9                            
000B13B9                            ;	Voice $1E
000B13B9                            ;	$3A
000B13B9                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000B13B9                            ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000B13B9                            	smpsVcAlgorithm     $02
000B13B9                            	smpsVcFeedback      $07
000B13B9                            	smpsVcUnusedBits    $00
000B13B9                            	smpsVcDetune        $00, $00, $00, $00
000B13B9                            	smpsVcCoarseFreq    $01, $01, $07, $01
000B13B9                            	smpsVcRateScale     $01, $02, $02, $02
000B13B9                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000B13B9                            	smpsVcAmpMod        $00, $00, $00, $00
000B13B9                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000B13B9                            	smpsVcDecayRate2    $07, $00, $00, $00
000B13B9                            	smpsVcDecayLevel    $00, $01, $0F, $01
000B13B9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B13B9 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000B13D2                            
000B13D2                            ;	Voice $1F
000B13D2                            ;	$36
000B13D2                            ;	$0F, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$12, $11, $0E, $00
000B13D2                            ;	$00, $0A, $07, $09, 	$FF, $0F, $1F, $0F, 	$18, $80, $80, $80
000B13D2                            	smpsVcAlgorithm     $06
000B13D2                            	smpsVcFeedback      $06
000B13D2                            	smpsVcUnusedBits    $00
000B13D2                            	smpsVcDetune        $00, $00, $00, $00
000B13D2                            	smpsVcCoarseFreq    $01, $01, $01, $0F
000B13D2                            	smpsVcRateScale     $00, $00, $00, $00
000B13D2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B13D2                            	smpsVcAmpMod        $00, $00, $00, $00
000B13D2                            	smpsVcDecayRate1    $00, $0E, $11, $12
000B13D2                            	smpsVcDecayRate2    $09, $07, $0A, $00
000B13D2                            	smpsVcDecayLevel    $00, $01, $00, $0F
000B13D2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B13D2 360F 0101 011F 1F1F 1F12+  	smpsVcTotalLevel    $00, $00, $00, $18
000B13EB                            
000B13EB                            ;	Voice $20
000B13EB                            ;	$3A
000B13EB                            ;	$03, $19, $01, $53, 	$1F, $DF, $1F, $9F, 	$0C, $02, $0C, $05
000B13EB                            ;	$04, $04, $04, $07, 	$1F, $FF, $0F, $2F, 	$1D, $36, $1B, $80
000B13EB                            	smpsVcAlgorithm     $02
000B13EB                            	smpsVcFeedback      $07
000B13EB                            	smpsVcUnusedBits    $00
000B13EB                            	smpsVcDetune        $05, $00, $01, $00
000B13EB                            	smpsVcCoarseFreq    $03, $01, $09, $03
000B13EB                            	smpsVcRateScale     $02, $00, $03, $00
000B13EB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B13EB                            	smpsVcAmpMod        $00, $00, $00, $00
000B13EB                            	smpsVcDecayRate1    $05, $0C, $02, $0C
000B13EB                            	smpsVcDecayRate2    $07, $04, $04, $04
000B13EB                            	smpsVcDecayLevel    $02, $00, $0F, $01
000B13EB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B13EB 3A03 1901 531F DF1F 9F0C+  	smpsVcTotalLevel    $00, $1B, $36, $1D
000B1404                            
000B1404                            
000B1404                            		even
000B1404                            Music92:	incbin	sound\music92.bin ; Drowning
000B1746 00                         		even
000B1746                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000B1816                            		even
000B1816                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000B24EC 00                         		even
000B24EC                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000B263C 00                         		even
000B263C                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000B2676 00                         		even
000B2676                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000B29DE                            		even
000B29DE                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000B2A18 00                         		even
000B2A18                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000B2A52 00                         		even
000B2A52                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000B2A8C 00                         		even
000B2A8C                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000B2AC6 00                         		even
000B2AC6                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000B2B00 00                         		even
000B2B00                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000B2B3A 00                         		even
000B2B3A                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000B302A                            		even
000B302A                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000B302A                            GentleBreeze_Header:
000B302A =00000001                  smpsHeaderStartSong = 1
000B302A 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000B302C 0603                       	smpsHeaderChan      $06, $03
000B302E 0100                       	smpsHeaderTempo     $01, $00
000B3030                            
000B3034 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000B3038 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000B303C 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000B3040 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000B3044 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000B3048 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000B304E 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000B3054 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000B305A                            
000B305A                            ; PSG3 Data
000B305A                            GentleBreeze_PSG3:
000B305A F2                         	smpsStop
000B305B                            
000B305B                            ; FM1 Data
000B305B                            GentleBreeze_FM1:
000B305D E0C0                       	smpsPan             panCenter, $00
000B305F E1FF                       	smpsAlterNote       $FF
000B3061 C410                       	dc.b	nG5, $10
000B3063 E60F                       	smpsAlterVol        $0F
000B3065 C4                         	dc.b	nG5
000B3066 E6F1                       	smpsAlterVol        $F1
000B3068 E100                       	smpsAlterNote       $00
000B306A C2                         	dc.b	nF5
000B306B E60F                       	smpsAlterVol        $0F
000B306D 08                         	dc.b	$08
000B306E E6F1                       	smpsAlterVol        $F1
000B3070 C010                       	dc.b	nEb5, $10
000B3072 E60F                       	smpsAlterVol        $0F
000B3074 C0                         	dc.b	nEb5
000B3075 E6F1                       	smpsAlterVol        $F1
000B3077 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000B307D E60F                       	smpsAlterVol        $0F
000B307F C9                         	dc.b	nC6
000B3080 E6F1                       	smpsAlterVol        $F1
000B3082 C5                         	dc.b	nAb5
000B3083 E60F                       	smpsAlterVol        $0F
000B3085 08                         	dc.b	$08
000B3086 E6F1                       	smpsAlterVol        $F1
000B3088 C010                       	dc.b	nEb5, $10
000B308A E60F                       	smpsAlterVol        $0F
000B308C C0                         	dc.b	nEb5
000B308D E6F1                       	smpsAlterVol        $F1
000B308F C208                       	dc.b	nF5, $08
000B3091 E1FF                       	smpsAlterNote       $FF
000B3093 C410                       	dc.b	nG5, $10
000B3095 E100                       	smpsAlterNote       $00
000B3097 C5C7                       	dc.b	nAb5, nBb5
000B3099 E60F                       	smpsAlterVol        $0F
000B309B C7                         	dc.b	nBb5
000B309C E6F1                       	smpsAlterVol        $F1
000B309E C5                         	dc.b	nAb5
000B309F E60F                       	smpsAlterVol        $0F
000B30A1 08                         	dc.b	$08
000B30A2 E6F1                       	smpsAlterVol        $F1
000B30A4 E1FF                       	smpsAlterNote       $FF
000B30A6 C410                       	dc.b	nG5, $10
000B30A8 E60F                       	smpsAlterVol        $0F
000B30AA C4                         	dc.b	nG5
000B30AB E6F1                       	smpsAlterVol        $F1
000B30AD C4                         	dc.b	nG5
000B30AE E100                       	smpsAlterNote       $00
000B30B0 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000B30B5 E60F                       	smpsAlterVol        $0F
000B30B7 C2                         	dc.b	nF5
000B30B8 E6F1                       	smpsAlterVol        $F1
000B30BA E1FF                       	smpsAlterNote       $FF
000B30BC C4                         	dc.b	nG5
000B30BD E60F                       	smpsAlterVol        $0F
000B30BF 08                         	dc.b	$08
000B30C0 E6F1                       	smpsAlterVol        $F1
000B30C2 10                         	dc.b	$10
000B30C3 E60F                       	smpsAlterVol        $0F
000B30C5 38                         	dc.b	$38
000B30C6 E6F1                       	smpsAlterVol        $F1
000B30C8 10                         	dc.b	$10
000B30C9 E60F                       	smpsAlterVol        $0F
000B30CB C4                         	dc.b	nG5
000B30CC E6F1                       	smpsAlterVol        $F1
000B30CE E100                       	smpsAlterNote       $00
000B30D0 C2                         	dc.b	nF5
000B30D1 E60F                       	smpsAlterVol        $0F
000B30D3 08                         	dc.b	$08
000B30D4 E6F1                       	smpsAlterVol        $F1
000B30D6 C010                       	dc.b	nEb5, $10
000B30D8 E60F                       	smpsAlterVol        $0F
000B30DA C0                         	dc.b	nEb5
000B30DB E6F1                       	smpsAlterVol        $F1
000B30DD BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000B30E3 E60F                       	smpsAlterVol        $0F
000B30E5 C9                         	dc.b	nC6
000B30E6 E6F1                       	smpsAlterVol        $F1
000B30E8 C5                         	dc.b	nAb5
000B30E9 E60F                       	smpsAlterVol        $0F
000B30EB 08                         	dc.b	$08
000B30EC E6F1                       	smpsAlterVol        $F1
000B30EE C010                       	dc.b	nEb5, $10
000B30F0 E60F                       	smpsAlterVol        $0F
000B30F2 C0                         	dc.b	nEb5
000B30F3 E6F1                       	smpsAlterVol        $F1
000B30F5 C208                       	dc.b	nF5, $08
000B30F7 E1FF                       	smpsAlterNote       $FF
000B30F9 C410                       	dc.b	nG5, $10
000B30FB E100                       	smpsAlterNote       $00
000B30FD C5C7                       	dc.b	nAb5, nBb5
000B30FF E60F                       	smpsAlterVol        $0F
000B3101 C7                         	dc.b	nBb5
000B3102 E6F1                       	smpsAlterVol        $F1
000B3104 C5                         	dc.b	nAb5
000B3105 E60F                       	smpsAlterVol        $0F
000B3107 08                         	dc.b	$08
000B3108 E6F1                       	smpsAlterVol        $F1
000B310A E1FF                       	smpsAlterNote       $FF
000B310C C410                       	dc.b	nG5, $10
000B310E E60F                       	smpsAlterVol        $0F
000B3110 C4                         	dc.b	nG5
000B3111 E6F1                       	smpsAlterVol        $F1
000B3113 C4                         	dc.b	nG5
000B3114 E100                       	smpsAlterNote       $00
000B3116 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000B311B E60F                       	smpsAlterVol        $0F
000B311D 28                         	dc.b	$28
000B311E E6F1                       	smpsAlterVol        $F1
000B3120 C008 10                    	dc.b	nEb5, $08, $10
000B3123 E60F                       	smpsAlterVol        $0F
000B3125 21                         	dc.b	$21
000B3126                            
000B3126                            GentleBreeze_Loop12:
000B3126 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000B3129 F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000B312E E717                       	dc.b	smpsNoAttack, $17
000B3130 E6F1                       	smpsAlterVol        $F1
000B3132 E1FF                       	smpsAlterNote       $FF
000B3134 C410                       	dc.b	nG5, $10
000B3136 E60F                       	smpsAlterVol        $0F
000B3138 C4                         	dc.b	nG5
000B3139 E6F1                       	smpsAlterVol        $F1
000B313B E100                       	smpsAlterNote       $00
000B313D C2                         	dc.b	nF5
000B313E E60F                       	smpsAlterVol        $0F
000B3140 08                         	dc.b	$08
000B3141 E6F1                       	smpsAlterVol        $F1
000B3143 C010                       	dc.b	nEb5, $10
000B3145 E60F                       	smpsAlterVol        $0F
000B3147 C0                         	dc.b	nEb5
000B3148 E6F1                       	smpsAlterVol        $F1
000B314A BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000B3150 E60F                       	smpsAlterVol        $0F
000B3152 C9                         	dc.b	nC6
000B3153 E6F1                       	smpsAlterVol        $F1
000B3155 C5                         	dc.b	nAb5
000B3156 E60F                       	smpsAlterVol        $0F
000B3158 08                         	dc.b	$08
000B3159 E6F1                       	smpsAlterVol        $F1
000B315B C010                       	dc.b	nEb5, $10
000B315D E60F                       	smpsAlterVol        $0F
000B315F C0                         	dc.b	nEb5
000B3160 E6F1                       	smpsAlterVol        $F1
000B3162 C208                       	dc.b	nF5, $08
000B3164 E1FF                       	smpsAlterNote       $FF
000B3166 C410                       	dc.b	nG5, $10
000B3168 E100                       	smpsAlterNote       $00
000B316A C5C7                       	dc.b	nAb5, nBb5
000B316C E60F                       	smpsAlterVol        $0F
000B316E C7                         	dc.b	nBb5
000B316F E6F1                       	smpsAlterVol        $F1
000B3171 C5                         	dc.b	nAb5
000B3172 E60F                       	smpsAlterVol        $0F
000B3174 08                         	dc.b	$08
000B3175 E6F1                       	smpsAlterVol        $F1
000B3177 E1FF                       	smpsAlterNote       $FF
000B3179 C410                       	dc.b	nG5, $10
000B317B E60F                       	smpsAlterVol        $0F
000B317D C4                         	dc.b	nG5
000B317E E6F1                       	smpsAlterVol        $F1
000B3180 C4                         	dc.b	nG5
000B3181 E100                       	smpsAlterNote       $00
000B3183 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000B3188 E60F                       	smpsAlterVol        $0F
000B318A C2                         	dc.b	nF5
000B318B E6F1                       	smpsAlterVol        $F1
000B318D E1FF                       	smpsAlterNote       $FF
000B318F C4                         	dc.b	nG5
000B3190 E60F                       	smpsAlterVol        $0F
000B3192 08                         	dc.b	$08
000B3193 E6F1                       	smpsAlterVol        $F1
000B3195 10                         	dc.b	$10
000B3196 E60F                       	smpsAlterVol        $0F
000B3198 38                         	dc.b	$38
000B3199 E6F1                       	smpsAlterVol        $F1
000B319B 10                         	dc.b	$10
000B319C E60F                       	smpsAlterVol        $0F
000B319E C4                         	dc.b	nG5
000B319F E6F1                       	smpsAlterVol        $F1
000B31A1 E100                       	smpsAlterNote       $00
000B31A3 C2                         	dc.b	nF5
000B31A4 E60F                       	smpsAlterVol        $0F
000B31A6 08                         	dc.b	$08
000B31A7 E6F1                       	smpsAlterVol        $F1
000B31A9 C010                       	dc.b	nEb5, $10
000B31AB E60F                       	smpsAlterVol        $0F
000B31AD C0                         	dc.b	nEb5
000B31AE E6F1                       	smpsAlterVol        $F1
000B31B0 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000B31B6 E60F                       	smpsAlterVol        $0F
000B31B8 C9                         	dc.b	nC6
000B31B9 E6F1                       	smpsAlterVol        $F1
000B31BB C5                         	dc.b	nAb5
000B31BC E60F                       	smpsAlterVol        $0F
000B31BE 08                         	dc.b	$08
000B31BF E6F1                       	smpsAlterVol        $F1
000B31C1 C010                       	dc.b	nEb5, $10
000B31C3 E60F                       	smpsAlterVol        $0F
000B31C5 C0                         	dc.b	nEb5
000B31C6 E6F1                       	smpsAlterVol        $F1
000B31C8 C208                       	dc.b	nF5, $08
000B31CA E1FF                       	smpsAlterNote       $FF
000B31CC C410                       	dc.b	nG5, $10
000B31CE E100                       	smpsAlterNote       $00
000B31D0 C5C7                       	dc.b	nAb5, nBb5
000B31D2 E60F                       	smpsAlterVol        $0F
000B31D4 C7                         	dc.b	nBb5
000B31D5 E6F1                       	smpsAlterVol        $F1
000B31D7 C5                         	dc.b	nAb5
000B31D8 E60F                       	smpsAlterVol        $0F
000B31DA 08                         	dc.b	$08
000B31DB E6F1                       	smpsAlterVol        $F1
000B31DD E1FF                       	smpsAlterNote       $FF
000B31DF C410                       	dc.b	nG5, $10
000B31E1 E60F                       	smpsAlterVol        $0F
000B31E3 C4                         	dc.b	nG5
000B31E4 E6F1                       	smpsAlterVol        $F1
000B31E6 C4                         	dc.b	nG5
000B31E7 E100                       	smpsAlterNote       $00
000B31E9 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000B31EE E60F                       	smpsAlterVol        $0F
000B31F0 28                         	dc.b	$28
000B31F1 E6F1                       	smpsAlterVol        $F1
000B31F3 C008 10                    	dc.b	nEb5, $08, $10
000B31F6 E60F                       	smpsAlterVol        $0F
000B31F8 21                         	dc.b	$21
000B31F9 E0C0                       	smpsPan             panCenter, $00
000B31FB F6FF 29                    	smpsJump            GentleBreeze_Loop12
000B31FE                            
000B31FE                            ; FM2 Data
000B31FE                            GentleBreeze_FM2:
000B3200 E60C                       	smpsAlterVol        $0C
000B3202 E0C0                       	smpsPan             panCenter, $00
000B3204 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000B3210 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000B321C 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000B3228 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000B3234 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000B3240 A039                       	dc.b	nG2, $39
000B3242                            
000B3242                            GentleBreeze_Jump04:
000B3242 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000B3245                            
000B3245                            GentleBreeze_Loop11:
000B3245 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000B3251 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000B325D 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000B3269 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000B3275 A3                         	dc.b	nBb2
000B3276 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000B327B 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000B3287 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000B3293 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000B329F 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000B32AB 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000B32B7 A039                       	dc.b	nG2, $39
000B32B9 E0C0                       	smpsPan             panCenter, $00
000B32BB F6FF 85                    	smpsJump            GentleBreeze_Jump04
000B32BE                            
000B32BE                            ; FM3 Data
000B32BE                            GentleBreeze_FM3:
000B32C0 E0C0                       	smpsPan             panCenter, $00
000B32C2 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000B32CA E616                       	smpsAlterVol        $16
000B32CC F000 0207 03               	smpsModSet          $00, $02, $07, $03
000B32D1                            
000B32D1                            GentleBreeze_Loop0F:
000B32D1 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000B32D5 E1FF                       	smpsAlterNote       $FF
000B32D7 C4                         	dc.b	nG5
000B32D8 E100                       	smpsAlterNote       $00
000B32DA C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000B32DF E608                       	smpsAlterVol        $08
000B32E1 C080 08                    	dc.b	nEb5, nRst, $08
000B32E4 E6F8                       	smpsAlterVol        $F8
000B32E6 C7                         	dc.b	nBb5
000B32E7 E1FF                       	smpsAlterNote       $FF
000B32E9 C4                         	dc.b	nG5
000B32EA E100                       	smpsAlterNote       $00
000B32EC C0BB                       	dc.b	nEb5, nBb4
000B32EE F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000B32F3 C0BD C9                    	dc.b	nEb5, nC5, nC6
000B32F6 E1FF                       	smpsAlterNote       $FF
000B32F8 C4                         	dc.b	nG5
000B32F9 E100                       	smpsAlterNote       $00
000B32FB C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000B3300 E608                       	smpsAlterVol        $08
000B3302 C080 08                    	dc.b	nEb5, nRst, $08
000B3305 E6F8                       	smpsAlterVol        $F8
000B3307 E1FF                       	smpsAlterNote       $FF
000B3309 C4                         	dc.b	nG5
000B330A E100                       	smpsAlterNote       $00
000B330C C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000B3313 E1FF                       	smpsAlterNote       $FF
000B3315 C4                         	dc.b	nG5
000B3316 E100                       	smpsAlterNote       $00
000B3318 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000B331D E1FF                       	smpsAlterNote       $FF
000B331F C4                         	dc.b	nG5
000B3320 E100                       	smpsAlterNote       $00
000B3322 C7                         	dc.b	nBb5
000B3323 E1FF                       	smpsAlterNote       $FF
000B3325 C4                         	dc.b	nG5
000B3326 E100                       	smpsAlterNote       $00
000B3328 C2C0 01                    	dc.b	nF5, nEb5, $01
000B332B                            
000B332B                            GentleBreeze_Jump03:
000B332B E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000B3332 E6FA                       	smpsAlterVol        $FA
000B3334 F4                         	smpsModOff
000B3335 E1FF                       	smpsAlterNote       $FF
000B3337 B850                       	dc.b	nG4, $50
000B3339 E100                       	smpsAlterNote       $00
000B333B B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000B3347 E1FF                       	smpsAlterNote       $FF
000B3349 B810                       	dc.b	nG4, $10
000B334B E100                       	smpsAlterNote       $00
000B334D BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000B3352 E1FF                       	smpsAlterNote       $FF
000B3354 B8                         	dc.b	nG4
000B3355 E100                       	smpsAlterNote       $00
000B3357 B610                       	dc.b	nF4, $10
000B3359 E1FF                       	smpsAlterNote       $FF
000B335B B850                       	dc.b	nG4, $50
000B335D E100                       	smpsAlterNote       $00
000B335F B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000B3367 E1FF                       	smpsAlterNote       $FF
000B3369 AC08                       	dc.b	nG3, $08
000B336B E100                       	smpsAlterNote       $00
000B336D AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000B3372 E1FF                       	smpsAlterNote       $FF
000B3374 B850                       	dc.b	nG4, $50
000B3376 E100                       	smpsAlterNote       $00
000B3378 BB08                       	dc.b	nBb4, $08
000B337A E1FF                       	smpsAlterNote       $FF
000B337C B8                         	dc.b	nG4
000B337D E100                       	smpsAlterNote       $00
000B337F BDBB B6                    	dc.b	nC5, nBb4, nF4
000B3382 E1FF                       	smpsAlterNote       $FF
000B3384 B810 08                    	dc.b	nG4, $10, $08
000B3387 E100                       	smpsAlterNote       $00
000B3389 B6                         	dc.b	nF4
000B338A E1FF                       	smpsAlterNote       $FF
000B338C B880                       	dc.b	nG4, nRst
000B338E E100                       	smpsAlterNote       $00
000B3390 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000B3393 E1FF                       	smpsAlterNote       $FF
000B3395 B810                       	dc.b	nG4, $10
000B3397 E100                       	smpsAlterNote       $00
000B3399 B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000B33A0 E1FF                       	smpsAlterNote       $FF
000B33A2 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000B33B0 E606                       	smpsAlterVol        $06
000B33B2 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000B33B7 E100                       	smpsAlterNote       $00
000B33B9                            
000B33B9                            GentleBreeze_Loop10:
000B33B9 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000B33BD E1FF                       	smpsAlterNote       $FF
000B33BF C4                         	dc.b	nG5
000B33C0 E100                       	smpsAlterNote       $00
000B33C2 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000B33C7 E608                       	smpsAlterVol        $08
000B33C9 C080 08                    	dc.b	nEb5, nRst, $08
000B33CC E6F8                       	smpsAlterVol        $F8
000B33CE C7                         	dc.b	nBb5
000B33CF E1FF                       	smpsAlterNote       $FF
000B33D1 C4                         	dc.b	nG5
000B33D2 E100                       	smpsAlterNote       $00
000B33D4 C0BB                       	dc.b	nEb5, nBb4
000B33D6 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000B33DB C0BD C9                    	dc.b	nEb5, nC5, nC6
000B33DE E1FF                       	smpsAlterNote       $FF
000B33E0 C4                         	dc.b	nG5
000B33E1 E100                       	smpsAlterNote       $00
000B33E3 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000B33E8 E608                       	smpsAlterVol        $08
000B33EA C080 08                    	dc.b	nEb5, nRst, $08
000B33ED E6F8                       	smpsAlterVol        $F8
000B33EF E1FF                       	smpsAlterNote       $FF
000B33F1 C4                         	dc.b	nG5
000B33F2 E100                       	smpsAlterNote       $00
000B33F4 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000B33FB E1FF                       	smpsAlterNote       $FF
000B33FD C4                         	dc.b	nG5
000B33FE E100                       	smpsAlterNote       $00
000B3400 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000B3405 E1FF                       	smpsAlterNote       $FF
000B3407 C4                         	dc.b	nG5
000B3408 E100                       	smpsAlterNote       $00
000B340A C7                         	dc.b	nBb5
000B340B E1FF                       	smpsAlterNote       $FF
000B340D C4                         	dc.b	nG5
000B340E E100                       	smpsAlterNote       $00
000B3410 C2C0 01                    	dc.b	nF5, nEb5, $01
000B3413 E0C0                       	smpsPan             panCenter, $00
000B3415 F1                         	smpsModOn
000B3416 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000B3419                            
000B3419                            ; FM4 Data
000B3419                            GentleBreeze_FM4:
000B341B E0C0                       	smpsPan             panCenter, $00
000B341D 80                         	dc.b	nRst
000B341E                            
000B341E                            GentleBreeze_Loop0D:
000B341E 7F                         	dc.b	$7F
000B341F F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000B3424 77                         	dc.b	$77
000B3427 E609                       	smpsAlterVol        $09
000B3429 C001                       	dc.b	nEb5, $01
000B342B                            
000B342B                            GentleBreeze_Jump02:
000B342B E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000B3430 E607                       	smpsAlterVol        $07
000B3432 E1FF                       	smpsAlterNote       $FF
000B3434 C450                       	dc.b	nG5, $50
000B3436 E100                       	smpsAlterNote       $00
000B3438 C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000B3444 E1FF                       	smpsAlterNote       $FF
000B3446 C410                       	dc.b	nG5, $10
000B3448 E100                       	smpsAlterNote       $00
000B344A C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000B344F E1FF                       	smpsAlterNote       $FF
000B3451 C4                         	dc.b	nG5
000B3452 E100                       	smpsAlterNote       $00
000B3454 C210                       	dc.b	nF5, $10
000B3456 E1FF                       	smpsAlterNote       $FF
000B3458 C450                       	dc.b	nG5, $50
000B345A E100                       	smpsAlterNote       $00
000B345C C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000B3464 E1FF                       	smpsAlterNote       $FF
000B3466 B808                       	dc.b	nG4, $08
000B3468 E100                       	smpsAlterNote       $00
000B346A BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000B346F E1FF                       	smpsAlterNote       $FF
000B3471 C450                       	dc.b	nG5, $50
000B3473 E100                       	smpsAlterNote       $00
000B3475 C708                       	dc.b	nBb5, $08
000B3477 E1FF                       	smpsAlterNote       $FF
000B3479 C4                         	dc.b	nG5
000B347A E100                       	smpsAlterNote       $00
000B347C C9C7 C2                    	dc.b	nC6, nBb5, nF5
000B347F E1FF                       	smpsAlterNote       $FF
000B3481 C410 08                    	dc.b	nG5, $10, $08
000B3484 E100                       	smpsAlterNote       $00
000B3486 C2                         	dc.b	nF5
000B3487 E1FF                       	smpsAlterNote       $FF
000B3489 C480                       	dc.b	nG5, nRst
000B348B E100                       	smpsAlterNote       $00
000B348D C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000B3490 E1FF                       	smpsAlterNote       $FF
000B3492 C410                       	dc.b	nG5, $10
000B3494 E100                       	smpsAlterNote       $00
000B3496 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000B349D E1FF                       	smpsAlterNote       $FF
000B349F C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000B34A7                            
000B34A7                            GentleBreeze_Loop0E:
000B34A7 7F                         	dc.b	$7F
000B34A8 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000B34AD 77                         	dc.b	$77
000B34AE E100                       	smpsAlterNote       $00
000B34B0 C001                       	dc.b	nEb5, $01
000B34B2 E6F9                       	smpsAlterVol        $F9
000B34B4 E0C0                       	smpsPan             panCenter, $00
000B34B6 E100                       	smpsAlterNote       $00
000B34B8 F6FF 71                    	smpsJump            GentleBreeze_Jump02
000B34BB                            
000B34BB                            ; FM5 Data
000B34BB                            GentleBreeze_FM5:
000B34BD E0C0                       	smpsPan             panCenter, $00
000B34BF A5                         	dc.b	nC3
000B34C0                            
000B34C0                            GentleBreeze_Loop06:
000B34C0 10                         	dc.b	$10
000B34C1 E607                       	smpsAlterVol        $07
000B34C3 A5                         	dc.b	nC3
000B34C4 E6F9                       	smpsAlterVol        $F9
000B34C6 08                         	dc.b	$08
000B34C7 E607                       	smpsAlterVol        $07
000B34C9 A5                         	dc.b	nC3
000B34CA E608                       	smpsAlterVol        $08
000B34CC A5                         	dc.b	nC3
000B34CD E6F1                       	smpsAlterVol        $F1
000B34CF 18                         	dc.b	$18
000B34D0 E607                       	smpsAlterVol        $07
000B34D2 10                         	dc.b	$10
000B34D3 E608                       	smpsAlterVol        $08
000B34D5 A5                         	dc.b	nC3
000B34D6 E6F1                       	smpsAlterVol        $F1
000B34D8 A5                         	dc.b	nC3
000B34D9 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000B34DE A5                         	dc.b	nC3
000B34DF                            
000B34DF                            GentleBreeze_Loop07:
000B34DF E607                       	smpsAlterVol        $07
000B34E1 A5                         	dc.b	nC3
000B34E2 E6F9                       	smpsAlterVol        $F9
000B34E4 08                         	dc.b	$08
000B34E5 E607                       	smpsAlterVol        $07
000B34E7 A5                         	dc.b	nC3
000B34E8 E608                       	smpsAlterVol        $08
000B34EA A5                         	dc.b	nC3
000B34EB E6F1                       	smpsAlterVol        $F1
000B34ED 10                         	dc.b	$10
000B34EE F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000B34F3                            
000B34F3                            GentleBreeze_Loop08:
000B34F3 A5                         	dc.b	nC3
000B34F4 E607                       	smpsAlterVol        $07
000B34F6 A5                         	dc.b	nC3
000B34F7 E6F9                       	smpsAlterVol        $F9
000B34F9 08                         	dc.b	$08
000B34FA E607                       	smpsAlterVol        $07
000B34FC A5                         	dc.b	nC3
000B34FD E608                       	smpsAlterVol        $08
000B34FF A5                         	dc.b	nC3
000B3500 E6F1                       	smpsAlterVol        $F1
000B3502 18                         	dc.b	$18
000B3503 E607                       	smpsAlterVol        $07
000B3505 10                         	dc.b	$10
000B3506 E608                       	smpsAlterVol        $08
000B3508 A5                         	dc.b	nC3
000B3509 E6F1                       	smpsAlterVol        $F1
000B350B A5                         	dc.b	nC3
000B350C F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000B3511 A5                         	dc.b	nC3
000B3512 E607                       	smpsAlterVol        $07
000B3514 A5                         	dc.b	nC3
000B3515 E6F9                       	smpsAlterVol        $F9
000B3517 08                         	dc.b	$08
000B3518 E607                       	smpsAlterVol        $07
000B351A A5                         	dc.b	nC3
000B351B E608                       	smpsAlterVol        $08
000B351D A5                         	dc.b	nC3
000B351E E6F1                       	smpsAlterVol        $F1
000B3520 10                         	dc.b	$10
000B3521 E607                       	smpsAlterVol        $07
000B3523 A5                         	dc.b	nC3
000B3524 E6F9                       	smpsAlterVol        $F9
000B3526 08                         	dc.b	$08
000B3527 E607                       	smpsAlterVol        $07
000B3529 A5                         	dc.b	nC3
000B352A E608                       	smpsAlterVol        $08
000B352C A5                         	dc.b	nC3
000B352D E6F1                       	smpsAlterVol        $F1
000B352F 01                         	dc.b	$01
000B3530                            
000B3530                            GentleBreeze_Jump01:
000B3530 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000B3533 E607                       	smpsAlterVol        $07
000B3535                            
000B3535                            GentleBreeze_Loop09:
000B3535 10                         	dc.b	$10
000B3536 E608                       	smpsAlterVol        $08
000B3538 A5                         	dc.b	nC3
000B3539 E6F1                       	smpsAlterVol        $F1
000B353B 08                         	dc.b	$08
000B353C E60F                       	smpsAlterVol        $0F
000B353E 18                         	dc.b	$18
000B353F E6F8                       	smpsAlterVol        $F8
000B3541 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000B3546 10                         	dc.b	$10
000B3547 E608                       	smpsAlterVol        $08
000B3549 A5                         	dc.b	nC3
000B354A E6F1                       	smpsAlterVol        $F1
000B354C 08                         	dc.b	$08
000B354D E60F                       	smpsAlterVol        $0F
000B354F 18                         	dc.b	$18
000B3550 E6F1                       	smpsAlterVol        $F1
000B3552                            
000B3552                            GentleBreeze_Loop0A:
000B3552 10                         	dc.b	$10
000B3553 E607                       	smpsAlterVol        $07
000B3555 A5                         	dc.b	nC3
000B3556 E6F9                       	smpsAlterVol        $F9
000B3558 08                         	dc.b	$08
000B3559 E607                       	smpsAlterVol        $07
000B355B A5                         	dc.b	nC3
000B355C E608                       	smpsAlterVol        $08
000B355E A5                         	dc.b	nC3
000B355F E6F1                       	smpsAlterVol        $F1
000B3561 18                         	dc.b	$18
000B3562 E607                       	smpsAlterVol        $07
000B3564 10                         	dc.b	$10
000B3565 E608                       	smpsAlterVol        $08
000B3567 A5                         	dc.b	nC3
000B3568 E6F1                       	smpsAlterVol        $F1
000B356A A5                         	dc.b	nC3
000B356B F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000B3570 A5                         	dc.b	nC3
000B3571                            
000B3571                            GentleBreeze_Loop0B:
000B3571 E607                       	smpsAlterVol        $07
000B3573 A5                         	dc.b	nC3
000B3574 E6F9                       	smpsAlterVol        $F9
000B3576 08                         	dc.b	$08
000B3577 E607                       	smpsAlterVol        $07
000B3579 A5                         	dc.b	nC3
000B357A E608                       	smpsAlterVol        $08
000B357C A5                         	dc.b	nC3
000B357D E6F1                       	smpsAlterVol        $F1
000B357F 10                         	dc.b	$10
000B3580 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000B3585                            
000B3585                            GentleBreeze_Loop0C:
000B3585 A5                         	dc.b	nC3
000B3586 E607                       	smpsAlterVol        $07
000B3588 A5                         	dc.b	nC3
000B3589 E6F9                       	smpsAlterVol        $F9
000B358B 08                         	dc.b	$08
000B358C E607                       	smpsAlterVol        $07
000B358E A5                         	dc.b	nC3
000B358F E608                       	smpsAlterVol        $08
000B3591 A5                         	dc.b	nC3
000B3592 E6F1                       	smpsAlterVol        $F1
000B3594 18                         	dc.b	$18
000B3595 E607                       	smpsAlterVol        $07
000B3597 10                         	dc.b	$10
000B3598 E608                       	smpsAlterVol        $08
000B359A A5                         	dc.b	nC3
000B359B E6F1                       	smpsAlterVol        $F1
000B359D A5                         	dc.b	nC3
000B359E F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000B35A3 A5                         	dc.b	nC3
000B35A4 E607                       	smpsAlterVol        $07
000B35A6 A5                         	dc.b	nC3
000B35A7 E6F9                       	smpsAlterVol        $F9
000B35A9 08                         	dc.b	$08
000B35AA E607                       	smpsAlterVol        $07
000B35AC A5                         	dc.b	nC3
000B35AD E608                       	smpsAlterVol        $08
000B35AF A5                         	dc.b	nC3
000B35B0 E6F1                       	smpsAlterVol        $F1
000B35B2 10                         	dc.b	$10
000B35B3 E607                       	smpsAlterVol        $07
000B35B5 A5                         	dc.b	nC3
000B35B6 E6F9                       	smpsAlterVol        $F9
000B35B8 08                         	dc.b	$08
000B35B9 E607                       	smpsAlterVol        $07
000B35BB A5                         	dc.b	nC3
000B35BC E608                       	smpsAlterVol        $08
000B35BE A5                         	dc.b	nC3
000B35BF E6F1                       	smpsAlterVol        $F1
000B35C1 01                         	dc.b	$01
000B35C2 E0C0                       	smpsPan             panCenter, $00
000B35C4 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000B35C7                            
000B35C7                            ; DAC Data
000B35C7                            GentleBreeze_DAC:
000B35C7 81                         	dc.b	dKick
000B35C8                            
000B35C8                            GentleBreeze_Loop00:
000B35C8 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B35CE F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000B35D3 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000B35DE                            
000B35DE                            GentleBreeze_Loop01:
000B35DE 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B35E4 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000B35E9 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000B35F3                            
000B35F3                            GentleBreeze_Jump00:
000B35F3 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000B35F7                            
000B35F7                            GentleBreeze_Loop02:
000B35F7 81                         	dc.b	dKick
000B35F8                            
000B35F8                            GentleBreeze_Loop03:
000B35F8 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000B3604 088A                       	dc.b	$08, dLowTimpani
000B3606 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000B360B 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000B3617 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000B361C F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000B3621                            
000B3621                            GentleBreeze_Loop04:
000B3621 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B3627 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000B362C 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000B3637                            
000B3637                            GentleBreeze_Loop05:
000B3637 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B363D F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000B3642 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000B364C F6FF A5                    	smpsJump            GentleBreeze_Jump00
000B364F                            
000B364F                            ; PSG 1 Data
000B364F                            GentleBreeze_PSG1:
000B364F 80                         	dc.b	nRst
000B3650                            
000B3650                            GentleBreeze_LoopPSG02:
000B3650 7F                         	dc.b	$7F
000B3651 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000B3656 08                         	dc.b	$08
000B3657 EC04                       	smpsPSGAlterVol     $04
000B3659                            
000B3659                            GentleBreeze_JumpPSG01:
000B3659 A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000B3665 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000B366D                            
000B366D                            GentleBreeze_LoopPSG03:
000B366D 7F                         	dc.b	$7F
000B366E F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000B3673 08A3 01                    	dc.b	$08, nBb2, $01
000B3676 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000B3679                            
000B3679                            ; PSG2 Data
000B3679                            GentleBreeze_PSG2:
000B3679 80                         	dc.b	nRst
000B367A                            
000B367A                            GentleBreeze_LoopPSG00:
000B367A 7F                         	dc.b	$7F
000B367B F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000B3680 08                         	dc.b	$08
000B3681 EC04                       	smpsPSGAlterVol     $04
000B3683                            
000B3683                            GentleBreeze_JumpPSG00:
000B3683 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000B368F A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000B3697                            
000B3697                            GentleBreeze_LoopPSG01:
000B3697 7F                         	dc.b	$7F
000B3698 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000B369D 08A8 01                    	dc.b	$08, nEb3, $01
000B36A0 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000B36A3                            
000B36A3                            GentleBreeze_Voices:
000B36A3                            ;	Voice $00
000B36A3                            ;	$0C
000B36A3                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000B36A3                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000B36A3                            	smpsVcAlgorithm     $04
000B36A3                            	smpsVcFeedback      $01
000B36A3                            	smpsVcUnusedBits    $00
000B36A3                            	smpsVcDetune        $07, $02, $07, $02
000B36A3                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000B36A3                            	smpsVcRateScale     $00, $00, $00, $00
000B36A3                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B36A3                            	smpsVcAmpMod        $00, $00, $00, $00
000B36A3                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000B36A3                            	smpsVcDecayRate2    $01, $00, $00, $00
000B36A3                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000B36A3                            	smpsVcReleaseRate   $09, $01, $04, $03
000B36A3 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000B36BC                            
000B36BC                            ;	Voice $01
000B36BC                            ;	$38
000B36BC                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000B36BC                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000B36BC                            	smpsVcAlgorithm     $00
000B36BC                            	smpsVcFeedback      $07
000B36BC                            	smpsVcUnusedBits    $00
000B36BC                            	smpsVcDetune        $03, $07, $01, $05
000B36BC                            	smpsVcCoarseFreq    $00, $00, $07, $04
000B36BC                            	smpsVcRateScale     $00, $02, $00, $02
000B36BC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B36BC                            	smpsVcAmpMod        $00, $00, $00, $00
000B36BC                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000B36BC                            	smpsVcDecayRate2    $00, $00, $10, $00
000B36BC                            	smpsVcDecayLevel    $00, $00, $00, $00
000B36BC                            	smpsVcReleaseRate   $08, $05, $05, $05
000B36BC 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000B36D5                            
000B36D5                            ;	Voice $02
000B36D5                            ;	$00
000B36D5                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000B36D5                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000B36D5                            	smpsVcAlgorithm     $00
000B36D5                            	smpsVcFeedback      $00
000B36D5                            	smpsVcUnusedBits    $00
000B36D5                            	smpsVcDetune        $00, $00, $00, $00
000B36D5                            	smpsVcCoarseFreq    $00, $00, $00, $00
000B36D5                            	smpsVcRateScale     $00, $00, $00, $00
000B36D5                            	smpsVcAttackRate    $00, $00, $00, $00
000B36D5                            	smpsVcAmpMod        $00, $00, $00, $00
000B36D5                            	smpsVcDecayRate1    $00, $00, $00, $00
000B36D5                            	smpsVcDecayRate2    $00, $00, $00, $00
000B36D5                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B36D5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B36D5 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000B36EE                            
000B36EE                            ;	Voice $03
000B36EE                            ;	$36
000B36EE                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000B36EE                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000B36EE                            	smpsVcAlgorithm     $06
000B36EE                            	smpsVcFeedback      $06
000B36EE                            	smpsVcUnusedBits    $00
000B36EE                            	smpsVcDetune        $00, $00, $00, $00
000B36EE                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000B36EE                            	smpsVcRateScale     $00, $00, $00, $00
000B36EE                            	smpsVcAttackRate    $1F, $00, $18, $16
000B36EE                            	smpsVcAmpMod        $00, $00, $00, $00
000B36EE                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000B36EE                            	smpsVcDecayRate2    $00, $00, $12, $00
000B36EE                            	smpsVcDecayLevel    $04, $04, $02, $00
000B36EE                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000B36EE 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000B3707                            
000B3707                            ;	Voice $04
000B3707                            ;	$07
000B3707                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000B3707                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000B3707                            	smpsVcAlgorithm     $07
000B3707                            	smpsVcFeedback      $00
000B3707                            	smpsVcUnusedBits    $00
000B3707                            	smpsVcDetune        $07, $06, $05, $00
000B3707                            	smpsVcCoarseFreq    $05, $04, $03, $05
000B3707                            	smpsVcRateScale     $00, $01, $01, $01
000B3707                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000B3707                            	smpsVcAmpMod        $00, $00, $00, $00
000B3707                            	smpsVcDecayRate1    $17, $17, $17, $17
000B3707                            	smpsVcDecayRate2    $00, $00, $00, $00
000B3707                            	smpsVcDecayLevel    $02, $02, $02, $02
000B3707                            	smpsVcReleaseRate   $06, $06, $06, $06
000B3707 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000B3720                            
000B3720                            ;	Voice $05
000B3720                            ;	$3C
000B3720                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000B3720                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000B3720                            	smpsVcAlgorithm     $04
000B3720                            	smpsVcFeedback      $07
000B3720                            	smpsVcUnusedBits    $00
000B3720                            	smpsVcDetune        $06, $06, $02, $02
000B3720                            	smpsVcCoarseFreq    $01, $03, $01, $01
000B3720                            	smpsVcRateScale     $00, $00, $00, $00
000B3720                            	smpsVcAttackRate    $0E, $14, $10, $13
000B3720                            	smpsVcAmpMod        $00, $00, $00, $00
000B3720                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000B3720                            	smpsVcDecayRate2    $04, $04, $04, $04
000B3720                            	smpsVcDecayLevel    $02, $01, $01, $01
000B3720                            	smpsVcReleaseRate   $07, $07, $07, $07
000B3720 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000B3739                            
000B3739                            
000B373A 00                         		even
000B373A                            ; ---------------------------------------------------------------------------
000B373A                            ; Sound	effect pointers
000B373A                            ; ---------------------------------------------------------------------------
000B373A 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000B3746 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000B3752 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000B375E 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000B376A 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000B3776 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000B3782 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000B378E 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000B379A 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000B37A6 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000B37B2 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000B37BE 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000B37CA 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000B37D6 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000B37E2 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000B37EE 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000B37FA 0000 0000                  SoundD0Index:	dc.l SoundD0
000B37FE 0000 0000 0000 0000        		dc.l SoundD1, SoundD2
000B3806                            SoundA0:	include	sound\jump.asm
000B3806                            SndA0_Jump_Header:
000B3806 =00000001                  smpsHeaderStartSong = 1
000B3806 0000                       	smpsHeaderVoice     SndA0_Jump_Voices
000B3808 01                         	smpsHeaderTempoSFX  $01
000B3809 01                         	smpsHeaderChanSFX   $01
000B380A                            
000B3810                            
000B3810                            ; PSG1 Data
000B3810                            SndA0_Jump_PSG1:
000B3810 F500                       	smpsPSGvoice        $00
000B3812 A201                       	dc.b	nA2, $01
000B3814 F002 01F8 65               	smpsModSet          $02, $01, $F8, $65
000B3819 9C15                       	dc.b	nEb2, $15
000B381B F2                         	smpsStop
000B381C                            
000B381C                            ; Song seems to not use any FM voices
000B381C                            SndA0_Jump_Voices:
000B381C                            SndA0_Jump_Voices:
000B381C                            		even
000B381C                            SoundA1:	incbin	sound\soundA1.bin
000B3846                            		even
000B3846                            SoundA2:	incbin	sound\soundA2.bin
000B3866                            		even
000B3866                            SoundA3:	incbin	sound\soundA3.bin
000B3898                            		even
000B3898                            SoundA4:	incbin	sound\soundA4.bin
000B38CE                            		even
000B38CE                            SoundA5:	include	sound\fart.asm
000B38CE                            Fart_Header:
000B38CE =00000001                  smpsHeaderStartSong = 1
000B38CE 0000                       	smpsHeaderVoice     Fart_Voices
000B38D0 01                         	smpsHeaderTempoSFX  $01
000B38D1 04                         	smpsHeaderChanSFX   $04
000B38D2                            
000B38EA                            
000B38EA                            Fart_FM3:
000B38EC E607                       	smpsAlterVol        $07
000B38EE E0C0                       	smpsPan             panCenter, $00
000B38F0 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000B38F5 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000B38F8 E1FE                       	smpsAlterNote       $FE
000B38FA A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000B38FD E100                       	smpsAlterNote       $00
000B38FF A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000B3904 F2                         	smpsStop
000B3905                            
000B3905                            ; FM4 Data
000B3905                            Fart_FM4:
000B3907 E0C0                       	smpsPan             panCenter, $00
000B3909 8006                       	dc.b	nRst, $06
000B390D E616                       	smpsAlterVol        $16
000B390F E080                       	smpsPan             panLeft, $00
000B3911 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000B3916 A212                       	dc.b	nA2, $12
000B3918 E60A                       	smpsAlterVol        $0A
000B391A E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B391D E603                       	smpsAlterVol        $03
000B391F E7A2                       	dc.b	smpsNoAttack, nA2
000B3921 E603                       	smpsAlterVol        $03
000B3923 E7A2                       	dc.b	smpsNoAttack, nA2
000B3925 E604                       	smpsAlterVol        $04
000B3927 E7A2                       	dc.b	smpsNoAttack, nA2
000B3929 E606                       	smpsAlterVol        $06
000B392B E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000B392E E610                       	smpsAlterVol        $10
000B3930 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B3933 E610                       	smpsAlterVol        $10
000B3935 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000B393A F2                         	smpsStop
000B393B                            
000B393B                            ; FM5 Data
000B393B                            Fart_FM5:
000B393D E0C0                       	smpsPan             panCenter, $00
000B393F 8009                       	dc.b	nRst, $09
000B3943 E616                       	smpsAlterVol        $16
000B3945 E040                       	smpsPan             panRight, $00
000B3947 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000B394C A215                       	dc.b	nA2, $15
000B394E E60A                       	smpsAlterVol        $0A
000B3950 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B3953 E603                       	smpsAlterVol        $03
000B3955 E7A2                       	dc.b	smpsNoAttack, nA2
000B3957 E603                       	smpsAlterVol        $03
000B3959 E7A2                       	dc.b	smpsNoAttack, nA2
000B395B E604                       	smpsAlterVol        $04
000B395D E7A2                       	dc.b	smpsNoAttack, nA2
000B395F E606                       	smpsAlterVol        $06
000B3961 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000B3964 E610                       	smpsAlterVol        $10
000B3966 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B3969 E610                       	smpsAlterVol        $10
000B396B E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000B3970 F2                         	smpsStop
000B3971                            
000B3971                            ; PSG3 Data
000B3971                            Fart_PSG3:
000B3971 F2                         	smpsStop
000B3972                            
000B3972                            ; FM Voices
000B3972                            Fart_Voices:
000B3972                            ;	Voice $00
000B3972                            ;	$39
000B3972                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000B3972                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000B3972                            	smpsVcAlgorithm     $01
000B3972                            	smpsVcFeedback      $07
000B3972                            	smpsVcUnusedBits    $00
000B3972                            	smpsVcDetune        $00, $07, $03, $07
000B3972                            	smpsVcCoarseFreq    $01, $01, $02, $00
000B3972                            	smpsVcRateScale     $00, $03, $03, $03
000B3972                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3972                            	smpsVcAmpMod        $00, $00, $00, $00
000B3972                            	smpsVcDecayRate1    $00, $00, $00, $04
000B3972                            	smpsVcDecayRate2    $00, $00, $16, $1F
000B3972                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000B3972                            	smpsVcReleaseRate   $0A, $09, $00, $00
000B3972 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000B398B                            
000B398B                            ;	Voice $01
000B398B                            ;	$00
000B398B                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000B398B                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000B398B                            	smpsVcAlgorithm     $00
000B398B                            	smpsVcFeedback      $00
000B398B                            	smpsVcUnusedBits    $00
000B398B                            	smpsVcDetune        $00, $00, $00, $00
000B398B                            	smpsVcCoarseFreq    $00, $00, $00, $00
000B398B                            	smpsVcRateScale     $00, $00, $00, $00
000B398B                            	smpsVcAttackRate    $00, $00, $00, $00
000B398B                            	smpsVcAmpMod        $00, $00, $00, $00
000B398B                            	smpsVcDecayRate1    $00, $00, $00, $00
000B398B                            	smpsVcDecayRate2    $00, $00, $00, $00
000B398B                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B398B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B398B 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000B398B 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000B39A4                            		even
000B39A4                            SoundA6:	incbin	sound\soundA6.bin
000B39D4                            		even
000B39D4                            SoundA7:	incbin	sound\soundA7.bin
000B3A04                            		even
000B3A04                            SoundA8:	incbin	sound\soundA8.bin
000B3A38                            		even
000B3A38                            SoundA9:	incbin	sound\soundA9.bin
000B3A4A                            		even
000B3A4A                            SoundAA:	incbin	sound\soundAA.bin
000B3A8C                            		even
000B3A8C                            SoundAB:	incbin	sound\soundAB.bin
000B3AAC                            		even
000B3AAC                            SoundAC:	incbin	sound\soundAC.bin
000B3AE0                            		even
000B3AE0                            SoundAD:	incbin	sound\soundAD.bin
000B3B16                            		even
000B3B16                            SoundAE:	incbin	sound\soundAE.bin
000B3B60                            		even
000B3B60                            SoundAF:	incbin	sound\soundAF.bin
000B3B8E                            		even
000B3B8E                            SoundB0:	incbin	sound\soundB0.bin
000B3BC0                            		even
000B3BC0                            SoundB1:	incbin	sound\soundB1.bin
000B3BEC                            		even
000B3BEC                            SoundB2:	incbin	sound\soundB2.bin
000B3C3C                            		even
000B3C3C                            SoundB3:	incbin	sound\soundB3.bin
000B3C86                            		even
000B3C86                            SoundB4:	include	sound\soundB4.asm
000B3C86                            SndB4_Bumper_Header:
000B3C86 =00000001                  smpsHeaderStartSong = 1
000B3C86 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000B3C88 01                         	smpsHeaderTempoSFX  $01
000B3C89 03                         	smpsHeaderChanSFX   $03
000B3C8A                            
000B3C9C                            
000B3C9C                            ; FM5 Data
000B3C9C                            SndB4_Bumper_FM5:
000B3C9E F600 00                    	smpsJump            SndB4_Bumper_Jump00
000B3CA1                            
000B3CA1                            ; FM4 Data
000B3CA1                            SndB4_Bumper_FM4:
000B3CA1 F2                         	smpsStop
000B3CA2                            
000B3CA2                            SndB4_Bumper_Jump00:
000B3CA2 A020                       	dc.b	nG2, $20
000B3CA4 F2                         	smpsStop
000B3CA5                            
000B3CA5                            ; FM3 Data
000B3CA5                            SndB4_Bumper_FM3:
000B3CA5 F2                         	smpsStop
000B3CA6                            
000B3CA6                            SndB4_Bumper_Voices:
000B3CA6                            ;	Voice $00
000B3CA6                            ;	$32
000B3CA6                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000B3CA6                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000B3CA6                            	smpsVcAlgorithm     $02
000B3CA6                            	smpsVcFeedback      $06
000B3CA6                            	smpsVcUnusedBits    $00
000B3CA6                            	smpsVcDetune        $07, $07, $02, $00
000B3CA6                            	smpsVcCoarseFreq    $00, $00, $00, $04
000B3CA6                            	smpsVcRateScale     $00, $00, $00, $00
000B3CA6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3CA6                            	smpsVcAmpMod        $00, $00, $00, $00
000B3CA6                            	smpsVcDecayRate1    $08, $00, $00, $09
000B3CA6                            	smpsVcDecayRate2    $0B, $00, $00, $09
000B3CA6                            	smpsVcDecayLevel    $00, $00, $00, $00
000B3CA6                            	smpsVcReleaseRate   $0F, $00, $00, $00
000B3CA6 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000B3CA6 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000B3CC0 00                         		even
000B3CC0                            SoundB5:	incbin	sound\soundB5.bin
000B3CDE 00                         		even
000B3CDE                            SoundB6:	incbin	sound\soundB6.bin
000B3CFC                            		even
000B3CFC                            SoundB7:	incbin	sound\soundB7.bin
000B3D38                            		even
000B3D38                            SoundB8:	incbin	sound\soundB8.bin
000B3D56                            		even
000B3D56                            SoundB9:	incbin	sound\soundB9.bin
000B3DBA                            		even
000B3DBA                            SoundBA:	incbin	sound\soundBA.bin
000B3E1E                            		even
000B3E1E                            SoundBB:	incbin	sound\soundBB.bin
000B3E4A                            		even
000B3E4A                            SoundBC:	incbin	sound\soundBC.bin
000B3E8C                            		even
000B3E8C                            SoundBD:	incbin	sound\soundBD.bin
000B3EE0                            		even
000B3EE0                            SoundBE:	incbin	sound\soundBE.bin
000B3F1A                            		even
000B3F1A                            SoundBF:	incbin	sound\soundBF.bin
000B3F8C                            		even
000B3F8C                            SoundC0:	incbin	sound\soundC0.bin
000B3FBA                            		even
000B3FBA                            SoundC1:	incbin	sound\soundC1.bin
000B4014                            		even
000B4014                            SoundC2:	incbin	sound\soundC2.bin
000B403E                            		even
000B403E                            SoundC3:	incbin	sound\soundC3.bin
000B40B8                            		even
000B40B8                            SoundC4:	incbin	sound\soundC4.bin
000B41B6                            		even
000B41B6                            SoundC5:	incbin	sound\soundC5.bin
000B421E                            		even
000B421E                            SoundC6:	incbin	sound\soundC6.bin
000B4260                            		even
000B4260                            SoundC7:	incbin	sound\soundC7.bin
000B428E                            		even
000B428E                            SoundC8:	incbin	sound\soundC8.bin
000B42A0                            		even
000B42A0                            SoundC9:	incbin	sound\soundC9.bin
000B42CE                            		even
000B42CE                            SoundCA:	incbin	sound\soundCA.bin
000B42FC                            		even
000B42FC                            SoundCB:	incbin	sound\soundCB.bin
000B4348                            		even
000B4348                            SoundCC:	incbin	sound\C9.ssf
000B4376                            		even
000B4376                            SoundCD:	incbin	sound\soundCD.bin
000B43A2                            		even
000B43A2                            SoundCE:	incbin	sound\soundCE.bin
000B43C0 00                         		even
000B43C0                            SoundCF:	incbin	sound\soundCF.bin
000B43F8                            		even
000B43F8                            SoundD0:	incbin	sound\soundD0.bin
000B4432                            		even
000B4432                            SoundD1:	incbin	sound\MenuBIT.bin
000B4440                            		even
000B4440                            SoundD2:	incbin	sound\MenuAffirm.bin
000B44A8 00                         		even
000B44A8                            SegaPCM:	incbin	sound\segapcm.bin
000CE5FE                            SegaPCM_end:
000CE5FE                            	even
000CE5FE                            
000CE5FE                            IdiotPCM:	incbin	sound\youare.bin
000D86CF                            IdiotPCM_end:
000D86D0 00                         	even
000D86D0                            
000D86D0                            Minecraft:	include	minecraft\code\main.asm
000D86D0                            ; Minecraft: Very Legacy Console Edition
000D86D0                            ; Main file
000D86D0                            
000D86D0                            ;	align	$20000
000D86D0                            	opt	l.
000D86D0                            	include	"minecraft\code\variables.asm"
000D86D0                            ; Minecraft: Very Legacy Console Edition
000D86D0                            ; Variable Definitions
000D86D0                            
000D86D0 =00000040                  MAP_HEIGHT	equ	64
000D86D0 =00000100                  MAP_WIDTH	equ	256
000D86D0                            
000D86D0                            		rsset	$FF0000
000D86D0 =00FF0000                  mcRAM		rs.b	0
000D86D0 =00FF0000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000D86D0 =00FF4000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000D86D0                            
000D86D0                            		rsset	$FFFF8000
000D86D0 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000D86D0 =FFFF8E80                  planeBuffer_End	rs.b	0
000D86D0 =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
000D86D0                            
000D86D0 =FFFF8E80                  scrollBuffer	rs.l	256
000D86D0                            
000D86D0 =FFFF9280                  camXPosFG	rs.w	1			; camera foreground layout x position
000D86D0 =FFFF9282                  camYposFG	rs.w	1			; camera foreground layout y position
000D86D0 =FFFF9284                  camXPosBG	rs.w	1			; camera background layout x position
000D86D0 =FFFF9286                  camYposBG	rs.w	1			; camera background layout y position
000D86D0                            
000D86D0 =FFFF9288                  vblankWait	rs.w	1
000D86D0 =FFFF928A                  cloudFrameCnt	rs.w	1
000D86D0 =FFFF928C                  cloudSkew	rs.l	36
000D86D0                            
000D86D0                            
000D86D0                            		rsset	__rs&$FFFFFF
000D86D0 =00FF931C                  mcRAM_End	rs.b	0
000D86D0                            
000D86D0                            ; VRAM Definitions
000D86D0 =00000020                  TILE		equ	32			; number of bytes a single tile occupies in VRAM
000D86D0                            
000D86D0                            		rsreset
000D86D0 =00000000                  vramEmptyTile	rs.b	TILE
000D86D0 =00000020                  vramTerrain	rs.b	255*TILE
000D86D0 =00002000                  vramBackground	rs.b	408*TILE
000D86D0                            
000D86D0 =0000C000                  VRAM_PLANE_A	equ	$C000
000D86D0 =0000D000                  VRAM_PLANE_W	equ	$D000
000D86D0 =0000E000                  VRAM_PLANE_B	equ	$E000
000D86D0                            
000D86D0 =0000F800                  VRAM_SPR_LIST	equ	$F800
000D86D0 =0000FC00                  VRAM_HSCROLL	equ	$FC00
000D86D0 =0000FC00                  VRAM_HSCROLL	equ	$FC00
000D86D0                            	include	"minecraft\code\macros.asm"
000D86D0                            ; =========================================================================================================================================================
000D86D0                            ; MegaDrive macros
000D86D0                            ; =========================================================================================================================================================
000D86D0                            clrRAM		macro	starta, enda
000D86D0                            		local	endaddr
000D86D0                            		if narg<2
000D86D0                            endaddr			EQUS	"\starta\_End"
000D86D0                            		else
000D86D0                            endaddr			EQUS	"\enda"
000D86D0                            		endif
000D86D0                            		moveq	#0,d0
000D86D0                            		if ((\starta)&$8000)=0
000D86D0                            			lea	\starta,a1
000D86D0                            		else
000D86D0                            			lea	(\starta).w,a1
000D86D0                            		endif
000D86D0                            		if (\starta)&1
000D86D0                            			move.b	d0,(a1)+
000D86D0                            		endif
000D86D0                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
000D86D0                            .Clear\@:	move.l	d0,(a1)+
000D86D0                            		dbf	d1,.Clear\@
000D86D0                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
000D86D0                            			move.w	d0,(a1)+
000D86D0                            		endif
000D86D0                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
000D86D0                            			move.b	d0,(a1)+
000D86D0                            		endif
000D86D0                            		endm
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0                            ; Disable interrupts
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0                            ; ARGUMENTS:
000D86D0                            ;	Nothing
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0                            ; RETURNS:
000D86D0                            ;	Nothing
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0                            intsOff		macros
000D86D0                            		ori	#$700,sr
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0                            ; Enable interrupts
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0                            ; ARGUMENTS:
000D86D0                            ;	Nothing
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0                            ; RETURNS:
000D86D0                            ;	Nothing
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0                            intsOn		macros
000D86D0                            		andi	#$F8FF,sr
000D86D0                            
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0                            ; VDP command instruction
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0                            ; ARGUMENTS:
000D86D0                            ;	addr	- Address in VDP memory
000D86D0                            ;	type	- Type of VDP memory
000D86D0                            ;	rwd	- VDP command
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0                            ; RETURNS:
000D86D0                            ;	Nothing
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0 =00000021                  VRAM		EQU	%100001		; VRAM
000D86D0 =0000002B                  CRAM		EQU	%101011		; CRAM
000D86D0 =00000025                  VSRAM		EQU	%100101		; VSRAM
000D86D0 =0000000C                  READ		EQU	%001100		; VDP read
000D86D0 =00000007                  WRITE		EQU	%000111		; VDP write
000D86D0 =00000027                  DMA		EQU	%100111		; VDP DMA
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0                            vdpCmd		macro	ins, addr, type, rwd, end, end2
000D86D0                            		if narg=5
000D86D0                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
000D86D0                            		elseif narg>=6
000D86D0                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
000D86D0                            		else
000D86D0                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
000D86D0                            		endif
000D86D0                            		endm
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0                            ; VDP DMA from 68000 memory to VDP memory
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0                            ; ARGUMENTS:
000D86D0                            ;	src	- Source address in 68000 memory
000D86D0                            ;	dest	- Destination address in VDP memory
000D86D0                            ;	len	- Length of data in bytes
000D86D0                            ;	type	- Type of VDP memory
000D86D0                            ;	a6.l	- VDP control port
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0                            ; RETURNS:
000D86D0                            ;	Nothing
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0                            dma68k		macro	src, dest, len, type
000D86D0                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
000D86D0                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
000D86D0                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
000D86D0                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
000D86D0                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
000D86D0                            		move.w	(sp)+,(a6)
000D86D0                            		endm
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D86D0                            
000D86D0                            MC_Init:
000D86D0 007C 0700                  		intsOff						; disable CPU interrupts
000D86D4 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
000D86DC                            
000D86DC 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
000D86E2 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
000D86E6                            
000D86E6 3CBC 8230                  		move.w	#$8200+(VRAM_PLANE_A>>10),(a6)		; set plane A address
000D86EA 3CBC 8334                  		move.w	#$8300+(VRAM_PLANE_W>>10),(a6)		; set plane W address
000D86EE 3CBC 8407                  		move.w	#$8400+(VRAM_PLANE_B>>13),(a6)		; set plane B address
000D86F2 3CBC 857C                  		move.w	#$8500+(VRAM_SPR_LIST>>9),(a6)		; set sprite table address
000D86F6                            		
000D86F6 3CBC 8B03                  		move.w	#$8B03,(a6)				; EXT-INT off, VScroll by screen, HScroll by line
000D86FA 3CBC 8D3F                  		move.w	#$8D00+(VRAM_HSCROLL>>10),(a6)		; set HScroll table address
000D86FE 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000D8702 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
000D8706                            
000D8718 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
000D871C                            
000D871C                            .waitVBlank:	
000D871C 44D6                       		move.w	(a6),ccr				; is v-blank active?
000D871E 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
000D8720                            
000D8754 6100 0000                  		bsr.w	MC_LoadBackground
000D8758 6100 0000                  		bsr.w	MC_LoadWorld
000D875C                            
000D875C 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
000D8760 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
000D8764 027C F8FF                  		intsOn						; enable CPU interrupts
000D8768                            
000D8768 4278 928A                  		clr.w	(cloudFrameCnt).w		
000D876C                            
000D876C                            .gameLoop:
000D876C 50F8 9288                  		st.b	(vblankWait).w
000D8770 6100 0000                  		bsr.w	MC_UpdateScrollBuffer
000D8774 6100                       		bsr.s	MC_RenderBlocks
000D8776                            
000D8776                            .spin:
000D8776 4A38 9288                  		tst.b	(vblankWait).w
000D877A 67F0                       		beq.s	.gameLoop
000D877C 60F8                       		bra.s	.spin
000D877E                            ; ---------------------------------------------------------------------------
000D877E                            
000D877E                            ; ===========================================================================
000D877E                            ; ---------------------------------------------------------------------------
000D877E                            ; Render the Visible Portion of the World to the Screen
000D877E                            ; ---------------------------------------------------------------------------
000D877E                            MC_RenderBlocks:
000D877E 3038 9280                  		move.w	(camXPosFG).w,d0	; Get the camera's x coordinate
000D8782 E648                       		lsr.w	#3,d0			; Divide by 8 to get the index of the tile within the row
000D8784 0240 00FF                  		andi.w	#$FF,d0			; Cap to a maximum index value of 0xFF
000D8788                            
000D8788 3238 9282                  		move.w	(camYPosFG).w,d1	; Get the camera's y coordinate
000D878C EB49                       		lsl.w	#5,d1			; Make into row offset
000D878E 0241 3F00                  		andi.w	#$3F00,d1		; ^
000D8792                            
000D8792 41F9 00FF 0000             		lea	(mapCollBlocks).l,a0	; Load the world map collision layer into a0
000D8798 43F9 00FF 0000             		lea	(mapCollBlocks).l,a1	; Load the world map wall layer into a1
000D879E 45F8 8000                  		lea	(planeBuffer).w,a2	; Load the plane A buffer into a2
000D87A2 7600                       		moveq	#0,d3			; Clear d3
000D87A4 7C1C                       		moveq	#28,d6			; Load the number of rows as the outer loop counter
000D87A6                            
000D87A6                            .renderScreen:
000D87A6 7E28                       		moveq	#40,d7			; Load the number of blocks in each row as the inner loop counter
000D87A8 3401                       		move.w	d1,d2			; Load the offset into the current row into d2
000D87AA 1400                       		move.b	d0,d2			; ^
000D87AC                            
000D87AC                            .renderRow:
000D87AC 1630 2000                  		move.b	(a0,d2.w),d3		; Get the block ID at the current main layout coordinates
000D87B0 6700                       		beq.s	.renderWall
000D87B2                            
000D87B2 383C 8000                  		move.w	#$8000,d4			; Set the priority bit
000D87B6 D643                       		add.w	d3,d3				; Turn tile ID into index
000D87B8 887B 3000                  		or.w	.renderProperties(pc,d3.w),d4	; Combine with the tile render properties
000D87BC 34C4                       		move.w	d4,(a2)+			; Load the corresponding tile to the plane A buffer
000D87BE                            		
000D87BE 5202                       		addq.b	#1,d2			; Increment the index with wrap-around within the current row
000D87C0 51CF FFEA                  		dbf	d7,.renderRow		; Loop until the entire visible row is rendered
000D87C4 6000                       		bra.s	.endRenderRow		; Branch
000D87C6                            
000D87C6                            .renderWall:
000D87C6 1631 2000                  		move.b	(a1,d2.w),d3				; Get the block ID at the current wall layout coordinates
000D87CA D643                       		add.w	d3,d3					; Turn tile ID into index
000D87CC 34FB 3000                  		move.w	.renderProperties(pc,d3.w),(a2)+	; Load the corresponding tile to the plane A buffer
000D87D0                            
000D87D0 5202                       		addq.b	#1,d2			; Increment the index with wrap-around within the current row
000D87D2 51CF FFD8                  		dbf	d7,.renderRow		; Loop until the entire visible row is rendered
000D87D6                            
000D87D6                            .endRenderRow:
000D87D6 D4FC 002E                  		adda.w	#(64-41)*2,a2		; Skip the rest of the row in the plane buffer
000D87DA 0641 0100                  		add.w	#$100,d1		; Increment to the next row
000D87DE 0C41 3F00                  		cmpi.w	#$3F00,d1		; Check to make sure we're still in bounds
000D87E2 6200                       		bhi.s	.inBounds		; If so, branch
000D87E4 323C 3F00                  		move.w	#$3F00,d1		; If not, render the last row for the rest of the screen (Bedrock)
000D87E8                            
000D87E8                            .inBounds:	
000D87E8 51CE FFBC                  		dbf	d6,.renderScreen	; Loop until the entire screen is rendered
000D87EC 4E75                       		rts
000D87EE                            
000D87EE                            ; ---------------------------------------------------------------------------
000D87EE                            block_entry	macro	tileID, palLine, priority
000D87EE                            	if (narg<3)
000D87EE                            		dc.w	(palLine<<13)|tileID
000D87EE                            	else
000D87EE                            		dc.w	$8000|(palLine<<13)|tileID
000D87EE                            	endif
000D87EE                            		endm
000D87EE                            
000D87EE                            .renderProperties:
000D882E                            
000D884C                            ; ---------------------------------------------------------------------------
000D884C                            
000D884C                            ; ===========================================================================
000D884C                            ; ---------------------------------------------------------------------------
000D884C                            ; Update Foreground and Background Scrolling
000D884C                            ; ---------------------------------------------------------------------------
000D884C =00000500                  CLOUD_SCROLL_RATE	equ	1280
000D884C                            
000D884C                            MC_UpdateScrollBuffer:
000D884C 41F8 8E80                  		lea	(scrollBuffer).w,a0
000D8850 7E13                       		moveq	#20-1,d7
000D8852 3038 9280                  		move.w	(camXPosFG).w,d0			; update scrolling
000D8856 0240 0007                  		andi.w	#7,d0					; ^
000D885A 4440                       		neg.w	d0					; ^
000D885C 4840                       		swap	d0					; ^
000D885E 4240                       		clr.w	d0
000D8860                            
000D8860                            .blankBGSegment:
000D8860 20C0                       		move.l	d0,(a0)+
000D8862 51CF FFFC                  		dbf	d7,.blankBGSegment
000D8866                            
000D8866 43F8 928C                  		lea	(cloudSkew).w,a1
000D886A 7200                       		moveq	#0,d1
000D886C 7E23                       		moveq	#36-1,d7
000D886E                            
000D886E 5378 928A                  		subq.w	#1,(cloudFrameCnt).w
000D8872 6A00                       		bpl.s	.cloudBGSegment
000D8874                            	
000D8874 31FC 04FF 928A             		move.w	#CLOUD_SCROLL_RATE-1,(cloudFrameCnt).w
000D887A                            
000D887A                            .resetClouds:
000D887A 20C0                       		move.l	d0,(a0)+
000D887C 4299                       		clr.l	(a1)+
000D887E 51CF FFFA                  		dbf	d7,.resetClouds
000D8882 6000                       		bra.s	.return
000D8884                            
000D8884                            .cloudBGSegment:
000D8884 2411                       		move.l	(a1),d2
000D8886 D4BB 1000                  		add.l	.cloudSkewFactor(pc,d1.w),d2
000D888A 22C2                       		move.l	d2,(a1)+
000D888C                            
000D888C 4842                       		swap	d2
000D888E 3002                       		move.w	d2,d0
000D8890 4440                       		neg.w	d0
000D8892 20C0                       		move.l	d0,(a0)+
000D8894                            		
000D8894 5841                       		addq.w	#4,d1
000D8896 51CF FFEC                  		dbf	d7,.cloudBGSegment
000D889A                            
000D889A                            .return:
000D889A 4E75                       		rts
000D889C                            ; ---------------------------------------------------------------------------
000D889C                            .cloudSkewFactor:
000D889C =00000080                  	.i: = 128
000D889C                            
000D889C                            	rept	36
000D889C                            	dc.l	(.i<<16)/CLOUD_SCROLL_RATE
000D889C                            	.i: = .i-2
000D889C 0000 1999 0000 1933 0000+  	endr
000D892C                            
000D892C                            ; ===========================================================================
000D892C                            ; ---------------------------------------------------------------------------
000D892C                            ; Clear The Screen
000D892C                            ; ---------------------------------------------------------------------------
000D892C                            MC_ClearScreen:
000D892C 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
000D8930                            
000D8930 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
000D8936 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000D893A 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
000D8940 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000D8946                            
000D8946 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000D8948 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
000D894A                            
000D894A 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
000D8950 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000D8954 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
000D895A 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000D8960                            
000D8960 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000D8962 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
000D8964                            
000D8964 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
000D896A 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000D896E 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
000D8974 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000D897A                            
000D897A 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000D897C 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
000D897E                            
000D897E 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000D8982 4E75                       		rts						; return
000D8984                            ; ---------------------------------------------------------------------------
000D8984                            
000D8984                            ; ===========================================================================
000D8984                            ; ---------------------------------------------------------------------------
000D8984                            ; Load the Background
000D8984                            ; ---------------------------------------------------------------------------
000D8984                            MC_LoadBackground:
000D899E                            
000D89A4 41F9 0000 0000             		lea	MC_BGMap,a0
000D89AA 3E3C 07FF                  		move.w	#(32*64)-1,d7				; Set loop count to plane size - 1
000D89AE                            
000D89AE                            .loop:
000D89AE 3018                       		move.w	(a0)+,d0
000D89B0 6700                       		beq.s	.empty
000D89B2 0640 0100                  		add.w	#(vramBackground>>5),d0
000D89B6 0040 6000                  		ori.w	#(3<<13),d0
000D89BA                            
000D89BA                            .empty:
000D89BA 3D40 FFFC                  		move.w	d0,-4(a6)
000D89BE 51CF FFEE                  		dbf	d7,.loop
000D89C2 4E75                       		rts						; return
000D89C4                            ; ---------------------------------------------------------------------------
000D89C4                            
000D89C4                            ; ===========================================================================
000D89C4                            ; ---------------------------------------------------------------------------
000D89C4                            ; Load the World
000D89C4                            ; ---------------------------------------------------------------------------
000D89C4                            MC_LoadWorld:
000D89C4 41F9 0000 0000             		lea	MC_TestMap,a0
000D89CA 43F9 00FF 4000             		lea	mapWallBlocks,a1
000D89D0 3E3C 0000                  		move.w	#((MC_TestMap_End-MC_TestMap)>>2)-1,d7
000D89D4                            
000D89D4                            .loadWalls:
000D89D4 22D8                       		move.l	(a0)+,(a1)+
000D89D6 51CF FFFC                  		dbf	d7,.loadWalls
000D89DA                            
000D89DA 41F9 0000 0000             		lea	MC_TestMap,a0
000D89E0 43F9 00FF 0000             		lea	mapCollBlocks,a1
000D89E6 3E3C 0000                  		move.w	#((MC_TestMap_End-MC_TestMap)>>2)-1,d7
000D89EA                            
000D89EA                            .loadBlocks:
000D89EA 22D8                       		move.l	(a0)+,(a1)+
000D89EC 51CF FFFC                  		dbf	d7,.loadBlocks
000D89F0 4E75                       		rts						; return
000D89F2                            ; ---------------------------------------------------------------------------
000D89F2                            
000D89F2                            ; ===========================================================================
000D89F2                            ; ---------------------------------------------------------------------------
000D89F2                            ; VBlank Interrupt
000D89F2                            ; ---------------------------------------------------------------------------
000D89F2                            MC_VInt:
000D8A26                            
000D8A26                            ;		move.w	(camXPosFG).w,d0			; update scrolling
000D8A26                            ;		andi.w	#7,d0					; ^
000D8A26                            ;		neg.w	d0					; ^
000D8A26                            ;	vdpCmd	move.l, VRAM_HSCROLL, VRAM, WRITE, (a6)		; ^
000D8A26                            ;		move.w	d0,-4(a6)				; ^
000D8A26                            
000D8A26                            ;		addq.w	#1,(camXPosFG).w			
000D8A26 51F8 9288                  		sf.b	(vblankWait).w
000D8A2A 4E73                       		rte						; return
000D8A2C                            ; ---------------------------------------------------------------------------
000D8A2C                            
000D8A2C                            ; ---------------------------------------------------------------------------
000D8A2C                            MC_Palette:
000D8A2C 0E84 08AE 068E 046C 0EE0+  	dc.w	$E84, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
000D8A4C 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
000D8A6C 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
000D8A8C 0000 0EEE 0CAA 0A88 0866+  	dc.w	$000, $EEE, $CAA, $A88, $866, $644, $422, $46A, $448, $226, $6C4, $680, $8CE, $6AC, $EA6, $E44
000D8AAC                            ; ---------------------------------------------------------------------------
000D8AAC                            MC_Terrain:
000D8AAC                            	incbin	"minecraft\assets\bin\terrain.bin"
000D8F2C                            MC_Terrain_End:
000D8F2C                            	even
000D8F2C                            ; ---------------------------------------------------------------------------
000D8F2C                            MC_BGArt:
000D8F2C                            	incbin	"minecraft\assets\bin\bgArt.bin"
000DC22C                            MC_BGArt_End:
000DC22C                            	even
000DC22C                            ; ---------------------------------------------------------------------------
000DC22C                            MC_BGMap:
000DC22C                            	incbin	"minecraft\assets\bin\bgMap.bin"
000DD22C                            MC_BGMap_End:
000DD22C                            	even
000DD22C                            ; ---------------------------------------------------------------------------
000DD22C                            MC_TestMap:
000DD22C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 00
000DD32C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 01
000DD42C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 02
000DD52C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 03
000DD62C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 04
000DD72C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 05
000DD82C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 06
000DD92C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 07
000DDA2C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 09
000DDB2C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0A
000DDC2C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0B
000DDD2C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0C
000DDE2C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0E
000DDF2C                            	
000DDF2C                            ;	dcb.b	32,$01	; Row 0F
000DDF2C                            ;	dcb.b	32,$02	; Row 0F
000DDF2C                            ;	dcb.b	32,$03	; Row 0F
000DDF2C                            ;	dcb.b	32,$04	; Row 0F
000DDF2C                            ;	dcb.b	32,$05	; Row 0F
000DDF2C                            ;	dcb.b	32,$06	; Row 0F
000DDF2C                            ;	dcb.b	32,$07	; Row 0F
000DDF2C                            ;	dcb.b	32,$08	; Row 0F
000DDF2C                            
000DDF2C                            ;	dcb.b	256,$03	; Row 10
000DDF2C                            ;	dcb.b	256,$02	; Row 11
000DDF2C                            ;	dcb.b	256,$02	; Row 12
000DDF2C                            ;	dcb.b	256,$02	; Row 13
000DDF2C                            ;	dcb.b	256,$01	; Row 14
000DDF2C                            ;	dcb.b	256,$01	; Row 15
000DDF2C                            ;	dcb.b	256,$01	; Row 16
000DDF2C                            ;	dcb.b	256,$01	; Row 17
000DDF2C                            ;	dcb.b	256,$01	; Row 19
000DDF2C                            ;	dcb.b	256,$01	; Row 1A
000DDF2C                            ;	dcb.b	256,$01	; Row 1B
000DDF2C                            ;	dcb.b	256,$01	; Row 1C
000DDF2C                            ;	dcb.b	256,$01	; Row 1E
000DDF2C                            ;	dcb.b	256,$01	; Row 1F
000DDF2C                            MC_TestMap_End:
000DDF2C                            MC_TestMap_End:
000DDF2C                            		
000DDF2C                            		include beebush\_BEEBUSH.68k
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            ; I'm Glenn Quagmire, and this is Code Bush.
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            
000DDF2C                                    include "beebush/Mega Drive.inc"
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            ; Basic system memory location equates
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            
000DDF2C =00000000                  CARTRIDGE       EQU     $0                    
000DDF2C =00080000                  CARTRIDGEE      EQU     $80000
000DDF2C =00080000                  CARTRIDGESZ     EQU     CARTRIDGEE-CARTRIDGE
000DDF2C                            
000DDF2C =00FF0000                  WORKRAM         EQU     $FF0000
000DDF2C =01000000                  WORKRAME        EQU     $1000000
000DDF2C =00010000                  WORKRAMSZ       EQU     WORKRAME-WORKRAM
000DDF2C                            
000DDF2C =00A00000                  Z80RAM          EQU     $A00000
000DDF2C =00A02000                  Z80RAME		EQU	$A02000
000DDF2C =00002000                  Z80RAMSZ	EQU	Z80RAME-Z80RAM
000DDF2C =00A11100                  Z80BUS		EQU	$A11100
000DDF2C =00A11200                  Z80RES	        EQU	$A11200
000DDF2C                            
000DDF2C =00080000                  CARTRAM         EQU     CARTRIDGEE	
000DDF2C                            	
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            ; System and VDP registers 
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            
000DDF2C                            ; I/O
000DDF2C                            
000DDF2C                            ; Word
000DDF2C =00A10000                  VERSION_	EQU	$A10000		; Hardware version
000DDF2C =00A10002                  IODATA1_	EQU	$A10002		; Pad 1 Data
000DDF2C =00A10004                  IODATA2_	EQU	$A10004         ; Pad 2 Data
000DDF2C =00A10006                  IODATA3_	EQU	$A10006         ; EXT Data
000DDF2C =00A10008                  IOCTRL1_	EQU	$A10008         ; Pad 1 Ctrl
000DDF2C =00A1000A                  IOCTRL2_	EQU	$A1000A         ; Pad 2 Ctrl
000DDF2C =00A1000C                  IOCTRL3_	EQU	$A1000C         ; EXT Ctrl
000DDF2C                            
000DDF2C                            ; Byte
000DDF2C =00A10001                  VERSION         EQU     VERSION_+1
000DDF2C =00A10003                  IODATA1         EQU     IODATA1_+1
000DDF2C =00A10005                  IODATA2         EQU     IODATA2_+1
000DDF2C =00A10007                  IODATA3         EQU     IODATA3_+1
000DDF2C =00A10009                  IOCTRL1         EQU     IOCTRL1_+1
000DDF2C =00A1000B                  IOCTRL2         EQU     IOCTRL2_+1
000DDF2C =00A1000D                  IOCTRL3         EQU     IOCTRL3_+1
000DDF2C                            
000DDF2C                            ; Sound
000DDF2C =00A04000                  YMADDR0		EQU	$A04000		; YM2612 address port 0
000DDF2C =00A04001                  YMDATA0		EQU	$A04001		; YM2612 data port 0
000DDF2C =00A04002                  YMADDR1		EQU	$A04002		; YM2612 address port 1
000DDF2C =00A04003                  YMDATA1		EQU	$A04003		; YM2612 data port 1
000DDF2C =00C00011                  PSGCTRL		EQU	$C00011		; PSG control port
000DDF2C                            
000DDF2C                            ; VDP
000DDF2C =00C00000                  VDPDATA		EQU	$C00000		; VDP data port
000DDF2C =00C00004                  VDPCTRL		EQU	$C00004		; VDP control port
000DDF2C =00C00008                  VDPHVCNT	EQU	$C00008		; VDP H/V counter
000DDF2C =00C0001C                  VDPDEBUG	EQU	$C0001C		; VDP debug register
000DDF2C                            
000DDF2C                            ; TMSS
000DDF2C =00A14000                  TMSSSEGA	EQU	$A14000		; TMSS "SEGA" register
000DDF2C =00A14100                  TMSSMODE	EQU	$A14100		; TMSS bus mode
000DDF2C                            
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            ; VDP operation codes
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            
000DDF2C =40000000                  VRAMWRITE	EQU	$40000000		; VRAM write
000DDF2C =C0000000                  CRAMWRITE	EQU	$C0000000		; CRAM write
000DDF2C =40000010                  VSRAMWRITE	EQU	$40000010		; VSRAM write
000DDF2C =00000000                  VRAMREAD	EQU	$00000000		; VRAM read
000DDF2C =00000020                  CRAMREAD	EQU	$00000020		; CRAM read
000DDF2C =00000010                  VSRAMREAD	EQU	$00000010		; VSRAM read
000DDF2C =40000080                  VRAMDMA		EQU	$40000080		; VRAM DMA
000DDF2C =C0000080                  CRAMDMA		EQU	$C0000080		; CRAM DMA
000DDF2C =40000090                  VSRAMDMA	EQU	$40000090		; VSRAM DMA
000DDF2C =000000C0                  VRAMCOPY	EQU	$000000C0		; VRAM DMA copy
000DDF2C                            
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            ; VDP status codes
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            
000DDF2C =00000000                  PAL_CLOCK:          EQU 0
000DDF2C =00000001                  DMA_RUNNING:        EQU 1 
000DDF2C =00000002                  HBLANKING:       	EQU 2
000DDF2C =00000003                  VBLANKING:       	EQU 3
000DDF2C =00000004                  ODDFRAME:        	EQU 4
000DDF2C =00000005                  SPRITE_COLLIDE:		EQU 5
000DDF2C =00000006                  SPRITE_OVERFLOW: 	EQU 6
000DDF2C =00000007                  VBLANK_PENDING:  	EQU 7
000DDF2C =00000008                  FIFO_FULL:       	EQU 8
000DDF2C =00000009                  FIFO_EMPTY:      	EQU 9
000DDF2C                            
000DDF2C                            
000DDF2C                            
000DDF2C                                    include "beebush/Macros.inc"
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            ; General purpose macros for defining pointer data
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            
000DDF2C                            dclww	macro	long, word1, word2
000DDF2C                            	dc.l 	\long
000DDF2C                            	dc.w 	\word1
000DDF2C                            	dc.w 	\word2
000DDF2C                            	endm
000DDF2C                            
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            ; Stop the Z80
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            
000DDF2C                            Z80STOP macro
000DDF2C                            	move.w	#$100,Z80BUS			; Request Z80 bus access
000DDF2C                            .Wait\@:
000DDF2C                            	btst	#0,Z80BUS			; Was the request acknowledged?
000DDF2C                            	bne.s	.Wait\@				; If not, wait
000DDF2C                            	endm
000DDF2C                            
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            ; Stop the Z80
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            
000DDF2C                            Z80START macro
000DDF2C                            	move.w	#0,Z80BUS
000DDF2C                            	endm
000DDF2C                            
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            ; VDP command set
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            
000DDF2C                            VDPCMD macro ins, addr, type, rwd, end, end2
000DDF2C                            	local	cmd
000DDF2C                            cmd	= (\type\\rwd\)|(((\addr)&$3FFF)<<16)|((\addr)/$4000)
000DDF2C                            	if narg=5
000DDF2C                            		\ins	#\#cmd,\end
000DDF2C                            	elseif narg>=6
000DDF2C                            		\ins	#(\#cmd)\end,\end2
000DDF2C                            	else
000DDF2C                            		\ins	cmd
000DDF2C                            	endif
000DDF2C                            	endm
000DDF2C                            
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            ; Wait for DMA
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            
000DDF2C                            DMAWAIT macro ctrl
000DDF2C                            .Wait\@:
000DDF2C                            	if narg>0
000DDF2C                            		btst	#1,1(\ctrl)		; Is DMA active?
000DDF2C                            	else
000DDF2C                            		move.w	VDPCTRL,d0		; Is DMA active?
000DDF2C                            		btst	#1,d0
000DDF2C                            	endif
000DDF2C                            	bne.s	.Wait\@				; If so, wait
000DDF2C                            	endm
000DDF2C                            
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            ; VDP DMA from 68000 memory to VDP memory
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            ; PARAMETERS:
000DDF2C                            ;	src  - Source address in 68000 memory
000DDF2C                            ;	dest - Destination address in VDP memory
000DDF2C                            ;	len  - Length of data in bytes
000DDF2C                            ;	type - Type of VDP memory
000DDF2C                            ;	port - Address register for the VDP port
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            ; kys
000DDF2C =FFFFF644                  vdpIntBuffer = $FFFFF644
000DDF2C                            
000DDF2C                            VDPDMA  macro src, dest, len, type, port
000DDF2C                            	; DMA data
000DDF2C                            	lea	VDPCTRL,\port
000DDF2C                            	move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(\port)
000DDF2C                            	move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(\port)
000DDF2C                            	move.w	#$9700|(((\src)>>17)&$7F),(\port)
000DDF2C                            	VDPCMD	move.w,\dest,\type,DMA,>>16,(\port)
000DDF2C                            	VDPCMD	move.w,\dest,\type,DMA,&$FFFF,vdpIntBuffer.w
000DDF2C                            	move.w	vdpIntBuffer.w,(\port)
000DDF2C                            	endm
000DDF2C                            
000DDF2C                            ; -------------------------------------------------------------------------
000DDF2C                            ; VDP DMA fill VRAM with byte
000DDF2C                            ; -------------------------------------------------------------------------
000DDF2C                            ; PARAMETERS:
000DDF2C                            ;	addr - Address in VRAM
000DDF2C                            ;	len  - Length of fill in bytes
000DDF2C                            ;	byte - Byte to fill VRAM with
000DDF2C                            ;	inc  - VDP autoincrement value
000DDF2C                            ;	port - Control port address register
000DDF2C                            ; -------------------------------------------------------------------------
000DDF2C                            
000DDF2C                            VDPFILL macro addr, len, byte, inc, port
000DDF2C                            	; DMA fill
000DDF2C                            	lea	VDPCTRL,\port
000DDF2C                            	move.w	#$8F00+\inc,(\port)
000DDF2C                            	move.l	#$93009400|((((\len)-1)&$FF00)>>8)|((((\len)-1)&$FF)<<16),(\port)
000DDF2C                            	move.w	#$9780,(\port)
000DDF2C                            	VDPCMD	move.l,\addr,VRAM,DMA,(\port)
000DDF2C                            	move.w	#(\byte)<<8,VDPDATA
000DDF2C                            	DMAWAIT	\port
000DDF2C                            	endm
000DDF2C                            
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            ; Macro to create ids from objects
000DDF2C                            ; ---------------------------------------------------------------------------
000DDF2C                            
000DDF2C                            OBJDEF      macro   addr, id
000DDF2C                                    dc.l    \addr
000DDF2C                            \id     rs.b    1
000DDF2C                                    endm
000DDF2C                                    endm
000DDF2C                            
000DDF2C                                    opt     l.
000DDF2C =FFFFCC00                  hscroll =       $FFFFCC00
000DDF2C =FFFFF800                  vdpSprites =    $FFFFF800
000DDF2C =FFFFFB00                  palette =       $FFFFFB00
000DDF2C =FFFFFE04                  frameCntr =     $FFFFFE04
000DDF2C                                    rsset   $FFFFF600
000DDF2C                            
000DDF2C =FFFFF600                  gamemode:               rs.b 1  
000DDF2C =FFFFF601                  submode                 rs.b 1
000DDF2C =FFFFF602                  joypadMirr:             rs.b 1    
000DDF2C =FFFFF603                  joypadPressMirr:        rs.b 1  
000DDF2C =FFFFF604                  joypad:                 rs.b 1    
000DDF2C =FFFFF605                  joypadPress:            rs.b 1  
000DDF2C                                                    rs.b 2  
000DDF2C =FFFFF608                  distance:               rs.b 4
000DDF2C =FFFFF60C                  displayMode:            rs.b 2    
000DDF2C                                                    rs.b 6
000DDF2C =FFFFF614                  genericTimer:           rs.b 2    
000DDF2C =FFFFF616                  mainAPosY:              rs.b 2    
000DDF2C =FFFFF618                  mainBPosY:              rs.b 2    
000DDF2C =FFFFF61A                  mainAPosX:              rs.b 2    
000DDF2C =FFFFF61C                  mainBPosX:              rs.b 2    
000DDF2C =FFFFF61E                  mainZPosY:              rs.b 2    
000DDF2C =FFFFF620                  mainZPosX:              rs.b 2    
000DDF2C =FFFFF622                  mainCPosX:              rs.b 2    
000DDF2C =FFFFF624                  mainCPosY:              rs.b 2    
000DDF2C =FFFFF626                  palFadeArgs:            rs.b 0
000DDF2C =FFFFF626                  palFadeOff:             rs.b 1    
000DDF2C =FFFFF627                  palFadeSize:            rs.b 1    
000DDF2C =FFFFF628                  vblankUnk1:             rs.b 1    
000DDF2C =FFFFF629                  vblankUnk2:             rs.b 1    
000DDF2C =FFFFF62A                  vblankCmd:              rs.b 1   
000DDF2C                                    rsset   $FFFFF700
000DDF2C =FFFFF700                  cameraAPosX:            rs.b 4                  
000DDF2C =FFFFF704                  cameraAPosY:            rs.b 4                  
000DDF2C =FFFFF708                  cameraBPosX:            rs.b 4                  
000DDF2C =FFFFF70C                  cameraBPosY:            rs.b 4                  
000DDF2C =FFFFF710                  cameraCPosX:            rs.b 4                  
000DDF2C =FFFFF714                  cameraCPosY:            rs.b 4                  
000DDF2C =FFFFF718                  cameraZPosX:            rs.b 4                  
000DDF2C =FFFFF71C                  cameraZPosY:            rs.b 4  
000DDF2C                            
000DDF2C =FFFFD000                  OBJECTRAM               EQU $FFFFD000 
000DDF2C =00000040                  OBJSZ                   EQU 64
000DDF2C                            OBJECTRAMSZ             EQU OBJECTRAME-OBJECTRAM    
000DDF2C                            
000DDF2C                                    rsset           $FFFFD000 
000DDF2C =FFFFD000                  objSlot00:      rs.b    OBJSZ
000DDF2C =FFFFD040                  objSlot01:      rs.b    OBJSZ
000DDF2C =FFFFD080                  objSlot02:      rs.b    OBJSZ
000DDF2C =FFFFD0C0                  objSlot03:      rs.b    OBJSZ
000DDF2C =FFFFD100                  objSlot04:      rs.b    OBJSZ
000DDF2C =FFFFD140                  objSlot05:      rs.b    OBJSZ
000DDF2C =FFFFD180                  objSlot06:      rs.b    OBJSZ
000DDF2C =FFFFD1C0                  objSlot07:      rs.b    OBJSZ  
000DDF2C =FFFFD200                  objSlot08:      rs.b    OBJSZ  
000DDF2C =FFFFD240                  objSlot09:      rs.b    OBJSZ  
000DDF2C =FFFFD280                  objSlot0A:      rs.b    OBJSZ  
000DDF2C =FFFFD2C0                  objSlot0B:      rs.b    OBJSZ  
000DDF2C =FFFFD300                  objSlot0C:      rs.b    OBJSZ
000DDF2C =FFFFD340                  objSlot0D:      rs.b    OBJSZ
000DDF2C =FFFFD380                  objSlot0E:      rs.b    OBJSZ
000DDF2C =FFFFD3C0                  objSlot0F:      rs.b    OBJSZ
000DDF2C =FFFFD400                  objSlot10:      rs.b    OBJSZ  
000DDF2C =FFFFD440                  objSlot11:      rs.b    OBJSZ
000DDF2C =FFFFD480                  objSlot12:      rs.b    OBJSZ
000DDF2C =FFFFD4C0                  objSlot13:      rs.b    OBJSZ
000DDF2C =FFFFD500                  objSlot14:      rs.b    OBJSZ  
000DDF2C =FFFFD540                  objSlot15:      rs.b    OBJSZ
000DDF2C =FFFFD580                  objSlot16:      rs.b    OBJSZ
000DDF2C =FFFFD5C0                  objSlot17:      rs.b    OBJSZ
000DDF2C =FFFFD600                  objSlot18:      rs.b    OBJSZ  
000DDF2C =FFFFD640                  objSlot19:      rs.b    OBJSZ
000DDF2C =FFFFD680                  objSlot1A:      rs.b    OBJSZ
000DDF2C =FFFFD6C0                  objSlot1B:      rs.b    OBJSZ
000DDF2C =FFFFD700                  objSlot1C:      rs.b    OBJSZ
000DDF2C =FFFFD740                  objSlot1D:      rs.b    OBJSZ
000DDF2C =FFFFD780                  objSlot1E:      rs.b    OBJSZ
000DDF2C =FFFFD7C0                  objSlot1F:      rs.b    OBJSZ
000DDF2C =FFFFD800                  objsAlloc:              rs.b    OBJSZ*96
000DDF2C                            OBJECTRAME:
000DDF2C                            
000DDF2C                            GM_BEEBUSH:  
000DDF2C 1038 F601                        	move.b  submode.w,d0
000DDF30 0240 001C                          andi.w  #$1C,d0
000DDF34 4EBB 0000                          jsr     .Index(pc,d0.w)
000DDF38 4E75                               rts
000DDF3A                            
000DDF3A                            ; ---------------------------------------------------------------------------
000DDF3A                            
000DDF3A =00000000                  SMNO_BEEBUSH_INIT       = 0*4   ; Init 
000DDF3A =00000004                  SMNO_BEEBUSH_INTRO      = 1*4   ; Intro seq.
000DDF3A =00000008                  SMNO_BEEBUSH_STATIC     = 2*4   ; Static scr.
000DDF3A =0000000C                  SMNO_BEEBUSH_INITMAIN   = 3*4   ; Main Init
000DDF3A =00000010                  SMNO_BEEBUSH_MAIN       = 4*4   ; Main game
000DDF3A                            
000DDF3A                            .Index:      
000DDF3A 6000 0000                          bra.w   BEEBUSH_INIT
000DDF3E 6000 0000                          bra.w   BEEBUSH_INTRO
000DDF42 6000 0000                          bra.w   BEEBUSH_STATIC
000DDF46 6000 0000                          bra.w   BEEBUSH_INITMAIN
000DDF4A 6000 0000                          bra.w   BEEBUSH_MAIN
000DDF4E                            .Null:
000DDF4E 4E75                               rts 
000DDF50                            
000DDF50                            ; ---------------------------------------------------------------------------
000DDF50                            ; Initialization
000DDF50                            ; ---------------------------------------------------------------------------
000DDF50                            
000DDF50                            BEEBUSH_INIT:   
000DDF50 46FC 2700                  	move    #$2700,sr  		; interrupt disable               
000DDF54 4EB8 15E0                          jsr     ClearArtListQueue	; clr art lists, we're not using them
000DDF58 4EB8 1E28                          jsr     PalFadeOut		; fade palette out
000DDF5C 4EB8 12C6                          jsr     InitScreen		
000DDF60 4DF9 00C0 0004                     lea     VDPCTRL,a6		; init regs
000DDF66 3038 F60C                          move.w  displayMode.w,d0	; Get mode reg. 1 info
000DDF6A 0200 00BF                          andi.b  #%10111111,d0           ; Mask display enable bit
000DDF6E 33C0 00C0 0004                     move.w  d0,VDPCTRL              ; Set mode reg. 1 
000DDF74 3CBC 8004                          move.w  #$8000+%00000100,(a6)
000DDF78 3CBC 8230                          move.w  #$8230,(a6)
000DDF7C 3CBC 8407                          move.w  #$8407,(a6)
000DDF80 3CBC 857C                          move.w  #$857C,(a6)
000DDF84 3CBC 8720                          move.w  #$8720,(a6)
000DDF88 3CBC 8B00                          move.w  #$8B00+%00000000,(a6)
000DDF8C 43F8 D000                          lea     OBJECTRAM.w,a1
000DDF90 7000                               moveq   #0,d0
000DDF92 323C 013F                          move.w  #((OBJSZ*20)/4)-1,d1
000DDF96                            
000DDF96                            .ClearObjects:                         
000DDF96 22C0                               move.l  d0,(a1)+
000DDF98 51C9 FFFC                          dbf     d1,.ClearObjects
000DDF9C 43F8 F700                          lea     cameraAPosX.w,a1
000DDFA0 7000                               moveq   #0,d0
000DDFA2 323C 0007                          move.w  #$8-1,d1
000DDFA6                            
000DDFA6                            .ClearCams:                            
000DDFA6 22C0                               move.l  d0,(a1)+
000DDFA8 51C9 FFFC                          dbf     d1,.ClearCams
000DDFAC                            
000DDFAC 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
000DDFB2 4EB8 2B0E                          jsr     VSync
000DDFB6                            
000DDFB6 11FC 0000 D000                     move.b  #BBUSH_OBJNO_BODY,objSlot00.w        
000DDFBC 11FC 0000 D040                     move.b  #BBUSH_OBJNO_HEAD,objSlot01.w      
000DDFC2 11FC 0000 D080                     move.b  #BBUSH_OBJNO_EYES,objSlot02.w     
000DDFC8 11FC 0000 D0C0                     move.b  #BBUSH_OBJNO_MOUTH,objSlot03.w   
000DDFCE 11FC 0000 D100                     move.b  #BBUSH_OBJNO_DBUG,objSlot04.w
000DDFD4                            
000DDFD4 =FFFFD000                  membushBody  = objSlot00
000DDFD4 =FFFFD040                  membushHead  = objSlot01       
000DDFD4 =FFFFD080                  membushEyes  = objSlot02
000DDFD4 =FFFFD0C0                  membushMouth = objSlot03    
000DDFD4                                                    
000DDFD4 31FC 0000 F602                     move.w  #0,joypadMirr.w
000DDFDA 31FC 0000 F604                     move.w  #0,joypad.w
000DDFE0                            
000DDFE0                                    ; Load art direct
000DDFE0                            
000DDFEA 41F9 0000 0000                     lea     ArtNem_BEEBUSH,a0                       ; Get compressed bitstream
000DDFF0 4EB8 1442                          jsr     NemDec
000DDFF4                            
000DDFFE 41F9 0000 0000                     lea     ArtNem_QUAGMIRE,a0                      ; Get compressed bitstream
000DE004 4EB8 1442                          jsr     NemDec
000DE008                            
000DE012 3E3C 01FF                          move.w  #(8*64)-1,d7
000DE016                            
000DE016                            .FillStatic:
000DE016 4EB8 2B1A                          jsr     CalcRandom
000DE01A 23C0 00C0 0000                     move.l  d0,VDPDATA
000DE020 D280                               add.l   d0,d1
000DE022 23C1 00C0 0000                     move.l  d1,VDPDATA
000DE028                            
000DE028 51CF FFEC                          dbf     d7,.FillStatic
000DE02C                            
000DE02C                                    ; Load screen A tilemap
000DE02C                            
000DE02C 43F9 0000 0000                     lea     MapScrA_BEEBUSH,a1
000DE038 7227                               moveq   #40-1,d1                     ; Set Width
000DE03A 741B                               moveq   #28-1,d2                     ; Set Height
000DE03C 4EB8 1422                          jsr     DrawTileMap                  ; Draw Tilemap to location
000DE040                            
000DE040                                    ; Load screen B tilemap
000DE040                            
000DE040 43F9 0000 0000                     lea     MapScrB_BEEBUSH,a1
000DE04C 7227                               moveq   #40-1,d1                     ; Set Width
000DE04E 741B                               moveq   #28-1,d2                     ; Set Height
000DE050 4EB8 1422                          jsr     DrawTileMap                  ; Draw Tilemap to location
000DE054                            
000DE054                                    ; Load palette into buffer directly
000DE054                            
000DE054 7E3F                               moveq   #64-1,d7
000DE056 45F9 0000 0000                     lea     Pal_BEEBUSH,a2
000DE05C 47F8 FB00                          lea     palette,a3
000DE060                            
000DE060                            .LoadToBuffer:                         
000DE060 26DA                               move.l  (a2)+,(a3)+
000DE062 51CF FFFC                          dbf     d7,.LoadToBuffer
000DE066                            
000DE066                                    ; !!!DEBUG!!!
000DE066                            
000DE066 4EB9 0000 0000                     jsr     _beebushDbugLoad
000DE06C                            
000DE06C 3038 F60C                          move.w  displayMode.w,d0          
000DE070 0000 0040                          ori.b   #%1000000,d0
000DE074                            
000DE074 33C0 00C0 0004                     move.w  d0,VDPCTRL		     ; Enable display when ready
000DE07A 11FC 0004 F601                     move.b  #SMNO_BEEBUSH_INTRO,submode.w ; Move to next mode
000DE080 4E75                               rts
000DE082                            
000DE082                            ; ---------------------------------------------------------------------------
000DE082                            ; Main cutscene loop
000DE082                            ; ---------------------------------------------------------------------------
000DE082                            
000DE082                            BEEBUSH_INTRO:                              
000DE082 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
000DE088 4EB8 2B0E                          jsr     VSync
000DE08C 5278 FE04                          addq.w  #1,frameCntr.w
000DE090 6100 0000                          bsr.w   _beebushCamShake
000DE094 6100 0000                          bsr.w   _beebushRunObjects    
000DE098 4EB9 0000 DEC2                     jsr     DrawObjects
000DE09E                            
000DE09E 4A38 D070                          tst.b   membushHead+$30
000DE0A2 6700                               beq.s   .NoChg
000DE0A4 11FC 0008 F601                     move.b  #SMNO_BEEBUSH_STATIC,submode.w ; Move to next mode
000DE0AA 31FC 003C F614                     move.w  #60,genericTimer.w
000DE0B0 6100 0000                          bsr.w   _beebushClrSprites
000DE0B4                            
000DE0B4                            .NoChg: 
000DE0B4 4E75                               rts 
000DE0B6                            
000DE0B6                            ; ---------------------------------------------------------------------------
000DE0B6                            ; Static Transition sequence
000DE0B6                            ; ---------------------------------------------------------------------------
000DE0B6                            
000DE0B6                            BEEBUSH_STATIC:                              
000DE0B6 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
000DE0BC 4EB8 2B0E                          jsr     VSync
000DE0C0 5278 FE04                          addq.w  #1,frameCntr.w
000DE0C4 6100 0000                          bsr.w   _beebushDrawStatic
000DE0C8 5378 F614                          subq.w  #1,genericTimer.w
000DE0CC 6600 0000                          bne.w   .Exit
000DE0D0 11FC 000C F601                     move.b  #SMNO_BEEBUSH_INITMAIN,submode.w ; Move to next mode
000DE0D6 4E75                               rts
000DE0D8                            .Exit:
000DE0D8                            
000DE0D8 4E75                               rts
000DE0DA                            
000DE0DA                            ; ---------------------------------------------------------------------------
000DE0DA                            ; Initialize main sequence
000DE0DA                            ; ---------------------------------------------------------------------------
000DE0DA                            
000DE0DA =FFFFD000                  membushPlayer = objSlot00
000DE0DA                            
000DE0DA                            BEEBUSH_INITMAIN:                              
000DE0DA 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
000DE0E0 4EB8 2B0E                          jsr     VSync
000DE0E4 43F9 0000 0000                     lea     MapScrB_BEEBUSHMAIN,a1
000DE0EA 33FC 8B00 00C0 0004                move.w  #$8B00+%00000000,VDPCTRL
000DE0F8 723F                               moveq   #64-1,d1                     ; Set Width
000DE0FA 741B                               moveq   #28-1,d2                     ; Set Height
000DE0FC 4EB8 1422                          jsr     DrawTileMap                  ; Draw Tilemap to location
000DE100 43F8 D000                          lea     OBJECTRAM.w,a1
000DE104 7000                               moveq   #0,d0
000DE106 323C 013F                          move.w  #((OBJSZ*20)/4)-1,d1
000DE10A                            
000DE10A                            .ClearObjects:                         
000DE10A 22C0                               move.l  d0,(a1)+
000DE10C 51C9 FFFC                          dbf     d1,.ClearObjects
000DE110 11FC 0000 D000                     move.b  #BBUSH_OBJNO_PLAYER,objSlot00.w
000DE116 21FC 1234 5678 F608                move.l  #$12345678,distance
000DE11E 11FC 0010 F601                     move.b  #SMNO_BEEBUSH_MAIN,submode.w ; Move to next mode
000DE124 4E75                               rts
000DE126                            
000DE126                            ; ---------------------------------------------------------------------------
000DE126                            ; Main    lGod wfyuck ioff
000DE126                            ; ---------------------------------------------------------------------------
000DE126                            
000DE126                            BEEBUSH_MAIN:                              
000DE126 11FC 001C F62A                     move.b  #VBLNO_BEEBUSHSCR,vblankCmd.w
000DE12C 4EB8 2B0E                          jsr     VSync
000DE130 5278 FE04                          addq.w  #1,frameCntr.w
000DE134 6100 0000                          bsr.w   _beebushScroll
000DE138 6100 0000                          bsr.w   _beebushRunObjects    
000DE13C 4EB9 0000 DEC2                     jsr     DrawObjects
000DE142 4E75                               rts
000DE144                            
000DE144                            ; ---------------------------------------------------------------------------
000DE144                            
000DE144                            Pal_BEEBUSH:
000DE144                                    incbin	"beebush/Data/BEEBUSH.PAL"
000DE1C4                                    even
000DE1C4                            
000DE1C4                            MapScrA_BEEBUSH:
000DE1C4                                    incbin  "beebush/Data/BEEBUSH_SCR_A.MAP"
000DEA84                                    even
000DEA84                            
000DEA84                            MapScrB_BEEBUSH:
000DEA84                                    incbin  "beebush/Data/BEEBUSH_SCR_B.MAP"
000DF344                                    even
000DF344                            
000DF344                            MapScrB_BEEBUSHMAIN:
000DF344                                    incbin  "beebush/Data/BEEBUSH_MAIN_B.MAP"
000E0144                                    even
000E0144                            
000E0144                            ArtNem_BEEBUSH:
000E0144                                    incbin  "beebush/Data/BEEBUSH_ART.NEM"
000E04A8                                    even
000E04A8                            
000E04A8                            ArtNem_QUAGMIRE:
000E04A8                                    incbin  "beebush/Data/QUAGMIRE_ART.NEM"
000E1480                                    even
000E1480                            
000E1480                            ; ---------------------------------------------------------------------------
000E1480                            ; Do camera unsteadiness movement
000E1480                            ;
000E1480                            ; camera A = REC. and camera overlay
000E1480                            ; camera B = background (moves)
000E1480                            ; ---------------------------------------------------------------------------
000E1480                            
000E1480 =FFFFF760                  beeSinCntr = $FFFFF760
000E1480 =FFFFF762                  beeSin     = $FFFFF762      
000E1480 =FFFFF764                  beeCos     = $FFFFF764
000E1480                            
000E1480                            _beebushCamShake:
000E1480 5438 F760                          add.b   #2,beeSinCntr.w
000E1484 1038 F760                          move.b  beeSinCntr.w,d0
000E1488 4EB8 2B40                          jsr     CalcSinCos
000E148C 31C0 F764                          move.w  d0,beeCos.w
000E1490 31C1 F762                          move.w  d1,beeSin.w
000E1494 EE40                               asr.w   #7,d0
000E1496 EC41                               asr.w   #6,d1
000E1498                            
000E1498                                    
000E1498 31C0 F61C                          move.w  d0,mainBPosX
000E149C 4440                               neg.w   d0
000E149E 31C0 F708                          move.w  d0,cameraBPosX
000E14A2                            
000E14A2 31C1 F618                          move.w  d1,mainBPosY
000E14A6 31C1 F70C                          move.w  d1,cameraBPosY
000E14AA 4E75                               rts
000E14AC                            
000E14AC                            ; ---------------------------------------------------------------------------
000E14AC                            ; Main scrolling for gameplay
000E14AC                            ; ---------------------------------------------------------------------------
000E14AC                            
000E14AC                            
000E14AC                            _beebushScroll:                    
000E14AC 43F8 CC00                          lea     hscroll.w,a1
000E14B0                            
000E14B0 3238 F700                          move.w  cameraAPosX.w,d1
000E14B4 E241                               asr.w   #1,d1
000E14B6 31C1 F708                          move.w  d1,cameraBPosX
000E14BA                            
000E14BA 3238 F710                          move.w  cameraCPosX.w,d1
000E14BE D241                               add.w   d1,d1
000E14C0 31C1 F718                          move.w  d1,cameraZPosX.w
000E14C4                            
000E14C4 3038 F708                          move.w  cameraBPosX.w,d0
000E14C8                            
000E14C8                                    ; Far away BG segment
000E14C8                            
000E14C8 323C 0047                          move.w  #72-1,d1
000E14CC E480                               asr.l   #2,d0
000E14CE                            .FarBG:                         
000E14CE 22C0                               move.l  d0,(a1)+
000E14D0 51C9 FFFC                          dbf     d1,.FarBG
000E14D4                            
000E14D4                                    ; Sidewalk perspective effect
000E14D4                            
000E14D4 3038 F710                          move.w  cameraCPosX.w,d0
000E14D8 E440                               asr.w   #2,d0
000E14DA 31C0 F622                          move.w  d0,mainCPosX.w
000E14DE 0C40 0021                          cmp.w   #32+1,d0
000E14E2 6600                               bne.s   .SkipBRes
000E14E4 31FC 0000 F710                     move.w  #0,cameraCPosX.w
000E14EA 31FC 0000 F718                     move.w  #0,cameraZPosX.w
000E14F0 303C 0000                          move.w  #0,d0
000E14F4                            .SkipBRes
000E14F4 4440                               neg     d0
000E14F6 3438 F718                          move.w  cameraZPosX.w,d2
000E14FA E442                               asr.w   #2,d2
000E14FC 31C2 F620                          move.w  d2,mainZPosX.w
000E1500 4442                               neg     d2
000E1502 9440                               sub.w   d0,d2
000E1504 48C2                               ext.l   d2
000E1506 E182                               asl.l   #8,d2
000E1508 85FC 0068                          divs.w  #$68,d2
000E150C 48C2                               ext.l   d2
000E150E E182                               asl.l   #8,d2
000E1510 3600                               move.w  d0,d3
000E1512 323C 001F                          move.w  #32-1,d1
000E1516                            
000E1516                            .Road:                                                    
000E1516 3003                               move.w  d3,d0
000E1518 4440                               neg.w   d0
000E151A 22C0                               move.l  d0,(a1)+
000E151C 4843                               swap    d3
000E151E D682                               add.l   d2,d3
000E1520 4843                               swap    d3
000E1522 51C9 FFF2                          dbf     d1,.Road
000E1526                            
000E1526                                    ; Grass (far away)
000E1526                            
000E1526 3038 F708                          move.w  cameraBPosX.w,d0
000E152A 2400                               move.l  d0,d2
000E152C E482                               asr.l   #2,d2
000E152E 9082                               sub.l   d2,d0
000E1530 323C 001F                          move.w  #32-1,d1
000E1534                            
000E1534                            .GrassFar
000E1534                            
000E1534 22C0                               move.l  d0,(a1)+
000E1536 51C9 FFFC                          dbf     d1,.GrassFar
000E153A                            
000E153A 3038 F708                          move.w  cameraBPosX.w,d0
000E153E 323C 001F                          move.w  #32-1,d1
000E1542                                    
000E1542                            .GrassMid
000E1542                            
000E1542 22C0                               move.l  d0,(a1)+
000E1544 51C9 FFFC                          dbf     d1,.GrassMid
000E1548                            
000E1548 3038 F708                          move.w  cameraBPosX.w,d0
000E154C 2400                               move.l  d0,d2
000E154E E482                               asr.l   #2,d2
000E1550 D082                               add.l   d2,d0
000E1552 323C 001F                          move.w  #32-1,d1
000E1556                            
000E1556                            .GrassClose
000E1556                            
000E1556 22C0                               move.l  d0,(a1)+
000E1558 51C9 FFFC                          dbf     d1,.GrassClose
000E155C 31F8 F700 F61A                     move.w  cameraAPosX.w,mainAPosX
000E1562 31F8 F708 F61C                     move.w  cameraBPosX.w,mainBPosX
000E1568 4E75                               rts
000E156A                            
000E156A                            ; ---------------------------------------------------------------------------
000E156A                            ; Clear screen sprites
000E156A                            ; ---------------------------------------------------------------------------
000E156A                            
000E156A                            _beebushClrSprites:
000E156A 21FC 0000 0000 F616                move.l  #0,mainAPosY.w
000E1572 21FC 0000 0000 F61A                move.l  #0,mainAPosX.w
000E157A                            
000E157A 43F8 F800                          lea     vdpSprites.w,a1
000E157E 7000                               moveq   #0,d0
000E1580 323C 009F                          move.w  #$A0-1,d1               ; Clear all sprites
000E1584                            
000E1584                            .ClearSprites:
000E1584 22C0                               move.l  d0,(a1)+
000E1586 51C9 FFFC                          dbf     d1,.ClearSprites
000E158A 43F8 CC00                          lea     hscroll.w,a1
000E158E 7000                               moveq   #0,d0
000E1590 323C 0100                          move.w  #$100,d1
000E1594                            
000E1594                            .ClearHScroll:
000E1594 22C0                               move.l  d0,(a1)+
000E1596 51C9 FFFC                          dbf     d1,.ClearHScroll
000E159A 4E75                               rts
000E159C                            
000E159C                            ; ---------------------------------------------------------------------------
000E159C                            ; Draw tilemap static for transitory sequences
000E159C                            ; Draws 2 "random" tiles out of a memory space location (document later idk)
000E159C                            ; ---------------------------------------------------------------------------
000E159C                            
000E159C                            _beebushDrawStatic:
000E159C 4DF9 00C0 0000                     lea     VDPDATA,a6                      ; a6 = VDPDATA        
000E15A8 383C 000E                          move.w  #(30/2)-1,d4                    ; d4 = width / 2
000E15AC 3A3C 0013                          move.w  #20-1,d5                        ; d5 = height
000E15B0 2C3C 0080 0000                     move.l  #$800000,d6                     ; d6 = cmd row delta 
000E15B6                            
000E15B6                            .LoopRow:                              
000E15B6 2D43 0004                          move.l  d3,VDPCTRL-VDPDATA(a6)          ; set addr
000E15BA 3E04                               move.w  d4,d7                           ; copy width to d7
000E15BC                            
000E15BC                            .LoopColumn:            
000E15BC 4EB8 2B1A                          jsr     CalcRandom                      ; get rand
000E15C0 0240 003F                          andi.w  #$003F,d0                       ; mask high bits of tile no.
000E15C4 0040 2200                          ori.w   #$2200,d0                       ; set line 2 and id $1XX
000E15C8 3C80                               move.w  d0,(a6)                         ; write 1 tile
000E15CA D007                               add.b   d7,d0                           ; add whatever d7 is to d0
000E15CC 0240 003F                          andi.w  #$003F,d0                       ; do the same to it
000E15D0 0040 2200                          ori.w   #$2200,d0
000E15D4 3C80                               move.w  d0,(a6)                         ; write 1 tile
000E15D6                            
000E15D6 51CF FFE4                          dbf     d7,.LoopColumn                  ; loop for width
000E15DA D686                               add.l   d6,d3                           ; move to next row
000E15DC 51CD FFD8                          dbf     d5,.LoopRow                     ; loop for height
000E15E0 4E75                               rts
000E15E2                            
000E15E2                            ; ---------------------------------------------------------------------------
000E15E2                            ; local memory usage derived from global (this sucks)
000E15E2                            
000E15E2                            
000E15E2                                    include 'beebush/Objects.asm'
000E15E2                            ; ---------------------------------------------------------------------------
000E15E2                            ; Bee Bush Screen objects library
000E15E2                            ; Depends on Stock Sonic 1 object library and sprite renderer
000E15E2                            ; ---------------------------------------------------------------------------
000E15E2                            
000E15E2 =00000038                  OBJ.GRAVITY    EQU     56              ; Gravity delta
000E15E2                            
000E15E2                                                rsreset
000E15E2 =00000000                  obj.No:             rs.b 1                  
000E15E2 =00000001                  obj.Render:         rs.b 1                  
000E15E2 =00000002                  obj.Tile:           rs.b 2                  
000E15E2 =00000004                  obj.Map:            rs.b 4                  
000E15E2 =00000008                  obj.X:              rs.b 2                  
000E15E2 =0000000A                  obj.YScr:           rs.b 2                  
000E15E2 =0000000C                  obj.Y:              rs.b 2                  
000E15E2 =0000000E                  obj.YSub:           rs.b 2                  
000E15E2 =00000010                  obj.XSpeed:         rs.b 2                  
000E15E2 =00000012                  obj.YSpeed:         rs.b 2                  
000E15E2 =00000014                  obj.Momentum:       rs.b 2                  
000E15E2 =00000016                  obj.YRad:           rs.b 1                  
000E15E2 =00000017                  obj.XRad:           rs.b 1                  
000E15E2 =00000018                  obj.XDraw:          rs.b 1                  
000E15E2 =00000019                  obj.Priority:       rs.b 1                  
000E15E2 =0000001A                  obj.Frame:          rs.b 1                  
000E15E2 =0000001B                  obj.AnimFrame:      rs.b 1                  
000E15E2 =0000001C                  obj.Anim:           rs.b 1                  
000E15E2 =0000001D                  obj.LastAnim:       rs.b 1                  
000E15E2 =0000001E                  obj.FrameTimer:     rs.b 1                  
000E15E2 =0000001F                  obj.FrameMirr:      rs.b 1                  
000E15E2 =00000020                  obj.Collision:      rs.b 1                  
000E15E2 =00000021                  obj.ColliCnt:       rs.b 1                  
000E15E2 =00000022                  obj.Status:         rs.b 1                  
000E15E2 =00000023                  obj.Respawn:        rs.b 1                  
000E15E2 =00000024                  obj.Action:         rs.b 1                  
000E15E2 =00000025                  obj.SubAction:      rs.b 1                  
000E15E2 =00000026                  obj.Angle:          rs.b 2                  
000E15E2 =00000028                  obj.Arg:            rs.b 1                   
000E15E2                            
000E15E2                            ; --------------------------------------------------------------------------- 
000E15E2                            
000E15E2 =00000000                  STAT.XDIR:       equ 0
000E15E2 =00000001                  STAT.YDIR:       equ 1                  
000E15E2 =00000003                  STAT.HOISTING:   equ 3                  
000E15E2 =00000005                  STAT.PUSHED:     equ 5                  
000E15E2 =00000007                  STAT.FLAG:       equ 7
000E15E2                            
000E15E2                            ; ---------------------------------------------------------------------------
000E15E2                            
000E15E2 =00000000                  PHYS.DIR:        equ 0                  
000E15E2 =00000001                  PHYS.AIRBORNE:   equ 1                  
000E15E2 =00000002                  PHYS.ROLLING:    equ 2                  
000E15E2 =00000003                  PHYS.HOISTED:    equ 3                  
000E15E2 =00000004                  PHYS.ROLLJUMP:   equ 4                  
000E15E2 =00000005                  PHYS.PUSH:       equ 5                  
000E15E2 =00000006                  PHYS.WATER:      equ 6
000E15E2 =00000007                  PHYS.FLAG:       equ 7
000E15E2                            
000E15E2                            ; ---------------------------------------------------------------------------
000E15E2                            
000E15E2 =00000000                  REND.XMIRR:      equ 0
000E15E2 =00000001                  REND.YMIRR:      equ 1
000E15E2 =00000002                  REND.CAMOFF:     equ 2
000E15E2 =00000003                  REND.CAMOFF2:    equ 3
000E15E2 =00000004                  REND.HEIGHT:     equ 4
000E15E2 =00000005                  REND.SPTYPE:     equ 5
000E15E2 =00000006                  REND.BEHIND:     equ 6                  
000E15E2 =00000007                  REND.ONSCREEN:   equ 7
000E15E2                            
000E15E2                            ; ---------------------------------------------------------------------------
000E15E2                            
000E15E2                            _beebushRunObjects:                             
000E15E2 41F8 D000                          lea     OBJECTRAM.w,a0
000E15E6 7E5F                               moveq   #96-1,d7
000E15E8 7000                               moveq   #0,d0
000E15EA                            
000E15EA                            .RunObjLoop:                       
000E15EA 1010                               move.b  obj.No(a0),d0
000E15EC 6700                               beq.s   .EmptySlot
000E15EE D040                               add.w   d0,d0
000E15F0 D040                               add.w   d0,d0
000E15F2 227B 0000                          movea.l .ObjectIndex-4(pc,d0.w),a1       ; No zero offset - start at 1
000E15F6 4E91                               jsr     (a1)
000E15F8 7000                               moveq   #0,d0
000E15FA                            
000E15FA                            .EmptySlot:                            
000E15FA 41E8 0040                          lea     OBJSZ(a0),a0            ; Move into next object memory space
000E15FE 51CF FFEA                          dbf     d7,.RunObjLoop
000E1602 4E75                               rts
000E1604                            
000E1604                            ; ---------------------------------------------------------------------------
000E1604                            ; Object Index for Bee Bush
000E1604                            ; ---------------------------------------------------------------------------
000E1604 =00000001                  BBUSH_OBJNO_PLAYER      = 1
000E1604 =00000002                  BBUSH_OBJNO_BODY        = 2
000E1604 =00000003                  BBUSH_OBJNO_HEAD        = 3
000E1604 =00000004                  BBUSH_OBJNO_EYES        = 4
000E1604 =00000005                  BBUSH_OBJNO_MOUTH       = 5
000E1604 =00000006                  BBUSH_OBJNO_DBUG        = 6
000E1604                            
000E1604                            
000E1604                            .ObjectIndex:    
000E1604 0000 0000                          dc.l BbushObj_Player
000E1608 0000 0000                          dc.l BbushObj_QuagmireBody
000E160C 0000 0000                          dc.l BbushObj_QuagmireHead
000E1610 0000 0000                          dc.l BbushObj_QuagmireEyes
000E1614 0000 0000                          dc.l BbushObj_QuagmireMouth
000E1618 0000 0000                          dc.l BbushObj_Dbug
000E161C                            .Null:
000E161C 4E75                               rts 
000E161E                            
000E161E                                    include  "beebush/Objects/OBJ_QUAGMIRE.asm"
000E161E                            ; ---------------------------------------------------------------------------
000E161E                            ; Body
000E161E                            ; ---------------------------------------------------------------------------
000E161E                            
000E161E =00000030                  bbush.Flag  = $30
000E161E =00000032                  bbush.orgX  = $32
000E161E =00000034                  bbush.orgY  = $34
000E161E =00000036                  bbush.Cntr  = $36
000E161E =00000038                  bbush.Timer = $38
000E161E =00000039                  bbush.MvChk = $39
000E161E                            
000E161E                            
000E161E =00000300                  QUAGTILE = $300
000E161E                            
000E161E                            BbushObj_QuagmireBody:                          
000E161E 7000                               moveq   #0,d0
000E1620 1028 0024                          move.b  obj.Action(a0),d0
000E1624 323B 0000                          move.w  .Index(pc,d0.w),d1
000E1628 4EFB 1000                          jmp     .Index(pc,d1.w)
000E162C                            
000E162C                            ; ---------------------------------------------------------------------------
000E162C                            .Index:                                
000E162C 0000                               dc.w QuagmireBody_Init-.Index
000E162E 0000                               dc.w QuagmireBody_Display-.Index
000E1630                            ; ---------------------------------------------------------------------------
000E1630                            
000E1630                            QuagmireBody_Init:                         
000E1630 5428 0024                          addq.b  #2,obj.Action(a0)
000E1634 317C 00A8 0008                     move.w  #168,obj.X(a0)
000E163A 317C 00A0 000C                     move.w  #160,obj.Y(a0)
000E1640 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
000E1648 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E164E 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
000E1654 117C 0007 0019                     move.b  #7,obj.Priority(a0)
000E165A 117C 0002 001A                     move.b  #2,obj.Frame(a0)
000E1660 43F8 D040                          lea     membushHead,a1
000E1664 3368 0008 0008                     move.w  obj.X(a0),obj.X(a1)
000E166A 3368 000C 000C                     move.w  obj.Y(a0),obj.Y(a1)
000E1670 0469 003C 000C                     sub.w   #60,obj.Y(a1)
000E1676 5169 0008                          sub.w   #8,obj.X(a1)    
000E167A 3369 0008 0032                     move.w  obj.X(a1),bbush.orgX(a1)
000E1680 3369 000C 0034                     move.w  obj.Y(a1),bbush.orgY(a1)
000E1686                                  
000E1686                            
000E1686                            QuagmireBody_Display:                           
000E1686 4EB9 0000 DE68                     jsr     _objectDraw  
000E168C 4E75                               rts
000E168E                            
000E168E                            ; ---------------------------------------------------------------------------
000E168E                            ; Head
000E168E                            ; ---------------------------------------------------------------------------
000E168E                            
000E168E                            BbushObj_QuagmireHead:                          
000E168E 7000                               moveq   #0,d0
000E1690 1028 0024                          move.b  obj.Action(a0),d0
000E1694 323B 0000                          move.w  .Index(pc,d0.w),d1
000E1698 4EFB 1000                          jmp     .Index(pc,d1.w)
000E169C                            
000E169C                            ; ---------------------------------------------------------------------------
000E169C                            .Index:                                
000E169C 0000                               dc.w QuagmireHead_Init-.Index
000E169E 0000                               dc.w QuagmireHead_Display-.Index
000E16A0 0000                               dc.w QuagmireHead_InitBck-.Index
000E16A2 0000                               dc.w QuagmireHead_MoveBck-.Index
000E16A4 0000                               dc.w QuagmireHead_WaitInit-.Index
000E16A6 0000                               dc.w QuagmireHead_Wait-.Index
000E16A8                            ; ---------------------------------------------------------------------------
000E16A8                            
000E16A8                            QuagmireHead_Init:                         
000E16A8 5428 0024                          addq.b  #2,obj.Action(a0)
000E16AC 117C 0012 0016                     move.b  #18,obj.YRad(a0)
000E16B2 117C 0009 0017                     move.b  #9,obj.XRad(a0)
000E16B8 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
000E16C0 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E16C6 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
000E16CC 117C 0006 0019                     move.b  #6,obj.Priority(a0)
000E16D2 117C 0001 001A                     move.b  #1,obj.Frame(a0)
000E16D8                            
000E16D8                            QuagmireHead_Display:  
000E16D8 11FC 0003 D09A                     move.b  #3,(membushEyes+obj.Frame)
000E16DE 3168 0032 0008                     move.w  bbush.orgX(a0),obj.X(a0)
000E16E4 3168 0034 000C                     move.w  bbush.orgY(a0),obj.Y(a0)                    
000E16EA 4EB9 0000 DE68                     jsr     _objectDraw  
000E16F0 4E75                               rts
000E16F2                            
000E16F2                            QuagmireHead_InitBck:
000E16F2 117C 009A 0036                     move.b  #$9A,bbush.Cntr(a0)     ; set initial "phase" of sine
000E16F8 117C 003C 0038                     move.b  #60,bbush.Timer(a0)  
000E16FE 5428 0024                          addq.b  #2,obj.Action(a0)   
000E1702 11FC 0004 D09A                     move.b  #4,(membushEyes+obj.Frame)
000E1708                                
000E1708                            QuagmireHead_MoveBck:
000E1708 1028 0036                          move.b  bbush.Cntr(a0),d0
000E170C 5028 0036                          add.b   #8,bbush.Cntr(a0)
000E1710 4EB8 2B40                          jsr     CalcSinCos              ; note: d0 yshift div. needs to be 6 so adj.
000E1714                            
000E1714                            
000E1714 E840                               asr.w   #4,d0
000E1716 0C68 00B0 0008                     cmpi.w  #$B0,obj.X(a0)
000E171C                            
000E171C 3428 0032                          move.w  bbush.orgX(a0),d2
000E1720 9440                               sub.w   d0,d2
000E1722                            
000E1722 0C42 00B0                          cmpi.w  #$B0,d2
000E1726 6200                               bhi.s   .SkipSet
000E1728 0C42 0091                          cmpi.w  #$91,d2
000E172C 6500                               blo.s   .SkipSet
000E172E                            
000E172E 3142 0008                          move.w  d2,obj.X(a0)
000E1732                            
000E1732                            
000E1732 E640                               asr.w   #3,d0        
000E1734 3628 0034                          move.w  bbush.orgY(a0),d3
000E1738 D640                               add.w   d0,d3
000E173A 3143 000C                          move.w  d3,obj.Y(a0) 
000E173E                            
000E173E                            .SkipSet:
000E173E 4EB9 0000 DE68                     jsr     _objectDraw 
000E1744 5328 0038                          sub.b   #1,bbush.Timer(a0) 
000E1748 6700                               beq.s   .Exit
000E174A 4E75                               rts
000E174C                            .Exit:
000E174C 5428 0024                          addq.b  #2,obj.Action(a0)
000E1750 4E75                               rts  
000E1752                            
000E1752                            QuagmireHead_WaitInit:  
000E1752 5428 0024                          addq.b  #2,obj.Action(a0)     
000E1756 117C 001E 0038                     move.b  #30,bbush.Timer(a0) 
000E175C                            
000E175C                            QuagmireHead_Wait:
000E175C 4EB9 0000 DE68                     jsr     _objectDraw                    
000E1762 5328 0038                          sub.b   #1,bbush.Timer(a0) 
000E1766 6600                               bne.s   .Exit
000E1768 50E8 0030                          st      bbush.Flag(a0)
000E176C                            
000E176C                            .Exit:
000E176C 4E75                               rts
000E176E                            
000E176E                            ; ---------------------------------------------------------------------------
000E176E                            ; Eyes
000E176E                            ; ---------------------------------------------------------------------------
000E176E                            
000E176E                            BbushObj_QuagmireEyes:                          
000E176E 7000                               moveq   #0,d0
000E1770 1028 0024                          move.b  obj.Action(a0),d0
000E1774 323B 0000                          move.w  .Index(pc,d0.w),d1
000E1778 4EFB 1000                          jmp     .Index(pc,d1.w)
000E177C                            
000E177C                            ; ---------------------------------------------------------------------------
000E177C                            .Index:                                
000E177C 0000                               dc.w QuagmireEyes_Init-.Index
000E177E 0000                               dc.w QuagmireEyes_Display-.Index
000E1780                            ; ---------------------------------------------------------------------------
000E1780                            
000E1780                            QuagmireEyes_Init:                         
000E1780 5428 0024                          addq.b  #2,obj.Action(a0)
000E1784 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
000E178C 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E1792 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
000E1798 117C 0005 0019                     move.b  #5,obj.Priority(a0)
000E179E 117C 0003 001A                     move.b  #3,obj.Frame(a0)
000E17A4                            
000E17A4                            QuagmireEyes_Display:   
000E17A4 43F8 D040                          lea     membushHead,a1
000E17A8 3169 0008 0008                     move.w  obj.X(a1),obj.X(a0)
000E17AE 3169 000C 000C                     move.w  obj.Y(a1),obj.Y(a0)
000E17B4 0468 0016 000C                     sub.w   #22,obj.Y(a0)                        
000E17BA 4EB9 0000 DE68                     jsr     _objectDraw  
000E17C0 4E75                               rts
000E17C2                            
000E17C2                            ; ---------------------------------------------------------------------------
000E17C2                            ; Mouth
000E17C2                            ; ---------------------------------------------------------------------------
000E17C2                            
000E17C2                            BbushObj_QuagmireMouth:
000E17C2 7000                               moveq   #0,d0
000E17C4 1028 0024                          move.b  obj.Action(a0),d0
000E17C8 323B 0000                          move.w  .Index(pc,d0.w),d1
000E17CC 4EFB 1000                          jmp     .Index(pc,d1.w)
000E17D0                            
000E17D0                            ; ---------------------------------------------------------------------------
000E17D0                            .Index:                                
000E17D0 0000                               dc.w QuagmireMouth_Init1-.Index
000E17D2 0000                               dc.w QuagmireMouth_Speak1-.Index
000E17D4 0000                               dc.w QuagmireMouth_Init2-.Index
000E17D6 0000                               dc.w QuagmireMouth_Speak2-.Index
000E17D8                            ; ---------------------------------------------------------------------------
000E17D8                            
000E17D8                            QuagmireMouth_Init1:                         
000E17D8 5428 0024                          addq.b  #2,obj.Action(a0)
000E17DC 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
000E17E4 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E17EA 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
000E17F0 117C 0005 0019                     move.b  #5,obj.Priority(a0)
000E17F6 117C 0008 001A                     move.b  #8,obj.Frame(a0)
000E17FC                            
000E17FC                            QuagmireMouth_Speak1:   
000E17FC 6100 0000                          bsr.w   _quagEyeAdjToHead
000E1800 43F9 0000 0000                     lea     AniSpr_QuagmireMouth,a1
000E1806 6100 0000                          bsr.w   _objectAnimate
000E180A 4EB9 0000 DE68                     jsr     _objectDraw  
000E1810 4E75                               rts
000E1812                            
000E1812                            QuagmireMouth_Init2:   
000E1812 5228 001C                          addq.b  #1,obj.Anim(a0)
000E1816 5428 0024                          addq.b  #2,obj.Action(a0)
000E181A 5438 D064                          add.b   #2,(membushHead+obj.Action)
000E181E                            
000E181E                            QuagmireMouth_Speak2:
000E181E 6100 0000                          bsr.w   _quagEyeAdjToHead
000E1822 43F9 0000 0000                     lea     AniSpr_QuagmireMouth,a1
000E1828 6100 0000                          bsr.w   _objectAnimate
000E182C 4EB9 0000 DE68                     jsr     _objectDraw  
000E1832 4E75                               rts        
000E1834                            
000E1834                            _quagEyeAdjToHead:
000E1834 43F8 D040                          lea     membushHead,a1
000E1838 3169 0008 0008                     move.w  obj.X(a1),obj.X(a0)
000E183E 3169 000C 000C                     move.w  obj.Y(a1),obj.Y(a0)
000E1844 0668 000A 000C                     add.w   #10,obj.Y(a0)   
000E184A 4E75                               rts
000E184C                            
000E184C                            ; ---------------------------------------------------------------------------
000E184C                            AniSpr_QuagmireMouth:
000E184C                            .tbl
000E184C 0000                               dc.w quagvocal_imglennqua-.tbl
000E184E 0000                               dc.w quagvocal_beebush-.tbl
000E1850                            
000E1850                            quagvocal_imglennqua: 
000E1850                            
000E1850                                    ; playback speed delta (wait time)
000E1850 04                                 dc.b   4
000E1851                            
000E1851                                    ; "...im glenn quagmire"
000E1851 0808 0808 0806 0807 0506+          dc.b   8, 8, 8, 8, 8, 6, 8, 7, 5, 6, 8, 5, 6, 7, 8, 6, 5
000E1862                            
000E1862                                    ; "...and this is-"
000E1862 0808 0808 0806 0706 0706+          dc.b   8, 8, 8, 8, 8, 6, 7, 6, 7, 6, 7
000E186D                            
000E186D                                    ; routine chg
000E186D FC                                 dc.b   $FC
000E186E                            
000E186E                                    even
000E186E                            
000E186E                            quagvocal_beebush:
000E186E                            
000E186E                                    ; playback speed delta (wait time)
000E186E 04                                 dc.b   4
000E186F                            
000E186F                                    ; "bee bush"
000E186F 0708 0806 0608 0805 0507+          dc.b   7, 8, 8, 6, 6, 8, 8, 5, 5, 7, 7, 8, 8, 8, 8
000E187E                            
000E187E                                    ; loop 8 forever
000E187E FE01                               dc.b   $FE, 1
000E1880                                    even
000E1880                            
000E1880                            ; ---------------------------------------------------------------------------      
000E1880                            ; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
000E1880                            ; DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG 
000E1880                            ; ---------------------------------------------------------------------------  
000E1880                            
000E1880                            BbushObj_Dbug:                          
000E1880 4E75                               rts
000E1882                            
000E1882                            SprPat_Quagmire:
000E1882                                    include "beebush/Objects/SPRPAT_QUAGMIRE.asm"
000E1882                            Map_879c:
000E1882 0000                       Map_879c_0: 	dc.w Map_879c_12-Map_879c
000E1884 0000                       Map_879c_2: 	dc.w Map_879c_13-Map_879c
000E1886 0000                       Map_879c_4: 	dc.w Map_879c_3C-Map_879c
000E1888 0000                       Map_879c_6: 	dc.w Map_879c_56-Map_879c
000E188A 0000                       Map_879c_8: 	dc.w Map_879c_61-Map_879c
000E188C 0000                       Map_879c_A: 	dc.w Map_879c_6C-Map_879c
000E188E 0000                       Map_879c_C: 	dc.w Map_879c_72-Map_879c
000E1890 0000                       Map_879c_E: 	dc.w Map_879c_7D-Map_879c
000E1892 0000                       Map_879c_10: 	dc.w Map_879c_88-Map_879c
000E1894 00                         Map_879c_12: 	dc.b $0
000E1895 08                         Map_879c_13: 	dc.b $8
000E1896 D20F 0000 E7               	dc.b $D2, $F, $0, $0, $E7
000E189B D20F 0010 07               	dc.b $D2, $F, $0, $10, $7
000E18A0 F20F 0020 D7               	dc.b $F2, $F, $0, $20, $D7
000E18A5 F20F 0030 F7               	dc.b $F2, $F, $0, $30, $F7
000E18AA F207 0040 17               	dc.b $F2, $7, $0, $40, $17
000E18AF 120E 0048 D7               	dc.b $12, $E, $0, $48, $D7
000E18B4 120E 0054 F7               	dc.b $12, $E, $0, $54, $F7
000E18B9 1205 0060 17               	dc.b $12, $5, $0, $60, $17
000E18BE 05                         Map_879c_3C: 	dc.b $5
000E18BF E70F 0064 E7               	dc.b $E7, $F, $0, $64, $E7
000E18C4 070F 0074 E7               	dc.b $7, $F, $0, $74, $E7
000E18C9 E70B 0084 07               	dc.b $E7, $B, $0, $84, $7
000E18CE 070B 0090 07               	dc.b $7, $B, $0, $90, $7
000E18D3 D709 00DD EF               	dc.b $D7, $9, $0, $DD, $EF
000E18D8 02                         Map_879c_56: 	dc.b $2
000E18D9 F306 00A8 ED               	dc.b $F3, $6, $0, $A8, $ED
000E18DE F306 00AE 01               	dc.b $F3, $6, $0, $AE, $1
000E18E3 02                         Map_879c_61: 	dc.b $2
000E18E4 F306 009C ED               	dc.b $F3, $6, $0, $9C, $ED
000E18E9 F306 00A2 01               	dc.b $F3, $6, $0, $A2, $1
000E18EE 01                         Map_879c_6C: 	dc.b $1
000E18EF FD09 00B4 F2               	dc.b $FD, $9, $0, $B4, $F2
000E18F4 02                         Map_879c_72: 	dc.b $2
000E18F5 F70E 00BA F0               	dc.b $F7, $E, $0, $BA, $F0
000E18FA EF00 00C6 08               	dc.b $EF, $0, $0, $C6, $8
000E18FF 02                         Map_879c_7D: 	dc.b $2
000E1900 F306 00C7 00               	dc.b $F3, $6, $0, $C7, $0
000E1905 FB06 00CD F0               	dc.b $FB, $6, $0, $CD, $F0
000E190A 02                         Map_879c_88: 	dc.b $2
000E190B FC0D 00D3 EC               	dc.b $FC, $D, $0, $D3, $EC
000E1910 F404 00DB 04               	dc.b $F4, $4, $0, $DB, $4
000E1916 00                         	even
000E1916 00                         	even
000E1916 00                         	even
000E1916                                    include  "beebush/Objects/OBJ_PLAYER.asm"
000E1916                                   
000E1916 =00000030                  bbplay.WindowSz        equ     $30
000E1916 =00000031                  bbplay.WindowCnt       equ     $31
000E1916 =00000034                  bbplay.Xorg            equ     $34
000E1916 =00000036                  bbplay.Yorg            equ     $36
000E1916                            
000E1916                            BbushObj_Player:                          
000E1916 7000                               moveq   #0,d0
000E1918 1028 0024                          move.b  obj.Action(a0),d0
000E191C 323B 0000                          move.w  .Index(pc,d0.w),d1
000E1920 4EFB 1000                          jmp     .Index(pc,d1.w)
000E1924                            ; ---------------------------------------------------------------------------
000E1924                            .Index:                                
000E1924 0000                               dc.w BbushPlayer_InitMain-.Index
000E1926 0000                               dc.w BbushPlayer_Main-.Index
000E1928                            ; ---------------------------------------------------------------------------
000E1928                            
000E1928                            BbushPlayer_InitMain:                         
000E1928 5428 0024                          addq.b  #2,obj.Action(a0)
000E192C 117C 0012 0016                     move.b  #18,obj.YRad(a0)
000E1932 117C 0009 0017                     move.b  #9,obj.XRad(a0)
000E1938 217C 0000 0000 0004                move.l  #SprPat_BBushPlayer,obj.Map(a0)
000E1940 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E1946 117C 0000 0001                     move.b  #0,obj.Render(a0)
000E194C 317C 014A 0008                     move.w  #160+42+128,obj.X(a0)
000E1952 317C 00E4 000A                     move.w  #100+128,obj.YScr(a0)
000E1958 117C 0002 0019                     move.b  #2,obj.Priority(a0)
000E195E 117C 0003 001A                     move.b  #3,obj.Frame(a0)
000E1964 317C 9204 0030                     move.w  #$9204,bbplay.WindowSz(a0)
000E196A 6000                               bra.s   BbushPlayer_Main
000E196C                            
000E196C                            .strCams:
000E196C 2070 6C61 7920 6361 6D42+          dc.b    ' play camB camC camZ   dist                 ', -1
000E199A 00                                 even
000E199A                            
000E199A                            ; ---------------------------------------------------------------------------
000E199A                            
000E199A                            BbushPlayer_Main:                           
000E199A 1838 F604                          move.b  joypad.w,d4         ;SACBRLDU
000E199E 1A38 F605                          move.b  joypadPress.w,d5    
000E19A2 6100 0000                          bsr.w   _bbplayNormalCtrl 
000E19A6 4EF9 0000 DE68                     jmp     _objectDraw   
000E19AC                            
000E19AC                            ; ---------------------------------------------------------------------------
000E19AC                            ; Control window vertical location  (VDPREG $12)
000E19AC                            ; ---------------------------------------------------------------------------
000E19AC                            
000E19AC                            _bbplayNormalCtrl:                                                 
000E19AC 0804 0002                          btst    #2,d4
000E19B0 6700                               beq.s   .NoLeft
000E19B2 5278 F700                          addi.w  #1,cameraAPosX
000E19B6 5278 F710                          addi.w  #1,cameraCPosX
000E19BA 53B8 F608                          subi.l  #1,distance
000E19BE 43F9 0000 0000                     lea     AniSpr_QuagmirePlayer,a1
000E19C4 4EF9 0000 0000                     jmp    _objectAnimate
000E19CA                            .NoLeft:                                             
000E19CA 4E75                               rts
000E19CC                            
000E19CC                            AniSpr_QuagmirePlayer:
000E19CC                            .tbl
000E19CC 0000                               dc.w .qaugplaywalk-.tbl
000E19CE                            
000E19CE                            .qaugplaywalk: 
000E19CE 08                                 dc.b   8
000E19CF 0102 0304 0506 07FF                dc.b   1, 2, 3, 4, 5, 6, 7, $FF
000E19D8 00                                 even 
000E19D8                            
000E19D8                            ; ---------------------------------------------------------------------------
000E19D8                            
000E19D8                            _bbplayPrintCams:
000E19D8 4E75                               rts
000E19DA                            
000E19DA                            ; ---------------------------------------------------------------------------
000E19DA                            
000E19DA                            SprPat_BBushPlayer:
000E19DA                                    include "beebush/Objects/SPRPAT_PLAYER.asm"
000E19DA                            Map_ffc1:
000E19DA 0000                       Map_ffc1_0: 	dc.w Map_ffc1_14-Map_ffc1
000E19DC 0000                       Map_ffc1_2: 	dc.w Map_ffc1_15-Map_ffc1
000E19DE 0000                       Map_ffc1_4: 	dc.w Map_ffc1_43-Map_ffc1
000E19E0 0000                       Map_ffc1_6: 	dc.w Map_ffc1_71-Map_ffc1
000E19E2 0000                       Map_ffc1_8: 	dc.w Map_ffc1_9F-Map_ffc1
000E19E4 0000                       Map_ffc1_A: 	dc.w Map_ffc1_CD-Map_ffc1
000E19E6 0000                       Map_ffc1_C: 	dc.w Map_ffc1_FB-Map_ffc1
000E19E8 0000                       Map_ffc1_E: 	dc.w Map_ffc1_129-Map_ffc1
000E19EA 0000                       Map_ffc1_10: 	dc.w Map_ffc1_157-Map_ffc1
000E19EC 0000                       Map_ffc1_12: 	dc.w Map_ffc1_15D-Map_ffc1
000E19EE 00                         Map_ffc1_14: 	dc.b $0
000E19EF 09                         Map_ffc1_15: 	dc.b $9
000E19F0 D10F 0103 EF               	dc.b $D1, $F, $1, $3, $EF
000E19F5 F309 0113 FB               	dc.b $F3, $9, $1, $13, $FB
000E19FA E40E 0119 0B               	dc.b $E4, $E, $1, $19, $B
000E19FF E40E 0919 DE               	dc.b $E4, $E, $9, $19, $DE
000E1A04 EE04 007E FC               	dc.b $EE, $4, $0, $7E, $FC
000E1A09 000A 0165 ED               	dc.b $0, $A, $1, $65, $ED
000E1A0E 1806 016E ED               	dc.b $18, $6, $1, $6E, $ED
000E1A13 000E 0931 04               	dc.b $0, $E, $9, $31, $4
000E1A18 160A 093D 0C               	dc.b $16, $A, $9, $3D, $C
000E1A1D 09                         Map_ffc1_43: 	dc.b $9
000E1A1E D00F 00E3 F1               	dc.b $D0, $F, $0, $E3, $F1
000E1A23 F309 0113 FC               	dc.b $F3, $9, $1, $13, $FC
000E1A28 E40E 0119 0B               	dc.b $E4, $E, $1, $19, $B
000E1A2D E40E 0919 DF               	dc.b $E4, $E, $9, $19, $DF
000E1A32 EE04 007E FD               	dc.b $EE, $4, $0, $7E, $FD
000E1A37 000A 0165 EE               	dc.b $0, $A, $1, $65, $EE
000E1A3C 1806 016E EE               	dc.b $18, $6, $1, $6E, $EE
000E1A41 000A 0956 04               	dc.b $0, $A, $9, $56, $4
000E1A46 1806 095F 0C               	dc.b $18, $6, $9, $5F, $C
000E1A4B 09                         Map_ffc1_71: 	dc.b $9
000E1A4C D00F 00E3 F3               	dc.b $D0, $F, $0, $E3, $F3
000E1A51 F309 0113 FC               	dc.b $F3, $9, $1, $13, $FC
000E1A56 E40E 0119 0C               	dc.b $E4, $E, $1, $19, $C
000E1A5B E40E 0919 DF               	dc.b $E4, $E, $9, $19, $DF
000E1A60 EE04 007E FE               	dc.b $EE, $4, $0, $7E, $FE
000E1A65 FF0A 0156 EE               	dc.b $FF, $A, $1, $56, $EE
000E1A6A 1706 015F EE               	dc.b $17, $6, $1, $5F, $EE
000E1A6F 000A 0956 05               	dc.b $0, $A, $9, $56, $5
000E1A74 1806 095F 0D               	dc.b $18, $6, $9, $5F, $D
000E1A79 09                         Map_ffc1_9F: 	dc.b $9
000E1A7A D00F 00E3 F5               	dc.b $D0, $F, $0, $E3, $F5
000E1A7F F309 0113 FD               	dc.b $F3, $9, $1, $13, $FD
000E1A84 E40E 0119 0D               	dc.b $E4, $E, $1, $19, $D
000E1A89 E40E 0919 E0               	dc.b $E4, $E, $9, $19, $E0
000E1A8E EE04 007E FF               	dc.b $EE, $4, $0, $7E, $FF
000E1A93 FF0A 0174 EF               	dc.b $FF, $A, $1, $74, $EF
000E1A98 1706 017D EF               	dc.b $17, $6, $1, $7D, $EF
000E1A9D 000A 0956 06               	dc.b $0, $A, $9, $56, $6
000E1AA2 1806 095F 0E               	dc.b $18, $6, $9, $5F, $E
000E1AA7 09                         Map_ffc1_CD: 	dc.b $9
000E1AA8 D10F 00F3 F7               	dc.b $D1, $F, $0, $F3, $F7
000E1AAD F309 0113 FE               	dc.b $F3, $9, $1, $13, $FE
000E1AB2 E40E 0119 0E               	dc.b $E4, $E, $1, $19, $E
000E1AB7 E40E 0919 E1               	dc.b $E4, $E, $9, $19, $E1
000E1ABC EE04 007E 00               	dc.b $EE, $4, $0, $7E, $0
000E1AC1 FF0E 0131 E8               	dc.b $FF, $E, $1, $31, $E8
000E1AC6 1706 013D E8               	dc.b $17, $6, $1, $3D, $E8
000E1ACB 000A 0956 07               	dc.b $0, $A, $9, $56, $7
000E1AD0 1806 095F 0F               	dc.b $18, $6, $9, $5F, $F
000E1AD5 09                         Map_ffc1_FB: 	dc.b $9
000E1AD6 D10F 00E3 F3               	dc.b $D1, $F, $0, $E3, $F3
000E1ADB F309 0113 FA               	dc.b $F3, $9, $1, $13, $FA
000E1AE0 E40E 0119 0A               	dc.b $E4, $E, $1, $19, $A
000E1AE5 E40E 0919 DF               	dc.b $E4, $E, $9, $19, $DF
000E1AEA EE04 007E FB               	dc.b $EE, $4, $0, $7E, $FB
000E1AEF 000A 0156 EC               	dc.b $0, $A, $1, $56, $EC
000E1AF4 1806 015F EC               	dc.b $18, $6, $1, $5F, $EC
000E1AF9 100B 0943 0B               	dc.b $10, $B, $9, $43, $B
000E1AFE 0009 094F 04               	dc.b $0, $9, $9, $4F, $4
000E1B03 09                         Map_ffc1_129: 	dc.b $9
000E1B04 D00F 00E3 F2               	dc.b $D0, $F, $0, $E3, $F2
000E1B09 F309 0113 FA               	dc.b $F3, $9, $1, $13, $FA
000E1B0E E40E 0119 0A               	dc.b $E4, $E, $1, $19, $A
000E1B13 E40E 0919 DE               	dc.b $E4, $E, $9, $19, $DE
000E1B18 EE04 007E FD               	dc.b $EE, $4, $0, $7E, $FD
000E1B1D 000A 0165 EC               	dc.b $0, $A, $1, $65, $EC
000E1B22 1806 016E EC               	dc.b $18, $6, $1, $6E, $EC
000E1B27 000A 0974 04               	dc.b $0, $A, $9, $74, $4
000E1B2C 1806 097D 0C               	dc.b $18, $6, $9, $7D, $C
000E1B31 01                         Map_ffc1_157: 	dc.b $1
000E1B32 F00F 0183 F0               	dc.b $F0, $F, $1, $83, $F0
000E1B37 01                         Map_ffc1_15D: 	dc.b $1
000E1B38 F00F 0193 F0               	dc.b $F0, $F, $1, $93, $F0
000E1B3E 00                         	even
000E1B3E 00                         	even
000E1B3E 00                         	even
000E1B3E                            
000E1B3E                            ; ---------------------------------------------------------------------------
000E1B3E                            ; Animate an object based on an animation script
000E1B3E                            ; !!!TODO: document script
000E1B3E                            ; ---------------------------------------------------------------------------
000E1B3E                            
000E1B3E                            _objectAnimate:                         
000E1B3E 7000                               moveq   #0,d0
000E1B40 1028 001C                          move.b  obj.Anim(a0),d0
000E1B44 B028 001D                          cmp.b   obj.LastAnim(a0),d0
000E1B48 6700                               beq.s   .DoAnim
000E1B4A 1140 001D                          move.b  d0,obj.LastAnim(a0)
000E1B4E 117C 0000 001B                     move.b  #0,obj.AnimFrame(a0)
000E1B54 117C 0000 001E                     move.b  #0,obj.FrameTimer(a0)
000E1B5A                            
000E1B5A                            .DoAnim:                               
000E1B5A D040                               add.w   d0,d0
000E1B5C D2F1 0000                          adda.w  (a1,d0.w),a1
000E1B60 5328 001E                          subq.b  #1,obj.FrameTimer(a0)
000E1B64 6A00                               bpl.s   .Exit
000E1B66 1151 001E                          move.b  (a1),obj.FrameTimer(a0)
000E1B6A 7200                               moveq   #0,d1
000E1B6C 1228 001B                          move.b  obj.AnimFrame(a0),d1
000E1B70 1031 1001                          move.b  1(a1,d1.w),d0
000E1B74 6B00                               bmi.s   .HandleFlags
000E1B76                            
000E1B76                            .Finish:                               
000E1B76 1200                               move.b  d0,d1
000E1B78 0200 001F                          andi.b  #$1F,d0
000E1B7C 1140 001A                          move.b  d0,obj.Frame(a0)
000E1B80 1028 0022                          move.b  obj.Status(a0),d0
000E1B84 0200 0003                          andi.b  #3,d0
000E1B88 0228 00FC 0001                     andi.b  #$FC,obj.Render(a0)
000E1B8E EA09                               lsr.b   #5,d1
000E1B90 B101                               eor.b   d0,d1
000E1B92 8328 0001                          or.b    d1,obj.Render(a0)
000E1B96 5228 001B                          addq.b  #1,obj.AnimFrame(a0)
000E1B9A                            
000E1B9A                            .Exit:                                 
000E1B9A 4E75                               rts
000E1B9C                            
000E1B9C                            .HandleFlags:                          
000E1B9C 5200                               addq.b  #1,d0
000E1B9E 6600                               bne.s   .NotLoop
000E1BA0 117C 0000 001B                     move.b  #0,obj.AnimFrame(a0)
000E1BA6 1029 0001                          move.b  1(a1),d0
000E1BAA 60CA                               bra.s   .Finish
000E1BAC                            
000E1BAC                            .NotLoop:                              
000E1BAC 5200                               addq.b  #1,d0
000E1BAE 6600                               bne.s   .NotBack
000E1BB0 1031 1002                          move.b  2(a1,d1.w),d0
000E1BB4 9128 001B                          sub.b   d0,obj.AnimFrame(a0)
000E1BB8 9200                               sub.b   d0,d1
000E1BBA 1031 1001                          move.b  1(a1,d1.w),d0
000E1BBE 60B6                               bra.s   .Finish
000E1BC0                            
000E1BC0                            .NotBack:                              
000E1BC0 5200                               addq.b  #1,d0
000E1BC2 6600                               bne.s   .NotChgAni
000E1BC4 1171 1002 001C                     move.b  2(a1,d1.w),obj.Anim(a0)
000E1BCA                            
000E1BCA                            .NotChgAni:                            
000E1BCA 5200                               addq.b  #1,d0
000E1BCC 6600                               bne.s   .NotRoutine
000E1BCE 5428 0024                          addq.b  #2,obj.Action(a0)
000E1BD2                            
000E1BD2                            .NotRoutine:                           
000E1BD2 5200                               addq.b  #1,d0
000E1BD4 6600                               bne.s   .NotReset
000E1BD6 117C 0000 001B                     move.b  #0,obj.AnimFrame(a0)
000E1BDC 4228 0025                          clr.b   obj.SubAction(a0)
000E1BE0                            
000E1BE0                            .NotReset:                             
000E1BE0 4E75                               rts
000E1BE0 4E75                               rts
000E1BE2                            
000E1BE2                            ; ---------------------------------------------------------------------------
000E1BE2                            
000E1BE2                            _beebushDbugLoad:
000E1BE2 4E75                               rts
000E1BE4                            ; ---------------------------------------------------------------------------   
000E1BE4                            ; VBlank code relocation from main file (called from Jmptos)
000E1BE4                            ; ---------------------------------------------------------------------------
000E1BE4                            
000E1BE4                            VBLANK_BEEBUSH:                               
000E1BE4 4EB8 11DC                          jsr   ReadJoypads
000E1BE8                            
000E1BE8 33FC 0100 00A1 1100                move.w  #$100,Z80BUS
000E1BF0                            .WaitZ80:                              
000E1BF0 0839 0000 00A1 1100                btst    #0,Z80BUS
000E1BF8 66F6                               bne.s   .WaitZ80
000E1BFA                            
000E1BFA 33FC 8B00 00C0 0004                move.w  #$8B00+%0000,VDPCTRL
000E1C54 23F8 F61A 00C0 0000                move.l  mainAPosX.w,VDPDATA
000E1C5C                            
000E1C5C 33FC 0000 00A1 1100                move.w  #0,Z80BUS
000E1C64 4E75                               rts
000E1C66                            
000E1C66                            ; ---------------------------------------------------------------------------
000E1C66                            
000E1C66                            VBLANK_BEEBUSHSCR:                               
000E1C66 4EB8 11DC                          jsr  ReadJoypads
000E1C6A                            
000E1C6A 33FC 0100 00A1 1100                move.w  #$100,Z80BUS
000E1C72                            .WaitZ80:                              
000E1C72 0839 0000 00A1 1100                btst    #0,Z80BUS
000E1C7A 66F6                               bne.s   .WaitZ80
000E1C7C                            
000E1C7C 33FC 8B03 00C0 0004                move.w  #$8B00+%0011,VDPCTRL
000E1CF0                            
000E1CF0 33FC 0000 00A1 1100                move.w  #0,Z80BUS
000E1CF8 4E75                               rts
000E1CF8 4E75                               rts
000E1CFA                            ; end of 'ROM'
000E1CFA                            EndOfRom:
000E1CFA                            
000E1CFA                            
